[
  {
    "id" : "f8e495cc-5503-4fdf-8159-a561b4815dfc",
    "prId" : 39486,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39486#pullrequestreview-15386706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1946b5ec-a7df-46f7-9e03-94f54e626679",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I can take this bit out if we want to just apply this to the jsonpath printer for starters, as it is a slight behavior change (allow sets missingkey to zero instead of default). Or I could have allow set missingkey to default to retain the current behavior.",
        "createdAt" : "2017-01-05T20:35:37Z",
        "updatedAt" : "2017-01-09T15:39:12Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "80c5cd8b8892f8c14e05e550d732a5e8a8f5387d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2535,2539 @@\n// AllowMissingKeys tells the template engine if missing keys are allowed.\nfunc (p *TemplatePrinter) AllowMissingKeys(allow bool) {\n\tif allow {\n\t\tp.template.Option(\"missingkey=default\")"
  },
  {
    "id" : "6b5bd93f-58d5-4ba8-9aac-62c4673459f9",
    "prId" : 39486,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39486#pullrequestreview-15732548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf0c8564-233e-490d-85a7-6e3e7f5ba73d",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "How about extending `NewTemplatePrinter` with that new flag since we're passing it every time we use it?",
        "createdAt" : "2017-01-09T16:09:03Z",
        "updatedAt" : "2017-01-09T16:09:03Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "1b4c8375-823d-4852-9fd8-e9754afdcd7a",
        "parentId" : "bf0c8564-233e-490d-85a7-6e3e7f5ba73d",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Follow-up?",
        "createdAt" : "2017-01-09T16:09:35Z",
        "updatedAt" : "2017-01-09T16:09:35Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "d87b8069-0f4e-4714-8e03-524febfe9459",
        "parentId" : "bf0c8564-233e-490d-85a7-6e3e7f5ba73d",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Sure.",
        "createdAt" : "2017-01-09T16:10:35Z",
        "updatedAt" : "2017-01-09T16:10:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "80c5cd8b8892f8c14e05e550d732a5e8a8f5387d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +93,97 @@\t\t\treturn nil, false, fmt.Errorf(\"error parsing template %s, %v\\n\", formatArgument, err)\n\t\t}\n\t\ttemplatePrinter.AllowMissingKeys(allowMissingTemplateKeys)\n\t\tprinter = templatePrinter\n\tcase \"templatefile\", \"go-template-file\":"
  },
  {
    "id" : "3ec367d4-c40d-4752-abe2-2d4c5be45ea7",
    "prId" : 38058,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38058#pullrequestreview-12270730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9478b3c3-cc03-41dd-b1b8-fea692dcde76",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Won't you get `{ Object: ... }` now?",
        "createdAt" : "2016-12-09T07:53:30Z",
        "updatedAt" : "2016-12-10T23:07:43Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9f159a21-cfd8-488c-83cd-e351e3b7022e",
        "parentId" : "9478b3c3-cc03-41dd-b1b8-fea692dcde76",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Unstructured has a custom marshaler.",
        "createdAt" : "2016-12-09T17:27:24Z",
        "updatedAt" : "2016-12-10T23:07:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "42e0eda3e41a2400863fe40bc684292b8c9d4e23",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +2524,2528 @@\tvar data []byte\n\tvar err error\n\tdata, err = json.Marshal(obj)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "992c3283-3362-4e42-9adb-79e11fc11f1c",
    "prId" : 36424,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36424#pullrequestreview-8453776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05cb6f5a-8727-4137-990c-328f536fc924",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "This doesn't tell the user what they did wrong.  Can you update the message to be more clear about what the user shoudl do?\n",
        "createdAt" : "2016-11-11T21:28:00Z",
        "updatedAt" : "2016-11-22T06:22:32Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "7ab5c571-8b49-4f63-bb38-55c6dc6b1025",
        "parentId" : "05cb6f5a-8727-4137-990c-328f536fc924",
        "authorId" : "9c76f9d4-eaaa-4ca5-ab15-871535509602",
        "body" : "It is a unified format of the message. \ne.g. \n`kubectl get ns --all-namespaces`\n\n```\nNAMESPACE   NAME      STATUS    AGE\nnamespace is not namespaced\nnamespace is not namespaced\n```\n",
        "createdAt" : "2016-11-14T07:19:42Z",
        "updatedAt" : "2016-11-22T06:22:32Z",
        "lastEditedBy" : "9c76f9d4-eaaa-4ca5-ab15-871535509602",
        "tags" : [
        ]
      },
      {
        "id" : "fdde9405-75da-4cc5-9c1a-ae8853034616",
        "parentId" : "05cb6f5a-8727-4137-990c-328f536fc924",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : ":P That is annoying.  Thx\n",
        "createdAt" : "2016-11-14T18:18:32Z",
        "updatedAt" : "2016-11-22T06:22:32Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "b346911299dfb5727ebe12b765ec84d6dffc225d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1751,1755 @@func printClusterRole(clusterRole *rbac.ClusterRole, w io.Writer, options PrintOptions) error {\n\tif options.WithNamespace {\n\t\treturn fmt.Errorf(\"clusterRole is not namespaced\")\n\t}\n\treturn printObjectMeta(clusterRole.ObjectMeta, w, options, false)"
  },
  {
    "id" : "ccfa4196-2e2a-4e9a-9b40-43e2597ec5ec",
    "prId" : 36085,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36085#pullrequestreview-7072579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fa36ed2-9f29-413e-9ea9-29683212366c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "_twitch_\n",
        "createdAt" : "2016-11-03T17:46:51Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "365619ba-b3b9-4c87-bba3-81f0397b8162",
        "parentId" : "0fa36ed2-9f29-413e-9ea9-29683212366c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> twitch\n\nFound inside a list somewhere I think.  Given the way this code works, the change here is actually correct.  Well, more correct than it was before.  The whole thing needs some rethinking.\n",
        "createdAt" : "2016-11-03T18:23:51Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "61673c4b39606fc7e1de9a3cdd4ff5aaaebc0f31",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +2560,2564 @@\t}\n\n\tif unknown, ok := obj.(*runtime.Unknown); ok {\n\t\tdata, err := json.Marshal(unknown)\n\t\tif err != nil {"
  },
  {
    "id" : "bba15921-7554-46d8-a53e-fbb1724b3f5c",
    "prId" : 36085,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36085#pullrequestreview-7064796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "428c1765-6272-4e46-bffb-e8d9e508face",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Keep in mind unstructured really is \"generic API v1\" when used this way (with accessors).  So this code only works until someone changes metadata and then is horribly broken again.  Which is not inconsistent with what we've said up till now, that we won't change v1 metadata until we have server side transformation (we can't, effectively).\n",
        "createdAt" : "2016-11-03T17:48:18Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "61673c4b39606fc7e1de9a3cdd4ff5aaaebc0f31",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +2294,2298 @@\n\t// we don't recognize this type, but we can still attempt to print some reasonable information about.\n\tunstructured, ok := obj.(*runtime.Unstructured)\n\tif !ok {\n\t\treturn fmt.Errorf(\"error: unknown type %#v\", obj)"
  },
  {
    "id" : "3a3a7ef8-e614-4869-a59a-62fcccca6c22",
    "prId" : 36085,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36085#pullrequestreview-7185078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fd57024-d986-4cd6-9c03-c2f46a41129d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What is the TODO to make it less expensive?\n",
        "createdAt" : "2016-11-04T09:14:16Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f9c9f5a9-46f8-4127-9a12-517e7cb59c25",
        "parentId" : "5fd57024-d986-4cd6-9c03-c2f46a41129d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> What is the TODO to make it less expensive?\n\nClayton wants to change the API server to support printing. We'd use that and this would drop out.\n",
        "createdAt" : "2016-11-04T11:48:10Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "61673c4b39606fc7e1de9a3cdd4ff5aaaebc0f31",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +2262,2266 @@\n\t// check if the object is unstructured.  If so, let's attempt to convert it to a type we can understand before\n\t// trying to print, since the printers are keyed by type.  This is extremely expensive.\n\tswitch obj.(type) {\n\tcase *runtime.Unstructured, *runtime.Unknown:"
  },
  {
    "id" : "b3c60235-ef67-44c4-9085-3dec5e963e0a",
    "prId" : 36033,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36033#pullrequestreview-18869359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6d4aef5-f0b9-4cec-a2a4-4234a7c62f0b",
        "parentId" : null,
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Can you please add a unit test for this (file resource_printer_test.go)?",
        "createdAt" : "2017-01-26T22:46:10Z",
        "updatedAt" : "2017-02-08T03:25:55Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "39cf01a5-487d-48c7-9315-982913b6d906",
        "parentId" : "c6d4aef5-f0b9-4cec-a2a4-4234a7c62f0b",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "yep",
        "createdAt" : "2017-01-27T16:00:05Z",
        "updatedAt" : "2017-02-08T03:25:56Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "946ecb549e170fdb49897e93ad41513ae3a0deb6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2146,2150 @@}\n\nfunc formatHPAMetrics(specs []autoscaling.MetricSpec, statuses []autoscaling.MetricStatus) string {\n\tif len(specs) == 0 {\n\t\treturn \"<none>\""
  },
  {
    "id" : "c85e1b32-202e-421b-82c7-9c7ccb867724",
    "prId" : 36033,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36033#pullrequestreview-86829497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd434d4a-bcf0-46ee-92eb-740e4af36861",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@DirectXMan12 @jszczepkowski This output violates kubectl output conventions.\r\n\r\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/kubectl-conventions.md#output-conventions\r\n\r\nThe spaces around the `/` make it inconvenient for simple processing.",
        "createdAt" : "2017-03-25T00:08:46Z",
        "updatedAt" : "2017-03-25T00:08:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7de4d726-8aef-4dda-86bd-64215fd566cf",
        "parentId" : "fd434d4a-bcf0-46ee-92eb-740e4af36861",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "cc @pwittrock ",
        "createdAt" : "2017-03-25T00:09:03Z",
        "updatedAt" : "2017-03-25T00:09:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0571e66d-b95b-4499-9095-281cc47f23e8",
        "parentId" : "fd434d4a-bcf0-46ee-92eb-740e4af36861",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "@pwittrock could you please take a look of pr: https://github.com/kubernetes/kubernetes/pull/56331? submitted a fix there. ",
        "createdAt" : "2018-01-05T06:32:43Z",
        "updatedAt" : "2018-01-05T06:32:43Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "946ecb549e170fdb49897e93ad41513ae3a0deb6",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2174,2178 @@\t\t\t\t\tcurrent = statuses[i].Resource.CurrentAverageValue.String()\n\t\t\t\t}\n\t\t\t\tlist = append(list, fmt.Sprintf(\"%s / %s\", current, spec.Resource.TargetAverageValue.String()))\n\t\t\t} else {\n\t\t\t\tcurrent := \"<unknown>\""
  },
  {
    "id" : "a274a482-0929-4337-bfd9-219bd6e979e1",
    "prId" : 33686,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33686#pullrequestreview-2046990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d5e0f58-5059-461c-bd81-aa94e2efbffb",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "doesn't the \"normal\" path also add a newline at the end?\n",
        "createdAt" : "2016-09-28T23:07:57Z",
        "updatedAt" : "2016-09-29T15:56:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "d74704254d6a00f92a6ac54de95ead3eded0b878",
    "line" : null,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t}\n\t\tbuf.WriteRune('\\n')\n\t\t_, err = buf.WriteTo(w)\n\t\treturn err\n\t}"
  },
  {
    "id" : "27e77d35-74b4-43d2-bd3c-dc69cf18fa87",
    "prId" : 32867,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32867#pullrequestreview-484334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e614a6fd-6314-4b72-a553-5415d2f054ec",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "Can someone help understand when is this function called . I was debugging this bug that I am trying to fix and my debugging reveals this function is not used at all. Also see this https://github.com/kubernetes/kubernetes/issues/29838\n",
        "createdAt" : "2016-09-18T17:01:02Z",
        "updatedAt" : "2016-09-18T17:25:52Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "39300b76-4ed8-4283-bbe6-988a7203d841",
        "parentId" : "e614a6fd-6314-4b72-a553-5415d2f054ec",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "It should be called. In your issue you don't get all of the events sorted because you probably have to deal with separate objects. Please move the discussion on the related issue since this is just a simple refactoring.\n",
        "createdAt" : "2016-09-18T17:16:01Z",
        "updatedAt" : "2016-09-18T17:25:52Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "3b595e01-0c1c-41e5-91c4-02c0c960beaf",
        "parentId" : "e614a6fd-6314-4b72-a553-5415d2f054ec",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@kargakis thanks, will do. I have verified that both get events and describe pod, dont call this function printEventList, not sure where else is this called.\n",
        "createdAt" : "2016-09-18T22:54:13Z",
        "updatedAt" : "2016-09-18T22:54:13Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "b87e8c79ca837a3425932b144d3e488711db5fb6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1632,1636 @@func printEventList(list *api.EventList, w io.Writer, options PrintOptions) error {\n\tsort.Sort(events.SortableEvents(list.Items))\n\tfor i := range list.Items {\n\t\tif err := printEvent(&list.Items[i], w, options); err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "c53728c8-063e-47ea-8c42-32b46b569bf6",
    "prId" : 30166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "429aedc5-b3f0-4da7-93ff-8bcebc271b84",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do you think the requesting user and whether or not a cert has been issued should be in the printer, or should they have to switch to the describer to see that?\n",
        "createdAt" : "2016-08-11T03:49:20Z",
        "updatedAt" : "2016-08-15T16:57:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab730a7179f2ec211276225ad2fd5b41653b723f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1726,1730 @@\nfunc extractCSRStatus(csr *certificates.CertificateSigningRequest) (string, error) {\n\tvar approved, denied bool\n\tfor _, c := range csr.Status.Conditions {\n\t\tswitch c.Type {"
  },
  {
    "id" : "ada1bc24-4f22-4485-b408-7d2906030c08",
    "prId" : 27379,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96714654-4e84-47da-93a0-fdf96b1eb38e",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "If there is already a print func per type, would it be reasonable to infer the resourceName and call `ResourceShortFormFor` here? I'm guessing the kind is passed in so you can set kindname for thirdparty resources, but the custom resource printer is just dumping obj.Data anyway, so maybe it doesn't need to use the same pattern.\n",
        "createdAt" : "2016-06-28T00:08:59Z",
        "updatedAt" : "2016-07-01T17:30:29Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "b1404e45-1fd9-41c3-9f72-45d15d4dd3ec",
        "parentId" : "96714654-4e84-47da-93a0-fdf96b1eb38e",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "I try to set `KindName` [in these lines](https://github.com/juanvallejo/kubernetes/blob/e10a59f93504c87367bf2f052af3639f73aa8b63/pkg/kubectl/cmd/get.go#L339-346) as an alias. If an alias for the specific resource is not found, `KindName` is simply passed as the long resource name\n\nIdeally, I would get a resource's name from the object that is passed to its `print` function, but, at least currently, I am unable to read that information from the object\n",
        "createdAt" : "2016-06-28T14:07:04Z",
        "updatedAt" : "2016-07-01T17:30:29Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "f4a9e44a-f9bc-4530-a42a-9b9c3a13f819",
        "parentId" : "96714654-4e84-47da-93a0-fdf96b1eb38e",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "You can get the kind from the object. All top-level api objects have an implicit `unversioned.TypeMeta`, so you should be able to determine the kind or alias by writing a helper function like\n\n```\nfunc getKindFor(obj *unversioned.TypeMeta) string {\n    kindName := obj.GroupVersionKind().Kind\n    if alias, ok := ResourceShortFormFor(kindName); ok {\n                kindName = alias\n    } else if kindName == \"\" {\n        kindName = \"unknown\"\n    }\n    return kindName\n}\n```\n\nI suggest you do something like the above to determine the kind name and alias inside each `print` call. You do still have to pass a `WithKind` bool in options, but that's reasonable.\n",
        "createdAt" : "2016-06-28T18:14:26Z",
        "updatedAt" : "2016-07-01T17:30:29Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "ca627bb8-d866-423d-b7f0-66e59341b0d6",
        "parentId" : "96714654-4e84-47da-93a0-fdf96b1eb38e",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Hm, I am receiving an error when trying to cast an object to `*unversioned.TypeMeta` any time I pass it to the above function. Also, any time I print `obj.GroupVersionKind().Kind` for each specific object, I get an empty string.\n",
        "createdAt" : "2016-06-28T19:39:01Z",
        "updatedAt" : "2016-07-01T17:30:29Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "3e593f6f-bb0c-4d16-a4c1-facee9c41bc5",
        "parentId" : "96714654-4e84-47da-93a0-fdf96b1eb38e",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "It looks like version/group/kind info gets stripped out of the object before its passed in here. So disregard my suggestion, the way you are currently getting kind is how it has to be done.\n",
        "createdAt" : "2016-06-29T18:07:50Z",
        "updatedAt" : "2016-07-01T17:30:29Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df60d6b640c263996e60286ff5497a2a0b3d33b",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +604,608 @@\tname := pod.Name\n\tnamespace := pod.Namespace\n\tkind := options.KindName\n\n\tif options.WithKind {"
  },
  {
    "id" : "c759ed0b-fed2-4b4d-bf11-81e6d259eb88",
    "prId" : 25816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95fe13ba-4e02-43b0-997a-848ce4371005",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Change it to something like \n\n``` go\nlastSchedule := \"<none>\"\nif scheduledJob.Status.LastScheduleTime != nil {\n  lastSchedule = scheduledJob.Status.LastScheduleTime.Time.Format(time.RFC1123Z)\n}\n// Then Fprint the output \n```\n",
        "createdAt" : "2016-08-01T18:25:54Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "1178beaa-53d0-485a-a154-db63448cddf0",
        "parentId" : "95fe13ba-4e02-43b0-997a-848ce4371005",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Done.\n",
        "createdAt" : "2016-08-02T14:09:37Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c68a9015308a7c4dfac396cdbe64f058aa3f73",
    "line" : null,
    "diffHunk" : "@@ -1,1 +985,989 @@\n\tlastScheduleTime := \"<none>\"\n\tif scheduledJob.Status.LastScheduleTime != nil {\n\t\tlastScheduleTime = scheduledJob.Status.LastScheduleTime.Time.Format(time.RFC1123Z)\n\t}"
  },
  {
    "id" : "c037c857-6148-481b-a796-064eace75b27",
    "prId" : 25305,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89eb0b2e-0969-4013-9915-d1877a6e92bd",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'd prefer to put IP before NODE. It will usually be shorter.\n",
        "createdAt" : "2016-05-09T20:46:42Z",
        "updatedAt" : "2016-05-12T04:32:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e830d03ffcddb51ca7274e3e630e59e7b208f781",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +634,638 @@\tif options.Wide {\n\t\tnodeName := pod.Spec.NodeName\n\t\tpodIP := pod.Status.PodIP\n\t\tif podIP == \"\" {\n\t\t\tpodIP = \"<none>\""
  },
  {
    "id" : "0985a746-910b-49f7-b86c-791ae1055d15",
    "prId" : 22772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3aa7b6b-f79f-4a65-b5a1-95497f33d430",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "kubectl get output should always be single-line. We can always print more in describe.\n\nhttps://github.com/kubernetes/kubernetes/blob/master/docs/devel/kubectl-conventions.md#output-conventions\n\ncc @bprashanth \n",
        "createdAt" : "2016-03-11T04:37:09Z",
        "updatedAt" : "2016-03-11T05:38:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "13d596b0-05c6-4f57-886a-5a54d3a3b304",
        "parentId" : "a3aa7b6b-f79f-4a65-b5a1-95497f33d430",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I suggest not changing `kubectl get ingress` in this PR. We need the container/image fix in ASAP.\n\nIngress won't be compliant with the convention, but we can fix it in 1.3, if necessary.\n",
        "createdAt" : "2016-03-11T04:40:59Z",
        "updatedAt" : "2016-03-11T05:38:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "858e1fb0-8072-4fd2-8fb6-ea6230462d56",
        "parentId" : "a3aa7b6b-f79f-4a65-b5a1-95497f33d430",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I begrudgingly concede, but one almost always wants to see the host and urls associated with an IP for Ingress. Even if output is getting piped through awk/grep, you're probably looking for more than just the ip.\n\nThat said, printing just the IP makes implementing kubectl get a lot easier: https://github.com/kubernetes/kubernetes/issues/22837\n",
        "createdAt" : "2016-03-11T05:10:30Z",
        "updatedAt" : "2016-03-11T05:38:18Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9788101e113e406e229bb4b66c2068f0b60ff92b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +955,959 @@\t}\n\n\t// Lay out all the rules on separate lines if use wide output.\n\t// TODO(AdoHe): improve ingress output\n\textraLinePrefix := \"\""
  },
  {
    "id" : "ec08be3e-e892-4fb7-8981-d34a99b1f39d",
    "prId" : 20557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2773291-9c57-4c05-a2eb-a7dd55f3b814",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please rebase. Deployment columns are now:\n\n```\nvar deploymentColumns = []string{\"NAME\", \"DESIRED\", \"CURRENT\", \"UP-TO-DATE\", \"AVAILABLE\", \"AGE\"}\n```\n\nAs suggested by @kargakis, please display DESIRED and CURRENT rather than just REPLICAS for ReplicationController.\n",
        "createdAt" : "2016-02-03T16:42:30Z",
        "updatedAt" : "2016-02-14T08:56:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "bd7d202f-26e5-4508-8e64-0c365f12632f",
        "parentId" : "e2773291-9c57-4c05-a2eb-a7dd55f3b814",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It could be done in a separate PR, but DESIRED and CURRENT would be nice to have for DaemonSet also.\n",
        "createdAt" : "2016-02-03T17:00:33Z",
        "updatedAt" : "2016-02-14T08:56:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f0e6011b-e45a-4b75-b47d-e089d7b65d47",
        "parentId" : "e2773291-9c57-4c05-a2eb-a7dd55f3b814",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "Ok, I will open a separate PR to add DESIRED and CURRENT to ReplicationController and DaemonSet as soon as possible.\n",
        "createdAt" : "2016-02-04T06:21:39Z",
        "updatedAt" : "2016-02-14T08:56:59Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "643e84af-b2c3-49e3-8467-9c71383cbc04",
        "parentId" : "e2773291-9c57-4c05-a2eb-a7dd55f3b814",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "@bgrant0607 I will open a separate PR to add DESIRED and CURRENT to ReplicationController and DaemonSet later.\n",
        "createdAt" : "2016-02-14T10:06:59Z",
        "updatedAt" : "2016-02-14T10:06:59Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "53d4b15b8748d23338da38b3862448f20248edc9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +397,401 @@var podColumns = []string{\"NAME\", \"READY\", \"STATUS\", \"RESTARTS\", \"AGE\"}\nvar podTemplateColumns = []string{\"TEMPLATE\", \"CONTAINER(S)\", \"IMAGE(S)\", \"PODLABELS\"}\nvar replicationControllerColumns = []string{\"CONTROLLER\", \"REPLICAS\", \"AGE\"}\nvar replicaSetColumns = []string{\"CONTROLLER\", \"REPLICAS\", \"AGE\"}\nvar jobColumns = []string{\"JOB\", \"SUCCESSFUL\"}"
  },
  {
    "id" : "e4f9f77a-8883-4668-839f-198f0d0a6625",
    "prId" : 20557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c1e6c38-481a-4310-995a-56611fe75410",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "While on this, can you rename REPLICAS to DESIRED and add CURRENT to show rc.status.replicas?\n\ncc: @bgrant0607 \n",
        "createdAt" : "2016-02-04T10:26:45Z",
        "updatedAt" : "2016-02-14T08:56:59Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "17f21651-bac6-4fb1-a5be-78b56826c9c4",
        "parentId" : "7c1e6c38-481a-4310-995a-56611fe75410",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We do want that change, but a separate PR is fine. \n",
        "createdAt" : "2016-02-04T15:01:00Z",
        "updatedAt" : "2016-02-14T08:56:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "53d4b15b8748d23338da38b3862448f20248edc9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +397,401 @@var podColumns = []string{\"NAME\", \"READY\", \"STATUS\", \"RESTARTS\", \"AGE\"}\nvar podTemplateColumns = []string{\"TEMPLATE\", \"CONTAINER(S)\", \"IMAGE(S)\", \"PODLABELS\"}\nvar replicationControllerColumns = []string{\"CONTROLLER\", \"REPLICAS\", \"AGE\"}\nvar replicaSetColumns = []string{\"CONTROLLER\", \"REPLICAS\", \"AGE\"}\nvar jobColumns = []string{\"JOB\", \"SUCCESSFUL\"}"
  },
  {
    "id" : "111d9041-1558-4bbe-8ca7-0faf05a7d9ab",
    "prId" : 20409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f72b12e-358a-487e-8f5d-47c07bc4d572",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "A strange side-effect of appendLabels is that it always appends a new line. Hrm. I guess it works out in this scenario.\n",
        "createdAt" : "2016-02-01T18:00:15Z",
        "updatedAt" : "2016-02-14T10:03:06Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "fc64a4da-ab0e-48c1-a195-c25e6b9d1897",
        "parentId" : "5f72b12e-358a-487e-8f5d-47c07bc4d572",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "Originally this method is always called to append user specify columns at last, so a new line delimiter is necessary.\n",
        "createdAt" : "2016-02-02T02:36:11Z",
        "updatedAt" : "2016-02-14T10:03:06Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6b5eca11c8e2bcd0250350ac57ee8b1535b7081",
    "line" : null,
    "diffHunk" : "@@ -1,1 +962,966 @@\t}\n\n\tif _, err := fmt.Fprintf(w, \"%s\\t%v\\t%v\\t%v\",\n\t\tname,\n\t\t\"-\","
  },
  {
    "id" : "0359d344-95f0-41ed-b32c-845809b52def",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd074cb4-32f7-4514-bc9c-e465130bb1f9",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "`runtime.Unknown` didn't `Marshal` correctly?  That would concern me.  @smarterclayton expected?\n",
        "createdAt" : "2016-03-10T14:16:07Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "3a813317-411d-4adb-b848-249d771b41b0",
        "parentId" : "cd074cb4-32f7-4514-bc9c-e465130bb1f9",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This is different.  We don't actually want to print the Unknown.  We only want to print its contents.\n",
        "createdAt" : "2016-03-24T22:50:16Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +257,261 @@func (p *JSONPrinter) PrintObj(obj runtime.Object, w io.Writer) error {\n\tswitch obj := obj.(type) {\n\tcase *runtime.Unknown:\n\t\t_, err := w.Write(obj.Raw)\n\t\treturn err"
  },
  {
    "id" : "97893e17-6cb2-497d-9a02-0ba54b5464c7",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d00b64a4-8e76-4482-8335-831847b37f81",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Do you have kind information?  I could see that being useful if I do `kubectl get foo.thirdparty1.com,bar.thirdparty2.com`\n",
        "createdAt" : "2016-03-10T14:18:29Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2668171c-4c7c-40f4-8bf2-e68c9ace3caa",
        "parentId" : "d00b64a4-8e76-4482-8335-831847b37f81",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Its tricky to get at it.  TODO'd\n",
        "createdAt" : "2016-03-24T22:50:23Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +433,437 @@\n// TODO: consider having 'KIND' for third party resource data\nvar thirdPartyResourceDataColumns = []string{\"NAME\", \"LABELS\", \"DATA\"}\nvar horizontalPodAutoscalerColumns = []string{\"NAME\", \"REFERENCE\", \"TARGET\", \"CURRENT\", \"MINPODS\", \"MAXPODS\", \"AGE\"}\nvar withNamespacePrefixColumns = []string{\"NAMESPACE\"} // TODO(erictune): print cluster name too."
  },
  {
    "id" : "ff2264a1-ee36-4ab6-a49f-01981a9332fe",
    "prId" : 16578,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a107956a-2e6d-4d31-b05e-345b22264738",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We should remove the trailing \\n when rebasing\n",
        "createdAt" : "2015-10-30T06:53:22Z",
        "updatedAt" : "2015-10-30T06:54:53Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "b62197e2-d3a8-4f10-9997-2c1a2b0b96ff",
        "parentId" : "a107956a-2e6d-4d31-b05e-345b22264738",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "See #16332\n",
        "createdAt" : "2015-10-30T06:53:51Z",
        "updatedAt" : "2015-10-30T06:53:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "27c06362a5cca9e2cdb04114653e5202638a71a5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +739,743 @@\n\tselector, _ := extensions.PodSelectorAsSelector(job.Spec.Selector)\n\t_, err := fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%s\\t%d\\n\",\n\t\tname,\n\t\tfirstContainer.Name,"
  },
  {
    "id" : "126b3968-9bb2-4feb-9ca9-e75e27eaa116",
    "prId" : 15957,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dea6b20-af76-4fd5-856b-0b25b1f01534",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "how do you know minPods is not nil?\n",
        "createdAt" : "2015-10-20T17:58:37Z",
        "updatedAt" : "2015-10-20T17:58:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e00eb035-8be9-47cf-baf0-bbb90fb959d9",
        "parentId" : "2dea6b20-af76-4fd5-856b-0b25b1f01534",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How did this compile previously?\n",
        "createdAt" : "2015-10-20T17:58:55Z",
        "updatedAt" : "2015-10-20T17:58:55Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe646837-72a9-4a96-bcaf-4e354c5f0a58",
        "parentId" : "2dea6b20-af76-4fd5-856b-0b25b1f01534",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "oh-- it's printf, I see.\n",
        "createdAt" : "2015-10-20T17:59:08Z",
        "updatedAt" : "2015-10-20T17:59:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "64073b1f-766b-4bcb-8282-23135f1c3bff",
        "parentId" : "2dea6b20-af76-4fd5-856b-0b25b1f01534",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "handle this in #15997\n",
        "createdAt" : "2015-10-21T00:36:25Z",
        "updatedAt" : "2015-10-21T00:36:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc522a76964082d17f8ead2136b3a8edb7b2f3da",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1385,1389 @@\t\ttarget,\n\t\tcurrent,\n\t\t*minPods,\n\t\tmaxPods,\n\t\ttranslateTimestamp(hpa.CreationTimestamp),"
  },
  {
    "id" : "c4c1aaf6-fe22-42c9-aa64-dc747639fa82",
    "prId" : 15499,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "384f3e78-188a-4d78-a51f-94a22fb3db43",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@liggitt how about wrapping it as a function?\n",
        "createdAt" : "2015-10-14T01:50:49Z",
        "updatedAt" : "2015-10-14T01:50:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9c8b76b6b2355001dc1a925263043b84b3c4586",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1478,1482 @@// GetNewTabWriter returns a tabwriter that translates tabbed columns in input into properly aligned text.\nfunc GetNewTabWriter(output io.Writer) *tabwriter.Writer {\n\treturn tabwriter.NewWriter(output, tabwriterMinWidth, tabwriterWidth, tabwriterPadding, tabwriterPadChar, tabwriterFlags)\n}\n"
  },
  {
    "id" : "0c5ab3e5-f9c4-498c-b511-4856fe404c0d",
    "prId" : 13626,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09fb80c8-d74e-498f-90a9-28de9fcc5613",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Would suggest instead of \"ShowNecessarily\" I would call this \"printPodBase\"\n",
        "createdAt" : "2015-09-08T00:11:31Z",
        "updatedAt" : "2015-09-08T06:19:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b308f8cf-00a1-4926-b4d7-8b386370023a",
        "parentId" : "09fb80c8-d74e-498f-90a9-28de9fcc5613",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "And make the variable \"showIfTerminating\"\n",
        "createdAt" : "2015-09-08T00:12:02Z",
        "updatedAt" : "2015-09-08T06:19:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "008a26f6901af7f9c9614c0b50b944e80747b9a0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +509,513 @@\nfunc printPodBase(pod *api.Pod, w io.Writer, withNamespace bool, wide bool, showAll bool, showIfTerminating bool, columnLabels []string) error {\n\tname := pod.Name\n\tnamespace := pod.Namespace\n"
  },
  {
    "id" : "890e8c06-3c44-470d-879e-34138acfb724",
    "prId" : 13626,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "465d65ab-9c66-4e1f-8688-441dbfda6b50",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I didn't see showAll before - what does it do differently than showIfTerminating?\n",
        "createdAt" : "2015-09-08T17:03:34Z",
        "updatedAt" : "2015-09-08T17:03:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "535087fb-00bb-4931-9f38-7e8d7d447cac",
        "parentId" : "465d65ab-9c66-4e1f-8688-441dbfda6b50",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is it end user indicated?\n",
        "createdAt" : "2015-09-08T17:03:52Z",
        "updatedAt" : "2015-09-08T17:03:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "076f338a-d03f-4437-9e24-81f62ccd42c6",
        "parentId" : "465d65ab-9c66-4e1f-8688-441dbfda6b50",
        "authorId" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "body" : "Yes, end user indicate it, the command option is \"-a, --show-all[=false]: When printing, show all resources (default hide terminated pods.)\"  When a pod named test is terminated, \"kubectl get pods test\" doesn't show anything, \"kubectl get pods test -a\" could show it. But I don't think \"kubectl get pods test -a\" is easy to use. I think \"kubectl get pods test\" should show it.\n",
        "createdAt" : "2015-09-09T01:33:23Z",
        "updatedAt" : "2015-09-09T01:33:23Z",
        "lastEditedBy" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "tags" : [
        ]
      },
      {
        "id" : "6d44fe08-be8e-4573-8a50-941e097d7f22",
        "parentId" : "465d65ab-9c66-4e1f-8688-441dbfda6b50",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Agreed that `kubectl get pod <pod_name>` should retrieve the pod regardless of its state.\nThe `-a` was introduced relatively recently to mimic the behavior of `docker ps -a`. By default, `get pods` would hide all terminated pods.\n",
        "createdAt" : "2015-09-09T04:59:59Z",
        "updatedAt" : "2015-09-09T04:59:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "008a26f6901af7f9c9614c0b50b944e80747b9a0",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +508,512 @@}\n\nfunc printPodBase(pod *api.Pod, w io.Writer, withNamespace bool, wide bool, showAll bool, showIfTerminating bool, columnLabels []string) error {\n\tname := pod.Name\n\tnamespace := pod.Namespace"
  },
  {
    "id" : "4525bc13-39d4-47d9-bc7b-a722961ceb26",
    "prId" : 12635,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "821b2727-a407-4890-91b0-2fa5ce9ac488",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "<=\n",
        "createdAt" : "2015-08-19T04:40:22Z",
        "updatedAt" : "2015-08-19T08:35:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c20ed0344a785cf3a672399c98e1c5e8cc56fd0d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +366,370 @@\tif seconds := int(d.Seconds()); seconds < -1 {\n\t\treturn fmt.Sprintf(\"<invalid>\")\n\t} else if seconds < 0 {\n\t\treturn fmt.Sprintf(\"0s\")\n\t} else if seconds < 60 {"
  },
  {
    "id" : "ecacaa28-4bb5-421e-b867-fc67d9256dd3",
    "prId" : 12202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e985dff7-e8dc-4d92-a0ca-8172524a9d1e",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "given that rawTemplate is never used, I would remove it from this struct.\n",
        "createdAt" : "2015-08-05T20:52:39Z",
        "updatedAt" : "2015-08-20T01:17:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "1e763761-a331-4ef6-a48b-a5aa3cb25048",
        "parentId" : "e985dff7-e8dc-4d92-a0ca-8172524a9d1e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Please address this comment\n",
        "createdAt" : "2015-08-18T16:08:01Z",
        "updatedAt" : "2015-08-20T01:17:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "85972c44a41b850d7ec1d76f3d32ab962a431d7b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1219,1223 @@// JSONPathPrinter is an implementation of ResourcePrinter which formats data with jsonpath expression.\ntype JSONPathPrinter struct {\n\trawTemplate string\n\t*jsonpath.JSONPath\n}"
  },
  {
    "id" : "ceb6a36c-2690-4a2f-95d8-25c6332ac5b9",
    "prId" : 12202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "650cc916-ca63-4694-9c5f-2546b8c3d786",
        "parentId" : null,
        "authorId" : "42c15035-a5a4-4197-b7b0-6b0306bc30b3",
        "body" : "@brendandburns print rawTemplate here\n",
        "createdAt" : "2015-08-18T16:13:36Z",
        "updatedAt" : "2015-08-20T01:17:35Z",
        "lastEditedBy" : "42c15035-a5a4-4197-b7b0-6b0306bc30b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "85972c44a41b850d7ec1d76f3d32ab962a431d7b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1243,1247 @@\tif err = j.JSONPath.Execute(w, out); err != nil {\n\t\tfmt.Fprintf(w, \"Error executing template: %v\\n\", err)\n\t\tfmt.Fprintf(w, \"template was:\\n\\t%v\\n\", j.rawTemplate)\n\t\tfmt.Fprintf(w, \"raw data was:\\n\\t%v\\n\", string(data))\n\t\tfmt.Fprintf(w, \"object given to template engine was:\\n\\t%+v\\n\", out)"
  },
  {
    "id" : "e625ada4-b360-4e74-8ccc-b432845cd5b2",
    "prId" : 10491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "4 parameters\n",
        "createdAt" : "2015-06-30T00:33:37Z",
        "updatedAt" : "2015-06-30T21:07:19Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "8e08390b-776e-449a-aab6-987d686104c9",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "The number of handler's input parameters should be 5, right?\n",
        "createdAt" : "2015-06-30T17:59:47Z",
        "updatedAt" : "2015-06-30T21:07:19Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "fa28a32e-297f-4828-8464-718fad85eff6",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "body" : "Yes it should be 5\n",
        "createdAt" : "2015-06-30T18:02:05Z",
        "updatedAt" : "2015-06-30T21:07:19Z",
        "lastEditedBy" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "tags" : [
        ]
      },
      {
        "id" : "f2da2b92-350e-4712-99d0-079afce233ee",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "OK. Please put the expected method signature in a comment on `validatePrintHandlerFunc` and replace the outdated method signature in the comment on line 205 to be \"see validatePrintHandlerFunc for required method signature.\n\nI don't know if you tried it or not, but is there a reason `printFunc` is an interface instead of an explicit function pointer type? Seems silly to do this check by hand if the compiler can do it.\n",
        "createdAt" : "2015-06-30T18:45:26Z",
        "updatedAt" : "2015-06-30T21:07:19Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "f20108ff-97d9-400f-b3d9-6807b329b584",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "body" : "I was thinking about the same for refactoring the functions and accept an interface instead. Also maybe we should do the same for all the arguments that we are passing and wrap them into a struct, then pass only the object, writer and a formatting struct with various flags. How does it sound?\n",
        "createdAt" : "2015-06-30T18:55:53Z",
        "updatedAt" : "2015-06-30T21:07:19Z",
        "lastEditedBy" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "tags" : [
        ]
      },
      {
        "id" : "8225508d-f77e-4108-ac82-4f81ede2eebd",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should we refactor these functions/arguments in another PR?\n",
        "createdAt" : "2015-06-30T21:47:31Z",
        "updatedAt" : "2015-06-30T21:47:31Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "6f64726a-3286-4e2e-88a9-396123c783f3",
        "parentId" : "ea181549-b3d2-47f5-be80-a54a837a2aac",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Refactor in another PR sgtm. Updating the comment to be accurate is fine for now.\n",
        "createdAt" : "2015-06-30T21:49:18Z",
        "updatedAt" : "2015-06-30T21:49:18Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "682734bcc776a473a31b14920cc55f34c671a91e",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +229,233 @@\tif funcType.NumIn() != 5 || funcType.NumOut() != 1 {\n\t\treturn fmt.Errorf(\"invalid print handler.\" +\n\t\t\t\"Must accept 5 parameters and return 1 value.\")\n\t}\n\tif funcType.In(1) != reflect.TypeOf((*io.Writer)(nil)).Elem() ||"
  },
  {
    "id" : "b78d5f08-68f6-489a-a2b5-1bd770882b7c",
    "prId" : 9032,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcb668d3-b55a-4c18-a853-78cd60c2d351",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "There are also cases like:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/233ce46b83aeb30b07b52ddaddf70f7ef4148ec1/pkg/kubelet/kubelet.go#L1523\n\nWe could add a Reason to the API for this, in addition to the message.\n",
        "createdAt" : "2015-05-30T03:57:58Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e2c3e2d1-cf06-410d-8f0e-b27c7a1f7e8e",
        "parentId" : "dcb668d3-b55a-4c18-a853-78cd60c2d351",
        "authorId" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "body" : "I see the point, so I will add the pod message if there is any until we add the camelCase Reason to the `pod.Status`.\n\nBy the way I also noticed [this line](https://github.com/GoogleCloudPlatform/kubernetes/blob/d0daabb34bb87f4184d25b86ab39d04da3182161/plugin/pkg/scheduler/scheduler.go#L125). The messages from scheduler are not stored in `pod.Status.Message` is this a bug? Because it is the opposite from your example with the disk space error.\n",
        "createdAt" : "2015-05-30T13:53:11Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "tags" : [
        ]
      },
      {
        "id" : "9be0e95f-4027-48e1-8e47-0c3332149828",
        "parentId" : "dcb668d3-b55a-4c18-a853-78cd60c2d351",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We don't currently have a way for the scheduler to update pod status, unfortunately. You could file an issue for that.\n",
        "createdAt" : "2015-06-01T21:35:31Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "68d9313d69e4a8ac3274f4d7cc18dfee419307fe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +396,400 @@\t\t} else if container.Ready && container.State.Running != nil {\n\t\t\treadyContainers++\n\t\t}\n\t}\n"
  },
  {
    "id" : "812f0daa-01ee-4b41-8e29-97edec5d55dc",
    "prId" : 9032,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f848b74-d064-4e88-9656-592ebaa18095",
        "parentId" : null,
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "As of right now this seems to have the behavior that \"reason\" will simply be the reason of the last non-ready container, instead of determined by some heuristic. That's fine, but maybe document that in a comment to make it clear.\n",
        "createdAt" : "2015-06-05T03:10:12Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "5a4b5e96-7206-4d83-ba79-61039d80a69d",
        "parentId" : "2f848b74-d064-4e88-9656-592ebaa18095",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'd pick the first one instead, since users will probably list containers in order of importance.\n\nAnd check Terminated before Ready, as per the comment above.\n",
        "createdAt" : "2015-06-05T03:39:06Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f3354042-0189-4547-ba49-69e474f7a3b5",
        "parentId" : "2f848b74-d064-4e88-9656-592ebaa18095",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "More specifically, I'd choose the first Waiting reason, then the first Terminated reason.\n",
        "createdAt" : "2015-06-05T03:40:38Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "bc2cb3d5-e7a3-4135-a663-0beeb126228d",
        "parentId" : "2f848b74-d064-4e88-9656-592ebaa18095",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If it's terminated with no reason, that's where you could use logic similar to interpretContainerStatus, to generate ExitCodeN / SignalN.\n",
        "createdAt" : "2015-06-05T03:44:41Z",
        "updatedAt" : "2015-06-05T20:28:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "68d9313d69e4a8ac3274f4d7cc18dfee419307fe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +387,391 @@\t\t\treason = container.State.Waiting.Reason\n\t\t} else if container.State.Terminated != nil && container.State.Terminated.Reason != \"\" {\n\t\t\treason = container.State.Terminated.Reason\n\t\t} else if container.State.Terminated != nil && container.State.Terminated.Reason == \"\" {\n\t\t\tif container.State.Terminated.Signal != 0 {"
  },
  {
    "id" : "5ee788c5-8f71-4a66-bcc3-179051c117c5",
    "prId" : 8641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b60d2c33-5f01-488b-a605-5d438fac872b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok for now. This would go into the Reason column if my overhaul proposal is implemented: https://github.com/GoogleCloudPlatform/kubernetes/issues/7843#issuecomment-104821801\n",
        "createdAt" : "2015-05-27T18:17:38Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12a68cd60ccfe2f0926386df771805c0993d783",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +407,411 @@\tphase := string(pod.Status.Phase)\n\tif pod.DeletionTimestamp != nil {\n\t\tphase = \"Terminating\"\n\t}\n\t_, err := fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\","
  },
  {
    "id" : "d7ce4f59-371e-4571-9fa6-d4a5247fc7b1",
    "prId" : 8336,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42178af7-5960-47ed-a911-894cae3e4a43",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "would it be useful to bubble this up to the pod, in addition to having it per container? \n",
        "createdAt" : "2015-05-15T23:16:00Z",
        "updatedAt" : "2015-05-15T23:16:00Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a197b24fb7642971e30065f846ab9a56e9e2efc8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +383,387 @@\t\tstateMsg := \"Running\"\n\t\tif !status.Ready {\n\t\t\tstateMsg = stateMsg + \" *not ready*\"\n\t\t}\n\t\treturn stateMsg, translateTimestamp(state.Running.StartedAt), message, nil"
  },
  {
    "id" : "15059f20-08b4-48b5-b615-97c2cd5e8599",
    "prId" : 7419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "405d0764-f95b-4389-9a30-9a596770f668",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Cannot believe this wasn't in there before.  Thanks for adding.\n",
        "createdAt" : "2015-04-28T19:05:57Z",
        "updatedAt" : "2015-04-28T19:05:57Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac67fff1cf994e5ee5aaae99aece5eaa9b78893e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +256,260 @@var resourceQuotaColumns = []string{\"NAME\"}\nvar namespaceColumns = []string{\"NAME\", \"LABELS\", \"STATUS\"}\nvar secretColumns = []string{\"NAME\", \"TYPE\", \"DATA\"}\nvar persistentVolumeColumns = []string{\"NAME\", \"LABELS\", \"CAPACITY\", \"ACCESSMODES\", \"STATUS\", \"CLAIM\"}\nvar persistentVolumeClaimColumns = []string{\"NAME\", \"LABELS\", \"STATUS\", \"VOLUME\"}"
  },
  {
    "id" : "ffe53a9c-3a8f-42e5-a995-d58ccdcc16ae",
    "prId" : 7116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37d31452-4a0f-4d55-946d-bda5cefb8a8c",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "lets do the message here since we only use it for Running.\n\nCan we also add a prefix, something like: \"last terminated due to: %s\" to make it clear what it is? The others it seems pretty clean what the message is I think.\n",
        "createdAt" : "2015-04-21T18:37:51Z",
        "updatedAt" : "2015-04-21T22:43:52Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "e0cd3a71-6d99-479f-8d8b-ef9cf86308fc",
        "parentId" : "37d31452-4a0f-4d55-946d-bda5cefb8a8c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "SG. Will do that if we all agree with reusing this field for different purposes :)\n",
        "createdAt" : "2015-04-21T19:17:03Z",
        "updatedAt" : "2015-04-21T22:43:52Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "f3669328-6bf8-48f1-81fb-47cd474ffcd3",
        "parentId" : "37d31452-4a0f-4d55-946d-bda5cefb8a8c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Done!\n",
        "createdAt" : "2015-04-21T22:59:13Z",
        "updatedAt" : "2015-04-21T22:59:13Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "06125f37d345035c35ddedd7c1eb25f7befe0ae7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +376,380 @@\t\t\tmessage = \"last termination: \" + message\n\t\t}\n\t\treturn \"Running\", translateTimestamp(state.Running.StartedAt), message, nil\n\t} else if state.Termination != nil {\n\t\treturn \"Terminated\", translateTimestamp(state.Termination.StartedAt), getTermMsg(state.Termination), nil"
  },
  {
    "id" : "4c17ddeb-c0ed-4abd-ac60-d787fab01b57",
    "prId" : 7116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eadb33f8-12c5-4bba-b919-dc49768db52f",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "If a container is killed, and now it is waiting due to pulling image. In this case, we lost previous terminated reason, right? I think I am ok with this, just want to point it out. \n",
        "createdAt" : "2015-04-21T19:11:51Z",
        "updatedAt" : "2015-04-21T22:43:52Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "1881a9c0-81fa-460f-b9f5-dbd2daa38c9c",
        "parentId" : "eadb33f8-12c5-4bba-b919-dc49768db52f",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Yes, the intention was to expose information relevant to the last non-running status.\n\nAlternatively, I can  expose the last termination message for all three statuses, assuming user who is curious about the waiting status would simply run `kubectl describe pod`. We get uniformity in this approach, so perhaps it's worth doing. \n",
        "createdAt" : "2015-04-21T19:20:28Z",
        "updatedAt" : "2015-04-21T22:43:52Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "06125f37d345035c35ddedd7c1eb25f7befe0ae7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +367,371 @@\n\tstate := &status.State\n\tif state.Waiting != nil {\n\t\treturn \"Waiting\", \"\", state.Waiting.Reason, nil\n\t} else if state.Running != nil {"
  },
  {
    "id" : "58d323c4-d402-4dcf-863f-72802c119ffa",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5cc67fe-8f4c-4a4f-949a-0d1ef93684f2",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "So after three values nothing else is printed?\n",
        "createdAt" : "2015-03-26T17:55:19Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "550c2df2-17f3-494e-b56f-d839b71c33e5",
        "parentId" : "a5cc67fe-8f4c-4a4f-949a-0d1ef93684f2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Correct.  I consulted with Sam and he thought that was a good compromise, rather than printing an arbitrary list.  I could change 3 to 5 if people care.\n",
        "createdAt" : "2015-03-26T22:40:35Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +302,306 @@\tret := strings.Join(list, \",\")\n\tif more {\n\t\tret += \"...\"\n\t}\n\treturn ret"
  },
  {
    "id" : "0a2d1207-6e4a-4ea5-8577-06613369bc86",
    "prId" : 3370,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "576e1db6-c6c5-4cd0-8d4f-4deeca80eb46",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Good enough, but I want to make a plea that we perhaps revisit this.  We're inventing ad-hoc syntax here, which makes it very hard to run this through simple tools like awk.  Why not just add another column?\n",
        "createdAt" : "2015-01-10T04:41:31Z",
        "updatedAt" : "2015-01-10T04:41:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "18ca85da-024f-494e-b78f-64c8ed44f70d",
        "parentId" : "576e1db6-c6c5-4cd0-8d4f-4deeca80eb46",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also, shouldn't the header indicate this?\n",
        "createdAt" : "2015-01-10T04:41:57Z",
        "updatedAt" : "2015-01-10T04:41:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7ad7f82079bec1c1b097964d55e0064f3c52f52",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@\t\tfirstContainer, containers = containers[0], containers[1:]\n\t}\n\t_, err := fmt.Fprintf(w, \"%s/%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\",\n\t\tpod.Name,\n\t\tpod.Status.PodIP,"
  },
  {
    "id" : "507b8e46-171b-4840-b4bf-3dc9fa170c90",
    "prId" : 3004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21ecfff7-7abb-41bd-aba0-81e7769147ce",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I maintain that it shouldn't be possible to make a non-versioned printer.\n",
        "createdAt" : "2015-01-13T22:50:37Z",
        "updatedAt" : "2015-01-13T22:50:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "517801be-5920-4773-900d-af784c1a2e92",
        "parentId" : "21ecfff7-7abb-41bd-aba0-81e7769147ce",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "All the regular printers are not versioned\n\n> On Jan 13, 2015, at 5:50 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/kubectl/resource_printer.go:\n> \n> > -// JSONPrinter is an implementation of ResourcePrinter which outputs an object as JSON.\n> > -// The input object is assumed to be in the internal version of an API and is converted\n> > -// to the given version first.\n> > -type JSONPrinter struct {\n> > -   version   string\n> >   +// ResourcePrinterFunc is a function that can print objects\n> >   +type ResourcePrinterFunc func(runtime.Object, io.Writer) error\n> >   +\n> >   +// PrintObj implements ResourcePrinter\n> >   +func (fn ResourcePrinterFunc) PrintObj(obj runtime.Object, w io.Writer) error {\n> > -   return fn(obj, w)\n> >   +}\n> >   +\n> >   +// VersionedPrinter takes runtime objects and ensures they are converted to a given API version\n> >   +// prior to being passed to a nested printer.\n> >   +type VersionedPrinter struct {\n> >   I maintain that it shouldn't be possible to make a non-versioned printer.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-13T22:52:22Z",
        "updatedAt" : "2015-01-13T22:52:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3e89a205-0111-4d91-b5e6-d02adad75da1",
        "parentId" : "21ecfff7-7abb-41bd-aba0-81e7769147ce",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "They were when I last touched this code! In fact the last thing I did to this code was to fix this very problem...\n",
        "createdAt" : "2015-01-13T22:56:32Z",
        "updatedAt" : "2015-01-13T22:56:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "73be5ed1-99ba-4fc1-afdb-e38149f4c674",
        "parentId" : "21ecfff7-7abb-41bd-aba0-81e7769147ce",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should put that example into test-cmd.sh then.  :)\n\n-o json should be outputting a minionlist - is it?\n\n> On Jan 13, 2015, at 5:56 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/kubectl/resource_printer.go:\n> \n> > -// JSONPrinter is an implementation of ResourcePrinter which outputs an object as JSON.\n> > -// The input object is assumed to be in the internal version of an API and is converted\n> > -// to the given version first.\n> > -type JSONPrinter struct {\n> > -   version   string\n> >   +// ResourcePrinterFunc is a function that can print objects\n> >   +type ResourcePrinterFunc func(runtime.Object, io.Writer) error\n> >   +\n> >   +// PrintObj implements ResourcePrinter\n> >   +func (fn ResourcePrinterFunc) PrintObj(obj runtime.Object, w io.Writer) error {\n> > -   return fn(obj, w)\n> >   +}\n> >   +\n> >   +// VersionedPrinter takes runtime objects and ensures they are converted to a given API version\n> >   +// prior to being passed to a nested printer.\n> >   +type VersionedPrinter struct {\n> >   They were when I last touched this code! In fact the last thing I did to this code was to fix this very problem...\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-13T22:58:02Z",
        "updatedAt" : "2015-01-13T22:58:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "086df2d1-71b9-46e8-bf41-5b97de6f43f1",
        "parentId" : "21ecfff7-7abb-41bd-aba0-81e7769147ce",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "VersionedPrinter may be getting empty string?\n\n> On Jan 13, 2015, at 5:56 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/kubectl/resource_printer.go:\n> \n> > -// JSONPrinter is an implementation of ResourcePrinter which outputs an object as JSON.\n> > -// The input object is assumed to be in the internal version of an API and is converted\n> > -// to the given version first.\n> > -type JSONPrinter struct {\n> > -   version   string\n> >   +// ResourcePrinterFunc is a function that can print objects\n> >   +type ResourcePrinterFunc func(runtime.Object, io.Writer) error\n> >   +\n> >   +// PrintObj implements ResourcePrinter\n> >   +func (fn ResourcePrinterFunc) PrintObj(obj runtime.Object, w io.Writer) error {\n> > -   return fn(obj, w)\n> >   +}\n> >   +\n> >   +// VersionedPrinter takes runtime objects and ensures they are converted to a given API version\n> >   +// prior to being passed to a nested printer.\n> >   +type VersionedPrinter struct {\n> >   They were when I last touched this code! In fact the last thing I did to this code was to fix this very problem...\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-13T22:58:37Z",
        "updatedAt" : "2015-01-13T22:58:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2151afe33439a84a1eca1eadd7b0a05ae3e3d462",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +93,97 @@// VersionedPrinter takes runtime objects and ensures they are converted to a given API version\n// prior to being passed to a nested printer.\ntype VersionedPrinter struct {\n\tprinter   ResourcePrinter\n\tconvertor runtime.ObjectConvertor"
  }
]