[
  {
    "id" : "b41ad238-e9c5-4f29-aa4e-4e218c4206cd",
    "prId" : 62911,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62911#pullrequestreview-115393946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "626e3d26-8afd-4986-b1f0-657136439593",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Can this change be a separate PR, if not at least a separate commit for ease of review. ",
        "createdAt" : "2018-04-24T13:48:06Z",
        "updatedAt" : "2018-04-26T13:42:16Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "e68d9667-1754-417f-93e5-dafec3032afa",
        "parentId" : "626e3d26-8afd-4986-b1f0-657136439593",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Done",
        "createdAt" : "2018-04-25T23:58:55Z",
        "updatedAt" : "2018-04-26T13:42:16Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e11b66a732e9e41aae3e9a08936b1e32c10c2d4c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +69,73 @@)\n\ntype DescribeOptions struct {\n\tCmdParent string\n\tSelector  string"
  },
  {
    "id" : "38befaa7-6bfd-45c1-861e-58eea63f0d2a",
    "prId" : 10493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1650fb0b-92ff-4c02-8d6b-49826140ec37",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why don't we do the overridden check in describe?\n\nDescribe and get commands can take resource descriptions from files (which could specify namespace) and use those to retrieve the corresponding current state.\n",
        "createdAt" : "2015-07-01T09:20:11Z",
        "updatedAt" : "2015-07-01T19:59:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6aa5f693-fcef-4872-a068-ada9cfee6741",
        "parentId" : "1650fb0b-92ff-4c02-8d6b-49826140ec37",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I don't think they can, at least not any way that I saw.\n\n```\nUsage: \n  kubectl describe (RESOURCE NAME | RESOURCE/NAME) [flags]\n```\n\nSo I ignored the overridden bool when the builder didn't have a `FilenameParam` call on it to specify files.\n\nAm I missing something here?\n",
        "createdAt" : "2015-07-01T16:51:30Z",
        "updatedAt" : "2015-07-01T19:59:49Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "384bce29-ca5c-4529-bcd6-49922ed8e67e",
        "parentId" : "1650fb0b-92ff-4c02-8d6b-49826140ec37",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I didn't look at enough of the context. \n\nFiled an issue for the other commands to accept -f.\n",
        "createdAt" : "2015-07-01T17:33:52Z",
        "updatedAt" : "2015-07-01T19:59:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffa764d60bd4e7768401a25e95eb77a0d7c9ddc0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +60,64 @@func RunDescribe(f *cmdutil.Factory, out io.Writer, cmd *cobra.Command, args []string) error {\n\tselector := cmdutil.GetFlagString(cmd, \"selector\")\n\tcmdNamespace, _, err := f.DefaultNamespace()\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "6d9fe31b-0239-4035-aa30-6ddb029c51af",
    "prId" : 7467,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68f5a5d6-e98b-46ee-8ecf-4e1558f1a000",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Would be nice if you could reuse the builder (to guard against bit rot) but it's not easy to do here I don't think.\n",
        "createdAt" : "2015-04-28T23:53:41Z",
        "updatedAt" : "2015-04-29T23:47:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0aba1c48-e550-49b5-93af-dfa5f31ae76e",
        "parentId" : "68f5a5d6-e98b-46ee-8ecf-4e1558f1a000",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Acknowledged.\n",
        "createdAt" : "2015-04-29T23:41:08Z",
        "updatedAt" : "2015-04-29T23:47:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a8a98c319fcea3bd6b16f41b1f00cd0f2463db7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\t\tSingleResourceType().\n\t\tFlatten().\n\t\tDo()\n\tinfos, err := r.Infos()\n\tif err != nil {"
  },
  {
    "id" : "703c3dd2-cd16-4fc1-bfab-1981442f4885",
    "prId" : 6834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1cd7591-b1fa-4bbd-bea4-71d82af171b5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The list of describable resources is more accurately the set of `RESTMappings` for which `f.Describer` returns a valid input.  The distinction doesn't matter for kube directly, but for embedders the ability to have that list include all the valid types will be helpful.\n\nI will admit that there is no direct path from here to there, since `f.Object()` will probably fail on invalid config at that point.  Perhaps an extension to the `Factory` to return all potentially valid RESTMappers?\n",
        "createdAt" : "2015-04-15T18:33:26Z",
        "updatedAt" : "2015-04-15T18:33:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f272e836e0d8bc53687517ce1a138a9a62847fa0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +40,44 @@\t\t\tcmdutil.CheckErr(err)\n\t\t},\n\t\tValidArgs: kubectl.DescribableResources(),\n\t}\n\treturn cmd"
  },
  {
    "id" : "48fa921c-fceb-49a3-9eea-2ed1921511c2",
    "prId" : 1325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The commandlines between different commands could more consistent.\n\ncreate and update both take json as \"-f <file>\" or a descriptor string or stdin - obviously they need the JSON body\n\ndelete takes json as \"-f <file>\" or a descriptor string or stdin or this new \"-i <kind>,<id>\" syntax (which is problematic because id/name).\n\nget takes -f, but it doesn't mean file input (!!) or \"<kind> [id]\"\n\ndescribe takes \"<kind> <id>\"\n\nCan we unify these more?  Does delete really need to take json at all?  I suppose that may be how we (eventually) do resource version or other preconditions?  Do we need it now?  I feel like that could be left on the table for now.  If we change delete, maybe delete/get/describe can all use common syntax like:\n\n```\n[get | delete | describe] <kind> [<id-or-name>:<value>]\n```\n\nso that these all work:\n\n```\nget pods\nget pod name:\"nifty\"\nget pod id:1234-56-7890-234234-456456\ndelete pod id:1234-56-7890-234234-456456\nservice pod id:1234-56-7890-234234-456456\n```\n\nThe \":\" could maybe be \"=\" or something if it is easier to read.  We probably want to disallow as special-cases:\n\n```\ndelete pods\ndescribe pods\n```\n\nMaybe we could try to make the <name-or-id> optional and figure it out, but complain if we find both?  Future enhancement.\n",
        "createdAt" : "2014-10-13T18:34:24Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "efaee9ad-7b23-4da2-84a9-924f52c90526",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "For name vs id, I don't like having to always prefix with \"name:\" or \"id:\"... it feels clumsy for such a common operation. Can we use the @id syntax that @smarterclayton recommended? So:\n\n```\n[get | delete | describe] <kind> [@][<id-or-name>]\n```\n\n```\nget pods\nget pod nifty\nget pod @1234-56-7890-234234-456456\nget service @2345-56-7890-234234-456456\n\nget nifty // automatically errors because can't use name without kind\nget @1234-56-7890-234234-456456 // maybe we can support it in the future\n```\n\nWe can use kubectl as a testing ground for the syntax and if it works elegantly, we can broaden it to be a more general way to reference ID's. (In the future the `<type>:<value>` style should be supported as well, we can even support name:, id:, label:, stuff like that. But we should ideally avoid creating that syntax quite yet.)\n\nOn the topic of -f conflicting, I actually think it makes more sense for \"modify\" commands like create, update, and delete, and \"read\" commands like get and describe to act similar to their respective groups. And I think it makes sense to be able to provide the json file that you just used to create a (named) pod to delete it as well. I'd rather make delete look more like its group than mix it with get and describe.\n\nThe only reason for the additional -i flag, which is the only thing that makes delete look different, is the idea that I wanted to make it convenient to issue a delete since that's the only \"modify\" command where it's possible you rm'd the json file you were using to make creates and updates before you sent the command to kubecfg. With the above change we could keep the -i flag format or we could autodetect whether your first argument is JSON or not - if not we fall back to get/describe semantics:\n\n```\ndelete -i pod,1234-56-7890-234234-456456\ndelete -i pod,nifty\ndelete {\"kind\": \"Pod\", \"name:\" \"nifty\", ...}\n\nOR\n\ndelete pod,1234-56-7890-234234-456456\ndelete pod,nifty\ndelete {\"kind\": \"Pod\", \"name:\" \"nifty\", ...}\n```\n\nI'm open to a better way of specifying this, but I think abandoning the functionality to use a json file doesn't make sense.\n",
        "createdAt" : "2014-10-14T04:06:55Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "713e31a3-65ab-44a4-8f19-f9319ad7a24e",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "So much to answer in this one :)\n\nI'm OK with (name | @id) - I must have missed the proposal.  Just to be clear, this is purely CLI sugar, we're not going to store the @ in etcd, right?\n\nRegarding delete being more like create/update than get/describe - I see that they are all mutating ops, but I still find it weird.  I can see an argument that a script might say \"create X, do Y, if fail delete X\", which is just plausible enough that I will not argue it further.  But now you have need for the -i syntax which is unique to delete, which is sort of a smell.\n\nWhat about a slight twist?\n\ncreate/update -f filename  # specify - as the filename for stdin\ndelete [-f filename | kind (name | @id)]\nget kind [name | @id]\ndescribe kind (name | @id)\n\nThis fixes an oversight: stdin as \"-\" is usually an argument to a file flag (e.g. tar -cvf -) and eliminates in-line JSON, which means we can have room for other non-flag args without auto-detecting.  If we really want inline JSON, flag it, but do so everywhere.\n\n[-f file | -s spec]  # or something\n\nYou get your delete from a file and I get my normal syntax.  echo \"{json...}\" | kubectl or kubectl &lt;(\"{json...}\") are not much worse than kubectl \"{json...}\"\n",
        "createdAt" : "2014-10-14T05:02:05Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f28507aa-125e-451b-ab11-d0f3a1f24c42",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "> I'm OK with (name | @id) - I must have missed the proposal. Just to be clear, this is purely CLI sugar, we're not going to store the @ in etcd, right?\n\nYep.\n\n> You get your delete from a file and I get my normal syntax. echo \"{json...}\" | kubectl or kubectl <(\"{json...}\") are not much worse than kubectl \"{json...}\"\n\nI like this solution a lot. I'll implement it tomorrow morning.\n",
        "createdAt" : "2014-10-14T09:01:00Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "6dc9ca69-788d-4ac7-9a40-53f9adbe4842",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "I also like that we're probably annoying the hell out of the poor sap named @id. :smile: \n",
        "createdAt" : "2014-10-14T09:01:47Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "7cd6ecd1-72ec-42ae-b493-179949219c79",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Are you okay with -f retaining the meaning of 'format' for get?\n",
        "createdAt" : "2014-10-14T21:16:27Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "906531af-be37-4830-9c09-f795d21e9948",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Also, as of right now is there a way to properly query for UID vs name? Or should I just only support the name syntax as the current ID and make the change when the API upgrades?\n",
        "createdAt" : "2014-10-14T21:51:58Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "0ca62985-46a4-4032-9804-552c7fbbd9fc",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "There is no way to query uid (not setting it yet either) in the short term.  So omit makes sense\n\n> On Oct 14, 2014, at 5:52 PM, Sam Ghods notifications@github.com wrote:\n> \n> In pkg/kubectl/cmd/describe.go:\n> \n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package cmd\n> > +\n> > +import (\n> > -   \"io\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/kubectl\"\n> > -   \"github.com/spf13/cobra\"\n> >   +)\n> >   +\n> >   +func NewCmdDescribe(out io.Writer) *cobra.Command {\n> > -   cmd := &cobra.Command{\n> > -       Use:   \"describe <resource> <id>\",\n> >   Also, as of right now is there a way to properly query for UID vs name? Or should I just only support the name syntax as the current ID and make the change when the API upgrades?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-10-14T22:18:03Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "64e9efd9-7a1e-4036-9493-7ed1f6cf0508",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Okay this is done. I took out all references to @id for now but I will make an issue after this gets merged to add the functionality.\n",
        "createdAt" : "2014-10-15T01:50:47Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "85636b39-1410-4a69-8e7d-4ee53f09e8b2",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can I talk you into -o|--output for get?\n\nOK to omit @uid for now. \n",
        "createdAt" : "2014-10-15T03:37:20Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cf99dfd8-04ae-4cc9-963b-37558d710980",
        "parentId" : "f771196d-141c-4e0e-b041-aecc1f87229d",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Done. Also makes the future --output-version lock flag sound nicer.\n",
        "createdAt" : "2014-10-15T19:40:58Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b220f8b0a3f4671b3c7883b161f8475894fabe7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@func NewCmdDescribe(out io.Writer) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"describe <resource> <id>\",\n\t\tShort: \"Show details of a specific resource\",\n\t\tLong: `Show details of a specific resource."
  }
]