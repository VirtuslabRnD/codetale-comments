[
  {
    "id" : "10ae5c07-b499-4965-80ab-703481c3bca1",
    "prId" : 16701,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "`clientcmdapi.NewConfig()` appears to be setting `config.Clusters` to a non-nil value; I wonder if `clientcmdlatest.Codec.DecodeInto()` is unsetting it?\n",
        "createdAt" : "2015-11-03T21:30:43Z",
        "updatedAt" : "2015-11-03T21:30:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "11aa3865-b5f3-48e0-a20c-f1105e039d07",
        "parentId" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@ixdy\n\nI believe that the codec overrides whatever values are in the input object.  This is what I would expect from an API standpoint -- if I point the codec at an empty file, which is valid yaml, i'd expect to get a zeroed object back.\n",
        "createdAt" : "2015-11-06T04:52:45Z",
        "updatedAt" : "2015-11-07T05:11:41Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "311c46a9-101b-4447-b0a1-19165d35c2a6",
        "parentId" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@smarterclayton, you just did some work in this area... does this look like what you would expect here?\n",
        "createdAt" : "2015-11-08T06:11:39Z",
        "updatedAt" : "2015-11-08T06:11:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3d6578e4-69fe-4949-9f06-7c8f8ee41f7a",
        "parentId" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "I'm wondering if maybe this should be fixed in `LoadFromFile` instead?\n\nalso, there are several maps in `Config` which could presumably be set `nil` by `LoadFromFile`. Should we cover all of them? should we expect callers to check for nil-ness?\n",
        "createdAt" : "2015-11-09T23:46:17Z",
        "updatedAt" : "2015-11-09T23:46:17Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "f2fe6529-08fe-4159-9f4e-8ce21959f3bd",
        "parentId" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@deads2k since you just looked at @smarterclayton's change\n",
        "createdAt" : "2015-11-10T01:16:10Z",
        "updatedAt" : "2015-11-10T01:16:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c81a8ef9-57ed-4bf4-a798-91b61a0bf8d5",
        "parentId" : "829e1c59-3233-40f6-9e11-95f5844cb564",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'm wondering if maybe this should be fixed in LoadFromFile instead?\n> \n> also, there are several maps in Config which could presumably be set nil by LoadFromFile. Should we cover all of them? should we expect callers to check for nil-ness?\n\nFor this structure, I don't see any value in making callers distinguish between nil and empty.  I'd make this change in `LoadFromFile` for all maps there.\n",
        "createdAt" : "2015-11-10T12:40:51Z",
        "updatedAt" : "2015-11-10T12:40:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "75b1e6ec44a70c5b3eb90b84fef0b8c5306cb23b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +432,436 @@\n\tif config.Clusters == nil {\n\t\tconfig.Clusters = map[string]*clientcmdapi.Cluster{}\n\t}\n"
  },
  {
    "id" : "ec9f3082-6873-4f1d-bfdf-bc699ca72f18",
    "prId" : 6585,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97d48c7c-9f28-475d-a253-51555594fab1",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "May want to mention somewhere that while it looks like this code will generate multiple file writes, in practice, a command only updates/removes one entry, and thus only writes to one file.\n",
        "createdAt" : "2015-04-09T17:27:38Z",
        "updatedAt" : "2015-04-09T19:49:35Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e3f2185e53271d10fe5f0cd2c27930805b6d24",
    "line" : null,
    "diffHunk" : "@@ -1,1 +232,236 @@\t// at this point, config and startingConfig should have, at most, one difference.  We need to chase the difference until we find it\n\t// then we'll build a partial config object to call write upon.  Special case the test for current context and preferences since those\n\t// always write to the default file.\n\tswitch {\n\tcase reflect.DeepEqual(*startingConfig, newConfig):"
  },
  {
    "id" : "950a8651-4ca6-4777-99df-529e048f0b5f",
    "prId" : 6585,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a5b572-50a8-46ee-8831-756bcf4ae24e",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Question: how does this reconcile with splitting preferences and current context out of kubeconfig, per #4428? I think we still would rather have `current-context` and preferences be defined in only one place, but this behavior does seem strictly better than existing.\n",
        "createdAt" : "2015-04-09T17:33:58Z",
        "updatedAt" : "2015-04-09T19:49:35Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "1913ff1f-a2ae-4b01-849c-e78e251e0401",
        "parentId" : "54a5b572-50a8-46ee-8831-756bcf4ae24e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think that better determination of where to write stanzas will be beneficial regardless of which path we take forward.  Rather than trying to significantly change our format right now, this is simply applies that detection and determination to the file we have now.\n",
        "createdAt" : "2015-04-09T17:46:38Z",
        "updatedAt" : "2015-04-09T19:49:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2d6010c0-c1c8-4bfa-8389-661c680ddcdb",
        "parentId" : "54a5b572-50a8-46ee-8831-756bcf4ae24e",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "sgtm\n",
        "createdAt" : "2015-04-09T17:47:33Z",
        "updatedAt" : "2015-04-09T19:49:35Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e3f2185e53271d10fe5f0cd2c27930805b6d24",
    "line" : 424,
    "diffHunk" : "@@ -1,1 +407,411 @@}\n\nfunc (o *PathOptions) writePreferences(newPrefs clientcmdapi.Preferences) error {\n\tif startingConfig, err := o.getStartingConfig(); err != nil {\n\t\treturn err"
  },
  {
    "id" : "8490ff70-9a35-4a7b-9e1b-c702d0743abf",
    "prId" : 4053,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "846d2bd2-9a52-44ba-9821-239fabc4fe51",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "log fatal if len(filename) == 0\n",
        "createdAt" : "2015-02-03T19:36:36Z",
        "updatedAt" : "2015-02-03T21:12:10Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "affa85fab03bf4e276d0056431853cb12671533c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +94,98 @@\t\t}\n\n\t\tconfig = getConfigFromFileOrDie(filename)\n\t}\n"
  }
]