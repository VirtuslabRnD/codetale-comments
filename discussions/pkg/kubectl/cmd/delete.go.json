[
  {
    "id" : "903d40c3-cb97-45f4-8576-165cc82a4b7f",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-121821118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f84542e-0e8b-4131-a2e5-a5dc7fb2278f",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Why not include this flag into `deleteFlags.AddFlags(...)` method above?",
        "createdAt" : "2018-05-19T04:43:26Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "263482c8-9895-40b1-9737-059341514f0e",
        "parentId" : "3f84542e-0e8b-4131-a2e5-a5dc7fb2278f",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Shall we also say in the description that this flag is on by default?",
        "createdAt" : "2018-05-19T05:11:01Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "7a9a580c-6cee-42d7-8c03-256d61895835",
        "parentId" : "3f84542e-0e8b-4131-a2e5-a5dc7fb2278f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Shall we also say in the description that this flag is on by default?\r\n\r\nHelp lists defaults already.  Delete is a wasteland of weird delegation.  I don't think this needs plumbing that far.  `DeleteFlags` is really confused about what it is supposed to be.",
        "createdAt" : "2018-05-21T14:39:04Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +144,148 @@\tdeleteFlags.AddFlags(cmd)\n\n\tcmd.Flags().Bool(\"wait\", true, `If true, wait for resources to be gone before returning.  This waits for finalizers.`)\n\n\tcmdutil.AddIncludeUninitializedFlag(cmd)"
  },
  {
    "id" : "42ac6c29-2a4a-4944-ac2d-6afc5c9cd760",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-121971498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "So this seems to be the reason for defining the \"wait\" flag differently from the rest - reusing the existing `WaitForDeletion` flag that is currently not exposed to the user?\r\nThe only place where the existing internal `WaitForDeletion` flag is used (for read) is in https://github.com/kubernetes/kubernetes/blob/0db40da90975eef37b35e2c859441703f351168e/pkg/kubectl/cmd/delete.go#L259, i.e. in the `ReapResult` for resources with reapers **only**. It's not used for resources that don't have reapers.\r\nGiven the upcoming change to get rid of reapers completely in #63979, I would suggest not to bother with merging existing and new flags.\r\nInstead, I would just rename the existing flag to get rid of it completely later as part of #63979, as I did in https://github.com/kubernetes/kubernetes/pull/63695/files#diff-7c126b9106a83157d89a336103eb3dbbR108",
        "createdAt" : "2018-05-19T04:57:11Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "2e965a25-f2ac-4218-9af0-78bb84f93fe3",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Actually, once we add an explicit `--wait` flag and set it to `true` by default, I don't think we need to keep the existing logic for backward compatibility at all?\r\n\r\nI mean the condition https://github.com/kubernetes/kubernetes/blob/0db40da90975eef37b35e2c859441703f351168e/pkg/kubectl/cmd/delete.go#L163-L168 (and 2 other similar places).\r\nWith the changes in this PR, `WaitForDeletion` is already `true` by default, i.e. it's consistent with the backward compatibility for grace period. And if the user explicitly sets `--wait=false`, we shouldn't override it there, I think? ",
        "createdAt" : "2018-05-19T05:02:56Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "2d9f0f22-2b0e-4554-a480-f121ca04056f",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "To be clear about the change I propose: Get rid of the existing logic with conditions for setting internal `WaitForDeletion` to `true` completely, and declare a new `--wait` flag that is exposed to the user in the same way as other flags in `deleteFlags.AddFlags(...)`.",
        "createdAt" : "2018-05-19T05:05:32Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "726fc9b4-0508-45b5-bfbf-289596a80d60",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Once reapers die, perhaps.",
        "createdAt" : "2018-05-19T12:28:02Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "931b6407-c039-400a-b10e-3437e05b3e74",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yes, that's the goal of getting rid of reapers. The old logic will die. ",
        "createdAt" : "2018-05-21T13:00:20Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "12536e72-dd89-40a8-94e9-2591b5f183e1",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> So this seems to be the reason for defining the \"wait\" flag differently from the rest - reusing the existing WaitForDeletion flag that is currently not exposed to the user?\r\n\r\nI think it falls out in the other direction.  Reapers die and we remove this old codepath.",
        "createdAt" : "2018-05-21T14:39:37Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "04cda50c-862f-4e02-95e6-836c86864d49",
        "parentId" : "6eb5e7c3-09d4-4df7-b8a8-553d6ce935bd",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Once the reapers are dead, we can move the wait flag to `deleteFlags.AddFlags(...)` to make it consistent with other flags, since the default will always be `true`, and there won't be internal conditional \"graceful deletion\" anymore.",
        "createdAt" : "2018-05-21T22:46:23Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +176,180 @@\t}\n\tif b, err := cmd.Flags().GetBool(\"wait\"); err == nil {\n\t\to.WaitForDeletion = b\n\t}\n"
  },
  {
    "id" : "05851fc4-f40b-46cb-b0f1-fed941bb7808",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-121608896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e02f06f-46ab-4d95-9c48-566a14bac4bd",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "As I noted in the other comment, this line becomes obsolete: `WaitForDeletion` is already `true` by default. And if user explicitly specifies `--wait=false`, it will be overwritten a few lines below.",
        "createdAt" : "2018-05-19T05:18:01Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +172,176 @@\t\t// into --grace-period=1 and wait until the object is successfully deleted. Users may provide --force\n\t\t// to bypass this wait.\n\t\to.WaitForDeletion = true\n\t\to.GracePeriod = 1\n\t}"
  },
  {
    "id" : "a5f0a2ce-1cff-4db0-809a-57317a8b51f3",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-121617843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "250f017c-080c-4ca8-b58b-569f36f1035c",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "If I understand correctly, there is no real case when `err != nil` (if there are no bugs in code)? If so, setting `o.WaitForDeletion = true` 2 lines above becomes useless with this change.",
        "createdAt" : "2018-05-19T05:20:07Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "ad6a72da-9149-4cc8-8868-e0cc758d28e0",
        "parentId" : "250f017c-080c-4ca8-b58b-569f36f1035c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It happens during bad delegation and this command is ripe with it",
        "createdAt" : "2018-05-19T12:28:42Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +175,179 @@\t\to.GracePeriod = 1\n\t}\n\tif b, err := cmd.Flags().GetBool(\"wait\"); err == nil {\n\t\to.WaitForDeletion = b\n\t}"
  },
  {
    "id" : "c5ba6d11-ba25-4a2e-8e1f-09f06f8148fd",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-122125857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dbc84ba-8a7e-42d2-a05b-0a5405c6758f",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Can you just pass `f.DynamicClient()` there and remove the code setting `DeleteOptions.DynamicClient = f.DynamicClient()` from `DeleteOptions.Complete()` method? It took me a while to understand why do you pass `nil` there.\r\nIt would at least make the code more unified across multiple use cases, and we can require the `dynamicClient` argument to never be nil...",
        "createdAt" : "2018-05-22T03:05:33Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "988b8e0f-3257-4327-958e-54146037bd3a",
        "parentId" : "7dbc84ba-8a7e-42d2-a05b-0a5405c6758f",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "Another option is to pass `f.DynamicClient()` there, as well as keep the code overwriting it in `Complete()` (which will set it to the same value). While redundant, it will at least be consistent.",
        "createdAt" : "2018-05-22T03:10:22Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "5e3c0818-f3d7-4afa-823f-7caa046f3dd0",
        "parentId" : "7dbc84ba-8a7e-42d2-a05b-0a5405c6758f",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Completing command's options in `Complete` is a pattern we're enforcing throughout entire kubectl code base. ",
        "createdAt" : "2018-05-22T10:22:06Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "f1f08d06-3566-4c80-b6e1-a65eac9106d5",
        "parentId" : "7dbc84ba-8a7e-42d2-a05b-0a5405c6758f",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "@soltysh yes, but for some reason we don't invoke `Complete` when we do `DeleteFlags.ToOptions` in `apply` and `replace`, and that's why David had to change the signature of `DeleteFlags.ToOptions` to make sure that dynamic client is initialized for those commands.",
        "createdAt" : "2018-05-22T11:30:17Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +128,132 @@\t\tExample: delete_example,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\to := deleteFlags.ToOptions(nil, streams)\n\t\t\tif err := o.Complete(f, args, cmd); err != nil {\n\t\t\t\tcmdutil.CheckErr(err)"
  },
  {
    "id" : "09d5d0ec-fbc6-47c0-a842-28c45079e0b3",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-122008748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eea0241-9bda-4cb7-ae65-1b2cd10ce4e6",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "I suggest that we remove this code and always require DynamicClient to be non-nil in `DeleteFlags.ToOptions()` method.\r\nAlternatively, we can make all other commands (`apply`, `replace` etc) using `DeleteOptions` to also invoke this `Complete` method, and then we can remove the `dynamicClient` parameter from `DeleteFlags.ToOptions()` method...",
        "createdAt" : "2018-05-22T03:08:08Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +205,209 @@\t}\n\n\to.DynamicClient, err = f.DynamicClient()\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "8ca0ea50-03a3-4a62-98ce-a937a49e92f6",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-122105732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d33ab8-5cdd-4b68-b6ea-6fbadf452502",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I'm not sure a week is needed :wink: I'd go with previous 5min being sufficient.",
        "createdAt" : "2018-05-22T10:27:56Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +330,334 @@\tif effectiveTimeout == 0 {\n\t\t// if we requested to wait forever, set it to a week.\n\t\teffectiveTimeout = 168 * time.Hour\n\t}\n\twaitOptions := kubectlwait.WaitOptions{"
  },
  {
    "id" : "4fde8a8b-c780-4390-80d6-fb534e0a744e",
    "prId" : 61378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61378#pullrequestreview-105656012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "768c436e-c964-424b-acd3-04339242e65a",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "There's a function `printDeletion` that prints \"resource foo deleted\" after deletion operation is sent successfully. \r\n\r\nWould you change the operation string to \"force deleted\" when `o.GracePeriod == 0`? So that `kubectl delete pod foo --grace-period=0 --force` prints `pod \"foo\" force deleted`. ",
        "createdAt" : "2018-03-20T21:56:39Z",
        "updatedAt" : "2018-03-21T08:28:41Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "51b86e44-1f1a-45dc-bf8f-5c9284f0802b",
        "parentId" : "768c436e-c964-424b-acd3-04339242e65a",
        "authorId" : "4daa8ff7-7a54-4106-96c8-653eec151574",
        "body" : "@janetkuo  Modified.\r\ncc @soltysh ",
        "createdAt" : "2018-03-21T09:57:13Z",
        "updatedAt" : "2018-03-21T09:57:13Z",
        "lastEditedBy" : "4daa8ff7-7a54-4106-96c8-653eec151574",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e6a430bce34b7de0e7a26fba8a5ed9c5f0441ad",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +227,231 @@\t\t\to.GracePeriod = 1\n\t\t}\n\t} else if o.ForceDeletion {\n\t\tfmt.Fprintf(o.ErrOut, \"warning: --force is ignored because --grace-period is not 0.\\n\")\n\t}"
  },
  {
    "id" : "aea6c20e-39d3-425d-9dc2-17b6ba1fdce9",
    "prId" : 48582,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48582#pullrequestreview-48542910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c3fe03-0ea5-4dde-bb25-2ec2926e0c05",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "the int type is strange. At least document here what it means.",
        "createdAt" : "2017-07-07T08:09:54Z",
        "updatedAt" : "2017-09-01T15:30:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d77295677b62bcc791b9f38febc2bf438ac55c95",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +290,294 @@}\n\nfunc DeleteResult(r *resource.Result, out io.Writer, ignoreNotFound bool, gracePeriod int, shortOutput bool, mapper meta.RESTMapper) error {\n\tfound := 0\n\tif ignoreNotFound {"
  },
  {
    "id" : "c3a555d5-f3bb-455a-bbf4-59f02904635a",
    "prId" : 48582,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48582#pullrequestreview-48692498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8cafed9-21d0-47f5-aaec-5fa48e07c64c",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`> 0`  should be enough",
        "createdAt" : "2017-07-07T08:10:32Z",
        "updatedAt" : "2017-09-01T15:30:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "65ba8ce0-9423-48b7-bd26-7f7333a5de0a",
        "parentId" : "c8cafed9-21d0-47f5-aaec-5fa48e07c64c",
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "In fact 0 is a valid value, only negatives are ignored.",
        "createdAt" : "2017-07-07T14:03:59Z",
        "updatedAt" : "2017-09-01T15:30:49Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "a6b82b59-bb1d-440e-ba63-c1c383e7d569",
        "parentId" : "c8cafed9-21d0-47f5-aaec-5fa48e07c64c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Didn't notice that `DeleteOptions.GracePeriodSeconds` is a pointer. Then it makes a difference indeed.",
        "createdAt" : "2017-07-07T19:04:37Z",
        "updatedAt" : "2017-09-01T15:30:49Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d77295677b62bcc791b9f38febc2bf438ac55c95",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +304,308 @@\t\torphan := true\n\t\toptions := &metav1.DeleteOptions{}\n\t\tif gracePeriod >= 0 {\n\t\t\toptions = metav1.NewDeleteOptions(int64(gracePeriod))\n\t\t}"
  },
  {
    "id" : "0067150a-f816-4ae6-af79-078e6c1bdc6f",
    "prId" : 40576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40576#pullrequestreview-23119015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64d2f90a-cae2-4ab7-bed9-cac6348c1c50",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is it only the federation resources that are missing reapers? Is it possible that users are relying on kubectl not cascading delete federation resources?",
        "createdAt" : "2017-02-03T08:31:27Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "cea17c7d-32e4-4b95-b3fe-7c012b40ea25",
        "parentId" : "64d2f90a-cae2-4ab7-bed9-cac6348c1c50",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "> Is it only the federation resources that are missing reapers?\r\n\r\nKubernetes resources are also missing reapers for resources where there is nothing to reap (for ex: secrets, configmaps). In federation, we need to reap them from underlying clusters. This change should not have any impact on any kubernetes resource.\r\n\r\n> Is it possible that users are relying on kubectl not cascading delete federation resources?\r\n\r\nCascading deletion should happen when users use `kubectl delete --cascading=true` with federation. Right now, it cascading deletes some resources (like namespaces, rs and deployments) and does not cascading deletes others resources (like secrets, configmaps). This is a bug that this PR fixes.\r\n\r\nDefault behavior is being discussed in https://github.com/kubernetes/kubernetes/issues/38897. The consensus seems to be to be consistent with kubernetes (i.e cascading delete by default).",
        "createdAt" : "2017-02-03T23:07:58Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "63def851-217a-4af8-a2e3-b395d8a798d8",
        "parentId" : "64d2f90a-cae2-4ab7-bed9-cac6348c1c50",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you for the explanation. I don't have further questions. @liggitt @smarterclayton do you have more comments?",
        "createdAt" : "2017-02-06T10:07:22Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "714a5a8a-7e6a-41ac-9c34-b0bb231d3e44",
        "parentId" : "64d2f90a-cae2-4ab7-bed9-cac6348c1c50",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should probably be cascading even for things that have reapers (reaper is a client implementation of cascade, so the intent is to cascade).  Do all existing reapers cascade?  If no, they should also orphan: false.",
        "createdAt" : "2017-02-08T19:49:03Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0e73eb0a-1775-4924-9ac4-54870b45602c",
        "parentId" : "64d2f90a-cae2-4ab7-bed9-cac6348c1c50",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done",
        "createdAt" : "2017-02-22T01:42:11Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6e2a09c2bf5765dac14c9e96f03540744102496",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +254,258 @@\t\t\tif kubectl.IsNoSuchReaperError(err) && isDefaultDelete {\n\t\t\t\t// No client side reaper found. Let the server do cascading deletion.\n\t\t\t\treturn cascadingDeleteResource(info, out, shortOutput, mapper)\n\t\t\t}\n\t\t\treturn cmdutil.AddSourceToErr(\"reaping\", info.Source, err)"
  },
  {
    "id" : "671510f2-804c-47ad-9164-9a15721eb219",
    "prId" : 40576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40576#pullrequestreview-23119015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f07f7a36-feb2-4b7d-b744-cecb0c3af2db",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a test case.",
        "createdAt" : "2017-02-08T19:49:13Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d8a5abc2-560c-46f2-893a-aa03b8ef0765",
        "parentId" : "f07f7a36-feb2-4b7d-b744-cecb0c3af2db",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done",
        "createdAt" : "2017-02-22T01:42:16Z",
        "updatedAt" : "2017-02-23T20:04:35Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6e2a09c2bf5765dac14c9e96f03540744102496",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +305,309 @@}\n\nfunc cascadingDeleteResource(info *resource.Info, out io.Writer, shortOutput bool, mapper meta.RESTMapper) error {\n\tfalseVar := false\n\tdeleteOptions := &metav1.DeleteOptions{OrphanDependents: &falseVar}"
  },
  {
    "id" : "688123da-0f7a-49bc-911a-e616e8def4eb",
    "prId" : 37263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37263#pullrequestreview-9693604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df3a4ee9-ed1b-4fab-9604-be586f6dad86",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "`--grace-period=0` may now be mutually exclusive with `--timeout`",
        "createdAt" : "2016-11-22T15:04:49Z",
        "updatedAt" : "2016-11-23T21:02:49Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "876c3df5-9393-4104-922d-478df056bea3",
        "parentId" : "df3a4ee9-ed1b-4fab-9604-be586f6dad86",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's not, timeout is still respected.",
        "createdAt" : "2016-11-22T15:50:40Z",
        "updatedAt" : "2016-11-23T21:02:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cdb6b169d88f592a0fa6880d10549750a346473",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +187,191 @@\t\t\t// to bypass this wait.\n\t\t\twait = true\n\t\t\tgracePeriod = 1\n\t\t}\n\t}"
  },
  {
    "id" : "4734fd61-0f28-46d8-91dc-04bf6f89401f",
    "prId" : 37263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37263#pullrequestreview-10569238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b846548-533d-43d7-bb68-587944747f3e",
        "parentId" : null,
        "authorId" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "body" : "I think in the timeout case, we should return a better error than \"timed out waiting for the condition\" because we surface \r\nthat error to the user.",
        "createdAt" : "2016-11-29T11:43:11Z",
        "updatedAt" : "2016-11-29T11:43:11Z",
        "lastEditedBy" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "tags" : [
        ]
      },
      {
        "id" : "fad05df0-be4e-4da4-bffe-a6b289e0d2f7",
        "parentId" : "6b846548-533d-43d7-bb68-587944747f3e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "the error is going to be \"error when stopping pod/foo: timed out waiting for the condition\" which is pretty close.  I think that's something we could improve in a follow up (there's basically a follow up here which is delete needs a better cleanup)",
        "createdAt" : "2016-11-29T16:17:52Z",
        "updatedAt" : "2016-11-29T16:17:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cdb6b169d88f592a0fa6880d10549750a346473",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +281,285 @@\tinfo = &copied\n\t// TODO: refactor Reaper so that we can pass the \"wait\" option into it, and then check for UID change.\n\treturn wait.PollImmediate(objectDeletionWaitInterval, timeout, func() (bool, error) {\n\t\tswitch err := info.Get(); {\n\t\tcase err == nil:"
  },
  {
    "id" : "cc54cbd4-6e33-489a-ace8-2a7c073d9c7b",
    "prId" : 35484,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35484#pullrequestreview-6916148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32c9163c-7278-4eac-9724-fd4073dae74c",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nit: I'd place a `WARNING:` prefix to this message!\n",
        "createdAt" : "2016-11-01T16:00:04Z",
        "updatedAt" : "2016-11-02T21:44:12Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ebd05d66-b1b5-4f81-bfe5-cb3a1ca51895",
        "parentId" : "32c9163c-7278-4eac-9724-fd4073dae74c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree, but we can't do that today without changes to the command stuff.  I'll open a follow up.\n",
        "createdAt" : "2016-11-01T17:34:11Z",
        "updatedAt" : "2016-11-02T21:44:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9c94038f-0297-45f0-bb9d-b138d43adf6f",
        "parentId" : "32c9163c-7278-4eac-9724-fd4073dae74c",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Excuse my ignorance, why is it not possible to add a string prefix to the error message here?\n",
        "createdAt" : "2016-11-02T21:26:40Z",
        "updatedAt" : "2016-11-02T21:44:12Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6e3f36da-e578-4129-b976-71b96c0d7184",
        "parentId" : "32c9163c-7278-4eac-9724-fd4073dae74c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "All errors are prefixed with `error:`.  So if we added a prefix it would be `error: WARNING: blah` which doesn't make much sense.\n",
        "createdAt" : "2016-11-02T21:38:00Z",
        "updatedAt" : "2016-11-02T21:44:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e258303781c69b877e535aed503d77ef4e4bd64",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +173,177 @@\t}\n\tif gracePeriod == 0 && !cmdutil.GetFlagBool(cmd, \"force\") {\n\t\treturn fmt.Errorf(\"Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely. You must pass --force to delete with grace period 0.\")\n\t}\n"
  },
  {
    "id" : "0877da89-e282-46c4-9503-76320c121504",
    "prId" : 23756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3331edd4-9f7a-4bb4-bbff-345e833ca98d",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "we can allow `--now` and `--grace-period=0` to be set together (although it's redundant)\n",
        "createdAt" : "2016-04-08T05:45:33Z",
        "updatedAt" : "2016-04-08T05:45:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea3467f8225ea513365c086dc3920018b8b154e2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +146,150 @@\tif cmdutil.GetFlagBool(cmd, \"now\") {\n\t\tif gracePeriod != -1 {\n\t\t\treturn fmt.Errorf(\"--now and --grace-period cannot be specified together\")\n\t\t}\n\t\tgracePeriod = 0"
  },
  {
    "id" : "ff074714-e3cc-48f9-a741-26ef260cf8be",
    "prId" : 3198,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49a2429d-9c1f-4272-87ff-ec408bd40482",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please update the usage string to indicate that multiple inputs are possible.\n",
        "createdAt" : "2015-01-09T22:09:03Z",
        "updatedAt" : "2015-01-09T22:09:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ff55e4781dc795f55a330b1ec351f864533a40",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +34,38 @@\t}{}\n\tcmd := &cobra.Command{\n\t\tUse:   \"delete ([-f filename] | (<resource> [(<id> | -l <label>)]\",\n\t\tShort: \"Delete a resource by filename, stdin or resource and id\",\n\t\tLong: `Delete a resource by filename, stdin, resource and id or by resources and label selector."
  },
  {
    "id" : "584b6c7c-8210-4480-89de-dadaf23c46cd",
    "prId" : 1325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3366b2e-c0db-4cf4-8e2e-a3ad0f75a4d3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "sub \"kind\" for \"resource\" - since \"kind\" is the JSON field?  And if so, same with other commands.\n",
        "createdAt" : "2014-10-15T03:35:13Z",
        "updatedAt" : "2014-10-15T22:30:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b220f8b0a3f4671b3c7883b161f8475894fabe7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@func NewCmdDelete(out io.Writer) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"delete ([-f filename] | (<resource> <id>))\",\n\t\tShort: \"Delete a resource by filename, stdin or resource and id\",\n\t\tLong: `Delete a resource by filename, stdin or resource and id."
  }
]