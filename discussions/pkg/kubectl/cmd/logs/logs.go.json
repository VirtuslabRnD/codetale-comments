[
  {
    "id" : "ba8915a6-43a3-4f67-b711-49ce3c65ca30",
    "prId" : 78825,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78825#pullrequestreview-247410204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8d9bc6d-19ae-4d00-afdd-4ffa91d519cb",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "/ok-to-test\r\n/priority backlog\r\n/lgtm",
        "createdAt" : "2019-06-09T18:42:55Z",
        "updatedAt" : "2019-06-10T02:06:15Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a3ac35b54e8106e1db11fbbed787d6b6c56f199",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +325,329 @@\tfor _, request := range requests {\n\t\tgo func(request rest.ResponseWrapper) {\n\t\t\tdefer wg.Done()\n\t\t\tif err := o.ConsumeRequestFn(request, writer); err != nil {\n\t\t\t\tif !o.IgnoreLogErrors {"
  },
  {
    "id" : "a44df6ff-68e9-44fd-be33-42cf58d5efce",
    "prId" : 67573,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67573#pullrequestreview-193699769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62df0c04-0d06-4680-8270-5227a930e40b",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I think you want to block the main flow until you hear back from the wait group, iow. this code should not be part of any goroutine. ",
        "createdAt" : "2019-01-17T14:24:44Z",
        "updatedAt" : "2019-01-20T13:51:29Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "4888e9f8-ceac-4859-82ef-abc39cd53cb1",
        "parentId" : "62df0c04-0d06-4680-8270-5227a930e40b",
        "authorId" : "cfd6a67f-20c0-448d-9cbf-8d0ffbc2a74f",
        "body" : "`io.Copy` below blocks the main flow. If we do not close pipe writer (`pipew` currently), it will be blocking the main flow forever (even if the server closed the connection). So we are waiting for all requests to finish in a separate goroutine and close the writer (as a result `io.Copy` stops blocking the main flow).\r\n\r\nOr do I miss something?",
        "createdAt" : "2019-01-17T15:58:05Z",
        "updatedAt" : "2019-01-20T13:51:29Z",
        "lastEditedBy" : "cfd6a67f-20c0-448d-9cbf-8d0ffbc2a74f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a230cc119379bcf8aa50c070f955dc1a5b81bca",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +334,338 @@\t}\n\n\tgo func() {\n\t\twg.Wait()\n\t\twriter.Close()"
  },
  {
    "id" : "d1079a9a-09da-4ce1-b33e-c25635cae368",
    "prId" : 67573,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67573#pullrequestreview-193704854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2506cf46-9dd8-450e-b4c5-d24d5f0542d5",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "```\r\nif err != nil && err != io.EOF {\r\n    return err\r\n}\r\nreturn nil\r\n```",
        "createdAt" : "2019-01-17T14:27:55Z",
        "updatedAt" : "2019-01-20T13:51:29Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "75cb4f30-7d63-45f9-876e-c1bafb6b5de5",
        "parentId" : "2506cf46-9dd8-450e-b4c5-d24d5f0542d5",
        "authorId" : "cfd6a67f-20c0-448d-9cbf-8d0ffbc2a74f",
        "body" : "@soltysh `return nil` will stop the `for` loop after the first iteration. We want to return from the function when the first error appears, but we don't treat `io.EOF` as an error (because it is what we are waiting for). In case of no error we want to continue the loop.",
        "createdAt" : "2019-01-17T16:07:11Z",
        "updatedAt" : "2019-01-20T13:51:29Z",
        "lastEditedBy" : "cfd6a67f-20c0-448d-9cbf-8d0ffbc2a74f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a230cc119379bcf8aa50c070f955dc1a5b81bca",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +375,379 @@\t\t}\n\n\t\tif err != nil {\n\t\t\tif err != io.EOF {\n\t\t\t\treturn err"
  }
]