[
  {
    "id" : "bfff7682-3347-43e7-9f12-6ed6052c56f4",
    "prId" : 24719,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fa49b78-3078-405b-a842-382854526758",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@bgrant0607 This looks like the fifth single use generator that can only be used from one spot and that spot can only support one generator.  Are we certain that we want to keep using this pattern and all its associated cruft for what can be an extremely straightforward bit of code: https://github.com/openshift/origin/pull/8428/files#diff-e653935dd29aec88f0bed0fc15c57e6fR112 ?\n",
        "createdAt" : "2016-04-26T12:25:28Z",
        "updatedAt" : "2016-05-17T05:39:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "11dfb00d-8fe0-4a78-8ff6-2d85b6ce87ff",
        "parentId" : "5fa49b78-3078-405b-a842-382854526758",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "After thinking hard about it, I am wondering why switching between groupversions (something equivalent to --api-version from which more commands would benefit and not just commands that use generators) would be any different from switching between generators. `expose` is the only command that seems to use different kinds of generators (`run` generators can be derived from restartPolicy). Also powers that force us to add a second generator for the same version, mean that people using the first generator stay broken.\n",
        "createdAt" : "2016-04-26T12:58:45Z",
        "updatedAt" : "2016-05-17T05:39:11Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e5326545-85fe-499e-b647-903f6b081e4d",
        "parentId" : "5fa49b78-3078-405b-a842-382854526758",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@deads2k - I appreciate your stamina re: generators, but isn't it premature to argue against them in the O(1) case?  After all, isn't the point that we dont know how things will evolve?  What happens if we have `BetterSecret` that supports encryption at rest and requires slightly different input?\n",
        "createdAt" : "2016-04-27T20:52:39Z",
        "updatedAt" : "2016-05-17T05:39:11Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "daa8e29c5b5c0b7bc549cbef010434028a9e6c25",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +240,244 @@\tvar generator kubectl.StructuredGenerator\n\tswitch generatorName := cmdutil.GetFlagString(cmd, \"generator\"); generatorName {\n\tcase cmdutil.SecretForTLSV1GeneratorName:\n\t\tgenerator = &kubectl.SecretForTLSGeneratorV1{\n\t\t\tName: name,"
  }
]