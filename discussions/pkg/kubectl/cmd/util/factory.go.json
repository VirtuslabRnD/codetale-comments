[
  {
    "id" : "b9292496-6a78-4a41-8a8c-e8c943d9d9fa",
    "prId" : 52321,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52321#pullrequestreview-62024004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28abe11e-7614-410b-9d36-558a416757a6",
        "parentId" : null,
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "Why is `third` here? I must be missing something :)",
        "createdAt" : "2017-09-12T03:39:59Z",
        "updatedAt" : "2017-09-12T03:40:04Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "247c4113-4429-47e9-b142-93368d243214",
        "parentId" : "28abe11e-7614-410b-9d36-558a416757a6",
        "authorId" : "b877a651-ac19-4f3e-b693-12f6987a6764",
        "body" : "ClientAccessFactory is the first level.\r\nObjectMappingFactory depends on ClientAccessFactory and it's the second level.\r\nBuilderFactory depends on ObjectMappingFactory, so I think it should be the third level.",
        "createdAt" : "2017-09-12T03:47:33Z",
        "updatedAt" : "2017-09-12T03:47:33Z",
        "lastEditedBy" : "b877a651-ac19-4f3e-b693-12f6987a6764",
        "tags" : [
        ]
      },
      {
        "id" : "fb413c46-4bc2-43e8-8743-c9457d0c3d61",
        "parentId" : "28abe11e-7614-410b-9d36-558a416757a6",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "yes, rings are `ClientAccessFactory -> ObjectMappingFactory -> BuilderFactory`, thanks for the comment fix",
        "createdAt" : "2017-09-12T05:32:32Z",
        "updatedAt" : "2017-09-12T05:32:32Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4afb09ab91573aff59c9447064cbd3f2062eae5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +241,245 @@}\n\n// BuilderFactory holds the third level of factory methods. These functions depend upon ObjectMappingFactory and ClientAccessFactory methods.\n// Generally they depend upon client mapper functions\ntype BuilderFactory interface {"
  },
  {
    "id" : "63746b26-5beb-47e7-8088-1588b01f0c02",
    "prId" : 49146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49146#pullrequestreview-51577834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d138d4d4-59d8-47f4-a1b2-3552c1ce1609",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I want to understand the reason why stopping using pointer, though I don't think it matters since `Resources` only has 2 maps in it.",
        "createdAt" : "2017-07-21T20:04:41Z",
        "updatedAt" : "2017-07-25T18:45:37Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "3548128c-aced-4334-b030-35348810d84f",
        "parentId" : "d138d4d4-59d8-47f4-a1b2-3552c1ce1609",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Because it used to be a struct, and it's not an interface. Pointer to an interface doesn't make as much sense as a pointer to a struct.",
        "createdAt" : "2017-07-21T20:28:27Z",
        "updatedAt" : "2017-07-25T18:45:37Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "064f80642489d7eeb82d4d43d6c7a2163c2736bb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +225,229 @@\tSwaggerSchema(schema.GroupVersionKind) (*swagger.ApiDeclaration, error)\n\t// OpenAPISchema returns the schema openapi schema definiton\n\tOpenAPISchema(cacheDir string) (openapi.Resources, error)\n}\n"
  },
  {
    "id" : "2dbc28f9-0050-481f-a0a2-c51afd043a55",
    "prId" : 38966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38966#pullrequestreview-13637766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea4fa02-fe5c-4c26-afb0-2553a2226e45",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Describe `[]byte` in the Godoc here.",
        "createdAt" : "2016-12-19T20:45:52Z",
        "updatedAt" : "2016-12-21T11:31:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "17a711d8fdb1140c4bba200aadaefbe8d6d0fa08",
    "line" : null,
    "diffHunk" : "@@ -1,1 +150,154 @@\t// Returns the patched object in bytes and any error that occured during the encoding or\n\t// in case the object is already paused.\n\tPauser(info *resource.Info) ([]byte, error)\n\t// Resumer resumes a paused object inside the info. Currently supported only for Deployments.\n\t// Returns the patched object in bytes and any error that occured during the encoding or"
  },
  {
    "id" : "0a8b0d5a-b121-4ca6-99ed-2feb9fbbb055",
    "prId" : 38903,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38903#pullrequestreview-13565276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad2f78fd-51d7-43a4-b26b-2a42b5cc88f1",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "directions?",
        "createdAt" : "2016-12-19T14:34:40Z",
        "updatedAt" : "2016-12-19T14:34:40Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "b2f48d6f-1941-4cbb-86a6-487fbe3c90f8",
        "parentId" : "ad2f78fd-51d7-43a4-b26b-2a42b5cc88f1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> directions?\r\n\r\nconnection info?  address, port, certs, etc",
        "createdAt" : "2016-12-19T14:41:54Z",
        "updatedAt" : "2016-12-19T14:41:54Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "01559ec8-0f08-4403-96ac-22fd7cb89c3c",
        "parentId" : "ad2f78fd-51d7-43a4-b26b-2a42b5cc88f1",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "nvm, was thinking this should have been \"direct\" but I get it now.",
        "createdAt" : "2016-12-19T14:47:11Z",
        "updatedAt" : "2016-12-19T14:47:11Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b507e8603d0320bec2a80aeecef9b0883698e23",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +93,97 @@\tClientConfig() (*restclient.Config, error)\n\t// BareClientConfig returns a client.Config that has NOT been negotiated. It's\n\t// just directions to the server. People use this to build RESTMappers on top of\n\tBareClientConfig() (*restclient.Config, error)\n"
  },
  {
    "id" : "8196a9df-0d50-4a88-b6d8-5042235fafd2",
    "prId" : 37098,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37098#pullrequestreview-9452773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a2080e2-4975-4e83-a4f9-2cb1fb0dc25d",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I'm a little bit hesitant to use this lengthy generator name. Although this one will not be probably exposed to users.",
        "createdAt" : "2016-11-21T09:33:47Z",
        "updatedAt" : "2016-11-21T13:50:12Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "42c4d0ab-c535-49a7-98f8-b12f35f97995",
        "parentId" : "9a2080e2-4975-4e83-a4f9-2cb1fb0dc25d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'm a little bit hesitant to use this lengthy generator name. Although this one will not be probably exposed to users.\r\n\r\nWe get a release to change it if we don't like it.  If we expect these to take off (I still think its unlikely), we'll need a reasonable way to namespace them.",
        "createdAt" : "2016-11-21T13:32:47Z",
        "updatedAt" : "2016-11-21T13:50:12Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "91b5c71e-3aa7-4b08-9883-20ce35f24819",
        "parentId" : "9a2080e2-4975-4e83-a4f9-2cb1fb0dc25d",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "My main concern is when using `kubectl run` we advice users to use `--generator` flag to be sure this works consistently between versions. But I guess the current directions are to get rid of run and rather replace it with targeted `kubectl create` commands. That's why I guess I'm good with that.  ",
        "createdAt" : "2016-11-21T13:41:16Z",
        "updatedAt" : "2016-11-21T13:50:12Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e300f01a1bc8771d610f8568e0799527e72826b9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +207,211 @@\tSecretForTLSV1GeneratorName                 = \"secret-for-tls/v1\"\n\tConfigMapV1GeneratorName                    = \"configmap/v1\"\n\tClusterRoleBindingV1GeneratorName           = \"clusterrolebinding.rbac.authorization.k8s.io/v1alpha1\"\n\tClusterV1Beta1GeneratorName                 = \"cluster/v1beta1\"\n)"
  },
  {
    "id" : "5b541b3b-4371-4a93-a944-788c5e12d1ed",
    "prId" : 36085,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36085#pullrequestreview-7186762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "437f23ad-aef7-404d-bebf-8984cc7bd131",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it's intentional to call `ReaperFor` despite of a clientsetErr? If yes, please add a comment why.\n",
        "createdAt" : "2016-11-04T09:08:39Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e742db53-aea4-4122-89f7-b0c5437ac290",
        "parentId" : "437f23ad-aef7-404d-bebf-8984cc7bd131",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "fixing\n",
        "createdAt" : "2016-11-04T12:02:37Z",
        "updatedAt" : "2016-11-04T13:05:00Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "61673c4b39606fc7e1de9a3cdd4ff5aaaebc0f31",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +669,673 @@\tmappingVersion := mapping.GroupVersionKind.GroupVersion()\n\tclientset, clientsetErr := f.clients.ClientSetForVersion(&mappingVersion)\n\treaper, reaperErr := kubectl.ReaperFor(mapping.GroupVersionKind.GroupKind(), clientset)\n\n\tif kubectl.IsNoSuchReaperError(reaperErr) {"
  },
  {
    "id" : "f9f48616-91bd-4ee9-89fb-69af97a79def",
    "prId" : 33180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33180#pullrequestreview-3408206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d2c49b1-4301-493a-9c8c-e4dceb8d351b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why have these been added?\n",
        "createdAt" : "2016-09-26T12:20:48Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "793bf274-ddd9-4682-85b1-a7d8f4fbedab",
        "parentId" : "6d2c49b1-4301-493a-9c8c-e4dceb8d351b",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "@deads2k originally `Factory` struct has these methods, and they are exported, so other packages can use. If we make `Factory` interface, and not add these methods to the interface definition, other packages which use this interface can not use theses methods anymore.\n",
        "createdAt" : "2016-10-08T13:03:53Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2280a646ad4384ee223bc9f80a54645c14ad71d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +162,166 @@\t// Command will stringify and return all environment arguments ie. a command run by a client\n\t// using the factory.\n\tCommand() string\n\t// BindFlags adds any flags that are common to all kubectl sub commands.\n\tBindFlags(flags *pflag.FlagSet)"
  },
  {
    "id" : "af56f09b-96fd-4fc9-93f0-39ed6379cc0d",
    "prId" : 33180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33180#pullrequestreview-3408446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0c66a2e-b6eb-436d-9f4b-a0bf77ad010c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If these weren't exposed before, lets keep them hidden.  I don't think we want to encourage access patterns like this.\n",
        "createdAt" : "2016-09-26T12:21:22Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "515b0206-5152-4d46-be2c-7fcd8cfd8169",
        "parentId" : "a0c66a2e-b6eb-436d-9f4b-a0bf77ad010c",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "@deads2k actually these are methods of `Factory` struct before, and they are exported. The problem is why we add these methods as struct methods, and others as struct fields.\n",
        "createdAt" : "2016-10-08T13:24:56Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2280a646ad4384ee223bc9f80a54645c14ad71d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +164,168 @@\tCommand() string\n\t// BindFlags adds any flags that are common to all kubectl sub commands.\n\tBindFlags(flags *pflag.FlagSet)\n\t// BindExternalFlags adds any flags defined by external projects (not part of pflags)\n\tBindExternalFlags(flags *pflag.FlagSet)"
  },
  {
    "id" : "76094fe8-d2f4-42b5-b0bd-546be86ffd61",
    "prId" : 33180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33180#pullrequestreview-1523725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0b1ef44-9e38-4aca-b4d7-43094919b247",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "please remove/hide.  We don't want to the factory accepting the command.  We want specific structs passing the information we need and all of these look be net-new\n",
        "createdAt" : "2016-09-26T12:22:46Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2280a646ad4384ee223bc9f80a54645c14ad71d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +173,177 @@\n\t// PrintObject prints an api object given command line flags to modify the output format\n\tPrintObject(cmd *cobra.Command, mapper meta.RESTMapper, obj runtime.Object, out io.Writer) error\n\t// PrinterForMapping returns a printer suitable for displaying the provided resource type.\n\t// Requires that printer flags have been added to cmd (see AddPrinterFlags)."
  },
  {
    "id" : "60629d97-39c0-41ce-b05e-03e0c0881b1b",
    "prId" : 33180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33180#pullrequestreview-4035522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3974dc32-4c75-4876-a2fa-e3ee42640247",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Nice\n",
        "createdAt" : "2016-10-13T09:37:19Z",
        "updatedAt" : "2016-10-13T13:02:35Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2280a646ad4384ee223bc9f80a54645c14ad71d",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +178,182 @@\tPrinterForMapping(cmd *cobra.Command, mapping *meta.RESTMapping, withNamespace bool) (kubectl.ResourcePrinter, error)\n\t// One stop shopping for a Builder\n\tNewBuilder() *resource.Builder\n}\n"
  },
  {
    "id" : "5d93d809-a924-4661-9541-fd151dcf606e",
    "prId" : 32493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21644f03-9493-4de0-b2e9-c65d6178adc2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The arg to this method is dead, but ripping it out requires considering how to handle the now-dead flag.  I'd like to do that separately.\n",
        "createdAt" : "2016-09-12T14:26:17Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +301,305 @@\t\t\t\tcmdApiVersion = *cfg.GroupVersion\n\t\t\t}\n\n\t\t\tmapper := registered.RESTMapper()\n\t\t\t// if we can find the server version and it's current enough to have discovery information, use it.  Otherwise,"
  },
  {
    "id" : "b20ff277-865f-48ae-9502-bfcc7befde70",
    "prId" : 32493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03b1bdab-a708-48e3-89be-91aa229440f6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: no empty line\n",
        "createdAt" : "2016-09-13T13:22:36Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1305,1309 @@\t\t\treturn err\n\t\t}\n\n\t\taccessor := meta.NewAccessor()\n\t\tgroupMeta := apimachinery.GroupMeta{"
  },
  {
    "id" : "22a54edf-2720-47e8-b227-cbb1ddb82d51",
    "prId" : 32493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d93ac890-a8b2-4042-b8ad-348c6f95aa94",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This is not fatal anymore. I guess that's intentional.\n",
        "createdAt" : "2016-09-13T13:59:58Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "06a93a4f-d0fb-4f3a-b912-40c2ff8112db",
        "parentId" : "d93ac890-a8b2-4042-b8ad-348c6f95aa94",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This is not fatal anymore. I guess that's intentional.\n\nYeah, it should never have been fatal.  It's useful to know that it failed (hence the message), but its not a thing that matters most of the time.  If it matters, you'll fail later.\n",
        "createdAt" : "2016-09-13T14:14:14Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "06d902e5-7d6a-4263-a945-c684b0ae4aed",
        "parentId" : "d93ac890-a8b2-4042-b8ad-348c6f95aa94",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "> Yeah, it should never have been fatal. It's useful to know that it failed (hence the message), but its not a thing that matters most of the time. If it matters, you'll fail later.\n\n+1\n",
        "createdAt" : "2016-09-13T14:25:44Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "7fdae5c9-2026-46aa-b503-ef4abad731c6",
        "parentId" : "d93ac890-a8b2-4042-b8ad-348c6f95aa94",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Compare https://github.com/kubernetes/kubernetes/issues/32678. `/version` should be optional.\n",
        "createdAt" : "2016-09-14T16:48:20Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "84aba3e4-9567-4de7-a305-820f1156320f",
        "parentId" : "d93ac890-a8b2-4042-b8ad-348c6f95aa94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also old servers don't have third party resources.\n",
        "createdAt" : "2016-09-14T16:59:38Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +310,314 @@\t\t\t\t\t// its consistent with old code, so we'll start with it.\n\t\t\t\t\tif err := registerThirdPartyResources(discoveryClient); err != nil {\n\t\t\t\t\t\tfmt.Fprintf(os.Stderr, \"Unable to register third party resources: %v\\n\", err)\n\t\t\t\t\t}\n\t\t\t\t\t// ThirdPartyResourceData is special.  It's not discoverable, but needed for thirdparty resource listing"
  },
  {
    "id" : "9c7ce438-1d1f-4bfa-a5a2-3d7b9f15db2a",
    "prId" : 32493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c3df17b-9c81-423d-9122-3b89d1330e62",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Is it worth to check for serverVersion being empty? Otherwise, this panics.\n",
        "createdAt" : "2016-09-13T14:59:05Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1265,1269 @@\t\treturn false\n\t}\n\tserverSemVer, err := semver.Parse(serverVersion[1:])\n\tif err != nil {\n\t\treturn false"
  },
  {
    "id" : "80e8a8bc-d7c5-4c46-8202-bc0dc16db717",
    "prId" : 32493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32493#pullrequestreview-33120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27016c59-5bb3-41d6-98f2-28db9e2c8945",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "Should you rely on the server version to decide about this? Would it be possible to try to register the third-party resources and fallback on error?\n",
        "createdAt" : "2016-09-13T18:17:03Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "6c7c2b64-2657-42d4-83bc-09900e1e7367",
        "parentId" : "27016c59-5bb3-41d6-98f2-28db9e2c8945",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Discovery information was incomplete before.  I agree that this will end up causing a problem when running against servers that either don't host `/version` or reflect their versions, not kube versions.\n\nI'll open a followup issue.\n",
        "createdAt" : "2016-09-14T19:44:48Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +1261,1265 @@// enough discovery information available to reliably build a RESTMapper.  If not, use the\n// hardcoded mapper in this client (legacy behavior)\nfunc useDiscoveryRESTMapper(serverVersion string) bool {\n\tif len(serverVersion) == 0 {\n\t\treturn false"
  },
  {
    "id" : "d9f2ac22-9513-4e30-84a9-2658eeeb1570",
    "prId" : 32493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc81ef73-1d88-4b77-8f34-c57c2c9e1d48",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: s/its/it's/\n",
        "createdAt" : "2016-09-14T06:41:01Z",
        "updatedAt" : "2016-09-15T15:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +1258,1262 @@}\n\n// useDiscoveryRESTMapper checks the server version to see if its recent enough to have\n// enough discovery information available to reliably build a RESTMapper.  If not, use the\n// hardcoded mapper in this client (legacy behavior)"
  },
  {
    "id" : "72f6a0bd-ed59-49be-a277-f34bb50b2f3f",
    "prId" : 32493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32493#pullrequestreview-6789910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "105bb517-aa49-4703-915a-4c6ad373a6a8",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "After `registerThirdPartyResources` uses discovery info synchronously, there is not much sense to defer its use in the `RESTMapper`.\n",
        "createdAt" : "2016-11-02T11:00:47Z",
        "updatedAt" : "2016-11-02T11:00:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "771915c6c473d244abba696f4a6d84dd5cd11602",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +319,323 @@\t\t\t\t\tmapper = meta.FirstHitRESTMapper{\n\t\t\t\t\t\tMultiRESTMapper: meta.MultiRESTMapper{\n\t\t\t\t\t\t\tdiscovery.NewDeferredDiscoveryRESTMapper(discoveryClient, registered.InterfacesFor),\n\t\t\t\t\t\t\tthirdPartyResourceDataMapper,\n\t\t\t\t\t\t},"
  },
  {
    "id" : "cd27c197-ed94-4a4b-a6b4-944e756477c8",
    "prId" : 26597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f499f281-f0b2-48c3-958a-729f8dd123f6",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "The not found `err` will still be captured here. \n",
        "createdAt" : "2016-06-01T00:00:36Z",
        "updatedAt" : "2016-06-01T00:14:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e295c1fb-e8ca-4aff-929b-644a4a9b10c7",
        "parentId" : "f499f281-f0b2-48c3-958a-729f8dd123f6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "never mind\n",
        "createdAt" : "2016-06-01T00:01:02Z",
        "updatedAt" : "2016-06-01T00:14:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cea7ccd8de894dbe5e2cd1dcf041b9baae03176",
    "line" : null,
    "diffHunk" : "@@ -1,1 +274,278 @@\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCheckErr(err)\n\t\t\t\tif len(versions) > 0 {\n\t\t\t\t\tpriorityMapper, ok := mapper.RESTMapper.(meta.PriorityRESTMapper)"
  },
  {
    "id" : "317f6758-1553-4378-bbab-844df97d173f",
    "prId" : 25816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee77aaad-298d-4eba-a514-d22fb72740cc",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "All that is different between this and default should be that APIPath is \"/api\" vs \"/apis\"\n",
        "createdAt" : "2016-07-14T21:53:00Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c68a9015308a7c4dfac396cdbe64f058aa3f73",
    "line" : null,
    "diffHunk" : "@@ -1,1 +362,366 @@\t\t\tswitch gvk.Group {\n\t\t\tcase federation.GroupName:\n\t\t\t\tmappingVersion := mapping.GroupVersionKind.GroupVersion()\n\t\t\t\treturn clients.FederationClientForVersion(&mappingVersion)\n\t\t\tcase api.GroupName:"
  },
  {
    "id" : "5470e60c-ab4a-45c7-a76e-9aedec91fb81",
    "prId" : 24016,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff67aab0-e3f1-4c8b-8374-b1f30e23e3fc",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Another way to implement this is to have a way for kubectl to detect that it is talking to federation apiserver (using discovery api) and then always use the federation clientset and FederationDescriber.\nThat way, we can implement different federation describer for `kubectl describe services` as well.\n",
        "createdAt" : "2016-05-13T21:46:35Z",
        "updatedAt" : "2016-05-16T23:47:08Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "47366d78-2ac6-4aa2-b3db-334fc049d014",
        "parentId" : "ff67aab0-e3f1-4c8b-8374-b1f30e23e3fc",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "To clarify, I dont want you to change that in this PR. Consider the above as a thought that we can discuss more.\n",
        "createdAt" : "2016-05-13T21:47:42Z",
        "updatedAt" : "2016-05-16T23:47:08Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "206ca8bc-4aad-4349-ac0e-2b4b473cd85f",
        "parentId" : "ff67aab0-e3f1-4c8b-8374-b1f30e23e3fc",
        "authorId" : "a179bbc5-3a91-4905-bad9-4458ac257dba",
        "body" : "ok, maybe put it in #25592\n",
        "createdAt" : "2016-05-13T23:04:59Z",
        "updatedAt" : "2016-05-16T23:47:08Z",
        "lastEditedBy" : "a179bbc5-3a91-4905-bad9-4458ac257dba",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f8fc60d06ff73aa0fada4b8eca4532bf40c19b7",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +357,361 @@\t\tDescriber: func(mapping *meta.RESTMapping) (kubectl.Describer, error) {\n\t\t\tmappingVersion := mapping.GroupVersionKind.GroupVersion()\n\t\t\tif mapping.GroupVersionKind.Group == federation.GroupName {\n\t\t\t\tfedClientSet, err := clients.FederationClientSetForVersion(&mappingVersion)\n\t\t\t\tif err != nil {"
  },
  {
    "id" : "32a396a1-3e82-4d4a-8b23-2603d718fd83",
    "prId" : 23590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d7963a-5211-4bde-ba63-e2cff6d73eae",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "use the resourceVersion from your list\n",
        "createdAt" : "2016-03-30T13:58:45Z",
        "updatedAt" : "2016-05-02T13:56:57Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25088fe15eefb4a794ea483d924fe1ec1f08e8f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +718,722 @@\t// Watch until we observe a pod\n\toptions.ResourceVersion = podList.ResourceVersion\n\tw, err := client.Pods(namespace).Watch(options)\n\tif err != nil {\n\t\treturn nil, 0, err"
  },
  {
    "id" : "49defb01-00b3-496a-93e4-d83477d7aa3b",
    "prId" : 21335,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45b007ee-e347-4bf3-b458-c63dc8eef425",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Shouldn't we sort this list and pick the oldest pod?\n",
        "createdAt" : "2016-03-01T14:36:34Z",
        "updatedAt" : "2016-03-03T16:17:53Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "35f3129b-6ad2-4643-bfce-11018b38478c",
        "parentId" : "45b007ee-e347-4bf3-b458-c63dc8eef425",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Shouldn't we sort this list and pick the oldest pod?\n\nI didn't want to change the order on the other callers.  If `kubectl logs` chooses one, the oldest one isn't likely to be the correct choice. You probably want to check things like status to find the most recent one that failed.  For attach, you want to find one that's running and probably the most recent one.\n\nAt any rate, I'm not convinced that sorting makes the behavior better.\n",
        "createdAt" : "2016-03-01T14:48:35Z",
        "updatedAt" : "2016-03-03T16:17:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "279d1317-a565-41dc-853a-8268f827a911",
        "parentId" : "45b007ee-e347-4bf3-b458-c63dc8eef425",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Fair, I don't feel strong anyway\n",
        "createdAt" : "2016-03-01T14:53:38Z",
        "updatedAt" : "2016-03-03T16:17:53Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8f45df5784eb0dd1e251284cfcd93470f6d2bd4",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +609,613 @@\t\t}\n\t}\n\tpod := &pods.Items[0]\n\treturn pod, len(pods.Items), nil\n}"
  },
  {
    "id" : "55797d5a-f03f-463b-8c7f-2dfa8a7639aa",
    "prId" : 21318,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5e9d213-f47c-4505-af5c-991e37432647",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you fix this to copy the passed in args (not mutate them), and just use `args[0]` directly instead of hard-coding `kubectl`?\n",
        "createdAt" : "2016-02-16T17:57:54Z",
        "updatedAt" : "2016-02-17T11:16:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6fd1efed-6c5b-4061-a0d9-6a39528445ce",
        "parentId" : "b5e9d213-f47c-4505-af5c-991e37432647",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ok\n",
        "createdAt" : "2016-02-16T18:26:53Z",
        "updatedAt" : "2016-02-17T11:16:25Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "ea904755-c93f-44f6-9ebb-79532c236b8a",
        "parentId" : "b5e9d213-f47c-4505-af5c-991e37432647",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is still mutating os.Args. something like this would be better:\n\n```\n    if len(os.Args) == 0 {\n        return \"\"\n    }\n    base := filepath.Base(os.Args[0])\n    args := append([]string{base}, os.Args[1:]...)\n    return strings.Join(args, \" \")\n```\n",
        "createdAt" : "2016-02-17T05:06:09Z",
        "updatedAt" : "2016-02-17T11:16:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f77d6527-db33-49c4-9214-84b84d4108b3",
        "parentId" : "b5e9d213-f47c-4505-af5c-991e37432647",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "updated\n",
        "createdAt" : "2016-02-17T11:16:41Z",
        "updatedAt" : "2016-02-17T11:16:41Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "55f402c5a611588dc08aff1f32370bb2854669ac",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +556,560 @@\tbase := filepath.Base(os.Args[0])\n\targs := append([]string{base}, os.Args[1:]...)\n\treturn strings.Join(args, \" \")\n}\n"
  },
  {
    "id" : "cf967da3-a96f-4558-bd6c-e2694f81ecd6",
    "prId" : 20087,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9b34701-725a-4907-8370-cd2ed69cb047",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Maybe not a big deal, but we could patch instead.\n",
        "createdAt" : "2016-01-26T00:39:33Z",
        "updatedAt" : "2016-02-02T09:34:02Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "51513b00-ed93-4c66-bc26-aa2f029d9081",
        "parentId" : "e9b34701-725a-4907-8370-cd2ed69cb047",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I will look into switching to patch in a follow-up if that's ok\n",
        "createdAt" : "2016-01-28T14:47:33Z",
        "updatedAt" : "2016-02-02T09:34:02Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "20f0bb5d-edec-4240-aeec-31e72980d1b0",
        "parentId" : "e9b34701-725a-4907-8370-cd2ed69cb047",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "That's fine.\n",
        "createdAt" : "2016-01-29T22:48:31Z",
        "updatedAt" : "2016-02-02T09:34:02Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "21c2b836ed6b424c227c5bba93ef83b31fc34d9f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +317,321 @@\t\t\t\t}\n\t\t\t\tt.Spec.Paused = true\n\t\t\t\t_, err := c.Extensions().Deployments(t.Namespace).Update(t)\n\t\t\t\treturn false, err\n\t\t\tdefault:"
  },
  {
    "id" : "d7fa8555-f6d4-4731-a25e-e722e97eefcc",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9187b980-aa07-48a2-aeaa-d99fb2604a1d",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Can you explain the differences between `MapBasedSelectorForObject` and `PodSelectorForObject` (why do we need to separate them)? Is it because `ParseLabels` in pkg/kubectl/generate.go can only recognize and convert labels/selectors like `app=nginx` to `map[string]string` but not those like `app in (nginx)`?\n",
        "createdAt" : "2016-02-09T21:51:54Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c2898141-fde1-481f-bbdf-25f1a6b045e1",
        "parentId" : "9187b980-aa07-48a2-aeaa-d99fb2604a1d",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Yes exactly, that's the reason. And did not want to change the signature of that function.\n",
        "createdAt" : "2016-02-09T22:22:48Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "66845e30-f7ae-4c20-9638-5fa6d91a9c98",
        "parentId" : "9187b980-aa07-48a2-aeaa-d99fb2604a1d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "If so do we need to support deployment for `PodSelectorForObject`? Do we need to support rc, pod, service for `MapBasedSelectorForObject`?\n",
        "createdAt" : "2016-02-09T22:28:43Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "1f643417-24bf-46f8-bcf1-27c3443e49b4",
        "parentId" : "9187b980-aa07-48a2-aeaa-d99fb2604a1d",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "The idea is that, PodSelectorForObject() returns the stringified/serialized version of the pod selector no matter which object you give, provided the object has object.Spec.Selector field (that reminds me I should add ReplicaSet to this function as well in my other PR). MapBasedSelectorForObject() returns only the map[string]string component. And both of them do that consistently for all the objects as long as object.Spec.Selector field exists.\n",
        "createdAt" : "2016-02-09T22:46:42Z",
        "updatedAt" : "2016-02-09T23:52:17Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "f0fd7819-60aa-4c47-817e-0457d5db8111",
        "parentId" : "9187b980-aa07-48a2-aeaa-d99fb2604a1d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "OK\n",
        "createdAt" : "2016-02-09T23:44:44Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +290,294 @@\t\t\t\t}\n\t\t\t\treturn kubectl.MakeLabels(t.Spec.Selector), nil\n\t\t\tcase *extensions.Deployment:\n\t\t\t\t// TODO(madhusudancs): Make this smarter by admitting MatchExpressions with Equals\n\t\t\t\t// operator, DoubleEquals operator and In operator with only one element in the set."
  },
  {
    "id" : "1f5c2301-a51c-4277-8fae-6530c8c543fc",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "598fd8ca-f6d9-4cbb-a9a7-4114a1e46db1",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "bad rebase? Seems like this probably meant to be left alone.\n",
        "createdAt" : "2015-12-21T18:38:54Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +320,324 @@\t\t\tcase extensions.GroupName:\n\t\t\t\treturn c.ExtensionsClient.RESTClient, nil\n\t\t\tcase api.SchemeGroupVersion.Group:\n\t\t\t\treturn c.RESTClient, nil\n\t\t\tcase extensions.SchemeGroupVersion.Group:"
  },
  {
    "id" : "4befe639-6c4e-4e99-8acb-f82f6edf0498",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7651aa0c-ca86-4df0-8f0e-363a73e3bc56",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Seems like this entire function has an improper API, but this doesn't make any worse.\n",
        "createdAt" : "2016-03-10T14:05:25Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "52144bfb-45ed-4a40-af3f-d46e4056edca",
        "parentId" : "7651aa0c-ca86-4df0-8f0e-363a73e3bc56",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "ack.\n",
        "createdAt" : "2016-03-23T20:00:09Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +967,971 @@\n// PrintObject prints an api object given command line flags to modify the output format\nfunc (f *Factory) PrintObject(cmd *cobra.Command, mapper meta.RESTMapper, obj runtime.Object, out io.Writer) error {\n\tgvk, err := api.Scheme.ObjectKind(obj)\n\tif err != nil {"
  },
  {
    "id" : "eb067c1a-36f5-44f0-a4e7-3b5e5b8c0906",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "600c4ca1-b54d-4e67-af89-02a80263a413",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Shouldn't need the `.String()`, right?\n",
        "createdAt" : "2016-03-28T12:32:32Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d42023aa-4ead-48e1-b2cb-fd7b215c9a83",
        "parentId" : "600c4ca1-b54d-4e67-af89-02a80263a413",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I agree with deads2k.\n",
        "createdAt" : "2016-03-31T01:14:50Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +197,201 @@\treturn func(version unversioned.GroupVersion) (*meta.VersionInterfaces, error) {\n\t\tfor ix := range versionList {\n\t\t\tif versionList[ix].String() == version.String() {\n\t\t\t\treturn &meta.VersionInterfaces{\n\t\t\t\t\tObjectConvertor:  thirdpartyresourcedata.NewThirdPartyObjectConverter(api.Scheme),"
  },
  {
    "id" : "d9b97001-863f-4dbd-a893-4eee9cc64f98",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fb18a69-b51a-475f-a27a-77fcad31f025",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "cc @krousey I think you'd be interested in this. This is building REST mapper (with the exisiting RESTMapper struct) based on discovery results. \n",
        "createdAt" : "2016-03-31T21:07:25Z",
        "updatedAt" : "2016-03-31T21:07:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\t\t\tcmdApiVersion = *cfg.GroupVersion\n\t\t\t}\n\t\t\tif discoverDynamicAPIs {\n\t\t\t\tclient, err := clients.ClientForVersion(&unversioned.GroupVersion{Version: \"v1\"})\n\t\t\t\tCheckErr(err)"
  },
  {
    "id" : "2bb57f68-1e91-49e8-b25f-d8d1da177ebb",
    "prId" : 18024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95e2c30c-82f1-4f3e-a081-b784a940513c",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Is the String method invoked when trying to print with %v?\n",
        "createdAt" : "2015-12-02T13:28:18Z",
        "updatedAt" : "2015-12-07T14:10:38Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "68db69aa-c7be-42cd-8132-ab3fd4a6d887",
        "parentId" : "95e2c30c-82f1-4f3e-a081-b784a940513c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Is the String method invoked when trying to print with %v?\n\nYes.  `%#v` gives you fields.  This will print pretty.\n",
        "createdAt" : "2015-12-02T13:37:23Z",
        "updatedAt" : "2015-12-07T14:10:38Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "66eecb963aac7dd0e79c2b856d00733b19c5c623",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\t\t\t// nothing to do here\n\t\t\tdefault:\n\t\t\t\treturn fmt.Errorf(\"cannot autoscale a %v\", kind)\n\t\t\t}\n\t\t\treturn nil"
  },
  {
    "id" : "79c3d16f-493c-4b19-93d1-e73f8c17ed3c",
    "prId" : 17316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8760242-8c14-4166-83a6-67d885fd5dae",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I never know whether a nil check is needed... here, apparently, it is\n",
        "createdAt" : "2015-11-17T05:38:08Z",
        "updatedAt" : "2015-11-21T13:29:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1b45b541-ba5b-4d8d-b95f-234964ff122c",
        "parentId" : "b8760242-8c14-4166-83a6-67d885fd5dae",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I never know whether a nil check is needed... here, apparently, it is\n\nthe `ClientConfig` call isn't required to set it.\n",
        "createdAt" : "2015-11-17T13:37:56Z",
        "updatedAt" : "2015-11-21T13:29:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a87d927588e5fb391ce71f79e97648ba4452bdc4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +135,139 @@\t\t\tCheckErr(err)\n\t\t\tcmdApiVersion := \"\"\n\t\t\tif cfg.GroupVersion != nil {\n\t\t\t\tcmdApiVersion = cfg.GroupVersion.String()\n\t\t\t}"
  },
  {
    "id" : "4273bff4-55b6-4756-889d-a0634243a1b8",
    "prId" : 15951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f5e06c5-20a4-48de-9bd7-e09c2a485af6",
        "parentId" : null,
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "I kind of like how previously the error noted what can be accepted. Could that be added back into the error message?\n",
        "createdAt" : "2015-10-23T19:51:38Z",
        "updatedAt" : "2015-10-24T18:08:18Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      },
      {
        "id" : "d8d136b3-e7f7-4331-b920-75228bd51f00",
        "parentId" : "1f5e06c5-20a4-48de-9bd7-e09c2a485af6",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This is actually one of the reasons behind this change. We don't follow this pattern elsewhere in the factory (hardcoding supported types in error messages) and this is already known because it exists in the help string: https://github.com/kubernetes/kubernetes/blob/e05819f36a2fffa03a420ac3a246e0bedf18a487/pkg/kubectl/cmd/expose.go#L38\n",
        "createdAt" : "2015-10-24T15:03:15Z",
        "updatedAt" : "2015-10-24T18:08:18Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4befdf5b499c119b996ae36f691e7f9eb70a8283",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +267,271 @@\t\t\t\t// nothing to do here\n\t\t\tdefault:\n\t\t\t\treturn fmt.Errorf(\"cannot expose a %s\", kind)\n\t\t\t}\n\t\t\treturn nil"
  },
  {
    "id" : "f0f65ea5-59e7-41c6-8ce0-899be01ea4e9",
    "prId" : 14087,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d99a09dd-aa28-4001-9fb8-161ec52f687f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "probably want to do a path split and check of the first segment to avoid replacing in strings like `~mydir`\n",
        "createdAt" : "2015-09-22T02:44:29Z",
        "updatedAt" : "2015-09-28T23:27:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "db2ae32c-ac66-4315-843e-cff02ca7e8d9",
        "parentId" : "d99a09dd-aa28-4001-9fb8-161ec52f687f",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-09-25T23:05:15Z",
        "updatedAt" : "2015-09-28T23:27:46Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "afea127a3e7a32099f676399efc13dbb653bdf28",
    "line" : null,
    "diffHunk" : "@@ -1,1 +319,323 @@\nfunc substituteUserHome(dir string) (string, error) {\n\tif len(dir) == 0 || dir[0] != '~' {\n\t\treturn dir, nil\n\t}"
  },
  {
    "id" : "7abb9499-c132-45ab-8d21-85048f4a0d9b",
    "prId" : 13837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aaf7439-39e5-47e5-8f27-0cfa22c4736b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Should it cache per server? \"v1\" allows different things on a 1.0 and 1.1 server\n",
        "createdAt" : "2015-09-10T23:53:40Z",
        "updatedAt" : "2015-09-11T20:56:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7a6ff8d9-2d91-4796-b13f-724e9aa44b27",
        "parentId" : "5aaf7439-39e5-47e5-8f27-0cfa22c4736b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "What's the mechanism for clearing/expiring the cache? (In case of a corrupted local cache or a server update)\n",
        "createdAt" : "2015-09-10T23:54:53Z",
        "updatedAt" : "2015-09-11T20:56:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1af64973-849d-4af9-a202-9fcc9163d5cb",
        "parentId" : "5aaf7439-39e5-47e5-8f27-0cfa22c4736b",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "- Added server version to the path.\n- Pulled cache-dir up to be a flag, so clearing/expiring involves deleting that directory, or specifying an alternate directory.\n",
        "createdAt" : "2015-09-11T04:16:20Z",
        "updatedAt" : "2015-09-11T20:56:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ba13ff3616c18220de923c7094b55fb9e34ffc0",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +302,306 @@func getSchemaAndValidate(c schemaClient, data []byte, group, version, cacheDir string) (err error) {\n\tvar schemaData []byte\n\tcacheFile := path.Join(cacheDir, group, version, schemaFileName)\n\n\tif len(cacheDir) != 0 {"
  },
  {
    "id" : "8c08c94a-7c7b-4b26-9719-06e784a6136e",
    "prId" : 13277,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f7516e-9c88-46b8-86c6-f3cd01096df3",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "No tests? :)\n",
        "createdAt" : "2015-08-29T00:05:40Z",
        "updatedAt" : "2015-09-18T02:55:13Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "11bbf009-172c-42bf-82af-69626bf06e30",
        "parentId" : "82f7516e-9c88-46b8-86c6-f3cd01096df3",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "Added\n",
        "createdAt" : "2015-09-13T02:00:26Z",
        "updatedAt" : "2015-09-18T02:55:13Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      }
    ],
    "commit" : "f855e758050c316074500ba264d27aac912e51d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +350,354 @@}\n\nfunc (c *clientSwaggerSchema) ValidateBytes(data []byte) error {\n\tversion, kind, err := runtime.UnstructuredJSONScheme.DataVersionAndKind(data)\n\tif err != nil {"
  },
  {
    "id" : "60158465-7ee1-4aa4-9add-859c8e5f2485",
    "prId" : 13184,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60471b65-9944-456e-a408-b5ed4a2db83e",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@smarterclayton any strong preference between `func(kind string)` and `func(obj runtime.Object)`?\n",
        "createdAt" : "2015-09-09T07:08:46Z",
        "updatedAt" : "2015-09-15T03:20:46Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6b05e1be-aa5b-429a-8e59-51c7fad4595f",
        "parentId" : "60471b65-9944-456e-a408-b5ed4a2db83e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "kind is probably better\n\nOn Wed, Sep 9, 2015 at 3:09 AM, Michail Kargakis notifications@github.com\nwrote:\n\n> In pkg/kubectl/cmd/util/factory.go\n> https://github.com/kubernetes/kubernetes/pull/13184#discussion_r39012619\n> :\n> \n> > @@ -83,6 +83,8 @@ type Factory struct {\n> >     DefaultNamespace func() (string, bool, error)\n> >     // Returns the generator for the provided generator name\n> >     Generator func(name string) (kubectl.Generator, bool)\n> > -   // Check whether the kind of resources could be exposed\n> > -   CanBeExposed func(kind string) error\n> \n> @smarterclayton https://github.com/smarterclayton any strong preference\n> between func(kind string) and func(obj runtime.Object)?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13184/files#r39012619.\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-09-09T13:27:14Z",
        "updatedAt" : "2015-09-15T03:20:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "98689a99ec0abd31bc6bee8672ded885f0898c0c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +88,92 @@\tGenerator func(name string) (kubectl.Generator, bool)\n\t// Check whether the kind of resources could be exposed\n\tCanBeExposed func(kind string) error\n}\n"
  },
  {
    "id" : "816e20d5-61a4-46c8-b3d5-907358a640f1",
    "prId" : 12875,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efe7b392-8a28-452d-a9d1-f459f77b7e87",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "No error checking?\n",
        "createdAt" : "2015-08-18T22:03:54Z",
        "updatedAt" : "2015-08-18T22:03:54Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "f9205b91-5a05-44d1-bf88-3077f40a2387",
        "parentId" : "efe7b392-8a28-452d-a9d1-f459f77b7e87",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "The experimental client failing to initialize is non-fatal. In clientSwaggerSchema we only use the experimentalClient if it is non-nil.\n",
        "createdAt" : "2015-08-18T22:32:59Z",
        "updatedAt" : "2015-08-18T22:32:59Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c58f94edcced7169784aa4fd1e6e63dc5ed3029",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +254,258 @@\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\texpClient, _ := expClients.Client()\n\t\t\t\treturn &clientSwaggerSchema{client, expClient, api.Scheme}, nil\n\t\t\t}"
  },
  {
    "id" : "bc0fc086-4a07-48ce-993f-fea5a19c486f",
    "prId" : 12837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b616485-644b-419f-a207-1aec843c04c5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I vastly prefer this to looking up the flag from inside the function, but why would something with `validate == false` ever call the `Validator()` function?\n",
        "createdAt" : "2015-08-19T11:59:13Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "47c31eaf-90f4-4cd2-9a6a-91be9a2a6960",
        "parentId" : "6b616485-644b-419f-a207-1aec843c04c5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Since `--validate` only makes sense for certain commands, I removed it from global flags, and therefore now this flag is in `cmd.Flags()` instead of `factory.flags`. This means to check the value of this flag, we should use `cmd.Flags().GetBool()` instead of `flags.Lookup()`. Passing the bool value here is better than passing `cmd`, imo. If `Validator()` is called with `validate == false`, `validation.NullSchema{}` will be returned. \n",
        "createdAt" : "2015-08-19T17:40:15Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "1c74549b-691f-4589-8e46-fdb3551fd4cf",
        "parentId" : "6b616485-644b-419f-a207-1aec843c04c5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Since --validate only makes sense for certain commands, I removed it from global flags, and therefore now this flag is in cmd.Flags() instead of factory.flags. This means to check the value of this flag, we should use cmd.Flags().GetBool() instead of flags.Lookup(). Passing the bool value here is better than passing cmd, imo. If Validator() is called with validate == false, validation.NullSchema{} will be returned.\n\nI think we talked passed each other.  I agree, this factorization is better than what previously existed.  My question is, if a caller has a value for `shouldValidate`, why wouldn't he do something like\n\n```\nif shouldValidate{\n    f.Validator()\n}\n```\n\n?\n",
        "createdAt" : "2015-08-19T17:51:37Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "72c80504-699f-41be-b43a-aa4c4921dcbe",
        "parentId" : "6b616485-644b-419f-a207-1aec843c04c5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I see. The caller should only call when they should validate, and we don't need the `validation.NullSchema{}` in Validator. \n",
        "createdAt" : "2015-08-19T18:06:40Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "f86f26a7-56a4-4365-a874-d6a6bb996605",
        "parentId" : "6b616485-644b-419f-a207-1aec843c04c5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Correction: the caller gets `schema` back from `Validator()` and sets the schema of resource builder. Therefore, it makes the code cleaner to always get a schema back, and inside `Validator()` we use `shouldValidate` to determine which schema (swagger or null) to be returned. \n\nThe caller calls `Validator()` when `validate == false` because it still needs a schema. \n",
        "createdAt" : "2015-08-19T19:38:40Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5823ef771bcb90f60dc149c6f323f5cc708f1724",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +248,252 @@\t\t\treturn kubectl.ReaperFor(mapping.Kind, client, expClient)\n\t\t},\n\t\tValidator: func(validate bool) (validation.Schema, error) {\n\t\t\tif validate {\n\t\t\t\tclient, err := clients.ClientForVersion(\"\")"
  },
  {
    "id" : "2bff0bc1-0ddf-4119-b3e4-f56812df9a27",
    "prId" : 12405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c8790a-8378-42fa-820e-78c0a4d7a707",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This should be using the same pattern as the cache.\n",
        "createdAt" : "2015-08-07T17:46:14Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "49ece0bd-664a-492c-a544-14bf106a54ca",
        "parentId" : "77c8790a-8378-42fa-820e-78c0a4d7a707",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "Is there a particular reason? I'd have to copy the code for the experimental client, and I don't think we'll have multiple versions.\n",
        "createdAt" : "2015-08-07T21:24:56Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      },
      {
        "id" : "2c0ddefc-5ea5-4514-a9a3-c7e2c6dbc3e6",
        "parentId" : "77c8790a-8378-42fa-820e-78c0a4d7a707",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "See my other comment above - you can't fail in Factory initialization by reading the config.\n",
        "createdAt" : "2015-08-10T18:40:01Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b14c9a5d580ec3f6d3643c06fa3b6ac29e8df8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +165,169 @@\t\t\t\treturn client.RESTClient, nil\n\t\t\tcase \"experimental\":\n\t\t\t\tclient, err := experimentalClient, experimentalClientErr\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err"
  },
  {
    "id" : "f4197d23-ddd2-4ecf-9088-e888ba932ad4",
    "prId" : 12405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You can't do this here - it fails too early (when factory is created, not when methods on factory are called).  Initialization like this should always be under a Factory method (so that errors are returned when the user asks for clients, NOT when the user asks for a factory (clients are not required to be valid for all command types).\n",
        "createdAt" : "2015-08-07T17:47:05Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0c2f55b5-2796-47ab-8013-8b86c68c020e",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "Factory creation is successful regardless of whether this succeeds. The error is returned when the user asks for a experimental client. I also don't see anywhere where we manipulate the clientConfig so this should have the same behavior.\n",
        "createdAt" : "2015-08-07T21:28:34Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      },
      {
        "id" : "5bd28cff-c772-4d8c-accf-d512c0f79ceb",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Client config can fail - it can fail BEFORE the help message runs.  So you can't allow CLI to have Factory creation fail based on a bad config - it has to fail later.\n",
        "createdAt" : "2015-08-10T18:39:44Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "00325ea5-a2b8-46eb-9aba-3f5f2161c1e5",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "Maybe I'm not seeing it, but how does Factory creation fail? There is no if err != nil { return err } statement here. We are keeping the error and returning it when an experimental client is requested, not when the factory is created.\n\nIf client config panic's then that changes things, but it really should not panic.\n",
        "createdAt" : "2015-08-10T18:56:17Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      },
      {
        "id" : "a85b150a-b2c9-4b29-871b-a58e07f0761b",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ok, sorry.  I still don't like init'ing it up front but I can live with\nthat particular part for now.\n\nOn Mon, Aug 10, 2015 at 2:56 PM, Muhammed Uluyol notifications@github.com\nwrote:\n\n> In pkg/kubectl/cmd/util/factory.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/12405#discussion_r36670130\n> :\n> \n> > -   var experimentalClient *client.ExperimentalClient\n> > -   cfg, experimentalClientErr := clientConfig.ClientConfig()\n> \n> Maybe I'm not seeing it, but how does Factory creation fail? There is no\n> if err != nil { return err } statement here. We are keeping the error and\n> returning it when an experimental client is requested, not when the factory\n> is created.\n> \n> If client config panic's then that changes things, but it really should\n> not panic.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/12405/files#r36670130\n> .\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-08-10T20:08:35Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "01252dea-13f1-409b-84fd-cf8e11256115",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Another reason in general I don't like doing it up front is that it will\nparse the CA and possibly the key - I don't know how expensive that is but\nI assume it's not free.  If you had code that didn't call the experimental\nclient you'd still pay the cost.\n\nOn Mon, Aug 10, 2015 at 4:08 PM, Clayton Coleman ccoleman@redhat.com\nwrote:\n\n> Ok, sorry.  I still don't like init'ing it up front but I can live with\n> that particular part for now.\n> \n> On Mon, Aug 10, 2015 at 2:56 PM, Muhammed Uluyol <notifications@github.com\n> \n> > wrote:\n> > \n> > In pkg/kubectl/cmd/util/factory.go\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/12405#discussion_r36670130\n> > :\n> > \n> > > -  var experimentalClient *client.ExperimentalClient\n> > > -  cfg, experimentalClientErr := clientConfig.ClientConfig()\n> > \n> > Maybe I'm not seeing it, but how does Factory creation fail? There is no\n> > if err != nil { return err } statement here. We are keeping the error and\n> > returning it when an experimental client is requested, not when the factory\n> > is created.\n> > \n> > If client config panic's then that changes things, but it really should\n> > not panic.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/12405/files#r36670130\n> > .\n> \n> ## \n> \n> Clayton Coleman | Lead Engineer, OpenShift\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-08-10T20:09:46Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5d9dad1b-4422-40c2-af2d-2a5f64cfa8e9",
        "parentId" : "22bc7f65-e424-4a94-a0b3-a19865159f32",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "I added a comment to clarify that failing experimental client creation is non-fatal.\n",
        "createdAt" : "2015-08-10T21:48:44Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b14c9a5d580ec3f6d3643c06fa3b6ac29e8df8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +115,119 @@\t// will be returned when an experimental client is explicitly requested.\n\tvar experimentalClient *client.ExperimentalClient\n\tcfg, experimentalClientErr := clientConfig.ClientConfig()\n\tif experimentalClientErr == nil {\n\t\texperimentalClient, experimentalClientErr = client.NewExperimental(cfg)"
  },
  {
    "id" : "a298c0f0-9f8c-4d94-9371-36dfae58680f",
    "prId" : 12405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1d46089-656c-4d66-9a61-efcbaaf00ba0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "How do you see this scaling out to handle addition API groups?  Separate methods for each?  Single method taking a string for `group` and returning back an interface that must be hard-cast?\n",
        "createdAt" : "2015-08-12T14:13:27Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9e50e71f-1c30-4277-919d-de655f84954a",
        "parentId" : "e1d46089-656c-4d66-9a61-efcbaaf00ba0",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "See my other comments. We're not tacking the issue of multiple api groups here. The client api and kubectl both require some rethinking.\n",
        "createdAt" : "2015-08-12T18:28:33Z",
        "updatedAt" : "2015-08-12T18:29:53Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b14c9a5d580ec3f6d3643c06fa3b6ac29e8df8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +59,63 @@\tClient func() (*client.Client, error)\n\t// Returns a client for accessing experimental Kubernetes resources or an error.\n\tExperimentalClient func() (*client.ExperimentalClient, error)\n\t// Returns a client.Config for accessing the Kubernetes server.\n\tClientConfig func() (*client.Config, error)"
  },
  {
    "id" : "e2e88bff-c1a4-42be-81aa-9edf07fd4693",
    "prId" : 11415,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f655e566-8217-48f2-93d2-9baddc02f76c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, this is what you were asking me about. It's OK for now because unversioned object kinds all match the versioned object kinds. Hopefully we'll have a versioned client (#4874) before this becomes a problem.\n",
        "createdAt" : "2015-07-17T01:02:25Z",
        "updatedAt" : "2015-07-17T06:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c84973011672359b7b629bf8d1eaaacec026ba82",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\t\t\treturn kubectl.MakeLabels(t.Spec.Selector), nil\n\t\t\tdefault:\n\t\t\t\t_, kind, err := api.Scheme.ObjectVersionAndKind(object)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn \"\", err"
  },
  {
    "id" : "9514e072-1059-408b-8c8a-3c34e70afd5a",
    "prId" : 11368,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72032b00-0b99-4db5-ab7e-4e24db1875a5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Explain why this is useful.\n",
        "createdAt" : "2015-09-22T13:22:43Z",
        "updatedAt" : "2015-10-09T02:16:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "8ae5a737-ab38-49bb-aa6c-da3bc56e0f63",
        "parentId" : "72032b00-0b99-4db5-ab7e-4e24db1875a5",
        "authorId" : "aa0ae875-2718-4d41-836b-db4cfbf596c8",
        "body" : "A new line is added below this.\n",
        "createdAt" : "2015-09-22T14:02:23Z",
        "updatedAt" : "2015-10-09T02:16:02Z",
        "lastEditedBy" : "aa0ae875-2718-4d41-836b-db4cfbf596c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b88c6942bae0e42fa51a37eb0aacbb12625801",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +534,538 @@}\n\n// NilClientMapperForCommand returns a ClientMapper which always returns nil.\n// When command is running locally and client isn't needed, this mapper can be parsed to NewBuilder.\nfunc (f *Factory) NilClientMapperForCommand() resource.ClientMapper {"
  },
  {
    "id" : "bc967e9d-67eb-4d82-8456-c87ab072236c",
    "prId" : 7024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3276d964-d7a0-4d93-80c7-efd414d9e39d",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Propose:\n\n``` go\nif namespace == api.NamespaceAll {\n  return kubectl.NewHumanReadablePrinter(noHeaders, true), nil\n} else {\n  return kubectl.NewHumanReadablePrinter(noHeaders, false), nil\n}\n```\n",
        "createdAt" : "2015-04-20T20:36:27Z",
        "updatedAt" : "2015-05-22T14:25:53Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2514a752444a3308f67f01b5cbf1aaf6349b078",
    "line" : null,
    "diffHunk" : "@@ -1,1 +145,149 @@\t\t},\n\t\tPrinter: func(mapping *meta.RESTMapping, noHeaders, withNamespace bool) (kubectl.ResourcePrinter, error) {\n\t\t\treturn kubectl.NewHumanReadablePrinter(noHeaders, withNamespace), nil\n\t\t},\n\t\tPodSelectorForObject: func(object runtime.Object) (string, error) {"
  },
  {
    "id" : "f81ed06b-4e1b-45c4-9192-30b0355bd5dd",
    "prId" : 7024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42408f4c-c1dc-4a23-a5b6-9aae47fbb856",
        "parentId" : null,
        "authorId" : "e1b4e2ae-9bea-4ee1-adc8-cd2c1c237314",
        "body" : "Passing option by argument, but this is not smart. Is it acceptable for addressing the comment? @smarterclayton \n",
        "createdAt" : "2015-05-19T18:56:46Z",
        "updatedAt" : "2015-05-22T14:25:53Z",
        "lastEditedBy" : "e1b4e2ae-9bea-4ee1-adc8-cd2c1c237314",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2514a752444a3308f67f01b5cbf1aaf6349b078",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +353,357 @@// PrinterForMapping returns a printer suitable for displaying the provided resource type.\n// Requires that printer flags have been added to cmd (see AddPrinterFlags).\nfunc (f *Factory) PrinterForMapping(cmd *cobra.Command, mapping *meta.RESTMapping, withNamespace bool) (kubectl.ResourcePrinter, error) {\n\tprinter, ok, err := PrinterForCommand(cmd)\n\tif err != nil {"
  }
]