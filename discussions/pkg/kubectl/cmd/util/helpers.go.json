[
  {
    "id" : "b7b2745c-abf6-4551-818c-4d7057aea64c",
    "prId" : 65524,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65524#pullrequestreview-132328132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "378eda27-4e65-4a8b-9263-6d6b2cf466b1",
        "parentId" : null,
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "Thanks for cleaning this up! :+1: ",
        "createdAt" : "2018-06-27T08:20:50Z",
        "updatedAt" : "2018-06-27T08:20:50Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a130caa33bd877877f6745e3ca64439b7ba3198",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +322,326 @@\ts, err := cmd.Flags().GetStringArray(flag)\n\tif err != nil {\n\t\tglog.Fatalf(\"error accessing flag %s for command %s: %v\", flag, cmd.Name(), err)\n\t}\n\treturn s"
  },
  {
    "id" : "c6a3c698-2785-4a29-afa0-bdea17d612e9",
    "prId" : 46760,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46760#pullrequestreview-41754673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98273a2d-003e-4743-ac33-d7fe68b1ebad",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Same here, although applied to a previous if.",
        "createdAt" : "2017-06-02T11:48:37Z",
        "updatedAt" : "2017-06-05T03:13:21Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fe8e4f1067c78c70c3a8a48a4b572cb99194e8b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +658,662 @@\t\t\t\tnewPairs[parts[0]] = parts[1]\n\t\t\t}\n\t\t} else if supportRemove && strings.HasSuffix(pairArg, \"-\") && pairArg != \"-\" {\n\t\t\tremovePairs = append(removePairs, pairArg[:len(pairArg)-1])\n\t\t} else {"
  },
  {
    "id" : "48696d4f-836f-4260-9876-2cca55043ab0",
    "prId" : 42369,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42369#pullrequestreview-24843212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8596fc54-e9e6-4c41-bbce-8f2dcc7a7718",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "nit, `Fprintln`",
        "createdAt" : "2017-03-02T21:05:52Z",
        "updatedAt" : "2017-03-02T21:05:52Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4337e574e6fe3caa461e36328921f5042f8f4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +716,720 @@\t\t\t\tfmt.Fprintf(out, \"info: %d objects not shown, use --show-all to see completed objects.\\n\", hidden)\n\t\t\t} else {\n\t\t\t\tfmt.Fprintf(out, \"info: 1 object not shown, use --show-all to see completed objects.\\n\")\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "aa0cd095-5548-44b4-b566-55c50f71289f",
    "prId" : 38683,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38683#pullrequestreview-14622682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab14c45-edb3-4798-bbab-65615197e8d0",
        "parentId" : null,
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "any special reason to use `Contains` here? like performance consideration?",
        "createdAt" : "2016-12-28T13:28:26Z",
        "updatedAt" : "2017-02-06T01:21:43Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "2f46db56-2bc1-4eb2-ba47-aec9ea80144d",
        "parentId" : "eab14c45-edb3-4798-bbab-65615197e8d0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's probably more correct to use contains in these scenarios.",
        "createdAt" : "2016-12-28T17:26:06Z",
        "updatedAt" : "2017-02-06T01:21:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "176bfd9d-5652-481b-9986-a402d1a83d56",
        "parentId" : "eab14c45-edb3-4798-bbab-65615197e8d0",
        "authorId" : "4e993b53-a2c8-452b-ac7c-716c3dc2995d",
        "body" : "@AdoHe @smarterclayton its simpler and have better readability, as suggested by https://github.com/dominikh/go-simple",
        "createdAt" : "2016-12-29T00:44:25Z",
        "updatedAt" : "2017-02-06T01:21:43Z",
        "lastEditedBy" : "4e993b53-a2c8-452b-ac7c-716c3dc2995d",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac48c2cd57b0992643191786ff382242dff86dd",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +605,609 @@\tvar invalidBufNonEmpty bool\n\tfor _, pairArg := range pairArgs {\n\t\tif strings.Contains(pairArg, \"=\") {\n\t\t\tparts := strings.SplitN(pairArg, \"=\", 2)\n\t\t\tif len(parts) != 2 {"
  },
  {
    "id" : "9adfdc19-5bb5-4488-a2cd-85c1ac480586",
    "prId" : 38406,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38406#pullrequestreview-12296439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b4f81d9-196f-4528-9636-fa46113cdea2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You may already have versionedObject set at this point - would probably prefer to use that unless someone earlier is mutating without clearing VersionedObject.",
        "createdAt" : "2016-12-09T19:28:41Z",
        "updatedAt" : "2016-12-09T21:26:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fe8a6b21-4636-411d-83dd-ba340bcfce96",
        "parentId" : "7b4f81d9-196f-4528-9636-fa46113cdea2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I thought versioned object came from the user, and object came from the server, automatically converted to internal",
        "createdAt" : "2016-12-09T19:33:16Z",
        "updatedAt" : "2016-12-09T21:26:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "099f5571-b5e1-4fe7-bae7-c3d1eb16c578",
        "parentId" : "7b4f81d9-196f-4528-9636-fa46113cdea2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Bah, you're right.  I want to kill VersionedObject anyway so this is fine.",
        "createdAt" : "2016-12-09T19:55:22Z",
        "updatedAt" : "2016-12-09T21:26:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4536388909d13287acabe9c659f704aa540de8f1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +525,529 @@func ChangeResourcePatch(info *resource.Info, changeCause string) ([]byte, error) {\n\t// Get a versioned object\n\tobj, err := info.Mapping.ConvertToVersion(info.Object, info.Mapping.GroupVersionKind.GroupVersion())\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "ae239d1c-f004-4666-bbf2-4ce08161dae0",
    "prId" : 37636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37636#pullrequestreview-10593557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcc21e56-ae5f-403c-add4-f60d36e16dd4",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "this logic looks wrong.  If you request `svc,pods` and get no services, you still want resource prefixes, don't you.",
        "createdAt" : "2016-11-29T18:06:14Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "3484c6f67637792a3a91a5c7ff04cb5b28e56c23",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +634,638 @@\n\tfor ix := range objs {\n\t\tvar mapping *meta.RESTMapping\n\t\tif sorter != nil {\n\t\t\tmapping = infos[sorter.OriginalPosition(ix)].Mapping"
  },
  {
    "id" : "df6763f3-834a-4028-8dfa-4ace5e14ce03",
    "prId" : 35647,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35647#pullrequestreview-8290820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d211533-9327-453f-90af-29f8699fae96",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is flawed.  Kube clients can talk to multiple servers in one call, and the \"version\" cannot be assumed to be homogenous.  This breaks extension servers @deads2k\n",
        "createdAt" : "2016-11-12T02:18:38Z",
        "updatedAt" : "2016-11-12T02:18:38Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "34891ad9f628f831fad9eacc25860841c68464a5",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +734,738 @@\t\treturn strategicpatch.Unknown, err\n\t}\n\treturn strategicpatch.GetServerSupportedSMPatchVersion(clientSet.Discovery())\n}"
  },
  {
    "id" : "cda75894-ef0b-4a6b-ad3d-2d7f59084ba0",
    "prId" : 32449,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32449#pullrequestreview-1701400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "126d103f-d29b-45ef-a989-ec44bad3ed52",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I've stumbled upon this when cherry-picking ScheduledJobs, how about moving this to `pkg/util/errors/errors.go#NewAgregate` so that we could unwrap aggregates upon creating. Eg. [here](https://github.com/kubernetes/kubernetes/blob/06a23dddbee223a6d3a0f9b3eff4bc15b7b17277/pkg/kubectl/cmd/get.go#L364) `r.Infos()` returns `errors.aggregate` which we add to an array of errors and then create a new aggregate. How about the `errors.NewAggregate` would actually unpack the error if it's just one error?\n",
        "createdAt" : "2016-09-26T16:15:37Z",
        "updatedAt" : "2016-09-26T19:56:52Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "fcfa9e0f-83c6-4d38-b9b7-e8b53855b973",
        "parentId" : "126d103f-d29b-45ef-a989-ec44bad3ed52",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We cannot change the behavior of NewAggregate, it would be a breaking API change.\n",
        "createdAt" : "2016-09-26T18:32:26Z",
        "updatedAt" : "2016-09-26T19:56:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8105163d-029b-416e-9eea-0804ee520e83",
        "parentId" : "126d103f-d29b-45ef-a989-ec44bad3ed52",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "NewAggregate gives you an aggregate - if we only conditionally gave you an aggregate, clients could silently be broken.  Instead, we have to add a new method and migrate folks over to it.\n",
        "createdAt" : "2016-09-26T18:39:40Z",
        "updatedAt" : "2016-09-26T19:56:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "34816ce6-9327-46c0-bc4d-b8cd758b5991",
        "parentId" : "126d103f-d29b-45ef-a989-ec44bad3ed52",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I was rather thinking about a usecase when you're creating an aggregate from several errors and one of them is an aggregate already. You'd still create an aggregate but instead of:\n`aggregate[err, err, aggregate(err)]` you could have `aggregate[err, err, err]`. The 3rd error would be unpacked upon creating new aggregate. Does that make sense?\n",
        "createdAt" : "2016-09-27T10:09:11Z",
        "updatedAt" : "2016-09-27T10:09:11Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bfa63dbbaf8fd89801edcdb9b7a1dce1eee3fbc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +124,128 @@func checkErr(prefix string, err error, handleErr func(string, int)) {\n\t// unwrap aggregates of 1\n\tif agg, ok := err.(utilerrors.Aggregate); ok && len(agg.Errors()) == 1 {\n\t\terr = agg.Errors()[0]\n\t}"
  },
  {
    "id" : "50fc6b84-c3af-4064-8994-b93ed80ca69d",
    "prId" : 31163,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31163#pullrequestreview-844412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a04a2de-d110-4571-bf6b-ff70af360d10",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@brendandburns Turns out that the reason some unit tests were not passing was due to a `runtime.Decode` call [in the `get` cmd unit test](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/get_test.go#L568) which was expecting a single output from the printer, rather than multiple calls to the printer when iterating through a filtered `[]runtime.Object` list. Because of this, I defined this helper function in order to turn a `[]runtime.Object` list into a single versioned `runtime.Object`. Please take one more look before squashing.\n\nEDIT: went ahead and squashed in order to get the tests to run once more. Although the integration test (previously failing) is now passing, the remaining Jenkins GCE e2e test seems to be flaking.\n",
        "createdAt" : "2016-09-20T21:28:03Z",
        "updatedAt" : "2016-09-21T15:18:44Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7000e2cf4fda3837a07b48aa0c98d8f6ec43bfb2",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +695,699 @@// ObjectListToVersionedObject receives a list of api objects and a group version\n// and squashes the list's items into a single versioned runtime.Object.\nfunc ObjectListToVersionedObject(objects []runtime.Object, version unversioned.GroupVersion) (runtime.Object, error) {\n\tobjectList := &api.List{Items: objects}\n\tconverted, err := resource.TryConvert(api.Scheme, objectList, version, registered.GroupOrDie(api.GroupName).GroupVersion)"
  },
  {
    "id" : "18fd9cf6-6ab8-4bd8-bd9e-23d4b697df1b",
    "prId" : 28234,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "789274b8-fca9-474d-a0a6-25c5e33b189f",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Please update the flag documentation to be more clear.  Also please add a test for this.\n",
        "createdAt" : "2016-06-29T22:38:15Z",
        "updatedAt" : "2016-07-15T15:24:12Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfbf7da75bd93afa56e68a11f98b7b235f45c356",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +490,494 @@// ShouldRecord checks if we should record current change cause\nfunc ShouldRecord(cmd *cobra.Command, info *resource.Info) bool {\n\treturn GetRecordFlag(cmd) || (ContainsChangeCause(info) && !cmd.Flags().Changed(\"record\"))\n}\n"
  },
  {
    "id" : "c72a4681-94e7-4c96-a3c7-478f4e53c3a7",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d544e7e-51bd-4b0d-a248-5a53586a7ecf",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "Great. It does not make sense to print empty line.\n",
        "createdAt" : "2016-07-26T13:27:21Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +92,96 @@// is invoked for extended information.\nfunc fatal(msg string, code int) {\n\tif len(msg) > 0 {\n\t\t// add newline if needed\n\t\tif !strings.HasSuffix(msg, \"\\n\") {"
  },
  {
    "id" : "e97f179f-eefe-4e87-ba50-3637fefbf85c",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f13c06d4-85f9-4a67-a1d5-fe8c35975c36",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "If `clientcmd.IsConfigurationInvalid(err)` and `noMatch, ok := err.(*meta.NoResourceMatchError); ok` can hold at the same time, order of testing should not be switched.\n",
        "createdAt" : "2016-07-26T13:40:46Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      },
      {
        "id" : "f2c9987b-a337-451e-bcb0-d7c6167ac734",
        "parentId" : "f13c06d4-85f9-4a67-a1d5-fe8c35975c36",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I guess we can assume this here.\n",
        "createdAt" : "2016-07-27T11:32:43Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : null,
    "diffHunk" : "@@ -1,1 +135,139 @@\t\t\thandleErr(s, DefaultErrorExitCode)\n\t\t}\n\tcase clientcmd.IsConfigurationInvalid(err):\n\t\thandleErr(MultilineError(fmt.Sprintf(\"%sError in configuration: \", prefix), err), DefaultErrorExitCode)\n\tdefault:"
  },
  {
    "id" : "05ae7a30-1574-4fa6-87a1-54a337e3d96d",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bab71b29-a357-44ee-a4c2-ab313d630551",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "Based on [1], if the `default` branch is picked, `err := err.(type)` is identity assignment, i.e. `err = err`. So it make sense to make this the default. Though, this behaviour is not obvious to me. Can you comment the line with something like \"err := err.(type) equals to err = err if the default branch is picked\" or similar?\n\n[1] https://golang.org/doc/effective_go.html#type_switch\n",
        "createdAt" : "2016-07-26T13:52:48Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      },
      {
        "id" : "8616df1a-dcc6-4790-9ca1-2febb128ce7b",
        "parentId" : "bab71b29-a357-44ee-a4c2-ab313d630551",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "done\n",
        "createdAt" : "2016-07-27T11:50:03Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : null,
    "diffHunk" : "@@ -1,1 +156,160 @@\t\t\thandleErr(\"\", err.ExitStatus())\n\t\tdefault: // for any other error type\n\t\t\tmsg, ok := StandardErrorMessage(err)\n\t\t\tif !ok {\n\t\t\t\tmsg = err.Error()"
  },
  {
    "id" : "15bc6ce4-311b-425d-89c8-05a29517303d",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "782cf985-59a4-4c51-aa7e-224faa38fb1c",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "godoc\n",
        "createdAt" : "2016-08-16T13:06:09Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@// checkErr formats a given error as a string and calls the passed handleErr\n// func with that string and an kubectl exit code.\nfunc checkErr(prefix string, err error, handleErr func(string, int)) {\n\tswitch {\n\tcase err == nil:"
  },
  {
    "id" : "4357d140-0e69-4485-94af-18d2d17a7143",
    "prId" : 20814,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01c25cb9-9f8a-4401-bad3-c1b022c57bc0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Would like to see a test for this\n",
        "createdAt" : "2016-02-11T15:58:41Z",
        "updatedAt" : "2016-02-11T16:45:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4faf300d-3050-4efc-8e18-2b125843a8b6",
        "parentId" : "01c25cb9-9f8a-4401-bad3-c1b022c57bc0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also see it show up in test-cmd too\n",
        "createdAt" : "2016-02-11T15:58:51Z",
        "updatedAt" : "2016-02-11T16:45:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb4d3ccca140a349eeba345ec83228fcea18b42",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +120,124 @@\t}\n\n\tif meta.IsNoResourceMatchError(err) {\n\t\tnoMatch := err.(*meta.NoResourceMatchError)\n"
  },
  {
    "id" : "6b8adc7d-c6ab-444c-9f5a-9d5761159ec4",
    "prId" : 20035,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27c4ba96-564f-4abd-8f3b-cb4a857f90d9",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This will panic if called from a command that doesn't support --record, right?\n",
        "createdAt" : "2016-01-25T12:26:03Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e2d3f737-2641-4cac-907c-b2289cca1196",
        "parentId" : "27c4ba96-564f-4abd-8f3b-cb4a857f90d9",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It won't panic since `GetFlagBool` handles it; it'll log the following error `err accessing flag record for command get: flag accessed but not defined: record`. \n",
        "createdAt" : "2016-02-02T00:05:22Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "85510dd5-8619-48fa-b402-a075d3ee34eb",
        "parentId" : "27c4ba96-564f-4abd-8f3b-cb4a857f90d9",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ok\n",
        "createdAt" : "2016-02-02T09:18:29Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3cb44aaffca4eefceec6e3754a44d419c770736",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +445,449 @@\nfunc GetRecordFlag(cmd *cobra.Command) bool {\n\treturn GetFlagBool(cmd, \"record\")\n}\n"
  },
  {
    "id" : "b841042e-7657-4e76-9141-229febe51a8e",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bacaab03-c192-4a1a-abe3-edaee8e1800f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Tolerate the case where the `cmd` doesn't have the flag registered.  That should return `false`\n",
        "createdAt" : "2016-03-10T13:56:58Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "51e37dc3-dce6-46b3-8368-77ccb1197370",
        "parentId" : "bacaab03-c192-4a1a-abe3-edaee8e1800f",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2016-03-23T19:59:51Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +557,561 @@}\n\nfunc GetIncludeThirdPartyAPIs(cmd *cobra.Command) bool {\n\tif cmd.Flags().Lookup(\"include-extended-apis\") == nil {\n\t\treturn false"
  },
  {
    "id" : "2cb3696f-8a68-45e3-8c4c-97a892b32ca6",
    "prId" : 17991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "286e80b0-034b-4609-a949-236f3cf92a34",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Note that this is still inconsistent with line 108 of this file, but it was like that before.\n",
        "createdAt" : "2015-12-08T01:07:12Z",
        "updatedAt" : "2015-12-10T21:12:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca7c765f0a11d1d32c38a2b90fab4a299215505e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +57,61 @@func AddSourceToErr(verb string, source string, err error) error {\n\tif source != \"\" {\n\t\tif statusError, ok := err.(errors.APIStatus); ok {\n\t\t\tstatus := statusError.Status()\n\t\t\tstatus.Message = fmt.Sprintf(\"error when %s %q: %v\", verb, source, status.Message)"
  },
  {
    "id" : "f99083ba-f287-4970-a051-9465a4fccd8d",
    "prId" : 13728,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd37864-af8a-4158-89cc-850f08ab340c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm fine with this global variable.  It behaves with an intent similar to `OPENSHIFT_ON_PANIC`.  I'm also ok with the alternative of checking an env var each time down the error path.  I don't want to expose the handler on the public `CheckErr`.\n\nI guess I could see the advantage using an env var to avoid ever having it change during an execution, but I don't feel strongly.\n",
        "createdAt" : "2015-09-09T12:29:08Z",
        "updatedAt" : "2015-09-10T07:42:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "48ac18e1-78c2-4ed9-a6f0-75296166d5f1",
        "parentId" : "3bd37864-af8a-4158-89cc-850f08ab340c",
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "Using an env var will limit the possible functions that I can plug in here. For example if I want to panic() but before I want to collect some metrics or I want to log the error, etc. Maybe we can do both, support some 'pre-defined' functions (panic, fatal, etc..) but also allow to plug in completely custom function.\n",
        "createdAt" : "2015-09-09T12:40:46Z",
        "updatedAt" : "2015-09-10T07:42:26Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "9d61549c-7203-4e8d-91a5-8abe2561901c",
        "parentId" : "3bd37864-af8a-4158-89cc-850f08ab340c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The run methods should return errors.  If you want to test commands, run\nthem as sub shells.\n\nOn Wed, Sep 9, 2015 at 8:41 AM, Michal Fojtik notifications@github.com\nwrote:\n\n> In pkg/kubectl/cmd/util/helpers.go\n> https://github.com/kubernetes/kubernetes/pull/13728#discussion_r39036711\n> :\n> \n> > @@ -62,16 +63,40 @@ func AddSourceToErr(verb string, source string, err error) error {\n> >     return err\n> >  }\n> > \n> > +var fatalErrHandler = fatal\n> \n> Using an env var will limit the possible functions that I can plug in\n> here. For example if I want to panic() but before I want to collect some\n> metrics or I want to log the error, etc. Maybe we can do both, support some\n> 'pre-defined' functions (panic, fatal, etc..) but also allow to plug in\n> completely custom function.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13728/files#r39036711.\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-09-09T13:14:20Z",
        "updatedAt" : "2015-09-10T07:42:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb14c8cdf331aa0321d94e978c3c7e0f898c43fc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +63,67 @@}\n\nvar fatalErrHandler = fatal\n\n// BehaviorOnFatal allows you to override the default behavior when a fatal"
  },
  {
    "id" : "2fcfc991-ae17-4835-8bc3-e9d35b4a5f7c",
    "prId" : 9803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ec3829a-8e52-4141-b76c-b6b76f183b60",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "TODO: We should create an error struct with information embedded in fields, not in a string.\n(or touch on how this should be fixed up after v1)\n",
        "createdAt" : "2015-06-17T17:11:22Z",
        "updatedAt" : "2015-06-17T22:55:17Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d69e0b5eb663121759cc595e09427b40a101e3de",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +95,99 @@// the spec and the detail string. To avoid significant refactoring of the error\n// data structures we just extract the required detail string by looking for it\n// after \"}': \" which is horrible but expedient.\nfunc CheckCustomErr(customPrefix string, err error) {\n\tcheckCustomErr(customPrefix, err, fatal)"
  },
  {
    "id" : "33dec72c-c2ec-4b89-8497-803378db86bb",
    "prId" : 9803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2769e7c3-d356-4619-9312-eb6f8b49205f",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : ":(\n",
        "createdAt" : "2015-06-17T17:11:29Z",
        "updatedAt" : "2015-06-17T22:55:17Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "64e89b37-6775-4b0a-aff9-fc5a34a90dae",
        "parentId" : "2769e7c3-d356-4619-9312-eb6f8b49205f",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Indeed. But I am not sure what else I can do without changing the underlying error structures to avoid the conflation of the message I need with the spec.\n",
        "createdAt" : "2015-06-17T17:13:36Z",
        "updatedAt" : "2015-06-17T22:55:17Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "edf89600-456c-4144-b706-3c79a09ba43a",
        "parentId" : "2769e7c3-d356-4619-9312-eb6f8b49205f",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ya, I understand. Better errors in kubectl would be a good candidate for a 'help-wanted' ticket post v1.\n",
        "createdAt" : "2015-06-17T17:20:36Z",
        "updatedAt" : "2015-06-17T22:55:17Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d69e0b5eb663121759cc595e09427b40a101e3de",
    "line" : null,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\tfor i := range details.Causes {\n\t\t\tc := &details.Causes[i]\n\t\t\ts := strings.Split(c.Message, \"}': \")\n\t\t\tif len(s) == 2 {\n\t\t\t\tc.Message ="
  },
  {
    "id" : "3bb2a75e-0a14-423d-bceb-7429ac3d1def",
    "prId" : 6338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5986fff8-f98c-48bb-8823-082b544f33cb",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Any reason for single case switch over if?\n",
        "createdAt" : "2015-04-03T16:49:42Z",
        "updatedAt" : "2015-04-03T16:49:42Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "807318f5-2467-49ff-a2e2-2ef020f65099",
        "parentId" : "5986fff8-f98c-48bb-8823-082b544f33cb",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I had the original two cases and removed them.  I can reduce to if, although I expect cases to be added here for other conditions eventually.\n\n> On Apr 3, 2015, at 12:50 PM, Jeff Lowdermilk notifications@github.com wrote:\n> \n> In pkg/kubectl/cmd/util/helpers.go:\n> \n> > ```\n> >     }\n> > ```\n> > -       if client.IsUnexpectedStatusError(err) {\n> > -           glog.FatalDepth(1, fmt.Sprintf(\"Unexpected status received from server: %s\", err.Error()))\n> > -       switch t := err.(type) {\n> > -       case *url.Error:\n> > -           glog.V(4).Infof(\"Connection error: %s %s: %v\", t.Op, t.URL, t.Err)\n> > -           switch {\n> >   Any reason for single case switch over if?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-03T19:20:32Z",
        "updatedAt" : "2015-04-03T19:20:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2f0492eb-e56e-4b6c-9462-c8bd6b9de951",
        "parentId" : "5986fff8-f98c-48bb-8823-082b544f33cb",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Fine as is, if you expect cases to be added later.\n",
        "createdAt" : "2015-04-03T19:21:43Z",
        "updatedAt" : "2015-04-03T19:21:43Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "323a44e54a8ad6815e4f53b793b4dc55557e6f4d",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +64,68 @@\t\tcase *url.Error:\n\t\t\tglog.V(4).Infof(\"Connection error: %s %s: %v\", t.Op, t.URL, t.Err)\n\t\t\tswitch {\n\t\t\tcase strings.Contains(t.Err.Error(), \"connection refused\"):\n\t\t\t\thost := t.URL"
  }
]