[
  {
    "id" : "552fc84a-a507-4ef7-9dbd-3b2b33b49383",
    "prId" : 63335,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63335#pullrequestreview-116671759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "118b516b-6ada-4792-a743-3a6f66bc3e7f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "previously, `len(resource) == 0` was used to safeguard cases where name was not of the form `<resourceType>/<resourceName>` and no default resource was provided. Is it possible for obj.Mapping.Resource.Resource to be empty here and to end up passing `\".\"` to ResourceNames?",
        "createdAt" : "2018-05-01T17:13:22Z",
        "updatedAt" : "2018-05-01T20:35:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "318cfd5e-8218-4c06-88d9-e7280f1d5334",
        "parentId" : "118b516b-6ada-4792-a743-3a6f66bc3e7f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You don't get empty resources back in mappings.",
        "createdAt" : "2018-05-01T17:18:09Z",
        "updatedAt" : "2018-05-01T20:35:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "efa23b76-274c-409e-b2b8-1f720939da51",
        "parentId" : "118b516b-6ada-4792-a743-3a6f66bc3e7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok",
        "createdAt" : "2018-05-01T19:21:39Z",
        "updatedAt" : "2018-05-01T20:35:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a480667493f6275c22cc9cd0f69fb0c75ef3579",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +462,466 @@\t\t\tContinueOnError().\n\t\t\tNamespaceParam(namespace).DefaultNamespace().\n\t\t\tResourceNames(obj.Mapping.Resource.Resource+\".\"+obj.Mapping.Resource.Group, name).\n\t\t\tFlatten().\n\t\t\tDo()"
  },
  {
    "id" : "97c499ab-8b98-4763-969a-03aec56a080a",
    "prId" : 61713,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61713#pullrequestreview-108230097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a657c7fb-0a4d-4e88-98aa-6c028378c30f",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "You should do\r\n```\r\nallErrs = append(allErrs, err)\r\nutilerrors.NewAggregate(allErrs)\r\n```\r\nYou don't want to lose earlier error info.",
        "createdAt" : "2018-03-29T16:09:53Z",
        "updatedAt" : "2018-03-29T16:11:00Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "47bdc9b8-5dec-4d95-add1-099dda5fd91d",
        "parentId" : "a657c7fb-0a4d-4e88-98aa-6c028378c30f",
        "authorId" : "259bca3c-5972-4848-80ce-662a81838a63",
        "body" : "I moved the allErrs variable after the ‘if’ statement. Because this error can be returned immediately, there’s no need to use the error aggregator.",
        "createdAt" : "2018-03-29T23:03:32Z",
        "updatedAt" : "2018-03-29T23:03:32Z",
        "lastEditedBy" : "259bca3c-5972-4848-80ce-662a81838a63",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0e0dafa4ba20d718f022eb5bee3209d1d94c42e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +280,284 @@\trunObject, err := createGeneratedObject(f, cmd, generator, names, params, cmdutil.GetFlagString(cmd, \"overrides\"), namespace)\n\tif err != nil {\n\t\treturn err\n\t} else {\n\t\tcreatedObjects = append(createdObjects, runObject)"
  },
  {
    "id" : "ab2c6738-2543-4527-8547-f262bc7cb90e",
    "prId" : 61288,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61288#pullrequestreview-110878442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "The fallback logic needs to kick in even when a generator is specified. We need to ensure that the default one is still available. What will happen if you take 1.11 client and any older server which does not have the new resource?",
        "createdAt" : "2018-04-10T11:18:43Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "d02fc548-daee-4c94-a4d2-6648b3f95d20",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Really? If I specify I want apps/v1 explicitly, I'd expect that to fail on an older server, just as if I tried to `create -f file-with-appsv1.yaml`",
        "createdAt" : "2018-04-10T11:55:32Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9be59ef5-fdeb-468b-8404-e355152cfd99",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "That's partially the current behavior, see https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/run.go#L260-L263",
        "createdAt" : "2018-04-10T12:14:55Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "5b0c7f8a-34d2-4de3-8513-3edb48a3820b",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I'm fine changing that behavior, though. We'll need to ensure it's consistent everywhere. ",
        "createdAt" : "2018-04-10T12:15:40Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "e9ff95c9-8dbb-42c9-bfdd-9ca792b73281",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "290aad39-52d5-4688-b65d-a8133ba20b16",
        "body" : "Yeah, it's not consistent right now in run and create deployment. I've made it consistent in this PR. We don't fallback now if the user has explicitly provided the generator, which makes more sense to me.",
        "createdAt" : "2018-04-10T12:19:28Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "290aad39-52d5-4688-b65d-a8133ba20b16",
        "tags" : [
        ]
      },
      {
        "id" : "eeac2bd6-d9e0-423e-a0b6-8e88365c20d1",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "SGTM. In that case, just rebase your PR and I'll merge it in. Are all fallback working the same way right now?",
        "createdAt" : "2018-04-10T12:22:50Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "17ab9b0c-097a-4336-b58c-b9418df755c0",
        "parentId" : "978faf71-6adb-4420-a1f9-1b03d1c784ad",
        "authorId" : "290aad39-52d5-4688-b65d-a8133ba20b16",
        "body" : "Rebased. Yes, `FallbackGeneratorNameIfNecessary` is being used only from `run.go` and `create_deployment.go`, I've made the logic consistent across both the files.",
        "createdAt" : "2018-04-10T15:04:18Z",
        "updatedAt" : "2018-04-10T19:14:40Z",
        "lastEditedBy" : "290aad39-52d5-4688-b65d-a8133ba20b16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c63b61adb079191b8bb764db7a03fa3c6babb6",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +229,233 @@\n\t\t// Falling back because the generator was not provided and the default one could be unavailable.\n\t\tgeneratorNameTemp, err := cmdutil.FallbackGeneratorNameIfNecessary(generatorName, clientset.Discovery(), cmdErr)\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "ff0f180c-5870-4889-8bb4-37bea0f1dcaa",
    "prId" : 46468,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46468#pullrequestreview-41390773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cef741f8-be77-4daa-9c67-60eb85d895cc",
        "parentId" : null,
        "authorId" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "body" : "Do we really have to export this function ? I don't think these should be exported because this get wrapped in Run method of the command above.\r\nThis is applicable to all the commands in kubectl I guess ? ",
        "createdAt" : "2017-05-31T23:12:03Z",
        "updatedAt" : "2017-06-23T17:03:50Z",
        "lastEditedBy" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "tags" : [
        ]
      },
      {
        "id" : "5c2c7cef-96e8-452c-95cc-2634645d653d",
        "parentId" : "cef741f8-be77-4daa-9c67-60eb85d895cc",
        "authorId" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "body" : "Correct. I'd say a good majority of the exported symbols under `/kubectl/` could be made private. I did not want to create too much noise in this diff.\r\n\r\nIf I hide more of these identifiers I will isolate the rename commits to a single new PR.",
        "createdAt" : "2017-05-31T23:27:09Z",
        "updatedAt" : "2017-06-23T17:03:50Z",
        "lastEditedBy" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "tags" : [
        ]
      },
      {
        "id" : "644f16f3-47b7-4230-8474-8a674519bf43",
        "parentId" : "cef741f8-be77-4daa-9c67-60eb85d895cc",
        "authorId" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "body" : "ok, sounds good.",
        "createdAt" : "2017-06-01T00:13:52Z",
        "updatedAt" : "2017-06-23T17:03:50Z",
        "lastEditedBy" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac793982b0a91291a9cd3163526d99edddf0dc10",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +137,141 @@}\n\nfunc RunRun(f cmdutil.Factory, cmdIn io.Reader, cmdOut, cmdErr io.Writer, cmd *cobra.Command, args []string, argsLenAtDash int) error {\n\t// Let kubectl run follow rules for `--`, see #13004 issue\n\tif len(args) == 0 || argsLenAtDash == 0 {"
  },
  {
    "id" : "cf27be95-43b9-42db-b5e6-6315e66747db",
    "prId" : 44416,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44416#pullrequestreview-32618265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa7a0f12-9e9e-4e41-b3dc-216ec8ba8e98",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Does this call ever return a nil object without an error?  What does the caller of `WaitForPod` do with a `nil` pod?",
        "createdAt" : "2017-04-13T12:06:49Z",
        "updatedAt" : "2017-04-13T12:06:49Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "546313d8-e6ec-4b3d-9cbf-10130a4f0bb4",
        "parentId" : "fa7a0f12-9e9e-4e41-b3dc-216ec8ba8e98",
        "authorId" : "bfb32501-a689-4c4c-941b-d6dcf433bb91",
        "body" : "No, `watch.Until()` does not return a `nil` event without an error (it can return both non-`nil` event and an error though). But the line that I replaced was trying to access `ev.Object` even in case if `err` is not nil.\r\n",
        "createdAt" : "2017-04-13T12:18:16Z",
        "updatedAt" : "2017-04-13T12:18:16Z",
        "lastEditedBy" : "bfb32501-a689-4c4c-941b-d6dcf433bb91",
        "tags" : [
        ]
      },
      {
        "id" : "243497a6-bc49-4380-9a42-037c0548c6ce",
        "parentId" : "fa7a0f12-9e9e-4e41-b3dc-216ec8ba8e98",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> No, watch.Until() does not return a nil event without an error\r\n\r\nOk, callers ought to be ok then.",
        "createdAt" : "2017-04-13T12:36:23Z",
        "updatedAt" : "2017-04-13T12:36:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b62af04f7f83d25df18c553a2411b89798505c60",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +411,415 @@\tvar result *api.Pod\n\terr = intr.Run(func() error {\n\t\tev, err := watch.Until(0, w, func(ev watch.Event) (bool, error) {\n\t\t\treturn exitCondition(ev)\n\t\t})"
  },
  {
    "id" : "de900ca5-0bef-46ed-8647-8ed2d3868771",
    "prId" : 42362,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42362#pullrequestreview-26250119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd12e654-0ce3-4089-8fba-126bdfe80eeb",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I assume we'll deprecate it by updating generator docs?",
        "createdAt" : "2017-03-09T21:57:53Z",
        "updatedAt" : "2017-03-10T11:08:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "0fb1aa38-b634-4a15-9f5b-cf3dc1f64227",
        "parentId" : "dd12e654-0ce3-4089-8fba-126bdfe80eeb",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Or should we print deprecation message whenever `extensions/v1beta1` generator is used (it'd be a bit too noisy)? ",
        "createdAt" : "2017-03-09T22:04:26Z",
        "updatedAt" : "2017-03-10T11:08:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "aa1b3071-96f2-4a3c-acb3-2a528e449d0a",
        "parentId" : "dd12e654-0ce3-4089-8fba-126bdfe80eeb",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "We'll update the generator docs, which btw. needs updating when this merges. That's what we did when removing extensions/v1beta1.Jobs.",
        "createdAt" : "2017-03-10T10:43:19Z",
        "updatedAt" : "2017-03-10T11:08:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "597a359c38e5bbd457db670e775d9e2dc176bab7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +218,222 @@\t\tcase api.RestartPolicyAlways:\n\t\t\t// TODO: we need to deprecate this along with extensions/v1beta1.Deployments\n\t\t\t// in favor of the new generator for apps/v1beta1.Deployments\n\t\t\tif contains(resourcesList, extensionsv1beta1.SchemeGroupVersion.WithResource(\"deployments\")) {\n\t\t\t\tgeneratorName = cmdutil.DeploymentV1Beta1GeneratorName"
  },
  {
    "id" : "d0141b0a-01fe-4065-a3e4-e2ca0f47904f",
    "prId" : 42362,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42362#pullrequestreview-26149739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d83fe88-ca13-4337-8e75-180ceaedc572",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We should check if cronjob is supported as well. But this can be fixed in a follow-up.",
        "createdAt" : "2017-03-09T21:59:25Z",
        "updatedAt" : "2017-03-10T11:08:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "597a359c38e5bbd457db670e775d9e2dc176bab7",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +212,216 @@\tschedule := cmdutil.GetFlagString(cmd, \"schedule\")\n\tif len(schedule) != 0 && len(generatorName) == 0 {\n\t\tgeneratorName = cmdutil.CronJobV2Alpha1GeneratorName\n\t}\n\tif len(generatorName) == 0 {"
  },
  {
    "id" : "d95ffb5a-3adf-487d-b33a-b35dc9329967",
    "prId" : 32671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32671#pullrequestreview-1714937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15a3a936-87a2-4e37-825a-f34d77d866ac",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We didn't set `--restart` for scheduled job, right?\n",
        "createdAt" : "2016-09-23T19:09:29Z",
        "updatedAt" : "2016-09-23T19:09:29Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e2059a79-15b2-45ce-9801-55e85c6ead18",
        "parentId" : "15a3a936-87a2-4e37-825a-f34d77d866ac",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "`--schedule` is the only time we'll set restart policy to Never, because that's the only time we'll create a SJ. Unless a user sets one manually, but then he'll trip over validation. But it works exactly the same as with jobs so I'd assume we're ok. \n",
        "createdAt" : "2016-09-27T11:50:47Z",
        "updatedAt" : "2016-09-27T11:50:47Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "cccef68e272fe2416248b158a1278d2e9e953d13",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +120,124 @@\tcmd.Flags().Bool(\"attach\", false, \"If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\")\n\tcmd.Flags().Bool(\"leave-stdin-open\", false, \"If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\")\n\tcmd.Flags().String(\"restart\", \"Always\", \"The restart policy for this Pod.  Legal values [Always, OnFailure, Never].  If set to 'Always' a deployment is created, if set to 'OnFailure' a job is created, if set to 'Never', a regular pod is created. For the latter two --replicas must be 1.  Default 'Always', for ScheduledJobs `Never`.\")\n\tcmd.Flags().Bool(\"command\", false, \"If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\")\n\tcmd.Flags().String(\"requests\", \"\", \"The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\")"
  },
  {
    "id" : "a7348e93-49e5-471b-ad26-691369558aa4",
    "prId" : 32671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32671#pullrequestreview-1730445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf028624-b556-4e9d-8b58-efee3dc3b6a5",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Note that this link could be changed, since I made a comment on the position of the generator section.\n",
        "createdAt" : "2016-09-23T19:10:03Z",
        "updatedAt" : "2016-09-23T19:10:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "30aa73cf-36e8-4e66-864f-cc1836be7c0e",
        "parentId" : "cf028624-b556-4e9d-8b58-efee3dc3b6a5",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Not sure about that one. It looks like even though I've moved it the link should be ok, at least that's what I have from the preview.\n",
        "createdAt" : "2016-09-27T13:28:32Z",
        "updatedAt" : "2016-09-27T13:28:32Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "cccef68e272fe2416248b158a1278d2e9e953d13",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +105,109 @@func addRunFlags(cmd *cobra.Command) {\n\tcmdutil.AddDryRunFlag(cmd)\n\tcmd.Flags().String(\"generator\", \"\", \"The name of the API generator to use, see http://kubernetes.io/docs/user-guide/kubectl-conventions/#generators for a list.\")\n\tcmd.Flags().String(\"image\", \"\", \"The image for the container to run.\")\n\tcmd.MarkFlagRequired(\"image\")"
  },
  {
    "id" : "e1e57249-337e-470c-9bc4-b74acec5e547",
    "prId" : 32212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54c6cbc4-d342-4712-88cb-1e21af7fc109",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Shall we add a check here to make sure stderr is not `nil` or we're good?\n\ncc @ncdc why set the `opts.Err` to `nil` in `opts.Run()`? It's surprising to the callers IMO.\n",
        "createdAt" : "2016-09-07T21:39:12Z",
        "updatedAt" : "2016-09-07T23:02:16Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e2d008fc-07ab-4d41-b08c-100d9ba94817",
        "parentId" : "54c6cbc4-d342-4712-88cb-1e21af7fc109",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yeah I probably should undo that bit and find a better way to do this. I\ncheck for nil to determine if we need to handle stderr.\n\nOn Wednesday, September 7, 2016, Janet Kuo notifications@github.com wrote:\n\n> In pkg/kubectl/cmd/run.go\n> https://github.com/kubernetes/kubernetes/pull/32212#discussion_r77909155\n> :\n> \n> > ```\n> > if err := opts.Run(); err != nil {\n> > ```\n> > -       fmt.Fprintf(opts.Err, \"Error attaching, falling back to logs: %v\\n\", err)\n> > -       fmt.Fprintf(stderr, \"Error attaching, falling back to logs: %v\\n\", err)\n> \n> Shall we add a check here to make sure stderr is not nil or we're good?\n> \n> cc @ncdc https://github.com/ncdc why set the opts.Err to nil in\n> opts.Run()? It's surprising to the callers IMO.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/32212/files/61605bd930504268f309632b832a34dd96ff7650#r77909155,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAABYp4_nQlZvmebMp4V-yAWUVoksq0bks5qny8ygaJpZM4J3KmP\n> .\n",
        "createdAt" : "2016-09-07T21:48:05Z",
        "updatedAt" : "2016-09-07T23:02:16Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "27b5da7a-3834-463b-ac82-21539c88973a",
        "parentId" : "54c6cbc4-d342-4712-88cb-1e21af7fc109",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@fraenkel maybe add a TODO or comment here mentioning that opts.Run() sets opts.Err to nil and we should find a better way to do that \n",
        "createdAt" : "2016-09-07T22:24:06Z",
        "updatedAt" : "2016-09-07T23:02:16Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb4a4663212e916796c0304fa18b025992da301f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +482,486 @@\tstderr := opts.Err\n\tif err := opts.Run(); err != nil {\n\t\tfmt.Fprintf(stderr, \"Error attaching, falling back to logs: %v\\n\", err)\n\t\treq, err := f.LogsForObject(pod, &api.PodLogOptions{Container: ctrName})\n\t\tif err != nil {"
  },
  {
    "id" : "2780cb11-0dc7-4d04-b716-f05da0b5def0",
    "prId" : 28801,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3624215-c37b-47f9-870f-1c3396bed1d9",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Changed the usage of `--quiet` to `If true, suppress prompt messages.`\n",
        "createdAt" : "2016-07-12T18:58:22Z",
        "updatedAt" : "2016-07-12T18:58:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "268b93ea7555a6396477628db0ed53a7857eb3d0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@\tcmd.Flags().String(\"service-generator\", \"service/v2\", \"The name of the generator to use for creating a service.  Only used if --expose is true\")\n\tcmd.Flags().String(\"service-overrides\", \"\", \"An inline JSON override for the generated service object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.  Only used if --expose is true.\")\n\tcmd.Flags().Bool(\"quiet\", false, \"If true, suppress prompt messages.\")\n}\n"
  },
  {
    "id" : "b4ee0f7a-f187-48cc-b3e0-5484f8f67b6b",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acb18f1d-08a1-4264-b82a-bc716d47e1be",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "`tick` argument together with semantic of `waitForPod` awakens interpretation of `tick` to be the ticker function controlling the for loop inside. What about to change `tick` to `notify`?\n",
        "createdAt" : "2016-07-27T08:38:48Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      },
      {
        "id" : "86592e60-1f5d-4cfc-9842-52e4aa24fed3",
        "parentId" : "acb18f1d-08a1-4264-b82a-bc716d47e1be",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`tick` comes from the Go `ticker`: https://golang.org/pkg/time/#Ticker. It's called on each tick of the timer.\n",
        "createdAt" : "2016-07-27T12:06:26Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : null,
    "diffHunk" : "@@ -1,1 +368,372 @@// waitForPod watches the given pod until the exitCondition is true. Each two seconds\n// the tick function is called e.g. for progress output.\nfunc waitForPod(c *client.Client, ns, name string, exitCondition func(*api.Pod) bool, tick func(*api.Pod)) (*api.Pod, error) {\n\tpod, err := c.Pods(ns).Get(name)\n\tif err != nil {"
  },
  {
    "id" : "7e3cbd04-4ed8-4d7b-a55b-f2f953d0a919",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd140d4-38ac-4771-9c57-5fe77e735b9e",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "nit: Wonder, we are using quiet here but we are reading that in the first line of this function?\n",
        "createdAt" : "2016-08-02T14:33:40Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "da854095-5016-4cdd-991d-56ace6449049",
        "parentId" : "5dd140d4-38ac-4771-9c57-5fe77e735b9e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "moved down.\n",
        "createdAt" : "2016-08-03T06:05:06Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5e0d642e-769e-4c94-9f5d-8ae28c8876aa",
        "parentId" : "5dd140d4-38ac-4771-9c57-5fe77e735b9e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Moved up again as it is needed above in the latest master.\n",
        "createdAt" : "2016-08-16T12:51:11Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +277,281 @@\t\t}\n\t\terr = handleAttachPod(f, client, attachablePod.Namespace, attachablePod.Name, opts, quiet)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
  },
  {
    "id" : "b9a0f518-dd98-4289-82c4-408fcd3303e0",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92d87f80-a246-415f-929e-53e35ee47df3",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "wonder why this block is here and not before \"if remove\" block?\n",
        "createdAt" : "2016-08-02T14:38:35Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "cfa8006c-6ed5-4c75-b85a-233ff23a30e5",
        "parentId" : "92d87f80-a246-415f-929e-53e35ee47df3",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Because you have to perform the removal no matter what. If you move this switch block up, it would return too early and the remove wouldn't happen.\n",
        "createdAt" : "2016-08-02T20:34:07Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : null,
    "diffHunk" : "@@ -1,1 +318,322 @@\t\t\treturn nil\n\t\t}\n\n\t\tswitch pod.Status.Phase {\n\t\tcase api.PodSucceeded:"
  },
  {
    "id" : "1b9a84f4-5f1c-448e-a065-5c38411bfff8",
    "prId" : 22849,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "510ab6f6-3f5a-4ea3-93a6-33cf93c5d082",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Just because you have the group doesn't mean you enabled the object.  As I recall, we had levels with different resources enabled by default.  How about checking both?\n",
        "createdAt" : "2016-03-11T12:42:46Z",
        "updatedAt" : "2016-03-11T15:59:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "28004112-c981-448a-bf23-f345bba75d4a",
        "parentId" : "510ab6f6-3f5a-4ea3-93a6-33cf93c5d082",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "True, that is the case with 1.1 I've just setup.\n",
        "createdAt" : "2016-03-11T14:14:37Z",
        "updatedAt" : "2016-03-11T15:59:23Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f27871e60d15651e3f7c2633519fa13868e7ddd5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +161,165 @@\t\tif restartPolicy == api.RestartPolicyAlways {\n\t\t\tif contains(resourcesList, v1beta1.SchemeGroupVersion.WithResource(\"deployments\")) {\n\t\t\t\tgeneratorName = \"deployment/v1beta1\"\n\t\t\t} else {\n\t\t\t\tgeneratorName = \"run/v1\""
  },
  {
    "id" : "52df7cf1-b426-4e13-afed-0441041884d1",
    "prId" : 20035,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "407b6cae-655b-414e-a08d-0c5df7bfe125",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This isn't performing an update, so how would the change-cause annotation be added before this point?\n",
        "createdAt" : "2016-02-02T20:43:01Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ec9d6004-c619-4c85-b958-7457f17aedd0",
        "parentId" : "407b6cae-655b-414e-a08d-0c5df7bfe125",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`RecordChangeCause` just updates the `runtime.Object` by adding change-cause annotation to it. In L446 we get the info from this object, and in L455 we create the object (POST the resource) with resource.NewHelper.Create.\n",
        "createdAt" : "2016-02-02T20:48:11Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3cb44aaffca4eefceec6e3754a44d419c770736",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +431,435 @@\t\treturn nil, \"\", nil, nil, err\n\t}\n\tif cmdutil.GetRecordFlag(cmd) || len(annotations[kubectl.ChangeCauseAnnotation]) > 0 {\n\t\tif err := cmdutil.RecordChangeCause(obj, f.Command()); err != nil {\n\t\t\treturn nil, \"\", nil, nil, err"
  },
  {
    "id" : "079841f6-2e31-4cf8-927a-76beafe9382b",
    "prId" : 17195,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58ef940b-f407-4ceb-9c4f-af7d289821c1",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Mention that deployment/v1beta1 is also a valid value?\n",
        "createdAt" : "2015-11-19T08:00:46Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "f1fe70ad-c521-4189-ba40-14e1cb8801f0",
        "parentId" : "58ef940b-f407-4ceb-9c4f-af7d289821c1",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2015-11-19T19:03:35Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0c02c95c4cbd5e4a4f1bef65e813e85035f998e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +89,93 @@func addRunFlags(cmd *cobra.Command) {\n\t// TODO: Change the default to \"deployment/v1beta1\" (which is a valid generator) when deployment reaches beta (#15313)\n\tcmd.Flags().String(\"generator\", \"\", \"The name of the API generator to use.  Default is 'run/v1' if --restart=Always, otherwise the default is 'job/v1beta1'.\")\n\tcmd.Flags().String(\"image\", \"\", \"The image for the container to run.\")\n\tcmd.MarkFlagRequired(\"image\")"
  },
  {
    "id" : "2703e85b-5741-4776-83bc-79a058237109",
    "prId" : 15921,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I think it would be more appropriate to first generate the container for the new image and then if successful, and `--expose` is true, create the service. I also don't see how this is interplaying with dry-run.\n",
        "createdAt" : "2015-10-20T13:45:57Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8b12d04d-3215-48ad-90fa-d1c64bad93c3",
        "parentId" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Nevermind about dry-run, just noticed you include it in createGeneratedObject.\n",
        "createdAt" : "2015-10-20T13:47:35Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "25f873fb-a8b9-4365-950d-7f8ac385f191",
        "parentId" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "The reason that I did it the other way is that you will get the service based spreading in the scheduler if you create the service first.\n",
        "createdAt" : "2015-10-20T18:17:01Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "32485d66-b75a-4213-8382-43133bb55c42",
        "parentId" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What would happen if the user tries to run and expose an existed replication controller? For example:\n\n``` console\n$ kubectl run nginx --image=nginx\n$ kubectl run nginx --image=nginx --expose --port=5678\n```\n",
        "createdAt" : "2015-10-20T23:40:01Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d32e0f3a-40f5-4632-9348-fd277d993024",
        "parentId" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "The service creation will work, but the replication controller create will fail.  That seems reasonable to me, but I can add a pro-active check at the beginning that validates that the replication controller doesn't exist.\n\nOf course even that's not safe against parallel CLI calls, we can't make the service and RC creation atomic...\n",
        "createdAt" : "2015-10-21T03:06:57Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "6ffc7a36-3b0f-4c9a-abfd-27b6fd71fd46",
        "parentId" : "3e69dee7-7173-4b72-a750-be902a58a70d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "> The service creation will work, but the replication controller create will fail. That seems reasonable to me\n\n+1\n\nok\n",
        "createdAt" : "2015-10-21T15:02:33Z",
        "updatedAt" : "2015-10-21T15:02:33Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fd60727ea35913a4ae358785c5b66a2b70416e",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +160,164 @@\tparams[\"env\"] = cmdutil.GetFlagStringSlice(cmd, \"env\")\n\n\tif cmdutil.GetFlagBool(cmd, \"expose\") {\n\t\tserviceGenerator := cmdutil.GetFlagString(cmd, \"service-generator\")\n\t\tif len(serviceGenerator) == 0 {"
  },
  {
    "id" : "0785353c-31f3-4b13-a140-deeb4da11fee",
    "prId" : 15921,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4acb372c-b280-42d1-8063-37ba424e4f27",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should we update the description of `--port` since it can be container port and service port?\n",
        "createdAt" : "2015-10-20T23:16:01Z",
        "updatedAt" : "2015-10-21T03:21:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "cc14070e-b79b-4f97-b69d-4570b9380927",
        "parentId" : "4acb372c-b280-42d1-8063-37ba424e4f27",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-10-21T03:22:06Z",
        "updatedAt" : "2015-10-21T03:22:06Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fd60727ea35913a4ae358785c5b66a2b70416e",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +311,315 @@\tnames := generator.ParamNames()\n\n\tport := cmdutil.GetFlagInt(cmd, \"port\")\n\tif port < 1 {\n\t\treturn fmt.Errorf(\"--port must be a positive integer when exposing a service\")"
  },
  {
    "id" : "1125b432-f4fa-40d0-8c04-87021c4a6df6",
    "prId" : 12220,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eddd9e56-8be0-452f-b326-95363367b578",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This makes sense to me also,  but we should document how we differ from Docker's -d/-a in docs/user-guide/docker-cli-to-kubectl.md, and link to https://docs.docker.com/reference/run/\n",
        "createdAt" : "2015-08-04T20:40:43Z",
        "updatedAt" : "2015-08-07T03:20:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "22a905f8-a654-4f34-8452-c6d3f9ab75ff",
        "parentId" : "eddd9e56-8be0-452f-b326-95363367b578",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-08-04T21:50:17Z",
        "updatedAt" : "2015-08-07T03:20:27Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ac50b49806635ff4814a1eb26be05fcf90d485e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +73,77 @@\tcmd.Flags().BoolP(\"stdin\", \"i\", false, \"Keep stdin open on the container(s) in the pod, even if nothing is attached.\")\n\tcmd.Flags().Bool(\"tty\", false, \"Allocated a TTY for each container in the pod.  Because -t is currently shorthand for --template, -t is not supported for --tty. This shorthand is deprecated and we expect to adopt -t for --tty soon.\")\n\tcmd.Flags().Bool(\"attach\", false, \"If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--interactive' is set, in which case the default is true.\")\n\treturn cmd\n}"
  },
  {
    "id" : "022243c2-7aa6-4ac2-b5eb-422c4c25c64d",
    "prId" : 7536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dec2e33-8308-49e8-852b-8e71f6d57631",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should we explicitly name this flag as `experimental` or `deprecated` since we are adding only for demo purposes?\n",
        "createdAt" : "2015-04-30T00:54:20Z",
        "updatedAt" : "2015-05-01T23:45:23Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "faf86e3e-a6d8-4a03-9f6f-f8390eb956d3",
        "parentId" : "9dec2e33-8308-49e8-852b-8e71f6d57631",
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "Just prefixing the flag makes it awkward to use, especially in a demo. I'd\nprefer to keep to limit qualifications in the comment line as long as we\ndon't deprecate it in the API.\n\nOn Wed, Apr 29, 2015 at 5:54 PM, Vish Kannan notifications@github.com\nwrote:\n\n> In pkg/kubectl/cmd/run.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7536#discussion_r29396398\n> :\n> \n> > @@ -60,6 +60,7 @@ func NewCmdRunContainer(f *cmdutil.Factory, out io.Writer) *cobra.Command {\n> >     cmd.Flags().Bool(\"dry-run\", false, \"If true, only print the object that would be sent, without sending it.\")\n> >     cmd.Flags().String(\"overrides\", \"\", \"An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\")\n> >     cmd.Flags().Int(\"port\", -1, \"The port that this container exposes.\")\n> > -   cmd.Flags().Int(\"hostport\", -1, \"The host port mapping for the container port. To demonstrate a single-machine container.\")\n> \n> Should we explicitly name this flag as experimental or deprecated since\n> we are adding only for demo purposes?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7536/files#r29396398\n> .\n",
        "createdAt" : "2015-04-30T17:14:20Z",
        "updatedAt" : "2015-05-01T23:45:23Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      },
      {
        "id" : "da1f34c9-a46e-4cb7-96c5-43c4248f07e9",
        "parentId" : "9dec2e33-8308-49e8-852b-8e71f6d57631",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Agree w/ @rjnagal. If we decide to add this, we shouldn't make it awkward.\n",
        "createdAt" : "2015-04-30T18:48:28Z",
        "updatedAt" : "2015-05-01T23:45:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cbfb0c3f996e21ebf739b2622ff0a2b218a1c55",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +61,65 @@\tcmd.Flags().String(\"overrides\", \"\", \"An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\")\n\tcmd.Flags().Int(\"port\", -1, \"The port that this container exposes.\")\n\tcmd.Flags().Int(\"hostport\", -1, \"The host port mapping for the container port. To demonstrate a single-machine container.\")\n\tcmd.Flags().StringP(\"labels\", \"l\", \"\", \"Labels to apply to the pod(s) created by this call to run-container.\")\n\treturn cmd"
  }
]