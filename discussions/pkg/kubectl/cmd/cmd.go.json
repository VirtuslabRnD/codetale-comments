[
  {
    "id" : "049f2590-8141-4af6-8072-010e9556747b",
    "prId" : 92343,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92343#pullrequestreview-453307849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0db8c72-3705-434d-82df-8653f39f9b0b",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "If I invoke `kubectl foo --flag bar` this error will complain about `foo`, but should about `--flag`. I'd suggest to just print the error w/o anything it'll usually look like this:\r\n```\r\nkubectl foo --flag bar\r\nError: flags cannot be placed before plugin name\r\n```\r\nAlternatively you'd need to look for the first flag, but that's not necessary, imo. ",
        "createdAt" : "2020-07-22T13:12:07Z",
        "updatedAt" : "2020-07-22T13:12:17Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "464f3c68-3402-4de9-af04-cb788bfd441d",
        "parentId" : "e0db8c72-3705-434d-82df-8653f39f9b0b",
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "If `kubectl-foo` does not exist, I think the following output is expected\r\n```\r\nError: unknown command \"foo\" for \"kubectl\"\r\n\r\nDid you mean this?\r\n        top\r\n\r\nRun 'kubectl --help' for usage.\r\n```\r\n\r\nIf `kubectl-foo` does exist, kubectl with this patch should work without complaining.",
        "createdAt" : "2020-07-22T13:18:56Z",
        "updatedAt" : "2020-07-23T07:46:35Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a2e5af11d6ca1cd9f66f5a1e65fe4773b755fb2",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +404,408 @@\tif len(remainingArgs) == 0 {\n\t\t// the length of cmdArgs is at least 1\n\t\treturn fmt.Errorf(\"flags cannot be placed before plugin name: %s\", cmdArgs[0])\n\t}\n"
  },
  {
    "id" : "ac88c275-f793-403c-aed8-765cfdbba66c",
    "prId" : 76227,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76227#pullrequestreview-256016810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b3ab8db-09ae-4b81-895a-a1fa12034497",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "isn't this a behavior change to the args passed to the invoked command (prepended with executable path or not)?",
        "createdAt" : "2019-06-29T00:21:53Z",
        "updatedAt" : "2019-07-08T17:10:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9f471401-4d09-4cf7-b97f-2c47c014c060",
        "parentId" : "4b3ab8db-09ae-4b81-895a-a1fa12034497",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nevermind, found the call site was updated",
        "createdAt" : "2019-06-29T01:01:50Z",
        "updatedAt" : "2019-07-08T17:10:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "13be373ce70ee5b90da6989b84f1a6c507e40706",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +383,387 @@\t// invoke cmd binary relaying the environment and args given\n\t// append executablePath to cmdArgs, as execve will make first argument the \"binary name\".\n\treturn syscall.Exec(executablePath, append([]string{executablePath}, cmdArgs...), environment)\n}\n"
  },
  {
    "id" : "8f3d8606-df1b-4e43-84a7-9221019888e5",
    "prId" : 73032,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73032#pullrequestreview-429220698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42d64d22-f015-470a-b76a-503a5be2d309",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@soltysh see slack",
        "createdAt" : "2020-06-11T19:29:01Z",
        "updatedAt" : "2020-06-11T20:05:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "df6608dc998f4b403f10433809dfbc78e20c890d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +431,435 @@// NewKubectlCommand creates the `kubectl` command and its nested children.\nfunc NewKubectlCommand(in io.Reader, out, err io.Writer) *cobra.Command {\n\twarningHandler := rest.NewWarningWriter(err, rest.WarningWriterOptions{Deduplicate: true, Color: term.AllowsColorOutput(err)})\n\twarningsAsErrors := false\n"
  },
  {
    "id" : "782ff5d3-e5db-4f35-a4aa-93965e561443",
    "prId" : 69464,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69464#pullrequestreview-162188597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "121bdf2d-e729-48af-95d9-52a85919148d",
        "parentId" : null,
        "authorId" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "body" : "This is much easier to read, with the package prefixing the \"New\" command.",
        "createdAt" : "2018-10-05T20:18:45Z",
        "updatedAt" : "2018-10-06T17:01:28Z",
        "lastEditedBy" : "d995a87c-4064-4495-9753-d0cf8a45072f",
        "tags" : [
        ]
      }
    ],
    "commit" : "add731dff18b63ffdb40dd89342efe9e2c6f9ebb",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +448,452 @@\t\t\tCommands: []*cobra.Command{\n\t\t\t\tcreate.NewCmdCreate(f, ioStreams),\n\t\t\t\texpose.NewCmdExposeService(f, ioStreams),\n\t\t\t\trun.NewCmdRun(f, ioStreams),\n\t\t\t\tset.NewCmdSet(f, ioStreams),"
  },
  {
    "id" : "165b3805-04f5-4466-9515-e7ff882fb551",
    "prId" : 63010,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63010#pullrequestreview-114806282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bedcbcd-2393-4b76-9436-c1eb6aac041d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "and another singleton. Don't like them spreading everywhere.",
        "createdAt" : "2018-04-24T14:03:31Z",
        "updatedAt" : "2018-04-24T14:03:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "aafe5211-d70f-4330-913d-44b8533dc003",
        "parentId" : "3bedcbcd-2393-4b76-9436-c1eb6aac041d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "How many of them could we replace with meta.Accessor?",
        "createdAt" : "2018-04-24T14:03:48Z",
        "updatedAt" : "2018-04-24T14:03:48Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "86815a5c-e2e2-407a-9097-efafb2011076",
        "parentId" : "3bedcbcd-2393-4b76-9436-c1eb6aac041d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> How many of them could we replace with meta.Accessor?\r\n\r\nThere is actually a difference between the two functions. They handle \"common\" metadata between lists differently.  So, not as many as you'd think.",
        "createdAt" : "2018-04-24T14:22:10Z",
        "updatedAt" : "2018-04-24T14:22:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "0710f72c65ad23e7a3726b345898ef4aaaac26fa",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +381,385 @@}\n\nvar metadataAccessor = meta.NewAccessor()"
  },
  {
    "id" : "f6b6c0b5-f65e-4f38-9a1a-e59c0e478695",
    "prId" : 60499,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60499#pullrequestreview-100360130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e92e5981-a4d5-4333-bfdd-7d90fc2a9034",
        "parentId" : null,
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "I think there's also a `set-last-applied` we can add it.",
        "createdAt" : "2018-03-01T09:21:18Z",
        "updatedAt" : "2018-03-24T05:42:41Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1989aa5023496e1ada7cd0745d92b19c7f10a4a6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +170,174 @@        kubectl_get | kubectl_describe | kubectl_delete | kubectl_label | kubectl_edit | kubectl_patch |\\\n        kubectl_annotate | kubectl_expose | kubectl_scale | kubectl_autoscale | kubectl_taint | kubectl_rollout_* |\\\n        kubectl_apply_edit-last-applied | kubectl_apply_view-last-applied)\n            __kubectl_get_resource\n            return"
  },
  {
    "id" : "a093d846-e735-4e3e-a8db-bda32ed4ac63",
    "prId" : 46062,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46062#pullrequestreview-39267107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43f00608-89a3-4d2e-9dfc-703626cc8b8b",
        "parentId" : null,
        "authorId" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "body" : "was thinking more about the unit test for this function. We can write a unit test which wraps a NoOp cobra.Command and captures the \"deprecated\" string in the output. Thoughts ? (happy to discuss in person)",
        "createdAt" : "2017-05-19T16:41:19Z",
        "updatedAt" : "2017-05-22T21:23:14Z",
        "lastEditedBy" : "d4643e80-cc45-428b-8128-5004c4c603ff",
        "tags" : [
        ]
      },
      {
        "id" : "01d1ff1d-75f5-4ed0-b958-a1c91ca29a2e",
        "parentId" : "43f00608-89a3-4d2e-9dfc-703626cc8b8b",
        "authorId" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "body" : "Sounds good to me. Will look at that.",
        "createdAt" : "2017-05-19T16:49:39Z",
        "updatedAt" : "2017-05-22T21:23:14Z",
        "lastEditedBy" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "tags" : [
        ]
      },
      {
        "id" : "de15f9ac-94ee-4704-b742-68761f8b3231",
        "parentId" : "43f00608-89a3-4d2e-9dfc-703626cc8b8b",
        "authorId" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "body" : "Unit test written. Thanks for the suggestion!",
        "createdAt" : "2017-05-19T18:26:28Z",
        "updatedAt" : "2017-05-22T21:23:14Z",
        "lastEditedBy" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7cc61816fa46e79f804d2876f3148e09f11840b",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +405,409 @@\treturn cmd\n}\n\n// deprecated is similar to deprecatedAlias, but it is used for deprecations\n// that are not simple aliases; this command is actually a different"
  },
  {
    "id" : "a6e045e7-dcb7-4008-ae34-bab3a0a74f66",
    "prId" : 44251,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44251#pullrequestreview-43303299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "069ca0e7-f8d5-416c-8a4e-864f3c920ecc",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should be `__kubectl_parse_config()`",
        "createdAt" : "2017-06-10T18:27:47Z",
        "updatedAt" : "2017-06-10T18:27:48Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "edce7137-244d-4a36-b5b2-fa5b2143fbc4",
        "parentId" : "069ca0e7-f8d5-416c-8a4e-864f3c920ecc",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This breaks #29386",
        "createdAt" : "2017-06-10T18:28:43Z",
        "updatedAt" : "2017-06-10T18:28:43Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b1078e61e7235399a57706f68c294b9d1cb7a68",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +93,97 @@\n# $1 has to be \"contexts\", \"clusters\" or \"users\"\n__kubectl_config_get()\n{\n    local template kubectl_out"
  },
  {
    "id" : "c1730107-6997-4cf2-8b17-1b7a830bdf93",
    "prId" : 43303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43303#pullrequestreview-27725035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abf63a00-ad0b-42d5-a51a-d7bbabebb83d",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "I'd like we also put a short name for this, such as `cjobs` etc. But we can fix this in a follow up patch.",
        "createdAt" : "2017-03-18T03:24:33Z",
        "updatedAt" : "2017-03-25T09:42:30Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "e7efcfb8-03fc-4582-8d6f-df707f5616df",
        "parentId" : "abf63a00-ad0b-42d5-a51a-d7bbabebb83d",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "pls don't do this here.",
        "createdAt" : "2017-03-18T14:06:59Z",
        "updatedAt" : "2017-03-25T09:42:30Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a3dad1da6b5edffa05b5a946f9ea1911c5c0153",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +189,193 @@    * componentstatuses (aka 'cs')\n    * configmaps (aka 'cm')\n    * cronjobs\n    * daemonsets (aka 'ds')\n    * deployments (aka 'deploy')"
  },
  {
    "id" : "f2f6a45f-ac5e-439f-b51d-af1b2ae6e221",
    "prId" : 21509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6056921-74c2-4d79-b741-8f5aaad0fd29",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thanks. Could you also add an abbreviation for deployments? I propose 'dep'.\n\ncc @kargakis @janetkuo @mqliang \n\nexpandResourceShortcut:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/kubectl.go#L97\n\nReally, we should autogenerate this documentation and that map from the same source. We can do that later, but how about adding comments to both places? I guess here it would have to go before or after this string.\n",
        "createdAt" : "2016-02-18T22:59:56Z",
        "updatedAt" : "2016-02-23T19:23:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9ccdd275-3e13-4c66-985c-a03e1bf65225",
        "parentId" : "a6056921-74c2-4d79-b741-8f5aaad0fd29",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@bgrant0607 Done. PTAL.\n",
        "createdAt" : "2016-02-18T23:26:38Z",
        "updatedAt" : "2016-02-23T19:23:08Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "781480d7fed6b50eb9527badf79aef71313bf563",
    "line" : null,
    "diffHunk" : "@@ -1,1 +117,121 @@   * componentstatuses (aka 'cs')\n   * daemonsets (aka 'ds')\n   * deployments\n   * events (aka 'ev')\n   * endpoints (aka 'ep')"
  },
  {
    "id" : "52ac04e8-0101-4d99-87db-3e4326eeb5b3",
    "prId" : 18346,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a15cd74b-e0ab-4e6c-9747-de3ed0611c7d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Looks like this list was previously in priority (how likely are you to want to look at these) order.  I'm inclined to keep it in that order unless alphabetical was spec'ed somewhere else.\n",
        "createdAt" : "2015-12-08T12:48:19Z",
        "updatedAt" : "2015-12-10T15:04:52Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a762f6e1-5160-4504-a680-982c17c18939",
        "parentId" : "a15cd74b-e0ab-4e6c-9747-de3ed0611c7d",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I found it easier to sync, especially that we have those in a couple of places. \n",
        "createdAt" : "2015-12-08T16:56:01Z",
        "updatedAt" : "2015-12-10T15:04:52Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "55a61f51-d363-45c7-a0cc-13e22ac17075",
        "parentId" : "a15cd74b-e0ab-4e6c-9747-de3ed0611c7d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Looks like this list was previously in priority (how likely are you to want to look at these) order. I'm inclined to keep it in that order unless alphabetical was spec'ed somewhere else.\n\n@kubernetes/kubectl does anyone else have an opinion on alphabetical versus most commonly used?  I don't feel very strongly.\n",
        "createdAt" : "2015-12-09T12:59:26Z",
        "updatedAt" : "2015-12-10T15:04:52Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "91fcdcd8-2158-40bd-8da7-5a19d8f9615f",
        "parentId" : "a15cd74b-e0ab-4e6c-9747-de3ed0611c7d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I would vote for most commonly used... But I don't really mind alphabetical\n",
        "createdAt" : "2015-12-09T13:44:30Z",
        "updatedAt" : "2015-12-10T15:04:52Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "1107fb9b-7416-4425-a350-e7ff31a7eecc",
        "parentId" : "a15cd74b-e0ab-4e6c-9747-de3ed0611c7d",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I vote for alphabetical, it's easier to find names.\n",
        "createdAt" : "2015-12-09T15:21:54Z",
        "updatedAt" : "2015-12-10T15:04:52Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "34c72552a5954ae893dc9ff7d55182412b400e37",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@`\n\tvalid_resources = `Valid resource types include:\n   * componentstatuses (aka 'cs')\n   * events (aka 'ev')\n   * endpoints (aka 'ep')"
  },
  {
    "id" : "0561863a-72ba-42ce-a780-36cfeb37b6e7",
    "prId" : 5481,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5be79447-681d-4e38-9227-d113b110c76f",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "This is causing a nil dereference in `hack/test-cmd.sh`. I think the issue is that the validate flag is  added to the flagset of each command but not to `factory.flags`. Can probably fix by adding in [BindFlags](https://github.com/TamerTas/kubernetes/blob/issue%234470/pkg/kubectl/cmd/cmd.go#L162).\n",
        "createdAt" : "2015-03-15T23:08:45Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "5d15491d-689e-4033-b11c-d30f67bda731",
        "parentId" : "5be79447-681d-4e38-9227-d113b110c76f",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "I don't know if that will work, as that would redeclare the same set of flags twice; can't remember whether that will overwrite or panic. I would suggest moving the declaration of these flags\n\n```\nflags.BoolVar(&f.clients.matchVersion, FlagMatchBinaryVersion, false, \"Require server version to match client version\")\nflags.Bool(\"validate\", false, \"If true, use a schema to validate the input before sending it\")\n```\n\nfrom [f.BindFlags](https://github.com/TamerTas/kubernetes/blob/issue%234470/pkg/kubectl/cmd/cmd.go#L180) to [NewFactory](https://github.com/TamerTas/kubernetes/blob/issue%234470/pkg/kubectl/cmd/cmd.go#L81). That way they are added to `f.flags` and any command flagsets passed to `f.BindFlags`.\n",
        "createdAt" : "2015-03-16T00:04:32Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "203f0c8a-6f38-40fe-9e11-901cee75549a",
        "parentId" : "5be79447-681d-4e38-9227-d113b110c76f",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "That's what I thought at first. But, wouldn't that be a bit confusing? setting a flag earlier so it doesn't cause a bug few calls later. It's a global flag design issue though.\n",
        "createdAt" : "2015-03-16T00:09:35Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "d3e4075e-bd1f-4286-baf9-57a909de9f46",
        "parentId" : "5be79447-681d-4e38-9227-d113b110c76f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't know that every command needs to validate.  Get, describe, and a few others definitely do not.\n\n> On Mar 15, 2015, at 7:09 PM, Jeff Lowdermilk notifications@github.com wrote:\n> \n> In pkg/kubectl/cmd/cmd.go:\n> \n> > ```\n> >         client, err := clients.ClientForVersion(mapping.APIVersion)\n> >         if err != nil {\n> >             return nil, err\n> >         }\n> >         return kubectl.ReaperFor(mapping.Kind, client)\n> >     },\n> > ```\n> > -       Validator: func(cmd *cobra.Command) (validation.Schema, error) {\n> > -           if cmdutil.GetFlagBool(cmd, \"validate\") {\n> > -       Validator: func() (validation.Schema, error) {\n> > -           if flags.Lookup(\"validate\").Value.String() == \"true\" {\n> >   This is causing a nil dereference in hack/test-cmd.sh. I think the issue is that the validate flag is added to the flagset of each command but not to factory.flags. Can probably fix by adding in BindFlags.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-16T00:09:55Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "648b45e7-5207-400d-b1ec-28a31681cb70",
        "parentId" : "5be79447-681d-4e38-9227-d113b110c76f",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "@TamerTas, it's also reasonable to keep global flag declarations in bind flags and just declare them into `f.flags` before they are added to the passed-in flagset.\n\n> I don't know that every command needs to validate.  Get, describe, and a few others definitely do not.\n\nI agree, but changing global flag behavior seemed out of scope for this PR.\n",
        "createdAt" : "2015-03-16T00:48:26Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "6696554e-04c5-4212-a26b-e7d95e88b991",
        "parentId" : "5be79447-681d-4e38-9227-d113b110c76f",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "@jlowdermilk I just added a `nil` reference check before validation flag dereference.\n",
        "createdAt" : "2015-03-16T01:04:06Z",
        "updatedAt" : "2015-03-18T12:24:13Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b39e31d8a3658f5c3d1bfc3df75b043f12f54258",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\t},\n\t\tValidator: func() (validation.Schema, error) {\n\t\t\tif flags.Lookup(\"validate\").Value.String() == \"true\" {\n\t\t\t\tclient, err := clients.ClientForVersion(\"\")\n\t\t\t\tif err != nil {"
  },
  {
    "id" : "586c3da7-4385-4426-8999-12fc2211c693",
    "prId" : 2517,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "042fbf36-0656-48cb-8893-2465199e2383",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Server should be able to turn off swagger (security risk?  Hosting choice?). Client should be able to work against a server where swagger is disabled (404 / 401 / others).  Is client validation that important beyond what we already have?\n\nAfter all, we have mostly full server validation - what does this add on top?\n",
        "createdAt" : "2014-11-24T00:47:56Z",
        "updatedAt" : "2014-11-25T06:25:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "833a8f09-0bf5-4ab2-8647-d123d2946d9f",
        "parentId" : "042fbf36-0656-48cb-8893-2465199e2383",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "The trouble is in Go's Javascript parser.  It silently drops things it doesn't understand.  So if you have:\n\n``` go\ntype Foo struct {\n  Bar []string\n}\n```\n\nAnd you parse:\n\n```\n{\n  \"bar\": \"baz\"\n}\n```\n\n(note the string instead of the array)\n\nThe parser just blindly drops the field and doesn't return an error.\n\nSo we have to do this checking client side, since by the time it gets to the server the data is lost, and the user is unaware.\n",
        "createdAt" : "2014-11-24T16:47:19Z",
        "updatedAt" : "2014-11-25T06:25:18Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf6d828005aaefb11a65d7ba8e971137915aa86",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +238,242 @@\t\treturn err\n\t}\n\tschemaData, err := c.c.RESTClient.Get().\n\t\tAbsPath(\"/swaggerapi/api\").\n\t\tPath(version)."
  },
  {
    "id" : "7e3d96e0-a59b-4a9a-9ac9-55bec84f9c0c",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f7ff07d-8620-402e-a62f-80db711715b7",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This feels like a leaky abstraction but I don't see a way around it for now.\n",
        "createdAt" : "2014-11-18T19:30:36Z",
        "updatedAt" : "2014-11-26T14:46:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +81,85 @@\t}\n\n\tf.ClientBuilder.BindFlags(cmds.PersistentFlags())\n\n\t// Globally persistent flags across all subcommands."
  },
  {
    "id" : "3b73cc23-d265-4c1e-b426-26d5bf7ce29e",
    "prId" : 2340,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db91bc41-6b0e-43c1-b369-44978e5d410d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If you prompted the user, got valid auth information, and then failed to write the auth file, it is still possible to continue running correctly.  I would have a test that looks more like this:\n\nif (err != nil) && (authInfo == nil){\n    fatal\n}\nif (err != nil){\n   glog.Errorf\n}\n",
        "createdAt" : "2014-11-13T15:27:58Z",
        "updatedAt" : "2014-11-14T18:36:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "18d40f43-c57f-43cd-8313-bdfc0ea2d4a4",
        "parentId" : "db91bc41-6b0e-43c1-b369-44978e5d410d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should do fatalf less - it's not testable.  I'm going to go through kubectl soon and tear it out.\n\n> On Nov 13, 2014, at 10:28 AM, David Eads notifications@github.com wrote:\n> \n> In pkg/kubectl/cmd/cmd.go:\n> \n> > @@ -177,7 +177,7 @@ func GetKubeConfig(cmd *cobra.Command) *client.Config {\n> >         // command line). Override them with the command line parameters, if\n> >         // provided.\n> >         authPath := GetFlagString(cmd, \"auth-path\")\n> > -       authInfo, err := kubectl.LoadAuthInfo(authPath, os.Stdin)\n> > -       authInfo, err := kubectl.LoadClientAuthInfoOrPrompt(authPath, os.Stdin)\n> >       if err != nil {\n> >           glog.Fatalf(\"Error loading auth: %v\", err)\n> >   If you prompted the user, got valid auth information, and then failed to write the auth file, it is still possible to continue running correctly. I would have a test that looks more like this:\n> \n> if (err != nil) && (authInfo == nil){\n> fatal\n> }\n> if (err != nil){\n> glog.Errorf\n> }\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-13T15:53:51Z",
        "updatedAt" : "2014-11-14T18:36:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "988c2dad-e431-4f47-ba16-b87ba0583c78",
        "parentId" : "db91bc41-6b0e-43c1-b369-44978e5d410d",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I prefer to split my work into PRs that refactor but don't change behavior, vs PRs that do change behavior.  This  is the former type.   So, I've made a TODO. \n",
        "createdAt" : "2014-11-13T16:46:03Z",
        "updatedAt" : "2014-11-14T18:36:36Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "714e45d9-2eab-4fa4-96ba-0b9c1072544c",
        "parentId" : "db91bc41-6b0e-43c1-b369-44978e5d410d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's fine, just making you aware of that upcoming change.\n",
        "createdAt" : "2014-11-13T16:54:53Z",
        "updatedAt" : "2014-11-14T18:36:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0727219c832373f06d6b9fd8f900285724a822c4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\t// we still got a user/pass from prompting.\n\t\tif err != nil {\n\t\t\tglog.Fatalf(\"Error loading auth: %v\", err)\n\t\t}\n"
  }
]