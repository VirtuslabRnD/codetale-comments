[
  {
    "id" : "0d1bdfd0-9397-4554-9fb0-0f7d944f2e59",
    "prId" : 72276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72276#pullrequestreview-190384024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6c989b8-d284-4ee8-87a5-fc030063e2ad",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "do we really need the distinction between transformed and containerFound?",
        "createdAt" : "2019-01-08T19:08:41Z",
        "updatedAt" : "2019-01-10T16:59:09Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "f72072cd60a20bd15807367f58b7d97c88450fed",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +285,289 @@\tfor i, c := range containers {\n\t\tif c.Name == containerName || containerName == \"*\" {\n\t\t\tcontainerFound = true\n\t\t\tcontainers[i].Image = image\n\t\t}"
  },
  {
    "id" : "d86ec91e-b54e-445d-97ae-bb9aaa5feb32",
    "prId" : 72276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72276#pullrequestreview-191327735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9584738-64f7-46bf-adf0-e4c2374ab566",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "That is much simpler :-)",
        "createdAt" : "2019-01-10T17:33:42Z",
        "updatedAt" : "2019-01-10T17:41:49Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "f72072cd60a20bd15807367f58b7d97c88450fed",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +280,284 @@}\n\nfunc setImage(containers []v1.Container, containerName string, image string) bool {\n\tcontainerFound := false\n\t// Find the container to update, and update its image"
  },
  {
    "id" : "d8df0d49-b8b6-4fdf-8778-8aad76ea8219",
    "prId" : 72276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72276#pullrequestreview-193567929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16cc59a3-d690-4b88-ac5c-a7e73fe984ff",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Would you mind just removing the `ResolveImage` hack which looks like over-engineering. No-one seem to be overriding this, and it's just an identity function anyway, it can't fail, and this still complicates this code for no reason.",
        "createdAt" : "2019-01-10T17:37:34Z",
        "updatedAt" : "2019-01-10T17:41:49Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "39a2ac2d-cdc3-4dbe-bc4e-d960af26d8a1",
        "parentId" : "16cc59a3-d690-4b88-ac5c-a7e73fe984ff",
        "authorId" : "e61effd9-111f-4f2e-a0b1-41470f70d7c3",
        "body" : "In this file 'ResolveImage' not doing anything, just returning image name. But  'ResolveImage' functionality added in this PR https://github.com/kubernetes/kubernetes/pull/33083 . I thought it may be used in some thirdparty code which depends on kubectl package.  Is it ok if it is removed from here?",
        "createdAt" : "2019-01-10T18:04:47Z",
        "updatedAt" : "2019-01-10T18:04:47Z",
        "lastEditedBy" : "e61effd9-111f-4f2e-a0b1-41470f70d7c3",
        "tags" : [
        ]
      },
      {
        "id" : "759a4853-1c65-414d-a427-00c3f34a6a92",
        "parentId" : "16cc59a3-d690-4b88-ac5c-a7e73fe984ff",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I'd prefer we leave the `ResolveImage` as is, it does allow nicely switching implementation for dependents. ",
        "createdAt" : "2019-01-17T11:04:20Z",
        "updatedAt" : "2019-01-17T11:04:20Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f72072cd60a20bd15807367f58b7d97c88450fed",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +219,223 @@\t\t_, err := o.UpdatePodSpecForObject(obj, func(spec *v1.PodSpec) error {\n\t\t\tfor name, image := range o.ContainerImages {\n\t\t\t\tresolvedImageName, err := o.ResolveImage(image)\n\t\t\t\tif err != nil {\n\t\t\t\t\tallErrs = append(allErrs, fmt.Errorf(\"error: unable to resolve image %q for container %q: %v\", image, name, err))"
  },
  {
    "id" : "f9ddd382-8502-41e2-b4b4-b88c6be736f2",
    "prId" : 36071,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36071#pullrequestreview-12119172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c55f423-40bb-485a-9895-5a872c738364",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "At some point, we need a way to get a printerfunc in complete that doesn't require tons of gorp.",
        "createdAt" : "2016-12-08T21:16:12Z",
        "updatedAt" : "2016-12-08T21:16:12Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6eaab223f2d83126089ef8944c5deaf795aaf11b",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +230,234 @@\t\t\treturn o.PrintObject(o.Cmd, o.Mapper, obj, o.Out)\n\t\t}\n\t\tcmdutil.PrintSuccess(o.Mapper, o.ShortOutput, o.Out, info.Mapping.Resource, info.Name, o.DryRun, \"image updated\")\n\t}\n\treturn utilerrors.NewAggregate(allErrs)"
  },
  {
    "id" : "9c7685ca-afa4-4a64-973f-b0303d30a437",
    "prId" : 33083,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33083#pullrequestreview-12017066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd0ef841-0691-4d46-93c8-161d4e5eed0f",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "If there's error returned in '*' case (`len(resolved)` will still be `0`) we'll loop again and append another error for the same image? Seems redundant. Why not move this call to `ResolveImage` outside of this spec.Containers for loop?\n",
        "createdAt" : "2016-10-14T18:34:50Z",
        "updatedAt" : "2016-12-09T11:43:18Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "239c294e-f85f-414c-a15a-79d6a8a9e493",
        "parentId" : "bd0ef841-0691-4d46-93c8-161d4e5eed0f",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@janetkuo seems like @mfojtik  addressed your comment, can you accept the changes and have the PR move forward? Thanks.",
        "createdAt" : "2016-12-08T13:02:27Z",
        "updatedAt" : "2016-12-09T11:43:18Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "737b32772ea1a758d73047b79d88775aac282824",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +185,189 @@\t\t\t\t\t\tif len(resolved) == 0 {\n\t\t\t\t\t\t\tif resolved, err = o.ResolveImage(image); err != nil {\n\t\t\t\t\t\t\t\tallErrs = append(allErrs, fmt.Errorf(\"error: unable to resolve image %q for container %q: %v\", image, name, err))\n\t\t\t\t\t\t\t\t// Do not loop again if the image resolving failed for wildcard case as we\n\t\t\t\t\t\t\t\t// will report the same error again for the next container."
  }
]