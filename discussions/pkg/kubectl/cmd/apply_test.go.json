[
  {
    "id" : "afc27c1e-727b-4a97-bc5d-e46286fc6de1",
    "prId" : 54046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54046#pullrequestreview-70419920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fa24891-7bbe-474f-9960-df3e5e1845c7",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This setup looks like copy-pasted code, please extract to a helper function.",
        "createdAt" : "2017-10-19T00:13:24Z",
        "updatedAt" : "2017-10-28T01:16:35Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "105f38b9-0615-4f34-9d70-00e3d55e166f",
        "parentId" : "8fa24891-7bbe-474f-9960-df3e5e1845c7",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "A little different.",
        "createdAt" : "2017-10-19T03:13:56Z",
        "updatedAt" : "2017-10-28T01:16:35Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "4cc3a174-1219-46f5-8a7d-c2f78034a07c",
        "parentId" : "8fa24891-7bbe-474f-9960-df3e5e1845c7",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "ok",
        "createdAt" : "2017-10-19T04:21:44Z",
        "updatedAt" : "2017-10-28T01:16:35Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5c56dcf359f545bd6e602707c3a4e9de84a1524",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +577,581 @@\t\t}),\n\t}\n\ttf.Namespace = \"test\"\n\tbuf := bytes.NewBuffer([]byte{})\n\terrBuf := bytes.NewBuffer([]byte{})"
  },
  {
    "id" : "99ff6bce-49e3-4f50-95c7-f5a0c3f2bb2c",
    "prId" : 41699,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41699#pullrequestreview-22652795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca3e0d22-07a7-406c-89e6-188e9acd3486",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "How about s/TestApplyObjectOutput/TestApplyObjectUpdateOutput",
        "createdAt" : "2017-02-19T03:12:00Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "87754996-f2a7-4316-92c4-6c6d55c8fb6b",
        "parentId" : "ca3e0d22-07a7-406c-89e6-188e9acd3486",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think this is fine",
        "createdAt" : "2017-02-19T06:11:44Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4592c47ad438676c3e856a4bfdb7949b08c284d9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +412,416 @@}\n\nfunc TestApplyObjectOutput(t *testing.T) {\n\tinitTestErrorHandler(t)\n\tnameRC, currentRC := readAndAnnotateReplicationController(t, filenameRC)"
  },
  {
    "id" : "a5ec3e6e-b4ab-4bb0-9f42-eb0403dec4d4",
    "prId" : 41699,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41699#pullrequestreview-22655160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9f30971-b746-4b60-b0d6-914a257d6e80",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Here you are testing the case of `adding` a new label, how about update this case a bit by `updating` the label to reflect the real problem that want to fix?\r\n\r\nSuch as old label\r\n```\r\nname: oldLabel\r\n```\r\n\r\nNew Label:\r\n```\r\nname: newLabel\r\n```\r\n\r\nThen the expect would be the label `name` was updated from `oldLabel` to `newLabel`.\r\n",
        "createdAt" : "2017-02-19T03:17:06Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "cbb9a240-84bf-4669-8f0d-787d0e2c0598",
        "parentId" : "c9f30971-b746-4b60-b0d6-914a257d6e80",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we already have tests that verify the value is updated correctly on the server. the referenced issue was that the value printed by `kubectl apply` used the original object fetched from the server, not the patched object. this testcase is sufficient to ensure the object returned by the server from the patch operation is the one output",
        "createdAt" : "2017-02-19T06:11:23Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f81d62b7-4ceb-49a5-8f61-9c5d5b2a145f",
        "parentId" : "c9f30971-b746-4b60-b0d6-914a257d6e80",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Yes, but still a bit different: this test case can ensure the new added labels can be printed out, but  the related issue is the rc has a label with value a and then update the label with value b, we expected the value b would be print out?",
        "createdAt" : "2017-02-19T08:18:58Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "a7863d13-514e-483f-8538-12ce6681f2a5",
        "parentId" : "c9f30971-b746-4b60-b0d6-914a257d6e80",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "@gyliu513 hi, thanks for comments, but I think this is testing update resources, checkout code [here](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/apply.go#L246), if we testing create a new resource, the return resp should be return `&http.Response{StatusCode: 404...` like [this](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/apply_test.go#L354).  CMIIW",
        "createdAt" : "2017-02-19T08:41:49Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      },
      {
        "id" : "482568d0-45f1-4ab6-9490-0be2debb7461",
        "parentId" : "c9f30971-b746-4b60-b0d6-914a257d6e80",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "ah, I see, thanks @shiywang @liggitt , please ignore this",
        "createdAt" : "2017-02-19T09:00:57Z",
        "updatedAt" : "2017-02-27T14:30:49Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4592c47ad438676c3e856a4bfdb7949b08c284d9",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +426,430 @@\t\tpostPatchLabels = map[string]string{}\n\t}\n\tpostPatchLabels[\"post-patch\"] = \"value\"\n\tpostPatchObj.SetLabels(postPatchLabels)\n\tpostPatchData, err := json.Marshal(postPatchObj)"
  },
  {
    "id" : "d6f4dfb5-be67-4285-af0a-9afe44dec0ed",
    "prId" : 41146,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41146#pullrequestreview-22006446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa7a91e4-5147-4e90-8082-e8b7d86400e5",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "add a test for when no resources match",
        "createdAt" : "2017-02-15T01:17:36Z",
        "updatedAt" : "2017-02-21T12:20:44Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "1b0d1946-f8e8-4486-82a0-ad8c8a88f2cb",
        "parentId" : "fa7a91e4-5147-4e90-8082-e8b7d86400e5",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "updated",
        "createdAt" : "2017-02-15T14:09:39Z",
        "updatedAt" : "2017-02-21T12:20:44Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "557c18694a2ccd6b70e26e9be6deb1785a68d36a",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\t},\n\t\t{\n\t\t\tname:         \"view resource without annotations\",\n\t\t\tfilePath:     \"\",\n\t\t\toutputFormat: \"\","
  },
  {
    "id" : "593d86f3-c223-4486-b5dc-c82d03e3b8d9",
    "prId" : 26557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54c263d0-765f-441e-9413-8328d8df73af",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "nit:  Would you also check that the cmd calls this twice and applies the patch when retrying the read.  e.g. return a slightly different currentRC the second time this is called, and verify in the PATCH that the second read was used for the patch.\n\nLet me know if this is excessively complicated to do.\n",
        "createdAt" : "2016-06-08T21:57:46Z",
        "updatedAt" : "2016-06-09T04:20:37Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "f853f993-0603-461b-a2a7-58d01cbc8958",
        "parentId" : "54c263d0-765f-441e-9413-8328d8df73af",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "I think about this for a while, it's a little bit complicated to do this, so I will keep this for now.\n",
        "createdAt" : "2016-06-09T04:03:15Z",
        "updatedAt" : "2016-06-09T04:20:37Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "69bcdc20ffe93d0f4b285570ebf12752276b86a3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +233,237 @@\t\t\tcase p == pathRC && m == \"GET\":\n\t\t\t\tgetCount++\n\t\t\t\tbodyRC := ioutil.NopCloser(bytes.NewReader(currentRC))\n\t\t\t\treturn &http.Response{StatusCode: 200, Header: defaultHeader(), Body: bodyRC}, nil\n\t\t\tcase p == pathRC && m == \"PATCH\":"
  },
  {
    "id" : "43e1a762-f324-4e53-b009-bf92b47f3008",
    "prId" : 26557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6f749ca-cebf-4188-b4fe-29ab20cc144e",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Use a Fake clock or set the backoff to 0 so the test doesn't hang.\n",
        "createdAt" : "2016-06-08T22:12:32Z",
        "updatedAt" : "2016-06-09T04:20:37Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "69bcdc20ffe93d0f4b285570ebf12752276b86a3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +226,230 @@\tgetCount := 0\n\tf, tf, codec := NewAPIFactory()\n\ttf.Printer = &testPrinter{}\n\ttf.Client = &fake.RESTClient{\n\t\tCodec: codec,"
  },
  {
    "id" : "7ec3c2b5-b85d-4cfe-a205-8fd3bde74cb9",
    "prId" : 17074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f55c811c-8d12-4700-b7d2-d8faed0a6f8d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why do we need to change this?\n",
        "createdAt" : "2015-11-11T19:29:03Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "abd8d397-46a4-4376-b8c8-32bc5f8243a6",
        "parentId" : "f55c811c-8d12-4700-b7d2-d8faed0a6f8d",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Because this now implements a [`http.RoundTripper`](https://golang.org/pkg/net/http/#RoundTripper) interface. The documentation states that you can't return both a response and an error. This was causing a test failure.\n\nAlso, the documentation for [`http.Response`](https://golang.org/pkg/net/http/#Response) guarantees that the body is non-nil. This was causing a panic because our client relies on this being non-nil.\n",
        "createdAt" : "2015-11-11T19:38:56Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "edfb6ce1-7ce4-4e76-83a2-07a42d73e632",
        "parentId" : "f55c811c-8d12-4700-b7d2-d8faed0a6f8d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ok. Just to confirm my understanding, the response returned by the APIServer will encode the error in the Body, so this problem won't occur, right?\n",
        "createdAt" : "2015-11-11T19:55:02Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f52b926f-09ed-49ce-8fab-415baf5d80fd",
        "parentId" : "f55c811c-8d12-4700-b7d2-d8faed0a6f8d",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Yea. If we wanted to simulate that here, we would populate Body with what APIServer would normally encode.\n",
        "createdAt" : "2015-11-11T19:57:34Z",
        "updatedAt" : "2015-11-11T19:57:34Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "eacf65ddce26ad39dfbec682d40ce31e5c675eeb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +220,224 @@\t\t\tswitch p, m := req.URL.Path, req.Method; {\n\t\t\tcase p == pathNameRC && m == \"GET\":\n\t\t\t\treturn &http.Response{StatusCode: 404, Body: ioutil.NopCloser(bytes.NewReader(nil))}, nil\n\t\t\tcase p == pathRC && m == \"POST\":\n\t\t\t\tbodyRC := ioutil.NopCloser(bytes.NewReader(currentRC))"
  }
]