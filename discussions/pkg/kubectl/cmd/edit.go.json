[
  {
    "id" : "86cc3c9f-1c68-4fb2-9c9d-785cf4f8cc82",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-57657912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Have you add the flag to edit command?",
        "createdAt" : "2017-08-17T06:39:22Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "313b4b15-84a9-4846-8fdf-b5c2482289fe",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@mengqiy No. This is the side effect since `options.Complete` has been changed. We've not planed adding `include-uninitialized` flag to `kubectl edit`. @caesarxuchao @ahmetb Correct me if I'm wrong.\r\n\r\nI've added below codes to method `Complete(...)`, so that it will not break current `kubectl edit`.\r\n\r\n```Go\r\nif cmd.Flags().Lookup(\"include-uninitialized\") != nil {\r\n        includeUninitialized = cmdutil.GetFlagBool(cmd, \"include-uninitialized\")\r\n}\r\n```",
        "createdAt" : "2017-08-17T08:00:29Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "2db58eea-307e-4551-8faf-9adca4894379",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think `include-uninitialized` should be plumbed to every commands. `kubectl edit` user should be able to edit the uninitialized objects if they specify `--include-uninitialized=true`.",
        "createdAt" : "2017-08-17T17:37:59Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "a8921622-4273-4642-b8c8-d1b76fcbe5cf",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "(to clarify again, my understanding is that they should NOT need --include-uninitialized, if they're referring to object by name, i.e. `kubectl edit pod/foo`)",
        "createdAt" : "2017-08-17T17:53:00Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      },
      {
        "id" : "e893b0e5-0998-4341-8c40-7f1e30a2a3fc",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Yes. If the name of the object is provided, kubectl always show it.",
        "createdAt" : "2017-08-17T18:01:02Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "3e88f1b2-97d0-4ab2-b20a-be58cac446c3",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "> kubectl edit <resource>, by default don't include uninitialized objects, unless user explicitly sets --include-uninitialized=true.\r\n\r\n@dixudx I think we need that flag per https://github.com/kubernetes/kubernetes/issues/49035#issuecomment-321615737. Did I miss some something here?",
        "createdAt" : "2017-08-18T01:38:25Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "7647297d-f34a-4a55-ad21-f1026f1417ca",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@mengqiy You're right. I forgot to add here. Sorry for that. Will add it later when finishing the tests.",
        "createdAt" : "2017-08-18T08:54:37Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "a7b45eec-b988-46b6-86f1-8c8e80404d2b",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "> I think include-uninitialized should be plumbed to every commands.\r\n\r\n@caesarxuchao Currently we've only enabled `--include-uninitialized` in a few commands. To make it a global flag, we may need to make rules for every subcommand.\r\n",
        "createdAt" : "2017-08-18T08:58:52Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "614d3ec2-abd8-4382-9b4d-5c9450f47970",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@dixudx could you give me some examples of the subcommands that don't support `--include-uninitialized`?",
        "createdAt" : "2017-08-21T22:14:50Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "06d31929-a101-4da3-9d2d-fceda431afbd",
        "parentId" : "e3891e82-8242-40f3-8018-ec66bea9b806",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@caesarxuchao My mistake. Seems we have already supported them well. After a deep search, I found we only need to enable `--include-uninitialized` for subcommands that would request a group of resources. For a single specific resource, there is no need.",
        "createdAt" : "2017-08-22T03:34:25Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +94,98 @@\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\toptions.ChangeCause = f.Command(cmd, false)\n\t\t\tif err := options.Complete(f, out, errOut, args, cmd); err != nil {\n\t\t\t\tcmdutil.CheckErr(err)\n\t\t\t}"
  },
  {
    "id" : "1d8a0de8-1f1e-4de2-a789-8cd8b7eda9de",
    "prId" : 38445,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38445#pullrequestreview-18405588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e52d2cf4-657c-4ca5-a4be-8cf4b43fd3a8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this breaks edit for all other resources",
        "createdAt" : "2017-01-25T14:13:55Z",
        "updatedAt" : "2017-01-25T14:13:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "315c5c19-80d2-4374-89ce-d804e93a9826",
        "parentId" : "e52d2cf4-657c-4ca5-a4be-8cf4b43fd3a8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "```\r\n$ kubectl edit serviceaccount default\r\nError from server (NotFound): configmaps \"serviceaccount\" not found\r\n```",
        "createdAt" : "2017-01-25T14:14:27Z",
        "updatedAt" : "2017-01-25T14:14:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "31eca372c9a228ca825c2dbc93a7880a8b06946f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +101,105 @@\t\tExample: fmt.Sprintf(editExample),\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\targs = append([]string{\"configmap\"}, args...)\n\t\t\terr := RunEdit(f, out, errOut, cmd, args, options)\n\t\t\tcmdutil.CheckErr(err)"
  },
  {
    "id" : "31d59607-dabe-4e90-8309-27c844bb3ac2",
    "prId" : 33250,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33250#pullrequestreview-4351854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8569d625-902b-426b-aaab-9268c5552ab7",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What if we have more commands using `edit` in the future? We may need to update all `if`s and it's easy to miss one.\n",
        "createdAt" : "2016-10-14T21:49:39Z",
        "updatedAt" : "2016-10-24T16:57:04Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "dfb4440b-6bd4-4419-a6c4-d5e151d945b1",
        "parentId" : "8569d625-902b-426b-aaab-9268c5552ab7",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Maybe using `switch case`. Any suggestions?\n",
        "createdAt" : "2016-10-14T22:01:02Z",
        "updatedAt" : "2016-10-24T16:57:04Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c641834bb3a31ee45be77bbe5609e640e0a7016d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t\t\terr = visitToPatch(originalObj, updates, mapper, resourceMapper, encoder, out, errOut, defaultVersion, &results, file)\n\t\t\tcase EditBeforeCreateMode:\n\t\t\t\terr = visitToCreate(updates, mapper, resourceMapper, out, errOut, defaultVersion, &results, file)\n\t\t\tdefault:\n\t\t\t\terr = fmt.Errorf(\"Not supported edit mode %q\", editMode)"
  },
  {
    "id" : "412296b6-a1d2-4b6b-9216-a4a6c836a3c4",
    "prId" : 33250,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33250#pullrequestreview-5339461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a3d9b1e-fe66-45fd-9756-e184ab6efa7b",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "suggest something like \n\n``` go\ntype EditMode string \n\nconst (\n    NormalEditMode       EditMode = \"normal_mode\"\n    EditBeforeCreateMode EditMode = \"edit_before_create_mode\"\n)\n```\n",
        "createdAt" : "2016-10-22T00:49:56Z",
        "updatedAt" : "2016-10-24T16:57:04Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c641834bb3a31ee45be77bbe5609e640e0a7016d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +519,523 @@\tNormalEditMode       EditMode = \"normal_mode\"\n\tEditBeforeCreateMode EditMode = \"edit_before_create_mode\"\n)\n\n// editReason preserves a message about the reason this file must be edited again"
  },
  {
    "id" : "1147ca7f-1c7a-4344-b430-bc5e33819bdf",
    "prId" : 22410,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "405856c9-fd1c-4c90-935d-d1a3ad7cd02d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This description can't actually work.  I mean not in the general sense.  Say I do `kubectl get foo,bar.something.io`.  I need to specify multiple different `--output-version` values.\n",
        "createdAt" : "2016-03-03T12:56:22Z",
        "updatedAt" : "2016-03-11T18:13:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "be70a432-c9f0-460a-a923-b6b969695751",
        "parentId" : "405856c9-fd1c-4c90-935d-d1a3ad7cd02d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That was a preexisting problem.\n\n(@deads2k, we need to have an argument over VC about this one! But not today.) \n",
        "createdAt" : "2016-03-11T17:58:09Z",
        "updatedAt" : "2016-03-11T18:13:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "593b78f9258cf728bf676795e6d3823aa35fd487",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +95,99 @@\tkubectl.AddJsonFilenameFlag(cmd, &filenames, usage)\n\tcmd.Flags().StringP(\"output\", \"o\", \"yaml\", \"Output format. One of: yaml|json.\")\n\tcmd.Flags().String(\"output-version\", \"\", \"Output the formatted object with the given group version (for ex: 'extensions/v1beta1').\")\n\tcmd.Flags().Bool(\"windows-line-endings\", gruntime.GOOS == \"windows\", \"Use Windows line-endings (default Unix line-endings)\")\n\tcmdutil.AddApplyAnnotationFlags(cmd)"
  },
  {
    "id" : "38cf17c2-3eed-4b2b-b880-441ec0a35280",
    "prId" : 20918,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd5743b3-15ee-4cc4-a034-a591b1bf3431",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "welcome\n",
        "createdAt" : "2016-05-14T15:59:33Z",
        "updatedAt" : "2016-05-16T15:02:12Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0adc0ab5b2d40b383db3a37596cae83929e4cca3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +24,28 @@\t\"os\"\n\t\"path/filepath\"\n\t\"reflect\"\n\tgruntime \"runtime\"\n\t\"strings\""
  },
  {
    "id" : "03c7a1d3-baac-4811-89df-53feac4e0f36",
    "prId" : 20918,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e0ffbb-b0ed-4e64-a898-36338d1d1bac",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Can a list have objects from different namespaces?\n",
        "createdAt" : "2016-05-14T16:08:59Z",
        "updatedAt" : "2016-05-16T15:02:12Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "c57323b1-e688-4c0a-9f5f-0c6359d8045e",
        "parentId" : "11e0ffbb-b0ed-4e64-a898-36338d1d1bac",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can a list have objects from different namespaces?\n\nMaybe?  I don't think it should be a go-to and this is cleaner than a precondition check on an optional field for the moment.\n",
        "createdAt" : "2016-05-14T23:32:21Z",
        "updatedAt" : "2016-05-16T15:02:12Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "0adc0ab5b2d40b383db3a37596cae83929e4cca3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +285,289 @@\t\tnamespaceVisitor := resource.NewFlattenListVisitor(updates, resourceMapper)\n\t\t// need to make sure the original namespace wasn't changed while editing\n\t\tif err = namespaceVisitor.Visit(resource.RequireNamespace(cmdNamespace)); err != nil {\n\t\t\treturn preservedFile(err, file, errOut)\n\t\t}"
  },
  {
    "id" : "896d9804-c56d-4d43-8738-094941da727f",
    "prId" : 20481,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0b0bbe1-8c87-4c3c-be3f-c516bf066ebe",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "A TODO for a less hacky fix in the future?\n",
        "createdAt" : "2016-02-17T22:17:06Z",
        "updatedAt" : "2016-02-18T10:43:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "fccdf69c-3ae7-4051-afa6-9d61731d8ecf",
        "parentId" : "e0b0bbe1-8c87-4c3c-be3f-c516bf066ebe",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ok\n",
        "createdAt" : "2016-02-18T10:42:41Z",
        "updatedAt" : "2016-02-18T10:43:15Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4658396eb280ac2889cf1f8d82165bca9429e99",
    "line" : null,
    "diffHunk" : "@@ -1,1 +210,214 @@\t\t\t\t// time. The second case is more usual so we can probably live with it.\n\t\t\t\t// TODO: A less hacky fix would be welcome :)\n\t\t\t\tfmt.Fprintln(out, \"Edit cancelled, no valid changes were saved.\")\n\t\t\t\tcontinue outter\n\t\t\t}"
  },
  {
    "id" : "7ff751e8-1e3f-4302-901c-cf331a93766c",
    "prId" : 20481,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a5d8af-bfd4-43f3-b590-bd662fb046c9",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "How about \n\n``` go\nfor _, obj := range objs {\n```\n",
        "createdAt" : "2016-02-17T22:17:49Z",
        "updatedAt" : "2016-02-18T10:43:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "fb7f1599-5d69-453f-bff6-221f8ca3a6f8",
        "parentId" : "a9a5d8af-bfd4-43f3-b590-bd662fb046c9",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Ever since bugs like https://github.com/kubernetes/kubernetes/pull/18331 or https://github.com/kubernetes/kubernetes/pull/18321 I have stopped using this syntax when ranging over references:)\n",
        "createdAt" : "2016-02-18T10:35:35Z",
        "updatedAt" : "2016-02-18T10:43:15Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4658396eb280ac2889cf1f8d82165bca9429e99",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +171,175 @@outter:\n\tfor i := range objs {\n\t\tobj := objs[i]\n\t\t// some bookkeeping\n\t\tresults.header.flush()"
  },
  {
    "id" : "19b6dc1a-d63e-4f12-aad4-daae334085cf",
    "prId" : 16809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c40cbe-447e-47e7-8251-ca10eb7a550b",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@jackgr after updating annotations of \"updates\" (`Info` of the edited file), the config annotation is added to it successfully. However, as you can see, only its data, \"edited\", will be used to generate a \"patch\" (see https://github.com/janetkuo/kubernetes/blob/apply-annotation-optional/pkg/kubectl/cmd/edit.go#L244). Updating its Info doesn't change it. So the \"patch\" won't contain the config annotation we added earlier while we do Patch(), see https://github.com/janetkuo/kubernetes/blob/apply-annotation-optional/pkg/kubectl/cmd/edit.go#L264. \n",
        "createdAt" : "2015-11-06T00:04:44Z",
        "updatedAt" : "2015-11-06T23:09:08Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "ef3ded26-43f1-4af9-8239-d96bfcd94fdf",
        "parentId" : "85c40cbe-447e-47e7-8251-ca10eb7a550b",
        "authorId" : "8f7fe7a6-7bc9-4dfb-b9c0-a2f808baa9d1",
        "body" : "Thanks, @janetkuo.\n",
        "createdAt" : "2015-11-06T01:44:29Z",
        "updatedAt" : "2015-11-06T23:09:08Z",
        "lastEditedBy" : "8f7fe7a6-7bc9-4dfb-b9c0-a2f808baa9d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6a64820d7fe81b889561ad016f559d7a8bd7ad3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +223,227 @@\n\t\t\t// put configuration annotation in \"updates\"\n\t\t\tif err := kubectl.CreateOrUpdateAnnotation(cmdutil.GetFlagBool(cmd, cmdutil.ApplyAnnotationsFlag), updates); err != nil {\n\t\t\t\treturn preservedFile(err, file, out)\n\t\t\t}"
  },
  {
    "id" : "e0d40d6f-d0d4-4330-873a-08f6517769c6",
    "prId" : 15980,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7bce280-cf13-4e36-b71e-c286fd4400a4",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "When we edit a list of objects (`edited` is a `[]byte` type List data), `InfoForData` ignores the changes users made in each Item of the List, and therefore the changes are never patched when the users edit a list. So instead, I parse `infos` as []runtime.Object in L148 and the users now need to traverse/edit them one by one (not editing the List directly). \n@smarterclayton @deads2k Do you also see this in Openshift origin's edit?\n",
        "createdAt" : "2015-10-20T22:44:27Z",
        "updatedAt" : "2015-10-23T05:35:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "666f50ae-92c9-4137-9a4d-50cb1c466b80",
        "parentId" : "e7bce280-cf13-4e36-b71e-c286fd4400a4",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @smarterclayton @deads2k Do you also see this in Openshift origin's edit?\n\nI'm been able to edit lists with `oc edit`.  \n",
        "createdAt" : "2015-11-02T16:42:05Z",
        "updatedAt" : "2015-11-02T16:42:05Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5adda3d8159fe5360b91b340af4a8df6d89826d",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +207,211 @@\n\t\t\t// parse the edited file\n\t\t\tupdates, err := rmap.InfoForData(edited, \"edited-file\")\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"The edited file had a syntax error: %v\", err)"
  },
  {
    "id" : "669f5bca-9572-49d5-8eb1-07e43ccd3ca5",
    "prId" : 13604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e0e40f4-ba90-4580-b407-cfcb761c7f56",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Remove trailing `-` in `kubectl-edit-`?\n",
        "createdAt" : "2015-09-09T01:06:03Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "0b46264a-6c8f-418f-95dd-fab8a6b850bb",
        "parentId" : "1e0e40f4-ba90-4580-b407-cfcb761c7f56",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This creates a temp file named like `kubectl-edit-ke9cs.json`. I'd prefer adding trailing `-`. \n",
        "createdAt" : "2015-09-09T05:03:18Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a608446ba22d01db15655f0890ac7255393757e",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\t// launch the editor\n\t\tedit := editor.NewDefaultEditor()\n\t\tedited, file, err := edit.LaunchTempFile(\"kubectl-edit-\", ext, buf)\n\t\tif err != nil {\n\t\t\treturn preservedFile(err, results.file, out)"
  },
  {
    "id" : "b51cf07c-3abf-404d-b500-802e42231629",
    "prId" : 13604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbf025bb-3d47-4723-9ede-ee80d2cde44e",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Shouldn't this happen before the call to `edit.LaunchTempFile`? Otherwise, isn't this removing the file that was just created?\n",
        "createdAt" : "2015-09-09T01:19:42Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "d2e0079e-af0d-44df-94ac-422ff09b3d46",
        "parentId" : "bbf025bb-3d47-4723-9ede-ee80d2cde44e",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`results.file` (if not empty) is the file we used in the previous loop. Right now the temp file we launched with `edit.LaunchTempFile` is in `file` but not `results.file`, so it's save to remove it here. \n",
        "createdAt" : "2015-09-09T05:05:07Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a608446ba22d01db15655f0890ac7255393757e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +172,176 @@\n\t\t// cleanup any file from the previous pass\n\t\tif len(results.file) > 0 {\n\t\t\tos.Remove(results.file)\n\t\t}"
  },
  {
    "id" : "a54e7ffa-7039-4ba0-aa97-ae0fc0348f8c",
    "prId" : 13604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a79ff6b-6f98-4430-8a87-16c9191c81d5",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Can you remove this TODO now?\n",
        "createdAt" : "2015-09-14T23:48:03Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "d2cf5196-3d73-4d98-ba1e-c10bcdc662aa",
        "parentId" : "1a79ff6b-6f98-4430-8a87-16c9191c81d5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "After #13820 I want to remove all use of jsonmerge (for preconditions) and use strategicpatch pkg instead. \n",
        "createdAt" : "2015-09-15T17:47:03Z",
        "updatedAt" : "2015-09-16T02:16:54Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a608446ba22d01db15655f0890ac7255393757e",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +228,232 @@\t\t}\n\t\tpatch, err := strategicpatch.CreateStrategicMergePatch(originalJS, editedJS, obj)\n\t\t// TODO: change all jsonmerge to strategicpatch\n\t\t// for checking preconditions\n\t\tpreconditions := []jsonmerge.PreconditionFunc{}"
  }
]