[
  {
    "id" : "85d4c651-561d-44c2-a037-69da0b01a4ca",
    "prId" : 39036,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39036#pullrequestreview-16878491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bb7bef1-f9a6-4f6e-a612-3945509ea55c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "comment about why we tolerate an error (need to be able to describe a service account even if referenced secrets can't be fetched)",
        "createdAt" : "2017-01-16T20:32:05Z",
        "updatedAt" : "2017-01-17T14:40:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e796ea28b9a0cd02864d2ffb45cec822233b57dd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1774,1778 @@\t// errors are tolerated here in order to describe the serviceAccount with all\n\t// of the secrets that it references, even if those secrets cannot be fetched.\n\tif err == nil {\n\t\t// existingSecrets is the set of all secrets remaining on a\n\t\t// service account that are not present in the \"tokens\" slice."
  },
  {
    "id" : "80c0c5d9-32f2-4a94-8d02-18af181b6ccb",
    "prId" : 38957,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38957#pullrequestreview-22854416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc39f804-cd06-4651-9cee-bd63f8e0a8e6",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Just a question here, I found that the `v1` api also support this, why not using `v1` api here?",
        "createdAt" : "2017-02-20T02:21:36Z",
        "updatedAt" : "2017-02-22T14:28:15Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "f0af4a81-9379-40c9-815e-533648693bc9",
        "parentId" : "dc39f804-cd06-4651-9cee-bd63f8e0a8e6",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "I am not sure I understand? But the pod in describePod() is being passed as api.Pod, so the extracted tolerations are also the same. ",
        "createdAt" : "2017-02-20T15:37:43Z",
        "updatedAt" : "2017-02-22T14:28:15Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "4859f4a5-c8fa-4fc0-b57b-84ff38dbedaf",
        "parentId" : "dc39f804-cd06-4651-9cee-bd63f8e0a8e6",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Ah, I see, but do you know if there are any rules when to use v1 api and when to use the old api? Thanks.",
        "createdAt" : "2017-02-20T23:44:38Z",
        "updatedAt" : "2017-02-22T14:28:15Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b679e13c91470f2de4dde03dd8cc2936189a63e1",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +2889,2893 @@\n// printPodTolerationsMultiline prints multiple tolerations with a proper alignment.\nfunc printPodTolerationsMultiline(w *PrefixWriter, title string, tolerations []api.Toleration) {\n\tprintTolerationsMultilineWithIndent(w, \"\", title, \"\\t\", tolerations)\n}"
  },
  {
    "id" : "1a5f116f-9377-45ab-b8e4-976a3b4ff953",
    "prId" : 36171,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36171#pullrequestreview-7378642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33202042-b156-4e54-bea1-11be9834d28a",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I think we can use [tabwriter](https://golang.org/pkg/text/tabwriter/) here.\n",
        "createdAt" : "2016-11-04T00:20:56Z",
        "updatedAt" : "2016-11-06T13:08:46Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "69f9b06b-10ff-488c-b73f-40fb2f14fc2d",
        "parentId" : "33202042-b156-4e54-bea1-11be9834d28a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "All the rest of the describers are not using it atm and I don't want to introduce a bigger change in this PR just before the code freeze.\n",
        "createdAt" : "2016-11-07T09:27:03Z",
        "updatedAt" : "2016-11-07T09:27:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f97666eb66435fd95e552f4f2b28255b3df546c9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2164,2168 @@\t\tif len(d.Status.Conditions) > 0 {\n\t\t\tfmt.Fprint(out, \"Conditions:\\n  Type\\tStatus\\tReason\\n\")\n\t\t\tfmt.Fprint(out, \"  ----\\t------\\t------\\n\")\n\t\t\tfor _, c := range d.Status.Conditions {\n\t\t\t\tfmt.Fprintf(out, \"  %v \\t%v\\t%v\\n\", c.Type, c.Status, c.Reason)"
  },
  {
    "id" : "50e800c0-80c1-4207-9ba8-1a6034b25b5e",
    "prId" : 32867,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32867#pullrequestreview-1111678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8aebb4-4422-4652-9b85-8bff505154e7",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "i would prefer `events.Sortable()` here to avoid duplication, but I think I can live with this :-)\n",
        "createdAt" : "2016-09-22T09:50:20Z",
        "updatedAt" : "2016-09-22T09:56:02Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "357cd41a-a1b5-475c-8184-dfd38d69388d",
        "parentId" : "6c8aebb4-4422-4652-9b85-8bff505154e7",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I was trying to do the same with sorting interfaces in deployment utils but it seems there is preference in having the thing that is being sorted as part of the name.\n",
        "createdAt" : "2016-09-22T09:58:56Z",
        "updatedAt" : "2016-09-22T09:58:56Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "475309ce-b006-4d72-8f92-a01bfc428d26",
        "parentId" : "6c8aebb4-4422-4652-9b85-8bff505154e7",
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "i think that makes sense.\n",
        "createdAt" : "2016-09-22T10:00:02Z",
        "updatedAt" : "2016-09-22T10:00:02Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b87e8c79ca837a3425932b144d3e488711db5fb6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2168,2172 @@\t\treturn\n\t}\n\tsort.Sort(events.SortableEvents(el.Items))\n\tfmt.Fprint(w, \"Events:\\n  FirstSeen\\tLastSeen\\tCount\\tFrom\\tSubObjectPath\\tType\\tReason\\tMessage\\n\")\n\tfmt.Fprint(w, \"  ---------\\t--------\\t-----\\t----\\t-------------\\t--------\\t------\\t-------\\n\")"
  },
  {
    "id" : "30e2b212-acaf-4d42-9bda-3e1904905a35",
    "prId" : 32867,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32867#pullrequestreview-1110349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1007ee1c-ceec-45b0-9c12-509a00e63509",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "Thank you :-)\n",
        "createdAt" : "2016-09-22T09:50:28Z",
        "updatedAt" : "2016-09-22T09:56:02Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b87e8c79ca837a3425932b144d3e488711db5fb6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2169,2173 @@\t}\n\tsort.Sort(events.SortableEvents(el.Items))\n\tfmt.Fprint(w, \"Events:\\n  FirstSeen\\tLastSeen\\tCount\\tFrom\\tSubObjectPath\\tType\\tReason\\tMessage\\n\")\n\tfmt.Fprint(w, \"  ---------\\t--------\\t-----\\t----\\t-------------\\t--------\\t------\\t-------\\n\")\n\tfor _, e := range el.Items {"
  },
  {
    "id" : "ad6a8049-fa8b-48e9-9947-6264cebef9c6",
    "prId" : 32823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32823#pullrequestreview-285778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ba575ce-9d1b-4d93-81e4-0eef5ce47706",
        "parentId" : null,
        "authorId" : null,
        "body" : "Do we not want to return a result, with error placeholders for the missing data?\n",
        "createdAt" : "2016-09-15T22:24:01Z",
        "updatedAt" : "2016-09-15T22:24:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fb9a0800-ed74-4cc6-b626-fa9e2864c229",
        "parentId" : "0ba575ce-9d1b-4d93-81e4-0eef5ce47706",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes thats a good point. However doing that will require some refactoring.\nI will need to update describeNamespace to take errors for both resourceQuota and limit ranges and then update describeResourceQuota and describeLimitRanges to take errors as well.\nOr I could directly pass the output of describeLimitRanges and describeResourceQuotas to describeNamespace.\nBut I decided not to make those changes in this PR, since that case is not critical for us.\n\nLet me know if you want me to include that in this PR.\n",
        "createdAt" : "2016-09-15T22:33:43Z",
        "updatedAt" : "2016-09-15T22:33:44Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "127f93ab-68b4-4214-9999-6509c3125864",
        "parentId" : "0ba575ce-9d1b-4d93-81e4-0eef5ce47706",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is fine and mimics what we do in a few other places.  Please open a follow up issue for 1.5 though - we have other cases that probably need to be unified here.\n",
        "createdAt" : "2016-09-16T02:05:10Z",
        "updatedAt" : "2016-09-16T02:05:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b84e53bc2bd962e4d2367c5ef06f2f0526fb28f2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +179,183 @@\t\t\tresourceQuotaList = nil\n\t\t} else {\n\t\t\treturn \"\", err\n\t\t}\n\t}"
  },
  {
    "id" : "2f5f1140-bef0-43c9-93be-3b43c25aad93",
    "prId" : 32823,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32823#pullrequestreview-398443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be9b396d-c8b9-47a4-8eb0-efb5e9740cd6",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why are 404's special? Seems like I'd want a best effort describe regardless of why my request failed.\n",
        "createdAt" : "2016-09-16T13:12:22Z",
        "updatedAt" : "2016-09-16T13:12:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "78b20e4c-d3ae-491a-9bc4-c89a2ccf30f7",
        "parentId" : "be9b396d-c8b9-47a4-8eb0-efb5e9740cd6",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I wanted to put a very specific fix to minimize the risk of getting this cherrypicked in 1.4.\nI will prefer doing a generic fix in another PR, unless you really really want me to do it in this PR.\n",
        "createdAt" : "2016-09-16T17:51:11Z",
        "updatedAt" : "2016-09-16T17:51:11Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "205df2a0-d914-4df0-82ee-a94ef0d82bfc",
        "parentId" : "be9b396d-c8b9-47a4-8eb0-efb5e9740cd6",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I meant specific fix for https://github.com/kubernetes/kubernetes/issues/32629\n",
        "createdAt" : "2016-09-16T17:52:12Z",
        "updatedAt" : "2016-09-16T17:52:15Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b84e53bc2bd962e4d2367c5ef06f2f0526fb28f2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +174,178 @@\tresourceQuotaList, err := d.Core().ResourceQuotas(name).List(api.ListOptions{})\n\tif err != nil {\n\t\tif errors.IsNotFound(err) {\n\t\t\t// Server does not support resource quotas.\n\t\t\t// Not an error, will not show resource quotas information."
  },
  {
    "id" : "a93e7c62-0472-413a-82c6-f1319617912a",
    "prId" : 30381,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "262c4dcc-4f93-4ab7-a78b-45b1fc98154f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why are we using `:` to separate here?  Any particular reason or comparable behavior from elsewhere in our code?  \n",
        "createdAt" : "2016-08-11T18:48:55Z",
        "updatedAt" : "2016-08-11T18:48:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e21d0b82-31fe-4ec7-9d0c-cd78ec551828",
        "parentId" : "262c4dcc-4f93-4ab7-a78b-45b1fc98154f",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "for taints, the output format is : `%s=%s:%s` for key=value:effect  \nSo I just extended it to toleration: `%s=%s:%s:%s` for key=value:operator:effect\n",
        "createdAt" : "2016-08-11T18:54:53Z",
        "updatedAt" : "2016-08-11T18:54:53Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "230251b030fa2511a3bf12adb187afc6daff3c39",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +2511,2515 @@\t\t\t\tfmt.Fprintf(out, \"%s=%s\", toleration.Key, toleration.Value)\n\t\t\t\tif len(toleration.Operator) != 0 {\n\t\t\t\t\tfmt.Fprintf(out, \":%s\", toleration.Operator)\n\t\t\t\t}\n\t\t\t\tif len(toleration.Effect) != 0 {"
  },
  {
    "id" : "9847b9b8-9384-4059-8a14-30748519997b",
    "prId" : 30166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3642cbd4-fb25-465a-bab8-03993414caec",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we want an indication of the approval status (like in the printer), and whether or not a cert has been issued (nil check on status.cert)?\n",
        "createdAt" : "2016-08-11T03:45:46Z",
        "updatedAt" : "2016-08-15T16:57:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab730a7179f2ec211276225ad2fd5b41653b723f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1915,1919 @@\t\tfmt.Fprintf(out, \"\\n\")\n\t}\n\n\treturn tabbedString(func(out io.Writer) error {\n\t\tfmt.Fprintf(out, \"Name:\\t%s\\n\", csr.Name)"
  },
  {
    "id" : "9e753a81-0aa3-4b8c-9b1b-7312ce351772",
    "prId" : 26046,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bf47344-9c39-4589-aaaa-3f3834c8d22c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think we should stop reporting qos per resource in 1.3\n\n@bgrant0607 @vishh - now that we have merged #14943 should we update the CLI to just output the QoS of the pod?\n",
        "createdAt" : "2016-05-25T21:42:51Z",
        "updatedAt" : "2016-05-25T21:52:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "fd556ee5-6fb1-4ea8-93d9-f2284f2c86d6",
        "parentId" : "4bf47344-9c39-4589-aaaa-3f3834c8d22c",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Yes. We should do that. I can post a patch for it later today, unless we\nwant to make that change in this PR itself.\n\nOn Wed, May 25, 2016 at 2:43 PM, Derek Carr notifications@github.com\nwrote:\n\n> In pkg/kubectl/describe.go\n> https://github.com/kubernetes/kubernetes/pull/26046#discussion_r64658693\n> :\n> \n> > @@ -842,21 +842,25 @@ func describeContainers(label string, containers []api.Container, containerStatu\n> >         if len(resourceToQoS) > 0 {\n> >             fmt.Fprintf(out, \"    QoS Tier:\\n\")\n> >         }\n> > -       for resource, qos := range resourceToQoS {\n> > -       for _, resource := range SortedQoSResourceNames(resourceToQoS) {\n> \n> I think we should stop reporting qos per resource in 1.3\n> \n> @bgrant0607 https://github.com/bgrant0607 @vishh\n> https://github.com/vishh - now that we have merged #14943\n> https://github.com/kubernetes/kubernetes/pull/14943 should we update\n> the CLI to just output the QoS of the pod?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/26046/files/c8a14e376e3df237d6d0d6a2d5266056cbfeab87#r64658693\n",
        "createdAt" : "2016-05-25T21:45:30Z",
        "updatedAt" : "2016-05-25T21:52:29Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "c74e08de-9035-4485-b7a4-46c8e36a1f27",
        "parentId" : "4bf47344-9c39-4589-aaaa-3f3834c8d22c",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "> I think we should stop reporting qos per resource in 1.3\n\nDoes this mean that if I have a deployment and describe it I won't be able to see its QoS anymore?\n",
        "createdAt" : "2016-05-26T08:48:27Z",
        "updatedAt" : "2016-05-26T08:48:27Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "f2646906-746b-4eca-b868-5aff4f58b6cf",
        "parentId" : "4bf47344-9c39-4589-aaaa-3f3834c8d22c",
        "authorId" : "a108ef4e-ffb4-4060-8034-2cf30df3892e",
        "body" : "I could be wrong here, but my understanding is that QoS just moves one layer up from containers to pods.\n",
        "createdAt" : "2016-05-26T14:02:42Z",
        "updatedAt" : "2016-05-26T14:02:42Z",
        "lastEditedBy" : "a108ef4e-ffb4-4060-8034-2cf30df3892e",
        "tags" : [
        ]
      },
      {
        "id" : "163353e3-8c96-4226-856d-fba6185e120b",
        "parentId" : "4bf47344-9c39-4589-aaaa-3f3834c8d22c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Qos has changed this release to be at the pod level and not for individual\ncompute resources.  A follow on PR was made that now reports the effective\nQoS for a pod in describe.\n\nOn Thursday, May 26, 2016, Michail Kargakis notifications@github.com\nwrote:\n\n> In pkg/kubectl/describe.go\n> https://github.com/kubernetes/kubernetes/pull/26046#discussion_r64710897\n> :\n> \n> > @@ -842,21 +842,25 @@ func describeContainers(label string, containers []api.Container, containerStatu\n> >         if len(resourceToQoS) > 0 {\n> >             fmt.Fprintf(out, \"    QoS Tier:\\n\")\n> >         }\n> > -       for resource, qos := range resourceToQoS {\n> > -       for _, resource := range SortedQoSResourceNames(resourceToQoS) {\n> \n> I think we should stop reporting qos per resource in 1.3\n> \n> Does this mean that if I have a deployment and describe it I won't be able\n> to see its QoS anymore?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/26046/files/c8a14e376e3df237d6d0d6a2d5266056cbfeab87#r64710897\n",
        "createdAt" : "2016-06-09T00:56:58Z",
        "updatedAt" : "2016-06-09T00:56:59Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "32aa740fd3fb8686c58673ef3916d0620fb37630",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +843,847 @@\t\t\tfmt.Fprintf(out, \"    QoS Tier:\\n\")\n\t\t}\n\t\tfor _, resource := range SortedQoSResourceNames(resourceToQoS) {\n\t\t\tqos := resourceToQoS[resource]\n\t\t\tfmt.Fprintf(out, \"      %s:\\t%s\\n\", resource, qos)"
  },
  {
    "id" : "bcf798c2-2c43-467e-8acd-cac0f1a02602",
    "prId" : 25816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d25b3e5e-2528-40bf-a757-0556dd970685",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Reminder to myself, use `describerSettings.ShowEvents` to conditionally disable showing them. I think Jobs don't do it either.\n",
        "createdAt" : "2016-07-26T07:01:15Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "5afeee14-f2e2-492e-bc68-97f063de8112",
        "parentId" : "d25b3e5e-2528-40bf-a757-0556dd970685",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "It's done properly.\n",
        "createdAt" : "2016-08-02T13:37:39Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c68a9015308a7c4dfac396cdbe64f058aa3f73",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +1243,1247 @@\t\t}\n\t\tprintActiveJobs(out, \"Active Jobs\", scheduledJob.Status.Active)\n\t\tif events != nil {\n\t\t\tDescribeEvents(events, out)\n\t\t}"
  },
  {
    "id" : "9689516c-7fdc-4041-99a9-423b361bdaad",
    "prId" : 25638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "107eea7e-ce9c-492c-bcec-234c12ce3f5e",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "I think it's better also printing `PodSelector` here.\n",
        "createdAt" : "2016-05-19T09:48:14Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "47248f3698d50f163d9b329e697544a84efbc663",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +2116,2120 @@\t\tfmt.Fprintf(out, \"Namespace:\\t%s\\n\", networkPolicy.Namespace)\n\t\tprintLabelsMultiline(out, \"Labels\", networkPolicy.Labels)\n\t\tprintLabelsMultiline(out, \"Annotations\", networkPolicy.Annotations)\n\n\t\treturn nil"
  },
  {
    "id" : "fe86f862-0a87-4e20-862a-9f037ede999f",
    "prId" : 24554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4601750-9f18-4993-95f6-c5e3f0e28ebc",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "At start I was wondering if there are any plans for making nodes namescoped. Then I searched and found out https://github.com/kubernetes/kubernetes/issues/4879. Add it under this TODO.\n",
        "createdAt" : "2016-04-21T08:43:03Z",
        "updatedAt" : "2016-05-06T09:44:07Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd2c9c578df35a7ba21f082e1e0e2f298a58f073",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1594,1598 @@\t\t\tglog.Errorf(\"Unable to construct reference to '%#v': %v\", node, err)\n\t\t} else {\n\t\t\t// TODO: We haven't decided the namespace for Node object yet.\n\t\t\tref.UID = types.UID(ref.Name)\n\t\t\tevents, _ = d.Events(\"\").Search(ref)"
  },
  {
    "id" : "dd8e17af-bc00-4475-802d-a2ae152236b6",
    "prId" : 23988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20a5fd40-6880-4e76-96d8-0eaedcde7a59",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's possible this could be called from a context where nesting is necessary - it would probably be better to take the indentation as an argument and pass \"\\t\" down so that we can use it in nested printers.\n",
        "createdAt" : "2016-04-12T19:09:19Z",
        "updatedAt" : "2016-04-28T16:39:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "36eee969-1ddd-4663-90ba-3614ed060461",
        "parentId" : "20a5fd40-6880-4e76-96d8-0eaedcde7a59",
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Are you talking about indentation between the begging of line and the first letter (`<1>`) or between title and label  (`<2>`)?\n\n```\n<1>Example:<2>foo=bar\n<1>        <2>baz=quux\n```\n",
        "createdAt" : "2016-04-13T13:44:35Z",
        "updatedAt" : "2016-04-28T16:39:43Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "a57f96d7-d062-4e69-98fd-e03eddde2e96",
        "parentId" : "20a5fd40-6880-4e76-96d8-0eaedcde7a59",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably both have to be controlled independently - generally we control our own indentation inside any nested template (containers are an example), and only rely on the tab writer at the top level.  Since labels can be part of the container section you may need two printers - one in the \"formatLabel\" form and one in the \"works inside printContainer\" form\n",
        "createdAt" : "2016-04-13T19:56:39Z",
        "updatedAt" : "2016-04-28T16:39:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e83200d322a75a84bacff74a9fd338ff9723f497",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +2078,2082 @@\n// printLabelsMultiline prints multiple labels with a proper alignment.\nfunc printLabelsMultiline(out io.Writer, title string, labels map[string]string) {\n\tprintLabelsMultilineWithIndent(out, \"\", title, \"\\t\", labels)\n}"
  },
  {
    "id" : "98d163a9-1db5-4407-83b5-dbfbcbb523f4",
    "prId" : 23279,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b015fa7a-3a95-4750-afa8-80961df905d9",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`if len(template.Labels) > 0` here too?\n",
        "createdAt" : "2016-03-23T20:28:23Z",
        "updatedAt" : "2016-03-25T18:56:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "da40f3b0-edd8-40ce-b6b8-495fa254228f",
        "parentId" : "b015fa7a-3a95-4750-afa8-80961df905d9",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "I think `labels.FormatLabels` will handle `len(template.Labels) == 0`\n",
        "createdAt" : "2016-03-24T02:48:55Z",
        "updatedAt" : "2016-03-25T18:56:33Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "c62c00ea-34d1-496e-ac44-1ebec236a062",
        "parentId" : "b015fa7a-3a95-4750-afa8-80961df905d9",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "it's common for podtemplates to have labels, that's why I opted on showing the label field all the time. I can do the same for annotations but podtemplate annotations are not so common.\n",
        "createdAt" : "2016-03-24T09:05:18Z",
        "updatedAt" : "2016-03-25T18:56:33Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "847769905549a0fc09d751ba27fd07ad58e98c09",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +1009,1013 @@\t\treturn\n\t}\n\tfmt.Fprintf(out, \"  Labels:\\t%s\\n\", labels.FormatLabels(template.Labels))\n\tif len(template.Annotations) > 0 {\n\t\tfmt.Fprintf(out, \"  Annotations:\\t%s\\n\", labels.FormatLabels(template.Annotations))"
  },
  {
    "id" : "bf7daa2a-6d28-4ba3-86d7-2180c08fd918",
    "prId" : 23279,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cfc53e8-a121-4dcd-b29b-802d053f23bb",
        "parentId" : null,
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "also for annotations display, we may need special handling, you can keep this here, I will update this later.\n",
        "createdAt" : "2016-03-24T02:50:08Z",
        "updatedAt" : "2016-03-25T18:56:33Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "847769905549a0fc09d751ba27fd07ad58e98c09",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +1011,1015 @@\tfmt.Fprintf(out, \"  Labels:\\t%s\\n\", labels.FormatLabels(template.Labels))\n\tif len(template.Annotations) > 0 {\n\t\tfmt.Fprintf(out, \"  Annotations:\\t%s\\n\", labels.FormatLabels(template.Annotations))\n\t}\n\tif len(template.Spec.ServiceAccountName) > 0 {"
  },
  {
    "id" : "7947ccad-a929-43a8-b25a-f2ea5006c7cd",
    "prId" : 21341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bba7a9a-d695-48b4-b071-61c3cc4e18e2",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This will print Command with brackets since it's a slice.\nhttps://play.golang.org/p/mKPuASjQPl\nDo we want that?\n\nAlso, how about a separate line for the attributes?\n",
        "createdAt" : "2016-02-18T11:05:00Z",
        "updatedAt" : "2016-02-18T11:05:00Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8f4ccc18-c9a6-4d0f-83b6-abe585f0ee60",
        "parentId" : "2bba7a9a-d695-48b4-b071-61c3cc4e18e2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, I think we want brackets to identify what the args are.  I'd rather not use a different line unless we need it - pod describer is FAR too long in general.\n",
        "createdAt" : "2016-02-18T18:26:01Z",
        "updatedAt" : "2016-02-18T18:26:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d98241ed-cdb5-4254-9345-978f288ffc94",
        "parentId" : "2bba7a9a-d695-48b4-b071-61c3cc4e18e2",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "These lines also seem to be far too long:)\n",
        "createdAt" : "2016-02-18T20:05:02Z",
        "updatedAt" : "2016-02-18T20:05:02Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "d256466a-657c-446a-b588-97a4e4604176",
        "parentId" : "2bba7a9a-d695-48b4-b071-61c3cc4e18e2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "These lines fit within <80 chars right now.\n",
        "createdAt" : "2016-02-18T21:40:24Z",
        "updatedAt" : "2016-02-18T21:40:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1983679589cc3e2fa68636bd258bfdd3582f3a6",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +796,800 @@\tswitch {\n\tcase probe.Exec != nil:\n\t\treturn fmt.Sprintf(\"exec %v %s\", probe.Exec.Command, attrs)\n\tcase probe.HTTPGet != nil:\n\t\turl := &url.URL{}"
  },
  {
    "id" : "ebf9343a-a7c8-46d1-a38b-1e1b83c714f7",
    "prId" : 21341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8922f24c-3fdc-413b-a7a5-6bf556ac81e8",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "The problem with this is that it's not really reusable across higher-level resources like replication controllers, deployments, etc.. When describing a deployment, the status of its containers is reflected in the deployment status (albeit higher level info). We still need the spec part from here though since it's part of the pod template. Ideally, this helper shouldn't print any status details if `containerStatuses` was nil.\n",
        "createdAt" : "2016-02-18T11:15:57Z",
        "updatedAt" : "2016-02-18T11:16:56Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e66b50f6-9210-4568-8761-339324827369",
        "parentId" : "8922f24c-3fdc-413b-a7a5-6bf556ac81e8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Sure, that can be done in a follow up.  Most of them are empty.\n",
        "createdAt" : "2016-02-18T18:25:30Z",
        "updatedAt" : "2016-02-18T18:25:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1983679589cc3e2fa68636bd258bfdd3582f3a6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +711,715 @@\n// DescribeContainers is exported for consumers in other API groups that have container templates\nfunc DescribeContainers(containers []api.Container, containerStatuses []api.ContainerStatus, resolverFn EnvVarResolverFunc, out io.Writer) {\n\tstatuses := map[string]api.ContainerStatus{}\n\tfor _, status := range containerStatuses {"
  },
  {
    "id" : "82a0ec0c-8a5e-4c15-9bc6-a4a372b065ab",
    "prId" : 20886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9142e950-03fb-4768-8c39-3b3da23615f0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@smarterclayton @nikhiljindal DefaultObjectDescriber (below) was added by PR #4880. \n\nDefaultObjectDescriber only supports a small subset of resource types. I can't see it used anywhere other than the DefaultObjectDescriber unit test. I checked Openshift Origin also.\n\nThat PR was about enabling printing of local objects. I don't see how DefaultObjectDescriber is related to that. Can we rip it out?\n",
        "createdAt" : "2016-02-09T23:58:31Z",
        "updatedAt" : "2016-02-09T23:58:31Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5e99be81c161431af38843ae0d41db1db55cc6a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\tapi.Kind(\"ConfigMap\"):             &ConfigMapDescriber{c},\n\n\t\textensions.Kind(\"ReplicaSet\"):              &ReplicaSetDescriber{c},\n\t\textensions.Kind(\"HorizontalPodAutoscaler\"): &HorizontalPodAutoscalerDescriber{c},\n\t\textensions.Kind(\"DaemonSet\"):               &DaemonSetDescriber{c},"
  },
  {
    "id" : "18e1edc7-1c4b-45ee-b0fc-86f54a47aef1",
    "prId" : 20886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbd7206f-97e1-4db9-a742-df6867d046b6",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Could we use DescribePodTemplate, here and in describeReplicationController?\n",
        "createdAt" : "2016-02-10T00:04:06Z",
        "updatedAt" : "2016-02-10T00:04:06Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5e99be81c161431af38843ae0d41db1db55cc6a",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +922,926 @@\t\tfmt.Fprintf(out, \"Name:\\t%s\\n\", rs.Name)\n\t\tfmt.Fprintf(out, \"Namespace:\\t%s\\n\", rs.Namespace)\n\t\tif rs.Spec.Template != nil {\n\t\t\tfmt.Fprintf(out, \"Image(s):\\t%s\\n\", makeImageList(&rs.Spec.Template.Spec))\n\t\t} else {"
  },
  {
    "id" : "1d733002-9aff-42fe-a7d7-ced4086adbd3",
    "prId" : 20880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f7bf717-2c6e-44ef-987e-ff8893e421d1",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Should we show MinReadySeconds if it is zero? @bgrant0607 \n",
        "createdAt" : "2016-02-09T08:50:27Z",
        "updatedAt" : "2016-02-09T08:50:27Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "9a55a9da-25d7-45a7-8d33-06e972eec99f",
        "parentId" : "0f7bf717-2c6e-44ef-987e-ff8893e421d1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Should we show MinReadySeconds if it is zero? @bgrant0607\n\nWhy wouldn't we?  Do we hide valid values for other describers?\n",
        "createdAt" : "2016-02-09T12:50:36Z",
        "updatedAt" : "2016-02-09T12:50:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "75e1ff23-3c43-446e-87fc-64524fde4da3",
        "parentId" : "0f7bf717-2c6e-44ef-987e-ff8893e421d1",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : ">  Do we hide valid values for other describers?\n\nNot sure. I thought MinReadySeconds could stay unspecified but that's not the case. I am fine with this.\n",
        "createdAt" : "2016-02-09T13:25:37Z",
        "updatedAt" : "2016-02-09T13:25:37Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "98730365-f251-4f3e-a58f-be027085cf51",
        "parentId" : "0f7bf717-2c6e-44ef-987e-ff8893e421d1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes, this is fine\n",
        "createdAt" : "2016-02-09T15:17:59Z",
        "updatedAt" : "2016-02-09T15:17:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b30516094e792ac11012fdca7185221eac1433a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1616,1620 @@\t\tfmt.Fprintf(out, \"Replicas:\\t%d updated | %d total | %d available | %d unavailable\\n\", d.Status.UpdatedReplicas, d.Spec.Replicas, d.Status.AvailableReplicas, d.Status.UnavailableReplicas)\n\t\tfmt.Fprintf(out, \"StrategyType:\\t%s\\n\", d.Spec.Strategy.Type)\n\t\tfmt.Fprintf(out, \"MinReadySeconds:\\t%d\\n\", d.Spec.MinReadySeconds)\n\t\tif d.Spec.Strategy.RollingUpdate != nil {\n\t\t\tru := d.Spec.Strategy.RollingUpdate"
  },
  {
    "id" : "e9823926-1eec-4c8f-83ea-87c17f0f3800",
    "prId" : 18876,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8492a21f-6273-45fb-9eed-96612bf514d8",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "How about stating the completions are unbound or similar?\n",
        "createdAt" : "2016-01-07T10:33:06Z",
        "updatedAt" : "2016-01-22T23:01:19Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "53ee76fe1a14cc45496c5ca4b1869fdd4bd89251",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +910,914 @@\t\tfmt.Fprintf(out, \"Parallelism:\\t%d\\n\", *job.Spec.Parallelism)\n\t\tif job.Spec.Completions != nil {\n\t\t\tfmt.Fprintf(out, \"Completions:\\t%d\\n\", *job.Spec.Completions)\n\t\t} else {\n\t\t\tfmt.Fprintf(out, \"Completions:\\tNot Set\\n\")"
  },
  {
    "id" : "8a2b6d00-e7b6-4a60-8550-1d82f5722316",
    "prId" : 17798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7318997-acbf-4a48-929d-3ba53574b9f3",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "`return describerMap(c)[kind]`\n",
        "createdAt" : "2015-11-26T11:08:47Z",
        "updatedAt" : "2015-11-30T14:22:42Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "222644c3-f967-4771-82d7-40475c6d0377",
        "parentId" : "d7318997-acbf-4a48-929d-3ba53574b9f3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> return describerMap(c)[kind]\n\nThat won't compile.  the `value, ok` return is some sort of special cased thing.  When done with a return, its just the `value`\n",
        "createdAt" : "2015-11-30T13:09:01Z",
        "updatedAt" : "2015-11-30T14:22:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d0cf667d-d8a1-4035-b3bd-48dcbea43994",
        "parentId" : "d7318997-acbf-4a48-929d-3ba53574b9f3",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : ":disappointed_relieved: \n",
        "createdAt" : "2015-11-30T13:20:51Z",
        "updatedAt" : "2015-11-30T14:22:42Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ac6d8afd32dda8a61c9da48e2536622de5f62c3",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +107,111 @@// Kubernetes types.\nfunc DescriberFor(kind unversioned.GroupKind, c *client.Client) (Describer, bool) {\n\tf, ok := describerMap(c)[kind]\n\treturn f, ok\n}"
  },
  {
    "id" : "0743a6e1-cb4e-4b1c-8dda-7ae2eb4c7493",
    "prId" : 15520,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab473b8e-2a1b-4a0e-b967-fb17c9a1f955",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This works with no explicit serialization?\n",
        "createdAt" : "2015-10-13T07:06:18Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5e67b96d-3849-482c-9746-6ba7a51c4c07",
        "parentId" : "ab473b8e-2a1b-4a0e-b967-fb17c9a1f955",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I believe so but will test. From package \"fmt\" docs: If an operand implements method String() string, that method will be invoked to convert the object to a string, which will then be formatted as required by the verb (if any). String() string is defined on the Selector interface as a human readable string that represents this selector so should just work.\n",
        "createdAt" : "2015-10-14T17:59:10Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "2fa35550-eb0f-4121-8b0d-5766101b597f",
        "parentId" : "ab473b8e-2a1b-4a0e-b967-fb17c9a1f955",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "It works\n",
        "createdAt" : "2015-10-14T21:01:46Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7a54cac74dd2f7642e0276bb926f9d90aa11f74",
    "line" : null,
    "diffHunk" : "@@ -1,1 +887,891 @@\t\tfmt.Fprintf(out, \"Image(s):\\t%s\\n\", makeImageList(&job.Spec.Template.Spec))\n\t\tselector, _ := extensions.PodSelectorAsSelector(job.Spec.Selector)\n\t\tfmt.Fprintf(out, \"Selector:\\t%s\\n\", selector)\n\t\tfmt.Fprintf(out, \"Parallelism:\\t%d\\n\", *job.Spec.Parallelism)\n\t\tfmt.Fprintf(out, \"Completions:\\t%d\\n\", *job.Spec.Completions)"
  },
  {
    "id" : "8118525d-584e-4ac5-b826-3d6f7f65910c",
    "prId" : 14199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should get the replication controllers managed by this dep and show them in some order.  If they can be loaded we shouldn't hard fail (show error and continue)\n",
        "createdAt" : "2015-09-19T16:55:44Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1da7d322-226c-4a7d-bdf8-81cd998a0d21",
        "parentId" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "If we really want them, then instead of recomputing them here, I would prefer that deployment controller adds them to the DeploymentStatus and we just display it here.\nI think we had discussed doing that in the proposal, but then decided against it.\n",
        "createdAt" : "2015-09-21T02:47:02Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "8bf8298d-5693-478a-be46-5d76d5f42d1c",
        "parentId" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "I would agree with @smarterclayton here. Keeping copies of other objects' state in the Deployment object's status will either be frequently out of date or will lead to lots of extraneous updates to apiserver. At the very most, perhaps the matching RC names should be in the status (and, during a deployment, both the old RC's and the new RC's).\n",
        "createdAt" : "2015-09-21T07:11:31Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "843caf52-acea-44fb-aec7-ca1ab1dd3962",
        "parentId" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Right. Thats the reason why we decided not to store anything.\n",
        "createdAt" : "2015-09-21T09:38:51Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "a32f7cca-a0f4-4a8e-bbd9-5fb6f2218e56",
        "parentId" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The comparison I'm drawing is to the pod describer where we fetch the replication controllers that overlap the pod.  I think users would expect the same here - I'm ok with showing status, but it is common to want to know whether you have multiple RCs in flight during a deployment.  Getting the list of RCs and even showing what the D controller thinks is the status is both good.  The note about not failing was just that if the RC is borked for some reason we don't want to prevent describe from working.\n",
        "createdAt" : "2015-09-21T20:26:45Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7c57718f-6163-405b-a456-a2b17ed1e065",
        "parentId" : "45d8cdbf-5602-44e4-9444-9aee9d1b62a8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-09-28T03:18:16Z",
        "updatedAt" : "2015-09-28T21:21:39Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "153c57ffc8c95ee9ee990ea764c4f6612ae41cc4",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1408,1412 @@\nfunc (dd *DeploymentDescriber) Describe(namespace, name string) (string, error) {\n\td, err := dd.Experimental().Deployments(namespace).Get(name)\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "0f4fb5c8-6f24-4894-bfbf-33110d501bfa",
    "prId" : 12972,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0ba56a1-5f5c-4122-8fba-4d41c7b946c6",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Worth adding a test for this to [describe_test.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/describe_test.go)?\n",
        "createdAt" : "2015-08-21T22:21:58Z",
        "updatedAt" : "2015-08-26T14:29:26Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "2d1ebdbe-6bac-411e-94a2-70f69a437ef6",
        "parentId" : "a0ba56a1-5f5c-4122-8fba-4d41c7b946c6",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Adding a test right now would require a FakeExperimentalClient to be created (lots of boilerplate code). I will do it but let's have it in a separate PR.\n",
        "createdAt" : "2015-08-26T14:31:46Z",
        "updatedAt" : "2015-08-26T14:31:46Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "55cd0d565eae6f052a5462fccbd487ef190e1faf",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1112,1116 @@}\n\n// HorizontalPodAutoscalerDescriber generates information about a horizontal pod autoscaler.\ntype HorizontalPodAutoscalerDescriber struct {\n\tclient       *client.Client"
  },
  {
    "id" : "3ff38f29-6be6-4b92-93fa-52979d7b95a8",
    "prId" : 12695,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d091c858-26c8-4029-94a1-71c9f50639cb",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should we make time more human-readable? For example, `31d` instead of `Tue, 14 Jul 2015 17:42:40 -0700`?\n",
        "createdAt" : "2015-08-14T18:04:14Z",
        "updatedAt" : "2015-09-11T01:22:17Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e503d5a9-817b-4e7b-b949-6e2afc811638",
        "parentId" : "d091c858-26c8-4029-94a1-71c9f50639cb",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "In  making things human-readable, I think it'd be worth having both at the very least (or just keeping as the original string).\n\nIn GitHub's UI, I find it really annoying when I see some days that are like \"July something\" and some that are like \"27 days ago\". Maybe subtracting 27 days is easy for most people, but it's hard for me (if you're trying to diff times to, say, the right hour.)\n\nSo you could do `Tue, 14 Jul 2015 17:42:40 -0700 (31d ago)`\n\nbut there might actually be some value in just keeping things in standardized formats for parsing with other tools\n",
        "createdAt" : "2015-08-17T05:55:00Z",
        "updatedAt" : "2015-09-11T01:22:17Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc75cd5656b0449541b0f4db48f0f8c32dc2230",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +463,467 @@\t\tfmt.Fprintf(out, \"Node:\\t%s\\n\", pod.Spec.NodeName+\"/\"+pod.Status.HostIP)\n\t\tif pod.Status.StartTime != nil {\n\t\t\tfmt.Fprintf(out, \"Start Time:\\t%s\\n\", pod.Status.StartTime.Time.Format(time.RFC1123Z))\n\t\t}\n\t\tfmt.Fprintf(out, \"Labels:\\t%s\\n\", labels.FormatLabels(pod.Labels))"
  },
  {
    "id" : "123733ce-1506-4159-9f4a-107a0ee973b8",
    "prId" : 12043,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1b19f88-2538-4ebc-a042-7100ab7264d1",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This will say not authorized in the case there aren't any pods.\n",
        "createdAt" : "2015-07-31T16:33:30Z",
        "updatedAt" : "2015-12-11T18:09:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cdeb4cb20056a03c6aa6b80c64af1604c726257",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1393,1397 @@\t\t\t}\n\t\t} else {\n\t\t\tfmt.Fprintf(out, \"Pods:\\tnot authorized\\n\")\n\t\t}\n\t\tif events != nil {"
  },
  {
    "id" : "6919b0a8-90be-4fe1-a209-f9c7d802db5a",
    "prId" : 12043,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2780f56c-93a1-4e61-90c7-8e2baf77f26d",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "why not running pods?\n",
        "createdAt" : "2015-08-26T09:51:30Z",
        "updatedAt" : "2015-12-11T18:09:56Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cdeb4cb20056a03c6aa6b80c64af1604c726257",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1314,1318 @@\t}\n\n\tfieldSelector, err := fields.ParseSelector(\"spec.nodeName=\" + name + \",status.phase!=\" + string(api.PodSucceeded) + \",status.phase!=\" + string(api.PodFailed))\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "bc47f6ae-2109-4a9c-bed4-34d4f7f820c9",
    "prId" : 11788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e2814fb-f630-47ce-86f3-c557ef8051c9",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@derekwaynecarr Do we expect this to work for clusters with security policy enabled? An arbitrary client might not be able to read all the pods.\n\nThat issue doesn't have to block this PR, since the existing code has the same problem, but it would be nice if this at least gracefully handled that case.\n",
        "createdAt" : "2015-07-30T15:47:28Z",
        "updatedAt" : "2015-08-07T08:57:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a276f2d2-7f7a-42af-b2ed-5ce91f443fe4",
        "parentId" : "0e2814fb-f630-47ce-86f3-c557ef8051c9",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "For OpenShift, a cluster admin is the only user out of the box that can get\nnodes, and they can get all pods.  I suspect we will have customers that\nwant to separate ability to get all pods from get all nodes, but its not a\nmajor near term concern to hold up this PR.  Our policy allows that\nconfiguration, I made a note to submit a follow-up to ensure its handled\ngracefully.  In general, any of our describers that fetch related resources\nneed to handle it gracefully - especially when we get a resource in a\nnamespace, and fetch related non-namespaced items.\n\nOn Thu, Jul 30, 2015 at 11:48 AM, Brian Grant notifications@github.com\nwrote:\n\n> In pkg/kubectl/describe.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11788#discussion_r35885568\n> :\n> \n> > ```\n> >     for _, pod := range pods {\n> > ```\n> > -           fmt.Fprintf(out, \"  %s\\t%s\\n\", pod.Namespace, pod.Name)\n> > -           podTotalMilliCPU := int64(0)\n> > -           podTotalMemory := int64(0)\n> >   +\n> > -           for ix := range pod.Spec.Containers {\n> \n> @derekwaynecarr https://github.com/derekwaynecarr Do we expect this to\n> work for clusters with security policy enabled? An arbitrary client might\n> not be able to read all the pods.\n> \n> That issue doesn't have to block this PR, since the existing code has the\n> same problem, but it would be nice if this at least gracefully handled that\n> case.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11788/files#r35885568\n> .\n",
        "createdAt" : "2015-07-30T19:23:20Z",
        "updatedAt" : "2015-08-07T08:57:26Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "c9beb458-0088-4c62-b56c-9dee5632d714",
        "parentId" : "0e2814fb-f630-47ce-86f3-c557ef8051c9",
        "authorId" : "367ad63e-2fc8-4db1-949a-10424aaf7469",
        "body" : "@derekwaynecarr \n\nThe PR is very thoughtful, my appreciation.\n",
        "createdAt" : "2015-07-31T01:17:42Z",
        "updatedAt" : "2015-08-07T08:57:26Z",
        "lastEditedBy" : "367ad63e-2fc8-4db1-949a-10424aaf7469",
        "tags" : [
        ]
      }
    ],
    "commit" : "dab7280ae4656d9a05207571a71c56b020aa35c8",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +890,894 @@\t\t\tpodTotalMemory := int64(0)\n\n\t\t\tfor ix := range pod.Spec.Containers {\n\t\t\t\tlimits := pod.Spec.Containers[ix].Resources.Limits\n\t\t\t\tpodTotalMilliCPU += limits.Cpu().MilliValue()"
  },
  {
    "id" : "08b42e54-0ad7-4ff0-860d-df9364293d30",
    "prId" : 4880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57cca200-2afd-4633-ae07-5a449b287608",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Would it simplify anything to just make the argument a map of kind to describer?\n",
        "createdAt" : "2015-03-03T20:35:51Z",
        "updatedAt" : "2015-03-16T04:10:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "42039978-f531-482c-b9b2-f3c0f34533f1",
        "parentId" : "57cca200-2afd-4633-ae07-5a449b287608",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We wouldn't be able to pass extra fields (in the future) but that's not a short term concern.  I can simplify it for now - my primary goal was to be able to describe a kind from a file.\n\n> On Mar 3, 2015, at 3:36 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/kubectl/describe.go:\n> \n> > -   }\n> > -   for _, typeFn := range fns {\n> > -       if typeFn.Matches(types) {\n> > -           return typeFn.Describe(exact, extra...)\n> > -       }\n> > -   }\n> > -   return \"\", newErrNoDescriber(append([]reflect.Type{exactType}, types...)...)\n> >   +}\n> >   +\n> >   +// Add adds one or more describer functions to the Describer. The passed function must\n> >   +// match the signature:\n> >   +//\n> >   +//     func(...) (string, error)\n> >   +//\n> >   +// Any number of arguments may be provided.\n> >   +func (d *Describers) Add(fns ...interface{}) error {\n> >   Would it simplify anything to just make the argument a map of kind to describer?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-05T19:14:55Z",
        "updatedAt" : "2015-03-16T04:10:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d96f9e7abe5970635e64660a70ccc98869c0cb",
    "line" : 280,
    "diffHunk" : "@@ -1,1 +553,557 @@//\n// Any number of arguments may be provided.\nfunc (d *Describers) Add(fns ...interface{}) error {\n\tfor _, fn := range fns {\n\t\tfv := reflect.ValueOf(fn)"
  }
]