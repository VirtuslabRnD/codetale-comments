[
  {
    "id" : "a29a1f07-7586-49c8-a2b5-5d70729b4207",
    "prId" : 29135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba444b28-9d77-424f-a19f-92597b8a93f2",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "now that we're using util can you add a unittest for this? \nI leave it to you, since this code didn't have any to begin with, but I\"ll wait for your nack.\n",
        "createdAt" : "2016-07-28T20:16:34Z",
        "updatedAt" : "2016-07-29T15:58:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "199afabd-0c6c-4159-b6bf-3733421b2c2b",
        "parentId" : "ba444b28-9d77-424f-a19f-92597b8a93f2",
        "authorId" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "body" : "container_bridge.go had no tests at all. I added the new file, but just for the new function (based on iptables' own tests).\n",
        "createdAt" : "2016-07-29T16:02:32Z",
        "updatedAt" : "2016-07-29T16:02:32Z",
        "lastEditedBy" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "13b082968b86d855e2dfad8a58abd2389ade1b97",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +146,150 @@// outside this range will use IP masquerade.\nfunc ensureIPTablesMasqRule(client iptables.Interface, nonMasqueradeCIDR string) error {\n\tif _, err := client.EnsureRule(iptables.Append, iptables.TableNAT,\n\t\tiptables.ChainPostrouting,\n\t\t\"-m\", \"comment\", \"--comment\", \"kubelet: SNAT outbound cluster traffic\","
  },
  {
    "id" : "d3a9ebec-6ed5-4e08-a6b7-32562b605485",
    "prId" : 21326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7f4b351-0448-4fa0-974b-07b65d98259a",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "This seems incorrect ??\nYou want the logic in the createCBR0 function. \nElse this code will only be called the second time around when a cbr0 already exists.\n\nIs that what you wanted ?\n",
        "createdAt" : "2016-02-19T00:08:13Z",
        "updatedAt" : "2016-02-19T22:59:30Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "264676ea-c7d4-4c4c-b87d-600eb1fb5669",
        "parentId" : "e7f4b351-0448-4fa0-974b-07b65d98259a",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I want to set it every time we check networking (every 30s) after the bridge is created. Your point about not doing it the first time is valid, though, so now I'm just falling-through.\n",
        "createdAt" : "2016-02-19T00:27:42Z",
        "updatedAt" : "2016-02-19T22:59:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "1661275c-3a60-4d03-a143-4c9f8306ecc3",
        "parentId" : "e7f4b351-0448-4fa0-974b-07b65d98259a",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "yeah.. lets do it the first time around too so that the intent is captured that we want it right away too..\n",
        "createdAt" : "2016-02-19T00:30:38Z",
        "updatedAt" : "2016-02-19T22:59:30Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "7a591437-bee4-4cdc-96ac-9458429100a6",
        "parentId" : "e7f4b351-0448-4fa0-974b-07b65d98259a",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "i  think one of my comments got buried.. we should set the bridge to promiscuous the first time around as well, since it captures our intent correctly..\n",
        "createdAt" : "2016-02-19T05:29:25Z",
        "updatedAt" : "2016-02-19T22:59:30Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "fd58dbf6-38ac-4d09-8af5-adae0058594b",
        "parentId" : "e7f4b351-0448-4fa0-974b-07b65d98259a",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "We will unless there's an error: https://github.com/kubernetes/kubernetes/pull/21326/files#r53406092, or did you mean something else?\n",
        "createdAt" : "2016-02-19T05:52:24Z",
        "updatedAt" : "2016-02-19T22:59:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a694a7ae4bd19c9db62e8a870ebcbd7c6e065969",
    "line" : null,
    "diffHunk" : "@@ -1,1 +86,90 @@\t\t}\n\t}\n\t// Put the container bridge into promiscuous mode to force it to accept hairpin packets.\n\t// TODO: Remove this once the kernel bug (#20096) is fixed.\n\tif promiscuous {"
  },
  {
    "id" : "612b2730-c44d-4dbb-8bfb-194ac513777a",
    "prId" : 10312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "824bbe53-4106-4845-9a22-ed17aeded59f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "TODO: use util.iptables\n",
        "createdAt" : "2015-06-24T23:44:27Z",
        "updatedAt" : "2015-06-25T00:20:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bb3633ae-4354-4434-93cf-2f7afc01ca0b",
        "parentId" : "824bbe53-4106-4845-9a22-ed17aeded59f",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Done already :-)\n",
        "createdAt" : "2015-06-24T23:46:32Z",
        "updatedAt" : "2015-06-25T00:20:07Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "710fb4e4136678052629ac423c52e6615bef0e2e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@func ensureIPTablesMasqRule() error {\n\t// Check if the MASQUERADE rule exist or not\n\tif err := exec.Command(\"iptables\", \"-t\", \"nat\", \"-C\", \"POSTROUTING\", \"-o\", \"eth0\", \"-j\", \"MASQUERADE\", \"!\", \"-d\", \"10.0.0.0/8\").Run(); err == nil {\n\t\t// The MASQUERADE rule exists\n\t\treturn nil"
  },
  {
    "id" : "1324e59e-7dcb-4255-ac4b-c0e8b2840732",
    "prId" : 10211,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f635965e-91ef-4c88-87df-ea0f376a2bd4",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Please add a comment explaining the dual return values. \n",
        "createdAt" : "2015-06-23T08:22:02Z",
        "updatedAt" : "2015-06-23T23:29:53Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "bc793b32-0ef0-4d72-9e81-1907b38c6ffa",
        "parentId" : "f635965e-91ef-4c88-87df-ea0f376a2bd4",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "I don't think this comment was addressed?\n",
        "createdAt" : "2015-06-23T18:56:51Z",
        "updatedAt" : "2015-06-23T23:29:53Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbe6fe4e45aeeb5cb5abad8a7d216a3da1d6f57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +89,93 @@// when the configuration is missing on the node, and propagate the rest\n// error to kubelet to handle.\nfunc cbr0Exists() (bool, error) {\n\tif _, err := os.Stat(\"/sys/class/net/cbr0\"); err != nil {\n\t\tif os.IsNotExist(err) {"
  },
  {
    "id" : "640ab49d-2206-415a-a111-02e35dc8ed8b",
    "prId" : 7984,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63cb2f14-312b-4988-ac83-52d8edea1a48",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Do you need a ^ at the beginning and a $ at the end of the regexp?\n",
        "createdAt" : "2015-05-08T22:12:23Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "85661db5-dd37-494d-84ad-c4ebccce3105",
        "parentId" : "63cb2f14-312b-4988-ac83-52d8edea1a48",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "If you are matching against multi-line text that may not work without setting some regexp flags...\n",
        "createdAt" : "2015-05-08T22:14:53Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "31ea7d12954126d5d9cb95011dec4bd7ed60fa06",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@)\n\nvar cidrRegexp = regexp.MustCompile(`inet ([0-9a-fA-F.:]*/[0-9]*)`)\n\nfunc ensureCbr0(wantCIDR *net.IPNet) error {"
  },
  {
    "id" : "bb7646f8-082c-4289-be02-be93af39ee85",
    "prId" : 7984,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "This doesn't work if container runtime is rkt, not docker \n",
        "createdAt" : "2015-05-12T22:34:57Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "b2cb295f-0563-4e3f-b1de-57224ebf1480",
        "parentId" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Maybe just log the error without return here? rkt is daemonless, we don't need to restart it.\n",
        "createdAt" : "2015-05-12T22:36:16Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "990b2e89-9267-4131-8466-a058b4778610",
        "parentId" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Do we still use cbr0 for rocket? Or is networking configured differently on coreos/rkt deployments?\n",
        "createdAt" : "2015-05-12T22:36:24Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "3dccb7c7-dbaf-4392-834b-4475d02a6d93",
        "parentId" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Here is the doc for coreos and rkt's network configure: \n\nhttps://github.com/coreos/rkt/blob/master/Documentation/networking.md#bridge\n\nWe don't need cbr0 here. This is why I suggested not to return error here instead of logging. Also please add a TODO(dawnchen): figure out how to handle for rkt case here? I might need to do a refactory later to push this down to container_runtime (docker, rkt) library. \n",
        "createdAt" : "2015-05-12T22:42:19Z",
        "updatedAt" : "2015-05-13T06:00:59Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "80ff38e8-559f-439f-b2fe-38e494508d00",
        "parentId" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "authorId" : "eefdee66-da6f-4a49-8c97-0c957a9facd9",
        "body" : "`service docker restart` will fail on CoreOS and possible others that do not have the \"legacy\" wrappers for `systemctl` et al.\n",
        "createdAt" : "2015-05-13T21:03:35Z",
        "updatedAt" : "2015-05-13T21:03:35Z",
        "lastEditedBy" : "eefdee66-da6f-4a49-8c97-0c957a9facd9",
        "tags" : [
        ]
      },
      {
        "id" : "f38c3826-2445-4107-9c98-ec00ce91113a",
        "parentId" : "be948055-2044-4e79-bcca-9dabc1a053e2",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Okay thats what I figured. So ignoring the error for now is probably the right answer.\n",
        "createdAt" : "2015-05-13T23:59:46Z",
        "updatedAt" : "2015-05-13T23:59:46Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "31ea7d12954126d5d9cb95011dec4bd7ed60fa06",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\t\t}\n\t\t// restart docker\n\t\tif err := exec.Command(\"service\", \"docker\", \"restart\").Run(); err != nil {\n\t\t\tglog.Error(err)\n\t\t\t// For now just log the error. The containerRuntime check will catch docker failures."
  }
]