[
  {
    "id" : "6373568f-e0df-4ad7-a6db-44b97dec0727",
    "prId" : 14700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec40cec2-d87e-47b4-a6ee-a55d204654a3",
        "parentId" : null,
        "authorId" : null,
        "body" : "How do we ensure that this stays in sync with the version(s) we install/support?  Should this version number be pulled up to a named constant at the head of the file, rather than a literal burried in the test code?\n",
        "createdAt" : "2015-10-06T16:16:35Z",
        "updatedAt" : "2015-10-09T07:11:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5541d5c6-861d-436c-84d9-80393809539b",
        "parentId" : "ec40cec2-d87e-47b4-a6ee-a55d204654a3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we'll know when we change the supported version in server.go, and these tests fail with an \"invalid docker\" error. in general, I like tests that bark at me when I change a supported value, so I don't mind the inline literals\n",
        "createdAt" : "2015-10-06T19:05:42Z",
        "updatedAt" : "2015-10-09T07:11:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d0515008-9096-4ed2-941f-f33dcaaf8d62",
        "parentId" : "ec40cec2-d87e-47b4-a6ee-a55d204654a3",
        "authorId" : null,
        "body" : "Fair enough.  I'd still prefer it to be a well-commented constant (\"// keep this in sync with server.go\" or some such), but won't fight too hard about it ;-) \n",
        "createdAt" : "2015-10-06T21:09:15Z",
        "updatedAt" : "2015-10-09T07:11:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "9d6b52881d835cd76aa5fe2ce92cf578dd5900c9",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +163,167 @@\tfw.fakeKubelet = &fakeKubelet{\n\t\tcontainerVersionFunc: func() (kubecontainer.Version, error) {\n\t\t\treturn dockertools.NewVersion(\"1.15\")\n\t\t},\n\t\thostnameFunc: func() string {"
  },
  {
    "id" : "caad9fac-9fab-4063-b8fc-eecb200a2271",
    "prId" : 14700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ac1c4af-f414-44cb-82e5-0f01bd6294be",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: This is not a host name, it's an ip address.  \"localhost\"?\n",
        "createdAt" : "2015-10-06T16:17:30Z",
        "updatedAt" : "2015-10-09T07:11:10Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cab53b51-699a-4642-a193-76b22617165d",
        "parentId" : "0ac1c4af-f414-44cb-82e5-0f01bd6294be",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nope, has to match the address of the test server, which is 127.0.0.1\n",
        "createdAt" : "2015-10-06T19:04:38Z",
        "updatedAt" : "2015-10-09T07:11:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d6b52881d835cd76aa5fe2ce92cf578dd5900c9",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\t},\n\t\thostnameFunc: func() string {\n\t\t\treturn \"127.0.0.1\"\n\t\t},\n\t\tpodByNameFunc: func(namespace, name string) (*api.Pod, bool) {"
  },
  {
    "id" : "aaebdd36-d9f9-4bd0-b730-e385a9590229",
    "prId" : 6252,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "707727ea-a04b-4245-97dd-3f4f8b9ef7c4",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "nit %q instead of '%s'\n",
        "createdAt" : "2015-03-31T22:52:56Z",
        "updatedAt" : "2015-03-31T23:48:33Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "93816b2d-44ac-4aa3-a5d1-613a3932d8a4",
        "parentId" : "707727ea-a04b-4245-97dd-3f4f8b9ef7c4",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Agreed, but there are least 70 more occurrences of this pattern in the code base. I don't mind fixing it, but I'd rather dedicate an entire PR to that one thing.\n",
        "createdAt" : "2015-03-31T22:57:15Z",
        "updatedAt" : "2015-03-31T23:48:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "66735972-6992-45e2-b61c-e64577df742f",
        "parentId" : "707727ea-a04b-4245-97dd-3f4f8b9ef7c4",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "SGTM\n",
        "createdAt" : "2015-03-31T22:58:44Z",
        "updatedAt" : "2015-03-31T23:48:33Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "6904c4d585a15209477f292dfdf8347977a8dd95",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +988,992 @@\t\t\tp, err := strconv.ParseUint(test.port, 10, 16)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"%d: error parsing port string '%s': %v\", i, test.port, err)\n\t\t\t}\n\t\t\tif e, a := uint16(p), port; e != a {"
  }
]