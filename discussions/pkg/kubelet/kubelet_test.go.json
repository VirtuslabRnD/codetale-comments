[
  {
    "id" : "f574cfa1-225b-4fb8-8fd5-82a033bdc0fe",
    "prId" : 98956,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98956#pullrequestreview-588183972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9492834-39f7-4c05-8e70-82d648604c7b",
        "parentId" : null,
        "authorId" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "body" : "Added to simulate `runtime.KillPod`",
        "createdAt" : "2021-02-11T01:21:26Z",
        "updatedAt" : "2021-02-13T22:18:02Z",
        "lastEditedBy" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e752968c39942ca182b1f0171567add1df70a00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +446,450 @@\n\t// simulate Runtime.KillPod\n\tfakeRuntime.PodList = nil\n\n\tkubelet.HandlePodCleanups()"
  },
  {
    "id" : "c336a6cf-1f5b-425c-8690-7bf8f005c4b4",
    "prId" : 98742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98742#pullrequestreview-584824459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccc7ef1c-68d0-455a-b691-ca3593d63741",
        "parentId" : null,
        "authorId" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "body" : "This is the case of https://github.com/kubernetes/kubernetes/issues/98718.",
        "createdAt" : "2021-02-06T05:13:42Z",
        "updatedAt" : "2021-02-06T05:13:42Z",
        "lastEditedBy" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "tags" : [
        ]
      }
    ],
    "commit" : "321ca8af526e6ae255c6d6d11b01d060b00eaa11",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +586,590 @@\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n"
  },
  {
    "id" : "86e3ae9c-9f2b-4731-a96d-3b5cb6a1cc33",
    "prId" : 98424,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98424#pullrequestreview-582879895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8123ce0-875b-4b8d-ae8c-6fdbe8c1054b",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "this was really helpful to aid understanding, thanks!",
        "createdAt" : "2021-02-03T21:15:15Z",
        "updatedAt" : "2021-02-04T17:46:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "7634f0ac-5af2-4d11-ab60-7c98e301a0af",
        "parentId" : "e8123ce0-875b-4b8d-ae8c-6fdbe8c1054b",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "Thanks for the review!",
        "createdAt" : "2021-02-03T22:59:06Z",
        "updatedAt" : "2021-02-04T17:46:01Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f918e11e3aaef25fee0525f9552e36d23b6b86a6",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +408,412 @@}\n\nfunc TestSyncPodsDeletesWhenSourcesAreReadyPerQOS(t *testing.T) {\n\tready := false // sources will not be ready initially, enabled later\n"
  },
  {
    "id" : "fbdecfa9-0dd9-4dd8-8317-cd3ecf7cda09",
    "prId" : 98424,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98424#pullrequestreview-582883150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb1915f-e973-4584-b81a-2a4488a90668",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Do we have a fake clock available for unit tests? I'm guessing not...",
        "createdAt" : "2021-02-03T22:51:21Z",
        "updatedAt" : "2021-02-04T17:46:01Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "b0699038-d14f-4ba5-b9a6-e498df85b8c1",
        "parentId" : "6fb1915f-e973-4584-b81a-2a4488a90668",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "Not that I know of... But we need time for the goroutines to run, so a fake clock would not help here.",
        "createdAt" : "2021-02-03T23:04:55Z",
        "updatedAt" : "2021-02-04T17:46:01Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f918e11e3aaef25fee0525f9552e36d23b6b86a6",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +442,446 @@\n\tkubelet.HandlePodCleanups()\n\ttime.Sleep(2 * time.Second)\n\tfakeRuntime.AssertKilledPods([]string{}) // Sources are not ready yet. Don't remove any pods.\n"
  },
  {
    "id" : "0bae332b-8195-43de-a51a-a16085ae753e",
    "prId" : 54488,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54488#pullrequestreview-73032626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c97c013-ffa9-4c4d-abdd-d7aef07560b0",
        "parentId" : null,
        "authorId" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "body" : "I am a bit confused by the logic here. How do we handle adjustedResource and unadjustedResouce differently in updatePluginResourcesFunc()? Did you intend to set node.allocatable[] = resourceSpec.quantity here? But I thought the intention is to adjust node allocatable for adjustedResource and not adjust node allocatable for unadjustedResouce.",
        "createdAt" : "2017-10-30T17:53:21Z",
        "updatedAt" : "2017-11-02T01:20:42Z",
        "lastEditedBy" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "tags" : [
        ]
      },
      {
        "id" : "9c1b5042-d589-452d-9ad3-b1f6069f7eee",
        "parentId" : "4c97c013-ffa9-4c4d-abdd-d7aef07560b0",
        "authorId" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "body" : "I think I saw the problem you ran into. Basically, the default PredicateAdmitHandler we added in newTestKubelet() is NOT a no-op but still runs the GeneralPredicate logic. But instead of set all resource with sufficientQuantity, I would suggest we just reset kl.admitHandlers before adding a new PredicateAdmitHandler. Another problem I noticed in this test is that we only set resource Limits in all PodSpecs, but in scheduler predicate code, I think it actually looks at resource Requests instead, so we are not really testing the behavior we want to test here. For extended resources, we expect Limits and Requests to always be equal, so I think we should change the code here to set both. I changed this test to include these changes. Could you take a look and merge it with this PR? \r\nhttps://github.com/jiayingz/kubernetes/blob/pr54488/pkg/kubelet/kubelet_test.go#L579",
        "createdAt" : "2017-10-30T23:35:22Z",
        "updatedAt" : "2017-11-02T01:20:42Z",
        "lastEditedBy" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "tags" : [
        ]
      },
      {
        "id" : "5cf0c78f-a821-4549-a8ae-fcbe6731dc9b",
        "parentId" : "4c97c013-ffa9-4c4d-abdd-d7aef07560b0",
        "authorId" : "1a75d411-1ce5-48f2-9967-25f88794c451",
        "body" : "> Another problem I noticed in this test is that we only set resource Limits in all PodSpecs, but in scheduler predicate code, I think it actually looks at resource Requests instead, so we are not really testing the behavior we want to test here\r\n\r\nthat makes sense\r\n\r\nOh, I see your implement, so I misunderstood your mean of \"unadjustedResouce\", it's intend for resources that device plugin handler doesn't handle. It makes sense to me. Thanks",
        "createdAt" : "2017-10-31T01:16:10Z",
        "updatedAt" : "2017-11-02T01:20:42Z",
        "lastEditedBy" : "1a75d411-1ce5-48f2-9967-25f88794c451",
        "tags" : [
        ]
      }
    ],
    "commit" : "06308963833f12e087f7db4ced5289e3c39f4159",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +600,604 @@\tkl.nodeInfo = testNodeInfo{nodes: nodes}\n\n\tupdatePluginResourcesFunc := func(node *schedulercache.NodeInfo, attrs *lifecycle.PodAdmitAttributes) error {\n\t\t// Maps from resourceName to the value we use to set node.allocatableResource[resourceName].\n\t\t// A resource with invalid value (< 0) causes the function to return an error"
  },
  {
    "id" : "05a1d009-cbb5-404d-8d1f-6c7f4691fcf5",
    "prId" : 38836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38836#pullrequestreview-13248897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d150abaa-2f9d-4ada-a5a1-86ba43313988",
        "parentId" : null,
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "If it turns out that we *do* want a criticality sort that is stable wrt creation time, we should check that in this test.",
        "createdAt" : "2016-12-16T00:29:50Z",
        "updatedAt" : "2016-12-16T03:01:28Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7409e00380b349ec971d089363ad7ff22b37c76",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +463,467 @@\n// Tests that we sort pods based on criticality.\nfunc TestCriticalPrioritySorting(t *testing.T) {\n\ttestKubelet := newTestKubelet(t, false /* controllerAttachDetachEnabled */)\n\tkl := testKubelet.kubelet"
  },
  {
    "id" : "28c65b5e-0d40-400f-b4c2-d513bd62f8fc",
    "prId" : 28095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed78ec57-798e-46e2-8d92-0567cf73af70",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I know this is a unittests, but this is a forever goroutine that can do no good. \nhow about something like:\n\n``` go\nfunc simulateVolumeInUseUpdate(volumeName api.Unique, stopCh struct {}) {\n  for {\n    select {\n      case <- ticker.C:\n        MarkVolumeAsReportedInUse()\n      case <- stopCh: \n        return\n    }\n  }\n}\n\nstopCh := make(chan struct{})\ndefer close(stopCh)\ngo simuilatedVolumeInUse(stopCh)\n```\n",
        "createdAt" : "2016-06-28T01:06:24Z",
        "updatedAt" : "2016-06-28T21:06:20Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "d09dcd97-3f19-46ae-8039-70c9495e9b74",
        "parentId" : "ed78ec57-798e-46e2-8d92-0567cf73af70",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Done.\n",
        "createdAt" : "2016-06-28T02:01:26Z",
        "updatedAt" : "2016-06-28T21:06:20Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "e06b32b1ef4ac5919ea24c2e158f0ab6b3b5fe87",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +5029,5033 @@}\n\nfunc simulateVolumeInUseUpdate(\n\tvolumeName api.UniqueVolumeName,\n\tstopCh <-chan struct{},"
  },
  {
    "id" : "371aa661-6ab9-473b-b342-e036df3afece",
    "prId" : 21224,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c72c51e-3868-4c01-b842-64d61cef71ba",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can we add an example that has common reasons enumerated?  i.e. RegistryUnavailable, ImagePullBackoff, etc.?\n",
        "createdAt" : "2016-04-04T17:42:36Z",
        "updatedAt" : "2016-04-12T23:37:37Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "345b5e81-28c9-40e4-8127-2098fecf3b12",
        "parentId" : "0c72c51e-3868-4c01-b842-64d61cef71ba",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@derekwaynecarr With this PR, we won't rely on specific error enumeration. :)\n",
        "createdAt" : "2016-04-12T06:28:20Z",
        "updatedAt" : "2016-04-12T23:37:37Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "41953bae49d15d356f03a53afaac49c9538238e9",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +4513,4517 @@\t\tcontainers                   []api.Container\n\t\tstatuses                     []*kubecontainer.ContainerStatus\n\t\treasons                      map[string]error\n\t\toldStatuses                  []api.ContainerStatus\n\t\texpectedState                map[string]api.ContainerState"
  },
  {
    "id" : "2c474562-0eb5-4feb-89f8-9152a11b9ab4",
    "prId" : 20204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1173d4ba-77fb-4fd4-a66a-c7f25df75ba0",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Does the VersionInfo need to be set required for the test to pass? I am only asking because kubemark relies on the cadvisor fake (https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/cadvisor/testing/cadvisor_fake.go) which returns &cadvisorapi.VersionInfo{}. Just wanted to make sure that this won't break kubemark.\n",
        "createdAt" : "2016-04-08T17:42:32Z",
        "updatedAt" : "2016-04-10T17:31:11Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "c38b6365-044e-4409-897e-19671195cbae",
        "parentId" : "1173d4ba-77fb-4fd4-a66a-c7f25df75ba0",
        "authorId" : "367ad63e-2fc8-4db1-949a-10424aaf7469",
        "body" : "Yes, it is required. The test would fail otherwise.\n",
        "createdAt" : "2016-04-09T01:33:53Z",
        "updatedAt" : "2016-04-10T17:31:11Z",
        "lastEditedBy" : "367ad63e-2fc8-4db1-949a-10424aaf7469",
        "tags" : [
        ]
      },
      {
        "id" : "6304c8c7-b558-4534-9955-9f662b14bf49",
        "parentId" : "1173d4ba-77fb-4fd4-a66a-c7f25df75ba0",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "In that case, could you modify cadvisor_fake.go to return the same information? It sounds like kubemark won't be able to admit pods with out the information?\n",
        "createdAt" : "2016-04-11T15:14:04Z",
        "updatedAt" : "2016-04-11T15:14:05Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ed85479a73924a69f915e68dfaf005020a4e45",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +2618,2622 @@\ttestKubelet.fakeCadvisor.On(\"DockerImagesFsInfo\").Return(cadvisorapiv2.FsInfo{}, nil)\n\ttestKubelet.fakeCadvisor.On(\"RootFsInfo\").Return(cadvisorapiv2.FsInfo{}, nil)\n\tversionInfo := &cadvisorapi.VersionInfo{\n\t\tKernelVersion:      \"3.16.0-0.bpo.4-amd64\",\n\t\tContainerOsVersion: \"Debian GNU/Linux 7 (wheezy)\","
  },
  {
    "id" : "f0e8dfa1-6ffc-49ca-8819-c10a6163f6cc",
    "prId" : 20020,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55e0c987-683b-4a43-b110-922f7a0aafc1",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "So some of these testing changes seem orthogonal to the original issue.  I would limit the scope only the version change. \n",
        "createdAt" : "2016-01-22T22:19:01Z",
        "updatedAt" : "2016-01-23T01:15:54Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "bf3856e5-c6d0-4004-a6c1-768e87ee2d84",
        "parentId" : "55e0c987-683b-4a43-b110-922f7a0aafc1",
        "authorId" : "d73d9d81-a5c8-4de5-a4be-626e5ab82041",
        "body" : "I wanted to add a test case to cover this, and in lieu of adding a new testing exactly like this one, I re-enabled this test and updated it. Some of its mocks were outdated and incomplete, but didn't want to solve the original issue without ensuring it is covered in a test.\n\nThe mocks are updated from other tests I had to touch in the previous PR. So a bit copypasta, but is also consistent.\n",
        "createdAt" : "2016-01-22T22:23:19Z",
        "updatedAt" : "2016-01-23T01:15:54Z",
        "lastEditedBy" : "d73d9d81-a5c8-4de5-a4be-626e5ab82041",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c99d5e9c01c5eef9b4ce195564e1221ba75379",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2729,2733 @@\tkubeClient := testKubelet.fakeKubeClient\n\tkubeClient.ReactionChain = testclient.NewSimpleFake(&api.NodeList{Items: []api.Node{\n\t\t{\n\t\t\tObjectMeta: api.ObjectMeta{Name: testKubeletHostname},\n\t\t\tSpec:       api.NodeSpec{},"
  },
  {
    "id" : "9f9ae573-d11e-47d9-871b-ece8879adf49",
    "prId" : 18611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c18f07d-3e45-4ceb-a3b5-0e8cc9b90663",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "nit: put these 3 consts in a `const ( ... )` block\n",
        "createdAt" : "2016-01-08T21:54:03Z",
        "updatedAt" : "2016-01-13T01:00:57Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2ffd007f7794f06b9a2f39d62280bd974d747c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +70,74 @@const testKubeletHostname = \"127.0.0.1\"\n\nconst testReservationCPU = \"200m\"\nconst testReservationMemory = \"100M\"\n"
  },
  {
    "id" : "6160a1f9-9d84-40b1-9e12-390f1bf06963",
    "prId" : 12894,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1c3489-96eb-4b11-9f5c-e9fbe05bf368",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Add LastProbeTime.\n",
        "createdAt" : "2015-08-28T22:53:30Z",
        "updatedAt" : "2015-09-18T12:26:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3b0b98cd-ecf9-40b2-afdc-cbdc490012c7",
        "parentId" : "3e1c3489-96eb-4b11-9f5c-e9fbe05bf368",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "We are not comparing the ProbeTime in tests, since we cant inject or override time.Now().\n\nOne way to fix that would be to add a setNowForTest() method to util.Time and update Now() to return that time instead of the current time, if it is set. Then we can check that thats the time set in LastProbeTime.\nBut I wasnt sure if thats a good way. WDYT?\n",
        "createdAt" : "2015-08-28T23:08:59Z",
        "updatedAt" : "2015-09-18T12:26:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "22e6dbdf-0a4a-4862-887e-aeb84b6c082a",
        "parentId" : "3e1c3489-96eb-4b11-9f5c-e9fbe05bf368",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "cc @lavalamp \nBased on irl discussion with @bgrant0607 we need a way to test fields based on util.Time.\nFiled https://github.com/kubernetes/kubernetes/issues/13399 to fix that.\n",
        "createdAt" : "2015-08-31T20:19:48Z",
        "updatedAt" : "2015-09-18T12:26:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6523ec142b31f82ad49b5ac46b11f01fc6661418",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1737,1741 @@\t\tType:               api.PodReady,\n\t\tStatus:             status,\n\t\tLastTransitionTime: transitionTime,\n\t\tReason:             reason,\n\t\tMessage:            message,"
  },
  {
    "id" : "079aa726-0690-431b-a49b-b85a63daa06a",
    "prId" : 12293,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd1894b-1bd7-40bd-8818-0ba396f0b69f",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "This seems like a common function pattern. Can you have a version of this function that can be reused or referenced?  So you can just call AddReactor(_,_, NilReactor)\n",
        "createdAt" : "2015-09-02T12:18:32Z",
        "updatedAt" : "2015-09-02T12:18:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "863d2431-7a8f-4007-b317-eaaf1126e9a7",
        "parentId" : "5dd1894b-1bd7-40bd-8818-0ba396f0b69f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Never mind, you appear to only do this once.  Fine to keep it as is\n",
        "createdAt" : "2015-09-02T12:20:33Z",
        "updatedAt" : "2015-09-02T12:20:33Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e180c258dfa1acdaf30ddac9838669247901727",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +3021,3025 @@\t\t}, nil\n\t})\n\tkubeClient.AddReactor(\"*\", \"*\", func(action testclient.Action) (bool, runtime.Object, error) {\n\t\treturn true, nil, fmt.Errorf(\"no reaction implemented for %s\", action)\n\t})"
  },
  {
    "id" : "2175f806-61b8-416e-b894-0d044a175062",
    "prId" : 9279,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf6a2e1-b2b9-4e13-b375-d8e41ed32c73",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The cleanup is nice!\n\nI wanted to move this test to dockertools/manager_test.go since it is one of the two tests in this file that still use fakeDocker (see #9081), but didn't have time to get to it.\n",
        "createdAt" : "2015-06-04T21:56:59Z",
        "updatedAt" : "2015-06-04T23:22:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "316352b1-9676-48ab-a9f3-25100a15c4ff",
        "parentId" : "3cf6a2e1-b2b9-4e13-b375-d8e41ed32c73",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Gotcha, I will try to fix this and the other in next PR.\n",
        "createdAt" : "2015-06-04T23:22:23Z",
        "updatedAt" : "2015-06-04T23:22:43Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197a9db4e0d68c1e625ed20c0c7dee802c6452a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2182,2186 @@\t\t{\n\t\t\tID:    infraContainerID,\n\t\t\tNames: []string{\"/k8s_POD\" + \"_\" + podName + \"_\" + podNamespace + \"_12345678_42\"},\n\t\t},\n\t\t{"
  },
  {
    "id" : "2244843a-8c85-4614-9fd2-536dc80a37c7",
    "prId" : 8149,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbb3aa2e-3443-465b-bde3-8ee0b76f8e07",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Can you add a test with an $(var) where var is undefined?\n",
        "createdAt" : "2015-05-19T17:27:05Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "1b98befc-8c97-4e96-9d17-46f7561037c7",
        "parentId" : "bbb3aa2e-3443-465b-bde3-8ee0b76f8e07",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Yeah - I also need to have tests that establish that the ordering semantics for resolution are correctly implemented.\n",
        "createdAt" : "2015-05-19T17:36:54Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "4f0d3f00-866e-4f97-bf47-24d95352405e",
        "parentId" : "bbb3aa2e-3443-465b-bde3-8ee0b76f8e07",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Added.\n",
        "createdAt" : "2015-05-23T18:36:36Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b338860aa740a05b3b27ce7c7aaef50d215b6d7",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1739,1743 @@\t\t\tns:   \"test1\",\n\t\t\tcontainer: &api.Container{\n\t\t\t\tEnv: []api.EnvVar{\n\t\t\t\t\t{\n\t\t\t\t\t\tName:  \"TEST_LITERAL\","
  },
  {
    "id" : "175cb426-fe89-4856-b407-0282b72d73f0",
    "prId" : 8149,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2810a88-7331-4cc5-983c-520bff6f84e1",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "I'm a little confused - how did the service env vars get inserted in the middle of the container env vars?\n",
        "createdAt" : "2015-05-19T21:39:41Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      },
      {
        "id" : "e7f22b95-2431-4893-9e08-8bf206c6b52b",
        "parentId" : "b2810a88-7331-4cc5-983c-520bff6f84e1",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I'm now confused too, and wondering if our reflect.DeepEqual (third party code for which the unit tests are not run -- though they worked for me when I recently ran them locally) implementation checks ordering.  I'll need to dig on this.\n",
        "createdAt" : "2015-05-19T21:51:11Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "f3c2bc04-97cf-4920-881d-3c4615c88a03",
        "parentId" : "b2810a88-7331-4cc5-983c-520bff6f84e1",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Ah, they're sorted in the test.\n",
        "createdAt" : "2015-05-22T22:14:56Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "6a39efb6-d663-40d2-833c-21328562d6f8",
        "parentId" : "b2810a88-7331-4cc5-983c-520bff6f84e1",
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "If they're sorted in the test anyway, would you mind keeping them in order here?\n",
        "createdAt" : "2015-05-23T23:42:58Z",
        "updatedAt" : "2015-05-27T04:14:15Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b338860aa740a05b3b27ce7c7aaef50d215b6d7",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +1846,1850 @@\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"OUT_OF_ORDER_TEST\",\n\t\t\t\t\tValue: \"$(OUT_OF_ORDER_TARGET)\",\n\t\t\t\t},"
  },
  {
    "id" : "8026c935-3ba5-40c1-a049-40042cb74ad7",
    "prId" : 6711,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd219439-2fa9-414e-aefb-e6e87ece104a",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Why extra inspect_image here?\n",
        "createdAt" : "2015-04-11T00:10:08Z",
        "updatedAt" : "2015-04-11T00:10:08Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "8a1dfa21-ab27-4142-9600-32b5e97942f6",
        "parentId" : "dd219439-2fa9-414e-aefb-e6e87ece104a",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Before, if the pod infra container is not running and no user containers can be found, we'd return an error. Now, it'd continue to see if there is any creation error and inspect the images for the user containers.\n",
        "createdAt" : "2015-04-11T00:15:56Z",
        "updatedAt" : "2015-04-11T00:15:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "0eeecb77-3008-43c9-bb77-9b3201e2b7f5",
        "parentId" : "dd219439-2fa9-414e-aefb-e6e87ece104a",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "ACK. \n",
        "createdAt" : "2015-04-11T00:19:28Z",
        "updatedAt" : "2015-04-11T00:19:28Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb417e82d7e40bb94d1928a01e06b8d7b1e6fa00",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +566,570 @@\n\tverifyCalls(t, fakeDocker, []string{\n\t\t\"list\", \"list\", \"list\", \"inspect_image\", \"create\", \"start\", \"inspect_container\", \"create\", \"start\", \"list\", \"inspect_container\", \"inspect_container\"})\n\n\tfakeDocker.Lock()"
  },
  {
    "id" : "611182fc-9a30-4803-b2bf-4453a8664666",
    "prId" : 6560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24d3806b-fdab-4d7b-9d3d-97d84b5720d8",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "unrelated to PR and no action required: We really do need to make these types of objects easier to make...I think @yujuhong has filed something along those lines before.\n",
        "createdAt" : "2015-04-08T15:47:08Z",
        "updatedAt" : "2015-04-08T16:45:09Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b945e72183b576e6ce1756061b7369e0a4f1fff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3510,3514 @@\t\t{\n\t\t\t// format is // k8s_<container-id>_<pod-fullname>_<pod-uid>\n\t\t\tNames: []string{\"/k8s_succeeded.\" + strconv.FormatUint(dockertools.HashContainer(&containers[0]), 16) + \"_foo_new_12345678_0\"},\n\t\t\tID:    \"1234\",\n\t\t},"
  },
  {
    "id" : "bf2635dd-0938-432c-9605-c92198e65722",
    "prId" : 6560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55fc94b2-3d32-493c-be32-474f80a505e4",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Not really related to this PR. It'd be nice if we can minimize having to list every call to the fake docker client in so many tests. We need some intermediate level functions to verify the function calls, and we should in general try testing the higher-level function in kubelet_test.go and leave the rest to dockertools unit tests. That's why I suggested integration tests to begin with, but I'm happy that we finally have some tests for restart policies here :)\n",
        "createdAt" : "2015-04-08T17:09:44Z",
        "updatedAt" : "2015-04-08T17:09:44Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "dcd204c2-4cab-459d-8354-a9d1e61538cc",
        "parentId" : "55fc94b2-3d32-493c-be32-474f80a505e4",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "+1 these are such a pain and don't bring us much value.\n",
        "createdAt" : "2015-04-08T17:11:33Z",
        "updatedAt" : "2015-04-08T17:11:33Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "fe633ea7-e897-4adc-b4f5-74381ed19039",
        "parentId" : "55fc94b2-3d32-493c-be32-474f80a505e4",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I am trying to add an integration test in following pr.\n",
        "createdAt" : "2015-04-08T18:39:47Z",
        "updatedAt" : "2015-04-08T18:39:47Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "e82c659b-4d3b-4535-a74e-02d1fa38f57a",
        "parentId" : "55fc94b2-3d32-493c-be32-474f80a505e4",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Think the unit test is fine now since integration test also uses the fake docker.\nBut we should definitely figure out these painful verifyCall stuff. Maybe reduce the types of function calls by using fake container runtime will help somehow...\n",
        "createdAt" : "2015-04-08T22:20:14Z",
        "updatedAt" : "2015-04-08T22:20:14Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b945e72183b576e6ce1756061b7369e0a4f1fff",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +3563,3567 @@\t\t{\n\t\t\tapi.RestartPolicyNever,\n\t\t\t[]string{\"list\", \"list\", \"list\", \"inspect_container\", \"inspect_container\", \"inspect_container\", \"stop\", \"list\", \"inspect_container\", \"inspect_container\"},\n\t\t\t[]string{},\n\t\t\t[]string{\"9876\"},"
  },
  {
    "id" : "492013e7-d711-4ef6-8795-621a7d2bc0f4",
    "prId" : 6022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "254c820c-3239-49d1-859f-467ea619a66e",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Nice :)\n",
        "createdAt" : "2015-03-26T22:21:18Z",
        "updatedAt" : "2015-03-26T22:26:50Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6820bd0ca6869654f35b231618bd3ca33478388",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +145,149 @@\nfunc verifyStringArrayEqualsAnyOrder(t *testing.T, actual, expected []string) {\n\tvar act, exp []string\n\tcopy(act, actual)\n\tcopy(exp, expected)"
  },
  {
    "id" : "3bc529f6-3b24-4f22-b13c-93e9cc408646",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6776bfb5-cae9-49d4-a550-72f06bd29036",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "I know this line is not part of this PR, but why write `append([]docker.APIContainers{}, containers...)` when you could write `containers` ?\n",
        "createdAt" : "2015-02-27T08:13:37Z",
        "updatedAt" : "2015-02-27T08:13:37Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7191c5c7fd2e8f83eac9c1dc7868405d661758f3",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +300,304 @@\tfakeDocker := &dockertools.FakeDockerClient{\n\t\tErr:           fmt.Errorf(\"sample error\"),\n\t\tContainerList: append([]docker.APIContainers{}, containers...),\n\t}\n\tkubelet, _, _ := newTestKubelet(t)"
  },
  {
    "id" : "a6318951-1cb9-4098-a1f4-6017ffcd4004",
    "prId" : 3331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2bb8332-d0e7-4ad1-a6da-ae984ba87d56",
        "parentId" : null,
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "I might be misunderstanding the test cases: it looks like they're all using `api.NamespaceDefault`. Is that intentional?\n",
        "createdAt" : "2015-01-12T20:35:38Z",
        "updatedAt" : "2015-01-14T22:06:56Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "fed4c20d-5621-48c3-ada1-97c3be740e8c",
        "parentId" : "a2bb8332-d0e7-4ad1-a6da-ae984ba87d56",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@ironcladlou That's the namespace to read the master service out of, not the namespace of the pod.\n",
        "createdAt" : "2015-01-12T20:36:13Z",
        "updatedAt" : "2015-01-14T22:06:56Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "7625f2f9-c8a5-4919-b5ee-67464198417e",
        "parentId" : "a2bb8332-d0e7-4ad1-a6da-ae984ba87d56",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@ironcladlou I have changed the last test to exercise switching out the namespace to read the master service info from\n",
        "createdAt" : "2015-01-12T20:40:37Z",
        "updatedAt" : "2015-01-14T22:06:56Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd834ae84d43d59bf29e69a4442e4242fe6d5ed4",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +2008,2012 @@\t\t\t\t},\n\t\t\t},\n\t\t\tapi.NamespaceDefault,\n\t\t\tfalse,\n\t\t\tutil.NewStringSet(\"FOO=BAR\","
  },
  {
    "id" : "77d36dfc-13d3-4877-945e-a096ab69e606",
    "prId" : 3331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3f8ee7c-141d-4785-8590-414cc6650b8f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "add service with `Name: \"not-special\" Namespace: api.NamespaceDefault` and then test it is visible for a pod in `api.NamespaceDefault`\n",
        "createdAt" : "2015-01-13T04:52:46Z",
        "updatedAt" : "2015-01-14T22:06:56Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd834ae84d43d59bf29e69a4442e4242fe6d5ed4",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +1974,1978 @@\t\t\t\tPortalIP: \"1.2.3.7\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tObjectMeta: api.ObjectMeta{Name: \"not-special\", Namespace: \"kubernetes\"},"
  },
  {
    "id" : "d1a30901-9772-4345-abcf-427032b9bbf0",
    "prId" : 2388,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbaee066-1784-4784-8e5b-e49128490368",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This (\"want:latest\") isn't a state of knowledge that can actually exist in reality-- you never know if you have the latest thing sitting on disk. Or do I misunderstand?\n",
        "createdAt" : "2014-11-15T00:19:25Z",
        "updatedAt" : "2014-11-15T00:19:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d9952845-43c2-4323-870b-ca36edb8d8ee",
        "parentId" : "dbaee066-1784-4784-8e5b-e49128490368",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "HasImage in fakeDockerPull represents the existence of image on fake node, which means IsImagePresent call will return true here. Then the test case with want:latest pull it again even it is existing. \n",
        "createdAt" : "2014-11-15T00:22:11Z",
        "updatedAt" : "2014-11-15T00:22:11Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce145545b955f669d77761b362309eb7669273ef",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1534,1538 @@\tkubelet, _, fakeDocker := newTestKubelet(t)\n\tpuller := kubelet.dockerPuller.(*dockertools.FakeDockerPuller)\n\tpuller.HasImages = []string{\"existing_one\", \"want:latest\"}\n\tkubelet.networkContainerImage = \"custom_image_name\"\n\tfakeDocker.ContainerList = []docker.APIContainers{}"
  },
  {
    "id" : "38b9b52c-0e7a-4a7f-8368-7e18675b29e1",
    "prId" : 2388,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c49b62a-881e-494a-ad1e-865e0b318fd9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "want:latest should get pulled, no?\n",
        "createdAt" : "2014-11-15T00:19:31Z",
        "updatedAt" : "2014-11-15T00:19:31Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "52636d86-5604-4fd1-aaa1-c7307215147f",
        "parentId" : "0c49b62a-881e-494a-ad1e-865e0b318fd9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, the line wrapped and I didn't see it. OK. LGTM :)\n",
        "createdAt" : "2014-11-15T00:19:53Z",
        "updatedAt" : "2014-11-15T00:19:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b0111031-33b2-4ba2-a2e8-e95f5615a4f1",
        "parentId" : "0c49b62a-881e-494a-ad1e-865e0b318fd9",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "This means it is pulled again. you can see that pull_never_image is not in this list. \n",
        "createdAt" : "2014-11-15T00:22:42Z",
        "updatedAt" : "2014-11-15T00:22:42Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce145545b955f669d77761b362309eb7669273ef",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1562,1566 @@\tfakeDocker.Lock()\n\n\tif !reflect.DeepEqual(puller.ImagesPulled, []string{\"custom_image_name\", \"pull_always_image\", \"pull_if_not_present_image\", \"want:latest\"}) {\n\t\tt.Errorf(\"Unexpected pulled containers: %v\", puller.ImagesPulled)\n\t}"
  },
  {
    "id" : "69713c18-82b4-404e-ba54-3342cb65c046",
    "prId" : 2224,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21508212-5a2d-46f0-b117-734aa00e20d7",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "\" #comment\" doesn't seem to be tested\n",
        "createdAt" : "2014-12-24T00:58:05Z",
        "updatedAt" : "2014-12-29T17:18:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "59896e2b-d75c-4508-ab4f-856e4484bc53",
        "parentId" : "21508212-5a2d-46f0-b117-734aa00e20d7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't understand what you mean here.  The line prior to this?\n",
        "createdAt" : "2014-12-24T01:15:10Z",
        "updatedAt" : "2014-12-29T17:18:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d2f6fdc8-fb16-478c-8219-c8d01ade0f3b",
        "parentId" : "21508212-5a2d-46f0-b117-734aa00e20d7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry I meant the whitespace-- there's no test that a # with whitespace in front is still a comment.\n",
        "createdAt" : "2014-12-24T01:16:46Z",
        "updatedAt" : "2014-12-29T17:18:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "32a59477a5a39647bd6519446a393fb02c9bf95e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1737,1741 @@\t\t{\"#comment\\n\", []string{}, []string{}},\n\t\t{\" #comment\\n\", []string{}, []string{}},\n\t\t{\"#comment\\n#comment\", []string{}, []string{}},\n\t\t{\"#comment\\nnameserver\", []string{}, []string{}},\n\t\t{\"#comment\\nnameserver\\nsearch\", []string{}, []string{}},"
  },
  {
    "id" : "1e577e0b-a365-4d4b-80a0-aa3dd7ae4d5d",
    "prId" : 827,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99243f22-f7c0-46f6-b3b2-11ffa26e6cfa",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also test parsing a name without a hash to see it comes out 0?\n",
        "createdAt" : "2014-08-08T03:54:20Z",
        "updatedAt" : "2014-08-08T20:32:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cb2ace7b-80bf-46b9-a4c4-1644675a7895",
        "parentId" : "99243f22-f7c0-46f6-b3b2-11ffa26e6cfa",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-08-08T05:08:16Z",
        "updatedAt" : "2014-08-08T20:32:22Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2986db9885f44b52ff663de0a078c0e1bb221049",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +83,87 @@\t)\n\tpodFullName := fmt.Sprintf(\"%s.%s\", podName, podNamespace)\n\treturnedPodFullName, returnedContainerName, hash := parseDockerName(name)\n\tif podFullName != returnedPodFullName || containerName != returnedContainerName || computedHash != hash {\n\t\tt.Errorf(\"For (%s, %s, %d), unpacked (%s, %s, %d)\", podFullName, containerName, computedHash, returnedPodFullName, returnedContainerName, hash)"
  },
  {
    "id" : "493d0e64-0c7a-48dd-8a73-0c0f3d8c5a16",
    "prId" : 213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2903ed5d-27eb-41e4-aa1c-6e76315c83e1",
        "parentId" : null,
        "authorId" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "body" : "`if err = kubelet...; err != nil {`\n",
        "createdAt" : "2014-06-24T05:14:51Z",
        "updatedAt" : "2014-06-24T23:57:46Z",
        "lastEditedBy" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "tags" : [
        ]
      },
      {
        "id" : "9df63d9a-0c91-4077-b4aa-efb2880b7e91",
        "parentId" : "2903ed5d-27eb-41e4-aa1c-6e76315c83e1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I prefer that form when the side effects of the call are logically bound up with the body of the if statement. I can change it if you feel especially strongly.\n",
        "createdAt" : "2014-06-24T17:32:09Z",
        "updatedAt" : "2014-06-24T23:57:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7968ce00b2a66b9d7d3067404e406d19a1ddd55",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +858,862 @@\n\terr = kubelet.extractFromHTTP(testServer.URL, updateChannel)\n\tif err != nil {\n\t\tt.Errorf(\"Unexpected error: %#v\", err)\n\t}"
  },
  {
    "id" : "871397df-1f75-49d6-9d90-f02a815754b3",
    "prId" : 174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f82fc60-7dfb-41dc-8b24-829aab7120be",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is there a reason not to use reflect.DeepEqual? Do we expect things to change order?\n",
        "createdAt" : "2014-06-19T22:13:41Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c3ab05bf-a482-4157-907d-0444e4d83bf7",
        "parentId" : "1f82fc60-7dfb-41dc-8b24-829aab7120be",
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "Because they are slices with different type and reflect.DeepEqual will compare the type of the slice as well. (One is `[]info.Percentile`; another is `[]api.Percentile`)\n",
        "createdAt" : "2014-06-19T22:18:56Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      },
      {
        "id" : "b2246a8b-8dd7-4784-b922-93cdf2463851",
        "parentId" : "1f82fc60-7dfb-41dc-8b24-829aab7120be",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, thanks, I missed that.\n",
        "createdAt" : "2014-06-19T22:22:07Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a64856d0ce30c8cdc25a8e9fd0d2eb64739da",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +934,938 @@\tt *testing.T,\n) {\n\tif len(cadvisorPercentiles) != len(kubePercentiles) {\n\t\tt.Errorf(\"cadvisor gives %v percentiles; kubelet got %v\", len(cadvisorPercentiles), len(kubePercentiles))\n\t\treturn"
  },
  {
    "id" : "f61318f0-0b14-46ee-9348-ccc048437d19",
    "prId" : 174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "331fff75-4e28-4dcf-9a79-120039d870f8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@jbeda: Do we require any particular license from our dependencies? \n",
        "createdAt" : "2014-06-19T22:16:59Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "de2ebc43-f0ea-48f1-af48-e06ef1c1f347",
        "parentId" : "331fff75-4e28-4dcf-9a79-120039d870f8",
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "I checked the LICENISE of testify. It's MIT license, which is compatible with Apache 2.0, no? I'm not a lawyer but this library is quite handy to mock object.\n",
        "createdAt" : "2014-06-19T22:20:33Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      },
      {
        "id" : "b381f843-773a-4fc9-832b-fc56fbc0fe7a",
        "parentId" : "331fff75-4e28-4dcf-9a79-120039d870f8",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Since cAdvisor is our own code, I don't think it matters.\n",
        "createdAt" : "2014-06-19T22:20:37Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "bfe40f88-0f48-4c51-b12f-76bcfcfdb639",
        "parentId" : "331fff75-4e28-4dcf-9a79-120039d870f8",
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "@brendanburns cAdvisor is fine. But there are two other dependencies using MIT license. Is that fine?\n\nOne is [testify](https://github.com/stretchr/testify), another one is [objx](https://github.com/stretchr/objx)\n",
        "createdAt" : "2014-06-19T22:23:48Z",
        "updatedAt" : "2014-06-20T04:22:14Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a64856d0ce30c8cdc25a8e9fd0d2eb64739da",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +32,36 @@\t\"github.com/fsouza/go-dockerclient\"\n\t\"github.com/google/cadvisor/info\"\n\t\"github.com/stretchr/testify/mock\"\n)\n"
  }
]