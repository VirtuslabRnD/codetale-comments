[
  {
    "id" : "bdbf1422-ea72-4ec9-9d7c-067375bf05d3",
    "prId" : 99393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99393#pullrequestreview-605267320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5878d1d1-73a1-4d0e-8129-844f5ca86f26",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: move them below lock (as they are effectively protected by that lock too - the often-used convention is to first define mutex and then variables it protects)\r\n\r\nAlso update the comment in line 57.",
        "createdAt" : "2021-03-05T14:44:58Z",
        "updatedAt" : "2021-03-08T08:56:04Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a3b0abd678c66a9a04e553b6d6ae49671a4779",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +57,61 @@\t// and protecting from closing stopCh multiple times.\n\tlock           sync.Mutex\n\tlastAccessTime time.Time\n\tstopped        bool\n\timmutable      bool"
  },
  {
    "id" : "54da5c1a-341c-427e-a732-65970407a4dd",
    "prId" : 99393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99393#pullrequestreview-606067450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7755da6-b60d-452b-ba48-3ca638bacf83",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "add a comment like:\r\n\r\nwaitGroup is used to ensure that there won't be two concurrent calls to reflector.Run",
        "createdAt" : "2021-03-08T08:44:20Z",
        "updatedAt" : "2021-03-08T08:56:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "57a3b0abd678c66a9a04e553b6d6ae49671a4779",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +52,56 @@\n\t// waitGroup is used to ensure that there won't be two concurrent calls to reflector.Run\n\twaitGroup sync.WaitGroup\n\n\t// lock is to ensure the access and modify of lastAccessTime, stopped, and immutable are thread safety,"
  },
  {
    "id" : "b1ac091a-db18-4511-a03d-db7d90f63624",
    "prId" : 87718,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87718#pullrequestreview-356521046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ba698f-9d2e-4c14-841f-7abdf23585d9",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Is there any chance of a race between the watchHandler and this stop, such that hasSynced is set to false after the above check and so cannot be set back to true?",
        "createdAt" : "2020-02-11T01:13:50Z",
        "updatedAt" : "2020-02-11T01:13:50Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "b8394b88-d9d1-438e-915f-1b60577cb112",
        "parentId" : "b6ba698f-9d2e-4c14-841f-7abdf23585d9",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "hasSynced - as implemented:\r\n```\r\nhasSynced: func() (bool, error) { return reflector.LastSyncResourceVersion() != \"\", nil },\r\n```\r\nwill never be set to false if it was already set to true.\r\n\r\nSo given that before we do anything we wait for it to become true (L189), it will never be set to false again.\r\n\r\nAs for other races - stop() is explicitly protected by its own lock, so that should work fine.",
        "createdAt" : "2020-02-11T09:48:16Z",
        "updatedAt" : "2020-02-11T09:48:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b11b7d354de7971f87df226d97c35757a191889b",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +210,214 @@\t\t// we limit ourselves to just quickly stop the reflector here.\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.ImmutableEphemeralVolumes) && c.isImmutable(object) {\n\t\t\tif item.stop() {\n\t\t\t\tklog.V(4).Infof(\"Stopped watching for changes of %q/%q - object is immutable\", namespace, name)\n\t\t\t}"
  }
]