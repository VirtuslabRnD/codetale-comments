[
  {
    "id" : "405c6856-4564-4834-bdef-08d8491e0fa6",
    "prId" : 59286,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59286#pullrequestreview-98827012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10191fdd-3ac5-4c3a-afea-a7dc8bf9d4bf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "For future work - we should move the IsIPv6() stuff to a more generic place.",
        "createdAt" : "2018-02-23T07:12:54Z",
        "updatedAt" : "2018-02-23T07:39:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "098a4467fea04397dca83b552920f781830af96f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\treturn utilerrors.NewAggregate([]error{err, hm.closeHostports(hostportMappings)})\n\t}\n\tisIpv6 := conntrack.IsIPv6(podPortMapping.IP)\n\n\t// Remove conntrack entries just after adding the new iptables rules. If the conntrack entry is removed along with"
  },
  {
    "id" : "e53f9847-d23e-407f-9d03-5e7186093e5e",
    "prId" : 55153,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55153#pullrequestreview-76679686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Does that mean by changing the chain name, we are orphaning the old chain/rule? Is that acceptable or anyway to workaround?\r\n\r\n@kubernetes/sig-network-pr-reviews ",
        "createdAt" : "2017-11-06T19:04:35Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "4232db99-1f25-4287-8f7c-f2eae619159f",
        "parentId" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "authorId" : "38428f84-e217-4cb8-8916-cc4e674102d6",
        "body" : "Add a commit to clean up these old chains/rules as well.",
        "createdAt" : "2017-11-08T07:02:51Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "38428f84-e217-4cb8-8916-cc4e674102d6",
        "tags" : [
        ]
      },
      {
        "id" : "7cd8fdf9-1f18-416c-a101-28a6a5aa747a",
        "parentId" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "In fact, thought about this again, I wonder why it would be an issue changing this function. Can't we assume upon node/kubelet upgrade, all iptables rules will not be retained because node has been restarted? Am I suggesting an unnecessary cleanup? Would be great to have guidance from @thockin and @freehan ",
        "createdAt" : "2017-11-13T01:00:59Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "cdae56be-2bb8-446b-bf56-c156ce0cb24a",
        "parentId" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "authorId" : "38428f84-e217-4cb8-8916-cc4e674102d6",
        "body" : "> Can't we assume upon node/kubelet upgrade, all iptables rules will not be retained because node has been restarted?\r\n\r\nðŸ˜• Is this true? I don't think everyone will restart node upon upgrade. Is this the required step of upgrading to the next release or something?\r\n",
        "createdAt" : "2017-11-13T03:43:11Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "38428f84-e217-4cb8-8916-cc4e674102d6",
        "tags" : [
        ]
      },
      {
        "id" : "c823a183-911b-45d0-ae8c-e2ee29789fc0",
        "parentId" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "At least that is what happens with [gce/upgrade.sh](https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/upgrade.sh) :)\r\n\r\nI'm not aware of any supported per-system-component upgrade mechanism in k8s yet, not sure if someone already support that...",
        "createdAt" : "2017-11-13T06:59:03Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "a24e0a98-7d6a-414c-85dd-4bdeaf4e3c5c",
        "parentId" : "a84d7143-0bc1-4f25-94c9-e67cdfc25eef",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think this is better.  It's low cost.",
        "createdAt" : "2017-11-15T05:41:08Z",
        "updatedAt" : "2017-11-15T07:15:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6375c20b711eef0434495b0a77accef23a96920",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +249,253 @@// they are the harder they are to read.\n// WARNING: Please do not change this function. Otherwise, HostportManager may not be able to\n// identify existing iptables chains.\nfunc getHostportChain(id string, pm *PortMapping) utiliptables.Chain {\n\thash := sha256.Sum256([]byte(id + strconv.Itoa(int(pm.HostPort)) + string(pm.Protocol)))"
  },
  {
    "id" : "fb737239-985d-4622-9f98-b647f059f786",
    "prId" : 40948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40948#pullrequestreview-20599894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "868135ed-4a3a-4432-911a-4d9d25b713f7",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I assume any error after this point will trigger a retry. On retry, will openHostports fail because the port is already open?",
        "createdAt" : "2017-02-06T23:59:15Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "54a9eb13-9069-41a5-9297-553aa08cf2c6",
        "parentId" : "868135ed-4a3a-4432-911a-4d9d25b713f7",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "nope. openHostports will close all the opened ports for the pod if any error happens",
        "createdAt" : "2017-02-07T01:38:45Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "0c68a3e7-a4f9-4559-a40a-7356868bf3ac",
        "parentId" : "868135ed-4a3a-4432-911a-4d9d25b713f7",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "No I mean if getExistingHostportIPTablesRules errs, or syncIPTables",
        "createdAt" : "2017-02-07T01:45:14Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "0b035631-01e0-4850-bf72-870aebba0890",
        "parentId" : "868135ed-4a3a-4432-911a-4d9d25b713f7",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Added defer function in Add and Remove to close hostports based on whether error occurs",
        "createdAt" : "2017-02-07T19:39:10Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9eca6b510c67a74f1dad5a39dd044d2b697b50",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@\tif err != nil {\n\t\treturn err\n\t}\n\tfor hostport, socket := range ports {\n\t\thm.hostPortMap[hostport] = socket"
  },
  {
    "id" : "b0cade3c-abb4-464d-a0fb-bd4586a73af7",
    "prId" : 40948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40948#pullrequestreview-20413437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1ddbc85-d5f1-4848-a558-341da217c1ee",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "this is an insipid function, do we really need it? are we planning to use it anywhere else? (I only see one call)",
        "createdAt" : "2017-02-07T00:55:36Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "802de8d3-85d0-4a09-8810-7e176787b417",
        "parentId" : "e1ddbc85-d5f1-4848-a558-341da217c1ee",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "I once used it twice. But later get rid of one use.",
        "createdAt" : "2017-02-07T01:41:48Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9eca6b510c67a74f1dad5a39dd044d2b697b50",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +320,324 @@\n// filterChains deletes all entries of filter chains from chain map\nfunc filterChains(chains map[utiliptables.Chain]string, filterChains []utiliptables.Chain) {\n\tfor _, chain := range filterChains {\n\t\tif _, ok := chains[chain]; ok {"
  },
  {
    "id" : "703fc988-3626-4d3c-ac59-9c4264f8cea8",
    "prId" : 40948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40948#pullrequestreview-20603252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d799d0c5-4068-41ee-a01a-7943e5df357d",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "nit: problem with raw functions is they're hard to unittests",
        "createdAt" : "2017-02-07T01:08:23Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "17ec1407-f520-4bea-8be8-c1c254937f87",
        "parentId" : "d799d0c5-4068-41ee-a01a-7943e5df357d",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "We have a fakeIptables that implements the raw functions. \r\n\r\nhostport_manager_test.go tested complete Add/Remove sequences. ",
        "createdAt" : "2017-02-07T19:52:09Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9eca6b510c67a74f1dad5a39dd044d2b697b50",
    "line" : 277,
    "diffHunk" : "@@ -1,1 +275,279 @@// getExistingHostportIPTablesRules retrieves raw data from iptables-save, parse it,\n// return all the hostport related chains and rules\nfunc getExistingHostportIPTablesRules(iptables utiliptables.Interface) (map[utiliptables.Chain]string, []string, error) {\n\tiptablesSaveRaw, err := iptables.Save(utiliptables.TableNAT)\n\tif err != nil { // if we failed to get any rules"
  }
]