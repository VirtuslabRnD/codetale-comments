[
  {
    "id" : "bcc86582-7d43-4846-93b7-95212fadc214",
    "prId" : 40948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40948#pullrequestreview-20144051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d70038-80df-4da5-a994-0b2bf3b586bc",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "curious if a simple bind()ed socket shows up in /proc/net/tcp",
        "createdAt" : "2017-02-04T01:27:09Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "1c6f5f29-b0dc-4d34-892f-b49680592067",
        "parentId" : "71d70038-80df-4da5-a994-0b2bf3b586bc",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "No it doesn't, obviously, because the protocol isn't set till you listen. In fact 2 processes can bind to the same socket as long as the reuse option is set. I've only managed to get the raw bind to show up in the output of lsof -p <pid of proc>, or lsof -l, and it'll explicitly say \"can't identify protocol\".",
        "createdAt" : "2017-02-04T03:42:04Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "761439c2-44d4-44fa-ac20-bf54823193bb",
        "parentId" : "71d70038-80df-4da5-a994-0b2bf3b586bc",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "got it",
        "createdAt" : "2017-02-04T07:54:40Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9eca6b510c67a74f1dad5a39dd044d2b697b50",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@\t// should be enough, but I can't figure out a way to e2e test without\n\t// it.  Tools like 'ss' and 'netstat' do not show sockets that are\n\t// bind()ed but not listen()ed, and at least the default debian netcat\n\t// has no way to avoid about 10 seconds of retries.\n\tvar socket closeable"
  },
  {
    "id" : "2d4f55f0-f574-44ed-974a-5f5ade4bdc6d",
    "prId" : 40948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40948#pullrequestreview-20396954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bce96adc-d94f-4ffd-bbbc-7db09aafa40c",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "What happens if you try to close an already closed socket?",
        "createdAt" : "2017-02-06T22:27:02Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "f94afe9e-972d-4bc0-baa5-468553e69472",
        "parentId" : "bce96adc-d94f-4ffd-bbbc-7db09aafa40c",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "If go doesn't already trivially no-op it we probably should (like via a field on the struct indicating that it's already been closed)",
        "createdAt" : "2017-02-06T23:14:48Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "d4520fb8-58b8-4c64-97bd-ffd769b555f6",
        "parentId" : "bce96adc-d94f-4ffd-bbbc-7db09aafa40c",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "it will return an error saying \"use of closed network connection\"",
        "createdAt" : "2017-02-06T23:29:25Z",
        "updatedAt" : "2017-02-08T17:36:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9eca6b510c67a74f1dad5a39dd044d2b697b50",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@\tif retErr != nil {\n\t\tfor hp, socket := range ports {\n\t\t\tif err := socket.Close(); err != nil {\n\t\t\t\tglog.Errorf(\"Cannot clean up hostport %d for pod %s: %v\", hp.port, getPodFullName(podPortMapping), err)\n\t\t\t}"
  }
]