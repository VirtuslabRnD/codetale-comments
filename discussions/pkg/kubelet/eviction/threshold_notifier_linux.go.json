[
  {
    "id" : "cf01855b-ee7d-44cf-abae-ff47a23496aa",
    "prId" : 64643,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64643#pullrequestreview-126973327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f09e10f9-4c45-469a-adf4-77b0a2a28ffd",
        "parentId" : null,
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "Oh, I see... But why not keep waiting in this case? Since that seems to be what the caller is doing anyways, just call wait() again...",
        "createdAt" : "2018-06-07T17:44:22Z",
        "updatedAt" : "2018-06-11T18:38:14Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      },
      {
        "id" : "6f12966f-8b59-4cd9-9f4b-2db381c99067",
        "parentId" : "f09e10f9-4c45-469a-adf4-77b0a2a28ffd",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "It gives us the opportunity to check the stop channel in the main loop.  I could pass the stop channel in, and have it do that itself, but we would still need to keep the loop in the `Start` function anyways to handle multiple events.",
        "createdAt" : "2018-06-07T20:16:43Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "780c21eb-049e-435d-852a-e8709cdbd0c3",
        "parentId" : "f09e10f9-4c45-469a-adf4-77b0a2a28ffd",
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "I actually think passing this a channel is a slightly better API (also would get immediate notifications instead of depending on the timeout to poll \"stop\".)\r\n\r\nBut I can see how it might be hard to implement that, since you need to bridge Go channels and Linux epoll...\r\n\r\nI guess the way to do that would be to open a pipe here and add the read side of the pipe to the epoll you're blocking on.\r\n\r\nThen launch a goroutine that would block on the channel and, if it gets anything from it, write to the write end of the pipe (therefore leaving the epoll.)\r\n\r\nBut that's a lot of code, for little gain...\r\n\r\nSo I guess fine to keep this as is.\r\n\r\nI'm not too pleased about the return of `(bool, error)`... Would there be a better way to return \"timeout\" as a specific error and check for that condition?\r\n\r\nIn that case, you might only want to return that on \"timeout\", in all other cases where you're currently returning false, you could just loop inside this function again...\r\n\r\nBut maybe that's too much bikeshedding and we should leave this alone... Up to you, whatever you prefer is fine with me.\r\n",
        "createdAt" : "2018-06-07T21:06:58Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      },
      {
        "id" : "2a3b3e8e-ec2c-4782-aefe-95b3d3ba67ce",
        "parentId" : "f09e10f9-4c45-469a-adf4-77b0a2a28ffd",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Ill change to a timeout error",
        "createdAt" : "2018-06-07T22:01:18Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "f1f83c11-b7af-4a04-b0b2-b3290e3ee5c6",
        "parentId" : "f09e10f9-4c45-469a-adf4-77b0a2a28ffd",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "or err... There are a lot of cases where we just want to retry the wait... I think I am just going to leave it alone",
        "createdAt" : "2018-06-07T22:02:50Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7deb6d9e0b1aa53b5d0981082109dfee37628aa",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t}\n\t}\n\t// An event occurred that we don't care about.\n\treturn false, nil\n}"
  },
  {
    "id" : "070e9be1-0610-442e-9792-4b7de265f18c",
    "prId" : 64643,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64643#pullrequestreview-127251623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31f03352-9487-4cb5-aef4-a16c5838554a",
        "parentId" : null,
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Is the reason this shouldn't happen because we're reading from eventfd?",
        "createdAt" : "2018-06-07T18:48:33Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "f66f9345-a1ef-4353-a789-a480ccb3c428",
        "parentId" : "31f03352-9487-4cb5-aef4-a16c5838554a",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "From http://pubs.opengroup.org/onlinepubs/9699919799/functions/poll.html\r\n`A device has been disconnected, or a pipe or FIFO has been closed by the last process that had it open for writing. Once set, the hangup state of a FIFO shall persist until some process opens the FIFO for writing or until all read-only file descriptors for the FIFO are closed. This event and POLLOUT are mutually-exclusive; a stream can never be writable if a hangup has occurred. However, this event and POLLIN, POLLRDNORM, POLLRDBAND, or POLLPRI are not mutually-exclusive. This flag is only valid in the revents bitmask; it shall be ignored in the events member.`\r\nI think this would only happen if the kernel closed the eventfd?  It should be the only process that has it open for writing...  ",
        "createdAt" : "2018-06-08T17:35:52Z",
        "updatedAt" : "2018-06-11T18:38:15Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7deb6d9e0b1aa53b5d0981082109dfee37628aa",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +157,161 @@\t\tif event.Fd == int32(eventfd) {\n\t\t\tif event.Events&unix.EPOLLHUP != 0 || event.Events&unix.EPOLLERR != 0 || event.Events&unix.EPOLLIN != 0 {\n\t\t\t\t// EPOLLHUP: should not happen, but if it does, treat it as a wakeup.\n\n\t\t\t\t// EPOLLERR: If an error is waiting on the file descriptor, we should pretend"
  }
]