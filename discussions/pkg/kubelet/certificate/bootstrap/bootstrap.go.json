[
  {
    "id" : "80c72982-51f9-4363-a49f-b6254c1aec9a",
    "prId" : 92786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92786#pullrequestreview-443132059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef9e851b-37c3-4046-b385-293fc63cf078",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also pass `ctx` to the `cli.Get().AbsPath(\"/healthz\").Do(context.TODO())` call below?",
        "createdAt" : "2020-07-06T13:57:03Z",
        "updatedAt" : "2020-07-06T14:31:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5ab546c3-5061-4415-b71b-0521142f8963",
        "parentId" : "ef9e851b-37c3-4046-b385-293fc63cf078",
        "authorId" : "f3e672e5-b55c-4e3f-9443-b9abf25195da",
        "body" : "done",
        "createdAt" : "2020-07-06T14:33:28Z",
        "updatedAt" : "2020-07-06T14:33:28Z",
        "lastEditedBy" : "f3e672e5-b55c-4e3f-9443-b9abf25195da",
        "tags" : [
        ]
      }
    ],
    "commit" : "db7194177538d5efc84af621c4400174a2836b3b",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +287,291 @@\t}\n\n\tctx, cancel := context.WithTimeout(ctx, deadline)\n\tdefer cancel()\n"
  },
  {
    "id" : "a3b75712-ef73-4adc-a467-245f34883b05",
    "prId" : 69890,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69890#pullrequestreview-167199092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8302433-5609-4c2a-8ef9-63898a4eec2d",
        "parentId" : null,
        "authorId" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "body" : "Is this only used to generate `pemPath`?\r\nmoveit down to where it's used.",
        "createdAt" : "2018-10-17T22:33:00Z",
        "updatedAt" : "2018-11-17T02:51:21Z",
        "lastEditedBy" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "tags" : [
        ]
      },
      {
        "id" : "a4fe3209-3630-4b75-8c72-7c78d46e343f",
        "parentId" : "a8302433-5609-4c2a-8ef9-63898a4eec2d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "it's high in the function to fail earlier on local config",
        "createdAt" : "2018-10-23T03:29:25Z",
        "updatedAt" : "2018-11-17T02:51:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "de293b2d7ddb687850258370f2a7f30f224f0ec1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +63,67 @@\t}\n\n\tstore, err := certificate.NewFileStore(\"kubelet-client\", certDir, certDir, \"\", \"\")\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"unable to build bootstrap cert store\")"
  },
  {
    "id" : "f249b33f-582e-4f1d-8e24-d827b8a1ca8f",
    "prId" : 69890,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69890#pullrequestreview-175078621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcd823e1-d7ab-43d8-b335-358b09fa7b0c",
        "parentId" : null,
        "authorId" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "body" : "Should we always parse and return bootstrap kubeconfig in certConfig anyway?\r\nThe caller should default to userConfig when it's valid and certConfig otherwise to re-bootstrap. Not returning distinct certConfig as a fallback can get the caller stuck without rotation option.",
        "createdAt" : "2018-11-14T18:55:46Z",
        "updatedAt" : "2018-11-17T02:51:21Z",
        "lastEditedBy" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "tags" : [
        ]
      },
      {
        "id" : "2d6d88bd-a7eb-49be-a9cd-8d5e8c0ec2aa",
        "parentId" : "bcd823e1-d7ab-43d8-b335-358b09fa7b0c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should we?  Probably.  But this is the current behavior.  And after five minutes without a rotation the kubelet restarts.  So preserving legacy behavior.",
        "createdAt" : "2018-11-14T21:08:43Z",
        "updatedAt" : "2018-11-17T02:51:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "de293b2d7ddb687850258370f2a7f30f224f0ec1",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +73,77 @@\t}\n\n\t// use the current client config\n\tif ok {\n\t\tclientConfig, err := loadRESTClientConfig(kubeconfigPath)"
  },
  {
    "id" : "14f60859-4e8e-48f8-ab4c-303347d5d27d",
    "prId" : 66056,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66056#pullrequestreview-151128899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96ea94ab-bb25-477d-843f-2f51af53e20a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if this is simply an optimization to delay starting the CSR flow until we can establish a connection, would it be better just to log a warning and continue anyway (e.g. `waitForServerOrTimeout`)? trying to think of edge cases with the bootstrap creds not having access to /healthz, etc.",
        "createdAt" : "2018-08-28T15:05:22Z",
        "updatedAt" : "2018-08-30T18:37:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3538b4b6-ad11-4d48-82d4-ab20a6155a52",
        "parentId" : "96ea94ab-bb25-477d-843f-2f51af53e20a",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Now this is just a warning. I think that's fine.",
        "createdAt" : "2018-08-30T18:37:45Z",
        "updatedAt" : "2018-08-30T18:37:45Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf1c75e07ece381fb76b35fa4e6e43e85991f83",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +241,245 @@\n\tif !connected {\n\t\treturn errors.New(\"timed out waiting to connect to apiserver\")\n\t}\n\treturn nil"
  },
  {
    "id" : "f7335348-b067-4f1f-8f0c-aee36f058ebe",
    "prId" : 53037,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53037#pullrequestreview-67524101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b332d34-5f3e-4f9d-83d1-46f302bc30e3",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "why is this moved above RequestNodeCertificate as well? Does that write anything?",
        "createdAt" : "2017-10-05T20:31:58Z",
        "updatedAt" : "2017-10-16T14:06:00Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "ba1ab917-3948-4155-bc40-d178aac8bafb",
        "parentId" : "1b332d34-5f3e-4f9d-83d1-46f302bc30e3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "To avoid leaving a cert on disk if we got a key but failed during req node certificate.  The cert is useless without the key (which we delete above).  This makes the flow a lot more predictable - if we fail to attain a cert, delete key and cert and try again.",
        "createdAt" : "2017-10-05T21:47:00Z",
        "updatedAt" : "2017-10-16T14:06:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "5649f9a578f4f130f61579d77d5609fbdaf82a1f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +95,99 @@\t\treturn fmt.Errorf(\"unable to build bootstrap client cert path: %v\", err)\n\t}\n\tdefer func() {\n\t\tif !success {\n\t\t\tif err := os.Remove(certPath); err != nil && !os.IsNotExist(err) {"
  }
]