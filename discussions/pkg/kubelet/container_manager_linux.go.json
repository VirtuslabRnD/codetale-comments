[
  {
    "id" : "c37ddcf9-6c88-4732-b82f-16ee6b09d114",
    "prId" : 15396,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "We somehow have to tie this with QoS support in the system. For example, if users disable kernel updates in kubelet, and kernel is mis-configured, do we fail the kubelet?\n",
        "createdAt" : "2015-10-12T18:11:07Z",
        "updatedAt" : "2015-10-13T15:27:53Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "76d51e20-9e4d-40c7-9f7e-69d621c8bc41",
        "parentId" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am not sure how complicated I want to make it in the future.  \n\nOur ops guys just said \"I don't like processes that set kernel flags without telling me\".  \n\nI think Warn is useful for people that are running hack/local-up-cluster.sh where they don't want to change the kernel flags on their host dev machine so I don't think its worth getting too fancy.\n",
        "createdAt" : "2015-10-12T20:22:23Z",
        "updatedAt" : "2015-10-13T15:27:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "d62a1653-172a-4c4f-ac97-f57489d760c7",
        "parentId" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Essentially these kernel features are hard requirements and we should treat them that way.\nSince these changes are implicit requirements for QoS, shouldn't we at-least mark the node as `NotReady`? \nFrom that perspective, I don't see a reason for supporting the `Warn` option.\n",
        "createdAt" : "2015-10-12T21:05:38Z",
        "updatedAt" : "2015-10-13T15:27:53Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "e60eff31-1bf9-4971-be32-2c4e8981c5ef",
        "parentId" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Does warn not make sense as a valid option for hack/local-up-cluster for development?  I don't think I am testing qos per se when doing normal development on local machine, and I don't think I want Kubelet changing kernel flags on my development laptop.  That was the ONLY use case I had for Warn.\n\nOperators otherwise should run with Error if they want to know what we require but have other scripts setting it\n",
        "createdAt" : "2015-10-12T23:50:04Z",
        "updatedAt" : "2015-10-13T15:27:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "ddd8e269-40bd-4de9-8204-0f9c262141c7",
        "parentId" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "I'm working on stubbing out ContainerManager for integration tests as part of #14542. Can we do the same for local clusters?\n",
        "createdAt" : "2015-10-13T00:08:23Z",
        "updatedAt" : "2015-10-13T15:27:53Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "cd3b92b6-ac15-4ca0-a413-190347f10aba",
        "parentId" : "35990d67-6d5c-46ac-8f09-1eaf4cc24609",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "That's an interesting idea, will need to review that PR in more detail.\n",
        "createdAt" : "2015-10-13T15:29:30Z",
        "updatedAt" : "2015-10-13T15:29:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ec36ae2104c342ec3a68d7f138f069911227e20",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +144,148 @@\n// TODO: plumb this up as a flag to Kubelet in a future PR\ntype KernelTunableBehavior string\n\nconst ("
  },
  {
    "id" : "ef2f30f4-4243-429b-8020-336063181518",
    "prId" : 15087,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00b89abe-a4b1-4a70-b68d-4080c76ab334",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Is it possible to add some testing? Not necessary for this PR, but it might be useful, like for example conformance. \n",
        "createdAt" : "2015-10-05T18:09:58Z",
        "updatedAt" : "2015-10-06T18:28:55Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "970c369f31f0be55ffde0f3a7d9caee89dbca651",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +149,153 @@// memory-intensive tasks\n// sets /proc/sys/vm/overcommit_memory to 1\nfunc disableKernelMemoryOvercommitHandling() error {\n\tval, err := utilsysctl.GetSysctl(sysctlVmOvercommitMemory)\n\tif err != nil {"
  },
  {
    "id" : "158db2dd-ad27-41f6-8221-25c3bb186710",
    "prId" : 14395,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c48d504-b9ab-422f-9869-d885d4ec118c",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "nit: might worth returning all subsystems that are not mounted.\n\ntypo: s/subsytem/subsystem\n",
        "createdAt" : "2015-09-23T18:13:24Z",
        "updatedAt" : "2015-09-24T22:40:34Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e3a22f2d-93b1-4ac0-9bb1-0928d792a907",
        "parentId" : "3c48d504-b9ab-422f-9869-d885d4ec118c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "nit: also, might be easier to use set than map.\n",
        "createdAt" : "2015-09-23T18:15:40Z",
        "updatedAt" : "2015-09-24T22:40:34Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "1897c641-7aec-49af-9d43-1d0d0c5e2441",
        "parentId" : "3c48d504-b9ab-422f-9869-d885d4ec118c",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Good suggestions. Updated code. \n",
        "createdAt" : "2015-09-23T22:05:25Z",
        "updatedAt" : "2015-09-24T22:40:34Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "77be271ed01b22f61ba169b19295ed32d7f5698b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +113,117 @@\tif expectedCgroups.Len() > 0 {\n\t\treturn fmt.Errorf(\"%s - Following Cgroup subsystem not mounted: %v\", localErr, expectedCgroups.List())\n\t}\n\treturn nil\n}"
  },
  {
    "id" : "1e77f0b3-f8d1-4bf7-9cb1-3556b4a4e6ee",
    "prId" : 9961,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7f67a8f-ef9c-4e62-b38e-9608a61b1dec",
        "parentId" : null,
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "Can we sanity check for a lower threshold in case cAdvisor is returning 0 or really low values. Make it at least 100M?\n",
        "createdAt" : "2015-06-17T19:32:43Z",
        "updatedAt" : "2015-06-17T19:52:47Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "32d5f463d28460d8cc351d6f33ca9e0d1cbfe63e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +92,96 @@\t\t\tcapacity = CapacityFromMachineInfo(info)\n\t\t}\n\t\tmemoryLimit := (int64(capacity.Memory().Value() * DockerMemoryLimitThresholdPercent / 100))\n\t\tif memoryLimit < MinDockerMemoryLimit {\n\t\t\tglog.Warningf(\"Memory limit %d for container %s is too small, reset it to %d\", memoryLimit, dockerDaemonContainerName, MinDockerMemoryLimit)"
  },
  {
    "id" : "029691cd-f261-487e-9b60-d6a6f257c7dd",
    "prId" : 8122,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf17a9a-1267-4e19-bdba-9abeee217e7b",
        "parentId" : null,
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "Why ensure in a loop? Can't we move it once and check on restart? This is extra work when we know noone is moving them around.\n",
        "createdAt" : "2015-05-12T17:38:32Z",
        "updatedAt" : "2015-05-12T17:38:32Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      },
      {
        "id" : "9d3b4252-7371-4349-bc26-41dc8c7082cc",
        "parentId" : "8cf17a9a-1267-4e19-bdba-9abeee217e7b",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "The concern is if Docker restarts for which we don't get notified.\n",
        "createdAt" : "2015-05-12T17:42:42Z",
        "updatedAt" : "2015-05-12T17:42:42Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "5a58b98d-8036-40d7-8850-7fbc5222f60b",
        "parentId" : "8cf17a9a-1267-4e19-bdba-9abeee217e7b",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "FYI, @cjcullen is adding an explicit restart of docker as part of dynamically configuring the CIDR allocation for the node in #7984. \n",
        "createdAt" : "2015-05-12T17:48:55Z",
        "updatedAt" : "2015-05-12T17:48:55Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "a318234d-a235-4339-aa8a-1e42fac6e1b6",
        "parentId" : "8cf17a9a-1267-4e19-bdba-9abeee217e7b",
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "ok, minute it is then.\n",
        "createdAt" : "2015-05-12T17:59:08Z",
        "updatedAt" : "2015-05-12T17:59:08Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      },
      {
        "id" : "eaaaf513-f69e-4eaf-9b8d-89db495779ac",
        "parentId" : "8cf17a9a-1267-4e19-bdba-9abeee217e7b",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "monit also might restart unresponsive docker daemon too.\n",
        "createdAt" : "2015-05-12T18:11:43Z",
        "updatedAt" : "2015-05-12T18:11:43Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1447618f43ca5bde612f026033f754958c34f98",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@}\n\nfunc (cm *containerManagerImpl) Start() error {\n\tif cm.dockerContainerName != \"\" {\n\t\tgo util.Until(func() {"
  }
]