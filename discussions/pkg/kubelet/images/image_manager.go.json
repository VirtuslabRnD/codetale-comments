[
  {
    "id" : "5e6920dd-e9a7-474b-8921-8e807e952fc7",
    "prId" : 91945,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91945#pullrequestreview-428392188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d158226f-d4db-424e-a266-48c586ed8724",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "what about this error message? Should it also include the `pod.Namespace`?",
        "createdAt" : "2020-06-09T19:26:49Z",
        "updatedAt" : "2020-06-09T19:31:17Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "8c7aecab-9282-44ca-8e06-6a6d7a108064",
        "parentId" : "d158226f-d4db-424e-a266-48c586ed8724",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "@dashpole shared this document that will address the problem centrally https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/1602-structured-logging. So perhaps this PR is fine to fix a single occurrence for now",
        "createdAt" : "2020-06-10T20:11:40Z",
        "updatedAt" : "2020-06-10T20:11:40Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc1e7c69589b3474cb03969e77fc8a7594bb7a6d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +90,94 @@\tref, err := kubecontainer.GenerateContainerRef(pod, container)\n\tif err != nil {\n\t\tklog.Errorf(\"Couldn't make a ref to pod %v, container %v: '%v'\", pod.Name, container.Name, err)\n\t}\n"
  },
  {
    "id" : "ee3cd7bb-d153-45ff-9a5e-1b6963c23649",
    "prId" : 90061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90061#pullrequestreview-391584964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4c7db24-1a0b-41e1-ab5f-44f7eaafcf65",
        "parentId" : null,
        "authorId" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "body" : "I need to add unit tests around this behavior",
        "createdAt" : "2020-04-10T18:12:20Z",
        "updatedAt" : "2020-04-20T22:26:03Z",
        "lastEditedBy" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "tags" : [
        ]
      }
    ],
    "commit" : "90367729a3b56bab1f95ad4c8c5569826d779053",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +102,106 @@\t}\n\n\tvar podAnnotations []kubecontainer.Annotation\n\tfor k, v := range pod.GetAnnotations() {\n\t\tpodAnnotations = append(podAnnotations, kubecontainer.Annotation{"
  },
  {
    "id" : "2bb2afe0-665b-4c6d-aee7-cc9d445b4879",
    "prId" : 90061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90061#pullrequestreview-406619431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfb83073-bd09-4158-ab57-25a6599acfd5",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Is there annotation that needs to be filtered before passing to ImageSpec ?",
        "createdAt" : "2020-05-01T17:58:44Z",
        "updatedAt" : "2020-05-01T18:00:01Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "49d71c18-fd0a-45c5-92ee-f1c6fd0866ae",
        "parentId" : "cfb83073-bd09-4158-ab57-25a6599acfd5",
        "authorId" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "body" : "It won't hurt anything to include all Pod annotations here and let the CRI/containerd pick which ones to use so I figured it would be cleaner here to just pass them all along.\r\nI can update to include filtering if necessary - but that would require code updates in k/k to pass along other annotations in the future.\r\nWhat does everyone think?",
        "createdAt" : "2020-05-01T18:41:24Z",
        "updatedAt" : "2020-05-01T18:41:24Z",
        "lastEditedBy" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "tags" : [
        ]
      },
      {
        "id" : "c1192289-0dbe-4cd4-b200-34e20ad9a46a",
        "parentId" : "cfb83073-bd09-4158-ab57-25a6599acfd5",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "I think it's hard to determine which annotations should be filtered. let's just pass all?",
        "createdAt" : "2020-05-06T13:37:06Z",
        "updatedAt" : "2020-05-06T13:37:07Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "90367729a3b56bab1f95ad4c8c5569826d779053",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +112,116 @@\tspec := kubecontainer.ImageSpec{\n\t\tImage:       image,\n\t\tAnnotations: podAnnotations,\n\t}\n\timageRef, err := m.imageService.GetImageRef(spec)"
  },
  {
    "id" : "4bcb0da0-95bd-47cd-b292-463d92e5336b",
    "prId" : 33233,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33233#pullrequestreview-1384861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Hm...Should this be in image manager or dockershim?\nWhy does rkt not have similar logic before? Do rkt/hyper need this or not?\n@yifan-gu @feiskyer \n",
        "createdAt" : "2016-09-21T23:30:00Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "04fad573-2a05-4b0f-81c0-450a2b754e45",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think rkt assumes \"latest\" by default. https://github.com/kubernetes/kubernetes/blob/b1ee54346347f3675f285d24e302d36980983804/pkg/kubelet/rkt/image.go#L134\n\nInstead of letting each runtime sets a different default, it makes more sense for kubelet to set the default to ensure consistent user experience.\n",
        "createdAt" : "2016-09-21T23:36:14Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4eaef076-dae1-4dae-9e2b-a064ced88ee9",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "It seems that when pulling image, they use `ImageSpec.Image` directly https://github.com/kubernetes/kubernetes/blob/b1ee54346347f3675f285d24e302d36980983804/pkg/kubelet/rkt/image.go#L47. In docker, if we use it directly without any tag, it will pull all images with the same name. What will happen for rkt in the same case? @yifan-gu \n\n> Instead of letting each runtime sets a different default, it makes more sense for kubelet to set the default to ensure consistent user experience.\n\nYeah, just don't know whether different runtimes have the same default. For now, it's fine because everyone is using docker image, and the default should all be `:latest` (?).\n\nBut in the future this may cause problem, for example, if we want to support ACI, will this logic still work?\n",
        "createdAt" : "2016-09-21T23:42:34Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "f10dd352-ba28-4e86-8438-ee40cc74d965",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "> Yeah, just don't know whether different runtimes have the same default. For now, it's fine because everyone is using docker image, and the default should all be :latest (?).\n\nIf that's true, why did we even try to apply the default tag in dockertools? :-)\n",
        "createdAt" : "2016-09-21T23:46:20Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "85112e38-9a00-41a7-b3e2-a7415d826d37",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "/cc @yifan-gu for the rkt image pulling\n",
        "createdAt" : "2016-09-21T23:46:51Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "126c7c29-b547-48a1-8367-457ffe1dd425",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "> If that's true, why did we even try to apply the default tag in dockertools? :-)\n\nBecause in docker, if we pull image without any tag, e.g. \"busybox\", it will pull all images with the same name, e.g. \"busybox:0.1, busybox:0.2 ...\".\nIt doesn't happen when we do `docker pull busybox` in command line, because docker CLI has already applied `:latest`.\nHowever, when using engine-api, we have to apply that by ourselves.\n",
        "createdAt" : "2016-09-22T00:09:36Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "2bd3e4ac-ad99-4a8d-a6d4-e51c0124ca51",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The bottom line is that we don't know if or what default is applied in different runtimes, so it's better if kubelet applies the tag. BTW, all the unit tests are broken. I'll look at them.\n",
        "createdAt" : "2016-09-22T00:39:29Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "a5c2e452-5ea6-4b11-97e3-bfa23a9b3275",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "ImageSpec should be changed in order to support other image formats, so  as to distinguish the image format. We can continue to set default labels for docker image.\n",
        "createdAt" : "2016-09-23T00:59:43Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "4fa8afd6-d3b5-48e3-9530-1ee7bbcd5cff",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@Random-Liu @yujuhong To answer your question. `rkt fetch --no-store docker://busybox` has the same effect as `rkt fetch --no-store docker://busybox:latest`. So this PR should not affect rkt.\n",
        "createdAt" : "2016-09-23T02:31:00Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "bec5ccb1-9715-49de-8488-2bf87f6919fe",
        "parentId" : "b33cdf42-22dd-4807-aa5e-c4333cc7e034",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "OK. It seems that the default image tag should be related to the image type not the runtime type. If so, that makes sense. :)\n",
        "createdAt" : "2016-09-23T18:50:19Z",
        "updatedAt" : "2016-09-29T01:59:43Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6a6513552112f06c8ba4eacdfec60a0559cf752",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +91,95 @@\n\t// If the image contains no tag or digest, a default tag should be applied.\n\timage, err := applyDefaultImageTag(container.Image)\n\tif err != nil {\n\t\tmsg := fmt.Sprintf(\"Failed to apply default image tag %q: %v\", container.Image, err)"
  },
  {
    "id" : "3ca66a8c-bfcd-4383-ab38-36d7d16abbde",
    "prId" : 29036,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0963984b-b2bf-4636-b402-938a987ddc65",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nit: Some comments are appreciated. :)\n",
        "createdAt" : "2016-08-02T22:31:58Z",
        "updatedAt" : "2016-08-03T17:50:33Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "f90c91fe-4d42-45ce-8ca7-f430f89592cc",
        "parentId" : "0963984b-b2bf-4636-b402-938a987ddc65",
        "authorId" : "4a6c4c9f-42c7-4b89-b4ff-53e56b69cd54",
        "body" : "Comments added.\n",
        "createdAt" : "2016-08-03T00:17:24Z",
        "updatedAt" : "2016-08-03T17:50:33Z",
        "lastEditedBy" : "4a6c4c9f-42c7-4b89-b4ff-53e56b69cd54",
        "tags" : [
        ]
      }
    ],
    "commit" : "321c2897926288e6e4f09ea2b25175094856b9f2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +29,33 @@\n// imageManager provides the functionalities for image pulling.\ntype imageManager struct {\n\trecorder record.EventRecorder\n\truntime  kubecontainer.Runtime"
  }
]