[
  {
    "id" : "e6bb3a28-c9ab-4db4-99eb-f98d6015c5e2",
    "prId" : 102725,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102725#pullrequestreview-682948246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3978dd6c-00f2-4f09-bd2f-f7cad861b1fc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this needs an accompanying test demonstrating the leak and that this fix works properly",
        "createdAt" : "2021-06-14T13:59:51Z",
        "updatedAt" : "2021-06-14T13:59:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee5da75e9ae924228b69bf1976a6960be9b8e8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +284,288 @@\t} else {\n\t\t// put this line in removeWorker may cause dead lock, so keep reset it here\n\t\tdelete(p.isWorking, uid)\n\t}\n}"
  },
  {
    "id" : "376d11df-8264-4f84-b1a1-dbd2c42e3392",
    "prId" : 102344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102344#pullrequestreview-690972868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c4f0347-a61f-4c9c-9d68-e889f1496fff",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "IIUC, this only works for \"wanted\" or \"desired\" pods, can we change the name to reflect that?",
        "createdAt" : "2021-06-10T18:51:45Z",
        "updatedAt" : "2021-06-11T07:11:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "5e85cae9-a31e-4f17-b29c-b2c5faac7306",
        "parentId" : "5c4f0347-a61f-4c9c-9d68-e889f1496fff",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "What's our most consistent word used?  `Desired`?",
        "createdAt" : "2021-06-11T21:17:44Z",
        "updatedAt" : "2021-06-11T21:17:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "dee25d83-78d5-4358-b881-97881926d575",
        "parentId" : "5c4f0347-a61f-4c9c-9d68-e889f1496fff",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nvm. I get the difference between `IsPodTerminationRequested` and `ShouldPodContainersBeTerminating` now.",
        "createdAt" : "2021-06-28T16:53:15Z",
        "updatedAt" : "2021-06-28T18:08:09Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadd1a9ead7a009a9abfbd603a5efd0560473cc",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +146,150 @@\t// Intended for use by the kubelet sync* methods, but not subsystems, which should\n\t// use ShouldPod*().\n\tIsPodTerminationRequested(uid types.UID) bool\n\n\t// ShouldPodContainersBeTerminating returns false before pod workers have synced,"
  },
  {
    "id" : "b07ce8a8-a650-4d91-bced-c4ae402a8543",
    "prId" : 102344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102344#pullrequestreview-690972868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa35ee5e-886b-480f-aeca-45eccd0802c3",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "There are overlaps between these functions, plus the function naming, makes it a bit hard to understand which to use.\r\n\r\nTo me, \r\nCouldHaveRunningContainers: !Terminated()\r\nIsPodTerminationRequested: Terminating() && DesiredPodOnly\r\nShouldPodContainersBeTerminating: Terminating()\r\nShouldPodRuntimeBeRemoved: Terminated()\r\nShouldPodContentBeRemoved: Deleting() == Evicted () || (Deleted() && Terminated())\r\n\r\nIn this case, we only need `Terminating()`, `Terminated()` and `Deleting()`, \r\nOnly `DesiredPodOnly` is a special case, and we can handle it with a dedicated function or boolean argument.\r\n\r\nThat seems easier to understand for me.\r\n",
        "createdAt" : "2021-06-10T19:23:43Z",
        "updatedAt" : "2021-06-11T07:11:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "12e38ded-4477-4844-a24f-c78d5f0c0403",
        "parentId" : "fa35ee5e-886b-480f-aeca-45eccd0802c3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I started with that path, and over repeated reads of the code found it very difficult to understand the loops people were using in that context.  Everyone besides core kubelet loop (volume, gc, etc) should probably be describing in terms of setup and teardown, where setup is racing against the sync pod loop, and teardown is racing against the termination loops. So I wanted to define these in terms of windows:\r\n\r\n```\r\n|------------------------------------------| (lifetime of pod object)\r\n     |-------------| (syncing)\r\n|--------------------------------| (acceptable to create)\r\n...--|                           |------------------------------------------------- .... (acceptable to teardown some components)\r\n...--|                                     |------------------------------------------- .... (acceptable to teardown all components)\r\n```\r\n\r\nI didn't feel Terminating or Terminated captured those last two accurately, and in fact were confusing (because you could maybe think terminated lasted up until the pod was deleted).",
        "createdAt" : "2021-06-11T21:17:10Z",
        "updatedAt" : "2021-06-11T21:17:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c3541b8d-6bca-4178-8f3c-f081ab4c9e87",
        "parentId" : "fa35ee5e-886b-480f-aeca-45eccd0802c3",
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "> Terminating(), Terminated() and Deleting()\r\n\r\nIt's unclear to me what would be the difference between Terminating and Deleting, @Random-Liu \r\n\r\nAgreed that it does seem like there's a lot of new conditions defined, possibly more than needed.\r\n\r\n@smarterclayton perhaps we should be signaling which are intended for internal use in the kubelet loop vs other consumers by use of public interface vs. private module-specific stuff?",
        "createdAt" : "2021-06-21T22:06:23Z",
        "updatedAt" : "2021-06-21T22:22:44Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "a804339a-fd41-4bb6-95c7-4065422eb7a4",
        "parentId" : "fa35ee5e-886b-480f-aeca-45eccd0802c3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Terminating means the pod is shutting down.  Deleting means the pod is being deleted.  Those are orthogonal.  A deleted pod can aggressively have content removed by eviction.  A terminating pod has no content being removed.  \r\n\r\n* Evicted\r\n* Deleted\r\n* Terminal (succeeded / failed)\r\n* Termination requested\r\n* Termination started\r\n* Terminated\r\n* Gone (orphan)\r\n\r\nThese are all different states.  Should* groups those states into clear semantic rules about lifecycle (content be removed, runtime be removed, etc)",
        "createdAt" : "2021-06-22T17:53:45Z",
        "updatedAt" : "2021-06-22T17:54:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b3cd0101-adeb-4a6b-8f4b-2fddd0ff2c44",
        "parentId" : "fa35ee5e-886b-480f-aeca-45eccd0802c3",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "I can see pros & cons. :)\r\nI'm also OK with descriptive name if you've thought through both options.",
        "createdAt" : "2021-06-28T17:16:47Z",
        "updatedAt" : "2021-06-28T18:08:09Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadd1a9ead7a009a9abfbd603a5efd0560473cc",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +137,141 @@\t// Intended for use by the kubelet config loops, but not subsystems, which should\n\t// use ShouldPod*().\n\tCouldHaveRunningContainers(uid types.UID) bool\n\t// IsPodTerminationRequested returns true when pod termination has been requested\n\t// until the termination completes and the pod is removed from config. This should"
  },
  {
    "id" : "75510b79-e2cc-43b7-864d-fbeec5de657e",
    "prId" : 102344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102344#pullrequestreview-701702069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "parentId" : null,
        "authorId" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "body" : "For static pod,  pod.uid does not change, while pod REMOVE and ADD encountes race condition,  `delete(p.podSyncStatuses, uid)` here may cause deadlock,  as the old podwoker may write workUpdate to new podworker's podUpdate channel  in `completeWorkQueueNext(uid types.UID) `",
        "createdAt" : "2021-06-29T12:12:00Z",
        "updatedAt" : "2021-06-29T12:12:06Z",
        "lastEditedBy" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "tags" : [
        ]
      },
      {
        "id" : "2ca45bf0-1de5-4ef1-82fb-ccbca68e61fc",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Thanks, we don't have a test case for this in node tests, which I'll add.",
        "createdAt" : "2021-06-29T17:16:32Z",
        "updatedAt" : "2021-06-29T17:16:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "891cabf7-c1b9-468b-b632-015477a5f968",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Turns out we have bugs in this area - a pod created like this doesn't seem to have its mirror pod updated.  Digging into why that happens before I finish up the area here.",
        "createdAt" : "2021-06-30T17:19:03Z",
        "updatedAt" : "2021-06-30T17:19:03Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b93b7f53-7973-403a-858c-ab961b8664e5",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "https://github.com/kubernetes/kubernetes/pull/103374 is a test that fails in master (indicating the mirror pod not getting updated).",
        "createdAt" : "2021-06-30T17:34:18Z",
        "updatedAt" : "2021-06-30T17:34:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f10878c9-5813-4a3e-8c03-de43dd3ae651",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "> For static pod, pod.uid does not change, while pod REMOVE and ADD encountes race condition, delete(p.podSyncStatuses, uid) here may cause deadlock, as the old podwoker may write workUpdate to new podworker's podUpdate channel in completeWorkQueueNext(uid types.UID)\r\n\r\nCan you elaborate more about how the deadlock happens? IIUC, `SyncKnownPods` runs `HandlePodCleanups`, and during which no desired pod will be added/removed. In that case, if the static pod is seen, we keep the pod worker; if it is not seen, we remove the pod worker.\r\n\r\nWhy would `delete(p.podSyncStatuses, uid)` cause a deadlock?\r\n\r\nBut if a static is moved out of the manifest directory and then moved back, it is not quite clear to me what would happen. I feel like the termination will continue because the uid (generated from pod hash) is not changed.",
        "createdAt" : "2021-07-01T17:51:25Z",
        "updatedAt" : "2021-07-01T18:00:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "55750e38-c6b0-43f9-a12c-0250bb47b246",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "body" : "> > For static pod, pod.uid does not change, while pod REMOVE and ADD encountes race condition, delete(p.podSyncStatuses, uid) here may cause deadlock, as the old podwoker may write workUpdate to new podworker's podUpdate channel in completeWorkQueueNext(uid types.UID)\r\n> \r\n> Can you elaborate more about how the deadlock happens? IIUC, `SyncKnownPods` runs `HandlePodCleanups`, and during which no desired pod will be added/removed. In that case, if the static pod is seen, we keep the pod worker; if it is not seen, we remove the pod worker.\r\n> \r\n> Why would `delete(p.podSyncStatuses, uid)` cause a deadlock?\r\n> \r\n> But if a static is moved out of the manifest directory and then moved back, it is not quite clear to me what would happen. I feel like the termination will continue because the uid (generated from pod hash) is not changed.\r\n\r\n@Random-Liu The case mybe like this below(We have encountered in v1.19 by add `delete(p.isWorking, uid)` here): \r\n1. For a static pod A terminated, `SyncKnownPods` calls `removeTerminatedWorker`, but at this time, the old podworker does not absolutely exited, it may have not run to the line `p.completeWorkQueueNext(pod.UID)`\r\n2. Just this time. the static pod A manifest comes back, as  `removeTerminatedWorker` clears all the data like  `p.podUpdates[uid]`, so UpdatePod() will create a new podwoker. and the condtion below still satisfies, then the now podworker becomes running\r\n```\r\nif !status.IsWorking() {\r\n\t\tstatus.working = true\r\n\t\tpodUpdates <- work\r\n\t\treturn\r\n\t}\r\n```\r\n so at this mini time, there are two podworders runing with some same shared data struct like `p.podUpdates[uid]` and `p.lastUndeliveredWorkUpdate[pod.UID]`\r\n3. At this time, there are still some podUpdates come, UpdatePod() will put the podUpdate to  `p.lastUndeliveredWorkUpdate[pod.UID]`, just then , the old podworker run into the func `p.completeWorkQueueNext(pod.UID)`, and it writes a podUpdate to p.podUpdates[uid] channel and exits \r\n4. Just this time,  UpdatePod() will still put a podUpdate to  `p.lastUndeliveredWorkUpdate[pod.UID]`, just then , the new podworker run into the func `p.completeWorkQueueNext(pod.UID)`, as the p.podUpdates[uid] channel can only put one data. so it could not write successfully, then deadlock causes",
        "createdAt" : "2021-07-08T03:50:02Z",
        "updatedAt" : "2021-07-08T03:50:03Z",
        "lastEditedBy" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "tags" : [
        ]
      },
      {
        "id" : "a9515e1a-5393-41a9-bb0d-86580b8049b8",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "For 1.\r\n\r\nThe current code only actually `removeTerminatedWorker` when the pod worker becomes `finished`. And the pod worker only becomes `finished` at the end of `completeTerminated`, and the pod worker will return right after that.\r\n\r\nI don't see how the case you described could happen.",
        "createdAt" : "2021-07-08T06:22:29Z",
        "updatedAt" : "2021-07-08T06:22:52Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "99795b67-f15f-4d38-80c5-86ab47003f31",
        "parentId" : "dfad7967-b66a-4315-8f33-20aa130db78a",
        "authorId" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "body" : "@Random-Liu Thanks for your ack.  I'm sorry for that I ignored the `managePodLoop  `will exit after `completeTerminated`, I mentioned the case frontend we have found in original code. Now this new change don't have this nit, I have no problem, ",
        "createdAt" : "2021-07-08T06:58:15Z",
        "updatedAt" : "2021-07-08T06:58:21Z",
        "lastEditedBy" : "32f27522-66e9-4e56-b36c-45011b4a91c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadd1a9ead7a009a9abfbd603a5efd0560473cc",
    "line" : 1081,
    "diffHunk" : "@@ -1,1 +985,989 @@\n\tklog.V(4).InfoS(\"Pod has been terminated and is no longer known to the kubelet, remove all history\", \"podUID\", uid)\n\tdelete(p.podSyncStatuses, uid)\n\tdelete(p.podUpdates, uid)\n\tdelete(p.lastUndeliveredWorkUpdate, uid)"
  },
  {
    "id" : "e5f8f1e6-bfa5-4e0d-b8f8-a52ace6fb197",
    "prId" : 102344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102344#pullrequestreview-700254801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d5dcf8-c520-41fb-afda-556463c8124c",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "I understand what we are trying to do. However, the sync function doesn't use context today, having this log may be confusing if the grace period is really shortened.\r\n\r\nCan we remove the context related change and graceful period shorten logic from this PR for now? It doesn't seem to take any effect right now, and can be added in a following up change.",
        "createdAt" : "2021-07-01T17:26:41Z",
        "updatedAt" : "2021-07-01T17:27:37Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "6cb7603a-04ac-4e7f-8186-7116378fee84",
        "parentId" : "f5d5dcf8-c520-41fb-afda-556463c8124c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I really don't want to remove the grace period logic shortening in the prep step, since if we get an error in syncTerminatingPod and have to retry I think we should be using the shortened period.  Note that cancellation changes the core structure, so if we're going to soak I want to soak with the context in place.  I agree it isn't used, so I guess we could simplify some parts, but then we'd bring those back without the infra I expect.\r\n\r\nI agree that having it in without testing doesn't accomplish much - I'd prefer to spend the time now adding the unit tests then for verifying context cancel requeues in the right scenarios even if no one is cancelling, vs waiting to add them since it's so fundamental to the idea that we *can* cancel.  Once we start cancelling, it'll be pretty obvious where the bugs are (especially with e2es on pods with long preStop hooks), so the overall cancellation stuff benefits from having a fairly well tested core loop with one touch point.",
        "createdAt" : "2021-07-06T18:21:52Z",
        "updatedAt" : "2021-07-06T19:32:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadd1a9ead7a009a9abfbd603a5efd0560473cc",
    "line" : 813,
    "diffHunk" : "@@ -1,1 +731,735 @@\n\t\tswitch {\n\t\tcase err == context.Canceled:\n\t\t\t// when the context is cancelled we expect an update to already be queued\n\t\t\tklog.V(2).InfoS(\"Sync exited with context cancellation error\", \"pod\", klog.KObj(pod), \"podUID\", pod.UID, \"updateType\", update.WorkType)"
  },
  {
    "id" : "50066696-f3c1-4762-a5bb-7332fa500e68",
    "prId" : 47462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47462#pullrequestreview-44617363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6e7fd55-993e-4708-a5de-48613a2f666f",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "We don't, or at least not in `syncPod()` in kubelet.go. There are errors if the pod is not runnable or network is not ready, and I only checked a few.  This lets you aggregates event, yes, but may actually lose the information that user wants to know.",
        "createdAt" : "2017-06-15T15:59:03Z",
        "updatedAt" : "2017-06-15T16:04:49Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "194b8c1d-dfd7-42e9-b917-f958ce07ada3",
        "parentId" : "c6e7fd55-993e-4708-a5de-48613a2f666f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@yujuhong - i am open to adding an error when the network is not ready or any other more specific error situation.  what i dislike is that we used FailedSync as a catch-all and as a result we duplicated the same information twice.  As a user, what does FailedSync even mean?  i would argue it only has meaning for kubelet authors, and not kubernetes users.  if i got an event \"NetworkNotReady\" with a message that is way better than \"FailedSync\".",
        "createdAt" : "2017-06-16T02:47:52Z",
        "updatedAt" : "2017-06-16T02:47:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "aa26c548-16b1-401c-b2e3-35e634da7da0",
        "parentId" : "c6e7fd55-993e-4708-a5de-48613a2f666f",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I wasn't saying the `FailedSync` as a catch-all message is good. Just pointing out that your PR removed some information that could be meaningful to the users, an no alternative event was added.\r\n",
        "createdAt" : "2017-06-16T17:23:59Z",
        "updatedAt" : "2017-06-16T17:23:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "36619fa2178a8196942df27c79a4ef360e50f300",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +181,185 @@\t\tif err != nil {\n\t\t\tglog.Errorf(\"Error syncing pod %s (%q), skipping: %v\", update.Pod.UID, format.Pod(update.Pod), err)\n\t\t\t// if we failed sync, we throw more specific events for why it happened.\n\t\t\t// as a result, i question the value of this event.\n\t\t\t// TODO: determine if we can remove this in a future release."
  },
  {
    "id" : "70f610aa-375c-4dfb-be83-439e4a6fb1d2",
    "prId" : 42015,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42015#pullrequestreview-24405750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c536963-efe5-44ac-9923-f19e8bad470c",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Just curious: Why we increase this to 10s, not the initially proposed 4s? \r\n\r\n",
        "createdAt" : "2017-02-27T21:57:16Z",
        "updatedAt" : "2017-02-27T21:57:16Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "b1f6aaba-5931-4628-ba1d-126d7894ccb7",
        "parentId" : "8c536963-efe5-44ac-9923-f19e8bad470c",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "My only concern is that somehow due to some issues, Kubelet hit this timeout upon OUT-OF-MEMORY issue, we failed to kill another pod / container within a reasonable time, thus leading to a sys OOM. We know kernel once a while run into a unkillable process issue. :-) \r\n\r\nBut on another side, I knew 2s is not acceptable. I am ok to take this as is.",
        "createdAt" : "2017-02-27T22:14:57Z",
        "updatedAt" : "2017-02-27T22:14:57Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "731ac6ee-454d-4fa7-8080-cf3b4438ea11",
        "parentId" : "8c536963-efe5-44ac-9923-f19e8bad470c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i am curious why 10s over 4s as well.",
        "createdAt" : "2017-02-28T22:40:34Z",
        "updatedAt" : "2017-02-28T22:40:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "0a6eebc6-f085-43ea-95e2-eb70dacbc347",
        "parentId" : "8c536963-efe5-44ac-9923-f19e8bad470c",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "I initially proposed 4s because in 30 evictions, the longest time I recorded was 3.2 seconds.  However, this is likely still a little low, because 30 runs isn't a huge sample size.  With 1000 runs, the max may very well be in the 5-10 second range, or at least likely higher than 4s.  AFAIK we don't have any major problems with hung container deletion operations, so a higher value seems like the safer option.  I will be monitoring this, and we can always adjust it downwards if we find issues",
        "createdAt" : "2017-03-01T00:13:30Z",
        "updatedAt" : "2017-03-01T00:13:30Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "83771d7a-af0f-423f-8589-ceaa42800371",
        "parentId" : "8c536963-efe5-44ac-9923-f19e8bad470c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "thanks for the detail.",
        "createdAt" : "2017-03-01T05:52:53Z",
        "updatedAt" : "2017-03-01T05:52:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6daa2f2ef314e3cdbfb36ef110e5ab37a32c52fe",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +294,298 @@\t\t// the default timeout is relative to the grace period (we settle on 10s to wait for kubelet->runtime traffic to complete in sigkill)\n\t\ttimeout := int64(gracePeriod + (gracePeriod / 2))\n\t\tminTimeout := int64(10)\n\t\tif timeout < minTimeout {\n\t\t\ttimeout = minTimeout"
  },
  {
    "id" : "92ad277e-ae70-43fc-b2c7-cf0fbe8b5cd0",
    "prId" : 25065,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6576ad0-8a4d-4b28-993b-4695006e9ff6",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Why create both `UpdatePodOptions` and `syncPodOptions`?\n",
        "createdAt" : "2016-05-05T17:26:52Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "d241a686-ef45-4147-9579-9399f739cbaf",
        "parentId" : "c6576ad0-8a4d-4b28-993b-4695006e9ff6",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "`UpdatePodOptions` was done because `PodWorkers` was a public interface, and I thought of `syncPodOptions` as an implementation detail.  In addition, `syncPodOptions` was not responsible for invoking the callback.  That was the basic rationale.\n",
        "createdAt" : "2016-05-05T19:06:53Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "99baed73-8def-451e-8ef7-8cf9cb103a9a",
        "parentId" : "c6576ad0-8a4d-4b28-993b-4695006e9ff6",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Makes sense. \n",
        "createdAt" : "2016-05-06T23:49:30Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fefb428c1242b76b7c66e2d261d6c4cdfc4804b",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +74,78 @@}\n\n// syncPodOptions provides the arguments to a SyncPod operation.\ntype syncPodOptions struct {\n\t// the mirror pod for the pod to sync, if it is a static pod"
  },
  {
    "id" : "e93a4d83-6e6b-47f8-8012-20e835709766",
    "prId" : 25065,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e2afc3-2545-44e0-be6a-2671861ae17e",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "If we are keeping the general `OnCompletFunc` name, could you at least add some comments warning people that pod worker doesn't necessary process each and every update? It might skip to the latest update.\n",
        "createdAt" : "2016-05-06T23:28:08Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "64bb0789-1736-4de7-8352-1c4d4a3cf261",
        "parentId" : "b1e2afc3-2545-44e0-be6a-2671861ae17e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Sure.  I kept the OnComplete name because we use this to record metric latency elsewhere in additions i think. \n",
        "createdAt" : "2016-05-07T01:45:39Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fefb428c1242b76b7c66e2d261d6c4cdfc4804b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// only guaranteed to be invoked in response to a kill pod request which is\n\t// always delivered.\n\tOnCompleteFunc OnCompleteFunc\n\t// if update type is kill, use the specified options to kill the pod.\n\tKillPodOptions *KillPodOptions"
  },
  {
    "id" : "1fddb103-0129-4b83-a600-0fee1521e1ff",
    "prId" : 25065,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2d4c9ee-4809-4552-a9d7-b4a9280cf898",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "suggestion: add a test for this if it doesn't already exist.\n",
        "createdAt" : "2016-05-06T23:52:57Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "737c22ca-a461-4a6a-ab8d-9615043edede",
        "parentId" : "c2d4c9ee-4809-4552-a9d7-b4a9280cf898",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Will do\n",
        "createdAt" : "2016-05-07T01:46:05Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "38a8aecc-f253-49b8-b5fe-870f8d20e8a0",
        "parentId" : "c2d4c9ee-4809-4552-a9d7-b4a9280cf898",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "added a test.\n",
        "createdAt" : "2016-05-09T20:06:55Z",
        "updatedAt" : "2016-05-12T23:17:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fefb428c1242b76b7c66e2d261d6c4cdfc4804b",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +220,224 @@\t\tpodUpdates <- *options\n\t} else {\n\t\t// if a request to kill a pod is pending, we do not let anything overwrite that request.\n\t\tupdate, found := p.lastUndeliveredWorkUpdate[pod.UID]\n\t\tif !found || update.UpdateType != kubetypes.SyncPodKill {"
  },
  {
    "id" : "106879c4-2dc5-433d-8085-8c41fe8a737d",
    "prId" : 20726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e5c5f23-e7ec-44ba-8fa0-58d3d4441599",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "So I think @yujuhong is the expert on which timers to mod here. \n",
        "createdAt" : "2016-02-08T16:43:26Z",
        "updatedAt" : "2016-02-09T14:33:09Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "65d21c94-f3df-44ad-8f5d-1e500014e232",
        "parentId" : "6e5c5f23-e7ec-44ba-8fa0-58d3d4441599",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Can we use a smaller factor such as 0.5? I think that should be enough to distribute the sync times. \n",
        "createdAt" : "2016-02-08T23:06:27Z",
        "updatedAt" : "2016-02-09T14:33:09Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "d53b4a9a-0147-4eb2-beb4-1af30295f464",
        "parentId" : "6e5c5f23-e7ec-44ba-8fa0-58d3d4441599",
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "Both factors decreased to 0.5\n",
        "createdAt" : "2016-02-09T09:13:31Z",
        "updatedAt" : "2016-02-09T14:33:09Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "392fc6668f5536af71950f7df56fe3f89256a66b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +41,45 @@type syncPodFnType func(*api.Pod, *api.Pod, *kubecontainer.PodStatus, kubetypes.SyncPodType) error\n\nconst (\n\t// jitter factor for resyncInterval\n\tworkerResyncIntervalJitterFactor = 0.5"
  },
  {
    "id" : "04f26126-62a3-4c61-814e-6d4efa62527b",
    "prId" : 19436,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cb0268e-b017-43fb-8257-352df3bdfbf2",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Can we create a fake cache, so we can remove all the `if p.podCache != nil` ?\n",
        "createdAt" : "2016-01-14T20:04:54Z",
        "updatedAt" : "2016-01-14T21:46:55Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "85509e85-75a7-460a-86b1-a36bdfb54ae3",
        "parentId" : "3cb0268e-b017-43fb-8257-352df3bdfbf2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong If you want to do that in follow up PRs, it's ok.\n",
        "createdAt" : "2016-01-14T20:05:44Z",
        "updatedAt" : "2016-01-14T21:46:55Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "50fafa08-2944-49ce-b8cc-591123041569",
        "parentId" : "3cb0268e-b017-43fb-8257-352df3bdfbf2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Let's keep it for a while. I want to keep an easy way to bypass this cache for now. I will clean them up later. \n",
        "createdAt" : "2016-01-14T22:11:19Z",
        "updatedAt" : "2016-01-14T22:11:19Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "15950daa7fbb213b6b061cce839b27c5ada0bbd3",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +113,117 @@\t\terr := func() (err error) {\n\t\t\tpodID := newWork.pod.UID\n\t\t\tif p.podCache != nil {\n\t\t\t\t// This is a blocking call that would return only if the cache\n\t\t\t\t// has an entry for the pod that is newer than minRuntimeCache"
  },
  {
    "id" : "78c7c5a2-8030-43ba-bbab-45ce14acd72a",
    "prId" : 9549,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e6c4cfd-81c9-4dbb-a55e-a80519966d7e",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "More comments here to explain why reset this updateType here to Create?\n",
        "createdAt" : "2015-06-12T00:05:38Z",
        "updatedAt" : "2015-06-12T00:18:31Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "01e00720-6201-4834-a6e2-8d65306c89c0",
        "parentId" : "8e6c4cfd-81c9-4dbb-a55e-a80519966d7e",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I'm assuming that if you created a pod worker you're willing to believe the status in the pod without having generateStatus again, either because it is a brand new pod or the kubelet restarted. I'll add this as a comment. \n",
        "createdAt" : "2015-06-12T00:09:50Z",
        "updatedAt" : "2015-06-12T00:18:31Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5ed0e9b139eaa725b842d021a6d55a7ed7d53d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +148,152 @@\t\t// the status of the pod for the first pod worker sync. See corresponding\n\t\t// comment in syncPod.\n\t\tupdateType = SyncPodCreate\n\t\tgo func() {\n\t\t\tdefer util.HandleCrash()"
  },
  {
    "id" : "2cdb9c4c-963d-4a97-924a-8dbcf8de054e",
    "prId" : 5401,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b26d8dc-35fc-461f-995d-9ccbedcd29db",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "WDYT: isMirrorPod? Here and elsewhere.\n",
        "createdAt" : "2015-03-16T21:20:39Z",
        "updatedAt" : "2015-03-17T15:46:05Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "be3fcbd5-2ee2-4af6-a763-5d37afd18754",
        "parentId" : "1b26d8dc-35fc-461f-995d-9ccbedcd29db",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think that'd be slightly confusing. None of the pods we are syncing are actually mirror pods......but they may have mirror pods. \n",
        "createdAt" : "2015-03-16T21:29:00Z",
        "updatedAt" : "2015-03-17T15:46:05Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "9a506cdf-bf67-409e-873e-6683ab4131fb",
        "parentId" : "1b26d8dc-35fc-461f-995d-9ccbedcd29db",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Aaaah I see what you mean, yes that makes sense.\n",
        "createdAt" : "2015-03-16T21:36:04Z",
        "updatedAt" : "2015-03-17T15:46:05Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "929fb63b3375ec4874abdd01080b3071adecb12d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@\n\t// Whether there exists a mirror pod for pod.\n\thasMirrorPod bool\n\n\t// Function to call when the update is complete."
  },
  {
    "id" : "0eb19895-a8c5-4ea4-9054-330e4dffac6c",
    "prId" : 5239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58832d8c-cb5a-4f3f-b1b8-34b909ce5849",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "I'm not a huge fan of this since it seems brittle to future changes. I don't have a better option right now though so I'm just complaining :) Don't block the PR on this.\n",
        "createdAt" : "2015-03-10T18:20:11Z",
        "updatedAt" : "2015-03-11T15:38:52Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "707f3ed9-bcc2-4b02-b9b4-5652247557a3",
        "parentId" : "58832d8c-cb5a-4f3f-b1b8-34b909ce5849",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm also not huge fan, but I think it's not harmful.\n",
        "createdAt" : "2015-03-11T09:03:02Z",
        "updatedAt" : "2015-03-11T15:38:52Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "80576dfed38320970cbf5bc7338eca2d8e4a54d1",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +116,120 @@\tdefer p.podLock.Unlock()\n\tif podUpdates, exists = p.podUpdates[uid]; !exists {\n\t\t// We need to have a buffer here, because checkForUpdates() method that\n\t\t// puts an update into channel is called from the same goroutine where\n\t\t// the channel is consumed. However, it is guaranteed that in such case"
  },
  {
    "id" : "bf04eaa1-565f-484b-967d-87d40e4f2776",
    "prId" : 4818,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0fc68fa-7ec9-4257-9098-dfb5f01e17b7",
        "parentId" : null,
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "heh, Fun.\n",
        "createdAt" : "2015-02-26T19:19:48Z",
        "updatedAt" : "2015-02-26T19:19:48Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      },
      {
        "id" : "3232b9f7-a378-4b2a-ae9f-e018f6284cca",
        "parentId" : "b0fc68fa-7ec9-4257-9098-dfb5f01e17b7",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "lol, This updates the Complete Fun (TM)\n\nCan change to Func if you think it's better (I tend to agree). I was keeping the style of the file.\n",
        "createdAt" : "2015-02-26T19:21:57Z",
        "updatedAt" : "2015-02-26T19:21:57Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "e7dac07a-b83b-4391-926e-9a7992a92e29",
        "parentId" : "b0fc68fa-7ec9-4257-9098-dfb5f01e17b7",
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "We have Fn, Fun, and Func. I wouldn't say no to Fun.\nYou can refactor in a separate PR if you want. Let's get this one in.\n",
        "createdAt" : "2015-02-26T19:25:11Z",
        "updatedAt" : "2015-02-26T19:25:11Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "744f33d886a509ae714b5312a3d2f71b340481c9",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +98,102 @@\tpodUpdates <- workUpdate{\n\t\tpod:               pod,\n\t\tupdateCompleteFun: updateComplete,\n\t}\n}"
  },
  {
    "id" : "bd977517-d0ef-4c48-a06a-f00fa4ab1232",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6902bd3a-92b5-49ca-882e-0a8a28e429a5",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "nit: can we document the member variables?\n",
        "createdAt" : "2015-02-26T04:13:34Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "16b68e80-dd4e-4bab-b644-966798cfcb16",
        "parentId" : "6902bd3a-92b5-49ca-882e-0a8a28e429a5",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Lets also make this class thread-safe.\n",
        "createdAt" : "2015-02-26T06:39:17Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "cf6698a3-e234-4218-90cc-ff86f3651b1b",
        "parentId" : "6902bd3a-92b5-49ca-882e-0a8a28e429a5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Both done.\n",
        "createdAt" : "2015-02-26T08:58:10Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7191c5c7fd2e8f83eac9c1dc7868405d661758f3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +30,34 @@\n// TODO(wojtek-t) Add unit tests for this type.\ntype podWorkers struct {\n\t// Protects podUpdates field.\n\tpodLock sync.Mutex"
  },
  {
    "id" : "814e503d-b2ab-4345-b62d-7dfd9c1ed8fa",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac0ce934-ecfe-4512-b5b3-e30496ca14ed",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "nit: you don't need to pre-declare exists\n",
        "createdAt" : "2015-02-26T06:34:35Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "e92b9b82-c762-41c7-85cb-9de1d1b617af",
        "parentId" : "ac0ce934-ecfe-4512-b5b3-e30496ca14ed",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "hmm - I don't know how to do this. I want to have podUpdates available after the if. Is it possible to not declare exists then?\n",
        "createdAt" : "2015-02-26T08:58:55Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "51561764-57e8-448a-8ed0-1c01b8621a91",
        "parentId" : "ac0ce934-ecfe-4512-b5b3-e30496ca14ed",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Don't you only use exists in the if statement? I agree that podUpdates needs to be pre-declared.\n",
        "createdAt" : "2015-02-26T16:10:45Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "7f4a5826-81da-4390-9168-aa060e090c81",
        "parentId" : "ac0ce934-ecfe-4512-b5b3-e30496ca14ed",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I might be doing it wrong, but that doesn't work for me. If I don't declare \"exists\" and change \"=\" to \":=\" in the if it doesn't work for me (i.e. it hangs forever in tests so it seems that it doesn't use the predeclared podUpdates var).\n",
        "createdAt" : "2015-02-26T17:04:49Z",
        "updatedAt" : "2015-02-26T17:04:49Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1ed5ff5d-8ffd-4b73-90cc-0dcefb3e2289",
        "parentId" : "ac0ce934-ecfe-4512-b5b3-e30496ca14ed",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Aaaaah yes you're correct. I just realized that it will overwrite both with `:=` and thus podUpdates would be empty.\n",
        "createdAt" : "2015-02-26T17:10:01Z",
        "updatedAt" : "2015-02-26T17:10:01Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "7191c5c7fd2e8f83eac9c1dc7868405d661758f3",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\tuid := pod.UID\n\tvar podUpdates chan api.BoundPod\n\tvar exists bool\n\n\tp.podLock.Lock()"
  },
  {
    "id" : "7fad3e8c-2812-411f-9cdb-13a1c482425c",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe376bd-109b-45c4-8681-edc24c594395",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Maybe not in this PR, but now that this has a nice API and is separate we should write unit tests for it :)\n",
        "createdAt" : "2015-02-26T06:46:25Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "eb96be14-c1fe-4e0d-abfd-ea04fca2d600",
        "parentId" : "7fe376bd-109b-45c4-8681-edc24c594395",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added a TODO - will do it after this PR.\n",
        "createdAt" : "2015-02-26T09:00:16Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "fab9145a-ec02-4a56-8b0f-3b91cb02b9a0",
        "parentId" : "7fe376bd-109b-45c4-8681-edc24c594395",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Addressed in #4839\n",
        "createdAt" : "2015-02-26T12:57:29Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "71d5f0a4-5ae7-4520-a813-b6b2a36cb27a",
        "parentId" : "7fe376bd-109b-45c4-8681-edc24c594395",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Thanks! Will take a look at that too.\n",
        "createdAt" : "2015-02-26T16:09:56Z",
        "updatedAt" : "2015-02-26T16:59:26Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "7191c5c7fd2e8f83eac9c1dc7868405d661758f3",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2014 Google Inc. All rights reserved.\n"
  }
]