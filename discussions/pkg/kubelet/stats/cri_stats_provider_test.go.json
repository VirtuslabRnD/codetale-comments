[
  {
    "id" : "aaf1f751-0108-4609-8cf0-9bbb893447ea",
    "prId" : 82300,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82300#pullrequestreview-283825167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e7a73a-c47e-45bf-99e0-d84869dcbaa6",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Nit: Can you add a comment that `188446744073` is the limit for uint64 - I'm not sure how many devs would recognize that just based off the number?",
        "createdAt" : "2019-09-04T12:33:11Z",
        "updatedAt" : "2019-09-04T18:49:53Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "5ad90ed4-4dc1-422a-8a6a-6e132b5df0ca",
        "parentId" : "88e7a73a-c47e-45bf-99e0-d84869dcbaa6",
        "authorId" : "a93280d8-efc0-4d8e-b851-a3eebf474d99",
        "body" : "This is just an arbitrarily large value that will trigger the overflow -- 100+ cores in use. The test fails without the included patch to the CRI stats provider. I'll add a comment.",
        "createdAt" : "2019-09-04T17:36:42Z",
        "updatedAt" : "2019-09-04T18:49:53Z",
        "lastEditedBy" : "a93280d8-efc0-4d8e-b851-a3eebf474d99",
        "tags" : [
        ]
      },
      {
        "id" : "620c5be8-9bba-4459-a140-4fe87baf2fc3",
        "parentId" : "88e7a73a-c47e-45bf-99e0-d84869dcbaa6",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "A comment would be good, but I would appretiate keeping the large number, as a generic safeguard against this class of bug.",
        "createdAt" : "2019-09-04T18:27:54Z",
        "updatedAt" : "2019-09-04T18:49:53Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      },
      {
        "id" : "fcd80b02-651d-4a21-8dce-400948da1ca0",
        "parentId" : "88e7a73a-c47e-45bf-99e0-d84869dcbaa6",
        "authorId" : "a93280d8-efc0-4d8e-b851-a3eebf474d99",
        "body" : "Left value as-is and added a comment.",
        "createdAt" : "2019-09-04T18:53:16Z",
        "updatedAt" : "2019-09-04T18:53:17Z",
        "lastEditedBy" : "a93280d8-efc0-4d8e-b851-a3eebf474d99",
        "tags" : [
        ]
      }
    ],
    "commit" : "d32aa6af1d7efae531f0b4d671a827155ad0f436",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +760,764 @@\n\t// Test with a large container of 100+ CPUs\n\tvar value2 uint64 = 188427786383\n\n\ttests := []struct {"
  },
  {
    "id" : "9798e8b4-f774-4d8d-a962-ef77dd993e75",
    "prId" : 82300,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82300#pullrequestreview-291633311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24561acc-d020-4487-ac4a-d8fa1d40f6fa",
        "parentId" : null,
        "authorId" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "body" : "Might be smart to run the assertions (as long as the ptrs are not null) with the values instead of the pointers, as test results like these don't make that much sense:\r\n\r\n```\r\n    cri_stats_provider_test.go:901:                                                                                                                                                                                                                                                                                                                        \r\n                Error Trace:    cri_stats_provider_test.go:901                                                                                                                                                                                                                                                                                             \r\n                Error:          Not equal:                                                                                                                                                                                                                                                                                                                 \r\n                                expected: (*uint64)(0xc0001cc1d0)                                                                                                                                                                                                                                                                                          \r\n                                actual  : (*uint64)(0xc0001cc520)    \r\n```\r\n\r\nThis makes much more sense to me:\r\n```\r\n                                expected: 0x2bdf2bd88f                                                                                                                                                                                                                                                                                                     \r\n                                actual  : 0x2bc5ac5800    \r\n```\r\n\r\nOut of scope of this PR tho.",
        "createdAt" : "2019-09-23T08:47:19Z",
        "updatedAt" : "2019-09-23T08:50:19Z",
        "lastEditedBy" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d32aa6af1d7efae531f0b4d671a827155ad0f436",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +760,764 @@\n\t// Test with a large container of 100+ CPUs\n\tvar value2 uint64 = 188427786383\n\n\ttests := []struct {"
  }
]