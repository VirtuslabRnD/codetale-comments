[
  {
    "id" : "a5a57179-e6af-4af6-bf58-5d93664a243c",
    "prId" : 70440,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70440#pullrequestreview-169889705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a367a751-3395-4847-a728-12e1d62e13e5",
        "parentId" : null,
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "This file was added in 2018: https://github.com/kubernetes/kubernetes/pull/58973.",
        "createdAt" : "2018-10-30T17:01:42Z",
        "updatedAt" : "2018-10-30T17:01:42Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6285db6576553e40aacb74579de57a77e19bb434",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@/*\nCopyright 2018 The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
    "id" : "b07b78c4-52c9-4329-bb63-a410fde3a90e",
    "prId" : 64283,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64283#pullrequestreview-160374396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8362311d-bab7-43c0-b794-e3f1b39b7281",
        "parentId" : null,
        "authorId" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "body" : "nit: 13 -> 12?\r\n",
        "createdAt" : "2018-05-25T00:19:02Z",
        "updatedAt" : "2018-08-30T22:24:46Z",
        "lastEditedBy" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "tags" : [
        ]
      },
      {
        "id" : "4d952941-bfa2-464c-8730-87595cd6d98d",
        "parentId" : "8362311d-bab7-43c0-b794-e3f1b39b7281",
        "authorId" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "body" : "run_as_group is 12 its just out of order, it got me on the compile :D",
        "createdAt" : "2018-05-25T00:21:16Z",
        "updatedAt" : "2018-08-30T22:24:46Z",
        "lastEditedBy" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "tags" : [
        ]
      },
      {
        "id" : "07a144a4-90f1-4754-a4a1-e216eb17247c",
        "parentId" : "8362311d-bab7-43c0-b794-e3f1b39b7281",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "y, i scratched my head for a few mins and realized that",
        "createdAt" : "2018-05-25T00:46:08Z",
        "updatedAt" : "2018-08-30T22:24:46Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "8d0fdafb-01cd-449b-a163-01a0a759f962",
        "parentId" : "8362311d-bab7-43c0-b794-e3f1b39b7281",
        "authorId" : "79676760-e10b-4a9f-aaf8-ec1c2b8e0ec3",
        "body" : "is there any guidance for runtimes on how to handle these two fields? https://github.com/containerd/cri/commit/3e4cec8739bbb0db0764f6db80a25a3f75411c0b#diff-c656bacd6cb0fe9a7f64814b01256decR358 cri-containerd seems to handle it that way but I believe there must be guidance in the api itself, @Random-Liu @jessfraz ",
        "createdAt" : "2018-10-01T16:15:40Z",
        "updatedAt" : "2018-10-01T16:15:40Z",
        "lastEditedBy" : "79676760-e10b-4a9f-aaf8-ec1c2b8e0ec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a4cf7a36e1d28c43b2fbb0efe1dbcd60e09b0d6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +596,600 @@    // masked_paths is a slice of paths that should be masked by the container\n    // runtime, this can be passed directly to the OCI spec.\n    repeated string masked_paths = 13;\n    // readonly_paths is a slice of paths that should be set as readonly by the\n    // container runtime, this can be passed directly to the OCI spec."
  },
  {
    "id" : "5cbd2ecc-fc5b-4e09-a6ac-58fd0f4ff054",
    "prId" : 64009,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64009#pullrequestreview-123226596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6c4e2e9-9602-4c2c-9187-3c933412cf53",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Do we need to distinguish podsandbox and container security context?",
        "createdAt" : "2018-05-24T17:50:26Z",
        "updatedAt" : "2018-06-05T01:31:48Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e7dd2617-b05c-45f1-99b4-10dc994a82f5",
        "parentId" : "d6c4e2e9-9602-4c2c-9187-3c933412cf53",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "I think so, but not today. E.g. windows containers will support namespace options in the future, which requires both sandbox and container security context.",
        "createdAt" : "2018-05-25T02:10:15Z",
        "updatedAt" : "2018-06-05T01:31:48Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba26ba25cdecaebaf7e5d4db7d6546019345373",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +599,603 @@\n// WindowsContainerSecurityContext holds windows security configuration that will be applied to a container.\nmessage WindowsContainerSecurityContext {\n    // User name to run the container process as. If specified, the user MUST\n    // exist in the container image and be resolved there by the runtime;"
  },
  {
    "id" : "d9361fe2-eddf-41a5-9861-fe9a95166de0",
    "prId" : 64009,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64009#pullrequestreview-126197979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4782b70-54c8-4f9c-9e4a-c82708a3183a",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Is the username the canonical identifier in windows? If so, are there predefined significant names? Does a username on the host map to the same user & permissions as a username in the container?\r\n\r\nWe use the UID rather than username in linux for security reasons, but I'm not familiar enough with windows to know if the username is secure in this context.",
        "createdAt" : "2018-05-31T18:04:37Z",
        "updatedAt" : "2018-06-05T01:31:48Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a2875531-fcee-4267-9835-5ee5ad0360dc",
        "parentId" : "a4782b70-54c8-4f9c-9e4a-c82708a3183a",
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "The actual canonical identifier is a Windows Security Identifier (SID), which can be looked up based on a username by the Windows Security Account Manager (SAM). The container has a separate SAM instance with a separate database from the host, therefore a user \"Patrick\" in the container would have a sid != that of the same username on the host. That's why the OCI spec uses a username so that it can be resolved in the context of the container. The host can't canonicalize a username to a SID without the container already running. If the username can't be canonicalized to a valid SID in the container, then creating the container's entrypoint will fail and the container will terminate.\r\n\r\nThere are some well-known ones:\r\nAdministrator - this isn't used by default in the container. Instead, â€¦\r\nContainerAdministrator - this is a separate account and separate SID used in containers that doesn't exist on the host\r\nLocalSystem, Network Service, - used by background and system processes\r\n\r\nAnyway, that's the long answer. The short answer is that only `username` is in the OCI spec for Windows https://github.com/opencontainers/runtime-spec/blob/master/config.md#windows-user",
        "createdAt" : "2018-05-31T22:52:59Z",
        "updatedAt" : "2018-06-05T01:31:48Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      },
      {
        "id" : "16d00ae7-2fdf-4482-9891-fb4019f077cd",
        "parentId" : "a4782b70-54c8-4f9c-9e4a-c82708a3183a",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Thanks for the explanation. Doesn't this mean that it's basically impossible to enforce any policy around this (at the control-plane level)? E.e. PodSecurityPolicy?",
        "createdAt" : "2018-06-05T23:31:56Z",
        "updatedAt" : "2018-06-05T23:31:56Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "5094407a-cc91-4893-8387-cb77157691bd",
        "parentId" : "a4782b70-54c8-4f9c-9e4a-c82708a3183a",
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "RunAsUser, SupplementalGroups - these couldn't be implemented on Windows due to the dependency on \\*nix UID/GID. Windows also doesn't implement privileged or host namespace sharing (ipc, pid, net) - they're always separate. Linux CAP\\_\\* also doesn't apply.\r\n\r\nI'll go ahead and open a blanket issue for implementing portions of PSP on Windows and documenting what won't apply",
        "createdAt" : "2018-06-06T00:20:11Z",
        "updatedAt" : "2018-06-06T00:34:20Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba26ba25cdecaebaf7e5d4db7d6546019345373",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +603,607 @@    // exist in the container image and be resolved there by the runtime;\n    // otherwise, the runtime MUST return error.\n    string run_as_username = 1;\n}\n"
  }
]