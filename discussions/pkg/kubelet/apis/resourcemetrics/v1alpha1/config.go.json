[
  {
    "id" : "98c2dccf-83b0-48c9-aa7b-1499655306f6",
    "prId" : 88568,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88568#pullrequestreview-365372164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee0aeb77-4f78-4776-84ec-f609fc6c8579",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Out of curiosity, why are we keeping this file with just the `Version` constant defined?\r\n\r\nDo we not want to keep the version definition with the actual `NewDesc` descriptions `pkg/kubelet/server/stats/prometheus_resource_metrics.go`?",
        "createdAt" : "2020-02-26T13:45:24Z",
        "updatedAt" : "2020-02-26T13:47:11Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "471e3c26-7f4f-4008-887c-2b41e0072632",
        "parentId" : "ee0aeb77-4f78-4776-84ec-f609fc6c8579",
        "authorId" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "body" : "It's no big deal in my opinion. Given the constant also be referred by other components, such as [E2E](https://github.com/kubernetes/kubernetes/blob/6e35a13815adf221bc2b65eadcdb326de2283521/test/e2e_node/resource_metrics_test.go#L114), so I'd prefer to clean it at release 1.20.",
        "createdAt" : "2020-02-27T02:09:03Z",
        "updatedAt" : "2020-02-27T02:09:03Z",
        "lastEditedBy" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b7c73bf8754f2d9c7c3bfa7f3a196fdb19e74f1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +21,25 @@\n// Version is the string representation of the version of this configuration\nconst Version = \"v1alpha1\""
  },
  {
    "id" : "e3dbf7a8-7e2a-4dda-9c32-80e8ba0c11f4",
    "prId" : 86282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86282#pullrequestreview-332809220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e14d3e2-d93c-4f09-a955-51880eeca4fb",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "For my own education, do you mind sharing any existing documentation around metric deprecation? From reading the [KEP](https://github.com/kubernetes/enhancements/blob/master/keps/sig-instrumentation/20190404-kubernetes-control-plane-metrics-stability.md#stability-classes), I'm a little confused about whether we need to follow a deprecate cycle for `ALPHA` metrics, and if we can remove them immediately?",
        "createdAt" : "2019-12-15T17:49:11Z",
        "updatedAt" : "2019-12-16T02:27:30Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "2d340631-4cba-4bcf-8314-1f794b184cdf",
        "parentId" : "1e14d3e2-d93c-4f09-a955-51880eeca4fb",
        "authorId" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "body" : "According to the metrics deprecate policy, we absolutely can remove them immediately because they are `ALPHA`.  And, according to API deprecate policy, `/metrics/resource/v1alpha1`, it's an `ALPHA` API,  can be removed immediately too.\r\n\r\nBut, in my opinion, if we want to make this change smoothly, we can deprecate them first before removing them from the codebase.\r\n\r\nSo, it's up to you :) ",
        "createdAt" : "2019-12-16T02:39:59Z",
        "updatedAt" : "2019-12-16T02:40:00Z",
        "lastEditedBy" : "ae15cfb8-5436-4398-94e0-d443e413b257",
        "tags" : [
        ]
      },
      {
        "id" : "5a536f60-10b1-403f-85c6-2ec55b691cc7",
        "parentId" : "1e14d3e2-d93c-4f09-a955-51880eeca4fb",
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "I could see arguments in both directions - anyone have strong opinions?",
        "createdAt" : "2019-12-16T13:29:21Z",
        "updatedAt" : "2019-12-16T13:29:22Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "c8f1ae77-ce27-48d0-9642-cdbeda402d17",
        "parentId" : "1e14d3e2-d93c-4f09-a955-51880eeca4fb",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Lets do a normal deprecation.",
        "createdAt" : "2019-12-16T19:26:32Z",
        "updatedAt" : "2019-12-16T19:26:32Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "c394d821fdafd719619eb63fcd1065a95ec02ef9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +39,43 @@\t\tnil,\n\t\tmetrics.ALPHA,\n\t\t\"1.18.0\")\n\n\tnodeMemoryUsageDesc = metrics.NewDesc(\"node_memory_working_set_bytes\","
  },
  {
    "id" : "63133013-8c72-46c2-8412-36765a73f205",
    "prId" : 73946,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73946#pullrequestreview-208161152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8912347f-da29-4dab-960b-dae10d87431c",
        "parentId" : null,
        "authorId" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "body" : "Since we want to remove summary endpoint at last, should we resource-metrics's own struct rather than summay-sytle struct?\r\nI think maybe we need summary endpoint and resource-metrics endpoint co-exist for 1~2 versions. \r\nSo maybe split them totally is a better solution?",
        "createdAt" : "2019-02-26T03:00:39Z",
        "updatedAt" : "2019-03-07T23:39:51Z",
        "lastEditedBy" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "tags" : [
        ]
      },
      {
        "id" : "7ee6d56a-4d65-4221-9fae-6f064b877724",
        "parentId" : "8912347f-da29-4dab-960b-dae10d87431c",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "We could, but that would mean having two different backing implementations of this API, which would copy much of the code used to generate the summary API.  We have one implementation for DockerShim, one for CRI.\r\n\r\nThis implementation doesn't prevent us from removing the summary API, as that just means not exposing the `/stats/summary` endpoint.  After we remove that endpoint entirely, we can easily refactor this implementation to not use the summary API anymore.  For now, it is easier to maintain in this state, as we don't have to duplicate code for dealing with multiple metric sources.",
        "createdAt" : "2019-02-26T19:29:00Z",
        "updatedAt" : "2019-03-07T23:39:51Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "6051664c0fb0eb78a84cea8bf5a1e1e4584de50e",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@\t\t\t\tName:        \"node_cpu_usage_seconds_total\",\n\t\t\t\tDescription: \"Cumulative cpu time consumed by the node in core-seconds\",\n\t\t\t\tValueFn: func(s summary.NodeStats) (*float64, time.Time) {\n\t\t\t\t\tif s.CPU == nil {\n\t\t\t\t\t\treturn nil, time.Time{}"
  }
]