[
  {
    "id" : "355b8d50-420a-40f9-ba3e-feadf4f0d56a",
    "prId" : 33014,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33014#pullrequestreview-1370734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a047b634-ffd3-4f06-90ff-59c20dca65f4",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Is there a reason we need a different prefix?\n",
        "createdAt" : "2016-09-19T14:12:53Z",
        "updatedAt" : "2016-10-05T00:38:55Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "b509ffb2-63a8-4058-a836-16e1494502d1",
        "parentId" : "a047b634-ffd3-4f06-90ff-59c20dca65f4",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "It lets us tell which value (config digest vs manifest digest/spec) we're getting at a glance.  Otherwise, there's not an easy way to tell, except by trying to parse and/or inspect the value\n",
        "createdAt" : "2016-09-19T14:27:20Z",
        "updatedAt" : "2016-10-05T00:38:55Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "c73131ae-20d9-4a3f-b6cd-61f086c325e1",
        "parentId" : "a047b634-ffd3-4f06-90ff-59c20dca65f4",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "I thought we agreed upon introducing a new field called CanonicalImageID to distinguish manifest digest from config digest, and leaving the existing field as is. Why we change that direction? \n",
        "createdAt" : "2016-09-23T17:29:36Z",
        "updatedAt" : "2016-10-05T00:38:55Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "01b0b5ed703d1f72ab074f84022342d171906389",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +44,48 @@\tPodInfraContainerName = leaky.PodInfraContainerName\n\tDockerPrefix          = \"docker://\"\n\tDockerPullablePrefix  = \"docker-pullable://\"\n\tLogSuffix             = \"log\"\n\text4MaxFileNameLen    = 255"
  },
  {
    "id" : "398bf155-5e54-45dd-a289-0be072c32ff5",
    "prId" : 32627,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37107dee-e5d4-4dfc-ae42-5beaa8c55c11",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "As a follow-up to my FYI above, I doubt this code will ever execute in real life\n",
        "createdAt" : "2016-09-14T17:25:04Z",
        "updatedAt" : "2016-09-14T18:13:31Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "0e8da295-f373-445b-9eaf-a358cc4298a1",
        "parentId" : "37107dee-e5d4-4dfc-ae42-5beaa8c55c11",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I agree but it's good to keep it here just in case, since we are so close to release\n",
        "createdAt" : "2016-09-14T17:29:05Z",
        "updatedAt" : "2016-09-14T18:13:31Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a48bf8375d12499efcf4eb4b2011e4c7e160ed7",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +195,199 @@\t\t}\n\n\t\t// process the ID as a digest\n\t\tid, err := dockerdigest.ParseDigest(inspected.ID)\n\t\tif err != nil {"
  },
  {
    "id" : "c3c7b18b-cbca-44f4-9f70-cf1294da7e3f",
    "prId" : 30789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99f5e016-18e5-4b79-9c28-7e5d713f7e33",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry for the drive by, I'm looking for things to add retest-not-required to...\n\nbut won't this give false positives? like \"docker.io/foobar/myimage:1\" and \"bar/myimage:1\" probably shouldn't match but I think they will with this code?\n",
        "createdAt" : "2016-08-19T21:25:49Z",
        "updatedAt" : "2016-08-19T21:25:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "32cca61a-cdd9-4f86-aaa4-e4636f5b447c",
        "parentId" : "99f5e016-18e5-4b79-9c28-7e5d713f7e33",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Yes, they will. Docker allows users to specify an image string without the registry name (i.e., the hostname in the comment), and supplies a default registry (`docker.io`) in this case. The same applies to tagging the image. Therefore, both the image and the tag could contain the registry or not, and that's why I use the suffix check.\n\nOne way to make this more resilient is probably hard-code the default docker registry in kubelet for comparison, I entertained the idea but didn't like it too much. If you think that makes more sense, I can change this PR to do that. By the way, this is a sanity check after docker supposedly pulled the image. If the image doesn't exist, kubelet wouldn't be able to create the container whether the check passes or not. \n",
        "createdAt" : "2016-08-19T21:55:59Z",
        "updatedAt" : "2016-08-19T21:55:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a47e2ff91ae72a30c39e8b2dd592c97e71f5a537",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +174,178 @@\t\t\t// Because either the RepoTag or the name *may* contain the\n\t\t\t// hostname or not, we only check for the suffix match.\n\t\t\tif strings.HasSuffix(image, tag) || strings.HasSuffix(tag, image) {\n\t\t\t\treturn true\n\t\t\t}"
  },
  {
    "id" : "9fc96612-769d-49ac-840d-98194e516b30",
    "prId" : 23800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e71686e-23ee-4c97-a512-dbc7de0a0e72",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Do we have to pass imageID both as an argument and as a filed in the options? The client should be able to write the imageID to the options.\n",
        "createdAt" : "2016-04-18T19:08:32Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "c5133ad6-ff5e-442b-8bb2-33e1429fb388",
        "parentId" : "8e71686e-23ee-4c97-a512-dbc7de0a0e72",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Agree.\n",
        "createdAt" : "2016-04-18T19:53:53Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "9ecd99cd-8d96-4225-ad8b-416502dc57d1",
        "parentId" : "8e71686e-23ee-4c97-a512-dbc7de0a0e72",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "So do we keep imageID here? Seems two opinions?\n",
        "createdAt" : "2016-04-23T10:06:37Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3939473d3a3973df5708880ea32f9cedeae5310",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +161,165 @@\t\tglog.V(1).Infof(\"Pulling image %s without credentials\", image)\n\n\t\terr := p.client.PullImage(imageID, dockertypes.AuthConfig{}, opts)\n\t\tif err == nil {\n\t\t\t// Sometimes PullImage failed with no error returned."
  },
  {
    "id" : "611981fa-1eda-4230-80e3-f0cff2633a88",
    "prId" : 23800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c50e5933-98ed-419c-a7ae-af59d2bf0f65",
        "parentId" : null,
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "Same question as by others below.\n\nWhy are we adding an `image` argument when the `opts` contain the image information.\n",
        "createdAt" : "2016-04-22T17:32:35Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "e1f5c075-64ee-40ad-8d77-2015ca876cf1",
        "parentId" : "c50e5933-98ed-419c-a7ae-af59d2bf0f65",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@MHBauer We do this, because:\n1) Engine-api has moved image out of `ImagePullOptions` https://github.com/docker/engine-api/pull/162, it will be easier to bump up the engine-api version later.\n2) This is more intuitive https://github.com/docker/engine-api/issues/137. :)\n",
        "createdAt" : "2016-04-22T17:45:01Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "e931937e-ddb7-4d9f-b9e5-8aff13d5bbb2",
        "parentId" : "c50e5933-98ed-419c-a7ae-af59d2bf0f65",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "okay.\n",
        "createdAt" : "2016-04-22T17:58:48Z",
        "updatedAt" : "2016-04-23T14:36:07Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3939473d3a3973df5708880ea32f9cedeae5310",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +66,70 @@\tInspectImage(image string) (*dockertypes.ImageInspect, error)\n\tListImages(opts dockertypes.ImageListOptions) ([]dockertypes.Image, error)\n\tPullImage(image string, auth dockertypes.AuthConfig, opts dockertypes.ImagePullOptions) error\n\tRemoveImage(image string, opts dockertypes.ImageRemoveOptions) ([]dockertypes.ImageDelete, error)\n\tLogs(string, dockertypes.ContainerLogsOptions, StreamOptions) error"
  },
  {
    "id" : "023e327c-6361-40be-b3d7-59af705e91cb",
    "prId" : 23699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e6c347-c77a-40ce-b67c-1989a39d1b4e",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "commit lgtm\n",
        "createdAt" : "2016-04-14T00:55:47Z",
        "updatedAt" : "2016-04-15T00:05:57Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3d98b372b461002cccdcc72ab0fd674a5f4aa0f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +61,65 @@\tListContainers(options dockertypes.ContainerListOptions) ([]dockertypes.Container, error)\n\tInspectContainer(id string) (*dockertypes.ContainerJSON, error)\n\tCreateContainer(dockertypes.ContainerCreateConfig) (*dockertypes.ContainerCreateResponse, error)\n\tStartContainer(id string) error\n\tStopContainer(id string, timeout int) error"
  },
  {
    "id" : "0f6c285c-aebb-4394-be5e-25ea10d6224f",
    "prId" : 23506,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab06871-98c8-49dc-9b40-242b5e0d8bfa",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Do we need to detect the API version here and pass the version string for initialization? \n",
        "createdAt" : "2016-03-28T17:37:04Z",
        "updatedAt" : "2016-03-28T22:39:25Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "6be0ed4f-dd55-404b-9e07-b5f27dab29b7",
        "parentId" : "eab06871-98c8-49dc-9b40-242b5e0d8bfa",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "From engine-api doc, looks like if the version number is empty string, the docker client assume you are talking to the latest API. In this case, do we have issues to talk to docker daemon 1.8.3 release? \n",
        "createdAt" : "2016-03-28T17:50:06Z",
        "updatedAt" : "2016-03-28T22:39:25Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "63472d80-d86e-42ff-a4e7-52e59110b030",
        "parentId" : "eab06871-98c8-49dc-9b40-242b5e0d8bfa",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@dchen1107 We didn't do that before https://github.com/fsouza/go-dockerclient/blob/master/client.go#L148, but I'm thinking whether we should do that now.\n",
        "createdAt" : "2016-03-28T17:53:34Z",
        "updatedAt" : "2016-03-28T22:39:25Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6b4378df8dac2b291924a798a298abf4a338626",
    "line" : null,
    "diffHunk" : "@@ -1,1 +283,287 @@\tif len(dockerEndpoint) > 0 {\n\t\tglog.Infof(\"Connecting to docker on %s\", dockerEndpoint)\n\t\treturn dockerapi.NewClient(dockerEndpoint, \"\", nil, nil)\n\t}\n\treturn dockerapi.NewEnvClient()"
  },
  {
    "id" : "3f99f7ef-464a-419c-b3d3-f3c1c2f3b881",
    "prId" : 16653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87bf545c-d9fc-455c-bf6d-f56b24c370db",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Call sites didn't change because the result of this function is always used in a range statement that works with both the new and old return styles.\n",
        "createdAt" : "2015-11-02T22:58:21Z",
        "updatedAt" : "2015-11-02T22:58:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "1006f21c-2359-4b2f-a926-b26e0a14238d",
        "parentId" : "87bf545c-d9fc-455c-bf6d-f56b24c370db",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Yeah, that's why I want to remove the old type. :)\n",
        "createdAt" : "2015-11-02T23:16:40Z",
        "updatedAt" : "2015-11-02T23:16:40Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "d188f5e8-8f93-4945-ab2d-b13a511f3d28",
        "parentId" : "87bf545c-d9fc-455c-bf6d-f56b24c370db",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Yep, I'm just noting for posterity :) It looked funny to me when reviewing\nthat the call sites didn't change when the type changed.\n\nOn Mon, Nov 2, 2015 at 6:16 PM, taotao notifications@github.com wrote:\n\n> In pkg/kubelet/dockertools/docker.go\n> https://github.com/kubernetes/kubernetes/pull/16653#discussion_r43698006\n> :\n> \n> >  // TODO: Move this function with dockerCache to DockerManager.\n> > -func GetKubeletDockerContainers(client DockerInterface, allContainers bool) (DockerContainers, error) {\n> > -   result := make(DockerContainers)\n> >   +func GetKubeletDockerContainers(client DockerInterface, allContainers bool) ([]*docker.APIContainers, error) {\n> \n> Yeah, that's why I want to remove the old type. :)\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16653/files#r43698006.\n",
        "createdAt" : "2015-11-02T23:17:55Z",
        "updatedAt" : "2015-11-02T23:17:55Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "eff4533efcaa73426a22946533c37cc69796e697",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +327,331 @@// Returns a list of docker containers that we manage\n// TODO: Move this function with dockerCache to DockerManager.\nfunc GetKubeletDockerContainers(client DockerInterface, allContainers bool) ([]*docker.APIContainers, error) {\n\tresult := []*docker.APIContainers{}\n\tcontainers, err := client.ListContainers(docker.ListContainersOptions{All: allContainers})"
  },
  {
    "id" : "790aee8d-b12a-4812-86b6-7983e8302b10",
    "prId" : 16580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6686dcac-d8c4-4c03-b672-263e87a4f47c",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Please differentiate between the `!exist` and `ierr != nil` cases, or just print the `ierr` into the error message\n",
        "createdAt" : "2015-11-05T22:43:31Z",
        "updatedAt" : "2015-11-06T03:01:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b512add9c357b22ab6a0127912a3d6930c3c308",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +160,164 @@\t\terr := p.client.PullImage(opts, docker.AuthConfiguration{})\n\t\tif err == nil {\n\t\t\t// Sometimes PullImage failed with no error returned.\n\t\t\texist, ierr := p.IsImagePresent(image)\n\t\t\tif ierr != nil {"
  },
  {
    "id" : "ca739e20-1575-4e6e-9986-5e4f888ded08",
    "prId" : 16414,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5415c8a-5e39-4990-b3dd-46261ff1660c",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "This is used by `GetKubeletDockerContainers`. Do you want to rewrite the function?\n",
        "createdAt" : "2015-10-29T17:44:51Z",
        "updatedAt" : "2015-10-30T05:43:08Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e4b5ed49-f771-49e1-a7bb-e791410bd4d9",
        "parentId" : "f5415c8a-5e39-4990-b3dd-46261ff1660c",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Ha, what I mean is that we defined the the type \"DockerContainers\", and defined the function \"FindPodContainer\". But it seems that we just use \"DockerContainers\" as slice of APIcontainers (https://github.com/kubernetes/kubernetes/search?utf8=%E2%9C%93&q=GetKubeletDockerContainers&type=Code), never use function like FindPodContainer. So I just wonder whether we should remove this type, :)\n",
        "createdAt" : "2015-10-29T18:09:34Z",
        "updatedAt" : "2015-10-30T05:43:08Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "f3a1b4c7-5749-4c74-a046-3b98e3345f1f",
        "parentId" : "f5415c8a-5e39-4990-b3dd-46261ff1660c",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Just curious when reading the code, so add a comment here. :)\n",
        "createdAt" : "2015-10-29T18:10:27Z",
        "updatedAt" : "2015-10-30T05:43:08Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "0b9b4ef3-39cb-4947-a6a9-147fc0149e50",
        "parentId" : "f5415c8a-5e39-4990-b3dd-46261ff1660c",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I believe it was used in other places but we gradually migrated off. Personally I'd be happy to see the type be removed. Feel free to send a PR for this :)\n",
        "createdAt" : "2015-10-29T18:13:16Z",
        "updatedAt" : "2015-10-30T05:43:08Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "7262118d-3d62-4aa9-8a38-7f937290dbf4",
        "parentId" : "f5415c8a-5e39-4990-b3dd-46261ff1660c",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "OK. :) Thanks! Haha~\n",
        "createdAt" : "2015-10-29T18:17:06Z",
        "updatedAt" : "2015-10-30T05:43:08Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3585a5209d4fb1124364523124680357ef71cd8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +212,216 @@}\n\n// TODO (random-liu) Almost never used, should we remove this?\n// DockerContainers is a map of containers\ntype DockerContainers map[kubetypes.DockerID]*docker.APIContainers"
  },
  {
    "id" : "0b8f573c-b5eb-41ac-bbcf-b752fd3faeec",
    "prId" : 10655,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "382afb19-382c-4a58-ac7a-1c198f39133d",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Is \"2\" the kernel default? I thought it was 1024...\n",
        "createdAt" : "2015-07-02T00:03:56Z",
        "updatedAt" : "2015-07-02T17:47:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "30191cb8-61b6-46a1-b23b-a7b6d935ce73",
        "parentId" : "382afb19-382c-4a58-ac7a-1c198f39133d",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "I commented above, 1024 is docker default, not kernel's for 0 cpu.share. Kernel's default for unset is 1024. \n",
        "createdAt" : "2015-07-02T00:05:06Z",
        "updatedAt" : "2015-07-02T17:47:39Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "8f635176-07fc-4918-a12d-0a662074f0bc",
        "parentId" : "382afb19-382c-4a58-ac7a-1c198f39133d",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I see. I confused \"unset\" with \"0\". Thanks for the explanation.\n",
        "createdAt" : "2015-07-02T00:07:41Z",
        "updatedAt" : "2015-07-02T17:47:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "dc91c344-0888-41c8-b4a5-8ba691979885",
        "parentId" : "382afb19-382c-4a58-ac7a-1c198f39133d",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "2 is the min allowable shares\n",
        "createdAt" : "2015-07-02T00:11:23Z",
        "updatedAt" : "2015-07-02T17:47:39Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "98286eff-3d03-4b69-8d16-415fd03c08be",
        "parentId" : "382afb19-382c-4a58-ac7a-1c198f39133d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "minShares?\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/0f1c4c25c344f70c3592040b2ef092ccdce0244f/pkg/kubelet/dockertools/docker.go#L49\n",
        "createdAt" : "2015-07-02T04:03:47Z",
        "updatedAt" : "2015-07-02T17:47:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ce11545c03c27841428c78c549b914330716d52",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +309,313 @@\t\t// Docker converts zero milliCPU to unset, which maps to kernel default\n\t\t// for unset: 1024. Return 2 here to really match kernel default for\n\t\t// zero milliCPU.\n\t\treturn minShares\n\t}"
  },
  {
    "id" : "468afefe-15e6-4093-97b8-e1558fd29d73",
    "prId" : 9291,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dff3d432-dac0-4e6a-ac13-d100a14a361b",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "nit: prefer %q to %s. It makes it clear what is a variable and helps when the string has whitespace\n",
        "createdAt" : "2015-06-05T15:36:02Z",
        "updatedAt" : "2015-06-05T18:29:47Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "636b40ffa1992815c5063fe8b3f8b9fce67aaf7f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +126,130 @@\t\tjerr.Code == http.StatusGatewayTimeout) {\n\t\tglog.V(2).Infof(\"Pulling image %q failed: %v\", image, err)\n\t\treturn fmt.Errorf(\"image pull failed for %s because the registry is temporarily unavailbe.\", image)\n\t} else {\n\t\treturn err"
  },
  {
    "id" : "117b72a8-4e60-4d59-9b91-8d5813fd1c72",
    "prId" : 7974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "295493da-fb67-48d0-8e69-40122a714606",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@yifan-gu What needs to be done for Rocket?\n",
        "createdAt" : "2015-05-13T23:26:31Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "06eac4b3-fdde-46d1-afc0-bb72ee7b7443",
        "parentId" : "295493da-fb67-48d0-8e69-40122a714606",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "cc @dchen1107 @vmarmol on Kubelet changes\n",
        "createdAt" : "2015-05-13T23:26:59Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "8c9ac1b6-31a3-4a8a-b691-24b8b05ca134",
        "parentId" : "295493da-fb67-48d0-8e69-40122a714606",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@bgrant0607 Just need to add this sentence in rkt's Pull as well for docker images.\n\n/cc @philips @bakins\n",
        "createdAt" : "2015-05-13T23:39:37Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "9318ad21-ab1e-46c2-b9fa-53bcf799a72a",
        "parentId" : "295493da-fb67-48d0-8e69-40122a714606",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Looks like this has been addressed to me, looking at the changes to rkt.go in this pull.\n",
        "createdAt" : "2015-05-18T19:46:43Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "72c0709f18cbeff1efef3c2bd601db5f1e117509",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +127,131 @@\t}\n\n\tkeyring, err := credentialprovider.MakeDockerKeyring(secrets, p.keyring)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "7683529a-fc03-4884-931e-c6ff4752a7b0",
    "prId" : 7134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75b443e9-867e-4b64-b189-2a7037fb887f",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Add a TODO here to move this duplicate code later?\n",
        "createdAt" : "2015-04-21T21:41:16Z",
        "updatedAt" : "2015-04-21T21:52:18Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "611fb25926153e6ac9b9992eee2ffb8ec96b369a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@// Returns the major and minor version numbers of docker server.\n// TODO(yifan): Remove this once the ContainerCommandRunner is implemented by dockerManager.\nfunc (d *dockerContainerCommandRunner) getDockerServerVersion() (docker.APIVersion, error) {\n\tenv, err := d.client.Version()\n\tif err != nil {"
  },
  {
    "id" : "f93d44ee-d92e-4e9f-b40c-4a338821c344",
    "prId" : 7054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ea4af0c-1ced-4352-99c0-281c6033209d",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "We had some problems with consistency of this across API versions (1.3?)\n\nPerhaps it's stabilized now, but can you check against at least 1.4, 1.5 and 1.6?\n",
        "createdAt" : "2015-04-20T17:57:00Z",
        "updatedAt" : "2015-04-20T17:57:00Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "1d987062-2629-4b99-ba5e-3dde4382ae49",
        "parentId" : "7ea4af0c-1ced-4352-99c0-281c6033209d",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I checked back to Docker 1.0 and it seemed consistent. All but 1.6 below were built using `AUTO_GOPATH=1 ./hack/make.sh dynbinary`.\n\n1.0.0: `{\"ApiVersion\":\"1.12\",\"Arch\":\"amd64\",\"GitCommit\":\"63fe64c\",\"GoVersion\":\"go1.4.2\",\"KernelVersion\":\"3.18.9-200.fc21.x86_64\",\"Os\":\"linux\",\"Version\":\"1.0.0\"}`\n\n1.4.0:\n`{\"ApiVersion\":\"1.16\",\"Arch\":\"amd64\",\"GitCommit\":\"4595d4f\",\"GoVersion\":\"go1.4.2\",\"KernelVersion\":\"3.18.9-200.fc21.x86_64\",\"Os\":\"linux\",\"Version\":\"1.4.0\"}`\n\n1.5.0:\n`{\"ApiVersion\":\"1.17\",\"Arch\":\"amd64\",\"GitCommit\":\"a8a31ef\",\"GoVersion\":\"go1.4.2\",\"KernelVersion\":\"3.18.9-200.fc21.x86_64\",\"Os\":\"linux\",\"Version\":\"1.5.0\"}`\n\n1.6.0:\n`{\"ApiVersion\":\"1.18\",\"Arch\":\"amd64\",\"GitCommit\":\"0591dce/1.6.0\",\"GoVersion\":\"go1.4.2\",\"KernelVersion\":\"3.18.9-200.fc21.x86_64\",\"Os\":\"linux\",\"Version\":\"1.6.0\"}`\n",
        "createdAt" : "2015-04-20T18:00:58Z",
        "updatedAt" : "2015-04-20T18:00:58Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "26e81463-ea32-4cac-9fcb-815b1a37a1c5",
        "parentId" : "7ea4af0c-1ced-4352-99c0-281c6033209d",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "We also report docker server version as part of GetDockerServerVersion defined at https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/v1beta3/types.go#L1095\n\nThat one only includes docker server version here. I am ok to change to APIVersion, but we need to fix that output though. \n",
        "createdAt" : "2015-04-20T18:31:08Z",
        "updatedAt" : "2015-04-20T18:31:08Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "b7ee4fff-ea03-498f-b537-767f97e2c3b6",
        "parentId" : "7ea4af0c-1ced-4352-99c0-281c6033209d",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "@dchen1107 I'm confused - what's missing specifically?\n",
        "createdAt" : "2015-04-20T18:33:51Z",
        "updatedAt" : "2015-04-20T18:33:51Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "d88586c8-2903-402b-a2f9-9f3f6950c436",
        "parentId" : "7ea4af0c-1ced-4352-99c0-281c6033209d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Actually, that version is coming up out of cAdvisor:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/cd61aa948445019152e8a8b438eb5198cd37f8c6/pkg/kubelet/kubelet.go#L1786\n\nArguably we should unify this in a single location (and skip the cadvisor call) but that's independent to this PR.\n",
        "createdAt" : "2015-04-20T21:19:30Z",
        "updatedAt" : "2015-04-20T21:19:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a80ea76e756055996447416fd734a40c81b0a9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +127,131 @@\t}\n\n\tapiVersion := env.Get(\"ApiVersion\")\n\tversion, err := docker.NewAPIVersion(apiVersion)\n\tif err != nil {"
  },
  {
    "id" : "2e4607bd-e6ce-4691-9deb-79d536312b90",
    "prId" : 6608,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d12afd78-e33d-4109-9123-a53c2f75deae",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "There is a flag for this, we should use it instead of this (the old version was unused I believe).\n",
        "createdAt" : "2015-04-09T00:54:53Z",
        "updatedAt" : "2015-04-13T23:19:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "47c91954-52fd-4af8-a229-8767b2963272",
        "parentId" : "d12afd78-e33d-4109-9123-a53c2f75deae",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Gotcha\n",
        "createdAt" : "2015-04-09T01:07:47Z",
        "updatedAt" : "2015-04-13T23:19:31Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "bc20f685-a5d3-4317-9dae-e64c245bde62",
        "parentId" : "d12afd78-e33d-4109-9123-a53c2f75deae",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@vmarmol I have checked about this. The flag is stored in kubelet, I think we should move it to the DockManager?\n",
        "createdAt" : "2015-04-09T16:43:32Z",
        "updatedAt" : "2015-04-13T23:19:31Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "f61a6f8f-ef6a-40e8-9937-3e51b9e1ceab",
        "parentId" : "d12afd78-e33d-4109-9123-a53c2f75deae",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "SGTM, the PR was merged :)\n",
        "createdAt" : "2015-04-09T17:35:37Z",
        "updatedAt" : "2015-04-13T23:19:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cdb1bf9ce80eee83121ae3145e563f18dc1db15",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@\tPodInfraContainerName  = leaky.PodInfraContainerName\n\tDockerPrefix           = \"docker://\"\n\tPodInfraContainerImage = \"gcr.io/google_containers/pause:0.8.0\"\n)\n"
  },
  {
    "id" : "8887372a-3c7e-4773-91fc-064c15107946",
    "prId" : 6278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6264d34-ecd2-4e9f-9962-591ab2d4da37",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Remove the TODO\n",
        "createdAt" : "2015-04-01T13:54:21Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "4e9fa337-3202-46a7-8fe0-dff7de942298",
        "parentId" : "f6264d34-ecd2-4e9f-9962-591ab2d4da37",
        "authorId" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "body" : "the question about what to do is still valid, for this moment, it is only failing with an error.\nIf you think that this is really sufficient, I can remove it.\n",
        "createdAt" : "2015-04-01T14:06:17Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "tags" : [
        ]
      },
      {
        "id" : "7d5950a0-573d-4cff-8452-bddd2fcbb2df",
        "parentId" : "f6264d34-ecd2-4e9f-9962-591ab2d4da37",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I think the most appropriate way to handle this is to have the kubelet check for socat and return an error if it's not available when the port forwarding request comes in, before spawning listeners and so on. But that's not implemented now, and doesn't need to be part of this PR.\n",
        "createdAt" : "2015-04-01T14:09:33Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "a9375628-23b7-4446-93c2-dc20a2873454",
        "parentId" : "f6264d34-ecd2-4e9f-9962-591ab2d4da37",
        "authorId" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "body" : "agree\nlet's keep this for another PR for this specific point\nI was only touching this part to remove frustration of not knowing the cause of the error.\n",
        "createdAt" : "2015-04-01T16:49:08Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7fc22be8a52b63bb74fa50ff80e6177c2ae42f2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +296,300 @@\n\tcontainerPid := container.State.Pid\n\t// TODO what if the host doesn't have it???\n\t_, lookupErr := exec.LookPath(\"socat\")\n\tif lookupErr != nil {"
  },
  {
    "id" : "1a2e918e-663d-46bf-ad18-71a890d04265",
    "prId" : 5975,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8fe3e8-4669-42e3-b88d-168e1b80d474",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "will rocket also needs this? does it make sense to move this to container pkg?\n",
        "createdAt" : "2015-03-26T01:42:17Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "b8fdc633-e6a6-4d22-a954-8412bcbe9225",
        "parentId" : "6c8fe3e8-4669-42e3-b88d-168e1b80d474",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@jonboulle \nNeed clarification about how we represents CPU share in rocket?\n",
        "createdAt" : "2015-03-26T01:45:12Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "822bc927-a9a3-472d-a18f-ed763e520d15",
        "parentId" : "6c8fe3e8-4669-42e3-b88d-168e1b80d474",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@xiang90 Just checked spec. Think we just use milliCore. So it's kind docker specific IMO?\n",
        "createdAt" : "2015-03-26T01:48:14Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "532778da-c1fd-45ad-bc93-d95eb0d369c8",
        "parentId" : "6c8fe3e8-4669-42e3-b88d-168e1b80d474",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "FWIU Rocket will be doing a similar conversion internally. Docker exposes shares so we do the conversion ourselves. The API we'd like to expose the Kubelet is millicores.\n",
        "createdAt" : "2015-03-26T15:52:56Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "e68b7048-d683-42cb-8548-fd2a0b30df58",
        "parentId" : "6c8fe3e8-4669-42e3-b88d-168e1b80d474",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@vmarmol Awesome! Thanks :)\n",
        "createdAt" : "2015-03-26T16:53:34Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f08555f457ac7ed8396e915e8c4d41a55e6539b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +50,54 @@)\n\nconst (\n\t// Taken from lmctfy https://github.com/google/lmctfy/blob/master/lmctfy/controllers/cpu_controller.cc\n\tminShares     = 2"
  },
  {
    "id" : "708d71d1-4521-4ed9-9f58-c08ec52e1e33",
    "prId" : 5975,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b4873cb-b229-45a2-8184-0dd3290986bb",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "this seems to be a generic thing too.\n",
        "createdAt" : "2015-03-26T01:46:25Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "1e4c0c8e-6ef7-4acc-ad01-3f0527b729c5",
        "parentId" : "2b4873cb-b229-45a2-8184-0dd3290986bb",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@xiang90 Hmm, I think in the future after we land this https://github.com/coreos/rocket/issues/294 then we can generate podmanifest, so we don't need these helpers for rocket.\n",
        "createdAt" : "2015-03-26T01:57:11Z",
        "updatedAt" : "2015-03-26T20:43:51Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f08555f457ac7ed8396e915e8c4d41a55e6539b",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +897,901 @@}\n\nfunc makePortsAndBindings(container *api.Container) (map[docker.Port]struct{}, map[docker.Port][]docker.PortBinding) {\n\texposedPorts := map[docker.Port]struct{}{}\n\tportBindings := map[docker.Port][]docker.PortBinding{}"
  },
  {
    "id" : "2b31fc11-28d1-4fe9-a212-c925f1bcb801",
    "prId" : 5631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "What about returning 3 values rather than the struct?\n",
        "createdAt" : "2015-03-19T00:54:48Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "459d06ce-16e7-445b-b861-ca3fa94ea2ef",
        "parentId" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1\n",
        "createdAt" : "2015-03-19T02:57:01Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "85ff21b1-95d6-4dd5-951d-797613429750",
        "parentId" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Too many return values makes code hard to follow.\n",
        "createdAt" : "2015-03-19T16:47:42Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "32c49cd9-04e4-4bd9-a00d-c846ec111d5b",
        "parentId" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Most of our code takes that route today :) not a blocker for this though.\n",
        "createdAt" : "2015-03-19T16:51:21Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "fb19db0e-8abb-415c-912f-2537eb1bf622",
        "parentId" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "I know. Another one I want to change is ParseDockerName :-)\n",
        "createdAt" : "2015-03-19T16:55:10Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "f259800c-4c81-4d6a-80aa-e22973b847fb",
        "parentId" : "1b65411e-da8d-49e8-ae0a-ef64c538a499",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "WDYT if we meet in the middle, we have containerStatusResult with a status\nand an ip (no error). The function returns (containerStatusResult, error).\nI think this is more natural for Go and shouldn't have too many return\ntypes.\n\nOn Thu, Mar 19, 2015 at 9:55 AM, Dawn Chen notifications@github.com wrote:\n\n> In pkg/kubelet/dockertools/docker.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5631#discussion_r26773710\n> :\n> \n> > @@ -534,19 +533,29 @@ var (\n> >     ErrContainerCannotRun = errors.New(\"Container cannot run\")\n> >  )\n> > \n> > -func inspectContainer(client DockerInterface, dockerID, containerName, tPath string) (*api.ContainerStatus, error) {\n> > +// Internal information kept for containers from inspection\n> > +type containerStatusResult struct {\n> > -   status api.ContainerStatus\n> > -   podIP  string\n> > -   err    error\n> >   +}\n> >   +\n> >   +func inspectContainer(client DockerInterface, dockerID, containerName, tPath string) *containerStatusResult {\n> \n> I know. Another one I want to change is ParseDockerName :-)\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5631/files#r26773710\n> .\n",
        "createdAt" : "2015-03-19T16:57:58Z",
        "updatedAt" : "2015-03-19T17:42:12Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "4910be6dcb201d7aa5c93f364fffaf2ac3896a95",
    "line" : null,
    "diffHunk" : "@@ -1,1 +536,540 @@}\n\nfunc inspectContainer(client DockerInterface, dockerID, containerName, tPath string) *containerStatusResult {\n\tresult := containerStatusResult{api.ContainerStatus{}, \"\", nil}\n"
  },
  {
    "id" : "8c8146b5-4087-4d4f-a4d0-3a6a8ae253f7",
    "prId" : 5558,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bfc297c-29e4-4d13-a7bb-4536fde32c18",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "I believe the issue is here, we removed the image output here (which was shadowing the image arg :( ) so we ask to pull Repository: \"kubernetes/pause:0.1.0\" instead of \"kubernetes/pause\" with tag \"0.1.0\"\n",
        "createdAt" : "2015-03-17T22:44:09Z",
        "updatedAt" : "2015-03-17T22:44:09Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "287660b7-bd08-440d-9160-7a14e35a895c",
        "parentId" : "4bfc297c-29e4-4d13-a7bb-4536fde32c18",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Shadowing 7, Kubernetes team 0\n\n> On Mar 17, 2015, at 6:44 PM, Victor Marmol notifications@github.com wrote:\n> \n> In pkg/kubelet/dockertools/docker.go:\n> \n> > @@ -325,7 +326,7 @@ func NewDockerContainerCommandRunner(client DockerInterface) ContainerCommandRun\n> >  }\n> > \n> >  func (p dockerPuller) Pull(image string) error {\n> > -   image, tag := parseImageName(image)\n> > -   _, tag := parsers.ParseRepositoryTag(image)\n> >   I believe the issue is here, we removed the image output here (which was shadowing the image arg :( ) so we ask to pull Repository: \"kubernetes/pause:0.1.0\" instead of \"kubernetes/pause\" with tag \"0.1.0\"\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-17T22:50:06Z",
        "updatedAt" : "2015-03-17T22:50:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c8762eab-45ca-43e6-aa83-73773c409573",
        "parentId" : "4bfc297c-29e4-4d13-a7bb-4536fde32c18",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "And a case for better unit tests.\n",
        "createdAt" : "2015-03-17T22:51:50Z",
        "updatedAt" : "2015-03-17T22:51:50Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "53152a99-9d6c-4107-9516-9d6b180a8301",
        "parentId" : "4bfc297c-29e4-4d13-a7bb-4536fde32c18",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Somehow I thought there is a unittests for this instead of removing one. My bad not catch the issue. \n",
        "createdAt" : "2015-03-17T23:01:26Z",
        "updatedAt" : "2015-03-17T23:01:26Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "64dec535-75b0-46fb-a98d-7288f439f320",
        "parentId" : "4bfc297c-29e4-4d13-a7bb-4536fde32c18",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I can provide a fix for this in a couple of hours, or if someone wants to do it sooner, feel free.\n",
        "createdAt" : "2015-03-17T23:14:48Z",
        "updatedAt" : "2015-03-17T23:14:48Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c08f41c18bf0e8823d08c65f0c0be05f51a6ce46",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +327,331 @@\nfunc (p dockerPuller) Pull(image string) error {\n\t_, tag := parsers.ParseRepositoryTag(image)\n\n\t// If no tag was specified, use the default \"latest\"."
  },
  {
    "id" : "8e0a75b4-e209-4815-9927-4fc842f431ac",
    "prId" : 5032,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b12f5b4e-362e-469c-adf6-d5ce6a3a6afe",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Only use UID, it is guaranteed to be unique in time and space. The podFullName is a vestige of an older era.\n",
        "createdAt" : "2015-03-04T23:28:49Z",
        "updatedAt" : "2015-03-06T00:41:04Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "a820178c-357d-4592-ace8-4ed0a635b71c",
        "parentId" : "b12f5b4e-362e-469c-adf6-d5ce6a3a6afe",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@vmarmol Good news to hear.\n",
        "createdAt" : "2015-03-05T02:14:08Z",
        "updatedAt" : "2015-03-06T00:41:04Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed1823e2769af6aaa513866a4cbe6556410987bd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +420,424 @@\n// FindContainersByPod returns the containers that belong to the pod.\nfunc (c DockerContainers) FindContainersByPod(podUID types.UID, podFullName string) DockerContainers {\n\tcontainers := make(DockerContainers)\n"
  },
  {
    "id" : "4dd40696-138a-4765-a462-e590714b75cc",
    "prId" : 3763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e5fea2-fac7-4eb3-a116-f17d7338c803",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The solution definitely needs to be cgroup confined.  What's the risk of a socat compromise?\n",
        "createdAt" : "2015-01-24T20:23:52Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9b695ff0-5206-48f4-9928-aab61530a6b0",
        "parentId" : "79e5fea2-fac7-4eb3-a116-f17d7338c803",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Since it has to run in the container's network namespace, we have to run nsenter, which means we need elevated privileges. I think I have a narrowed down list of the specific privileges we need to run nsenter, but still, if an attacker can escape socat, they'd either be on the host or in a partially or fully privileged container.\n",
        "createdAt" : "2015-01-26T14:27:51Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd0e9ab05c99c76cc07b84c4134c225994cdcc2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +291,295 @@//  - match cgroups of container\n//  - should we support nsenter + socat on the host? (current impl)\n//  - should we support nsenter + socat in a container, running with elevated privs and --pid=host?\nfunc (d *dockerContainerCommandRunner) PortForward(podInfraContainerID string, port uint16, stream io.ReadWriteCloser) error {\n\tcontainer, err := d.client.InspectContainer(podInfraContainerID)"
  },
  {
    "id" : "4138646f-baa2-4652-a18e-ead49063a80f",
    "prId" : 3763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f002dbd-8cb8-4116-8507-1916847e2b73",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is crying out for a generic \"command to pipe\" class.\n",
        "createdAt" : "2015-01-24T20:24:37Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd0e9ab05c99c76cc07b84c4134c225994cdcc2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +245,249 @@\t\treturn command.Wait()\n\t} else {\n\t\tcp := func(dst io.WriteCloser, src io.Reader, closeDst bool) {\n\t\t\tdefer func() {\n\t\t\t\tif closeDst {"
  },
  {
    "id" : "72f866cb-d38e-4a2d-85cb-8523f2a370e6",
    "prId" : 3044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "903a1700-9cbe-4b43-9d87-22e797d47a5c",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Do we know if docker will always return exit status has non zero for oom killed containers?\n",
        "createdAt" : "2014-12-19T00:04:31Z",
        "updatedAt" : "2014-12-19T00:04:31Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "e2afab9d-2cd8-4ccb-88f1-bd223e70400e",
        "parentId" : "903a1700-9cbe-4b43-9d87-22e797d47a5c",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Yes, we do. Otherwise, docker breaks its own API. \n",
        "createdAt" : "2014-12-19T00:29:57Z",
        "updatedAt" : "2014-12-19T00:29:57Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "f073ecf4cc216bf38e19c27e7750a99416aa6fc3",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +403,407 @@\t\t}\n\t\twaiting = false\n\t} else if !inspectResult.State.FinishedAt.IsZero() {\n\t\treason := \"\"\n\t\t// Note: An application might handle OOMKilled gracefully."
  },
  {
    "id" : "657f6df9-1aca-4bb1-9946-bc826fc0c2ac",
    "prId" : 2536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "612c78a2-0213-4f89-ad5d-787a424f39da",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Should this be in a different PR (or at least a different commit?)\n",
        "createdAt" : "2014-11-25T19:21:03Z",
        "updatedAt" : "2014-12-09T21:11:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "e2220e47-295e-4d4a-a40b-fd97ea35cf8c",
        "parentId" : "612c78a2-0213-4f89-ad5d-787a424f39da",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "And a comment on why this could occur?\n",
        "createdAt" : "2014-11-26T01:13:05Z",
        "updatedAt" : "2014-12-09T21:11:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1721cec8-a785-4079-a3d9-b330d5e7b5e8",
        "parentId" : "612c78a2-0213-4f89-ad5d-787a424f39da",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It actually was in a different PR, accidentally included the commit here.\n",
        "createdAt" : "2014-12-02T01:00:27Z",
        "updatedAt" : "2014-12-09T21:11:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c3f6a402da932b318ed57afd0bf317f791b940f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +321,325 @@\t}\n\tfor _, dockerContainer := range containers {\n\t\tif len(dockerContainer.Names) == 0 {\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "b0a0e08b-10a6-4d06-959e-44d38ccf6d09",
    "prId" : 2225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c255268f-3550-4213-a188-ba68dd6ac459",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What assumption are you making here? That the path MUST be in a volume?\n",
        "createdAt" : "2014-11-07T20:12:37Z",
        "updatedAt" : "2014-11-10T18:56:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "97f219a2-8af9-48d2-bdca-1f887af8e1cc",
        "parentId" : "c255268f-3550-4213-a188-ba68dd6ac459",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Yes, the feature is based on the docker's feature: Mount a host file as a data volume. The design is that once tPath is not empty, we should create a host file at /var/lib/kubelet/$Pod/$dockerID, then mount it at mount point: tPath.\n\nThe reason of tPath could be empty is for containervm usecase since there is no validation and conversion. \n",
        "createdAt" : "2014-11-07T20:38:59Z",
        "updatedAt" : "2014-11-10T18:56:32Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "57454cce819c6da1ea66fdb745d4729e272720bb",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +407,411 @@\t\t}\n\t\tif tPath != \"\" {\n\t\t\tpath, found := inspectResult.Volumes[tPath]\n\t\t\tif found {\n\t\t\t\tdata, err := ioutil.ReadFile(path)"
  },
  {
    "id" : "e80518cd-60b6-438f-b625-c3e047e97403",
    "prId" : 2225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f86ce7-7550-4a7e-bded-a6839b29663e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Could an empty file cause this error, or only non-existence, bad permissions, and the like?\n",
        "createdAt" : "2014-11-07T20:14:18Z",
        "updatedAt" : "2014-11-10T18:56:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0d438123-7db6-47b0-9d0d-fb344dc54f90",
        "parentId" : "83f86ce7-7550-4a7e-bded-a6839b29663e",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "No, I believe only filesystem and disk error could cause this. Should integrate with events later. \n",
        "createdAt" : "2014-11-07T20:39:44Z",
        "updatedAt" : "2014-11-10T18:56:32Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "57454cce819c6da1ea66fdb745d4729e272720bb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +411,415 @@\t\t\t\tdata, err := ioutil.ReadFile(path)\n\t\t\t\tif err != nil {\n\t\t\t\t\tglog.Errorf(\"Error on reading termination-log %s(%v)\", path, err)\n\t\t\t\t} else {\n\t\t\t\t\tcontainerStatus.State.Termination.Message = string(data)"
  },
  {
    "id" : "c2a2a4ee-dc78-429f-a204-542961c8a8bc",
    "prId" : 2207,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "831cbe6b-6b69-4c21-ba35-e8a663d42fdc",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Does this work if there is nothing in the dockerKeyring?\n",
        "createdAt" : "2014-11-06T19:37:58Z",
        "updatedAt" : "2014-11-06T20:01:31Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "7e1d4856-7435-4ad6-a0ea-806e89d755b6",
        "parentId" : "831cbe6b-6b69-4c21-ba35-e8a663d42fdc",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "It does. If dk.creds is empty, ok will be false and the method will proceed with it's previous behavior.\n",
        "createdAt" : "2014-11-06T20:30:55Z",
        "updatedAt" : "2014-11-06T20:30:55Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d76452bc2287e0a0215305eaeecbb79b210ec58",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +627,631 @@\t}\n\n\t// use credentials for the default registry if provided\n\tif auth, ok := dk.creds[defaultRegistryHost]; ok {\n\t\treturn auth, true"
  },
  {
    "id" : "e670bfd1-a3a0-4a36-a7b2-e86d0d68ea6c",
    "prId" : 1855,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d9b1d1e-baff-4339-af0f-301029ce44ce",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You should be able to check for os.IsNotFound() here\n",
        "createdAt" : "2014-10-20T13:19:07Z",
        "updatedAt" : "2014-10-20T13:31:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bccce4520e1b9438331e35be05a1dc1c8b0a22f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +85,89 @@\t\tcfg.addToKeyring(dp.keyring)\n\t} else if !os.IsNotExist(err) {\n\t\tglog.V(1).Infof(\"Unable to parse Docker config file: %v\", err)\n\t}\n"
  },
  {
    "id" : "e2c51c56-781d-4474-ab07-bd167e4eaf27",
    "prId" : 1457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c59c9be-d0de-432b-9897-cb4ff96ab906",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Another option would be to wait until the QPS limit allows us to pull.  Having a queue of pending pulls might be tricky.\n\nWith things as they are, will this cause the outer code to go into a loop trying to pull and spew to the log?  (Looks like we sync every 10s by default so I guess that isn't too bad.)  Might want to have more debugging info here about which container, the name of the image, etc.\n\nAlso, there are places where we don't check for error when pulling.  I'm looking at `createNetworkContainer` in `kubelet.go`.  I wonder how they'll react to this.  We might see errors where we didn't see them before.\n",
        "createdAt" : "2014-09-26T16:31:45Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "6add3e99-fdc8-401d-96e5-1ccaa1cd10bc",
        "parentId" : "9c59c9be-d0de-432b-9897-cb4ff96ab906",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I'd like to actually try to run the container if the pull fails.  We don't do this now, it requires a richer error type, but consider it a TODO, so blocking for the pull to succeed will break that.\n",
        "createdAt" : "2014-09-26T17:17:56Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac706a32e64c37da72691cd2daab312ef800045",
    "line" : null,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\treturn p.puller.Pull(image)\n\t}\n\treturn fmt.Errorf(\"pull QPS exceeded.\")\n}\n"
  },
  {
    "id" : "2367dc2e-1adf-4050-9754-0cf88d78304e",
    "prId" : 1457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5895ac5-fbd9-4ab0-8f30-81df72e26aa4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "By making this a hidden detail of the puller, you're sort of making an assumption that the caller will retry on a long-enough timescale to eventually pass.  we already have a problem where we can't tell if a pull failed because of network error, because of server error, or because the image doesn't exist.   We will have to do better on error reporting eventually.  I guess we can revisit the error type later, and maybe pass up more info in a specific type for this case.\n",
        "createdAt" : "2014-09-26T16:59:22Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f871cc96-a03f-4420-97b5-cf59c3ff15a3",
        "parentId" : "e5895ac5-fbd9-4ab0-8f30-81df72e26aa4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "yeah, we should add richer errors here, esp. so we can try to actually run the container in some errors (e.g. network problem)\n",
        "createdAt" : "2014-09-26T17:20:31Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac706a32e64c37da72691cd2daab312ef800045",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\treturn dp\n\t}\n\treturn &throttledDockerPuller{\n\t\tpuller:  dp,\n\t\tlimiter: util.NewTokenBucketRateLimiter(qps, burst),"
  },
  {
    "id" : "f6d2b2a2-bc85-41a2-b97b-38e33d97c113",
    "prId" : 1457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why not just block until the QPS block is lifted?\n",
        "createdAt" : "2014-09-26T17:31:01Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "35dbadfe-0409-4495-8389-a04b354c491e",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I guess the question is whether there's ever a situation where you'd rather fail than respect the rate limit?  I have a hard time imagining such a mode, except in a very extreme situation where you might be better off getting rescheduled   on a different host...\n",
        "createdAt" : "2014-09-26T17:38:10Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3b105efc-a457-4aa8-bd2c-007c40e0f246",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I guess you might want to fail here and try a local image if it exists.  Do we then need a queueing API here that says \"I have no local image, I want to run, put me in the queue\" to prevent DoS?\n",
        "createdAt" : "2014-09-26T17:41:15Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "acebb401-dbd2-4273-b862-e5235e353734",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Actually the more I think about it the more I think you're going to usually just spend all of the QPS budget on calls that always fail fast, starving legit calls. I think the management system needs to slice up the QPS budget and explicitly not starve other pods.\n\nBasically I don't think you can do this while hiding the QPS budget behind the docker puller interface.\n",
        "createdAt" : "2014-09-26T17:51:32Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8092b6a2-0354-472b-99ae-84ac2c60ade2",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This is really just to prevent us from DDOS-ing Docker.  (there were complaints yesterday).\n\nWe should also have an explicit \"back off in case of image pull failures\" component, but that is not this one.\n",
        "createdAt" : "2014-09-26T18:16:10Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2546baf6-4cda-4b91-9402-0b4cbe69a45f",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "And I don't want to block, for the reasons Tim mentioned.  I want to retry using a local image.  I realize that the code doesn't do that right now as written, since we'll need to introduce our own error type.  It's TODO'd\n",
        "createdAt" : "2014-09-26T18:16:55Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "911c2fc8-4ffa-4817-90f1-d2427723ad07",
        "parentId" : "a4fade38-ef08-4efe-a654-31f9a5cd8e90",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't see a TODO?  @dchen1107 because we were talking about error-handling around pulls yesterday - I think we could spend a bit of time in this space to make it safer, not necessary as part of this PR\n",
        "createdAt" : "2014-09-26T18:28:23Z",
        "updatedAt" : "2014-09-26T18:55:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac706a32e64c37da72691cd2daab312ef800045",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\treturn p.puller.Pull(image)\n\t}\n\treturn fmt.Errorf(\"pull QPS exceeded.\")\n}\n"
  },
  {
    "id" : "4ce7d031-a555-449c-b72f-7575a3edf8fe",
    "prId" : 1318,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03320dfe-d723-402d-9e2c-e1df6c0442f4",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Do we want to at least allow the option of passing a separate error stream?\n",
        "createdAt" : "2014-09-16T03:45:10Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5dc8832b-5d37-45a5-9e99-427a0cbf4653",
        "parentId" : "03320dfe-d723-402d-9e2c-e1df6c0442f4",
        "authorId" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "body" : "Is it really necessary to have separate stream for stdout and stderr ?\nCause if it is, then there would need to be a way how to glue those two streams together if there will be a request to have one stream with both out+err.\nWhat are the use-cases for separate log streams ? \n",
        "createdAt" : "2014-09-16T13:09:29Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "tags" : [
        ]
      },
      {
        "id" : "8a8a703b-f2d6-40fa-847a-4a1185f07769",
        "parentId" : "03320dfe-d723-402d-9e2c-e1df6c0442f4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This is a utility function, you can always pass the same stream to both the output and err parameters, as you are doing inside the function, we're better off creating a generally useful helper function, rather than one that is hand-crafted to the specifics of returning the data over HTTP.\n\nAdditionally, I could easily imagine converting this http function to take a 'json' parameter, which would return structured data that separates the two streams, and places each as a member in a json object.\n",
        "createdAt" : "2014-09-16T14:00:37Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "960f1b2693c09fa4ca2d4a983b7a47fcf8fed02f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +215,219 @@\t\tStderr:       true,\n\t\tOutputStream: writer,\n\t\tErrorStream:  writer,\n\t\tTimestamps:   true,\n\t\tRawTerminal:  true,"
  },
  {
    "id" : "8d22b49d-94d8-4275-b9af-ff9b1a54310d",
    "prId" : 1318,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24da4a0a-47c5-4404-b3f0-bb0943fea76b",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "improve documentation of this function to document the use of parameters (especially the \"tail is only used if follow is false\" part.\n",
        "createdAt" : "2014-09-16T03:47:57Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2c988224-4f77-45eb-97df-98add5b52837",
        "parentId" : "24da4a0a-47c5-4404-b3f0-bb0943fea76b",
        "authorId" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "body" : "Updated in second commit https://github.com/jhadvig/kubernetes/commit/6da2653b4a1f70cec89d34b7a1872a595b7ded0e\n",
        "createdAt" : "2014-09-16T13:50:24Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "tags" : [
        ]
      }
    ],
    "commit" : "960f1b2693c09fa4ca2d4a983b7a47fcf8fed02f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +205,209 @@}\n\n// GetKubeletDockerContainerLogs returns logs of specific container\n// By default the function will return snapshot of the container log\n// Log streaming is possible if 'follow' param is set to true"
  },
  {
    "id" : "62b3a533-e79d-4050-a020-caed63ceb661",
    "prId" : 1318,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4565771d-b283-49f0-8a08-1123ea36effa",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit: all the other methods are verbs - GetLogs?\n",
        "createdAt" : "2014-09-19T15:35:59Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c259613f-9ac7-4381-90f0-fe97d3d55dcc",
        "parentId" : "4565771d-b283-49f0-8a08-1123ea36effa",
        "authorId" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "body" : "Dockerclient does not implement GetLogs method.\nThis interface is defining methods which are going to be used from the DockerClient, so they must have the same name as in the DockerClient. \n",
        "createdAt" : "2014-09-21T20:19:25Z",
        "updatedAt" : "2014-09-21T20:28:34Z",
        "lastEditedBy" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "tags" : [
        ]
      }
    ],
    "commit" : "960f1b2693c09fa4ca2d4a983b7a47fcf8fed02f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +48,52 @@\tStopContainer(id string, timeout uint) error\n\tPullImage(opts docker.PullImageOptions, auth docker.AuthConfiguration) error\n\tLogs(opts docker.LogsOptions) error\n}\n"
  },
  {
    "id" : "0df646ad-7512-4232-93a2-e05ad6974422",
    "prId" : 1218,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c0a00f8-aaf1-4be5-958b-a7cbe696bfbd",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Optional suggestion:\nthere aren't going to be many keys so linear search won't be measurably slower, so maybe drop the reindex() and just define:\ntype dockerKeyring map[string]docker.AuthConfiguration\nk := make(dockerKeyring)\nadd(r,c) -> k[r] = c\nlookup(i) changes in the obvious way.\n\nsaves other readers from having to figure out the data structure.\n",
        "createdAt" : "2014-09-10T22:56:15Z",
        "updatedAt" : "2014-09-12T04:02:25Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f87857b0fc0e00e72bd8ece5bb96d9c95296d21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +354,358 @@//   most specific match for a given image\n// - iterating a map does not yield predictable results\ntype dockerKeyring struct {\n\tindex []string\n\tcreds map[string]docker.AuthConfiguration"
  },
  {
    "id" : "4f82d8ad-0cef-4edd-b91b-3c3de63b5374",
    "prId" : 1218,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67269683-cffe-40d0-b16e-e50b2a1c9fa3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add a comment explaining what the sorted list is for, if you don't take @erictune's suggestion.\n",
        "createdAt" : "2014-09-10T23:37:44Z",
        "updatedAt" : "2014-09-12T04:02:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f87857b0fc0e00e72bd8ece5bb96d9c95296d21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +355,359 @@// - iterating a map does not yield predictable results\ntype dockerKeyring struct {\n\tindex []string\n\tcreds map[string]docker.AuthConfiguration\n}"
  },
  {
    "id" : "043b86f1-50ab-4683-b322-c9908673f919",
    "prId" : 1218,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7a34e5c-f1b9-4ed1-b235-973d9ab82a6d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is extremely mysterious, please add a comment. I don't understand why you keep a sorted list but run through it linearly-- if you're going to do that, why not just range through the map directly?\n",
        "createdAt" : "2014-09-10T23:39:43Z",
        "updatedAt" : "2014-09-12T04:02:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f87857b0fc0e00e72bd8ece5bb96d9c95296d21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +384,388 @@\t// range over the index as iterating over a map does not provide\n\t// a predictable ordering\n\tfor _, k := range dk.index {\n\t\tif !strings.HasPrefix(image, k) {\n\t\t\tcontinue"
  },
  {
    "id" : "868aa977-c517-4f88-a62d-dbbd87b62c81",
    "prId" : 1218,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61c8ce93-e41f-4035-9584-1b684750d551",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm sorry, can you comment on the Sort(Reverse(...)) here - I don't get it...\n",
        "createdAt" : "2014-09-12T03:41:22Z",
        "updatedAt" : "2014-09-12T04:02:25Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f87857b0fc0e00e72bd8ece5bb96d9c95296d21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +378,382 @@// credentials for \"quay.io/coreos\" should match before \"quay.io\".\nfunc (dk *dockerKeyring) reindex() {\n\tsort.Sort(sort.Reverse(sort.StringSlice(dk.index)))\n}\n"
  }
]