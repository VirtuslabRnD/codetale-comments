[
  {
    "id" : "d6864e02-99be-4e69-a2ee-0a8ed8c2ad1f",
    "prId" : 93985,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93985#pullrequestreview-478985414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff9efb73-1ea5-49dc-bd4e-38a831346973",
        "parentId" : null,
        "authorId" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "body" : "just random thought, feel free to take it or not. Should we ensure `podStorage.Merge` has completed before we checking channel `ch` or at least wait for a while in `expectNoPodUpdate`? Otherwise we might receive event from `ch` after a while but `expectNoPodUpdate` fails to notice that.",
        "createdAt" : "2020-08-15T02:36:45Z",
        "updatedAt" : "2020-08-31T16:15:24Z",
        "lastEditedBy" : "9e6ce3ed-e2f7-40ea-b6d7-b1b04fc48f70",
        "tags" : [
        ]
      },
      {
        "id" : "fcadff22-957b-4cce-b4ea-0e6a23b6e805",
        "parentId" : "ff9efb73-1ea5-49dc-bd4e-38a831346973",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "expectNoPodUpdate is used inside of expectPodUpdate, so it would delay all the tests using that function, and I did not want to slow everything down for a probabilistic check. Do you have a suggestion for how I can force it?",
        "createdAt" : "2020-08-31T16:12:42Z",
        "updatedAt" : "2020-08-31T16:15:43Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "b53b011e-5529-47f6-8c66-faed8f61df6a",
        "parentId" : "ff9efb73-1ea5-49dc-bd4e-38a831346973",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "One thing comes to mind is adding and removing a pod expecting corresponding updates in `ch`. If something unexpected was delayed on the channel from the previous update - expected updates on this additional add/remove combination wouldn't match.\r\n\r\nBut this may be a separate work item I think.",
        "createdAt" : "2020-08-31T22:02:09Z",
        "updatedAt" : "2020-08-31T22:02:09Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "a13212b6-e4cc-46bd-93e5-61b43fa39225",
        "parentId" : "ff9efb73-1ea5-49dc-bd4e-38a831346973",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "/lgtm",
        "createdAt" : "2020-08-31T22:02:32Z",
        "updatedAt" : "2020-08-31T22:02:33Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "7de68309d4ac871a083cbec1bdf9c10c047ccaf5",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +193,197 @@\tpodUpdate = CreatePodUpdate(kubetypes.ADD, TestSource, CreateValidPod(\"foo\", \"new\"))\n\tchannel <- podUpdate\n\texpectNoPodUpdate(t, ch)\n}\n"
  },
  {
    "id" : "12ce4e6a-8548-45a6-8843-199aa9d83772",
    "prId" : 63553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63553#pullrequestreview-119601990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "parentId" : null,
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "could you explain a little bit why this is necessary?  since createPodConfigTester() does the same thing with channel named \"TestSource\"",
        "createdAt" : "2018-05-10T23:05:53Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "962e42c9-3a58-417e-a92d-5dd000d1e2ae",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "The API server restore get pushed to a channel for \"api\".",
        "createdAt" : "2018-05-11T01:07:45Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      },
      {
        "id" : "a1067889-464c-4df4-8b4a-45f6b7e4d782",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "maybe i missed something, correct me if i my understanding is wrong, does this test need a channel named \"api\" specifically?  or any channel name is fine, since the test own the channel, push and get update from it, thanks\r\n",
        "createdAt" : "2018-05-11T19:18:21Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "03e9f96b-e509-41c6-b493-795231bed8bc",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "correct. The channel needs to be called \"api\" specifically. The function that is there will only receive on `Source: 'test'`.",
        "createdAt" : "2018-05-11T20:07:36Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      },
      {
        "id" : "577761b7-c464-4114-b28a-5746989acedf",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "when i looked at the code further, i do think the channel named with `test` should work unless your actual testing prove it is not.\r\n```\r\nupdates <- kubetypes.PodUpdate{Pods: pods, Op: kubetypes.RESTORE, Source: kubetypes.ApiserverSource}\r\n```\r\nthe value of 'Source' at this line does not matter (is it?),  eventually all updates will merged to 'ch',   \r\nonly need to make sure it matches with source name below which you already did:\r\n```\r\nexpectPodUpdate(t, ch, CreatePodUpdate(kubetypes.RESTORE, kubetypes.ApiserverSource, pod))\r\n```\r\n\r\nthe code below should work:\r\n```\r\nchannel, ch, config := createPodConfigTester(PodConfigNotificationIncremental)      \r\nif err := config.Restore(tmpDir, channel); err != nil {     \r\n    t.Fatalf(\"Restore returned error: %v\", err)     \r\n}     \r\nexpectPodUpdate(t, ch, CreatePodUpdate(kubetypes.RESTORE, kubetypes.ApiserverSource, pod))    \r\n```\r\n\r\ni could be wrong if actual test prove it,  my intention here: we don't have to add new function unless it is really \r\nnecessary, thanks.",
        "createdAt" : "2018-05-11T22:14:42Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "844c0d67-9cf9-40db-a26c-e1fb5408795b",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "When I use the existing `createPodConfigTester` I get the following error:\r\n\r\n```\r\n--- FAIL: TestPodRestore (0.00s)\r\n\tconfig_test.go:118: Expected types.PodUpdate{Pods:[]*v1.Pod(nil), Op:6, Source:\"api\"}, Got types.PodUpdate{Pods:[]*v1.Pod(nil), Op:6, Source:\"test\"}\r\n```\r\n\r\nUsing this test commandline:\r\n\r\n```\r\nmake test-integration GOFLAGS=\"-v\" KUBE_TEST_ARGS=\"-run TestPodRestore\" WHAT=k8s.io/kubernetes/pkg/kubelet/config/\r\n```",
        "createdAt" : "2018-05-11T22:22:20Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      },
      {
        "id" : "5376561e-220e-4afe-ac71-d5e028230a3d",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "ok, just realize that merge() will actually modify Source in PodUpdate based on channel name,   \r\nthe code below works fine, i tested it locally:\r\n```\r\n   channel, ch, config := createPodConfigTester(PodConfigNotificationIncremental)\r\n   if err := config.Restore(tmpDir, channel); err != nil {\r\n       t.Fatalf(\"Restore returned error: %v\", err)\r\n   }\r\n   expectPodUpdate(t, ch, CreatePodUpdate(kubetypes.RESTORE, TestSource, pod))\r\n```",
        "createdAt" : "2018-05-11T22:53:49Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "7e2a9d87-78b9-4b1e-84c6-8f304cdac296",
        "parentId" : "8907c778-a37f-459e-b447-b2a7c5a3a70e",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "thanks for the review and tip... I updated the PR with that change.",
        "createdAt" : "2018-05-11T23:05:40Z",
        "updatedAt" : "2018-05-21T21:17:59Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6469c8e333c01b2cccd7d8f918453db8abfd35b8",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +91,95 @@}\n\nfunc createPodConfigTesterByChannel(mode PodConfigNotificationMode, channelName string) (chan<- interface{}, <-chan kubetypes.PodUpdate, *PodConfig) {\n\teventBroadcaster := record.NewBroadcaster()\n\tconfig := NewPodConfig(mode, eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: \"kubelet\"}))"
  },
  {
    "id" : "e0f0c0bb-472b-46b0-91e1-bb0708833763",
    "prId" : 7343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f98722a-2594-42fa-adae-d9a09c273fec",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I'm starting to wonder if we need an object mother method that decorates a pod spec with defaults.  That can be a follow up.\n",
        "createdAt" : "2015-05-04T21:39:25Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "15c15f44-310f-45a9-ab21-9738a03b94e1",
        "parentId" : "1f98722a-2594-42fa-adae-d9a09c273fec",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "The defaulting takes place in the Container method.  The unit tests that were updated are hand crafting a pod to do their testing.  It might help to have a test utility that returns a valid container that can be manipulated if folks think it would be useful, the `securitycontext.ValidSecurityContextWithContainerDefaults()` method was a first stab.\n",
        "createdAt" : "2015-05-04T23:52:55Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "a05810c2-aaa0-4a82-a4ae-ad38474d877b",
        "parentId" : "1f98722a-2594-42fa-adae-d9a09c273fec",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I think this is okay for now.\n",
        "createdAt" : "2015-05-05T15:13:07Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e5b904e8c462b2ccf0660a6f0fa7c4d45cd4252",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +69,73 @@\t\t\t\t\tImage:           \"image\",\n\t\t\t\t\tImagePullPolicy: \"IfNotPresent\",\n\t\t\t\t\tSecurityContext: securitycontext.ValidSecurityContextWithContainerDefaults(),\n\t\t\t\t},\n\t\t\t},"
  },
  {
    "id" : "05d1d2db-4e74-4f00-9c9e-552e8745ed85",
    "prId" : 1867,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1d6a531-de90-46ca-ab03-d34dc382940f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is not a well defined ordering. Imagine the pods with (ns, name): (\"a\", \"b\") and (\"b\", \"a\").\n\nMust be:\n\n```\nif s[i].Namespace != s[j].Namespace {\n  return s[i].ID < s[j].ID\n}\nreturn s[i].Namespace < s[j].Namespace\n```\n",
        "createdAt" : "2014-10-17T21:27:05Z",
        "updatedAt" : "2014-10-17T21:27:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d590af2ce54464caefcde952236f80747a46ff70",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@}\nfunc (s sortedPods) Less(i, j int) bool {\n\treturn s[i].ID < s[j].ID && s[i].Namespace < s[j].Namespace\n}\n"
  },
  {
    "id" : "ec9ef703-caf7-4a7c-85ad-b8a40d01715f",
    "prId" : 356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc5e86b-ec54-4d5c-9f92-2facfa29d430",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: missing blank line.\n",
        "createdAt" : "2014-07-21T18:51:19Z",
        "updatedAt" : "2014-07-22T01:29:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7767c2a2ace79f55d1f8e4cb75eb1e3bd48d2db9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +97,101 @@}\n\nfunc expectNoPodUpdate(t *testing.T, ch <-chan kubelet.PodUpdate) {\n\tselect {\n\tcase update := <-ch:"
  }
]