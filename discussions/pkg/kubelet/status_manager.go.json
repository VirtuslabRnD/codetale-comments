[
  {
    "id" : "87398c04-85ff-4004-8fad-47c5788ae919",
    "prId" : 9165,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a15c6f8f-9e2f-4a59-baf4-505aaa1d046f",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "How about changing the function to something like \"stillRunning\", and replace this with `if status.State.Running != nil { return true }` ?\n",
        "createdAt" : "2015-06-05T17:51:46Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "f930bd3b-ea61-4e2c-a72b-a1aecf5bf5c2",
        "parentId" : "a15c6f8f-9e2f-4a59-baf4-505aaa1d046f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If someone adds a condition that is a subset of Running this would break.  I can make that change if you think it's safer.\n\n----- Original Message -----\n\n> > @@ -151,3 +168,14 @@ func (s *statusManager) syncBatch() error {\n> >     s.DeletePodStatus(podFullName)\n> >     return fmt.Errorf(\"error updating status for pod %q: %v\", pod.Name, err)\n> >  }\n> > +\n> > +// notRunning returns true if every status is terminated or waiting, or\n> > the status list\n> > +// is empty.\n> > +func notRunning(statuses []api.ContainerStatus) bool {\n> > -   for _, status := range statuses {\n> > -       if status.State.Terminated == nil && status.State.Waiting == nil {\n> \n> How about changing the function to something like \"stillRunning\", and replace\n> this with `if status.State.Running != nil { return true}` ?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9165/files#r31835173\n",
        "createdAt" : "2015-06-05T17:53:41Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b7a41c2c-4270-4a09-aae4-847e50e01530",
        "parentId" : "a15c6f8f-9e2f-4a59-baf4-505aaa1d046f",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think it's fine for now since it could break either way :)\n",
        "createdAt" : "2015-06-05T18:48:24Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4a8fcbe0-b2a1-4897-9210-94e591e82a42",
        "parentId" : "a15c6f8f-9e2f-4a59-baf4-505aaa1d046f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : ":)\n\n----- Original Message -----\n\n> > @@ -151,3 +168,14 @@ func (s *statusManager) syncBatch() error {\n> >     s.DeletePodStatus(podFullName)\n> >     return fmt.Errorf(\"error updating status for pod %q: %v\", pod.Name, err)\n> >  }\n> > +\n> > +// notRunning returns true if every status is terminated or waiting, or\n> > the status list\n> > +// is empty.\n> > +func notRunning(statuses []api.ContainerStatus) bool {\n> > -   for _, status := range statuses {\n> > -       if status.State.Terminated == nil && status.State.Waiting == nil {\n> \n> I think it's fine for now since it could break either way :)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9165/files#r31840411\n",
        "createdAt" : "2015-06-05T18:53:14Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "266e6226e52b55f8a6d5278c1264299d7c713820",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +231,235 @@func notRunning(statuses []api.ContainerStatus) bool {\n\tfor _, status := range statuses {\n\t\tif status.State.Terminated == nil && status.State.Waiting == nil {\n\t\t\treturn false\n\t\t}"
  },
  {
    "id" : "4b4a2194-33ee-4a42-88f3-df3f474df05c",
    "prId" : 8641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d16aee1-1952-46fd-91de-c843baa82cf4",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This will GC terminated pods? I assume that makes logs inaccessible?\n",
        "createdAt" : "2015-05-30T02:20:15Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "31913a55-82e5-4f04-a1f0-b30e952cb2d0",
        "parentId" : "7d16aee1-1952-46fd-91de-c843baa82cf4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "DeletionTimestamp has to be set to make it to here\n",
        "createdAt" : "2015-05-31T21:21:59Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3e76ab61-b210-4a27-86f8-a665a40d83d9",
        "parentId" : "7d16aee1-1952-46fd-91de-c843baa82cf4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Good point.\n",
        "createdAt" : "2015-06-01T19:55:35Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "dcbb3395-dada-4c2c-a300-0db982b77316",
        "parentId" : "7d16aee1-1952-46fd-91de-c843baa82cf4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Duh, ok.\n",
        "createdAt" : "2015-06-01T20:25:29Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12a68cd60ccfe2f0926386df771805c0993d783",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +151,155 @@\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := s.kubeClient.Pods(statusPod.Namespace).Delete(statusPod.Name, api.NewDeleteOptions(0)); err == nil {\n\t\t\t\tglog.V(3).Infof(\"Pod %q fully terminated and removed from etcd\", statusPod.Name)\n\t\t\t\treturn nil"
  },
  {
    "id" : "f1342c27-2b9f-4669-9a78-7e74622d63af",
    "prId" : 7868,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7d54fd6-8852-4da0-a6ec-3a5f3bc0faee",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "This changes status manager's behavior as it is no longer a dumb cache; `StartTime` cannot be re-computed by looking at the containers (`generatePodStatus`). I think it's fine but we should probably prevent others from bypassing the cache to get the status. I will do that after this PR lands. \n",
        "createdAt" : "2015-05-15T18:38:30Z",
        "updatedAt" : "2015-05-15T20:33:45Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "82163326117f095e75b4f1f1d830eb95667e86e6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +92,96 @@\t\t\tstatus.StartTime = pod.Status.StartTime\n\t\t}\n\t}\n\n\tif !found || !reflect.DeepEqual(oldStatus, status) {"
  },
  {
    "id" : "a58359ba-11b4-48f0-a5d5-72ddfd892dfc",
    "prId" : 5714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8cf86ed-f8f4-46dd-8e1f-3663de748afb",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Can we comment that the implementation is thread-safe?\n",
        "createdAt" : "2015-03-23T16:06:18Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "bc1e44bf-7866-48d6-8b24-2fcd1d985716",
        "parentId" : "d8cf86ed-f8f4-46dd-8e1f-3663de748afb",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-03-23T19:41:14Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "632ca506cefcc03bc029d8b5814b8d00b89deeda",
    "line" : null,
    "diffHunk" : "@@ -1,1 +35,39 @@// Updates pod statuses in apiserver. Writes only when new status has changed.\n// All methods are thread-safe.\ntype statusManager struct {\n\tkubeClient client.Interface\n\t// Map from pod full name to sync status of the corresponding pod."
  },
  {
    "id" : "34bae06e-73f5-4780-9e80-a2a25e30e1e7",
    "prId" : 5714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d1a7f0-83ae-4144-bceb-1df961e18cc6",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "WDYT if just calling SyncBatch and not having it return?\n\nAh, I see the issue is for testing. In other cases we wait and have a timeout in the test. You could alternatively not start the SyncBatch thread and read from the channel yourself in the test. We can then test SyncBatch separately.\n",
        "createdAt" : "2015-03-23T16:06:19Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "4ffb9263-561a-48d7-8419-ebafee53a50e",
        "parentId" : "94d1a7f0-83ae-4144-bceb-1df961e18cc6",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I'm not convinced that loop inside SyncBatch would increase readability, but it makes testing easier. \n",
        "createdAt" : "2015-03-23T19:11:33Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "30c802e7-1f5a-467a-9054-9f1a111dbfd6",
        "parentId" : "94d1a7f0-83ae-4144-bceb-1df961e18cc6",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "What I don't like about the current approach is that it ~triples the runtime of the Kubelet tests (from ~2.5s to ~7.5s) since we're constantly waiting that 1s.\n",
        "createdAt" : "2015-03-24T04:43:56Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "632ca506cefcc03bc029d8b5814b8d00b89deeda",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@func (s *statusManager) Start() {\n\t// We can run SyncBatch() often because it will block until we have some updates to send.\n\tgo util.Forever(s.SyncBatch, 0)\n}\n"
  },
  {
    "id" : "d18ff022-9b9d-4d82-b192-7e64f0391b02",
    "prId" : 5714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc53b5e4-3c41-4ac7-ba7d-01e30a350c17",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "I was thinking what we'd have to do if the set status takes a long time and we build up a long queue. We may have duplicate statuses in the queue and we'd need to send the last one (if the status changes quickly for example). I don't think this is likely to happen and we will be eventually consistent anyways.\n\nJust mentioning in case you disagree or if you think we should document this anywhere :) I don't think it changes this PR.\n",
        "createdAt" : "2015-03-23T16:06:23Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "63ef733e-56e0-4e4d-9793-7133cabd6905",
        "parentId" : "bc53b5e4-3c41-4ac7-ba7d-01e30a350c17",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I think for now we should be good with leaving this as is. In the future we can somehow batch this (it'd be pretty similar to the first implementation with map of statuses ;) ).\n",
        "createdAt" : "2015-03-23T19:41:36Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "e27eb8ee-3fb7-4b36-af7c-f8c72d3c206a",
        "parentId" : "bc53b5e4-3c41-4ac7-ba7d-01e30a350c17",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Just an FYI, pkg/client/cache/fifo.go has a similar feature of keeping only the latest version for any item.\n",
        "createdAt" : "2015-03-23T20:15:44Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "632ca506cefcc03bc029d8b5814b8d00b89deeda",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@\tfor {\n\t\tselect {\n\t\tcase syncRequest := <-s.podStatusChannel:\n\t\t\tpodFullName := syncRequest.podFullName\n\t\t\tstatus := syncRequest.status"
  },
  {
    "id" : "8a5f53ff-99bd-436b-b445-8caf0651745d",
    "prId" : 5714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61000f8f-28ce-4674-befc-2c9fcf27c851",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "If the apiserver request fails, would we lose this status transition completely? \n",
        "createdAt" : "2015-03-23T17:04:06Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "b48a420f-fcb4-41a6-9340-8adb49163d37",
        "parentId" : "61000f8f-28ce-4674-befc-2c9fcf27c851",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "That's a good point, we should retry on failure. Easy way is to remove the status from our map so that SetStatus() will re-send it. We won't be able to lock around the send in SetStatus() though.\n",
        "createdAt" : "2015-03-23T17:10:41Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "75600e35-6ea3-4245-b6bb-b1114bd0a3af",
        "parentId" : "61000f8f-28ce-4674-befc-2c9fcf27c851",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Wow! That's a good catch! Thanks :) Fixed. I'm deleting cached value to make sure it is retried next time.\n",
        "createdAt" : "2015-03-23T19:41:43Z",
        "updatedAt" : "2015-03-24T15:41:31Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "632ca506cefcc03bc029d8b5814b8d00b89deeda",
    "line" : null,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\t\t\t// this is ok.\n\t\t\t\ts.DeletePodStatus(podFullName)\n\t\t\t\tglog.Warningf(\"Error updating status for pod %q: %v\", name, err)\n\t\t\t} else {\n\t\t\t\tglog.V(3).Infof(\"Status for pod %q updated successfully\", name)"
  }
]