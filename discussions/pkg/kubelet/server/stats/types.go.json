[
  {
    "id" : "b3fcc409-b450-44a6-816f-ad55f8c3e9e2",
    "prId" : 20305,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3b98468-8fed-40cd-bb52-ee99315c68a8",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "@timstclair: Is `unversioned.Time` a portable time definition or should we stick to nanoseconds since epoch or something similar?\n",
        "createdAt" : "2016-01-29T19:24:33Z",
        "updatedAt" : "2016-01-30T00:57:12Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "d7280b42-9dfc-4dda-b22f-6777e6896d69",
        "parentId" : "d3b98468-8fed-40cd-bb52-ee99315c68a8",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I think it depends on whether we want to optimize for human readability or portability. Personally I prefer readability, as I think the RFC 3339 spec that time uses is portable enough.\n",
        "createdAt" : "2016-01-29T21:35:51Z",
        "updatedAt" : "2016-01-30T00:57:12Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bd945423dd3984bb02bb6fc5047e3722af39c60",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +81,85 @@\tName string `json:\"name\"`\n\t// The time at which data collection for this container was (re)started.\n\tStartTime unversioned.Time `json:\"startTime\"`\n\t// Stats pertaining to CPU resources.\n\tCPU *CPUStats `json:\"cpu,omitempty\"`"
  },
  {
    "id" : "5ca77ec3-b8b9-49d8-94e7-25d65a2830db",
    "prId" : 20305,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1b9ca84-74aa-4e53-83ba-e3b6bd3737c3",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "FYI: @timstclair: This field is not optional. Just highlighting it in case you missed it.\n",
        "createdAt" : "2016-01-29T19:25:53Z",
        "updatedAt" : "2016-01-30T00:57:12Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "c3a0dd35-916f-4842-85f8-32ecb79e0587",
        "parentId" : "f1b9ca84-74aa-4e53-83ba-e3b6bd3737c3",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "ACK\n",
        "createdAt" : "2016-01-29T21:36:01Z",
        "updatedAt" : "2016-01-30T00:57:12Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bd945423dd3984bb02bb6fc5047e3722af39c60",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +191,195 @@\t// Value of the metric. Float64s have 53 bit precision.\n\t// We do not forsee any metrics exceeding that value.\n\tValue float64 `json:\"value\"`\n}"
  },
  {
    "id" : "0050959e-36c5-421e-af16-ea0c86e0b94c",
    "prId" : 19572,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d030a9b4-79c4-4f10-979e-f1cbb7b8140f",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Is it guaranteed that `CapacityBytes = UsedBytes + AvailableBytes`?\n",
        "createdAt" : "2016-01-12T23:59:52Z",
        "updatedAt" : "2016-01-14T23:53:00Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "a7816847-830e-4e26-9066-daf34028e2c9",
        "parentId" : "d030a9b4-79c4-4f10-979e-f1cbb7b8140f",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "No not at all.  I will clarify this in the comments.\n",
        "createdAt" : "2016-01-13T00:30:46Z",
        "updatedAt" : "2016-01-14T23:53:00Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb216e53daae70bca73a737d41fd55c9124c6b39",
    "line" : null,
    "diffHunk" : "@@ -1,1 +142,146 @@\tAvailableBytes *resource.Quantity `json:\"availableBytes,omitempty\"`\n\t// CapacityBytes represents the total capacity (bytes) of the filesystems underlying storage.\n\tCapacityBytes *resource.Quantity `json:\"capacityBytes,omitempty\"`\n\t// UsedBytes represents the bytes used for a specific task on the filesystem.\n\t// This may differ from the total bytes used on the filesystem and may not equal CapacityBytes - AvailableBytes."
  }
]