[
  {
    "id" : "755ff76b-9062-466b-9f96-b530dada7b43",
    "prId" : 25273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334201be-c83b-4cd9-afa8-d985533dc499",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The order does not match that of the consts. Easier to read if it did.\n",
        "createdAt" : "2016-05-18T19:05:17Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e6ee0cb8-70e6-44f8-9003-00ce8b5b5fc5",
        "parentId" : "334201be-c83b-4cd9-afa8-d985533dc499",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "It matches the order that the streams are created. I realize that's irrelevant, but it was helpful for me when I was first writing this ages ago.\n",
        "createdAt" : "2016-06-30T20:55:34Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b21a9901bcd48bb452d3bf1a0cddc90dae142c4",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +221,225 @@\t\t\tstreamType := stream.Headers().Get(api.StreamType)\n\t\t\tswitch streamType {\n\t\t\tcase api.StreamTypeError:\n\t\t\t\tctx.errorStream = stream\n\t\t\t\tgo waitStreamReply(stream.replySent, replyChan, stop)"
  },
  {
    "id" : "d74857f2-eebb-4163-96df-ac240d7af5f9",
    "prId" : 25273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd60c5e2-ef54-4c46-be72-145422728fde",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "All 3 handlers are pretty similar, but duplicate quite some code. Maybe I haven't found all subtle differences though.\n",
        "createdAt" : "2016-05-18T19:15:34Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "3eee03bf-5bd4-4a4b-af43-1b47e391c805",
        "parentId" : "bd60c5e2-ef54-4c46-be72-145422728fde",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "v1 was the original (unversioned) implementation that has bugs.\n\nv2 fixed those bugs.\n\nv3 adds support for terminal resizing.\n\nI'd like to find a way to reuse code between v2 and v3 and beyond, if possible, but so far I haven't. Also, assuming we deprecate this and replace it with an HTTP/2 implementation, it will likely be similar to the websocket approach where we mux the streams/channels manually, so we won't have all these various, similar implementations (or we shouldn't, at least).\n",
        "createdAt" : "2016-05-18T20:09:42Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b21a9901bcd48bb452d3bf1a0cddc90dae142c4",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +207,211 @@\n// v3ProtocolHandler implements the V3 protocol version for streaming command execution.\ntype v3ProtocolHandler struct{}\n\nfunc (*v3ProtocolHandler) waitForStreams(streams <-chan streamAndReply, expectedStreams int, expired <-chan time.Time) (*context, error) {"
  },
  {
    "id" : "47d635b5-2a4c-4b08-8889-55276f3ae32e",
    "prId" : 16451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47787edb-2c02-4166-bfbd-c6678b869418",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "mismatch\n",
        "createdAt" : "2016-04-01T16:09:25Z",
        "updatedAt" : "2016-04-01T17:05:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4551ba6b538aacb4e6de5869c042579113ed4663",
    "line" : null,
    "diffHunk" : "@@ -1,1 +44,48 @@\n// newOptions creates a new options from the Request.\nfunc newOptions(req *http.Request) (*options, error) {\n\ttty := req.FormValue(api.ExecTTYParam) == \"1\"\n\tstdin := req.FormValue(api.ExecStdinParam) == \"1\""
  }
]