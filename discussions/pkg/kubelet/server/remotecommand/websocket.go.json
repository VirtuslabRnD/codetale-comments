[
  {
    "id" : "9f83cf17-165c-4b38-8916-1996d05cc326",
    "prId" : 26541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31441013-b922-4e3b-bf19-ae0471809086",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "what's the significance of this empty string?  comment would be helpful\n",
        "createdAt" : "2016-08-16T14:26:10Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "bd6d3452-230d-40ee-8b4a-2ab1830727b3",
        "parentId" : "31441013-b922-4e3b-bf19-ae0471809086",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it's defined in the godocs of NewConn\n",
        "createdAt" : "2016-08-16T14:37:56Z",
        "updatedAt" : "2016-08-20T13:59:09Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e792d4117d8735784f4d830ad1c9d4f68cfee145",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +74,78 @@\tchannels := createChannels(opts)\n\tconn := wsstream.NewConn(map[string]wsstream.ChannelProtocolConfig{\n\t\t\"\": {\n\t\t\tBinary:   true,\n\t\t\tChannels: channels,"
  },
  {
    "id" : "e2e0dfb3-acaf-46af-83d4-fa24e8562078",
    "prId" : 25273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3062472-f4c3-46cd-9b11-6590b78aa841",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is this change backwards and forward compatible?\n",
        "createdAt" : "2016-07-06T16:17:17Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "17bdf489-98cd-4ecc-ba2f-125b477349f0",
        "parentId" : "c3062472-f4c3-46cd-9b11-6590b78aa841",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will old clients gracefully handle unrecognized channel types?\n",
        "createdAt" : "2016-07-06T16:17:30Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "61067316-93d4-47f2-b834-eaf9425a9cf2",
        "parentId" : "c3062472-f4c3-46cd-9b11-6590b78aa841",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "This only adds a new channel that new clients would be writing to. Old clients obviously won't have this channel and therefore won't write to it, so that's fine. I guess the question is what happens if a new client talks to an old server that doesn't recognize the resize channel. I think it'd be fine - it would hit this, right? https://github.com/ncdc/kubernetes/blob/exec-sigwinch/pkg/util/wsstream/conn.go#L233\n",
        "createdAt" : "2016-07-06T16:22:27Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "a2ad9fc6-9b01-462d-b5f0-6539f93e63fb",
        "parentId" : "c3062472-f4c3-46cd-9b11-6590b78aa841",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ok, that's good enough for me.\n\nOn Wed, Jul 6, 2016 at 12:22 PM, Andy Goldstein notifications@github.com\nwrote:\n\n> In pkg/kubelet/server/remotecommand/websocket.go\n> https://github.com/kubernetes/kubernetes/pull/25273#discussion_r69763390\n> :\n> \n> >  )\n> > \n> > -// standardShellChannels returns the standard channel types for a shell connection (STDIN 0, STDOUT 1, STDERR 2)\n> > -// along with the approximate duplex value. Supported subprotocols are \"channel.k8s.io\" and\n> > -// \"base64.channel.k8s.io\".\n> > -func standardShellChannels(stdin, stdout, stderr bool) []wsstream.ChannelType {\n> > -   // open three half-duplex channels\n> > -   channels := []wsstream.ChannelType{wsstream.ReadChannel, wsstream.WriteChannel, wsstream.WriteChannel}\n> > -   if !stdin {\n> > -       channels[0] = wsstream.IgnoreChannel\n> > -   }\n> > -   if !stdout {\n> > -       channels[1] = wsstream.IgnoreChannel\n> >   +// createChannels returns the standard channel types for a shell connection (STDIN 0, STDOUT 1, STDERR 2)\n> \n> This only adds a new channel that new clients would be writing to. Old\n> clients obviously won't have this channel and therefore won't write to it,\n> so that's fine. I guess the question is what happens if a new client talks\n> to an old server that doesn't recognize the resize channel. I think it'd be\n> fine - it would hit this, right?\n> https://github.com/ncdc/kubernetes/blob/exec-sigwinch/pkg/util/wsstream/conn.go#L233\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/25273/files/a476748e44180a401eef8b62eda78f7f594a3fbd#r69763390,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/ABG_p-kp1kXDXzBSeZ2uVbC9GC3mkWEEks5qS9ZRgaJpZM4IZGqq\n> .\n",
        "createdAt" : "2016-07-06T19:15:52Z",
        "updatedAt" : "2016-07-13T21:06:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b21a9901bcd48bb452d3bf1a0cddc90dae142c4",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +35,39 @@)\n\n// createChannels returns the standard channel types for a shell connection (STDIN 0, STDOUT 1, STDERR 2)\n// along with the approximate duplex value. It also creates the error (3) and resize (4) channels.\nfunc createChannels(opts *options) []wsstream.ChannelType {"
  }
]