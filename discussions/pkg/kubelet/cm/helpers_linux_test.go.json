[
  {
    "id" : "539a0eab-59b2-4ffb-a929-245e7fcd0eb4",
    "prId" : 102970,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102970#pullrequestreview-697739782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fbb02be-598f-4f40-8f35-5d18724d5e9b",
        "parentId" : null,
        "authorId" : "db4d847e-0006-4342-9243-2f3f71f190b9",
        "body" : "does it make sense to add some unit tests for the configuration of the QoS cgroup classes / configuration of the container resource config?",
        "createdAt" : "2021-06-30T21:54:42Z",
        "updatedAt" : "2021-06-30T21:59:40Z",
        "lastEditedBy" : "db4d847e-0006-4342-9243-2f3f71f190b9",
        "tags" : [
        ]
      },
      {
        "id" : "01881657-3d83-45e5-bad1-14d3a033bfc2",
        "parentId" : "8fbb02be-598f-4f40-8f35-5d18724d5e9b",
        "authorId" : "c840f310-2760-4562-b9d3-14db6553a5a6",
        "body" : "fixed.\r\n1. QoS cgroup: add new test file: pkg/kubelet/cm/qos_container_manager_linux_test.go\r\n2. container: pkg/kubelet/kuberuntime/kuberuntime_container_linux_test.go::TestGenerateContainerConfigWithMemoryQoSEnforced",
        "createdAt" : "2021-07-01T06:33:36Z",
        "updatedAt" : "2021-07-01T06:33:36Z",
        "lastEditedBy" : "c840f310-2760-4562-b9d3-14db6553a5a6",
        "tags" : [
        ]
      },
      {
        "id" : "b8d5e44e-067a-4754-af4c-2dd986ede133",
        "parentId" : "8fbb02be-598f-4f40-8f35-5d18724d5e9b",
        "authorId" : "db4d847e-0006-4342-9243-2f3f71f190b9",
        "body" : "Nice, thanks for adding these. Do we also have test for node container manager changes? i.e. as described here https://github.com/kubernetes/kubernetes/pull/102970/files#r661921645",
        "createdAt" : "2021-07-02T00:24:36Z",
        "updatedAt" : "2021-07-02T00:24:36Z",
        "lastEditedBy" : "db4d847e-0006-4342-9243-2f3f71f190b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d9b10ca834b88516c6e059eb038eae19266ddf",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +624,628 @@}\n\nfunc TestResourceConfigForPodWithEnforceMemoryQoS(t *testing.T) {\n\tdefaultQuotaPeriod := uint64(100 * time.Millisecond / time.Microsecond)\n\ttunedQuotaPeriod := uint64(5 * time.Millisecond / time.Microsecond)"
  },
  {
    "id" : "7c540e8d-2a77-495c-be9b-ba4afc93de2a",
    "prId" : 63437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63437#pullrequestreview-149001840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2778d287-37a0-4a81-a03c-872525c3a576",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "doesn't this stop us from testing the function when the feature gate is off?\r\n\r\nshouldn't you have a seperate Test function that runs the test with it off, and another with it on?",
        "createdAt" : "2018-08-21T16:11:30Z",
        "updatedAt" : "2018-09-01T18:20:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "0cf3d48f-78ed-4a17-9159-59a2eb7ca0a1",
        "parentId" : "2778d287-37a0-4a81-a03c-872525c3a576",
        "authorId" : "08b133eb-435d-4b35-b865-ed400fece96e",
        "body" : "I duplicated the test and have one enabled and one disabled.\r\nOne problem for the test is that the ResourceConfigForPod() gets the period as paramter so the test will have expected the tunedQuotaPeriod because of that. The period parameter will not be passed into it, but this is outside of the cm package. \r\nI am not sure if this is nice to read in the test, maybe you have a better suggestion? \r\nI could add the feature gate in cm, such that the parameter will be ignored, which I think makes even less sense.",
        "createdAt" : "2018-08-23T16:50:20Z",
        "updatedAt" : "2018-09-01T18:20:19Z",
        "lastEditedBy" : "08b133eb-435d-4b35-b865-ed400fece96e",
        "tags" : [
        ]
      }
    ],
    "commit" : "588d2808b77d11f235b6eba5c21bcaa89a2f7804",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +275,279 @@\ttunedQuota := int64(1 * time.Millisecond / time.Microsecond)\n\n\tutilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, pkgfeatures.CPUCFSQuotaPeriod, true)\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, pkgfeatures.CPUCFSQuotaPeriod, false)\n"
  },
  {
    "id" : "1b665551-9e7f-4d54-8f7b-80443d91b59e",
    "prId" : 56525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56525#pullrequestreview-80278125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "905de86d-b62d-4c7b-a0fa-aa17f6917a39",
        "parentId" : null,
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Can you make this a table driven test and use subtests to separate cases?\r\nTable-driven: https://github.com/golang/go/wiki/TableDrivenTests\r\nSubtests: https://blog.golang.org/subtests",
        "createdAt" : "2017-11-30T18:19:21Z",
        "updatedAt" : "2017-12-07T02:49:32Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "3945a66f7a3086965a76d555100e2d30425974f3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +200,204 @@}\n\nfunc TestHugePageLimits(t *testing.T) {\n\tMi := int64(1024 * 1024)\n\ttype inputStruct struct {"
  }
]