[
  {
    "id" : "189be49e-df0d-4653-acfb-0d1d60b09787",
    "prId" : 92967,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92967#pullrequestreview-518835368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a27456e-b1fc-4002-9987-222f78ed4da6",
        "parentId" : null,
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Is there a reason that this line differs from the equivalent line in `GetTopologyHints()`?, i.e.:\r\n```\r\nif available.Union(reusable).Len() < requested {\r\n```\r\n\r\nI guess the notion of `reusable`  devices doesn't really make sense when we are considering things at the pod scope.\r\n\r\nAs such, this code block might be better implemented as:\r\n```\r\n        // Get the list of available devices, for which TopologyHints should be generated.\r\n        available := m.getAvailableDevices(resource)\r\n        if available.Len() < requested {\r\n            klog.Errorf(\"[devicemanager] Unable to generate topology hints: requested number of devices unavailable for '%s': requested: %d, available: %d\", resource, requested, availab\r\n            deviceHints[resource] = []topologymanager.TopologyHint{}\r\n            continue\r\n        }\r\n\r\n        // Generate TopologyHints for this resource given the current\r\n        // request size and the list of available devices.\r\n        deviceHints[resource] = m.generateDeviceTopologyHints(resource, available, sets.String{}, requested)\r\n```",
        "createdAt" : "2020-10-28T00:27:24Z",
        "updatedAt" : "2020-11-12T11:26:46Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "ca6d181d-90e5-42d1-b2f2-f497628cfb14",
        "parentId" : "9a27456e-b1fc-4002-9987-222f78ed4da6",
        "authorId" : "a1d73c29-275d-437e-b673-7957d6a4d943",
        "body" : "I have applied the change, after quick thought, your point makes sense. I will check it more briefly though, to be sure. ",
        "createdAt" : "2020-10-28T16:08:30Z",
        "updatedAt" : "2020-11-12T11:26:46Z",
        "lastEditedBy" : "a1d73c29-275d-437e-b673-7957d6a4d943",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7714918db923523d98e6dd834f53b57a407acd0",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +116,120 @@\t\t// Get the list of available devices, for which TopologyHints should be generated.\n\t\tavailable := m.getAvailableDevices(resource)\n\t\tif available.Len() < requested {\n\t\t\tklog.Errorf(\"[devicemanager] Unable to generate topology hints: requested number of devices unavailable for '%s': requested: %d, available: %d\", resource, requested, available.Len())\n\t\t\tdeviceHints[resource] = []topologymanager.TopologyHint{}"
  },
  {
    "id" : "64f39bb2-4e4e-495d-94f6-6e5a6e3b20c4",
    "prId" : 84525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84525#pullrequestreview-310447904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6c93f9-02ab-4848-84fd-ea399230cc85",
        "parentId" : null,
        "authorId" : "575530a6-8847-4729-9bb3-71927fc83799",
        "body" : "Why in this case do we send back nil hints? Or in what case can this occur?",
        "createdAt" : "2019-11-01T11:55:20Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "575530a6-8847-4729-9bb3-71927fc83799",
        "tags" : [
        ]
      },
      {
        "id" : "0f853a77-1784-4928-a9d0-dfbb3879afee",
        "parentId" : "ed6c93f9-02ab-4848-84fd-ea399230cc85",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "It's not exactly `nil` hints, its an empty list of hints, which the `TopologyManager` interprets differently than `nil`. It's the way of encoding an \"error\" in the sense that no valid hints could be generated by this hint provider.\r\n\r\n`nil` == I don't care about affinity, do whatever you want with this information\r\n`[]topologymanager.TopologyHint{}` == I care about affinity, and I have no hints to give\r\n\r\nThat said, yeah, this case should ever actually come up in practice. Could even be replaced by a panic if we wanted.",
        "createdAt" : "2019-11-01T12:24:13Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "f93697a8-b29b-4fc0-93a0-8a1953271ff8",
        "parentId" : "ed6c93f9-02ab-4848-84fd-ea399230cc85",
        "authorId" : "575530a6-8847-4729-9bb3-71927fc83799",
        "body" : "Oh okay if its interpreted as an error then that makes sense to me. Thanks for the clarification! ",
        "createdAt" : "2019-11-01T13:20:58Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "575530a6-8847-4729-9bb3-71927fc83799",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d4d4bdd6152d34203bc2f273160ac5a172a0917",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +51,55 @@\t\t\t// kubelet restart, for example.\n\t\t\tallocated := m.podDevices.containerDevices(string(pod.UID), container.Name, resource)\n\t\t\tif allocated.Len() > 0 {\n\t\t\t\tif allocated.Len() != requested {\n\t\t\t\t\tklog.Errorf(\"[devicemanager] Resource '%v' already allocated to (pod %v, container %v) with different number than request: requested: %d, allocated: %d\", resource, string(pod.UID), container.Name, requested, allocated.Len())"
  },
  {
    "id" : "185e4d11-b933-4f1f-9a05-eb20911d3212",
    "prId" : 84525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84525#pullrequestreview-312201285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce8a06d0-0919-48fc-b00f-c75604f07b3f",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : ":+1: for moving this out of `getAvailableDevices`.",
        "createdAt" : "2019-11-06T05:45:45Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d4d4bdd6152d34203bc2f273160ac5a172a0917",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +30,34 @@func (m *ManagerImpl) GetTopologyHints(pod v1.Pod, container v1.Container) map[string][]topologymanager.TopologyHint {\n\t// Garbage collect any stranded device resources before providing TopologyHints\n\tm.updateAllocatedDevices(m.activePods())\n\n\t// Loop through all device resources and generate TopologyHints for them.."
  }
]