[
  {
    "id" : "32439e1e-8bfa-4047-8b29-8549e9b295a2",
    "prId" : 92794,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92794#pullrequestreview-442624669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea1306f9-543f-4541-ab81-f1d4fc3cea8a",
        "parentId" : null,
        "authorId" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "body" : "question: read through the code a bit but im not completely clear on this diff.\r\nWhy use the union of `available` and `allocated` as the set of \"available devices\" and `allocated` for the set of \"must include\", instead of the union of the `available` and `devices` for all available and `devices` for the set that must be included?",
        "createdAt" : "2020-07-04T18:07:12Z",
        "updatedAt" : "2020-07-07T06:36:29Z",
        "lastEditedBy" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "tags" : [
        ]
      },
      {
        "id" : "64ff93d6-7bf7-44d4-8e56-ff119b12035e",
        "parentId" : "ea1306f9-543f-4541-ab81-f1d4fc3cea8a",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "As I mentioned in the commit message for:\r\nhttps://github.com/kubernetes/kubernetes/pull/92794/commits/ec725685e5a467da0067d594bf22aaaebefbd603\r\n\r\nThis was a bug that wasn't caught during review of the following PR (which landed yesterday):\r\nhttps://github.com/kubernetes/kubernetes/pull/92665\r\n\r\nIt should always have been `available=available.Union(allocated)` and `mustInclude=allocated`, but only once I added the new tests in this PR was the bug uncovered.\r\n\r\n",
        "createdAt" : "2020-07-04T18:25:46Z",
        "updatedAt" : "2020-07-07T06:36:29Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "26cb6506555e5d10218affda0f22efd9b18a42ae",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +731,735 @@\t// Then give the plugin the chance to influence the decision on any\n\t// remaining devices to allocate.\n\tpreferred, err := m.callGetPreferredAllocationIfAvailable(podUID, contName, resource, available.Union(allocated), allocated, required)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "8dff4e00-9017-4050-8574-9d9499407238",
    "prId" : 92665,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92665#pullrequestreview-441678011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe7d522d-0e89-48a5-81bd-4bb84cbd5a41",
        "parentId" : null,
        "authorId" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "body" : "Should this be `if needed <= aligned.Len()` ?",
        "createdAt" : "2020-07-02T12:49:00Z",
        "updatedAt" : "2020-07-03T13:02:11Z",
        "lastEditedBy" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "tags" : [
        ]
      },
      {
        "id" : "59f6ad06-d036-4d8b-b480-e12b18febb3a",
        "parentId" : "fe7d522d-0e89-48a5-81bd-4bb84cbd5a41",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "No. If they are equal then I want to fall through and just allocate all of the needed ones from the aligned set directly.",
        "createdAt" : "2020-07-02T13:28:33Z",
        "updatedAt" : "2020-07-03T13:02:11Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd0db0b1fd1ffa605b1f8675779f75c557935d5",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +704,708 @@\t// If we can allocate all remaining devices from the set of aligned ones, then\n\t// give the plugin the chance to influence which ones to allocate from that set.\n\tif needed < aligned.Len() {\n\t\t// First allocate from the preferred devices list (if available).\n\t\tpreferred, err := m.callGetPreferredAllocationIfAvailable(podUID, contName, resource, aligned.Union(allocated), allocated, required)"
  },
  {
    "id" : "f012fe90-9310-425e-a750-a088a92447c6",
    "prId" : 87759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87759#pullrequestreview-362144833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f817690b-fbc6-4cfe-a650-d22aea3c690e",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i am missing how this is bounded and if it needs mutex",
        "createdAt" : "2020-02-20T22:29:53Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2327934a8602d2f0dad369a86c5475d27fc1b062",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +120,124 @@\n// PodReusableDevices is a map by pod name of devices to reuse.\ntype PodReusableDevices map[string]map[string]sets.String\n\nfunc (s *sourcesReadyStub) AddSource(source string) {}"
  },
  {
    "id" : "1a16153c-81b9-49d8-8f7a-876696e4b14e",
    "prId" : 87759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87759#pullrequestreview-362144833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44a3a900-f68a-4e0b-9574-76b922babe24",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "dont we need a defer in here to handle an error case to ensure the remove happens.",
        "createdAt" : "2020-02-20T22:34:33Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2327934a8602d2f0dad369a86c5475d27fc1b062",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +362,366 @@// from the registered device plugins.\nfunc (m *ManagerImpl) Allocate(pod *v1.Pod, container *v1.Container) error {\n\tif _, ok := m.devicesToReuse[string(pod.UID)]; !ok {\n\t\tm.devicesToReuse[string(pod.UID)] = make(map[string]sets.String)\n\t}"
  },
  {
    "id" : "075e8eaf-9a6b-4212-ba91-31152b7a187c",
    "prId" : 87759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87759#pullrequestreview-362729675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0f4fc1-47f9-4367-a3ae-a6adb019403f",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "so if we were to keep error earlier, would this map grow unbounded?  i am just trying to make sure there isnt an unbounded growth of devices to reuse.",
        "createdAt" : "2020-02-20T22:35:44Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "dc3fe00b-9346-47f1-813a-c41bd075b31b",
        "parentId" : "6e0f4fc1-47f9-4367-a3ae-a6adb019403f",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I havenâ€™t reviewed this in detail yet, but the idea was to simply take the local devicesToReuse variable in allocatePodResources and make it a type variable on the overall manager. Once this is done, the loop in the current allocatePodResources function should be unrolled and split across a loop in the TopologManager which calls Allocate() on each container. The main logic from allocatePodDevices should then be pushed directly into Allocate(). If any mutexes were necessary before, they would still be necessary now.\r\n\r\nFor reference, the removal happens asynchronously here https://github.com/kubernetes/kubernetes/blob/84dfce3fed075f83b8932776ca6009f60f92979a/pkg/kubelet/cm/devicemanager/manager.go#L658, lazily cleaning up the map for terminated pods, just before allocating devices to new pods.",
        "createdAt" : "2020-02-21T07:06:00Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "5ce1d4ab-448b-4de6-a882-dc75582f33c1",
        "parentId" : "6e0f4fc1-47f9-4367-a3ae-a6adb019403f",
        "authorId" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "body" : "My takeaway from this discussion is that the only change I need to make is to move logic from `allocatePodResources` back into `Allocate()` as it is now unnecessary to have the additional function.\r\n\r\nNot mentioned here, but I will also remove the `TODO:` comment describing the new flow: https://github.com/kubernetes/kubernetes/blob/b5b395364cfdc4ea984d4f966a58fdd53edb82d5/pkg/kubelet/cm/devicemanager/manager.go#L390-L408 \r\nI had just left this in for reviewing purposes.\r\n\r\nOtherwise, I will leave the PR open for @klueska to give a final review",
        "createdAt" : "2020-02-21T14:24:13Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "tags" : [
        ]
      },
      {
        "id" : "619fb27e-0b52-4a2e-89cb-fdf2f977dbc7",
        "parentId" : "6e0f4fc1-47f9-4367-a3ae-a6adb019403f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@klueska thanks for the clarification.",
        "createdAt" : "2020-02-21T15:54:39Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2327934a8602d2f0dad369a86c5475d27fc1b062",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +386,390 @@\t\treturn err\n\t}\n\tm.podDevices.removeContainerAllocatedResources(string(pod.UID), container.Name, m.devicesToReuse[string(pod.UID)])\n\treturn nil\n"
  },
  {
    "id" : "61b88602-a538-4768-8966-09841dc528d3",
    "prId" : 87759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87759#pullrequestreview-364780671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ecc6b41-8e8c-49c0-9882-50b8d0551501",
        "parentId" : null,
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I guess this only works because we happen to know that the caller always loops through init containers before looping through app containers (keeping the semantics essentially the same here). If the caller ever changed its semantics, things might break here. Probably worth a Comment.",
        "createdAt" : "2020-02-25T13:59:34Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "fd665e8a-ee3e-4e10-b7a7-b2f35f5c1170",
        "parentId" : "6ecc6b41-8e8c-49c0-9882-50b8d0551501",
        "authorId" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "body" : "Comment added.",
        "createdAt" : "2020-02-26T10:23:41Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2327934a8602d2f0dad369a86c5475d27fc1b062",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +380,384 @@\t\t\t}\n\t\t\tm.podDevices.addContainerAllocatedResources(string(pod.UID), container.Name, m.devicesToReuse[string(pod.UID)])\n\t\t\treturn nil\n\t\t}\n\t}"
  },
  {
    "id" : "724f855d-ea9f-4afc-8655-9059b4441f15",
    "prId" : 87759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87759#pullrequestreview-364185345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d962b7b3-ba3a-4433-8402-0b7f9d380ca6",
        "parentId" : null,
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "It's unclear to me how this will interact with the need for aligned resources across all hint providers. When exactly is this `GetDeviceRunContainerOptions()` function called, and when might it attempt this reallocation of devices?",
        "createdAt" : "2020-02-25T14:32:30Z",
        "updatedAt" : "2020-02-27T16:10:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "2327934a8602d2f0dad369a86c5475d27fc1b062",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +881,885 @@\t\tif err := m.Allocate(pod, container); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tm.mutex.Lock()"
  },
  {
    "id" : "edb53560-12f6-4362-8be9-03aedf208eb2",
    "prId" : 85047,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85047#pullrequestreview-314630166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00fde543-67dd-4acd-8127-68054fab216a",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Adding error checking here feels appropriate to me - the other usage of `allocatePodResources`, in the `managerImpl.Allocate` method performs error checking with the result of `allocatePodResources`.",
        "createdAt" : "2019-11-10T17:30:04Z",
        "updatedAt" : "2019-11-10T17:33:31Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0f616974503e8831dbe8502beefc79beefcd00",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +858,862 @@\tif needsReAllocate {\n\t\tklog.V(2).Infof(\"needs re-allocate device plugin resources for pod %s\", podUID)\n\t\tif err := m.allocatePodResources(pod); err != nil {\n\t\t\treturn nil, err\n\t\t}"
  },
  {
    "id" : "f430b01a-fbab-4ca5-8537-e425193bada1",
    "prId" : 85047,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85047#pullrequestreview-314630166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2adca00-0f83-4617-a849-8841c93d136e",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Adding error checking here works for me. From the [Golang docs](https://golang.org/pkg/os/#MkdirAll), its clear that `MkdirAll` will not raise an err if the dir already exists.",
        "createdAt" : "2019-11-10T17:31:34Z",
        "updatedAt" : "2019-11-10T17:33:31Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0f616974503e8831dbe8502beefc79beefcd00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +232,236 @@\n\tsocketPath := filepath.Join(m.socketdir, m.socketname)\n\tif err = os.MkdirAll(m.socketdir, 0750); err != nil {\n\t\treturn err\n\t}"
  },
  {
    "id" : "a1b2a85b-b065-4f89-95bf-b41498027092",
    "prId" : 77699,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77699#pullrequestreview-237040458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b0d3352-7727-4520-a53c-f190f9e09cee",
        "parentId" : null,
        "authorId" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "body" : "In case checkpoint file doesn't exist, would ListCheckpoints() return error or zero-length checkpoints?",
        "createdAt" : "2019-05-14T00:20:59Z",
        "updatedAt" : "2019-05-21T21:17:17Z",
        "lastEditedBy" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "tags" : [
        ]
      },
      {
        "id" : "30e7be39-a636-417b-96a5-4b46014d0cc2",
        "parentId" : "6b0d3352-7727-4520-a53c-f190f9e09cee",
        "authorId" : "34b7b34f-b1de-4d62-93d4-75a964940fff",
        "body" : "ListCheckpoints() will return zero-length checkpoints. When calling checkpointManager.List(), the directory will already haven been created during initialization: https://github.com/kubernetes/kubernetes/blob/7f23a743e8c23ac6489340bbb34fa6f1d392db9d/pkg/kubelet/util/store/filestore.go#L44. ",
        "createdAt" : "2019-05-14T06:05:39Z",
        "updatedAt" : "2019-05-21T21:17:17Z",
        "lastEditedBy" : "34b7b34f-b1de-4d62-93d4-75a964940fff",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9f1b57b5b71de30e63cedeac459d3b0009cd6c2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +848,852 @@\tif utilfeature.DefaultFeatureGate.Enabled(features.DevicePlugins) {\n\t\tcheckpoints, err := m.checkpointManager.ListCheckpoints()\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}"
  },
  {
    "id" : "b390d226-bc4d-4ae6-851c-3a9429d545e1",
    "prId" : 70508,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70508#pullrequestreview-174671298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19b6cb70-cb07-4ac2-8d5d-23fe27963213",
        "parentId" : null,
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "This is the kind of issue that a mutex at the podDevices struct level would have prevented.\r\nCode becomes pretty hard to maintain if it's not carefully reviewed with the mutex decision to make it \"global\".\r\n\r\nYou'll have to call `m.mutex.Lock()` and `m.mutex.Unlock()` here\r\n",
        "createdAt" : "2018-11-14T00:50:43Z",
        "updatedAt" : "2018-11-15T17:45:19Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      },
      {
        "id" : "0b476460-624d-43e0-b759-082dc7835b46",
        "parentId" : "19b6cb70-cb07-4ac2-8d5d-23fe27963213",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "good catch, done.",
        "createdAt" : "2018-11-14T02:04:22Z",
        "updatedAt" : "2018-11-15T17:45:19Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "630cb53f82c19d0acc3116f7d48196f329ab6d10",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +806,810 @@\n// GetDevices returns the devices used by the specified container\nfunc (m *ManagerImpl) GetDevices(podUID, containerName string) []*podresourcesapi.ContainerDevices {\n\tm.mutex.Lock()\n\tdefer m.mutex.Unlock()"
  },
  {
    "id" : "a3180f1c-3aad-4b8f-9c3f-7d88da0af980",
    "prId" : 65948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65948#pullrequestreview-137704595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e82f3f11-e421-4e30-8c99-2eaea16e79e5",
        "parentId" : null,
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "We're loosing the ability to react to a device appearing / disappearing or changing state.\r\nThat's not a problem since we're not doing anything now but it probably needs some discussion in a separate issue.",
        "createdAt" : "2018-07-15T21:32:27Z",
        "updatedAt" : "2018-07-30T04:09:23Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      },
      {
        "id" : "9a2c8be5-7acb-4882-99ee-c79e229face3",
        "parentId" : "e82f3f11-e421-4e30-8c99-2eaea16e79e5",
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "thanks, you are right, we are not doing anything now, we can achieve this capability without endpoint cache,  just need to compare the updated devices list with `healthyDevices` + `unhealthyDevices`,  do you think we need to create an issue to track this? ",
        "createdAt" : "2018-07-15T21:48:47Z",
        "updatedAt" : "2018-07-30T04:09:23Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "31a59ee8-d2b8-4fde-ae02-b0eff567b293",
        "parentId" : "e82f3f11-e421-4e30-8c99-2eaea16e79e5",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "@figo +1",
        "createdAt" : "2018-07-17T07:31:32Z",
        "updatedAt" : "2018-07-30T04:09:23Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7101c17498f217fe9be3d6ea9f3175f125c50458",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +136,140 @@func (m *ManagerImpl) genericDeviceUpdateCallback(resourceName string, devices []pluginapi.Device) {\n\tm.mutex.Lock()\n\tm.healthyDevices[resourceName] = sets.NewString()\n\tm.unhealthyDevices[resourceName] = sets.NewString()\n\tfor _, dev := range devices {"
  },
  {
    "id" : "dfd85b8c-7388-466b-8450-2c3afb77a816",
    "prId" : 64621,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64621#pullrequestreview-152913427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68287fb3-c63a-496e-9bfc-c5f80a9b4911",
        "parentId" : null,
        "authorId" : "7b10c627-72bd-4617-bd7a-2296b88861b7",
        "body" : "should we remove the pluginName from endpoints?\r\nBTW, any mechanism for upgrading device plugin? such as upgrading from foo.com/foo-1.1.0 to foo.com/foo-1.1.1.",
        "createdAt" : "2018-09-06T02:06:40Z",
        "updatedAt" : "2018-09-06T13:35:15Z",
        "lastEditedBy" : "7b10c627-72bd-4617-bd7a-2296b88861b7",
        "tags" : [
        ]
      },
      {
        "id" : "eaa43dc5-8be4-47de-bd53-40cc59d04a50",
        "parentId" : "68287fb3-c63a-496e-9bfc-c5f80a9b4911",
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "This is removed in the GetCapacity function. For the upgrade mechanism I have a docs PR that I need to submit",
        "createdAt" : "2018-09-06T12:52:11Z",
        "updatedAt" : "2018-09-06T13:35:15Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dd1d27c0345a3b288ce3e99cb47b2d00bd219a4",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +291,295 @@\t// Note: This will mark the resource unhealthy as per the behavior\n\t// in runEndpoint\n\tif eI, ok := m.endpoints[pluginName]; ok {\n\t\teI.e.stop()\n\t}"
  },
  {
    "id" : "a368fa79-14c3-4d7e-b8e5-a6edd3072862",
    "prId" : 58755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58755#pullrequestreview-134756101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1388d76-83ac-4b5b-979c-f37f862079ef",
        "parentId" : null,
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "Return an error or log. Here I'd expect only an error to be returned",
        "createdAt" : "2018-07-05T17:57:43Z",
        "updatedAt" : "2018-07-17T08:03:57Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5842503eb6932f72c3e14f6bf47c6bc65a0a87f",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +379,383 @@\tnew, err := newEndpointImpl(socketPath, resourceName, make(map[string]pluginapi.Device), m.callback)\n\tif err != nil {\n\t\tglog.Errorf(\"Failed to dial device plugin with socketPath %s: %v\", socketPath, err)\n\t\treturn nil, fmt.Errorf(\"Failed to dial device plugin with socketPath %s: %v\", socketPath, err)\n\t}"
  },
  {
    "id" : "fa312039-354f-4ea3-ad08-c26d32294394",
    "prId" : 58755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58755#pullrequestreview-135353262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e593bc37-f23a-42ae-898a-58b82fb09b47",
        "parentId" : null,
        "authorId" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "body" : "@vikaschoudhary16 @RenaudWasTaken  @jiayingz i believe endpoint don't have to cache devices, \r\nso i create a pull request to simplify device manager #65948, please take a look, i hope it makes sense.\r\n",
        "createdAt" : "2018-07-08T02:50:45Z",
        "updatedAt" : "2018-07-17T08:03:57Z",
        "lastEditedBy" : "bc94d261-7b05-4d36-85d9-895265d6df26",
        "tags" : [
        ]
      },
      {
        "id" : "3a700914-51b4-4b5c-bee4-c36828ed8541",
        "parentId" : "e593bc37-f23a-42ae-898a-58b82fb09b47",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "we might need cached devices for resource classes/compute resources. I would suggest to hold on removing cached devices from endpoint for some time.",
        "createdAt" : "2018-07-09T10:06:10Z",
        "updatedAt" : "2018-07-17T08:03:57Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5842503eb6932f72c3e14f6bf47c6bc65a0a87f",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +417,421 @@\t\t\tdevices[device.ID] = device\n\t\t}\n\t\te.devices = devices\n\t}\n\t// Associates the newly created endpoint with the corresponding resource name."
  },
  {
    "id" : "bb9c0985-4678-41c6-b1c1-7b81e7dc59ed",
    "prId" : 58755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58755#pullrequestreview-136869097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24f38cad-e467-4d46-ac83-edcccc4c764b",
        "parentId" : null,
        "authorId" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "body" : "Currently this is fine as we only have a single supported version. When we do need to support multiple versions in the future, we may need to extend this function to return a supported version. E.g., say kubelet supports v1beta1 and v1beta2, and we get v1alpha1 and v1beta1 from a device plugin, this function should return v1beta1 and we probably should pass that version to addEndpointProbeMode so that we can use correct version for communication. Maybe we can add some TODO here to make sure we don't forget in the future?",
        "createdAt" : "2018-07-13T00:11:51Z",
        "updatedAt" : "2018-07-17T08:03:57Z",
        "lastEditedBy" : "611b3189-700b-4eda-8a2a-2c4280218d7c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5842503eb6932f72c3e14f6bf47c6bc65a0a87f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +263,267 @@}\n\nfunc (m *ManagerImpl) isVersionCompatibleWithPlugin(versions []string) bool {\n\t// TODO(vikasc): Currently this is fine as we only have a single supported version. When we do need to support\n\t// multiple versions in the future, we may need to extend this function to return a supported version."
  },
  {
    "id" : "600f8124-fff7-4895-b8ee-4cb4caa70401",
    "prId" : 58282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58282#pullrequestreview-97795726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "parentId" : null,
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "This should probably be an Attribute of the endpoint",
        "createdAt" : "2018-02-19T13:20:58Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      },
      {
        "id" : "68f4d85c-61ef-4f72-95c5-568273f03f7f",
        "parentId" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "This is needed here for handling container restarts whose endpoints have got deleted and not there in cache anymore.",
        "createdAt" : "2018-02-19T17:45:17Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "985aa356-9517-4a5b-a127-5975c22448d1",
        "parentId" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "No it's not, the [next check](https://github.com/vikaschoudhary16/kubernetes/blob/e8b360fea64d916eff57cf10e89263dcaee4e453/pkg/kubelet/cm/devicemanager/manager.go#L691-L710) you do is to check if the endpoint exists...",
        "createdAt" : "2018-02-19T22:38:32Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      },
      {
        "id" : "413a7a26-98ee-4287-8909-e3aefb948a5c",
        "parentId" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "https://github.com/vikaschoudhary16/kubernetes/blob/e8b360fea64d916eff57cf10e89263dcaee4e453/pkg/kubelet/cm/devicemanager/manager.go#L698\r\n\r\nconsider the case where endpoint did not ask for prestart call and this endpoint got deleted from cache but there is a running container which used this endpoint. Now imagine restart of this container. In current code, [it will return nil](https://github.com/vikaschoudhary16/kubernetes/blob/e8b360fea64d916eff57cf10e89263dcaee4e453/pkg/kubelet/cm/devicemanager/manager.go#L698) and restart will be a success. container restart will fail only for those containers which were using endpoints that had asked for a prestart but now got deleted. If I do it like you are saying, irrespective of whether plugin asked for prestart or not, if endpoint is not in cache, container restart will fail. This is not the intended behavior.\r\n\r\nMake sense?\r\n\r\n ",
        "createdAt" : "2018-02-20T03:18:34Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "31be50f0-f7d7-41d9-8834-6ed6e426eef9",
        "parentId" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "Ok that makes sense.\r\n\r\nHowever it looks like we are not handling the path where a device plugin gets removed by the cluster administrator.\r\nIn that case pluginOpts never gets cleaned up",
        "createdAt" : "2018-02-20T11:05:04Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      },
      {
        "id" : "32b0c35a-9a39-4dc3-b542-7a5565f8efe3",
        "parentId" : "6499448f-d88a-4750-b286-d197f2f3b47e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "Thats of no harm. ",
        "createdAt" : "2018-02-20T11:50:11Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64517cd7410166b01642efeb4a8d0374e236153",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +86,90 @@\tpodDevices podDevices\n\tstore      utilstore.Store\n\tpluginOpts map[string]*pluginapi.DevicePluginOptions\n}\n"
  },
  {
    "id" : "7ffadc52-d69c-49d4-ac13-b4ec80365806",
    "prId" : 58282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58282#pullrequestreview-95239262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d65f9f99-ac36-4005-9f29-01473cd79125",
        "parentId" : null,
        "authorId" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "body" : "Same comment as above this should be an attribute of the endpoint",
        "createdAt" : "2018-02-19T13:24:19Z",
        "updatedAt" : "2018-02-21T06:26:38Z",
        "lastEditedBy" : "ac146833-f0d6-4680-968a-749269c0d55d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64517cd7410166b01642efeb4a8d0374e236153",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +353,357 @@\tm.mutex.Lock()\n\tif r.Options != nil {\n\t\tm.pluginOpts[r.ResourceName] = r.Options\n\t}\n\t// Check for potential re-registration during the initialization of new endpoint,"
  }
]