[
  {
    "id" : "8d64a15a-f860-4fde-a5c4-12eb343f4598",
    "prId" : 96594,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96594#pullrequestreview-591528497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73922ad7-1a19-4418-84bd-c4df1468d5ae",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "Why shortest? Why not longest?",
        "createdAt" : "2021-01-22T18:39:42Z",
        "updatedAt" : "2021-01-22T18:39:42Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "d470c238-0478-4814-994c-55eb2e281d8d",
        "parentId" : "73922ad7-1a19-4418-84bd-c4df1468d5ae",
        "authorId" : "cdad5e95-3d74-4c1f-8d98-b2e276879c98",
        "body" : "Good question!\r\n\r\nHere is an example from commit message:\r\n```\r\nMountpoint: \"/sys/fs/cgroup/systemd/some/path\",\r\nMountpoint: \"/sys/fs/cgroup/systemd\",\r\n```\r\n\r\nIn case of shortest, path most likely (comparing to random as was before) will be root of cgroup filesystem.\r\nIt's not an ideal solution since there is no guarantee of using mount which we want.\r\n\r\nProbably we want to use root of each cgroup subsystem.\r\nThen a better choice would be to use strictly mounts with Root == \"/\".\r\nHowever tests with `kind` will never pass.\r\n",
        "createdAt" : "2021-01-22T18:49:10Z",
        "updatedAt" : "2021-01-22T18:55:20Z",
        "lastEditedBy" : "cdad5e95-3d74-4c1f-8d98-b2e276879c98",
        "tags" : [
        ]
      },
      {
        "id" : "06777475-340d-455a-a895-0ddcedaa19e4",
        "parentId" : "73922ad7-1a19-4418-84bd-c4df1468d5ae",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "@b10s I like what you proposed here strictly mounting with root == \"/\", which is much cleaner solution here.  Can you elaborate a little bit more why tests with kind will never pass?",
        "createdAt" : "2021-02-16T17:52:08Z",
        "updatedAt" : "2021-02-16T17:52:08Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "2acfe05f-39c4-4afd-a37d-3287b15efdd8",
        "parentId" : "73922ad7-1a19-4418-84bd-c4df1468d5ae",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Never mind. I saw the failing tests below. ",
        "createdAt" : "2021-02-16T17:53:48Z",
        "updatedAt" : "2021-02-16T17:53:48Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "e39625e3-0abf-462d-b1ab-996bec033e00",
        "parentId" : "73922ad7-1a19-4418-84bd-c4df1468d5ae",
        "authorId" : "cdad5e95-3d74-4c1f-8d98-b2e276879c98",
        "body" : "@dchen1107 \r\nthe reason why `kind` tests will never pass is because `kind` uses some workaround with double mounts explained here:\r\n```\r\n  # For each cgroup subsystem, Docker does a bind mount from the current\r\n  # cgroup to the root of the cgroup subsystem. For instance:\r\n  #   /sys/fs/cgroup/memory/docker/<cid> -> /sys/fs/cgroup/memory\r\n  #\r\n  # This will confuse Kubelet and cadvisor and will dump the following error\r\n  # messages in kubelet log:\r\n  #   `summary_sys_containers.go:47] Failed to get system container stats for \".../kubelet.service\"`\r\n  #\r\n  # This is because `/proc/<pid>/cgroup` is not affected by the bind mount.\r\n  # The following is a workaround to recreate the original cgroup\r\n  # environment by doing another bind mount for each subsystem.\r\n```\r\n  https://github.com/kubernetes-sigs/kind/blob/11b418d9882efbd7b2284495d0c737ab9130ae05/images/base/files/usr/local/bin/entrypoint#L105",
        "createdAt" : "2021-02-16T18:53:06Z",
        "updatedAt" : "2021-02-16T18:57:14Z",
        "lastEditedBy" : "cdad5e95-3d74-4c1f-8d98-b2e276879c98",
        "tags" : [
        ]
      }
    ],
    "commit" : "de60340e51d0a72a2efed7bc864c1fe746cc1055",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +204,208 @@\tfor _, mount := range allCgroups {\n\t\t// BEFORE kubelet used a random mount point per cgroups subsystem;\n\t\t// NOW    more deterministic: kubelet use mount point with shortest path;\n\t\t// FUTURE is bright with clear expectation determined in doc.\n\t\t// ref. issue: https://github.com/kubernetes/kubernetes/issues/95488"
  },
  {
    "id" : "3d4bd2e7-bddc-4f24-9889-cd184c50ff80",
    "prId" : 88970,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88970#pullrequestreview-381347445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b9c10e5-3129-4b75-b953-70e0b7c725ed",
        "parentId" : null,
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "you will have to change this function in other builds as well.",
        "createdAt" : "2020-03-25T16:56:40Z",
        "updatedAt" : "2020-03-26T02:56:40Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "6783f991c3a7a45ff6b2262d97df2dbb44162b64",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +239,243 @@\n// NodeAllocatableRoot returns the literal cgroup path for the node allocatable cgroup\nfunc NodeAllocatableRoot(cgroupRoot string, cgroupsPerQOS bool, cgroupDriver string) string {\n\tnodeAllocatableRoot := ParseCgroupfsToCgroupName(cgroupRoot)\n\tif cgroupsPerQOS {"
  },
  {
    "id" : "5533ec7d-b62d-497d-bb1e-b26761dd7e1a",
    "prId" : 85218,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85218#pullrequestreview-370976599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d136f3-5541-4ae3-a0cc-f82e8bac69ab",
        "parentId" : null,
        "authorId" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "body" : "can we ditch \"subsystem mountpoint\" concept for v2 codes?\r\n\r\nrunc and containerd are trying to eliminate all \"subsystem\" concept: https://github.com/opencontainers/runc/pull/2169 https://godoc.org/github.com/containerd/cgroups/v2",
        "createdAt" : "2019-11-13T15:27:15Z",
        "updatedAt" : "2020-03-12T07:56:46Z",
        "lastEditedBy" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "tags" : [
        ]
      },
      {
        "id" : "5bb17c01-edb2-4ef3-a0f1-6e2a3a817655",
        "parentId" : "90d136f3-5541-4ae3-a0cc-f82e8bac69ab",
        "authorId" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "body" : "@giuseppe WDYT?",
        "createdAt" : "2020-02-29T11:14:02Z",
        "updatedAt" : "2020-03-12T07:56:46Z",
        "lastEditedBy" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "tags" : [
        ]
      },
      {
        "id" : "417e63dc-7bb7-4c9c-87b4-11053d5b0d38",
        "parentId" : "90d136f3-5541-4ae3-a0cc-f82e8bac69ab",
        "authorId" : "b3fe9735-08f4-4c07-a325-0279623e8b9b",
        "body" : "is this refactoring something that could be addressed later?  I'd like to get the current version merged as soon as possible, so that we can already start using it",
        "createdAt" : "2020-03-09T08:05:45Z",
        "updatedAt" : "2020-03-12T07:56:46Z",
        "lastEditedBy" : "b3fe9735-08f4-4c07-a325-0279623e8b9b",
        "tags" : [
        ]
      },
      {
        "id" : "a58aa56a-5b3c-489e-bd38-8077861a19c8",
        "parentId" : "90d136f3-5541-4ae3-a0cc-f82e8bac69ab",
        "authorId" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "body" : "SGTM",
        "createdAt" : "2020-03-09T08:18:32Z",
        "updatedAt" : "2020-03-12T07:56:46Z",
        "lastEditedBy" : "7ff04a68-17e8-419a-84b6-e644739df26f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5ed1b79709c865d9aa86008048f19331530041",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +227,231 @@\t}\n\n\treturn &CgroupSubsystems{\n\t\tMounts:      mounts,\n\t\tMountPoints: mountPoints,"
  }
]