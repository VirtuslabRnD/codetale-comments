[
  {
    "id" : "b34b0e42-8ba9-4ef7-9250-9d0c17c5f905",
    "prId" : 80315,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80315#pullrequestreview-263988635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5d01eb-71aa-42cd-92d5-38c2309b9025",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Could you provide some examples here to prove the newly added functions like `NewEmptySocketMask` etc would do a great job at clean up the code",
        "createdAt" : "2019-07-19T00:17:28Z",
        "updatedAt" : "2019-07-19T01:52:56Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "e7d68322-2870-429b-a0c7-2d9656e37b24",
        "parentId" : "0f5d01eb-71aa-42cd-92d5-38c2309b9025",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Sure.\r\n\r\nAs a side note, I wrote the original `socketmask` abstraction as well as the `TopologyManager` code referenced below (even though someone else ultimately committed them). I'm just coming in after it now to clean it up before the 1.16 release.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/cm/topologymanager/topology_manager.go#L154\r\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/cm/topologymanager/topology_manager.go#L169\r\n\r\nThe code above can be simplified from:\r\n```\r\n\tdefaultAffinity, _ := socketmask.NewSocketMask()\r\n\tdefaultAffinity.Fill()\r\n```\r\nto:\r\n```\r\n\tdefaultAffinity := socketmask.NewEmptySocketMask().Fill()\r\n```\r\n\r\nI'd also be OK, having the original `NewSocketMask()` panic instead of returning an error, but I don't like that everywhere in the codebase (including future code in the PRs referenced below) where we currently create `SocketMask`, we end up ignoring the error anyway.\r\n\r\nLikewise, with the introduction of the package level `And` function, the code at:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/cm/topologymanager/topology_manager.go#L200\r\n\r\nCan be simplified from:\r\n```\r\n\t\tmergedAffinity, _ := socketmask.NewSocketMask()\r\n\t\tmergedAffinity.Fill()\r\n\t\tmergedAffinity.And(socketAffinities...)\r\n```\r\nto:\r\n```\r\n\t\tmergedAffinity := socketmask.And(socketAffinities...)\r\n```\r\n\r\nThere are more places in the code in pending PRs that will benefit from this as well:\r\nhttps://github.com/kubernetes/kubernetes/pull/73920\r\nhttps://github.com/kubernetes/kubernetes/pull/74345\r\n\r\nThe plan is to create a cleanup PR for all of these places once those other PRs have merged.",
        "createdAt" : "2019-07-19T02:14:00Z",
        "updatedAt" : "2019-07-19T11:48:33Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "f4f13341-5164-49c8-832c-0fda06003317",
        "parentId" : "0f5d01eb-71aa-42cd-92d5-38c2309b9025",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Sounds Good",
        "createdAt" : "2019-07-19T02:25:53Z",
        "updatedAt" : "2019-07-19T02:25:54Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "65b07312b09cc10a2cc437bbc81d1d996b0d6190",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +41,45 @@\n// NewEmptySocketMask creates a new, empty SocketMask\nfunc NewEmptySocketMask() SocketMask {\n\ts := socketMask(0)\n\treturn &s"
  },
  {
    "id" : "c8d4a525-d818-4ec9-99f7-75bef40274e9",
    "prId" : 78587,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78587#pullrequestreview-273818315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da06513d-0907-4c68-8b66-f28e159b4603",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "ðŸ’¯ ",
        "createdAt" : "2019-08-12T16:50:14Z",
        "updatedAt" : "2019-08-12T16:50:15Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "89481f8c27cb3cb96e9055eec6fb314fcd138f33",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +140,144 @@//Count counts number of bits in mask set to one\nfunc (s *socketMask) Count() int {\n\treturn bits.OnesCount64(uint64(*s))\n}\n"
  },
  {
    "id" : "1394fd51-77ba-40ff-ab90-235752ac55ca",
    "prId" : 78515,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78515#pullrequestreview-243809039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6877f98-62c2-44b3-a21f-909ac7dd9d41",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "s/lets/less",
        "createdAt" : "2019-05-30T13:57:31Z",
        "updatedAt" : "2019-05-30T13:57:31Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a43d21c2690466334718722b32d3fd30f7b16a2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +120,124 @@// IsNarrowerThan checks if one mask is narrower than another.\n//\n// A mask is said to be \"narrower\" than another if it has lets bits set. If the\n// same number of bits are set in both masks, then the mask with more\n// lower-numbered bits set wins out."
  },
  {
    "id" : "8caf294f-530a-4228-86bc-1379c2f536ba",
    "prId" : 72913,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72913#pullrequestreview-244591075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "parentId" : null,
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "This String() method looks a bit strange, it will print binary representation of mask in opposite order compared to any canonical way of representing masks with lowest bit on the right.",
        "createdAt" : "2019-05-28T16:45:25Z",
        "updatedAt" : "2019-05-28T16:45:26Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "b50221de-0989-4b56-96cc-efe6d975b2cd",
        "parentId" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Agreed. This should probably be reversed. In fact, it should probably just use:\r\n```\r\nstrconv.FormatUint(s, 2)\r\n```\r\nWith the proper padding added to make sure it is always 64 bits in length.",
        "createdAt" : "2019-05-28T16:55:23Z",
        "updatedAt" : "2019-05-28T16:59:53Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "d4832f2c-0db6-47ee-9510-23ea587c1d82",
        "parentId" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "authorId" : "575530a6-8847-4729-9bb3-71927fc83799",
        "body" : "The sockets are set from left to right though - so it should be read that way as a string?",
        "createdAt" : "2019-05-28T17:10:36Z",
        "updatedAt" : "2019-05-28T17:10:36Z",
        "lastEditedBy" : "575530a6-8847-4729-9bb3-71927fc83799",
        "tags" : [
        ]
      },
      {
        "id" : "c3ece2fd-82b9-4a1c-9336-b7e42f447d07",
        "parentId" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "The sockets are set as a bit in a uint64, which, if printed as a string, should have bit 0 on the far right and bit 63 on the far left. It's not a huge deal which order these are actually printed in the string representation -- I think @kad's point was just that if we are printing them to look like a binary 64-bit integer, why are we putting the most significant bit on the wrong side.",
        "createdAt" : "2019-05-28T18:04:30Z",
        "updatedAt" : "2019-05-28T18:06:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "333a15b9-1bb7-45b9-a8e1-c8aa0c73ae80",
        "parentId" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "authorId" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "body" : "@klueska \r\n```\r\nreturn fmt.Sprintf(\"%064b\", *s)\r\n```\r\nwill be simple implementation of that function.",
        "createdAt" : "2019-05-31T10:53:48Z",
        "updatedAt" : "2019-05-31T10:53:49Z",
        "lastEditedBy" : "659c7c1f-39ba-41a7-8331-fcc6b3b5f2fb",
        "tags" : [
        ]
      },
      {
        "id" : "0d39ec7e-3f09-45f7-aeb6-24cf3eb78485",
        "parentId" : "80647b1b-d1e7-4880-8048-8a5a0671fbfd",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "This issue is being addressed in https://github.com/kubernetes/kubernetes/pull/78587",
        "createdAt" : "2019-06-01T15:20:14Z",
        "updatedAt" : "2019-06-01T15:20:14Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7f6b8f8f1868309a06f307914e58e02f074f03e",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +118,122 @@\n//String converts mask to string\nfunc (s *socketMask) String() string {\n\tstr := \"\"\n\tfor i := uint64(0); i < 64; i++ {"
  },
  {
    "id" : "be8d21ad-66c3-4b89-b098-e34f5afcdb38",
    "prId" : 72913,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72913#pullrequestreview-242840407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac56fd9c-ce1d-4807-a3a2-ba66f0105d63",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should Xor (^) be supported for SocketMask ?\r\nXor can clear selected SocketMask's\r\n\r\nCreated #78451",
        "createdAt" : "2019-05-28T18:16:09Z",
        "updatedAt" : "2019-05-28T20:09:28Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7f6b8f8f1868309a06f307914e58e02f074f03e",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@\n//Or performs or operation on all bits in masks\nfunc (s *socketMask) Or(masks ...SocketMask) {\n\tfor _, m := range masks {\n\t\t*s |= *m.(*socketMask)"
  }
]