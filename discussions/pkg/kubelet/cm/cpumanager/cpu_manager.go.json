[
  {
    "id" : "ac5056af-07e3-499a-827f-7caabd972247",
    "prId" : 97427,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97427#pullrequestreview-560947478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef5d2726-ea2c-4405-91ed-f550746320dc",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "nit: I think this would be slightly easier to follow if we called `m.Lock()` twice, each time before invoking the methods accessing `containerMap`. Just easier to track where and why the lock is needed.  ",
        "createdAt" : "2020-12-28T20:01:22Z",
        "updatedAt" : "2020-12-28T20:01:48Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "b9ba57f0-28c6-44b8-932d-4df4722eefc2",
        "parentId" : "ef5d2726-ea2c-4405-91ed-f550746320dc",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I'm actually happy with the way it is currently (I've been stress testing it like this in a soak environment over the last 2 weeks without issue). If you feel strongly though, I can add small helper functions to do the locking around each call.",
        "createdAt" : "2021-01-04T11:06:56Z",
        "updatedAt" : "2021-01-04T11:06:56Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fcbd2206dda2d6db7d823a1e555dade27455151",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +403,407 @@\t\t\t}\n\n\t\t\tm.Lock()\n\t\t\tif cstatus.State.Terminated != nil {\n\t\t\t\t// The container is terminated but we can't call m.RemoveContainer()"
  },
  {
    "id" : "32fa8d5f-a2d5-43ef-be7d-eb46773e9da7",
    "prId" : 84705,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84705#pullrequestreview-334624439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dbd63ac-2843-4414-bc75-47cfcc492c1c",
        "parentId" : null,
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "You probably want to change this code to returrn an error instead of panicing too.",
        "createdAt" : "2019-12-19T10:45:08Z",
        "updatedAt" : "2019-12-19T13:58:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "86a1f233-b22e-49c1-a04b-afe4e093fe68",
        "parentId" : "4dbd63ac-2843-4414-bc75-47cfcc492c1c",
        "authorId" : "42331e54-5046-4507-b5bb-627604a55d24",
        "body" : "Thanks for noticing.",
        "createdAt" : "2019-12-19T13:17:33Z",
        "updatedAt" : "2019-12-19T13:58:17Z",
        "lastEditedBy" : "42331e54-5046-4507-b5bb-627604a55d24",
        "tags" : [
        ]
      },
      {
        "id" : "50372da3-c8f0-464b-9aac-f61830872191",
        "parentId" : "4dbd63ac-2843-4414-bc75-47cfcc492c1c",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I wrote the patch that recently got merged that introduced this, so wanted to make sure it got covered here on the rebase :)",
        "createdAt" : "2019-12-19T13:19:06Z",
        "updatedAt" : "2019-12-19T13:58:17Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4bd4e2e965fe6ef093ccea0cc8ef4cc40ce0c5f",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +189,193 @@\t\tklog.Errorf(\"[cpumanager] could not initialize checkpoint manager: %v, please drain node and remove policy state file\", err)\n\t\treturn err\n\t}\n\tm.state = stateImpl\n"
  },
  {
    "id" : "6fc2bb89-7e47-4bce-93a6-e8640ef32b86",
    "prId" : 84705,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84705#pullrequestreview-345691349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a75b257b-2c24-4983-99d4-826bdf2c9566",
        "parentId" : null,
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Logging here is redundant because the same information is printed when the Container manager errors out at the next level based on the returned error.\r\n\r\nI'd say it's OK for now though. Let's get this PR pushed through and then come back with a cleanup PR for these kind of things afterwards-",
        "createdAt" : "2020-01-20T13:42:27Z",
        "updatedAt" : "2020-01-20T13:42:27Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "39dce561-ee75-44af-a0de-b888fc90d451",
        "parentId" : "a75b257b-2c24-4983-99d4-826bdf2c9566",
        "authorId" : "42331e54-5046-4507-b5bb-627604a55d24",
        "body" : "OK, Thanks. üëç ",
        "createdAt" : "2020-01-21T08:09:44Z",
        "updatedAt" : "2020-01-21T08:09:44Z",
        "lastEditedBy" : "42331e54-5046-4507-b5bb-627604a55d24",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4bd4e2e965fe6ef093ccea0cc8ef4cc40ce0c5f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +187,191 @@\tstateImpl, err := state.NewCheckpointState(m.stateFileDirectory, cpuManagerStateFileName, m.policy.Name(), initialContainers)\n\tif err != nil {\n\t\tklog.Errorf(\"[cpumanager] could not initialize checkpoint manager: %v, please drain node and remove policy state file\", err)\n\t\treturn err\n\t}"
  },
  {
    "id" : "635661ca-1b95-401c-8907-ae943686e97f",
    "prId" : 84525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84525#pullrequestreview-310211172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e78cf5c-28de-4394-bc01-d41c16a84bd2",
        "parentId" : null,
        "authorId" : "f181934d-9b1f-41af-9c11-d9cf009ee92f",
        "body" : "if activeContainers were mapped to a bool, I think you could just do \"if activeContainers[containerID]\"\r\n\r\nI actually kind of like the previous version where we stored a pod reference here so we could include the pod name in the error message.",
        "createdAt" : "2019-10-31T22:03:38Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "f181934d-9b1f-41af-9c11-d9cf009ee92f",
        "tags" : [
        ]
      },
      {
        "id" : "fc672812-5e28-4ada-9918-99300fc6d29c",
        "parentId" : "6e78cf5c-28de-4394-bc01-d41c16a84bd2",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I had it that way to start with, but it doesn't actually work if there is an error (it panics).\r\nIt panics because when `containerID` is not present in the map, then `pod` is `nil`, so you can't actually pull the name from it.\r\n",
        "createdAt" : "2019-10-31T22:11:29Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "af875b39-c0c4-4242-afa3-88643511e577",
        "parentId" : "6e78cf5c-28de-4394-bc01-d41c16a84bd2",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Normally I would have fixed the bug in one commit, and then done the move to a new function in a second commit, but I forgot about this subtle change. Thanks for noting it.",
        "createdAt" : "2019-10-31T22:14:32Z",
        "updatedAt" : "2019-11-06T15:30:48Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d4d4bdd6152d34203bc2f273160ac5a172a0917",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +289,293 @@\t// above ensure that no erroneous state will ever be removed.\n\tfor containerID := range m.state.GetCPUAssignments() {\n\t\tif _, ok := activeContainers[containerID]; !ok {\n\t\t\tklog.Errorf(\"[cpumanager] removeStaleState: removing container: %s)\", containerID)\n\t\t\terr := m.policy.RemoveContainer(m.state, containerID)"
  },
  {
    "id" : "ec798c2c-362c-490f-ac16-ee4bddb25c51",
    "prId" : 84525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84525#pullrequestreview-312691424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder why state removal cannot be done for the other containers.",
        "createdAt" : "2019-11-06T18:45:17Z",
        "updatedAt" : "2019-11-06T18:45:17Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "75816679-2e9e-4ca6-acf6-da7934417938",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I'm not sure I understand the concern. This function removes state from *all* containers that don't make it into the `activeContainers` list. If there's a possibility that we might not add a container to this list when we should, then the only thing we can do is exit early and try again another time.",
        "createdAt" : "2019-11-06T19:00:30Z",
        "updatedAt" : "2019-11-06T19:00:30Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "fb93f9a4-cb9a-4550-94de-e8990f470573",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I think error from getting containerID for one of InitContainers shouldn't skip all of Containers",
        "createdAt" : "2019-11-06T19:09:18Z",
        "updatedAt" : "2019-11-06T19:09:19Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "12f350b7-8eb6-4ba0-9751-96e4face181e",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I'm happy to consider a modification if you can suggest a way to do that. I don't immediately see a way to do it though.",
        "createdAt" : "2019-11-06T19:14:08Z",
        "updatedAt" : "2019-11-06T19:14:08Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "69926473-236f-469f-adf2-2214bcbb3ecc",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "How about the following ?\r\n```\r\n\t\tfor _, container := range pod.Spec.InitContainers {\r\n\t\t\tcontainerID, err := findContainerIDByName(&pstatus, container.Name)\r\n\t\t\tif err != nil {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tactiveContainers[containerID] = struct{}{}\r\n\t\t}\r\n\t\tfor _, container := range pod.Spec.Containers {\r\n\t\t\tcontainerID, err := findContainerIDByName(&pstatus, container.Name)\r\n\t\t\tif err != nil {\r\n\t\t\t\t// If even one container does not have it's containerID set, skip state removal.\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tactiveContainers[containerID] = struct{}{}\r\n\t\t}\r\n```\r\nIf you think the above is better, I can send out a PR after this PR merges.",
        "createdAt" : "2019-11-06T19:20:39Z",
        "updatedAt" : "2019-11-06T19:20:39Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "56e0cc6a-6d78-40a7-83c6-74fd60533eed",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "That won't work though.\r\n\r\nIf any call to `findContainerIDByName()` fails then the `containerID` of that container won't be added to the `activeContainers` list (even though there might actually be valid state for that container).\r\n\r\nAt the end of the function we then remove any state *not* part of the `activeContainers` list, which is unacceptable if it was just a sporadic syncing of the pod state.\r\n\r\nIn any case, this entire problem goes away in the next PR I have open (there will be no need to call out to `findContainerIDByName()` going forward):\r\nhttps://github.com/kubernetes/kubernetes/pull/84462",
        "createdAt" : "2019-11-06T19:28:06Z",
        "updatedAt" : "2019-11-06T19:28:06Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      },
      {
        "id" : "37baa8d5-0cc4-480d-a004-218e8adf52de",
        "parentId" : "b37edf03-87fc-4d01-8820-f9cd08d304ed",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Glad you have plan for improving this part of code.",
        "createdAt" : "2019-11-06T19:36:30Z",
        "updatedAt" : "2019-11-06T19:36:31Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d4d4bdd6152d34203bc2f273160ac5a172a0917",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +278,282 @@\t\t\tcontainerID, err := findContainerIDByName(&pstatus, container.Name)\n\t\t\tif err != nil {\n\t\t\t\t// If even one container does not have it's containerID set, skip state removal.\n\t\t\t\treturn\n\t\t\t}"
  },
  {
    "id" : "7b661a09-5175-4b44-a1f3-fc7b1b98c447",
    "prId" : 84462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84462#pullrequestreview-333412393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df16b360-651b-4e61-b42a-761e396301cf",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: its containerID -> (pod, container) per earlier commits",
        "createdAt" : "2019-12-17T16:33:55Z",
        "updatedAt" : "2019-12-17T16:33:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f55328615649a7b68693d99e4bd99f728d9d55f0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +98,102 @@\tpodStatusProvider status.PodStatusProvider\n\n\t// containerMap provides a mapping from (pod, container) -> containerID\n\t// for all containers a pod\n\tcontainerMap containermap.ContainerMap"
  },
  {
    "id" : "ccd25d80-1e5b-4b47-b6b6-9e9667ff189c",
    "prId" : 84300,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84300#pullrequestreview-345421092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3ec4521-56e2-4b4a-92d1-48dad5c180c4",
        "parentId" : null,
        "authorId" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "body" : "Just curious here and making sure it's not an oversight.. If all three states (waiting, running and terminated) are all nil, this also means that the correct state is in fact 'waiting'?",
        "createdAt" : "2020-01-20T16:24:23Z",
        "updatedAt" : "2020-01-20T16:24:24Z",
        "lastEditedBy" : "9b4e4d81-187d-4943-a9be-08f439915f8f",
        "tags" : [
        ]
      },
      {
        "id" : "0c0eb919-37dd-490a-9713-e976beebcedc",
        "parentId" : "b3ec4521-56e2-4b4a-92d1-48dad5c180c4",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Correct. From the comment underneath https://godoc.org/k8s.io/api/core/v1#ContainerState:\r\n\r\n> ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
        "createdAt" : "2020-01-20T16:27:11Z",
        "updatedAt" : "2020-01-20T16:27:36Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be9b0fe55b61b468a07799c16bde490ab648fc0",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +383,387 @@\n\t\t\tif cstatus.State.Waiting != nil ||\n\t\t\t\t(cstatus.State.Waiting == nil && cstatus.State.Running == nil && cstatus.State.Terminated == nil) {\n\t\t\t\tklog.Warningf(\"[cpumanager] reconcileState: skipping container; container still in the waiting state (pod: %s, container: %s, error: %v)\", pod.Name, container.Name, err)\n\t\t\t\tfailure = append(failure, reconciledContainer{pod.Name, container.Name, \"\"})"
  },
  {
    "id" : "d39f7289-dd28-4b77-b567-cd22e30f8512",
    "prId" : 81344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81344#pullrequestreview-276964793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78153277-4298-40a3-946d-024179ead74a",
        "parentId" : null,
        "authorId" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "body" : "Why not add this line when constructing manager?",
        "createdAt" : "2019-08-14T02:03:23Z",
        "updatedAt" : "2019-09-25T02:39:29Z",
        "lastEditedBy" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "tags" : [
        ]
      },
      {
        "id" : "dc727f00-22bb-4d82-8ee1-4c90fa1eb3c8",
        "parentId" : "78153277-4298-40a3-946d-024179ead74a",
        "authorId" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "body" : "initializes sourcesReady to perform no-op operations.",
        "createdAt" : "2019-08-20T06:51:57Z",
        "updatedAt" : "2019-09-25T02:39:29Z",
        "lastEditedBy" : "dfd76e41-2089-43f2-b91d-5ac73825e4fb",
        "tags" : [
        ]
      },
      {
        "id" : "6c3ab8c9-179b-44cb-a13a-4f4de439ad4a",
        "parentId" : "78153277-4298-40a3-946d-024179ead74a",
        "authorId" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "body" : "I mean why not add this line after [L163](https://github.com/kubernetes/kubernetes/pull/81344/files#diff-67c46e7cbb41ea5e675000a3298e6b32R163)",
        "createdAt" : "2019-08-20T07:00:24Z",
        "updatedAt" : "2019-09-25T02:39:29Z",
        "lastEditedBy" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "594fc0f4b94a0ccec6052c1b28c14291ed5b2d88",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +165,169 @@\t\tnodeAllocatableReservation: nodeAllocatableReservation,\n\t}\n\tmanager.sourcesReady = &sourcesReadyStub{}\n\treturn manager, nil\n}"
  },
  {
    "id" : "72230ab7-89fb-4006-9916-a63598d16899",
    "prId" : 80294,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80294#pullrequestreview-263671861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41f47e8c-3bcb-4eb7-8622-a30fb47c7a52",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Just confirming that currently only the test suite calls this function? Is this because this is added as part of the topology work that is still WIP?",
        "createdAt" : "2019-07-18T13:52:29Z",
        "updatedAt" : "2019-07-18T13:52:46Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "9fcf7239-f3e3-4c50-9916-86f0265b786d",
        "parentId" : "41f47e8c-3bcb-4eb7-8622-a30fb47c7a52",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "Yes. Please see the resolved comment thread beneath: https://github.com/kubernetes/kubernetes/pull/74357/files#diff-06aa1b61a9bc4a50aa8d8b0a69d95bb2R294",
        "createdAt" : "2019-07-18T13:56:23Z",
        "updatedAt" : "2019-07-18T13:59:38Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee5d5409e9d69d19de79418c2b8dffd5589b99c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +133,137 @@\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown policy: \\\"%s\\\"\", cpuPolicyName)\n\t}\n"
  },
  {
    "id" : "8455aa6c-4c68-4cb6-8e77-51297b0e67db",
    "prId" : 77291,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77291#pullrequestreview-232675353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ee12e7e-5b35-4ccf-ab4f-1e752e1f6270",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Can we be confident that the `podStatus` will remain consistent over this entire loop? If we can't, I think we open ourselves up to a possible race condition if we check the podStatus at the start of the loop, and then it somehow changes during the middle of executing the loop. Although to be fair, there's also that risk even if we check the pod status during each iteration of the loop, its just less because we are checking the pod status more frequently.",
        "createdAt" : "2019-05-01T14:33:38Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "b99ba384-7a15-4d5c-b081-8ca80a67262b",
        "parentId" : "6ee12e7e-5b35-4ccf-ab4f-1e752e1f6270",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@ConnorDoyle \r\nCan you comment on this refactoring ?\r\n\r\nThanks",
        "createdAt" : "2019-05-01T17:20:55Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "56325377-da99-4159-b59a-50ae5c86d662",
        "parentId" : "6ee12e7e-5b35-4ccf-ab4f-1e752e1f6270",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Yes, this makes sense to do. the pod status really only needs to be queried once before we loop through the containers.",
        "createdAt" : "2019-05-01T17:47:52Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc16a7e8289b0ec09c234110df4d7596b4bf565",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +226,230 @@\t\tallContainers := pod.Spec.InitContainers\n\t\tallContainers = append(allContainers, pod.Spec.Containers...)\n\t\tstatus, ok := m.podStatusProvider.GetPodStatus(pod.UID)\n\t\tfor _, container := range allContainers {\n\t\t\tif !ok {"
  },
  {
    "id" : "5152b5e9-b3c0-4d27-85d1-7baa39d4d904",
    "prId" : 77291,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77291#pullrequestreview-232842837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "If we do make this change (and I'm not yet positive its safe), I believe we should also move this `if !ok` check outside of the loop.",
        "createdAt" : "2019-05-01T14:34:11Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "86eb6f18-4d2d-4bc2-9aab-438ad12109fa",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The variable reference is to the ok outside the container loop.\r\nThe intention of the check here is to include container name in the failure.\r\n\r\nSo the check should be kept here.",
        "createdAt" : "2019-05-01T15:01:29Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "ccb12c23-512e-459b-8a6c-7b48a2a82030",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "I agree with @mattjmcnaughton on this one, in the interest of local readability, if `ok` is false you could immediately append all of the containers to the failure list and `continue` the outer pod iteration loop. As is, only the first container is logged; it makes more sense to just log the pod name.",
        "createdAt" : "2019-05-01T17:52:04Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "9c10b778-b430-4f8b-9168-7b30de5f56d8",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Please confirm that the test needs to be modified when only pod name is returned:\r\n```\r\n\t\t\tif !foundFailedContainer {\r\n\t\t\t\tt.Errorf(\"Expected reconciliation failure for container: %s\", testCase.expectFailedContainerName)\r\n```",
        "createdAt" : "2019-05-01T17:58:17Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "88056d54-d463-49b8-b6e6-7000dff701a0",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Meaning, expectFailedContainerName parameter can be dropped from cpu_manager_test.go",
        "createdAt" : "2019-05-01T18:13:11Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "66840cd0-e7ac-4e6b-b087-875141263af8",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@ConnorDoyle \r\nIf you think the potential changes to test are large, we can use the current formation where compatibility with current code is kept.\r\n\r\nThanks",
        "createdAt" : "2019-05-01T19:03:25Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "99edac07-ce8f-4f22-ad8b-bb47cdd147ce",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Let's keep the reconciledContainer struct as-is; there are other scenarios that need to test for individual container reconcile failures.\r\n\r\nFor this change, if the pod status can't be queried we loop over each container in the pod and add it to the list of failures. I don't believe the tests would need to change beyond expecting all of the container to be in the failed list in this scenario.\r\n\r\nLet me know if that isn't clear.",
        "createdAt" : "2019-05-01T21:52:37Z",
        "updatedAt" : "2019-05-01T22:02:21Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "12a34e9b-c983-49de-9e1d-5e4321a181f0",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I updated the PR. Let me know what you think, @ConnorDoyle \r\n\r\nIn order not to have two if blocks with same condition, I kept the if block inside the container loop.",
        "createdAt" : "2019-05-01T22:03:21Z",
        "updatedAt" : "2019-05-01T22:03:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "9022a278-ea2e-40d2-b365-b7c4f3145189",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "This is no worse than what we had before, so if you don't feel like making further changes it's OK. Just for clarity, I had something like this in mind:\r\n\r\n```go\r\n\tfor _, pod := range m.activePods() {\r\n\t\tallContainers := pod.Spec.InitContainers\r\n\t\tallContainers = append(allContainers, pod.Spec.Containers...)\r\n\t\tif status, ok := m.podStatusProvider.GetPodStatus(pod.UID); !ok {\r\n\t\t\tklog.Warningf(\"[cpumanager] reconcileState: skipping pod; status not found (pod: %s)\", pod.Name)\r\n\t\t\tfor _, container := range allContainers {\r\n\t\t\t\tfailure = append(failure, reconciledContainer{pod.Name, container.Name, \"\"})\r\n\t\t\t}\r\n\t\t\tcontinue  // to next pod\r\n\t\t}\r\n\r\n\t\tfor _, container := range allContainers {\r\n\t\t\t// ...\r\n\t\t}\r\n```\r\n\r\nThe benefit I see would be to include all containers from the pod we failed to get status in the failure list, instead of just the first container.\r\n",
        "createdAt" : "2019-05-01T22:55:43Z",
        "updatedAt" : "2019-05-01T22:55:59Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "6bba5848-7530-4dbc-ac4d-e1c3de694a63",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The current code is consistent with previous behavior.\r\n\r\nSo please accept the PR if it is Okay with you.\r\n\r\nThanks\r\n",
        "createdAt" : "2019-05-01T23:04:19Z",
        "updatedAt" : "2019-05-01T23:04:19Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "c406b80b-e30b-4959-952d-aa5f7c203804",
        "parentId" : "c6e61d99-2223-42d9-a642-fe471aac1186",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Usually for such a small efficiency gain the readability hit would not be worth it. It's idiomatic to check error conditions immediately in go. But, since it's only one line removed it is OK.",
        "createdAt" : "2019-05-02T05:01:20Z",
        "updatedAt" : "2019-05-02T05:01:36Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc16a7e8289b0ec09c234110df4d7596b4bf565",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +228,232 @@\t\tstatus, ok := m.podStatusProvider.GetPodStatus(pod.UID)\n\t\tfor _, container := range allContainers {\n\t\t\tif !ok {\n\t\t\t\tklog.Warningf(\"[cpumanager] reconcileState: skipping pod; status not found (pod: %s)\", pod.Name)\n\t\t\t\tfailure = append(failure, reconciledContainer{pod.Name, container.Name, \"\"})"
  },
  {
    "id" : "2c014be5-355e-456e-bbe8-132bf6c75645",
    "prId" : 77162,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77162#pullrequestreview-232248070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3d66f86-cb23-477b-95d0-9b7eace5766b",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Nit: `allStatuses` feels like a slightly confusing variable name when we explicitly assign it to `status.InitContainerStatuses`. I know its only for one line, so definitely not a big deal... but I wonder if we could find a better name.",
        "createdAt" : "2019-04-30T14:07:51Z",
        "updatedAt" : "2019-04-30T14:09:02Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "d2f4d9f5-2b6b-47ae-b04d-69b0ae4556f2",
        "parentId" : "c3d66f86-cb23-477b-95d0-9b7eace5766b",
        "authorId" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "body" : "I was mimicking the naming from above:\r\nhttps://github.com/kubernetes/kubernetes/pull/77162/files#diff-67c46e7cbb41ea5e675000a3298e6b32L226\r\n\r\nI'd be happy to change it though if you like. Maybe just `statuses`?",
        "createdAt" : "2019-04-30T15:39:03Z",
        "updatedAt" : "2019-04-30T15:39:03Z",
        "lastEditedBy" : "8eff55b7-2f52-4dd6-b8a6-b75a1c427179",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef27f5f1a5587c75316c440490c6df39417d1c4a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +295,299 @@\nfunc findContainerIDByName(status *v1.PodStatus, name string) (string, error) {\n\tallStatuses := status.InitContainerStatuses\n\tallStatuses = append(allStatuses, status.ContainerStatuses...)\n\tfor _, container := range allStatuses {"
  },
  {
    "id" : "cd1f367f-4914-4ba1-9534-3c9b87b3854a",
    "prId" : 67430,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67430#pullrequestreview-148300220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de8bc2e7-852c-461b-b9eb-9d3f1f72c9cb",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Did we talk about this change? Doesn't this break with the `none` policy? Can you refresh my memory on why this is in the diff?",
        "createdAt" : "2018-08-22T00:17:11Z",
        "updatedAt" : "2018-08-22T00:17:11Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "408d80fa-088f-4c09-bd05-28982c2611bc",
        "parentId" : "de8bc2e7-852c-461b-b9eb-9d3f1f72c9cb",
        "authorId" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "body" : "I didn't change it, just did some refactor with it. Please review the whole function",
        "createdAt" : "2018-08-22T00:26:49Z",
        "updatedAt" : "2018-08-22T00:26:49Z",
        "lastEditedBy" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "tags" : [
        ]
      },
      {
        "id" : "2d63543a-fa84-4521-8bc0-0953258e6153",
        "parentId" : "de8bc2e7-852c-461b-b9eb-9d3f1f72c9cb",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Got it, sorry.",
        "createdAt" : "2018-08-22T00:41:24Z",
        "updatedAt" : "2018-08-22T00:41:24Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "36b92b9b29b27038163398e0a6507d8a2a4927df",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +189,193 @@\t\t\tm.Unlock()\n\t\t}\n\t\treturn err\n\t}\n\tglog.V(5).Infof(\"[cpumanager] update container resources is skipped due to cpu set is empty\")"
  },
  {
    "id" : "922b8f15-5726-483c-bf63-8ffdf2e914d7",
    "prId" : 54409,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54409#pullrequestreview-76632654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acee952b-6e78-484c-872d-c619153bdce0",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "I found a small edge case when testing this patch manually:\r\n\r\n1. Run some pinned containers with the static policy\r\n1. Stop kubelet\r\n1. Terminate containers\r\n1. Restart Kubelet with the none policy\r\n1. Restart Kubelet with the static policy\r\n\r\nThe `RemoveContainer` calls that we use to clean the state file are delivered to the None policy, which drops them on the floor. When the static policy comes up again, the previously pinned CPUs are effectively leaked. Since this is a subtle issue in itself, I prefer we land this patch as-is and create an issue to fix this edge case.",
        "createdAt" : "2017-11-09T17:35:40Z",
        "updatedAt" : "2017-11-14T17:39:41Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "bd288c79-d5aa-411e-9067-53a5b7528ace",
        "parentId" : "acee952b-6e78-484c-872d-c619153bdce0",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "@flyingcougar if you want to fix this as part of this PR, that's OK too. @balajismaniam and I discussed it offline and think it would make sense to also use the file backed state for the none policy. That way, in step 4 above, we panic and tell the operator to delete the state file. WDYT?",
        "createdAt" : "2017-11-09T18:20:46Z",
        "updatedAt" : "2017-11-14T17:39:41Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "cac79508-30d4-422f-af20-41f42159e328",
        "parentId" : "acee952b-6e78-484c-872d-c619153bdce0",
        "authorId" : "dc057fa7-ae55-4b46-a679-e19975231dd7",
        "body" : "@ConnorDoyle @balajismaniam - what about panic here:\r\nhttps://github.com/intelsdi-x/kubernetes/blob/826f3d93f70bd6ef01002d231482f6e20fc0f35b/pkg/kubelet/cm/cpumanager/state/state_file.go#L92-L94\r\nThen we dont need file state in none policy.",
        "createdAt" : "2017-11-13T14:37:53Z",
        "updatedAt" : "2017-11-14T17:39:41Z",
        "lastEditedBy" : "dc057fa7-ae55-4b46-a679-e19975231dd7",
        "tags" : [
        ]
      },
      {
        "id" : "76ba8971-c49f-4edf-90fd-86309755ac1d",
        "parentId" : "acee952b-6e78-484c-872d-c619153bdce0",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "The problem is that we need to use the file state in the none policy to execute that code! Otherwise we'll never read/write the policy name in the file. Please correct me if I'm wrong, were you able to reproduce the issue described above?",
        "createdAt" : "2017-11-14T19:34:22Z",
        "updatedAt" : "2017-11-14T19:34:22Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "4bb61591-15a6-4066-8a62-66ac1ce2dda2",
        "parentId" : "acee952b-6e78-484c-872d-c619153bdce0",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Added back LGTM; let's take this up in a new PR.",
        "createdAt" : "2017-11-14T23:24:28Z",
        "updatedAt" : "2017-11-14T23:24:28Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "af1d263d-cc8a-4732-b572-8a205ede9c2d",
        "parentId" : "acee952b-6e78-484c-872d-c619153bdce0",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Tracking this in issue #55736",
        "createdAt" : "2017-11-14T23:30:38Z",
        "updatedAt" : "2017-11-14T23:30:38Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "809ac834a0817291aff3a064128e9174927236f7",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +113,117 @@\tcase PolicyNone:\n\t\tpolicy = NewNonePolicy()\n\t\tstateHandle = state.NewMemoryState()\n\n\tcase PolicyStatic:"
  },
  {
    "id" : "ef140ea8-74ad-44d2-9ee8-00e9b00c1d9e",
    "prId" : 53122,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53122#pullrequestreview-66308665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25e632a7-feab-473d-a90e-b42014f5f9fe",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Could you add a debug log line here indicating why the update call is skipped in this case? Future policies might not be as simple as the two we currently have.",
        "createdAt" : "2017-09-30T02:06:38Z",
        "updatedAt" : "2017-09-30T08:52:00Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "91d4c88f-d90d-463b-8593-f7a34b40415f",
        "parentId" : "25e632a7-feab-473d-a90e-b42014f5f9fe",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Good point!",
        "createdAt" : "2017-09-30T08:37:15Z",
        "updatedAt" : "2017-09-30T08:52:00Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "282973d87d1adb85ffe7ec6d8e0f9c40340228ea",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +177,181 @@\tm.Unlock()\n\n\tif !cpus.IsEmpty() {\n\t\terr = m.updateContainerCPUSet(containerID, cpus)\n\t\tif err != nil {"
  },
  {
    "id" : "6ba989a5-03cd-4948-b541-200b1d72e5e2",
    "prId" : 51357,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51357#pullrequestreview-59424239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc02237c-c25c-42f7-922d-7c0f2d387c08",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "this appears to be for testing, just add a big // NOTE: this is for testing primarily.",
        "createdAt" : "2017-08-29T22:13:33Z",
        "updatedAt" : "2017-08-31T06:42:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "173034a1-19fe-4d0b-ad4d-fbc66a7e1bd9",
        "parentId" : "bc02237c-c25c-42f7-922d-7c0f2d387c08",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "added",
        "createdAt" : "2017-08-30T01:19:49Z",
        "updatedAt" : "2017-08-31T06:42:48Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "50674ec614a67cd7c6a4fbc7a524e8eda0cf3d4f",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +200,204 @@\n\t\t\tcset := m.state.GetCPUSetOrDefault(containerID)\n\t\t\tif cset.IsEmpty() {\n\t\t\t\t// NOTE: This should not happen outside of tests.\n\t\t\t\tglog.Infof(\"[cpumanager] reconcileState: skipping container; assigned cpuset is empty (pod: %s, container: %s)\", pod.Name, container.Name)"
  },
  {
    "id" : "e6cb7e65-75d0-4ea1-8213-d8c1b3737a3d",
    "prId" : 51140,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51140#pullrequestreview-59119208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e7ac88-452b-4e1c-bc64-08883a8e118e",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can you make clear what prereqs should be satisfied before calling start?  i.e. is cAdvisor up or not?",
        "createdAt" : "2017-08-24T21:47:52Z",
        "updatedAt" : "2017-08-29T10:42:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "621856ec-97e8-4e04-93c5-71e1a0f28be9",
        "parentId" : "d2e7ac88-452b-4e1c-bc64-08883a8e118e",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Added precondition",
        "createdAt" : "2017-08-25T18:49:08Z",
        "updatedAt" : "2017-08-29T10:42:28Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "0a605de5-ea2c-4805-951b-9edb6613cca7",
        "parentId" : "d2e7ac88-452b-4e1c-bc64-08883a8e118e",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Removed precondition again! With the refactored kubelet wiring we are getting machine info passed into the constructor.",
        "createdAt" : "2017-08-29T02:46:32Z",
        "updatedAt" : "2017-08-29T10:42:28Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "726bd8e27b12b14e53b6d2d89a9576e42e05b21d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@// Manager interface provides methods for Kubelet to manage pod cpus.\ntype Manager interface {\n\t// Start is called during Kubelet initialization.\n\tStart(activePods ActivePodsFunc, podStatusProvider status.PodStatusProvider, containerRuntime runtimeService)\n"
  },
  {
    "id" : "ff922eb4-55f7-4334-a53e-8e5975934b75",
    "prId" : 51140,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51140#pullrequestreview-59120065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293a5d4d-9522-46bb-941e-6dfdbb0c35d9",
        "parentId" : null,
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "@derekwaynecarr -- as discussed in the next PR for this feature we considered changing the name of these functions from `RegisterContainer` and `UnregisterContainer` to indicate when in the container lifecycle they should be called.\r\n\r\nOur current plan is to have an interface for internal container lifecycle callbacks within the container manager. Those functions will have names like `PreStartContainer`, `PreStopContainer`, `PostStopContainer` etc. However, we want `UnregisterContainer` to get called during both `removeContainer` and `killContainer`, so neither `PreStopContainer` nor `PostStopContainer` makes sense...\r\n\r\nWhat we would like to do is call the lifecycle callback `PreStopContainer` from `killContainer` and call `PostStopContainer` from `removeContainer`. In the hooks impl we get from the container manager, both `PreStopContainer` and `PostStopContainer` will call `cpuManager.UnregisterContainer`.\r\n\r\nAs a compromise, I have renamed `RegisterContainer` => `AddContainer` and `UnregisterContainer` => `RemoveContainer`, and clarified the banner comments. Hope this works for you.",
        "createdAt" : "2017-08-29T02:55:10Z",
        "updatedAt" : "2017-08-29T10:42:28Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "726bd8e27b12b14e53b6d2d89a9576e42e05b21d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@\t// so that initial CPU affinity settings can be written through to the\n\t// container runtime before the first process begins to execute.\n\tAddContainer(p *v1.Pod, c *v1.Container, containerID string) error\n\n\t// RemoveContainer is called after Kubelet decides to kill or delete a"
  }
]