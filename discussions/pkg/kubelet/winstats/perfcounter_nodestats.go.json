[
  {
    "id" : "a061f791-727a-461a-8bfd-97b26cfea570",
    "prId" : 97378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97378#pullrequestreview-589067300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "291ecf9b-6462-4448-b95c-cdc5be7aecc8",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getactiveprocessorcount",
        "createdAt" : "2021-02-11T23:12:14Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8c4c265600e20d2e95b024bf7a30896152d4fa",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +54,58 @@\tmodkernel32                 = windows.NewLazySystemDLL(\"kernel32.dll\")\n\tprocGlobalMemoryStatusEx    = modkernel32.NewProc(\"GlobalMemoryStatusEx\")\n\tprocGetActiveProcessorCount = modkernel32.NewProc(\"GetActiveProcessorCount\")\n)\n"
  },
  {
    "id" : "8b82984c-3357-41c3-abe8-d7c40f5ab9dd",
    "prId" : 97378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97378#pullrequestreview-610085337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "parentId" : null,
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "nit: it would be nice to have comment here on why it fails for some scenarios for future us",
        "createdAt" : "2021-03-09T22:31:11Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "900230eb-fb28-4600-b5ea-0124eb30bae5",
        "parentId" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "authorId" : "525b0532-028a-4673-8a1f-417db8f3d328",
        "body" : "To be honest, I donâ€™t know. I just find  a way to fix this bug in https://github.com/moby/moby/issues/38935#issuecomment-744638345  and copy code to k8s .\r\n\r\nI need some help from people who know windows.  Thank you for reviewing this PR.",
        "createdAt" : "2021-03-10T02:22:20Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "525b0532-028a-4673-8a1f-417db8f3d328",
        "tags" : [
        ]
      },
      {
        "id" : "67d1b262-725b-4549-add8-63c80ec41c42",
        "parentId" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "Thanks!\r\n\r\n> This server has four cpus, each with 18 cores and two logical threads in the core. So a total of 72 cores, 144 threads. the result obtained by kubelet is 36 logical CPUs. When I adopted this PR code, I got the number in the picture above, which is 144.\r\n\r\n> As was mentioned above, many of the Windows processor affinity functions will only return the information for a single Processor Group. Since a single group can only hold 64 logical processors, this means when there are more they will be divided into multiple groups (as seen above, where on a 72 LP system there are 2 groups of 36 LPs).\r\n\r\nThis sounds like what I was wondering about.  I don't know that we can cover such a use case in our tests.   ",
        "createdAt" : "2021-03-10T19:32:05Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "6b9e37a0-14fd-4ad1-b2d6-004685b81b0c",
        "parentId" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "could you add a comment about the issue with logical processors and give attribution in a comment to hcsshim?",
        "createdAt" : "2021-03-10T19:33:55Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "6fe03a50-2cba-4954-8693-6187aef04582",
        "parentId" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "authorId" : "525b0532-028a-4673-8a1f-417db8f3d328",
        "body" : "Thanks for your suggestion. I added some comment for this issue. I don't know if it can be written like this. Please review it again.",
        "createdAt" : "2021-03-11T02:50:29Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "525b0532-028a-4673-8a1f-417db8f3d328",
        "tags" : [
        ]
      },
      {
        "id" : "d4575b44-0e41-4f1a-8e6d-d86305ecfd34",
        "parentId" : "eb23d237-e0b4-4344-9812-c147db243cb5",
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "Thanks, that helps to understand the issue and fix.  two really minor wording changes and we are good!",
        "createdAt" : "2021-03-11T18:15:56Z",
        "updatedAt" : "2021-03-12T02:22:23Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae8c4c265600e20d2e95b024bf7a30896152d4fa",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +161,165 @@// solution in hcsshim: https://github.com/microsoft/hcsshim/blob/master/internal/processorinfo/processor_count.go\nfunc processorCount() int {\n\tif amount := getActiveProcessorCount(allProcessorGroups); amount != 0 {\n\t\treturn int(amount)\n\t}"
  },
  {
    "id" : "766bf0c9-f0a1-42b5-a834-1a7e20798fde",
    "prId" : 80176,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80176#pullrequestreview-262533717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa6daaba-1a4b-4715-962a-f3355b2eef6e",
        "parentId" : null,
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Can you add a comment for why we aren't just adding this to p.collectMetricsData. Seems like it's because we want it to have a different update frequency? \r\n\r\nOn that note, could having a different frequency have any side effects/result in any inconsistency in a given metric?",
        "createdAt" : "2019-07-15T22:48:49Z",
        "updatedAt" : "2019-07-22T17:56:45Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "4638b6bc-76d4-4ea5-b62c-97e66a406cad",
        "parentId" : "fa6daaba-1a4b-4715-962a-f3355b2eef6e",
        "authorId" : "f56f41d2-ac28-43a4-9ab4-461bf2d2c7ec",
        "body" : "Yeah that's right, the update frequency is different in here.\r\n\r\nAnd for the cpuUsageNanoCores it could have at most 14 seconds lag of the real value, as the goroutine runs every 15 seconds and if we query at the 29th second it will still return the value at the 15th second.",
        "createdAt" : "2019-07-16T16:19:43Z",
        "updatedAt" : "2019-07-22T17:56:45Z",
        "lastEditedBy" : "f56f41d2-ac28-43a4-9ab4-461bf2d2c7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "8851a42655a490b2afe5ec388ee596683d30a633",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +118,122 @@\n\t// Cache the CPU usage every defaultCachePeriod\n\tgo wait.Forever(func() {\n\t\tnewValue := p.nodeMetrics.cpuUsageCoreNanoSeconds\n\t\tp.mu.Lock()"
  },
  {
    "id" : "cd0a4b0d-f08f-4f2b-ba39-95d797bf8c6c",
    "prId" : 74788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74788#pullrequestreview-211566543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b2defc-351e-4bd9-ae42-4585eccf476e",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Is the `perfCounterUpdatePeriod` (1s) still reasonable after adding more metrics?",
        "createdAt" : "2019-03-06T20:03:03Z",
        "updatedAt" : "2019-03-07T01:56:18Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "da13547c-bbad-45b6-bd31-ec4f3b23bbde",
        "parentId" : "46b2defc-351e-4bd9-ae42-4585eccf476e",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "`1s` should still work. And for network stats, there are some metrics per second. To ensure the cumulative data correctly, 1s should be used.",
        "createdAt" : "2019-03-07T01:51:43Z",
        "updatedAt" : "2019-03-07T01:56:18Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d69003757117149b086a95a76d43405894517824",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +108,112 @@\n\tgo wait.Forever(func() {\n\t\tp.collectMetricsData(cpuCounter, memWorkingSetCounter, memCommittedBytesCounter, networkAdapterCounter)\n\t}, perfCounterUpdatePeriod)\n"
  },
  {
    "id" : "95117072-8146-4b2a-985a-9f74b54a4ec2",
    "prId" : 50396,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50396#pullrequestreview-75639175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0492b936-1a14-49c8-ada3-09603d096f66",
        "parentId" : null,
        "authorId" : "deaba34b-a612-4141-928b-858986484561",
        "body" : "You should be able to use GetVersion() https://github.com/golang/go/blob/master/src/syscall/zsyscall_windows.go",
        "createdAt" : "2017-11-03T22:56:22Z",
        "updatedAt" : "2017-11-03T22:56:22Z",
        "lastEditedBy" : "deaba34b-a612-4141-928b-858986484561",
        "tags" : [
        ]
      },
      {
        "id" : "5a30e1c9-609b-46ee-9ef0-713758b5c37a",
        "parentId" : "0492b936-1a14-49c8-ada3-09603d096f66",
        "authorId" : "0e5e4fe2-e8e1-46de-a4a0-78e4e94047d6",
        "body" : "@taylorb-microsoft I'll try it. Thanks.",
        "createdAt" : "2017-11-10T01:06:55Z",
        "updatedAt" : "2017-11-10T01:06:55Z",
        "lastEditedBy" : "0e5e4fe2-e8e1-46de-a4a0-78e4e94047d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a854ddb3580d95b11a0c5cc4139f786476e25e3d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@\t}\n\n\tversion, err := exec.Command(\"cmd\", \"/C\", \"ver\").Output()\n\tif err != nil {\n\t\treturn err"
  }
]