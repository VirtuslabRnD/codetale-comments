[
  {
    "id" : "6d98df5a-f21c-464b-83ec-b76403a53b68",
    "prId" : 84401,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84401#pullrequestreview-307532003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80aa5125-a1f6-416e-aa28-2c35d03358c3",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Can you share more about why this nil check is necessary?",
        "createdAt" : "2019-10-26T14:17:10Z",
        "updatedAt" : "2019-10-27T15:03:17Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "c239e204-afa8-4b69-b0c0-cf870692a69f",
        "parentId" : "80aa5125-a1f6-416e-aa28-2c35d03358c3",
        "authorId" : "a097dedf-39b9-4150-82ce-b4beb3b8d606",
        "body" : "We can call `toPullableImageID` to generate default imageID when `InspectImageByID` return `nil, err`",
        "createdAt" : "2019-10-26T16:00:03Z",
        "updatedAt" : "2019-10-27T15:03:17Z",
        "lastEditedBy" : "a097dedf-39b9-4150-82ce-b4beb3b8d606",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdbf5ef0b8b72101cc759703b96a3b0b40dcdf45",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +70,74 @@\t// the first digest instead.\n\timageID := DockerImageIDPrefix + id\n\tif image != nil && len(image.RepoDigests) > 0 {\n\t\timageID = DockerPullableImageIDPrefix + image.RepoDigests[0]\n\t}"
  },
  {
    "id" : "4b48ef57-df8a-4e14-ab94-20dd7cc7fedb",
    "prId" : 35930,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35930#pullrequestreview-6533952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "can this lead to inconsistencies like create 2 of the same container for a given pod? if a container doesn't show up in list, it's deemed non-existent right? \n",
        "createdAt" : "2016-10-31T21:22:30Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "6bfcba8a-c935-4926-96fb-aaedd44a47cb",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I haven't seen a running docker container that doesn't have a name, so the likelihood should be low?\nEven if we do report the container, since it's missing important metadata (name, and who knows what else) associated with the container, kubelet might not be able to recognize it.\n",
        "createdAt" : "2016-10-31T21:32:00Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "a1216c6e-eb3a-4cfe-b2d1-a12c977a7bc2",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "From the comment in the docker issue, I think he implies that only dead container may have no name. :)\n",
        "createdAt" : "2016-10-31T21:36:21Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "e134b748-bc4e-4411-81db-d1400960e73f",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "so never restart a reastart:never pod then? I'm not sure what \"Dead\" means in this context even, something was docker rm'd while it had live mounts? \n",
        "createdAt" : "2016-10-31T21:38:01Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "0c6b25e6-c7ce-41b0-bad4-395a1e7f2aae",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "\"Dead\": `it's usually the result of a container failing to be stopped/removed`.\n",
        "createdAt" : "2016-10-31T21:49:05Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "4a859832-e00b-49e2-a600-2a81f2d7253f",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "> so never restart a reastart:never pod then?\n\nIt's possible that kubelet will restart a restart:never pod in this case, since it cannot recognize the container anymore. \nThe last time I encountered this bug (https://github.com/kubernetes/kubernetes/issues/21085#issuecomment-186439716), it was with docker v1.9. Haven't seen it happen on a newer docker version.\nThis stackoverflow [question/answer](http://stackoverflow.com/questions/30550472/docker-container-with-status-dead-after-consul-healthcheck-runs) has more information. \n",
        "createdAt" : "2016-10-31T21:49:09Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "5d37db1f-f874-4969-9331-a299881d0249",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "SG, might be worth plumbing through as an event or log, so we know it hits when we debug. \n",
        "createdAt" : "2016-10-31T21:51:39Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "6be47cb5-1f18-4185-81d3-b5f8ce192922",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think logs might be better in this case. We can log the content of `dockertypes.Container`. \n",
        "createdAt" : "2016-10-31T21:53:49Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "2faede42-1e16-402c-b78d-98f98db0f3a0",
        "parentId" : "9c536d8b-4085-4ee2-b3be-cdeed567bcf4",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "This PR includes `types.Container` in the error, and the error is logged in the caller.\n\nHowever, I found the log in the caller is `V(5)`. I'll change it to `V(4)`.\n",
        "createdAt" : "2016-10-31T21:58:28Z",
        "updatedAt" : "2016-10-31T22:05:37Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecd10442000571e23855e81c1daf7ad61717f560",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +146,150 @@\tstate := toRuntimeAPISandboxState(c.Status)\n\tif len(c.Names) == 0 {\n\t\treturn nil, fmt.Errorf(\"unexpected empty sandbox name: %+v\", c)\n\t}\n\tmetadata, err := parseSandboxName(c.Names[0])"
  },
  {
    "id" : "a1230786-26db-451f-8e73-fe84824f188e",
    "prId" : 29700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3a6fa14-f09f-4d89-bfb1-51b2fd5d0ed1",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "CreatedAt is required for garbage collection.\n",
        "createdAt" : "2016-07-29T23:34:53Z",
        "updatedAt" : "2016-08-02T22:24:57Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5960d87d2142055cd29ebbce0243652c4adc5742",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\tName:      &c.Names[0],\n\t\tState:     &state,\n\t\tCreatedAt: &c.Created, // TODO: Why do we need CreateAt timestamp for sandboxes?\n\t\tLabels:    c.Labels,   // TODO: Need to disthinguish annotaions and labels.\n\t}"
  }
]