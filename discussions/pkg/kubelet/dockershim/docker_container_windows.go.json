[
  {
    "id" : "07f15073-9247-490c-97eb-b4983c76ac98",
    "prId" : 73726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73726#pullrequestreview-200373110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "377ca562-1fc6-4c23-976f-179e77934857",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "I think a wrapper around `performPlatformSpecificContainerCreationCleanup` that goes and cleans up all credspec entries (created specifically by kubelet) needs to be invoked during kubelet initialization on the host - somewhere around: https://github.com/kubernetes/kubernetes/blob/f0beaf46db82e713392a5c0f880e27a0e14c0690/pkg/kubelet/kubelet.go#L619 This will handle cases where the kubelet may have crashed around container creation right after credspecs got persisted.",
        "createdAt" : "2019-02-05T21:35:51Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "41a93ce3-f833-4dbb-b1f3-81fc572e16b7",
        "parentId" : "377ca562-1fc6-4c23-976f-179e77934857",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "👍 ",
        "createdAt" : "2019-02-06T00:41:15Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d392ffcef42ccf4f975f97e6a5e65a9ea99fa11",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@}\n\n// performPlatformSpecificContainerCreationCleanup is responsible for doing any platform-specific cleanup\n// after a container creation. Any errors it returns are simply logged, but do not fail the container\n// creation."
  },
  {
    "id" : "af25f3ff-407f-4245-bd69-a2dc48ecc649",
    "prId" : 73726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73726#pullrequestreview-204522399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fff3c13a-ec74-4e2b-b557-5f0738637ac4",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "What type of errors could occur when setting the value? ",
        "createdAt" : "2019-02-15T18:55:09Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "9fdef7fb-d95b-4898-8016-469457c21f15",
        "parentId" : "fff3c13a-ec74-4e2b-b557-5f0738637ac4",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "Looking at `registry`'s code, not being able to encode `credSpec` to an UTF16 string, or anything that might happen in `runtime/syscall_windows.go.Syscall6`",
        "createdAt" : "2019-02-16T15:26:49Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d392ffcef42ccf4f975f97e6a5e65a9ea99fa11",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@\t}\n\tdefer key.Close()\n\tif err = key.SetStringValue(valueName, credSpec); err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to write into registry value %q/%q: %v\", credentialSpecRegistryLocation, valueName, err)\n\t}"
  },
  {
    "id" : "caf5a6ec-4786-4bd7-8b96-987f2a63b440",
    "prId" : 73726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73726#pullrequestreview-204522399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17f7f5d2-b7fb-45da-929b-44391aad1bc6",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Would this ever change and does this need to be kept in sync with oci_windows.go?",
        "createdAt" : "2019-02-15T19:47:43Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "8383337f-9cf3-478b-9704-e9f92500777c",
        "parentId" : "17f7f5d2-b7fb-45da-929b-44391aad1bc6",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "That would be a breaking change from Docker's part, something we try really hard to avoid; and on top of that I'd be hard pressed imagining why we'd ever want or need to do that. That's precisely why I chose to use registry keys instead of files, since their location seems more stable.\r\n\r\nBesides, I plan to make a PR on moby in the coming days to make it possible to pass base64 cred specs directly to Docker, and will make another PR here afterwards to use it when the daemon's API version is recent enough; which will avoid this whole create-cleanup dance, and remove worry about this reg key ever changing in the future.",
        "createdAt" : "2019-02-16T15:16:55Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d392ffcef42ccf4f975f97e6a5e65a9ea99fa11",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@const (\n\t// same as https://github.com/moby/moby/blob/93d994e29c9cc8d81f1b0477e28d705fa7e2cd72/daemon/oci_windows.go#L23\n\tcredentialSpecRegistryLocation = `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`\n\t// the prefix for the registry values we write GMSA cred specs to\n\tgMSARegistryValueNamePrefix = \"k8s-cred-spec-\""
  },
  {
    "id" : "52fd3fc6-aab5-4d09-a3b1-70f2b761cb58",
    "prId" : 73726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73726#pullrequestreview-207065944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I wasn't expecting registry modification as part of this... the original design indicated a file-based mechanisms would be used:\r\n\r\n> Docker (to be supported in Alpha): will receive the path to a file created on the node's file system under C:\\ProgramData\\docker\\CredentialSpecs\\ and populated by dockershim with the credential spec JSON. Docker will read the contents of the credential spec file and pass it to Windows Host Compute Service (HCS) when creating and starting a container in Windows.\r\n\r\nhttps://github.com/kubernetes/enhancements/blob/master/keps/sig-windows/20181221-windows-group-managed-service-accounts-for-container-identity.md#changes-in-dockershim:\r\n\r\n> Changes in Dockershim\r\n> During Alpha, dockerService.CreateContainer function will be enhanced (under a feature flag: WindowsGMSA) to create a temporary file with a unique name on the host file system under path C:\\ProgramData\\docker\\CredentialSpecs\\. This file will be populated with the contents of container.alpha.windows.kubernetes.io/gmsa-credential-spec annotation in CreateContainerRequest.ContainerConfig. Beta onwards, dockerService.CreateContainer (under a feature flag: WindowsGMSA) will use the contents of WindowsContainerSecurityContext.CredentialSpec to populate the file.\r\n\r\nDid that approach not work?",
        "createdAt" : "2019-02-20T22:11:51Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "19d5a619-b92c-411f-937f-a38f2e1215be",
        "parentId" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "Sadly there is no robust way to know where Docker expects its cred spec files. As far as I could tell, Docker does not provide any reliable way to know where it's been installed, and that's where it expects cred spec files; for that reason, registry keys seemed like more viable option.\r\n\r\nThat being said, as I mentioned in https://github.com/kubernetes/kubernetes/pull/73726/files#r257464340, Docker should soon support passing base64-encoded cred spec directly, thus removing the need for all this. This is just needed in the meantime, and until k8s' stops supporting the last version of Docker that won't have that feature.",
        "createdAt" : "2019-02-20T22:30:28Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      },
      {
        "id" : "05ce2c00-047a-4866-a12b-86ea586234e0",
        "parentId" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "authorId" : "e2fdfb1c-53ec-47f6-832a-220b9ccbe451",
        "body" : "@wk8 i am ok with this change since we will update it in the future (passing cred spec directly). However, docker on windows does tell you where it is installed in this registry key.\r\n\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Docker Inc.\\Docker\\1.0\r\nLoop for the AppPath/BinPath Strings.",
        "createdAt" : "2019-02-21T19:45:46Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "e2fdfb1c-53ec-47f6-832a-220b9ccbe451",
        "tags" : [
        ]
      },
      {
        "id" : "4b1381d2-a56f-4f25-b807-e47192ba1991",
        "parentId" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "@michmike : interesting, I don't have these reg keys on my Win boxes - `HKEY_LOCAL_MACHINE\\SOFTWARE\\Docker Inc.` just doesn't exist, and grepping for `docker` (case -insensitive) throughout the whole thing yielded nothing of interest.\r\n\r\nInstalled docker with\r\n```powershell\r\nInstall-Module -Name DockerMsftProvider -Repository PSGallery -Force\r\nInstall-Package -Name Docker -ProviderName DockerMsftProvider\r\n```\r\n(which is the way MS recommends in their doc - https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers#install-docker-requires-reboot; so it's safe to assume I won't be the only one in that case)",
        "createdAt" : "2019-02-22T20:54:15Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      },
      {
        "id" : "ce98a7c4-18d9-4a49-992a-8041f5975304",
        "parentId" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "And for the record, the moby PR for this is out: https://github.com/moby/moby/pull/38777 ; will add that as a comment in this one.",
        "createdAt" : "2019-02-22T20:54:45Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      },
      {
        "id" : "640cb11e-cb2c-4e93-bf8d-1b6ac8549ae4",
        "parentId" : "836669ba-a7f0-47aa-80b9-0e7f9fc482dc",
        "authorId" : "e2fdfb1c-53ec-47f6-832a-220b9ccbe451",
        "body" : "> @michmike : interesting, I don't have these reg keys on my Win boxes - `HKEY_LOCAL_MACHINE\\SOFTWARE\\Docker Inc.` just doesn't exist, and grepping for `docker` (case -insensitive) throughout the whole thing yielded nothing of interest.\r\n> \r\n> Installed docker with\r\n> \r\n> ```powershell\r\n> Install-Module -Name DockerMsftProvider -Repository PSGallery -Force\r\n> Install-Package -Name Docker -ProviderName DockerMsftProvider\r\n> ```\r\n> \r\n> (which is the way MS recommends in their doc - https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers#install-docker-requires-reboot; so it's safe to assume I won't be the only one in that case)\r\n\r\nthat's interesting that not all installations of docker yield the same results. thanks for checking this @wk8",
        "createdAt" : "2019-02-22T23:11:48Z",
        "updatedAt" : "2019-02-26T03:02:16Z",
        "lastEditedBy" : "e2fdfb1c-53ec-47f6-832a-220b9ccbe451",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d392ffcef42ccf4f975f97e6a5e65a9ea99fa11",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +118,122 @@\t}\n\n\t// write to the registry\n\tkey, _, err := registryCreateKeyFunc(registry.LOCAL_MACHINE, credentialSpecRegistryLocation, registry.SET_VALUE)\n\tif err != nil {"
  }
]