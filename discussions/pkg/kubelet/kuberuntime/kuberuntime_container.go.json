[
  {
    "id" : "845c926b-b019-4e56-b56f-dddcf0d20f83",
    "prId" : 101480,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101480#pullrequestreview-645747354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ddd539b-34de-4c2b-821a-0de52ce3446f",
        "parentId" : null,
        "authorId" : "a08a031e-c5d0-4521-a805-73ac0bc08c9a",
        "body" : "Why have we removed the word \"override\" here?",
        "createdAt" : "2021-04-27T10:47:51Z",
        "updatedAt" : "2021-04-28T07:27:27Z",
        "lastEditedBy" : "a08a031e-c5d0-4521-a805-73ac0bc08c9a",
        "tags" : [
        ]
      },
      {
        "id" : "214c162a-59b9-4a58-9354-c421005cb79b",
        "parentId" : "8ddd539b-34de-4c2b-821a-0de52ce3446f",
        "authorId" : "ac20bfc0-048b-4f7c-8f40-c004ff5299e1",
        "body" : " gracePeriodOverride logic is in  https://github.com/kubernetes/kubernetes/blob/9809038728c56e646e05430904fb7e01e89ce473/pkg/kubelet/kuberuntime/kuberuntime_container.go#L657, i think this line is not override.",
        "createdAt" : "2021-04-27T11:35:08Z",
        "updatedAt" : "2021-04-28T07:27:27Z",
        "lastEditedBy" : "ac20bfc0-048b-4f7c-8f40-c004ff5299e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bebca30309c0bed34e412cf5c57a290adfaaa74f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +659,663 @@\t}\n\n\tklog.V(2).InfoS(\"Killing container with a grace period\", \"pod\", klog.KObj(pod), \"podUID\", pod.UID,\n\t\t\"containerName\", containerName, \"containerID\", containerID.String(), \"gracePeriod\", gracePeriod)\n"
  },
  {
    "id" : "ee11059b-b3e1-4b1b-9224-a302851c1011",
    "prId" : 100608,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100608#pullrequestreview-631222408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39c32401-d5d1-4dc8-8faa-c7daae9cc45b",
        "parentId" : null,
        "authorId" : "3aa105bc-7ffc-4cd6-8720-4f7e07137e73",
        "body" : "With ``ErrPostStartHook``  symbol may help us filter 'ErrPostStartHook'  type error  quickly.",
        "createdAt" : "2021-03-29T11:37:40Z",
        "updatedAt" : "2021-03-31T07:40:33Z",
        "lastEditedBy" : "3aa105bc-7ffc-4cd6-8720-4f7e07137e73",
        "tags" : [
        ]
      },
      {
        "id" : "ffda3e3f-009a-46a4-b3a8-f0eb029775e2",
        "parentId" : "39c32401-d5d1-4dc8-8faa-c7daae9cc45b",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "So we should keep the log as before.\r\n\r\nIt would simply revert #54739 which fixed #54671.\r\n",
        "createdAt" : "2021-03-31T07:38:04Z",
        "updatedAt" : "2021-03-31T07:40:33Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      },
      {
        "id" : "b05175cd-6211-4d71-bc29-c069d3b93fcf",
        "parentId" : "39c32401-d5d1-4dc8-8faa-c7daae9cc45b",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "Updated @dabaooline",
        "createdAt" : "2021-04-08T10:18:23Z",
        "updatedAt" : "2021-04-08T10:18:23Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      }
    ],
    "commit" : "75c19da8431f4fa44e6b80fd6eb79b4fefa6fb00",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +231,235 @@\t\t\tm.recordContainerEvent(pod, container, kubeContainerID.ID, v1.EventTypeWarning, events.FailedPostStartHook, msg)\n\t\t\tif err := m.killContainer(pod, kubeContainerID, container.Name, \"FailedPostStartHook\", reasonFailedPostStartHook, nil); err != nil {\n\t\t\t\tklog.ErrorS(err, \"Failed to kill container\", \"pod\", klog.KObj(pod),\n\t\t\t\t\t\"podUID\", pod.UID, \"containerName\", container.Name, \"containerID\", kubeContainerID.String())\n\t\t\t}"
  },
  {
    "id" : "c4986ec7-f0f6-4925-8191-b93e69dab425",
    "prId" : 100608,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100608#pullrequestreview-660870438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae01eca2-b0e7-44d8-95ff-55b8a8e20f32",
        "parentId" : null,
        "authorId" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "body" : "+1 to remove if it is getting in Pod Status from here. I think getting error recorded in event log is sufficient.",
        "createdAt" : "2021-05-17T11:46:39Z",
        "updatedAt" : "2021-05-17T11:47:05Z",
        "lastEditedBy" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "75c19da8431f4fa44e6b80fd6eb79b4fefa6fb00",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\t\t\t\t\"podUID\", pod.UID, \"containerName\", container.Name, \"containerID\", kubeContainerID.String())\n\t\t\t}\n\t\t\treturn msg, ErrPostStartHook\n\t\t}\n\t}"
  },
  {
    "id" : "2b0b5d60-fa68-4784-8af0-cd1e22efe7a2",
    "prId" : 100608,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100608#pullrequestreview-664022580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3ef3812-49c3-4ecb-bec2-57b183057821",
        "parentId" : null,
        "authorId" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "body" : "We can add a log here\r\n```\r\nklog.ErrorS(handlerErr, \"Failed to run PostStartHook\", \"pod\", klog.KObj(pod), \"podUID\", pod.UID, \"containerName\", container.Name, \"containerID\", kubeContainerID.String())\r\n```",
        "createdAt" : "2021-05-20T06:46:53Z",
        "updatedAt" : "2021-05-20T06:51:19Z",
        "lastEditedBy" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "tags" : [
        ]
      },
      {
        "id" : "5abd7fd2-1052-423d-8d7d-12eb118153ae",
        "parentId" : "d3ef3812-49c3-4ecb-bec2-57b183057821",
        "authorId" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "body" : "Updated",
        "createdAt" : "2021-05-20T07:18:22Z",
        "updatedAt" : "2021-05-20T07:18:22Z",
        "lastEditedBy" : "5e225159-999d-430a-8b58-d5220dc1429d",
        "tags" : [
        ]
      }
    ],
    "commit" : "75c19da8431f4fa44e6b80fd6eb79b4fefa6fb00",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +226,230 @@\t\t}\n\t\tmsg, handlerErr := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)\n\t\tif handlerErr != nil {\n\t\t\tklog.ErrorS(handlerErr, \"Failed to execute PostStartHook\", \"pod\", klog.KObj(pod),\n\t\t\t\t\"podUID\", pod.UID, \"containerName\", container.Name, \"containerID\", kubeContainerID.String())"
  },
  {
    "id" : "7f83bea7-55f4-4174-90d9-d2f6a967bda6",
    "prId" : 99748,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99748#pullrequestreview-612617272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "713a71ad-6ffb-4101-99bf-18eda61ca677",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Is it possible for the filename to have non-`\\d` characters? Why isn't the match expression for the suffix consistent with the same matching as the start of the string?",
        "createdAt" : "2021-03-09T20:29:49Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "da4a185f-07ef-4233-b2f1-04e6bd50e398",
        "parentId" : "713a71ad-6ffb-4101-99bf-18eda61ca677",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "Impossibe for the log file to have non \\d characters: https://github.com/rphillips/kubernetes/blob/8c0814e915661d18a7dd179c332869c21940e598/pkg/kubelet/kuberuntime/helpers.go#L168-L170\r\n\r\n",
        "createdAt" : "2021-03-15T20:26:01Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      },
      {
        "id" : "7c014eca-e37a-4492-92d2-b0d90be9eba9",
        "parentId" : "713a71ad-6ffb-4101-99bf-18eda61ca677",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "The suffix can optionally contain a '.rotated' or '.rotated.gz'... so those rotated files should count in the calculation.",
        "createdAt" : "2021-03-15T20:28:35Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      },
      {
        "id" : "d96a794d-602f-425f-8501-99b905b965c7",
        "parentId" : "713a71ad-6ffb-4101-99bf-18eda61ca677",
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Ah okay we are just matching the num + `.log` + possibly any trailing characters `.whatever`. This is good, can we add one more test case for multiple logs present with `.whatever`?",
        "createdAt" : "2021-03-15T20:30:56Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      }
    ],
    "commit" : "d169c81496b386d588fd5c25c4af34aed242d1a8",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\treturn 0, err\n\t}\n\trestartCountLogFileRegex := regexp.MustCompile(`(\\d+).log(\\..*)?`)\n\tfor _, file := range files {\n\t\tif file.IsDir() {"
  },
  {
    "id" : "10010c1b-fb9b-44f3-aef6-d694542606a4",
    "prId" : 99748,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99748#pullrequestreview-612577206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28ffdcc9-7760-40ae-8906-fef6950790cc",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Is there any other reason a log could persist that isn't a restart?",
        "createdAt" : "2021-03-09T20:40:00Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "9d24d883-5302-4f4b-9e1e-93e53d0db7bb",
        "parentId" : "28ffdcc9-7760-40ae-8906-fef6950790cc",
        "authorId" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "body" : "I don't believe so. The normal code path on line 188 will be called since the container statuses will exist.",
        "createdAt" : "2021-03-15T19:39:04Z",
        "updatedAt" : "2021-03-15T20:33:42Z",
        "lastEditedBy" : "3eccedfc-5c53-4555-94cb-69f2b56e485c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d169c81496b386d588fd5c25c4af34aed242d1a8",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +200,204 @@\t\t// {restartCount}.log - and adding 1 to it.\n\t\tlogDir := BuildContainerLogsDirectory(pod.Namespace, pod.Name, pod.UID, container.Name)\n\t\trestartCount, err = calcRestartCountByLogDir(logDir)\n\t\tif err != nil {\n\t\t\tklog.InfoS(\"Log directory exists but could not calculate restartCount\", \"logDir\", logDir, \"err\", err)"
  },
  {
    "id" : "ee2376c8-3143-4312-b4c1-f69678e67622",
    "prId" : 99375,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99375#pullrequestreview-608242814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d162ec90-86f8-48bf-a7df-78a64fb20555",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can we add unit testing for this scenario in a follow-on, didnt see it in TestKillContainer",
        "createdAt" : "2021-03-10T00:40:53Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "00e9f877-366a-47fa-8b2b-4f3b396cc364",
        "parentId" : "d162ec90-86f8-48bf-a7df-78a64fb20555",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I know the KEP said the kubelet respected the gate, but i could see an argument now that kubelet just always respects the field and we depend on the API server to gate persistence of the field.  we did similar for DownwardAPI changes",
        "createdAt" : "2021-03-10T00:53:06Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "2134b393-c4ec-41a5-ba56-1e7680479ca1",
        "parentId" : "d162ec90-86f8-48bf-a7df-78a64fb20555",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think we should evaluate handling this change similar to DownwardAPI support for hugepages.\r\nhttps://github.com/kubernetes/enhancements/blob/master/keps/sig-node/2053-downward-api-hugepages/kep.yaml#L41\r\n\r\nkubelet did not gate behavior on the feature gate, just the persistence of the field on the api server was controlled by the gate.",
        "createdAt" : "2021-03-10T00:55:46Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "33f26098-fc6d-4680-8c08-bd43f21ff483",
        "parentId" : "d162ec90-86f8-48bf-a7df-78a64fb20555",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think we could do the following:\r\n\r\nwhen this feature moves to beta, its off by default, and the feature gate is no longer used in the kubelet.\r\n2 releases later the feature is on by default.",
        "createdAt" : "2021-03-10T00:58:39Z",
        "updatedAt" : "2021-03-12T00:41:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "7df1259d091322f2817b2db243f76470f61a3a7e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +621,625 @@\t\tgracePeriod = *pod.Spec.TerminationGracePeriodSeconds\n\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.ProbeTerminationGracePeriod) {\n\t\t\tswitch reason {\n\t\t\tcase reasonStartupProbe:"
  },
  {
    "id" : "12f56124-2b29-4ac0-9ecc-31c8e63eafdf",
    "prId" : 96973,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96973#pullrequestreview-571050444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "687ccdce-b751-4ff1-b400-ae33872c718c",
        "parentId" : null,
        "authorId" : "733d9450-21a4-4173-ac85-62171483bc18",
        "body" : "Minor:  there's mostly a convention of lowercase on the word `container` in error messages. See line 222, so maybe change to \"kill container failed\" for this error message for consistency.\r\n\r\n",
        "createdAt" : "2021-01-08T01:48:50Z",
        "updatedAt" : "2021-03-05T01:10:55Z",
        "lastEditedBy" : "733d9450-21a4-4173-ac85-62171483bc18",
        "tags" : [
        ]
      },
      {
        "id" : "47fc6099-dedf-4828-9c7d-fe39e90b96bd",
        "parentId" : "687ccdce-b751-4ff1-b400-ae33872c718c",
        "authorId" : "0aa379a2-dc46-4e1f-81d1-8ea59923ffcd",
        "body" : "sorry for reply so late, and thanks for the suggestion, I have change the word to lowercase.",
        "createdAt" : "2021-01-19T09:26:46Z",
        "updatedAt" : "2021-03-05T01:10:55Z",
        "lastEditedBy" : "0aa379a2-dc46-4e1f-81d1-8ea59923ffcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "68457812f32f50811672a7c8f6f99307e5abeccf",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +676,680 @@\t\t\t\tkillContainerResult.Fail(kubecontainer.ErrKillContainer, err.Error())\n\t\t\t\tklog.ErrorS(err, \"Kill container failed\", \"pod\", klog.KObj(pod), \"podUID\", pod.UID,\n\t\t\t\t\t\"containerName\", container.Name, \"containerID\", container.ID)\n\t\t\t}\n\t\t\tcontainerResults <- killContainerResult"
  },
  {
    "id" : "04ae9d3f-7188-4329-ab21-de75ca33431b",
    "prId" : 96572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96572#pullrequestreview-544052910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i need to work backwards if this has an impact on pod restarts.\r\n\r\ncan we add a node e2e that reproduces?",
        "createdAt" : "2020-11-13T19:28:49Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "4f2d9cc8-0df6-4d46-8f61-145f47a21cb5",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "we need to not regress the following:\r\n\r\nhttps://kubernetes.io/docs/concepts/workloads/pods/init-containers/#pod-restart-reasons\r\n\r\n",
        "createdAt" : "2020-11-13T19:42:51Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "f446decd-5bdd-423e-b0f9-efa7d50af034",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We have always allowed init containers to be rerun.  A key point is we should not rerun them while main status containers are running.  We *must* re run them on reboot.",
        "createdAt" : "2020-11-13T20:04:52Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1057c3dd-f90f-4834-8747-5c8b34544137",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "Could add this to only consider main containers if they are running\r\n```diff\r\ndiff --git a/pkg/kubelet/kuberuntime/kuberuntime_container.go b/pkg/kubelet/kuberuntime/kuberuntime_container.go\r\nindex cb1ad6b306c..48bd0a9ddb2 100644\r\n--- a/pkg/kubelet/kuberuntime/kuberuntime_container.go\r\n+++ b/pkg/kubelet/kuberuntime/kuberuntime_container.go\r\n@@ -754,6 +754,9 @@ func findNextInitContainerToRun(pod *v1.Pod, podStatus *kubecontainer.PodStatus)\r\n                if status == nil {\r\n                        continue\r\n                }\r\n+               if status.State != kubecontainer.ContainerStateRunning {\r\n+                       continue\r\n+               }\r\n                return nil, nil, true\r\n        }\r\n```",
        "createdAt" : "2020-11-13T20:33:48Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "9969984c-5834-4502-80f1-c8bdf74d898f",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "if the pod sandbox is lost, we guarantee that we rerun init containers today (iirc)",
        "createdAt" : "2020-11-13T21:08:42Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0618e76b-109b-4627-915a-73debf65b591",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "@derekwaynecarr also, it would seem that we don't adhere to our own documented behavior already https://github.com/kubernetes/kubernetes/issues/88886",
        "createdAt" : "2020-11-19T22:04:49Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "afe40746-cefc-4e14-8763-02f7443ec522",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "> can we add a node e2e that reproduces?\r\n\r\nNote to self, the test to verify this case would 1) start a pod with init container 2) while main container is running, call delete container on the init container 3) watch to make sure the init container does not run again.\r\n\r\nNot currently sure how to do that or if node e2e can runtime level access.",
        "createdAt" : "2020-12-01T21:02:12Z",
        "updatedAt" : "2020-12-01T21:02:13Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "1043de26-cce1-4af6-abd4-00daa90138eb",
        "parentId" : "c2a273e3-8f03-4e2f-99b4-1cc0e023599c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@sjenning the new logic makes sense to me to check primary container status before checking status of any init contianer.",
        "createdAt" : "2020-12-03T15:11:07Z",
        "updatedAt" : "2020-12-03T15:11:08Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d02f703bd99fb580a2bc4b49a4870fa16f9fe8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +749,753 @@\t// from the container runtime now, and if we proceed, it would appear as if they\n\t// never ran and will re-execute improperly.\n\tfor i := range pod.Spec.Containers {\n\t\tcontainer := &pod.Spec.Containers[i]\n\t\tstatus := podStatus.FindContainerStatusByName(container.Name)"
  },
  {
    "id" : "6607063e-99b4-423b-8e90-f8931080fbcd",
    "prId" : 96572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96572#pullrequestreview-532931971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6ed1c99-e161-46db-9c5e-0ac3f2c750a1",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "I might be very much off here.\r\n\r\nThis logic was added recently (#92614):\r\nhttps://github.com/kubernetes/kubernetes/blob/6715318ee738668db0ddb84415f6926208761b9b/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L531-L538\r\n\r\nLooking at when `createPodSandbox` can be true, I wonder if one of the main containers may have a running state (https://github.com/kubernetes/kubernetes/blob/6715318ee738668db0ddb84415f6926208761b9b/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L453) so this PR will break the logic as sandbox will not be created.",
        "createdAt" : "2020-11-18T00:53:04Z",
        "updatedAt" : "2020-12-01T20:59:28Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d02f703bd99fb580a2bc4b49a4870fa16f9fe8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +749,753 @@\t// from the container runtime now, and if we proceed, it would appear as if they\n\t// never ran and will re-execute improperly.\n\tfor i := range pod.Spec.Containers {\n\t\tcontainer := &pod.Spec.Containers[i]\n\t\tstatus := podStatus.FindContainerStatusByName(container.Name)"
  },
  {
    "id" : "778efaa8-ca6c-40b3-9a6b-b5233069eddb",
    "prId" : 96572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96572#pullrequestreview-544093559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f7e7433-355f-48ee-9e5d-8854bf18c9ba",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "@SergeyKanzhelev I modified the check here for both container status _and_ that a container is `Running`.  Does this address your concern?",
        "createdAt" : "2020-12-03T15:41:08Z",
        "updatedAt" : "2020-12-03T15:41:08Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d02f703bd99fb580a2bc4b49a4870fa16f9fe8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +752,756 @@\t\tcontainer := &pod.Spec.Containers[i]\n\t\tstatus := podStatus.FindContainerStatusByName(container.Name)\n\t\tif status != nil && status.State == kubecontainer.ContainerStateRunning {\n\t\t\treturn nil, nil, true\n\t\t}"
  },
  {
    "id" : "eee76db8-49f4-4beb-96b6-e5d994c298a9",
    "prId" : 96572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96572#pullrequestreview-549087929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fadf489-863c-4ef4-8339-6118e33647a3",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "@sjenning If instead of `FindContainerStatusByName()` we use `podutil.GetContainerStatus()` (from k8s.io/kubernetes/pkg/api/v1/pod) we get this type that has more information instead: https://pkg.go.dev/k8s.io/api/core/v1#ContainerStatus. Seems confusing but is not really the same, we get it from pod.Status.ContainerStatuses or pod.Status.InitContainerStatuses.\r\n\r\nSo, if this loop instead of `pod.Spec.Containers` we iterate `pod.Spec.InitContainers` can't we get the status that it was already run? Or is that lost for some reason too in the bug you are chasing @sjenning?\r\n\r\nIIUC this might be the case (untested, though) and it seems more robust to just see \"have we run this? Then run\". Otherwise if the gc happens while initContainers didn't finish, we might run some initContainers twice with this approach AFAIK. Also, this check (if it works as I hope :D) should work fine with the concern @derekwaynecarr had on [pod restart reasons](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#pod-restart-reasons)\r\n\r\nAm I missing something? Probably I am :)",
        "createdAt" : "2020-12-08T19:15:00Z",
        "updatedAt" : "2020-12-09T15:05:57Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      },
      {
        "id" : "4d33476c-ac48-4d66-ad8f-fefefbd975ac",
        "parentId" : "3fadf489-863c-4ef4-8339-6118e33647a3",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "Yes it is confusing.\r\n\r\nIn this code path, we are acting on the authoritative container status from the runtime i.e. `kubecontainer.Status`, not what the kubelet has previously reported to the apiserver i.e. `v1.ContainerStatus`, which is what `GetContainerStatus()` would give you.\r\n\r\nAdditionally, there are cases in which we do want the initContainers to re-run, so just because they have run in the past don't mean they shouldn't run again.  This is what Derek was saying here https://github.com/kubernetes/kubernetes/pull/96572#discussion_r523184267\r\n\r\nThat is why I expanded the main container check to not only check for status but also check that the main container is Running, since,  in all situations where the init containers need to be run again, the main containers are not running.",
        "createdAt" : "2020-12-09T18:28:35Z",
        "updatedAt" : "2020-12-09T18:28:35Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "325ae5a7-ca09-44b6-b922-7bb680187c4c",
        "parentId" : "3fadf489-863c-4ef4-8339-6118e33647a3",
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "Ohh, I didn't know we want to re-run initContainers in such a case, sorry! Then this makes total sense, that is what I was missing :)",
        "createdAt" : "2020-12-10T11:08:28Z",
        "updatedAt" : "2020-12-10T11:08:28Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d02f703bd99fb580a2bc4b49a4870fa16f9fe8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +751,755 @@\tfor i := range pod.Spec.Containers {\n\t\tcontainer := &pod.Spec.Containers[i]\n\t\tstatus := podStatus.FindContainerStatusByName(container.Name)\n\t\tif status != nil && status.State == kubecontainer.ContainerStateRunning {\n\t\t\treturn nil, nil, true"
  },
  {
    "id" : "92f113d1-c0e5-4aa1-b167-74c61b1b8820",
    "prId" : 83057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83057#pullrequestreview-300043430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b39c6e20-f091-4131-ab11-e25738d72b45",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Why don't we need to check the runtime here?",
        "createdAt" : "2019-10-07T21:58:53Z",
        "updatedAt" : "2019-11-13T20:44:05Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "dc1ec1bf-93c0-4378-8caa-1175c75d29ee",
        "parentId" : "b39c6e20-f091-4131-ab11-e25738d72b45",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no need. Which mounts to make on the pod are already decided by this point, in kubelet_pods.go to be more exact. In there, it is decided which mounts the pod will have, including if ``/etc/hosts`` file and the ``termination-log`` file are to be mounted.",
        "createdAt" : "2019-10-10T12:33:09Z",
        "updatedAt" : "2019-11-13T20:44:05Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      },
      {
        "id" : "23f60084-fea2-4503-a317-519aadad5b59",
        "parentId" : "b39c6e20-f091-4131-ab11-e25738d72b45",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "To be more precise in this case, ``opts.PodContainerDir`` is only set in ``kubelet_pods.go`` if ``container.TerminationMessagePath`` is set and if it's not windows, or containerd is used. So, this codepath is only executed in the same case. But it's probably better to be explicit about it.",
        "createdAt" : "2019-10-10T12:55:42Z",
        "updatedAt" : "2019-11-13T20:44:05Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4d7f5836236e693a69d8796dc63d34d66e7ad3d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +317,321 @@\t\t\t}\n\n\t\t\t// Volume Mounts fail on Windows if it is not of the form C:/\n\t\t\tcontainerLogPath = volumeutil.MakeAbsolutePath(goruntime.GOOS, containerLogPath)\n\t\t\tterminationMessagePath := volumeutil.MakeAbsolutePath(goruntime.GOOS, container.TerminationMessagePath)"
  },
  {
    "id" : "524fff39-f2ff-42c5-a7b8-62b88548d0ca",
    "prId" : 81280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81280#pullrequestreview-273678596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf3f5305-15d3-468b-8941-27386d93a5b5",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Can you explain a little more about this change? I'm not totally following how it relates to the overall change you are describing in your pr.",
        "createdAt" : "2019-08-12T12:46:54Z",
        "updatedAt" : "2019-08-12T12:49:48Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "2973dabf-7d75-4887-b268-a7a5b85716d3",
        "parentId" : "bf3f5305-15d3-468b-8941-27386d93a5b5",
        "authorId" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "body" : "Thanks for your review.\r\nYou are right, strictly speaking, it should not belong to this PR, however, in more general sense, it can prevent future useful info being lost.\r\n\r\nFor example, kubelet failed to read the termination file which may due to a reason described in dockerd's container error message. \r\n\r\n**So the principle here is that, discard exit info ONLY if we can ensure it is useless or duplicated**.\r\n\r\nFor this case, we cannot ensure that dockerd's container error message is useless given \"failed to read the termination file\" or even we successfully read the file (because we also donot know if the dockerd's container error message is the root cause of the just read content).\r\n\r\nSo, for simplicity, I just append the error message, instead of one replace another.\r\n\r\nIt is just my preference, and TBD, we can disscus on it. :)\r\n\r\n(Release note also updated)",
        "createdAt" : "2019-08-12T13:06:03Z",
        "updatedAt" : "2019-08-12T13:06:37Z",
        "lastEditedBy" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +420,424 @@\t\t\t// Enrich the termination message written by the application is not empty\n\t\t\tif len(tMessage) != 0 {\n\t\t\t\tif len(cStatus.Message) != 0 {\n\t\t\t\t\tcStatus.Message += \": \"\n\t\t\t\t}"
  },
  {
    "id" : "a8b1ac4a-fc86-43dc-8b9f-cedbc9b875e5",
    "prId" : 81280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81280#pullrequestreview-290570390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "862f3713-faf7-438c-8bba-6aae65a42d96",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Is it possible for `cStatus.Message` to grow infinitely, or do we reset it each time this function is called?",
        "createdAt" : "2019-09-11T22:49:27Z",
        "updatedAt" : "2019-09-11T22:49:31Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a767fbd9-4eea-4674-8bca-985205082668",
        "parentId" : "862f3713-faf7-438c-8bba-6aae65a42d96",
        "authorId" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "body" : "Thanks for the review.\r\n\r\nI can confirm that cStatus.Message will **NOT** grow infinitely, given that `getPodContainerStatuses` is **not stateful** for the cStatus.Message (and it is by design should not be stateful), so that cStatus.Message will **NOT** accumulated.\r\n\r\nWe can prove this in details, please check:\r\n\r\n1. The background is that cStatus.Message will **only** be updated in 2 places:\r\n![image](https://user-images.githubusercontent.com/32826762/64749175-3b8cfa80-d547-11e9-80c3-f7d35b7faaa3.png)\r\n\r\n   Note the cStatus.Message is just `string` instead of `*string`\r\n https://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/container/runtime.go#L314\r\n\r\n2. cStatus.Message in line 421 can **only** come from above `toKubeContainerStatus `in the same `getPodContainerStatuses` func:\r\nhttps://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/kuberuntime/kuberuntime_container.go#L401\r\n\r\n3. In the `getPodContainerStatuses`, it will **only** **init** the cStatus.Message from `runtime container message`:\r\nhttps://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/kuberuntime/kuberuntime_container.go#L459\r\n\r\n4. The `runtime container message` can **only** come directly from the underlay runtime:\r\nhttps://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/dockershim/docker_container.go#L400\r\n\r\n5. The `runtime container message` will **NOT** from the cStatus.Message. So, the cStatus.Message will **only be appended at most once** by:\r\nhttps://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/kuberuntime/kuberuntime_container.go#L421-L426\r\n\r\n6. So the cStatus.Message will **NOT** grow infinitely.\r\n\r\nOverall, the cStatus.Message is composed from 2 parts, first part is the `runtime container message`, see steps 2-4, and second part is TerminationMessage from:\r\nhttps://github.com/kubernetes/kubernetes/blob/f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac/pkg/kubelet/kuberuntime/kuberuntime_container.go#L408\r\nSo, no more chars in the cStatus.Message.\r\n",
        "createdAt" : "2019-09-12T02:52:04Z",
        "updatedAt" : "2019-09-12T02:58:33Z",
        "lastEditedBy" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "tags" : [
        ]
      },
      {
        "id" : "8bf56ec5-4478-4ad2-a938-04c762fe5650",
        "parentId" : "862f3713-faf7-438c-8bba-6aae65a42d96",
        "authorId" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "body" : "Kindly ping @tallclair , PTAL",
        "createdAt" : "2019-09-16T02:23:15Z",
        "updatedAt" : "2019-09-16T02:23:15Z",
        "lastEditedBy" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "tags" : [
        ]
      },
      {
        "id" : "4f470842-2736-4f34-9161-4b02b95de54b",
        "parentId" : "862f3713-faf7-438c-8bba-6aae65a42d96",
        "authorId" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "body" : "Any comments for this? :)",
        "createdAt" : "2019-09-19T13:35:33Z",
        "updatedAt" : "2019-09-19T13:35:33Z",
        "lastEditedBy" : "9f447226-9d30-403d-8c1a-255c9312c55c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f82be3d3d05f67d0d1301ee6bfab4fca0b1a47ac",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +423,427 @@\t\t\t\t\tcStatus.Message += \": \"\n\t\t\t\t}\n\t\t\t\tcStatus.Message += tMessage\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "dd991f96-d540-4ea8-817a-e62fccfc67cf",
    "prId" : 73802,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73802#pullrequestreview-203666143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a1c1488-1b05-4ce5-8c63-35be4efc236f",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Why changing this to index?",
        "createdAt" : "2019-02-12T19:40:21Z",
        "updatedAt" : "2019-02-14T10:31:27Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "dcc91059-7791-4224-b9cb-a2a6db052c8a",
        "parentId" : "5a1c1488-1b05-4ce5-8c63-35be4efc236f",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Sorry, I remember there was a reason... But I can't remember it now... Will change it back.",
        "createdAt" : "2019-02-14T10:23:38Z",
        "updatedAt" : "2019-02-14T10:31:27Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "a580b155-cbe4-4e6d-832a-3ec5966c18c2",
        "parentId" : "5a1c1488-1b05-4ce5-8c63-35be4efc236f",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Done",
        "createdAt" : "2019-02-14T10:29:22Z",
        "updatedAt" : "2019-02-14T10:31:27Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8ee94d14cc3752accd7e51bbe8981e0fa1ba1e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +698,702 @@\n// findNextInitContainerToRun returns the status of the last failed container, the\n// index of next init container to start, or done if there are no further init containers.\n// Status is only returned if an init container is failed, in which case next will\n// point to the current container."
  },
  {
    "id" : "60748e64-401a-45eb-9e1a-cae18cadc365",
    "prId" : 60851,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60851#pullrequestreview-101697466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a47abdf7-9370-4778-a317-f92f96850251",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "what if the log file was created after the container started?",
        "createdAt" : "2018-03-06T19:31:01Z",
        "updatedAt" : "2018-03-06T19:31:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9d766065-1c05-4845-bd32-e09eaa3cd9c4",
        "parentId" : "a47abdf7-9370-4778-a317-f92f96850251",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "The above is checked after the container is started and by now other two log  files (one new symlink in /var/log/pod and actual log file in container /var/lib/docker/container) are already created. So log file in /var/lib/docker/container is always exists. But the new symlink in /var/log/pod is only created if logging driver is json-file, but not if logging driver is journald (though not sure if there are other reasons if the new symlink in /var/log/pod wont be created.) Anyway, the end result is legacy symlink in /var/log/container will be dangling if the new symlink in /var/log/pod does not exist. This dangling, as I mentioned above, is removed by kube runtime gc at some point. But this PR fixes this to not create the dangling legacy symlink in the first place to address the issue here https://bugzilla.redhat.com/show_bug.cgi?id=1548987. ",
        "createdAt" : "2018-03-06T19:56:10Z",
        "updatedAt" : "2018-03-06T19:56:10Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "d09751c0-b764-46bf-90cf-51b359a8f8c3",
        "parentId" : "a47abdf7-9370-4778-a317-f92f96850251",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok, thanks for the explanation",
        "createdAt" : "2018-03-06T20:09:53Z",
        "updatedAt" : "2018-03-06T20:09:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "81081128f40e5e6aebb22e2597e9f268d7b2c443",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +147,151 @@\t\tsandboxMeta.Namespace)\n\tcontainerLog := filepath.Join(podSandboxConfig.LogDirectory, containerConfig.LogPath)\n\t// only create legacy symlink if containerLog path exists (or the error is not IsNotExist).\n\t// Because if containerLog path does not exist, only dandling legacySymlink is created.\n\t// This dangling legacySymlink is later removed by container gc, so it does not make sense"
  },
  {
    "id" : "cbd40916-58d7-4c9f-b2f4-adec0b01b67e",
    "prId" : 59906,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59906#pullrequestreview-98069104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a003b261-3ec0-4f3c-89a1-c7e06d4b04cb",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Remove the directory in `removeContainerLog`",
        "createdAt" : "2018-02-21T01:36:22Z",
        "updatedAt" : "2018-02-21T21:02:59Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "b9e3bcd6-909a-406b-99fa-f89000ee8d8c",
        "parentId" : "a003b261-3ec0-4f3c-89a1-c7e06d4b04cb",
        "authorId" : "c0f153be-e421-41fb-ab49-be2badc19b1d",
        "body" : "done",
        "createdAt" : "2018-02-21T03:52:01Z",
        "updatedAt" : "2018-02-21T21:02:59Z",
        "lastEditedBy" : "c0f153be-e421-41fb-ab49-be2badc19b1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad6bf35c18cf13eb59b8c109c8de816ee4cb2158",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +191,195 @@\n\tcommand, args := kubecontainer.ExpandContainerCommandAndArgs(container, opts.Envs)\n\tlogDir := BuildContainerLogsDirectory(kubetypes.UID(pod.UID), container.Name)\n\terr = m.osInterface.MkdirAll(logDir, 0755)\n\tif err != nil {"
  },
  {
    "id" : "dd5c2bdb-6588-40bd-b8d7-9e6f28409ae7",
    "prId" : 47599,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47599#pullrequestreview-56513768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f663152-90c7-4373-bd46-8ce5b2bfd7a8",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "From what I can see here, this `count` variable never increments? It's printed below on L673, and in the previous implementation would be incremented on each iteration of the `podStatus.ContainerStatuses` loop.\r\n\r\nI'm not particularly familiar with this bit of code, so I could be wrong. I'm currently attempting to port this patch to the 1.6 `dockertools` implementation.",
        "createdAt" : "2017-07-14T14:07:36Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "7347b6f9-fb59-4bcb-9a97-4379496842c0",
        "parentId" : "9f663152-90c7-4373-bd46-8ce5b2bfd7a8",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Yes, the `count` should be incremented. Will do this later, after getting more comments. The variable is only used in the log message, so it does not affect the functionality of the code.",
        "createdAt" : "2017-07-14T16:45:25Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "96b8e294-a756-4a41-8e48-9ab1adcace3e",
        "parentId" : "9f663152-90c7-4373-bd46-8ce5b2bfd7a8",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Done",
        "createdAt" : "2017-08-16T01:53:18Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "152d8b9d96627ef2d8f440bda01104fc621ff69c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +680,684 @@\t}\n\tfor name := range initContainerNames {\n\t\tcount := 0\n\t\tfor _, status := range podStatus.ContainerStatuses {\n\t\t\tif status.Name != name || !initContainerNames.Has(status.Name) {"
  },
  {
    "id" : "e64f890c-8d9d-45fb-9770-2d30d0b56a7f",
    "prId" : 39341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39341#pullrequestreview-14948916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e368cac-1f47-4892-a0a6-573fc72bb280",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "missing conditions of `if !kubeStatus.FinishedAt.IsZero() || kubeStatus.ExitCode != 0`",
        "createdAt" : "2017-01-03T09:23:00Z",
        "updatedAt" : "2017-01-23T17:37:29Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "eaee52e6-b9a7-4261-9188-81ed392d3998",
        "parentId" : "4e368cac-1f47-4892-a0a6-573fc72bb280",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's above now, in the status function, to be consistent with docker_manager.",
        "createdAt" : "2017-01-03T15:24:27Z",
        "updatedAt" : "2017-01-23T17:37:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ea557d4b2ea39332e3a9b9bb0c29fe926926772",
    "line" : null,
    "diffHunk" : "@@ -1,1 +340,344 @@// amount of those bytes, or returns true if the logs should be checked.\nfunc getTerminationMessage(status *runtimeapi.ContainerStatus, terminationMessagePath string, fallbackToLogs bool) (string, bool) {\n\tif len(terminationMessagePath) != 0 {\n\t\tfor _, mount := range status.Mounts {\n\t\t\tif mount.ContainerPath != terminationMessagePath {"
  },
  {
    "id" : "0b9b1585-b212-49c6-ab8c-46a20b5470e7",
    "prId" : 39158,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39158#pullrequestreview-17129082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eee6de6-c5e2-4dc5-9db8-61d5f0e900dd",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "the condition has changed, should be \r\n```go \r\n} else if username != \"\" {\r\n```",
        "createdAt" : "2017-01-18T00:31:53Z",
        "updatedAt" : "2017-01-20T01:56:58Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "b962580224b1d4525cce78b9dc7ef0f4f1832a66",
    "line" : null,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t}\n\t} else if username != \"\" {\n\t\tglog.Warningf(\"Non-root verification doesn't support non-numeric user (%s)\", username)\n\t}\n"
  },
  {
    "id" : "c1c80146-1b21-4e10-a4f4-993e540e32e6",
    "prId" : 35348,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35348#pullrequestreview-5968993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98e212c-ef8f-403c-839f-b96473f484e3",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Do we absolutely have to inspect the container? At the call site in kubelet, it already has information such as the container name. \n",
        "createdAt" : "2016-10-26T21:02:57Z",
        "updatedAt" : "2016-10-27T00:38:36Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "db02fa96-f481-42d2-b80e-f5feb05e5677",
        "parentId" : "f98e212c-ef8f-403c-839f-b96473f484e3",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@yujuhong I checked the code just now, kubelet tried to [get information from every corner](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kubelet_pods.go#L717-L763) from `api.PodStatus`. The kubelet logic now is kind of fragile, I think we may not want to change it for now. \n\nWe can pass container name to this function, but may not want to get `RestartCount` from `api.PodStatus`. If so, we have to do an inspect here anyway.\n\n@yujuhong WDYT?\n",
        "createdAt" : "2016-10-26T23:09:30Z",
        "updatedAt" : "2016-10-27T00:38:36Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "5fb47a2d-1dad-4845-80b6-e63374890f4f",
        "parentId" : "f98e212c-ef8f-403c-839f-b96473f484e3",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I don't think this is more reliable because you still rely on kubelet to pick a container ID to begin with. \nI am ok with this for now if we add a TODO comment for consolidating the code.\n",
        "createdAt" : "2016-10-26T23:25:06Z",
        "updatedAt" : "2016-10-27T00:38:36Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "01d29c94-bd09-498b-a09e-3deab994f0f7",
        "parentId" : "f98e212c-ef8f-403c-839f-b96473f484e3",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "> I don't think this is more reliable because you still rely on kubelet to pick a container ID to begin with. \n\nYeah, I just found that it's hard to get `RestartCount` correctly from `api.PodStatus` given the fragile weird logic, sometimes we need to use `RestartCount`, sometimes we need to use `RestartCount-1`. At least, if we rely on `ContainerID`, there won't be behavior difference between cri and old integration.\n\nI think we should rely on the real log file in the future, when we separte the container and log lifecycle.\n\n> I am ok with this for now if we add a TODO comment for consolidating the code.\n\nWill do.\n",
        "createdAt" : "2016-10-26T23:31:05Z",
        "updatedAt" : "2016-10-27T00:38:36Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "e403ccef75509b3116f50ec4dceb2f9c103c4179",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +676,680 @@// GetContainerLogs returns logs of a specific container.\nfunc (m *kubeGenericRuntimeManager) GetContainerLogs(pod *api.Pod, containerID kubecontainer.ContainerID, logOptions *api.PodLogOptions, stdout, stderr io.Writer) (err error) {\n\tstatus, err := m.runtimeService.ContainerStatus(containerID.ID)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get container status %q: %v\", containerID, err)"
  },
  {
    "id" : "13f4f095-6c9c-4514-8607-9b2016f250ae",
    "prId" : 34858,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34858#pullrequestreview-4736745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2571512f-95f1-4a26-bb4b-bf93772f70b7",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Replace this with `m.osInterface.Create`?\n",
        "createdAt" : "2016-10-17T05:57:51Z",
        "updatedAt" : "2016-10-24T02:09:06Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "19deb952-0f29-41f8-b20a-ed000c8b9a6e",
        "parentId" : "2571512f-95f1-4a26-bb4b-bf93772f70b7",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "A small problem is that `makeMounts` is not a member function of `m`. We can easily change that, just don't know whether we should make this change just for the unit test.\n",
        "createdAt" : "2016-10-18T18:55:11Z",
        "updatedAt" : "2016-10-24T02:09:06Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad4672e725877830407e2e4694fed7ceae5fe0a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +280,284 @@\t\tcontainerLogPath := filepath.Join(opts.PodContainerDir, cid)\n\t\t// TODO: We should try to use os interface here.\n\t\tfs, err := os.Create(containerLogPath)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Error on creating termination-log file %q: %v\", containerLogPath, err)"
  },
  {
    "id" : "7d6cdaae-90b7-4dd3-993b-298f514bb3f6",
    "prId" : 34811,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34811#pullrequestreview-7352723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd2a80d3-f364-4ab2-97e5-69791d39372b",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "nit, i am not sure what this var buys us here\n",
        "createdAt" : "2016-11-06T23:06:34Z",
        "updatedAt" : "2016-11-07T03:41:32Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "9ae28ec9-a5bf-4bce-a2b6-f0daaed364cb",
        "parentId" : "cd2a80d3-f364-4ab2-97e5-69791d39372b",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "@pmorie This is for setting its pointer in following lines.\n",
        "createdAt" : "2016-11-07T03:23:47Z",
        "updatedAt" : "2016-11-07T03:41:32Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e5f81fedd5243b9d7f690a9c0738794db15899",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +274,278 @@\t\t} else {\n\t\t\tfs.Close()\n\t\t\tselinuxRelabel := selinux.SELinuxEnabled()\n\t\t\tvolumeMounts = append(volumeMounts, &runtimeApi.Mount{\n\t\t\t\tHostPath:       &containerLogPath,"
  },
  {
    "id" : "92ca06fc-a00f-4f63-be58-ce13e67b3f1c",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-1703117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e6a3a37-1f1a-4d56-af48-6d8088ef3ef5",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "nit, `bool isFirst` might be clearer here. I don't think that logging the count below (only place it's used where a bool would change things) actually matters, cc @yujuhong \n",
        "createdAt" : "2016-09-27T01:20:50Z",
        "updatedAt" : "2016-09-30T02:49:15Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "31626898-5312-450d-96cc-a648efe792d4",
        "parentId" : "7e6a3a37-1f1a-4d56-af48-6d8088ef3ef5",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "hmm, the count is just for clear. I'm ok with this. @yujuhong what do you think?\n",
        "createdAt" : "2016-09-27T10:21:20Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +569,573 @@\t}\n\tfor name := range initContainerNames {\n\t\tcount := 0\n\t\tfor _, status := range podStatus.ContainerStatuses {\n\t\t\tif status.Name != name || !initContainerNames.Has(status.Name) || status.State != kubecontainer.ContainerStateExited {"
  },
  {
    "id" : "9b8872f5-d2ca-41f2-bf8f-df0054ad0910",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-1703121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1325dc77-214a-4e4d-a7a1-ced8240a34f0",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I'd rather have the `if status == nil continue` logic here, not as part of the switch.\n\nThat also lets the switch become `switch status.State`\n",
        "createdAt" : "2016-09-27T01:27:28Z",
        "updatedAt" : "2016-09-30T02:49:15Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "15929174-5dcd-4089-a015-d5de20f57c16",
        "parentId" : "1325dc77-214a-4e4d-a7a1-ced8240a34f0",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "sure.\n",
        "createdAt" : "2016-09-27T10:21:22Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +622,626 @@\tfor i := len(pod.Spec.InitContainers) - 1; i >= 0; i-- {\n\t\tcontainer := &pod.Spec.InitContainers[i]\n\t\tstatus := podStatus.FindContainerStatusByName(container.Name)\n\t\tif status == nil {\n\t\t\tcontinue"
  },
  {
    "id" : "24f312df-881c-4fd4-9f80-485bb5fc4dda",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-1874013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7180cba-0d28-4b2a-8d51-e9fc566bb2de",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Maybe we should make `kubecontainer.Status` to have something like `InitContainerStatus` to make our life easier ? @yujuhong @feiskyer \n",
        "createdAt" : "2016-09-27T23:29:42Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "0abd658b-ed89-4ad5-bc0c-e3d412201fea",
        "parentId" : "d7180cba-0d28-4b2a-8d51-e9fc566bb2de",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I'm not sure I understand what you mean by that. How would it make things easier?\n",
        "createdAt" : "2016-09-27T23:33:04Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "7659bc4a-7ebe-4b6f-b495-e65c6f7d474e",
        "parentId" : "d7180cba-0d28-4b2a-8d51-e9fc566bb2de",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Not sure whether that could make things easier, same logic is required while populating  `InitContainerStatus`.\n",
        "createdAt" : "2016-09-28T06:25:08Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +571,575 @@\t\tcount := 0\n\t\tfor _, status := range podStatus.ContainerStatuses {\n\t\t\tif status.Name != name || !initContainerNames.Has(status.Name) || status.State != kubecontainer.ContainerStateExited {\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "7b0ac271-b30a-4a89-94a0-56efebb5e760",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50dc8a17-5586-419f-ab77-06c1e3cbc696",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "nit: Would removing the `else` makes thing cleaner? e.g.\n\n``` go\nif gracePeriod < minimumGracePeriodInSeconds {\n￼        gracePeriod = minimumGracePeriodInSeconds\n}\nif gracePeriodOverride != nil {\n        gracePeriod = *gracePeriodOverride\n}\n```\n",
        "createdAt" : "2016-09-07T01:32:23Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "777ca299-e8dd-496f-8518-0b4bb734278f",
        "parentId" : "50dc8a17-5586-419f-ab77-06c1e3cbc696",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "done.\n",
        "createdAt" : "2016-09-10T15:25:41Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +451,455 @@\t\tgracePeriod = *gracePeriodOverride\n\t\tglog.V(3).Infof(\"Killing container %q, but using %d second grace period override\", containerID, gracePeriod)\n\t}\n\n\terr := m.runtimeService.StopContainer(containerID.ID, gracePeriod)"
  },
  {
    "id" : "3070527e-0282-47de-90bc-c8523a503fe5",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59a8974f-bd48-4c40-8ab4-1dee3d64db74",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "nit: probably can use a map here instead of looping for every container. But ok to leave as is.\n",
        "createdAt" : "2016-09-07T01:37:38Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +483,487 @@\t\t\tvar containerSpec *api.Container\n\t\t\tif pod != nil {\n\t\t\t\tfor i, c := range pod.Spec.Containers {\n\t\t\t\t\tif container.Name == c.Name {\n\t\t\t\t\t\tcontainerSpec = &pod.Spec.Containers[i]"
  },
  {
    "id" : "95229e9d-0758-493e-8aca-a3aac4862a9a",
    "prId" : 31322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "019e2af8-26e3-4b5a-b66a-b862a93eb3b0",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Can we pull out the pre-stop hook execution part into a function to improve the readability?\n",
        "createdAt" : "2016-08-25T00:59:22Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "9fcfe554-e6fc-4c37-abcd-87492f155b69",
        "parentId" : "019e2af8-26e3-4b5a-b66a-b862a93eb3b0",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : ":+1:\n",
        "createdAt" : "2016-08-31T14:18:57Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "71e2dd9c-4334-4059-8252-38d4b5502e6d",
        "parentId" : "019e2af8-26e3-4b5a-b66a-b862a93eb3b0",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "This is already done IIUC.\n",
        "createdAt" : "2016-08-31T20:37:14Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "277070e267e0ca1d75fd0794434e57e45aa2c212",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +345,349 @@// * Run the pre-stop lifecycle hooks (if applicable).\n// * Stop the container.\nfunc (m *kubeGenericRuntimeManager) killContainer(pod *api.Pod, containerID kubecontainer.ContainerID, containerSpec *api.Container, reason string, gracePeriodOverride *int64) error {\n\tgracePeriod := int64(minimumGracePeriodInSeconds)\n\tif pod != nil {"
  },
  {
    "id" : "9dc7db72-70f9-4a57-987f-024d96c268ee",
    "prId" : 30267,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3303f1f2-73d3-4e1f-a367-71787096903a",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "statuses\n",
        "createdAt" : "2016-08-11T19:36:49Z",
        "updatedAt" : "2016-08-25T01:37:34Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c62d2c368919de8bba93ea4706632bd2ac8027c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +236,240 @@}\n\n// getKubeletContainerStatuses gets all containers' status for the pod sandbox.\nfunc (m *kubeGenericRuntimeManager) getKubeletContainerStatuses(podSandboxID string) ([]*kubecontainer.ContainerStatus, error) {\n\tcontainers, err := m.runtimeService.ListContainers(&runtimeApi.ContainerFilter{"
  },
  {
    "id" : "f09b71c9-1e7b-4d7d-90a9-16c29daae88f",
    "prId" : 30267,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39b4334d-0d77-495c-80b3-a556eabe9acf",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "we can break the loop after finding the termination message.\n",
        "createdAt" : "2016-08-11T19:38:44Z",
        "updatedAt" : "2016-08-25T01:37:34Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "2bad0093-a743-4588-8c7b-146332c5389a",
        "parentId" : "39b4334d-0d77-495c-80b3-a556eabe9acf",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Thanks. Fixed.\n",
        "createdAt" : "2016-08-13T07:08:59Z",
        "updatedAt" : "2016-08-25T01:37:34Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c62d2c368919de8bba93ea4706632bd2ac8027c",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +283,287 @@\t\t\tif annotatedInfo.TerminationMessagePath != \"\" {\n\t\t\t\tfor _, mount := range status.Mounts {\n\t\t\t\t\tif mount.GetContainerPath() == annotatedInfo.TerminationMessagePath {\n\t\t\t\t\t\tpath := mount.GetHostPath()\n\t\t\t\t\t\tif data, err := ioutil.ReadFile(path); err != nil {"
  },
  {
    "id" : "2e15d089-b942-49b0-b081-d467f81e6dca",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "435bd8e4-a6b8-44a8-8809-aade41b0acff",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "same as above, this loop is broken I think\n",
        "createdAt" : "2016-08-10T00:47:58Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "e3dc5b7a-c5b6-4322-98f4-908292154c6a",
        "parentId" : "435bd8e4-a6b8-44a8-8809-aade41b0acff",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Thanks. Fixed.\n",
        "createdAt" : "2016-08-10T02:46:02Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : null,
    "diffHunk" : "@@ -1,1 +156,160 @@\tfor idx := range opts.Mounts {\n\t\tv := opts.Mounts[idx]\n\t\tm := &runtimeApi.Mount{\n\t\t\tName:          &v.Name,\n\t\t\tHostPath:      &v.HostPath,"
  },
  {
    "id" : "515daf5e-8120-4806-8c9e-6ce4dc8751f5",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong @feiskyer @Random-Liu @euank So are we going to use the container name to store all those info? It seems this will turn out to be an implicit contract between runtime and kubelet?\nIIUC, the name is contructed  this way for docker so that kubelet can list the containers that are managed by kubelet. But that's not the only way to solve this problem, and I don't feel the shared runtime code needs to care about this.\n\nThe runtime itself should be responsible to insert the `container name/pod name/pod namespace` somewhere, either in the actual container name, or annotation, etc. And when kubelet ask list containers/list pods, the runtime should be able to retrieve the kubelet-managed containers.\n",
        "createdAt" : "2016-08-10T23:37:58Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "a839dba5-ee0d-4a19-9fea-f7b68656dd75",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "That's actually exactly what labels are for, right? If you trust the runtime to persist labels as well as it persists names, then agreed we don't need this crazy name.\n\nIf the runtime chooses to do this translation internally so it can better recover or identify or whatever, that's fine too.\n",
        "createdAt" : "2016-08-10T23:40:19Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "d94d6426-6736-4fe5-b66f-826cdc83900d",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "First, it's not an implicit contract because user (i.e., kubelet here) has the freedom to choose a name it wants for the container, and runtime shouldn't care about it.\n\nSecond, we are trying to leverage labels more. However, we still want the name to convey _some_ information so that it's user friendly when interacting against the runtime. We can probably shorten the name but still have some information embedded in it.  I think the main reason that we are keeping the name as it is is to _not_ intentionally deviate from the current implementation too much. If we ever need to ensure backward compatibility (i.e., in-place update of kubelet without draining the pods) down the road, we would still be able to make it happen somehow by padding more code. This makes the naming overhaul not desirable right now.\n",
        "createdAt" : "2016-08-11T00:06:01Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "11469b67-b8f3-4c5e-ab8b-baff8e98d9bc",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "> The runtime itself should be responsible to insert the container name/pod name/pod namespace somewhere, either in the actual container name, or annotation, etc. And when kubelet ask list containers/list pods, the runtime should be able to retrieve the kubelet-managed containers.\n\nI don't know if we can make this assumption. Does that mean no one else can access the runtime via the CRI shim? I think kubelet labeling the pods/containers itself may be more flexible. \n",
        "createdAt" : "2016-08-11T00:08:14Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "2a933ff6-5819-42d7-9804-ef88d7c12fd5",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "@yifan-gu I don't think this is a problem. Since 'Name' is part of container config, kubelet can set it whatever but runtimes shouldn't care about. Runtimes should also return same container name on container list and status.\n",
        "createdAt" : "2016-08-11T02:26:30Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "93ad9775-4f56-4246-bec1-f842975ca2f0",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Let's table the naming issue for now. I think it's worth discussing this but it shouldn't be blocking.\n",
        "createdAt" : "2016-08-11T18:10:28Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "5ce3f9bd-afdc-43a2-930e-60b77c31cdf9",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "My comments went away before I saved it..\n",
        "createdAt" : "2016-08-11T18:27:10Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "ddeea2cf-597b-44f2-b76f-e318ba7c2c73",
        "parentId" : "3f73deb7-bd64-45d2-822e-0114fccc5dcf",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "My point is such logic can live in the runtime shim code, e.g. the docker shim can construct the name with such way so nothing changed as today. and for rkt, it construct the annotation to include hash, namespace, etc.\n\nWhen listing containers, the runtime should be able to return only containers that are managed by kubelet (e.g. docker list with the name filter, rkt list with the annotation filter), on top of that, runtimes can still apply whatever filters that kubelet passes to them.\n\nI am generally against putting things into names, especially if kubelet forces all runtimes to do so. And as a result, we will have to maintain such naming scheme in the future to keep backwards compatibility, that's why I am saying this is an implicit contract.\n\nAlthough I agree it could be somehow helpful for users to know what containers are managed by kubelet easier.\n",
        "createdAt" : "2016-08-11T18:36:20Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +43,47 @@\t}\n\n\t_, containerName, cid := buildContainerName(pod, container)\n\tcommand, args := kubecontainer.ExpandContainerCommandAndArgs(container, opts.Envs)\n\tcontainerLogsPath := getContainerLogsPath(containerName, pod.UID)"
  },
  {
    "id" : "9e4ce852-e17c-4369-b90c-3078c50ea295",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44ab4f73-df71-47c0-a560-6b056e523cd9",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Copy the original comment explaining the logic behind this.\n\n```\n    // If request is not specified, but limit is, we want request to default to limit.\n    // API server does this for new containers, but we repeat this logic in Kubelet\n    // for containers running on existing Kubernetes clusters.\n```\n",
        "createdAt" : "2016-08-11T18:07:47Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "93c8dc5e-b215-4887-a0fd-4e55853ede52",
        "parentId" : "44ab4f73-df71-47c0-a560-6b056e523cd9",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Thanks. done.\n",
        "createdAt" : "2016-08-12T04:22:17Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +98,102 @@\tcpuRequest := container.Resources.Requests.Cpu()\n\tcpuLimit := container.Resources.Limits.Cpu()\n\tmemoryLimit := container.Resources.Limits.Memory().Value()\n\t// If request is not specified, but limit is, we want request to default to limit.\n\t// API server does this for new containers, but we repeat this logic in Kubelet"
  },
  {
    "id" : "a1f48041-fbda-4373-b12a-0af6cf035331",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a41fa6de-c4db-441c-ab5c-9a4c6d67ac9e",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "Now that `create` and `start` are split into two different states, I think kubelet actually can handle creating this mount.\n",
        "createdAt" : "2016-08-11T19:25:46Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "9802f94d-92f2-426f-a1f7-e33a7e2d9b16",
        "parentId" : "a41fa6de-c4db-441c-ab5c-9a4c6d67ac9e",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "We still pass everything at creation time. `Start` simply starts the user process. \n",
        "createdAt" : "2016-08-11T23:24:18Z",
        "updatedAt" : "2016-08-12T04:22:42Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +170,174 @@\n\t// The reason we create and mount the log file in here (not in kubelet) is because\n\t// the file's location depends on the ID of the container, and we need to create and\n\t// mount the file before actually starting the container.\n\tif opts.PodContainerDir != \"\" && len(container.TerminationMessagePath) != 0 {"
  },
  {
    "id" : "69e80e41-a9d0-448e-8849-f697910c6d45",
    "prId" : 29824,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c68b9c4e-0650-48a5-b51a-a8d14077df8c",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Reviewed this file.\n",
        "createdAt" : "2016-08-02T23:13:40Z",
        "updatedAt" : "2016-08-03T00:27:12Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "81a79cd4c019afd2d7ea3843eda56f8aaeb2fa72",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2016 The Kubernetes Authors.\n"
  }
]