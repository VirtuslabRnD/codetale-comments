[
  {
    "id" : "e15157cb-1468-4c64-ae89-94abc9766a24",
    "prId" : 96281,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96281#pullrequestreview-524758493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "996866cf-7443-47e4-af78-5cc7e495a3b2",
        "parentId" : null,
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "Now that I see the code assigning enum 1 unconfined to the ProfileType on nil seccomp...should unconfined be the first ordered value in the enum list?",
        "createdAt" : "2020-11-05T22:19:31Z",
        "updatedAt" : "2020-11-05T23:44:12Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      },
      {
        "id" : "026dd45f-c7b7-4c9a-ad11-9e7bf896790d",
        "parentId" : "996866cf-7443-47e4-af78-5cc7e495a3b2",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "Intention is to move to runtime default as the default in the future.",
        "createdAt" : "2020-11-05T23:42:33Z",
        "updatedAt" : "2020-11-05T23:44:12Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      },
      {
        "id" : "cac7a17e-8466-47e5-874d-f20c332151b5",
        "parentId" : "996866cf-7443-47e4-af78-5cc7e495a3b2",
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "SGTM secure by default .. unconfined should only be the default for privileged mode... if seccomp security profile is set and not privileged the default should be runtime default... makes sense",
        "createdAt" : "2020-11-05T23:43:43Z",
        "updatedAt" : "2020-11-05T23:49:57Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b9ac7d0cbc2b598d7a72146baa4c4037601c25",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +261,265 @@\tif scmp == nil {\n\t\treturn &runtimeapi.SecurityProfile{\n\t\t\tProfileType: runtimeapi.SecurityProfile_Unconfined,\n\t\t}\n\t}"
  },
  {
    "id" : "ae3f56c5-0d97-481c-9ff7-0e67a748fd96",
    "prId" : 96281,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96281#pullrequestreview-524711478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d144efcc-9e6f-4650-ae29-026ff8cfd130",
        "parentId" : null,
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "suggest switch and maybe log err for unexpected type..",
        "createdAt" : "2020-11-05T22:47:38Z",
        "updatedAt" : "2020-11-05T23:44:12Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b9ac7d0cbc2b598d7a72146baa4c4037601c25",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +264,268 @@\t\t}\n\t}\n\tif scmp.Type == v1.SeccompProfileTypeRuntimeDefault {\n\t\treturn &runtimeapi.SecurityProfile{\n\t\t\tProfileType: runtimeapi.SecurityProfile_RuntimeDefault,"
  },
  {
    "id" : "6d41e1e0-6225-4b0e-ac44-28241342726e",
    "prId" : 96281,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96281#pullrequestreview-525257817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "parentId" : null,
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "should we use unconfined if local host is set and nil profile in this new mode.. or make this an error.. or keep the type and empty ref.. letting the caller decide how to handle the situation.",
        "createdAt" : "2020-11-05T22:50:26Z",
        "updatedAt" : "2020-11-05T23:44:12Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      },
      {
        "id" : "d0dffb37-3c10-45fb-8d5a-8639c30b1142",
        "parentId" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "This is mirroring the existing behavior. Added a TODO for moving to runtime default as a follow up.",
        "createdAt" : "2020-11-05T23:45:10Z",
        "updatedAt" : "2020-11-05T23:45:10Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      },
      {
        "id" : "f310e209-3264-4e8c-898d-75658ceb568d",
        "parentId" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Added a TODO for moving to runtime default as a follow up.\r\n\r\nAren't there compatibility considerations for that?",
        "createdAt" : "2020-11-06T00:54:39Z",
        "updatedAt" : "2020-11-06T00:54:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "36f9907e-fd3a-47f6-b58a-2fddd6ee5c46",
        "parentId" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "> Aren't there compatibility considerations for that?\r\n\r\nYes, existing workloads could potentially break. Hence, we need to come up with a plan for defaulting\r\nto runtime default instead of unconfined. We could potentially add a feature gate. I think it is best\r\ntackled separately (from this PR) with wider discussion in sig-node first.\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-11-06T01:47:15Z",
        "updatedAt" : "2020-11-06T01:47:16Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      },
      {
        "id" : "4b294673-4bd7-44d9-ba0c-593bb8a65cef",
        "parentId" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Agreed. If you add a TODO, make sure it points to an issue with sufficient context to ensure no one tries to resolve the TODO without addressing those issues. ",
        "createdAt" : "2020-11-06T02:00:41Z",
        "updatedAt" : "2020-11-06T02:00:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2de0b5e9-ab83-430d-b99a-6ce6550bddde",
        "parentId" : "ea2b5180-3180-42e1-91dd-adea52685a0e",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "Sure, I will open an issue for it :+1:",
        "createdAt" : "2020-11-06T15:29:04Z",
        "updatedAt" : "2020-11-06T15:29:04Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b9ac7d0cbc2b598d7a72146baa4c4037601c25",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +269,273 @@\t\t}\n\t}\n\tif scmp.Type == v1.SeccompProfileTypeLocalhost && scmp.LocalhostProfile != nil && len(*scmp.LocalhostProfile) > 0 {\n\t\tfname := filepath.Join(profileRootPath, *scmp.LocalhostProfile)\n\t\treturn &runtimeapi.SecurityProfile{"
  },
  {
    "id" : "248dab1b-71fd-4f7f-94e8-cf1d836998bf",
    "prId" : 96281,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96281#pullrequestreview-524759248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b769dfa4-8498-494d-86eb-f448a9e978e0",
        "parentId" : null,
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "would it be fair to pick up the ref from the pod if nil as well.. hmm",
        "createdAt" : "2020-11-05T22:56:03Z",
        "updatedAt" : "2020-11-05T23:44:12Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      },
      {
        "id" : "9ec249a6-e979-4f0b-bea3-d3933b8dff60",
        "parentId" : "b769dfa4-8498-494d-86eb-f448a9e978e0",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "This is mirroring the existing behavior.",
        "createdAt" : "2020-11-05T23:45:32Z",
        "updatedAt" : "2020-11-05T23:45:33Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "32b9ac7d0cbc2b598d7a72146baa4c4037601c25",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +288,292 @@\t}\n\n\t// when container seccomp is not defined, try to apply from pod field\n\tif podSecContext != nil && podSecContext.SeccompProfile != nil {\n\t\treturn fieldSeccompProfile(podSecContext.SeccompProfile, m.seccompProfileRoot)"
  },
  {
    "id" : "a3dead62-68c6-4c16-94bf-4250cb61e6eb",
    "prId" : 91381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91381#pullrequestreview-418732401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ee8052a-53be-4ecc-ba4b-b9b0a9dcb51e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this path shouldn't be possible, right? what should we do if we get here? what does returning \"\" do?",
        "createdAt" : "2020-05-26T17:32:03Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4bdddc28-6305-465e-a1f6-11b8f6f9c9bc",
        "parentId" : "7ee8052a-53be-4ecc-ba4b-b9b0a9dcb51e",
        "authorId" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "body" : "Returning \"\" causes dockershim to use the unconfined profile:\r\nhttps://github.com/kubernetes/kubernetes/blob/a79c711191d5c0a9dca4fbaba26ef35e476f5871/pkg/kubelet/dockershim/helpers_linux.go#L52\r\n\r\nI removed this and made the behaviour a bit more explicit, namely now it returns v1.SeccompProfileNameUnconfined.",
        "createdAt" : "2020-05-26T22:53:25Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8976e3620f8963e72084971d9d4decbd026bf49f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +205,209 @@func fieldProfile(scmp *v1.SeccompProfile, profileRootPath string) string {\n\tif scmp == nil {\n\t\treturn \"\"\n\t}\n\tif scmp.Type == v1.SeccompProfileTypeRuntimeDefault {"
  },
  {
    "id" : "d201f03c-103a-47f1-a504-995e3bd62efb",
    "prId" : 91381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91381#pullrequestreview-437019063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "069808f8-fadd-4971-81f5-cc59d5cd1a17",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd prefer an exact match here rather than defaulting an unknown type to \"unconfined\":\r\n```go\r\nif scmp.Type == v1.SeccompProfileTypeUnconfined {\r\n  return v1.SeccompProfileNameUnconfined\r\n}\r\nreturn \"\"\r\n```",
        "createdAt" : "2020-06-23T21:23:16Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c33c6633-07e6-4d1d-b07a-3af78ca0800e",
        "parentId" : "069808f8-fadd-4971-81f5-cc59d5cd1a17",
        "authorId" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "body" : "Now it is all aligned with existing behaviour - non-expected state returns \"\".",
        "createdAt" : "2020-06-24T21:27:29Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "7f996100-1a0c-46d0-9245-23461072b50e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8976e3620f8963e72084971d9d4decbd026bf49f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +215,219 @@\t}\n\tif scmp.Type == v1.SeccompProfileTypeUnconfined {\n\t\treturn v1.SeccompProfileNameUnconfined\n\t}\n\treturn \"\""
  },
  {
    "id" : "1363ae0a-d0ab-4a5b-8adb-fc00ef5bfc04",
    "prId" : 49178,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49178#pullrequestreview-55675935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "551af970-2a90-42be-97cc-6000a6240c87",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Should add `localhost/`.",
        "createdAt" : "2017-08-10T23:17:33Z",
        "updatedAt" : "2017-08-13T07:43:03Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea4a3417e7a1aa9ff05449509eadbebe63a77477",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +278,282 @@\tif strings.HasPrefix(profile, \"localhost/\") {\n\t\tname := strings.TrimPrefix(profile, \"localhost/\")\n\t\tfname := filepath.Join(m.seccompProfileRoot, filepath.FromSlash(name))\n\t\treturn fname\n\t}"
  },
  {
    "id" : "4330989a-6af5-49e9-96fb-3c55d875a348",
    "prId" : 31395,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ff9187c-a820-4541-84aa-b7ec01f083af",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Why these could be nil?\n",
        "createdAt" : "2016-08-25T01:28:15Z",
        "updatedAt" : "2016-08-30T16:54:35Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "a49d28710a33a25e310c9264ff9fc58fd447a96f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +115,119 @@// TODO: Remove this once it becomes obsolete.\nfunc (m *kubeGenericRuntimeManager) sandboxToKubeContainer(s *runtimeApi.PodSandbox) (*kubecontainer.Container, error) {\n\tif s == nil || s.Id == nil || s.State == nil {\n\t\treturn nil, fmt.Errorf(\"unable to convert a nil pointer to a runtime container\")\n\t}"
  },
  {
    "id" : "66d1ff4f-0180-4093-8dac-9db92efeb4bd",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af282976-4992-4477-bba5-6925423c99c6",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think we should rethink when we need to parse the names. \n",
        "createdAt" : "2016-08-04T18:40:36Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : null,
    "diffHunk" : "@@ -1,1 +84,88 @@\n// parseContainerName unpacks a container name, returning the pod name, namespace, UID and container name\nfunc parseContainerName(name string) (podName, podNamespace, podUID, containerName string, hash uint64, err error) {\n\tparts := strings.Split(name, \"_\")\n\tif len(parts) == 0 || parts[0] != kubePrefix {"
  },
  {
    "id" : "3a2001de-42d8-4b31-ad9a-acea78922252",
    "prId" : 30083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ad6875c-a3ac-4f60-831e-9f1fffd44e91",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "nit: add a comment:\n\n```\n// kubelet uses hash to determine whether an existing container matches the desired spec.\n```\n\nI think in the future, we may want to move this to a label. \n",
        "createdAt" : "2016-08-09T01:26:56Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "482ea39b-35da-4d03-96be-60044819fd66",
        "parentId" : "4ad6875c-a3ac-4f60-831e-9f1fffd44e91",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "@yujuhong Added.\n\nnit: There are already \"io.kubernetes.container.hash\" in labels. Here's name is for keeping consistent with old versions. \n",
        "createdAt" : "2016-08-09T05:06:04Z",
        "updatedAt" : "2016-08-12T04:22:41Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3512975c31f410aec6ecea8734046bff1aa5a136",
    "line" : null,
    "diffHunk" : "@@ -1,1 +65,69 @@func buildContainerName(pod *api.Pod, container *api.Container) (string, string, string) {\n\t// kubelet uses hash to determine whether an existing container matches the desired spec.\n\tcontainerName := container.Name + \".\" + strconv.FormatUint(kubecontainer.HashContainer(container), 16)\n\treturn buildKubeGenericName(pod, containerName)\n}"
  }
]