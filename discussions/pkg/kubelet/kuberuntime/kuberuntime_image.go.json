[
  {
    "id" : "a2ba9825-e3fd-484a-b034-79af4dc3dce2",
    "prId" : 58229,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58229#pullrequestreview-89895694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdcebef1-60a2-42e1-b086-c7e990e0460c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "do you know if there are any unintended consequences of this change to always return ID?",
        "createdAt" : "2018-01-18T18:59:02Z",
        "updatedAt" : "2018-01-18T18:59:02Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "a4c770c7-e2e5-43ca-a2b9-71d4faad4086",
        "parentId" : "cdcebef1-60a2-42e1-b086-c7e990e0460c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "it looks like the only real caller is in the image manager itself, so it doesnt look like there are side-effects.",
        "createdAt" : "2018-01-18T19:01:43Z",
        "updatedAt" : "2018-01-18T19:01:44Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "19a546758c606afcf510b9ab5cb9a5815d7df8a6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\treturn \"\", nil\n\t}\n\treturn status.Id, nil\n}\n"
  },
  {
    "id" : "25573f4a-317a-46c9-8414-836f167470d4",
    "prId" : 34380,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34380#pullrequestreview-3783165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Can we return an error if the image is not found?\n",
        "createdAt" : "2016-10-11T01:45:25Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "08218f61-2ab8-4603-a6e5-4585560f1530",
        "parentId" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "We could, we just need to define different types of error then.\n",
        "createdAt" : "2016-10-11T02:15:13Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "a86fa56d-fed9-4e97-addf-f902c0b2cc64",
        "parentId" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@Random-Liu I suggest we define and return an error then.\nBTW, it seems the dockershim will return `nil, error` when the image doesn't exist.\n",
        "createdAt" : "2016-10-11T02:23:04Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "6766e4f4-6636-4335-936f-26e57cc7d496",
        "parentId" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@Random-Liu Alternatively, can't dockershim support filtering the images through digest? \n",
        "createdAt" : "2016-10-11T02:24:51Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "87788c90-12b9-43ca-87ad-f24d39cf774e",
        "parentId" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "> BTW, it seems the dockershim will return nil, error when the image doesn't exist.\n\n@yifan-gu dockershim returns `nil, nil` https://github.com/kubernetes/kubernetes/pull/34380/files#diff-99802aef301353226cc4233749846c68R58\n\n> @Random-Liu Alternatively, can't dockershim support filtering the images through digest?\n\n@yifan-gu Docker itself doesn't support filter image by digest when listing images.\nWe can implement it ourselves, but I feel like it is simpler and makes more sense to use `ImageStatus`.\n",
        "createdAt" : "2016-10-11T21:58:15Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "49054086-991d-4232-a6f1-b29c104268fe",
        "parentId" : "c93a4274-03aa-49b0-8b4f-902350d2670f",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@Random-Liu OK, but I still suggest return `not found` as an error, which is somehow a convention, e.g. `os.Stat()`.\n",
        "createdAt" : "2016-10-11T23:11:48Z",
        "updatedAt" : "2016-10-12T16:21:23Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "afa3414779f9699314cefe8e004ee4c833e0ec0c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +81,85 @@// IsImagePresent checks whether the container image is already in the local storage.\nfunc (m *kubeGenericRuntimeManager) IsImagePresent(image kubecontainer.ImageSpec) (bool, error) {\n\tstatus, err := m.imageService.ImageStatus(&runtimeApi.ImageSpec{Image: &image.Image})\n\tif err != nil {\n\t\tglog.Errorf(\"ImageStatus for image %q failed: %v\", image, err)"
  },
  {
    "id" : "f9c3ae7b-50cb-4731-8031-75adb9225f1f",
    "prId" : 33870,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33870#pullrequestreview-2588901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abf34599-f158-435d-9ca0-6685086c03fc",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "ImageStats lgtm.\n",
        "createdAt" : "2016-10-03T19:33:51Z",
        "updatedAt" : "2016-10-04T05:57:27Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3ce58b934fb3b47f38b47d98d65071bf737c9f4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +130,134 @@// Notice that current logic doesn't really work for images which share layers (e.g. docker image),\n// this is a known issue, and we'll address this by getting imagefs stats directly from CRI.\n// TODO: Get imagefs stats directly from CRI.\nfunc (m *kubeGenericRuntimeManager) ImageStats() (*kubecontainer.ImageStats, error) {\n\tallImages, err := m.imageService.ListImages(nil)"
  }
]