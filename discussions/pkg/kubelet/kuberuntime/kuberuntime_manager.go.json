[
  {
    "id" : "ba48fd7d-4b80-46ed-acef-2be44bf80eaa",
    "prId" : 102344,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102344#pullrequestreview-690897541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "213356a5-a586-4905-b22b-ff21922b38fa",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "The original fix has race condition anyway.\r\n\r\nEven though CNI, CSI, CRI doesn't see the pod, and return an error, the kubelet may not have seen the pod removal yet, and the pod cache may not have updated.\r\n\r\nWith this change, the race condition window may become bigger (after pod manager sees the pod deletion, the delete needs to be populated into the pod worker). However, the regression is minimal to me.",
        "createdAt" : "2021-06-10T06:30:00Z",
        "updatedAt" : "2021-06-11T07:11:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "abd74922-44bc-4187-956e-a08b9361d98b",
        "parentId" : "213356a5-a586-4905-b22b-ff21922b38fa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The bug is more that CRI/CNI/CSI should return typed errors, and we should ignore typed errors of the type \"pod not found\" when we are confident that those map to \"not removable\".  \r\n\r\nNote that if the pod is marked as deleted due to an observed config change this method does see it - but with context cancellation we would be aborting the sync method before we hit this point (sync methods being interruptible means we are just exiting).  That fixes other problems anyway more straightforwardly.",
        "createdAt" : "2021-06-18T14:33:23Z",
        "updatedAt" : "2021-06-18T14:33:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cdafb97b-910e-41e4-9bd0-fda586e17ad4",
        "parentId" : "213356a5-a586-4905-b22b-ff21922b38fa",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "> The bug is more that CRI/CNI/CSI should return typed errors, and we should ignore typed errors of the type \"pod not found\" when we are confident that those map to \"not removable\".\r\n\r\nYeah.",
        "createdAt" : "2021-06-23T16:42:00Z",
        "updatedAt" : "2021-06-23T17:10:31Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eadd1a9ead7a009a9abfbd603a5efd0560473cc",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +790,794 @@\t\t\t// not a real error.\n\t\t\t// TODO: this is probably not needed now that termination is part of the sync loop\n\t\t\tif m.podStateProvider.ShouldPodContentBeRemoved(pod.UID) {\n\t\t\t\tklog.V(4).InfoS(\"Pod was deleted and sandbox failed to be created\", \"pod\", klog.KObj(pod), \"podUID\", pod.UID)\n\t\t\t\treturn"
  },
  {
    "id" : "a778f508-4c21-49d8-92a4-f3b830630458",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606746303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63629fe5-f929-466e-b229-6908401722da",
        "parentId" : null,
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "```suggestion\r\n\t\t\tklog.V(4).InfoS(\"Convert container of pod failed\", \"runtimeName\", m.runtimeName, \"containerName\", c, \"podUID\", labelledInfo.PodUID, \"err\", err)\r\n```",
        "createdAt" : "2021-03-05T14:44:59Z",
        "updatedAt" : "2021-03-08T05:58:08Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "2714aff4-d1c9-41d0-b349-b7c4764789a0",
        "parentId" : "63629fe5-f929-466e-b229-6908401722da",
        "authorId" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "body" : "here also if we log only container name.",
        "createdAt" : "2021-03-08T05:59:36Z",
        "updatedAt" : "2021-03-08T05:59:36Z",
        "lastEditedBy" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "tags" : [
        ]
      },
      {
        "id" : "afab5e10-a411-4c53-9205-75bb4ab1e69c",
        "parentId" : "63629fe5-f929-466e-b229-6908401722da",
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Yeah this should be containerName to be consistent with other keys.",
        "createdAt" : "2021-03-08T21:23:13Z",
        "updatedAt" : "2021-03-08T21:23:13Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "19d76cb3-8b94-478f-a868-fafdc4d8e27e",
        "parentId" : "63629fe5-f929-466e-b229-6908401722da",
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Oh I see we're logging the whole container?",
        "createdAt" : "2021-03-08T21:59:37Z",
        "updatedAt" : "2021-03-08T21:59:37Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +385,389 @@\t\tconverted, err := m.toKubeContainer(c)\n\t\tif err != nil {\n\t\t\tklog.V(4).InfoS(\"Convert container of pod failed\", \"runtimeName\", m.runtimeName, \"container\", c, \"podUID\", labelledInfo.PodUID, \"err\", err)\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "3b398e90-a5c5-4771-ba0a-1ef9ba1ed609",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606059331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69294e43-ed2a-4dd8-8daa-a0f4462ecbe5",
        "parentId" : null,
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "Could we extract name of container from `spec.container` ? I would prefer to use `\"containerName\", spec.container.Name`, as we shouldn't overload what is put in \"container\".",
        "createdAt" : "2021-03-05T14:51:30Z",
        "updatedAt" : "2021-03-08T05:58:08Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      },
      {
        "id" : "abf12fb2-195d-440e-be70-26b43dd2b2dd",
        "parentId" : "69294e43-ed2a-4dd8-8daa-a0f4462ecbe5",
        "authorId" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "body" : "We can extract container name, but isn't it will be a lack of information if we compare to previous log?",
        "createdAt" : "2021-03-08T05:50:38Z",
        "updatedAt" : "2021-03-08T05:58:08Z",
        "lastEditedBy" : "69f0771a-50bf-4976-bb8b-0e355d554b8b",
        "tags" : [
        ]
      },
      {
        "id" : "93f2bc6d-425b-448b-ac5b-3e2e3248488b",
        "parentId" : "69294e43-ed2a-4dd8-8daa-a0f4462ecbe5",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "Ok, looks like original log passed `%+v` with intention to dump whole container object. Passing it here also make sense.",
        "createdAt" : "2021-03-08T08:32:41Z",
        "updatedAt" : "2021-03-08T08:32:41Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 289,
    "diffHunk" : "@@ -1,1 +826,830 @@\t\tif isInBackOff {\n\t\t\tstartContainerResult.Fail(err, msg)\n\t\t\tklog.V(4).InfoS(\"Backing Off restarting container in pod\", \"containerType\", typeName, \"container\", spec.container, \"pod\", klog.KObj(pod))\n\t\t\treturn err\n\t\t}"
  },
  {
    "id" : "36b01b22-bb6e-431f-af05-4d52efa72224",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606720450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a41d8eca-347f-4e21-a653-13ece35ee83e",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Same thing here I think?",
        "createdAt" : "2021-03-08T21:23:50Z",
        "updatedAt" : "2021-03-08T21:23:51Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +368,372 @@\t\tc := containers[i]\n\t\tif c.Metadata == nil {\n\t\t\tklog.V(4).InfoS(\"Container does not have metadata\", \"container\", c)\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "3aea5e89-bb8a-4d07-a7e0-c83adeccf622",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606755275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb422f23-4220-4e01-9bba-b34d8258ae67",
        "parentId" : null,
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "Aren't we missing `, \"pod\", ` here?",
        "createdAt" : "2021-03-08T22:12:07Z",
        "updatedAt" : "2021-03-08T22:12:07Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +690,694 @@\t\t\tm.recorder.Eventf(ref, v1.EventTypeNormal, events.SandboxChanged, \"Pod sandbox changed, it will be killed and re-created.\")\n\t\t} else {\n\t\t\tklog.V(4).InfoS(\"SyncPod received new pod, will create a sandbox for it\", klog.KObj(pod))\n\t\t}\n\t}"
  },
  {
    "id" : "e51f48f1-f639-4beb-ace1-875f593d8509",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606755533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad3344d8-7bdb-4245-abe3-3c0af86c75b6",
        "parentId" : null,
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "Same here ",
        "createdAt" : "2021-03-08T22:12:29Z",
        "updatedAt" : "2021-03-08T22:12:29Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +697,701 @@\tif podContainerChanges.KillPod {\n\t\tif podContainerChanges.CreateSandbox {\n\t\t\tklog.V(4).InfoS(\"Stopping PodSandbox for pod, will start new one\", klog.KObj(pod))\n\t\t} else {\n\t\t\tklog.V(4).InfoS(\"Stopping PodSandbox for pod, because all other containers are dead\", klog.KObj(pod))"
  },
  {
    "id" : "50912cdf-8291-4548-8c73-0931e14f79bd",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606755648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0881c06d-2dcb-4d73-9b70-4d959e059c00",
        "parentId" : null,
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "And here",
        "createdAt" : "2021-03-08T22:12:39Z",
        "updatedAt" : "2021-03-08T22:12:39Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +699,703 @@\t\t\tklog.V(4).InfoS(\"Stopping PodSandbox for pod, will start new one\", klog.KObj(pod))\n\t\t} else {\n\t\t\tklog.V(4).InfoS(\"Stopping PodSandbox for pod, because all other containers are dead\", klog.KObj(pod))\n\t\t}\n"
  },
  {
    "id" : "b040faa4-d72b-4807-aa58-abd7df6d3f71",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606756698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4cfe4a7-37ef-4ec0-831c-8bf9b2f6c669",
        "parentId" : null,
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "`klog.ErrorS(referr, \"Couldn't make a ref to pod\", \"pod\", klog.KObj(pod))`\r\n",
        "createdAt" : "2021-03-08T22:14:15Z",
        "updatedAt" : "2021-03-08T22:14:15Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +769,773 @@\t\t\tref, referr := ref.GetReference(legacyscheme.Scheme, pod)\n\t\t\tif referr != nil {\n\t\t\t\tklog.ErrorS(referr, \"Couldn't make a ref to pod %q: '%v'\", klog.KObj(pod))\n\t\t\t}\n\t\t\tm.recorder.Eventf(ref, v1.EventTypeWarning, events.FailedCreatePodSandBox, \"Failed to create pod sandbox: %v\", err)"
  },
  {
    "id" : "84fcdb20-7437-4cc5-a6c1-3ef646f5624b",
    "prId" : 99841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99841#pullrequestreview-606757935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1380e840-eec9-47a1-8157-9888105d10ec",
        "parentId" : null,
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "nil -> err",
        "createdAt" : "2021-03-08T22:15:58Z",
        "updatedAt" : "2021-03-08T22:15:58Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c7608379d23922253f409cec3df1bf4fc12f1a",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +934,938 @@\t\tif err := m.runtimeService.StopPodSandbox(podSandbox.ID.ID); err != nil {\n\t\t\tkillSandboxResult.Fail(kubecontainer.ErrKillPodSandbox, err.Error())\n\t\t\tklog.ErrorS(nil, \"Failed to stop sandbox\", \"podSandboxID\", podSandbox.ID)\n\t\t}\n\t}"
  },
  {
    "id" : "5c5841ab-0469-4a25-a94e-fd3878fc01e2",
    "prId" : 94196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94196#pullrequestreview-525300730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ade11481-bb7b-4a2e-b188-bffb7e3053d1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should we check/complain if the flags are set and the feature is off? that could be confusing as to why the feature is not working",
        "createdAt" : "2020-11-05T06:22:17Z",
        "updatedAt" : "2020-11-10T18:44:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "75bc6773-6f1d-4baf-ba60-fe592ced1cc9",
        "parentId" : "ade11481-bb7b-4a2e-b188-bffb7e3053d1",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "added a check for this",
        "createdAt" : "2020-11-06T16:19:44Z",
        "updatedAt" : "2020-11-10T18:44:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3192c31491228926f3dd5c319fc70e9c42e6aa6",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +227,231 @@\t\t}\n\t}\n\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.KubeletCredentialProviders) && (imageCredentialProviderConfigFile != \"\" || imageCredentialProviderBinDir != \"\") {\n\t\tklog.Warningf(\"Flags --image-credential-provider-config or --image-credential-provider-bin-dir were set but the feature gate %s was disabled, these flags will be ignored\","
  },
  {
    "id" : "4e94732a-41d2-4268-8bfc-1febc3339131",
    "prId" : 92614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92614#pullrequestreview-440578397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "another nit: wouldn't it be more logical to move the loop back here - after the `Init` containers check. ",
        "createdAt" : "2020-06-29T20:38:10Z",
        "updatedAt" : "2020-07-07T14:51:07Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "86b59305-d4a3-41c0-b1b1-2d12834a59dc",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "I think it's important to change ordering back to make sure that any changes related to containers start/stop are only applied after all Init container complete. Just to avoid potential issues in a future if more logic will be added",
        "createdAt" : "2020-06-29T21:06:50Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "9389e5a7-025b-4ef7-a6e0-ed6559db5795",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "`containersToStart` is also used to determine whether there's a need to create a sandbox. Wouldn't it cause repeated computation if moving the loop back here?\r\n",
        "createdAt" : "2020-06-30T02:11:27Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "fd8dbf89-fd8e-4191-815d-ff1876a7461b",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "From the logic here - if the `if len(pod.Spec.InitContainers) != 0 {` than we need to start an `Init` container. So this condition check should go before any container-related ones. I was imagining situation when  `len(pod.Spec.Containers)` is `0`, i.e. pod has no containers, but has Init containers. In this case if order of checks will be as it's written, Init containers wouldn't run. The situation when there are no containers in a pod seems to be impossible today, thus it's just a recommendation to swap these checks. In anticipation that one day more conditions may be added above which semantically needs to run after all Init containers logic complete.  ",
        "createdAt" : "2020-06-30T03:25:13Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "30b1c43d-0577-42f3-aac4-d06f8b5676b7",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "Thanks for the explanation. I understand the concern now, but swapping them back could cause sandbox still being recreated if any initContainer is present. The current workflow of a Pod with initContainer is and would be kept as below:\r\n1. create sandbox, create init container, create container (expected actions)\r\n2. all containers succeeded, delete sandbox (expected actions)\r\n3. create sandbox, create init container (unexpected actions)\r\n\r\nIf taking potential no container case into consideration, could we add a condition to ensure this is not the first time to create sandbox like https://github.com/kubernetes/kubernetes/blob/e7ca64fbe16d0c4b6c7b36aecde9cd75042b2828/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L490",
        "createdAt" : "2020-06-30T04:00:32Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "7fd495d9-fd9d-4f0a-88ba-c9382cfe3517",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "w.r.t. Sergey's comment, is it possible that a pod has:\r\n\r\nsome init containers (> 0)\r\nno container\r\nsome Ephemeral Containers (> 0)",
        "createdAt" : "2020-06-30T04:31:50Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "82304a64-a493-465c-b6f3-3163cf9b57d2",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "To ensure all initContainers can run once successfully regardless of there are containers to start, I added one more condition for not creating sandbox. It should address the potential case \"init containers (> 0), no container\".\r\n\r\nFor the case of Ephemeral Containers (> 0), I think it's not affected by this PR. It was never created along with (re-)creating sandbox, and was handled when `createPodSandbox` is false after initContainer or normal container became running. The behavior is kept as it is.\r\n",
        "createdAt" : "2020-06-30T13:37:51Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "26d6a41a-5dec-4e50-b6c1-a6926f05f8bc",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "I made a comment above. Suggestion is to minimize the introduced changes.",
        "createdAt" : "2020-06-30T20:42:15Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "37b5b49e-b201-4c05-be6c-af89ad843866",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "Also, maybe introducing a test with the situaiton @tedyu outlined will be beneficial. So future changes will take it into account.",
        "createdAt" : "2020-06-30T20:44:11Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "d6016b08-22d4-467e-bb4a-9e35d348fd16",
        "parentId" : "7ac76a83-d746-44ba-8588-bc2ce05f2325",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "There are already some tests to cover a Pod in `TestComputePodActionsWithInitAndEphemeralContainers` for example:\r\nhttps://github.com/kubernetes/kubernetes/blob/e7ca64fbe16d0c4b6c7b36aecde9cd75042b2828/pkg/kubelet/kuberuntime/kuberuntime_manager_test.go#L1265\r\nAnd I have added `Create a new pod sandbox if the pod sandbox is dead, init container failed and RestartPolicy == OnFailure` to it to ensure sandbox can be recreated as long as initialization is not done regardless of regular containers and ephemeral containers' status.\r\nI didn't really delete regular containers from the pod spec of the tests, thinking it sounds strange to have a case with illegal input, but I think they should cover the situation @tedyu outlined implicitly",
        "createdAt" : "2020-07-01T06:28:44Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b082f54f5f4177231d8e56283f41295b3cdd53",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +523,527 @@\t\t\treturn changes\n\t\t}\n\t\tchanges.ContainersToStart = containersToStart\n\t\treturn changes\n\t}"
  },
  {
    "id" : "07b0487f-fe5f-42c3-b4d9-6250d1322de0",
    "prId" : 92614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92614#pullrequestreview-440557197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bc26641-c529-486f-8dd1-f804b33e6d41",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "perhaps this can be simplified. If you will remove the return statement from here and the new condition with the call to `findNextInitContainerToRun`, everything suppose to be working just fine. If there are Init containers, `changes` will be returned from the next if condition with the `changes.CreateSandbox = false` and `changes.NextInitContainerToStart` populated. It will save on additional call to `findNextInitContainerToRun ` and will minimize the new changes",
        "createdAt" : "2020-06-30T20:41:37Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "89d28ea4-0e35-4a22-8be0-d40d5d2852f8",
        "parentId" : "4bc26641-c529-486f-8dd1-f804b33e6d41",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "In this branch `if createPodSandbox`, it's supposed to (re-)create sandbox because it doesn't exist or it's dead or a changed is detected, and we are only adding exceptions to stop that if all things are done, like the existing exception: `if !shouldRestartOnFailure(pod) && attempt != 0 && len(podStatus.ContainerStatuses) != 0`  for the case that a Pod whose RestartPolicy is Never and have created sandbox and containers before.\r\nIt's supposed to either return `CreateSandbox = false` or `CreateSandbox = true` with `NextInitContainerToStart` or `ContainersToStart`.\r\nIf the returned changes is `CreateSandbox = false` with `NextInitContainerToStart`, there would be no sandbox for the init container.",
        "createdAt" : "2020-07-01T05:34:08Z",
        "updatedAt" : "2020-07-07T14:51:08Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b082f54f5f4177231d8e56283f41295b3cdd53",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +514,518 @@\t\t\tif done {\n\t\t\t\tchanges.CreateSandbox = false\n\t\t\t\treturn changes\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "3fc12720-e3f7-46e3-8a6d-ad5cde5bdc51",
    "prId" : 92325,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92325#pullrequestreview-436128112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02915ade-3182-4ede-b5f7-11835da27a15",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "It can be something like this. Human readable error first before the long structure describing the image. But again, it is a small suggestion\r\n\r\n```suggestion\r\n\t\t\t\tklog.V(3).Infof(\"Image pull failed for %v %+v in pod %v: %s\", typeName, spec.container, format.Pod(pod), msg)\r\n```",
        "createdAt" : "2020-06-23T20:25:40Z",
        "updatedAt" : "2020-06-23T20:25:40Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "2afc8e0eabee3eedfe3f5824bdadb5a01b0e5872",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +794,798 @@\t\t\tswitch {\n\t\t\tcase err == images.ErrImagePullBackOff:\n\t\t\t\tklog.V(3).Infof(\"%v %+v start failed in pod %v: %v: %s\", typeName, spec.container, format.Pod(pod), err, msg)\n\t\t\tdefault:\n\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"%v %+v start failed in pod %v: %v: %s\", typeName, spec.container, format.Pod(pod), err, msg))"
  },
  {
    "id" : "61c84baf-3654-48c0-856b-7ed8f06680d6",
    "prId" : 84191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84191#pullrequestreview-328768512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbfdf47d-8cdc-4138-9d5b-cd6cbfefe1f2",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "As long as you're making this change, can you also fix line 264 to call `getTypedVersion()` too?\r\n\r\nAlso, that will cause double-logging, since that function logs the error and also returns it (which shouldn't be done), so can you also fix those functions to skip logging the error and just add the context to the return value?",
        "createdAt" : "2019-12-06T22:44:58Z",
        "updatedAt" : "2019-12-09T07:32:19Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "0770fdaf-2b3c-4fbe-9b02-b7c5bb7dce8b",
        "parentId" : "cbfdf47d-8cdc-4138-9d5b-cd6cbfefe1f2",
        "authorId" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "body" : "Sure, let me handle it",
        "createdAt" : "2019-12-09T07:19:52Z",
        "updatedAt" : "2019-12-09T07:32:19Z",
        "lastEditedBy" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "tags" : [
        ]
      },
      {
        "id" : "5ad3973d-4e90-47fc-85e2-8cd0d9c77017",
        "parentId" : "cbfdf47d-8cdc-4138-9d5b-cd6cbfefe1f2",
        "authorId" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "body" : "@tallclair code updated, PTAL",
        "createdAt" : "2019-12-09T09:05:01Z",
        "updatedAt" : "2019-12-09T09:05:01Z",
        "lastEditedBy" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "babdcd0d1493633904bf1b3509279e02192e227c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +189,193 @@\t}\n\n\ttypedVersion, err := kubeRuntimeManager.getTypedVersion()\n\tif err != nil {\n\t\tklog.Errorf(\"Get runtime version failed: %v\", err)"
  },
  {
    "id" : "c63475ef-d7dd-4cda-b98a-08cb24308b48",
    "prId" : 84191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84191#pullrequestreview-328948341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9899c3d2-1083-40f2-bec7-d8c167398c01",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "If anyone else is curious why capitalization changed here, looks like best practice is for logs to start with capital, but errors to not: https://github.com/kubernetes/kubernetes/issues/15863.",
        "createdAt" : "2019-12-09T12:18:25Z",
        "updatedAt" : "2019-12-09T12:18:38Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      },
      {
        "id" : "718eba82-0715-4611-9762-a240ba811fa6",
        "parentId" : "9899c3d2-1083-40f2-bec7-d8c167398c01",
        "authorId" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "body" : "@mattjmcnaughton thanks for the explanation ",
        "createdAt" : "2019-12-09T14:16:28Z",
        "updatedAt" : "2019-12-09T14:16:29Z",
        "lastEditedBy" : "a84a403c-4819-47a2-b056-734d2d1fe5d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "babdcd0d1493633904bf1b3509279e02192e227c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +254,258 @@\ttypedVersion, err := m.runtimeService.Version(kubeRuntimeAPIVersion)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"get remote runtime typed version failed: %v\", err)\n\t}\n\treturn typedVersion, nil"
  },
  {
    "id" : "5b54a96f-cc58-4307-8a19-ae946ead0e57",
    "prId" : 83123,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83123#pullrequestreview-302919942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7152ec35-ad18-4609-b13d-7ac908aa267d",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Please update the comment https://github.com/kubernetes/kubernetes/pull/83123/files#diff-8da51ab012ecbdf2b013ecbcf1c37033R684",
        "createdAt" : "2019-10-01T17:05:21Z",
        "updatedAt" : "2019-10-25T16:19:02Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "3332f198-08e2-4cdf-a335-60b4309f3d57",
        "parentId" : "7152ec35-ad18-4609-b13d-7ac908aa267d",
        "authorId" : "62eb404a-5fe6-4b29-afab-583b57ce8f19",
        "body" : "done!",
        "createdAt" : "2019-10-16T22:45:46Z",
        "updatedAt" : "2019-10-25T16:19:02Z",
        "lastEditedBy" : "62eb404a-5fe6-4b29-afab-583b57ce8f19",
        "tags" : [
        ]
      }
    ],
    "commit" : "af4d18ccf9330a8dd7354c5441ccd841d469cee5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +775,779 @@\t\tklog.V(4).Infof(\"Creating %v %+v in pod %v\", typeName, container, format.Pod(pod))\n\t\t// NOTE (aramase) podIPs are populated for single stack and dual stack clusters. Send only podIPs.\n\t\tif msg, err := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, podIPs); err != nil {\n\t\t\tstartContainerResult.Fail(err, msg)\n\t\t\t// known errors that are logged in other places are logged at higher levels here to avoid"
  },
  {
    "id" : "434eadd4-4121-461a-a37a-9fad6722c993",
    "prId" : 79451,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79451#pullrequestreview-255334358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc3c3281-e98c-475c-8a99-772006059b38",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "Should we also add check `len(podStatus.InitContainerStatuses) != 0`?",
        "createdAt" : "2019-06-27T01:55:22Z",
        "updatedAt" : "2019-06-27T01:55:23Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "81c087ae-029e-473d-aab1-4841b66d8e5b",
        "parentId" : "fc3c3281-e98c-475c-8a99-772006059b38",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "This is a kubelet's internal type; there's no initcontianerstatuses.",
        "createdAt" : "2019-06-27T16:13:40Z",
        "updatedAt" : "2019-06-27T16:13:41Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "16a6d0cc-c4ca-4199-b96f-c7a92872d4d5",
        "parentId" : "fc3c3281-e98c-475c-8a99-772006059b38",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The unit tests added show that this would work for init containers too.",
        "createdAt" : "2019-06-27T16:14:17Z",
        "updatedAt" : "2019-06-27T16:14:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fac48f86ad0a2e417bcdb518c62cc3fbcf9ee1f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +473,477 @@\t// killed and recreated, and init containers should be purged.\n\tif createPodSandbox {\n\t\tif !shouldRestartOnFailure(pod) && attempt != 0 && len(podStatus.ContainerStatuses) != 0 {\n\t\t\t// Should not restart the pod, just return.\n\t\t\t// we should not create a sandbox for a pod if it is already done."
  },
  {
    "id" : "576b5740-661b-4717-b6ff-9de7af87a993",
    "prId" : 59484,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59484#pullrequestreview-269909316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7e30227-869e-4df9-994e-1fb83d8c2545",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Why discarding the returned error?",
        "createdAt" : "2019-08-01T21:34:59Z",
        "updatedAt" : "2019-08-20T17:52:06Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "2d6454bc-99e5-48c0-a93a-0ebbcee37c3f",
        "parentId" : "b7e30227-869e-4df9-994e-1fb83d8c2545",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "That's the current behavior: start the container, log any errors, move on to the next container. The logging is now done in `start()`\r\n\r\nI should mention that the only behavior here that I (intentionally) changed was that the log spam filtering for `ErrImagePullBackOff` was previously only applied to regular containers and not init containers.",
        "createdAt" : "2019-08-02T19:31:12Z",
        "updatedAt" : "2019-08-20T17:52:06Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb3976c02ba5040fe4194d39f34045038caff28e",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +813,817 @@\t// Step 7: start containers in podContainerChanges.ContainersToStart.\n\tfor _, idx := range podContainerChanges.ContainersToStart {\n\t\tstart(\"container\", &pod.Spec.Containers[idx])\n\t}\n"
  },
  {
    "id" : "5f408dc6-4b1d-4cea-bd70-1b5ee1da0bfd",
    "prId" : 52363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52363#pullrequestreview-62531685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "parentId" : null,
        "authorId" : "7a97283c-9495-4a1b-82e7-4e34839b21c1",
        "body" : "what will happen when `containerStatus.State == kubecontainer.ContainerStateCreated` ?",
        "createdAt" : "2017-09-13T02:35:49Z",
        "updatedAt" : "2017-09-13T04:01:16Z",
        "lastEditedBy" : "7a97283c-9495-4a1b-82e7-4e34839b21c1",
        "tags" : [
        ]
      },
      {
        "id" : "aebd09f2-bf51-49c1-9bde-3d1420550f37",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "body" : "The container will be restarted as per https://github.com/kubernetes/kubernetes/blob/ccaaf5cad5901f26283bfa8c2b230dc1dc3579b4/pkg/kubelet/container/helpers.go#L77. Also, see https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L480.",
        "createdAt" : "2017-09-13T03:46:33Z",
        "updatedAt" : "2017-09-13T04:01:16Z",
        "lastEditedBy" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "tags" : [
        ]
      },
      {
        "id" : "dc1daf0e-948e-448c-a12e-9feb07d84366",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "The same question could be asked for the existing condition in the next block. I believe this is because in the runtime, `startContainer` both creates and starts the container so we won't see the created state from this sync loop.",
        "createdAt" : "2017-09-13T04:02:43Z",
        "updatedAt" : "2017-09-13T04:02:43Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "a7832fe7-f435-48b7-a0ac-1b2c8d18b0e6",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "To be more explicit, we could check for only the terminal container states. WDYT @balajismaniam ?",
        "createdAt" : "2017-09-13T04:03:47Z",
        "updatedAt" : "2017-09-13T04:03:48Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "886c55ce-dd7b-4611-b782-e00624a54066",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "It would be even nicer if there were a helper predicate to determine which container states are actually terminal. Then if a new one is added we wouldn't have to track down and re-vet all the conditions. Nice to have, we can propose that in a follow-up maybe.",
        "createdAt" : "2017-09-13T04:10:53Z",
        "updatedAt" : "2017-09-13T04:10:53Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "d09c8fa5-fb34-47d1-a802-29e748930051",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "body" : "@ConnorDoyle I think we should leave the code as is (i.e., check for all non-running container states). It will help in a scenarios where `createContainer` + pre-start lifecycle hook is called but not `startContainer` (might not be possible but it will be useful to guard against it). Also, if the container ends-up in create or unknown state, it will be restarted anyways.",
        "createdAt" : "2017-09-13T04:21:53Z",
        "updatedAt" : "2017-09-13T04:21:53Z",
        "lastEditedBy" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "tags" : [
        ]
      },
      {
        "id" : "edfeeaff-5bab-409f-aee9-ee01b977ef5c",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "body" : "Agree with the helper predicate. We can propose it. ",
        "createdAt" : "2017-09-13T04:32:12Z",
        "updatedAt" : "2017-09-13T04:32:12Z",
        "lastEditedBy" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "tags" : [
        ]
      },
      {
        "id" : "88beea37-cd0b-4160-adcc-63ae571a6c58",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "is it possible that this hook gets called multiple times for the same container?",
        "createdAt" : "2017-09-13T14:59:17Z",
        "updatedAt" : "2017-09-13T14:59:17Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "ce6e2b2b-cb7b-4fb3-a975-59ef7ddf851c",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "body" : "Yes, it is possible. But the func is idempotent and hence safe to call here. ",
        "createdAt" : "2017-09-13T15:14:26Z",
        "updatedAt" : "2017-09-13T15:15:14Z",
        "lastEditedBy" : "06c8ba1e-f06e-4e0f-b9bd-1533747adc93",
        "tags" : [
        ]
      },
      {
        "id" : "83538691-06c2-4060-b463-3b8ad450586e",
        "parentId" : "4368444d-5a29-45e2-a2c2-11be09f65e73",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Yes, this is already the case, since we call RemoveContainer from both PreStopContainer and PostStopContainer.",
        "createdAt" : "2017-09-13T18:23:34Z",
        "updatedAt" : "2017-09-13T18:23:34Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2e356964ad1ea4fa67d6f560b7ba43a5e4b5923",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +479,483 @@\t\t// allocated cpus are released immediately. If the container is restarted, cpus will be re-allocated\n\t\t// to it.\n\t\tif containerStatus != nil && containerStatus.State != kubecontainer.ContainerStateRunning {\n\t\t\tif err := m.internalLifecycle.PostStopContainer(containerStatus.ID.ID); err != nil {\n\t\t\t\tglog.Errorf(\"internal container post-stop lifecycle hook failed for container %v in pod %v with error %v\","
  },
  {
    "id" : "7f56b7c8-d66a-4ab0-8225-bcb7f8d20a11",
    "prId" : 48970,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48970#pullrequestreview-63431968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9d7a8e0-6b8f-4784-9dda-09a6ad9a7495",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Do we know why IP address is not allocated for the pod? My concern is that we paper-over the real issue here. But I guess this is best solution we could come up so far, I am ok with it as a temporary workaround.",
        "createdAt" : "2017-09-18T17:40:54Z",
        "updatedAt" : "2017-09-18T17:40:55Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "dbc8801f-57a9-434d-90d3-b0a580130e1f",
        "parentId" : "b9d7a8e0-6b8f-4784-9dda-09a6ad9a7495",
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "We know of at least one scenario, which this PR is meant to fix - it's a condition in which the kubelet gets restarted during CNI execution and so the sandbox exists but doesn't yet have an IP address.",
        "createdAt" : "2017-09-18T17:45:25Z",
        "updatedAt" : "2017-09-18T17:45:25Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      }
    ],
    "commit" : "94bf2b0ccf166da407effe6c759eb7553cd32454",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +398,402 @@\n\t// Needs to create a new sandbox when the sandbox does not have an IP address.\n\tif !kubecontainer.IsHostNetworkPod(pod) && sandboxStatus.Network.Ip == \"\" {\n\t\tglog.V(2).Infof(\"Sandbox for pod %q has no IP address.  Need to start a new one\", format.Pod(pod))\n\t\treturn true, sandboxStatus.Metadata.Attempt + 1, sandboxStatus.Id"
  },
  {
    "id" : "c04e9ce3-fdc0-4df6-87a4-059ba54ae56a",
    "prId" : 47599,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47599#pullrequestreview-56513768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aedf0d86-52f3-402c-98d9-04783c778b8a",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nit: `++`",
        "createdAt" : "2017-08-16T01:24:54Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "47f8bf76-481a-46ee-9ad5-7fbd0c5a79d0",
        "parentId" : "aedf0d86-52f3-402c-98d9-04783c778b8a",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think both are perfectly fine unless this documented as convention(?)",
        "createdAt" : "2017-08-16T02:07:10Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "152d8b9d96627ef2d8f440bda01104fc621ff69c",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +492,496 @@\t\t} else {\n\t\t\t// Keep the container.\n\t\t\tkeepCount += 1\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "9a154616-8fac-40e2-8e25-4c320554dcc4",
    "prId" : 47599,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47599#pullrequestreview-56513768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ddb95e-1285-47bf-8ce5-d10fd0842c49",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "We purge and prune, add an options seems cleaner.",
        "createdAt" : "2017-08-16T01:39:38Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "42c57227-70a2-4cb8-a68f-a3b79402503f",
        "parentId" : "c7ddb95e-1285-47bf-8ce5-d10fd0842c49",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Still think it's clear to keep both functions.",
        "createdAt" : "2017-08-16T02:07:30Z",
        "updatedAt" : "2017-08-16T22:27:39Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "152d8b9d96627ef2d8f440bda01104fc621ff69c",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +579,583 @@\t// This is an optmization because container removals are typically handled\n\t// by container garbage collector.\n\tm.pruneInitContainersBeforeStart(pod, podStatus)\n\n\t// We pass the value of the podIP down to generatePodSandboxConfig and"
  },
  {
    "id" : "bb418e57-2baf-4971-83fb-46646db62abc",
    "prId" : 35839,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35839#pullrequestreview-6949167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e395bc-83d7-48a5-b3c7-5f89122b0f68",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "nit: do we need to report node events if there are other not ready conditions?\n",
        "createdAt" : "2016-11-02T06:23:31Z",
        "updatedAt" : "2016-11-05T07:02:23Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "45e15ca4-c62c-40a4-a8fc-cfda181ab40d",
        "parentId" : "86e395bc-83d7-48a5-b3c7-5f89122b0f68",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "The code is temporary, I'll send another PR/commit soon to really use the conditions. I'll deal with then.\n",
        "createdAt" : "2016-11-02T17:42:26Z",
        "updatedAt" : "2016-11-05T07:02:23Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "ef6c0d13-ca34-4fc8-99ac-d7d1501a8895",
        "parentId" : "86e395bc-83d7-48a5-b3c7-5f89122b0f68",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "LGTM\n",
        "createdAt" : "2016-11-03T04:12:30Z",
        "updatedAt" : "2016-11-05T07:02:23Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "90fe0c59942f5890cd9398441c1c4f057f5fb187",
    "line" : null,
    "diffHunk" : "@@ -1,1 +275,279 @@\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn toKubeRuntimeStatus(status), nil\n}"
  },
  {
    "id" : "6de37128-8e3d-4609-8f70-6f6faeefeb05",
    "prId" : 35490,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35490#pullrequestreview-6477626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d4d0e80-dd17-4e7a-affe-be1b7a00bd9e",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "We can have a more generic method (like the one in CRI) for updating configs. Shouldn't be a problem.\n",
        "createdAt" : "2016-10-31T17:08:14Z",
        "updatedAt" : "2016-11-01T01:24:36Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2941aea88e80e94f2698241a4ac9925145664470",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +959,963 @@// with the podCIDR supplied by the kubelet.\nfunc (m *kubeGenericRuntimeManager) UpdatePodCIDR(podCIDR string) error {\n\t// TODO(#35531): do we really want to write a method on this manager for each\n\t// field of the config?\n\tglog.Infof(\"updating runtime config through cri with podcidr %v\", podCIDR)"
  },
  {
    "id" : "f55effe3-5cf9-4c92-86fd-345018eabcd2",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-2258014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1e08c57-ae36-4feb-b90e-e5c0b9198801",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "If init containers failed, why should we even bother checking the Spec.Containers???\nThere should not be any containers running, right?\n",
        "createdAt" : "2016-09-30T00:55:29Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "b61ca5ee-ab6d-45e4-a096-0213fe401f15",
        "parentId" : "c1e08c57-ae36-4feb-b90e-e5c0b9198801",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "There could. Refer https://github.com/kubernetes/kubernetes/pull/33363#issuecomment-250353318. \n",
        "createdAt" : "2016-09-30T01:13:54Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +436,440 @@\tchanges.InitFailed = initFailed\n\n\t// check the status of containers.\n\tfor index, container := range pod.Spec.Containers {\n\t\tif sandboxChanged {"
  },
  {
    "id" : "11691790-2f37-408c-8ad0-6469738e14a0",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-2258469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41bce777-43a9-43a3-bf57-a170401f0c80",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Under which scenario will this happen? Any examples?\n",
        "createdAt" : "2016-09-30T01:21:06Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +489,493 @@\t}\n\n\t// Don't keep init containers if they are the only containers to keep.\n\tif !sandboxChanged && len(changes.ContainersToStart) == 0 && len(changes.ContainersToKeep) == 0 {\n\t\tchanges.InitContainersToKeep = make(map[kubecontainer.ContainerID]int)"
  },
  {
    "id" : "8d504c8a-1705-45e2-b29c-ab94b4848b02",
    "prId" : 33363,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33363#pullrequestreview-2262515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d72e0484-5fc7-41f2-96ff-d95283f940c5",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "New function name looks fine, but I wonder why we need to do pod status again to know the next init container to start?\nShouldn't computeChanges() do the job?\n",
        "createdAt" : "2016-09-30T01:48:25Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "f25324a5-e7b3-4a8b-a67c-421489d956c5",
        "parentId" : "d72e0484-5fc7-41f2-96ff-d95283f940c5",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Because of `m.pruneInitContainersBeforeStart`.\n",
        "createdAt" : "2016-09-30T02:33:21Z",
        "updatedAt" : "2016-09-30T02:49:16Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d42d450f8b3b0f8d69e1b1afb47d568819250f6",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +656,660 @@\n\t// Step 5: start init containers.\n\tstatus, next, done := findNextInitContainerToRun(pod, podStatus)\n\tif status != nil && status.ExitCode != 0 {\n\t\t// container initialization has failed, flag the pod as failed"
  },
  {
    "id" : "5a786034-8079-49e7-84d8-21bcb5061dfc",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a868a42-f91b-4573-af8c-a981f35de91b",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I must missed the reason for such change?\n",
        "createdAt" : "2016-09-07T00:47:23Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "a072a72b-4348-4df0-b04e-e5b37bd875c1",
        "parentId" : "8a868a42-f91b-4573-af8c-a981f35de91b",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Items in sandboxes are pointers, it makes a copy of those items to avoid changing them in following codes.\n",
        "createdAt" : "2016-09-07T02:05:41Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "6191c37e-21b5-474f-8a5e-befdcd9fe6b1",
        "parentId" : "8a868a42-f91b-4573-af8c-a981f35de91b",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@feiskyer I didn't get it. `s := sandboxes[i]` is still a pointer, isn't it?\n",
        "createdAt" : "2016-09-07T07:15:26Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "afe34bd4-44bc-4bdf-bc81-8951d1e1c804",
        "parentId" : "8a868a42-f91b-4573-af8c-a981f35de91b",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I don't think it matters in this case whether you do or not really in this case. I suspect it might be defensive programming due to the surprising behaviour of https://play.golang.org/p/rRCAgE_Wnz ... but since we don't take the address of 's' anywhere and it's already a pointer, it really doesn't matter either way imo.\n",
        "createdAt" : "2016-09-08T00:26:46Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "71750016-3b55-430f-a0c7-9f9e5d601716",
        "parentId" : "8a868a42-f91b-4573-af8c-a981f35de91b",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "@euank Exactly.\n",
        "createdAt" : "2016-09-10T10:49:52Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\treturn nil, err\n\t}\n\tfor i := range sandboxes {\n\t\ts := sandboxes[i]\n\t\tif s.Metadata == nil {"
  },
  {
    "id" : "714317fd-5e7a-49e6-8881-1aa5201a2789",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca9a46e-eef4-44b5-a55c-0e956e3ea662",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "TODO this shouldn't be `ContainerID`\n",
        "createdAt" : "2016-09-07T00:50:28Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "f4010ed4-9acf-42d9-a99a-4c62cefa72a6",
        "parentId" : "6ca9a46e-eef4-44b5-a55c-0e956e3ea662",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Already added the TODO to NetworkPlugin interface, see https://github.com/kubernetes/kubernetes/pull/31847/files#diff-6d531dbca1d7006455f70f94a31c4829R71.\n",
        "createdAt" : "2016-09-07T02:07:07Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +540,544 @@\t\t\t// Setup pod network plugin with sandbox id\n\t\t\t// TODO: rename the last param to sandboxID\n\t\t\terr = m.networkPlugin.SetUpPod(pod.Namespace, pod.Name, kubecontainer.ContainerID{\n\t\t\t\tType: m.runtimeName,\n\t\t\t\tID:   podSandboxID,"
  },
  {
    "id" : "ac93c4b8-a614-40c9-93e8-b68f795556ca",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2a16b05-e9f0-4220-bab1-898967423286",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "why metadata could be nil?\n",
        "createdAt" : "2016-09-07T00:55:38Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "88c3734d-b908-4268-8395-e7539433d48d",
        "parentId" : "b2a16b05-e9f0-4220-bab1-898967423286",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Just a check to make sure runtime won't panic kubelet.\n",
        "createdAt" : "2016-09-07T02:07:37Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +248,252 @@\tfor i := range sandboxes {\n\t\ts := sandboxes[i]\n\t\tif s.Metadata == nil {\n\t\t\tglog.V(4).Infof(\"Sandbox does not have metadata: %+v\", s)\n\t\t\tcontinue"
  },
  {
    "id" : "9dffc498-492e-4506-b825-c1daa64dc029",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190b73f7-2b14-4fb0-98ad-21bff950de2e",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "This sync pod function is too giant (>150 lines), I know it's copied from the dockertools package and a deep refactor will be a lot of work, but we can at least take this chance to split the function into smaller modules.\n",
        "createdAt" : "2016-09-07T21:13:12Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "41210991-7524-4a8d-9081-470a61c747c3",
        "parentId" : "190b73f7-2b14-4fb0-98ad-21bff950de2e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "My first suggestion is to add a doc to express what the function is actually doing in steps.\nThen probably split the function into steps.\nOtherwise it's really hard for readers to reason about what's going on here..\n",
        "createdAt" : "2016-09-07T21:19:53Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "6c2dd2f9-3601-4bfa-bcd4-2fb85e7b76f3",
        "parentId" : "190b73f7-2b14-4fb0-98ad-21bff950de2e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Something like:\n\n```\n1. Compute changes\n2. if need_to_kill_pod {\n       Kill pod\n   } else {\n       Kill any containers that should not be running\n   }\n\n   // or:\n   // 2.1 Kill any containers that should not be running\n   // 2.2 Kill pod sandbox if necessary\n\n   // More straightforward logic, maybe slightly performance regression \n   // on rkt/hyper runtime because otherwise it can kill the pod without killing \n   // each container.\n   // But I doubt the difference is noticeable.\n\n3. Create sandbox if necessary\n4. Create necessary containers\n```\n",
        "createdAt" : "2016-09-07T21:31:12Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "0354eb35-b468-45e5-a79e-6238600c3edc",
        "parentId" : "190b73f7-2b14-4fb0-98ad-21bff950de2e",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "done.\n",
        "createdAt" : "2016-09-10T15:25:50Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +459,463 @@//\n// TODO: support init containers in SyncPod.\nfunc (m *kubeGenericRuntimeManager) SyncPod(pod *api.Pod, _ api.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []api.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n\t// Step 1: Compute sandbox and container changes.\n\tpodContainerChanges := m.computePodContainerChanges(pod, podStatus)"
  },
  {
    "id" : "0ae7d6ef-e593-49c3-9530-3e530b220f6f",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc2f747b-d4ab-4ac1-8e9b-0e1911beecc0",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "missing docs of the function.\n",
        "createdAt" : "2016-09-07T21:20:51Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "4c89337b-fa11-4d85-92aa-a91f3382d73d",
        "parentId" : "bc2f747b-d4ab-4ac1-8e9b-0e1911beecc0",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "done.\n",
        "createdAt" : "2016-09-10T15:25:57Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +372,376 @@\n// computePodContainerChanges checks whether the pod spec has changed and returns the changes if true.\nfunc (m *kubeGenericRuntimeManager) computePodContainerChanges(pod *api.Pod, podStatus *kubecontainer.PodStatus) podContainerSpecChanges {\n\tglog.V(5).Infof(\"Syncing Pod %q: %+v\", format.Pod(pod), pod)\n"
  },
  {
    "id" : "697f08f4-9a74-40ff-8a44-8ff6ab7d3d3f",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c87d4bf8-aaa8-4ba5-81d2-6c6e8bdd79d4",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I think the comment `Needs to create a new sandbox when readySandboxCount > 1 but the latest sandbox is not ready.` will translate to:\n\nif readySandboxCount > 1 **&&** sandboxStatus.GetState() != runtimeApi.PodSandBoxState_READY ?\n",
        "createdAt" : "2016-09-13T20:36:47Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "c3b4e89c-1bea-4c1b-9266-54aef36d486b",
        "parentId" : "c87d4bf8-aaa8-4ba5-81d2-6c6e8bdd79d4",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "y, will fix.\n",
        "createdAt" : "2016-09-14T02:18:30Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +358,362 @@\t// Needs to create a new sandbox when readySandboxCount > 1 or the ready sandbox is not the latest one.\n\tsandboxStatus := podStatus.SandboxStatuses[0]\n\tif readySandboxCount > 1 || sandboxStatus.GetState() != runtimeApi.PodSandBoxState_READY {\n\t\treturn true, sandboxStatus.Metadata.GetAttempt() + 1, sandboxStatus.GetId()\n\t}"
  },
  {
    "id" : "0a4ab56a-f0aa-4d3a-9eef-8e4d944b4634",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6da41684-98cc-4b64-8003-91b497b6e9cd",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Need to document what these two fields are, what does the int and the string represent.\n",
        "createdAt" : "2016-09-13T20:42:17Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "800dbbf0-04af-43ae-bd13-b77ac6ef9898",
        "parentId" : "6da41684-98cc-4b64-8003-91b497b6e9cd",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "will do.\n",
        "createdAt" : "2016-09-14T02:39:01Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +331,335 @@\t// the key is index of the container inside pod.Spec.Containers, while\n\t// the value is a message indicates why the container needs to start.\n\tContainersToStart map[int]string\n\t// ContainersToKeep keeps a map of containers that need to be kept as is, note that\n\t// the key is the container ID of the container, while"
  },
  {
    "id" : "1ac4ed86-3eb4-4f51-9012-4bea7733006e",
    "prId" : 31847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa8bb5f0-cc69-4c39-a401-c034f2e5f161",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "The whole if-else logic is over-complicated in my opinion. This is basically because the result of `computePodContainerChanges` doesn't provide complete information, thus it requires us to do some  @re-computation.\n\nSo how about we modify the `computePodContainerChanges` so that it returns:\n- Whether a pod sandbox needs to be killed (let's count the \"containers to keep\", \"containers to start\" as well)\n- Whether any containers needs to be killed\n- Whether a pod sandbox needs to be started  (let's count the \"containers to keep\", \"containers to start\" as well)\n- Whether any containers needs to be started\n\nAnd then SyncPod should be much simpler and cleaner.\n",
        "createdAt" : "2016-09-13T20:54:11Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +502,506 @@\t\t\t}\n\t\t}\n\t}\n\n\t// We pass the value of the podIP down to generatePodSandboxConfig and"
  },
  {
    "id" : "0d2e8932-456b-4c5e-90ad-cabd0def36e9",
    "prId" : 31847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31847#pullrequestreview-75486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abe6e616-ca87-49e4-9c65-8becfc53bedd",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "We may need a format function for internal pod type in the future.\nnit: Add a TODO here :)\n",
        "createdAt" : "2016-09-14T18:30:27Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "6c6f43b1-4ac8-4181-ae8e-a6231eaa7027",
        "parentId" : "abe6e616-ca87-49e4-9c65-8becfc53bedd",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "ack\n",
        "createdAt" : "2016-09-15T00:31:07Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +824,828 @@func (m *kubeGenericRuntimeManager) GetPodContainerID(pod *kubecontainer.Pod) (kubecontainer.ContainerID, error) {\n\t// TODO: add a format function for kubecontainer.Pod\n\tpodFullName := format.Pod(&api.Pod{\n\t\tObjectMeta: api.ObjectMeta{\n\t\t\tName:      pod.Name,"
  },
  {
    "id" : "4b73dd97-f74a-4b2c-822f-f8bc0b83ffa0",
    "prId" : 31847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31847#pullrequestreview-76167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5191c589-b09c-4674-acef-1b3d4adc2267",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Why not just use `pod` here?\n",
        "createdAt" : "2016-09-14T18:41:58Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "027656ea-275f-4631-a6a7-3d3f1569cf90",
        "parentId" : "5191c589-b09c-4674-acef-1b3d4adc2267",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Just for clear. \n",
        "createdAt" : "2016-09-15T00:19:12Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "f7c58f09-3841-4015-8ca7-79e70fc00dd3",
        "parentId" : "5191c589-b09c-4674-acef-1b3d4adc2267",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nit: Change to pod, because tt other place we just use `Eventf(pod,`. Just nit. :)\n",
        "createdAt" : "2016-09-15T00:38:07Z",
        "updatedAt" : "2016-09-15T15:32:52Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +469,473 @@\t\t}\n\t\tif podContainerChanges.SandboxID != \"\" {\n\t\t\tm.recorder.Eventf(ref, api.EventTypeNormal, \"SandboxChanged\", \"Pod sandbox changed, it will be killed and re-created.\")\n\t\t} else {\n\t\t\tm.recorder.Eventf(ref, api.EventTypeNormal, \"SandboxReceived\", \"Pod sandbox received, it will be created.\")"
  },
  {
    "id" : "498fed72-6970-419b-931f-184ce6e11550",
    "prId" : 31847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31847#pullrequestreview-287307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68f17083-c5a7-466d-b34d-7fab19ff4e9b",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Why we need both `name` and `container`?\n",
        "createdAt" : "2016-09-16T02:13:19Z",
        "updatedAt" : "2016-09-16T02:18:18Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "75335187-2f5b-4256-ba9e-07c4a1873605",
        "parentId" : "68f17083-c5a7-466d-b34d-7fab19ff4e9b",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "because container maybe nil\n",
        "createdAt" : "2016-09-16T02:31:55Z",
        "updatedAt" : "2016-09-16T02:32:03Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +314,318 @@\tcontainer *api.Container\n\t// The name of the container.\n\tname string\n\t// The message indicates why the container will be killed.\n\tmessage string"
  },
  {
    "id" : "d7c89af6-918f-4b3e-89d1-785917e21597",
    "prId" : 31847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31847#pullrequestreview-294305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "915be753-0347-4595-bfff-e1aba59c227d",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Why we need to create a new sandbox when readySandboxCount > 1?\n",
        "createdAt" : "2016-09-16T02:18:04Z",
        "updatedAt" : "2016-09-16T02:18:18Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "7ad4534f-3a5a-49a9-840b-3bb02d4847cf",
        "parentId" : "915be753-0347-4595-bfff-e1aba59c227d",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Shouldn't we just kill the unwanted sanboxes?\n",
        "createdAt" : "2016-09-16T02:18:18Z",
        "updatedAt" : "2016-09-16T02:18:18Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "9790a5e0-99bb-4f75-9dfc-2e5f38c9cb2f",
        "parentId" : "915be753-0347-4595-bfff-e1aba59c227d",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "If readySandboxCount > 1, then it's hard to distinguish which are the unwanted sandboxes and whether the containers are running at right sandbox. So just kill all and create a new one.\n",
        "createdAt" : "2016-09-16T02:37:21Z",
        "updatedAt" : "2016-09-16T02:37:21Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "fb63e859-5764-4cb6-b49e-915a11b5c962",
        "parentId" : "915be753-0347-4595-bfff-e1aba59c227d",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "OK, I thought the sandboxes are sorted by time... hmm\n",
        "createdAt" : "2016-09-16T04:58:40Z",
        "updatedAt" : "2016-09-16T04:58:40Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65309399a228bd0c085f5e0d1ce93d558aebfaa",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +356,360 @@\t}\n\n\t// Needs to create a new sandbox when readySandboxCount > 1 or the ready sandbox is not the latest one.\n\tsandboxStatus := podStatus.SandboxStatuses[0]\n\tif readySandboxCount > 1 || sandboxStatus.GetState() != runtimeApi.PodSandBoxState_READY {"
  },
  {
    "id" : "3cf2983b-a709-4d72-b16f-9ec0906076c3",
    "prId" : 31322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dcc739b-e7dd-4ab0-a885-24125f609619",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Also I suggest we pull some of the logic in this function out to reduce the size. e.g. we can move the `go func()` to something like `killContainerWithSyncResult(*kubecontainer.Container, chan *kubecontainer.SyncResult)`\n\nAnd the next part is all about tearing down the network.\n",
        "createdAt" : "2016-08-25T01:08:00Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "277070e267e0ca1d75fd0794434e57e45aa2c212",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +317,321 @@// killPodWithSyncResult kills a runningPod and returns SyncResult.\n// Note: The pod passed in could be *nil* when kubelet restarted.\nfunc (m *kubeGenericRuntimeManager) killPodWithSyncResult(pod *api.Pod, runningPod kubecontainer.Pod, gracePeriodOverride *int64) (result kubecontainer.PodSyncResult) {\n\tkillContainerResults := m.killContainersWithSyncResult(pod, runningPod, gracePeriodOverride)\n\tfor _, containerResult := range killContainerResults {"
  },
  {
    "id" : "573b56de-1595-4a4e-8589-2e3ac89d4f62",
    "prId" : 31322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9e61017-f0bb-4459-a4c2-b5c2d661ac73",
        "parentId" : null,
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "`i, c := range containers`?\n",
        "createdAt" : "2016-08-31T14:19:32Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "8b11e632-a1b8-4a04-8e8a-292aa85de33f",
        "parentId" : "c9e61017-f0bb-4459-a4c2-b5c2d661ac73",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "This is also part of #31395. `i` is actually only used for getting the container, so it's better change this back to `for _, c := range containers`. \n\nCC @yujuhong \n",
        "createdAt" : "2016-08-31T14:47:01Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "c8cf277f-a027-467e-a8fe-bd776e892dc2",
        "parentId" : "c9e61017-f0bb-4459-a4c2-b5c2d661ac73",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "No, the new api structs uses primarily pointers. Using `i, c := range containers` is likely to cause bugs in the code unless we make a copy of the struct first. I actually had to change this because the unit tests was failing.\n",
        "createdAt" : "2016-08-31T21:01:50Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e4f3f896-5947-4cdf-bb91-1925c5e227ea",
        "parentId" : "c9e61017-f0bb-4459-a4c2-b5c2d661ac73",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "didn't notice it is a pointer, so this change is reasonable.\n",
        "createdAt" : "2016-08-31T23:41:07Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "277070e267e0ca1d75fd0794434e57e45aa2c212",
    "line" : null,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\treturn nil, err\n\t}\n\tfor i := range containers {\n\t\tc := containers[i]\n\t\tif c.Metadata == nil {"
  },
  {
    "id" : "542218b8-fbab-474b-84af-f013ad0e80f3",
    "prId" : 31322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0290232-bce0-4549-9aa8-0fa59dbe661b",
        "parentId" : null,
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "why change from warning to info?\n",
        "createdAt" : "2016-08-31T14:19:56Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "6ba354f9-9ee9-43aa-b40d-c2f2e5852b7b",
        "parentId" : "e0290232-bce0-4549-9aa8-0fa59dbe661b",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "This is also part of #31395, changing to `V(4)` so as to reduce logging warning for such failure.  \n\nCC @yujuhong \n",
        "createdAt" : "2016-08-31T14:42:36Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "b58aa116-1d1c-4038-af84-f9099cd0fda0",
        "parentId" : "e0290232-bce0-4549-9aa8-0fa59dbe661b",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Because kubelet lists containers frequently and as long as there is one corrupt container, kubelet will log over and over again. Since we eventually ignore the container, we don't want it to cause too much spam. \n",
        "createdAt" : "2016-08-31T20:58:01Z",
        "updatedAt" : "2016-09-08T12:58:02Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "277070e267e0ca1d75fd0794434e57e45aa2c212",
    "line" : null,
    "diffHunk" : "@@ -1,1 +281,285 @@\t\tconverted, err := m.toKubeContainer(c)\n\t\tif err != nil {\n\t\t\tglog.V(4).Infof(\"Convert %s container %v of pod %q failed: %v\", m.runtimeName, c, labelledInfo.PodUID, err)\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "9d3fdde1-58a7-4e94-a779-ea5b9c0043b7",
    "prId" : 30121,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0b594e7-7eca-45b1-9391-0eb5358d7572",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "One of the cons of CRI: this function will incur two `docker ps` calls. We'll need to see how much performance impact there is.\n\nThe same applies to `GetPodStatus`, which will need two docker ps and separate inspections.\n",
        "createdAt" : "2016-08-05T22:43:17Z",
        "updatedAt" : "2016-08-22T03:01:09Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "a1edfdb8-73c9-4cc1-b4df-91ea89b4d0b2",
        "parentId" : "c0b594e7-7eca-45b1-9391-0eb5358d7572",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Y, maybe we could reconsider embed containers in sandbox \n",
        "createdAt" : "2016-08-08T01:36:20Z",
        "updatedAt" : "2016-08-22T03:01:09Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "5a5a0c64-ebea-4bad-9cbf-afd2778bb55b",
        "parentId" : "c0b594e7-7eca-45b1-9391-0eb5358d7572",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Then it's just the same as getpods today :stuck_out_tongue: Which is OK, (so list sandbox contains containers)\n\nI am not super concerned about the performance as long as it's not too back, since for the long term we will use event system.\n",
        "createdAt" : "2016-08-11T01:37:22Z",
        "updatedAt" : "2016-08-22T03:01:09Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3e10ddf8a972076bf5b62d3c333bc7a4ce826bb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +224,228 @@// exited and dead containers (used for garbage collection).\nfunc (m *kubeGenericRuntimeManager) GetPods(all bool) ([]*kubecontainer.Pod, error) {\n\tpods := make(map[kubetypes.UID]*kubecontainer.Pod)\n\tsandboxes, err := m.getKubeletSandboxes(all)\n\tif err != nil {"
  }
]