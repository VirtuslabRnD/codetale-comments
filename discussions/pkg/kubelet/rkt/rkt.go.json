[
  {
    "id" : "b476bc64-75f5-45e7-9d6c-56e1d51eb672",
    "prId" : 45110,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45110#pullrequestreview-35399915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41d91f8b-cb8f-4f43-9670-91c4eeeba213",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "mutually exclusive to the kubelet/dockertools one?  Still seems like making it distinct would be nicer.",
        "createdAt" : "2017-04-28T16:05:59Z",
        "updatedAt" : "2017-04-28T16:05:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c95c1f25-4973-42ad-8b2c-349b6d5744be",
        "parentId" : "41d91f8b-cb8f-4f43-9670-91c4eeeba213",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The two can't be running at the same time, so just assumed all runtime request timeouts could share this.",
        "createdAt" : "2017-04-28T16:08:43Z",
        "updatedAt" : "2017-04-28T16:08:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "49209b3394d1002adeae5041e14d06eee855365f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +138,142 @@\t// Value is slightly offset from 2 minutes to make timeouts due to this\n\t// constant recognizable.\n\tdefaultRequestTimeout = 2*time.Minute - 1*time.Second\n\n\tetcHostsPath      = \"/etc/hosts\""
  },
  {
    "id" : "dbf5f341-a6d2-432c-990e-a20b66bc309a",
    "prId" : 36020,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36020#pullrequestreview-6865159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff71aa64-66de-4794-9e5e-3e7b1206e5c4",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Have a question: is there any initialization problem of assigning `kubecontainer.DirectStreamingRuntime` in both dockertools and rkt package? \n",
        "createdAt" : "2016-11-02T06:40:10Z",
        "updatedAt" : "2016-11-03T20:26:44Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "1ed68180-db64-4f91-8b23-075dae81fd16",
        "parentId" : "ff71aa64-66de-4794-9e5e-3e7b1206e5c4",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "This is just asserting that `&Runtime{}` implements the `kubecontainer.DirectStreamingRuntime` interface. Nothing is being assigned.\n",
        "createdAt" : "2016-11-02T17:17:11Z",
        "updatedAt" : "2016-11-03T20:26:44Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "86d849e3749ee86fc1a485ad7085d31adcff0148",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +182,186 @@\nvar _ kubecontainer.Runtime = &Runtime{}\nvar _ kubecontainer.DirectStreamingRuntime = &Runtime{}\n\n// TODO(yifan): This duplicates the podGetter in dockertools."
  },
  {
    "id" : "5f5afa87-5de6-44c1-9c78-0c76e773e0a5",
    "prId" : 33366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33366#pullrequestreview-2305528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3c3af3d-0a1c-4d7f-8955-e44465e5d5df",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "/cc @yifan-gu \n",
        "createdAt" : "2016-09-29T19:09:34Z",
        "updatedAt" : "2016-11-07T12:01:18Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "85ec0071-cf90-4645-bdeb-7c263988dda4",
        "parentId" : "d3c3af3d-0a1c-4d7f-8955-e44465e5d5df",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I am OK with this if we have a plan on how to actually implement the timeout.\n",
        "createdAt" : "2016-09-30T00:19:22Z",
        "updatedAt" : "2016-11-07T12:01:18Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "1778f476-ebf7-4f87-8f74-cf76789e07b2",
        "parentId" : "d3c3af3d-0a1c-4d7f-8955-e44465e5d5df",
        "authorId" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "body" : "For rkt it is possible to implement the timeout today -- refer to #27956, in particular https://github.com/kubernetes/kubernetes/pull/27956/commits/657cb46121c183e35bc0acc785e86fa201653724\n\nSame for the nsenter backend: https://github.com/kubernetes/kubernetes/pull/27956/commits/d82bc859c8ffd612d0ec7c8eb4604d33f2502705\n",
        "createdAt" : "2016-09-30T10:47:43Z",
        "updatedAt" : "2016-11-07T12:01:18Z",
        "lastEditedBy" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "506129ba4e8d446128f780c122365d388d96fd86",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2039,2043 @@// the rkt UUID, and appName is the container name.\n// TODO(yifan): If the rkt is using lkvm as the stage1 image, then this function will fail.\nfunc (r *Runtime) ExecInContainer(containerID kubecontainer.ContainerID, cmd []string, stdin io.Reader, stdout, stderr io.WriteCloser, tty bool, resize <-chan term.Size, timeout time.Duration) error {\n\tglog.V(4).Infof(\"Rkt execing in container.\")\n"
  },
  {
    "id" : "e2557d58-aabb-4dc3-91ad-b72be827ff9d",
    "prId" : 32126,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b8c06a6-fa6a-4adb-b2e5-bbf01125a0d6",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "This breaks in the reverse now; if you have `stage1-image=kvm` and then have the annotation for non-kvm, `isKvm` still remains true.\n",
        "createdAt" : "2016-09-09T17:47:55Z",
        "updatedAt" : "2016-09-09T17:47:55Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "6d98e013-897a-4744-b301-8591706fa324",
        "parentId" : "4b8c06a6-fa6a-4adb-b2e5-bbf01125a0d6",
        "authorId" : "aa1258ef-4aba-4e6d-8f6c-ebb580c39716",
        "body" : "@euank I don't see any mistake, there's a loop below overriding `isKvm` if there's another image in annotations\n",
        "createdAt" : "2016-09-13T08:25:23Z",
        "updatedAt" : "2016-09-13T08:25:32Z",
        "lastEditedBy" : "aa1258ef-4aba-4e6d-8f6c-ebb580c39716",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a557c612741e9d709b090742d59093d307eaf86",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2130,2134 @@\n\t// Check in config and in annotations if we're running kvm flavor\n\tisKvm := strings.Contains(r.config.Stage1Image, \"kvm\")\n\tfor _, anno := range listPod.Annotations {\n\t\tif anno.Key == k8sRktStage1NameAnno {"
  },
  {
    "id" : "ebc834dd-256c-40ef-9934-346f4f697364",
    "prId" : 31022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61a9ff8a-2477-43c6-b20f-263b82fe96a9",
        "parentId" : null,
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "whats going on here? I can't see any change, but github diff is highlighting it\n",
        "createdAt" : "2016-08-19T19:18:27Z",
        "updatedAt" : "2016-08-19T19:18:27Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "8174f4cc-512f-4e51-9be5-299cffea656a",
        "parentId" : "61a9ff8a-2477-43c6-b20f-263b82fe96a9",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "nevermind I can see it clearly locally\n",
        "createdAt" : "2016-08-19T19:23:23Z",
        "updatedAt" : "2016-08-19T19:23:23Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fac36585b613706f647b24e2bee0449f85006af",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +982,986 @@\t\tif osInfos[\"ID\"] != \"coreos\" && pod.Spec.SecurityContext != nil && pod.Spec.SecurityContext.SELinuxOptions != nil {\n\t\t\trunPrepared = append(runPrepared, \"--no-overlay=true\")\n\t\t}\n\t}\n"
  },
  {
    "id" : "749e887c-3941-4e42-abf3-14767b7637aa",
    "prId" : 27200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56291d0-4b63-462b-bd5c-73d8c500d996",
        "parentId" : null,
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "Use the GID of the current user maybe?\n",
        "createdAt" : "2016-06-10T21:24:43Z",
        "updatedAt" : "2016-06-11T01:48:26Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "0138a4b5-09f5-4811-9311-e7757ce7a373",
        "parentId" : "f56291d0-4b63-462b-bd5c-73d8c500d996",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@tmrts I think that requires rkt to support reading the /etc/passwd after unpacking the image.\n",
        "createdAt" : "2016-06-10T21:42:31Z",
        "updatedAt" : "2016-06-11T01:48:26Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "f412ef1e-b8b8-481c-92e0-4bdae31bb909",
        "parentId" : "f56291d0-4b63-462b-bd5c-73d8c500d996",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "@tmrts the split between in-the-container users and on-the-host users means you won't get a sensical result at best, and in reality the user here will be `root` because the kubelet runs as root.\n",
        "createdAt" : "2016-06-10T21:49:47Z",
        "updatedAt" : "2016-06-11T01:48:26Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "6352b12a-e7c2-46c3-b232-83de1aaac3b1",
        "parentId" : "f56291d0-4b63-462b-bd5c-73d8c500d996",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "@euank I was referring to this [comment](https://github.com/kubernetes/kubernetes/pull/27200/files#diff-717f367da08d0bb8eb8c45d38f164eb8L558). But, I see what you mean\n",
        "createdAt" : "2016-06-10T22:06:54Z",
        "updatedAt" : "2016-06-11T01:48:26Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "edc946e08163a7e916a20b84d8bce5778ebb373a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +564,568 @@\t}\n\tif app.Group == \"\" {\n\t\treturn fmt.Errorf(\"cannot determine the GID of the app %q\", imgManifest.Name)\n\t}\n"
  },
  {
    "id" : "a15358bc-3f8d-4a31-926a-25d27e337434",
    "prId" : 27015,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66e584ea-4694-483e-a635-590a7a44ed2a",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "nit, this log might make more sense after the noop check. Same for cleanup above.\n",
        "createdAt" : "2016-06-08T22:47:40Z",
        "updatedAt" : "2016-06-10T02:38:16Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "c24f5753-da40-41d3-abec-a6c77f6e27c5",
        "parentId" : "66e584ea-4694-483e-a635-590a7a44ed2a",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@euank I don't think showing the noop plugin really hurts?\n",
        "createdAt" : "2016-06-09T18:07:22Z",
        "updatedAt" : "2016-06-10T02:38:16Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "e4c2e9cc-3235-431a-93dd-5897087aac89",
        "parentId" : "66e584ea-4694-483e-a635-590a7a44ed2a",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I'm fine with either way. No problem.\n",
        "createdAt" : "2016-06-09T18:29:49Z",
        "updatedAt" : "2016-06-10T02:38:16Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a9ea30814241fd469b040ba8b0a797d0cec7eda",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +1213,1217 @@// If the pod is running in host network or is running using the no-op plugin, then nothing will be done.\nfunc (r *Runtime) setupPodNetwork(pod *api.Pod) (string, string, error) {\n\tglog.V(3).Infof(\"Calling network plugin %s to set up pod for %s\", r.networkPlugin.Name(), format.Pod(pod))\n\n\t// No-op if the pod is not running in a created netns."
  },
  {
    "id" : "ca91d083-957d-47f3-9e66-8f30c543ea1a",
    "prId" : 26096,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96d5cd60-ae86-49df-93b9-93a35670ff57",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Just to be clear, so in the host network, the pod ip is not set here, but will be set in https://github.com/kubernetes/kubernetes/pull/24633/files , right?\n",
        "createdAt" : "2016-05-23T21:00:45Z",
        "updatedAt" : "2016-05-25T18:14:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "80a56787-a56a-4274-87d1-d9362baf6bda",
        "parentId" : "96d5cd60-ae86-49df-93b9-93a35670ff57",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "It looks like it actually does get set there, yeah. Maybe this should be a `note`, not a `TODO`, I'll do some quick experimenting.\n",
        "createdAt" : "2016-05-23T21:21:42Z",
        "updatedAt" : "2016-05-25T18:14:56Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2895d88f38c85d458d6713ed5821ba4bb6dd29",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +2098,2102 @@\n\t// TODO(euank): this will not work in host networking mode\n\tcontainerID := kubecontainer.ContainerID{ID: string(uid)}\n\tif status, err := r.networkPlugin.GetPodNetworkStatus(namespace, name, containerID); err == nil {\n\t\tpodStatus.IP = status.IP.String()"
  },
  {
    "id" : "459239e1-9e25-4d7c-822e-ee4fb42a667a",
    "prId" : 25656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63bfe388-00ef-4ffb-b1ac-b8ff86a14d13",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@euank Just heads up, we will need to switch to 1.6 in the testing infra :)\n",
        "createdAt" : "2016-05-16T21:08:08Z",
        "updatedAt" : "2016-05-18T16:40:47Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d40332ca8b83af682ca00ee6b49f9a96ae4cdfc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +64,68 @@\n\tminimumAppcVersion       = \"0.8.1\"\n\tminimumRktBinVersion     = \"1.6.0\"\n\trecommendedRktBinVersion = \"1.6.0\"\n\tminimumRktApiVersion     = \"1.0.0-alpha\""
  },
  {
    "id" : "f4206835-c81d-41b6-be28-2a3a5d23f94d",
    "prId" : 25656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f981b32-2abe-47fa-9ba6-ba72f8e7a4d9",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I don't think we should need appc version since it should be strongly tied to rkt version, right?\n",
        "createdAt" : "2016-05-18T21:05:26Z",
        "updatedAt" : "2016-05-18T21:05:26Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "acee691f-4403-4087-8792-361c4964623b",
        "parentId" : "5f981b32-2abe-47fa-9ba6-ba72f8e7a4d9",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@euank I think so. (Actually the rkt api version is not required as well, as it's always binded to rkt release version) cc @jonboulle \nLet's address this in a follow up PR.\n",
        "createdAt" : "2016-05-18T21:08:05Z",
        "updatedAt" : "2016-05-18T21:08:05Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d40332ca8b83af682ca00ee6b49f9a96ae4cdfc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +63,67 @@\tDefaultRktAPIServiceEndpoint = \"localhost:15441\"\n\n\tminimumAppcVersion       = \"0.8.1\"\n\tminimumRktBinVersion     = \"1.6.0\"\n\trecommendedRktBinVersion = \"1.6.0\""
  },
  {
    "id" : "13e97628-06e5-4464-b307-da839d0eafca",
    "prId" : 25062,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2493931-0ec1-4e2f-b61a-445158e82f99",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@dcbw I think we already store these information in the annotations in the rkt pod manifest. I don't like we store information in multiple places. \nBut this is good for now, I will need to do a rebase and clean up for #24647 after this gets in. cc @euank\n",
        "createdAt" : "2016-05-11T20:48:42Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "8bfb58df-5f74-4b79-945b-ee8d59eebd66",
        "parentId" : "e2493931-0ec1-4e2f-b61a-445158e82f99",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "I don't have a problem with storing information in multiple locations in this case since it's useful for correlating distinct resources.\n",
        "createdAt" : "2016-05-11T21:10:08Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "ee1b22c4-d5b6-4c54-9a2c-d9493e58eda1",
        "parentId" : "e2493931-0ec1-4e2f-b61a-445158e82f99",
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "@yifan-gu I chose to store it the systemd service file too since that's already found for Garbage Collect.  Also, the manifest file is removed from the tempdir after preparePod(), so it's not guaranteed to be around during GC, but the systemd unit will be.  Right?  Or is there another way to get at the pod manifest given the systemd unit file?\n",
        "createdAt" : "2016-05-11T21:31:46Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      },
      {
        "id" : "35303757-c18c-469a-841d-49705167f6dd",
        "parentId" : "e2493931-0ec1-4e2f-b61a-445158e82f99",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@dcbw I mean we can read the podmanifest in the response of the ListPods() or InspectPod() from rkt api service.\nOOB discussion with @euank, I agree that this can be more user-friendly for debugging. But for developers who will work on the code, I would say a single source of truth would be easy to manage.\nHowever, I won't block the PR on this.\n",
        "createdAt" : "2016-05-11T22:14:16Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "6a7dc7eb-6860-44e0-9a47-31cb0cf53741",
        "parentId" : "e2493931-0ec1-4e2f-b61a-445158e82f99",
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "@yifan-gu agreed, that sounds like a good future direction for the GC code.\n",
        "createdAt" : "2016-05-11T22:58:32Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      }
    ],
    "commit" : "552b648caffb5be5ae86e237157fdad234caf4a4",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +1019,1023 @@\t\tnewUnitOption(\"Service\", \"KillMode\", \"mixed\"),\n\t\t// Track pod info for garbage collection\n\t\tnewUnitOption(unitKubernetesSection, unitPodUID, string(pod.UID)),\n\t\tnewUnitOption(unitKubernetesSection, unitPodName, pod.Name),\n\t\tnewUnitOption(unitKubernetesSection, unitPodNamespace, pod.Namespace),"
  },
  {
    "id" : "728cdd0b-9cb7-4ea2-86ff-0fdd56dce37b",
    "prId" : 25062,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6ae2535-bdd7-4634-9877-b587aef2ddcf",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Can we move the cleanup code snippets after `if res != \"done\"` ?\nAlso seems the `podUID`, `podName`, `podNamespace` are the only required fields, so how about simplifying the code as:\n\n``` go\nnetCleanupPod = &api.Pod{\n    ObjectMeta: api.ObjectMeta{\n        UID:       runningPod.ID,\n        Name:      runningPod.Name,\n        Namespace: runningPod.Namespace,\n    },\n}\n\n// TODO: Check if the running pod is host network pod.\nif pod == nil || !kubecontainer.IsHostNetworkPod(pod) {\n    if err := cleanupPodNetwork(netCleanupPod); err != nil {\n        ...\n    }\n}\n```\n",
        "createdAt" : "2016-05-17T22:40:29Z",
        "updatedAt" : "2016-05-18T16:28:14Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "552b648caffb5be5ae86e237157fdad234caf4a4",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +1477,1481 @@\t\t}\n\t}\n\n\treturn nil\n}"
  },
  {
    "id" : "a63770ff-5501-4457-a048-7a1bd39d9a07",
    "prId" : 24901,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@yifan-gu you might want to project the specified fields onto the root directory SELinux context.\n",
        "createdAt" : "2016-04-28T04:30:22Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "c5083758-2f8b-4fdf-80c7-5e98ddbb8631",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@pmorie Could elaborate please?\n",
        "createdAt" : "2016-04-28T22:06:12Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "5d3cc62b-2d6b-496e-9490-d8c0fd9918f2",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "I think he means, don't we need to set this context on the directory too..?\n",
        "createdAt" : "2016-05-23T14:27:19Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "934cec9c-71bb-4d53-9258-4535aa8b81e6",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Sorry for the late response.  I had meant that if you don't specify all of the selinux context, you shouldn't get a malformed one.  What we do elsewhere is to take the specified fields of selinux context and overlay them onto the selinux context of the kubelet root dir.  So, if root dir has `system_u:object_r:svirt_sandbox_file_t:s0` and the user specifies only `s1,c2`, they should get: `system_u:object_r:svirt_sandbox_file_t:s1,c2`.\n",
        "createdAt" : "2016-05-23T18:04:48Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "c6d1341c-9289-4a02-a19a-c533be009fa9",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@jonboulle @mjg59 I am not sure where to get the default selinux context, the rootfs of the stage1? the pod dir?\n",
        "createdAt" : "2016-05-24T17:36:47Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "2fc09251-0307-41f9-961d-e590c2d5d1b7",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "932d512d-b7d6-4cae-8bf1-cd4472afa406",
        "body" : "Shouldn't the base file context be coming from the lxc_contexts file rather than us attempting to infer it from anywhere else?\n",
        "createdAt" : "2016-05-24T21:16:40Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "932d512d-b7d6-4cae-8bf1-cd4472afa406",
        "tags" : [
        ]
      },
      {
        "id" : "309499cf-972d-4d51-8f22-7016da9012d9",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@mjg59 OK, does every distro have this file?\n",
        "createdAt" : "2016-05-25T00:25:07Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "8e18ba3f-ebdb-42fe-b879-600beef4cdec",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@pmorie Do you how does docker solve this problem?\n",
        "createdAt" : "2016-05-25T00:26:14Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "4909dccf-0dac-4254-9ee8-bd21f292808c",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I checked on coreos distro, the `/var/lib/rkt/`, `/var/lib/rkt/pods`, and `/var/lib/rkt/pods/$uuid` all have the same context (`system_u:object_r:var_lib_t:s0`). So I am going just to take the context of the `/var/lib/rkt`\n",
        "createdAt" : "2016-05-25T00:53:24Z",
        "updatedAt" : "2016-06-01T16:55:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "1ff2d9ba-d6e5-456e-8d5f-c9934e827ca5",
        "parentId" : "d1bbfb70-f14e-4aa6-80f8-949dc0ad2f6e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "that seems reasonable to me\n",
        "createdAt" : "2016-06-01T18:36:36Z",
        "updatedAt" : "2016-06-01T18:36:36Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a7537ecbfd94d7659f7629fb62ea882f2ac07eb",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1067,1071 @@\tif pod.Spec.SecurityContext != nil && pod.Spec.SecurityContext.SELinuxOptions != nil {\n\t\topt := pod.Spec.SecurityContext.SELinuxOptions\n\t\tselinuxContext := fmt.Sprintf(\"%s:%s:%s:%s\", opt.User, opt.Role, opt.Type, opt.Level)\n\t\tunits = append(units, newUnitOption(\"Service\", \"SELinuxContext\", selinuxContext))\n\t}"
  },
  {
    "id" : "dd3cb2d0-8ba2-4530-9f0f-638aa865ed6b",
    "prId" : 24496,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10b8752-7009-44ef-b7d2-4e8372f866e9",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I think we can point out that for now we only have pod level finish time, but later we should support per app's finish time.\n",
        "createdAt" : "2016-04-19T21:26:38Z",
        "updatedAt" : "2016-04-22T22:35:26Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6718f59691d7b3989c4222fb21e8daeb2ff84cc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +926,930 @@\n\t// TODO per container finishedAt, not just per pod\n\tmarkPodFinished := podFinishedMarkCommand(r.touchPath, r.runtimeHelper.GetPodDir(pod.UID), uuid)\n\tunits := []*unit.UnitOption{\n\t\tnewUnitOption(\"Service\", \"ExecStart\", runPrepared),"
  },
  {
    "id" : "d7cd96f6-af8d-4c1a-b9ff-6ceed5a2dfe8",
    "prId" : 23308,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44d34fcc-83a8-49af-8c49-e9f4fc4350d2",
        "parentId" : null,
        "authorId" : "cc482025-a47a-40f1-9f0e-9aebd8c0f4d7",
        "body" : "IMHO `minimumRktBinVersion     = \"1.2.1\"`, so in this case we should drop `stage-1-image` support, because `rkt` > 1.0  is missing this flag, or if we keep support we should put at least 0.16 `rkt` bin\n",
        "createdAt" : "2016-03-31T07:30:33Z",
        "updatedAt" : "2016-03-31T07:30:33Z",
        "lastEditedBy" : "cc482025-a47a-40f1-9f0e-9aebd8c0f4d7",
        "tags" : [
        ]
      },
      {
        "id" : "15a9115f-3a75-4e9f-a8e0-dfb2846f1d32",
        "parentId" : "44d34fcc-83a8-49af-8c49-e9f4fc4350d2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@woodbor So we probably won't support <1.2 anymore because those versions missed the other functions like injecting `--hostname` as well...\nWe shouldn't be so aggressive after we announce rktnetes 1.0, but for now supporting a very small number of versions makes our life much easier :)\n",
        "createdAt" : "2016-03-31T07:45:56Z",
        "updatedAt" : "2016-03-31T07:45:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "e817d1e26f3f03d0d221fef0086148ba1a69cc87",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@\n\tminimumAppcVersion       = \"0.7.4\"\n\tminimumRktBinVersion     = \"1.2.1\"\n\trecommendedRktBinVersion = \"1.2.1\"\n\tminimumRktApiVersion     = \"1.0.0-alpha\""
  },
  {
    "id" : "009e9ada-c2a8-42c3-821a-5d2c71993101",
    "prId" : 22713,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a145ccef-5c75-4b90-8e8d-8050b2fe8672",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "question: Is it possible to import these keys? How will we keep it up-to-date?\n",
        "createdAt" : "2016-03-08T23:50:11Z",
        "updatedAt" : "2016-03-09T02:32:25Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "8fa9cb58-eb5b-4eea-8cbf-f10646ddcaf4",
        "parentId" : "a145ccef-5c75-4b90-8e8d-8050b2fe8672",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong Thanks, I filed an issue at docker2aci https://github.com/appc/docker2aci/issues/133 Also added a TODO.\nGood news is, we don't have to deal with godep right now :)\n",
        "createdAt" : "2016-03-09T00:00:18Z",
        "updatedAt" : "2016-03-09T02:32:25Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a63f7f74c637734e9d1222853508e12f1a415a6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +99,103 @@\t// TODO(yifan): Import them from docker2aci. See https://github.com/appc/docker2aci/issues/133.\n\tappcDockerEntrypoint = \"appc.io/docker/entrypoint\"\n\tappcDockerCmd        = \"appc.io/docker/cmd\"\n)\n"
  },
  {
    "id" : "74bac629-71be-4d17-8bb5-643cf4adf62c",
    "prId" : 20816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a43dd729-d42c-49e7-85a3-e64df2c6c695",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "one question: why use hyphens when other keys don't?\n",
        "createdAt" : "2016-02-08T20:47:48Z",
        "updatedAt" : "2016-02-09T06:50:53Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "6e858b39-e78d-4e48-85d3-55d4bfb78020",
        "parentId" : "a43dd729-d42c-49e7-85a3-e64df2c6c695",
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "Other keys do further up 😊\n\nYu-Ju Hong notifications@github.com schrieb am Mo., 8. Feb. 2016 22:36:\n\n> In pkg/kubelet/rkt/rkt.go\n> https://github.com/kubernetes/kubernetes/pull/20816#discussion_r52222676\n> :\n> \n> > @@ -79,7 +79,7 @@ const (\n> >     k8sRktCreationTimeAnno           = \"rkt.kubernetes.io/created\"\n> >     k8sRktContainerHashAnno          = \"rkt.kubernetes.io/containerhash\"\n> >     k8sRktRestartCountAnno           = \"rkt.kubernetes.io/restartcount\"\n> > -   k8sRktTerminationMessagePathAnno = \"rkt.kubernetes.io/terminationMessagePath\"\n> > -   k8sRktTerminationMessagePathAnno = \"rkt.kubernetes.io/termination-message-path\"\n> \n> one question: why use hyphens when other keys don't?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20816/files#r52222676.\n",
        "createdAt" : "2016-02-08T22:22:42Z",
        "updatedAt" : "2016-02-09T06:50:53Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "cdcb9a51-aea0-4558-8ae1-74708f4d828c",
        "parentId" : "a43dd729-d42c-49e7-85a3-e64df2c6c695",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "(expanding..) You're right. We should try to be consistent when we can. Modifying the keys later is not fun since maintaining backward compatibility is a pain.\n",
        "createdAt" : "2016-02-08T22:39:34Z",
        "updatedAt" : "2016-02-09T06:50:53Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "67fe389d-720f-494a-be86-919ce370b3cb",
        "parentId" : "a43dd729-d42c-49e7-85a3-e64df2c6c695",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Good question, I think it's ok to add hyphen now as it's not stable yet.\nRef #20728\n",
        "createdAt" : "2016-02-09T06:41:19Z",
        "updatedAt" : "2016-02-09T06:50:53Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "b14ac9481a79d96dd695eeccaf4e9ff3673deae2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +80,84 @@\tk8sRktContainerHashAnno          = \"rkt.kubernetes.io/container-hash\"\n\tk8sRktRestartCountAnno           = \"rkt.kubernetes.io/restart-count\"\n\tk8sRktTerminationMessagePathAnno = \"rkt.kubernetes.io/termination-message-path\"\n\tdockerPrefix                     = \"docker://\"\n"
  },
  {
    "id" : "06e20adc-3009-4813-bbdc-27e855889686",
    "prId" : 20337,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4edb758-923b-4ee2-8871-f6131897b246",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nits: Move the `!ok` case into the if clause, because it seems that `ok` is the normal case and should have minimum indent.\n",
        "createdAt" : "2016-02-02T07:53:05Z",
        "updatedAt" : "2016-02-02T07:53:05Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b34e2c314e148eef22570015d2fe96dfa729146",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +274,278 @@\t\t\tcontinue\n\t\t}\n\t\tresources[name] = &resource{limit: quantity.String(), request: quantity.String()}\n\t}\n"
  },
  {
    "id" : "dfeb1063-986e-4710-9e39-e8bdc1ba7827",
    "prId" : 20261,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38ef0697-7201-4780-9ba2-b02feba7efbe",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Is there a plan to solve this problem? There doesn't seem to be a way to recover this information.\n",
        "createdAt" : "2016-01-28T23:40:13Z",
        "updatedAt" : "2016-01-29T18:11:02Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "71d7de5d-57cf-484f-a91c-a40634fd738e",
        "parentId" : "38ef0697-7201-4780-9ba2-b02feba7efbe",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong Not as far as I know. I think this might cause some UX difference compared to running docker images with docker. We should doc it in the guide, but I don't know if we would solve this. cc @jonboulle \n",
        "createdAt" : "2016-01-29T06:01:06Z",
        "updatedAt" : "2016-01-29T18:11:02Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "42916292-8fde-48f2-9585-69bbd0cd1292",
        "parentId" : "38ef0697-7201-4780-9ba2-b02feba7efbe",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "You used TODO, hence the question :)\nIMO, it's is fine, but we should document difference like you said.\n",
        "createdAt" : "2016-01-29T18:23:17Z",
        "updatedAt" : "2016-01-29T18:23:17Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcee692d64f6053ac22ecd0426e147b5be095989",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +419,423 @@func setApp(app *appctypes.App, c *api.Container, opts *kubecontainer.RunContainerOptions, ctx *api.SecurityContext, podCtx *api.PodSecurityContext) error {\n\t// TODO(yifan): If ENTRYPOINT and CMD are both specified in the image,\n\t// we cannot override just one of these at this point as they are already mixed.\n\tcommand, args := kubecontainer.ExpandContainerCommandAndArgs(c, opts.Envs)\n\texec := append(command, args...)"
  },
  {
    "id" : "eae3be6e-d343-4bd0-9e5a-7926fb36d5bf",
    "prId" : 19675,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "137c4270-6333-4d6a-9545-a9a88bbab43f",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "cc @yifan-gu \n",
        "createdAt" : "2016-01-20T22:49:13Z",
        "updatedAt" : "2016-01-21T00:43:00Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7b07c01df197d40c677709d953ad0d538d49b75",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +973,977 @@\nfunc (r *Runtime) APIVersion() (kubecontainer.Version, error) {\n\treturn r.binVersion, nil\n}\n"
  },
  {
    "id" : "82be12ba-651f-419b-9f1d-0a25d0df06d6",
    "prId" : 18798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e5780de-9e3a-46a4-a74b-fad798a3bf67",
        "parentId" : null,
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "Version is optional, isn't it?\n",
        "createdAt" : "2015-12-17T14:00:40Z",
        "updatedAt" : "2015-12-22T20:09:38Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "329c2692-6950-4113-9922-2f328fce5338",
        "parentId" : "3e5780de-9e3a-46a4-a74b-fad798a3bf67",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@jonboulle The result returned by api service will always contain the version. \"latest\" by default.\n",
        "createdAt" : "2015-12-19T02:12:40Z",
        "updatedAt" : "2015-12-22T20:09:38Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "644aa9536ae8ca0652a655a8bf6b2c3779dcc8b7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1334,1338 @@// buildImageName constructs the image name for kubecontainer.Image.\nfunc buildImageName(img *rktapi.Image) string {\n\treturn fmt.Sprintf(\"%s:%s\", img.Name, img.Version)\n}\n"
  },
  {
    "id" : "6fc266a7-925b-4397-b120-0c1674c01f52",
    "prId" : 18643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dbf179a-018f-4bfa-8888-0c4e70c9d0f0",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The container runtime interface we have now is more docker-centric, so PLEG does GetPods() to detect changes and then inspect the pod for details. We should monitor the resource usage of rkt to see if this flow/interface work well with rkt for our scalability goals.\n",
        "createdAt" : "2015-12-14T19:45:34Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c79c670f186951fec34a4d4b40e0f9cb1913a62",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +1557,1561 @@\t}\n\n\t// TODO(yifan): Use ListPods(detail=true) to avoid another InspectPod rpc here.\n\tlistReq := &rktapi.ListPodsRequest{\n\t\tFilter: &rktapi.PodFilter{"
  },
  {
    "id" : "a41d600e-9943-45d2-bf05-55aeb554d30a",
    "prId" : 18643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2dae678-76d3-4765-b495-85261d1ce6d7",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The main concern I have here is:\n- In what cases would the annotations be missing/misformatted?\n- Should we fail in such cases?\n\nFor docker, this usually implies that the container was started before the kubelet upgrade, and we should try accommodating them (and not fail). Shouldn't we do the same for rkt?\n",
        "createdAt" : "2015-12-14T19:56:23Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "20887694-4602-442c-afe2-6c84c3ebf61e",
        "parentId" : "a2dae678-76d3-4765-b495-85261d1ce6d7",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong One case is what you mentioned, the kubelet is update. But other cases are possible as well, because the annotations are just strings in a file on the disk, which is always possible to be modified. (currently, only root users are able to change them).\n",
        "createdAt" : "2015-12-14T22:58:35Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "eb387427-d7f2-4969-892d-cd50d072ff8b",
        "parentId" : "a2dae678-76d3-4765-b495-85261d1ce6d7",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "What I am worried about is that, without properly including those pods, kubelet may falsely restart a new pod. Of course, in the case of user errors, we might be able to get away with it (i.e., user's fault). For other cases, maybe it's worth returning the pod with empty field? What do you think.\n",
        "createdAt" : "2015-12-14T23:04:08Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "01dd1e2e-dd57-4e86-85d9-7578079f8158",
        "parentId" : "a2dae678-76d3-4765-b495-85261d1ce6d7",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong I think in this PR, as all the pods are fetched via rkt api service, and we already assume them to contain some annotations (that's how we filter the pods), so it's already a breaking change. So under that assumption, the annotations I am trying to find here, should always exist unless there are user errors.\n",
        "createdAt" : "2015-12-14T23:35:28Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "35a80ecf-efde-413b-b237-0cabe4d4f257",
        "parentId" : "a2dae678-76d3-4765-b495-85261d1ce6d7",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Ack\n",
        "createdAt" : "2015-12-15T01:05:44Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c79c670f186951fec34a4d4b40e0f9cb1913a62",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1636,1640 @@\t\t\t\t// TODO(yifan): Add reason and message field.\n\t\t\t}\n\n\t\t\tpodStatus.ContainerStatuses = append(podStatus.ContainerStatuses, &cs)\n"
  },
  {
    "id" : "0d17964b-5e8f-42b8-b660-0d3c0deedfdc",
    "prId" : 18643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Hm....GetPodStatus is supposed to return all container statuses (incl. the dead containers). You actually inspected all of dead pods, but instead of returning all of them, you only return the latest one.\n",
        "createdAt" : "2015-12-14T20:04:30Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e8c3fe21-d4a2-4312-bd38-ea2a58555488",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong We slightly discussed this In https://github.com/kubernetes/kubernetes/pull/17420#discussion_r46497969 . This really is the part where the \"pod vs container\" thing gets into problems. I think I can work around by returning a pod which combines all apps from previous pods, do you think it will be better?\n",
        "createdAt" : "2015-12-14T22:10:36Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "de6f3efe-bbc9-486a-a410-8d4ba96e6e73",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "It might be necessary evil for now so that the output is consistent across runtimes. \n",
        "createdAt" : "2015-12-14T22:49:44Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "1137856c-b6d7-4ce0-abad-98bd79e01602",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong But the output is already different for things like GetPods(). The pod returned by GetPods() for rkt will contain exactly the same number of containers as in the pod spec, however it's not the case for docker.\n",
        "createdAt" : "2015-12-15T00:11:21Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "e5e46cf8-9612-471a-a47a-cf7945c1b169",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Hmm....if rkt doesn't return this, it'd be hard for kubelet to compute the last termination state, etc. CAn we make it consistent?\n",
        "createdAt" : "2015-12-15T00:21:45Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "37a254c4-d7b8-418f-a616-0596729f1de3",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong I suggest we keep consistent within a runtime? \nAs the pod level interfaces are created for pod-level runtimes like rkt. The implementation path we took for docker is just because it lacks \"pod\", there's no way to figure out whether a dead container belongs to an \"older\" pod or an \"older than older\" pod. That's why we have more containers in a pod returned by GetPods() than the pod spec for docker. \n\nOn the other hand, rkt already has the pod concept, it's looks like a backfire if we choose the docker path for this kind of interface when integrating rkt.\n",
        "createdAt" : "2015-12-15T00:26:41Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "b89d5c40-3680-4680-9b03-96422c7620d7",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Yes and no. Unfortunately, we also rely on seeing dead containers to populate the api.PodStatus object. Suppose rkt restarts the pod in SyncPod(), how would kubelet know the LastTerminationState? If we can split SyncPod into concrete steps, we may be able to work around this, but I don't see it happening anytime soon...\n",
        "createdAt" : "2015-12-15T01:04:09Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "1fb0858c-8be3-485b-a278-1db63709fe52",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Another potential benefit of returning everything is that kubelet might be able to determine what's eligible for garbage collection in the future.\n",
        "createdAt" : "2015-12-15T01:05:07Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e6343678-f914-404f-b14d-5ad07b8a5a17",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong I don't understand why kubelet cannot know the LastTerminationState? Can't that be returned by SyncPod?\n",
        "createdAt" : "2015-12-15T19:02:54Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "55d00b02-9eb9-483f-aa05-58b906ceb5a9",
        "parentId" : "76218f5a-4934-4fa5-b66d-b5ab6632acb2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I don't know if overloading SyncPod's returned object would be a good idea... Let's walk through an example:\n- In SyncPod()\n  - kill container A (id: a1)\n  - start container A (id: a2)\n\nRight now, the pleg would detect the container changes and populate the runtime cache with the PodStatus, which includes both container a1 and a2.\n\nIf we don't do that, SyncPod needs to inspect a1 between the two operations and return the container status as part of the result. We then have to handle this returned object to populate the last termination state. Overall it's more complicated to deal with.\n",
        "createdAt" : "2015-12-15T20:51:00Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c79c670f186951fec34a4d4b40e0f9cb1913a62",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1635,1639 @@\t\t\t\tRestartCount: restartCount,\n\t\t\t\t// TODO(yifan): Add reason and message field.\n\t\t\t}\n\n\t\t\tpodStatus.ContainerStatuses = append(podStatus.ContainerStatuses, &cs)"
  },
  {
    "id" : "a8d38719-a9cf-4955-aade-8e5ba38aafc2",
    "prId" : 18643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14034234-0329-4163-b665-2094bb969cda",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "LastTerminationState hasn't been set here. What is LastTermination used for now? Just for introspection or there is some functionality relies on it? However, this is just a temporary function, this may also be related to @yujuhong's [comment](https://github.com/kubernetes/kubernetes/pull/18643/files#r47550076)\n",
        "createdAt" : "2015-12-14T21:31:31Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "16e42086-525c-405f-9e30-a2993bc3e81d",
        "parentId" : "14034234-0329-4163-b665-2094bb969cda",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "OOB discussed with @yujuhong , thought the LastTermination should be implemented at kubelet level.\n",
        "createdAt" : "2015-12-14T21:37:40Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "a94c57da-35af-43ce-ab7a-d3b7d987018e",
        "parentId" : "14034234-0329-4163-b665-2094bb969cda",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Ok. :)\n",
        "createdAt" : "2015-12-14T21:39:56Z",
        "updatedAt" : "2015-12-17T00:53:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c79c670f186951fec34a4d4b40e0f9cb1913a62",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1707,1711 @@\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// Found multiple container statuses, fill that as last termination state."
  },
  {
    "id" : "729c41ae-02b1-4661-908f-5155a4e22900",
    "prId" : 17969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19f764d5-bb2a-4042-9a67-34cc656ad6b5",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "print the error here?\n",
        "createdAt" : "2015-12-03T00:37:57Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "b2be5b61-3fdd-487f-8bca-6210ad0479e8",
        "parentId" : "19f764d5-bb2a-4042-9a67-34cc656ad6b5",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "besides, why continue here, but return error in other places?\n",
        "createdAt" : "2015-12-03T00:38:31Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "848dc991-c347-4b3a-8f97-e25cbd6f3cd4",
        "parentId" : "19f764d5-bb2a-4042-9a67-34cc656ad6b5",
        "authorId" : "926f3eb2-468a-464a-86dd-534f956fed1c",
        "body" : "I had a feeling that if I errored on that, that one could prevent the kubelet from restarting a given pod by inserting a pod with a matching uid annotation and a garbage restart count annotation.\n",
        "createdAt" : "2015-12-03T01:02:35Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "926f3eb2-468a-464a-86dd-534f956fed1c",
        "tags" : [
        ]
      },
      {
        "id" : "c78dff04-bcd5-4bc5-b092-16d1592d5aad",
        "parentId" : "19f764d5-bb2a-4042-9a67-34cc656ad6b5",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@dgonyeo OK, but that can also happen by inserting random bytes in the pod manifest to let json.Unmarshal fail?\nI am ok we all `continue` in these places, with a warning message printed.\n",
        "createdAt" : "2015-12-03T02:00:35Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a16b4751be6d8a3841ff35fd44504e026263e26",
    "line" : null,
    "diffHunk" : "@@ -1,1 +458,462 @@\t\t\tif err != nil {\n\t\t\t\tglog.Warningf(\"rkt: error reading restart count on pod: %v\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif num+1 > restartCount {"
  },
  {
    "id" : "62ad822f-d908-48df-9824-6108deb31435",
    "prId" : 17969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c36a411-084a-4155-a400-effeaa2524c8",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I believe you have to pass a pointer type to Unmarshal\n",
        "createdAt" : "2015-12-03T00:47:25Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a16b4751be6d8a3841ff35fd44504e026263e26",
    "line" : null,
    "diffHunk" : "@@ -1,1 +448,452 @@\n\t\tmanifest := &appcschema.PodManifest{}\n\t\terr = json.Unmarshal(inspectResp.Pod.Manifest, manifest)\n\t\tif err != nil {\n\t\t\tglog.Warningf(\"rkt: error unmatshaling pod manifest: %v\", err)"
  },
  {
    "id" : "30f3d5f0-c741-4756-bc11-907321e3f62b",
    "prId" : 17969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f00cc404-5720-4b40-8dae-5be339eedb76",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "unmarshal needs a pointer\n",
        "createdAt" : "2015-12-03T02:01:09Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a16b4751be6d8a3841ff35fd44504e026263e26",
    "line" : null,
    "diffHunk" : "@@ -1,1 +448,452 @@\n\t\tmanifest := &appcschema.PodManifest{}\n\t\terr = json.Unmarshal(inspectResp.Pod.Manifest, manifest)\n\t\tif err != nil {\n\t\t\tglog.Warningf(\"rkt: error unmatshaling pod manifest: %v\", err)"
  },
  {
    "id" : "b0238e24-13df-4923-ac92-a5a58d5725fb",
    "prId" : 17969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f28a5f1-10cc-40b2-976d-99efa2bedd4f",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think we can only remove the creation time annotation once we bump the minimum required version for rkt to a version that implements creation time. Is that correct?\n",
        "createdAt" : "2015-12-03T21:14:26Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "94fcaf08-05fd-4d1f-bba8-7c52c61e3d70",
        "parentId" : "2f28a5f1-10cc-40b2-976d-99efa2bedd4f",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong I think that's what @dgonyeo means right?\n",
        "createdAt" : "2015-12-03T21:50:55Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "82ee2010-f0fd-43c5-b278-866dc9086b95",
        "parentId" : "2f28a5f1-10cc-40b2-976d-99efa2bedd4f",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I was just pointing out that even the latest rkt support this feature, we'll have to wait until we bump the minimum required version in kubelet, i.e., we have to stop supporting all previous versions :)\n",
        "createdAt" : "2015-12-03T22:35:32Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a16b4751be6d8a3841ff35fd44504e026263e26",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +78,82 @@\tk8sRktNameAnno         = \"rkt.kubernetes.io/name\"\n\tk8sRktNamespaceAnno    = \"rkt.kubernetes.io/namespace\"\n\t//TODO: remove the creation time annotation once this is closed: https://github.com/coreos/rkt/issues/1789\n\tk8sRktCreationTimeAnno  = \"rkt.kubernetes.io/created\"\n\tk8sRktContainerHashAnno = \"rkt.kubernetes.io/containerhash\""
  },
  {
    "id" : "5438be15-0827-44f4-b3c4-d58111274e9b",
    "prId" : 17969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e375a6c4-1c98-4294-af61-9b632a5c67ca",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Would it make sense to ignore pods that we cannot inspect?\n",
        "createdAt" : "2015-12-03T21:14:49Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "99bd7018-cf60-43ec-ade7-9b6c050da816",
        "parentId" : "e375a6c4-1c98-4294-af61-9b632a5c67ca",
        "authorId" : "926f3eb2-468a-464a-86dd-534f956fed1c",
        "body" : "I think it's a situation worthy of at least logging an issue, since this is a pod that at least a moment ago was a valid pod that had the kubernetes annotations, and we _should_ be able to inspect it.\n",
        "createdAt" : "2015-12-04T19:14:57Z",
        "updatedAt" : "2015-12-09T22:43:59Z",
        "lastEditedBy" : "926f3eb2-468a-464a-86dd-534f956fed1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a16b4751be6d8a3841ff35fd44504e026263e26",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +442,446 @@\t\t}\n\n\t\tif inspectResp.Pod == nil {\n\t\t\tglog.Warningf(\"rkt: pod %s vanished?!\", rktpod.Id)\n\t\t\tcontinue"
  },
  {
    "id" : "88e2107e-e37b-4696-b938-7232cb0d1015",
    "prId" : 17968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4db3de1-d59c-487b-a0af-5acacb23fb2f",
        "parentId" : null,
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@dgonyeo Lets add a todo here for the image size? https://github.com/coreos/rkt/issues/1814\n",
        "createdAt" : "2015-11-30T19:03:26Z",
        "updatedAt" : "2015-12-04T19:26:05Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ae6bf9d391c3ec5ecf9dc12fba7ffb3241da6f1",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1338,1342 @@\t\timages[i] = kubecontainer.Image{\n\t\t\tID:   image.Id,\n\t\t\tTags: []string{image.Name},\n\t\t\t//TODO: fill in the size of the image\n\t\t}"
  },
  {
    "id" : "aa5da325-97ae-4422-a270-b21d44a9d450",
    "prId" : 17526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61be3318-076e-4585-a725-4d08c66f7682",
        "parentId" : null,
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "can we bump libcontainer?\n",
        "createdAt" : "2015-11-21T00:27:59Z",
        "updatedAt" : "2015-11-24T00:31:06Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "77da3abb-d883-4e1a-819e-e740149ba25d",
        "parentId" : "61be3318-076e-4585-a725-4d08c66f7682",
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "https://github.com/opencontainers/runc/pull/408\n",
        "createdAt" : "2015-11-21T00:32:52Z",
        "updatedAt" : "2015-11-24T00:31:06Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "b708563a-4d23-4b25-b357-44e9aeb35e2b",
        "parentId" : "61be3318-076e-4585-a725-4d08c66f7682",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@jonboulle We can submit a PR to libcontainer, but I don't what that block this.\n",
        "createdAt" : "2015-11-21T00:32:58Z",
        "updatedAt" : "2015-11-24T00:31:06Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b423dd458c9a592b3419feaeb4d2d385aa1c75f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +171,175 @@\tif err := rkt.checkVersion(minimumRktBinVersion, recommendedRktBinVersion, minimumAppcVersion, minimumRktApiVersion, minimumSystemdVersion); err != nil {\n\t\t// TODO(yifan): Latest go-systemd version have the ability to close the\n\t\t// dbus connection. However the 'docker/libcontainer' package is using\n\t\t// the older go-systemd version, so we can't update the go-systemd version.\n\t\trkt.apisvcConn.Close()"
  },
  {
    "id" : "585106b7-78c5-4956-8fa3-3ff6ddc92fe0",
    "prId" : 17526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e409839-9561-450b-aed3-a4d6d2e6ace4",
        "parentId" : null,
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "did you forget to include a file in this diff? (I can't see this function anywhere)\n",
        "createdAt" : "2015-11-21T00:29:40Z",
        "updatedAt" : "2015-11-24T00:31:06Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "cdc26115-a733-468e-9398-c3a30f53fa6c",
        "parentId" : "7e409839-9561-450b-aed3-a4d6d2e6ace4",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "I don't know what's happening here, but if you click the second commit, it shows up\nhttps://github.com/yifan-gu/kubernetes/commit/da3a66eaa9fadb8d535b879360f0b5873a1f53dd\n",
        "createdAt" : "2015-11-21T00:37:39Z",
        "updatedAt" : "2015-11-24T00:31:06Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b423dd458c9a592b3419feaeb4d2d385aa1c75f",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +129,133 @@) (*Runtime, error) {\n\t// Create dbus connection.\n\tsystemd, err := newSystemd()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"rkt: cannot create systemd interface: %v\", err)"
  },
  {
    "id" : "c087bc62-9735-4eb8-9799-1e021b450448",
    "prId" : 15658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cc01342-b22d-4dc0-b998-cbf906aaf31a",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I think we'd want to record an event or surface this through in other ways, but we can reiterate later.\n",
        "createdAt" : "2015-10-15T20:29:58Z",
        "updatedAt" : "2015-10-16T01:04:14Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4709cbaa-3a55-4669-b24e-a1cc3e321670",
        "parentId" : "6cc01342-b22d-4dc0-b998-cbf906aaf31a",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@yujuhong Added a todo\n",
        "createdAt" : "2015-10-16T01:04:21Z",
        "updatedAt" : "2015-10-16T01:04:21Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "a95b605ff177e5bed87e1ff07d9fecfa5d2a82ef",
    "line" : null,
    "diffHunk" : "@@ -1,1 +170,174 @@\tif result != 0 {\n\t\t// TODO(yifan): Record an event to expose the information.\n\t\tglog.Warningf(\"rkt: current version %q is not recommended (recommended version %q)\", version, recommendRktVersion)\n\t}\n"
  },
  {
    "id" : "0e9625ab-3445-497d-bf27-939a24d88227",
    "prId" : 14056,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ff3d79-375e-44b7-a320-c6d1e738ea02",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "ditto\n",
        "createdAt" : "2015-09-16T18:16:25Z",
        "updatedAt" : "2015-09-16T18:32:08Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad33db1a8465bca0bb5e88d3fee544ea2a169ef6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1291,1295 @@\t//\n\t// With '--no-legend=true' the fist line (KEY NAME) will be omitted.\n\toutput, err := r.runCommand(\"image\", \"list\", \"--no-legend=true\", \"--fields=key,name\")\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "473d45c9-8af9-4173-a6d7-35e315b37754",
    "prId" : 12880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e8fd31a-c92b-4cc7-8186-b087755067b0",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Listing all unit files on every GetPodStatus() call seems very expensive considering that we poll for Pod Status periodically as of now. Are there any alternatives to this approach? Inotify or cache unit files relevant to a pod, etc?\n",
        "createdAt" : "2015-08-18T22:54:25Z",
        "updatedAt" : "2015-08-18T23:27:28Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "1e3b9de0-fdd2-4716-9278-1b7874b1ea1a",
        "parentId" : "2e8fd31a-c92b-4cc7-8186-b087755067b0",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@vishh Thanks for catching, yes, this involes a bunch of calls to `stat`. I will add a TODO here to optimize later. (e.g. list unit files at the first time when kubelet starts, and record every creation of the unit file names later, we just need the names here.)\n",
        "createdAt" : "2015-08-18T23:23:26Z",
        "updatedAt" : "2015-08-18T23:27:28Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "02ede8d5-cd0e-47ef-ab13-4db86689de07",
        "parentId" : "2e8fd31a-c92b-4cc7-8186-b087755067b0",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Ok. Thanks!\n",
        "createdAt" : "2015-08-18T23:37:38Z",
        "updatedAt" : "2015-08-18T23:37:38Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "46d75a67-1140-44c4-a33a-c3dfda9b670c",
        "parentId" : "2e8fd31a-c92b-4cc7-8186-b087755067b0",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "You are welcome :)\n",
        "createdAt" : "2015-08-19T00:11:06Z",
        "updatedAt" : "2015-08-19T00:11:06Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "271526b5-6ff4-4a60-9307-dc5d60e3c577",
        "parentId" : "2e8fd31a-c92b-4cc7-8186-b087755067b0",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Docker is in the similar boat as it has to do to `docker ps -a` to list all containers in order to achieve this. Hopefully adding the runtime pod cache would solve this problem :)\n",
        "createdAt" : "2015-08-19T16:32:12Z",
        "updatedAt" : "2015-08-19T16:32:12Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f796f234a130e1cde9a9675eb16717a24e9a49",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +720,724 @@// GetPodStatus returns the status of the given pod.\nfunc (r *runtime) GetPodStatus(pod *api.Pod) (*api.PodStatus, error) {\n\tunitNames, err := listUnitFiles()\n\tif err != nil {\n\t\tglog.Errorf(\"rkt: Cannot list unit files: %v\", err)"
  },
  {
    "id" : "83c9840f-4a89-4e17-a6c5-9665fe6222e2",
    "prId" : 8228,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5e85c7a-5a2c-4b26-95fa-7221b155d035",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Why is the output one character?\n",
        "createdAt" : "2015-05-14T15:52:00Z",
        "updatedAt" : "2015-05-14T19:03:24Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "540c3ddc-7aeb-46d0-94bd-97e93aa75572",
        "parentId" : "e5e85c7a-5a2c-4b26-95fa-7221b155d035",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@vmarmol That's one line actually, I will update the comments of the runCommand()\n",
        "createdAt" : "2015-05-14T16:54:56Z",
        "updatedAt" : "2015-05-14T19:03:24Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "2a0ada9d-6f96-4004-a6f7-417e08da0663",
        "parentId" : "e5e85c7a-5a2c-4b26-95fa-7221b155d035",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Aaah right it outputs lines, thank you :)\n",
        "createdAt" : "2015-05-14T16:58:57Z",
        "updatedAt" : "2015-05-14T19:03:24Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf7c8d6867b38e9733e1f83d91d86f2cc84c357",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +361,365 @@\t\treturn nil, err\n\t}\n\tif len(output) != 1 {\n\t\treturn nil, fmt.Errorf(\"invalid output: %v\", output)\n\t}"
  },
  {
    "id" : "8636e2ca-59ce-4e02-894a-9499c3dc9412",
    "prId" : 7974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you add a comment explaining why a docker keyring appears in a rkt file?\n",
        "createdAt" : "2015-05-18T20:50:01Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5d8c8b9f-2b96-4bd5-93bc-5dede009b6ba",
        "parentId" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can you add a comment explaining why a docker keyring appears in a rkt file?\n\nTo be honest, I have no idea.  I updated the code to make use of the extended keyring, but I did not attempt to lookup to see why the rkt code used them to begin with.  If it was right before, it's still right.  If it was wrong before, it's no more wrong than it was.\n",
        "createdAt" : "2015-05-18T21:19:54Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1ae5f6ee-c6bc-4a72-ab7d-95bc0f4d6680",
        "parentId" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK\n",
        "createdAt" : "2015-05-18T21:56:27Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fa3dd0a2-d2d1-4d37-bb19-d45b0fb212ce",
        "parentId" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@vmarmol @yifan-gu Any comments about docker keyring use in rkt runtime?\n",
        "createdAt" : "2015-05-19T16:00:21Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "233792f5-9e6d-4d72-8974-c2026f9f2dbf",
        "parentId" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "@lavalamp @pmorie @deads2k This is because rkt can pull and run docker images with docker credentials, I read the keyring here and store it in the rkt's auth config files for docker (https://github.com/coreos/rkt/blob/master/Documentation/configuration.md#rktkind-dockerauth)\n",
        "createdAt" : "2015-05-20T02:54:57Z",
        "updatedAt" : "2015-05-20T02:54:57Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      },
      {
        "id" : "8f069864-8bae-4bea-a31a-c869cd323617",
        "parentId" : "7be6d859-8678-476e-b7cc-d17153961d20",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "K, I figured as much.\nOn Tue, May 19, 2015 at 10:55 PM Yifan Gu notifications@github.com wrote:\n\n> In pkg/kubelet/rkt/rkt.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7974#discussion_r30668138\n> :\n> \n> > @@ -789,7 +789,12 @@ func (r *runtime) PullImage(image kubecontainer.ImageSpec, pullSecrets []api.Sec\n> >         tag = \"latest\"\n> >     }\n> > -   creds, ok := r.dockerKeyring.Lookup(repoToPull)\n> > -   keyring, err := credentialprovider.MakeDockerKeyring(pullSecrets, r.dockerKeyring)\n> \n> @lavalamp https://github.com/lavalamp @pmorie\n> https://github.com/pmorie @deads2k https://github.com/deads2k This is\n> because rkt can pull and run docker images with docker credentials, I read\n> the keyring here and store it in the rkt's auth config files for docker (\n> https://github.com/coreos/rkt/blob/master/Documentation/configuration.md#rktkind-dockerauth\n> )\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7974/files#r30668138\n> .\n",
        "createdAt" : "2015-05-20T02:56:04Z",
        "updatedAt" : "2015-05-20T02:56:04Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "72c0709f18cbeff1efef3c2bd601db5f1e117509",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +790,794 @@\t}\n\n\tkeyring, err := credentialprovider.MakeDockerKeyring(pullSecrets, r.dockerKeyring)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "bfa105c4-1dcd-440a-b103-58f008e37de2",
    "prId" : 7543,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c103fb4e-43b4-4b80-a67a-16f23b203b75",
        "parentId" : null,
        "authorId" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "body" : "isn't this the nil value anyway?\n",
        "createdAt" : "2015-04-30T05:16:08Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "4c30e665-5e6c-4a02-81a0-563b610a6d75",
        "tags" : [
        ]
      },
      {
        "id" : "05df6c91-a8a3-42d0-bc60-62844e1e0004",
        "parentId" : "c103fb4e-43b4-4b80-a67a-16f23b203b75",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "nope, the app is from the imageManifest, so it can have some non-empty isolators.\nWhat I am doing here is to override the isolators if any isolators are specified in the pod spec\n@jonboulle \n",
        "createdAt" : "2015-04-30T07:31:03Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e8afc7c9616eed42237f90017c5b11fc94a7a28",
    "line" : null,
    "diffHunk" : "@@ -1,1 +166,170 @@func setIsolators(app *appctypes.App, c *api.Container) error {\n\tif len(c.Capabilities.Add) > 0 || len(c.Capabilities.Drop) > 0 || len(c.Resources.Limits) > 0 || len(c.Resources.Requests) > 0 {\n\t\tapp.Isolators = []appctypes.Isolator{}\n\t}\n"
  },
  {
    "id" : "be0a1714-c46c-4f45-b34c-0e659d65b8cb",
    "prId" : 7543,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee522598-dad2-4029-92c0-979e0a1714bf",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Since resource is not a pointer we can't edit it in place. We're modifying a copy:\n\nhttp://play.golang.org/p/eYtNFuq5N8\n",
        "createdAt" : "2015-04-30T18:14:35Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "7f3ad77f-a63f-4337-84b6-5b0673193199",
        "parentId" : "ee522598-dad2-4029-92c0-979e0a1714bf",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Good catch.\n",
        "createdAt" : "2015-04-30T18:47:13Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e8afc7c9616eed42237f90017c5b11fc94a7a28",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +205,209 @@\n\t// Resources.\n\tresources := make(map[api.ResourceName]resource)\n\tfor name, quantity := range c.Resources.Limits {\n\t\tresources[name] = resource{limit: quantity.String()}"
  },
  {
    "id" : "54837d79-2b95-4426-8bd8-01c2bcc01a2e",
    "prId" : 7543,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db96c3d9-7ce5-4693-922d-fa545bbb621c",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "We never actually add it to the map here\n",
        "createdAt" : "2015-04-30T18:14:36Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "ebeb3476-4a3a-4c42-aaab-77fa5d914c06",
        "parentId" : "db96c3d9-7ce5-4693-922d-fa545bbb621c",
        "authorId" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "body" : "Still use non-pointer, but update the map. @vmarmol \n",
        "createdAt" : "2015-04-30T19:46:27Z",
        "updatedAt" : "2015-04-30T22:28:45Z",
        "lastEditedBy" : "227eb550-8b08-4420-9a78-279f840bd8de",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e8afc7c9616eed42237f90017c5b11fc94a7a28",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +212,216 @@\t\tr, ok := resources[name]\n\t\tif !ok {\n\t\t\tr = resource{}\n\t\t}\n\t\tr.request = quantity.String()"
  }
]