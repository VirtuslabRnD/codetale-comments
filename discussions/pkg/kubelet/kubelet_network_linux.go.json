[
  {
    "id" : "0fefb8e3-934a-4d23-9c60-303264a2e58c",
    "prId" : 95378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95378#pullrequestreview-504472589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "427c590c-4df5-49d3-b249-50173f5f61a1",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I think we should log a warning to inform that we are not going to monitor this family, it is possible that the admin didn't know why is not working, so observing the log at least he has a clue and can install the missing kernel modules, per example, and restart kubelet",
        "createdAt" : "2020-10-08T06:48:53Z",
        "updatedAt" : "2020-10-09T15:59:50Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "55e6eebae2d2977297e407177e9b82b9b6d89412",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +63,67 @@\t\t} else {\n\t\t\tklog.Warningf(\"Failed to initialize %s iptables rules; some functionality may be missing.\", protocols[i])\n\t\t}\n\t}\n}"
  },
  {
    "id" : "5f3ca7dc-b99b-405c-a90b-d752efae490b",
    "prId" : 95378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95378#pullrequestreview-504473850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f016d7f-3c12-4944-b816-60d48477e851",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "Since this only runs once, we can log to inform that the syncNetwork was succesfully on ipfamily X",
        "createdAt" : "2020-10-08T06:49:30Z",
        "updatedAt" : "2020-10-09T15:59:50Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "ddd3bca0-f3d8-4dad-9ae4-b58835590145",
        "parentId" : "0f016d7f-3c12-4944-b816-60d48477e851",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "or maybe add it to the `syncNetworkUtil()` before returning?",
        "createdAt" : "2020-10-08T06:51:11Z",
        "updatedAt" : "2020-10-09T15:59:50Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "55e6eebae2d2977297e407177e9b82b9b6d89412",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +55,59 @@\t\tif kl.syncNetworkUtil(iptClient) {\n\t\t\tklog.Infof(\"Initialized %s iptables rules.\", protocols[i])\n\t\t\tgo iptClient.Monitor(\n\t\t\t\tutiliptables.Chain(\"KUBE-KUBELET-CANARY\"),\n\t\t\t\t[]utiliptables.Table{utiliptables.TableMangle, utiliptables.TableNAT, utiliptables.TableFilter},"
  },
  {
    "id" : "c9c56cb1-bc3a-48cf-9b6e-2bfd842d3cda",
    "prId" : 95378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95378#pullrequestreview-505131473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "457a2ac5-41b1-4869-9a8e-2bf443d4ca23",
        "parentId" : null,
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "`for i, iptClient := range iptClients {`",
        "createdAt" : "2020-10-08T19:49:45Z",
        "updatedAt" : "2020-10-09T15:59:50Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      },
      {
        "id" : "63d597c8-caac-46a4-8910-2b7d580f8d8f",
        "parentId" : "457a2ac5-41b1-4869-9a8e-2bf443d4ca23",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "that was the bug, you have to capture the variable otherwise the closure function used in the `Monitor` take its reference, and in the next iteration changes it ... as result in a dual stack cluster, if IPv6 is the second family, the monitor only executes `syncNetworkUtil` for IPv6 ... at least is my understanding",
        "createdAt" : "2020-10-08T20:13:57Z",
        "updatedAt" : "2020-10-09T15:59:50Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "55e6eebae2d2977297e407177e9b82b9b6d89412",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +51,55 @@\t}\n\n\tfor i := range iptClients {\n\t\tiptClient := iptClients[i]\n\t\tif kl.syncNetworkUtil(iptClient) {"
  },
  {
    "id" : "f7ace769-1e33-4f38-ace4-7c3b0e6867c6",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501540932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614bd20a-bd41-4a67-9e4f-5a1828d90c8b",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "this `iptClient` is the same as one defined on Kubelet `kl.iptClient`? did we remove it from Kubelet as we now pass it around? ",
        "createdAt" : "2020-10-02T17:40:59Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "31e0ffe3-29fd-402e-812e-5548b438c98a",
        "parentId" : "614bd20a-bd41-4a67-9e4f-5a1828d90c8b",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Yes (https://github.com/kubernetes/kubernetes/pull/95239/commits/8a264e3a2d548a4e923c35b718c0a142050648e7#diff-bf28da68f62a8df6e99e447c4351122dL822). Nothing else in kubelet uses it, and given that the easiest way to make this code dual-stack was to call `syncNetworkUtil` twice with different clients, there was no longer any good reason to store the client(s) in the kubelet.",
        "createdAt" : "2020-10-03T11:54:37Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +40,44 @@\tipv6Primary := kl.nodeIPs != nil && utilnet.IsIPv6(kl.nodeIPs[0])\n\n\tvar iptClients []utiliptables.Interface\n\tif maybeDualStack || !ipv6Primary {\n\t\tiptClients = append(iptClients, utiliptables.New(exec, utiliptables.ProtocolIPv4))"
  },
  {
    "id" : "062dfa4d-3523-4e93-b3e2-4b30cacfdf5a",
    "prId" : 92035,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92035#pullrequestreview-430994581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d290195c-f4f7-4432-8ebc-592e51ff5b38",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The goal here is to clear the bit right?  I'd expect to read `--and-mark` with the bitwise NOT of the bit you want to set.  In this case XOR works because we know the bit is set, but it's not immediately obvious (I had to think about it)\r\n\r\nHow about a code comment explaining why we are jumping through this hoop?",
        "createdAt" : "2020-06-15T21:07:46Z",
        "updatedAt" : "2020-06-15T22:47:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c12534d8b4724424405f848fc7a9afe830859891",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +136,140 @@\t// to Sprintf another bitmask).\n\tif _, err := kl.iptClient.EnsureRule(utiliptables.Append, utiliptables.TableNAT, KubePostroutingChain,\n\t\t\"-j\", \"MARK\", \"--xor-mark\", masqueradeMark); err != nil {\n\t\tklog.Errorf(\"Failed to ensure unmarking rule for %v: %v\", KubePostroutingChain, err)\n\t\treturn"
  }
]