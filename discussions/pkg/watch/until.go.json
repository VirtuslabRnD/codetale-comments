[
  {
    "id" : "bda86f48-c618-450b-97c1-82aaa021d700",
    "prId" : 23912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c3b2784-0f5f-405a-8c33-bbdf319ca14c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's weird to (maybe) return an event on a timeout, since the two are not related.\n",
        "createdAt" : "2016-04-06T17:47:53Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "461f7b59-1cd8-40c6-bec3-020e54ef99ee",
        "parentId" : "1c3b2784-0f5f-405a-8c33-bbdf319ca14c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Most of the wait conditions we've implemented so far end up needing the last state of the pod.  So this is just returning the last event because it's practically useful.  The other options are requiring you to wrap the watch with a recorder which is a lot more lines.\n",
        "createdAt" : "2016-04-06T18:16:00Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b671b05e-6847-404f-84db-264ac3111806",
        "parentId" : "1c3b2784-0f5f-405a-8c33-bbdf319ca14c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, that makes sense.\n",
        "createdAt" : "2016-04-06T22:58:57Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "845e49657262a52d262aa60b18699ab24b466c6d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +75,79 @@\n\t\t\tcase <-after:\n\t\t\t\treturn lastEvent, wait.ErrWaitTimeout\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "c30e5a6a-5808-4d14-a8b9-c95303f02ed1",
    "prId" : 23912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81956b2c-f0bc-4598-b0a4-79c34bf820c6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "My thought on this is that it encourages people to write edge-triggered conditions, and unless everyone correctly starts by first doing a list, checking a level-triggered condition, and then watching at that RV, edge triggered conditions will not correspond to reality sufficiently well.\n",
        "createdAt" : "2016-04-06T17:51:55Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c23cf4d9-2e98-4825-a22f-177864e4f448",
        "parentId" : "81956b2c-f0bc-4598-b0a4-79c34bf820c6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe you can fix this with documentation, maybe with a higher level list-check-watch function.\n",
        "createdAt" : "2016-04-06T17:52:33Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a7493d1f-95d0-48fc-90b7-cc4e8140f3ce",
        "parentId" : "81956b2c-f0bc-4598-b0a4-79c34bf820c6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If I've learned anything from our codebase, it's that you don't need to encourage people to do bad things in library code, they'll do that on their own without seeing the library code.\n\nThe primary reason for separating conditions was so that you could do two orthogonal conditions in different code.  I suppose we could require all conditions to be satisfied, but that's a wrapper too.  So PodReady / EndpointResponds.\n",
        "createdAt" : "2016-04-06T18:18:33Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "378541f5-f10b-40de-ac47-0b5fb7db85d8",
        "parentId" : "81956b2c-f0bc-4598-b0a4-79c34bf820c6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The really important edge condition is UID - if you start watching without a resource version you should probably specify a UID conditional (which we can't do from watch today to the best of my knowledge).\n",
        "createdAt" : "2016-04-06T18:22:31Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c6b77841-fc5f-4177-84ec-dd1ebda1eb68",
        "parentId" : "81956b2c-f0bc-4598-b0a4-79c34bf820c6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, that's a good point about UID.\n",
        "createdAt" : "2016-04-06T23:00:20Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "845e49657262a52d262aa60b18699ab24b466c6d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@// encountered. The first condition that returns an error terminates the watch (and the event is also returned).\n// If no event has been received, the returned event will be nil.\n// Conditions are satisfied sequentially so as to provide a useful primitive for higher level composition.\nfunc Until(timeout time.Duration, watcher Interface, conditions ...ConditionFunc) (*Event, error) {\n\tch := watcher.ResultChan()"
  },
  {
    "id" : "f492edae-9b20-4e35-a874-c7dc53ed80ea",
    "prId" : 23912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84eb62e-737c-47e9-bd5b-fcf5c1e799d1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You probably want to keep checking conditions until you find one that doesn't pass. Otherwise, if you have two conditions and one change makes both pass, you'll sit here until another change comes in anyway before you even try running the second condition. So maybe reverse the loops or something.\n",
        "createdAt" : "2016-04-06T23:05:25Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1282d071-ba5c-4b84-ad9d-ec926f1a2782",
        "parentId" : "a84eb62e-737c-47e9-bd5b-fcf5c1e799d1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That changes the semantics of the call - you can accomplish that that by providing a function that wraps conditions to require them all to be satisfied `func And(fns ...ConditionFunc)` (or the equivalent Or).  So I would argue that's possible today succinctly - I just want to make the \"A, then B\" possible to achieve succinctly.\n",
        "createdAt" : "2016-04-08T17:23:55Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c5e8cfed-1b2f-44ba-adde-c1fc9c2d857a",
        "parentId" : "a84eb62e-737c-47e9-bd5b-fcf5c1e799d1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm saying if the same update notification happens to satisfy both A and B, you shouldn't block waiting for another update before even checking B. Like if A is \"has a label\" and B is \"is running\" you could plausibly observe both of those at the same time.\n",
        "createdAt" : "2016-04-08T17:47:26Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "020c8184-c9bb-475a-bf15-73f499691b6f",
        "parentId" : "a84eb62e-737c-47e9-bd5b-fcf5c1e799d1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ok, I can do that.\n",
        "createdAt" : "2016-04-08T18:10:35Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "845e49657262a52d262aa60b18699ab24b466c6d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +56,60 @@\t\t\t}\n\t\t}\n\tConditionSucceeded:\n\t\tfor {\n\t\t\tselect {"
  },
  {
    "id" : "6126fe09-4c5e-4153-b8fc-1670ce2230f5",
    "prId" : 23912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97ff4cf9-66bd-40f4-91b2-060ff35464d3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I would come out and just say that if you test for edges, you'll probably end up with something that doesn't work reliably unless you're super careful, but that's just me :)\n",
        "createdAt" : "2016-04-06T23:07:40Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "58b2a80b-3595-496a-911d-931051598311",
        "parentId" : "97ff4cf9-66bd-40f4-91b2-060ff35464d3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You can see a bit how I'm using this in #23567 to check one condition\nthen move to the other.  I have the invariants check to look at the\nwhole watch stream and look for regression.\n\nBut it's worth noting that we do have edge conditions to test for -\nfor instance, readiness can be reset if liveness fires.  If I want to\nstring together conditions to test that I'll end up using some edges.\nEven our controllers have _some_ edges (that are rechecked later).\n",
        "createdAt" : "2016-04-06T23:19:11Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "845e49657262a52d262aa60b18699ab24b466c6d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +26,30 @@// or an error if the condition cannot be checked and should terminate. In general, it is better to define\n// level driven conditions over edge driven conditions (pod has ready=true, vs pod modified and ready changed\n// from false to true).\ntype ConditionFunc func(event Event) (bool, error)\n"
  }
]