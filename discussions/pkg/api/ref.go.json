[
  {
    "id" : "1861fa5a-93f3-4037-b1c9-6c131c3fb5ca",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is questionable because it means object references don't work for other schemes that want to use SelfLinks.\n",
        "createdAt" : "2015-04-21T18:34:17Z",
        "updatedAt" : "2015-04-21T19:32:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "017057aa-9373-4291-bd5c-10fde0a61619",
        "parentId" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Maybe I'm overthinking it though.\n",
        "createdAt" : "2015-04-21T18:34:24Z",
        "updatedAt" : "2015-04-21T19:32:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "174676dd-90bc-457f-a880-ef81dc6bd3d1",
        "parentId" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Schemes that want to use ObjectReferences\n",
        "createdAt" : "2015-04-21T18:38:00Z",
        "updatedAt" : "2015-04-21T19:32:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c9dd1ec9-ed6f-4a3b-8464-894f988d7fae",
        "parentId" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am fine if we later revisit, but the current behavior blocked any downstream component to create an event at all.\n\nI also despise the use of regex, so in hackiness, this is an improvement in my book ;-)\n",
        "createdAt" : "2015-04-21T18:46:33Z",
        "updatedAt" : "2015-04-21T19:32:00Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "e620f55f-3ee2-4ba6-84e9-48c815329273",
        "parentId" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add TODO to the method to require a meta.Interface() and spawn an issue and I'll allow it.\n",
        "createdAt" : "2015-04-21T18:57:35Z",
        "updatedAt" : "2015-04-21T19:32:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "46ebf018-ff75-4b9c-ba46-4e6f1f8fcd44",
        "parentId" : "ca7ee436-3167-4fb3-b7ae-2c5e5f96142e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "TODO added at top of method, and issue linked.\n",
        "createdAt" : "2015-04-21T19:32:27Z",
        "updatedAt" : "2015-04-21T19:32:27Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3445bd5806ee6532449d4e07423b0494c157a390",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +58,62 @@\tkind := meta.Kind()\n\tif kind == \"\" {\n\t\t_, kind, err = Scheme.ObjectVersionAndKind(obj)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "370a51a3-3a16-440f-85ea-0ff83cfa3f5c",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8431338d-f1de-4fd5-8ca8-29b6fb175f9b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry for extremely late delay, but getting the version from the self link should be first in the priority order; otherwise this will end up lying about where the object came from.\n",
        "createdAt" : "2015-06-23T23:23:39Z",
        "updatedAt" : "2015-06-23T23:23:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3445bd5806ee6532449d4e07423b0494c157a390",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +66,70 @@\t// if the object referenced is actually persisted, we can also get version from meta\n\tversion := meta.APIVersion()\n\tif version == \"\" {\n\t\tselfLink := meta.SelfLink()\n\t\tif selfLink == \"\" {"
  },
  {
    "id" : "61a973cc-7e4e-42a4-92ab-4acf90700958",
    "prId" : 1475,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e42b919a-94ae-41d1-b027-d0146b71148d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This seems questionable given that we allow flexible path prefixes in the client and apiserver today.  If we're going to do this we need to disallow that.\n",
        "createdAt" : "2014-09-29T16:43:47Z",
        "updatedAt" : "2014-09-29T16:43:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "af6d7e4c-c1f0-4077-b909-e73e06196f1a",
        "parentId" : "e42b919a-94ae-41d1-b027-d0146b71148d",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Good catch! Let me file an issue to disallow flexible path prefixes or have another way to retrieve version info. Thanks.\n",
        "createdAt" : "2014-09-29T17:09:29Z",
        "updatedAt" : "2014-09-29T17:09:29Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "8fe24b1a-b10e-4d17-af1d-047629df25e7",
        "parentId" : "e42b919a-94ae-41d1-b027-d0146b71148d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What does flexible path prefix mean?\n\nOn Mon, Sep 29, 2014 at 10:09 AM, Dawn Chen notifications@github.com\nwrote:\n\n> In pkg/api/ref.go:\n> \n> > +distributed under the License is distributed on an \"AS IS\" BASIS,\n> > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package api\n> > +\n> > +import (\n> > -   \"fmt\"\n> > -   \"regexp\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"\n> >   +)\n> >   +\n> >   +var versionFromSelfLink = regexp.MustCompile(\"/api/([^/]*)/\")\n> \n> Good catch! Let me file an issue to disallow flexible path prefixes or\n> have another way to retrieve version info. Thanks.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1475/files#r18167889\n> .\n",
        "createdAt" : "2014-09-29T21:56:20Z",
        "updatedAt" : "2014-09-29T21:56:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ec70fd9b-7e8e-4da6-bc45-caed2a3c83a1",
        "parentId" : "e42b919a-94ae-41d1-b027-d0146b71148d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You can start the apiserver today under any arbitrary path (http://foo.com/kubernetes/api).\n\n> On Sep 29, 2014, at 5:56 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/ref.go:\n> \n> > +distributed under the License is distributed on an \"AS IS\" BASIS,\n> > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package api\n> > +\n> > +import (\n> > -   \"fmt\"\n> > -   \"regexp\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/runtime\"\n> >   +)\n> >   +\n> >   +var versionFromSelfLink = regexp.MustCompile(\"/api/([^/]*)/\")\n> >   What does flexible path prefix mean?\n> >   …\n> >   —\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-29T22:26:03Z",
        "updatedAt" : "2014-09-29T22:26:03Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ac7578699309e89224c443b7d5dba056ec2c33c",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@)\n\nvar versionFromSelfLink = regexp.MustCompile(\"/api/([^/]*)/\")\n\n// GetReference returns an ObjectReference which refers to the given"
  }
]