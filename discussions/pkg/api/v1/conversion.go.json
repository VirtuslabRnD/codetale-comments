[
  {
    "id" : "352a8198-34f9-490c-8d1a-33324d44c94e",
    "prId" : 53164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53164#pullrequestreview-65953369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05622b52-8549-45ed-bed7-724fce813d80",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "are there fuzzing tests for this round tripping? surprised nothing caught this before",
        "createdAt" : "2017-09-28T04:45:56Z",
        "updatedAt" : "2017-10-18T19:38:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bfb15416-7dfc-487e-ab7d-3715a419ccaa",
        "parentId" : "05622b52-8549-45ed-bed7-724fce813d80",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "I added a manual test for round-tripping below (`TestReplicationControllerConversion`). I'll look into adding a fuzz test as well.",
        "createdAt" : "2017-09-28T17:51:22Z",
        "updatedAt" : "2017-10-18T19:38:20Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "f513c498-0476-4198-88eb-d5bac11824a1",
        "parentId" : "05622b52-8549-45ed-bed7-724fce813d80",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "definitely need a fuzz test to catch new fields",
        "createdAt" : "2017-09-28T18:19:34Z",
        "updatedAt" : "2017-10-18T19:38:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1377383bbb82f7b97a428c75ba8882b11f63b5d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +306,310 @@\tout.AvailableReplicas = in.AvailableReplicas\n\tout.ObservedGeneration = in.ObservedGeneration\n\tfor _, cond := range in.Conditions {\n\t\tout.Conditions = append(out.Conditions, v1.ReplicationControllerCondition{\n\t\t\tType:               v1.ReplicationControllerConditionType(cond.Type),"
  },
  {
    "id" : "696cb39a-65ca-4fd7-b54b-73e2fc25be2c",
    "prId" : 47019,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47019#pullrequestreview-51849307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ab27b3-4561-4b89-8c22-e90315b4fc53",
        "parentId" : null,
        "authorId" : "a5ac91f3-1cbc-4fd9-af85-741ee28dd9c8",
        "body" : "Golint naming: don't use underscores in Go names; func Convert_api_SecurityContext_To_v1_SecurityContext should be ConvertAPISecurityContextToV1SecurityContext. [More info](http://golang.org/doc/effective_go.html#mixed-caps). <!-- golint -->",
        "createdAt" : "2017-07-24T18:01:20Z",
        "updatedAt" : "2017-07-24T18:01:21Z",
        "lastEditedBy" : "a5ac91f3-1cbc-4fd9-af85-741ee28dd9c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e4c6f6ed0d441d8fd17a18416556f7621eeb56",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +676,680 @@\treturn nil\n}\nfunc Convert_api_SecurityContext_To_v1_SecurityContext(in *api.SecurityContext, out *v1.SecurityContext, s conversion.Scope) error {\n\tif in.Capabilities != nil {\n\t\tout.Capabilities = new(v1.Capabilities)"
  },
  {
    "id" : "6dad1a3c-36ae-47bc-b820-c30505d254ff",
    "prId" : 38574,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38574#pullrequestreview-13849731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb37a195-4036-4a8e-8628-38af6dfd83d3",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This doesn't get called by the kubelet - are the defaults being correctly applied there?",
        "createdAt" : "2016-12-20T20:59:48Z",
        "updatedAt" : "2016-12-22T01:29:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cb06b437-4610-4e3b-acc7-69bd99bd5367",
        "parentId" : "eb37a195-4036-4a8e-8628-38af6dfd83d3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Never mind - kubelet is non-defaulting now.\r\n\r\nThis won't work in all possible code paths in the api server, but is probably sufficient for now.",
        "createdAt" : "2016-12-20T21:01:21Z",
        "updatedAt" : "2016-12-22T01:29:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd6792ae0879b2fbe831e394b0831433f068a420",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +496,500 @@\n\t\t// Call defaulters explicitly until annotations are removed\n\t\tfor i := range in.Spec.InitContainers {\n\t\t\tc := &in.Spec.InitContainers[i]\n\t\t\tSetDefaults_Container(c)"
  },
  {
    "id" : "7929f5ab-15c7-4d8e-8626-a8d3bef5173c",
    "prId" : 34784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34784#pullrequestreview-5679975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87f015d6-2269-4fc5-8852-8fcbb7e32fb7",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why this is copy-only? It seems to be non-trivial conversion.\n",
        "createdAt" : "2016-10-25T08:46:29Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "bc40a134-c00e-4c5f-b6f8-4b1af7d9ed4b",
        "parentId" : "87f015d6-2269-4fc5-8852-8fcbb7e32fb7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Aah - it seems to be related to another commit, where you moved non-trivial logic to defaulting, right?\n",
        "createdAt" : "2016-10-25T08:47:32Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f1d2ed4c-10c8-440a-98b5-d1a8d013c0c9",
        "parentId" : "87f015d6-2269-4fc5-8852-8fcbb7e32fb7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Correct.  Because defaulting _must_ happen, and this is in the gray area between defaulting (a versioned client wants this as well) I moved it out.\n",
        "createdAt" : "2016-10-25T15:42:50Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c39c0a767e2bfbac17acf246a8d9eaeb6a3497",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +735,739 @@}\n\n// +k8s:conversion-fn=copy-only\nfunc Convert_v1_ResourceList_To_api_ResourceList(in *ResourceList, out *api.ResourceList, s conversion.Scope) error {\n\tif *in == nil {"
  },
  {
    "id" : "ef7b8f26-5165-4069-bf39-c801c11deca4",
    "prId" : 34784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34784#pullrequestreview-5605706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0957ea60-0e77-401a-9f8d-2db589079274",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Is the purpose of moving it to default to make it a copy-only function or is there a different reason?\n",
        "createdAt" : "2016-10-25T08:48:51Z",
        "updatedAt" : "2016-10-25T23:30:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c39c0a767e2bfbac17acf246a8d9eaeb6a3497",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +748,752 @@\t\t// In the future, we should instead reject values that need rounding.\n\t\t// const milliScale = -3\n\t\t// val.RoundUp(milliScale)\n\n\t\t(*out)[api.ResourceName(key)] = val"
  },
  {
    "id" : "ac05d7c0-461e-48b2-aafa-0e9d35283ff8",
    "prId" : 33055,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33055#pullrequestreview-1247465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5710ea27-222b-4e0b-8910-f35f230e3766",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "We do this a couple lins above (line 623) are we doing this twice intentionally?\n",
        "createdAt" : "2016-09-22T22:55:06Z",
        "updatedAt" : "2016-09-22T22:55:06Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c4623e5be5fecdee2a31bdf409e2d3d6b28951b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +641,645 @@\t// If there is a beta annotation, copy to alpha key.\n\t// See commit log for PR #31026 for why we do this.\n\tif valueBeta, okBeta := in.Annotations[PodInitContainerStatusesBetaAnnotationKey]; okBeta {\n\t\tin.Annotations[PodInitContainerStatusesAnnotationKey] = valueBeta\n\t}"
  },
  {
    "id" : "4e98870a-87f4-44ba-a8e2-832726559bf5",
    "prId" : 31026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faf94768-2fec-4125-b723-e92fea218b62",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "nit: s/repr./representative? \n",
        "createdAt" : "2016-08-20T04:11:54Z",
        "updatedAt" : "2016-08-20T04:11:54Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e5a7f9441a3eb4a7b09d935c59c8d16977dae5d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +485,489 @@\t\tin.Annotations[PodInitContainersAnnotationKey] = valueBeta\n\t}\n\t// Move the annotation to the internal repr. field\n\tif value, ok := in.Annotations[PodInitContainersAnnotationKey]; ok {\n\t\tvar values []Container"
  },
  {
    "id" : "f46e8dda-4de1-4802-87f9-af5152e07d17",
    "prId" : 31026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3a49cd4-4b5f-47bc-8695-d5456b5f8a33",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I really can't see how this provides value to end users.  Why not drop the alpha annotation?  Why do I need to support alpha and beta at the same time?\n",
        "createdAt" : "2016-08-21T17:39:49Z",
        "updatedAt" : "2016-08-21T17:39:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9920b36a-e91e-459f-ada6-8a18e7ee52ff",
        "parentId" : "e3a49cd4-4b5f-47bc-8695-d5456b5f8a33",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The value is that a user who learns about the feature knows how stable it is.\nFor example, on GKE, we don't typically expose users to alpha features, but we do expose beta ones.\n",
        "createdAt" : "2016-08-22T18:31:46Z",
        "updatedAt" : "2016-08-22T18:31:46Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e5a7f9441a3eb4a7b09d935c59c8d16977dae5d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +608,612 @@\t// If there is a beta annotation, copy to alpha key.\n\t// See commit log for PR #31026 for why we do this.\n\tif valueBeta, okBeta := in.Annotations[PodInitContainersBetaAnnotationKey]; okBeta {\n\t\tin.Annotations[PodInitContainersAnnotationKey] = valueBeta\n\t}"
  },
  {
    "id" : "21056072-ef45-49cf-80e3-0dfa657312a1",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ab0be11-1bf3-4531-a66e-8e8e823e3493",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This is strange - how this worked before if we didn't copy annotations at all?\n",
        "createdAt" : "2016-05-21T10:23:41Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f0f1fcb2-37dd-4656-af50-bee07aebf256",
        "parentId" : "3ab0be11-1bf3-4531-a66e-8e8e823e3493",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We copied annotation before (this change does not copy them, so any custom conversion that mutates annotations is responsible for copying them).\n",
        "createdAt" : "2016-05-21T14:21:53Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d8f91f7d-61f8-43d9-841d-bb93246ea43e",
        "parentId" : "3ab0be11-1bf3-4531-a66e-8e8e823e3493",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sure - got it. thanks!\n",
        "createdAt" : "2016-05-23T07:39:46Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +249,253 @@\t}\n\n\tif old := out.Annotations; old != nil {\n\t\tout.Annotations = make(map[string]string, len(old))\n\t\tfor k, v := range old {"
  },
  {
    "id" : "cb1796c9-f3fd-441e-804b-097eb176c8bf",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "158d8000-fd0c-4f92-98b7-2a6ac7aca4c8",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if out.Annotations == nil?\n",
        "createdAt" : "2016-05-23T07:46:45Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "428dc9b6-f2e0-4ad2-a7b8-04a3c994bc53",
        "parentId" : "158d8000-fd0c-4f92-98b7-2a6ac7aca4c8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This block is deleting the status annotation - if there are no annotations, there's nothing to delete and nothing to copy.\n",
        "createdAt" : "2016-05-23T14:01:25Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ab8b3349-47ae-4b10-ad9e-76ba00bb00b6",
        "parentId" : "158d8000-fd0c-4f92-98b7-2a6ac7aca4c8",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I was missing the fact that len(nil) works.\n",
        "createdAt" : "2016-05-23T14:10:05Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +283,287 @@\t\treturn err\n\t}\n\tif len(out.Annotations) > 0 {\n\t\told := out.Annotations\n\t\tout.Annotations = make(map[string]string, len(old))"
  },
  {
    "id" : "89968d8c-5e45-4655-9e67-f4d511dbac3a",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aeb2173-a83a-4c58-8e47-a1eabd038eaa",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if out.Annotations == nil?\n",
        "createdAt" : "2016-05-23T07:47:07Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8da8e218-4a6f-4ebb-b4fc-2873cd75fe3a",
        "parentId" : "8aeb2173-a83a-4c58-8e47-a1eabd038eaa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Same\n",
        "createdAt" : "2016-05-23T14:01:30Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +334,338 @@\t\treturn err\n\t}\n\tif len(out.Annotations) > 0 {\n\t\told := out.Annotations\n\t\tout.Annotations = make(map[string]string, len(old))"
  },
  {
    "id" : "d18eb0de-53e2-43b6-a1d3-387781739480",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a00587-87ba-4042-ab5d-5ebaaed8124a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if old == nil?\n",
        "createdAt" : "2016-05-23T07:47:43Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "440df6ae-7f74-490e-b6b9-53893c4e54be",
        "parentId" : "c6a00587-87ba-4042-ab5d-5ebaaed8124a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "`len(nil)` returns 0\n",
        "createdAt" : "2016-05-23T14:01:46Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "986d75af-038d-4a5d-af63-7f1d1b129f55",
        "parentId" : "c6a00587-87ba-4042-ab5d-5ebaaed8124a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "aaah - ok; that was the piece of information I was missing. thanks\n",
        "createdAt" : "2016-05-23T14:09:37Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +498,502 @@\tif len(out.Spec.InitContainers) > 0 || len(out.Status.InitContainerStatuses) > 0 {\n\t\told := out.Annotations\n\t\tout.Annotations = make(map[string]string, len(old))\n\t\tfor k, v := range old {\n\t\t\tout.Annotations[k] = v"
  },
  {
    "id" : "8972c580-2264-4995-9b29-de3c76bc2ec3",
    "prId" : 25983,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93b02f0b-10cb-4834-b571-07443c56bea5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if out.Annotations == nil?\n",
        "createdAt" : "2016-05-23T07:48:01Z",
        "updatedAt" : "2016-05-28T12:53:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b01cfe1eb466eeb4221a5b79ee52f6cd2c32c4a",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +558,562 @@\t\treturn err\n\t}\n\tif len(out.Annotations) > 0 {\n\t\told := out.Annotations\n\t\tout.Annotations = make(map[string]string, len(old))"
  },
  {
    "id" : "e56b9e00-a214-4593-9bd5-5a32edbb9446",
    "prId" : 24733,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is this what we decided to do? It's been a while since I read all the comments on this PR but I thought we were going to refuse to do this conversion entirely rather than give an old client a misleading object?\n",
        "createdAt" : "2016-07-13T20:35:53Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "97b8843c-4c7c-4261-a735-d91b13ad1078",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Old clients are not going to understand the selector, not the rest of the object. It's up to the validation in the rest storage to ensure that they are not touching that field but apart from it, why shouldn't they be allowed to mutate other parts? \n",
        "createdAt" : "2016-07-14T09:38:23Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "a14a6e18-903e-492a-953b-a5ea55397ca2",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Old clients are not going to understand the selector, not the rest of the object. It's up to the validation in the rest storage to ensure that they are not touching that field but apart from it, why shouldn't they be allowed to mutate other parts?\n\nOr view.  If the conversion failed, you might not be able to feed viewers and most fields (scale, labels, annotations, iamge, etc) are reasonable to view\n",
        "createdAt" : "2016-07-14T17:08:29Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ee6cda51-2bc5-40d7-a725-4bd6a9341c0d",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm not worried about that, I'm worried about clients that want to use the\nselector to view or operate on the objects controlled by the RC.\n\nOn Thu, Jul 14, 2016 at 2:38 AM, Michail Kargakis notifications@github.com\nwrote:\n\n> In pkg/api/v1/conversion.go\n> https://github.com/kubernetes/kubernetes/pull/24733#discussion_r70776739\n> :\n> \n> > -   }\n> > -   if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {\n> > -       return err\n> > -   }\n> > -   if err := Convert_api_ObjectMeta_To_v1_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {\n> > -       return err\n> > -   }\n> > -   if err := Convert_extensions_ReplicaSetSpec_to_v1_ReplicationControllerSpec(&in.Spec, &out.Spec, s); err != nil {\n> > -       fieldErr, ok := err.(*field.Error)\n> > -       if !ok {\n> > -           return err\n> > -       }\n> > -       if out.Annotations == nil {\n> > -           out.Annotations = make(map[string]string)\n> > -       }\n> > -       out.Annotations[NonConvertibleAnnotationPrefix+\"/\"+fieldErr.Field] = reflect.ValueOf(fieldErr.BadValue).String()\n> \n> Old clients are not going to understand the selector, not the rest of the\n> object. It's up to the validation in the rest storage to ensure that they\n> are not touching that field but apart from it, why shouldn't they be\n> allowed to mutate other parts?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24733/files/8726435a0572dca53896d6fcda434790a925d2ac#r70776739,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAnglv7W3NauCB-PbjzF9aeaAJMQenyuks5qVgOZgaJpZM4IO4vV\n> .\n",
        "createdAt" : "2016-07-14T17:53:27Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "29d2a20b-0fa7-49d3-947c-770bfc1c87ec",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Those clients are, at worst, no _less_ broken than today.  Do we want to make this an argument that this is an administrative decision to make the transition from RC -> RS as minimally painful as possible by tolerating old clients, and if we reject conversion then all clients are still broken, which doesn't reduce pain?  We can't omit RCs from the set easily,  I don't think.\n\nI don't think we have a concrete piece of kubectl code that is broken today (reaper uses scale).  Do we have controllers that are broken?  Old controllers with new masters would be \"broken\", but they would just stomp old changes.  UIs mostly use this to group pods, so they would show more pods than the controller thinks it owns.  \n\nShould this be opt in (\"I have a legacy cluster, I want to show both RS and RC, and I'm ok if a few UI clients are occasionally wrong\")?\n",
        "createdAt" : "2016-07-14T18:18:29Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3751eab6-f81b-4e9b-89e2-65cb4256dc44",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "We also already have similar issues any time we add a new field that changes the meaning of an object, which old clients aren't aware of (e.g. requiredDuringSchedulingRequiredDuringExecution being added to a podspec)\n",
        "createdAt" : "2016-07-14T18:23:58Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2804cfc3-244f-4981-9954-6a09ec558fb5",
        "parentId" : "6d18eb4b-b783-4682-82bc-5c5b2982d72a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, I think I'm convinced.\n",
        "createdAt" : "2016-07-14T21:06:15Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f85067b27dc41cff188afe72241b8eb46b1ddf6b",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +275,279 @@\t\t\tout.Annotations = make(map[string]string)\n\t\t}\n\t\tout.Annotations[NonConvertibleAnnotationPrefix+\"/\"+fieldErr.Field] = reflect.ValueOf(fieldErr.BadValue).String()\n\t}\n\tif err := Convert_extensions_ReplicaSetStatus_to_v1_ReplicationControllerStatus(&in.Status, &out.Status, s); err != nil {"
  },
  {
    "id" : "0b2835a0-7a22-43c3-a53e-9a4b1ab7d36c",
    "prId" : 16080,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cff0f54-7b96-4c45-96db-4bbc18e6e9f3",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "@lavalamp, I don't think we need to muck with the conversion on this end since we will always reset the fields when converting to the versioned pod. Thoughts?\n",
        "createdAt" : "2015-10-22T19:34:00Z",
        "updatedAt" : "2015-10-27T17:50:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "2dee8a98-14db-4d09-b0ff-3e66597c7b5a",
        "parentId" : "2cff0f54-7b96-4c45-96db-4bbc18e6e9f3",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree.\n\nOn Thu, Oct 22, 2015 at 12:34 PM, Yu-Ju Hong notifications@github.com\nwrote:\n\n> In pkg/api/v1/conversion.go\n> https://github.com/kubernetes/kubernetes/pull/16080#discussion_r42795288\n> :\n> \n> > -   }\n> > -   // We need to reset certain fields for mirror pods from pre-v1.1 kubelet\n> > -   // (#15960).\n> > -   // TODO: Remove this code after we drop support v1.0 kubelets.\n> > -   if value, ok := in.Annotations[mirrorAnnotationKey]; ok && value == mirrorAnnotationValue {\n> > -       // Reset the TerminationGracePeriodSeconds.\n> > -       out.Spec.TerminationGracePeriodSeconds = nil\n> > -       // Reset the resource requests.\n> > -       for i := range out.Spec.Containers {\n> > -           out.Spec.Containers[i].Resources.Requests = nil\n> > -       }\n> > -   }\n> > -   return nil\n> >   +}\n> >   +\n> >   +func convert_v1_Pod_To_api_Pod(in *Pod, out *api.Pod, s conversion.Scope) error {\n> \n> @lavalamp https://github.com/lavalamp, I don't think we need to muck\n> with the conversion on this end since we will always reset the fields when\n> converting to the versioned pod. Thoughts?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16080/files#r42795288.\n",
        "createdAt" : "2015-10-22T20:49:06Z",
        "updatedAt" : "2015-10-27T17:50:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c82d2292d235c54cbbb010947930576b4c2d50",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +419,423 @@}\n\nfunc convert_v1_Pod_To_api_Pod(in *Pod, out *api.Pod, s conversion.Scope) error {\n\treturn autoconvert_v1_Pod_To_api_Pod(in, out, s)\n}"
  },
  {
    "id" : "a31616f2-7694-456f-8792-3f2614e3d9f3",
    "prId" : 16080,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1c093ec-bca4-4b85-be72-3582541b88b2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I realize this is too late now, but, for the future, this should have been something like `kubelet.kubernetes.io/mirror-config`. Prefix before the slash should be at least kubelet-specific, and suffix after the slash should use dashes rather than dots.\n",
        "createdAt" : "2015-10-22T19:40:33Z",
        "updatedAt" : "2015-10-27T17:50:43Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "cf77799c-74ec-454b-b328-f6e2377892a5",
        "parentId" : "b1c093ec-bca4-4b85-be72-3582541b88b2",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Ack.\n",
        "createdAt" : "2015-10-22T22:09:03Z",
        "updatedAt" : "2015-10-27T17:50:43Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5c82d2292d235c54cbbb010947930576b4c2d50",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +27,31 @@const (\n\t// Annotation key used to identify mirror pods.\n\tmirrorAnnotationKey = \"kubernetes.io/config.mirror\"\n\n\t// Value used to identify mirror pods from pre-v1.1 kubelet."
  },
  {
    "id" : "9557370e-0a01-4c7d-b0f0-08aca6c4989c",
    "prId" : 12595,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6853064-a0b9-4997-a2e7-6eb0d446ea3d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Not that I'm opposed, but this isn't strictly needed for the downward API is it?\n",
        "createdAt" : "2015-08-12T22:41:39Z",
        "updatedAt" : "2015-08-14T21:51:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ce8ff425-b464-4956-9ca9-2c812fde0c36",
        "parentId" : "c6853064-a0b9-4997-a2e7-6eb0d446ea3d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If you want to filter based on this field in the client, there are client changes that need to be made, also.\n",
        "createdAt" : "2015-08-12T22:42:24Z",
        "updatedAt" : "2015-08-14T21:51:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "dc4dd329-7220-4d1a-8906-dad36591e779",
        "parentId" : "c6853064-a0b9-4997-a2e7-6eb0d446ea3d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do you mean, is podIP useful for the downward API, or is the conversion in this place necessary?  If the latter, right now you can't add arbitrary things to the downward api without defining the label conversion (because we don't have generic label conversion between structs of different versions).\n",
        "createdAt" : "2015-08-12T22:43:56Z",
        "updatedAt" : "2015-08-14T21:51:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c692fe95-25c9-4be7-b563-8d7e9f246338",
        "parentId" : "c6853064-a0b9-4997-a2e7-6eb0d446ea3d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Oh right, thanks.\n",
        "createdAt" : "2015-08-12T23:34:47Z",
        "updatedAt" : "2015-08-14T21:51:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "01f378542694a7ca17bbd1fabea64b87b5f38132",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +45,49 @@\t\t\t\t\"metadata.namespace\",\n\t\t\t\t\"status.phase\",\n\t\t\t\t\"status.podIP\",\n\t\t\t\t\"spec.nodeName\":\n\t\t\t\treturn label, value, nil"
  },
  {
    "id" : "280cd783-3014-4206-b825-a58307d37337",
    "prId" : 11389,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1d3086b-1bdf-4e03-89ad-3ae15edc23c2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I recommend using https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/conversion/converter.go#L111 and writing these as\n\n``` go\nif err := s.DefaultConvert(in, out); err != nil {\n  return err\n}\n\n// DeprecatedServiceAccount is an alias for ServiceAccountName.\nout.DeprecatedServiceAccount = in.ServiceAccountName\n```\n\nThis makes it super obvious why this is manual and not generated, and it's easy to find the custom part, and future changes will automatically just work.\n",
        "createdAt" : "2015-07-16T21:26:32Z",
        "updatedAt" : "2015-07-16T22:48:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "48567aac-055e-4a48-81da-e42a6b1b8d4b",
        "parentId" : "c1d3086b-1bdf-4e03-89ad-3ae15edc23c2",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "That looks way better! Will do.\n",
        "createdAt" : "2015-07-16T21:29:53Z",
        "updatedAt" : "2015-07-16T22:48:58Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "e359c849-b879-4b7d-af88-2300af5e7ba7",
        "parentId" : "c1d3086b-1bdf-4e03-89ad-3ae15edc23c2",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Didn't work :-( Doesn't appear to play well with defaults. Panics for some flags settings, and when specifying explicitly, hit \"defaults_test.go:390: Expected container port to be defaulted, was made 0 instead of 8080\".\n",
        "createdAt" : "2015-07-16T22:49:59Z",
        "updatedAt" : "2015-07-16T22:49:59Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "209a5fa0-fd1a-4518-a583-9b337f587ee3",
        "parentId" : "c1d3086b-1bdf-4e03-89ad-3ae15edc23c2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK--we'll have to figure that out another day. Sorry for the distraction!\n",
        "createdAt" : "2015-07-16T23:32:29Z",
        "updatedAt" : "2015-07-16T23:32:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a3891e5f8819456b355750c0603e48da35b895b",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +229,233 @@// The following two PodSpec conversions are done here to support ServiceAccount\n// as an alias for ServiceAccountName.\nfunc convert_api_PodSpec_To_v1_PodSpec(in *api.PodSpec, out *PodSpec, s conversion.Scope) error {\n\tif defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {\n\t\tdefaulting.(func(*api.PodSpec))(in)"
  },
  {
    "id" : "73865b79-a199-4891-a734-b2171891e68c",
    "prId" : 7454,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9e98f2e-1e9c-4e48-8484-0c4ac1c0e85f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why do we need all these conversions? I'd expect the internal rep to be very close to the v1 API.\n",
        "createdAt" : "2015-04-28T21:21:37Z",
        "updatedAt" : "2015-04-28T23:06:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7b6ff06c-4f59-4fdf-884b-204b3fc30c78",
        "parentId" : "b9e98f2e-1e9c-4e48-8484-0c4ac1c0e85f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's an optimization that @wojtek-t is working on. They're auto-generated.\n",
        "createdAt" : "2015-04-28T22:14:36Z",
        "updatedAt" : "2015-04-28T23:06:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d7e19c8ccb2b206ece96ce0bcb5a10b5a84b6b",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@/*\nCopyright 2015 Google Inc. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
    "id" : "68838de1-b324-4ef5-bfe0-7b04a08cdb23",
    "prId" : 5093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e603331-c002-4c73-a8df-6d06a0ba7e14",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I'm very surprised you had to add this.\n",
        "createdAt" : "2015-08-20T14:32:48Z",
        "updatedAt" : "2015-09-01T20:23:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "b6177cfd-6b23-4681-be45-c4f5446164cf",
        "parentId" : "6e603331-c002-4c73-a8df-6d06a0ba7e14",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "hmm I need to double check it. \n",
        "createdAt" : "2015-08-20T14:36:36Z",
        "updatedAt" : "2015-09-01T20:23:22Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "7127f36e-be8b-4670-a513-6a166427e8d9",
        "parentId" : "6e603331-c002-4c73-a8df-6d06a0ba7e14",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Actually, no, my bad, it makes complete sense that you had to add these two.  Carry on....\n",
        "createdAt" : "2015-08-20T14:44:28Z",
        "updatedAt" : "2015-09-01T20:23:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4dc0653aa18086ead66467ef379f79132869a30",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +44,48 @@\t\t\tcase \"metadata.name\",\n\t\t\t\t\"metadata.namespace\",\n\t\t\t\t\"metadata.labels\",\n\t\t\t\t\"metadata.annotations\",\n\t\t\t\t\"status.phase\","
  }
]