[
  {
    "id" : "770195d8-4887-49ee-9eff-639df4dc0996",
    "prId" : 756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ce518ae-872e-43eb-a7ce-d20e8312dd04",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc comment.\n",
        "createdAt" : "2014-08-04T04:31:09Z",
        "updatedAt" : "2014-08-04T04:31:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "db053ce7-f40b-4ea9-b078-665e4f2705cf",
        "parentId" : "4ce518ae-872e-43eb-a7ce-d20e8312dd04",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "CodecInterface?\n",
        "createdAt" : "2014-08-04T04:33:02Z",
        "updatedAt" : "2014-08-04T04:33:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4448be2d95a2a38b3db8d917eab833138ef3d5d2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +26,30 @@)\n\ntype EncodingInterface interface {\n\tEncode(obj interface{}) (data []byte, err error)\n\tDecode(data []byte) (interface{}, error)"
  },
  {
    "id" : "0be4f3c8-37b6-4bee-81e7-c5106ba52ba0",
    "prId" : 756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c8997f-2333-4aaa-9003-894702d34def",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc comment.\n",
        "createdAt" : "2014-08-04T04:31:16Z",
        "updatedAt" : "2014-08-04T04:31:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "05675e17-4011-4a31-bba9-b53c1d9168dc",
        "parentId" : "66c8997f-2333-4aaa-9003-894702d34def",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "...now that I notice this is in api, perhaps call it ResourceVersioner. Need to disambiguate with api versioning.\n",
        "createdAt" : "2014-08-04T04:32:45Z",
        "updatedAt" : "2014-08-04T04:32:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4448be2d95a2a38b3db8d917eab833138ef3d5d2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +32,36 @@}\n\ntype VersioningInterface interface {\n\tSetResourceVersion(obj interface{}, version uint64) error\n\tResourceVersion(obj interface{}) (uint64, error)"
  },
  {
    "id" : "76627b61-bca5-428d-a343-671d954a6814",
    "prId" : 756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "611ecc1a-9643-4ff9-809b-2215161ce186",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ResourceVersioning?\n",
        "createdAt" : "2014-08-04T04:34:56Z",
        "updatedAt" : "2014-08-04T04:34:56Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4448be2d95a2a38b3db8d917eab833138ef3d5d2",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +38,42 @@\nvar Encoding EncodingInterface\nvar Versioning VersioningInterface\n\nvar conversionScheme *conversion.Scheme"
  },
  {
    "id" : "83b214c5-b43a-4643-aa86-989d945a21c0",
    "prId" : 565,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73a52102-64d7-48d6-ae68-a959f17d2427",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm OK with this horrific switch only if it comes with a TODO to convert everything in here into a function in your already created maps. :)\n",
        "createdAt" : "2014-07-22T22:20:53Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cc0243f3-3856-49ef-a39e-1bb13957b8cd",
        "parentId" : "73a52102-64d7-48d6-ae68-a959f17d2427",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-07-23T03:52:10Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "3723eb76293edb013d48eb9061c7e724ca41bb90",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +277,281 @@\t\treturn reflect.ValueOf(result).Elem().Interface(), nil\n\t}\n\tswitch cObj := obj.(type) {\n\tcase *v1beta1.JSONBase:\n\t\tobj := JSONBase(*cObj)"
  },
  {
    "id" : "d43c450b-b60c-4e01-8f52-172d6c4f3352",
    "prId" : 565,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50d97ad5-3c32-4f12-8acd-09d2763853e1",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't get it - once we have v1beta2, v1beta3, etc, how do you externalize to those? I liked that the first cut of this had the internalize/externalize in the v1beta1 package - that just seems \"righter\" to me.\n\nI won't have time to re-review this this week, so I'll roll with whatever you and @lavalamp decide, but I don't get it yet :)\n",
        "createdAt" : "2014-07-23T05:19:34Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "63359bf7-76a4-4eb6-a540-d1f7b312e584",
        "parentId" : "50d97ad5-3c32-4f12-8acd-09d2763853e1",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "My thought was that when that happens, externalize will have to take a version parameter.  We can add that now if it aids clarity.\n\nThe old code didn't handle this correctly either, it just placed the conversion in the package.\n\nProbably the right thing to do is to move externalize into the v1beta1 package, and reference it from here.\n\nWe can do that in a second pass.\n",
        "createdAt" : "2014-07-23T05:24:48Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "be6851f5-5b1f-4f59-b475-d171d18d5ae0",
        "parentId" : "50d97ad5-3c32-4f12-8acd-09d2763853e1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree-- the interface for externalize should take the destination version as an additional parameter. I think we can change that later, though. As for placing the translation functions in the v1betaX packages, that may be possible-- I'm OK with it as long as only the api package has to include those other packages. I want to contain the ugly translations and keep it separate from the rest of the codebase as much as possible.\n",
        "createdAt" : "2014-07-23T05:29:35Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d14308ba-dda1-48d8-b888-74fd35f3bd30",
        "parentId" : "50d97ad5-3c32-4f12-8acd-09d2763853e1",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "SGTM\n\nOn Tue, Jul 22, 2014 at 10:29 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/helper.go:\n> \n> > -       }\n> > -       result.APIVersion = \"\"\n> > -       return &result, nil\n> > -   default:\n> > -       fn, ok := internalFuncs[reflect.ValueOf(cObj).Elem().Type().Name()]\n> > -       if !ok {\n> > -           fmt.Printf(\"unknown object to internalize: %s\", reflect.ValueOf(cObj).Type().Name())\n> > -           panic(fmt.Sprintf(\"unknown object to internalize: %s\", reflect.ValueOf(cObj).Type().Name()))\n> > -       }\n> > -       return fn(cObj)\n> > -   }\n> > -   return obj, nil\n> >   +}\n> >   +\n> >   +// TODO: switch to registered functions for each type.\n> >   +func externalize(obj interface{}) (interface{}, error) {\n> \n> I agree-- the interface for externalize should take the destination\n> version as an additional parameter. I think we can change that later,\n> though. As for placing the translation functions in the v1betaX packages,\n> that may be possible-- I'm OK with it as long as only the api package has\n> to include those other packages. I want to contain the ugly translations\n> and keep it separate from the rest of the codebase as much as possible.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/565/files#r15271699\n> .\n",
        "createdAt" : "2014-07-23T05:31:27Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4057c4fd-c61e-4080-b6bc-ce0dd9555577",
        "parentId" : "50d97ad5-3c32-4f12-8acd-09d2763853e1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sounds like we're all on the same page here.\n",
        "createdAt" : "2014-07-23T05:34:31Z",
        "updatedAt" : "2014-07-25T05:13:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3723eb76293edb013d48eb9061c7e724ca41bb90",
    "line" : 526,
    "diffHunk" : "@@ -1,1 +602,606 @@\n// TODO: switch to registered functions for each type.\nfunc externalize(obj interface{}) (interface{}, error) {\n\tv := reflect.ValueOf(obj)\n\tif v.Kind() != reflect.Ptr {"
  },
  {
    "id" : "522d1a48-e434-4058-942f-ea470fdcc40e",
    "prId" : 307,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda3e46a-f720-4a51-a84a-213c4c1fdb02",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "How come this isn't just:\n\nreturn *FindJSONBase(obj)?\n",
        "createdAt" : "2014-07-02T22:04:43Z",
        "updatedAt" : "2014-07-02T22:42:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "d5448145-d821-4204-a201-1efb8e828460",
        "parentId" : "fda3e46a-f720-4a51-a84a-213c4c1fdb02",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "A subtlety: FindJSONBase requires that obj is a pointer to a struct. Otherwise, it couldn't return a pointer to a JSONBase that it would make sense to write to (reflect enforces this, but it still wouldn't work even if reflect didn't).\n\nFindJSONBaseRO will accept both pointers-to-structs and structs, and returns a copy of the JSONBase. So they are actually doing different things.\n",
        "createdAt" : "2014-07-02T22:07:31Z",
        "updatedAt" : "2014-07-02T22:42:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b9735d787523b3f3d70bd50e635dac36c2d0e43",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +60,64 @@// obj may be a pointer to an api type, or a non-pointer struct api type.\nfunc FindJSONBaseRO(obj interface{}) (JSONBase, error) {\n\tv := reflect.ValueOf(obj)\n\tif v.Kind() == reflect.Ptr {\n\t\tv = v.Elem()"
  },
  {
    "id" : "8bd82956-a09e-44ed-8302-ed721f8a1671",
    "prId" : 196,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fb97dad-4a22-47d5-a719-cb25fb39d498",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I kind of hate named return.  (well, I don't mind named values in the signature, but I really don't like the empty return.  I think it makes the code a lot harder to read.)\n\nIn general, I think this means we should have some generally accepted style guidelines beyond basic Go style.  I'm ok if the consensus is named return is ok, but let's have the discussion ;)  [to the IRC channel, batman!]\n",
        "createdAt" : "2014-06-23T16:18:35Z",
        "updatedAt" : "2014-06-23T16:54:36Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "aa8bc62d-da3f-4a2a-a78b-d26d0e436cf5",
        "parentId" : "3fb97dad-4a22-47d5-a719-cb25fb39d498",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I added \"data, err\" to the return line. I can go all the way with this particular function and remove the named output parameters if you like (this function is long enough that I'm ambivilent). I don't think we should outlaw them in general though.\n",
        "createdAt" : "2014-06-23T16:49:57Z",
        "updatedAt" : "2014-06-23T16:54:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee75bb8dbeb1c7adfd92eb3a014a187b70a3e625",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@// so the rule is it's set only in wire format (json), not when in native\n// format.\nfunc Encode(obj interface{}) (data []byte, err error) {\n\tobj = checkPtr(obj)\n\tjsonBase, err := prepareEncode(obj)"
  }
]