[
  {
    "id" : "9b20e172-9414-4040-bdf9-bb3e64905ded",
    "prId" : 8788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d898112-8ba4-4439-8a8a-ab0e5435d2df",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What about v1beta1 and v1beta2? We should keep them up to date until we remove them.\n",
        "createdAt" : "2015-05-25T16:23:48Z",
        "updatedAt" : "2015-05-27T17:58:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3f4c127d-d663-40c9-a4a2-3c6e00c7d843",
        "parentId" : "1d898112-8ba4-4439-8a8a-ab0e5435d2df",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I noticed they were one way while v1beta3 was another.  I thought maybe it was purposeful.  I believe they used to be there.\n\nI'll add 'omitempty' to the other versions, too.\n",
        "createdAt" : "2015-05-25T16:52:05Z",
        "updatedAt" : "2015-05-27T17:58:36Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "2059b771-ee17-4f5b-ad40-b92b821f5295",
        "parentId" : "1d898112-8ba4-4439-8a8a-ab0e5435d2df",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "nm, i see these were all added by Nikhil but only to v1 and v1beta3. They are all the same now.\n",
        "createdAt" : "2015-05-25T22:25:20Z",
        "updatedAt" : "2015-05-27T17:58:36Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b9652500feb5e85024566b359ddfbb00383314",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +253,257 @@\tNFS *NFSVolumeSource `json:\"nfs,omitempty\" description:\"NFS volume resource provisioned by an admin\"`\n\t// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime\n\tRBD *RBDVolumeSource `json:\"rbd,omitempty\" description:\"rados block volume that will be mounted on the host machine\"`\n\t// ISCSI represents an ISCSI Disk resource that is attached to a\n\t// kubelet's host machine and then exposed to the pod."
  },
  {
    "id" : "da415100-47a4-4160-8a5f-ef4aec675ef7",
    "prId" : 8641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a53c1979-7112-4dc1-99cb-aa7a8fb44897",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Good catch. The same problem exists in v1/types.go. Maybe a separate PR to fix, though?\n",
        "createdAt" : "2015-05-22T19:46:39Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "852b8353-a9d2-4929-96da-e8dd9ae0a08a",
        "parentId" : "a53c1979-7112-4dc1-99cb-aa7a8fb44897",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes\n\n> On May 22, 2015, at 3:46 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > @@ -642,7 +642,7 @@ type Container struct {\n> >     // Deprecated - see SecurityContext.  Optional: Default to false.\n> >     Privileged bool `json:\"privileged,omitempty\" description:\"whether or not the container is granted privileged status; defaults to false; cannot be updated; deprecated;  See SecurityContext.\"`\n> >     // Optional: Policy for pulling images for this container\n> > -   ImagePullPolicy PullPolicy `json:\"imagePullPolicy,omitempty\" description:\"image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise; cannot be updated\"`\n> > -   ImagePullPolicy PullPolicy `json:\"imagePullPolicy,omitempty\" description:\"image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated\"`\n> >   Good catch. The same problem exists in v1/types.go. Maybe a separate PR to fix, though?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-05-22T19:50:48Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12a68cd60ccfe2f0926386df771805c0993d783",
    "line" : null,
    "diffHunk" : "@@ -1,1 +692,696 @@\tPrivileged bool `json:\"privileged,omitempty\" description:\"whether or not the container is granted privileged status; defaults to false; cannot be updated; deprecated;  See SecurityContext.\"`\n\t// Optional: Policy for pulling images for this container\n\tImagePullPolicy PullPolicy `json:\"imagePullPolicy,omitempty\" description:\"image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated\"`\n\t// Deprecated - see SecurityContext.  Optional: Capabilities for container.\n\tCapabilities Capabilities `json:\"capabilities,omitempty\" description:\"capabilities for container; cannot be updated; deprecated; See SecurityContext.\"`"
  },
  {
    "id" : "85bf217e-3285-42a9-ba26-10d92300229e",
    "prId" : 8338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "On https://github.com/nikhiljindal/kubernetes/blob/omitEmpty/pkg/api/v1beta3/types.go#L191\n`VolumeSource `json:\",inline,omitempty\"``\ninline fields shouldn't have omitempty\n",
        "createdAt" : "2015-05-15T23:02:36Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "383b857e-a7eb-4f8b-9a22-6c79f79f7af9",
        "parentId" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also, everywhere, except PodTemplateSpec and Binding, ObjectMeta should not be tagged with omitempty.\n",
        "createdAt" : "2015-05-15T23:05:53Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d8cb7f7c-b05b-4bcf-b251-82902bb83244",
        "parentId" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Why is ObjectMeta not omitempty? All the fields in ObjectMeta are omitempty.\nNot making it omitempty will just force users to include \"metadata:{}\" in their configs.\n",
        "createdAt" : "2015-05-16T02:25:12Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "5fa13ece-5412-4316-857d-ffda2c8e5cb9",
        "parentId" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Updated VolumeSource\n",
        "createdAt" : "2015-05-16T02:28:43Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "3ea5c325-ac16-411b-8cf7-20cc4e5d7bb1",
        "parentId" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Users have to specify either name or generateName, in post, put, and patch, and it will be returned by get.\n",
        "createdAt" : "2015-05-16T03:32:43Z",
        "updatedAt" : "2015-05-16T03:32:43Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b6cce8b3-950e-4fdb-b197-078a10212108",
        "parentId" : "eb77d787-5d8b-401c-9705-a754f1ad80ce",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It's ok to leave them all omitempty for now, but I can't think of a scenario where metadata would be absent. We could maybe extract the name from the URLs on some operations, but I don't think we do that currently.\n",
        "createdAt" : "2015-05-16T03:33:55Z",
        "updatedAt" : "2015-05-16T03:33:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce0150bded7319f35673b43022ccb857d750e3a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +198,202 @@\t// machine that is directly exposed to the container. This is generally\n\t// used for system agents or other privileged things that are allowed\n\t// to see the host machine. Most containers will NOT need this.\n\t// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\n\t// mount host directories as read/write."
  },
  {
    "id" : "dc85b4b8-a3a5-4e21-8c09-aed852e59480",
    "prId" : 8338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb0e6e5c-e062-41de-b411-151a7b0ad3ce",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "PodSpec.Volumes should have omitempty\n",
        "createdAt" : "2015-05-15T23:13:31Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "cbf42dc3-5282-4105-bf10-8f0f78306616",
        "parentId" : "fb0e6e5c-e062-41de-b411-151a7b0ad3ce",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-05-16T02:28:46Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce0150bded7319f35673b43022ccb857d750e3a",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +645,649 @@\tImagePullPolicy PullPolicy `json:\"imagePullPolicy,omitempty\" description:\"image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise; cannot be updated\"`\n\t// Deprecated - see SecurityContext.  Optional: Capabilities for container.\n\tCapabilities Capabilities `json:\"capabilities,omitempty\" description:\"capabilities for container; cannot be updated; deprecated; See SecurityContext.\"`\n\t// Optional: SecurityContext defines the security options the pod should be run with\n\tSecurityContext *SecurityContext `json:\"securityContext,omitempty\" description:\"security options the pod should run with\"`"
  },
  {
    "id" : "c1d954fe-5e38-4a48-9e9f-506d4cabc305",
    "prId" : 8338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e802abb5-9c36-457d-9e00-ac7e2b1c017a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Another github annoyance -- I can't comment on arbitrary lines. :-(\n\nServiceAccount.Secrets should have omitempty:\nhttps://github.com/nikhiljindal/kubernetes/blob/omitEmpty/pkg/api/v1beta3/types.go#L1052\n",
        "createdAt" : "2015-05-15T23:34:40Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3c190508-7692-480c-8d90-6cd7cddbcf58",
        "parentId" : "e802abb5-9c36-457d-9e00-ac7e2b1c017a",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-05-16T02:28:50Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce0150bded7319f35673b43022ccb857d750e3a",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +1010,1014 @@\t// target Pod's container ports.  If this is not specified, the value\n\t// of Port is used (an identity map).\n\tTargetPort util.IntOrString `json:\"targetPort,omitempty\" description:\"the port to access on the pods targeted by the service; defaults to the service port\"`\n}\n"
  },
  {
    "id" : "c182dcb1-bb25-400c-9364-1bb486fda422",
    "prId" : 8338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa6b23b6-07c7-4095-8ef9-55bb9bd307fd",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Again, not this line.\n\nAll the ListOptions should have have omitempty.\nhttps://github.com/nikhiljindal/kubernetes/blob/omitEmpty/pkg/api/v1beta3/types.go#L1331\n",
        "createdAt" : "2015-05-15T23:38:37Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "12934af3-5d98-4f6e-94f5-d3c9ce05a90e",
        "parentId" : "aa6b23b6-07c7-4095-8ef9-55bb9bd307fd",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-05-16T02:28:54Z",
        "updatedAt" : "2015-05-16T02:29:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ce0150bded7319f35673b43022ccb857d750e3a",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +1322,1326 @@\t// specified type will be used.\n\tGracePeriodSeconds *int64 `json:\"gracePeriodSeconds,omitempty\" description:\"the duration in seconds to wait before deleting this object; defaults to a per object value if not specified; zero means delete immediately\"`\n}\n\n// ListOptions is the query options to a standard REST list call"
  },
  {
    "id" : "c3fe66d9-5299-4651-94cc-c5a126acff46",
    "prId" : 7432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a814141-86c6-425e-9dbc-49fbfd584f8b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Text in the comment should go into the description tag instead. Users will only see the latter.\n",
        "createdAt" : "2015-04-28T16:10:51Z",
        "updatedAt" : "2015-04-30T16:00:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c0246939-1c0e-42c8-86b9-98bf32244360",
        "parentId" : "0a814141-86c6-425e-9dbc-49fbfd584f8b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "In both places :)\n\n> On Apr 28, 2015, at 12:11 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > @@ -797,6 +797,10 @@ type PodSpec struct {\n> >     // Required: there must be at least one container in a pod.\n> >     Containers    []Container   `json:\"containers\" description:\"list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod\" patchStrategy:\"merge\" patchMergeKey:\"name\"`\n> >     RestartPolicy RestartPolicy `json:\"restartPolicy,omitempty\" description:\"restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever\"`\n> > -   // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\n> > -   // Value must be non-negative integer. The value zero indicates delete immediately.\n> > -   // If this value is nil, the default grace period will be used instead.\n> >   Text in the comment should go into the description tag instead. Users will only see the latter.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-28T16:37:05Z",
        "updatedAt" : "2015-04-30T16:00:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a2dc496fef202470058e439a4983d592cfffba",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +800,804 @@\t// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\n\t// Value must be non-negative integer. The value zero indicates delete immediately.\n\t// If this value is nil, the default grace period will be used instead.\n\t// The grace period is the duration in seconds after the processes running in the pod are sent\n\t// a termination signal and the time when the processes are forcibly halted with a kill signal)."
  },
  {
    "id" : "08b398f8-6b69-4ac8-b8f6-11c8c280785c",
    "prId" : 7101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b802bf8a-4c9a-4407-b905-822384cfb7da",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why just a name here, but a full ObjectReference in the ServiceAccount object? I think just a name is easier for humans to specify, but perhaps harder for generic clients to comprehend.\n\nWe should decide what principle we'll use to decide, and try to be consistent in v1:\nhttps://github.com/GoogleCloudPlatform/kubernetes/issues/7018#issuecomment-99630042\n",
        "createdAt" : "2015-05-06T22:31:21Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d796f56b-2a7b-4ed1-b20f-122901ec62b5",
        "parentId" : "b802bf8a-4c9a-4407-b905-822384cfb7da",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I originally had `Secrets []string` in the ServiceAccount object, but promoted them to `[]ObjectReference` purely so I could specify `patchMergeKey:\"name\"`\n",
        "createdAt" : "2015-05-07T01:48:37Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5eb7e368-0fe1-49b5-b847-87a4332ae596",
        "parentId" : "b802bf8a-4c9a-4407-b905-822384cfb7da",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "As described here:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#strategic-merge-patch\n\nIt should be possible to merge lists of scalars, which would be deduped and merged. No merge key required.\n",
        "createdAt" : "2015-05-07T05:43:57Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "00be7994-36c3-4318-a1f3-57603edb2f8f",
        "parentId" : "b802bf8a-4c9a-4407-b905-822384cfb7da",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Merging lists of scalars only does unions... you can't use `{\"$patch\":\"delete\",\"name\":\"foo\"}`, which seemed useful for a list controller loops might be making modifications to.\n",
        "createdAt" : "2015-05-07T13:32:58Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd58ede6b03a4cc98639ccafdbc4796da9dccb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +818,822 @@\n\t// ServiceAccount is the name of the ServiceAccount to use to run this pod\n\tServiceAccount string `json:\"serviceAccount\" description:\"name of the ServiceAccount to use to run this pod\"`\n\n\t// Host is a request to schedule this pod onto a specific host.  If it is non-empty,"
  },
  {
    "id" : "b2c4ac36-e339-4ba0-97ba-ac31de00cedc",
    "prId" : 6597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "130d84f1-5feb-42c2-8fa4-701b08723923",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "ObjectMeta includes a Name field already. It might as well match the name of the component.\n",
        "createdAt" : "2015-04-17T07:23:18Z",
        "updatedAt" : "2015-04-17T19:00:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1faeeaee-6b77-4ccd-8819-4e06dab7f601",
        "parentId" : "130d84f1-5feb-42c2-8fa4-701b08723923",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Removed the extra \"Name\" field.\n",
        "createdAt" : "2015-04-17T18:44:25Z",
        "updatedAt" : "2015-04-17T19:00:29Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6ef2ddf8aa8b3b78fa3397476e4184f6f99731e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1694,1698 @@\tObjectMeta `json:\"metadata,omitempty\"`\n\n\tName       string               `json:\"name,omitempty\" description:\"name of the component\"`\n\tConditions []ComponentCondition `json:\"conditions,omitempty\" description:\"Conditions is a list of ComponentCondition objects\"`\n}"
  },
  {
    "id" : "92113a66-424e-4dce-8ae3-0ad09ccecf5a",
    "prId" : 6597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fbf4f1b-89a7-49d1-b27e-d200e9f53cd1",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Given where we're headed, I think we're going to need a full-blown Component object, with Spec as well as Status -- the same pattern as Pod and the other objects. The /components API would act as the component registry.\n\nIf we assume we're going to run all the components in pods, then we can use existing Pod mechanisms to perform liveness and readiness probes, but there's still the issue of how to collect the results of the probes. \n\nPotentially we'd also define services (possibly headless) for components, especially if replicated. We've discussed copying readiness condition status into Endpoints. We could maybe directly use that info, or mimic the pattern and copy the conditions from selected pods into the ComponentStatus.\n\nWe could go ahead with what you've done, but I'm concerned it won't actually last very long. If we did go ahead with this, I'd consider ComponentStatus a \"virtual resource\" -- it's not actually persisted in etcd. Therefore, we probably could use ListMeta in place of ObjectMeta, in which case the custom Name field could remain.\n\nIt's probably worth a VC to discuss before you do more work on this.\n",
        "createdAt" : "2015-04-17T07:38:39Z",
        "updatedAt" : "2015-04-17T19:00:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "80cabf26-d474-4b4f-8cd5-fe3a77ac842f",
        "parentId" : "8fbf4f1b-89a7-49d1-b27e-d200e9f53cd1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also, FYI, we're going to discuss HA at this week's community hangout. This functionality seems like a good issue to raise.\n",
        "createdAt" : "2015-04-17T07:51:39Z",
        "updatedAt" : "2015-04-17T19:00:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "8b998b9e-07e9-4723-82b1-da7730072248",
        "parentId" : "8fbf4f1b-89a7-49d1-b27e-d200e9f53cd1",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "I think having a Component object eventually is fine. ComponentStatus is also very much intended to be a virtual resource -- it shouldn't be persisted anywhere. The trick is that who gets to be called a component and how it gets registered. Right now the list is a fixed list, with fixed end points it hits.\n",
        "createdAt" : "2015-04-17T18:44:12Z",
        "updatedAt" : "2015-04-17T19:00:29Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6ef2ddf8aa8b3b78fa3397476e4184f6f99731e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1690,1694 @@\n// ComponentStatus (and ComponentStatusList) holds the cluster validation info.\ntype ComponentStatus struct {\n\tTypeMeta   `json:\",inline\"`\n\tObjectMeta `json:\"metadata,omitempty\"`"
  },
  {
    "id" : "3578f1f4-58e9-4c17-8c3f-ce89b99a3581",
    "prId" : 6027,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48c59405-5b09-4c39-865d-21697daac515",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please tag NodeCondition and NodeAddress as well, for consistency.\n",
        "createdAt" : "2015-04-03T16:57:14Z",
        "updatedAt" : "2015-04-03T18:51:04Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c977db1b3af70fd60e0d111e6b6ac9dfe80e0ff",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +719,723 @@type PodStatus struct {\n\tPhase      PodPhase       `json:\"phase,omitempty\" description:\"current condition of the pod.\"`\n\tConditions []PodCondition `json:\"Condition,omitempty\" description:\"current service state of pod\" patchStrategy:\"merge\" patchMergeKey:\"type\"`\n\t// A human readable message indicating details about why the pod is in this state.\n\tMessage string `json:\"message,omitempty\" description:\"human readable message indicating details about why the pod is in this condition\"`"
  },
  {
    "id" : "71c7099a-9262-4270-b001-84824d9c9a01",
    "prId" : 6002,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef8e39b-cd5a-46fc-a4cb-84d31613985f",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "These can be gleaned from the volume plugin and persisted by PersistentVolumeManager during it's normal synchronization loop.  It allows the access modes to go from the volume plugin over the wire to the client.  Added to Spec because that's where I'm storing the ClaimRef when bound to a Claim.\n",
        "createdAt" : "2015-03-27T18:34:52Z",
        "updatedAt" : "2015-04-06T12:49:06Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff86ae0705c5757003779e310fca653321b1eb83",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +244,248 @@\tPersistentVolumeSource `json:\",inline\" description:\"the actual volume backing the persistent volume\"`\n\t// AccessModes contains all ways the volume can be mounted\n\tAccessModes []AccessModeType `json:\"accessModes,omitempty\" description:\"all ways the volume can be mounted\"`\n\t// holds the binding reference to a PersistentVolumeClaim\n\tClaimRef *ObjectReference `json:\"claimRef,omitempty\" description:\"the binding reference to a persistent volume claim\"`"
  },
  {
    "id" : "5fbf8e30-f983-46ce-8c49-9975feedaedc",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee35d082-e38d-4032-8465-7f21b4316ecf",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This is kind and version of the object being deleted? But not namespace, name, etc.? Why are the kind and version needed? I suppose even Status has TypeMeta and ListMeta, but I don't think we need to be able to serialize DeleteOptions, such as in config files.\n\nActually, it would be nice to at least be able to specify uid and resourceVersion, to facilitate preconditions.\n",
        "createdAt" : "2015-03-17T05:02:12Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d7fa6b42-9353-4a95-9795-d535d55a7074",
        "parentId" : "ee35d082-e38d-4032-8465-7f21b4316ecf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Kind and version are needed so that we can properly version this struct when it comes in from the API.  All objects have to be versioned.\n\nI'll add ObjectMeta so this is consistent with Bindings.\n",
        "createdAt" : "2015-03-17T17:20:07Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a5e176cb-cb4b-424b-abf8-b4149845f4c9",
        "parentId" : "ee35d082-e38d-4032-8465-7f21b4316ecf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I know it has to be versioned, but I imagine we'll typically just infer the version from the URL path. \n\nI'm fine with ObjectMeta, however.\n",
        "createdAt" : "2015-03-17T18:14:16Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "53ba198c-10a2-40e9-a6c3-92b7743affdd",
        "parentId" : "ee35d082-e38d-4032-8465-7f21b4316ecf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "ObjectMeta not needed for this PR.\n",
        "createdAt" : "2015-03-19T00:45:36Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +996,1000 @@// DeleteOptions may be provided when deleting an API object\ntype DeleteOptions struct {\n\tTypeMeta `json:\",inline\"`\n\n\t// Optional duration in seconds before the object should be deleted. Value must be non-negative integer."
  },
  {
    "id" : "e9cdbc3f-5215-4e05-a26d-054165fff0b3",
    "prId" : 5070,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cac19a51-e5a1-44a9-a22f-14ae6bcf548e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Add:\n`; populated by the system, read-only`\n",
        "createdAt" : "2015-03-06T22:44:36Z",
        "updatedAt" : "2015-03-06T22:44:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ab08f162-fcae-40ad-8e0b-8030c5585139",
        "parentId" : "cac19a51-e5a1-44a9-a22f-14ae6bcf548e",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Fixed via #5150\n",
        "createdAt" : "2015-03-06T23:09:54Z",
        "updatedAt" : "2015-03-06T23:09:54Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd83093b0b94b0956c0566d4d08b1525b2c54845",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +65,69 @@type ListMeta struct {\n\t// SelfLink is a URL representing this object.\n\tSelfLink string `json:\"selfLink,omitempty\" description:\"URL for the object\"`\n\n\t// An opaque value that represents the version of this response for use with optimistic"
  },
  {
    "id" : "55c8a18d-5c8d-46d6-a287-fd4169018400",
    "prId" : 5061,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "552f1bd3-67ba-4496-b178-76c4a61d1c41",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Heads-up @vishh \n",
        "createdAt" : "2015-03-05T00:42:48Z",
        "updatedAt" : "2015-03-05T06:14:04Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "2ac4045a-1617-48cf-bde8-39e1fe7aad68",
        "parentId" : "552f1bd3-67ba-4496-b178-76c4a61d1c41",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Ack.\n",
        "createdAt" : "2015-03-05T00:50:55Z",
        "updatedAt" : "2015-03-05T06:14:04Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "af37dc0e16b387ddeb053457abf4b45549011ec1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +745,749 @@\t// PublicIPs are used by external load balancers, or can be set by\n\t// users to handle external traffic that arrives at a node.\n\tPublicIPs []string `json:\"publicIPs,omitempty\" description:\"externally visible IPs (e.g. load balancers) that should be proxied to this service\"`\n\n\t// ContainerPort is the name or number of the port on the container to direct traffic to."
  },
  {
    "id" : "e49b3007-21dd-48cb-aa0d-1a2dcc52618c",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4332df26-82c2-4725-8137-e74a47a622f7",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "add description tags.\n",
        "createdAt" : "2015-02-19T07:00:09Z",
        "updatedAt" : "2015-02-19T07:00:09Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "46fea787-bb47-4aa6-bc78-c18decd52ac6",
        "parentId" : "4332df26-82c2-4725-8137-e74a47a622f7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "no other descriptions in v1beta3 yet - I was following existing style\n",
        "createdAt" : "2015-02-19T07:38:11Z",
        "updatedAt" : "2015-02-19T07:38:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +782,786 @@\t// Optional: The IP protocol for these endpoints. Supports \"TCP\" and\n\t// \"UDP\".  Defaults to \"TCP\".\n\tProtocol Protocol `json:\"protocol,omitempty\"`\n\n\tEndpoints []Endpoint `json:\"endpoints,omitempty\"`"
  },
  {
    "id" : "9b1b1d2c-09b8-4d2f-81bf-3b432bf2ac3e",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f263b1a-3a13-47c4-96e4-4358e5ec64c9",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "here too.\n",
        "createdAt" : "2015-02-19T07:00:16Z",
        "updatedAt" : "2015-02-19T07:00:16Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "13fe84f1-b8a9-4616-ac9a-88c716db0aff",
        "parentId" : "2f263b1a-3a13-47c4-96e4-4358e5ec64c9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same answer - we can start adding descriptions, but they will be th eonly ones.\n",
        "createdAt" : "2015-02-19T07:38:36Z",
        "updatedAt" : "2015-02-19T07:38:36Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +791,795 @@\t// Required: The IP of this endpoint.\n\t// TODO: This should allow hostname or IP, see #4447.\n\tIP string `json:\"ip\"`\n\n\t// Required: The destination port to access."
  },
  {
    "id" : "8ba998f6-ec3a-4f24-b6f9-e80cba64b5de",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "494a1324-c77d-49c4-904c-926bd06a778c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "You plan to make this a list in a future PR?\n",
        "createdAt" : "2015-02-19T18:42:27Z",
        "updatedAt" : "2015-02-19T18:42:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "927e314f-266c-4e40-987f-9688971c1ab0",
        "parentId" : "494a1324-c77d-49c4-904c-926bd06a778c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "correct\n",
        "createdAt" : "2015-02-19T19:12:30Z",
        "updatedAt" : "2015-02-19T19:12:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +794,798 @@\n\t// Required: The destination port to access.\n\tPort int `json:\"port\"`\n}\n"
  },
  {
    "id" : "3268edc0-f99f-47fe-b9d0-8a61cf21e4dc",
    "prId" : 4434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6598d9f-b274-48b6-88a9-5bdace4706c5",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Are these addresses always observable from external sources? I want it to be a hard requirement that status be entirely reconstructable by observation. \n\nIf not, we should put them in spec, even though they are populated automatically most of the time. It wouldn't be different from the other info in spec that the node controller posts.\n",
        "createdAt" : "2015-03-03T21:37:27Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "de6fabb3-ba16-4f4a-93a6-0dbb9229e613",
        "parentId" : "e6598d9f-b274-48b6-88a9-5bdace4706c5",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Currently, those addresses are queried from cloudprovider, and just use Node.Name if not running cloudprovider.  I think it is reconstructable.  The PopulateIPs method does this.\n",
        "createdAt" : "2015-03-03T23:19:52Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "faeaf5d5-73e1-45fd-aeda-f6c83128efdb",
        "parentId" : "e6598d9f-b274-48b6-88a9-5bdace4706c5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok\n",
        "createdAt" : "2015-03-03T23:24:15Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0af8df63215c82224a0ab2b5942ed9706295c9",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +826,830 @@\tConditions []NodeCondition `json:\"conditions,omitempty\"`\n\t// Queried from cloud provider, if available.\n\tAddresses []NodeAddress `json:\"addresses,omitempty\"`\n}\n"
  },
  {
    "id" : "da49b794-4e3c-45d4-85a3-d3968776d76a",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cce3d75-5015-40da-a6d5-2cac2a99346d",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Note to self: come back and figure out why ResourceQuotaUsage is own object, versus just a ResourceQuota with Spec unset by convention.\n",
        "createdAt" : "2015-01-27T00:46:21Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "a4b07853-df9a-4188-9d89-a18824a42142",
        "parentId" : "7cce3d75-5015-40da-a6d5-2cac2a99346d",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I treated it like a binding.  The actor that tracks usage is different than the actor that sets the hard quota limits.  \n\nSent from my iPhone\n\n> On Jan 26, 2015, at 7:46 PM, Eric Tune notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > -   // Spec defines the desired quota\n> > -   Spec ResourceQuotaSpec `json:\"spec,omitempty\"`\n> >   +\n> > -   // Status defines the actual enforced quota and its current usage\n> > -   Status ResourceQuotaStatus `json:\"status,omitempty\"`\n> >   +}\n> >   +\n> >   +// ResourceQuotaUsage captures system observed quota status per namespace\n> >   +// It is used to enforce atomic updates of a backing ResourceQuota.Status field in storage\n> >   +type ResourceQuotaUsage struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   // Status defines the actual enforced quota and its current usage\n> > -   Status ResourceQuotaStatus `json:\"status,omitempty\"`\n> >   +}\n> >   Note to self: come back and figure out why ResourceQuotaUsage is own object, versus just a ResourceQuota with Spec unset by convention.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-27T00:55:50Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1146,1150 @@\t// Status defines the actual enforced quota and its current usage\n\tStatus ResourceQuotaStatus `json:\"status,omitempty\"`\n}\n\n// ResourceQuotaList is a list of ResourceQuota items"
  },
  {
    "id" : "efbfe68a-1632-4d63-8e63-351c7b7b3f5f",
    "prId" : 3751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4806df4e-f4da-469d-a701-86b5c2f717b8",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "```\ntype LimitType string\n```\n",
        "createdAt" : "2015-01-26T20:34:51Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "495e82ac-0d38-4079-99fe-fb3778b1e24c",
        "parentId" : "4806df4e-f4da-469d-a701-86b5c2f717b8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Unintentional omission.  Will do this.\n",
        "createdAt" : "2015-01-26T21:02:31Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b19a8a61a86e0ffefb9d94fb39a54d92e134bfbf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1067,1071 @@\tItems []runtime.RawExtension `json:\"items\" description:\"list of objects\"`\n}\n\n// A type of object that is limited\ntype LimitType string"
  },
  {
    "id" : "1c5f951d-6044-4b3d-afe6-f0143f43e880",
    "prId" : 2912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a02eef61-241b-4db3-b391-49035cc2a81e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "PodIP is in the PodStatus, so I don't understand why we need this for roundtripping.\n",
        "createdAt" : "2014-12-13T01:26:11Z",
        "updatedAt" : "2014-12-15T21:50:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d03b7863-3510-48f4-8fc4-59057fce8fa1",
        "parentId" : "a02eef61-241b-4db3-b391-49035cc2a81e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add a comment that PodIP here is deprecated and will be removed from v1beta3 once we make it possible for Kubelet to report PodStatus.\n",
        "createdAt" : "2014-12-15T21:24:11Z",
        "updatedAt" : "2014-12-15T21:50:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5b949d26-0469-46ff-b2ac-8ad2447ac885",
        "parentId" : "a02eef61-241b-4db3-b391-49035cc2a81e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Done\n\n----- Original Message -----\n\n> > ```\n> > ContainerID string `json:\"containerID,omitempty\" description:\"container's\n> > ID in the format 'docker://<container_id>'\"`\n> > ```\n> > -   // The IP of the Pod\n> > -   PodIP string `json:\"podIP,omitempty\"`\n> \n> Please add a comment that PodIP here is deprecated and will be removed from\n> v1beta3 once we make it possible for Kubelet to report PodStatus.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2912/files#r21857982\n",
        "createdAt" : "2014-12-15T21:51:30Z",
        "updatedAt" : "2014-12-15T21:51:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9ad8cfac0fbc759cfabda1ec671d738ca1f1f12",
    "line" : null,
    "diffHunk" : "@@ -1,1 +422,426 @@\t// The IP of the Pod\n\t// PodIP is deprecated and will be removed from v1beta3 once it becomes possible for the Kubelet to report PodStatus.\n\tPodIP string `json:\"podIP,omitempty\"`\n\t// TODO(dchen1107): Which image the container is running with?\n\t// The image the container is running"
  },
  {
    "id" : "2cff8c2e-0cf0-4be6-b792-b7532a3d1e58",
    "prId" : 2911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9955b9dd-8640-422c-b2af-9145828dd1bf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you fix the case of these examples while you're here?\n",
        "createdAt" : "2014-12-15T20:53:58Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cdbff429-9b8b-43d9-8ac1-c5c03f213dac",
        "parentId" : "9955b9dd-8640-422c-b2af-9145828dd1bf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "As constant strings, I believe the case of these examples is correct.\n\nOTOH, the comment for Reason, below, needs to be updated, both case and `s/status/condition/`\n",
        "createdAt" : "2014-12-15T21:10:58Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "16e6c1c6-651a-44c3-94d4-cb16c4f18bd1",
        "parentId" : "9955b9dd-8640-422c-b2af-9145828dd1bf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "In that case, we need to fix all the places where we populate this field...\n",
        "createdAt" : "2014-12-15T21:14:16Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bd420569-6c89-49d2-826f-5ba18b50895c",
        "parentId" : "9955b9dd-8640-422c-b2af-9145828dd1bf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Comments addressed\n\n----- Original Message -----\n\n> > @@ -963,11 +963,11 @@ type Event struct {\n> >     // Required. The object that this event is about.\n> >     InvolvedObject ObjectReference `json:\"involvedObject,omitempty\"`\n> > -   // Should be a short, machine understandable string that describes the\n> >   current status\n> > -   // Should be a short, machine understandable string that describes the\n> >   current condition\n> >   // of the referred object. This should not give the reason for being in\n> >   this state.\n> >   // Examples: \"Running\", \"CantStart\", \"CantSchedule\", \"Deleted\".\n> \n> In that case, we need to fix all the places where we populate this field...\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2911/files#r21857213\n",
        "createdAt" : "2014-12-16T14:43:46Z",
        "updatedAt" : "2014-12-16T14:43:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "88715cc6ef2d282628d5ad67addc9d9ee7e9f445",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +976,980 @@\t// Should be a short, machine understandable string that describes the current condition\n\t// of the referred object. This should not give the reason for being in this state.\n\t// Examples: \"Running\", \"CantStart\", \"CantSchedule\", \"Deleted\".\n\t// It's OK for components to make up conditions to report here, but the same string should\n\t// always be used for the same conditions."
  },
  {
    "id" : "356bd666-0004-4c8a-96e3-10e60556c921",
    "prId" : 2786,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e30aba6-0cf2-43cf-8b07-2c4235694f46",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What is the value of Kind for a List containing objects of multiple Kinds? Is it always just `List`?\n",
        "createdAt" : "2014-12-09T17:53:12Z",
        "updatedAt" : "2014-12-09T17:53:12Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "22d739d6-ec89-4161-bb46-a91929352e20",
        "parentId" : "4e30aba6-0cf2-43cf-8b07-2c4235694f46",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes - kind \"List\" means \"generic container of things, including potentially other containers\".  \"PodList\" is a typed list.  \n\n----- Original Message -----\n\n> > @@ -944,3 +950,11 @@ type EventList struct {\n> > \n> > ```\n> > Items []Event `json:\"items\"`\n> > ```\n> > \n> >  }\n> > +\n> > +// List holds a list of objects, which may not be known by the server.\n> > +type List struct {\n> > -   TypeMeta `json:\",inline\"`\n> \n> What is the value of Kind for a List containing objects of multiple Kinds? Is\n> it always just `List`?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2786/files#r21546469\n",
        "createdAt" : "2014-12-09T18:00:17Z",
        "updatedAt" : "2014-12-09T18:00:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a833ca70160048773102892b0ce236b800def9a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +954,958 @@// List holds a list of objects, which may not be known by the server.\ntype List struct {\n\tTypeMeta `json:\",inline\"`\n\tListMeta `json:\"metadata,omitempty\"`\n"
  },
  {
    "id" : "c2024e43-d8cf-4a05-912b-44c5555172c3",
    "prId" : 2786,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5df4853-98dd-4c9b-9076-c5c621ab348d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "In the description, clarify that the objects may be of any/multiple kinds.\n",
        "createdAt" : "2014-12-09T17:54:13Z",
        "updatedAt" : "2014-12-09T17:54:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1e150d93-3ce3-4014-aa81-162fc0bf66c5",
        "parentId" : "d5df4853-98dd-4c9b-9076-c5c621ab348d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Done\n\n> On Dec 9, 2014, at 12:54 PM, bgrant0607 notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > @@ -944,3 +950,11 @@ type EventList struct {\n> > \n> > ```\n> > Items []Event `json:\"items\"`\n> > ```\n> > \n> >  }\n> > +\n> > +// List holds a list of objects, which may not be known by the server.\n> > +type List struct {\n> > -   TypeMeta `json:\",inline\"`\n> > -   ListMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   Items []runtime.RawExtension `json:\"items\" description:\"list of objects\"`\n> >   In the description, clarify that the objects may be of any/multiple kinds.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-12-11T00:35:15Z",
        "updatedAt" : "2014-12-11T00:35:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a833ca70160048773102892b0ce236b800def9a",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +957,961 @@\tListMeta `json:\"metadata,omitempty\"`\n\n\tItems []runtime.RawExtension `json:\"items\" description:\"list of objects\"`\n}"
  },
  {
    "id" : "ec8293fe-9fc0-4219-a2a5-57d3aa6eb792",
    "prId" : 2319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8a61a6-f182-4f44-bc98-7154c5cb44b0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "@thockin now that I see this here (whether external or public), it seems like \"PortalIP\" is confusing and hard to understand to a new API consumer.  If I saw `PublicIP` here, I'd probably start using it even inside the cluster (what's a portal?).\n\nWe may want to rename `PortalIP` in v1beta3 to be closer to its meaning `PrivateIP`, `InternalIP`, or just `IP`\n",
        "createdAt" : "2014-11-13T16:30:49Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "65fee6c6-4d02-48a1-8873-85c633256098",
        "parentId" : "ff8a61a6-f182-4f44-bc98-7154c5cb44b0",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "that seems fine to me, but can we get this PR merged before we do that particular refactor?\n",
        "createdAt" : "2014-11-13T19:10:53Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "3bfb86f3-bd79-4a10-bd79-59ccb97637fb",
        "parentId" : "ff8a61a6-f182-4f44-bc98-7154c5cb44b0",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think the longer term design involves a single field, whether singular or plural.  But we want to consolidate external IPs, normal services, \"external\" services, nominal services, etc.\n",
        "createdAt" : "2014-11-14T20:51:32Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a8a2b5a9f87413a3284caa6de7f99ca4edf4921",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +616,620 @@\tCreateExternalLoadBalancer bool `json:\"createExternalLoadBalancer,omitempty\" yaml:\"createExternalLoadBalancer,omitempty\"`\n\t// PublicIPs are used by external load balancers.\n\tPublicIPs []string `json:\"publicIPs,omitempty\" yaml:\"publicIPs,omitempty\"`\n\n\t// ContainerPort is the name of the port on the container to direct traffic to."
  },
  {
    "id" : "3f76feb3-9eac-4e0c-8333-f0c738daa25d",
    "prId" : 2102,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6539aee-dc17-4060-84d7-22cc0b490bc9",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Don't all these need to say \"inline\" rather than \"omitempty\"?\n",
        "createdAt" : "2014-10-31T20:34:59Z",
        "updatedAt" : "2014-11-03T13:48:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b187e2f8-4b28-4783-89b9-c0b8d1f875df",
        "parentId" : "d6539aee-dc17-4060-84d7-22cc0b490bc9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind. @smarterclayton is right. This should stay omitempty, so that the serialization doesn't change.\n",
        "createdAt" : "2014-10-31T20:47:54Z",
        "updatedAt" : "2014-11-03T13:48:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2260b241dc3ab9d96a7ba62b435c849353e53bc6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +474,478 @@type Pod struct {\n\tTypeMeta   `json:\",inline\" yaml:\",inline\"`\n\tObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`\n\n\t// Spec defines the behavior of a pod."
  },
  {
    "id" : "7054763d-aa3e-42e5-a09d-9379d018aeec",
    "prId" : 2086,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eb6be4d-2f63-48b8-af5e-45a864de3d76",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I commented ContainerManifest and ContainerManifestList from v1beta3 because I was told they were unused by that version of the API.  They remain in the internal API until they can be removed from there as well.\n",
        "createdAt" : "2014-10-31T14:16:47Z",
        "updatedAt" : "2014-11-04T19:24:02Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd7643c033392b6331d0c876fe2da389e0429679",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +154,158 @@//\n//\tItems []ContainerManifest `json:\"items,omitempty\" yaml:\"items,omitempty\"`\n//}\n\n// Volume represents a named volume in a pod that may be accessed by any containers in the pod."
  },
  {
    "id" : "2d3bed3e-8406-4e6a-bc87-c8309ba969be",
    "prId" : 1982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb90c507-43bd-43ee-bd24-84178081ca21",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I will point out that this would be another case of an auto-populated spec field. I'm ok with that, but I'll cite #1502 here to provide another example for that discussion. \n",
        "createdAt" : "2014-10-27T20:42:56Z",
        "updatedAt" : "2014-10-27T21:04:01Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "22b98f8c-da48-46a7-9ae0-283cc7a135dc",
        "parentId" : "bb90c507-43bd-43ee-bd24-84178081ca21",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also, I assume that this field can not be changed via update. If so, please document that.\n",
        "createdAt" : "2014-10-27T20:43:40Z",
        "updatedAt" : "2014-10-27T21:04:01Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6bcf8c31-0234-496e-bd4d-ae6a7bf3e7df",
        "parentId" : "bb90c507-43bd-43ee-bd24-84178081ca21",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will comment in next push.\n",
        "createdAt" : "2014-10-27T21:04:02Z",
        "updatedAt" : "2014-10-27T21:04:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5ca0f91b8dd452d0806ef46558dbdde7d8461d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +592,596 @@\t// we will try to respect it or else fail the request.  This field can\n\t// not be changed by updates.\n\tPortalIP string `json:\"portalIP,omitempty\" yaml:\"portalIP,omitempty\"`\n\n\t// CreateExternalLoadBalancer indicates whether a load balancer should be created for this service."
  },
  {
    "id" : "eafc9e91-e736-490b-b9ec-c8ad6865a4b7",
    "prId" : 1474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de6ac047-5dff-4c6e-ac48-67da7ce58f5c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just noticed this in code, but I think this belongs in Spec (not sure if there was another issue tracking it).\n",
        "createdAt" : "2014-11-18T18:59:33Z",
        "updatedAt" : "2014-11-18T18:59:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "056c41cd-6b31-494d-b734-10dba29d3da8",
        "parentId" : "de6ac047-5dff-4c6e-ac48-67da7ce58f5c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Actually, the Capacity field of NodeResources belongs in Spec. NodeResources doesn't make sense.\n\nSadly, I didn't have time to vet resources.md at the time it was written. I should fix it. \n",
        "createdAt" : "2014-11-18T19:54:19Z",
        "updatedAt" : "2014-11-18T19:54:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ab10e5f2-fdb9-4eee-a4fb-eb7389e5b35b",
        "parentId" : "de6ac047-5dff-4c6e-ac48-67da7ce58f5c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Fortunately we don't expose v1beta3 yet and can still freely change it.  The long refactor has at least had some benefits.\n\n----- Original Message -----\n\n> > @@ -565,6 +574,9 @@ type Node struct {\n> > \n> > ```\n> > // Status describes the current status of a Node\n> > Status NodeStatus `json:\"status,omitempty\" yaml:\"status,omitempty\"`\n> > ```\n> > \n> > +\n> > -   // NodeResources describe the resoruces available on the node.\n> > -   NodeResources NodeResources `json:\"resources,omitempty\"\n> >   yaml:\"resources,omitempty\"`\n> \n> Actually, the Capacity field of NodeResources belongs in Spec. NodeResources\n> doesn't make sense.\n> \n> Sadly, I didn't have time to vet resources.md at the time it was written. I\n> should fix it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1474/files#r20533015\n",
        "createdAt" : "2014-11-18T21:16:05Z",
        "updatedAt" : "2014-11-18T21:16:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "39d03948e78eaeda5bfa96208cd1f8e5972c1826",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +577,581 @@\n\t// NodeResources describe the resoruces available on the node.\n\tNodeResources NodeResources `json:\"resources,omitempty\" yaml:\"resources,omitempty\"`\n}\n"
  },
  {
    "id" : "93d72886-1084-4c9d-b7c1-6abb904b402f",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ec01e1-daa4-419f-b3c4-2381806ff55b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "FTR, reconcile with #1406 values for this enum: pending, running, failed, succeeded.\n",
        "createdAt" : "2014-09-24T21:22:49Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +277,281 @@\n// These are the valid states of pods.\nconst (\n\t// PodPending means the pod has been accepted by the system, but one or more of the containers\n\t// has not been started. This includes time before being bound to a node, as well as time spent"
  },
  {
    "id" : "f3898ff5-9a39-4f99-a03f-dd8e0de593a6",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Given all the confusion around state/status can we find a better name? \"Current\" or something?\n",
        "createdAt" : "2014-09-24T21:32:33Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8e813437-7731-4d98-aafd-d95e3b915a25",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I went with Status struct (PodStatus) and nested Status string (PodStatusString).  The whole struct is status, the string is just a convenient label summarizing it?\n",
        "createdAt" : "2014-09-25T18:44:35Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d007728a-fc5a-4e1a-a822-8677d1154754",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm not satisfied with this.  I don't really have a better answer yet, but I feel like there must be one.\n\nI don't think we should change the name of PodStatus unless we have something compellingly better. PodStatusString does not fit that for me.\n\nI need to move on for a few hours, but I want to come back to this.\n",
        "createdAt" : "2014-09-25T20:32:15Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "547e1140-5a2a-4001-8968-e7fb81b93099",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Doesn't seem horrible:\n\n```\n{\n  \"kind\": \"pod\",\n  \"status\": {\n    \"status\": \"waiting\",\n    \"hostIP\": \"172.34.56.1\"\n  }\n}\n```\n",
        "createdAt" : "2014-09-25T20:44:04Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "419b1923-1065-4fa2-af4f-014c7fc32dc5",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What about:\n    { \"spec\": { ... }, \"current\": { \"status\":\"waiting\" } }  # type Pod { PodSpec, PodReport { PodStatus }}\nor\n    { \"spec\": { ... }, \"status\": { \"state\":\"waiting\" } }  # yes, we just undid this\nor\n    { \"spec\": { ... }, \"status\": { \"condition\":\"waiting\" } } # type Pod { PodSpec, PodStatus { PodCondition }}\nor \n    { \"spec\": { ... }, \"status\": { \"currently\":\"waiting\" } } # type Pod { PodSpec, PodStatus { PodStatusCode }}\n\nThose are my final words on this.  I will not bikeshed further execpt to say that \"Status\" is OK as a group of data points, \"State\" is not.  IMO.  Please choose one of the above, a combination of the above, or something you like better.\n",
        "createdAt" : "2014-09-26T05:03:15Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "77799a32-1809-4392-a86b-66a0c8d8b096",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "_Condition_ is the most appropriate synonym I have been able to find for the waiting/running/success/failure string (\"the state of something, especially with regard to its [...] working order\"). \n",
        "createdAt" : "2014-09-26T22:43:27Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e5f0c4ed-27b4-44bd-a63d-c88f4e86a30c",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Observations:\n\nThe `Status` type, which is used for object-less API responses, also contains a string called `Status`. It also contains `StatusReason` and `StatusDetails`. Because it's a set of closely related fields, aesthetically this looks pretty nice. The pod status fields are less likely to be as closely related. Also, requests are more ephemeral than objects, so \"status\" makes more sense for this case than any other term I can think of. I don't think we should change them, but I also don't think that this necessarily dictates what we do for pod status.\n\nThe Event type being added in #1354 also contains a Status string. It's not in use yet, so it's mutable.\n\nWe're not using _state_ primarily because of the \"pod status is not a state machine\" argument, but also because the term is extremely overloaded, and we're moving away from using it everywhere else.\n\n\"Current\" is not a noun, at least our meaning of it isn't.\n\nIf we used Status both for the collection of fields and for the string field, would it be confusing? Imagine someone asking \"what was the pod's status?\", or requesting \"post the pod's status\". I'd interpret the former as asking about the string, but might request qualification of the latter (field or subobject). Using different terms would certainly avoid this type of ambiguity.\n\nDecisions:\n\nStatus is the most reasonable term for the collection of current state fields.\n\nWe should use \"Condition\" for the string, both in PodStatus and in Event.\n",
        "createdAt" : "2014-09-26T23:33:41Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "28148489-8f24-4b1d-80ee-8081cafc17e6",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "No objections from me on that.  Feels better than the others.\n\n> On Sep 26, 2014, at 7:33 PM, bgrant0607 notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> >  type Pod struct {\n> > -   JSONBase     `json:\",inline\" yaml:\",inline\"`\n> > -   Labels       map[string]string `json:\"labels,omitempty\" yaml:\"labels,omitempty\"`\n> > -   DesiredState PodState          `json:\"desiredState,omitempty\" yaml:\"desiredState,omitempty\"`\n> > -   CurrentState PodState          `json:\"currentState,omitempty\" yaml:\"currentState,omitempty\"`\n> > -   TypeMeta `json:\",inline\" yaml:\",inline\"`\n> > -   Metadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`\n> >   +\n> > -   // Spec defines the behavior of a pod.\n> > -   Spec PodSpec `json:\"spec,omitempty\" yaml:\"spec,omitempty\"`\n> >   +\n> > -   // Status represents the current information about a pod. This data may not be up\n> > -   // to date.\n> > -   Status PodStatus `json:\"status,omitempty\" yaml:\"status,omitempty\"`\n> >   Observations:\n> \n> The Status type, which is used for object-less API responses, also contains a string called Status. It also contains StatusReason and StatusDetails. Because it's a set of closely related fields, aesthetically this looks pretty nice. The pod status fields are less likely to be as closely related. Also, requests are more ephemeral than objects, so \"status\" makes more sense for this case than any other term I can think of. I don't think we should change them, but I also don't think that this necessarily dictates what we do for pod status.\n> \n> The Event type being added in #1354 also contains a Status string. It's not in use yet, so it's mutable.\n> \n> We're not using state primarily because of the \"pod status is not a state machine\" argument, but also because the term is extremely overloaded, and we're moving away from using it everywhere else.\n> \n> \"Current\" is not a noun, at least our meaning of it isn't.\n> \n> If we used Status both for the collection of fields and for the string field, would it be confusing? Imagine someone asking \"what was the pod's status?\", or requesting \"post the pod's status\". I'd interpret the former as asking about the string, but might request qualification of the latter (field or subobject). Using different terms would certainly avoid this type of ambiguity.\n> \n> Decisions:\n> \n> Status is the most reasonable term for the collection of current state fields.\n> \n> We should use \"Condition\" for the string, both in PodStatus and in Event.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-27T00:21:01Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "beb3d244-f5c7-4e64-b03f-d5029885218d",
        "parentId" : "c518e927-f036-4acd-bc70-c6152c00e83a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Hooray for decisions!  I'm down with condition.\n\nOn Fri, Sep 26, 2014 at 5:21 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/api/v1beta3/types.go:\n> \n> >  type Pod struct {\n> > -   JSONBase     `json:\",inline\" yaml:\",inline\"`\n> > -   Labels       map[string]string `json:\"labels,omitempty\" yaml:\"labels,omitempty\"`\n> > -   DesiredState PodState          `json:\"desiredState,omitempty\" yaml:\"desiredState,omitempty\"`\n> > -   CurrentState PodState          `json:\"currentState,omitempty\" yaml:\"currentState,omitempty\"`\n> > -   TypeMeta `json:\",inline\" yaml:\",inline\"`\n> > -   Metadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`\n> >   +\n> > -   // Spec defines the behavior of a pod.\n> > -   Spec PodSpec `json:\"spec,omitempty\" yaml:\"spec,omitempty\"`\n> >   +\n> > -   // Status represents the current information about a pod. This data may not be up\n> > -   // to date.\n> > -   Status PodStatus `json:\"status,omitempty\" yaml:\"status,omitempty\"`\n> \n> No objections from me on that. Feels better than the others.\n> ... <#148b47ba99c489dc_>\n>  On Sep 26, 2014, at 7:33 PM, bgrant0607 notifications@github.com\n> wrote: In pkg/api/v1beta3/types.go: > type Pod struct { > - JSONBase\n> `json:\",inline\" yaml:\",inline\"` > - Labels map[string]string\n> `json:\"labels,omitempty\" yaml:\"labels,omitempty\"` > - DesiredState PodState\n> `json:\"desiredState,omitempty\" yaml:\"desiredState,omitempty\"` > -\n> CurrentState PodState `json:\"currentState,omitempty\"\n> yaml:\"currentState,omitempty\"` > + TypeMeta `json:\",inline\" yaml:\",inline\"`\n> \n> > - Metadata ObjectMeta `json:\"metadata,omitempty\"\n> >   yaml:\"metadata,omitempty\"` > + > + // Spec defines the behavior of a pod. >\n> > - Spec PodSpec `json:\"spec,omitempty\" yaml:\"spec,omitempty\"` > + > + //\n> >   Status represents the current information about a pod. This data may not be\n> >   up > + // to date. > + Status PodStatus `json:\"status,omitempty\"\n> >   yaml:\"status,omitempty\"` Observations: The Status type, which is used for\n> >   object-less API responses, also contains a string called Status. It also\n> >   contains StatusReason and StatusDetails. Because it's a set of closely\n> >   related fields, aesthetically this looks pretty nice. The pod status fields\n> >   are less likely to be as closely related. Also, requests are more ephemeral\n> >   than objects, so \"status\" makes more sense for this case than any other\n> >   term I can think of. I don't think we should change them, but I also don't\n> >   think that this necessarily dictates what we do for pod status. The Event\n> >   type being added in #1354\n> >   https://github.com/GoogleCloudPlatform/kubernetes/pull/1354 also\n> >   contains a Status string. It's not in use yet, so it's mutable. We're not\n> >   using state primarily because of the \"pod status is not a state machine\"\n> >   argument, but also because the term is extremely overloaded, and we're\n> >   moving away from using it everywhere else. \"Current\" is not a noun, at\n> >   least our meaning of it isn't. If we used Status both for the collection of\n> >   fields and for the string field, would it be confusing? Imagine someone\n> >   asking \"what was the pod's status?\", or requesting \"post the pod's status\".\n> >   I'd interpret the former as asking about the string, but might request\n> >   qualification of the latter (field or subobject). Using different terms\n> >   would certainly avoid this type of ambiguity. Decisions: Status is the most\n> >   reasonable term for the collection of current state fields. We should use\n> >   \"Condition\" for the string, both in PodStatus and in Event. -- Reply to this\n> >   email directly or view it on GitHub.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1225/files#r18120234\n> .\n",
        "createdAt" : "2014-09-27T03:15:37Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 407,
    "diffHunk" : "@@ -1,1 +396,400 @@\t// Status represents the current information about a pod. This data may not be up\n\t// to date.\n\tStatus PodStatus `json:\"status,omitempty\" yaml:\"status,omitempty\"`\n}\n"
  },
  {
    "id" : "1bbdc967-a98e-4370-9d73-ffe364006989",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cf89f1b-3867-4531-bdbe-d04a5dc19dc0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why no TypeMeta?  I'm trying to grok the appropriate use\n",
        "createdAt" : "2014-09-24T21:33:35Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "50fde067-d0bc-4f56-85e7-6def8afb042d",
        "parentId" : "1cf89f1b-3867-4531-bdbe-d04a5dc19dc0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Specs are regular structures, the metadata here is the template for an object.  Agree it feels a bit obscure, but a PodTemplateSpec is never serialized by itself.\n",
        "createdAt" : "2014-09-25T18:43:53Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "037bb604-a43c-4486-b855-79b5339f37e7",
        "parentId" : "1cf89f1b-3867-4531-bdbe-d04a5dc19dc0",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Got it.  Is this true after we decouple template from replication?\n",
        "createdAt" : "2014-09-25T20:00:32Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fe7e9257-a0b9-4bd4-a556-4f216d2f9d66",
        "parentId" : "1cf89f1b-3867-4531-bdbe-d04a5dc19dc0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes - PodTemplate has PodTemplateSpec, ReplicationController has a ReplicationControllerSpec with a PodTemplateReference (or just ComponentReference).\n\n----- Original Message -----\n\n> >  }\n> > \n> > -func (*Pod) IsAnAPIObject() {}\n> > +// PodTemplateSpec describes the data a pod should have when created from\n> > a template\n> > +type PodTemplateSpec struct {\n> > -   // Metadata of the pods created from this template.\n> > -   Metadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`\n> \n> Got it.  Is this true after we decouple template from replication?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1225/files#r18055920\n",
        "createdAt" : "2014-09-25T20:14:04Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 414,
    "diffHunk" : "@@ -1,1 +402,406 @@type PodTemplateSpec struct {\n\t// Metadata of the pods created from this template.\n\tMetadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`\n\n\t// Spec defines the behavior of a pod."
  },
  {
    "id" : "b4716c79-4aa8-4ea2-ad4e-c5b460cc94ae",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb7f9a3-fb70-409b-be4a-1fd50c9e1707",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "PodManifest?  Better or worse?\n",
        "createdAt" : "2014-09-24T21:38:21Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "50b510d6-bab0-4681-8d4f-b6fa7f6370d8",
        "parentId" : "bfb7f9a3-fb70-409b-be4a-1fd50c9e1707",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I like the grouping of Binding - Pod (\"a pod is created, a binding is created, and then there exists a bound pod\") but I'm open to change.  Spec and Manifest seem pretty close in meaning, and having two of them might conflict.\n",
        "createdAt" : "2014-09-25T18:43:05Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "77ff46ea-835d-4bb4-b09c-d0ec3e609fc0",
        "parentId" : "bfb7f9a3-fb70-409b-be4a-1fd50c9e1707",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yeah, let's not confuse it.  withdrawn\n",
        "createdAt" : "2014-09-26T04:34:38Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +429,433 @@// BoundPods is a list of Pods bound to a common server. The resource version of\n// the pod list is guaranteed to only change when the list of bound pods changes.\ntype BoundPods struct {\n\tTypeMeta `json:\",inline\" yaml:\",inline\"`\n\tMetadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`"
  },
  {
    "id" : "f4c610cb-4d01-4571-8034-d3b42d069b76",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d94b277e-dbc1-4871-96bc-ffe6af83c88d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There was discussion of defining a type for Selector - is that off the table?\n",
        "createdAt" : "2014-09-24T21:39:08Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fc99b007-b951-4d4e-8a33-0ffdd0f1e8fd",
        "parentId" : "d94b277e-dbc1-4871-96bc-ffe6af83c88d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Separate pull I think, independent\n",
        "createdAt" : "2014-09-25T18:41:44Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fad5033c-a6c7-4a12-954a-a22d2d3dea58",
        "parentId" : "d94b277e-dbc1-4871-96bc-ffe6af83c88d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "OK, can I get a TODO somewhere?\n",
        "createdAt" : "2014-09-25T19:59:28Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 483,
    "diffHunk" : "@@ -1,1 +446,450 @@\n\t// Selector is a label query over pods that should match the Replicas count.\n\tSelector map[string]string `json:\"selector,omitempty\" yaml:\"selector,omitempty\"`\n\n\t// Template is a reference to an object that describes the pod that will be created if"
  },
  {
    "id" : "021881ad-1b7e-4249-a007-99e1dbd8c8f7",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0234e38a-74bd-4180-a334-3b54f5ba82c6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm confused about the overlap of Endpoints and ServiceStatus\n",
        "createdAt" : "2014-09-24T21:45:44Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "73c6824d-f519-4ed5-91e9-1fbb214e2fcd",
        "parentId" : "0234e38a-74bd-4180-a334-3b54f5ba82c6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I am too - we could punt on it by leaving ServiceStatus empty for now.\n\n----- Original Message -----\n\n> >  }\n> > \n> > -func (*Service) IsAnAPIObject() {}\n> > +// ServiceList holds a list of services.\n> > +type ServiceList struct {\n> > -   TypeMeta `json:\",inline\" yaml:\",inline\"`\n> > -   Metadata ListMeta `json:\"metadata,inline\" yaml:\"metadata,inline\"`\n> >   +\n> > -   Items []Service `json:\"items\" yaml:\"items\"`\n> >   +}\n> >   \n> >   // Endpoints is a collection of endpoints that implement the actual\n> >   service, for example:\n> >   // Name: \"mysql\", Endpoints: [\"10.10.1.1:1909\", \"10.10.2.2:8834\"]\n> >   type Endpoints struct {\n> \n> I'm confused about the overlap of Endpoints and ServiceStatus\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1225/files#r18002692\n",
        "createdAt" : "2014-09-25T20:14:50Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "14e15fa6-d912-4b78-9f39-2e21ed2be637",
        "parentId" : "0234e38a-74bd-4180-a334-3b54f5ba82c6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm fine either way - let's not repurpose objects just because they are similar, if they have distinct meanings.\n",
        "createdAt" : "2014-09-25T20:36:27Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 580,
    "diffHunk" : "@@ -1,1 +529,533 @@// Endpoints is a collection of endpoints that implement the actual service, for example:\n// Name: \"mysql\", Endpoints: [\"10.10.1.1:1909\", \"10.10.2.2:8834\"]\ntype Endpoints struct {\n\tTypeMeta `json:\",inline\" yaml:\",inline\"`\n\tMetadata ObjectMeta `json:\"metadata,inline\" yaml:\"metadata,inline\"`"
  },
  {
    "id" : "7563a1af-b942-4d68-b9b0-e8a30ab4c901",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb48819a-ad23-4960-880d-9cc9250c45c4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We talked about Node following the Spec/Status/... pattern too\n",
        "createdAt" : "2014-09-24T21:46:26Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f9e1a3b8-181c-4288-8bfa-63968e620b04",
        "parentId" : "bb48819a-ad23-4960-880d-9cc9250c45c4",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This comment did not get a rply\n",
        "createdAt" : "2014-09-26T04:29:49Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3a355e93-a71c-4a65-ae10-5d4f11aa0917",
        "parentId" : "bb48819a-ad23-4960-880d-9cc9250c45c4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm, I thought I created NodeStatus and moved hostIP to it (since that could change)\n\n> On Sep 26, 2014, at 12:29 AM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> >  }\n> > \n> > -func (*EndpointsList) IsAnAPIObject() {}\n> > +// Node is a worker node in Kubernetenes.\n> > +// The name of the node according to etcd is in JSONBase.ID.\n> > +type Node struct {\n> > This comment did not get a rply\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-26T04:39:14Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f9e2d315-71ce-434a-baba-24b768b2502a",
        "parentId" : "bb48819a-ad23-4960-880d-9cc9250c45c4",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I guess I searched from NodeSpec and did not find it.  It's speculative for\nnow, so OK.\n\nOn Thu, Sep 25, 2014 at 9:39 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/api/v1beta3/types.go:\n> \n> >  }\n> > \n> > -func (*EndpointsList) IsAnAPIObject() {}\n> > +// Node is a worker node in Kubernetenes.\n> > +// The name of the node according to etcd is in JSONBase.ID.\n> > +type Node struct {\n> \n> Hrm, I thought I created NodeStatus and moved hostIP to it (since that\n> could change)\n> ... <#148b041b63cdc4de_>\n>  On Sep 26, 2014, at 12:29 AM, Tim Hockin notifications@github.com\n> wrote: In pkg/api/v1beta3/types.go: > } > > -func (*EndpointsList)\n> IsAnAPIObject() {} > +// Node is a worker node in Kubernetenes. > +// The\n> name of the node according to etcd is in JSONBase.ID. > +type Node struct {\n> This comment did not get a rply -- Reply to this email directly or view it\n> on GitHub.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1225/files#r18073502\n> .\n",
        "createdAt" : "2014-09-26T05:19:20Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +557,561 @@// Node is a worker node in Kubernetenes.\n// The name of the node according to etcd is in JSONBase.ID.\ntype Node struct {\n\tTypeMeta `json:\",inline\" yaml:\",inline\"`\n\tMetadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`"
  },
  {
    "id" : "4bf785b3-6dbf-4cbb-87f5-4129d87b20bb",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6da7d426-0bb2-4f80-8b59-5de40f6f5a47",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Moving these to the bottom means they will get forgotten.  It's not strictly related, but can't we attach IsAnAPIObject() to TypeMeta or something, and be done with it?\n",
        "createdAt" : "2014-09-24T21:48:12Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f1dd0dfc-aafd-4df1-93b2-f1b2e40af1ac",
        "parentId" : "6da7d426-0bb2-4f80-8b59-5de40f6f5a47",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can't because the embedded type is a value reference not a pointer, so it messes up the other conversion logic that benefits from just dealing with pointers.  I asked that when they first came up.  I'm going to move all of them to register.go in a separate pull i think.\n",
        "createdAt" : "2014-09-25T18:31:58Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cdf06cf0-996b-4292-8fb9-95a9e4837b7c",
        "parentId" : "6da7d426-0bb2-4f80-8b59-5de40f6f5a47",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can't we embed a pointer?\n",
        "createdAt" : "2014-09-25T19:59:08Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "afbaf2bc-66f7-4fe9-b5a2-74c865ca2ac4",
        "parentId" : "6da7d426-0bb2-4f80-8b59-5de40f6f5a47",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Spawned https://github.com/GoogleCloudPlatform/kubernetes/issues/1450\n\n----- Original Message -----\n\n> >  }\n> > \n> > -func (*ServerOpList) IsAnAPIObject() {}\n> > +// WatchEvent objects are streamed from the api server in response to a\n> > watch request.\n> > +type WatchEvent struct {\n> > -   // The type of the watch event; added, modified, or deleted.\n> > -   Type watch.EventType\n> >   +\n> > -   // For added or modified objects, this is the new object; for deleted\n> >   objects,\n> > -   // it's the state of the object immediately prior to its deletion.\n> > -   Object runtime.EmbeddedObject\n> >   +}\n> >   +\n> >   +// TODO: for readability\n> \n> Can't we embed a pointer?\n",
        "createdAt" : "2014-09-25T20:12:54Z",
        "updatedAt" : "2014-09-29T16:10:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +815,819 @@}\n\n// TODO: for readability\nfunc (*Pod) IsAnAPIObject()                       {}\nfunc (*PodList) IsAnAPIObject()                   {}"
  },
  {
    "id" : "c66a03d4-819a-4a2d-8bbd-f2fd152af156",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bfd77f2-a52b-4484-b30e-61750d9bc489",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Cross-referencing this with the ip-per-service PR, I have a question.  In ip-per-service, the master has to assign a few fields (the IP in particular) to a service upon creation.  They must be ignored on input.\n\nDo you see those fields a) in ServiceSpec, b) in Service, c) in ServiceData, d) in BoundService ? \n",
        "createdAt" : "2014-09-30T03:46:55Z",
        "updatedAt" : "2014-09-30T03:46:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e58364bf-31f2-4c08-a12b-5c64b07b0827",
        "parentId" : "7bfd77f2-a52b-4484-b30e-61750d9bc489",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Sounds like ServiceStatus, similar to how Host is set in PodStatus, no?\n\nOr is your question what the proxy should watch (replacement for endpoints?)?\n",
        "createdAt" : "2014-09-30T06:11:12Z",
        "updatedAt" : "2014-09-30T06:11:12Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7e830c8f-699d-42a3-9083-441efa3f3904",
        "parentId" : "7bfd77f2-a52b-4484-b30e-61750d9bc489",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On Sep 29, 2014, at 11:47 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > ```\n> > // ContainerPort is the name of the port on the container to direct traffic to.\n> > // Optional, if unspecified use the first port on the container.\n> > ContainerPort util.IntOrString `json:\"containerPort,omitempty\" yaml:\"containerPort,omitempty\"`\n> > ```\n> > \n> >  }\n> > \n> > -func (*Service) IsAnAPIObject() {}\n> > +// Service is a named abstraction of software service (for example, mysql) consisting of local port\n> > +// (for example 3306) that the proxy listens on, and the selector that determines which pods\n> > +// will answer requests sent through the proxy.\n> > +type Service struct {\n> > Cross-referencing this with the ip-per-service PR, I have a question. In ip-per-service, the master has to assign a few fields (the IP in particular) to a service upon creation. They must be ignored on input.\n> \n> Do you see those fields a) in ServiceSpec, b) in Service, c) in ServiceData, d) in BoundService ?\n> \n> Seems like ServiceStatus if users can never choose them.  If the users can set them or leave it to the server to set a default, maybe we use Spec for user intent and Status for effective state?  I feel like the Bound\\* are more special cases where things are transformed into other atomic units but that's more based on our current pattern.\n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-30T14:42:49Z",
        "updatedAt" : "2014-09-30T14:42:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9d6fc552-e4bf-4bf5-81b1-1ea26f7e33f0",
        "parentId" : "7bfd77f2-a52b-4484-b30e-61750d9bc489",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "BoundPod is really just a way of encapsulating a PodSpec + metadata, so the analogy here doesn't really hold, but I was grasping.\n\nI guess *Status sounds close enough.  Once this API change lands I will have to figure out how to rebase ip-per-service onto it. \n",
        "createdAt" : "2014-09-30T16:00:27Z",
        "updatedAt" : "2014-09-30T16:00:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 559,
    "diffHunk" : "@@ -1,1 +508,512 @@// (for example 3306) that the proxy listens on, and the selector that determines which pods\n// will answer requests sent through the proxy.\ntype Service struct {\n\tTypeMeta `json:\",inline\" yaml:\",inline\"`\n\tMetadata ObjectMeta `json:\"metadata,omitempty\" yaml:\"metadata,omitempty\"`"
  },
  {
    "id" : "d68f9a73-64a9-4746-80f1-ecf1f12e8d90",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8a172c3-05f5-489f-92b3-0c869d0669cc",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Just stumbled across #992. We should just resolve it one way or the other in v1beta3. Any compelling arguments against changing Dir to Directory in hostDir and emptyDir?\n\n@thockin @lavalamp @dchen1107 @satnam6502 \n",
        "createdAt" : "2014-09-30T07:17:35Z",
        "updatedAt" : "2014-09-30T07:17:35Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "eea4d7f1-0df2-4bdd-ab22-226af47cfbf5",
        "parentId" : "f8a172c3-05f5-489f-92b3-0c869d0669cc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm fine with changing emptyDir to EmptyDirectory or even just \"empty\".\n\nhostDir is interesting - it doesn't have to be a directory at all - it can be a host file.  Maybe it should just become hostMount or fromHost or something. \n\nI don't think v1beta3 needs to block on either of these - I think we can make a compatible change here.\n",
        "createdAt" : "2014-09-30T16:04:26Z",
        "updatedAt" : "2014-09-30T16:04:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3416b01a-96a3-4e20-b709-b1aa0ae0e897",
        "parentId" : "f8a172c3-05f5-489f-92b3-0c869d0669cc",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How about hostPath and emptyDirectory?\n",
        "createdAt" : "2014-09-30T16:52:55Z",
        "updatedAt" : "2014-09-30T16:52:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "012a33ec-9bc0-4561-9302-f7f24a11b99f",
        "parentId" : "f8a172c3-05f5-489f-92b3-0c869d0669cc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That's good, but I think we can make that change in a compatible way, so\nv1b3 doesn't need to block.\n\nOn Tue, Sep 30, 2014 at 9:53 AM, bgrant0607 notifications@github.com\nwrote:\n\n> In pkg/api/v1beta3/types.go:\n> \n> > @@ -86,16 +129,16 @@ type VolumeSource struct {\n> >     // HostDirectory represents a pre-existing directory on the host machine that is directly\n> >     // exposed to the container. This is generally used for system agents or other privileged\n> >     // things that are allowed to see the host machine. Most containers will NOT need this.\n> > -   // TODO(jonesdl) We need to restrict who can use host directory mounts and\n> > -   // who can/can not mount host directories as read/write.\n> > -   HostDirectory *HostDirectory `yaml:\"hostDir\" json:\"hostDir\"`\n> > -   // TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\n> > -   // mount host directories as read/write.\n> > -   HostDirectory *HostDirectory `json:\"hostDir\" yaml:\"hostDir\"`\n> \n> How about hostPath and emptyDirectory?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1225/files#r18230436\n> .\n",
        "createdAt" : "2014-09-30T17:01:03Z",
        "updatedAt" : "2014-09-30T17:01:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "199b9c78-7926-481b-90c9-c955e4a9c119",
        "parentId" : "f8a172c3-05f5-489f-92b3-0c869d0669cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Any other comments?  \n\n> On Sep 30, 2014, at 1:01 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/v1beta3/types.go:\n> \n> > @@ -86,16 +129,16 @@ type VolumeSource struct {\n> >     // HostDirectory represents a pre-existing directory on the host machine that is directly\n> >     // exposed to the container. This is generally used for system agents or other privileged\n> >     // things that are allowed to see the host machine. Most containers will NOT need this.\n> > -   // TODO(jonesdl) We need to restrict who can use host directory mounts and\n> > -   // who can/can not mount host directories as read/write.\n> > -   HostDirectory *HostDirectory `yaml:\"hostDir\" json:\"hostDir\"`\n> > -   // TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\n> > -   // mount host directories as read/write.\n> > -   HostDirectory *HostDirectory `json:\"hostDir\" yaml:\"hostDir\"`\n> >   That's good, but I think we can make that change in a compatible way, so v1b3 doesn't need to block.\n> >   â€¦\n> >   â€”\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-30T22:58:31Z",
        "updatedAt" : "2014-09-30T22:58:31Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0247d92ce4ed4daba77eecf207cbc14178ad61e",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +132,136 @@\t// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\n\t// mount host directories as read/write.\n\tHostDirectory *HostDirectory `json:\"hostDir\" yaml:\"hostDir\"`\n\t// EmptyDirectory represents a temporary directory that shares a pod's lifetime.\n\tEmptyDirectory *EmptyDirectory `json:\"emptyDir\" yaml:\"emptyDir\"`"
  }
]