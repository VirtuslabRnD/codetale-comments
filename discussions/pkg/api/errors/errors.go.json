[
  {
    "id" : "d2701449-44c3-40a3-b9e9-9f3fa67ca72d",
    "prId" : 35483,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35483#pullrequestreview-7546776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5dd7e3-9de2-4611-9ba7-7960f8c67cec",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Maybe I missed something, why can't this be written in the same way as the functions above?\n",
        "createdAt" : "2016-11-04T02:28:00Z",
        "updatedAt" : "2016-11-08T00:13:43Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "aa6926bc-49ba-4980-a4a9-0b8064aa4cb8",
        "parentId" : "9c5dd7e3-9de2-4611-9ba7-7960f8c67cec",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "The `TooManyRequest` error returned in this case only has a status code with empty `Reason` field.\n",
        "createdAt" : "2016-11-04T02:46:20Z",
        "updatedAt" : "2016-11-08T00:13:43Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "97d77bec-86e0-42ae-b1bd-7ccd812ce979",
        "parentId" : "9c5dd7e3-9de2-4611-9ba7-7960f8c67cec",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Interesting, could you open any issue and paste the err your received?\n",
        "createdAt" : "2016-11-04T22:27:02Z",
        "updatedAt" : "2016-11-08T00:13:43Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "fe07390a-74ce-4f43-9db0-bb13e9f6c256",
        "parentId" : "9c5dd7e3-9de2-4611-9ba7-7960f8c67cec",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Created #36409.\n",
        "createdAt" : "2016-11-08T02:25:57Z",
        "updatedAt" : "2016-11-08T02:25:57Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b73fae6c5594c26fb28fca397ef82c663f1e4f83",
    "line" : null,
    "diffHunk" : "@@ -1,1 +417,421 @@// that the server cannot handle.\n// TODO: update IsTooManyRequests() when the TooManyRequests(429) error returned from the API server has a non-empty Reason field\nfunc IsTooManyRequests(err error) bool {\n\tswitch t := err.(type) {\n\tcase APIStatus:"
  },
  {
    "id" : "a8e4c8dc-b357-4514-8b8f-af8c81c6ed4d",
    "prId" : 31756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2950075-9294-46e0-8bb1-4369fdd72882",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I didn't catch this but server message could be many KB long\n",
        "createdAt" : "2016-09-02T22:28:30Z",
        "updatedAt" : "2016-09-02T22:28:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a23f5a79f34cb70fa65de9b3902428a16a366ca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +326,330 @@\t\tif code >= 500 {\n\t\t\treason = unversioned.StatusReasonInternalError\n\t\t\tmessage = fmt.Sprintf(\"an error on the server (%q) has prevented the request from succeeding\", serverMessage)\n\t\t}\n\t}"
  },
  {
    "id" : "eae8ca28-eefd-48a5-8914-3b0b88617930",
    "prId" : 18526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f2e72e8-3c3d-4017-bca6-7b86156258b2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'd claim the resource isn't found, the kind is a side effect.  You want both?\n",
        "createdAt" : "2016-01-21T13:34:17Z",
        "updatedAt" : "2016-01-21T13:34:17Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ceec2a86-0ebd-494f-809f-7c67f7b2cbd6",
        "parentId" : "7f2e72e8-3c3d-4017-bca6-7b86156258b2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm fine with adding a resource field and returning it in that case.\nKind being empty is ok in error cases (practically, it already is).\n",
        "createdAt" : "2016-01-21T14:35:43Z",
        "updatedAt" : "2016-01-21T14:35:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fda7f181299e49dd5f28405952ee76821eab74c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +94,98 @@\n// NewNotFound returns a new error which indicates that the resource of the kind and the name was not found.\nfunc NewNotFound(qualifiedResource unversioned.GroupResource, name string) error {\n\treturn &StatusError{unversioned.Status{\n\t\tStatus: unversioned.StatusFailure,"
  },
  {
    "id" : "585c145e-7284-4b82-8e1f-c2ce6f0b729e",
    "prId" : 18526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e24e4328-fea1-4ada-9580-b8665f4d19d7",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@smarterclayton The resource is forbidden, no kind determination was made because that requires the body.\n",
        "createdAt" : "2016-01-21T13:35:16Z",
        "updatedAt" : "2016-01-21T13:35:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a0843530-8c30-4ae6-ad58-44f80ba58aaa",
        "parentId" : "e24e4328-fea1-4ada-9580-b8665f4d19d7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "For now yes.\n",
        "createdAt" : "2016-01-21T14:36:34Z",
        "updatedAt" : "2016-01-21T14:36:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4199c4f5-8727-4732-98fd-dd01399d7b9a",
        "parentId" : "e24e4328-fea1-4ada-9580-b8665f4d19d7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "There are other reasons to be forbidden.  If you reference something\nvia an object ref the user is forbidden from using, a kind equal to\nthe object ref is needed in order to know _what_ was forbidden.  We\nuse this heavily from OpenShift image streams.\n",
        "createdAt" : "2016-01-21T14:37:54Z",
        "updatedAt" : "2016-01-21T14:37:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fda7f181299e49dd5f28405952ee76821eab74c",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +139,143 @@\n// NewForbidden returns an error indicating the requested action was forbidden\nfunc NewForbidden(qualifiedResource unversioned.GroupResource, name string, err error) error {\n\treturn &StatusError{unversioned.Status{\n\t\tStatus: unversioned.StatusFailure,"
  },
  {
    "id" : "94ebc83c-fefc-4d4e-87e6-8b1d916253c3",
    "prId" : 18526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "419edf0a-89e1-41f8-b05d-398baad7687a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@smarterclayton methods are associated with resources, not with kinds.  This is particular important since a kind could be used for multiple resources and so the kind is a perfectly valid thing to submit to a different resource with this method.\n",
        "createdAt" : "2016-01-21T13:36:28Z",
        "updatedAt" : "2016-01-21T13:36:28Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "62a8775f-b0cb-4e05-92ef-22aabc43dc5e",
        "parentId" : "419edf0a-89e1-41f8-b05d-398baad7687a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agreed\n",
        "createdAt" : "2016-01-21T14:38:09Z",
        "updatedAt" : "2016-01-21T14:38:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fda7f181299e49dd5f28405952ee76821eab74c",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +224,228 @@\n// NewMethodNotSupported returns an error indicating the requested action is not supported on this kind.\nfunc NewMethodNotSupported(qualifiedResource unversioned.GroupResource, action string) error {\n\treturn &StatusError{unversioned.Status{\n\t\tStatus: unversioned.StatusFailure,"
  },
  {
    "id" : "133f48d8-dbb8-4815-b2ca-4fc6c5ff9c0c",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88f3734b-a920-4095-89ae-235afc47b0a9",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I am guessing the narrowing/widening conversions here are because you don't want to change the API all over town, or do you really prefer the API for this to be an int?  Seems like if we offer an int API but work with int32 we should at least advertise this in the godoc.\n",
        "createdAt" : "2015-11-18T20:24:44Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "ff70e497-cf55-4ed0-b4fc-c42df969a85e",
        "parentId" : "88f3734b-a920-4095-89ae-235afc47b0a9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Public API should not be int.  Internal is int because it's a massive effort that touches every file in the codebase to refactor.  This is step one because int is always as wide or wider than int32.\n",
        "createdAt" : "2015-11-18T21:30:28Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9a65ee1e-cee3-4375-9ed0-61198c194df4",
        "parentId" : "88f3734b-a920-4095-89ae-235afc47b0a9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't expect it makes a difference for this field, but casting like this is not safe in general as it potentially hides a cross-platform bug.\n",
        "createdAt" : "2015-11-18T23:04:36Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1909c820-22ba-432c-a705-40ae570383f6",
        "parentId" : "88f3734b-a920-4095-89ae-235afc47b0a9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree, but I'd rather refactor the internal in a follow on (remove casts to\nint32)\n\nOn Wed, Nov 18, 2015 at 6:04 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/errors/errors.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r45275000\n> :\n> \n> > @@ -226,7 +226,7 @@ func NewServerTimeout(kind, operation string, retryAfterSeconds int) error {\n> >         Details: &unversioned.StatusDetails{\n> >             Kind:              kind,\n> >             Name:              operation,\n> > -           RetryAfterSeconds: retryAfterSeconds,\n> > -           RetryAfterSeconds: int32(retryAfterSeconds),\n> \n> I don't expect it makes a difference for this field, but casting like this\n> is not safe in general as it potentially hides a cross-platform bug.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r45275000.\n",
        "createdAt" : "2015-11-18T23:24:54Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\t\tKind:              kind,\n\t\t\tName:              operation,\n\t\t\tRetryAfterSeconds: int32(retryAfterSeconds),\n\t\t},\n\t\tMessage: fmt.Sprintf(\"The %s operation against %s could not be completed at this time, please try again.\", operation, kind),"
  },
  {
    "id" : "9734613f-25d9-46ae-9593-524bc19347c3",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a675087e-15e0-4d63-897c-785ccf5b9b9b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This direction, casting from int32 to int, should be safe everywhere.\n",
        "createdAt" : "2015-11-18T23:08:42Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +411,415 @@\t\t\tswitch t.Status().Reason {\n\t\t\tcase unversioned.StatusReasonServerTimeout, unversioned.StatusReasonTimeout:\n\t\t\t\treturn int(t.Status().Details.RetryAfterSeconds), true\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "78cc2aab-25ef-41fd-9735-ca073f7e0914",
    "prId" : 6881,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "When will this happen?\n",
        "createdAt" : "2015-04-15T23:54:13Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ba168e68-6788-4a12-8c8d-0bffe313bd64",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I see where unexpected is set to false below. I'm more asking whether some cause is (or could be) meaningful for go-restful-produced errors.\n",
        "createdAt" : "2015-04-15T23:56:35Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b023ac80-5767-445f-8572-8a13ee1a0f4d",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Couldnt think of a cause to add. The current ones are specific to field value validation: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/types.go#L1496\nFeel free to suggest, if you have something in mind.\n",
        "createdAt" : "2015-04-16T00:03:41Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "f1b095a2-7195-4fb5-a6a9-a58efac4e137",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "go-restful will return 404 when the path isn't registered? We could create a cause for that, to distinguish it from a proper path but no object.\n\ngo-restful will return 405 when the path is registered, but the verb is not? That error is perhaps specific enough without a cause.\n",
        "createdAt" : "2015-04-16T00:04:56Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ff7445ea-886a-4c22-b221-3e4714104ee7",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "406 and 415 probably/maybe don't need causes, either, at least for now.\n",
        "createdAt" : "2015-04-16T00:06:53Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c909ee8e-4c62-4345-8333-bc97dbe5b9e3",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How about PathInvalid as cause for 404s from go-restful and DoesNotExist for 404s from etcd (i.e., the cause reported by NewNotFound)?\n",
        "createdAt" : "2015-04-16T00:48:44Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0a9c6d0c-7bd2-408e-844f-dc1c099a6c9c",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes NewNotFound is different: https://github.com/GoogleCloudPlatform/kubernetes/blob/3565a0861c62a827fc6112968262c75c8c59d5d1/pkg/api/errors/errors.go#L91\nIt has a bit more details.\nExample output from NewNotFound:\n\n```\n$curl -X GET -i http://localhost:8082/api/v1beta3/namespaces/default/services/kube\nHTTP/1.1 404 Not Found\nContent-Type: application/json\nDate: Thu, 16 Apr 2015 22:06:17 GMT\nContent-Length: 232\n\n{\n  \"kind\": \"Status\",\n  \"apiVersion\": \"v1beta3\",\n  \"metadata\": {},\n  \"status\": \"Failure\",\n  \"message\": \"service \\\"kube\\\" not found\",\n  \"reason\": \"NotFound\",\n  \"details\": {\n    \"id\": \"kube\",\n    \"kind\": \"service\"\n  },\n  \"code\": 404\n}\n```\n\nExample output from go-restful 404:\n\n```\ncurl -X GET -i http://localhost:8082/api/v1beta3/redirect/namespaces/default/servfds/fdsfsd\nHTTP/1.1 404 Not Found\nContent-Type: application/json\nDate: Thu, 16 Apr 2015 22:07:41 GMT\nContent-Length: 211\n\n{\n  \"kind\": \"Status\",\n  \"apiVersion\": \"v1beta3\",\n  \"metadata\": {},\n  \"status\": \"Failure\",\n  \"message\": \"the server could not find the requested resource\",\n  \"reason\": \"NotFound\",\n  \"details\": {},\n  \"code\": 404\n}\n```\n",
        "createdAt" : "2015-04-16T22:10:30Z",
        "updatedAt" : "2015-04-16T22:10:30Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "33940090-3875-46f8-a6ba-65c803239610",
        "parentId" : "1923cd5a-104d-4d42-9d74-fa6e293aeeb8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Not the greatest, but ok.\n",
        "createdAt" : "2015-04-16T23:43:35Z",
        "updatedAt" : "2015-04-16T23:43:35Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9132dc57288ddf5deeb132b9f6ee7048f3810cb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +307,311 @@\t\t}\n\t} else {\n\t\tcauses = nil\n\t}\n\treturn &StatusError{api.Status{"
  },
  {
    "id" : "8c959ffe-a30b-4499-80f4-73faab89ed03",
    "prId" : 3248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8421869d-f1aa-4ea6-aab1-119673015125",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The authorizer returns forbidden but it doesn't use NewForbidden.  Not sure if that is a problem?\n",
        "createdAt" : "2015-01-08T00:50:50Z",
        "updatedAt" : "2015-01-08T00:50:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a56087cdf8a8831a968c00c335588b7906150ea7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +106,110 @@\t}}\n}\n\n// NewConflict returns an error indicating the item can't be updated as provided.\nfunc NewConflict(kind, name string, err error) error {"
  },
  {
    "id" : "6d56b60c-37c3-4ba6-9b3a-accb80f85cdd",
    "prId" : 2124,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e73744-d1b6-4a7c-9cfd-2ab50e035755",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Godoc\n",
        "createdAt" : "2014-11-02T21:59:22Z",
        "updatedAt" : "2014-11-03T04:08:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d7c80b7c-6309-46ad-9218-98bb009bcc0a",
        "parentId" : "f7e73744-d1b6-4a7c-9cfd-2ab50e035755",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-11-03T04:08:29Z",
        "updatedAt" : "2014-11-03T04:08:29Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "32a04e48fdc6ccddca774146008f510ff5cd7a7d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +118,122 @@\n// NewBadRequest creates an error that indicates that the request is invalid and can not be processed.\nfunc NewBadRequest(reason string) error {\n\treturn &statusError{\n\t\tapi.Status{"
  },
  {
    "id" : "63a4985a-dca0-4982-a480-25a3f79b7325",
    "prId" : 2124,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3483ab46-04f8-45ad-8f25-7087c19ef88a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Needs `IsBadRequest` as well\n",
        "createdAt" : "2014-11-02T22:00:10Z",
        "updatedAt" : "2014-11-03T04:08:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6394732f-74da-4d4b-8f58-4cc5781ae864",
        "parentId" : "3483ab46-04f8-45ad-8f25-7087c19ef88a",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-11-03T04:08:35Z",
        "updatedAt" : "2014-11-03T04:08:35Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "32a04e48fdc6ccddca774146008f510ff5cd7a7d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +133,137 @@}\n\n// IsNotFound returns true if the specified error was created by NewNotFoundErr.\nfunc IsNotFound(err error) bool {\n\treturn reasonForError(err) == api.StatusReasonNotFound"
  },
  {
    "id" : "55d84f29-17ec-4af8-8bce-bd470c4af196",
    "prId" : 964,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e53c292-1c90-4e79-be8e-027d4978fcd6",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "glog.Errorf(...)\n",
        "createdAt" : "2014-08-25T17:28:58Z",
        "updatedAt" : "2014-08-26T17:39:26Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a841a49fddfa50355312ccdb3f9e0eb3522180c",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +59,63 @@\tcase ValidationErrorTypeNotSupported:\n\t\treturn \"unsupported value\"\n\tdefault:\n\t\tglog.Errorf(\"unrecognized validation type: %#v\", t)\n\t\treturn \"\""
  },
  {
    "id" : "b0a2bc32-570f-496f-bfc3-10dd077e07a0",
    "prId" : 900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2891048d-d68e-43ec-89bf-51ba0180094f",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "If you only have one import, you can just say import \"fmt\" on a single line. \n",
        "createdAt" : "2014-08-14T21:10:48Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "6cd3de47-2733-4f61-b683-b0c41bfdd714",
        "parentId" : "2891048d-d68e-43ec-89bf-51ba0180094f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is it worth changing or is this also acceptable?\n",
        "createdAt" : "2014-08-14T22:45:27Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "53556bd8-7d18-4839-951e-0e7461336b11",
        "parentId" : "2891048d-d68e-43ec-89bf-51ba0180094f",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "If the file is likely to get more imports in the future it will turn back into this form, but I have a slight preference for the shorter form when there is only a single import. The way you have it is fine with me if it doesn't bother anyone else. \n",
        "createdAt" : "2014-08-14T23:30:38Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "0ea5dbd7-9c55-4881-8a9c-4e5a5aebac68",
        "parentId" : "2891048d-d68e-43ec-89bf-51ba0180094f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "...and now it has 2 :)\n",
        "createdAt" : "2014-08-14T23:32:40Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9e65c243862192af8ba495a0f5353736ccc6962",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@package errors\n\nimport (\n\t\"fmt\"\n\t\"strings\""
  },
  {
    "id" : "8ccd32ca-0470-4231-adba-2579fbae12c3",
    "prId" : 900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b92f2f1-c70f-41c9-babf-fd462e82a5de",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Do we want ValidationError or &ValidationError to implement the error interface? In other words, do we expect to be passing around pointers to this struct when we return errors or always copy by value?\n",
        "createdAt" : "2014-08-14T21:12:24Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "c585dc20-8154-4fec-b7c3-602759c1a740",
        "parentId" : "0b92f2f1-c70f-41c9-babf-fd462e82a5de",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think this is a small-size type generally\n",
        "createdAt" : "2014-08-14T22:46:09Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "51451ba9-59f2-4122-87d3-2a5050266c54",
        "parentId" : "0b92f2f1-c70f-41c9-babf-fd462e82a5de",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I have medium strong preference for a pointer receiver here.\n",
        "createdAt" : "2014-08-15T01:21:44Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e335864c-56b6-422b-8bbd-880ddfa4d4a1",
        "parentId" : "0b92f2f1-c70f-41c9-babf-fd462e82a5de",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ValidationError does not implement error (Error method has pointer receiver) - the signature for the error interface is a value receiver.  The alternative is to always use pointers to ValidationError - that seems like a waste of energy.\n",
        "createdAt" : "2014-08-15T05:14:36Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9e65c243862192af8ba495a0f5353736ccc6962",
    "line" : null,
    "diffHunk" : "@@ -1,1 +40,44 @@}\n\nfunc (v ValidationError) Error() string {\n\treturn fmt.Sprintf(\"%s: %v '%v'\", v.Field, v.Type, v.BadValue)\n}"
  },
  {
    "id" : "41985e3b-9119-42ab-a977-13e28a4b201c",
    "prId" : 900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba178e77-bff8-44c5-a9b1-8b2e0a5c1a96",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thinking out loud-- there's already an \"errors\" package, so this will be a pain for people who want to use both. Not saying you should change it, just pointing it out.\n",
        "createdAt" : "2014-08-15T01:17:16Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a94160ab-a93f-42b5-b3ce-fc2094c122b6",
        "parentId" : "ba178e77-bff8-44c5-a9b1-8b2e0a5c1a96",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "My mental model of Tim hates the package name \"verrors\"-- am I right?\n",
        "createdAt" : "2014-08-15T01:30:29Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d6696f6b-7bec-41d9-bacd-8cd79b8081cb",
        "parentId" : "ba178e77-bff8-44c5-a9b1-8b2e0a5c1a96",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Either be goan and use \"errors\" or \"errs\", or be C++ish and say \"api_validation_errors\" :)\n\nThis is why imports can rename packages - one of the go docs says \"don't worry about package name collisions, users can rename them on import\" (which makes for awesome ungreppable code)\n",
        "createdAt" : "2014-08-15T05:18:32Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9e65c243862192af8ba495a0f5353736ccc6962",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage errors\n\nimport ("
  },
  {
    "id" : "8e17f3e7-6004-4035-8d91-a5b049a8658d",
    "prId" : 900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "460a7962-496d-48d1-a456-a9321b05067e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It shouldn't be possible to produce a zero length error list. If you get here, it means someone thinks they have an error when they actually don't. This would be a programmer error. Consider panicing.\n",
        "createdAt" : "2014-08-15T01:23:21Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d5fa50ab-a951-4b09-9a45-de46470d83bf",
        "parentId" : "460a7962-496d-48d1-a456-a9321b05067e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That is, if you return a nil ErrorList, it should never pass the err != nil test.\n",
        "createdAt" : "2014-08-15T01:23:59Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a8604e56-ce16-4b66-9360-f23f4a277383",
        "parentId" : "460a7962-496d-48d1-a456-a9321b05067e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I found the common case to be a bunch of internal helper functions that return accumulate errors into and return ErrorList, and a smaller number of external functions that accumulate errors into ErrorList and return ErrorList.ToError().\n\nI guess EVERYBODY could return ToError(), which means ErroList would become a list of lists of lists ...  I'm abivalent.  We still need to append() (next PR), and I find thi spattern clean enough.  I don;t want to dither on this much longer - it's not THAt important.\n",
        "createdAt" : "2014-08-15T05:29:13Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9e65c243862192af8ba495a0f5353736ccc6962",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@// Error is part of the error interface.\nfunc (list errorListInternal) Error() string {\n\tif len(list) == 0 {\n\t\treturn \"\"\n\t}"
  },
  {
    "id" : "3390ca34-1968-4866-8612-eb246d6c8b42",
    "prId" : 900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e71d6cdd-2141-487a-9378-1b9e825f560b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I _think_ this isn't even necessary-- (ErrorList{} == nil) == true. But worth a test, I am not 100% sure it will behave as expected when you stick it in an interface.\n",
        "createdAt" : "2014-08-15T01:26:11Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "92931174-bce5-4295-96d3-ca961eaf04f2",
        "parentId" : "e71d6cdd-2141-487a-9378-1b9e825f560b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "http://play.golang.org/p/h-tdzukNYN\n\nAn empty ErrorList is not nil\n",
        "createdAt" : "2014-08-15T05:32:42Z",
        "updatedAt" : "2014-08-15T07:15:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7f5cb2f3-eeb2-429e-88eb-56fa19288e46",
        "parentId" : "e71d6cdd-2141-487a-9378-1b9e825f560b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Weird, OK.\n",
        "createdAt" : "2014-08-15T16:46:44Z",
        "updatedAt" : "2014-08-15T16:46:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9e65c243862192af8ba495a0f5353736ccc6962",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@// ToError converts an ErrorList into a \"normal\" error, or nil if the list is empty.\nfunc (list ErrorList) ToError() error {\n\tif len(list) == 0 {\n\t\treturn nil\n\t}"
  }
]