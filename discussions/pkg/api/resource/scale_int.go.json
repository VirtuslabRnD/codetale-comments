[
  {
    "id" : "27f34251-a9b6-47a3-8464-5b01197cf964",
    "prId" : 18170,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008e224e-3e7a-4a97-9821-26529311baa0",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "(optional nit) you could use divisor here in place of exp, then you don't need `remainder := exp` below. That might be a little cleaner since it sets it to the final value in one line... up to you.\n",
        "createdAt" : "2015-12-04T00:39:26Z",
        "updatedAt" : "2015-12-04T01:00:35Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "502c226e-b50d-4a7d-b260-997879513cba",
        "parentId" : "008e224e-3e7a-4a97-9821-26529311baa0",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "I feel I still want to keep them separate.\n",
        "createdAt" : "2015-12-04T00:53:28Z",
        "updatedAt" : "2015-12-04T01:00:35Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf82d6b0049bb3e9a332dd4c64a8443e738a7f73",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@\t// divisor = 10^(dif)\n\t// TODO: create loop up table if exp costs too much.\n\tdivisor.Exp(bigTen, exp.SetInt64(int64(dif)), nil)\n\t// reuse exp\n\tremainder := exp"
  },
  {
    "id" : "d8fef502-a585-4c9a-a1f2-cff8ef912fff",
    "prId" : 18170,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be70dbd7-cb94-45ba-8eb5-94a910421c5a",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "scale & newScale are the inf.Scale values, which are \"backwards\" in my head (e.g. -9 is a larger scale than 9). I'd either make the type inf.Scale here, or document how the sign is used.\n",
        "createdAt" : "2015-12-04T00:41:12Z",
        "updatedAt" : "2015-12-04T01:00:35Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "7827d1c0-8191-4715-a492-7fb0ff486daf",
        "parentId" : "be70dbd7-cb94-45ba-8eb5-94a910421c5a",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "To be honest, I do not really like inf pkg. Probably we might want to rewrite a subset of it in the future... So I do not want to introduce its logic into this function. I can write a comment... And yes, I feel it counter intuitive too. \n",
        "createdAt" : "2015-12-04T00:45:19Z",
        "updatedAt" : "2015-12-04T01:00:35Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf82d6b0049bb3e9a332dd4c64a8443e738a7f73",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@// scale, newScale represents the scale of the unscaled decimal.\n// The mathematical value of the decimal is unscaled * 10**(-scale).\nfunc scaledValue(unscaled *big.Int, scale, newScale int) int64 {\n\tdif := scale - newScale\n\tif dif == 0 {"
  }
]