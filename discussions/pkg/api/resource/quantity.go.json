[
  {
    "id" : "ad16fe21-128a-4785-a36e-d720e268e84a",
    "prId" : 26033,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f95cdc6-3753-406f-a361-1b41758999a2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm scared someone is going to omit this line some place where it's needed...\n",
        "createdAt" : "2016-05-24T22:35:42Z",
        "updatedAt" : "2016-05-25T02:32:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ffc89f3d-5969-4d32-ac32-d6e7ef8b5ef8",
        "parentId" : "2f95cdc6-3753-406f-a361-1b41758999a2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes.  We may need a more holistic quantity stress tester (I did one\nfor add and remove, but we might want to get more formal).\n",
        "createdAt" : "2016-05-24T22:48:32Z",
        "updatedAt" : "2016-05-25T02:32:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3817a7e3-2b4f-4157-8fc2-539c6e913584",
        "parentId" : "2f95cdc6-3753-406f-a361-1b41758999a2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Added a test, also added one more guard for non-canonical strings (a\nleading 0 in the shifted numerator+denominator cannot be canonical).\nThe parse routine always returns 0 for numerator (even when it has a\nleading .) and so the left most position being 0 means the value\ncannot be canonical.\n\nOn Tue, May 24, 2016 at 6:48 PM, Clayton Coleman ccoleman@redhat.com wrote:\n\n> Yes.  We may need a more holistic quantity stress tester (I did one\n> for add and remove, but we might want to get more formal).\n",
        "createdAt" : "2016-05-25T02:33:41Z",
        "updatedAt" : "2016-05-25T02:33:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff867fe03463f554e1904420b6ced0c0fa3066bc",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +520,524 @@// the format of the quantity will be updated to the format of y.\nfunc (q *Quantity) Add(y Quantity) {\n\tq.s = \"\"\n\tif q.d.Dec == nil && y.d.Dec == nil {\n\t\tif q.i.value == 0 {"
  },
  {
    "id" : "3449097f-fd50-42fd-9a33-0c7b6fb5d08b",
    "prId" : 25978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5bd64f-e4da-451a-a461-d6bff3032974",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Hmm - I don't understand it. Shouldn't we have a line like:\nresult := q\nat the beginning?\n\nHow this works?\n",
        "createdAt" : "2016-07-06T06:10:09Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8729d3cd-ada8-4681-b8bf-0b62c097220f",
        "parentId" : "ad5bd64f-e4da-451a-a461-d6bff3032974",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Since the method arg is a value, it is equivalent to taking a manual copy.\n",
        "createdAt" : "2016-07-06T07:42:21Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b5093911-47ef-4a9b-8016-2087f1d44f59",
        "parentId" : "ad5bd64f-e4da-451a-a461-d6bff3032974",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This is tricky in my opinion. Can you please add a comment about it?\n",
        "createdAt" : "2016-07-06T08:22:37Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f9aaeb15-e556-4d3a-9589-e3a257b383fc",
        "parentId" : "ad5bd64f-e4da-451a-a461-d6bff3032974",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "done\n",
        "createdAt" : "2016-07-07T04:16:52Z",
        "updatedAt" : "2016-07-13T04:53:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef16dd541356b9de3df1d180d0d96daebb874d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +393,397 @@\t\tq.d.Dec = tmp.Set(q.d.Dec)\n\t}\n\treturn q\n}\n"
  },
  {
    "id" : "8480c804-e4ee-41f9-8d85-666d0a07bb9a",
    "prId" : 17548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffa5d7b4-2e16-4a43-b137-ec78f20f5e08",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can it be private?\n",
        "createdAt" : "2015-12-01T23:15:23Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6179cd6e-2acf-4000-b6c7-64dfb9217173",
        "parentId" : "ffa5d7b4-2e16-4a43-b137-ec78f20f5e08",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see, it's used in public method. OK\n",
        "createdAt" : "2015-12-01T23:17:40Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5756a6cb-af5c-4c1b-8428-2ce33db350c4",
        "parentId" : "ffa5d7b4-2e16-4a43-b137-ec78f20f5e08",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Ack.\n",
        "createdAt" : "2015-12-02T00:52:00Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e90886e6599575a08e3ab0b7b254c877b65ac7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +124,128 @@\nconst (\n\tNano  Scale = -9\n\tMicro Scale = -6\n\tMilli Scale = -3"
  },
  {
    "id" : "c6490f22-5fb8-4246-b535-82bfca61dd01",
    "prId" : 17548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe2a4c26-18a8-4686-8e18-0411dfc96f9b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can it be private?\n",
        "createdAt" : "2015-12-01T23:15:31Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bd73ec0d-5b0a-4e7b-9b06-b418059af5c5",
        "parentId" : "fe2a4c26-18a8-4686-8e18-0411dfc96f9b",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I think it needs to be public so that arbitrary values can be passed to the Scale methods (or was your goal to prevent that?)\n",
        "createdAt" : "2015-12-02T00:51:52Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e90886e6599575a08e3ab0b7b254c877b65ac7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +121,125 @@// Base-2 scales are omitted for mathematical simplicity.\n// See Quantity.ScaledValue for more details.\ntype Scale int\n\nconst ("
  },
  {
    "id" : "b953da91-c998-4248-9f69-0ac5519b9974",
    "prId" : 17548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "not clear why this list doesn't include Kilo, Kibi, Mega, Mebi, etc.  I presume it's because these are only the decimal-less-than-0 values - comment would help\n",
        "createdAt" : "2015-12-02T01:14:05Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d6d13d0d-f03e-4525-9ff9-68978426a2e8",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Correct about base-10 (will update Scale comment). As for larger values, it's an arbitrary decision but asking for smaller values seemed like the common case. I'll add up to `Exa` since thats what we have in suffixes.\n",
        "createdAt" : "2015-12-02T01:24:17Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "d10c32ba-bc6e-4e23-a721-3cbf898bcfc9",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I was trying to understand the reason these were defined from the comments,\nand couldn't.  Once you go > 0, you have to address why you have base-10s\nbut not base-2 suffixes\n\nOn Tue, Dec 1, 2015 at 5:24 PM, Tim St. Clair notifications@github.com\nwrote:\n\n> In pkg/api/resource/quantity.go\n> https://github.com/kubernetes/kubernetes/pull/17548#discussion_r46366531\n> :\n> \n> > @@ -112,10 +112,19 @@ func MustParse(str string) Quantity {\n> >     return *q\n> >  }\n> > \n> > +// Scale is used for getting and setting the scaled value.\n> > +type Scale int\n> > +\n> > +const (\n> > -   Nano  Scale = -9\n> > -   Micro Scale = -6\n> > -   Milli Scale = -3\n> \n> Correct about base-10 (will update Scale comment). As for larger values,\n> it's an arbitrary decision but asking for smaller values seemed like the\n> common case. I'll add up to Exa since thats what we have in suffixes.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17548/files#r46366531.\n",
        "createdAt" : "2015-12-02T01:27:48Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b9a7e295-f853-417c-a1c0-c13bea4f0478",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I think the comment addressed this, but really the only reason is it would complicate the implementation and there doesn't seem to be a big enough usecase for it.\n",
        "createdAt" : "2015-12-02T01:38:59Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "d43767a3-2c05-4b89-925e-677db762ac0d",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "< 1 binary suffixes are _amazingly_ confusing. No one will understand them or use them right. Please keep this list only 10^3n suffixes. (The binary suffixes are already too cute: .4GiB asks for a nibble and change, which no one would expect.)\n",
        "createdAt" : "2015-12-02T05:15:50Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b8e83508-e6c9-4208-ae80-9296139fd5e9",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The comment could read: \"Only power-of-10 Scales exist, to keep the number of math errors in code that uses this low.\"\n",
        "createdAt" : "2015-12-02T05:18:24Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1740f061-db12-4f2e-bd1c-d9a8c79608b5",
        "parentId" : "c70ec862-8e56-43e3-a8ac-6829ece2ad4a",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Done.\n",
        "createdAt" : "2015-12-02T22:54:03Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e90886e6599575a08e3ab0b7b254c877b65ac7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +126,130 @@\tNano  Scale = -9\n\tMicro Scale = -6\n\tMilli Scale = -3\n\tKilo  Scale = 3\n\tMega  Scale = 6"
  },
  {
    "id" : "ba11c44f-d23f-4ccd-b3a2-b0290d8fd8b6",
    "prId" : 17548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "468a7b73-2bf6-4a1c-be4b-c45ac3b1432c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Value() with a larger scale first?\n",
        "createdAt" : "2015-12-02T05:19:05Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "567fe601-e173-4316-8295-156f1544ce44",
        "parentId" : "468a7b73-2bf6-4a1c-be4b-c45ac3b1432c",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Value() is the unscaled (a.k.a. `Scale = 0`) quantity. I think it will only overflow for quantities > 9 exa-units. Is that worth documenting there?\n",
        "createdAt" : "2015-12-02T22:51:32Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e90886e6599575a08e3ab0b7b254c877b65ac7",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +426,430 @@\n// ScaledValue returns the value of ceil(q * 10^scale); this could overflow an int64.\n// To detect overflow, call Value() first and verify the expected magnitude.\nfunc (q *Quantity) ScaledValue(scale Scale) int64 {\n\tif q.Amount == nil {"
  },
  {
    "id" : "162107ec-0d09-4a26-bdcc-85ea54b00b58",
    "prId" : 17548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67a57ac7-86b7-4861-bdeb-6430abfe7cf3",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This seems like it needs a gofmt.\n",
        "createdAt" : "2015-12-09T22:36:51Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "a946b6ed-697d-4033-826a-e7f175f0e4eb",
        "parentId" : "67a57ac7-86b7-4861-bdeb-6430abfe7cf3",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Which part of this is troubling you? `gofmt` thinks it's ok.\n",
        "createdAt" : "2015-12-09T22:50:28Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "bab5ea08-0a09-4369-b864-b986df7fd9b6",
        "parentId" : "67a57ac7-86b7-4861-bdeb-6430abfe7cf3",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "shouldn't there be an indent on line 333 since it is in an if block?\n",
        "createdAt" : "2015-12-19T09:38:43Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "408c2065-77a8-4f76-9df7-b93120f5c9e5",
        "parentId" : "67a57ac7-86b7-4861-bdeb-6430abfe7cf3",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "This is funny, I think this might have been a github CSS bug. Does it still look like it needs the indent to you? I saw the problem on my macbook, but now it looks correct to me (and is correct in my local copy).\n",
        "createdAt" : "2016-01-04T19:46:06Z",
        "updatedAt" : "2016-01-04T22:14:36Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e90886e6599575a08e3ab0b7b254c877b65ac7",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +331,335 @@func (q *Quantity) Cmp(y Quantity) int {\n\tif q.Amount == nil {\n\t\tif y.Amount == nil {\n\t\t\treturn 0\n\t\t}"
  },
  {
    "id" : "c139870c-ae26-420c-ae8d-2044aaeac9bf",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "022bb46a-3f87-42f7-8817-b60c2d64f024",
        "parentId" : null,
        "authorId" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "body" : "Suggestion: say something about the fact that we want to accept (\"parse\") numbers of this form to make things easier for people, and re-emit them again later (\"serialization\").  Without that clue, this comes across as diving into details without a motivation.\n",
        "createdAt" : "2014-09-09T16:01:19Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +32,36 @@// in addition to String() and Int64() accessors.\n//\n// The serialization format is:\n//\n// <quantity>        ::= <signedNumber><suffix>"
  },
  {
    "id" : "11d34b2f-50ae-43b2-9c8f-cbd9e8bb4d71",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1fb9e94-b627-42b4-8110-a4feaca807b6",
        "parentId" : null,
        "authorId" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "body" : "comment seems misplaced.  \n[later: please say that the number needs (temporarily) to be an absolute value for what follows.]\n",
        "createdAt" : "2015-01-05T21:12:46Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +180,184 @@\t}\n\n\t// Cap at min/max bounds.\n\tsign := amount.Sign()\n\tif sign == -1 {"
  },
  {
    "id" : "ba4dcd10-ee6c-431f-95b8-1b3f22b72b4e",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e5a7b62-01a4-4bb8-a9c3-638b5fb26628",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "What are m and k? I'm familiar with K=10^3, M=10^6, G=10^9 etc., and m=10^-3 but I have a feeling this means something else the way you're using it. And if 0.1m means 0.1x10^-3 why wouldn't you round it to zero?\n",
        "createdAt" : "2015-01-06T06:19:15Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "4c890989-e577-49fd-a9fb-aab5b2a0d6ef",
        "parentId" : "6e5a7b62-01a4-4bb8-a9c3-638b5fb26628",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "SI suffix for thousand is lowercase k, but for 1024 is Ki. As the comment says a few lines up, I didn't make up this system.\n\nAs for rounding; it can be changed. I made the current choice under the assumption that you don't want your numbers rounded down to zero. It is easy to change this to do \"ordinary\" rounding if that's what people find more natural.\n",
        "createdAt" : "2015-01-06T06:38:11Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a00c6487-cbfc-4c13-864b-6b781824c6b9",
        "parentId" : "6e5a7b62-01a4-4bb8-a9c3-638b5fb26628",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "and yes, lower m = 10^-3.\n",
        "createdAt" : "2015-01-06T06:40:20Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5002c831-11a9-4f6d-9b12-aa0298202efd",
        "parentId" : "6e5a7b62-01a4-4bb8-a9c3-638b5fb26628",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "IMHO rounding to zero would be more natural (for programmers at least :-)\n",
        "createdAt" : "2015-01-06T06:52:30Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "29b95fa2-5a9d-45bc-a5ce-0fb2e68b135c",
        "parentId" : "6e5a7b62-01a4-4bb8-a9c3-638b5fb26628",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'd like a word on the role of zero. Does it signify a \"special\" value, or is it just disallowed to ever spec literal 0 or \"0\"?\n",
        "createdAt" : "2015-01-06T22:15:39Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +51,55 @@// a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal\n// places. Numbers larger or more precise will be capped or rounded up.\n// (E.g.: 0.1m will rounded up to 1m.)\n// This may be extended in the future if we require larger or smaller quantities.\n//"
  },
  {
    "id" : "f54f83bb-e866-48ac-862d-4d8eac16136c",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "The format stuff is a little confusing. To help understanding, could you add some example use cases here, for example what format would I typically end up with for\n- cores that can be requested as a whole plus fractional part\n- disk capacity (which IIRC is usually measured in XB)\n- memory capacity (which IIRC is usually measured in XiB)\n  and which constructors would I use to get there.\n",
        "createdAt" : "2015-01-06T06:33:29Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "7f144037-e5e1-47e2-bc74-382a483dfd10",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I will change the names on lines 44 & 45 to match these names.\n",
        "createdAt" : "2015-01-06T06:43:17Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "83c6e68b-8fb7-470a-a4a7-c6baac7ac93a",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I don't think changing the names is sufficient; I think it would be helpful to give some concrete examples of which constructor you should use for each of the above quantities, and what Format would that end up getting encoded as. As-is this class is sufficiently abstracted from actual cluster management quantities that I think people may find it confusing. Examples can bridge the gap.\n",
        "createdAt" : "2015-01-06T06:54:10Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "72c87248-2f9d-4ed8-b42d-1b8b61d21760",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I clarified comments a bit more and added an examples_test file (which is the goish way of providing examples-- it'll show up in godoc as actual code examples). I also moved a helper function here from my other PR.\n\nBetter?\n",
        "createdAt" : "2015-01-06T18:59:01Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "de2927c0-1cbf-4fd3-b1ba-943f3040d7c3",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "body" : "If permitted, it would be much nicer to have end-of-line comments that provide just a hint about what these mean.  For example:\n\n  DecimalExponent = Format(\"DecimalExponent\")  // e.g., 12e6\n",
        "createdAt" : "2015-01-06T19:49:13Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "0b810b86-bf29-41c9-8254-136b101781dd",
        "tags" : [
        ]
      },
      {
        "id" : "93b4a8fd-0042-427f-b02a-d9414dbee190",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Done.\n",
        "createdAt" : "2015-01-06T20:11:34Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c5380d54-d63e-47cb-9065-30e6744f0280",
        "parentId" : "ea79161f-cfe9-42f8-8058-5020b6c76d73",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Thanks, the examples are helpful.\n",
        "createdAt" : "2015-01-06T20:36:49Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@}\n\n// Format lists the three possible formattings of a quantity.\ntype Format string\n"
  },
  {
    "id" : "29cde364-98da-44bf-bce6-291eaa65cdb4",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d8e6d7b-b14f-495b-a631-52d72450c132",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I feel this BNF can be clearer\n\n```\n<serialized>      ::= <sign><value> | <value>\n<sign>            ::= \"+\" | \"-\"\n<value>           ::= <number><exponent> | <number>\n<number>          ::= <digits> | <digits>.<digits>\n<digits>          ::= <digit> | <digit><digits>\n<digit>           ::= 0 | 1 | ... | 9\n<exponent>        ::= <binarySuffix> | <decimalExponent> | <decimalSuffix>\n<binarySuffix>    ::= i | Ki | Mi | Gi | Ti | Pi | Ei\n<decimalSuffix>   ::= m | k | M | G | T | P | E\n<decimalExponent> ::= \"e\" <digits> | \"E\" <digits>\n```\n\nor, if you buy my other argument about E exponents being a way to write a number :\n\n```\n<serialized>      ::= <sign><value> | <value>\n<sign>            ::= \"+\" | \"-\"\n<value>           ::= <number><suffix> | <number>\n<number>          ::= <int> | <float>\n<int>             ::= <digits> | <digits><exponent>\n<float>           ::= <bareFloat> | <bareFloat><exponent>\n<bareFloat>       ::= <digits>.<digits> | .<digits> | <digits>.\n<digits>          ::= <digit> | <digit><digits>\n<digit>           ::= 0 | 1 | ... | 9\n<suffix>          ::= <binarySuffix> | <decimalSuffix>\n<binarySuffix>    ::= i | Ki | Mi | Gi | Ti | Pi | Ei\n<decimalSuffix>   ::= m | k | M | G | T | P | E\n<exponent>        ::= \"e\" <digits> | \"E\" <digits>\n```\n",
        "createdAt" : "2015-01-06T22:11:43Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@// in addition to String() and Int64() accessors.\n//\n// The serialization format is:\n//\n// <quantity>        ::= <signedNumber><suffix>"
  },
  {
    "id" : "66c0aeb0-96da-4c0a-b377-424268d9b055",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b1c8d56-cec1-4113-87e1-2bad3caeda0b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment this 3?  When I look at the regex I only see two sets of parens\n",
        "createdAt" : "2015-01-06T22:37:43Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +156,160 @@\tparts := splitRE.FindStringSubmatch(strings.TrimSpace(str))\n\t// regexp returns are entire match, followed by an entry for each () section.\n\tif len(parts) != 3 {\n\t\treturn nil, ErrFormatWrong\n\t}"
  },
  {
    "id" : "debdd5cc-5419-4d9f-9194-1fd117377e7c",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d596d2b9-d18c-4484-9e09-bea8c8e99b95",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm having a hard time justifying this roundup wrt the earlier statement of not losing information...\n",
        "createdAt" : "2015-01-06T23:00:41Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +232,236 @@//   -1 and +1, it will be emitted as if q.Format were DecimalSI.\n// * Otherwise, if q.Format is set to BinarySI, frational parts of q.Amount will be\n//   rounded up. (1.1i becomes 2i.)\nfunc (q *Quantity) Canonicalize() (string, suffix) {\n\tif q.Amount == nil {"
  },
  {
    "id" : "e56e113b-ad87-43ee-911a-4d3f4a5757df",
    "prId" : 1185,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "841450d4-e2e0-4fcf-8a7b-adbbe1f209d1",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm concerned that the distinction of Milli in the API will make generic resource-handling code harder - it has to know the resource dimension before extracting an int value.   For example, I can not do something like:\n\n```\navailable := map[string]Quantity // from kubelet\nrequest := map[string]Quantity // from API call\nfor k := range request {\n    if available[k].LessThan(request[k]) {\n        return fmt.Errorf(\"Damn, not enough %s (have %s, want %s)\", k, available[k].String(), request[k].String())\n    }\n}\n```\n",
        "createdAt" : "2015-01-06T23:12:21Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "52bf186f-f4b2-438a-9a5a-983cd70c7fd0",
        "parentId" : "841450d4-e2e0-4fcf-8a7b-adbbe1f209d1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You shouldn't use Value() or MilliValue() for the snippet of code you just wrote. Below does what you want, modulo we should add a never-return-nil shortcut for q.Amount:\n\n``` go\navailable := map[string]Quantity // from kubelet\nrequest := map[string]Quantity // from API call\nfor k := range request {\n    if available[k].Amount.Cmp(request[k].Amount) < 0 {\n        return fmt.Errorf(\"Damn, not enough %s (have %s, want %s)\", k, available[k], request[k])\n    }\n}\n```\n",
        "createdAt" : "2015-01-06T23:16:48Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1c8cb71e-0b01-4393-a93e-761a2f95a4db",
        "parentId" : "841450d4-e2e0-4fcf-8a7b-adbbe1f209d1",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "OK, point withdrawn\n",
        "createdAt" : "2015-01-06T23:34:12Z",
        "updatedAt" : "2015-01-07T00:13:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd58e49c788ed47ca59c7ac6e4945cd20bad666f",
    "line" : 345,
    "diffHunk" : "@@ -1,1 +343,347 @@// MilliValue returns the value of q * 1000; this could overflow an int64;\n// if that's a concern, call Value() first to verify the number is small enough.\nfunc (q *Quantity) MilliValue() int64 {\n\tif q.Amount == nil {\n\t\treturn 0"
  }
]