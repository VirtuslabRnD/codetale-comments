[
  {
    "id" : "ce40601b-ba28-4583-a79d-0e2a1896e76b",
    "prId" : 28513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b1165a1-23e5-47cb-a9a9-5c2cb314446a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "indentation\n",
        "createdAt" : "2016-07-06T05:10:00Z",
        "updatedAt" : "2016-07-06T15:29:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "da2b52ce-3753-4ec1-b57e-f76e8f54c08a",
        "parentId" : "0b1165a1-23e5-47cb-a9a9-5c2cb314446a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Weird, looks correct to me?\n",
        "createdAt" : "2016-07-06T15:06:07Z",
        "updatedAt" : "2016-07-06T15:29:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ef59d2cf-6ceb-4dc8-915d-59524ac0c3ec",
        "parentId" : "0b1165a1-23e5-47cb-a9a9-5c2cb314446a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Again? We used to have this issue in the past...\n",
        "createdAt" : "2016-07-06T15:08:30Z",
        "updatedAt" : "2016-07-06T15:29:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "871bee8991d00ed689d0e3828a330b9cdaadf541",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +49,53 @@\t\t\treturn m, nil\n\t\t}\n\t\treturn nil, errNotList\n\tcase unversioned.ListMetaAccessor:\n\t\tif m := t.GetListMeta(); m != nil {"
  },
  {
    "id" : "a9ce8cb3-dde3-4fe1-a1f7-e4c9836a003a",
    "prId" : 28513,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6e8e67f-2337-4859-b792-73bf8e56e848",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why are you changing these ones?\n",
        "createdAt" : "2016-07-06T05:13:13Z",
        "updatedAt" : "2016-07-06T15:29:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e9f4ac83-b109-440c-8314-e7f8f91e1569",
        "parentId" : "b6e8e67f-2337-4859-b792-73bf8e56e848",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "All types that are Lists can have SelfLinks, but don't implement Accessor.  So the heart of this change is ensuring that we try to find the minimal expected interface (ListMeta) that can set / retrieve selfLinks.\n",
        "createdAt" : "2016-07-06T05:24:45Z",
        "updatedAt" : "2016-07-06T15:29:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "75bca74e-dc30-48b0-b40c-a2855ff60650",
        "parentId" : "b6e8e67f-2337-4859-b792-73bf8e56e848",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK, sure. I was probably too sleepy while reading it :)\n",
        "createdAt" : "2016-07-06T05:46:36Z",
        "updatedAt" : "2016-07-06T15:29:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "871bee8991d00ed689d0e3828a330b9cdaadf541",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +246,250 @@\nfunc (resourceAccessor) SelfLink(obj runtime.Object) (string, error) {\n\taccessor, err := ListAccessor(obj)\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "7cf39221-dcee-4a2c-a903-e75827791c8d",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbc4ca0e-70ad-4713-8b09-41e291494e70",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp this is still WIP, but would be great if you can take a look if this is the way we want to go.\n",
        "createdAt" : "2016-04-28T17:48:07Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6c7e53e9-47dc-4ebc-ae90-ead4fd8db08b",
        "parentId" : "dbc4ca0e-70ad-4713-8b09-41e291494e70",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I left some comments on one of the commits.\n",
        "createdAt" : "2016-04-29T23:31:37Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +600,604 @@\t\treturn err\n\t}\n\townerReferences := v.FieldByName(\"OwnerReferences\")\n\tif !ownerReferences.IsValid() {\n\t\treturn fmt.Errorf(\"struct %#v lacks OwnerReferences type\", v)"
  },
  {
    "id" : "b3d1c0d5-6bd3-4487-b262-7c50c55108a2",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02f6e0bb-c8ea-4e4f-97be-fc00fd860775",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "ListAccessor to meta.List is what Accessor to meta.Object.\n\nThe UnstructuredList doesn't have a `TypeMeta` field, so it cannot be interpreted by Accessor. However, it implements the List interface, so it could be interpreted by ListAccessor.\n",
        "createdAt" : "2016-05-04T05:46:29Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +30,34 @@)\n\nfunc ListAccessor(obj interface{}) (List, error) {\n\tif listMetaAccessor, ok := obj.(ListMetaAccessor); ok {\n\t\tif om := listMetaAccessor.GetListMeta(); om != nil {"
  },
  {
    "id" : "8fc17700-4105-4e64-b202-4f5826e56299",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aa7934a-1893-4617-94a3-fe53fcd33aae",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Minor nit: It would look slightly better if `extractFromOwnerReference` just returned a `metatypes.OwnerReference` to be appended instead of taking an output parameter. \n",
        "createdAt" : "2016-05-05T22:40:04Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "46ab0793-ecb2-46ad-a761-81c24df98a24",
        "parentId" : "6aa7934a-1893-4617-94a3-fe53fcd33aae",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The current way saves one copy so I'll keep it as it is.\n",
        "createdAt" : "2016-05-05T23:35:16Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "990fabab-5196-4d1c-b5f7-39de41eaa2db",
        "parentId" : "6aa7934a-1893-4617-94a3-fe53fcd33aae",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If you measured it, I'd be willing to bet the cost of the copy is lost in the noise. But I don't have a terribly strong preference either way.\n",
        "createdAt" : "2016-05-06T22:54:46Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +539,543 @@\tret = make([]metatypes.OwnerReference, s.Len(), s.Len()+1)\n\tfor i := 0; i < s.Len(); i++ {\n\t\tif err := extractFromOwnerReference(s.Index(i), &ret[i]); err != nil {\n\t\t\tglog.Errorf(\"extractFromOwnerReference failed: %v\", err)\n\t\t\treturn ret"
  },
  {
    "id" : "9aaab904-2990-4b6f-be29-c378475ddd18",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88480c1c-0c0a-4dae-943a-9a7e7b970b3e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess I won't complain but this seems like the sort of thing you only do after measuring.\n",
        "createdAt" : "2016-05-06T22:53:07Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +536,540 @@\t}\n\ts = s.Elem()\n\t// Set the capacity to one element greater to avoid copy if the caller later append an element.\n\tret = make([]metatypes.OwnerReference, s.Len(), s.Len()+1)\n\tfor i := 0; i < s.Len(); i++ {"
  },
  {
    "id" : "2c42ff2b-22e5-4fe3-9b06-a8b680ea69f1",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86c729d6-b98b-4afb-8df9-634547dbf1a9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Check for this first, since the object could support this and the list meta accessor?\n",
        "createdAt" : "2016-05-10T21:46:15Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : null,
    "diffHunk" : "@@ -1,1 +37,41 @@\t}\n\t// we may get passed an object that is directly portable to List\n\tif list, ok := obj.(List); ok {\n\t\treturn list, nil\n\t}"
  },
  {
    "id" : "0a25c565-20f5-414b-a2ec-1249d4789980",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f8f313c-85e0-4799-9334-7c783af817d3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Check first?\n",
        "createdAt" : "2016-05-10T21:46:36Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2397caf3-e294-427e-ad5d-1e156a762aac",
        "parentId" : "9f8f313c-85e0-4799-9334-7c783af817d3",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I replied to you in the old commits but I it's lost after rebase. \nAnyway, In case both ObjectAccessor and Object are implemented, I think return objectMetaAccessor.GetObjectMeta is more favorable, because that only returns the ObjectMeta, rather than the entire object.\n",
        "createdAt" : "2016-05-10T21:58:03Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2e0f2dce-05e3-480e-8ae4-fb919c2fa646",
        "parentId" : "9f8f313c-85e0-4799-9334-7c783af817d3",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah, sorry, didn't realize this was preexisting code :)\n",
        "createdAt" : "2016-05-11T17:33:18Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +75,79 @@\t}\n\t// we may get passed an object that is directly portable to Object\n\tif object, ok := obj.(Object); ok {\n\t\treturn object, nil\n\t}"
  },
  {
    "id" : "3902ba10-f91e-4191-af0e-8ea5d2be8841",
    "prId" : 23472,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbac8e97-efb4-4414-ab45-cebdd0ed7000",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Code paths that use this are slow, I seem to recall @smarterclayton going to some effort to prevent usage of this?\n",
        "createdAt" : "2016-03-25T17:28:36Z",
        "updatedAt" : "2016-03-31T15:52:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2a566400-8e6d-43a5-885f-491a904540b5",
        "parentId" : "dbac8e97-efb4-4414-ab45-cebdd0ed7000",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm not explicitly calling genericAccessor anywhere. This is a fallback in case of non-internal object (for internal objects we will go to a different path).\nSo since in huge majority of cases it will be an internal object, we will not get here.\nSo this is WAI in my opinion (even though I'm changing it here).\n",
        "createdAt" : "2016-03-25T18:26:44Z",
        "updatedAt" : "2016-03-31T15:52:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "322e4503-a6e4-457b-aae3-a52a3b9c1c0e",
        "parentId" : "dbac8e97-efb4-4414-ab45-cebdd0ed7000",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We can implement the interface on external objects too if need be.  I'm wondering if we need a way to verify who is using external objects and where (something written to glog.v(5) whenever someone uses a metadata accessor on an external type)?\n",
        "createdAt" : "2016-03-29T16:58:39Z",
        "updatedAt" : "2016-03-31T15:52:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8b477634-5bce-4310-8d78-953d48c6bf44",
        "parentId" : "dbac8e97-efb4-4414-ab45-cebdd0ed7000",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I added a log in Accessor() function in pkg/api/meta/meta.go\n\nThis is the place where we are creating genericAccessor, so I think this is the best place for it.\n",
        "createdAt" : "2016-03-31T15:54:02Z",
        "updatedAt" : "2016-03-31T15:54:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2699be2e7ecfaf448427122cf5c2f0ef8a352642",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +326,330 @@// struct and implements the Accessor interface.\ntype genericAccessor struct {\n\tnamespace         *string\n\tname              *string\n\tgenerateName      *string"
  },
  {
    "id" : "91a96513-8a38-4e89-babb-5e94a7fac07c",
    "prId" : 18473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f533e88e-9ae8-4897-8e43-03cb0d423549",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: Do we ever get to this branch? You would have to pass something that implements all those Object methods here, which doesn't seem to be a real usecase..\n",
        "createdAt" : "2015-12-11T07:21:18Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "495548b6-f191-4edb-bb38-2b401fc596bc",
        "parentId" : "f533e88e-9ae8-4897-8e43-03cb0d423549",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> nit: Do we ever get to this branch? You would have to pass something that implements all those Object methods here, which doesn't seem to be a real usecase..\n>  Add a line note\n\nTest code maybe?\n\nThe lines below the diff seem unusual though.  Its for handling cases where I've explicitly (not anonymously) include `TypeMeta` and `ObjectMeta`?\n",
        "createdAt" : "2015-12-11T13:07:48Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "90d9fbed-7fc3-44c2-8a29-a8161de064d2",
        "parentId" : "f533e88e-9ae8-4897-8e43-03cb0d423549",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just wanted to leave this code here since it costs us nothing.\n\nOn Fri, Dec 11, 2015 at 2:21 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/api/meta/meta.go\n> https://github.com/kubernetes/kubernetes/pull/18473#discussion_r47327697\n> :\n> \n> > @@ -29,8 +30,15 @@ import (\n> >  // obj must be a pointer to an API type. An error is returned if the minimum\n> >  // required fields are missing. Fields that are not required return the default\n> >  // value and are a no-op if set.\n> > -// TODO: add a fast path for *TypeMeta and *ObjectMeta for internal objects\n> > -func Accessor(obj interface{}) (Interface, error) {\n> > +func Accessor(obj interface{}) (Object, error) {\n> > -   if oi, ok := obj.(ObjectMetaAccessor); ok {\n> > -       if om := oi.GetObjectMeta(); om != nil {\n> > -           return om, nil\n> > -       }\n> > -   }\n> > -   if oi, ok := obj.(Object); ok {\n> \n> nit: Do we ever get to this branch? You would have to pass something that\n> implements all those Object methods here, which doesn't seem to be a real\n> usecase..\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18473/files#r47327697.\n",
        "createdAt" : "2015-12-11T19:40:27Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f203a28f1d17b9371673ff147aa7e8f34f093f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +38,42 @@\t}\n\t// we may get passed an object that is directly portable to Object\n\tif oi, ok := obj.(Object); ok {\n\t\treturn oi, nil\n\t}"
  },
  {
    "id" : "473213cb-1d65-466e-8644-bcbb73565363",
    "prId" : 18473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3114a497-5a97-4345-a0f2-ac912a1aafe3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Missed this before.  Why the signature change?  Because `Object` now has direct access to these methods?  If so, I'm fine with it, but the name is odd.\n",
        "createdAt" : "2015-12-11T22:27:57Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fa7dd65e-4b5e-41a5-af36-774b8e5fc726",
        "parentId" : "3114a497-5a97-4345-a0f2-ac912a1aafe3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Missed this before. Why the signature change? Because Object now has direct access to these methods? If so, I'm fine with it, but the name is odd.\n\nOh, different package.  Ok.\n",
        "createdAt" : "2015-12-11T22:29:10Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f203a28f1d17b9371673ff147aa7e8f34f093f5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +31,35 @@// required fields are missing. Fields that are not required return the default\n// value and are a no-op if set.\nfunc Accessor(obj interface{}) (Object, error) {\n\tif oi, ok := obj.(ObjectMetaAccessor); ok {\n\t\tif om := oi.GetObjectMeta(); om != nil {"
  },
  {
    "id" : "5c37f81e-c3a8-419a-a239-35c810e8c260",
    "prId" : 2660,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db48b9b3-52fa-4ff9-8c9a-e1370bd9f597",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think this is necessary - real objects map have a nil map, and go makes it easy to deal with.\n",
        "createdAt" : "2014-11-29T20:30:34Z",
        "updatedAt" : "2014-12-01T15:36:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b5cfd067-b24e-40db-9bc1-d7970ad619bd",
        "parentId" : "db48b9b3-52fa-4ff9-8c9a-e1370bd9f597",
        "authorId" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "body" : "Note that we're storing pointers to the real map, and this function returns the dereferenced pointer. So I need to handle the `nil` ptr.\n\nDo you want me to return `nil` instead of `map[string]string{}`, right?\n",
        "createdAt" : "2014-11-29T21:40:36Z",
        "updatedAt" : "2014-12-01T15:36:57Z",
        "lastEditedBy" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "tags" : [
        ]
      },
      {
        "id" : "bd7c0f35-0c51-4b40-896e-a55de1623140",
        "parentId" : "db48b9b3-52fa-4ff9-8c9a-e1370bd9f597",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes\n\n> On Nov 29, 2014, at 4:40 PM, Vojtech Vitek notifications@github.com wrote:\n> \n> In pkg/api/meta/meta.go:\n> \n> > @@ -288,6 +324,28 @@ func (a genericAccessor) SetSelfLink(selfLink string) {\n> >     *a.selfLink = selfLink\n> >  }\n> > \n> > +func (a genericAccessor) Labels() map[string]string {\n> > -   if a.labels == nil {\n> >   Note that we're storing pointers to the real map, and this function returns the dereferenced pointer. So I need to handle the nil ptr.\n> \n> Do you want me to return nil instead of map[string]string{}, right?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-29T23:06:39Z",
        "updatedAt" : "2014-12-01T15:36:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "60d7d169-5874-4ff5-b833-bcdd0287391c",
        "parentId" : "db48b9b3-52fa-4ff9-8c9a-e1370bd9f597",
        "authorId" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "body" : "Addressed. Added TCs for both empty map and nil map.\n",
        "createdAt" : "2014-11-30T03:03:25Z",
        "updatedAt" : "2014-12-01T15:36:57Z",
        "lastEditedBy" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f5d51a5f6975a575d0cd5157c114878deba2ed",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +326,330 @@\nfunc (a genericAccessor) Labels() map[string]string {\n\tif a.labels == nil {\n\t\treturn nil\n\t}"
  },
  {
    "id" : "e3ce7dfc-a56d-4cbe-83dd-55637c342d7f",
    "prId" : 1969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adf24317-70df-4f97-9218-ab757f640313",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What do you think about killing ResourceVersioner & SelfLinker and making everyone use Accessor?\n",
        "createdAt" : "2014-10-23T20:14:50Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5d414d1d-6daf-4be0-b517-366be7c5179f",
        "parentId" : "adf24317-70df-4f97-9218-ab757f640313",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe in a different change.\n",
        "createdAt" : "2014-10-23T20:16:30Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "63f0c1e5-baec-4908-b424-2c1e9d265fad",
        "parentId" : "adf24317-70df-4f97-9218-ab757f640313",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I like it - I'll queue up an issue for it.  Once we need to access annotations generically that becomes important as well.\n",
        "createdAt" : "2014-10-23T21:48:12Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3df1c2f29dee2f3c06e9461807ae98e255f673e0",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@}\n\n// NewResourceVersioner returns a ResourceVersioner that can set or\n// retrieve ResourceVersion on objects derived from TypeMeta.\nfunc NewResourceVersioner() runtime.ResourceVersioner {"
  },
  {
    "id" : "3cef967e-d57c-4f96-b3c6-7c6a1f32cf90",
    "prId" : 1969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "695b1be5-796c-4a89-b723-981ee5586d98",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What do you think about making Accessor have TypeMeta, ObjectMeta, and ListMeta fields which are possibly nil? Maybe in a different change.\n",
        "createdAt" : "2014-10-23T20:16:18Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "da193fe6-1093-4ec7-8b81-5e773b789ae7",
        "parentId" : "695b1be5-796c-4a89-b723-981ee5586d98",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "For external types would we copy/codec.Convert the external to internal?  Agree pointing to the internal object vs using the reflection pointers is both faster and simpler.\n",
        "createdAt" : "2014-10-23T21:49:48Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "747931fa-9a42-4271-b466-6ed94079d3f2",
        "parentId" : "695b1be5-796c-4a89-b723-981ee5586d98",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Different change would be preferred.\n",
        "createdAt" : "2014-10-23T21:52:39Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3df1c2f29dee2f3c06e9461807ae98e255f673e0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +66,70 @@\t}\n\n\tobjectMeta := v.FieldByName(\"ObjectMeta\")\n\tif objectMeta.IsValid() {\n\t\t// look for the ObjectMeta fields"
  }
]