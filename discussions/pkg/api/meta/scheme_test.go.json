[
  {
    "id" : "74a8c84a-6ab8-4753-9e5f-97814d2456ce",
    "prId" : 29601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ccb445b-b901-4584-bd83-f8bda1322f59",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I put this function in the test file instead of help.go because no production code calls it.\n",
        "createdAt" : "2016-07-29T06:04:04Z",
        "updatedAt" : "2016-08-02T22:47:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "81858d755ec1b468f807b90458ff23ae444cf3da",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@var listTypeExceptions = sets.NewString(\"APIGroupList\", \"APIResourceList\")\n\nfunc validateListType(target reflect.Type) error {\n\t// exceptions\n\tif listTypeExceptions.Has(target.Name()) {"
  },
  {
    "id" : "561d2e3e-3989-47a6-95f7-a2b0fc41479b",
    "prId" : 29601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb76d52b-2102-4e46-a15a-ba507dcd6ee9",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This loops over all external types so I didn't put this test in the serialization_test.go, which only iterates over all the internal types.\n",
        "createdAt" : "2016-07-29T06:06:44Z",
        "updatedAt" : "2016-08-02T22:47:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8c8762be-1c7c-4d7a-8d43-e9b6cd64507b",
        "parentId" : "cb76d52b-2102-4e46-a15a-ba507dcd6ee9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's fine - eventually serialization test needs to get hoisted out of pkg/api anyway.\n",
        "createdAt" : "2016-08-02T21:55:33Z",
        "updatedAt" : "2016-08-02T22:47:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "81858d755ec1b468f807b90458ff23ae444cf3da",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@func TestListTypes(t *testing.T) {\n\tfor groupKey, group := range testapi.Groups {\n\t\tfor kind, target := range group.ExternalTypes() {\n\t\t\tt.Logf(\"working on %v in %v\", kind, groupKey)\n\t\t\terr := validateListType(target)"
  },
  {
    "id" : "33594c11-1b26-45ec-bd71-b94d85580e43",
    "prId" : 29601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "999dc9fd-beee-4da1-9e2b-762011350383",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is probably not an authoritative source, but it's better than nothing and OK for now.\n",
        "createdAt" : "2016-08-02T21:50:35Z",
        "updatedAt" : "2016-08-02T22:47:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "81858d755ec1b468f807b90458ff23ae444cf3da",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@// list types.\nfunc TestListTypes(t *testing.T) {\n\tfor groupKey, group := range testapi.Groups {\n\t\tfor kind, target := range group.ExternalTypes() {\n\t\t\tt.Logf(\"working on %v in %v\", kind, groupKey)"
  },
  {
    "id" : "0d27da9f-859b-49dd-a1c7-93b7c3a0a51c",
    "prId" : 29601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7e5bc77-6efc-44e4-a0c7-d8338326abb8",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp I've merged the loops as you suggested. PTAL. Thanks!\n",
        "createdAt" : "2016-08-02T23:00:54Z",
        "updatedAt" : "2016-08-02T23:00:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "81858d755ec1b468f807b90458ff23ae444cf3da",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\thasMetadata := false\n\thasItems := false\n\tfor i := 0; i < target.NumField(); i++ {\n\t\tfield := target.Field(i)\n\t\ttag := field.Tag.Get(\"json\")"
  }
]