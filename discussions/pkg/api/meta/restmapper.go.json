[
  {
    "id" : "657a7c8d-b20d-478c-b4b0-fab03191d723",
    "prId" : 37966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37966#pullrequestreview-11242710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c69ec022-6e25-4b85-bd20-b1b1b2229fb2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "comment that this was the existing behavior.  This reads very weird, but I agree that I think this is what it used to.",
        "createdAt" : "2016-12-02T21:22:16Z",
        "updatedAt" : "2016-12-05T19:22:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f8e7745171a9585a24142f4cd33faa1a7f25f07",
    "line" : null,
    "diffHunk" : "@@ -1,1 +480,484 @@\t// take the first match and return to the caller\n\t// as this was the existing behavior.\n\treturn mappings[0], nil\n}\n"
  },
  {
    "id" : "612ba9aa-ce89-4e6c-873c-31b8291b6153",
    "prId" : 28512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96a4312c-aa6e-4251-9529-18d9b9ae005a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Seems like `RESTMapping` should call this function to get the list of possibles and then fish its result from here to avoid duplication.\n",
        "createdAt" : "2016-07-06T12:38:18Z",
        "updatedAt" : "2016-07-14T01:19:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "078387c9-b0a8-4dd5-985c-ea68965cee88",
        "parentId" : "96a4312c-aa6e-4251-9529-18d9b9ae005a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'd rather not destabilize this method right now.  I agree it could be\nmore tightly factored, but on the other hand it's been working for a\nvery long time.\n",
        "createdAt" : "2016-07-06T13:54:12Z",
        "updatedAt" : "2016-07-14T01:19:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "465a5055-4ce0-4ef1-a66e-9e1488ebf067",
        "parentId" : "96a4312c-aa6e-4251-9529-18d9b9ae005a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'd rather not destabilize this method right now.  I agree it could be\n> more tightly factored, but on the other hand it's been working for a\n> very long time.\n\n:(  Issue.\n",
        "createdAt" : "2016-07-06T14:03:31Z",
        "updatedAt" : "2016-07-14T01:19:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c077bac34153c89c42517fdff1f389b3b5effd31",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +507,511 @@// RESTMappings returns the RESTMappings for the provided group kind in a rough internal preferred order. If no\n// kind is found it will return a NoResourceMatchError.\nfunc (m *DefaultRESTMapper) RESTMappings(gk unversioned.GroupKind) ([]*RESTMapping, error) {\n\t// Use the default preferred versions\n\tvar mappings []*RESTMapping"
  },
  {
    "id" : "7ed70a67-64f0-41a0-82a7-03a08430b13a",
    "prId" : 20968,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "528730a0-2e65-4b9a-80ab-8d55224f6b65",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am skeptical that this is a useful case. If I know I'm looking for a \"v1\" \"Pod\" and my choices are the main api or the metrics group, one of those is super wrong.\n",
        "createdAt" : "2016-02-11T18:53:09Z",
        "updatedAt" : "2016-02-11T18:53:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f9cb87af-fa53-4943-baf5-adaad4333073",
        "parentId" : "528730a0-2e65-4b9a-80ab-8d55224f6b65",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I am skeptical that this is a useful case. If I know I'm looking for a \"v1\" \"Pod\" and my choices are the main api or the metrics group, one of those is super wrong.\n\nThis is a problem today.  If I ask for \"v1, pods\", I get an answer.  If I ask for \"v1, pod\" I get a failure.  This change simply makes them both return the same answer.\n",
        "createdAt" : "2016-02-11T18:55:40Z",
        "updatedAt" : "2016-02-11T18:55:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1deca57a-614b-4dd0-af4c-7475d1677151",
        "parentId" : "528730a0-2e65-4b9a-80ab-8d55224f6b65",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I gathered, hence the LGTM. :)\n\nOn Thu, Feb 11, 2016 at 10:55 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/api/meta/restmapper.go\n> https://github.com/kubernetes/kubernetes/pull/20968#discussion_r52648403\n> :\n> \n> > ```\n> >         }\n> >     }\n> > \n> > case hasVersion:\n> > ```\n> > -       for currResource := range m.pluralToSingular {\n> > -           if currResource.Version == resource.Version && currResource.Resource == resource.Resource {\n> > -               ret = append(ret, currResource)\n> > -       for plural, singular := range m.pluralToSingular {\n> \n> I am skeptical that this is a useful case. If I know I'm looking for a\n> \"v1\" \"Pod\" and my choices are the main api or the metrics group, one of\n> those is super wrong.\n> \n> This is a problem today. If I ask for \"v1, pods\", I get an answer. If I\n> ask for \"v1, pod\" I get a failure. This change simply makes them both\n> return the same answer.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20968/files#r52648403.\n",
        "createdAt" : "2016-02-11T18:57:44Z",
        "updatedAt" : "2016-02-11T18:57:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9d82ae82-63c0-4c8e-80c8-ea977c56baba",
        "parentId" : "528730a0-2e65-4b9a-80ab-8d55224f6b65",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I am skeptical that this is a useful case. If I know I'm looking for a \"v1\" \"Pod\" and my choices are the main api or the metrics group, one of those is super wrong.\n\nAs to the more general question of \"who chooses winning groups\", `ResourcesFor` is made for the purpose of finding all known matches and putting them in a preferred ordering (note the sorting happening below).  Choosing a single winner is built on top of this logic, but it doesn't remove the necessity of finding all the matches before selecting one.\n",
        "createdAt" : "2016-02-11T18:58:43Z",
        "updatedAt" : "2016-02-11T18:58:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5343e2cc-2895-47a6-ab8e-a507a5cf1fef",
        "parentId" : "528730a0-2e65-4b9a-80ab-8d55224f6b65",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Yeah, I gathered, hence the LGTM. :)\n\nAh, good.\n",
        "createdAt" : "2016-02-11T18:59:18Z",
        "updatedAt" : "2016-02-11T18:59:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "5822955713b044f001728dc2c068202bc9e997dc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +217,221 @@\n\tcase hasVersion:\n\t\tfor plural, singular := range m.pluralToSingular {\n\t\t\tif singular.Version == resource.Version && singular.Resource == resource.Resource {\n\t\t\t\tret = append(ret, plural)"
  },
  {
    "id" : "cea50b70-42f2-428f-b027-19ba927cb3fd",
    "prId" : 20818,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f470055-bf96-423a-b735-a14c15044474",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "add a todo that this is totally gross and needs to be abstracted.\n",
        "createdAt" : "2016-02-08T18:55:08Z",
        "updatedAt" : "2016-02-08T20:33:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "38b0225c-6a22-4672-b64f-21868933b79c",
        "parentId" : "9f470055-bf96-423a-b735-a14c15044474",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> add a todo that this is totally gross and needs to be abstracted.\n\nadded, along with a little advice.\n",
        "createdAt" : "2016-02-08T20:33:42Z",
        "updatedAt" : "2016-02-08T20:33:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d71421ae1a31b104739c0ad116e2e6245e5694d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +131,135 @@}\n\n// unpluralizedSuffixes is a list of resource suffixes that are the same plural and singular\n// This is only is only necessary because some bits of code are lazy and don't actually use the RESTMapper like they should.\n// TODO eliminate this so that different callers can correctly map to resources.  This probably means updating all"
  },
  {
    "id" : "0d375903-54d7-45de-bfff-123eb0551e52",
    "prId" : 18442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36bea5a9-c88e-4841-b5e7-83bce98c8891",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Isn't the `resource` fully-qualified?\n",
        "createdAt" : "2015-12-16T18:56:12Z",
        "updatedAt" : "2015-12-16T18:56:21Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "1b43a756-505c-4d8a-9ce0-f73c4e79041e",
        "parentId" : "36bea5a9-c88e-4841-b5e7-83bce98c8891",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Isn't the resource fully-qualified?\n\nOne very most common usage of the `RESTMapper` is from the CLI.  When using the CLI, people won't usually fully qualify what they want.  They'll say, `kubectl get foos`, but they probably won't include API group and version.  If that information is enough to find an unambiguous match, we should allow it.  If its not, we should provide a way for them to give us more information to find an unambiguous match.\n\nThis gets the internal API ready to support that kind of a match and (for now) keeps us exactly compatible with what we had before.\n",
        "createdAt" : "2015-12-16T20:09:11Z",
        "updatedAt" : "2015-12-16T20:09:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "3690d59d-650b-47f7-92ae-330b92d0b4d3",
        "parentId" : "36bea5a9-c88e-4841-b5e7-83bce98c8891",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks, it makes sense. I just glanced at the signature and asked the question. Sorry for being lazy.\n",
        "createdAt" : "2015-12-16T21:30:57Z",
        "updatedAt" : "2015-12-16T21:30:57Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "41b78ad2b665b9b5d665ce6e4a149529ef2155dd",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +500,504 @@}\n\n// ResourceIsValid takes a partial resource and checks if it's valid\nfunc (m *DefaultRESTMapper) ResourceIsValid(resource unversioned.GroupVersionResource) bool {\n\t_, err := m.KindFor(resource)"
  },
  {
    "id" : "38de5c40-9317-40d7-8e00-94e504ea1ae1",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you not directly find a t of the right group? Seems odd to loop and call ResourceInGroup on every t.\n",
        "createdAt" : "2015-09-24T19:10:41Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4dd89455-b1fa-487b-a59a-03d37e8ca409",
        "parentId" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "How do we find a t of the right group? RESTMapper doesn't have a group field. \n",
        "createdAt" : "2015-09-24T21:07:10Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "8949d47a-7685-43d7-afd1-6a76c567a66e",
        "parentId" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It needs one.  @deads2k FYI\n\nOn Sep 24, 2015, at 5:07 PM, Janet Kuo notifications@github.com wrote:\n\nIn pkg/api/meta/restmapper.go\nhttps://github.com/kubernetes/kubernetes/pull/14461#discussion_r40373260:\n\n> @@ -335,3 +351,13 @@ func (m MultiRESTMapper) AliasesForResource(alias string) (aliases []string, ok\n>   }\n>   return nil, false\n>  }\n> +\n> +// ResourceInGroup verifies if the group has the resource in it\n> +func (m MultiRESTMapper) ResourceInGroup(group, resource string) bool {\n> - for _, t := range m {\n\nHow do we find a t of the right group? RESTMapper doesn't have a group\nfield.\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/14461/files#r40373260.\n",
        "createdAt" : "2015-09-24T21:14:59Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "39f8eee0-c18d-4abf-8b76-f16282e7a84c",
        "parentId" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Maybe we can just add a function called Group() to the RESTMapper interface. The DefaultRESTMapper can implement this by returning its group field. But such a Group() fucntion doesn't make sense for the MultiRESTMapper.\n",
        "createdAt" : "2015-09-24T21:31:10Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e1fe24eb-3811-4a1f-8e88-a67dc5d203c7",
        "parentId" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@JanetKuo, could you remind me why we need ResourceInGroup()? I can't find the caller of this function\n",
        "createdAt" : "2015-10-05T22:08:51Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "77119da5-e332-4b6f-8b3a-f8320aa37277",
        "parentId" : "ca709877-e476-4030-bc35-2633b4ea43ec",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It's used somewhere in the earlier commit and now no longer referenced. I'll remove them. \n",
        "createdAt" : "2015-10-05T22:27:33Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +354,358 @@// ResourceIsValid takes a string (either group/kind or kind) and checks if it's a valid resource\nfunc (m MultiRESTMapper) ResourceIsValid(resource string) bool {\n\tfor _, t := range m {\n\t\tif t.ResourceIsValid(resource) {\n\t\t\treturn true"
  },
  {
    "id" : "70b814fc-0575-4f3c-8480-7da2a4a97db0",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e8e7fe3-73f2-430b-b2fb-e1555cd09171",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "To force people adding \"experimental/\" before an experimental resource, _maybe_ it's enough to add a check here, because this is the only place you check if resource contains \"/\".\n",
        "createdAt" : "2015-10-06T18:38:03Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +183,187 @@\t\treturn \"\", \"\", fmt.Errorf(\"no resource %q has been defined\", resource)\n\t}\n\treturn meta.APIVersion, meta.Kind, nil\n}\n"
  },
  {
    "id" : "59d60779-93d0-453f-9e68-9fdbff0e7472",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e207b19-7a42-49d1-bd82-1fa417a2c279",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, this is a plausible place to catch this. `if m.group == \"experimental\" {` return an error about being explicit.\n",
        "createdAt" : "2015-10-06T19:38:56Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8a79ac8c-bdc1-4fc8-9b34-15ac32d32493",
        "parentId" : "1e207b19-7a42-49d1-bd82-1fa417a2c279",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Adding this in another PR?\n",
        "createdAt" : "2015-10-06T19:40:54Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c5fca848-8fa8-40f2-8d04-27aebae5b92f",
        "parentId" : "1e207b19-7a42-49d1-bd82-1fa417a2c279",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "SGTM\n",
        "createdAt" : "2015-10-06T19:48:27Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bcb7ad01-53a5-4f63-8ab2-055122e815bb",
        "parentId" : "1e207b19-7a42-49d1-bd82-1fa417a2c279",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Will need to cherry-pick both PRs. \n",
        "createdAt" : "2015-10-06T20:04:27Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +182,186 @@\tif !ok {\n\t\treturn \"\", \"\", fmt.Errorf(\"no resource %q has been defined\", resource)\n\t}\n\treturn meta.APIVersion, meta.Kind, nil\n}"
  },
  {
    "id" : "8d4a226d-572e-49cf-9f8d-36c0e82e4f02",
    "prId" : 5763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "444bc568-0d04-4095-a2c9-7fb2f35faaf9",
        "parentId" : null,
        "authorId" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "body" : "@smarterclayton Sorry to refer this old PR and disturb you. I saw this todo and want to fix it, but I didn't catch why this file belongs to rest package, not meta package? Could you explain this? Thanks very much!\n",
        "createdAt" : "2015-12-03T08:48:11Z",
        "updatedAt" : "2015-12-03T08:48:11Z",
        "lastEditedBy" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "tags" : [
        ]
      },
      {
        "id" : "f082c293-7b6d-498e-847c-c7cec271b4d4",
        "parentId" : "444bc568-0d04-4095-a2c9-7fb2f35faaf9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will try to respond tomorrow\n",
        "createdAt" : "2015-12-03T17:08:22Z",
        "updatedAt" : "2015-12-03T17:08:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "870da687d0c2477dc7be1c659a379cfa35a2e850",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\n// TODO: move everything in this file to pkg/api/rest\npackage meta\n"
  },
  {
    "id" : "ebe6844c-380a-46f7-ba67-90d887c65cc0",
    "prId" : 2569,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c217d2f8-a3e9-4d33-9c93-b1da7d6a15d0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Heh, and now that you've done it I realize it should be a switch (if else if is always a switch).\n",
        "createdAt" : "2014-11-24T20:03:31Z",
        "updatedAt" : "2014-11-25T10:33:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7235a9b1f01b8c45e4da93868bf0248ac775a808",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@\tswitch string(singular[len(singular)-1]) {\n\tcase \"s\":\n\t\tplural = singular\n\tcase \"y\":\n\t\tplural = strings.TrimSuffix(singular, \"y\") + \"ies\""
  },
  {
    "id" : "a3e59e5a-38bd-4f06-aeed-8d6ffe569fca",
    "prId" : 2059,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0c44dd1-a246-484a-90d9-718ee332b294",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "maybe https://github.com/gedex/inflector\n",
        "createdAt" : "2014-11-03T14:21:38Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "423a0073-99f1-458d-b5d9-4f2b86b2d81f",
        "parentId" : "e0c44dd1-a246-484a-90d9-718ee332b294",
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "@fabianofranz I think for now all cases are satisfied by using +'s' prefix so I don't think we need something complex for this task.\n",
        "createdAt" : "2014-11-03T14:24:47Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "a8bbb0a4-9f20-4dc0-85b1-826e9241c23f",
        "parentId" : "e0c44dd1-a246-484a-90d9-718ee332b294",
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "Agreed.\n",
        "createdAt" : "2014-11-03T14:27:28Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "fef44690-5a3c-4b0a-971a-c36928036223",
        "parentId" : "e0c44dd1-a246-484a-90d9-718ee332b294",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, tried to spec it as simple as possible to reflect that complexity.\n\n----- Original Message -----\n\n> > -           m.reverse[meta] = plural\n> > -       }\n> > -   }\n> >   +}\n> >   +\n> >   +// kindToResource converts Kind to a resource name.\n> >   +func kindToResource(kind string, mixedCase bool) (plural, singular string)\n> >   {\n> > -   if mixedCase {\n> > -       // Legacy support for mixed case names\n> > -       singular = strings.ToLower(kind[:1]) + kind[1:]\n> > -   } else {\n> > -       singular = strings.ToLower(kind)\n> > -   }\n> > -   if !strings.HasSuffix(singular, \"s\") {\n> > -       plural = singular + \"s\"\n> > -   } else {\n> \n> @fabianofranz I think for now all cases are satisfied by using +'s' prefix so\n> I don't think we need something complex for this task.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2059/files#r19734915\n",
        "createdAt" : "2014-11-03T14:36:55Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "191c1b975cb9cdc3ad9f110f30973d791bc5451e",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\tif !strings.HasSuffix(singular, \"s\") {\n\t\tplural = singular + \"s\"\n\t} else {\n\t\tplural = singular\n\t}"
  },
  {
    "id" : "603ee107-c8a5-4b85-8f16-9f8e2bc8903a",
    "prId" : 2059,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cb669ef-51a0-4bbc-8493-c55932be796f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What is the use case for getting an object from a rest path? Can we not track this? As you make clear from having to take a priority list of versions, version is not well defined for all path names. I'm thinking our model should be that first you figure out what version you're going to talk, and then you figure out what your paths are, but maybe you have some use case that breaks this?\n",
        "createdAt" : "2014-11-03T22:04:46Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7a5d0b27-4b31-4c75-b77e-f5db1d098e16",
        "parentId" : "4cb669ef-51a0-4bbc-8493-c55932be796f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "An example would be if you provided \"kubectl get nodes\" but the apiversion you specified was \"v1beta1\".  Nodes is not a valid resource path for v1beta1, so we need to return you \"minions\" for \"v1beta1\". If \"minions\" was removed from \"v1beta1\", then it should give you an error.\n\n----- Original Message -----\n\n> > +}\n> > +\n> > +// RESTMapper exposes mappings between the types defined in a\n> > +// runtime.Scheme. It assumes that all types defined the provided scheme\n> > +// can be mapped with the provided MetadataAccessor and Codec interfaces.\n> > +//\n> > +// The resource name of a Kind is defined as the lowercase,\n> > +// English-plural version of the Kind string in v1beta3 and onwards,\n> > +// and as the camelCase version of the name in v1beta1 and v1beta2.\n> > +// When converting from resource to Kind, the singular version of the\n> > +// resource name is also accepted for convenience.\n> > +//\n> > +// TODO: Only accept plural for some operations for increased control?\n> > +// (`get pod bar` vs `get pods bar`)\n> > +type DefaultRESTMapper struct {\n> > -   mapping        map[string]typeMeta\n> \n> What is the use case for getting an object from a rest path? Can we not track\n> this? As you make clear from having to take a priority list of versions,\n> version is not well defined for all path names. I'm thinking our model\n> should be that first you figure out what version you're going to talk, and\n> then you figure out what your paths are, but maybe you have some use case\n> that breaks this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2059/files#r19770237\n",
        "createdAt" : "2014-11-03T22:07:47Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b2f11aa9-d5e6-4fdb-97f0-75cb89baad34",
        "parentId" : "4cb669ef-51a0-4bbc-8493-c55932be796f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am concerned that such \"helpful\" behavior is going to cause weird stuff like clients asking for most resources in v1beta2 except for minions, which get downgraded to v1beta1 because they're using the wrong term. This could lead to really hard to figure out bugs when some of your objects don't really have all of their fields set because they were transported in a version that you didn't expect.\n",
        "createdAt" : "2014-11-03T22:13:19Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0973fb82-1b23-49fa-9fbf-8d8d3850f001",
        "parentId" : "4cb669ef-51a0-4bbc-8493-c55932be796f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Right now the transport code forces a version to be set - it's only on fetches and such that the lookup is relevant.  Kubectl in my other pull returns an error telling you the object needs an API version.\n\n> On Nov 3, 2014, at 5:13 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/api/meta/restmapper.go:\n> \n> > +}\n> > +\n> > +// RESTMapper exposes mappings between the types defined in a\n> > +// runtime.Scheme. It assumes that all types defined the provided scheme\n> > +// can be mapped with the provided MetadataAccessor and Codec interfaces.\n> > +//\n> > +// The resource name of a Kind is defined as the lowercase,\n> > +// English-plural version of the Kind string in v1beta3 and onwards,\n> > +// and as the camelCase version of the name in v1beta1 and v1beta2.\n> > +// When converting from resource to Kind, the singular version of the\n> > +// resource name is also accepted for convenience.\n> > +//\n> > +// TODO: Only accept plural for some operations for increased control?\n> > +// (`get pod bar` vs `get pods bar`)\n> > +type DefaultRESTMapper struct {\n> > -   mapping        map[string]typeMeta\n> >   I am concerned that such \"helpful\" behavior is going to cause weird stuff like clients asking for most resources in v1beta2 except for minions, which get downgraded to v1beta1 because they're using the wrong term. This could lead to really hard to figure out bugs when some of your objects don't really have all of their fields set because they were transported in a version that you didn't expect.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-03T22:15:53Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "191c1b975cb9cdc3ad9f110f30973d791bc5451e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@// (`get pod bar` vs `get pods bar`)\ntype DefaultRESTMapper struct {\n\tmapping        map[string]typeMeta\n\treverse        map[typeMeta]string\n\tversions       []string"
  }
]