[
  {
    "id" : "c5768fbc-5f7e-4f51-a96e-c3f9b834da37",
    "prId" : 15975,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "438cf444-b02f-475e-aaa5-e2c87b386b25",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We can be simpler, I think.  Every single object has a name that is DNS1123Subdomain or stricter.  You should just be able to pass pkg/api/validation.go:NameIsDNSSubdomain() here, and get rid of this new impl below...\n\nI'd rather we get more rigorous about validation, but we can get there in the next release.\n",
        "createdAt" : "2015-10-20T23:25:23Z",
        "updatedAt" : "2015-10-21T18:11:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cdcc3493-5aa2-4fe8-91a0-88bad6c20500",
        "parentId" : "438cf444-b02f-475e-aaa5-e2c87b386b25",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "That's not the case with downstream objects in OpenShift (like users or identities) or third party objects (the semantics of whose names are not known here). This is the minimal validation I could come up with for names used as path segments\n",
        "createdAt" : "2015-10-20T23:28:42Z",
        "updatedAt" : "2015-10-21T18:11:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f0fc44b7-e8ef-4ce7-afe5-840b7c92d372",
        "parentId" : "438cf444-b02f-475e-aaa5-e2c87b386b25",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think @liggitt's point is valid, especially for third party objects, I think it's better to keep the flexibility.\n",
        "createdAt" : "2015-10-21T00:53:14Z",
        "updatedAt" : "2015-10-21T18:11:44Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "63fb6c07a565fcb94df7778ad12f810ea1b3cdce",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +74,78 @@\t// Now run common validation on object meta\n\t// Do this *after* custom validation so that specific error messages are shown whenever possible\n\tif errs := validation.ValidateObjectMeta(objectMeta, strategy.NamespaceScoped(), validation.ValidatePathSegmentName); len(errs) > 0 {\n\t\treturn errors.NewInvalid(kind, objectMeta.Name, errs)\n\t}"
  },
  {
    "id" : "75e04b46-e55a-4934-b536-c7752fe9c76d",
    "prId" : 8641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "800fe183-68fe-4451-9de4-08b4c5c827af",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "And DeletionGracePeriodSeconds.\n",
        "createdAt" : "2015-06-01T19:59:02Z",
        "updatedAt" : "2015-06-01T23:24:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12a68cd60ccfe2f0926386df771805c0993d783",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +60,64 @@\t\tobjectMeta.Namespace = api.NamespaceNone\n\t}\n\tobjectMeta.DeletionTimestamp = nil\n\tobjectMeta.DeletionGracePeriodSeconds = nil\n\tstrategy.PrepareForCreate(obj)"
  },
  {
    "id" : "ed1ad7ec-9985-4722-914a-9273b90742f2",
    "prId" : 3789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72131481-9b68-45e8-bad5-f6c2c9a2c8a0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This is in hope that some object will be deleted before the client retries?\n",
        "createdAt" : "2015-01-30T01:55:57Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e86761b6-f604-4221-99cb-fc2e55cd739d",
        "parentId" : "72131481-9b68-45e8-bad5-f6c2c9a2c8a0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just to leave the door open for us to retry in the future, and give up if we're close to a limit, and eventually control the backoff via a header to clients.  Try again will be useful for repl controllers to watch for.\n\n> On Jan 29, 2015, at 8:56 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/rest/create.go:\n> \n> > +// to generation being unable to pick a valid name.\n> > +func CheckGeneratedNameError(strategy RESTCreateStrategy, err error, obj runtime.Object) error {\n> > -   if !errors.IsAlreadyExists(err) {\n> > -       return err\n> > -   }\n> >   +\n> > -   objectMeta, kind, kerr := objectMetaAndKind(strategy, obj)\n> > -   if kerr != nil {\n> > -       return kerr\n> > -   }\n> >   +\n> > -   if len(objectMeta.GenerateName) == 0 {\n> > -       return err\n> > -   }\n> >   +\n> > -   return errors.NewTryAgainLater(kind, \"POST\")\n> >   This is in hope that some object will be deleted before the client retries?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-30T02:07:51Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1588970ec429df804708e8f00b66e4b94ba70723",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@\t}\n\n\treturn errors.NewTryAgainLater(kind, \"POST\")\n}\n"
  }
]