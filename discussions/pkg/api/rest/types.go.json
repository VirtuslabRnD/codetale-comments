[
  {
    "id" : "aa709d95-4439-4a95-921e-c5029617f562",
    "prId" : 4419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is Strategy still the right name for this? It's an ObjectTyper and NameGenerator? Why are these separate, anyhow?\n\nCould we please adopt a convention for declaring what interfaces receivers implement? #2992\n",
        "createdAt" : "2015-02-13T17:22:31Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3eb97b1e-d037-4345-9087-b7d12e3a294a",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also, aren't these included in RESTCreateStrategy directly? Should RESTCreateStrategy use this strategy? Does RESTUpdateStrategy invoke RESTCreateStrategy for the create-on-put case? \n\nI'm not getting the big picture of the organization we're moving towards.\n\nDon't get me wrong -- this is better than what we have. But, I'm still not seeing the forest through the trees.\n",
        "createdAt" : "2015-02-13T17:26:53Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "28102f45-c2ae-42cc-a6a7-ed2b66001af6",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "In my later pull I moved this class to `pkg/registry/pod/types.go` as \"pod.Strategy\".  So this is the default implementation of the basic pod strategy.  I can add the comments here to make that clear.\n\nRESTCreate and RESTUpdate are separate.  There would be a different RESTUpdateStrategy for updating the pods as a regular user (PUT /pods/foo) vs updating status (PUT /pods/foo/status -> RESTStatusUpdateStrategy).  The separate strategy implementation there is just so we can guarantee type safety (the reflective implementation doesn't buy us a lot).\n\nhttps://github.com/smarterclayton/kubernetes/commit/dc4c9dae656ac90c373ee1dcb5e8d2925dee2deb#diff-189461deaff2db4ed8975a0bd74f9b4fR43\n",
        "createdAt" : "2015-02-13T17:30:02Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6b277976-80fc-49a9-b65d-86b8001ec7c6",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'll add that convention into #4248 since it's moved.\n",
        "createdAt" : "2015-02-13T17:40:27Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7029527e-707e-411c-8919-e1fe77a3b4af",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm open to better names - Creater or Updater might confuse people with apiserver.RESTCreater, but there is a parallel.\n\n----- Original Message -----\n\n> > @@ -60,7 +81,7 @@ type podStrategy struct {\n> > \n> >  // Pods is the default logic that applies when creating and updating Pod\n> >  // objects.\n> > -var Pods RESTCreateStrategy = podStrategy{api.Scheme,\n> > api.SimpleNameGenerator}\n> > +var Pods = podStrategy{api.Scheme, api.SimpleNameGenerator}\n> \n> Is Strategy still the right name for this? It's an ObjectTyper and\n> NameGenerator? Why are these separate, anyhow?\n> \n> Could we please adopt a convention for declaring what interfaces receivers\n> implement? #2992\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24680126\n",
        "createdAt" : "2015-02-13T17:46:26Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "30482918-0994-4771-aa0d-d260485afb8d",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated godoc on Etcd to clarify role of Decorator.\n",
        "createdAt" : "2015-02-13T17:47:17Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e5eae57e-bb86-4d8f-8928-b575dbcdcbdb",
        "parentId" : "73ba0c70-300a-491b-967f-ce3d95d2d6cf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thanks. I'll look at the later pulls next.\n",
        "createdAt" : "2015-02-13T17:51:52Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440310ea0d11ad2e3f8e21c98bae08dc3ee3e13",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +82,86 @@// Pods is the default logic that applies when creating and updating Pod\n// objects.\nvar Pods = podStrategy{api.Scheme, api.SimpleNameGenerator}\n\n// NamespaceScoped is true for pods."
  },
  {
    "id" : "a46120ad-19fa-4201-97da-4f955d2bcdd7",
    "prId" : 3789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8025b4fb-982e-43b2-b76f-c481ae0b8f4e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What's the purpose of this file? A comment would be useful.\n",
        "createdAt" : "2015-01-30T01:58:02Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1624c8bf-6692-45b1-a246-77e169a0d9f3",
        "parentId" : "8025b4fb-982e-43b2-b76f-c481ae0b8f4e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should be to be the default implementation of the mutation logic for each type.  Once we fold registries into rest we can move these into rest.  They don't have to be here, but logic was small enough so far.\n\n> On Jan 29, 2015, at 8:58 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/rest/types.go:\n> \n> > +Copyright 2014 Google Inc. All rights reserved.\n> > +\n> > +Licensed under the Apache License, Version 2.0 (the \"License\");\n> > +you may not use this file except in compliance with the License.\n> > +You may obtain a copy of the License at\n> > +\n> > -    http://www.apache.org/licenses/LICENSE-2.0\n> >   +\n> >   +Unless required by applicable law or agreed to in writing, software\n> >   +distributed under the License is distributed on an \"AS IS\" BASIS,\n> >   +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> >   +See the License for the specific language governing permissions and\n> >   +limitations under the License.\n> >   +*/\n> >   +\n> >   +package rest\n> >   What's the purpose of this file? A comment would be useful.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-30T02:09:16Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1588970ec429df804708e8f00b66e4b94ba70723",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage rest\n\nimport ("
  },
  {
    "id" : "15fd5922-cf84-48c9-b482-10f3472de382",
    "prId" : 3613,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2398749-fc2f-483c-b4cb-7c82c4b9742c",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "...for namespaces.\n",
        "createdAt" : "2015-02-10T00:19:32Z",
        "updatedAt" : "2015-02-10T15:16:02Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bd0e12bbcb049854f85e763bfce66a37de3e261",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +136,140 @@}\n\n// namespaceStrategy implements behavior for nodes\ntype namespaceStrategy struct {\n\truntime.ObjectTyper"
  }
]