[
  {
    "id" : "e1633172-7d20-4056-8fca-587bb4ef9e19",
    "prId" : 25787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5b41ddd-18c6-4108-b6c0-960eccfc2f2b",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you add Godoc for this interface and its methods?\n",
        "createdAt" : "2016-05-24T00:31:54Z",
        "updatedAt" : "2016-05-24T01:11:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "621e926f-b4ea-4fff-8a6b-41a0260fd6da",
        "parentId" : "b5b41ddd-18c6-4108-b6c0-960eccfc2f2b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "done\n",
        "createdAt" : "2016-05-24T01:11:57Z",
        "updatedAt" : "2016-05-24T01:11:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "29252acd1ad80ca492c800713d9bc329282e9ed8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +177,181 @@// UpdatedObjectInfo provides information about an updated object to an Updater.\n// It requires access to the old object in order to return the newly updated object.\ntype UpdatedObjectInfo interface {\n\t// Returns preconditions built from the updated object, if applicable.\n\t// May return nil, or a preconditions object containing nil fields,"
  },
  {
    "id" : "c95c4f49-d9f4-492a-a033-7772fe491357",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dca33bc-be7b-4f16-80f0-9be95e12b239",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It seems like this should be `GroupVersionKind`.\n",
        "createdAt" : "2016-01-12T14:09:07Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "eee4dd62-5257-4957-998b-347408ef8da2",
        "parentId" : "8dca33bc-be7b-4f16-80f0-9be95e12b239",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Nope, that's implied by where it is added to the system.\n",
        "createdAt" : "2016-01-15T21:28:51Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +61,65 @@// API discovery we want to present the specific kind, not the generic internal representation.\ntype KindProvider interface {\n\tKind() string\n}\n"
  },
  {
    "id" : "0a52ea3e-8e1e-421e-8bc5-0d41dffd6e21",
    "prId" : 18290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "could we mark as TODO for future cleanup. \n",
        "createdAt" : "2015-12-07T22:18:39Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "ffe77538-fd24-42af-9b16-ec51ade368eb",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I don't understand this comment. What you would like to cleanup with it?\n",
        "createdAt" : "2015-12-08T08:21:53Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "32b4f051-9e2e-43c9-b26b-153cca579cb1",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Aren't we planning on changing this post etcd3?  \n",
        "createdAt" : "2015-12-08T14:06:50Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "97e2d68a-fd6a-4e6f-8ed0-1d1175ed8e70",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't think so. I think the interface should remain as it is here.\n\nWhat we would like to cleanup is the implementation of DeleteCollection in pkg/registry - but there is already a TODO there.\n",
        "createdAt" : "2015-12-08T14:08:40Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "708df563-ecfa-47cc-9147-d995928d7505",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "sgtm\n",
        "createdAt" : "2015-12-08T16:34:40Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "071886e5-4646-4707-86b9-c110fbd0e1e6",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Will review first thing tomorrow morning.\n\nOn Tuesday, December 8, 2015, Timothy St. Clair notifications@github.com\nwrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/18290#discussion_r46977051\n> :\n> \n> > @@ -125,6 +125,13 @@ func (w GracefulDeleteAdapter) Delete(ctx api.Context, name string, options *api\n> >     return w.Deleter.Delete(ctx, name)\n> >  }\n> > \n> > +// CollectionDeleter is an object that can delete a collection\n> > +// of RESTful resources.\n> > +type CollectionDeleter interface {\n> \n> sgtm\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18290/files#r46977051.\n",
        "createdAt" : "2015-12-08T21:56:32Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "48b35465-8ace-4c99-ac08-067b6a156605",
        "parentId" : "501652ec-d0fd-4fbc-b3db-0fcf817d66f4",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@derekwaynecarr - great thanks!\n",
        "createdAt" : "2015-12-09T13:56:53Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f28bb68d8ce42ac803ec22574d5c3c19affeb0b9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +128,132 @@// CollectionDeleter is an object that can delete a collection\n// of RESTful resources.\ntype CollectionDeleter interface {\n\t// DeleteCollection selects all resources in the storage matching given 'listOptions'\n\t// and deletes them. If 'options' are provided, the resource will attempt to honor"
  },
  {
    "id" : "ef555220-1bb5-424b-ac64-b6819fac70dc",
    "prId" : 16273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Typically this is untyped (GetterWithOptions accepts runtime.Object) and we support both the old and the new interface.  However, since List() is effectively standard and we don't have a use case for api.ListOptions varying between callers, I'm ok with making this change as is.\n\nCan you add a TODO on this interface to remove label and field selectors (since they are part of api.ListOptions)?\n",
        "createdAt" : "2015-10-26T17:23:43Z",
        "updatedAt" : "2015-10-27T09:04:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "35ebe949-0c83-48f4-a559-abfaf3c24574",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sure - I want to remove it from both List and Watch (both here in and in the client).\nI will add TODO tomorrow.\n",
        "createdAt" : "2015-10-26T17:27:05Z",
        "updatedAt" : "2015-10-27T09:04:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "55a2ca53-5692-4bc9-806b-47106c34d4fd",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@smarterclayton @lavalamp \nBTW - the reason I decided for that API was to make it consistent with DeleteOptions in GracefulDeleter.\n",
        "createdAt" : "2015-10-26T17:38:27Z",
        "updatedAt" : "2015-10-27T09:04:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "245a3912-be9e-4ef7-82a9-50f5828c1c59",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's fine.  Delete and List are more similar than Gets to different subresources will be (proxy, logs, status are all different Get schemas)\n",
        "createdAt" : "2015-10-26T18:20:38Z",
        "updatedAt" : "2015-10-27T09:04:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e26cf99d-5a11-4dc0-8bc3-8ed4c8680c01",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd argue for ListOptions going to unversioned, like we chatted about earlier.\n\nAlso can label & field be moved into listOptions?\n",
        "createdAt" : "2015-10-26T19:08:55Z",
        "updatedAt" : "2015-10-27T09:04:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8c48676e-2b58-4f29-8d6c-f782ee9223ad",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess that's what Clayton said already. :)\n",
        "createdAt" : "2015-10-26T19:11:38Z",
        "updatedAt" : "2015-10-27T09:04:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bc672dae-8eda-41b8-b364-30e4e08e2bf9",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - definitely I was to move label and field into listOptions (here and in client, etc.), but I would like to do it in a separate PR.\n",
        "createdAt" : "2015-10-26T19:51:52Z",
        "updatedAt" : "2015-10-27T09:04:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "0580735b-df84-45ed-adcd-8e055daf3c49",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Separate PR is fine for me, it's mostly busywork refactor.\n\nWe have the constructor for delete options because it's impossible to do\n\"&0\" (take address of constant) in Go.  Case is weaker for other value\ntypes.\n\nOn Mon, Oct 26, 2015 at 3:52 PM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/16273#discussion_r43043374\n> :\n> \n> > @@ -62,7 +62,7 @@ type Lister interface {\n> >     // This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)\n> >     NewList() runtime.Object\n> >     // List selects resources in the storage which match to the selector.\n> > -   List(ctx api.Context, label labels.Selector, field fields.Selector) (runtime.Object, error)\n> > -   List(ctx api.Context, label labels.Selector, field fields.Selector, options *api.ListOptions) (runtime.Object, error)\n> \n> Yes - definitely I was to move label and field into listOptions (here and\n> in client, etc.), but I would like to do it in a separate PR.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16273/files#r43043374.\n",
        "createdAt" : "2015-10-26T21:44:07Z",
        "updatedAt" : "2015-10-27T09:04:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7334ae87-cc8b-4ec3-a8cd-48d8ae27c5f4",
        "parentId" : "78f3758d-a28e-432e-abb0-59ec9253a43b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - thanks.\n\n@lavalamp - moving ListOptions to unversioned is orthogonal change - I will change that in a separate PR.\n",
        "createdAt" : "2015-10-27T09:06:25Z",
        "updatedAt" : "2015-10-27T09:06:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa30e381839e61398834cc362d3f8b0406f06abc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@\t// List selects resources in the storage which match to the selector. 'options' can be nil.\n\t// TODO: Move 'label' and 'field' to 'options'.\n\tList(ctx api.Context, label labels.Selector, field fields.Selector, options *api.ListOptions) (runtime.Object, error)\n}\n"
  },
  {
    "id" : "cfb02dbc-bff3-4a18-b4c0-5632a4ca0965",
    "prId" : 16273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec9d6bf9-124e-4248-89d0-7f89a597291f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think we'll want to move to unversioned.ListOptions eventually, but this is fine now.\n",
        "createdAt" : "2015-10-28T21:58:35Z",
        "updatedAt" : "2015-10-28T21:58:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa30e381839e61398834cc362d3f8b0406f06abc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +64,68 @@\t// List selects resources in the storage which match to the selector. 'options' can be nil.\n\t// TODO: Move 'label' and 'field' to 'options'.\n\tList(ctx api.Context, label labels.Selector, field fields.Selector, options *api.ListOptions) (runtime.Object, error)\n}\n"
  },
  {
    "id" : "72977e6f-a9d1-45b7-b5c9-d4b0896127ae",
    "prId" : 15442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d10da59-2b96-4e71-9450-99a826748700",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand from reading this how this is plumbed. How do requests flow through this? what is the relationship between r and the returned Handler?\n",
        "createdAt" : "2015-10-12T20:27:25Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ae3ad2ea-05f1-48ca-adb3-51e95f7fe2db",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The handler is invoked.  The handler may delegate structured API responses\n(objects or errors) to the responder, or construct its own responses.\n\nWill add more godoc.\n\nOn Oct 12, 2015, at 4:27 PM, Daniel Smith notifications@github.com wrote:\n\nIn pkg/api/rest/rest.go\nhttps://github.com/kubernetes/kubernetes/pull/15442#discussion_r41797576:\n\n>  }\n> \n>  // Connecter is a storage object that responds to a connection request\n>  type Connecter interface {\n> - // Connect returns a ConnectHandler that will handle the request/response for a request\n> - Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> - // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> - // The provided responder may be used for common API responses.\n> - Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n\nI don't understand from reading this how this is plumbed. How do requests\nflow through this? what is the relationship between r and the returned\nHandler?\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/15442/files#r41797576.\n",
        "createdAt" : "2015-10-12T21:02:54Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ab014542-09bf-4b93-8fc1-4fbc7a1a2653",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess specifically what I'm confused about is that the handler will get a resp.Body to write to, but it has no way to plumb that response.Body into the Responder-- I'm sure I just don't understand the desired flow of information, though.\n",
        "createdAt" : "2015-10-12T21:06:51Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ee723294-b55d-425d-8132-7e6a0944d6e4",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The caller of the handler has access to the same body - the responder\ncontract is \"invoke Responder and return\", while all other flows may\ninvolve custom output.  The primary goal was avoiding a) the handler having\nto know any of the details the api server abstracts (the version, the\ncontent type, etc, how errors are written), b) making the http.Handler\nterminal (no subsequent logic)\n\nOn Mon, Oct 12, 2015 at 5:07 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41801366\n> :\n> \n> >  }\n> > \n> >  // Connecter is a storage object that responds to a connection request\n> >  type Connecter interface {\n> > -   // Connect returns a ConnectHandler that will handle the request/response for a request\n> > -   Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> > -   // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> > -   // The provided responder may be used for common API responses.\n> > -   Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n> \n> I guess specifically what I'm confused about is that the handler will get\n> a resp.Body to write to, but it has no way to plumb that response.Body into\n> the Responder-- I'm sure I just don't understand the desired flow of\n> information, though.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41801366.\n",
        "createdAt" : "2015-10-12T22:20:10Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b96934a1-cf31-4fdc-98c4-a449c10e7c3e",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see-- the caller needs to have parameterized the responder. Wouldn't it be much clearer to just have Responder's methods take an http.Response? And possibly save every caller the work.\n",
        "createdAt" : "2015-10-12T22:55:41Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "258ed97c-231d-46a4-8bd8-a0a604f4f1e5",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm. That opens the possibility that the http.Handler would mutate the\nResponseWriter with a wrapper.  Do we want to enable that?\n\nOn Mon, Oct 12, 2015 at 6:56 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810054\n> :\n> \n> >  }\n> > \n> >  // Connecter is a storage object that responds to a connection request\n> >  type Connecter interface {\n> > -   // Connect returns a ConnectHandler that will handle the request/response for a request\n> > -   Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> > -   // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> > -   // The provided responder may be used for common API responses.\n> > -   Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n> \n> I see-- the caller needs to have parameterized the responder. Wouldn't it\n> be much clearer to just have Responder's methods take an http.Response? And\n> possibly save every caller the work.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41810054.\n",
        "createdAt" : "2015-10-12T23:03:56Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3ff2c3d8-d97c-45b6-bf34-3bb8283bd24c",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I have visions of someone wrapping response writer with a special response\nwrapper so they can manipulate the content-type or something.  We can\nalways refactor later.\n\nOn Mon, Oct 12, 2015 at 7:03 PM, Clayton Coleman ccoleman@redhat.com\nwrote:\n\n> Hrm. That opens the possibility that the http.Handler would mutate the\n> ResponseWriter with a wrapper.  Do we want to enable that?\n> \n> On Mon, Oct 12, 2015 at 6:56 PM, Daniel Smith notifications@github.com\n> wrote:\n> \n> > In pkg/api/rest/rest.go\n> > https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810054\n> > :\n> > \n> > >  }\n> > > \n> > >  // Connecter is a storage object that responds to a connection request\n> > >  type Connecter interface {\n> > > -  // Connect returns a ConnectHandler that will handle the request/response for a request\n> > > -  Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> > > -  // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> > > -  // The provided responder may be used for common API responses.\n> > > -  Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n> > \n> > I see-- the caller needs to have parameterized the responder. Wouldn't it\n> > be much clearer to just have Responder's methods take an http.Response? And\n> > possibly save every caller the work.\n> > \n> > â€”\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/kubernetes/kubernetes/pull/15442/files#r41810054.\n",
        "createdAt" : "2015-10-12T23:04:31Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2f3a7b1c-09be-4df9-98f9-fa4c7727359b",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think I see your concern. I think we can fix this with documentation for\nthe moment.\n\nOn Mon, Oct 12, 2015 at 4:04 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810580\n> :\n> \n> >  }\n> > \n> >  // Connecter is a storage object that responds to a connection request\n> >  type Connecter interface {\n> > -   // Connect returns a ConnectHandler that will handle the request/response for a request\n> > -   Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> > -   // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> > -   // The provided responder may be used for common API responses.\n> > -   Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n> \n> Hrm. That opens the possibility that the http.Handler would mutate the\n> ResponseWriter with a wrapper. Do we want to enable that?\n> â€¦ <#1505e4caf92580a7_>\n> On Mon, Oct 12, 2015 at 6:56 PM, Daniel Smith notifications@github.com\n> wrote: In pkg/api/rest/rest.go <#15442 (comment)\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810054>\n> : > } > > // Connecter is a storage object that responds to a connection\n> request > type Connecter interface { > - // Connect returns a\n> ConnectHandler that will handle the request/response for a request > -\n> Connect(ctx api.Context, id string, options runtime.Object)\n> (ConnectHandler, error) > + // Connect returns an http.Handler that will\n> handle the request/response for a given API invocation. > + // The provided\n> responder may be used for common API responses. > + Connect(ctx\n> api.Context, id string, options runtime.Object, r Responder) (http.Handler,\n> error) I see-- the caller needs to have parameterized the responder.\n> Wouldn't it be much clearer to just have Responder's methods take an\n> http.Response? And possibly save every caller the work. â€” Reply to this\n> email directly or view it on GitHub <\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41810054>.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41810580.\n",
        "createdAt" : "2015-10-12T23:09:43Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c33527e4-66ba-4a73-9bbd-f36dbe059842",
        "parentId" : "2d10da59-2b96-4e71-9450-99a826748700",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated Godoc.\n\nOn Mon, Oct 12, 2015 at 7:09 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/rest/rest.go\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41811005\n> :\n> \n> >  }\n> > \n> >  // Connecter is a storage object that responds to a connection request\n> >  type Connecter interface {\n> > -   // Connect returns a ConnectHandler that will handle the request/response for a request\n> > -   Connect(ctx api.Context, id string, options runtime.Object) (ConnectHandler, error)\n> > -   // Connect returns an http.Handler that will handle the request/response for a given API invocation.\n> > -   // The provided responder may be used for common API responses.\n> > -   Connect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n> \n> I think I see your concern. I think we can fix this with documentation for\n> the moment.\n> â€¦ <#1505e515d9a4c1e1_>\n> On Mon, Oct 12, 2015 at 4:04 PM, Clayton Coleman notifications@github.com\n> wrote: In pkg/api/rest/rest.go <#15442 (comment)\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810580>\n> : > } > > // Connecter is a storage object that responds to a connection\n> request > type Connecter interface { > - // Connect returns a\n> ConnectHandler that will handle the request/response for a request > -\n> Connect(ctx api.Context, id string, options runtime.Object)\n> (ConnectHandler, error) > + // Connect returns an http.Handler that will\n> handle the request/response for a given API invocation. > + // The provided\n> responder may be used for common API responses. > + Connect(ctx\n> api.Context, id string, options runtime.Object, r Responder) (http.Handler,\n> error) Hrm. That opens the possibility that the http.Handler would mutate\n> the ResponseWriter with a wrapper. Do we want to enable that? â€¦\n> <#1505e4caf92580a7_> On Mon, Oct 12, 2015 at 6:56 PM, Daniel Smith <\n> notifications@github.com> wrote: In pkg/api/rest/rest.go <#15442\n> https://github.com/kubernetes/kubernetes/pull/15442 (comment) <#15442\n> (comment)\n> https://github.com/kubernetes/kubernetes/pull/15442#discussion_r41810054>>\n> : > } > > // Connecter is a storage object that responds to a connection\n> request > type Connecter interface { > - // Connect returns a\n> ConnectHandler that will handle the request/response for a request > -\n> Connect(ctx api.Context, id string, options runtime.Object)\n> (ConnectHandler, error) > + // Connect returns an http.Handler that will\n> handle the request/response for a given API invocation. > + // The provided\n> responder may be used for common API responses. > + Connect(ctx\n> api.Context, id string, options runtime.Object, r Responder) (http.Handler,\n> error) I see-- the caller needs to have parameterized the responder.\n> Wouldn't it be much clearer to just have Responder's methods take an\n> http.Response? And possibly save every caller the work. â€” Reply to this\n> email directly or view it on GitHub <\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41810054>. â€”\n> Reply to this email directly or view it on GitHub <\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41810580>.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15442/files#r41811005.\n",
        "createdAt" : "2015-10-12T23:42:04Z",
        "updatedAt" : "2015-10-13T19:03:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4cdabf2fc86ae290ef9df71b8ce9804c30c2de0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +220,224 @@\t// be used for a single API request and then discarded. The Responder is guaranteed to write to the\n\t// same http.ResponseWriter passed to ServeHTTP.\n\tConnect(ctx api.Context, id string, options runtime.Object, r Responder) (http.Handler, error)\n\n\t// NewConnectOptions returns an empty options object that will be used to pass"
  }
]