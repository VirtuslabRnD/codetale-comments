[
  {
    "id" : "eff9f3b2-4d6a-48b1-a7c0-bc3c1e7edf2d",
    "prId" : 15371,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3102779d-c683-46a3-996f-9226a8353781",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "These three fields don't seem to be used-- can we save them until the PR where they start getting used (so we can talk about the use case before adding).\n",
        "createdAt" : "2015-10-09T21:58:18Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "47afed60-a85e-4fcd-8f8a-e3d6bb4edb46",
        "parentId" : "3102779d-c683-46a3-996f-9226a8353781",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Actually no, b/c in order for the api.Context to be passed through the storage layer they are needed. \n",
        "createdAt" : "2015-10-09T22:04:57Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1426b194-86e1-41ac-a36c-532120e2557c",
        "parentId" : "3102779d-c683-46a3-996f-9226a8353781",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see-- in that case can you document in this interface exactly what each\nmember should be used for? Thanks.\n\nOn Fri, Oct 9, 2015 at 3:05 PM, Timothy St. Clair notifications@github.com\nwrote:\n\n> In pkg/api/context.go\n> https://github.com/kubernetes/kubernetes/pull/15371#discussion_r41682896\n> :\n> \n> > @@ -26,6 +27,9 @@ import (\n> >  // Context carries values across API boundaries.\n> >  type Context interface {\n> >     Value(key interface{}) interface{}\n> > -   Deadline() (deadline time.Time, ok bool)\n> \n> Actually no, b/c in order for the api.Context to be passed through the\n> storage layer they are needed.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15371/files#r41682896.\n",
        "createdAt" : "2015-10-09T22:23:10Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "436a7981-b8ee-42f6-a3b6-8c55f5af8523",
        "parentId" : "3102779d-c683-46a3-996f-9226a8353781",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Is it possible to get rid of this interface since it is now identical to `context.Context`?\n",
        "createdAt" : "2015-10-09T22:53:29Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "7d163c92-a3e5-474b-8551-73f52058bbd2",
        "parentId" : "3102779d-c683-46a3-996f-9226a8353781",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> Is it possible to get rid of this interface since it is now identical to context.Context?\n\n+1 (obviously not in this PR, but please add a TODO for it).\n",
        "createdAt" : "2015-10-12T07:28:02Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7031fde7-cd21-48a6-aa61-277f4b2eeed9",
        "parentId" : "3102779d-c683-46a3-996f-9226a8353781",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "DONE - created comment section from all the notes above.  \n",
        "createdAt" : "2015-10-12T14:01:16Z",
        "updatedAt" : "2015-10-12T14:01:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a2a2d79ff4531b32e2bebd2afa9107365d272d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +36,40 @@\n\t// Deadline returns the time when this Context will be canceled, if any.\n\tDeadline() (deadline time.Time, ok bool)\n\n\t// Done returns a channel that is closed when this Context is canceled"
  },
  {
    "id" : "090621ab-1499-4065-b76e-0849c2af1760",
    "prId" : 1564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What is the difference between the default and not being set?\n",
        "createdAt" : "2014-10-14T18:14:24Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5fb67401-7e64-45e0-a062-7365d397e2ce",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "The default Namespace is literally, Namespace=\"default\".\n\nIt is the assumed namespace context when calling the legacy API patterns where namespace was not in the resource path.\n\nA namespace not being set means the operation context has no namespace scope at all.  It is useful for LIST and WATCH operations when working across namespace boundaries.\n",
        "createdAt" : "2014-10-14T19:20:20Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "350fcb60-f6f9-4d7d-8b79-000db7068dfc",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I find this really confusing. Is it too late to ask for a system where \"\" == \"default\", and if you want to span namespaces, you have to explicitly say namespace \"*\"?\n",
        "createdAt" : "2014-10-14T20:45:35Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b1d949e3-7f89-4c9a-94a5-97790054f412",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "From a REST perspective, GET /pods returning all pods seems more correct than GET /pods/ns/\\* returning all pods.\n\n----- Original Message -----\n\n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta)\n> > bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the\n> > default if and only if the parent context has no namespace value\n> \n> I find this really confusing. Is it too late to ask for a system where \"\" ==\n> \"default\", and if you want to span namespaces, you have to explicitly say\n> namespace \"*\"?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18857208\n",
        "createdAt" : "2014-10-14T20:54:29Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5c498d2e-25a6-4238-bf6c-efd09d81f110",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I'm not arguing about the REST path, I'm arguing about not using the go type's default value of \"\" to mean the default. Perhaps we need to make a custom type to represent namespaces.\n",
        "createdAt" : "2014-10-14T21:03:12Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5339f697-9a7d-4747-825a-fe2199e2db8b",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's a good point - we should never serialize Namespace = \\* in an object (anyway), which means that from a resource perspective ResourceAll should be an invalid value anyway.  \n\n----- Original Message -----\n\n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta)\n> > bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the\n> > default if and only if the parent context has no namespace value\n> \n> Yeah, I'm not arguing about the REST path, I'm arguing about not using the go\n> type's default value of \"\" to mean the default. Perhaps we need to make a\n> custom type to represent namespaces.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18858486\n",
        "createdAt" : "2014-10-14T21:10:05Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9d6bbd4d-7b90-4e9b-a199-fe9517eaaea0",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Using \"\" as the default does not work when persisting in etcd where we need a namespace path separator in the key path.  I would like to vote that its too late, but I am not sure how much my vote matters ;-)  What is here is consistent to what was agreed to in the namespaces.md proposal.\n",
        "createdAt" : "2014-10-14T21:26:19Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "e0827e98-1e2b-45ac-881d-639d7740516b",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree we should serialize with \"default\". I think what I'm asking for is for contexts to always start out with the namespace \"default\", so that this function is not needed. It's working around go's default value. Instead, I'd like a function that produces a namespace that finds everything for those few users that require that behavior.\n",
        "createdAt" : "2014-10-14T21:44:23Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fff8cf02-56f5-4ca8-8e74-aa44655b05a1",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So to external users, empty string means default.  To internal users, you have to explicitly invoke some code to get a value that allows you to search everything, so we can easily pick out places where we intentionally search everything (vs accidentally because \"\" == default init).\n\nMakes sense to me.\n\n----- Original Message -----\n\n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta)\n> > bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the\n> > default if and only if the parent context has no namespace value\n> \n> I agree we should serialize with \"default\". I think what I'm asking for is\n> for contexts to always start out with the namespace \"default\", so that this\n> function is not needed. It's working around go's default value. Instead, I'd\n> like a function that produces a namespace that finds everything for those\n> few users that require that behavior.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18861162\n",
        "createdAt" : "2014-10-14T22:12:33Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1c580727-584c-46c0-ac68-33a6de271045",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Right. You should have to do something special to get a context with the \"search everything\" namespace, if you do nothing special you should get a context with the \"default\" namespace.\n",
        "createdAt" : "2014-10-14T22:16:14Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9d7af80e-89be-4d0c-a422-257a44c35fbd",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You guys have until EOD tomorrow to settle this, please.\n\nOn Tue, Oct 14, 2014 at 3:16 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/context.go:\n> \n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta) bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value\n> \n> Right. You should have to do something special to get a context with the\n> \"search everything\" namespace, if you do nothing special you should get a\n> context with the \"default\" namespace.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18863027\n> .\n",
        "createdAt" : "2014-10-15T04:58:05Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "aa5f17ee-b4a9-4b26-add3-c0771f29f5e7",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "It would be really good to get this in for the breakage day; specifically the change to the etcd storage, since it completely breaks clusters.  And we seem to agree on that.\n\nWe aren't going to get the defaulting and the resource paths exactly right in the next day.  So, let's check in what we have got and then defer fixing those to a later release(s).\n",
        "createdAt" : "2014-10-15T15:59:28Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "bee98f57-168a-4846-911f-1ff2d8c890a7",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "+1 @erictune - I think we can refine the default behavior on context in a subsequent PR.  The particular func that @lavalamp is commenting on was only introduced as a code clean-up for how we handle backwards compatible API patterns.  We already  know that some code will change there as we put the namespace in the resource path URLs, so it may end up being that this entire function can be removed at that time.\n\nI guess what I am saying, is I would like to get this merged, and refine after, as it has been sitting a long time.\n",
        "createdAt" : "2014-10-15T16:03:18Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "24c128c5-d1fd-4c4b-9f90-79950b29ce2e",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Fine with me, we can merge and fix up later.\n",
        "createdAt" : "2014-10-15T17:54:31Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "53d3a776-4d8b-4dc7-9b59-4feca032fd3b",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Final answer: is this PR done enough to commit tomorrow?\n\n@lavalamp @derekwaynecarr @smarterclayton\n\nOn Wed, Oct 15, 2014 at 10:54 AM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/context.go:\n> \n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta) bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value\n> \n> Fine with me, we can merge and fix up later.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18910297\n> .\n",
        "createdAt" : "2014-10-15T20:29:15Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "36d13078-174c-4807-b8ca-eea815b792dc",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes.\n",
        "createdAt" : "2014-10-15T20:30:57Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c80c25c5-8bed-46aa-baf4-57574adb93a0",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I vote yes\n\nSent from my iPhone\n\n> On Oct 15, 2014, at 4:29 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/context.go:\n> \n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta) bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value\n> > Final answer: is this PR done enough to commit tomorrow? @lavalamp @derekwaynecarr @smarterclayton\n> > â€¦\n> > â€”\n> > Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-10-15T20:34:25Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "e5ebadbc-d7d1-4625-9b86-6e2fc150fdc2",
        "parentId" : "2885c650-7435-45f3-85cb-990f7cf746a7",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "yes\n\nOn Wed, Oct 15, 2014 at 1:34 PM, Derek Carr notifications@github.com\nwrote:\n\n> In pkg/api/context.go:\n> \n> > @@ -71,3 +77,12 @@ func ValidNamespace(ctx Context, resource *TypeMeta) bool {\n> >     }\n> >     return ns == resource.Namespace && ok\n> >  }\n> > +\n> > +// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value\n> \n> I vote yes\n> â€¦ <#149158515c230ada_>\n> Sent from my iPhone\n>  On Oct 15, 2014, at 4:29 PM, Tim Hockin notifications@github.com\n> wrote: In pkg/api/context.go: > @@ -71,3 +77,12 @@ func ValidNamespace(ctx\n> Context, resource *TypeMeta) bool { > } > return ns == resource.Namespace\n> && ok > } > + > +// WithNamespaceDefaultIfNone returns a context whose\n> namespace is the default if and only if the parent context has no namespace\n> value Final answer: is this PR done enough to commit tomorrow? @lavalamp\n> https://github.com/lavalamp @derekwaynecarr\n> https://github.com/derekwaynecarr @smarterclayton\n> https://github.com/smarterclayton â€¦ â€” Reply to this email directly or\n> view it on GitHub.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18920554\n> .\n",
        "createdAt" : "2014-10-15T23:19:42Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "085ca40291dc5d40f8e9fccb83352fc6226fdf4f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +79,83 @@}\n\n// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value\nfunc WithNamespaceDefaultIfNone(parent Context) Context {\n\tnamespace, ok := NamespaceFrom(parent)"
  },
  {
    "id" : "07957f2e-85dc-4aac-91f2-108ece86b4d6",
    "prId" : 1495,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b944ccc2-85ec-4108-86b9-2d7386035b5f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why not say internalCtx := context.Context(parent), which I think will do static checking of type safety rather than runtime checking.\n",
        "createdAt" : "2014-09-30T22:57:47Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a95653ff-9de4-4449-9bdf-81df5fe5f625",
        "parentId" : "b944ccc2-85ec-4108-86b9-2d7386035b5f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I can't do this because our object does not implement all the methods of context yet.\n\n```\n_output/go/src/github.com/GoogleCloudPlatform/kubernetes/pkg/api/context.go:46: cannot convert parent (type Context) to type context.Context:\n    Context does not implement context.Context (missing Deadline method)\n```\n",
        "createdAt" : "2014-10-01T14:12:29Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "016d39470576ed4db628ec5050d529d978a8b298",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +46,50 @@// WithValue returns a copy of parent in which the value associated with key is val.\nfunc WithValue(parent Context, key interface{}, val interface{}) Context {\n\tinternalCtx, ok := parent.(context.Context)\n\tif !ok {\n\t\tpanic(stderrs.New(\"Invalid context type\"))"
  },
  {
    "id" : "57f4560b-1878-4097-bd8f-2d26e2e7fe6f",
    "prId" : 1495,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3145e4a9-d13d-40a6-8b65-8935ef39401a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "return ctx.Value(namespaceKey).(string)\n",
        "createdAt" : "2014-09-30T22:58:46Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "41e5c251-926b-4959-a299-aa809a174190",
        "parentId" : "3145e4a9-d13d-40a6-8b65-8935ef39401a",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "ok\n",
        "createdAt" : "2014-10-01T14:14:30Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "4eca9cc3-1429-48cd-a2b4-520b7bc2a3f9",
        "parentId" : "3145e4a9-d13d-40a6-8b65-8935ef39401a",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I learned something new about Go type assertions in the process.\nIn order to actually return a tuple, I need to do the type assertion in an assignment.\nhttps://golang.org/ref/spec#Type_assertions\nThis must be why the idiomatic form documented in this article \nhttp://blog.golang.org/context\n\ndefines functions like:\n\n```\nfunc FromContext(ctx context.Context) (net.IP, bool) {\n    // ctx.Value returns nil if ctx has no value for the key;\n    // the net.IP type assertion returns ok=false for nil.\n    userIP, ok := ctx.Value(userIPKey).(net.IP)\n    return userIP, ok\n}\n```\n",
        "createdAt" : "2014-10-01T14:26:13Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "9496aca4-37c7-4384-8d3a-e8936a5c3c38",
        "parentId" : "3145e4a9-d13d-40a6-8b65-8935ef39401a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Sigh.  Yay Go.\n",
        "createdAt" : "2014-10-01T18:11:05Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "016d39470576ed4db628ec5050d529d978a8b298",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +60,64 @@// NamespaceFrom returns the value of the namespace key on the ctx\nfunc NamespaceFrom(ctx Context) (string, bool) {\n\tnamespace, ok := ctx.Value(namespaceKey).(string)\n\treturn namespace, ok\n}"
  },
  {
    "id" : "ce29837b-8c34-4894-9bfe-3971041d1d01",
    "prId" : 1495,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9238fd58-0626-4f06-9c1d-176a0d1044cc",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is !ok an expected situation?  Is it worth logging?  I am asking - not sure.\n",
        "createdAt" : "2014-09-30T23:00:16Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "60c36cb9-e72e-4e4e-b643-5e9d8e6a0742",
        "parentId" : "9238fd58-0626-4f06-9c1d-176a0d1044cc",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Ok is false when there is no namespace on the context.\nModified a test case to demonstrate the behavior.\nI do not think we need to log anything as the calling code returns with an appropriate error to the client that the namespace of the request does not match the namespace on the provided resource.\n",
        "createdAt" : "2014-10-01T14:27:57Z",
        "updatedAt" : "2014-10-01T18:29:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "016d39470576ed4db628ec5050d529d978a8b298",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +70,74 @@\t\tresource.Namespace = ns\n\t}\n\treturn ns == resource.Namespace && ok\n}"
  },
  {
    "id" : "306bdbe0-65bb-4e8b-abff-dd256abee168",
    "prId" : 1452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec005220-0a38-430e-8dd2-77b0637a41e4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Do you need to vendor this into the Godeps config?\n",
        "createdAt" : "2014-09-25T21:29:30Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "feea9920-69f2-4577-a929-3a470d57815b",
        "parentId" : "ec005220-0a38-430e-8dd2-77b0637a41e4",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Yes.  I did not do the Godeps piece yet until folks were ok with pattern.  I will add Godeps as third commit on PR.  \n\nSent from my iPhone\n\n> On Sep 25, 2014, at 5:29 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/context.go:\n> \n> > +you may not use this file except in compliance with the License.\n> > +You may obtain a copy of the License at\n> > +\n> > -    http://www.apache.org/licenses/LICENSE-2.0\n> >   +\n> >   +Unless required by applicable law or agreed to in writing, software\n> >   +distributed under the License is distributed on an \"AS IS\" BASIS,\n> >   +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> >   +See the License for the specific language governing permissions and\n> >   +limitations under the License.\n> >   +*/\n> >   +\n> >   +package api\n> >   +\n> >   +import (\n> > -   \"code.google.com/p/go.net/context\"\n> >   Do you need to vendor this into the Godeps config?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-25T21:35:44Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee19ba186d19904434a8f48fa2fb221535201fef",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@\nimport (\n\t\"code.google.com/p/go.net/context\"\n)\n"
  },
  {
    "id" : "5adfa632-6343-44dd-81a8-c2f2fec2cccc",
    "prId" : 1452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f76c488-4f58-49b1-b2e0-9236d0c99266",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you add a \n\n```\ntype Context interface {\n  Value(...)...\n}\n```\n\nand return that instead?  That way other packages only depend on api\n",
        "createdAt" : "2014-09-25T21:42:49Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "be6fca60-a93e-45ea-a657-cf0f5283e461",
        "parentId" : "2f76c488-4f58-49b1-b2e0-9236d0c99266",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "There's more to a context than just that. See: https://godoc.org/code.google.com/p/go.net/context#Context\n",
        "createdAt" : "2014-09-25T21:46:51Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "46a87587-8a34-46ed-bc7d-f965d8a66242",
        "parentId" : "2f76c488-4f58-49b1-b2e0-9236d0c99266",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm arguing we don't need any of those except value for the immediate follow up need, and since value is already a method it costs us nothing to not depend on one particular interface from another package (vs one of our own).\n\n> On Sep 25, 2014, at 5:47 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/api/context.go:\n> \n> > +You may obtain a copy of the License at\n> > +\n> > -    http://www.apache.org/licenses/LICENSE-2.0\n> >   +\n> >   +Unless required by applicable law or agreed to in writing, software\n> >   +distributed under the License is distributed on an \"AS IS\" BASIS,\n> >   +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> >   +See the License for the specific language governing permissions and\n> >   +limitations under the License.\n> >   +*/\n> >   +\n> >   +package api\n> >   +\n> >   +import (\n> > -   \"code.google.com/p/go.net/context\"\n> >   +)\n> >   There's more to a context than just that. See: https://godoc.org/code.google.com/p/go.net/context#Context\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-25T22:01:22Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bc978685-a513-4d25-8bda-aa96b77948f0",
        "parentId" : "2f76c488-4f58-49b1-b2e0-9236d0c99266",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Tend to agree with Clayton.  Idea of this method was to have a choke point to easily add some default values that we end up passing around in our context.\n\nSent from my iPhone\n\n> On Sep 25, 2014, at 6:01 PM, Clayton Coleman notifications@github.com wrote:\n> \n> In pkg/api/context.go:\n> \n> > +You may obtain a copy of the License at\n> > +\n> > -    http://www.apache.org/licenses/LICENSE-2.0\n> >   +\n> >   +Unless required by applicable law or agreed to in writing, software\n> >   +distributed under the License is distributed on an \"AS IS\" BASIS,\n> >   +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> >   +See the License for the specific language governing permissions and\n> >   +limitations under the License.\n> >   +*/\n> >   +\n> >   +package api\n> >   +\n> >   +import (\n> > -   \"code.google.com/p/go.net/context\"\n> >   +)\n> >   I'm arguing we don't need any of those except value for the immediate follow up need, and since value is already a method it costs us nothing to not depend on one particular interface from another package (vs one of our own).\n> >   â€¦\n> >   â€”\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-25T22:23:29Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "5ecce4a1-cd63-4fa6-8983-980a885ba86e",
        "parentId" : "2f76c488-4f58-49b1-b2e0-9236d0c99266",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess I can live with that, we can fix it later.\n",
        "createdAt" : "2014-09-25T23:12:47Z",
        "updatedAt" : "2014-09-26T15:50:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee19ba186d19904434a8f48fa2fb221535201fef",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@import (\n\t\"code.google.com/p/go.net/context\"\n)\n\n// Context carries values across API boundaries."
  }
]