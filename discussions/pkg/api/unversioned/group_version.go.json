[
  {
    "id" : "c0543b6a-b3a0-4f62-b28b-6d7c33af5e2c",
    "prId" : 34010,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34010#pullrequestreview-2764765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f02ebf92-d7ef-406e-b2fe-95a584fc418d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This doesn't seem logically equivalent to what we had before - if no exact match exists, you need to pick the first target.\n",
        "createdAt" : "2016-10-04T17:38:44Z",
        "updatedAt" : "2016-10-05T18:59:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f751a2a442b47bb85d6475cb1e02f312e1d77e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +294,298 @@\t\t\tif k == gvk {\n\t\t\t\treturn k\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "id" : "bea9b910-2afe-4231-a938-8cbd4e39ca61",
    "prId" : 26044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c9792c3-3fd1-47e7-9689-b90bde301ffc",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Huh, that change makes this type significantly harder.  Reminding us of the example: Job.__internal.batch, ScheduledJob.__internal.batch .  Job should serialize to v1.batch, ScheduledJob should go to v2alpha1.batch.\n",
        "createdAt" : "2016-05-27T19:52:06Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "352a4a09-ee2e-49ed-ade3-30f60a620dc2",
        "parentId" : "8c9792c3-3fd1-47e7-9689-b90bde301ffc",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Agreed-- I think this logic must be done in a place that knows what kinds exist for a given group version.\n",
        "createdAt" : "2016-07-12T16:24:17Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "06ee7fc8-53be-48ce-9000-c5de2e6a8688",
        "parentId" : "8c9792c3-3fd1-47e7-9689-b90bde301ffc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The code that invokes this knows that.\n",
        "createdAt" : "2016-07-19T16:11:06Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "12d7032c3973e3401244970b240ceae995a8eac2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +265,269 @@// TODO: Introduce an adapter type between GroupVersions and runtime.GroupVersioner, and use LegacyCodec(GroupVersion)\n//   in fewer places.\ntype GroupVersions []GroupVersion\n\n// KindForGroupVersionKinds identifies the preferred GroupVersionKind out of a list. It returns ok false"
  },
  {
    "id" : "b71b1c84-45e7-4deb-ab96-87e4fb5b7087",
    "prId" : 24870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61f915d7-dab7-4bd6-9b33-ec175fca0839",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Does this work properly when `i==len-1`?  I'd expect an index out of bounds.\n",
        "createdAt" : "2016-04-27T17:18:57Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f71d43d1-e786-4007-a5f7-9b6b70fd7294",
        "parentId" : "61f915d7-dab7-4bd6-9b33-ec175fca0839",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "it returns an empty string.\n",
        "createdAt" : "2016-04-27T17:25:36Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "02836ffa-bae4-4b3a-a49d-418e55fc24ec",
        "parentId" : "61f915d7-dab7-4bd6-9b33-ec175fca0839",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "And to soothe your mind, I'll add the tests for parsegroupversion that\ndon't exist today\n\nOn Wed, Apr 27, 2016 at 1:19 PM, David Eads notifications@github.com\nwrote:\n\n> In pkg/api/unversioned/group_version.go\n> https://github.com/kubernetes/kubernetes/pull/24870#discussion_r61299159\n> :\n> \n> > @@ -64,12 +64,11 @@ func (gr *GroupResource) String() string {\n> >  // ParseGroupResource turns \"resource.group\" string into a GroupResource struct.  Empty strings are allowed\n> >  // for each field.\n> >  func ParseGroupResource(gr string) GroupResource {\n> > -   s := strings.SplitN(gr, \".\", 2)\n> > -   if len(s) == 1 {\n> > -       return GroupResource{Resource: s[0]}\n> > -   if i := strings.Index(gr, \".\"); i == -1 {\n> > -       return GroupResource{Resource: gr}\n> > -   } else {\n> > -       return GroupResource{Group: gr[i+1:], Resource: gr[:i]}\n> \n> Does this work properly when i==len-1? I'd expect an index out of bounds.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24870/files/d5276ac4486c4e7529e84da91de6b12f0f3b667d#r61299159\n",
        "createdAt" : "2016-04-27T17:29:24Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9c8f1cd7-e688-4935-9dfb-cb5122b05939",
        "parentId" : "61f915d7-dab7-4bd6-9b33-ec175fca0839",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "And now there are tests!\n\nOn Wed, Apr 27, 2016 at 1:29 PM, Clayton Coleman ccoleman@redhat.com\nwrote:\n\n> And to soothe your mind, I'll add the tests for parsegroupversion that\n> don't exist today\n> \n> On Wed, Apr 27, 2016 at 1:19 PM, David Eads notifications@github.com\n> wrote:\n> \n> > In pkg/api/unversioned/group_version.go\n> > https://github.com/kubernetes/kubernetes/pull/24870#discussion_r61299159\n> > :\n> > \n> > > @@ -64,12 +64,11 @@ func (gr *GroupResource) String() string {\n> > >  // ParseGroupResource turns \"resource.group\" string into a GroupResource struct.  Empty strings are allowed\n> > >  // for each field.\n> > >  func ParseGroupResource(gr string) GroupResource {\n> > > -  s := strings.SplitN(gr, \".\", 2)\n> > > -  if len(s) == 1 {\n> > > -      return GroupResource{Resource: s[0]}\n> > > -  if i := strings.Index(gr, \".\"); i == -1 {\n> > > -      return GroupResource{Resource: gr}\n> > > -  } else {\n> > > -      return GroupResource{Group: gr[i+1:], Resource: gr[:i]}\n> > \n> > Does this work properly when i==len-1? I'd expect an index out of bounds.\n> > \n> > —\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/kubernetes/kubernetes/pull/24870/files/d5276ac4486c4e7529e84da91de6b12f0f3b667d#r61299159\n",
        "createdAt" : "2016-04-27T17:41:45Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3c2ee4eafcc943a29670912e31ea586b2bf00a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +68,72 @@\t\treturn GroupResource{Resource: gr}\n\t} else {\n\t\treturn GroupResource{Group: gr[i+1:], Resource: gr[:i]}\n\t}\n}"
  },
  {
    "id" : "2f14637d-f787-4840-b8c6-497af5c68dca",
    "prId" : 24870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd2703e7-f5a5-426a-9b37-d86bdcf0f03b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The identation here is wrong, but maybe this is exactly the same problem as we had before @smarterclayton ?\n[The problem was that we were seeing two different things.]\n",
        "createdAt" : "2016-04-28T06:37:08Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d688cca1-f694-47e0-91de-3e6852dbb3a7",
        "parentId" : "dd2703e7-f5a5-426a-9b37-d86bdcf0f03b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I _think_ so?  I've been seeing bizarre indentation in github, but\ngofmt continues to be a no-op for me.\n",
        "createdAt" : "2016-04-28T13:46:47Z",
        "updatedAt" : "2016-04-28T14:53:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e3c2ee4eafcc943a29670912e31ea586b2bf00a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +31,35 @@\tvar gvr *GroupVersionResource\n\tif strings.Count(arg, \".\") >= 2 {\n\t\ts := strings.SplitN(arg, \".\", 3)\n\t\tgvr = &GroupVersionResource{Group: s[2], Version: s[1], Resource: s[0]}\n\t}"
  },
  {
    "id" : "dc3285c0-f1ef-47cb-b275-948eac4d3dab",
    "prId" : 20511,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edaf3065-cdb3-4605-9d02-f227fc033fdc",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Don't we usually call these `Empty() bool`?  It looks like group_version is the only place that is doing `IsEmpty`, but that's a bigger refactor.  Open a follow up, please.\n",
        "createdAt" : "2016-02-11T15:56:15Z",
        "updatedAt" : "2016-02-12T13:28:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7bdeaa3d-c2f5-41ee-8b0e-21e145345d7c",
        "parentId" : "edaf3065-cdb3-4605-9d02-f227fc033fdc",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Don't we usually call these Empty() bool? It looks like group_version is the only place that is doing IsEmpty, but that's a bigger refactor. Open a follow up, please.\n\nhttps://github.com/kubernetes/kubernetes/issues/21076\n",
        "createdAt" : "2016-02-11T16:22:31Z",
        "updatedAt" : "2016-02-12T13:28:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d0fe7dbf16ad5f0b41b0b542704c53fa99068c5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +57,61 @@}\n\nfunc (gvr GroupVersionResource) IsEmpty() bool {\n\treturn len(gvr.Group) == 0 && len(gvr.Version) == 0 && len(gvr.Resource) == 0\n}"
  },
  {
    "id" : "a37eee52-99e2-4087-a250-5c93bd520487",
    "prId" : 18526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3022470f-7a12-442c-9e82-389faaa77b51",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this doesn't bother me for display, but I really don't want someone trying to parse this... not sure how to prevent that\n",
        "createdAt" : "2015-12-14T21:21:05Z",
        "updatedAt" : "2015-12-17T14:14:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fda7f181299e49dd5f28405952ee76821eab74c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +42,46 @@\t\treturn gr.Resource\n\t}\n\treturn gr.Resource + \".\" + gr.Group\n}\n"
  },
  {
    "id" : "20e2186f-f749-4553-9076-59a5f38cc273",
    "prId" : 18473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b9543c-23e7-46d5-a83d-48b173ea948a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm less than thrilled with this.  I was hoping to avoid having enough string representations of `apiVersion` and `kind` to ever want this method.  Can this be made local to its point of use?  Or maybe take a `TypeMeta`?\n",
        "createdAt" : "2015-12-11T13:10:50Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0800dfb8-b534-49ef-b065-3813eaddf7bc",
        "parentId" : "08b9543c-23e7-46d5-a83d-48b173ea948a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's adapting internal old code.  I'll add a TODO that this should go away.\n\nOn Fri, Dec 11, 2015 at 8:11 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/api/unversioned/group_version.go\n> https://github.com/kubernetes/kubernetes/pull/18473#discussion_r47353057\n> :\n> \n> > @@ -198,3 +198,46 @@ func (gv *GroupVersion) UnmarshalJSON(value []byte) error {\n> >  func (gv *GroupVersion) UnmarshalText(value []byte) error {\n> >     return gv.unmarshal(value)\n> >  }\n> > +\n> > +// ToAPIVersionAndKind is a convenience method for satisfying runtime.Object on types that\n> > +// do not use TypeMeta.\n> > +func (gvk *GroupVersionKind) ToAPIVersionAndKind() (string, string) {\n> > -   if gvk == nil {\n> > -       return \"\", \"\"\n> > -   }\n> > -   return gvk.GroupVersion().String(), gvk.Kind\n> >   +}\n> >   +\n> >   +// FromAPIVersionAndKind returns a GVK representing the provided fields for types that\n> >   +// do not use TypeMeta.\n> >   +func FromAPIVersionAndKind(apiVersion, kind string) *GroupVersionKind {\n> \n> I'm less than thrilled with this. I was hoping to avoid having enough\n> string representations of apiVersion and kind to ever want this method.\n> Can this be made local to its point of use? Or maybe take a TypeMeta?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18473/files#r47353057.\n",
        "createdAt" : "2015-12-11T19:41:57Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b213b71b-637e-46c7-aed0-e65e1cbfe7fa",
        "parentId" : "08b9543c-23e7-46d5-a83d-48b173ea948a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It's adapting internal old code.  I'll add a TODO that this should go away.\n\nok\n",
        "createdAt" : "2015-12-11T19:44:37Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1c02de79-b8d7-4a05-9a2b-d42e698225d5",
        "parentId" : "08b9543c-23e7-46d5-a83d-48b173ea948a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated, PTAL\n\nOn Fri, Dec 11, 2015 at 2:44 PM, David Eads notifications@github.com\nwrote:\n\n> In pkg/api/unversioned/group_version.go\n> https://github.com/kubernetes/kubernetes/pull/18473#discussion_r47396331\n> :\n> \n> > @@ -198,3 +198,46 @@ func (gv *GroupVersion) UnmarshalJSON(value []byte) error {\n> >  func (gv *GroupVersion) UnmarshalText(value []byte) error {\n> >     return gv.unmarshal(value)\n> >  }\n> > +\n> > +// ToAPIVersionAndKind is a convenience method for satisfying runtime.Object on types that\n> > +// do not use TypeMeta.\n> > +func (gvk *GroupVersionKind) ToAPIVersionAndKind() (string, string) {\n> > -   if gvk == nil {\n> > -       return \"\", \"\"\n> > -   }\n> > -   return gvk.GroupVersion().String(), gvk.Kind\n> >   +}\n> >   +\n> >   +// FromAPIVersionAndKind returns a GVK representing the provided fields for types that\n> >   +// do not use TypeMeta.\n> >   +func FromAPIVersionAndKind(apiVersion, kind string) *GroupVersionKind {\n> \n> It's adapting internal old code. I'll add a TODO that this should go away.\n> \n> ok\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18473/files#r47396331.\n",
        "createdAt" : "2015-12-11T21:18:23Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f203a28f1d17b9371673ff147aa7e8f34f093f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +213,217 @@// that have a distinct group and kind.\n// TODO: further reduce usage of this method.\nfunc FromAPIVersionAndKind(apiVersion, kind string) *GroupVersionKind {\n\tif gv, err := ParseGroupVersion(apiVersion); err == nil {\n\t\treturn &GroupVersionKind{Group: gv.Group, Version: gv.Version, Kind: kind}"
  },
  {
    "id" : "984cd296-9c7f-4d00-b33c-590139c516fc",
    "prId" : 18473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ae99f9-bfa9-40c0-8525-10fbf513f41c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@caesarxuchao This comment relates to https://github.com/kubernetes/kubernetes/issues/17216#issuecomment-163787857.\n\n@smarterclayton See the linked comment.\n",
        "createdAt" : "2015-12-11T13:12:52Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f203a28f1d17b9371673ff147aa7e8f34f093f5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +223,227 @@// by serialization to set type information from the Scheme onto the serialized version of an object.\n// For objects that cannot be serialized or have unique requirements, this interface may be a no-op.\n// TODO: this belongs in pkg/runtime, move unversioned.GVK into runtime.\ntype ObjectKind interface {\n\t// SetGroupVersionKind sets or clears the intended serialized kind of an object. Passing kind nil"
  },
  {
    "id" : "2fded5ed-ef93-479c-94b2-b7b1c666060d",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17c66e6f-2689-41cc-9fe7-399128299d00",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: godoc\n",
        "createdAt" : "2015-11-19T19:32:27Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : null,
    "diffHunk" : "@@ -1,1 +51,55 @@\n// IsEmpty returns true if group and version are empty\nfunc (gv GroupVersion) IsEmpty() bool {\n\treturn len(gv.Group) == 0 && len(gv.Version) == 0\n}"
  },
  {
    "id" : "1326773d-a77a-4816-9454-e8b325e31d87",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a42d16a7-5f14-420e-baa0-48abfca7979b",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit godoc\n",
        "createdAt" : "2015-11-19T19:35:10Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\n// WithKind creates a GroupVersionKind based on the method receiver's GroupVersion and the passed Kind.\nfunc (gv GroupVersion) WithKind(kind string) GroupVersionKind {\n\treturn GroupVersionKind{Group: gv.Group, Version: gv.Version, Kind: kind}\n}"
  },
  {
    "id" : "da03b01e-536a-4c94-a414-ee0d3b08f99b",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84b4780f-ea6e-42a7-ad39-90426af55a95",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The comment is wrong, it not for kube, it's for v1. [edit] \"legacy v1\" is more accurate.\n\nSo both \"\" and \"/\" will be interpreted as the internal version for v1? How about we only allow \"\"?\n",
        "createdAt" : "2015-11-19T23:34:18Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e3c227ad-4c26-4a30-95bc-5e2d6657dbb9",
        "parentId" : "84b4780f-ea6e-42a7-ad39-90426af55a95",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think this is also temporary so never mind.\n",
        "createdAt" : "2015-11-20T01:01:14Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@\t// this can be the internal version for the legacy kube types\n\t// TODO once we've cleared the last uses as strings, this special case should be removed.\n\tif (len(gv) == 0) || (gv == \"/\") {\n\t\treturn GroupVersion{}, nil\n\t}"
  },
  {
    "id" : "0d87d3eb-b7f6-4f87-9747-134e7aa72b5a",
    "prId" : 17175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146552c0-7c22-4ad8-a064-41d9af08cceb",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This is also the first function I added.\n",
        "createdAt" : "2015-11-12T20:54:30Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c725f17ea4d83088050ce75e64f6f42ac7f96aa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +57,61 @@}\n\nfunc ParseGroupVersionOrDie(gv string) GroupVersion {\n\tret, err := ParseGroupVersion(gv)\n\tif err != nil {"
  },
  {
    "id" : "298d00af-e127-4095-92eb-25c782c94041",
    "prId" : 16834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I really don't like this.  I'd vastly prefer to update the code to handle a properly parsing name of \"/v1\"\n",
        "createdAt" : "2015-11-05T12:43:26Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "32986b4c-af04-420d-b60c-df0f7cced534",
        "parentId" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "But we need to be backward-compatible with our v1, where APIVersion field is \"v1\", right? IMO having \"v1\" and \"/v1\" in the same time will be more confusing.\n",
        "createdAt" : "2015-11-05T18:09:04Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5f7c4c5d-3a59-468d-ab82-175eec7770b3",
        "parentId" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> But we need to be backward-compatible with our v1, where APIVersion field is \"v1\", right? IMO having \"v1\" and \"/v1\" in the same time will be more confusing.\n\nAllowing `v1` externally does not mean that it couldn't be `/v1` in the code.\n",
        "createdAt" : "2015-11-05T18:13:16Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7ec43984-4420-4d83-adb7-c2c0b0c56133",
        "parentId" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "IMO, internally we should use the GroupAndVersion struct or GroupAndVersion.String() and avoid using the \"group/version\" string directly. If we need \"version\" only, we should use GroupAndVersion.Version(). Anyway, we should avoid using string directly. I think that will solve most confusions in the code. Is there any counter example?\n",
        "createdAt" : "2015-11-05T18:32:12Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "35ab397b-85d3-4fab-a4ca-bee8e1a80818",
        "parentId" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "make the special case even special-er; only if group is \"\" and version is \"v1\" may the / be omitted.\n",
        "createdAt" : "2015-11-05T18:38:18Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "10df84e5-ab4b-4427-87ca-bb3c7c81fa41",
        "parentId" : "a12c6321-fd26-4208-8e63-837f62d31b62",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "addressed lavalamp's comment.\n",
        "createdAt" : "2015-11-05T21:47:29Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f012ae0366aa876c21b32174e7b1b693f64bbff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +35,39 @@\t// special case of \"v1\" for backward compatibility\n\tif gv.Group == \"\" && gv.Version == \"v1\" {\n\t\treturn gv.Version\n\t} else {\n\t\treturn gv.Group + \"/\" + gv.Version"
  },
  {
    "id" : "53775955-d563-47f4-a1dc-80f2bb8a9b0b",
    "prId" : 16834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29baec75-02d9-4dcb-92e8-b1906c4cbc4d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't think you need this check here?\n",
        "createdAt" : "2015-11-05T18:40:24Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6829a369-beb1-4973-8425-f98377d48bac",
        "parentId" : "29baec75-02d9-4dcb-92e8-b1906c4cbc4d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do you mean this condition does not hold anymore or I should move this check to somewhere else?\n",
        "createdAt" : "2015-11-05T18:42:26Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "59d50cb1-61c9-4d18-8dee-33c97b55310b",
        "parentId" : "29baec75-02d9-4dcb-92e8-b1906c4cbc4d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The condition is true, but why would gv.String() produce something that\nviolates the condition? I mean, it also doesn't hurt to check it, I guess.\n\nOn Thu, Nov 5, 2015 at 10:42 AM, Chao Xu notifications@github.com wrote:\n\n> In pkg/api/unversioned/group_version.go\n> https://github.com/kubernetes/kubernetes/pull/16834#discussion_r44050629\n> :\n> \n> > -   s := strings.Split(gv, \"/\")\n> > -   // \"v1\" is the only special case. Otherwise GroupVersion is expected to contain\n> > -   // one \"/\" dividing the string into two parts.\n> > -   if len(s) == 1 && gv == \"v1\" {\n> > -       return GroupAndVersion{\"\", \"v1\"}, nil\n> > -   } else if len(s) == 2 {\n> > -       return GroupAndVersion{s[0], s[1]}, nil\n> > -   } else {\n> > -       return GroupAndVersion{}, fmt.Errorf(\"Unexpected GroupVersion string: %v\", gv)\n> > -   }\n> >   +}\n> >   +\n> >   +// MarshalJSON implements the json.Marshaller interface.\n> >   +func (gv GroupAndVersion) MarshalJSON() ([]byte, error) {\n> > -   s := gv.String()\n> > -   if strings.Count(s, \"/\") > 1 {\n> \n> Do you mean this condition does not hold anymore or I should move this\n> check to somewhere else?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16834/files#r44050629.\n",
        "createdAt" : "2015-11-05T18:44:41Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a486a051-6481-493f-9738-5059cc28a493",
        "parentId" : "29baec75-02d9-4dcb-92e8-b1906c4cbc4d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This error won't occur if people construct the GroupVersion struct using ParseGroupVersion() function. However, if they initialize the struct with problematic \"group\" or \"version\" string, then we need to detect the error either here or in gv.String().\n",
        "createdAt" : "2015-11-05T21:39:59Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "1bab34a0-0a31-4fc0-8dc5-ac4b21b9f944",
        "parentId" : "29baec75-02d9-4dcb-92e8-b1906c4cbc4d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Fair enough.\n",
        "createdAt" : "2015-11-05T21:51:37Z",
        "updatedAt" : "2015-11-05T23:50:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f012ae0366aa876c21b32174e7b1b693f64bbff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@func (gv GroupVersion) MarshalJSON() ([]byte, error) {\n\ts := gv.String()\n\tif strings.Count(s, \"/\") > 1 {\n\t\treturn []byte{}, fmt.Errorf(\"illegal GroupVersion %v: contains more than one /\", s)\n\t}"
  }
]