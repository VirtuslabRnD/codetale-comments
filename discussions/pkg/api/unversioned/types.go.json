[
  {
    "id" : "252fc526-3126-4e86-9b20-ccf11b4d1b4f",
    "prId" : 20626,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b4a8ca3-e893-44f8-b6d5-215cd2f0535f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Will we ever omit the port? I think we have to include it all the time?\n",
        "createdAt" : "2016-02-11T18:07:29Z",
        "updatedAt" : "2016-02-18T19:58:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "67924251-99b5-46b1-ba95-9bddd2ffbfbc",
        "parentId" : "1b4a8ca3-e893-44f8-b6d5-215cd2f0535f",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I guess we can omit it if its 80?\n",
        "createdAt" : "2016-02-12T02:43:05Z",
        "updatedAt" : "2016-02-18T19:58:42Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "64767b39-c0f2-449f-aded-ba5d2da6244d",
        "parentId" : "1b4a8ca3-e893-44f8-b6d5-215cd2f0535f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Won't it always be https? so 443 :) But yeah, I guess it's not a big deal.\n",
        "createdAt" : "2016-02-16T17:56:16Z",
        "updatedAt" : "2016-02-18T19:58:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ce4aed0e0bac8b3c6fe1664645914dd8a81c90",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +353,357 @@\tClientCIDR string `json:\"clientCIDR\"`\n\t// Address of this server, suitable for a client that matches the above CIDR.\n\t// This can be a hostname, hostname:port, IP or IP:port.\n\tServerAddress string `json:\"serverAddress\"`\n}"
  },
  {
    "id" : "4af8a3dc-546f-42cc-9a83-ab92b62b6452",
    "prId" : 20626,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db6cdd26-030c-4e70-b237-b3050fbbac00",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "To help clients reach servers in the most network-efficient way possible, a map of client CIDR to a server address believed reachable and ideal from that CIDR.\n",
        "createdAt" : "2016-02-11T18:10:01Z",
        "updatedAt" : "2016-02-18T19:58:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "37c6f12d-56b4-44a7-8f2a-ccb62eb241b0",
        "parentId" : "db6cdd26-030c-4e70-b237-b3050fbbac00",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "added\n",
        "createdAt" : "2016-02-12T02:43:14Z",
        "updatedAt" : "2016-02-18T19:58:42Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ce4aed0e0bac8b3c6fe1664645914dd8a81c90",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +309,313 @@\t// versions are the api versions that are available.\n\tVersions []string `json:\"versions\"`\n\t// a map of client CIDR to server address that is serving this group.\n\t// This is to help clients reach servers in the most network-efficient way possible.\n\t// Clients can use the appropriate server address as per the CIDR that they match."
  },
  {
    "id" : "f3dc1ba4-c69d-4fc2-968f-9d0a02c5fd1d",
    "prId" : 19380,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f3c091b-d286-44de-8a8e-426393978e3f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This leaks internal go type names into our API. @bgrant0607 \n",
        "createdAt" : "2016-02-08T20:50:46Z",
        "updatedAt" : "2016-02-08T20:50:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "19516dea-7dea-4bb2-b589-2a0b490ba695",
        "parentId" : "4f3c091b-d286-44de-8a8e-426393978e3f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This leaks internal go type names into our API. @bgrant0607\n\n`kind` isn't necessarily the same as the go type name.  This is `kind` in the `RESTMapper` sense that uses the `kind` in the JSON serialization.  Or at least that was the intent.\n",
        "createdAt" : "2016-02-08T21:38:02Z",
        "updatedAt" : "2016-02-08T21:38:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "77a31284-2068-4191-949c-ee8c1b33151a",
        "parentId" : "4f3c091b-d286-44de-8a8e-426393978e3f",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "As mentioned in the issue, `kind` is already part of the API.\n",
        "createdAt" : "2016-02-08T21:51:15Z",
        "updatedAt" : "2016-02-08T21:51:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "79533385cf4999a02109aa203cbc78b710148c97",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +340,344 @@\t// namespaced indicates if a resource is namespaced or not.\n\tNamespaced bool `json:\"namespaced\"`\n\t// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')\n\tKind string `json:\"kind\"`\n}"
  },
  {
    "id" : "61c32eb5-8170-4883-8c0f-182bce2f9c02",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm just about certain that we'll end up needing the full Group,Version,Kind to properly support something like Scale.  Do you want to nest this into a prettier structure?\n",
        "createdAt" : "2016-01-12T14:07:45Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0dfb07d7-08ef-4ffa-941c-443ea5a6ae50",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "API resource is served under a specific GroupVersion (e.g. `/apis/company.com/v1`) so it seems redundant.\n",
        "createdAt" : "2016-01-15T21:27:53Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "c28fba4d-1934-4c23-abea-a746ef89e0a2",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> API resource is served under a specific GroupVersion (e.g. /apis/company.com/v1) so it seems redundant.\n\nConsider `replicationcontrollers/scale`.  In the end it should live in the \"\" group, but accept a kind from the \"extensions\" group.  Its a general problem we have with that sort of endpoint, since something like the HPA controller should be able to scale anything in any group.\n",
        "createdAt" : "2016-01-15T21:38:13Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "432ccea2-e38f-4c37-ace7-0a65677d5bf6",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "As far as I know there is no affordance (currently) for serving APIResource objects for subresources.  If we wanted to do that we'd probably need to have a full sub-object here anyway, seems beyond the scope of this PR.\n",
        "createdAt" : "2016-01-19T20:01:21Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "738f2ca7-35bd-46ae-85ba-f95bcb7b38a1",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Subresources need to be handled differently.\n",
        "createdAt" : "2016-01-26T19:37:37Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "22c8cd48-ccde-403f-b086-b235a1821365",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "`kind` is definitely needed in order to support non-hardcoded discovery from kubectl. \n\nWe'll also need a list of subresources, such as scale, supported by the resource, but that doesn't need to be added by this PR.\n\ncc @lavalamp \n",
        "createdAt" : "2016-01-26T19:43:23Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5197871e-dfa1-46f0-80f2-dc81a3e91b74",
        "parentId" : "5a97ee55-c0df-4ef9-8cca-e33ec707a2b5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "kind has been added:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/api/unversioned/types.go#L351\n",
        "createdAt" : "2016-02-12T03:01:41Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +374,378 @@\tNamespaced bool `json:\"namespaced\"`\n\t// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')\n\tKind string `json:\"kind\"`\n}\n"
  },
  {
    "id" : "5ca6d603-5fc5-487f-9f71-f8532662a79f",
    "prId" : 16628,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a28d0069-1250-4a1b-8bb5-d22a924e17ca",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp, this actually is an API change. [edit] Let me know if it's appropriate.\n",
        "createdAt" : "2015-11-11T21:44:29Z",
        "updatedAt" : "2015-11-25T18:27:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bf48598d-9dfc-4e46-bf41-01f292b5dfdd",
        "parentId" : "a28d0069-1250-4a1b-8bb5-d22a924e17ca",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Right, it's totally fine to add this status code to the api. The thing I was talking about was the range of codes we could possibly return from a given request. I don't think we consider that part of the API, or at least it's not written down places. I could be wrong?\n",
        "createdAt" : "2015-11-11T22:09:15Z",
        "updatedAt" : "2015-11-25T18:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b9a4695d-4e6e-4195-881f-ed6bab82de1a",
        "parentId" : "a28d0069-1250-4a1b-8bb5-d22a924e17ca",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Hmm..The status code that will be sent by the server is listed In the api-converions doc, and 410 is not there. https://github.com/kubernetes/kubernetes/blob/master/docs/devel/api-conventions.md#http-status-codes. Does that make the status code part of the API?\n",
        "createdAt" : "2015-11-11T22:27:12Z",
        "updatedAt" : "2015-11-25T18:27:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b0d476bd-4b7c-4a67-8a80-08d409fce7f9",
        "parentId" : "a28d0069-1250-4a1b-8bb5-d22a924e17ca",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Good catch. Please include a change to that doc in this PR!\n\nOn Wed, Nov 11, 2015 at 2:27 PM, Chao Xu notifications@github.com wrote:\n\n> In pkg/api/unversioned/types.go\n> https://github.com/kubernetes/kubernetes/pull/16628#discussion_r44596262\n> :\n> \n> > @@ -162,6 +162,11 @@ const (\n> >     // Status code 409\n> >     StatusReasonConflict StatusReason = \"Conflict\"\n> > -   // StatusReasonGone means the item is no longer available at the server and no\n> > -   // forwarding address is known.\n> > -   // Status code 410\n> > -   StatusReasonGone StatusReason = \"Gone\"\n> \n> Hmm..Status code that will be sent by the server is listed In the\n> api-converions doc, and 410 is not there.\n> https://github.com/kubernetes/kubernetes/blob/master/docs/devel/api-conventions.md#http-status-codes.\n> Does that make the status code part of the API?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16628/files#r44596262.\n",
        "createdAt" : "2015-11-11T23:39:17Z",
        "updatedAt" : "2015-11-25T18:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4700707b386447b85ed112c195efd5648ae999f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +166,170 @@\t// forwarding address is known.\n\t// Status code 410\n\tStatusReasonGone StatusReason = \"Gone\"\n\n\t// StatusReasonInvalid means the requested create or update operation cannot be"
  }
]