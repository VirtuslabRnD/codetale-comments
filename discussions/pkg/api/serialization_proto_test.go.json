[
  {
    "id" : "7a77e64b-6cdc-44d4-a53b-c5ba7fe7b0bf",
    "prId" : 23806,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd5d5382-8cc5-45fb-a2db-42ad5f11da19",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Since this is main proto-serialization-related test, can you please use this ContentTypeProtobuf constant instead (I know it's not that important in tests, but it would make me feel more comfortable :))\n",
        "createdAt" : "2016-04-04T17:39:33Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8c41f194-33d2-4d47-b189-713102cca675",
        "parentId" : "fd5d5382-8cc5-45fb-a2db-42ad5f11da19",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "My concern is that it _shouldn't_ affect any of the serialization - it should only impact whatever the default value selected is in the nesting.  My worry is that mime type is a very special value that needs to be kept located in very specific places, not littered throughout this code.  Serialization doesn't depend on mime types, only nested encoding does (and nested encoding should probably be via a nested encoder that would specify a specific type).\n",
        "createdAt" : "2016-04-04T17:57:45Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4e5b8c82-e874-41d7-9517-3a4f2c88e396",
        "parentId" : "fd5d5382-8cc5-45fb-a2db-42ad5f11da19",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - that makes sense. Thanks for explanation.\n",
        "createdAt" : "2016-04-04T20:04:53Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "68cf9496-db0a-4306-a11e-051921bb7ad1",
        "parentId" : "fd5d5382-8cc5-45fb-a2db-42ad5f11da19",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, I'm digging into why the general serialization is not roundtripping,\nhopefully have that fixed tomorrow\n\nOn Mon, Apr 4, 2016 at 4:05 PM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In pkg/api/serialization_proto_test.go\n> https://github.com/kubernetes/kubernetes/pull/23806#discussion_r58438663\n> :\n> \n> > @@ -38,7 +38,7 @@ import (\n> > \n> >  func init() {\n> >     codecsToTest = append(codecsToTest, func(version unversioned.GroupVersion, item runtime.Object) (runtime.Codec, error) {\n> > -       s := protobuf.NewSerializer(api.Scheme, runtime.ObjectTyperToTyper(api.Scheme))\n> > -       s := protobuf.NewSerializer(api.Scheme, runtime.ObjectTyperToTyper(api.Scheme), \"application/arbitrary.content.type\")\n> \n> OK - that makes sense. Thanks for explanation.\n> \n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23806/files/828d12e0f26fa80d52b22cc46d73f2f883b3b403#r58438663\n",
        "createdAt" : "2016-04-04T20:13:18Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "34749117364be27ac7c6d5826043687210dfed34",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +39,43 @@func init() {\n\tcodecsToTest = append(codecsToTest, func(version unversioned.GroupVersion, item runtime.Object) (runtime.Codec, error) {\n\t\ts := protobuf.NewSerializer(api.Scheme, runtime.ObjectTyperToTyper(api.Scheme), \"application/arbitrary.content.type\")\n\t\treturn api.Codecs.CodecForVersions(s, testapi.ExternalGroupVersions(), nil), nil\n\t})"
  }
]