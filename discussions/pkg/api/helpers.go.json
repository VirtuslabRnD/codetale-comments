[
  {
    "id" : "d87d7e2c-90d2-4b4a-a9d8-cc2b9be7984b",
    "prId" : 33821,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33821#pullrequestreview-2297377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa29f5c0-ed9f-4dec-a191-1e369a51b84b",
        "parentId" : null,
        "authorId" : "a7fec4e8-616c-461c-9f8c-e67dbaa8ea5e",
        "body" : "Does cs[1] can be empty ?\nActually when cs[0] is empty or invalid name format, it can be validated now but cs[1] can't. http://pastebin.test.redhat.com/417014\n",
        "createdAt" : "2016-09-30T09:30:49Z",
        "updatedAt" : "2016-09-30T15:56:47Z",
        "lastEditedBy" : "a7fec4e8-616c-461c-9f8c-e67dbaa8ea5e",
        "tags" : [
        ]
      },
      {
        "id" : "3b81fd86-464c-4a02-8465-07ff67e8184c",
        "parentId" : "aa29f5c0-ed9f-4dec-a191-1e369a51b84b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "An empty string is a completely valid sysctl value. Unfortunately, we hardly know anything about those values.\n\nDuring alpha (when we use annotations, we deliberately assume that at least `=` and `,` are no valid characters in values.\n",
        "createdAt" : "2016-09-30T09:41:57Z",
        "updatedAt" : "2016-09-30T15:56:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6acc08d96ff1fe23a82b29eb29f2dbaf42c44d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +578,582 @@\tfor i, kv := range kvs {\n\t\tcs := strings.Split(kv, \"=\")\n\t\tif len(cs) != 2 || len(cs[0]) == 0 {\n\t\t\treturn nil, fmt.Errorf(\"sysctl %q not of the format sysctl_name=value\", kv)\n\t\t}"
  },
  {
    "id" : "027b07ab-1dad-46e6-b62d-f982b60428cf",
    "prId" : 29183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4e6099-d368-4c51-8e64-9b5489e734e0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc\n",
        "createdAt" : "2016-07-22T00:20:40Z",
        "updatedAt" : "2017-01-21T22:46:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e634c90c648b4b1cba6ed89d1a939ceae7055865",
    "line" : null,
    "diffHunk" : "@@ -1,1 +58,62 @@// NonConvertibleFields iterates over the provided map and filters out all but\n// any keys with the \"non-convertible.kubernetes.io\" prefix.\nfunc NonConvertibleFields(annotations map[string]string) map[string]string {\n\tnonConvertibleKeys := map[string]string{}\n\tfor key, value := range annotations {"
  },
  {
    "id" : "8eb61cc5-6a17-43c4-9190-4ed5420efd90",
    "prId" : 27180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37646bc0-8793-47f7-bfbb-8388d63eed55",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "In the proposal you mentioned `:` as the separator. You use `=` here. I'm ok with either. Just fix this PR or the proposal.\n",
        "createdAt" : "2016-08-20T23:11:42Z",
        "updatedAt" : "2016-08-25T11:22:38Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "803d2869-2c3b-415d-b442-67824a0740ec",
        "parentId" : "37646bc0-8793-47f7-bfbb-8388d63eed55",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Switched to `=` in the proposal. That's more consistent with the sysctl cli tool.\n",
        "createdAt" : "2016-08-21T09:39:15Z",
        "updatedAt" : "2016-08-25T11:22:38Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d7e33034af425e4ea7da76641d6451abfd501e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +441,445 @@\n\t// SysctlsPodAnnotationKey represents the key of sysctls which are set for the infrastructure\n\t// container of a pod. The annotation value is a comma separated list of sysctl_name=value\n\t// key-value pairs. Only a limited set of whitelisted and isolated sysctls is supported by\n\t// the kubelet. Pods with other sysctls will fail to launch."
  },
  {
    "id" : "910a6521-b23f-42eb-b9f2-45a21044f90b",
    "prId" : 24134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47687366-24a4-48c3-84ea-c238cde62659",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "The \"right\" way to implement \"Defaults to Equal\" here is though a defaulting function, see for example\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/defaults.go\n(and all the other files that end in defaults.go)\n\nHowever, I'm not sure defaulting really works for annotations. So I would just suggest to add a TODO here that says\n\n```\n// TODO: Use proper defaulting when Toleration becomes a field of PodSpec\n```\n\n(I was thinking of suggesting to add the TODO  in the comment for the Toleration.Operator field in types.go, but that gets turned into swagger documentation, and it wouldn't make any sense there.)\n",
        "createdAt" : "2016-05-15T00:05:24Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52fb89ff7326b3570e9c42a435081dab559f610b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +475,479 @@\t}\n\t// TODO: Use proper defaulting when Toleration becomes a field of PodSpec\n\tif (len(toleration.Operator) == 0 || toleration.Operator == TolerationOpEqual) && toleration.Value == taint.Value {\n\t\treturn true\n\t}"
  },
  {
    "id" : "f8944b72-7bdf-446d-880c-91b0dda4cdfd",
    "prId" : 10833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7039e91-49f9-4353-a8e9-21955e2f5942",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This returns an unsorted list - is that OK?  It also could have dup values if bad input.  Is that OK?\n\nYou could (totally optional) unpack into a StringSet, then explode that into a list. \n",
        "createdAt" : "2015-07-27T23:08:45Z",
        "updatedAt" : "2015-08-27T19:35:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c36003a2-94f5-4999-b083-c1ddd348115d",
        "parentId" : "c7039e91-49f9-4353-a8e9-21955e2f5942",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This comment is not addressed.  Is it OK that \"RWX,RWO,ROX\" produces a different-but-equivalent slice as \"ROX,RWX,RWO\" ?  Is slice the right structure, or should it be a Set?\n",
        "createdAt" : "2015-08-21T05:39:05Z",
        "updatedAt" : "2015-08-27T19:35:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b6030f50ce54d5caa8f131880ef8fa2d5df8001",
    "line" : null,
    "diffHunk" : "@@ -1,1 +214,218 @@\t\t}\n\t}\n\treturn accessModes\n}\n"
  },
  {
    "id" : "57b9c6ea-b000-4586-81eb-0ccbfea698a3",
    "prId" : 10833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2201e387-3177-40a1-9d26-5d423d233771",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "simpler to do:\n\n```\nmodes := []string{}\nif containsAccessMode(modes, ReadWriteOnce) {\n        modes = append(modes, \"RWO\")\n}\nif containsAccessMode(modes, ReadOnlyMany) {\n        modes = append(modes, \"ROX\")\n}\nif containsAccessMode(modes, ReadWriteMany) {\n        modes = append(modes, \"RWX\")\n}\nreturn strings.Join(modes, \",\")\n```\n",
        "createdAt" : "2015-08-21T05:41:29Z",
        "updatedAt" : "2015-08-27T19:35:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6289f3d3-124b-45de-b2a2-a37d0ea9e0bf",
        "parentId" : "2201e387-3177-40a1-9d26-5d423d233771",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "changed to this suggestion.\n",
        "createdAt" : "2015-08-27T19:41:43Z",
        "updatedAt" : "2015-08-27T19:41:43Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b6030f50ce54d5caa8f131880ef8fa2d5df8001",
    "line" : null,
    "diffHunk" : "@@ -1,1 +195,199 @@\tif containsAccessMode(modes, ReadWriteMany) {\n\t\tmodesStr = append(modesStr, \"RWX\")\n\t}\n\treturn strings.Join(modesStr, \",\")\n}"
  },
  {
    "id" : "52b2c4f0-095d-4bd6-af65-c3849b65ed9d",
    "prId" : 10833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82eeeb65-8cb2-4e04-9be2-973021a57077",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This whole function can be replace with `return util.NewStringSet(modes...).List()`\n",
        "createdAt" : "2015-08-21T05:44:30Z",
        "updatedAt" : "2015-08-27T19:35:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a68ae9d6-adb3-4e88-8150-c4e8295b8f46",
        "parentId" : "82eeeb65-8cb2-4e04-9be2-973021a57077",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Can't because of typing.  I would need a loop anyway.\n\n`cannot use modes (type []PersistentVolumeAccessMode) as type []string in argument to util.NewStringSet`\n",
        "createdAt" : "2015-08-27T19:41:23Z",
        "updatedAt" : "2015-08-27T19:41:23Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b6030f50ce54d5caa8f131880ef8fa2d5df8001",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +219,223 @@// removeDuplicateAccessModes returns an array of access modes without any duplicates\nfunc removeDuplicateAccessModes(modes []PersistentVolumeAccessMode) []PersistentVolumeAccessMode {\n\taccessModes := []PersistentVolumeAccessMode{}\n\tfor _, m := range modes {\n\t\tif !containsAccessMode(accessModes, m) {"
  },
  {
    "id" : "d9c29af1-0769-4805-bdc0-0255221700af",
    "prId" : 10833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc53d30d-41d8-4dfb-970f-23d4c7930770",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I have to ask again - is slice the right abstraction for passing this around?  Or should we extract it from API into a StringSet and use that all over?\n",
        "createdAt" : "2015-08-21T05:45:25Z",
        "updatedAt" : "2015-08-27T19:35:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "18918c20-b35e-4f7d-8bf1-52e7ba4b6ed0",
        "parentId" : "bc53d30d-41d8-4dfb-970f-23d4c7930770",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I'm in favor of converting into strings internally and working with them that way.  The typedef in the API is mainly about validating that you get the correct values, is it not?\n",
        "createdAt" : "2015-08-27T19:39:35Z",
        "updatedAt" : "2015-08-27T19:39:35Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "24b63b1b-e248-46d4-9375-eb85bf6a3f97",
        "parentId" : "bc53d30d-41d8-4dfb-970f-23d4c7930770",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Is order guaranteed in a StringSet?  As a Set, I presume not.\n\nPVs are indexed once -- under their stringified access modes.  The helper funcs always create consistent strings for indexing those PVs.\n",
        "createdAt" : "2015-08-27T19:40:46Z",
        "updatedAt" : "2015-08-27T19:40:46Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b6030f50ce54d5caa8f131880ef8fa2d5df8001",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +228,232 @@}\n\nfunc containsAccessMode(modes []PersistentVolumeAccessMode, mode PersistentVolumeAccessMode) bool {\n\tfor _, m := range modes {\n\t\tif m == mode {"
  },
  {
    "id" : "8a903338-14c4-4a82-9f8b-58c3eb5842c8",
    "prId" : 5117,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4c8e295-5824-4bd8-9ab8-a064f5bbe772",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we fuzz properly we should be able to use .UTC() here right?\n",
        "createdAt" : "2015-03-06T06:22:12Z",
        "updatedAt" : "2015-03-06T06:22:12Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "edec53bc-8903-41ea-b0a4-133a1de7f617",
        "parentId" : "c4c8e295-5824-4bd8-9ab8-a064f5bbe772",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, thanks for changing it.\n",
        "createdAt" : "2015-03-06T18:45:29Z",
        "updatedAt" : "2015-03-06T18:45:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ef3777192e43fc719ebfd2fc03dd49bbcdabaa3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +62,66 @@\t},\n\tfunc(a, b util.Time) bool {\n\t\treturn a.Unix() == b.Unix()\n\t},\n)"
  },
  {
    "id" : "fe31c0e1-adfa-4ebc-ba3d-25478feb60ee",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c2e6c39-8856-40a8-bb7d-3af78b45d307",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why `&grace`?\n",
        "createdAt" : "2015-03-19T00:37:08Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +83,87 @@// use &api.DeleteOptions{} directly.\nfunc NewDeleteOptions(grace int64) *DeleteOptions {\n\treturn &DeleteOptions{GracePeriodSeconds: &grace}\n}"
  },
  {
    "id" : "3817e3c1-6e5c-4eb7-9316-853b7c829659",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d60c5c0-be77-4e93-9f6a-9b4dccd82477",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "@vishh These new resources are going to be official kubernetes resources, and are valid in a ResourceList in the context of a ResourceQuota, but they aren't valid in the context of a Pod's or Container's limit.  Does that matter?  I can't tell your intent because ValidateResourceName isn't used yet AFAICS.\n",
        "createdAt" : "2015-01-27T00:42:07Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +63,67 @@)\n\nvar standardResources = util.NewStringSet(\n\tstring(ResourceMemory),\n\tstring(ResourceCPU),"
  },
  {
    "id" : "4589f36b-b431-4053-b181-9b3c49e8f16b",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19909354-bf91-4c11-89bb-13a578c610b5",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "What about ResouceResourceQuotas?\n",
        "createdAt" : "2015-01-27T00:42:40Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "52220337-dc22-494d-89af-12d517698127",
        "parentId" : "19909354-bf91-4c11-89bb-13a578c610b5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It's there already.  \n",
        "createdAt" : "2015-01-27T00:47:15Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "d4275dbf-ac66-4bfc-b219-d01804f50c67",
        "parentId" : "19909354-bf91-4c11-89bb-13a578c610b5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Sorry, it's not named as in your comment.  Will update. \n",
        "createdAt" : "2015-01-27T00:47:46Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +69,73 @@\tstring(ResourceQuotas),\n\tstring(ResourceServices),\n\tstring(ResourceReplicationControllers))\n\nfunc IsStandardResourceName(str string) bool {"
  },
  {
    "id" : "fc24fb87-4674-4220-af89-886ca5bc9f89",
    "prId" : 3588,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e28cb6fb-3402-4630-8c2d-56bea15a8896",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why not init a StringSet with the valid value, then just test .Has() ?\n",
        "createdAt" : "2015-01-23T06:07:27Z",
        "updatedAt" : "2015-01-23T22:18:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5d55390f-2411-4dd1-bb4b-a8321159b283",
        "parentId" : "e28cb6fb-3402-4630-8c2d-56bea15a8896",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Din't know about StringSet. Done.\n",
        "createdAt" : "2015-01-23T19:47:11Z",
        "updatedAt" : "2015-01-23T22:18:06Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c32295a1808cad81165d389517bbc1a022d94013",
    "line" : null,
    "diffHunk" : "@@ -1,1 +65,69 @@var standardResources = util.NewStringSet(string(ResourceMemory), string(ResourceCPU))\n\nfunc IsStandardResourceName(str string) bool {\n\treturn standardResources.Has(str)\n}"
  },
  {
    "id" : "3c574062-eeb7-425c-be80-ef968d740629",
    "prId" : 3351,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7eb8fb5c-f0f5-47ba-94d4-ead4210391ce",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can't you just say %T rather than using reflect?\n",
        "createdAt" : "2015-01-09T04:01:11Z",
        "updatedAt" : "2015-01-09T04:01:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2cac9ece-d78e-4e89-8506-b19fed946812",
        "parentId" : "7eb8fb5c-f0f5-47ba-94d4-ead4210391ce",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Cool, didn't know that one--doesn't seem to work with spew, though.\n",
        "createdAt" : "2015-01-09T18:22:59Z",
        "updatedAt" : "2015-01-09T18:22:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd7b457d9c0cd377ad90a32ede4512ee276a3427",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +37,41 @@\treturn spew.Sprintf(\n\t\t\"Conversion error: %s. (in: %v(%+v) out: %v)\",\n\t\tc.Message, reflect.TypeOf(c.In), c.In, reflect.TypeOf(c.Out),\n\t)\n}"
  },
  {
    "id" : "ecdbe0f3-dda4-4d46-9147-433a65b29c5f",
    "prId" : 3351,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94936354-1b8b-450e-a6b4-12b877c65baf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can they both be nil?\n",
        "createdAt" : "2015-01-09T04:02:10Z",
        "updatedAt" : "2015-01-09T04:02:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8ad65519-e393-4b05-b1be-996fccc4a143",
        "parentId" : "94936354-1b8b-450e-a6b4-12b877c65baf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It only takes one nil to cause a crash on the next line...\n",
        "createdAt" : "2015-01-09T18:22:29Z",
        "updatedAt" : "2015-01-09T18:22:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "23947985-9473-466f-902d-10256c615c5b",
        "parentId" : "94936354-1b8b-450e-a6b4-12b877c65baf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's subtle-- if both are nil, the first if will catch it; MilliValue() is safe to call and returns zero in that case.\n",
        "createdAt" : "2015-01-09T18:24:06Z",
        "updatedAt" : "2015-01-09T18:24:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f43089da-2575-4fac-8ff6-4f1777815bf1",
        "parentId" : "94936354-1b8b-450e-a6b4-12b877c65baf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is it legit to call a method on a nil object?\n",
        "createdAt" : "2015-01-09T20:07:10Z",
        "updatedAt" : "2015-01-09T20:07:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d6a252c0-811a-4d07-9e8c-6df39e423c38",
        "parentId" : "94936354-1b8b-450e-a6b4-12b877c65baf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Note that a & b can't be nil. I made quantities safe to use in an uninitialized state.\n",
        "createdAt" : "2015-01-09T21:00:29Z",
        "updatedAt" : "2015-01-09T21:00:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd7b457d9c0cd377ad90a32ede4512ee276a3427",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +56,60 @@\t\t\treturn true\n\t\t}\n\t\tif a.Amount == nil || b.Amount == nil {\n\t\t\treturn false\n\t\t}"
  }
]