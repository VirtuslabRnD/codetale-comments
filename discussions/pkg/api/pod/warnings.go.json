[
  {
    "id" : "c89b063e-4ca4-4e87-bac9-c001c28f0778",
    "prId" : 102186,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102186#pullrequestreview-664715604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f4ccc60-fca4-4026-ba8e-61969f014097",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "please add a unit test exercising this warning (there's an existing one for photon you can replicate)",
        "createdAt" : "2021-05-20T18:05:23Z",
        "updatedAt" : "2021-05-20T18:06:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d8f8d789-8bba-4a7a-b19c-a34f29faebd8",
        "parentId" : "9f4ccc60-fca4-4026-ba8e-61969f014097",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "Done",
        "createdAt" : "2021-05-20T18:13:05Z",
        "updatedAt" : "2021-05-20T18:13:05Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc089c0400c2abdc5601eea0436f7c2e66083124",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\twarnings = append(warnings, fmt.Sprintf(\"%s: deprecated in v1.11\", fieldPath.Child(\"spec\", \"volumes\").Index(i).Child(\"gitRepo\")))\n\t\t}\n\t\tif v.ScaleIO != nil {\n\t\t\twarnings = append(warnings, fmt.Sprintf(\"%s: deprecated in v1.16, non-functional in v1.22+\", fieldPath.Child(\"spec\", \"volumes\").Index(i).Child(\"scaleIO\")))\n\t\t}"
  },
  {
    "id" : "8f83fa11-4e3e-4018-8c7b-5efe39deb410",
    "prId" : 101688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101688#pullrequestreview-658343961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53beb9fc-9f42-4dbb-9a69-8c139f3277f2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I admit i teared up a bit when i saw you fixing bugs with warnings.  Beautiful.",
        "createdAt" : "2021-05-12T20:24:36Z",
        "updatedAt" : "2021-05-12T20:24:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f669796dfdc001c4426751a419c0fc29b5b66d60",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@\t}\n\n\t// duplicate imagePullSecrets (#91629, #58477)\n\tif len(podSpec.ImagePullSecrets) > 1 {\n\t\titems := sets.NewString()"
  },
  {
    "id" : "bd8307a9-1f1e-4f40-8b8b-eee8d8c461db",
    "prId" : 101688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101688#pullrequestreview-658466623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb4d4226-f6f3-43e4-bd9c-c38895a1ab01",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This will allocate a bunch.  Not the end of the world, but is something to keep in mind ",
        "createdAt" : "2021-05-12T20:26:05Z",
        "updatedAt" : "2021-05-12T20:26:38Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "eae655fd-3c71-44ff-be50-334bb44d5287",
        "parentId" : "eb4d4226-f6f3-43e4-bd9c-c38895a1ab01",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "benchmarks don't show it allocating more than creating a single string set and clearing/reusing it",
        "createdAt" : "2021-05-12T23:25:35Z",
        "updatedAt" : "2021-05-12T23:25:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f669796dfdc001c4426751a419c0fc29b5b66d60",
    "line" : 209,
    "diffHunk" : "@@ -1,1 +207,211 @@\t// duplicate volume names (#78266, #58477)\n\tif len(podSpec.Volumes) > 1 {\n\t\titems := sets.NewString()\n\t\tfor i, item := range podSpec.Volumes {\n\t\t\tif items.Has(item.Name) {"
  },
  {
    "id" : "044567ee-ac72-46b1-8aa4-79ee35dca43c",
    "prId" : 101688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101688#pullrequestreview-663393560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "While it would be uglier, it would be better to reuse one string set on this entire function and reset before use.",
        "createdAt" : "2021-05-12T20:27:21Z",
        "updatedAt" : "2021-05-12T20:27:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fd42ba20-18df-4165-9d05-940152e83f26",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "how much better? benchmarks didn't look that concerning to me\r\n\r\n```\r\nBenchmarkNoWarnings-12    \t  491527\t      2534 ns/op\t     336 B/op\t       7 allocs/op\r\n```\r\n\r\nclearing and reusing that set between blocks actually made the benchmark worse:\r\n\r\n```\r\nBenchmarkNoWarnings-12    \t  521125\t      2552 ns/op\t     528 B/op\t       9 allocs/op\r\n```",
        "createdAt" : "2021-05-12T20:35:02Z",
        "updatedAt" : "2021-05-12T20:35:02Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "caf59707-83ca-4c39-8f3b-b811a1ebd6fa",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't know how clearing and reusing could make it worse - how did you clear?",
        "createdAt" : "2021-05-12T21:42:33Z",
        "updatedAt" : "2021-05-12T21:42:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5bfd4072-ea2e-4c8f-af4f-80fdad53a84b",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is a bug in the set - it should have a Clear() or Reset() method that does `for k := range m { delete(m, k) }` which the go compiler optimizes to \"clear but reuse buckets\", which is roughly free",
        "createdAt" : "2021-05-12T21:44:41Z",
        "updatedAt" : "2021-05-12T21:44:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6cd643f4-72bb-4254-ba92-45fd33471517",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm... reworked my clearing, dropped it back down to the original, but no cheaper than a new set per block:\r\n\r\n```diff\r\n+func clear(items sets.String) {\r\n+       for k := range items {\r\n+               delete(items, k)\r\n+       }\r\n+}\r\n+\r\n func warningsForPodSpecAndMeta(fieldPath *field.Path, podSpec *api.PodSpec, meta *metav1.ObjectMeta, oldPodSpec *api.PodSpec, oldMeta\r\n        var warnings []string\r\n+       var items sets.String\r\n\r\n        // use of deprecated node labels in selectors/affinity/topology\r\n        for k := range podSpec.NodeSelector {\r\n@@ -159,7 +166,11 @@ func warningsForPodSpecAndMeta(fieldPath *field.Path, podSpec *api.PodSpec, meta\r\n\r\n        // duplicate hostAliases (#91670, #58477)\r\n        if len(podSpec.HostAliases) > 1 {\r\n-               items := sets.NewString()\r\n+               if items == nil {\r\n+                       items = sets.NewString()\r\n+               } else {\r\n+                       clear(items)\r\n+               }\r\n...\r\n```\r\n\r\n```\r\nBenchmarkNoWarnings-12    \t  702271\t      1959 ns/op\t     336 B/op\t       7 allocs/op\r\n```",
        "createdAt" : "2021-05-12T21:49:11Z",
        "updatedAt" : "2021-05-12T21:49:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2c67bb7d-068c-47a7-8e1a-d4a5e873411f",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is there another way I should be benchmarking to demonstrate the value of the increased ugliness?",
        "createdAt" : "2021-05-12T23:26:04Z",
        "updatedAt" : "2021-05-12T23:26:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "15ba03bd-6765-4b93-a0a0-504ef32ab573",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Are you comfortable with me getting a rain check to come back later and frown at the impact it has and volunteering to review any slight ugliness I add later?  I'm comfortable deferring since micro didn't improve.",
        "createdAt" : "2021-05-19T15:56:06Z",
        "updatedAt" : "2021-05-19T15:56:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "de85d571-548a-46a6-b789-c5546ac175cb",
        "parentId" : "7e69664b-cf00-4bf3-b5cd-90e6c4a31d7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "sure, happy to review ugly accompanied by good tests and benchmark proving it's worth it",
        "createdAt" : "2021-05-19T15:57:55Z",
        "updatedAt" : "2021-05-19T15:57:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f669796dfdc001c4426751a419c0fc29b5b66d60",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +242,246 @@\t\t// duplicate containers[*].env (#86163, #93266, #58477)\n\t\tif len(c.Env) > 1 {\n\t\t\titems := sets.NewString()\n\t\t\tfor i, item := range c.Env {\n\t\t\t\tif items.Has(item.Name) {"
  }
]