[
  {
    "id" : "816b6e30-81a5-4cf5-9a2c-a55a4a6488fe",
    "prId" : 89225,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89225#pullrequestreview-377782283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fdf65f6-d36b-4738-905f-0c574f7f832a",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i don't think we can do that. the apparmor feature is considered Beta still:\r\nhttps://kubernetes.io/docs/tutorials/clusters/apparmor/\r\n\r\ncan be possibly moved under a separate package, somewhere under:\r\n`k8s.io/api`\r\n\r\ncc @tallclair \r\n/sig auth\r\n",
        "createdAt" : "2020-03-18T20:23:59Z",
        "updatedAt" : "2020-04-06T14:22:22Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "9820fd11-c8a4-4bfd-8506-37e42affa555",
        "parentId" : "6fdf65f6-d36b-4738-905f-0c574f7f832a",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "My reasoning was that the seccomp constants are also beta but they live in k8s.io/api/core/v1. Happy to move them somewhere else, but this seemed like the most appropriate home at the moment. ",
        "createdAt" : "2020-03-18T20:29:36Z",
        "updatedAt" : "2020-04-06T14:22:22Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "cecad072-a334-42b0-96a5-e1da2d2f17a3",
        "parentId" : "6fdf65f6-d36b-4738-905f-0c574f7f832a",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "ack, something was telling me that we already have <GA constants in v1.\r\n(seccomp is alpha)",
        "createdAt" : "2020-03-18T20:35:01Z",
        "updatedAt" : "2020-04-06T14:22:22Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "f10bec49-2c87-4ed2-bdf2-35019bb984f6",
        "parentId" : "6fdf65f6-d36b-4738-905f-0c574f7f832a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "The annotations target core/v1 objects (pods), and are already validated in core/v1 validation, so this is probably the right package for them.",
        "createdAt" : "2020-03-19T14:38:12Z",
        "updatedAt" : "2020-04-06T14:22:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e56866c979fbe7dd01205dffecd73c505446d35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +20,24 @@\t\"strings\"\n\n\t\"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tutilfeature \"k8s.io/apiserver/pkg/util/feature\""
  },
  {
    "id" : "7cb997f4-a6b8-45a7-ba0b-866dd8937a57",
    "prId" : 88488,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88488#pullrequestreview-365411212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848dccff-85ec-406d-9e2e-e686e97a3ad6",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "this is called twice?",
        "createdAt" : "2020-02-27T00:54:34Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "a892d870-eca2-4d6a-8c82-cc33cff145c2",
        "parentId" : "848dccff-85ec-406d-9e2e-e686e97a3ad6",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "rebase madness! fixed",
        "createdAt" : "2020-02-27T04:41:46Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13295968757aad1d6908d38907e7ec4ebca6a21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +388,392 @@\tdropDisabledRunAsGroupField(podSpec, oldPodSpec)\n\n\tdropDisabledFSGroupFields(podSpec, oldPodSpec)\n\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.RuntimeClass) && !runtimeClassInUse(oldPodSpec) {"
  },
  {
    "id" : "8176a56d-d52b-429a-97fb-2d1a40869d7a",
    "prId" : 77807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77807#pullrequestreview-281829920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f4098c7-7ce0-4751-a08c-bdd7c9e65890",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should ephemeral container be excluded (even if its feature gate is on) ?\r\n\r\nEdit: from pkg/apis/core/v1/defaults_test.go, looks like ephemeral container is included.",
        "createdAt" : "2019-08-30T02:34:48Z",
        "updatedAt" : "2019-08-30T02:37:11Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "8b774bca-e838-49f3-973c-78bab0d7d48b",
        "parentId" : "6f4098c7-7ce0-4751-a08c-bdd7c9e65890",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that's a good point, will open a follow-up issue to track usage of VisitContainers in *InUse methods",
        "createdAt" : "2019-08-30T04:48:00Z",
        "updatedAt" : "2019-08-30T04:48:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ac8a8ebf-db1c-4acd-b2e6-f8f0fed93c41",
        "parentId" : "6f4098c7-7ce0-4751-a08c-bdd7c9e65890",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "opened https://github.com/kubernetes/kubernetes/issues/82158",
        "createdAt" : "2019-08-30T05:06:29Z",
        "updatedAt" : "2019-08-30T05:06:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a042a4b0ee3e0fc27b0a4711202d66743af246e1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +386,390 @@\tif !utilfeature.DefaultFeatureGate.Enabled(features.StartupProbe) && !startupProbeInUse(oldPodSpec) {\n\t\t// drop startupProbe from all containers if the feature is disabled\n\t\tVisitContainers(podSpec, func(c *api.Container) bool {\n\t\t\tc.StartupProbe = nil\n\t\t\treturn true"
  },
  {
    "id" : "5bd4a3fd-cc0d-4d38-a3da-d9bdf3fd97fd",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-256436216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This doesn't make a lot of sense to me... what is the purpose of setting it to nil if it is not used? Wouldn't that mean it is already nil?\r\n\r\nThis field is not mutable, which means on a PUT / PATCH request, it cannot be changed at all. This should therefore only apply to POST requests.\r\n\r\nWill this get called for deployments, Replica sets, etc, templates?",
        "createdAt" : "2019-05-28T19:42:24Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f18e841f-4d17-40e9-93e9-4cfb3d35bc48",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "If the feature is disabled, but user still posts a payload with spreadConstraints set, it's set to nil. So basically it's for accidental prevention. I checked the other logic in `dropDisabledFields` function, they're almost using the same pattern. \r\n\r\n> Will this get called for deployments, Replica sets, etc, templates?\r\n\r\nYes, for both Pod and PodTemplate.",
        "createdAt" : "2019-05-31T05:45:19Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "02c22efa-7184-499d-93be-30aa8460e37f",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "i think there was a downgrade/upgrade angle to it as well, i remember someone explaining this, but i have forgotten. I agree whenever i see that piece of code , it doesnt make sense but its a pattern being followed everywhere. I think @liggitt had an explanation ",
        "createdAt" : "2019-05-31T06:41:14Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "d65e3cd6-c9f7-43cc-8986-9902d1aad44e",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think you misunderstood my question. the line of code has `!topologySpreadConstraintsInUse(oldPodSpec)`; it seems pointless to set it to nil if it is already not in use. Shouldn't this unconditionally set it to nil?",
        "createdAt" : "2019-05-31T15:51:50Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9b329fb1-446c-4c28-9214-c8ccfc21ba5a",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "My apologies... I basically agree. I will update it unless hearing from @liggitt about the potential reason.",
        "createdAt" : "2019-05-31T17:06:53Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "09633872-c078-4b73-ba73-f952de2c2368",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this sets it to nil in the *new* object if the old object did not use the field",
        "createdAt" : "2019-05-31T17:54:42Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "60b99e25-51e9-4ae0-88f6-be9921b07aa0",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Shouldn't this unconditionally set it to nil?\r\n\r\nif the feature is enabled, you should be able to update a deployment that does not use this field to start using it",
        "createdAt" : "2019-05-31T17:55:25Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "624dbf26-26fb-46a0-ab8c-0979cec7d41d",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Thanks @liggitt.\r\n\r\n@lavalamp as Jordan pointed out, this is necessary for k8s version upgrade, or feature gate flipping within the same k8s version. So I will leave the logic as is.",
        "createdAt" : "2019-06-13T05:46:12Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9448c4d2-2f30-4b6a-bb5e-803a0e428c62",
        "parentId" : "41a4c2a3-36d3-4e20-a967-07f0cff9fa64",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry for the noise, I misread and didn't notice that oldPodSpec and podSpec were two different things.",
        "createdAt" : "2019-07-01T16:14:51Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +405,409 @@\tif !utilfeature.DefaultFeatureGate.Enabled(features.EvenPodsSpread) && !topologySpreadConstraintsInUse(oldPodSpec) {\n\t\t// Set TopologySpreadConstraints to nil only if feature is disabled and it is not used\n\t\tpodSpec.TopologySpreadConstraints = nil\n\t}\n}"
  },
  {
    "id" : "49015fa5-c5b8-4b92-b39a-6bdb510aecb5",
    "prId" : 76968,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76968#pullrequestreview-250676530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e096f22-6104-4a17-9390-94aa613fd2f5",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "We need to do the same for RuntimeClass. The framework isn't inplace for it though, so you'll need to call it from the storage strategy: https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/node/runtimeclass/strategy.go#L58\r\n\r\n(see the pod version for an example: https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/core/pod/strategy.go#L72)",
        "createdAt" : "2019-06-14T18:17:12Z",
        "updatedAt" : "2019-06-18T14:58:28Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "4b202c1b-3d5b-4cbb-85a8-421d45ee452a",
        "parentId" : "2e096f22-6104-4a17-9390-94aa613fd2f5",
        "authorId" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "body" : "Makes sense, though i didn't see how that relates to storage, per se.  Added a commit, PTAL, @tallclair ",
        "createdAt" : "2019-06-17T19:11:31Z",
        "updatedAt" : "2019-06-18T14:58:28Z",
        "lastEditedBy" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e09568c8ead90caa3613c77745808cb6283f9f7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +379,383 @@\t\t// Set Overhead to nil only if the feature is disabled and it is not used\n\t\tpodSpec.Overhead = nil\n\t}\n\n\tdropDisabledProcMountField(podSpec, oldPodSpec)"
  },
  {
    "id" : "f6ebc9bc-572d-4ad4-a769-55b3587d47ed",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-206037564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15f92e90-4692-4ce5-8a7c-db0898464274",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "&& csiInUse(oldPodSpec), remove the negation ?",
        "createdAt" : "2019-02-20T07:37:00Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "a998d7bf-598a-4292-b923-81a167d71bd3",
        "parentId" : "15f92e90-4692-4ce5-8a7c-db0898464274",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "Fields are muted when the feature is disabled and the oldspec did not have csi in it. That's why its negated.",
        "createdAt" : "2019-02-20T22:35:39Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +434,438 @@// This should be called from PrepareForCreate/PrepareForUpdate for all pod specs resources containing a CSIVolumeSource\nfunc dropDisabledCSIVolumeSourceAlphaFields(podSpec, oldPodSpec *api.PodSpec) {\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.CSIInlineVolume) && !csiInUse(oldPodSpec) {\n\t\tfor i := range podSpec.Volumes {\n\t\t\tpodSpec.Volumes[i].CSI = nil"
  },
  {
    "id" : "b1f8cba0-744a-4860-b6f1-c582c246b02e",
    "prId" : 72714,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72714#pullrequestreview-190736805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c0eb9d7-3a64-445e-9e7e-6d16833b98de",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "need to check if Projected is non-nil",
        "createdAt" : "2019-01-09T13:57:56Z",
        "updatedAt" : "2019-01-10T19:20:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0b35d1b05bdeacbb5e4f0f42decf7f977d323a1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +290,294 @@\t\tfor i := range podSpec.Volumes {\n\t\t\tif podSpec.Volumes[i].Projected != nil {\n\t\t\t\tfor j := range podSpec.Volumes[i].Projected.Sources {\n\t\t\t\t\tpodSpec.Volumes[i].Projected.Sources[j].ServiceAccountToken = nil\n\t\t\t\t}"
  },
  {
    "id" : "5e0ce9f5-680c-43d4-b87d-e106afb0480b",
    "prId" : 72714,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72714#pullrequestreview-190777374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8ef5761-704e-4d29-acb3-e57d15c7d1cc",
        "parentId" : null,
        "authorId" : "40571cd9-57c5-4442-b882-bf25ed66659d",
        "body" : "nit: Unnecessary line break. ",
        "createdAt" : "2019-01-09T15:19:16Z",
        "updatedAt" : "2019-01-10T19:20:06Z",
        "lastEditedBy" : "40571cd9-57c5-4442-b882-bf25ed66659d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0b35d1b05bdeacbb5e4f0f42decf7f977d323a1",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +486,490 @@\treturn false\n}\n\nfunc tokenRequestProjectionInUse(podSpec *api.PodSpec) bool {\n\tif podSpec == nil {"
  },
  {
    "id" : "270cc25c-def7-4e55-a5b2-39d1f0a5d663",
    "prId" : 64283,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64283#pullrequestreview-151202376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c678ff43-0c7e-4836-bac5-32de392a6bab",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't see the equivalent for DropDisabledAllowedProcMountTypes on PSP - am I just blind?",
        "createdAt" : "2018-08-30T20:52:19Z",
        "updatedAt" : "2018-08-30T22:24:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b2b22176-6754-473c-bb26-986103d1c9a7",
        "parentId" : "c678ff43-0c7e-4836-bac5-32de392a6bab",
        "authorId" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "body" : "fixed :)",
        "createdAt" : "2018-08-30T22:15:09Z",
        "updatedAt" : "2018-08-30T22:24:46Z",
        "lastEditedBy" : "ffc157a5-b8d0-4a06-b942-f8e5150e4215",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a4cf7a36e1d28c43b2fbb0efe1dbcd60e09b0d6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +289,293 @@// DropDisabledProcMountField removes disabled fields from PodSpec related\n// to ProcMount\nfunc DropDisabledProcMountField(podSpec *api.PodSpec) {\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.ProcMountType) {\n\t\tdefProcMount := api.DefaultProcMount"
  },
  {
    "id" : "8140f13f-dca6-448d-aef0-673d51dc7a0f",
    "prId" : 51893,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51893#pullrequestreview-60424666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d19abe6-f62f-45b0-b53f-a5c30a59d937",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "InitContainers as well?",
        "createdAt" : "2017-09-04T11:33:35Z",
        "updatedAt" : "2017-09-04T14:17:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2604359f-b3d0-494d-a3fe-a956ed3b0869",
        "parentId" : "7d19abe6-f62f-45b0-b53f-a5c30a59d937",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "good catch, fixed",
        "createdAt" : "2017-09-04T14:16:52Z",
        "updatedAt" : "2017-09-04T14:17:41Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "876109a53c1e2945d8a05b78958eedea68c28480",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +243,247 @@\t\t\t}\n\t\t}\n\t}\n\tfor i := range podSpec.Containers {\n\t\tDropDisabledVolumeMountsAlphaFields(podSpec.Containers[i].VolumeMounts)"
  },
  {
    "id" : "429d844c-c065-407c-9bd2-686e8b135ca2",
    "prId" : 50924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50924#pullrequestreview-60210349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b24e3a12-6ba4-456e-a05c-9b058e00570d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do we need to drop the resource field as well?",
        "createdAt" : "2017-08-29T23:33:10Z",
        "updatedAt" : "2017-09-01T18:35:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "183cb5d7-dd7f-425f-b61e-5a5a57e1741a",
        "parentId" : "b24e3a12-6ba4-456e-a05c-9b058e00570d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, that's a key/value in an existing field... these are new fields",
        "createdAt" : "2017-09-01T18:26:34Z",
        "updatedAt" : "2017-09-01T18:35:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "02281898f8188b6f80c36127d30242642dfe091b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +231,235 @@// DropDisabledAlphaFields removes disabled fields from the pod spec.\n// This should be called from PrepareForCreate/PrepareForUpdate for all resources containing a pod spec.\nfunc DropDisabledAlphaFields(podSpec *api.PodSpec) {\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.PodPriority) {\n\t\tpodSpec.Priority = nil"
  },
  {
    "id" : "19f9ca0b-9b79-4b0b-b939-8a1960053704",
    "prId" : 20688,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm confused what this lets you do… is this connecting the service to the pod somehow? At that point, why bother having a headless service? It seems odd to have an annotation on a pod create `...svc...` DNS records. It also seems odd to put the annotation here, since that implies a single service for the pod... I'm not aware of that being 1:1 anywhere else\n",
        "createdAt" : "2016-03-01T01:23:09Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "245873b9-aae0-4bbf-bb7c-3194c8259abb",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "We currently don't want to introduce  a new subdomain (we already have 'svc', 'pod'). \nThe way the pod is connected to the headless service is that, there will be an A record of the form \n<hostname-annotation>.<subdomain-annotation>.<namespace>.svc.<cluster domain>\"\n\nAlso, the pod must be an endpoint for the headless service...\n",
        "createdAt" : "2016-03-01T17:20:40Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "4729a4fc-3e83-47f1-a741-5dbb847d498d",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This allows the pod to declare that it expects an FQDN and that the form of the FQDN will match the names that we add to DNS for service endpoints.\n",
        "createdAt" : "2016-03-02T01:20:31Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "68142f92-6702-419e-b6e9-6976e73e6dca",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@liggitt and I are still confused on this.\n\n> Also, the pod must be an endpoint for the headless service...\n\nWhy use a headless service?  Why not a service that matches a single pod by label?\n\n> This allows the pod to declare that it expects an FQDN and that the form of the FQDN will match the names that we add to DNS for service endpoints.\n\nThis confuses us.  Can you explain why this is needed?  It's less obvious to me than the pod hostname.\n",
        "createdAt" : "2016-03-03T20:18:54Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "0daac1bc-4b91-4d9c-9643-5c86749f4bc2",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "To elaborate some more, I am guessing the goal is you want to be able to ping pod1 from pod2 by its FQDN.\n\nIf I annotated pod 1 with the hostname \"pet1\", and it got a pod IP of 172.17.0.4, pod 2 can do the following:\n\n```\n$ ping 172.17.0.4\n$ ping 172-17-0-4.default.pod.cluster.local\n```\n\nWhy do we need a headless service and can we not just create a record based on pod1 host name?\n\nSo in this case, pod 2 could also do:\n\n```\n$ ping pet1.default.pod.cluster.local\n```\n\nIs that enough for your use case?\n",
        "createdAt" : "2016-03-03T20:30:12Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "9381cfc3-fc32-4d92-8fed-5841df7a550b",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "> > +const (\n> > - // The annotation value is a string specifying the hostname to be used for the pod e.g 'my-webserver-1'\n> > - PodHostnameAnnotation = \"pod.beta.kubernetes.io/hostname\"\n> >   +\n> > - // The annotation value is a string specifying the subdomain e.g. \"my-web-service\"\n> > - // If specified, on the the pod itself, \"<hostname>.my-web-service.<namespace>.svc.<cluster domain>\" would resolve to\n> > - // the pod's IP.\n> > - // If there is a headless service named \"my-web-service\" in the same namespace as the pod, then,\n> > - // <hostname>.my-web-service.<namespace>.svc.<cluster domain>\" would be resolved by the cluster DNS Server.\n> > - PodSubdomainAnnotation = \"pod.beta.kubernetes.io/subdomain\"\n> \n> @liggitt and I are still confused on this.\n> \n> Also, the pod must be an endpoint for the headless service...\n> \n> Why use a headless service? Why not a service that matches a single pod by label?\n\nI think we started with headless because it seems like the most\nobvious fit, but non-headless could be plausible.  Think of it this\nway: A \"regular\" service means \"all my backends are fungible, I don't\ncare which you use\".  The DNS lookup returns just the cluster IP.  A\nheadless service means \"my individual backends might have some meaning\nthat kube doesn't know about\".  The DNS lookup returns the set of A\nrecords for each backend.  In this PR we are adding the ability to\ngive meaningful names to those backends.  We could give meaningful\nnames to backends of a non=-headless Service, but that's not nearly as\nobviously useful.\n\nSecondly, we don't want to have DNS be watching Pods, if we can avoid\nit.  So this feature actually comes in two parts.  The pod can request\na hostname and domainname, such that `hostname -f` DTRT. If and only\nif you _also_ have a (headless) service that matches domainname, will\nyou get a DNS record.  In essence, the pod domainname is how the pod\nindicates that it has a \"primary\" service that governs it.   The most\nobvious case here is a petset.\n\nThis feature should allow a petset controller to stamp out pods with\nhostname and domainname set, create the headless service, and voila -\npetset DNS works.\n\n> This allows the pod to declare that it expects an FQDN and that the form of the FQDN will match the names that we add to DNS for service endpoints.\n> \n> This confuses us. Can you explain why this is needed? It's less obvious to me than the pod hostname.\n\nIt's a little tricky that the pod FQDN is \".svc.cluster.local\".  This\nis first and foremost because we don't want to make DNS watch pods.\nDNS is fundamentally ABOUT services.  This lets a pod \"opt-in\" to\npod-DNS without encouraging every single pod to choose a unique\nhostname and blow out DNS.\n",
        "createdAt" : "2016-03-03T20:42:55Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e45b5c00-8f5b-4c1e-b263-c661c9804448",
        "parentId" : "00ea7b28-6e58-476a-bebe-004f8567ef35",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "On Thu, Mar 3, 2016 at 12:30 PM, Derek Carr notifications@github.com wrote:\n\n> $ ping pet1.default.pod.cluster.local\n> \n> Is that enough for your use case?\n\nWe don't want DNS watching pods.  if/when we move DNS to each node,\nthat will be prohibitive.\n",
        "createdAt" : "2016-03-03T20:43:55Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3c00aadd5da91288cca856dabbefbc9f261be69",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +33,37 @@\t// If there is a headless service named \"my-web-service\" in the same namespace as the pod, then,\n\t// <hostname>.my-web-service.<namespace>.svc.<cluster domain>\" would be resolved by the cluster DNS Server.\n\tPodSubdomainAnnotation = \"pod.beta.kubernetes.io/subdomain\"\n)\n"
  },
  {
    "id" : "ab65ac40-7dbd-4e54-8baf-18ec6b1130db",
    "prId" : 20688,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Is the pod name used by default? Where is this used?\n",
        "createdAt" : "2016-03-01T01:27:00Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "53d31886-fe2d-4071-ae38-9d3ee71a694e",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "If this annotation is present, it will be the hostname of the pod.\n",
        "createdAt" : "2016-03-01T17:08:11Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "8da9c6b5-ad6d-45e3-b040-1968832a17df",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "forgive my ignorance... what does that mean? Does it modify the pod container setup, or is this purely for the DNS record-builder? It looks like validation limits this to one dns segment, so what makes up the remainder of the actual hostname? If this is not present, is there a default that is used instead, like the pod name?\n",
        "createdAt" : "2016-03-01T17:15:51Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fd7916d6-bda0-4d65-823f-36f953c6dcd7",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "https://github.com/kubernetes/kubernetes/pull/20688/files#diff-bf28da68f62a8df6e99e447c4351122dR1312\n\nYou guessed right. hostname defaults to pod name.\n\nEvery dns segment is independently validated. The overall length is validated as well.\n\nLike I said in my previous comment (or code link in comment), the fully qualified hostname would be <hostname>.my-web-service.<namespace>.svc.<cluster domain>\n\nIf subdomain annotation is not specified, the hostname would be just the hostname annotation, or the pod.Name(default)\n",
        "createdAt" : "2016-03-02T01:14:37Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "52ada006-817f-42e9-86d3-354d7b91f63a",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "today the hostname is the podname, though there's a different issue for that. \n",
        "createdAt" : "2016-03-02T01:21:41Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "949635cc-6d86-4896-8182-d94991e6546d",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "To extend on this.  The user can set the pod hostname without setting the subdomain, in which case they won't get the full behavior of crafting a service-centriic FQDN.  I assert that is OK.\n",
        "createdAt" : "2016-03-02T01:41:05Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4f707a79-2c5e-497c-86af-d69d1aca96be",
        "parentId" : "647aa5b8-4114-4f6a-b416-96a04e2d7d45",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think both @liggitt and I are ok with this feature.  I get how this can be used with an RC where replica=1 to let you stamp out pet pods with expected names....\n",
        "createdAt" : "2016-03-03T20:07:59Z",
        "updatedAt" : "2016-03-04T21:32:45Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3c00aadd5da91288cca856dabbefbc9f261be69",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +26,30 @@const (\n\t// The annotation value is a string specifying the hostname to be used for the pod e.g 'my-webserver-1'\n\tPodHostnameAnnotation = \"pod.beta.kubernetes.io/hostname\"\n\n\t// The annotation value is a string specifying the subdomain e.g. \"my-web-service\""
  },
  {
    "id" : "cb38050a-5618-490b-8ade-d1068b10afe9",
    "prId" : 16915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b2441f2-f94c-4d8b-9b99-8fb7bdfc3df0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "actually - it COULD take an IntOrString and a protocol.\n",
        "createdAt" : "2015-12-03T07:11:22Z",
        "updatedAt" : "2015-12-15T17:54:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c58170ad0d55445e6c5caf1640cab94e0ea05c4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@// string up in all named ports in all containers in the target pod.  If no\n// match is found, fail.\nfunc FindPort(pod *api.Pod, svcPort *api.ServicePort) (int, error) {\n\tportName := svcPort.TargetPort\n\tswitch portName.Type {"
  }
]