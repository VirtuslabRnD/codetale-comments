[
  {
    "id" : "156289e8-d072-42ff-b124-416d3ccf4005",
    "prId" : 50130,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50130#pullrequestreview-54876156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20d36a7c-9752-45c7-a8a1-197430ed85a4",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nice and short :+1:",
        "createdAt" : "2017-08-08T09:07:35Z",
        "updatedAt" : "2017-08-11T07:13:35Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e5dc7d727882122922334af849cf26a5e4b8610",
    "line" : 737,
    "diffHunk" : "@@ -1,1 +91,95 @@\tgenericfuzzer.Funcs,\n\toverrideGenericFuncs,\n\tcorefuzzer.Funcs,\n\textensionsfuzzer.Funcs,\n\tappsfuzzer.Funcs,"
  },
  {
    "id" : "373297f4-5575-4df0-bdcd-847b41f3e300",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42251724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa2d31bf-b2fc-4f5f-aee9-23bd594cdb2d",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Should you also update this one to OnDelete?",
        "createdAt" : "2017-06-06T09:16:28Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +725,729 @@\t\t\t}\n\t\t\tif len(s.Spec.UpdateStrategy.Type) == 0 {\n\t\t\t\ts.Spec.UpdateStrategy.Type = apps.RollingUpdateStatefulSetStrategyType\n\t\t\t}\n\t\t\tif s.Spec.RevisionHistoryLimit == nil {"
  },
  {
    "id" : "d2bea85b-48ac-4a43-9606-e3db8313a8a5",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-22091683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d41f5ea6-171f-46d7-8e53-93ff79daa0aa",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We don't need this `c.RandBool()`, since we'll always set `rollingUpdate.MaxUnavailable` to something greater than 0 on RollingUpdate strategy ",
        "createdAt" : "2017-02-10T23:02:28Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "3db8d082-471c-4758-8be7-3715ac97f854",
        "parentId" : "d41f5ea6-171f-46d7-8e53-93ff79daa0aa",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "This bool says if we should set it. It's optional so it doesn't need to be set.",
        "createdAt" : "2017-02-15T19:41:59Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +528,532 @@\t\t\t} else {\n\t\t\t\trollingUpdate := extensions.RollingUpdateDaemonSet{}\n\t\t\t\tif c.RandBool() {\n\t\t\t\t\tif c.RandBool() {\n\t\t\t\t\t\trollingUpdate.MaxUnavailable = intstr.FromInt(1 + int(c.Rand.Int31()))"
  },
  {
    "id" : "f97b01d0-60cc-4535-a38a-eed7cc19ace3",
    "prId" : 29836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11615eb9-a339-444e-9a7c-3572a22258d2",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Please expand these to include all possible values.\n",
        "createdAt" : "2016-08-09T15:13:11Z",
        "updatedAt" : "2016-08-23T13:23:19Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "fc7962a1-9900-4d09-8f24-e1fb68f99f21",
        "parentId" : "11615eb9-a339-444e-9a7c-3572a22258d2",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "this is to handle the default (nil case). If CachingMode != nil, it already gets a value.\n",
        "createdAt" : "2016-08-22T15:53:39Z",
        "updatedAt" : "2016-08-23T13:23:19Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea4b0226d859a1b86a81163c86ec61cffc1b952",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +418,422 @@\t\t},\n\t\tfunc(obj *api.AzureDiskVolumeSource, c fuzz.Continue) {\n\t\t\tif obj.CachingMode == nil {\n\t\t\t\tobj.CachingMode = new(api.AzureDataDiskCachingMode)\n\t\t\t\t*obj.CachingMode = api.AzureDataDiskCachingNone"
  },
  {
    "id" : "26cffc17-ac30-4a18-9b93-a5fafdbc3c4b",
    "prId" : 25816,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee58535d-770f-4b64-8f64-dfcc2599c82b",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Do we also need to fuzz Schedule and StartingDeadlineSeconds?\n",
        "createdAt" : "2016-08-01T17:30:20Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "436cd2e2-26d8-4681-aca4-36990d916ea1",
        "parentId" : "ee58535d-770f-4b64-8f64-dfcc2599c82b",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Done.\n",
        "createdAt" : "2016-08-02T14:09:16Z",
        "updatedAt" : "2016-08-04T14:34:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c68a9015308a7c4dfac396cdbe64f058aa3f73",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +173,177 @@\t\t\tc.FuzzNoCustom(sj)\n\t\t\tsuspend := c.RandBool()\n\t\t\tsj.Suspend = &suspend\n\t\t\tsds := int64(c.RandUint64())\n\t\t\tsj.StartingDeadlineSeconds = &sds"
  },
  {
    "id" : "fecedda4-4158-42c1-8e30-c0c56fcad597",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a92ecf53-ec05-4f2a-9599-0baa10a7456f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm surprised you need this function, it should be the default behavior.\n",
        "createdAt" : "2015-11-18T23:09:44Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0ce1a3f0-87b3-463f-b5b2-f2a487ece5be",
        "parentId" : "a92ecf53-ec05-4f2a-9599-0baa10a7456f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "int is 64 bit internally, so fuzzInt generates a 64 bit number which won't\ncross the boundary..  That won't round trip to the external types.  If /\nwhen we refactor the internal, we would not need to do this.\n\nOn Wed, Nov 18, 2015 at 6:09 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/testing/fuzzer.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r45275625\n> :\n> \n> > @@ -45,6 +45,17 @@ func FuzzerFor(t *testing.T, version string, src rand.Source) *fuzz.Fuzzer {\n> >         f.RandSource(src)\n> >     }\n> >     f.Funcs(\n> > -       func(j *int, c fuzz.Continue) {\n> > -           *j = int(c.Int31())\n> > -       },\n> > -       func(j **int, c fuzz.Continue) {\n> \n> I'm surprised you need this function, it should be the default behavior.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r45275625.\n",
        "createdAt" : "2015-11-18T23:26:09Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8ccdaf41-cc74-494e-908d-ec06041864ad",
        "parentId" : "a92ecf53-ec05-4f2a-9599-0baa10a7456f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, I see.\n",
        "createdAt" : "2015-11-18T23:42:49Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +49,53 @@\t\t\t*j = int(c.Int31())\n\t\t},\n\t\tfunc(j **int, c fuzz.Continue) {\n\t\t\tif c.RandBool() {\n\t\t\t\ti := int(c.Int31())"
  },
  {
    "id" : "80171e4a-6604-4199-800e-1a3030514b51",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1792ff6-578b-401a-b71c-a99547bff113",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The versioned struct is int32 and the internal is int?\n",
        "createdAt" : "2015-11-18T23:20:12Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "70f9c64a-69cc-47e3-a27f-d87df35d8fdf",
        "parentId" : "f1792ff6-578b-401a-b71c-a99547bff113",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Correct\n\nOn Wed, Nov 18, 2015 at 6:20 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/testing/fuzzer.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r45276792\n> :\n> \n> > @@ -138,8 +149,8 @@ func FuzzerFor(t *testing.T, version string, src rand.Source) *fuzz.Fuzzer {\n> >         },\n> >         func(j *extensions.JobSpec, c fuzz.Continue) {\n> >             c.FuzzNoCustom(j) // fuzz self without calling this function again\n> > -           completions := c.Rand.Int()\n> > -           parallelism := c.Rand.Int()\n> > -           completions := int(c.Rand.Int31())\n> \n> The versioned struct is int32 and the internal is int?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r45276792.\n",
        "createdAt" : "2015-11-18T23:26:32Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +152,156 @@\t\tfunc(j *extensions.JobSpec, c fuzz.Continue) {\n\t\t\tc.FuzzNoCustom(j) // fuzz self without calling this function again\n\t\t\tcompletions := int(c.Rand.Int31())\n\t\t\tparallelism := int(c.Rand.Int31())\n\t\t\tj.Completions = &completions"
  },
  {
    "id" : "4096fef6-9c4f-41bf-bfa2-8b0f91e1e43a",
    "prId" : 13120,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a1cccd7-aa74-44e2-bd94-0ff0aad375fb",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Do we need \"something\" or is c.RandString() better?\n",
        "createdAt" : "2015-08-26T06:09:48Z",
        "updatedAt" : "2015-08-26T22:23:48Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "920efb36-28fd-4e68-86a7-2e44cc6cf23e",
        "parentId" : "7a1cccd7-aa74-44e2-bd94-0ff0aad375fb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "We need to use \"something\". c.RandString() sometimes generate empty string, which causes the test error.\n",
        "createdAt" : "2015-08-26T17:04:40Z",
        "updatedAt" : "2015-08-26T22:23:48Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6a0892d4-cbfd-4f20-b12f-6037e7747cb5",
        "parentId" : "7a1cccd7-aa74-44e2-bd94-0ff0aad375fb",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I think it will be good to add a comment in code saying that\n",
        "createdAt" : "2015-08-26T18:46:01Z",
        "updatedAt" : "2015-08-26T22:23:48Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc9c2ddf0cb84bd43ff241722c970bf510155672",
    "line" : null,
    "diffHunk" : "@@ -1,1 +306,310 @@\t\t\t// We can't use c.RandString() here because it may generate empty\n\t\t\t// string, which will cause tests failure.\n\t\t\ts.APIGroup = \"something\"\n\t\t},\n\t)"
  },
  {
    "id" : "b567d09d-966a-4161-8d84-0dbdedb1aa8b",
    "prId" : 13120,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1dd482-1afc-4a43-bc91-f8eb7c53bfac",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal, comments added here. PTAL. Thanks.\n",
        "createdAt" : "2015-08-26T22:24:15Z",
        "updatedAt" : "2015-08-26T22:24:15Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc9c2ddf0cb84bd43ff241722c970bf510155672",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\tfunc(s *expapi.APIVersion, c fuzz.Continue) {\n\t\t\t// We can't use c.RandString() here because it may generate empty\n\t\t\t// string, which will cause tests failure.\n\t\t\ts.APIGroup = \"something\"\n\t\t},"
  },
  {
    "id" : "465b08f3-cf8e-4b63-9e8f-7037aaacdf0a",
    "prId" : 12492,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec03d57b-e2a8-421d-b3ae-4f271c31e9b9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "include LimitRequestRatio?\n",
        "createdAt" : "2015-08-14T08:53:10Z",
        "updatedAt" : "2015-08-24T19:43:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d25082250d7b1f82682c80498677b68c9712e1c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +184,188 @@\t\t\tq.Requests[api.ResourceStorage] = *storageLimit.Copy()\n\t\t},\n\t\tfunc(q *api.LimitRangeItem, c fuzz.Continue) {\n\t\t\trandomQuantity := func() resource.Quantity {\n\t\t\t\treturn *resource.NewQuantity(c.Int63n(1000), resource.DecimalExponent)"
  },
  {
    "id" : "24e2289a-1bf4-40a8-ad04-4f61455c9036",
    "prId" : 7490,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dbfc9e6-78f2-4d22-bbdc-38359bfcd2f6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: prefer `if false {` to prevent bitrot.\n",
        "createdAt" : "2015-04-29T16:32:23Z",
        "updatedAt" : "2015-04-29T16:58:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9389f2a4-285e-4e31-b9f0-d3a05f362fa7",
        "parentId" : "9dbfc9e6-78f2-4d22-bbdc-38359bfcd2f6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Fixed\n\n----- Original Message -----\n\n> > @@ -115,22 +115,24 @@ func FuzzerFor(t *testing.T, version string, src\n> > rand.Source) *fuzz.Fuzzer {\n> >         },\n> >         func(j *api.List, c fuzz.Continue) {\n> >             c.FuzzNoCustom(j) // fuzz self without calling this function again\n> > -           if j.Items == nil {\n> > -               j.Items = []runtime.Object{}\n> > -           }\n> > -           // TODO: uncomment when round trip starts from a versioned object\n> \n> nit: prefer `if false {` to prevent bitrot.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7490/files#r29353705\n",
        "createdAt" : "2015-04-29T16:58:44Z",
        "updatedAt" : "2015-04-29T16:58:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "12ba4e2452196eeb5c4c5187f7ad8f59ef5e56db",
    "line" : null,
    "diffHunk" : "@@ -1,1 +116,120 @@\t\tfunc(j *api.List, c fuzz.Continue) {\n\t\t\tc.FuzzNoCustom(j) // fuzz self without calling this function again\n\t\t\t// TODO: uncomment when round trip starts from a versioned object\n\t\t\tif false { //j.Items == nil {\n\t\t\t\tj.Items = []runtime.Object{}"
  },
  {
    "id" : "d273229a-fd8f-47eb-9e02-b0e3841d1263",
    "prId" : 4601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b2841c-ec40-4e87-a2de-4f41284fb610",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "@rootfs and @markturansky don't forget to add your volumes here too. \n",
        "createdAt" : "2015-03-07T05:41:26Z",
        "updatedAt" : "2015-03-19T17:38:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a45e37d17de3a6de690dba98675c16ccb93a892",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +168,172 @@\t\t\t// Exactly one of the fields should be set.\n\t\t\t//FIXME: the fuzz can still end up nil.  What if fuzz allowed me to say that?\n\t\t\tfuzzOneOf(c, &vs.HostPath, &vs.EmptyDir, &vs.GCEPersistentDisk, &vs.GitRepo, &vs.Secret, &vs.NFS)\n\t\t},\n\t\tfunc(d *api.DNSPolicy, c fuzz.Continue) {"
  },
  {
    "id" : "c162bd3a-00e9-47ee-8618-b61c9c522df2",
    "prId" : 4514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb6f6f9c-6137-4773-9590-7b94d886d681",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is a minor thing, but it would really be nice to have a comment here explaining why this is sufficient.  It took me a while to think about it.\n",
        "createdAt" : "2015-02-20T05:18:28Z",
        "updatedAt" : "2015-02-20T05:18:28Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "104efa2b-d33b-4996-890c-2add0c54e48a",
        "parentId" : "cb6f6f9c-6137-4773-9590-7b94d886d681",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Actually I don't think it IS sufficient.  I'll accumulate fixups in a PR.\n",
        "createdAt" : "2015-02-20T05:23:27Z",
        "updatedAt" : "2015-02-20T05:23:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4fda2449-1724-48ba-a0e0-96ac15b8bf47",
        "parentId" : "cb6f6f9c-6137-4773-9590-7b94d886d681",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin Agree, this is a gap.  It needs to fuzz the data map too.\n",
        "createdAt" : "2015-02-20T16:03:02Z",
        "updatedAt" : "2015-02-20T16:03:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb001ada21710c87fc0af1cd18c8798303ea000a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +232,236 @@\t\t\tc.Fuzz(&s.ObjectMeta)\n\n\t\t\ts.Type = api.SecretTypeOpaque\n\t\t},\n\t)"
  }
]