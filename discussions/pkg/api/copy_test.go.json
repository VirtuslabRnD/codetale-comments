[
  {
    "id" : "4f4843b5-eec3-4325-8ad7-1e45a0a3d7eb",
    "prId" : 18379,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I know we've gone through this before and you think we don't need to name the variable groupVersion because we've properly typed it now, but I still think naming it groupVersion is better for readability. For example, when reading this line, now I have to find the definition of `version` to know what's contained in it.\n",
        "createdAt" : "2015-12-08T19:46:48Z",
        "updatedAt" : "2015-12-09T13:13:16Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ecaca985-d90a-4b7b-a1fa-a515aa4bc6d9",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I know we've gone through this before and you think we don't need to name the variable groupVersion because we've properly typed it now, but I still think naming it groupVersion is better for readability. For example, when reading this line, now I have to find the definition of version to know what's contained in it.\n\nDoesn't that end up feeling like hungarian notation?  I'd say that `group` is a `string`,  `version` is a `GroupVersion`, and `kind` is a `GroupVersionKind`.  Any variant deserves a different name.\n",
        "createdAt" : "2015-12-08T19:51:40Z",
        "updatedAt" : "2015-12-09T13:13:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "66f470d0-13b3-4d25-8aa6-e51c6597de61",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@derekwaynecarr I know you were against `gv` and `gvk`.  Do you have an opinion?\n",
        "createdAt" : "2015-12-08T19:56:29Z",
        "updatedAt" : "2015-12-09T13:13:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5bda5b5c-6233-435c-97dd-95c6a5ffebff",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Actually do we have variable `version` that is a `GroupVersion.Version`? If not, I'm fine with using `version` for `GroupVersion` everywhere.\n",
        "createdAt" : "2015-12-08T21:07:48Z",
        "updatedAt" : "2015-12-09T13:13:16Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ff400292-2efc-4385-b61f-50b7e3cd8458",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think `GroupVersionKind` type name is basically Hungarian notation since its more prescriptive of the individual values it holds than the use case it fulfills.  The contrast in my head is we don't call where your home is a \"NumberStreetCityStateZIP\", it's an `Address`.\n\nThat said, tuple and triplet naming is awkward, and I am not surprised we went down that path since we are mostly trying to clean up existing code that had them as three separate fields.  So I am not against `GroupVersion` or `GroupVersionKind`, but if we create a `GroupVersionKindField`, to describe a field in the API, and start creating `gvkf` acronyms in the code, we have gone too far.\n\nTo me, I would think things as follows:\n- `group` is a `string`\n- `GroupVersion` is more like a `Package` if I were to take Java naming conventions.  This also make sense to me since if we start to support third-party API groups, I would want to add the other fields to a `Package` like vendor for example.\n- `kind` is a `Kind`, which is a fully qualified means of addressing an object in a `Package`.  so `kind.Kind` is a `string`, and `kind.Package` is a `Package`.\n- `field` is a `Field`, which is a fully qualified means of addressing a member in a `Kind`.  so `field.Field` would be a name we can pass into reflection, etc.\n\nIf we are not wanting to describe things in something more akin to the above convention, then I think its confusing to not expand our internal acronyms for folks that come into the code.  I  prefer clarity so `gv` becomes `groupVersion`, `gvk` becomes `groupVersionKind`. \n",
        "createdAt" : "2015-12-09T15:03:31Z",
        "updatedAt" : "2015-12-09T15:03:31Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "942986e8-712c-40c5-af1a-5607e92d074b",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> - `GroupVersion` is more like a `Package` if I were to take Java naming conventions.  This also make sense to me since if we start to support third-party API groups, I would want to add the other fields to a `Package` like vendor for example.\n\nI think somewhere smarterclayton, lavalamp, and bgrant0607 has agreed vendor should be part of the GroupVersion.Group, and use \".\" to delimiter vendor and group.\n",
        "createdAt" : "2015-12-10T05:27:50Z",
        "updatedAt" : "2015-12-10T05:27:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "25aae94a-1285-415c-afd0-f4d9898df01a",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@caesarxuchao - I think what we name each token in a URL path is different than what we call the collection of path segments in the internal API server code base.  I still think `Package` is a more sensible name for what it is than `GroupVersion`, and `GroupVersionKind` is an eye-sore, and when I know we end up doing `GroupVersionKindField` we will all hate ourselves little on the inside ;-)\n",
        "createdAt" : "2015-12-10T15:50:11Z",
        "updatedAt" : "2015-12-10T15:50:11Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "bd1d9288-0fd4-49a3-a101-f7e6c5dba777",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> I think what we name each token in a URL path is different than what we call the collection of path segments in the internal API server code base.\n\nYes, you are right.\n\n`Package` sounds too generic. This struct currently lives in package `unversioned`, so in most places we would refer it as `unversioned.Package`, which doesn't contain much information. Perhaps something like `APIPackage`.\n",
        "createdAt" : "2015-12-10T23:20:25Z",
        "updatedAt" : "2015-12-10T23:20:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d3641fcc-dff6-49ee-950a-abb9062f5a00",
        "parentId" : "bd494939-ab65-4a9d-bff5-2159a65e358f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, group should be a domain name for disambiguation (mygroup.mycompany.com).\nWe should probably make explicit that our groups with no domain following\nare in the k8s.io domain or some such.\n\nOn Wed, Dec 9, 2015 at 11:28 PM, Chao Xu notifications@github.com wrote:\n\n> In pkg/api/copy_test.go\n> https://github.com/kubernetes/kubernetes/pull/18379#discussion_r47190465\n> :\n> \n> > @@ -32,24 +32,24 @@ import (\n> > \n> >  func TestDeepCopyApiObjects(t *testing.T) {\n> >     for i := 0; i < *fuzzIters; i++ {\n> > -       for _, gv := range []unversioned.GroupVersion{testapi.Default.InternalGroupVersion(), *testapi.Default.GroupVersion()} {\n> > -           f := apitesting.FuzzerFor(t, gv.String(), rand.NewSource(rand.Int63()))\n> > -           for kind := range api.Scheme.KnownTypes(gv) {\n> > -               doDeepCopyTest(t, gv.String(), kind, f)\n> > -       for _, version := range []unversioned.GroupVersion{testapi.Default.InternalGroupVersion(), *testapi.Default.GroupVersion()} {\n> > -           f := apitesting.FuzzerFor(t, version.String(), rand.NewSource(rand.Int63()))\n> - GroupVersion is more like a Package if I were to take Java naming\n>   conventions. This also make sense to me since if we start to support\n>   third-party API groups, I would want to add the other fields to a\n>   Package like vendor for example.\n> \n> I think somewhere smarterclayton, lavalamp, and bgrant0607 has agreed\n> vendor should be part of the GroupVersion.Group, and use \".\" to delimiter\n> vendor and group.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18379/files#r47190465.\n",
        "createdAt" : "2016-01-04T17:48:15Z",
        "updatedAt" : "2016-01-04T17:48:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "519b4e80d178d04d338144e9415ed07a298e2ab9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +34,38 @@\tfor i := 0; i < *fuzzIters; i++ {\n\t\tfor _, version := range []unversioned.GroupVersion{testapi.Default.InternalGroupVersion(), *testapi.Default.GroupVersion()} {\n\t\t\tf := apitesting.FuzzerFor(t, version.String(), rand.NewSource(rand.Int63()))\n\t\t\tfor kind := range api.Scheme.KnownTypes(version) {\n\t\t\t\tdoDeepCopyTest(t, version.WithKind(kind), f)"
  }
]