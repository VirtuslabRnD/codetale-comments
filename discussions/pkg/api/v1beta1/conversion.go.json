[
  {
    "id" : "3b5624de-eb5c-4434-b049-2114aa1e327b",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cace5897-3ed6-4380-ab3d-4cb1b09f0930",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Does the defaulting pass get invoked on the update path, or do you verify equality of the two representations?\n",
        "createdAt" : "2015-03-27T05:10:21Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "22e53772-d85d-4a06-a8c3-e7314d487ff6",
        "parentId" : "cace5897-3ed6-4380-ab3d-4cb1b09f0930",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Defaulting runs any time we convert a versioned object into internal, which\nshould include updates.\n\nOn Thu, Mar 26, 2015 at 10:10 PM, Brian Grant notifications@github.com\nwrote:\n\n> In pkg/api/v1beta1/conversion.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5939#discussion_r27276318\n> :\n> \n> > -               pn, err := strconv.Atoi(port)\n> > -               if err != nil {\n> > -                   return err\n> > -               }\n> > -               ep.Port = pn\n> > -               for j := range in.TargetRefs {\n> > -                   if in.TargetRefs[j].Endpoint != in.Endpoints[i] {\n> > -                       continue\n> > -                   }\n> > -                   ep.TargetRef = &newer.ObjectReference{}\n> > -                   if err := s.Convert(&in.TargetRefs[j].ObjectReference, ep.TargetRef, 0); err != nil {\n> > -                       return err\n> > -                   }\n> > -               }\n> > -           }\n> > -           // Back-compat fields are handled in the defaulting phase.\n> \n> Does the defaulting pass get invoked on the update path, or do you verify\n> equality of the two representations?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5939/files#r27276318\n> .\n",
        "createdAt" : "2015-03-27T05:27:29Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1304,1308 @@\t\t\t\treturn err\n\t\t\t}\n\t\t\t// Back-compat fields are handled in the defaulting phase.\n\t\t\treturn nil\n\t\t},"
  },
  {
    "id" : "1f9d6999-837b-41aa-a7d3-cda8ccda199e",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6d9dae-6aba-4e7b-9d54-b67a5c082f40",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I hope v1beta1 isn't around for too much longer, but is the expected behavior for v1beta1 documented somewhere?\n- endpoints created via v1beta1 and converted to v1beta3\n- endpoints created via v1beta3 and converted to v1beta1\n",
        "createdAt" : "2015-03-27T05:34:34Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "8763fce0-eb38-4c23-9336-e20443112b35",
        "parentId" : "8a6d9dae-6aba-4e7b-9d54-b67a5c082f40",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Added comments to v1b[12] about logic if one or the other type of endpoints are provided\n",
        "createdAt" : "2015-03-27T18:26:50Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1273,1277 @@\t\t\t\tfor j := range ss.Ports {\n\t\t\t\t\tssp := &ss.Ports[j]\n\t\t\t\t\tif ssp.Name != firstPortName {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}"
  },
  {
    "id" : "ed581e1b-b2b7-4212-8bb7-a9a9972148e5",
    "prId" : 5116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf9f90de-33bd-4e44-bc6f-4cd7e549ff52",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Just check whether NodeLegacyHostIP exists or not here.\n",
        "createdAt" : "2015-03-06T16:39:51Z",
        "updatedAt" : "2015-03-06T16:39:51Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf031fb0822d996e66301708c8a364a945e22b55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +731,735 @@\n\t\t\tif in.HostIP != \"\" {\n\t\t\t\tnewer.AddToNodeAddresses(&out.Status.Addresses,\n\t\t\t\t\tnewer.NodeAddress{Type: newer.NodeLegacyHostIP, Address: in.HostIP})\n\t\t\t}"
  },
  {
    "id" : "4e56dc03-ac39-41c5-b56f-309277787215",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a7b03ac-57cb-48bf-9c64-2c83f9593924",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "you can simplify this to:\n\n``` go\nif ep.Port, err = strconv.Atoi(port); err != nil {\n   return err\n}\n```\n",
        "createdAt" : "2015-02-19T06:58:22Z",
        "updatedAt" : "2015-02-19T06:58:22Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "d9963ec9-a9e0-46fc-b1bb-d92db7ce55de",
        "parentId" : "1a7b03ac-57cb-48bf-9c64-2c83f9593924",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Nope.  In the relentless goal of a dumber, I mean SIMPLER grammar, Go has done away with the idea of an lvalue and just has a \"name\" token.  ep.Port is not a name.  There's a bug open against go to allow this syntax, but it's at least a year old and not fixed.\n",
        "createdAt" : "2015-02-19T07:37:37Z",
        "updatedAt" : "2015-02-19T07:37:37Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1149,1153 @@\t\t\t\t}\n\t\t\t\tep.IP = host\n\t\t\t\tpn, err := strconv.Atoi(port)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err"
  },
  {
    "id" : "00468cc4-dfaa-49a1-948b-81895347d7b4",
    "prId" : 4575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02fba9a0-d425-4aa6-bdbf-4b10a2e614f0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think this approach could cause labels from different objects to collide. Note that it's not just pods that need this. See pkg/registry/event/rest.go for another example.\n",
        "createdAt" : "2015-02-19T20:16:19Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0f1c69f8-6218-473c-9f39-4318ef706848",
        "parentId" : "02fba9a0-d425-4aa6-bdbf-4b10a2e614f0",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Added apiResource in addition to the apiversion as discussed.\n",
        "createdAt" : "2015-02-20T07:13:53Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "48e7945f65999ee43d48947c6589cc02cdc91705",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1295,1299 @@\t// Add field conversion funcs.\n\terr = newer.Scheme.AddFieldLabelConversionFunc(\"v1beta1\", \"pods\",\n\t\tfunc(label, value string) (string, string, error) {\n\t\t\tswitch label {\n\t\t\tcase \"name\":"
  },
  {
    "id" : "166f9d09-2859-4fc8-8108-56133d696c31",
    "prId" : 4575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62c09dd4-4c73-4827-a37b-2ab7f7c1800f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Could you please add:\n\n```\n// TODO: This is evil. We should change bindings to write DesiredState.Host.\n```\n",
        "createdAt" : "2015-02-27T19:30:25Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9363bda1-464a-4da0-a18c-20d57b50c74f",
        "parentId" : "62c09dd4-4c73-4827-a37b-2ab7f7c1800f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think I convinced Brian that we don't need to sprinkle TODOs for this :)\n",
        "createdAt" : "2015-02-27T19:36:44Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "03f6a2f9-eb21-401d-b275-d0749a18579f",
        "parentId" : "62c09dd4-4c73-4827-a37b-2ab7f7c1800f",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Thanks :)\n",
        "createdAt" : "2015-02-28T00:12:30Z",
        "updatedAt" : "2015-02-28T00:12:30Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "48e7945f65999ee43d48947c6589cc02cdc91705",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1300,1304 @@\t\t\t\treturn \"name\", value, nil\n\t\t\tcase \"DesiredState.Host\":\n\t\t\t\treturn \"Status.Host\", value, nil\n\t\t\tcase \"DesiredState.Status\":\n\t\t\t\tpodStatus := PodStatus(value)"
  },
  {
    "id" : "ffda3295-1d7f-46b9-b5cd-904ff0e38a83",
    "prId" : 3841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1aca88a0-0235-4265-adb2-2662af0b5a99",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "OMG this seems error-prone. \n\nCould we use reflection to automatically convert all fields that are present in both in and out?\n\nI don't want to block this PR on addressing this, but please add a TODO.\n\n@thockin @smarterclayton Any ideas about how we could automate this? \n",
        "createdAt" : "2015-01-28T19:19:08Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "08261a14-8315-429a-80ba-6d1e276025ef",
        "parentId" : "1aca88a0-0235-4265-adb2-2662af0b5a99",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1. This is error prone and makes extending Containers struct tricky. I am all ears for a better approaches to handling this conversion logic. Happy to implement a better solution as well.\n",
        "createdAt" : "2015-01-28T19:22:17Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e36f63f8b909618281e0301d7eff7280e4556d7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +449,453 @@\t\t// Hence the need for a custom conversion function.\n\t\tfunc(in *newer.Container, out *Container, s conversion.Scope) error {\n\t\t\tif err := s.Convert(&in.Name, &out.Name, 0); err != nil {\n\t\t\t\treturn err\n\t\t\t}"
  },
  {
    "id" : "21942ffe-a055-40ef-bec6-cc86e9e8fe7c",
    "prId" : 3841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99e1cfda-58a5-400f-9d8c-0ff452b75cbe",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Comments about which case each conversion was would be super-helpful. \n",
        "createdAt" : "2015-01-28T19:32:33Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "33c2a5b2-7753-434d-9c3c-6e4fbc6816e5",
        "parentId" : "99e1cfda-58a5-400f-9d8c-0ff452b75cbe",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Done\n",
        "createdAt" : "2015-01-30T01:44:55Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e36f63f8b909618281e0301d7eff7280e4556d7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +528,532 @@\t\t// Fields 'CPU' and 'Memory' are not present in the internal Container object.\n\t\t// Hence the need for a custom conversion function.\n\t\tfunc(in *Container, out *newer.Container, s conversion.Scope) error {\n\t\t\tif err := s.Convert(&in.Name, &out.Name, 0); err != nil {\n\t\t\t\treturn err"
  },
  {
    "id" : "7476abaa-0295-416c-9bcc-1f5fdaf0ac57",
    "prId" : 3613,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10f76a1d-1aac-42b7-becf-5c567911a829",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This is different from other funcs above.  Is it correct, and if so does it deserve a comment?\n",
        "createdAt" : "2015-02-10T00:22:13Z",
        "updatedAt" : "2015-02-10T15:16:02Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b14d3361-a11f-44af-b912-403d92dacfa5",
        "parentId" : "10f76a1d-1aac-42b7-becf-5c567911a829",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am not sure what is different in your view, but I believe it's correct\n",
        "createdAt" : "2015-02-10T14:48:39Z",
        "updatedAt" : "2015-02-10T15:16:02Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bd0e12bbcb049854f85e763bfce66a37de3e261",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +732,736 @@\t\t\treturn nil\n\t\t},\n\t\tfunc(in *Namespace, out *newer.Namespace, s conversion.Scope) error {\n\t\t\tif err := s.Convert(&in.TypeMeta, &out.TypeMeta, 0); err != nil {\n\t\t\t\treturn err"
  },
  {
    "id" : "8686eb00-87d9-4f37-b89f-2620bb8a47ed",
    "prId" : 2912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea6f64a3-4efb-4b2d-a5a6-38b9686fe7d2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Shouldn't this be PodStatus rather than PodSpec?\n",
        "createdAt" : "2014-12-13T01:18:35Z",
        "updatedAt" : "2014-12-15T21:50:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9ad8cfac0fbc759cfabda1ec671d738ca1f1f12",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +197,201 @@\t\t\treturn nil\n\t\t},\n\t\tfunc(in *newer.PodSpec, out *PodState, s conversion.Scope) error {\n\t\t\tif err := s.Convert(&in, &out.Manifest, 0); err != nil {\n\t\t\t\treturn err"
  },
  {
    "id" : "ca6da485-6707-4a2f-bd0f-329c7b6f69dd",
    "prId" : 2912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "602bbf64-b3a2-4e78-a200-db2b0e293b6f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ditto.\n",
        "createdAt" : "2014-12-13T01:18:49Z",
        "updatedAt" : "2014-12-15T21:50:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f63e130d-502d-4005-b01d-39a87cf62584",
        "parentId" : "602bbf64-b3a2-4e78-a200-db2b0e293b6f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Legacy- that's v1beta1 and 2\n\n> On Dec 12, 2014, at 8:19 PM, bgrant0607 notifications@github.com wrote:\n> \n> In pkg/api/v1beta1/conversion.go:\n> \n> > @@ -194,6 +194,18 @@ func init() {\n> >             out.PodIP = in.PodIP\n> >             return nil\n> >         },\n> > -       func(in *newer.PodSpec, out *PodState, s conversion.Scope) error {\n> > -           if err := s.Convert(&in, &out.Manifest, 0); err != nil {\n> > -               return err\n> > -           }\n> > -           return nil\n> > -       },\n> > -       func(in *PodState, out *newer.PodSpec, s conversion.Scope) error {\n> >   Ditto.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-12-13T01:26:01Z",
        "updatedAt" : "2014-12-15T21:50:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9ad8cfac0fbc759cfabda1ec671d738ca1f1f12",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +203,207 @@\t\t\treturn nil\n\t\t},\n\t\tfunc(in *PodState, out *newer.PodSpec, s conversion.Scope) error {\n\t\t\tif err := s.Convert(&in.Manifest, &out, 0); err != nil {\n\t\t\t\treturn err"
  },
  {
    "id" : "b7108787-4060-4700-8591-f891391c7ac0",
    "prId" : 2911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4afb1dd2-30bb-4471-9723-2aff5e3584e9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Instead of conv function consider:\n\n```\nnewer.Scheme.AddStructFieldConversion(string(\"\"), \"Status\", string(\"\"), \"Condition\")\nnewer.Scheme.AddStructFieldConversion(string(\"\"), \"Condition\", string(\"\"), \"Status\")\n```\n\nI'm not 100% sure it's better. I have a change in the pipeline that will allow asserting parent type to avoid accidentally making this transformation to another type.\n",
        "createdAt" : "2014-12-15T20:53:21Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c1195f0a-0d53-4784-b9e1-25450f082365",
        "parentId" : "4afb1dd2-30bb-4471-9723-2aff5e3584e9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Does that actually work?  I tried it, but I may have done the wrong thing (I tried to use PodStatus / PodCondition and those failed)\n\n----- Original Message -----\n\n> > @@ -507,5 +507,35 @@ func init() {\n> >             out.FieldPath = in.FieldPath\n> >             return nil\n> >         },\n> > +\n> > -       // Event Status -> Condition\n> \n> Instead of conv function consider:\n> \n> ```\n> newer.Scheme.AddStructFieldConversion(string(\"\"), \"Status\", string(\"\"),\n> \"Condition\")\n> newer.Scheme.AddStructFieldConversion(string(\"\"), \"Condition\", string(\"\"),\n> \"Status\")\n> ```\n> \n> I'm not 100% sure it's better. I have a change in the pipeline that will\n> allow asserting parent type to avoid accidentally making this transformation\n> to another type.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2911/files#r21855738\n",
        "createdAt" : "2014-12-15T20:57:45Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "98d8f8d6-7d2a-4392-ba8c-a81a4ec65a2c",
        "parentId" : "4afb1dd2-30bb-4471-9723-2aff5e3584e9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It should work, if not there's a bug...\n",
        "createdAt" : "2014-12-15T21:03:32Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9cb96c2a-0632-41b7-84de-9e797422fe15",
        "parentId" : "4afb1dd2-30bb-4471-9723-2aff5e3584e9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I added a commented out block and a TODO about removing this when parent type assertions are added (was a bit worried about missing an edge case without it)\n\n----- Original Message -----\n\n> > @@ -507,5 +507,35 @@ func init() {\n> >             out.FieldPath = in.FieldPath\n> >             return nil\n> >         },\n> > +\n> > -       // Event Status -> Condition\n> \n> Instead of conv function consider:\n> \n> ```\n> newer.Scheme.AddStructFieldConversion(string(\"\"), \"Status\", string(\"\"),\n> \"Condition\")\n> newer.Scheme.AddStructFieldConversion(string(\"\"), \"Condition\", string(\"\"),\n> \"Status\")\n> ```\n> \n> I'm not 100% sure it's better. I have a change in the pipeline that will\n> allow asserting parent type to avoid accidentally making this transformation\n> to another type.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2911/files#r21855738\n",
        "createdAt" : "2014-12-16T14:42:06Z",
        "updatedAt" : "2014-12-16T14:43:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "88715cc6ef2d282628d5ad67addc9d9ee7e9f445",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +527,531 @@\t\t},\n\n\t\t// Event Status -> Condition\n\t\t// TODO: remove this when it becomes possible to specify a field name conversion on a specific type\n\t\tfunc(in *newer.Event, out *Event, s conversion.Scope) error {"
  },
  {
    "id" : "89e13e76-6b23-441b-95e4-d068120f865a",
    "prId" : 2539,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f642b0a2-f8b9-4c0d-a8a5-9abb9755ba0e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can we go further and add a reciprocal  function or flag, so you cut the LOC of these cases in half?\n",
        "createdAt" : "2014-11-26T01:21:14Z",
        "updatedAt" : "2014-11-26T01:21:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d762c996a0f991f69899911dc571d4046be941c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +31,35 @@\tnewer.Scheme.AddStructFieldConversion(TypeMeta{}, \"TypeMeta\", newer.ListMeta{}, \"ListMeta\")\n\n\tnewer.Scheme.AddStructFieldConversion(newer.TypeMeta{}, \"TypeMeta\", TypeMeta{}, \"TypeMeta\")\n\tnewer.Scheme.AddStructFieldConversion(newer.ObjectMeta{}, \"ObjectMeta\", TypeMeta{}, \"TypeMeta\")\n\tnewer.Scheme.AddStructFieldConversion(newer.ListMeta{}, \"ListMeta\", TypeMeta{}, \"TypeMeta\")"
  },
  {
    "id" : "6b5eb099-a8ef-4e48-baf9-c99f146f7f57",
    "prId" : 2195,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb12956-35fb-4e89-982d-816036face7f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "hm-- this is asking for a subtle bug if another field gets added to Status. I guess our fuzz test will catch it.\n",
        "createdAt" : "2014-11-11T19:25:35Z",
        "updatedAt" : "2014-11-11T22:03:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d3360bc2-6e1b-4725-8d0e-58bc2d6677a7",
        "parentId" : "fcb12956-35fb-4e89-982d-816036face7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, round trip should catch all of these things (although I'll double check that our initialization doesn't hide that).  We're not protected today from making a field round-trippable (adding it to the old api) but the fuzzer just nils it each time.  A negative round trip test should be done... but it's a lot of work.\n\n----- Original Message -----\n\n> > ```\n> >             return err\n> >         }\n> > ```\n> > -           out.CurrentState.Replicas = in.Status.Replicas\n> \n> hm-- this is asking for a subtle bug if another field gets added to Status. I\n> guess our fuzz test will catch it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2195/files#r20173444\n",
        "createdAt" : "2014-11-11T19:30:43Z",
        "updatedAt" : "2014-11-11T22:03:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4e2c29da-d155-4787-8841-101b2fa82aa7",
        "parentId" : "fcb12956-35fb-4e89-982d-816036face7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated with all comments made so far.\n\n----- Original Message -----\n\n> Yeah, round trip should catch all of these things (although I'll double check\n> that our initialization doesn't hide that).  We're not protected today from\n> making a field round-trippable (adding it to the old api) but the fuzzer\n> just nils it each time.  A negative round trip test should be done... but\n> it's a lot of work.\n> \n> ----- Original Message -----\n> \n> > > ```\n> > >           return err\n> > >       }\n> > > ```\n> > > -         out.CurrentState.Replicas = in.Status.Replicas\n> > \n> > hm-- this is asking for a subtle bug if another field gets added to Status.\n> > I\n> > guess our fuzz test will catch it.\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/2195/files#r20173444\n",
        "createdAt" : "2014-11-11T19:38:55Z",
        "updatedAt" : "2014-11-11T22:03:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a5900047263f96cc9e83e979e8a252e72dd2f63",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +260,264 @@\t\t\t\treturn err\n\t\t\t}\n\t\t\tout.CurrentState.Replicas = in.Status.Replicas\n\t\t\treturn nil\n\t\t},"
  }
]