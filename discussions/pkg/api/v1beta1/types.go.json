[
  {
    "id" : "99cbbaff-0062-471a-8f2f-4e541af6de7c",
    "prId" : 7343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ee9e1d-b11b-40df-bd0f-ef153ce91028",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "description in the struct tags everywhere\n",
        "createdAt" : "2015-04-28T23:27:01Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e5b904e8c462b2ccf0660a6f0fa7c4d45cd4252",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1681,1685 @@\n// SELinuxOptions are the labels to be applied to the container.\ntype SELinuxOptions struct {\n\t// SELinux user label\n\tUser string `json:\"user,omitempty\" description:\"the user label to apply to the container\"`"
  },
  {
    "id" : "e91cfe18-6dcb-499c-8815-2196b157750e",
    "prId" : 6739,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is fine for now - it's not your fault/problem, but I want to be on record that asking the user to spec an API version inside an object that is already API-versioned is asinine.  We should endeavor to do better than this in API v2.\n",
        "createdAt" : "2015-04-21T22:28:15Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "78a7aacb-9258-4e5f-b122-6513d6fd7a11",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On Apr 21, 2015, at 6:28 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/v1beta1/types.go:\n> \n> > @@ -397,6 +397,23 @@ type EnvVar struct {\n> >     Key  string `json:\"key,omitempty\" description:\"name of the environment variable; must be a C_IDENTIFIER; deprecated - use name instead\"`\n> >     // Optional: defaults to \"\".\n> >     Value string `json:\"value,omitempty\" description:\"value of the environment variable; defaults to empty string\"`\n> > -   // Optional: specify a source for the value of the EnvVar.\n> > -   Source *EnvVarSource `json:\"source,omitempty\" description:\"source for the environment variable's value; cannot be used if value is not empty\"`\n> >   +}\n> >   +\n> >   +// EnvVarSource represents a source for the value of an EnvVar.\n> >   +// Only one of its members may be specified.\n> >   +type EnvVarSource struct {\n> > -   // Selects a field of the pod; only name and namespace are supported.\n> > -   PodField *ObjectFieldSelector `json:\"podField,omitempty\" description:\"selectes a field of the pod; only name and namespace are supported\"`\n> >   +}\n> >   +\n> >   +// ObjectFieldSelector selects an APIVersioned field of an object.\n> >   +type ObjectFieldSelector struct {\n> > -   // The API version the FieldPath is written in terms of.\n> > -   APIVersion string `json:\"apiVersion,omitempty\" description=\"The API version that FieldPath is written in terms of\"`\n> >   This is fine for now - it's not your fault/problem, but I want to be on record that asking the user to spec an API version inside an object that is already API-versioned is asinine. We should endeavor to do better than this in API v2.\n> \n> All we have to do is default it in the conversion.  We just don't have a cheap way of doing that.\n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-21T22:31:00Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e482d019-8ddd-4705-aa03-d5c28d39db64",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Same problem as ObjectReference, validation errors, field selectors, and other field references.\n\nSorry I missed the intervening discussion (too much going on), but podField and ObjectFieldSelector seem inelegant. ObjectReference was sufficient and more extensible. I understand that it seems overly general right now, but if we wanted more specific, I'd rather scrap both EnvVarSource and ObjectFieldSelector and just put ValueFromField in EnvVar.\n",
        "createdAt" : "2015-04-22T04:29:28Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "63af93dd-575d-4594-a8df-864c19182087",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "regarding ObjectRef vs ObjectFieldSelector, here's my thinking.\n\nIt is a strict subset of ObejctRef.  We should not reuse struct just because it exists.  If it grows to be identical to ObjectRef, we can swap in that struct at will, and it will be compatible.  We would not add fields to a struct just because we might need them.  I feel we should be doing this MORE - use purpose-built structs that fit exactly what we need.  The struct name is not really even part of the API.\n\nThat's the last I'll say, if Brian wants to use Objectref, just do that \n",
        "createdAt" : "2015-04-22T04:50:06Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4afa7d37-58fd-45f4-b6fd-eff4bb31290e",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@bgrant0607 is `ValueFromField` a string?\nOn Wed, Apr 22, 2015 at 12:30 AM Brian Grant notifications@github.com\nwrote:\n\n> In pkg/api/v1beta1/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6739#discussion_r28843747\n> :\n> \n> > @@ -397,6 +397,23 @@ type EnvVar struct {\n> >     Key  string `json:\"key,omitempty\" description:\"name of the environment variable; must be a C_IDENTIFIER; deprecated - use name instead\"`\n> >     // Optional: defaults to \"\".\n> >     Value string `json:\"value,omitempty\" description:\"value of the environment variable; defaults to empty string\"`\n> > -   // Optional: specify a source for the value of the EnvVar.\n> > -   Source *EnvVarSource `json:\"source,omitempty\" description:\"source for the environment variable's value; cannot be used if value is not empty\"`\n> >   +}\n> >   +\n> >   +// EnvVarSource represents a source for the value of an EnvVar.\n> >   +// Only one of its members may be specified.\n> >   +type EnvVarSource struct {\n> > -   // Selects a field of the pod; only name and namespace are supported.\n> > -   PodField *ObjectFieldSelector `json:\"podField,omitempty\" description:\"selectes a field of the pod; only name and namespace are supported\"`\n> >   +}\n> >   +\n> >   +// ObjectFieldSelector selects an APIVersioned field of an object.\n> >   +type ObjectFieldSelector struct {\n> > -   // The API version the FieldPath is written in terms of.\n> > -   APIVersion string `json:\"apiVersion,omitempty\" description=\"The API version that FieldPath is written in terms of\"`\n> \n> Same problem as ObjectReference, validation errors, field selectors, and\n> other field references.\n> \n> Sorry I missed the intervening discussion (too much going on), but\n> podField and ObjectFieldSelector seem inelegant. ObjectReference was\n> sufficient and more extensible. I understand that it seems overly general\n> right now, but if we wanted more specific, I'd rather scrap both\n> EnvVarSource and ObjectFieldSelector and just put ValueFromField in EnvVar.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6739/files#r28843747\n> .\n",
        "createdAt" : "2015-04-22T04:50:07Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3c36f855-4f2b-4c9f-b6ba-77c2027f7070",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If you want to use ObjectFieldSelector, document that it must be a strict subset of ObjectReference.\n\nMy bigger beef is with the field name: podField. I'm 99% certain that we're going to need to be able to substitute fields of other objects. In the case that we support that in the API, podField is awkward. In the case that we push cross-object substitution to the client, podField seems both over- and under-specified (of course it must be a pod, but it can't be another pod).\n\nI'll try to provide a more constructive suggestion later tonight.\n",
        "createdAt" : "2015-04-23T00:46:50Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "569a8e5d-e87d-49d6-98fc-915ef4be75fd",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What's the argument against just \"field\"?\n",
        "createdAt" : "2015-04-23T02:00:10Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5985f0ae-a6e9-4162-9f59-425847d191d7",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "description nits: Delete leading \"The\" and refer to the json field names, not the Go struct names (so, fieldPath rather than FieldPath).\n",
        "createdAt" : "2015-04-25T00:06:04Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "992ae4b0-4d30-4c12-b35b-48e4b5bd3f1b",
        "parentId" : "a0d27d2b-bf1f-4745-94f8-1ba628bb76b4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ping (here and other API versions)\n",
        "createdAt" : "2015-04-25T03:15:37Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d30f09ebfac6476eed12a040b3da2ca44882062",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +412,416 @@type ObjectFieldSelector struct {\n\t// The API version the FieldPath is written in terms of.\n\tAPIVersion string `json:\"apiVersion,omitempty\" description=\"The API version that FieldPath is written in terms of\"`\n\t// The path of the field to select in the specified API version\n\tFieldPath string `json:\"fieldPath,omitempty\" description=\"The path of the field to select in the specified API version\"`"
  },
  {
    "id" : "7bce91a7-4664-433b-9255-d46bac0d3e87",
    "prId" : 6739,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da3f9756-2436-4a75-ab8e-4f1ff6a5ff27",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Need to document the format of this somewhere\n",
        "createdAt" : "2015-04-21T22:33:13Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4e805f07-04a9-44bc-9588-3a36521ea7ed",
        "parentId" : "da3f9756-2436-4a75-ab8e-4f1ff6a5ff27",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "+1 to documentation. For starters, an example in the description `(e.g., \"metadata.name\")` would be useful.\n\nDelete leading \"The\".\n\nFieldPath isn't really optional.\n",
        "createdAt" : "2015-04-25T00:02:43Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ce44198c-960d-4465-9353-9760e3fb5005",
        "parentId" : "da3f9756-2436-4a75-ab8e-4f1ff6a5ff27",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ping (here and other API versions)\n",
        "createdAt" : "2015-04-25T03:15:26Z",
        "updatedAt" : "2015-04-27T18:42:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5bd3720f-b5b9-486d-b13e-094345d48264",
        "parentId" : "da3f9756-2436-4a75-ab8e-4f1ff6a5ff27",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Gah, `description=`\n",
        "createdAt" : "2015-04-27T21:33:17Z",
        "updatedAt" : "2015-04-27T21:33:17Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d30f09ebfac6476eed12a040b3da2ca44882062",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +414,418 @@\tAPIVersion string `json:\"apiVersion,omitempty\" description=\"The API version that FieldPath is written in terms of\"`\n\t// The path of the field to select in the specified API version\n\tFieldPath string `json:\"fieldPath,omitempty\" description=\"The path of the field to select in the specified API version\"`\n}\n"
  },
  {
    "id" : "0d013de0-867b-41e6-8526-295784e111db",
    "prId" : 6597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63302d2d-6a3f-459d-b8e7-44347a82b1a4",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Missing description tags.\n",
        "createdAt" : "2015-04-20T23:16:19Z",
        "updatedAt" : "2015-04-20T23:16:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e189ebf0-e9cc-4406-9ee3-0957dd1b769d",
        "parentId" : "63302d2d-6a3f-459d-b8e7-44347a82b1a4",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Added them.\n",
        "createdAt" : "2015-04-20T23:47:23Z",
        "updatedAt" : "2015-04-20T23:47:23Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6ef2ddf8aa8b3b78fa3397476e4184f6f99731e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1604,1608 @@type ComponentCondition struct {\n\tType    ComponentConditionType `json:\"type\"`\n\tStatus  ConditionStatus        `json:\"status\"`\n\tMessage string                 `json:\"message,omitempty\" description:\"health check message received from the component\"`\n\tError   string                 `json:\"error,omitempty\" description:\"error code from health check attempt (if any)\"`"
  },
  {
    "id" : "43144c71-10e2-4e55-b4e2-821e82bd5818",
    "prId" : 6182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56368c55-9262-4503-b3c9-9d1087c68c0b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "FWIW, the long source comment isn't discoverable by users. I'd prefer to have any relevant details in the description.\n",
        "createdAt" : "2015-03-30T20:34:36Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "98f614f5-86bd-493d-bdb1-2187f9976a09",
        "parentId" : "56368c55-9262-4503-b3c9-9d1087c68c0b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "grammar rules?  Are these full sentences?\n",
        "createdAt" : "2015-03-30T21:05:56Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19f4939b1293b8b565a1087dcbb71c1ef46fe47",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +754,758 @@\tSessionAffinity AffinityType `json:\"sessionAffinity,omitempty\" description:\"enable client IP based session affinity; must be ClientIP or None; defaults to None\"`\n\n\t// Optional: Ports to expose on the service.  If this field is\n\t// specified, the legacy fields (Port, PortName, Protocol, and\n\t// ContainerPort) will be overwritten by the first member of this"
  },
  {
    "id" : "bfe06df4-8a98-4e62-b8f1-f64c2c1e9764",
    "prId" : 6182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "285431f1-7688-4e5e-a78e-eb910f4e0ec0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This isn't TargetPort just for intra-v1beta1 consistency? I'm fine with that.\n",
        "createdAt" : "2015-03-30T20:35:03Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9f7f52a7-9bbd-4494-b13c-0efb371c65df",
        "parentId" : "285431f1-7688-4e5e-a78e-eb910f4e0ec0",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "yes\n",
        "createdAt" : "2015-03-30T21:06:13Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19f4939b1293b8b565a1087dcbb71c1ef46fe47",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +781,785 @@\t// of Port is used (an identity map) - note this is a different default\n\t// than Service.ContainerPort.\n\tContainerPort util.IntOrString `json:\"containerPort\" description:\"the port to access on the containers belonging to pods targeted by the service; defaults to the service port\"`\n}\n"
  },
  {
    "id" : "07e70672-f806-4cbb-9550-a085f7e69fd7",
    "prId" : 5433,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80e9fcb4-278d-45db-bea3-97f8cdc96eba",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I'm not sure if it is okay to redefine v1beta1.\nDo any apiserver apis use this type?\n",
        "createdAt" : "2015-03-16T13:56:32Z",
        "updatedAt" : "2015-03-16T18:17:33Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "36bc0dcd-fe88-4676-83e6-3c302c1a5df0",
        "parentId" : "80e9fcb4-278d-45db-bea3-97f8cdc96eba",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I guess no endpoints use it, so this is ok.\n",
        "createdAt" : "2015-03-16T13:57:40Z",
        "updatedAt" : "2015-03-16T18:17:33Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "9d6a9e6f-bb30-4107-bf03-fb6adde0ddb9",
        "parentId" : "80e9fcb4-278d-45db-bea3-97f8cdc96eba",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - in fact in #5502 I'm removing BoundPods struct completely.\nBTW - I can revert this change if you prefer (this remains from the initial version, but currently I migrated all the usage of BoundPods to PodList).\n",
        "createdAt" : "2015-03-16T14:05:12Z",
        "updatedAt" : "2015-03-16T18:17:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d95e9e6712d9bf2d8c93a0f5cd253e3e9be184f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1080,1084 @@\n\t// Items is the list of all pods bound to a given host.\n\tItems []Pod `json:\"items\" description:\"list of all pods bound to a given host\"`\n}\n"
  },
  {
    "id" : "7c606bde-772b-4583-86da-433570e11642",
    "prId" : 5398,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3ea5306-6e07-4915-9b25-28d5067c741b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is this type going to be used in the API?\n",
        "createdAt" : "2015-03-16T22:33:16Z",
        "updatedAt" : "2015-03-24T21:33:42Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "06b1b284-1687-422a-abe2-f6648383b6d1",
        "parentId" : "c3ea5306-6e07-4915-9b25-28d5067c741b",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Yes, these are needed by Persistent Volumes.  This PR is a small/focused one to introduce the new volume interface method suggested by @thockin to determine AccessModeType for a volume.\n",
        "createdAt" : "2015-03-17T12:45:17Z",
        "updatedAt" : "2015-03-24T21:33:42Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "519cbc498b5f6c1958f35d53856cf2aee8f534d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@\n// used by VolumeSources to describe their mounting/access modes\ntype AccessModeType string\n\nconst ("
  },
  {
    "id" : "36e93c5b-ad03-4260-baa4-2d6c9ead6675",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bd347a3-383c-4fee-bfbb-9396ef1be635",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Do we need the comments, since we have the descriptions?\n",
        "createdAt" : "2015-02-20T21:47:33Z",
        "updatedAt" : "2015-02-20T21:48:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f6b7dda6-abcc-4c15-95f4-dbfa9867da3e",
        "parentId" : "5bd347a3-383c-4fee-bfbb-9396ef1be635",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I just added for consistency.\n",
        "createdAt" : "2015-02-20T21:50:58Z",
        "updatedAt" : "2015-02-20T21:50:58Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "df906fa4-d58d-43d7-9bd3-a3ddcde7c753",
        "parentId" : "5bd347a3-383c-4fee-bfbb-9396ef1be635",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok, though I don't think we're very consistent about it, and it just creates 2 things to update and keep in sync.\n",
        "createdAt" : "2015-02-20T21:59:26Z",
        "updatedAt" : "2015-02-20T21:59:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +447,451 @@// TODO: add LastTransitionTime, Reason, Message to match NodeCondition api.\ntype PodCondition struct {\n\t// Kind is the kind of the condition\n\tKind PodConditionKind `json:\"kind\" description:\"kind of the condition, currently only Ready\"`\n\t// Status is the status of the condition"
  },
  {
    "id" : "cec77a8f-4d5e-477f-ad3f-00d1e3c204f4",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dd2b304-27f2-4660-9374-4cabba7ccdb2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I usually put `specification of the desired state of the Foo`, but what you have is fine.\n",
        "createdAt" : "2015-02-20T21:49:20Z",
        "updatedAt" : "2015-02-20T21:49:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1ca1639e-8ff4-45d8-85c0-70de8dc77469",
        "parentId" : "7dd2b304-27f2-4660-9374-4cabba7ccdb2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Except that I'd eliminate the field name from the description.\n",
        "createdAt" : "2015-02-20T21:49:53Z",
        "updatedAt" : "2015-02-20T21:49:53Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "55fafdfc-ce9f-4c26-9a20-0e25adb7ec0f",
        "parentId" : "7dd2b304-27f2-4660-9374-4cabba7ccdb2",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I don't have a ton more time to refine this today, so if the goal is to enable the script to not allow more deviation, then this should be good to go.  We can nit text later I guess.\n",
        "createdAt" : "2015-02-20T21:51:58Z",
        "updatedAt" : "2015-02-20T21:51:58Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "787c79b1-a5b7-483d-bd73-5ab97ae07b96",
        "parentId" : "7dd2b304-27f2-4660-9374-4cabba7ccdb2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok, fine.\n",
        "createdAt" : "2015-02-20T22:46:59Z",
        "updatedAt" : "2015-02-20T22:46:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +714,718 @@\n\t// Spec defines the behavior of the Namespace.\n\tSpec NamespaceSpec `json:\"spec,omitempty\" description:\"spec defines the behavior of the Namespace\"`\n\n\t// Status describes the current status of a Namespace"
  },
  {
    "id" : "afe08bb0-02dc-41f7-9e91-5b3e1ac438a2",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e3967f7-4bd6-4326-b2f9-f46e2b9da148",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I would omit \"status describes\"\n",
        "createdAt" : "2015-02-20T21:50:50Z",
        "updatedAt" : "2015-02-20T21:50:50Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +717,721 @@\n\t// Status describes the current status of a Namespace\n\tStatus NamespaceStatus `json:\"status,omitempty\" description:\"status describes the current status of a Namespace\"`\n}\n"
  },
  {
    "id" : "fc765bbd-c638-4ae9-ae50-217675924cd8",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "694720b4-9ec5-475a-af92-b48abfb2b5f8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Omit \"limits is the\".\n",
        "createdAt" : "2015-02-20T21:51:48Z",
        "updatedAt" : "2015-02-20T21:51:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +1032,1036 @@type LimitRangeSpec struct {\n\t// Limits is the list of LimitRangeItem objects that are enforced\n\tLimits []LimitRangeItem `json:\"limits\" description:\"limits is the list of LimitRangeItem objects that are enforced\"`\n}\n"
  },
  {
    "id" : "b91aaaf2-e018-487a-8214-d2beda098367",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef657188-1c3e-4bf2-a0b8-6ff1be6f6e9c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How about \"resource limits enforced\"\n",
        "createdAt" : "2015-02-20T21:53:04Z",
        "updatedAt" : "2015-02-20T21:53:04Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1040,1044 @@\n\t// Spec defines the limits enforced\n\tSpec LimitRangeSpec `json:\"spec,omitempty\" description:\"spec defines the limits enforced\"`\n}\n"
  },
  {
    "id" : "867d6645-cbe0-4956-a5a0-d8ccd740231f",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cdf1822-a5a4-43be-9692-84d14419343b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Omit \"hard is the\"\n",
        "createdAt" : "2015-02-20T21:53:19Z",
        "updatedAt" : "2015-02-20T21:53:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +1072,1076 @@type ResourceQuotaStatus struct {\n\t// Hard is the set of enforced hard limits for each named resource\n\tHard ResourceList `json:\"hard,omitempty\" description:\"hard is the set of enforced hard limits for each named resource\"`\n\t// Used is the current observed total usage of the resource in the namespace\n\tUsed ResourceList `json:\"used,omitempty\" description:\"used is the current observed total usage of the resource in the namespace\"`"
  },
  {
    "id" : "191212db-d527-4a7f-a410-23ff7cb4ac90",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ca05c4f-7e81-47dd-9bc9-29b0356cdd3d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Omit \"used is the\"\n",
        "createdAt" : "2015-02-20T21:53:31Z",
        "updatedAt" : "2015-02-20T21:53:31Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "eff7373f-7683-4292-961a-7bf336fc30ac",
        "parentId" : "2ca05c4f-7e81-47dd-9bc9-29b0356cdd3d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Anyway, you get the idea. Omit the field name, \"is\", and \"the\". \n\n\"Defines\"/\"specifies\" and \"describes\" might sometimes be appropriate to distinguish spec and status, but might not always be necessary.\n",
        "createdAt" : "2015-02-20T21:57:07Z",
        "updatedAt" : "2015-02-20T21:57:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1074,1078 @@\tHard ResourceList `json:\"hard,omitempty\" description:\"hard is the set of enforced hard limits for each named resource\"`\n\t// Used is the current observed total usage of the resource in the namespace\n\tUsed ResourceList `json:\"used,omitempty\" description:\"used is the current observed total usage of the resource in the namespace\"`\n}\n"
  },
  {
    "id" : "bc3bc663-9042-49dd-8a54-9e81fa7a2412",
    "prId" : 4680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b312d61d-ecab-4e8f-ab6d-8f4001265313",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thanks. We'll merge the PR to fix the Travis check right after we merge this PR so more of these don't get merged.\n",
        "createdAt" : "2015-02-20T21:57:56Z",
        "updatedAt" : "2015-02-20T21:57:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "389e5c3a-3990-4572-8080-bb6673f44056",
        "parentId" : "b312d61d-ecab-4e8f-ab6d-8f4001265313",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Just \"reference to a secret object\"\n",
        "createdAt" : "2015-02-20T21:58:34Z",
        "updatedAt" : "2015-02-20T21:58:34Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d6085e692553b2d49882466f803f67bcc461943",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +159,163 @@type SecretSource struct {\n\t// Reference to a Secret\n\tTarget ObjectReference `json:\"target\" description:\"target is a reference to a secret\"`\n}\n"
  },
  {
    "id" : "1ebe3c8e-ed87-4592-9f16-0e3736597038",
    "prId" : 4514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3acb92e2-3029-4194-9429-a26b518c6341",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Everywhere else in the API, we use \"Kind\". For example:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/v1beta3/types.go#L506\n\nCould we please change this to `SecretKind`?\n",
        "createdAt" : "2015-02-21T06:23:27Z",
        "updatedAt" : "2015-02-21T06:23:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c5723d6c-f70c-4d35-901c-3e97ad8183f3",
        "parentId" : "3acb92e2-3029-4194-9429-a26b518c6341",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also, please put the kind above the Data field.\n",
        "createdAt" : "2015-02-21T06:24:21Z",
        "updatedAt" : "2015-02-21T06:24:21Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb001ada21710c87fc0af1cd18c8798303ea000a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1105,1109 @@\n\tData map[string][]byte `json:\"data,omitempty\"`\n\tType SecretType        `json:\"type,omitempty\"`\n}\n"
  },
  {
    "id" : "1e15904f-421f-498b-aa47-b2aafb4cd1a5",
    "prId" : 4482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7da948ab-b5b4-4818-989b-7f64e5e0aeb2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "An alternative is that it could just match up with Endpoints positionally, which would allow it to be a list of ObjectReference.\n",
        "createdAt" : "2015-03-05T06:21:59Z",
        "updatedAt" : "2015-03-10T22:37:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d8fda498-4702-4137-bdbc-2ca7b46156a8",
        "parentId" : "7da948ab-b5b4-4818-989b-7f64e5e0aeb2",
        "authorId" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "body" : "I didn't want to assume that all the Endpoints had to specify an ObjectReference. In the case one wouldn't exist we would have to pad with some nil value in order to preserve the positional relationship.\n",
        "createdAt" : "2015-03-05T22:36:26Z",
        "updatedAt" : "2015-03-10T22:37:39Z",
        "lastEditedBy" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "tags" : [
        ]
      },
      {
        "id" : "729f6faf-4e65-4aec-9727-a42b0605e09a",
        "parentId" : "7da948ab-b5b4-4818-989b-7f64e5e0aeb2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok\n",
        "createdAt" : "2015-03-10T18:41:42Z",
        "updatedAt" : "2015-03-10T22:37:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "daed0af3b54fb0c7c324c90d23f6039f0f4085e4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +618,622 @@\tEndpoints []string `json:\"endpoints\" description:\"list of endpoints corresponding to a service, of the form address:port, such as 10.10.1.1:1909\"`\n\t// Optional: The kubernetes object related to the entry point.\n\tTargetRefs []EndpointObjectReference `json:\"targetRefs,omitempty\" description:\"list of references to objects providing the endpoints\"`\n}\n"
  },
  {
    "id" : "7e4e12e8-da5e-47be-8e9f-544b2812e99f",
    "prId" : 3841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a533b1de-b219-4ce6-bc0a-ba3981e84fbb",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Did you run gofmt?\n",
        "createdAt" : "2015-01-28T19:42:35Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7dc4d6b5-f3d4-439d-b149-50ccaae413b2",
        "parentId" : "a533b1de-b219-4ce6-bc0a-ba3981e84fbb",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "IIRC I did.\n",
        "createdAt" : "2015-01-30T01:41:49Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e36f63f8b909618281e0301d7eff7280e4556d7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +273,277 @@\tResources  ResourceRequirementSpec `json:\"resources,omitempty\" description:\"Compute Resources required by this container\"`\n\t// Optional: Defaults to unlimited.\n\tCPU int `json:\"cpu,omitempty\" description:\"CPU share in thousandths of a core\"`\n\t// Optional: Defaults to unlimited.\n\tMemory        int64          `json:\"memory,omitempty\" description:\"memory limit in bytes; defaults to unlimited\"`"
  },
  {
    "id" : "e52dfc4f-dbc5-44c0-b075-06eded64f354",
    "prId" : 3841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78bbc490-c97f-44a6-a8f2-59517fc98639",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Cool. This should resolve #2264, or at least the main problem.\n",
        "createdAt" : "2015-01-30T06:34:03Z",
        "updatedAt" : "2015-02-01T02:20:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e36f63f8b909618281e0301d7eff7280e4556d7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +275,279 @@\tCPU int `json:\"cpu,omitempty\" description:\"CPU share in thousandths of a core\"`\n\t// Optional: Defaults to unlimited.\n\tMemory        int64          `json:\"memory,omitempty\" description:\"memory limit in bytes; defaults to unlimited\"`\n\tVolumeMounts  []VolumeMount  `json:\"volumeMounts,omitempty\" description:\"pod volumes to mount into the container's filesystem\"`\n\tLivenessProbe *LivenessProbe `json:\"livenessProbe,omitempty\" description:\"periodic probe of container liveness; container will be restarted if the probe fails\"`"
  },
  {
    "id" : "5a519ac5-90a0-42d3-84c3-f9e1550e3dc5",
    "prId" : 3043,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4b9c480-5010-4d56-9745-324f792ace4f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "In v1beta1 and v1beta2, this also needs to be added to ContainerManifest in order to be accessible.\n",
        "createdAt" : "2014-12-19T00:43:34Z",
        "updatedAt" : "2014-12-19T04:39:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a9b6b7a5-52fb-4269-bc5c-289dd3cca5de",
        "parentId" : "b4b9c480-5010-4d56-9745-324f792ace4f",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind, I forgot how messed up v1beta1 was.\n",
        "createdAt" : "2014-12-19T01:10:16Z",
        "updatedAt" : "2014-12-19T04:39:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e17193161342069d2b818d49ea620a498f1e6e6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +835,839 @@\t// the the scheduler simply schedules this pod onto that host, assuming that it fits\n\t// resource requirements.\n\tHost string `json:\"host,omitempty\" description:\"host requested for this pod\"`\n}\n"
  },
  {
    "id" : "0295584e-1f4b-47ef-8292-759235133255",
    "prId" : 1041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0e35594-4d9b-4a09-bc3c-0bd948a78dc1",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'll repeat a question from #1028: error reporting/handling, and input and output arguments.\n\nWe should convey failure of a hook to the user somehow. \n\nHave you thought about a mechanism to return the output to the user? Probably we need an event stream they can listen on. In this case, it would be nice to be able to get structured data back, so we could grow this into a real API. \n\nSimilarly, I'd like to pass structured information to the hook, so that we can grow it into a real API. In other threads, we've discussed environment variables, but structured data (e.g., JSON) seems better.\n",
        "createdAt" : "2014-08-26T23:10:36Z",
        "updatedAt" : "2014-09-02T22:14:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "84e84d98-436a-4a31-b596-62bdbf25c065",
        "parentId" : "a0e35594-4d9b-4a09-bc3c-0bd948a78dc1",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "TODO'd the structured data.\n\nAnd yes, I think we should probably log the output of the hook, but it seems part of a general logging solution, rather than lifecycle specific.\n",
        "createdAt" : "2014-08-27T22:53:08Z",
        "updatedAt" : "2014-09-02T22:14:18Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "ee07dec8-d5ee-4a8f-a93b-286342b32ab9",
        "parentId" : "a0e35594-4d9b-4a09-bc3c-0bd948a78dc1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What IS lifecycle-specific is whether hook failure should trigger container/pod failure. For instance, if someone were going to use a PreStart hook to do some kind of initialization of a shared volume, they might want the hook failure to trigger pod failure.\n\nThe most flexible option is also the easiest to implement: no, hook failure should not (automatically) cause pod failure. \n",
        "createdAt" : "2014-08-28T20:32:36Z",
        "updatedAt" : "2014-09-02T22:14:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd9ecf5b794594e9654c82962e246217db324f02",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +174,178 @@\tTCPSocket *TCPSocketAction `yaml:\"tcpSocket,omitempty\" json:\"tcpSocket,omitempty\"`\n\t// ExecProbe parameter, required if Type == 'exec'\n\tExec *ExecAction `yaml:\"exec,omitempty\" json:\"exec,omitempty\"`\n\t// Length of time before health checking is activated.  In seconds.\n\tInitialDelaySeconds int64 `yaml:\"initialDelaySeconds,omitempty\" json:\"initialDelaySeconds,omitempty\"`"
  },
  {
    "id" : "bf7d0d82-d59b-4de9-ae99-860c781591b1",
    "prId" : 964,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24ed2d1e-ba08-4dea-8197-332b13849fba",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "ErrorCause?  StatusDetails?\n",
        "createdAt" : "2014-08-25T17:33:24Z",
        "updatedAt" : "2014-08-26T17:39:26Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "db45a8a6-8d96-4184-b075-dd0ecbc2403b",
        "parentId" : "24ed2d1e-ba08-4dea-8197-332b13849fba",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "In this case it's nested inside StatusDetails.  ErrorCause is reasonable if it's always errors - I don't have a clear justification to either always be errors or support other causes.  And \"working\" in theory could have a \"cause\" field for more data (although again, that seems dubious).\n",
        "createdAt" : "2014-08-25T21:27:23Z",
        "updatedAt" : "2014-08-26T17:39:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fb7d747a-6fea-466f-9170-965209448d20",
        "parentId" : "24ed2d1e-ba08-4dea-8197-332b13849fba",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "your Godoc explicitly mentions failure, so I'd go with FailureCause unless you'd rather update the Godoc to cover non failures, in which case I suppose StatusCause could be ok, but I agree that \"working\" is unlikely to need a StatusCause.\n",
        "createdAt" : "2014-08-26T17:21:18Z",
        "updatedAt" : "2014-08-26T17:39:26Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a841a49fddfa50355312ccdb3f9e0eb3522180c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +459,463 @@// StatusCause provides more information about an api.Status failure, including\n// cases when multiple errors are encountered.\ntype StatusCause struct {\n\t// A machine-readable description of the cause of the error. If this value is\n\t// empty there is no information available."
  },
  {
    "id" : "6da7476e-e31f-4c27-b35b-ac10fa64607f",
    "prId" : 875,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7a5de2e-71cd-4a64-952a-b5f0d83d0e47",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit for a followup: comment that exiting with a 0 status indicates success.\n",
        "createdAt" : "2014-08-18T19:05:26Z",
        "updatedAt" : "2014-08-18T19:05:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0caae9c1d4ab191e4da498da9938c9b775245b5d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +159,163 @@\t// command  is root ('/') in the container's filesystem.  The command is simply exec'd, it is\n\t// not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use\n\t// a shell, you need to explicitly call out to that shell\n\tCommand []string `yaml:\"command,omitempty\" json:\"command,omitempty\"`\n}"
  }
]