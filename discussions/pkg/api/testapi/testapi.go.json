[
  {
    "id" : "a0d8d4cc-e5c7-4713-a2c6-88a66df1df3f",
    "prId" : 68302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68302#pullrequestreview-152788157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd50cae-e43e-4faf-a933-c934a03fc312",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "is it necessary for golint?",
        "createdAt" : "2018-09-06T03:59:51Z",
        "updatedAt" : "2018-09-07T07:29:24Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "2f444f93-6d36-4043-a52c-bcb31fa90a79",
        "parentId" : "5cd50cae-e43e-4faf-a933-c934a03fc312",
        "authorId" : "83abd49f-fe9a-42f1-b7e5-93a6c913c198",
        "body" : "golint reported this: \r\n`pkg/api/testapi/testapi.go:325:9: if block ends with a return statement, so drop this else and outdent its block`\r\nWhich makes sense, right? If we have return in `if` itself, then there is no need of `else`. We can just keep the logic outside of else block.",
        "createdAt" : "2018-09-06T06:33:34Z",
        "updatedAt" : "2018-09-07T07:29:24Z",
        "lastEditedBy" : "83abd49f-fe9a-42f1-b7e5-93a6c913c198",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fba36291cb4630c5cf9df0afa3b4121855dbd08",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +329,333 @@\t\treturn fmt.Sprintf(\"/api/%s/%s/%s\", g.externalGroupVersion.Version, resource, name)\n\t}\n\t// TODO: will need a /apis prefix once we have proper multi-group\n\t// support\n\tif name == \"\" {"
  },
  {
    "id" : "ce30be0d-238d-4c49-887c-02e8b5d828cb",
    "prId" : 46294,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46294#pullrequestreview-40404669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d117ad7-7140-4404-935d-4763d75ac96c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The purpose is adding the admissionregistration group to testapi even if it's not specified in \"KUBE_TEST_API\". Otherwise when running test locally, pkg/api/serialization_test.go doesn't test the admissionregistration types.",
        "createdAt" : "2017-05-25T22:03:37Z",
        "updatedAt" : "2017-05-26T07:14:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e506c46a3a8007e943aac1e743608f6bbc148c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +281,285 @@\t\t}\n\t}\n\tif _, ok := Groups[admissionregistration.GroupName]; !ok {\n\t\texternalGroupVersion := schema.GroupVersion{Group: admissionregistration.GroupName, Version: api.Registry.GroupOrDie(admissionregistration.GroupName).GroupVersion.Version}\n\t\tGroups[admissionregistration.GroupName] = TestGroup{"
  },
  {
    "id" : "427696ed-fc73-41a8-9625-6f872bb34420",
    "prId" : 36001,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36001#pullrequestreview-6797347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bde799b-cd55-463c-b3d4-4ad0d68f36f5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If nobody uses this, don't add it.  We want less code to touch for each group you add, not more.\n",
        "createdAt" : "2016-11-02T11:53:11Z",
        "updatedAt" : "2016-11-02T11:53:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "051382687d4ddcb85ffea9c0f95d1671e6dd18c2",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +291,295 @@\tStorage = Groups[storage.GroupName]\n\tImagePolicy = Groups[imagepolicy.GroupName]\n\tAuthorization = Groups[authorization.GroupName]\n}\n"
  },
  {
    "id" : "2be382fa-8861-4fd2-b7c0-970abbf89c98",
    "prId" : 36001,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36001#pullrequestreview-6797441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89720786-865b-48c3-8387-8903cb052f33",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It'd be nice to have a unit test somewhere that makes sure this parallel registration stays in sync.\n",
        "createdAt" : "2016-11-02T11:53:49Z",
        "updatedAt" : "2016-11-02T11:53:50Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "051382687d4ddcb85ffea9c0f95d1671e6dd18c2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\t}\n\t}\n\tif _, ok := Groups[authorization.GroupName]; !ok {\n\t\texternalGroupVersion := unversioned.GroupVersion{Group: authorization.GroupName, Version: registered.GroupOrDie(authorization.GroupName).GroupVersion.Version}\n\t\tGroups[authorization.GroupName] = TestGroup{"
  },
  {
    "id" : "895bf40b-d77a-4321-9798-b04059529ec2",
    "prId" : 34555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34555#pullrequestreview-3757031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26330b97-1150-4b0b-ad7b-355c9855318e",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "This is ugly. I would prefer this and/or other packages providing APIs to use to do the testing without having to modify this package and register it globally. Way out of scope though.\n",
        "createdAt" : "2016-10-11T18:42:08Z",
        "updatedAt" : "2016-10-12T20:26:34Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "2e56555d-5865-46e8-b063-3f7d63305147",
        "parentId" : "26330b97-1150-4b0b-ad7b-355c9855318e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This whole package should not exist, we should reuse the manager in apimachinery/registered. It's a big change though. @mml This is one of the refactoring changes I want to make.\n",
        "createdAt" : "2016-10-11T20:23:08Z",
        "updatedAt" : "2016-10-12T20:26:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "25e4dccefe216bf51d04888fb412420a5b543aee",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +259,263 @@\t\t}\n\t}\n\tif _, ok := Groups[kubeadm.GroupName]; !ok {\n\t\texternalGroupVersion := unversioned.GroupVersion{Group: kubeadm.GroupName, Version: registered.GroupOrDie(kubeadm.GroupName).GroupVersion.Version}\n\t\tGroups[kubeadm.GroupName] = TestGroup{"
  },
  {
    "id" : "2992b429-48b0-4357-a30a-bda0dc3ad99e",
    "prId" : 30631,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22e8d690-a991-4eb2-baab-9d99bbcb9c89",
        "parentId" : null,
        "authorId" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "body" : "Whoops, this is duplicated now.\n",
        "createdAt" : "2016-08-16T21:12:52Z",
        "updatedAt" : "2016-08-19T02:00:23Z",
        "lastEditedBy" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "tags" : [
        ]
      },
      {
        "id" : "b7e0bc65-30aa-4900-9d59-33ceffb34319",
        "parentId" : "22e8d690-a991-4eb2-baab-9d99bbcb9c89",
        "authorId" : "8a10a1b5-308d-4339-9079-66fe95555a6b",
        "body" : "Thanks! Missed this when rebasing.\n",
        "createdAt" : "2016-08-16T23:09:29Z",
        "updatedAt" : "2016-08-19T02:00:23Z",
        "lastEditedBy" : "8a10a1b5-308d-4339-9079-66fe95555a6b",
        "tags" : [
        ]
      }
    ],
    "commit" : "711e3cff9812b5a1d19ffca2c9b3ff0ab6963491",
    "line" : null,
    "diffHunk" : "@@ -1,1 +229,233 @@\t}\n\n\tif _, ok := Groups[imagepolicy.GroupName]; !ok {\n\t\texternalGroupVersion := unversioned.GroupVersion{Group: imagepolicy.GroupName, Version: registered.GroupOrDie(imagepolicy.GroupName).GroupVersion.Version}\n\t\tGroups[imagepolicy.GroupName] = TestGroup{"
  },
  {
    "id" : "ebe47dcd-9847-4dd4-93d7-1b8b6ca16d30",
    "prId" : 27426,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a1721d8-e417-41df-bd5c-45f333f5e9df",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@soltysh I think this means we only test the last version of a group. Could you leave a note in test-go.sh and test-integration.sh?\n",
        "createdAt" : "2016-06-20T17:18:35Z",
        "updatedAt" : "2016-06-21T13:14:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "842b9c57-34f9-4186-b008-782a1fde0e5a",
        "parentId" : "8a1721d8-e417-41df-bd5c-45f333f5e9df",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "That is correct. I'll add it right away.\n",
        "createdAt" : "2016-06-21T12:50:19Z",
        "updatedAt" : "2016-06-21T13:14:54Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "feb43c5e6d2917a03c52bc6807aa42a3973fbd7c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +107,111 @@\t\t\tinternalGroupVersion := unversioned.GroupVersion{Group: groupVersion.Group, Version: runtime.APIVersionInternal}\n\t\t\tGroups[groupVersion.Group] = TestGroup{\n\t\t\t\texternalGroupVersion: groupVersion,\n\t\t\t\tinternalGroupVersion: internalGroupVersion,\n\t\t\t\tinternalTypes:        api.Scheme.KnownTypes(internalGroupVersion),"
  },
  {
    "id" : "9a7e8f05-6e70-4624-a5d7-6b557b6260b6",
    "prId" : 23288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e0984be-b092-43f1-85ff-fe77ae7233cf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Comment? Should this be a method on Groups instead?\n",
        "createdAt" : "2016-03-21T20:49:01Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1e792dba-3e51-4d33-9ae5-172fee48199b",
        "parentId" : "2e0984be-b092-43f1-85ff-fe77ae7233cf",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1\n",
        "createdAt" : "2016-03-22T08:28:06Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "54eaa56b921a4cd93ab5db5215d094decdc948bf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +237,241 @@\n// ExternalGroupVersions returns all external group versions allowed for the server.\nfunc ExternalGroupVersions() []unversioned.GroupVersion {\n\tversions := []unversioned.GroupVersion{}\n\tfor _, g := range Groups {"
  },
  {
    "id" : "7142dea1-1709-4963-bcc6-1563447da9cd",
    "prId" : 21675,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c41229f-f898-4017-9fbd-9bb27a4c783a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thanks for dealing with this file. I think it needs some help in the future but I won't ask you do to that.\n",
        "createdAt" : "2016-04-30T00:11:25Z",
        "updatedAt" : "2016-05-10T20:40:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "afc1d41b-b29a-4393-b320-65ab5820e94f",
        "parentId" : "0c41229f-f898-4017-9fbd-9bb27a4c783a",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yes it does :/. My work is just a tip of an iceberg we need to dig into to get multiple versions fully testable.\n",
        "createdAt" : "2016-05-01T20:46:46Z",
        "updatedAt" : "2016-05-10T20:40:39Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a31ca0dc983c6369173e2c3e229429cd15514c6b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +61,65 @@\ntype TestGroup struct {\n\t// the first element in the group is meant to be the preferred version\n\texternalGroupVersions []unversioned.GroupVersion\n\tinternalGroupVersion  unversioned.GroupVersion"
  },
  {
    "id" : "6158fd31-06e2-4d34-9ca2-fb4baea59b33",
    "prId" : 21434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e4df58d-bb4f-4832-816a-999af9a4a69f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I missed this in @piosz's change-- can you move the following `if _, ok := Groups[extensions.GroupName]; !ok {` section above the batch & autoscaling setup code? otherwise, referencing the extensions group here may not do what we want.\n",
        "createdAt" : "2016-02-18T23:08:26Z",
        "updatedAt" : "2016-02-19T23:56:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e0ea22c8-ec39-4a19-972c-715f82bf4d64",
        "parentId" : "1e4df58d-bb4f-4832-816a-999af9a4a69f",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "ok\n",
        "createdAt" : "2016-02-18T23:38:46Z",
        "updatedAt" : "2016-02-19T23:56:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab89e95cee2a14b981cc9ddecc21db67a35019a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\tGroups[batch.GroupName] = TestGroup{\n\t\t\texternalGroupVersion: unversioned.GroupVersion{Group: batch.GroupName, Version: registered.GroupOrDie(batch.GroupName).GroupVersion.Version},\n\t\t\tinternalGroupVersion: extensions.SchemeGroupVersion,\n\t\t}\n\t}"
  },
  {
    "id" : "311b8513-3eea-4270-b4e2-79813150633b",
    "prId" : 19105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f3eae76-9118-4d16-96b4-1a08b3f5b89e",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I think I might have missed where this is used and what it's for. These 3 values seem readily available. I would understand if this actually returned a ContentConfig, but it only gives you 3 easily gettable values used to build one.\n",
        "createdAt" : "2016-01-06T18:03:05Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "f67cae08-f386-4e28-b455-16eb7eaf3bd9",
        "parentId" : "9f3eae76-9118-4d16-96b4-1a08b3f5b89e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It doesn't return a ContentConfig because of a circular dependency (an awkward one).  The intent was to ease initialization of the struct, especially for when we want to switch out the content type and codec together (to test protobuf and yaml and others)\n",
        "createdAt" : "2016-01-07T03:44:09Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ea219b8b-8b4d-4868-a807-0ea73c923be0",
        "parentId" : "9f3eae76-9118-4d16-96b4-1a08b3f5b89e",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Hmm.. To me, this use case suggest that perhaps content type should be part of the codec. Thoughts?\n",
        "createdAt" : "2016-01-07T18:40:04Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "5759852a-19e1-4f1c-86bb-81282b7bbf01",
        "parentId" : "9f3eae76-9118-4d16-96b4-1a08b3f5b89e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I wanted to keep codec small enough that it was just two methods - encode\nand decode.  Mime type is definitely something that the person who returns\nthe codec knows - the struct returned there looks a lot like\nContentConfig.  We could potentially move a contentconfig like struct into\nruntime - but then would we want to import it into our client config struct?\n\nThe other case I had today was with the streaming codec (which will be a\nfollow up pull after split codec lands) - it feels reasonable for Encoder\nto know how return an io.Writer that does framing (for streaming protocols)\n- having both an Encoder and StreamingEncoder seems incorrect.  The short\n  term choice I made was to have Encoder support returning a streaming\n  encoder as an optional interface, but this means that wrapping encoders\n  (something we want to encourage) becomes harder.  An alternate choice would\n  be to have the mechanism for getting codecs to also allow you to say \"i\n  want the streaming codec for this codec\" by passing a codec back.\n\nOn Thu, Jan 7, 2016 at 1:40 PM, krousey notifications@github.com wrote:\n\n> In pkg/api/testapi/testapi.go\n> https://github.com/kubernetes/kubernetes/pull/19105#discussion_r49108395\n> :\n> \n> > @@ -79,6 +79,10 @@ func init() {\n> >     Extensions = Groups[extensions.GroupName]\n> >  }\n> > \n> > +func (g TestGroup) ContentConfig() (string, *unversioned.GroupVersion, runtime.Codec) {\n> > -   return \"application/json\", g.GroupVersion(), g.Codec()\n> >   +}\n> >   +\n> \n> Hmm.. To me, this use case suggest that perhaps content type should be\n> part of the codec. Thoughts?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/19105/files#r49108395.\n",
        "createdAt" : "2016-01-08T19:37:03Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c7eded9992ab3094d6d0173a722cf59f18006f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +83,87 @@\treturn \"application/json\", g.GroupVersion(), g.Codec()\n}\n\nfunc (g TestGroup) GroupVersion() *unversioned.GroupVersion {\n\tcopyOfGroupVersion := g.externalGroupVersion"
  },
  {
    "id" : "0be6b391-1844-48e4-ba76-bc6539600ef8",
    "prId" : 18231,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ba5a31c-4228-4556-a78f-bdf1ce46770c",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "No need to add this. Struct literals are fine.\n",
        "createdAt" : "2015-12-11T18:56:53Z",
        "updatedAt" : "2015-12-14T19:24:55Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "f2aeab08-679d-40cf-a292-c77cd2c80b29",
        "parentId" : "8ba5a31c-4228-4556-a78f-bdf1ce46770c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The two fields of TestGroup are private. When I construct the TestGroup using struct literals in my test the compiler complains.\n",
        "createdAt" : "2015-12-11T19:10:41Z",
        "updatedAt" : "2015-12-14T19:24:55Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f9a79ef4-4680-41a5-9b8f-d6a1a26ac1c6",
        "parentId" : "8ba5a31c-4228-4556-a78f-bdf1ce46770c",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "D'oh. You're right. Fine :)\n\nOn Fri, Dec 11, 2015 at 11:10 AM, Chao Xu notifications@github.com wrote:\n\n> In pkg/api/testapi/testapi.go\n> https://github.com/kubernetes/kubernetes/pull/18231#discussion_r47391902\n> :\n> \n> > @@ -200,3 +200,7 @@ func GetCodecForObject(obj runtime.Object) (runtime.Codec, error) {\n> >     }\n> >     return nil, fmt.Errorf(\"unexpected kind: %v\", kind)\n> >  }\n> > +\n> > +func NewTestGroup(external, internal unversioned.GroupVersion) TestGroup {\n> > -   return TestGroup{external, internal}\n> >   +}\n> \n> The two fields of TestGroup are private. When I construct the TestGroup\n> using struct literals in my test the compiler complains.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18231/files#r47391902.\n",
        "createdAt" : "2015-12-11T19:15:11Z",
        "updatedAt" : "2015-12-14T19:24:55Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "05e3cb8bfb757042c0b963d904b69c01c090ece6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +204,208 @@func NewTestGroup(external, internal unversioned.GroupVersion) TestGroup {\n\treturn TestGroup{external, internal}\n}"
  },
  {
    "id" : "56e29223-dd69-49f6-b057-0ef8f5c16a59",
    "prId" : 16621,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4b8d87d-ec07-4246-b1db-db363e818919",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you for fixing this!\n",
        "createdAt" : "2015-10-30T22:13:07Z",
        "updatedAt" : "2015-11-02T17:49:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5f11f22e-bd61-4a88-aedf-9b64217592fa",
        "parentId" : "c4b8d87d-ec07-4246-b1db-db363e818919",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1\n",
        "createdAt" : "2015-11-02T18:49:14Z",
        "updatedAt" : "2015-11-02T18:49:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd5b80f9e3aa7caea0d690408a576dbc1d37bc4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +92,96 @@func (g TestGroup) Codec() runtime.Codec {\n\t// TODO: caesarxuchao: Restructure the body once we have a central `latest`.\n\tinterfaces, err := latest.GroupOrDie(g.Group).InterfacesFor(g.GroupVersionUnderTest)\n\tif err != nil {\n\t\tpanic(err)"
  },
  {
    "id" : "346c8c86-b654-47f9-ac02-e2db10c2cda9",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45c43005-50aa-458f-a589-ac5513070011",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Recommend just VersionUnderTest-- store e.g. \"core\" and \"v1\" separately, not \"core\" and \"core/v1\".\n",
        "createdAt" : "2015-09-04T17:02:35Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b36797a6-54ed-410c-be94-8e813ed80a7e",
        "parentId" : "45c43005-50aa-458f-a589-ac5513070011",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "We will use \"group/version\" frequently and it's not a simple `group+\"/\"+version` because we have \"v1\" as a special case. I think it's inefficient to call a function to concatenate the group with version. How about we keep all three in the struct?\n\n```\ntype TestGroup struct {\n    Group string\n    Version string\n    // in the format of \"group/version\"\n    GroupVersionUnderTest string\n}\n```\n",
        "createdAt" : "2015-09-04T17:24:40Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "7257dd2e-145c-4779-b5ff-798ae24d0ba5",
        "parentId" : "45c43005-50aa-458f-a589-ac5513070011",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm not too worried about calling the function frequently, but if you want to store all three I won't complain.\n",
        "createdAt" : "2015-09-04T17:30:53Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@\tVersionUnderTest string\n\t// Group and Version. In most cases equals to Group + \"/\" + VersionUnverTest\n\tGroupVersionUnderTest string\n}\n"
  },
  {
    "id" : "bdde635b-85a6-46d7-b9af-4aadb5af23e9",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34efab75-c981-4804-848a-38fb2ea405df",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I recommend just putting a default value into it if it's empty?\n",
        "createdAt" : "2015-09-04T17:03:47Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "501a0e8d-e2e0-4418-957c-9e494557911f",
        "parentId" : "34efab75-c981-4804-848a-38fb2ea405df",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "We will default the test versions to the latest version of groups several lines below this.\n\nIt's better to do the defaulting in the current way. Imaging the env var only contains parts of the groups, e.g.,  KUBE_TEST_API=v1, where the test version of the experimental group is not specified, then we need to default the left groups one by one.\n",
        "createdAt" : "2015-09-04T18:30:22Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +47,51 @@func init() {\n\tkubeTestAPI := os.Getenv(\"KUBE_TEST_API\")\n\tif kubeTestAPI != \"\" {\n\t\ttestGroupVersions := strings.Split(kubeTestAPI, \",\")\n\t\tfor _, groupVersion := range testGroupVersions {"
  },
  {
    "id" : "8d72db45-d4d1-4831-a084-195d9e7b02da",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c47f706-671e-4a30-be41-2e568d36caba",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Clarify the exact format this is returned in. group/version or just version?\n",
        "createdAt" : "2015-09-04T17:04:21Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a6a92bc0-2b03-4f87-b5b4-fac8b78cdb0f",
        "parentId" : "3c47f706-671e-4a30-be41-2e568d36caba",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, I see, this is just version. It's probably clear enough.\n",
        "createdAt" : "2015-09-04T17:04:55Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : null,
    "diffHunk" : "@@ -1,1 +72,76 @@}\n\n// Version returns the API version to test against, as set by the KUBE_TEST_API env var.\nfunc (g TestGroup) Version() string {\n\treturn g.VersionUnderTest"
  },
  {
    "id" : "99eb0682-1a95-44c0-840c-cf2ac9ca1518",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f51e4a89-4ee1-4393-a79d-6a0f5668e84b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The bodies of these two ifs are exactly alike-- can we lose the if statements?\n\ni.e., make this function's body just be:\n\n``` go\n        interfaces, err := latest.InterfacesFor(g.GroupAndVersion())\n        if err != nil {\n            panic(err)\n        }\n        return interfaces.Codec\n```\n",
        "createdAt" : "2015-09-04T17:07:04Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dc4e01a2-400f-49b6-873c-e31d764e080f",
        "parentId" : "f51e4a89-4ee1-4393-a79d-6a0f5668e84b",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The reason they stay separate now is that we have latest and explatest. It's on my TODO list to have a central `latest`.\n",
        "createdAt" : "2015-09-04T17:12:23Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e7b50de9-9fc2-41c6-b8cb-4608d75f459c",
        "parentId" : "f51e4a89-4ee1-4393-a79d-6a0f5668e84b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, I did not notice the difference, sorry! This is fine then, maybe you can add a TODO about fixing it when we have a central `latest`.\n",
        "createdAt" : "2015-09-04T17:29:38Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : null,
    "diffHunk" : "@@ -1,1 +88,92 @@func (g TestGroup) Codec() runtime.Codec {\n\t// TODO: caesarxuchao: Restructure the body once we have a central `latest`.\n\tif g.Group == \"\" {\n\t\tinterfaces, err := latest.InterfacesFor(g.VersionUnderTest)\n\t\tif err != nil {"
  },
  {
    "id" : "1293bef9-1257-4d4e-9374-09dadff254e6",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0544c132-32c1-4fd2-ac50-d46ad9636434",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Same comment as for Codec.\n",
        "createdAt" : "2015-09-04T17:07:32Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +107,111 @@// Converter returns the api.Scheme for the API version to test against, as set by the\n// KUBE_TEST_API env var.\nfunc (g TestGroup) Converter() runtime.ObjectConvertor {\n\t// TODO: caesarxuchao: Restructure the body once we have a central `latest`.\n\tif g.Group == \"\" {"
  },
  {
    "id" : "cce5bc9b-c211-4aa0-bb9b-d75a9b43bad9",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7995ef8d-a2cf-4a85-98b9-7a96d245e989",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Same comment as for Codec.\n",
        "createdAt" : "2015-09-04T17:07:41Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +129,133 @@// MetadataAccessor returns the MetadataAccessor for the API version to test against,\n// as set by the KUBE_TEST_API env var.\nfunc (g TestGroup) MetadataAccessor() meta.MetadataAccessor {\n\t// TODO: caesarxuchao: Restructure the body once we have a central `latest`.\n\tif g.Group == \"\" {"
  },
  {
    "id" : "55fe1a31-685b-4f9c-8f93-ff86561a6b0e",
    "prId" : 13581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a010a73-e4cb-411b-a50a-d8a8884b8ccf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This line has to be first, right? Prefix always comes first?\n",
        "createdAt" : "2015-09-04T17:10:21Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c0b2772d-959a-4d43-a626-12cb5b7b14f6",
        "parentId" : "2a010a73-e4cb-411b-a50a-d8a8884b8ccf",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The position seems correct. It's not the same prefix we discussed. Its name is confusing.\n\na usage:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/client/unversioned/namespaces_test.go#L173\n",
        "createdAt" : "2015-09-04T17:17:19Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "37767909-c836-4c4b-b423-3828924e2644",
        "parentId" : "2a010a73-e4cb-411b-a50a-d8a8884b8ccf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, I see. I guess it's really a custom verb then.\n\nOn Fri, Sep 4, 2015 at 10:17 AM, Chao Xu notifications@github.com wrote:\n\n> In pkg/api/testapi/testapi.go\n> https://github.com/kubernetes/kubernetes/pull/13581#discussion_r38773517\n> :\n> \n> >  }\n> > \n> >  // Returns the appropriate path for the given prefix (watch, proxy, redirect, etc), resource, namespace and name.\n> >  // For ex, this is of the form:\n> >  // /api/v1/watch/namespaces/foo/pods/pod0 for v1.\n> > -func ResourcePathWithPrefix(prefix, resource, namespace, name string) string {\n> > -   path := \"/api/\" + Version()\n> >   +func (g TestGroup) ResourcePathWithPrefix(prefix, resource, namespace, name string) string {\n> > -   var path string\n> > -   if len(g.Group) == 0 {\n> > -       path = \"/api/\" + g.Version()\n> > -   } else {\n> > -       // TODO: switch back once we have proper multiple group support\n> > -       // path = \"/apis/\" + g.Group + \"/\" + Version(group...)\n> > -       path = \"/\" + g.Group + \"/\" + g.Version()\n> > -   }\n> >   +\n> >   if prefix != \"\" {\n> >       path = path + \"/\" + prefix\n> \n> The position seems correct. It's not the same prefix we discussed. Its\n> name is confusing.\n> \n> a usage:\n> \n> https://github.com/kubernetes/kubernetes/blob/ecc6ce773b81c7f89c97e734ce700ebd9b8f533d/pkg/client/unversioned/namespaces_test.go#L173\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13581/files#r38773517.\n",
        "createdAt" : "2015-09-04T17:28:29Z",
        "updatedAt" : "2015-09-05T01:02:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc79e9d99c0db4c75ba8b5c3b1065b958353999",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +181,185 @@\n\tif prefix != \"\" {\n\t\tpath = path + \"/\" + prefix\n\t}\n\tif namespace != \"\" {"
  },
  {
    "id" : "3e676cbf-6c97-4918-a035-051b576d9a54",
    "prId" : 5838,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74782e57-1a94-4f96-97ff-7723224e92cd",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'm surprised these helpers didn't already exist in the client library itself.\n",
        "createdAt" : "2015-03-25T00:18:02Z",
        "updatedAt" : "2015-03-25T00:18:02Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "903dd777-c76d-4905-a671-134e412481cb",
        "parentId" : "74782e57-1a94-4f96-97ff-7723224e92cd",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Trying to discourage direct path behavior, really\n\n> On Mar 24, 2015, at 8:18 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/testapi/testapi.go:\n> \n> > @@ -74,3 +75,34 @@ func SelfLink(resource, name string) string {\n> >     }\n> >     return fmt.Sprintf(\"/api/%s/%s/%s\", Version(), resource, name)\n> >  }\n> > +\n> > +// Returns the appropriate path for the given resource, namespace and name.\n> > +// For ex, this is of the form:\n> > +// /api/v1beta1/pods/pod0 for v1beta1 and\n> > +// /api/v1beta3/namespaces/foo/pods/pod0 for v1beta3.\n> > +func ResourcePath(resource, namespace, name string) string {\n> > I'm surprised these helpers didn't already exist in the client library itself.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-25T00:29:10Z",
        "updatedAt" : "2015-03-25T00:29:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e3b7f96735c8261afcdc8d2a5d2dea35884bd5a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +81,85 @@// /api/v1beta1/pods/pod0 for v1beta1 and\n// /api/v1beta3/namespaces/foo/pods/pod0 for v1beta3.\nfunc ResourcePath(resource, namespace, name string) string {\n\tpath := \"/api/\" + Version()\n\tif !api.PreV1Beta3(Version()) && namespace != \"\" {"
  }
]