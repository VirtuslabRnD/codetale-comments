[
  {
    "id" : "d0670157-6815-488c-840f-37c3e7a544d3",
    "prId" : 18925,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054c6a62-a8e5-44cb-bf28-790d0f798113",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal, per our offline discussion, the order is still marking those versions as enabled first, and then actually enable the versions, because we want to check we only add the enabled versions to scheme.\n",
        "createdAt" : "2015-12-22T02:07:28Z",
        "updatedAt" : "2015-12-24T07:21:46Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad484c79f7accd94a4f4877e175d7a7c5dad33e0",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +55,59 @@\t\treturn\n\t}\n\tif err := registered.EnableVersions(externalVersions...); err != nil {\n\t\tglog.V(4).Infof(\"%v\", err)\n\t\treturn"
  },
  {
    "id" : "1833af13-7f23-4c97-8efe-590c12699c40",
    "prId" : 18459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4e322d8-7dd6-4bad-9b02-36bfe49a847e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does the order here actually affect anything? once registration is cleaned up, would you envision this becoming the default order?\n",
        "createdAt" : "2015-12-09T20:29:12Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fc435e87-8fb4-4cc0-8f28-cd47743bdea1",
        "parentId" : "f4e322d8-7dd6-4bad-9b02-36bfe49a847e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> does the order here actually affect anything? once registration is cleaned up, would you envision this becoming the default order?\n\nYes, I see this as becoming default order.\n",
        "createdAt" : "2015-12-09T20:34:10Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "776d5108-af9a-4582-b8ac-6b0ce838f87a",
        "parentId" : "f4e322d8-7dd6-4bad-9b02-36bfe49a847e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "My understanding is this will be the default order if this group is not included in the KUBE_API_VERSIONS, am I right?\n",
        "createdAt" : "2015-12-14T00:14:36Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a83ce60e60d679d8dcf97b38b9179c2d1d91e35",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +39,43 @@var accessor = meta.NewAccessor()\n\n// availableVersions lists all known external versions for this group from most preferred to least preferred\nvar availableVersions = []unversioned.GroupVersion{v1.SchemeGroupVersion}\n"
  },
  {
    "id" : "54ac833d-7bd6-4708-9406-2f9d15bca95d",
    "prId" : 18459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The order used to be populated from the `registered` package, which is populated from the KUBE_API_VERSIONS environment variable, so user can change the order at runtime.\n\nI guess you will have followup PR for register.go. Could you share your plan?\n",
        "createdAt" : "2015-12-10T04:19:12Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "3acf6472-464c-41ae-becf-6214944148cc",
        "parentId" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> The order used to be populated from the registered package, which is populated from the KUBE_API_VERSIONS environment variable, so user can change the order at runtime.\n> \n> I guess you will have followup PR for register.go. Could you share your plan?\n\nRight now it still is (note the `for` loop below), but I'd like to avoid the centralization of every external group,version tuple in existence here: https://github.com/kubernetes/kubernetes/blob/master/pkg/api/registered/registered.go#L41 to populate the default.  Instead, I'd have a default of \"everything installed based on the default specified in each install package\".\n\nI do think that this pull can also standalone (without any followup), because it makes the group registration a more forward flow.  Figure out the inputs, build your object, register.  Instead of the reverse.\n",
        "createdAt" : "2015-12-10T12:38:05Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ccd9a08a-3354-46d6-b291-7e59aaf283bc",
        "parentId" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Yes, I missed the loop yesterday.\n\n> I'd like to avoid the centralization of every external group,version tuple in existence here: https://github.com/kubernetes/kubernetes/blob/master/pkg/api/registered/registered.go#L41 to populate the default. Instead, I'd have a default of \"everything installed based on the default specified in each install package\".\n\nSounds good. This is in alignment with our goal of separating API machinery from API types. I think we should split the initialization into 2 phases: first step is registration, each install package register the group as available; second step is installation, each install package calls a function provided by the `registered` package to learn which group/version user wants to install, as specified in `KUBE_API_VERSIONS`, and if the environment variable is not set, then all registered group/version will be installed. I think the end result will be the `init()` in the `regostered` package will be removed, initialization is done in each group. \n\nI'd like to implement the code if you agree with the design. Probably I should make an issue for this.\n\ncc @nikhiljindal since we discussed yesterday a related issue.\n",
        "createdAt" : "2015-12-10T18:58:00Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "3a78864a-efa0-40e3-98f8-09531820c039",
        "parentId" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Sounds good. This is in alignment with our goal of separating API machinery from API types. I think we should split the initialization into 2 phases: first step is registration, each install package register the group as available; second step is installation, each install package calls a function provided by the registered package to learn which group/version user wants to install, as specified in KUBE_API_VERSIONS, and if the environment variable is not set, then all registered group/version will be installed. I think the end result will be the init() in the regostered package will be removed, initialization is done in each group.\n> \n> I'd like to implement the code if you agree with the design. Probably I should make an issue for this.\n\nI like the direction, but I'm not as sure of the details.  I think I'd like to register everything as available and the selectively enable or disable particular versions after the fact by calling explicit methods.  That way I could choose to specify either a whitelist or a blacklist separate from using an environment variable.\n",
        "createdAt" : "2015-12-10T19:36:33Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1e9e027c-b8d6-4c01-89f8-71f184f77ff7",
        "parentId" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sounds like this can be an orthogonal goal. The `install` package can export the install function, so people can call it after init.\n",
        "createdAt" : "2015-12-10T19:58:43Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "cc949166-724e-42ab-b47e-b3d31fcd01b6",
        "parentId" : "a3b133c4-f0f5-4ff3-bebe-219f95436e6a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Sounds like this can be an orthogonal goal. The install package can export the install function, so people can call it after init.\n\nI think so, though I'm not sure that's how its described in the draft doc.  I think that this change helps either way.\n",
        "createdAt" : "2015-12-10T20:02:28Z",
        "updatedAt" : "2015-12-15T13:37:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a83ce60e60d679d8dcf97b38b9179c2d1d91e35",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +40,44 @@\n// availableVersions lists all known external versions for this group from most preferred to least preferred\nvar availableVersions = []unversioned.GroupVersion{v1.SchemeGroupVersion}\n\nfunc init() {"
  },
  {
    "id" : "61c0e1c6-87a8-4cbd-9385-9335a09e557d",
    "prId" : 17326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dff2d470-0f33-4d99-b42a-4f0ea79beda5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Can you fix the order here now? It is backwards of the comment on `supportedVersions`\n",
        "createdAt" : "2015-11-25T23:04:37Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cedd1dff-d432-473d-999c-3291c4424279",
        "parentId" : "dff2d470-0f33-4d99-b42a-4f0ea79beda5",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sure. I'm going to make it right for the latest.GroupMeta.GroupVersions.\n\nWe still need the reverse logic because the NewDefaultRESTMapper on line 92 expect the reversed order.\n",
        "createdAt" : "2015-11-25T23:10:03Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e192760e38de9d18979ac11ac9f23f470f57923",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@\tvar versions []string\n\tworstToBestGroupVersions := []unversioned.GroupVersion{}\n\tfor i := len(registeredGroupVersions) - 1; i >= 0; i-- {\n\t\tversions = append(versions, registeredGroupVersions[i].Version)\n\t\tworstToBestGroupVersions = append(worstToBestGroupVersions, registeredGroupVersions[i])"
  },
  {
    "id" : "cf129be1-e865-4f3c-ae7f-8794c7ddb3fb",
    "prId" : 13833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e8c6e52-6270-41bd-af4d-4fbeca608b0f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Shouldn't this be an experimental object? why does it show up here?\n",
        "createdAt" : "2015-09-11T21:28:03Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "37e4777b-2c8d-416a-b87d-202da70f2108",
        "parentId" : "1e8c6e52-6270-41bd-af4d-4fbeca608b0f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "IIRC, it's shown up in both experimental and api, and this one is actually overridden by the one in experimental. I will send a separate PR.\n",
        "createdAt" : "2015-09-11T23:02:48Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca803fc504d93d31b27c5e7b06e00994bc0f4cdf",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@\t\t\"PodAttachOptions\",\n\t\t\"PodProxyOptions\",\n\t\t\"ThirdPartyResource\",\n\t\t\"ThirdPartyResourceData\",\n\t\t\"ThirdPartyResourceList\")"
  },
  {
    "id" : "aa1a9ed6-cf5c-42aa-9295-2b61aea33cea",
    "prId" : 13833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cae0b37e-4a2d-4f1b-bfda-eb822a934d39",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Since this installs the v1 api, can we move it to pkg/api/v1/install/install.go?\n",
        "createdAt" : "2015-09-11T21:30:44Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c8e74bbe-63b8-46f8-9c07-146b965518a3",
        "parentId" : "cae0b37e-4a2d-4f1b-bfda-eb822a934d39",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "No, it installs all versions supported in a the group. It happens to be that we only have one version right now.\n",
        "createdAt" : "2015-09-12T00:04:23Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "94ed8eea-8be3-4a65-9aac-b633fdf6bea8",
        "parentId" : "cae0b37e-4a2d-4f1b-bfda-eb822a934d39",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK. This is OK for now, but in the future I think we should split it up per version.\n",
        "createdAt" : "2015-09-12T00:07:38Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca803fc504d93d31b27c5e7b06e00994bc0f4cdf",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@func interfacesFor(version string) (*meta.VersionInterfaces, error) {\n\tswitch version {\n\tcase \"v1\":\n\t\treturn &meta.VersionInterfaces{\n\t\t\tCodec:            v1.Codec,"
  },
  {
    "id" : "3c22456c-6bdc-4a3e-a791-6e4c616d26ab",
    "prId" : 13833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e01dbf8a-ad8c-4a59-acf5-a2ec92ec7cb3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "// Package install installs the api/v1 api, making it available as an option to all of the API encoding/decoding machinery.\n\n(or something like this)\n",
        "createdAt" : "2015-09-11T21:32:37Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca803fc504d93d31b27c5e7b06e00994bc0f4cdf",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@limitations under the License.\n*/\n\n// Package install installs the v1 monolithic api, making it available as an\n// option to all of the API encoding/decoding machinery."
  }
]