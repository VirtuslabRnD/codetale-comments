[
  {
    "id" : "8af2e15b-fa3d-4f3c-bf16-f008368ca50d",
    "prId" : 18103,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dacab4f9-def1-4bda-864e-0ee54c3cf93b",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could change the variable name from \"version\" to \"groupVersion\"?\n",
        "createdAt" : "2015-12-03T18:25:53Z",
        "updatedAt" : "2015-12-03T18:25:53Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b6b376a8-e420-4400-acdf-68d8fc65b8e6",
        "parentId" : "dacab4f9-def1-4bda-864e-0ee54c3cf93b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think the explicit names are only really useful when working with strings... for a typed struct, `version` seems ok to me\n",
        "createdAt" : "2015-12-03T18:37:30Z",
        "updatedAt" : "2015-12-03T18:37:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "764c01de-d43f-4e02-9717-4df6c318a9ea",
        "parentId" : "dacab4f9-def1-4bda-864e-0ee54c3cf93b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I think the explicit names are only really useful when working with strings... for a typed struct, version seems ok to me\n\nI agree.  I think we've crossed the threshold into having most locations using `GroupVersion`, so even though it holds group,version tuples, `version` expresses that intent.\n",
        "createdAt" : "2015-12-03T18:41:42Z",
        "updatedAt" : "2015-12-03T18:41:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b53ff80d-70dd-41db-8f5f-81b3d6cd8dd5",
        "parentId" : "dacab4f9-def1-4bda-864e-0ee54c3cf93b",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ok. I added the label.\n",
        "createdAt" : "2015-12-03T18:47:04Z",
        "updatedAt" : "2015-12-03T18:47:04Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "675d8a235e98a89245c3b3080fc8b4eaee930655",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +67,71 @@\t\tt.Fatalf(\"unexpected non-error: %v\", err)\n\t}\n\tfor i, version := range latest.GroupOrDie(\"\").GroupVersions {\n\t\tif vi, err := latest.GroupOrDie(\"\").InterfacesFor(version.Version); err != nil || vi == nil {\n\t\t\tt.Fatalf(\"%d: unexpected result: %v\", i, err)"
  },
  {
    "id" : "88237938-c53d-46cd-9073-d276fe4f3204",
    "prId" : 18103,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e170af3-bd21-4742-8cd2-27872488593d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "s/version/groupVersion\n",
        "createdAt" : "2015-12-03T18:26:13Z",
        "updatedAt" : "2015-12-03T18:26:13Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "675d8a235e98a89245c3b3080fc8b4eaee930655",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +87,91 @@\t}\n\n\tfor _, version := range latest.GroupOrDie(\"\").GroupVersions {\n\t\tmapping, err := latest.GroupOrDie(\"\").RESTMapper.RESTMapping(rcGVK.GroupKind(), version.Version)\n\t\tif err != nil {"
  },
  {
    "id" : "126d1e05-9e6c-41c4-8bff-2246d4962890",
    "prId" : 17326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da45bf18-24ab-43d2-b7b8-af8be7e0004d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Followup: please note `GroupOrDie` in our issue.  If we know exactly which `GroupVersion` we want, it seems like we should be able to directly depends on its `SchemeGroupVersion`.\n",
        "createdAt" : "2015-11-30T13:48:00Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b98d2605-0c47-433d-93a9-aa34a89cb7af",
        "parentId" : "da45bf18-24ab-43d2-b7b8-af8be7e0004d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "IIUC, you mean because we know there is only one version for the internal group, we can use api.SchemeGroupVersion.Version here. But in this case, using the GroupOrDie(\"\") has more readability, because people not necessarily know `api` is the internal version.\n\nIn general, there are two disadvantages of using SchemeGroupVersion directly:\n1. Each group/version has a SchemeGroupVersion. To use it, one needs to call e.g., v1.SchemeGroupVersion.Version, which hardcodes the version in the package.\n2. calling latest.GroupOrDie(\"group\") also checks if the user has enabled the \"group\", I think this is necessary in most cases.\n\nPerhaps there are cases where directly calling SchemeGroupVersion makes sense, pleases cc me when you have an example.\n",
        "createdAt" : "2015-11-30T18:57:28Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "998d3cdf-80e8-452c-b943-2488c834c108",
        "parentId" : "da45bf18-24ab-43d2-b7b8-af8be7e0004d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> 1. Each group/version has a SchemeGroupVersion. To use it, one needs to call e.g., v1.SchemeGroupVersion.Version, which hardcodes the version in the package.\n\nAgain, I'm not going to make it an issue for this pull, but having a hardcoded package dependency upon the package that you depend on is an entirely reasonable thing to do and allows for easy analysis of dependencies.\n",
        "createdAt" : "2015-11-30T19:02:14Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "580b6408-5f0c-4f0a-8a4b-4aad41ea7b63",
        "parentId" : "da45bf18-24ab-43d2-b7b8-af8be7e0004d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sure, I agree hardcoding package dependency makes sense if a package depends on a specific version, but most times this is not the case. Let's deal with it when we hit such a case.\n",
        "createdAt" : "2015-11-30T19:11:57Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "41f8f3fb-373b-4652-be6d-76b9c34c6f1b",
        "parentId" : "da45bf18-24ab-43d2-b7b8-af8be7e0004d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Listed it in possible improvement in #17216.\n",
        "createdAt" : "2015-11-30T19:16:56Z",
        "updatedAt" : "2015-11-30T19:30:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e192760e38de9d18979ac11ac9f23f470f57923",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +58,62 @@\t\tt.Fatalf(\"unexpected error: %v\", err)\n\t}\n\tif other.APIVersion != latest.GroupOrDie(\"\").GroupVersion.Version || other.Kind != \"Pod\" {\n\t\tt.Errorf(\"unexpected unmarshalled object %#v\", other)\n\t}"
  }
]