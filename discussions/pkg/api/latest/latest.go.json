[
  {
    "id" : "476e38f7-373d-4ce9-a703-6120d6e83c9a",
    "prId" : 14397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a4bc4a-18a2-4c4c-93c7-2073e796dca6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also a test for this function would be great.\n",
        "createdAt" : "2015-09-24T00:53:07Z",
        "updatedAt" : "2015-09-25T00:45:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bac5fe58-101c-4617-8dac-e87390a3d28a",
        "parentId" : "e9a4bc4a-18a2-4c4c-93c7-2073e796dca6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, you have a test :) :) nvm\n",
        "createdAt" : "2015-09-24T00:53:29Z",
        "updatedAt" : "2015-09-25T00:45:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c449baea469ac1884261b5a9b9c773b849c968ac",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +84,88 @@// AllPreferredGroupVersions returns the preferred versions of all registered\n// groups in the form of \"group1/version1,group2/version2,...\"\nfunc (g GroupMetaMap) AllPreferredGroupVersions() string {\n\tif len(g) == 0 {\n\t\treturn \"\""
  },
  {
    "id" : "e4790669-e0e3-4a3e-8aa3-43e7875ae8af",
    "prId" : 13833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae061ad7-ab33-487c-9a1d-ebefba89d866",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add godoc-style comments to the public functions/methods/types in this file.\n",
        "createdAt" : "2015-09-11T21:28:54Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d739e200-e10a-4c45-9445-e60546b45c1a",
        "parentId" : "ae061ad7-ab33-487c-9a1d-ebefba89d866",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "will do\n",
        "createdAt" : "2015-09-11T23:03:00Z",
        "updatedAt" : "2015-09-12T22:51:16Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca803fc504d93d31b27c5e7b06e00994bc0f4cdf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@\n// RegisterGroup registers a group to GroupMetaMap.\nfunc (g GroupMetaMap) RegisterGroup(group string) (*GroupMeta, error) {\n\t_, found := g[group]\n\tif found {"
  },
  {
    "id" : "d8f0ee03-fb4a-4a83-9ada-ee0eaec8c224",
    "prId" : 10606,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3064c0d-fde6-41c3-b02e-cdfd7bfac7a5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This looks wrong-- aren't versions registered in init() functions? if so, the order is arbitrary?\n",
        "createdAt" : "2015-07-01T22:19:16Z",
        "updatedAt" : "2015-07-01T22:19:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8bcbdba4-8d61-49e8-9cdc-c51c0a09cd39",
        "parentId" : "d3064c0d-fde6-41c3-b02e-cdfd7bfac7a5",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "There is now api/registered that registers api versions in the desired order: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/registered/registered.go#L41\n",
        "createdAt" : "2015-07-01T22:22:31Z",
        "updatedAt" : "2015-07-01T22:22:31Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "d1c85b89-0ef1-4bcd-ac96-5e43e6504f05",
        "parentId" : "d3064c0d-fde6-41c3-b02e-cdfd7bfac7a5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, right. Thanks!\n",
        "createdAt" : "2015-07-01T22:30:12Z",
        "updatedAt" : "2015-07-01T22:30:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "274792d7bb46f7da477714f45300b63e7b801e0a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +68,72 @@\t// Use the first API version in the list of registered versions as the latest.\n\tVersion = registered.RegisteredVersions[0]\n\tOldestVersion = registered.RegisteredVersions[len(registered.RegisteredVersions)-1]\n\tCodec = runtime.CodecFor(api.Scheme, Version)\n\t// Put the registered versions in Versions in reverse order."
  },
  {
    "id" : "a74c12f1-842f-4040-abe3-a7e693f67cd9",
    "prId" : 7939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bf05d27-60db-4141-899c-961cc91bb2f1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can this fail? panic if so?\n",
        "createdAt" : "2015-05-12T03:54:31Z",
        "updatedAt" : "2015-05-13T17:53:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "884ada94-5d05-4386-b32d-7c79f7f125bd",
        "parentId" : "1bf05d27-60db-4141-899c-961cc91bb2f1",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Checking if the version is valid in the for loop below.\n",
        "createdAt" : "2015-05-12T22:15:27Z",
        "updatedAt" : "2015-05-13T17:53:08Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b278202fe7a105e7c35a03588a883100bf42462",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +115,119 @@\t// The first version in the list is the latest version.\n\tVersion = versions[0]\n\tCodec = runtime.CodecFor(api.Scheme, Version)\n\t// Put the versions in Versions in reverse order.\n\tVersions = []string{}"
  },
  {
    "id" : "e11cee73-5bdd-4400-af35-e45bbc55ba75",
    "prId" : 7939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c378b6fd-6b2c-462e-9058-e180aa859fb3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's probably worth checking and panicing (w/ helpful error message) if any of these are empty-- that would cause us to serialize the internal version.\n",
        "createdAt" : "2015-05-12T03:56:39Z",
        "updatedAt" : "2015-05-13T17:53:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6f4ca5cc-9f04-46f3-a51f-0f35c1a82038",
        "parentId" : "c378b6fd-6b2c-462e-9058-e180aa859fb3",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Actually possibly panicing if CodecFor() fails for any of these-- would be a nicer error message.\n",
        "createdAt" : "2015-05-12T03:57:25Z",
        "updatedAt" : "2015-05-13T17:53:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ca273a15-6017-4d95-a5f5-6baed0f265e1",
        "parentId" : "c378b6fd-6b2c-462e-9058-e180aa859fb3",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "CodecFor does not panic even when passed an invalid version.\nAdded an array of valid API versions, to verify that KUBE_API_VERSIONS contains valid versions.\nThe code now panics accordingly.\n",
        "createdAt" : "2015-05-12T22:14:58Z",
        "updatedAt" : "2015-05-13T17:53:08Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b278202fe7a105e7c35a03588a883100bf42462",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +118,122 @@\t// Put the versions in Versions in reverse order.\n\tVersions = []string{}\n\tfor i := len(versions) - 1; i >= 0; i-- {\n\t\tversion := versions[i]\n\t\t// Verify that the version is valid."
  },
  {
    "id" : "571005dc-7415-4c47-8d57-2917efeb9086",
    "prId" : 5763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ad8cb48-ff2e-4ae4-8dd9-a53ebf1d453d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "typo: kidns\n\nMore importantly, ignored in what context? We currently have both master and kubelet resources defined in the types.go files.\n",
        "createdAt" : "2015-03-25T01:48:37Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f9b30a09-bd97-48c8-a589-e12e52759232",
        "parentId" : "2ad8cb48-ff2e-4ae4-8dd9-a53ebf1d453d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "These are not \"resources\", just \"kinds\".  Objects that can be REST resources are pods, services, nodes.  Objects that can only be returned from REST resources, or are in the scheme but never passed over the wire, are not \"resources\" (as in, they are exposed to a client via the API).\n",
        "createdAt" : "2015-03-25T04:04:12Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "870da687d0c2477dc7be1c659a379cfa35a2e850",
    "line" : null,
    "diffHunk" : "@@ -1,1 +126,130 @@\n\t// these kinds should be excluded from the list of resources\n\tignoredKinds := util.NewStringSet(\"ListOptions\", \"DeleteOptions\", \"Status\", \"ContainerManifest\")\n\n\t// enumerate all supported versions, get the kinds, and register with the mapper how to address our resources"
  },
  {
    "id" : "37f0da00-e755-4b6d-8b60-b7eab1df37be",
    "prId" : 2059,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90661e20-52fc-4d46-bc0d-f23cf1f0ee5a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe it will become clear as I read more of this PR, but I find it strange that Versions is passed to both calls.\n",
        "createdAt" : "2014-11-03T21:21:50Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a2cf5915-83c3-45bb-a493-e68a1b8d0b86",
        "parentId" : "90661e20-52fc-4d46-bc0d-f23cf1f0ee5a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The versions you pass to NewDefaultRESTMapper() are the versions you search when looking for an object that has no apiVersion (for instance, when the CLI consumer passes \"nodes\" and you need to check in order a list of versions to determine a matching object type), the ones you pass to Add are the versions on the scheme you want to load (so if you didn't want to load v1beta3 you don't pass it to Add).\n\n----- Original Message -----\n\n> > @@ -83,3 +88,19 @@ func InterfacesFor(version string) (*VersionInterfaces,\n> > error) {\n> >         return nil, fmt.Errorf(\"unsupported storage version: %s (valid: %s)\",\n> >         version, strings.Join(Versions, \", \"))\n> >     }\n> >  }\n> > +\n> > +func init() {\n> > -   mapper := meta.NewDefaultRESTMapper(\n> > -       Versions,\n> > -       func(version string) (runtime.Codec, meta.MetadataAccessor, bool) {\n> > -           interfaces, err := InterfacesFor(version)\n> > -           if err != nil {\n> > -               return nil, nil, false\n> > -           }\n> > -           return interfaces.Codec, interfaces.MetadataAccessor, true\n> > -       },\n> > -   )\n> > -   mapper.Add(api.Scheme, true, Versions...)\n> \n> Maybe it will become clear as I read more of this PR, but I find it strange\n> that Versions is passed to both calls.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2059/files#r19765614\n",
        "createdAt" : "2014-11-03T21:39:14Z",
        "updatedAt" : "2014-11-03T22:36:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "191c1b975cb9cdc3ad9f110f30973d791bc5451e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +95,99 @@\t\t},\n\t)\n\tmapper.Add(api.Scheme, true, Versions...)\n\t// TODO: when v1beta3 is added it will not use mixed case.\n\tRESTMapper = mapper"
  },
  {
    "id" : "52afe00e-0441-4914-862e-794b26fc8654",
    "prId" : 1969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef4585c2-7c3b-450a-b89d-2b80f0b777c1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If meta.FindAccessor works with all objects, do we really need this level of indirection?\n",
        "createdAt" : "2014-10-23T20:17:24Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5436277f-499d-477a-bfa0-972f9b6ddf87",
        "parentId" : "ef4585c2-7c3b-450a-b89d-2b80f0b777c1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think so.\n",
        "createdAt" : "2014-10-23T21:50:43Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9b9f0688-043a-474d-b60e-a314aa8a6f62",
        "parentId" : "ef4585c2-7c3b-450a-b89d-2b80f0b777c1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'll do it in the change where we combine self link and resourceversioner to just be meta.Interface.\n",
        "createdAt" : "2014-10-23T21:55:18Z",
        "updatedAt" : "2014-10-23T22:01:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3df1c2f29dee2f3c06e9461807ae98e255f673e0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +49,53 @@// of versioning.\n// TODO: when versioning changes, make this part of each API definition.\nvar ResourceVersioner = meta.NewResourceVersioner()\n\n// SelfLinker can set or get the SelfLink field of all API types."
  },
  {
    "id" : "4c14a66d-85c7-4599-ae51-b58c7985d7c3",
    "prId" : 1455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "209e60f9-e0ba-4381-89e9-7bb4dec919e1",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "having these be global variables seems evil.  I know that there is precedent above, but still...  Can it at least be private?\n",
        "createdAt" : "2014-09-26T16:22:27Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "b2a2cf42-5262-48f9-8673-65f74b15ffe2",
        "parentId" : "209e60f9-e0ba-4381-89e9-7bb4dec919e1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "These are stateless objects, there's no problem with them being global-- this is declaring the SelfLinker that works on the latest stuff.\n",
        "createdAt" : "2014-09-26T18:45:25Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e505601e0b4db4ec59441f20629e1fbe87d874",
    "line" : null,
    "diffHunk" : "@@ -1,1 +54,58 @@// TODO(lavalamp): Combine SelfLinker & ResourceVersioner interfaces, force all uses\n// to go through the InterfacesFor method below.\nvar SelfLinker = runtime.NewJSONBaseSelfLinker()\n\n// VersionInterfaces contains the interfaces one should use for dealing with types of a particular version."
  },
  {
    "id" : "6c53a5b8-46cb-4a9b-a615-38c009659370",
    "prId" : 1455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57ba82dd-2d42-43e5-85f4-ec0d6c546c3f",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Hrm, I don't like this.  This seems precisely the reason that multiple return values were invented.  If we think the interfaces should be joined into a single interface, let's do that, if we think that they're separate, let's not do this.\n",
        "createdAt" : "2014-09-26T16:23:39Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "f1f968f5-b2b1-4c40-8185-1b0f81f35b8d",
        "parentId" : "57ba82dd-2d42-43e5-85f4-ec0d6c546c3f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "IMO 4 was just too many. I do think SelfLinker and ResourceVersioner should be combined. I will add a TODO. I can't think of a good name right now.\n",
        "createdAt" : "2014-09-26T20:29:39Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e505601e0b4db4ec59441f20629e1fbe87d874",
    "line" : null,
    "diffHunk" : "@@ -1,1 +57,61 @@\n// VersionInterfaces contains the interfaces one should use for dealing with types of a particular version.\ntype VersionInterfaces struct {\n\truntime.Codec\n\truntime.ResourceVersioner"
  }
]