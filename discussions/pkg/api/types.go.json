[
  {
    "id" : "65e9c3ff-ddd2-49ae-8fa5-80714cf33ffa",
    "prId" : 51638,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51638#pullrequestreview-60186493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8229439b-ab4a-49db-acd0-262305263096",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why not treating the Scale subresource the same way we treat Status subresource? We defined templates for UpdateStatus and optionally generated the `UpdateStatus()` methods.\r\n\r\nAre there other use cases for the `method` UI? It's useful for mass generating regular CRUD operations for subresources, but for that use case, the approach we took for \"Status\" is easier to understand.",
        "createdAt" : "2017-08-31T22:54:24Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "db40a7ce-16c4-4e7e-879e-a1caad573dd5",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@mfojtik btw, it would be great if you can update the client-gen [doc](https://github.com/kubernetes/community/blob/master/contributors/devel/generating-clientset.md) for the last major improvement you did for client-gen :)",
        "createdAt" : "2017-08-31T23:00:51Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ba0cc502-bfa5-4751-9482-4d36788addc8",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> the approach we took for \"Status\" is easier to understand.\r\n\r\nThat approach doesn't work for scale. The type passed to scale is not the same as the main resource, and the field name that indicates you can scale varies",
        "createdAt" : "2017-08-31T23:42:04Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "22738974-2b77-43b9-bed0-835f2ab11182",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@caesarxuchao about use-cases for `method`: this is for thirdparty apiservers and their api groups. They might have more (and different) subresources than we have in kube with mainly `/status` and `/scale`. This PR enables them to use client-gen effectively. I would prefer a general method like the proposed one than people re-implementing plenty of expansion methods. The former are declarative and stable, the later will break if we change an interface somewhere, e.g. the rest client.",
        "createdAt" : "2017-09-01T08:34:03Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "24b58732-f780-4f72-ba02-20b8c115ca43",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "@caesarxuchao i don't think the way we generate Status is good TBH. We rely on the presence of `.Status` field and if that field exists we generate the `UpdateStatus()`, but in case the `.Status` field exists but the `status` subresource don't you need to indicate that with tag...  tbh, I don't like that sort of magic :-)\r\n\r\nI believe that using `// +genclient:method=UpdateStatus,subresource=status` is more explicit. Not super-easy to use but leads to cleaner generation :-) WDYT? // cc @sttts ",
        "createdAt" : "2017-09-01T09:01:17Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "195818a0-a43e-458a-8cd1-dc0964b99b41",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "100% :+1: for @mfojtik's argument with \"that sort of magic\" regarding the `/status` subresource.",
        "createdAt" : "2017-09-01T09:35:51Z",
        "updatedAt" : "2017-09-01T12:26:04Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "eb2fd658-3385-4f7b-bffa-541a6f26a1c8",
        "parentId" : "8229439b-ab4a-49db-acd0-262305263096",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the explanation. The thirdparty use cases and explicit tags for `UpdateStatus` sound good. ",
        "createdAt" : "2017-09-01T16:43:45Z",
        "updatedAt" : "2017-09-01T16:43:45Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d2be1c521dc7f93ae3f83dd123199963598c938",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2608,2612 @@\n// +genclient\n// +genclient:method=GetScale,verb=get,subresource=scale,result=k8s.io/kubernetes/pkg/apis/extensions.Scale\n// +genclient:method=UpdateScale,verb=update,subresource=scale,input=k8s.io/kubernetes/pkg/apis/extensions.Scale,result=k8s.io/kubernetes/pkg/apis/extensions.Scale\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
  },
  {
    "id" : "69b6e0f2-ae0a-4d3f-a9db-18e83deabaf7",
    "prId" : 51070,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51070#pullrequestreview-57948535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6c7284d-2f81-4ab0-880f-37e66c14325c",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "These resources need to be removed. @NickrenREN @jingxu97 can either you clean that up?",
        "createdAt" : "2017-08-22T18:19:23Z",
        "updatedAt" : "2017-08-22T18:19:23Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "60120e7f-2f7a-4c37-9ce3-aeef4b08cb43",
        "parentId" : "a6c7284d-2f81-4ab0-880f-37e66c14325c",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "sure, i will send a separate PR to do that",
        "createdAt" : "2017-08-23T00:41:58Z",
        "updatedAt" : "2017-08-23T00:42:38Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ce7eccba5ca65c8a1de7d979f89223b53dd791",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +3170,3174 @@\t// Local Storage for scratch space, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)\n\t// The resource name for ResourceStorageScratch is alpha and it can change across releases.\n\tResourceStorageScratch ResourceName = \"storage.kubernetes.io/scratch\"\n\t// Local ephemeral storage, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)\n\t// The resource name for ResourceEphemeralStorage is alpha and it can change across releases."
  },
  {
    "id" : "7762949c-f509-413d-a12e-122923fef9ab",
    "prId" : 50204,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50204#pullrequestreview-55708382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "How about deprecating this?",
        "createdAt" : "2017-08-07T07:52:33Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e6cd9a29-ac80-499f-a3d2-2b2883060154",
        "parentId" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I mean we could register the meta List type in core/v1, but deprecate it on the code level.",
        "createdAt" : "2017-08-07T07:53:33Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4d0132e7-7cb6-4ef1-849c-487a3bb9bbbc",
        "parentId" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm, good point.  We could probably also remove this alias.  Let me look at how broad that is.",
        "createdAt" : "2017-08-07T19:59:18Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a94e8430-4aa2-4a56-85f7-138f48810663",
        "parentId" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Looked into it, something about deep copy generation isn't right in metainternalversion.  I'll do this in a follow up - sound ok?",
        "createdAt" : "2017-08-09T01:08:45Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bea163e1-a98b-41f6-8514-5162ecc7133f",
        "parentId" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Sure. Actually I am surprised that this alias works, compare https://github.com/kubernetes/gengo/pull/73.",
        "createdAt" : "2017-08-09T07:18:12Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "114d15fa-6732-482f-b047-9e57befe03d2",
        "parentId" : "a7170fd0-e139-4a68-b256-2e2f7ebb54cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I had to add alias resolution a while back for protobuf, so some parts of aliasing do work.",
        "createdAt" : "2017-08-11T02:25:40Z",
        "updatedAt" : "2017-08-16T02:30:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3836d5df302281a9db4b03bdc8fd5079142431",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3627,3631 @@\n// List holds a list of objects, which may not be known by the server.\ntype List metainternalversion.List\n\n// A type of object that is limited"
  },
  {
    "id" : "532f5f9a-7377-4ad2-bcc3-0e351e25008a",
    "prId" : 49502,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49502#pullrequestreview-52056117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ad7b19b-05e3-4dab-806c-f0f3a6a60d7a",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "This is IMO API breaker. My yaml file with Ceph PersistentVolume that was working in 1.7 won't work in 1.8. Also what happens to my  PersistentVolume stored in etcd? How it gets upgraded from CephFSVolumeSource to CephFSPersistentVolumeSource?",
        "createdAt" : "2017-07-25T07:20:36Z",
        "updatedAt" : "2017-08-24T18:59:43Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "49c222e7-d679-47fe-8d18-b8646e777c44",
        "parentId" : "9ad7b19b-05e3-4dab-806c-f0f3a6a60d7a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Changing a go type does not change the external API. Go type names are not persisted in JSON or protobuf. To be API compatible, all matching fields (types, json names, and protobuf tags) must be identical between the two types.",
        "createdAt" : "2017-07-25T13:08:47Z",
        "updatedAt" : "2017-08-24T18:59:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f0aad32b0ee8fc12a7b0b33dbd806d413171450",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +361,365 @@\t// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n\t// +optional\n\tCephFS *CephFSPersistentVolumeSource\n\t// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n\t// +optional"
  },
  {
    "id" : "1e5c980e-0793-4dcd-845a-68e5d1d26399",
    "prId" : 46597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46597#pullrequestreview-53684423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a988260c-6cc2-422a-bcdf-0606700cf55e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What does this actually mean?  If we find a volume that has this value, what behavior is triggered?  I don't think we need this at all.  If we document the default in v1 and we have the defaulting logic in place, we should never see this happen.",
        "createdAt" : "2017-08-01T17:19:12Z",
        "updatedAt" : "2017-08-23T08:10:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a8dd9940-3cf6-4af1-85eb-418aa1d67820",
        "parentId" : "a988260c-6cc2-422a-bcdf-0606700cf55e",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "This is for backwards compatible. If a volume that has this value, it will behave like before, doing nothing.",
        "createdAt" : "2017-08-02T02:20:48Z",
        "updatedAt" : "2017-08-23T08:10:17Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "504f89e3aca34a9b9b898619d189097d8ac5957a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +602,606 @@const (\n\t// For backwards compatible, leave it empty if unset\n\tHostPathUnset HostPathType = \"\"\n\t// If nothing exists at the given path, an empty directory will be created there\n\t// as needed with file mode 0755, having the same group and ownership with Kubelet."
  },
  {
    "id" : "76e3abc6-dd0c-49ed-95a7-8166a428d708",
    "prId" : 46597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46597#pullrequestreview-53589062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae81c83f-ab56-4e0e-bec3-2f1b345621fe",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Shouldn't it default to DirectoryOrCreate?  That's the compatible behavior.\r\n\r\n",
        "createdAt" : "2017-08-01T17:20:55Z",
        "updatedAt" : "2017-08-23T08:10:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f95cda7c-7ee5-4433-9fd1-10d503d6fc0a",
        "parentId" : "ae81c83f-ab56-4e0e-bec3-2f1b345621fe",
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "Per the discussion above, \"DirectoryOrCreate\" isn't backwards compatible because it will currently bindmount in files, directories, etc. It's currently \"ExistsOrCreateDirectory\".\r\n\r\nIt's also a safer form of backwards compatibility to have the kubelet do nothing in the case of the docker-runtime and continue to rely on its behavior; that allows pods not using this feature to continue to function, even in the face of a bug in this feature or misconfigured kubelet.",
        "createdAt" : "2017-08-01T18:16:03Z",
        "updatedAt" : "2017-08-23T08:10:17Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "504f89e3aca34a9b9b898619d189097d8ac5957a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +626,630 @@\t// If the path is a symlink, it will follow the link to the real path.\n\tPath string\n\t// Defaults to \"\"\n\tType *HostPathType\n}"
  },
  {
    "id" : "3fe52b30-bf8a-4dad-b7dc-fedb6694a51a",
    "prId" : 46254,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46254#pullrequestreview-41310776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a49d28ab-031a-4d8c-a2c0-7dbdf439998f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "please update the NodeRestriction admission plugin to prevent this from being set on create, and from being changed on update",
        "createdAt" : "2017-05-31T01:11:27Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0506a3ee-8d7f-4590-80fe-4d669bcfa4ba",
        "parentId" : "a49d28ab-031a-4d8c-a2c0-7dbdf439998f",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Is this preferred over gating it in `pkg/api/validation/validation.go` or should I do both?",
        "createdAt" : "2017-05-31T16:10:17Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "8fd3d25f-e5c2-46d5-8859-edc4f7cd8a35",
        "parentId" : "a49d28ab-031a-4d8c-a2c0-7dbdf439998f",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Gated in both places just to be safe",
        "createdAt" : "2017-05-31T18:08:15Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "378544362cd4fb1b35a940c400ce7c31d9ad1b76",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2918,2922 @@\t// The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field\n\t// +optional\n\tConfigSource *NodeConfigSource\n}\n"
  },
  {
    "id" : "1e5773de-ff53-4f7a-afce-5693b31961d1",
    "prId" : 45937,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45937#pullrequestreview-38742673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f041e8b5-d82b-4c88-aa13-3156e21d4367",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is there a get options to also add this to? Need one if not?",
        "createdAt" : "2017-05-17T17:24:09Z",
        "updatedAt" : "2017-05-18T14:08:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9bfb5372-d62c-470a-b964-82916e68f607",
        "parentId" : "f041e8b5-d82b-4c88-aa13-3156e21d4367",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes.",
        "createdAt" : "2017-05-17T17:53:38Z",
        "updatedAt" : "2017-05-18T14:08:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdd4d34c7d514ec2eaae67fa462491711e02c8b9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +3166,3170 @@\n\t// If true, partially initialized resources are included in the response.\n\tIncludeUninitialized bool\n\n\t// If true, watch for changes to this list"
  },
  {
    "id" : "28934a6f-19a7-4ad5-95f3-b7d5bd8ab365",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-42461329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8c3d6ed-08e8-4b75-8c23-179157b978e2",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this still seems like it allows cross-kubernetes-namespace mounting of the same storageos volume. is that intended?",
        "createdAt" : "2017-06-06T00:12:14Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "354759c0-ee48-4d64-a429-8ce2f1a18061",
        "parentId" : "c8c3d6ed-08e8-4b75-8c23-179157b978e2",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "The new update should make it more clear that the volNamespace is never used by kube, especially for secret lookups.  The volNamespace will normally be a copy of the kube namespace so that we can mirror the namespaces within the StorageOS control plane for easier/more familiar volume ACLs.",
        "createdAt" : "2017-06-06T22:07:08Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1169,1173 @@\t// Namespaces that do not pre-exist within StorageOS will be created.\n\t// +optional\n\tVolumeNamespace string\n\t// Filesystem type to mount.\n\t// Must be a filesystem type supported by the host operating system."
  },
  {
    "id" : "c153775d-9e64-4f50-bc71-5aff2427a381",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-43231880",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f36addd2-38f9-427b-b429-61df3a164b82",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: Maybe add a comment indicating why it is not `StorageOSVolumeSource`.",
        "createdAt" : "2017-06-09T18:40:46Z",
        "updatedAt" : "2017-06-09T18:48:56Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +391,395 @@\t// More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md\n\t// +optional\n\tStorageOS *StorageOSPersistentVolumeSource\n}\n"
  },
  {
    "id" : "d950afa8-d27e-440a-9cb1-b947462d3d79",
    "prId" : 39981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39981#pullrequestreview-16923747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a1cacb-6c4f-40c8-8403-f93e249a5a0e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should the optional-ness apply to keys inside secrets/configmaps?  e.g. The CM exists but the key specified does not.",
        "createdAt" : "2017-01-17T05:24:08Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca207be4a3d6f2aaf6b012a3eae0e306f4117566",
    "line" : null,
    "diffHunk" : "@@ -1,1 +743,747 @@\t// Specify whether the Secret or it's key must be defined\n\t// +optional\n\tOptional *bool\n}\n"
  },
  {
    "id" : "361fc238-3872-4d10-bfc6-ef2f3a51a150",
    "prId" : 39981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39981#pullrequestreview-16923747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48a2f2a0-e6a0-4ca0-a0a6-68c77a129a67",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same comment",
        "createdAt" : "2017-01-17T05:26:01Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca207be4a3d6f2aaf6b012a3eae0e306f4117566",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1009,1013 @@\t// Specify whether the ConfigMap or it's keys must be defined\n\t// +optional\n\tOptional *bool\n}\n"
  },
  {
    "id" : "29a47cdf-6db3-4a6c-8565-ed96cfe1c887",
    "prId" : 39981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39981#pullrequestreview-16923747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "872ac0b2-9711-4f3c-a84f-80437356959c",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same comment",
        "createdAt" : "2017-01-17T05:26:12Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca207be4a3d6f2aaf6b012a3eae0e306f4117566",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1133,1137 @@\t// Specify whether the ConfigMap or it's key must be defined\n\t// +optional\n\tOptional *bool\n}\n"
  },
  {
    "id" : "304b00ec-8786-4a2b-aff7-80ad8158442c",
    "prId" : 39981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39981#pullrequestreview-16923747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d18eff3-eef2-4df7-9303-1c3c907b2e89",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same comment",
        "createdAt" : "2017-01-17T05:26:22Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca207be4a3d6f2aaf6b012a3eae0e306f4117566",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1144,1148 @@\t// Specify whether the Secret or it's key must be defined\n\t// +optional\n\tOptional *bool\n}\n"
  },
  {
    "id" : "733a4431-e0b2-426c-b752-9f6e5a903f66",
    "prId" : 39535,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39535#pullrequestreview-17518017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "589da600-5427-4daa-90ca-108b9c9f961e",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "do you need `readonly` flag?",
        "createdAt" : "2017-01-19T18:02:49Z",
        "updatedAt" : "2017-02-28T23:27:39Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "28df55fc31f658648681749e8545771c314b2bfd",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1016,1020 @@\t// Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n\t// +optional\n\tFSType string\n\t// Defaults to false (read/write). ReadOnly here will force\n\t// the ReadOnly setting in VolumeMounts."
  },
  {
    "id" : "d0f57218-8718-4c4b-8fb5-b96092a62db1",
    "prId" : 39469,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39469#pullrequestreview-17393396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8163d14f-aec3-49c2-a855-e1499e4c9baf",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Why aren't we using one of our time structs here?  There are now a couple. \r\n/cc @gmarek ",
        "createdAt" : "2017-01-16T20:44:33Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "e44a12fe-ca8b-4367-9df1-4a27a9bb2043",
        "parentId" : "8163d14f-aec3-49c2-a855-e1499e4c9baf",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yeah - I certainly don't like int representing time. `metav1.Time` is better (for toleration time I don't think microsecond precision makes any sense).",
        "createdAt" : "2017-01-18T16:38:37Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "4d8248b6-3fc9-451b-9906-5a6a5cb019b8",
        "parentId" : "8163d14f-aec3-49c2-a855-e1499e4c9baf",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Scratch that - it seems I'm still tried. It should be a `time.Duration`.",
        "createdAt" : "2017-01-18T16:46:12Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "5de3b7bd-1c5c-4c86-bd5b-b73220aaf4b8",
        "parentId" : "8163d14f-aec3-49c2-a855-e1499e4c9baf",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I remember we were discussing it already, but why can't this be a plain value (instead of ptr), with the convention that negative values mean infinity? For backward compatibility we only care that 0 value has a good default semantics (I'm not sure if it's \"don't tolerate at all\" or \"tolerate forever\")",
        "createdAt" : "2017-01-18T17:03:18Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "66d84755-fed8-4e7d-b44f-e1ac3f492820",
        "parentId" : "8163d14f-aec3-49c2-a855-e1499e4c9baf",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Now that I looked at our API code it seems so 'XSeconds' is the way we do things. I think it's reasonable to leave it as it is.",
        "createdAt" : "2017-01-19T06:57:45Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72b32b9d28751d228bfa86a67b2e151c032d106",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1840,1844 @@\t// negative values will be treated as 0 (evict immediately) by the system.\n\t// +optional\n\tTolerationSeconds *int64\n}\n"
  },
  {
    "id" : "21f6652e-fec1-4732-892a-4a09ac4b9a24",
    "prId" : 39469,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39469#pullrequestreview-18579577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "013c5d45-ca49-4ef0-bcd4-45ff97ab9093",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'm not sure it'll be useful - when making eviction decisions we won't be able to depend on this timestamp either way (clock skew). OTOH it's probably useful for usability perspective, so we can show user when given taint was added, but then comment is wrong (it has the same sense for NoExecute taint as for other ones). @davidopp @timothysc ",
        "createdAt" : "2017-01-18T16:37:22Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "26ddaaba-0a24-43e1-87f8-1beb78c9da93",
        "parentId" : "013c5d45-ca49-4ef0-bcd4-45ff97ab9093",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "we enforce ntp ",
        "createdAt" : "2017-01-25T20:56:11Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "9e4c2d85-4190-4681-ab34-4d9c8cf69e92",
        "parentId" : "013c5d45-ca49-4ef0-bcd4-45ff97ab9093",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Is TimeAdded only written for NoExecute taints? If so, I would mention that.\r\nAlso, if the actual implementation ignores this field (as @gmarek is suggesting), then maybe you should remove most of the text and just say \"TimeAdded represents the time at which the taint was added.\" And if it's only written for NoExecute taint, then also say \"It is only written for NoExecute taints.\"\r\n",
        "createdAt" : "2017-01-26T09:20:55Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72b32b9d28751d228bfa86a67b2e151c032d106",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1789,1793 @@\t// It is only written for NoExecute taints.\n\t// +optional\n\tTimeAdded metav1.Time\n}\n"
  },
  {
    "id" : "dcf15cda-546a-48ac-93ed-3c06155d83b0",
    "prId" : 39469,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39469#pullrequestreview-18581675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6006851-dc09-4a95-b0dc-250fd694961f",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "@gmarek I think you said this was going to be a new controller, not NodeController?",
        "createdAt" : "2017-01-26T09:13:49Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "71b0810b-4d72-4972-a9a2-61b9de6ece0a",
        "parentId" : "c6006851-dc09-4a95-b0dc-250fd694961f",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "After some though I figured out that reusing NodeControllers eviction logic makes no sense for Taints (it has rate limiting which we don't want for taint based evictions). So I just added the 'child controller' in the same way CIDR allocator is.\r\n\r\nI don't have a strong opinion on this - it was just easier to write, as I didn't need to write all the boilerplate. Plus NC will strongly depend on TaintController to do evictions, so we may want to keep them together for now.",
        "createdAt" : "2017-01-26T09:33:10Z",
        "updatedAt" : "2017-01-27T13:04:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d72b32b9d28751d228bfa86a67b2e151c032d106",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1810,1814 @@\t// TaintEffectNoScheduleNoAdmit TaintEffect = \"NoScheduleNoAdmit\"\n\t// Evict any already-running pods that do not tolerate the taint.\n\t// Currently enforced by NodeController.\n\tTaintEffectNoExecute TaintEffect = \"NoExecute\"\n)"
  },
  {
    "id" : "3fa711d3-2212-476d-96c7-a221f2e98b24",
    "prId" : 38676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38676#pullrequestreview-23778533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70d3a967-5de4-4250-b6ab-679b03edc964",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Add this comment to OrphanDependents as well?",
        "createdAt" : "2017-02-24T05:27:17Z",
        "updatedAt" : "2017-03-01T07:05:50Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "3cbad43c-ce33-4190-9ddc-cb461a1637c3",
        "parentId" : "70d3a967-5de4-4250-b6ab-679b03edc964",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Done.",
        "createdAt" : "2017-02-24T18:23:17Z",
        "updatedAt" : "2017-03-01T07:05:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cb266340ac5d702a650ea30c730bb909cd99b5",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3040,3044 @@\t// Whether and how garbage collection will be performed.\n\t// Defaults to Default.\n\t// Either this field or OrphanDependents may be set, but not both.\n\t// +optional\n\tPropagationPolicy *DeletionPropagation"
  },
  {
    "id" : "8e6dbd98-e287-4b3a-b976-d9f563d346f1",
    "prId" : 37953,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37953#pullrequestreview-21579931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7445f7f2-14a9-4bea-af1f-f69a93ac1593",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This LGTM from an API perspective, @erictune do you concur based on the reasoning (we need to be able to opt out of a behavior we are already defaulting, so we can't use a new volume type to do this).",
        "createdAt" : "2017-02-13T16:16:50Z",
        "updatedAt" : "2017-02-15T21:07:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e6aa93bf-0adb-4ddc-9fa5-9251f023ed09",
        "parentId" : "7445f7f2-14a9-4bea-af1f-f69a93ac1593",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I had hoped to harmonize this with a more general-purpose mechanism for expressing explicit service dependencies and/or explicit pod-injection, but I don't see a clear way to do that",
        "createdAt" : "2017-02-13T18:05:34Z",
        "updatedAt" : "2017-02-15T21:07:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a4e3b0cc-cf17-46f4-989a-ba561edf5a5d",
        "parentId" : "7445f7f2-14a9-4bea-af1f-f69a93ac1593",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "All I can think of is setting a volume with a special name but not mounting it.  But from a security perspective we want to ACL secrets according to references, not use, so that would potentially expose the token still.",
        "createdAt" : "2017-02-13T18:34:23Z",
        "updatedAt" : "2017-02-15T21:07:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c9fd4fbe755f5ad36742cbaa991c634167bc6f2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1890,1894 @@\t// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n\t// +optional\n\tAutomountServiceAccountToken *bool\n\n\t// NodeName is a request to schedule this pod onto a specific node.  If it is non-empty,"
  },
  {
    "id" : "804ab99f-4b08-4974-978e-6cb3469f7183",
    "prId" : 37299,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37299#pullrequestreview-10891746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90e7cfc3-8378-44bb-93ee-917810d5c166",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@smarterclayton @lavalamp What is the official decoration needed?  \r\nxref: #34508",
        "createdAt" : "2016-11-30T20:03:27Z",
        "updatedAt" : "2016-12-16T17:02:28Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "f5bf2270-fde3-4afa-a8ff-56db1c1a2320",
        "parentId" : "90e7cfc3-8378-44bb-93ee-917810d5c166",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "omitempty and +optional, and if you need to support empty vs nil arrays or maps you should not set omitempty and instead use the same construct that ExtraValues in authorization uses.",
        "createdAt" : "2016-12-01T02:24:39Z",
        "updatedAt" : "2016-12-16T17:02:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "11c577f09245c2d1825ffcf6f77fae4a98f665a1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1826,1830 @@\tSubdomain string\n\t// If specified, the pod's scheduling constraints\n\t// +optional\n\tAffinity *Affinity\n}"
  },
  {
    "id" : "ffcc15e4-b7d0-4ff9-a74f-ba900a178bd4",
    "prId" : 36245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36245#pullrequestreview-13551432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4636f41-5371-49fd-8e63-c29280a510ec",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Godoc for this type",
        "createdAt" : "2016-12-19T13:42:34Z",
        "updatedAt" : "2017-01-03T16:45:52Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "94866b3beee16e9db416395be9e3b27b81da2902",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1135,1139 @@\n// EnvFromSource represents the source of a set of ConfigMaps\ntype EnvFromSource struct {\n\t// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n\t// +optional"
  },
  {
    "id" : "fded21e6-2911-44aa-945c-070e284c6d69",
    "prId" : 36245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36245#pullrequestreview-13557511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe6a0da-c26c-4c2b-85cb-bfd62a7780af",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Godoc",
        "createdAt" : "2016-12-19T13:43:11Z",
        "updatedAt" : "2017-01-03T16:45:52Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "a912712a-3ec5-4c78-82ce-9d270da5539d",
        "parentId" : "7fe6a0da-c26c-4c2b-85cb-bfd62a7780af",
        "authorId" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "body" : "Everything is in v1/types. I was copying the style see EnvVar.",
        "createdAt" : "2016-12-19T14:08:41Z",
        "updatedAt" : "2017-01-03T16:45:52Z",
        "lastEditedBy" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "tags" : [
        ]
      }
    ],
    "commit" : "94866b3beee16e9db416395be9e3b27b81da2902",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1301,1305 @@\t// Values defined by an Env with a duplicate key will take precedence.\n\t// Cannot be updated.\n\t// +optional\n\tEnvFrom []EnvFromSource\n\t// +optional"
  },
  {
    "id" : "64c3174c-274f-4d10-8136-ea4a4174f675",
    "prId" : 36101,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36101#pullrequestreview-21211555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "032b849d-fb97-40c9-be86-1100935ca358",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Have you added the code that automatically creates this namespace like I did in: https://github.com/kubernetes/kubernetes/pull/25196?\r\n\r\nI assume that since we have this namespace as a core feature, it should be created on all clusters.\r\nWe might want to have it behind a feature gate maybe, but at least it would be annoying to have to create the namespace in kubeadm or manually.",
        "createdAt" : "2016-12-17T10:10:06Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "649b86c8-cbd8-411e-be5e-de589e3d8f10",
        "parentId" : "032b849d-fb97-40c9-be86-1100935ca358",
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "I've added auto-create without a flag.  This is low impact enough I think it should be cool.",
        "createdAt" : "2016-12-19T19:06:19Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "a7fd4671-c63c-4b73-89e0-9f9d676000d3",
        "parentId" : "032b849d-fb97-40c9-be86-1100935ca358",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What is public info? I don't get the concept.",
        "createdAt" : "2017-02-09T15:09:56Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "da36a8ba-0c9e-4539-928a-3abc760dd222",
        "parentId" : "032b849d-fb97-40c9-be86-1100935ca358",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The comment should be much more clear, i.e. define what \"public\" means.",
        "createdAt" : "2017-02-09T15:12:20Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "fc76ae30-e73b-4ff3-ab33-c66687a7cfea",
        "parentId" : "032b849d-fb97-40c9-be86-1100935ca358",
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "@sttts See kubernetes/community#189",
        "createdAt" : "2017-02-10T07:26:09Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "f4537e3c-e098-4bf7-b07d-37fce96f8ffa",
        "parentId" : "032b849d-fb97-40c9-be86-1100935ca358",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "My point was that I don't get the concept from this very comment here in types.go. Just change it what the proposal says: `This namespace, by convention, is readable by all users (including those not authenticated).`",
        "createdAt" : "2017-02-10T09:55:55Z",
        "updatedAt" : "2017-02-10T20:49:51Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "415e20877ef8585996965af8149c7239da1b1b4a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +191,195 @@\tNamespaceSystem string = \"kube-system\"\n\t// NamespacePublic is the namespace where we place public info (ConfigMaps)\n\tNamespacePublic string = \"kube-public\"\n\t// TerminationMessagePathDefault means the default path to capture the application termination message running in a container\n\tTerminationMessagePathDefault string = \"/dev/termination-log\""
  },
  {
    "id" : "2f837c78-b7e0-4e6e-8e82-bb4caded8b22",
    "prId" : 35481,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35481#pullrequestreview-6112719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "455ab9af-3faf-44a8-92f5-31b976a144a8",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "s/will be deleted/is marked for deletion/\n",
        "createdAt" : "2016-10-26T10:26:16Z",
        "updatedAt" : "2016-11-05T03:38:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "ece9d946-6462-4c02-ad11-a9aa98b2a9fe",
        "parentId" : "455ab9af-3faf-44a8-92f5-31b976a144a8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think that's the right change.\n",
        "createdAt" : "2016-10-27T17:56:52Z",
        "updatedAt" : "2016-11-05T03:38:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0be25e481bb2feab250a3e9ba4e6aebcf38b1821",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +115,119 @@\tCreationTimestamp unversioned.Time `json:\"creationTimestamp,omitempty\"`\n\n\t// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n\t// field is set by the server when a graceful deletion is requested by the user, and is not\n\t// directly settable by a client. The resource is expected to be deleted (no longer visible"
  },
  {
    "id" : "5200bc75-f332-41ab-9544-bce07f9adee5",
    "prId" : 33905,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33905#pullrequestreview-3066383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18c3b16b-ced6-4101-9f4f-fb8d0b545a8e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This API change LGTM - it is consistent with other objects that have conditions.\n\n@kubernetes/api-review-team any disagreement?\n",
        "createdAt" : "2016-10-03T17:23:42Z",
        "updatedAt" : "2016-10-10T16:34:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4dbd08df-a789-4b60-a9fd-86582310123b",
        "parentId" : "18c3b16b-ced6-4101-9f4f-fb8d0b545a8e",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "See my other remark about `LastProbeTime`.\n",
        "createdAt" : "2016-10-06T08:28:52Z",
        "updatedAt" : "2016-10-10T16:34:14Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5589469948474360597de7d10224b319c83b6a84",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1754,1758 @@\t// ObservedGeneration is the most recent generation observed by the controller.\n\tObservedGeneration int64 `json:\"observedGeneration,omitempty\"`\n\n\t// Represents the latest available observations of a replication controller's current state.\n\tConditions []ReplicationControllerCondition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"`"
  },
  {
    "id" : "3dd89f9b-f46e-4431-aa08-219675585356",
    "prId" : 32771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32771#pullrequestreview-1806876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21c1e085-3de3-42c3-aaff-49ef8944415c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please put this last in the spec, after Template.\n",
        "createdAt" : "2016-09-27T16:13:17Z",
        "updatedAt" : "2016-09-28T09:25:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "26834d44-1f58-4b88-bed5-4677645aa854",
        "parentId" : "21c1e085-3de3-42c3-aaff-49ef8944415c",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "done\n",
        "createdAt" : "2016-09-27T19:28:21Z",
        "updatedAt" : "2016-09-28T09:25:32Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8dc2aac07809eb914c675caf8e73c05969617a6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1721,1725 @@\t// without any of its container crashing, for it to be considered available.\n\t// Defaults to 0 (pod will be considered available as soon as it is ready)\n\tMinReadySeconds int32 `json:\"minReadySeconds,omitempty\"`\n\n\t// Selector is a label query over pods that should match the Replicas count."
  },
  {
    "id" : "662c5a1c-4f63-4f45-b5a2-2da6d8c4a4ee",
    "prId" : 29836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543c7e3d-a716-4b88-b5ad-0f19c99d3bea",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Required?  it's not omitempty, so I assume it is required.\n",
        "createdAt" : "2016-08-02T05:47:09Z",
        "updatedAt" : "2016-08-23T13:23:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea4b0226d859a1b86a81163c86ec61cffc1b952",
    "line" : null,
    "diffHunk" : "@@ -1,1 +809,813 @@type AzureDiskVolumeSource struct {\n\t// The Name of the data disk in the blob storage\n\tDiskName string `json:\"diskName\"`\n\t// The URI the the data disk in the blob storage\n\tDataDiskURI string `json:\"diskURI\"`"
  },
  {
    "id" : "ff9985eb-f807-464f-9785-c1dbeaa3e2bc",
    "prId" : 29836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eab559a-1c6c-4b83-bda5-deec76dca2bd",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Required?  it's not omitempty, so I assume it is required.\n",
        "createdAt" : "2016-08-02T05:47:16Z",
        "updatedAt" : "2016-08-23T13:23:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a570d3f1-9c2b-4c67-a03f-8f5052256182",
        "parentId" : "0eab559a-1c6c-4b83-bda5-deec76dca2bd",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "it is required\n",
        "createdAt" : "2016-08-08T14:49:28Z",
        "updatedAt" : "2016-08-23T13:23:19Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea4b0226d859a1b86a81163c86ec61cffc1b952",
    "line" : null,
    "diffHunk" : "@@ -1,1 +811,815 @@\tDiskName string `json:\"diskName\"`\n\t// The URI the the data disk in the blob storage\n\tDataDiskURI string `json:\"diskURI\"`\n\t// Host Caching mode: None, Read Only, Read Write.\n\tCachingMode *AzureDataDiskCachingMode `json:\"cachingMode,omitempty\"`"
  },
  {
    "id" : "1146a522-7fcd-4f22-9aaf-9ac23920f755",
    "prId" : 29048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/29048#pullrequestreview-1741977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is this change intentional?\n",
        "createdAt" : "2016-07-20T22:12:43Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e22a48f9-15a0-40cc-b2c1-8da03bf7cd1b",
        "parentId" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Yes; I may be wrong, but I believe this is a Node.Name, not a host name.  If we are cross-referencing an event to a node, we should look up a Node.Name, not a host name.  We don't even publish the host name on a Node (except when it == the node name), so it would be wrong to publish with the hostname.\n\nI don't think we can fix the json (that's schema), but we can at least fix the comment.\n",
        "createdAt" : "2016-07-21T02:21:14Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "ff52289c-d5c6-4842-a607-b5f90deb7b5b",
        "parentId" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "~~I did a search in the code base and it seems we never set the EventSource.Host. If that's true, we might be able to change the schema.~~\n\n> We don't even publish the host name on a Node\n\nDo you mean we can't find the host name from the Node api?\n",
        "createdAt" : "2016-07-21T17:28:40Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0aca4d5e-4371-4374-9f5b-cc9b1d268968",
        "parentId" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Oh I only searched inside pkg/ and Host is set in cmd/. I agree it should actually be termed as node name.\n",
        "createdAt" : "2016-07-21T18:10:48Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ec0ba578-a6cd-4fa5-bd97-bdfb7afb72ab",
        "parentId" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you also change the comment in pkg/api/v1/types.go?\n",
        "createdAt" : "2016-07-21T18:11:51Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8f9bbe06-7b99-448a-8a5f-86667b3fa8c4",
        "parentId" : "c222a5be-c4aa-4a34-bdc3-087d2a43b289",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Changed :-)\n",
        "createdAt" : "2016-09-27T14:22:25Z",
        "updatedAt" : "2016-09-27T14:48:09Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "54195d590f03a544d78b4449b2fbafaa258fd6df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2569,2573 @@\t// Component from which the event is generated.\n\tComponent string `json:\"component,omitempty\"`\n\t// Node name on which the event is generated.\n\tHost string `json:\"host,omitempty\"`\n}"
  },
  {
    "id" : "e68d3a30-0cc0-44de-8765-b8669ab78f5d",
    "prId" : 27880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abe0fcb5-eee9-4389-be74-8580326d8aee",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@smarterclayton we don't currently support labels and annotations via envs :-/\n",
        "createdAt" : "2016-08-19T18:10:53Z",
        "updatedAt" : "2016-08-20T19:57:17Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "cbf6e61f-3fd1-4e38-b0bc-8637e5f985c6",
        "parentId" : "abe0fcb5-eee9-4389-be74-8580326d8aee",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes we do.\n\nOn Fri, Aug 19, 2016 at 2:11 PM, Paul Morie notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/27880#discussion_r75527150\n> :\n> \n> > @@ -878,7 +878,8 @@ type EnvVar struct {\n> >  // EnvVarSource represents a source for the value of an EnvVar.\n> >  // Only one of its fields may be set.\n> >  type EnvVarSource struct {\n> > -   // Selects a field of the pod; only name and namespace are supported.\n> > -   // Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations,\n> \n> @smarterclayton https://github.com/smarterclayton we don't currently\n> support labels and annotations via envs :-/\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/27880/files/d3f23004ba0c309298490ce43535eec04fecaf89#r75527150,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABG_p9IJQ7q56l2r7e3Ua-eBnBe2htTCks5qhfG8gaJpZM4I7-Um\n> .\n",
        "createdAt" : "2016-08-19T18:19:10Z",
        "updatedAt" : "2016-08-20T19:57:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f6ae35ee-12c3-4957-8b4c-80cc61a6e11e",
        "parentId" : "abe0fcb5-eee9-4389-be74-8580326d8aee",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Because people reused code that exposed them.\n\nOn Fri, Aug 19, 2016 at 2:19 PM, Clayton Coleman ccoleman@redhat.com\nwrote:\n\n> Yes we do.\n> \n> On Fri, Aug 19, 2016 at 2:11 PM, Paul Morie notifications@github.com\n> wrote:\n> \n> > In pkg/api/types.go\n> > https://github.com/kubernetes/kubernetes/pull/27880#discussion_r75527150\n> > :\n> > \n> > > @@ -878,7 +878,8 @@ type EnvVar struct {\n> > >  // EnvVarSource represents a source for the value of an EnvVar.\n> > >  // Only one of its fields may be set.\n> > >  type EnvVarSource struct {\n> > > -  // Selects a field of the pod; only name and namespace are supported.\n> > > -  // Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations,\n> > \n> > @smarterclayton https://github.com/smarterclayton we don't currently\n> > support labels and annotations via envs :-/\n> > \n> > —\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/kubernetes/kubernetes/pull/27880/files/d3f23004ba0c309298490ce43535eec04fecaf89#r75527150,\n> > or mute the thread\n> > https://github.com/notifications/unsubscribe-auth/ABG_p9IJQ7q56l2r7e3Ua-eBnBe2htTCks5qhfG8gaJpZM4I7-Um\n> > .\n",
        "createdAt" : "2016-08-19T18:19:23Z",
        "updatedAt" : "2016-08-20T19:57:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "abded5c6c5a4f4e93c961688587904376cfe28d7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +879,883 @@// Only one of its fields may be set.\ntype EnvVarSource struct {\n\t// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations,\n\t// spec.nodeName, spec.serviceAccountName, status.podIP.\n\tFieldRef *ObjectFieldSelector `json:\"fieldRef,omitempty\"`"
  },
  {
    "id" : "ff2d973a-6cd8-45a9-a281-23cd49d39686",
    "prId" : 24977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1c1e83c-3af7-44c3-8a19-793c68eb047e",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "What exactly does this field do? CC @pmorie \n",
        "createdAt" : "2016-08-09T04:00:15Z",
        "updatedAt" : "2016-08-18T15:14:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "589e73c0-0ea9-452b-8e4c-bf734bf81f67",
        "parentId" : "c1c1e83c-3af7-44c3-8a19-793c68eb047e",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ditto with `Group` below. I want to understand why this plugin is special casing these values in the API and other plugins are not.\n",
        "createdAt" : "2016-08-09T04:01:05Z",
        "updatedAt" : "2016-08-18T15:14:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ddef8a02-d555-4902-839c-aa076de7ea01",
        "parentId" : "c1c1e83c-3af7-44c3-8a19-793c68eb047e",
        "authorId" : "b38a5eff-ba3e-4260-b4ac-72d7033f36eb",
        "body" : "@saad-ali @pmorie \n\nWith the Quobyte volume driver, we are allowing the user to specify which (Unix) user and group a container uses to access data. This allows us to do fine-grained access control in file systems that are shared between applications and users, and makes an application deployment entirely independent from the (random) unix user baked into the container.\n\nWe eventually want to hook that up to the existing service account concept, so that it defaults to the service account name.\n",
        "createdAt" : "2016-08-09T10:21:55Z",
        "updatedAt" : "2016-08-18T15:14:11Z",
        "lastEditedBy" : "b38a5eff-ba3e-4260-b4ac-72d7033f36eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "eed42380f98439c0776431bc1bd949f530099c62",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +652,656 @@\t// User to map volume access to\n\t// Defaults to the root user\n\tUser string `json:\"user,omitempty\"`\n\n\t// Group to map volume access to"
  },
  {
    "id" : "f2d6c100-54b2-40cb-b568-e9a28795e078",
    "prId" : 24836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78d52ddc-f7d3-422b-9f23-2e80db67c6a6",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I didn't understand this comment. The resource is integer GPUs, not milliGPUs, so how can you specify fractional?\n",
        "createdAt" : "2016-05-12T07:54:12Z",
        "updatedAt" : "2016-05-12T07:54:12Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "362c763fca4c7c6c148532c6f4e68422899b5297",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1930,1934 @@\t// Volume size, in bytes (e,g. 5Gi = 5GiB = 5 * 1024 * 1024 * 1024)\n\tResourceStorage ResourceName = \"storage\"\n\t// NVIDIA GPU, in devices. Alpha, might change: although fractional and allowing values >1, only one whole device per node is assigned.\n\tResourceNvidiaGPU ResourceName = \"alpha.kubernetes.io/nvidia-gpu\"\n\t// Number of Pods that may be running on this Node: see ResourcePods"
  },
  {
    "id" : "6a500d93-1815-4df8-a902-ca2fce29c0e9",
    "prId" : 24362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abf70ce5-8300-4584-924e-628b82b459be",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "  If not specified, the pod will not have a domainname at all.\n",
        "createdAt" : "2016-04-18T06:58:42Z",
        "updatedAt" : "2016-04-28T17:57:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bb01a46f-3a3f-4695-95c5-d69ceb318a51",
        "parentId" : "abf70ce5-8300-4584-924e-628b82b459be",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "done\n",
        "createdAt" : "2016-04-19T22:38:15Z",
        "updatedAt" : "2016-04-28T17:57:24Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3ed48808185ec410a7450796da790790e1d3bd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1233,1237 @@\t// If not specified, the pod's hostname will be set to a system-defined value.\n\tHostname string `json:\"hostname,omitempty\"`\n\t// If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\".\n\t// If not specified, the pod will not have a domainname at all.\n\tSubdomain string `json:\"subdomain,omitempty\"`"
  },
  {
    "id" : "ef5e52d6-ebaf-4e3e-b06d-227f671cc420",
    "prId" : 24362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14187eaf-8ac4-4fcf-9d23-60f278e06391",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Add something like \"For example, DNS servers can use this.\"\n",
        "createdAt" : "2016-04-20T01:25:26Z",
        "updatedAt" : "2016-04-28T17:57:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1377361d-b070-47ff-9731-d4438ef3b1f8",
        "parentId" : "14187eaf-8ac4-4fcf-9d23-60f278e06391",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "still open\n",
        "createdAt" : "2016-04-20T06:20:45Z",
        "updatedAt" : "2016-04-28T17:57:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2921cc88-b65f-47a4-9f28-93ddde825f5f",
        "parentId" : "14187eaf-8ac4-4fcf-9d23-60f278e06391",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "done (not pushed)\n",
        "createdAt" : "2016-04-20T17:54:45Z",
        "updatedAt" : "2016-04-28T17:57:24Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a3ed48808185ec410a7450796da790790e1d3bd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1639,1643 @@\t// TODO: This should allow hostname or IP, see #4447.\n\tIP string\n\t// Optional: Hostname of this endpoint\n\t// Meant to be used by DNS servers etc.\n\tHostname string `json:\"hostname,omitempty\"`"
  },
  {
    "id" : "7ce80567-966c-4bd7-91d3-98dcd5499ae2",
    "prId" : 24331,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1528e1a2-fc34-4d5b-b774-e0f4c8f98af5",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "how about calling it `Released`, as in PV.\n",
        "createdAt" : "2016-04-15T15:18:31Z",
        "updatedAt" : "2016-05-18T08:07:18Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "618f9dcf-4f49-4fff-9f05-8842d5b5b377",
        "parentId" : "1528e1a2-fc34-4d5b-b774-e0f4c8f98af5",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I think it's fundamentally different than `Released`. Released PV successfully fulfilled its purpose without errors, while the Lost claim is in very bad error state.\n\nI think someone suggested `Failed` state, but there were some good arguments I don't remember why it is bad.\n",
        "createdAt" : "2016-04-15T15:35:28Z",
        "updatedAt" : "2016-05-18T08:07:18Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "fb21ab57-be7a-4ced-ae15-fc5986be90b6",
        "parentId" : "1528e1a2-fc34-4d5b-b774-e0f4c8f98af5",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I think this is fine, as long as it's clear that it's a terminal state where data is lost.  We could also call this `PersistentVolumeClaimEmptyHusk`, since that's basically what the volume is.\n\nTo be clear, the only way out of this is 'delete the claim', right?\n",
        "createdAt" : "2016-05-03T04:42:49Z",
        "updatedAt" : "2016-05-18T08:07:18Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "8ad1dbd6-3703-450d-8288-73bc2857964d",
        "parentId" : "1528e1a2-fc34-4d5b-b774-e0f4c8f98af5",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Anyway, `Lost` seems fine to me here.\n",
        "createdAt" : "2016-05-13T15:34:47Z",
        "updatedAt" : "2016-05-18T08:07:18Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "01b20d8e77776dda3b7ec3389bd200ed80716d46",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +415,419 @@\t// PersistentVolume. The claim was bound to a PersistentVolume and this\n\t// volume does not exist any longer and all data on it was lost.\n\tClaimLost PersistentVolumeClaimPhase = \"Lost\"\n)\n"
  },
  {
    "id" : "afb4119a-a09f-41bc-9726-03f0c80fded4",
    "prId" : 24179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81a45bb0-6845-4026-be75-6ec6b2d6d2f9",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Shouldn't this be a `ResourceName`?  cc @derekwaynecarr \n",
        "createdAt" : "2016-05-23T18:53:42Z",
        "updatedAt" : "2016-05-24T16:24:57Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "14e9e102-ceff-4c3a-bd9e-c526dfccf809",
        "parentId" : "81a45bb0-6845-4026-be75-6ec6b2d6d2f9",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "My bad, this is okay as a string, but there should be a note saying which expressions are supported.\n",
        "createdAt" : "2016-05-23T18:56:00Z",
        "updatedAt" : "2016-05-24T16:24:57Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2b1aff4e-96bc-48d4-b2f8-24a2ab047d42",
        "parentId" : "81a45bb0-6845-4026-be75-6ec6b2d6d2f9",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "Actually that note is there with type ResourceFieldRef. \n",
        "createdAt" : "2016-05-23T18:57:31Z",
        "updatedAt" : "2016-05-24T16:24:57Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "1931931494518d5b60f61435a77fa39189546c00",
    "line" : null,
    "diffHunk" : "@@ -1,1 +839,843 @@\tContainerName string `json:\"containerName,omitempty\"`\n\t// Required: resource to select\n\tResource string `json:\"resource\"`\n\t// Specifies the output format of the exposed resources, defaults to \"1\"\n\tDivisor resource.Quantity `json:\"divisor,omitempty\"`"
  },
  {
    "id" : "03b06789-19dc-44b6-9d9a-2ad900a5bddc",
    "prId" : 24134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a20f65-1d63-446d-875f-02fd0bdf8425",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "You forgot to make this \"omitempty\" here (you did change the other one)\n",
        "createdAt" : "2016-05-15T17:26:49Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1defd1c5-01b3-4afb-b788-698ffdc0cb61",
        "parentId" : "e9a20f65-1d63-446d-875f-02fd0bdf8425",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "Shall we make the effect of taints default to empty? If so, the semantic is to match all kinds of effects?\n",
        "createdAt" : "2016-05-16T01:19:05Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "6f116a86-36df-4088-8937-013747ebfe48",
        "parentId" : "e9a20f65-1d63-446d-875f-02fd0bdf8425",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I'm sorry. Ignore my comment. I thought I was looking at Tolerations, but this is Taint. Effect should be optional and omitempty for Tolerations, but not for Taint. So what you have here is correct.\n",
        "createdAt" : "2016-05-16T01:33:16Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52fb89ff7326b3570e9c42a435081dab559f610b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1319,1323 @@\t// that do not tolerate the taint.\n\t// Valid effects are NoSchedule and PreferNoSchedule.\n\tEffect TaintEffect `json:\"effect\"`\n}\n"
  },
  {
    "id" : "cf746690-24c6-4458-938a-033ea780c61f",
    "prId" : 23928,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "651219e0-7c1f-43ad-877b-a29104f965d4",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "nit:\n\nList of objects -> The list of objects\nALL -> all\n",
        "createdAt" : "2016-04-11T04:18:14Z",
        "updatedAt" : "2016-05-05T04:55:07Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "2246965c-4d2b-40d2-91f3-b04c7c6c7a4d",
        "parentId" : "651219e0-7c1f-43ad-877b-a29104f965d4",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks. The way the sentence is written is aligned with the convention of other comments in this file, so I'll keep it this way.\n",
        "createdAt" : "2016-04-11T18:41:23Z",
        "updatedAt" : "2016-05-05T04:55:07Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4562a26d3449eec8481214d198e904a3883d5c5f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +140,144 @@\tAnnotations map[string]string `json:\"annotations,omitempty\"`\n\n\t// List of objects depended by this object. If ALL objects in the list have\n\t// been deleted, this object will be garbage collected.\n\tOwnerReferences []OwnerReference `json:\"ownerReferences,omitempty\"`"
  },
  {
    "id" : "2512e13c-b012-4d83-b63e-c712c088a7ea",
    "prId" : 22985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f890ff9-b4f8-4656-8a51-c4e16d7017e1",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I know without eviction policy and rescheduling we can't do this part yet, but I fail to see the \"practical\" use case of IgnoredDuringExecution vs. RequiredDuringExecution. \n",
        "createdAt" : "2016-03-16T15:25:41Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "8a7e9833-90ec-487c-8365-f84dafe1f486",
        "parentId" : "4f890ff9-b4f8-4656-8a51-c4e16d7017e1",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "@timothysc Do you mean you think one of the two variants (requiredDuringSchedulingRequiredDuringExecution or requiredDuringSchedulingIgnoredDuringExecution) is not useful? If so, which one do you think is not useful?\n",
        "createdAt" : "2016-03-17T22:15:07Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "d6691d3b-e594-4952-8f08-b64e5136aa59",
        "parentId" : "4f890ff9-b4f8-4656-8a51-c4e16d7017e1",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I don't see a practical reason for requiredDuringSchedulingIgnoredDuringExecution. \n",
        "createdAt" : "2016-03-18T15:58:00Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "8da376b5-cee9-4f82-83de-930ba2860ed4",
        "parentId" : "4f890ff9-b4f8-4656-8a51-c4e16d7017e1",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "At this point the main practical reason is so we can roll out this feature before we have time to implement the \"RequiredDuringExecution\" part (in particular the logic for eviction). I actually tend to agree with you that once we add eviction (i.e. offer requiredDuringSchedulingRequiredDuringExecution), few people will use requiredDuringSchedulingIgnoredDuringExecution. That said, the current semantics of podSpec.nodeSelector that has been in the system from day one are \"ignoredDuringExecution\" so I guess that general semantic is not completely useless. Also, some people have argued we actually want two flavors of \"requiredDuringExecution\" (one that is synchronous eviction and one that is asynchronous eviction) so we'd potentially end up with multiple fields (or some alternative way to distinguish which option you want) even if we didn't have ignoredDuringExecution.\n",
        "createdAt" : "2016-03-18T18:33:49Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "42d521d0-147f-417b-8e98-08b91fb3efd7",
        "parentId" : "4f890ff9-b4f8-4656-8a51-c4e16d7017e1",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "We should comment that then.  \n",
        "createdAt" : "2016-04-27T13:42:48Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ba4f077e01bf5be20cfd9cbe74949f8eea611d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1180,1184 @@\t// When there are multiple elements, the lists of nodes corresponding to each\n\t// podAffinityTerm are intersected, i.e. all terms must be satisfied.\n\t// RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"`\n\t// If the affinity requirements specified by this field are not met at\n\t// scheduling time, the pod will not be scheduled onto the node."
  },
  {
    "id" : "0fdf188b-d54a-4213-99f1-0cf54434de23",
    "prId" : 22985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "548ce96f-04c5-4bea-a82e-87977742b7f6",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Same comment. \n",
        "createdAt" : "2016-03-17T20:37:12Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ba4f077e01bf5be20cfd9cbe74949f8eea611d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1211,1215 @@\t// When there are multiple elements, the lists of nodes corresponding to each\n\t// podAffinityTerm are intersected, i.e. all terms must be satisfied.\n\t// RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"`\n\t// If the anti-affinity requirements specified by this field are not met at\n\t// scheduling time, the pod will not be scheduled onto the node."
  },
  {
    "id" : "304a1ae2-4a83-426c-b3c3-73c1f1da2687",
    "prId" : 20142,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1ff858-bf62-4d5d-91e3-50783b46f945",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is this secret the same no matter whether it's a client or server cert?  Should we have one type for client and one type for server?  I may have missed that discussion earlier, but it's an important distinction and we should call it out.\n",
        "createdAt" : "2016-02-04T17:26:31Z",
        "updatedAt" : "2016-02-05T19:00:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8f4581ed-e6c4-4d82-8a46-eacd3c28e53e",
        "parentId" : "da1ff858-bf62-4d5d-91e3-50783b46f945",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "That was part of my motivation for including \"Chain\" and being all hand-wavy in the comments about what chain it was. By client cert I'm assuming you mean the cert a server would use to re-encrypt (or the cert a client would use for client auth), does they need to be different? \n\nOr were you talking about something from the client that might include a csr etc? \n",
        "createdAt" : "2016-02-04T17:30:38Z",
        "updatedAt" : "2016-02-05T19:00:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "8190554d-6520-4ecb-8091-144a4348efec",
        "parentId" : "da1ff858-bf62-4d5d-91e3-50783b46f945",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't _think_ they need to be different.  I guess the question is whether\npeople want to be explicit with secrets or not.  Since the schema looks\nlike it handles both types, I think the type should also be generic.  We\nmight in the future add a new secret schema type (tls-server) if we had\nto.  Another thing to keep in mind - if we get into serving certs, every\nprogramming language has its own cert container story (Java -> Go ->\nOpenSSL) so we may also need to qualify in the future the type.\n\nOn Thu, Feb 4, 2016 at 12:30 PM, Prashanth B notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/20142#discussion_r51906838\n> :\n> \n> > @@ -2143,6 +2143,20 @@ const (\n> > \n> > ```\n> > // SSHAuthPrivateKey is the key of the required SSH private key for SecretTypeSSHAuth secrets\n> > SSHAuthPrivateKey = \"ssh-privatekey\"\n> > ```\n> > \n> > +\n> > -   // SecretTypeTLS contains information about SSL termination used with the Ingress resource.\n> > -   //\n> > -   // Required fields:\n> > -   // - Secret.Data[\"key\"] - TLS private key.\n> > -   //   Secret.Data[\"cert\"] - TLS certificate.\n> > -   //   Secret.Data[\"chain\"] - optional certificate chain.\n> > -   // TODO: Consider supporting different formats, specifying CA/destinationCA.\n> > -   SecretTypeTLS SecretType = \"kubernetes.io/tls\"\n> \n> That was part of my motivation for including \"Chain\" and being all\n> hand-wavy in the comments about what chain it was. By client cert I'm\n> assuming you mean the cert a server would use to re-encrypt (or the cert a\n> client would use for client auth), does they need to be different?\n> \n> Or were you talking about something from the client that might include a\n> csr etc?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20142/files#r51906838.\n",
        "createdAt" : "2016-02-04T17:39:30Z",
        "updatedAt" : "2016-02-05T19:00:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c56bebf5946c34d262d9eff5543ca491ead720c1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2251,2255 @@\t//   Secret.Data[\"tls.crt\"] - TLS certificate.\n\t// TODO: Consider supporting different formats, specifying CA/destinationCA.\n\tSecretTypeTLS SecretType = \"kubernetes.io/tls\"\n\n\t// TLSCertKey is the key for tls certificates in a TLS secert."
  },
  {
    "id" : "792f7157-a921-4678-bdeb-836b52e1de92",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d5fddfe-29c8-45b3-b2ec-e2b68baa97e8",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Sorry, my suggestion was actually change the field to be *NodeSelctorTerm, as well as the comment.\nSo thinking about this more, how about this? (Sorry, I realize this requires changing the validation code and the priority function and the tests a little...)\n\n```\n// (same comment as you have now)\ntype PreferredSchedulingTerm struct {\n   // Weight associated with matching the corresponding preference, in the range 1-100\n  Weight int `json:\"weight\"`\n  // A preference, associated with the correspnoding weight\n  Preference *NodeSelectorTerm `json:\"preference,omitempty\"`\n}\n```\n",
        "createdAt" : "2016-01-30T07:28:24Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "45a5a940-a107-43c6-9dd6-ff58312d847c",
        "parentId" : "1d5fddfe-29c8-45b3-b2ec-e2b68baa97e8",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "I'm fine with it.\n",
        "createdAt" : "2016-01-30T08:22:09Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "2ed9d2ff-af7d-4741-98d7-ceb9772cbd9c",
        "parentId" : "1d5fddfe-29c8-45b3-b2ec-e2b68baa97e8",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Actually, before you change this, let's ask Brian if this is allowed (having a pointer that is a required field). It may be that what we had originally is the only correct way to do this.\n",
        "createdAt" : "2016-01-30T08:39:43Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "e887f012-1781-4d10-9847-02a7a7701934",
        "parentId" : "1d5fddfe-29c8-45b3-b2ec-e2b68baa97e8",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Actually I'm 90% sure the right way to do this is\n\n```\nPreference NodeSelectorTerm `json:\"preference\"`\n```\n",
        "createdAt" : "2016-01-30T08:48:04Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "2813c428-1401-4b0b-a4a2-270b0ff098af",
        "parentId" : "1d5fddfe-29c8-45b3-b2ec-e2b68baa97e8",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "Yeah, I think this way is better.\n",
        "createdAt" : "2016-01-30T09:23:57Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +1127,1131 @@\t// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\n\tWeight int `json:\"weight\"`\n\t// A node selector term, associated with the corresponding weight.\n\tPreference NodeSelectorTerm `json:\"preference\"`\n}"
  },
  {
    "id" : "c69afc05-84c2-4627-986f-930c1ed4ecf8",
    "prId" : 18685,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40f05958-1f1f-4416-b92f-15c431dcaf47",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "For client-gen,  the tag must be in the comment before the type's doc. This prevents the tag from showing up in godoc or our API docs (definitions.html).\ncc @krousey \n\nUsers of go2idl can choose whether the tag should exist in the immediate comment block or the comment block before it.\n\nI made a separate PR #18743 for the changes in go2idl [update] it's merged.\n",
        "createdAt" : "2015-12-16T06:25:28Z",
        "updatedAt" : "2015-12-18T07:42:45Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b61c9a4cf3d37861f9ae9a7846a2a2aa7a891cca",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +316,320 @@\n// PersistentVolumeClaim is a user's request for and claim to a persistent volume\ntype PersistentVolumeClaim struct {\n\tunversioned.TypeMeta `json:\",inline\"`\n\tObjectMeta           `json:\"metadata,omitempty\"`"
  },
  {
    "id" : "31222695-db6e-4620-beb9-e77620877283",
    "prId" : 18611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ee86ba0-50b0-4640-badb-a1e3f2c2411e",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should we clarify that `Capacity` and `Allocatable` are not expected to change over time?\n",
        "createdAt" : "2015-12-16T23:17:37Z",
        "updatedAt" : "2016-01-13T01:00:57Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "455181f1-509c-49c2-9c11-fea2192e8bc6",
        "parentId" : "6ee86ba0-50b0-4640-badb-a1e3f2c2411e",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I'd prefer we don't make that assumption, unless there's a specific requirement. I suppose we could make the weak assertion that \"Changes are relatively infrequent\". But I think that by having it in status (and not spec), we're suggesting that it can change.\n",
        "createdAt" : "2015-12-17T01:03:07Z",
        "updatedAt" : "2016-01-13T01:00:57Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "7c0b92a1-124e-4876-9aa5-5ca0c2fef823",
        "parentId" : "6ee86ba0-50b0-4640-badb-a1e3f2c2411e",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "As of now our scheduler is built on this assumption. We will only add more\nfunctionality based on this assumption.\nIf nodes can also vertically scale, how about making that change to the API\nafter ensuring that all the components can handle that change?\n\nOn Wed, Dec 16, 2015 at 5:04 PM, Tim St. Clair notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/18611#discussion_r47857609\n> :\n> \n> > ```\n> > Capacity ResourceList `json:\"capacity,omitempty\"`\n> > ```\n> > -   // Allocatable represents the resources of a node that are available for scheduling.\n> > -   Allocatable ResourceList `json:\"allocatable,omitempty\"`\n> \n> I'd prefer we don't make that assumption, unless there's a specific\n> requirement. I suppose we could make the weak assertion that \"Changes are\n> relatively infrequent\". But I think that by having it in status (and not\n> spec), we're suggesting that it can change.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18611/files#r47857609.\n",
        "createdAt" : "2015-12-17T01:49:51Z",
        "updatedAt" : "2016-01-13T01:00:57Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "8d3e3724-130c-4569-8eef-8e48b72b622a",
        "parentId" : "6ee86ba0-50b0-4640-badb-a1e3f2c2411e",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Ok. I just realized this PR doesn't actually touch types.go, so I'll send a separate PR to address these comments.\n",
        "createdAt" : "2015-12-17T02:08:17Z",
        "updatedAt" : "2016-01-13T01:00:57Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2ffd007f7794f06b9a2f39d62280bd974d747c6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1534,1538 @@\tCapacity ResourceList `json:\"capacity,omitempty\"`\n\t// Allocatable represents the resources of a node that are available for scheduling.\n\tAllocatable ResourceList `json:\"allocatable,omitempty\"`\n\t// NodePhase is the current lifecycle phase of the node.\n\tPhase NodePhase `json:\"phase,omitempty\"`"
  },
  {
    "id" : "50a1f257-43d8-4c9f-b136-1ab31727fdab",
    "prId" : 18298,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e826ba24-5be8-4502-8ace-4290a947c467",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I assume once we have configData, there will be a 3rd line?  Seems fine.\n",
        "createdAt" : "2015-12-08T05:35:10Z",
        "updatedAt" : "2016-01-18T20:07:57Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "fb21e9ac-5f43-4c3f-b031-e234f5512372",
        "parentId" : "e826ba24-5be8-4502-8ace-4290a947c467",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "correct\n",
        "createdAt" : "2015-12-08T14:52:47Z",
        "updatedAt" : "2016-01-18T20:07:57Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "60cf252e8b8acfdc12f99e9b12ce0daa140b96f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +723,727 @@\tConfigMapKeyRef *ConfigMapKeySelector `json:\"configMapKeyRef,omitempty\"`\n\t// Selects a key of a secret in the pod's namespace.\n\tSecretKeyRef *SecretKeySelector `json:\"secretKeyRef,omitempty\"`\n}\n"
  },
  {
    "id" : "aed63b0c-6afa-41ba-83df-e463d6cec680",
    "prId" : 18298,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a596d45-13a7-4a3f-a928-61ac6a770ac0",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Could making this optional break any clients?\n",
        "createdAt" : "2015-12-08T05:36:31Z",
        "updatedAt" : "2016-01-18T20:07:57Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "ec74e1b3-1b30-44a1-871c-7c53dd1b8cf1",
        "parentId" : "5a596d45-13a7-4a3f-a928-61ac6a770ac0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Good question, I will have to think about that one.\n",
        "createdAt" : "2015-12-10T22:51:35Z",
        "updatedAt" : "2016-01-18T20:07:57Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "dfa9ee20-8e60-480d-b335-68a6998d4f88",
        "parentId" : "5a596d45-13a7-4a3f-a928-61ac6a770ac0",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "In theory, yes. Clearly, it was intended to be optional. \na) It's a pointer.\nb) There would be no point in the extra layer of struct if we didn't intend to add other fields.\n\nv1/types.go doesn't say \"Required\", but also lacks omitempty. :-(\n\nI'd be in favor of fixing the bug, but ask on kubernetes-dev whether it would affect anyone and add a release note.\n",
        "createdAt" : "2016-01-08T04:06:46Z",
        "updatedAt" : "2016-01-18T20:07:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "60cf252e8b8acfdc12f99e9b12ce0daa140b96f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +719,723 @@type EnvVarSource struct {\n\t// Selects a field of the pod; only name and namespace are supported.\n\tFieldRef *ObjectFieldSelector `json:\"fieldRef,omitempty\"`\n\t// Selects a key of a ConfigMap.\n\tConfigMapKeyRef *ConfigMapKeySelector `json:\"configMapKeyRef,omitempty\"`"
  },
  {
    "id" : "e17c0481-ceed-4e10-8b4f-46bd80d3af62",
    "prId" : 18248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4dbe68b-9825-4b95-aa69-7ca3dcb56e8d",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Just noticed this patch. Why did we choose to expose tags instead of simple image names?\n\n``` go\ntype ContainerImage struct {\nName string\n}\n```\n",
        "createdAt" : "2016-02-11T01:22:56Z",
        "updatedAt" : "2016-02-11T01:22:56Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "332c84e5-d30a-4907-bfb3-fa7f3a647de7",
        "parentId" : "e4dbe68b-9825-4b95-aa69-7ca3dcb56e8d",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "An image can have multiple tags, so getting a single \"Name\" is not enough.\n\nAn alternative is to have\n\n```\nName string\nTags []string\n```\n\nHowever, since we accept `gcr.io/google_containers/busybox:1.24` as a single image string in `api.Container`, this will only make finding a match more complicated. After we settle down on what our new image spec should be, we can easily convert the RepoTags to the new format.\n",
        "createdAt" : "2016-02-11T18:06:11Z",
        "updatedAt" : "2016-02-11T18:06:11Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "ea482770-6d01-449f-8335-eb93acd64d41",
        "parentId" : "e4dbe68b-9825-4b95-aa69-7ca3dcb56e8d",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "`NodeStatus` will be frozen for a while. So evolving this struct is hard. We can start with a simple model that we know for sure is cross runtime compatible. \nI talked to @bgrant0607 about this a bit, and we decided to just rename `RepoTags` to `Names` since aliases are a common enough pattern for most package distribution systems.\n",
        "createdAt" : "2016-02-11T21:10:04Z",
        "updatedAt" : "2016-02-11T21:10:04Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "46dfbdb8-012e-425e-9235-febb8b29afcf",
        "parentId" : "e4dbe68b-9825-4b95-aa69-7ca3dcb56e8d",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Note the discussion above to rename the Size field also.\n",
        "createdAt" : "2016-02-11T21:40:47Z",
        "updatedAt" : "2016-02-11T21:40:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a9de6ee569be6fc6e8a7675eba5488c0b774068",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1552,1556 @@type ContainerImage struct {\n\t// Names by which this image is known.\n\tRepoTags []string `json:\"repoTags\"`\n\t// The size of the image in bytes.\n\tSize int64 `json:\"size,omitempty\"`"
  },
  {
    "id" : "e8f7d51c-852f-40b8-8add-7f63d4cbe863",
    "prId" : 18248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8fc031b-cc3f-48b7-af3b-d752d2bb7794",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Is the intention to have a strong preference for a node that contains a large image?\n",
        "createdAt" : "2016-02-11T01:24:38Z",
        "updatedAt" : "2016-02-11T01:24:38Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6de6e134-d296-4d08-b9f6-de293b13be1a",
        "parentId" : "a8fc031b-cc3f-48b7-af3b-d752d2bb7794",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Yes, see #20140\n",
        "createdAt" : "2016-02-13T08:10:14Z",
        "updatedAt" : "2016-02-13T08:10:14Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a9de6ee569be6fc6e8a7675eba5488c0b774068",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1554,1558 @@\tRepoTags []string `json:\"repoTags\"`\n\t// The size of the image in bytes.\n\tSize int64 `json:\"size,omitempty\"`\n}\n"
  },
  {
    "id" : "4605493e-8815-4f66-8f91-551c97fa4381",
    "prId" : 17865,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7d218e7-a47f-4c33-8e6c-87cc6f089ff5",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "@smarterclayton was saying we should make these constants versioned, so you should make the same change to pkg/api/v1/types.go\n",
        "createdAt" : "2015-12-13T07:02:07Z",
        "updatedAt" : "2015-12-22T03:07:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9f3607292a244125145b14b57f11622817ad66c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2222,2226 @@const (\n\t// \"default-scheduler\" is the name of default scheduler.\n\tDefaultSchedulerName = \"default-scheduler\"\n)"
  },
  {
    "id" : "4eae95a3-8702-4ba6-bb41-acdfb454b8ec",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "shouldn't we be crystallizing all 'int' to fixed-width?\n",
        "createdAt" : "2015-11-18T00:35:47Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1c220c02-1102-4e34-be58-d888e9733735",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "+1\n",
        "createdAt" : "2015-11-18T00:48:44Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8f324e90-df15-45c4-8a6e-d48484daeb4d",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Oh, hrmm, this was internal… iirc, the ripple was huge\n",
        "createdAt" : "2015-11-18T00:49:52Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fe97820d-4d58-42f0-85cc-11a6694784d6",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@smarterclayton how many bullets do you feel like biting?\n",
        "createdAt" : "2015-11-18T00:52:25Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5f4bdcf1-9296-4926-8372-ade90afb94fb",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Internal changes are massive.  If you hate me, make me do it, but in a follow up.\n",
        "createdAt" : "2015-11-18T01:49:16Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "510b47ec-178d-40d1-9dc6-dd3af3a23af6",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "These are 32 ext and 32 or 64 internal, which is ok for now.\n",
        "createdAt" : "2015-11-18T01:49:46Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f0e4b718-191b-425f-8b26-f1f194896ae5",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should document that in the conventions.  It's obviously easier to use `int` internally.  Will the codegen converters convert int32 -> int ?\n",
        "createdAt" : "2015-11-18T04:28:56Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "da8e35dd-f503-4bf1-ae4d-6515e0b56329",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, and generated conversions now properly tolerate the change.\n\nChanging Int internally rippled out to most code paths - if we document\nint64 external requires int64 internal (until we nuke internal), we can\nattack it in pieces.\n",
        "createdAt" : "2015-11-18T06:43:15Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "59c76e86-f035-402f-abe4-945a9612c041",
        "parentId" : "f0694563-1e08-42bd-aff7-bd5c1ef49ea5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If teh conversions handle it, fine.  for internal it is a lot less terrible.\n\nOn Tue, Nov 17, 2015 at 10:43 PM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r45164702\n> :\n> \n> > @@ -719,11 +719,11 @@ type Probe struct {\n> >     // The action taken to determine the health of a container\n> >     Handler `json:\",inline\"`\n> >     // Length of time before health checking is activated.  In seconds.\n> > -   InitialDelaySeconds int64 `json:\"initialDelaySeconds,omitempty\"`\n> > -   InitialDelaySeconds int `json:\"initialDelaySeconds,omitempty\"`\n> \n> Yes, and generated conversions now properly tolerate the change. Changing\n> Int internally rippled out to most code paths - if we document int64\n> external requires int64 internal (until we nuke internal), we can attack it\n> in pieces. On Nov 17, 2015, at 11:29 PM, Tim Hockin <\n> notifications@github.com> wrote: In pkg/api/types.go <#17353 (comment)\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r45158886\n> \n> > :\n> > @@ -719,11 +719,11 @@ type Probe struct { // The action taken to determine\n> > the health of a container Handler `json:\",inline\"` // Length of time before\n> > health checking is activated. In seconds. - InitialDelaySeconds int64\n> > `json:\"initialDelaySeconds,omitempty\"` + InitialDelaySeconds int\n> > `json:\"initialDelaySeconds,omitempty\"`\n> > We should document that in the conventions. It's obviously easier to use\n> > int internally. Will the codegen converters convert int32 -> int ? — Reply\n> > to this email directly or view it on GitHub <\n> > https://github.com/kubernetes/kubernetes/pull/17353/files#r45158886>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r45164702.\n",
        "createdAt" : "2015-11-18T06:47:20Z",
        "updatedAt" : "2015-11-26T16:57:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +720,724 @@\tHandler `json:\",inline\"`\n\t// Length of time before health checking is activated.  In seconds.\n\tInitialDelaySeconds int `json:\"initialDelaySeconds,omitempty\"`\n\t// Length of time before health checking times out.  In seconds.\n\tTimeoutSeconds int `json:\"timeoutSeconds,omitempty\"`"
  },
  {
    "id" : "f1b0cf6b-0ecd-4ef8-9b0b-a66912393c88",
    "prId" : 16877,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90a2800a-6b36-48a1-bca7-e41a3bd6c835",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "having \"iscsi\" in the name is redundant - it's already in a struct called \"iscsi\"\n",
        "createdAt" : "2015-11-23T07:02:07Z",
        "updatedAt" : "2015-12-09T01:29:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3fa3a59f-ad72-49c3-a4d8-5ef30164a92c",
        "parentId" : "90a2800a-6b36-48a1-bca7-e41a3bd6c835",
        "authorId" : "39d00568-d146-4737-a948-060380891e9d",
        "body" : "This covered multiple times in previous discussions, please refer previous discussions on this commit as to why this naming convention was chosen.\n",
        "createdAt" : "2015-11-23T07:26:43Z",
        "updatedAt" : "2015-12-09T01:29:03Z",
        "lastEditedBy" : "39d00568-d146-4737-a948-060380891e9d",
        "tags" : [
        ]
      },
      {
        "id" : "c47c8bdd-bbd4-4ac3-b484-ff94f7f7f5bb",
        "parentId" : "90a2800a-6b36-48a1-bca7-e41a3bd6c835",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "no offense, but Github's UI sucks here - please brief me?\n",
        "createdAt" : "2015-11-23T07:51:47Z",
        "updatedAt" : "2015-12-09T01:29:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "54740374-a29e-4160-80ed-bda920b75688",
        "parentId" : "90a2800a-6b36-48a1-bca7-e41a3bd6c835",
        "authorId" : "39d00568-d146-4737-a948-060380891e9d",
        "body" : "See https://github.com/kubernetes/kubernetes/pull/16877#issuecomment-155241387 \n\nThis iscsi Interface often gets confused with network interface, and while they are named similarly, they are very different entities. Providing a parameter like \"eth0\" for Interface will cause the iscsi volume plugin to fail. Part of the reasoning behind the naming scheme is to ensure there is no ambiguity here. The default name for this file (iface.iscsi_ifacename) when generated by iscsiadm would be something like  <transport_name.hwaddress>, eg cxgb4i.00:07:48:b3:e4:22 which might use eth0 interface, but the iscsi interface name would nevertheless be cxgb4i.00:07:48:b3:e4:22,not eth0.\n",
        "createdAt" : "2015-11-23T08:15:55Z",
        "updatedAt" : "2015-12-09T01:29:03Z",
        "lastEditedBy" : "39d00568-d146-4737-a948-060380891e9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e46fa1fd4c6222993e4fb7d64fd694fdebb6f9c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +451,455 @@\tLun int `json:\"lun,omitempty\"`\n\t// Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\n\tISCSIInterface string `json:\"iscsiInterface,omitempty\"`\n\t// Required: Filesystem type to mount.\n\t// Must be a filesystem type supported by the host operating system."
  },
  {
    "id" : "a68fe9c8-33c4-457d-83b3-2f644bac00c3",
    "prId" : 14705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4efda9bc-c740-44f2-b1be-1988cfbe980b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "internal types shouldn't have json tags.\n",
        "createdAt" : "2015-10-09T13:04:50Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ad807098-fb47-425e-a1c3-1e9aedd53421",
        "parentId" : "4efda9bc-c740-44f2-b1be-1988cfbe980b",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "They all do, though.\n",
        "createdAt" : "2015-10-09T18:44:19Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "0901a213-e29c-4f19-b1f0-c959bf42f542",
        "parentId" : "4efda9bc-c740-44f2-b1be-1988cfbe980b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> They all do, though.\n\nhttps://github.com/kubernetes/kubernetes/issues/3933\n",
        "createdAt" : "2015-10-09T18:52:19Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5de164bf-52b1-41f4-a418-368f5fb0920c",
        "parentId" : "4efda9bc-c740-44f2-b1be-1988cfbe980b",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I would prefer to make this consistent with the rest of the file even though we know it is not right. i have a laundry list of stuff in that area I want to handle once I have some bandwidth freed up and will fix that issue and writr a verifier around it. \n",
        "createdAt" : "2015-10-10T05:48:58Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "393e2bc0195343c83933aa0cf1c02e854fe8779b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1029,1033 @@\t// PodSecurityContext, the value specified in SecurityContext takes precedence\n\t// for that container.\n\tRunAsUser *int64 `json:\"runAsUser,omitempty\"`\n\t// Indicates that the container must run as a non-root user.\n\t// If true, the Kubelet will validate the image at runtime to ensure that it"
  },
  {
    "id" : "7e6e4cb7-43b4-4d35-b0ec-23d7dca7831c",
    "prId" : 14705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "183694a1-6216-4c11-853a-444fd80d8aca",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "we could/should rename SecurityContext to ContainerSecurityContext - different PR\n",
        "createdAt" : "2015-10-21T04:51:03Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "393e2bc0195343c83933aa0cf1c02e854fe8779b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +792,796 @@\t// Optional: SecurityContext defines the security options the container should be run with.\n\t// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\n\tSecurityContext *SecurityContext `json:\"securityContext,omitempty\"`\n\n\t// Variables for interactive containers, these have very specialized use-cases (e.g. debugging)"
  },
  {
    "id" : "6ba7d732-6d0c-4742-b659-856f2dbf4d4b",
    "prId" : 14705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7201600-4503-4ecb-b4b1-b86fda238de4",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "\"if unspecified\" is said twice.\n",
        "createdAt" : "2015-10-21T04:54:04Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "393e2bc0195343c83933aa0cf1c02e854fe8779b",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2072,2076 @@\tPrivileged *bool `json:\"privileged,omitempty\"`\n\t// The SELinux context to be applied to the container.\n\t// If unspecified, the container runtime will allocate a random SELinux context for each\n\t// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and\n\t// PodSecurityContext, the value specified in SecurityContext takes precedence."
  },
  {
    "id" : "682e0051-a5b6-4091-8d2f-83472ca4c1ac",
    "prId" : 13853,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b9a522d-3a89-482e-b0d1-0d988301de19",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is there a reason why \"ssh-privatekey\" is not \"ssh-private-key\"?\n",
        "createdAt" : "2015-10-19T19:54:48Z",
        "updatedAt" : "2016-01-26T13:34:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5a27ad0c-f081-43ae-9ab5-8bf210514a72",
        "parentId" : "2b9a522d-3a89-482e-b0d1-0d988301de19",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "@jhadvig any reason?\n",
        "createdAt" : "2015-12-08T01:46:51Z",
        "updatedAt" : "2016-01-26T13:34:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "57601946-c372-41f7-914a-1737ef455c5c",
        "parentId" : "2b9a522d-3a89-482e-b0d1-0d988301de19",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Rename this or explain why funny hyphenation.\n",
        "createdAt" : "2015-12-19T09:34:12Z",
        "updatedAt" : "2016-01-26T13:34:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "0655590a-dfa0-41ac-bc26-0537cc8466e5",
        "parentId" : "2b9a522d-3a89-482e-b0d1-0d988301de19",
        "authorId" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "body" : "As @smarterclayton already explained:\nFor ssh-privatekey, \"privatekey\" is a common identifier used by SSH config, that's the only reason.\n",
        "createdAt" : "2015-12-19T12:22:24Z",
        "updatedAt" : "2016-01-26T13:34:47Z",
        "lastEditedBy" : "69d174e6-f279-43f1-9cd9-a6651c313348",
        "tags" : [
        ]
      },
      {
        "id" : "d290d648-c8e6-42d7-af2d-ebf6941cedbb",
        "parentId" : "2b9a522d-3a89-482e-b0d1-0d988301de19",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If we have to pick an arbitrary value, and we have a pattern for key types,\nit was primarily about picking something that clearly indicated what the\ntype was that fit into that (define a convention consistent with existing\nconventions).\n\nOn Sat, Dec 19, 2015 at 7:22 AM, Jakub Hadvig notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/13853#discussion_r48091879\n> :\n> \n> > -   // - Secret.Data[\"password\"] - password or token needed for authentication\n> > -   SecretTypeBasicAuth SecretType = \"kubernetes.io/basic-auth\"\n> >   +\n> > -   // BasicAuthUsernameKey is the key of the username for SecretTypeBasicAuth secrets\n> > -   BasicAuthUsernameKey = \"username\"\n> > -   // BasicAuthPasswordKey is the key of the password or token for SecretTypeBasicAuth secrets\n> > -   BasicAuthPasswordKey = \"password\"\n> >   +\n> > -   // SecretTypeSSHAuth contains data needed for SSH authetication.\n> > -   //\n> > -   // Required field:\n> > -   // - Secret.Data[\"ssh-privatekey\"] - private SSH key needed for authentication\n> > -   SecretTypeSSHAuth SecretType = \"kubernetes.io/ssh-auth\"\n> >   +\n> > -   // SSHAuthPrivateKey is the key of the required SSH private key for SecretTypeSSHAuth secrets\n> > -   SSHAuthPrivateKey = \"ssh-privatekey\"\n> \n> As @smarterclayton https://github.com/smarterclayton already explained:\n> For ssh-privatekey, \"privatekey\" is a common identifier used by SSH\n> config, that's the only reason.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13853/files#r48091879.\n",
        "createdAt" : "2015-12-20T01:16:03Z",
        "updatedAt" : "2016-01-26T13:34:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "5927ad81be974384c4b2313970b11bad18b86765",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2141,2145 @@\n\t// SSHAuthPrivateKey is the key of the required SSH private key for SecretTypeSSHAuth secrets\n\tSSHAuthPrivateKey = \"ssh-privatekey\"\n)\n"
  },
  {
    "id" : "bdae8bea-adce-4535-a25b-5a881c566421",
    "prId" : 13840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a2b9d13-418d-4157-b943-49338419029a",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "you may also need a `secret_option Secret` where you want to store your e.g. `cifs` credentials used in your example.\n",
        "createdAt" : "2015-11-02T21:00:15Z",
        "updatedAt" : "2015-12-23T22:11:57Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "f54944c6-7305-4a66-bcfe-1d3b70562660",
        "parentId" : "6a2b9d13-418d-4157-b943-49338419029a",
        "authorId" : "cb578771-ab57-49a0-afd6-27da11c87c6d",
        "body" : "Good one. I missed it. Will add..\n",
        "createdAt" : "2015-11-04T18:07:28Z",
        "updatedAt" : "2015-12-23T22:11:57Z",
        "lastEditedBy" : "cb578771-ab57-49a0-afd6-27da11c87c6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa76de79e5d1670b8e6add30f0159c833534a298",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +513,517 @@\tReadOnly bool `json:\"readOnly,omitempty\"`\n\t// Optional: Extra driver options if any.\n\tOptions map[string]string `json:\"options,omitempty\"`\n}\n"
  },
  {
    "id" : "010c3e2d-7f8c-4e75-aa13-532fba1955b7",
    "prId" : 13778,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21eaaeda-cdfc-4a2b-af1e-65987f8cedc1",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is this a one-of situation?  Is it valid to have Addresses and NotReadyAddresses at the same time in a single subset?\n\nComment pls.\n",
        "createdAt" : "2015-09-16T00:36:10Z",
        "updatedAt" : "2015-09-17T13:40:25Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "740f3fa3-6348-422d-96bd-215552e2688e",
        "parentId" : "21eaaeda-cdfc-4a2b-af1e-65987f8cedc1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not in the same subset.  We split the subset\n\nOn Sep 15, 2015, at 8:36 PM, Tim Hockin notifications@github.com wrote:\n\nIn pkg/api/types.go\nhttps://github.com/kubernetes/kubernetes/pull/13778#discussion_r39583170:\n\n> @@ -1305,8 +1305,9 @@ type Endpoints struct {\n>  //     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n>  //     b: [ 10.10.1.1:309, 10.10.2.2:309 ]\n>  type EndpointSubset struct {\n> - Addresses []EndpointAddress\n> - Ports     []EndpointPort\n> - Addresses         []EndpointAddress\n> - NotReadyAddresses []EndpointAddress\n\nIs this a one-of situation? Is it valid to have Addresses and\nNotReadyAddresses at the same time in a single subset?\n\nComment pls.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/13778/files#r39583170.\n",
        "createdAt" : "2015-09-16T00:56:48Z",
        "updatedAt" : "2015-09-17T13:40:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "38603bb9-ab4d-48bc-ad89-1aac938d9763",
        "parentId" : "21eaaeda-cdfc-4a2b-af1e-65987f8cedc1",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "@smarterclayton Your response about splitting the subset does not seem to be in line with your code change. per your code-changes, it does seem that both arrays (Addresses and NotReadyAddresses) can be in the same subset, but one endpointAddress can only be in one of the arrays.\n",
        "createdAt" : "2015-09-16T13:35:35Z",
        "updatedAt" : "2015-09-17T13:40:25Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "d52beb93-203d-4c2a-9f7a-a90646af78b2",
        "parentId" : "21eaaeda-cdfc-4a2b-af1e-65987f8cedc1",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "you seem to split it in the controller code changes,but not in the repacksubset code\n",
        "createdAt" : "2015-09-16T13:53:49Z",
        "updatedAt" : "2015-09-17T13:40:25Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "efba4c33-65c5-4bbe-a43a-f8990f8a627a",
        "parentId" : "21eaaeda-cdfc-4a2b-af1e-65987f8cedc1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Repack subset _should_ guarantee that an address doesn't show up in ready /\nnot ready in the same subset.  I'll update the doc, but I'm not sure what\ncode is indicating that we can't repack the subset to be unique.\n\nOn Wed, Sep 16, 2015 at 9:54 AM, Abhi Shah notifications@github.com wrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/13778#discussion_r39631558\n> :\n> \n> > @@ -1305,8 +1305,9 @@ type Endpoints struct {\n> >  //     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n> >  //     b: [ 10.10.1.1:309, 10.10.2.2:309 ]\n> >  type EndpointSubset struct {\n> > -   Addresses []EndpointAddress\n> > -   Ports     []EndpointPort\n> > -   Addresses         []EndpointAddress\n> > -   NotReadyAddresses []EndpointAddress\n> \n> you seem to split it in the controller code changes,but not in the\n> repacksubset code\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13778/files#r39631558.\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-09-16T14:40:57Z",
        "updatedAt" : "2015-09-17T13:40:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2decce817e00ec8646811c4a755797f450811e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1319,1323 @@type EndpointSubset struct {\n\tAddresses         []EndpointAddress\n\tNotReadyAddresses []EndpointAddress\n\tPorts             []EndpointPort\n}"
  },
  {
    "id" : "5ce851df-9640-4bf2-a3e1-7546bc3cc1b5",
    "prId" : 13005,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e14b77d2-d7c7-487b-8822-8ba8a1a47c2f",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I'm curious as to whether moving this field declaration is significant here?\n",
        "createdAt" : "2015-08-26T13:45:07Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "8295d648-cbb6-4d53-8cac-4dcb5e367189",
        "parentId" : "e14b77d2-d7c7-487b-8822-8ba8a1a47c2f",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "no, just what seems to make sense in terms of order of importance/requiredness..\n",
        "createdAt" : "2015-08-28T00:43:53Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ce4aa423fca40dc392c625b83d1ccc635c4248",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1188,1192 @@\t// Type determines how the service will be exposed.  Valid options: ClusterIP, NodePort, LoadBalancer\n\tType ServiceType `json:\"type,omitempty\"`\n\n\t// Required: The list of ports that are exposed by this service.\n\tPorts []ServicePort `json:\"ports\"`"
  },
  {
    "id" : "93b674ba-6186-46c4-ab48-5765ca76ec14",
    "prId" : 13005,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d1d3c0-f2d8-4f00-a9cb-4d23fc1f02c6",
        "parentId" : null,
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "(reposting comment against latest diff, so it doesn't get lost)\n1. I strongly suspect this should be an opaque provider-specific string rather than implying that its an IP.\n2. I feel like this is very much a provider-specific implementation detail, and should go in some provider-specific config file or some other generic key/value provider-attributes-extension mechanism.\n\nEg: the k8s openstack config currently requires a \"subnet-id\" and other monitoring options for loadbalancers.  These options are set globally via the config right now, but there are reasons you might want to vary them by service.\n",
        "createdAt" : "2015-08-28T02:32:25Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      },
      {
        "id" : "a7938788-5e22-4d1e-b39b-0f47e5b885cf",
        "parentId" : "30d1d3c0-f2d8-4f00-a9cb-4d23fc1f02c6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Just to be clear - there's not a way in OS to say \"Allocate me an IP that is mine until I release it\" and then say \"use that IP to attach a load-balancer (or other ingress mode)?\"\n\n@anguslees How does a user in OS pre-configure DNS for a service that isn't up yet?  Or does it just not handle that at all (just as Kubernetes does not handle it today).\n\n@justinsb It sounds like there is no way to pre-configure external DNS in Amazon either, right?  You have to wait until the ELB is instantiated to learn the CNAME to reference.\n\nIf both of those are true, then my initial assertion that this was a good idea might be dead wrong.  I would be willing to put a field in the UI that \"several\" platforms supported even if not all of them did.  I am NOT willing to put a field in the API if only one platform supports it (even if that happens to be my platform :)\n\nCan you guys please confirm my assertions?\n",
        "createdAt" : "2015-08-28T05:41:27Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "03ef87ce-6bfe-4366-a653-94bd70ddb990",
        "parentId" : "30d1d3c0-f2d8-4f00-a9cb-4d23fc1f02c6",
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "I'm slightly confused by what LoadBalancerIP actually is :/\n\nI thought it was some idea of \"chassis IP\", which OpenStack doesn't have.  You _can_ refer to loadbalancers by an _ID_ however.  In some deployments these refer to real hardware loadbalancers, so can't be created/destroyed by regular users.  In LBaaS v2 API, each \"loadbalancer\" can only have a single external IP (aka VIP), so exposing this might not mesh well with `ExternalIPs[]`.\n\nYour description above \"allocate me an IP that is mine until I release it\" sounds like you might be referring to something OpenStack calls a \"floating IP\".  Yes, you can have a public IP allocated from a pool - and associate that with a loadbalancer.  And you can pre-allocate the floating-ip before configuring any loadbalancer functionality.\n\nI'm still struggling to understand exactly how `LoadBalancerIP` is intended to differ from `ExternalIPs`.  We might indeed be talking about some common functionality, but at the moment neither the code comment here, the commit description, nor the discussion so far has helped me understand the expected semantics beyond \"it's an IP that has something to do with the loadbalancer\" :P\n",
        "createdAt" : "2015-08-31T02:48:09Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      },
      {
        "id" : "7c19bd67-1edf-4cb8-89ba-9b3fbb5fdb9e",
        "parentId" : "30d1d3c0-f2d8-4f00-a9cb-4d23fc1f02c6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There are a number of facets of this API.\n\n1) service.spec.type = LoadBalancer.  This tells kubernetes \"do whatever\nyou have to do to manifest a load balancer for me from the cloud provider,\nassign it a new IP address, and accept traffic on my\nservice.spec.ports[*].port\"\n\n2) service.spec.externalIPs[].  This tells kubernetes \"I am managing some\nother IPs that will arrive at the nodes in the cluster - please accept\ntraffic to those IPs on service.spec.ports[*].port and forward it to my\nservice\"\n\n3) service.spec.ports[*].NodePort.  This tells kubernetes \"I want to expose\nmy service on a port on each node of the cluster - please accept that\ntraffic and forward it to my service\"\n\nThis PR applies to case (1) above.  If specified, loadBalancerIP is a\nrequest that the cloud provider use the specific IP, rather than a new\none.  Does that make more sense?\n\nFrom your description, it sounds like a \"floating IP\" could implement this\nAPI - #12589 #12284\n\nOn Sun, Aug 30, 2015 at 7:48 PM, Angus Lees notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/13005#discussion_r38281540\n> :\n> \n> > ```\n> > // ExternalIPs are used by external load balancers, or can be set by\n> > // users to handle external traffic that arrives at a node.\n> > ExternalIPs []string `json:\"externalIPs,omitempty\"`\n> > ```\n> > -   // Only applies to Service Type: LoadBalancer\n> > -   // LoadBalancer will get created with the IP specified in this field.\n> > -   LoadBalancerIP string `json:\"loadBalancerIP,omitempty\"`\n> \n> I'm slightly confused by what LoadBalancerIP actually is :/\n> \n> I thought it was some idea of \"chassis IP\", which OpenStack doesn't have.\n> You _can_ refer to loadbalancers by an _ID_ however. In some deployments\n> these refer to real hardware loadbalancers, so can't be created/destroyed\n> by regular users. In LBaaS v2 API, each \"loadbalancer\" can only have a\n> single external IP (aka VIP), so exposing this might not mesh well with\n> ExternalIPs[].\n> \n> Your description above \"allocate me an IP that is mine until I release it\"\n> sounds like you might be referring to something OpenStack calls a \"floating\n> IP\". Yes, you can have a public IP allocated from a pool - and associate\n> that with a loadbalancer. And you can pre-allocate the floating-ip before\n> configuring any loadbalancer functionality.\n> \n> I'm still struggling to understand exactly how LoadBalancerIP is intended\n> to differ from ExternalIPs. We might indeed be talking about some common\n> functionality, but at the moment neither the code comment here, the commit\n> description, nor the discussion so far has helped me understand the\n> expected semantics beyond \"it's an IP that has something to do with the\n> loadbalancer\" :P\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13005/files#r38281540.\n",
        "createdAt" : "2015-09-01T03:27:26Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bc0ac4fa-c8db-4771-a6e5-ba42dacaee02",
        "parentId" : "30d1d3c0-f2d8-4f00-a9cb-4d23fc1f02c6",
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "Right .. so before this change, what value turned up in `TCPLoadBalancer.EnsureTCPLoadBalancer(... externalIP ..)` ?  I think I've already implemented that for OpenStack as you're describing for `LoadBalancerIP`.\n\nI guess I just never thought about where that value came from before.  From reading servicecontroller.go(+), it seems this _is_ `ExternalIPs`.  So again I'm back to \"What's new here? How is `LoadBalancerIP` different to `ExternalIPs` (with type=LoadBalancer)?\"\n\n(+) https://github.com/kubernetes/kubernetes/blob/cd798a471f210ad824cbd0d5dcd7f41af104684c/pkg/controller/service/servicecontroller.go#L385\n\n(Sorry, I feel like I'm being super dense and everyone except me seems to understand perfectly what this change is about)\n",
        "createdAt" : "2015-09-01T04:38:40Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ce4aa423fca40dc392c625b83d1ccc635c4248",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1213,1217 @@\t// the loadBalancerIP when a load balancer is created.\n\t// This field will be ignored if the cloud-provider does not support the feature.\n\tLoadBalancerIP string `json:\"loadBalancerIP,omitempty\"`\n\n\t// Required: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity."
  },
  {
    "id" : "d0d2a8da-b953-47ac-bdf8-4dafc01bae96",
    "prId" : 13005,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e7b142-0a17-4346-b33a-4e3ec5c70441",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Add to the comment so it is clear that this feature depends on the cloud-provider being able to do something with this.\n\nDo we expect, for example, AWS installations to ignore this field or to fail if it is provided (since it can not be satisfied)?\n\n@justinsb for opinion on the latter.\n",
        "createdAt" : "2015-09-09T16:44:08Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "22a1f23c-6f0e-40d6-b612-709a15e0497b",
        "parentId" : "e0e7b142-0a17-4346-b33a-4e3ec5c70441",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is still open \n",
        "createdAt" : "2015-09-11T00:26:31Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7ee5972c-3deb-489a-a7f1-eabe62b1f3f6",
        "parentId" : "e0e7b142-0a17-4346-b33a-4e3ec5c70441",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "missed two of your comment-related feedback.\nfixing it now.\n",
        "createdAt" : "2015-09-11T00:38:19Z",
        "updatedAt" : "2015-09-11T04:05:24Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ce4aa423fca40dc392c625b83d1ccc635c4248",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1209,1213 @@\n\t// Only applies to Service Type: LoadBalancer\n\t// LoadBalancer will get created with the IP specified in this field.\n\t// This feature depends on whether the underlying cloud-provider supports specifying\n\t// the loadBalancerIP when a load balancer is created."
  },
  {
    "id" : "65d9ef25-542d-4a80-b879-ec7e5908597b",
    "prId" : 12599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb13655a-40d2-4ba9-8a26-457990cac49b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "maybe I missed the debate, but 'fc' as part of the API is pretty obscure (as is 'rbd').  Is that really the best name?\n",
        "createdAt" : "2015-09-16T15:46:26Z",
        "updatedAt" : "2015-09-18T23:15:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "804eb342-98b7-482a-8009-ead4b90b3059",
        "parentId" : "cb13655a-40d2-4ba9-8a26-457990cac49b",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "@thockin no, it is never the best :) But this acronym have been a while for storage admins.\n",
        "createdAt" : "2015-09-16T15:54:35Z",
        "updatedAt" : "2015-09-18T23:15:49Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed9a1bbd3a9b689f4953deb6308d631314edf3f4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +239,243 @@\tCephFS *CephFSVolumeSource `json:\"cephfs,omitempty\"`\n\t// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n\tFC *FCVolumeSource `json:\"fc,omitempty\"`\n}\n"
  },
  {
    "id" : "2c5f5459-fec8-4a2a-b0b2-003e4737f6fa",
    "prId" : 12470,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Do we need a per namespace knob in the API? Can we instead have a single privileged option? \n",
        "createdAt" : "2015-08-13T17:23:38Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "81d5b870-89c3-46ab-ba12-b6135cc464fa",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think we do.  There are lots of cases where we want to run daemon\ncontrollers that _only_ have access to the host network - sharing host IPC\nor host mount namespace or host PID is wrong.\n\nOn Thu, Aug 13, 2015 at 1:23 PM, Vish Kannan notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/kubernetes/kubernetes/pull/12470#discussion_r37000555\n> :\n> \n> > @@ -921,6 +921,9 @@ type PodSpec struct {\n> >     // used must be specified.\n> >     // Optional: Default to false.\n> >     HostNetwork bool `json:\"hostNetwork,omitempty\"`\n> > -   // Run the container using the host ipc mode.\n> > -   // Optional: Default to false.\n> > -   HostIPC bool `json:\"hostIPC,omitempty\"`\n> \n> Do we need a per namespace knob in the API? Can we instead have a single\n> privileged option?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/12470/files#r37000555.\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-08-13T18:35:20Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1ae6c6d0-bd3a-4841-8b78-fa6f939b044b",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I agree with granular controls. We can add knobs as needed for now, but I predict we'll eventually want something more like a list, as with capabilities and resources.\n",
        "createdAt" : "2015-08-14T02:50:35Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "59dc4854-38ec-4781-b22d-507065c813a5",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I can't tell if this thread already asked and answered this question, but this PR lets us choose between \"one (generated) namespace per container\" and \"host namespace\", but it would also be valuable to let containers share a (non-host) IPC namespace with another container in their pod. Will this pod-level boolean make sense if we eventually have a per-container IPC namespace option?\n\nedit: current behavior is a shared IPC namespace with the infra container (one per pod, not one per container)\n",
        "createdAt" : "2015-08-24T13:59:39Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e4f7706b-6489-4278-8860-4dda996a48af",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "body" : "The containers in a pod share the IPC  and NET namespaces by default.\n\n> On Aug 24, 2015, at 7:00 AM, Jordan Liggitt notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -921,6 +921,9 @@ type PodSpec struct {\n> >     // used must be specified.\n> >     // Optional: Default to false.\n> >     HostNetwork bool `json:\"hostNetwork,omitempty\"`\n> > -   // Run the container using the host ipc mode.\n> > -   // Optional: Default to false.\n> > -   HostIPC bool `json:\"hostIPC,omitempty\"`\n> >   I can't tell if this thread already asked and answered this question, but this PR lets us choose between \"one (generated) namespace per container\" and \"host namespace\", but it would also be valuable to let containers share a (non-host) IPC namespace with another container in their pod. Will this pod-level boolean make sense if we eventually have a per-container IPC namespace option?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-08-24T15:50:32Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "5328b1c0-0dbd-4fd8-869d-e914880959c2",
        "tags" : [
        ]
      },
      {
        "id" : "ba0342bc-2873-4261-b3ad-78b9e1005c4e",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We've made the statement for other namespaces that you either get your own\nor the pods, but not with another arbitrary one (to reduce the allowed\ncomplexity).\n\nOn Aug 24, 2015, at 11:00 AM, Jordan Liggitt notifications@github.com\nwrote:\n\nIn pkg/api/types.go\nhttps://github.com/kubernetes/kubernetes/pull/12470#discussion_r37753490:\n\n> @@ -921,6 +921,9 @@ type PodSpec struct {\n>   // used must be specified.\n>   // Optional: Default to false.\n>   HostNetwork bool `json:\"hostNetwork,omitempty\"`\n> - // Run the container using the host ipc mode.\n> - // Optional: Default to false.\n> - HostIPC bool `json:\"hostIPC,omitempty\"`\n\nI can't tell if this thread already asked and answered this question, but\nthis PR lets us choose between \"one (generated) namespace per container\"\nand \"host namespace\", but it would also be valuable to let containers share\na (non-host) IPC namespace with another container in their pod. Will this\npod-level boolean make sense if we eventually have a per-container IPC\nnamespace option?\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/12470/files#r37753490.\n",
        "createdAt" : "2015-08-24T15:55:32Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "738ef07e-ae3d-43da-b0e6-1e4056fd0571",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Agree, I don't think we want to start sub-dividing the pod.  Lifecycle management is too complicated.\n",
        "createdAt" : "2015-08-24T16:33:31Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4f9d5fb1-bd6d-4beb-9920-2df53ed18a5b",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "so is there a way for a container to get \"pod namespace\" IPC? Looks like it's per container or host with this PR\n",
        "createdAt" : "2015-08-24T18:16:50Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "279bff08-ad58-4431-9368-7f3a3cff499e",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Our intent is to make \"pod namespace IPC\" the default once that is supported by Docker.\n",
        "createdAt" : "2015-08-24T18:20:04Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "529a1615-69b5-428c-8e38-e214d6deefcc",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Actually, @mrunalp said above that we already do that.\n",
        "createdAt" : "2015-08-24T18:21:09Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d5200c04-0052-44f6-946f-de1b0f246d0b",
        "parentId" : "988fb184-f47f-46df-91f3-ad9812047db1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah, misread... we're currently using the infra pod's id as the IPC namespace, so it is shared. should `createPodInfraContainer` create the infra container in the host IPC namespace also if `pod.spec.HostIPC` is true?\n",
        "createdAt" : "2015-08-24T18:26:21Z",
        "updatedAt" : "2015-09-18T19:22:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f21d9ac9e40830cc566252a7008fa760192380fd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +962,966 @@\t// Use the host's ipc namespace.\n\t// Optional: Default to false.\n\tHostIPC bool `json:\"hostIPC,omitempty\"`\n\t// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\n\t// If specified, these secrets will be passed to individual puller implementations for them to use.  For example,"
  },
  {
    "id" : "12f72410-8760-4602-b1b6-31d997a76947",
    "prId" : 11781,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290faadd-e3e3-43ac-985f-73e610f6f7b4",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I would call this APIVersion, just like the field in TypeMeta.\n",
        "createdAt" : "2015-07-28T04:43:31Z",
        "updatedAt" : "2015-08-13T16:25:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "795d1de8-7436-4849-bc8f-a0bd147f0ee4",
        "parentId" : "290faadd-e3e3-43ac-985f-73e610f6f7b4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-07-28T20:55:16Z",
        "updatedAt" : "2015-08-13T16:25:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1055eed9b6829347a568eceea51f3662ea6862a6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2230,2234 @@// An APIVersion represents a single concrete version of an object model.\ntype APIVersion struct {\n\tName     string `json:\"name,omitempty\" description:\"name of this version (e.g. 'v1')\"`\n\tAPIGroup string `json:\"apiGroup,omitempty\" description:\"The API group to add this object into, default 'experimental'\"`\n}"
  },
  {
    "id" : "0280c5cb-15d2-43da-bdb6-ad4097f654c4",
    "prId" : 11076,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "774708f1-1c0d-49fc-aae9-3c7343966b28",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Add:\n\n```\n// Status code 503\n```\n",
        "createdAt" : "2015-07-15T23:34:49Z",
        "updatedAt" : "2015-07-15T23:44:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f5358c13-ec68-41f2-8757-c2d1ad01433a",
        "parentId" : "774708f1-1c0d-49fc-aae9-3c7343966b28",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done.\n",
        "createdAt" : "2015-07-15T23:44:14Z",
        "updatedAt" : "2015-07-15T23:44:14Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1517b66001d20ec3dac888addd6adc9de1e28651",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1712,1716 @@\t// StatusReasonServiceUnavailable means that the request itself was valid,\n\t// but the requested service is unavailable at this time.\n\t// Retrying the request after some time might succeed.\n\t// Status code 503\n\tStatusReasonServiceUnavailable StatusReason = \"ServiceUnavailable\""
  },
  {
    "id" : "8cac8ca8-d22d-4b69-969f-198fb4d3937c",
    "prId" : 7974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71a0b4ab-a3dd-494a-9998-a1b49d085575",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I don't remember where discussion landed on this -- did we decide to omit 'Kind' for now and encode it in the field name?\n",
        "createdAt" : "2015-05-19T15:56:25Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "13934e3f-c5cd-4a0c-8ca0-6c0432b422aa",
        "parentId" : "71a0b4ab-a3dd-494a-9998-a1b49d085575",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> did we decide to omit 'Kind' for now and encode it in the field name?\n\nI thought so.  I added validation in case that ever changes and someone tries to set the additional fields.\n",
        "createdAt" : "2015-05-19T16:39:48Z",
        "updatedAt" : "2015-05-19T16:41:15Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "72c0709f18cbeff1efef3c2bd601db5f1e117509",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1637,1641 @@\n// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\ntype LocalObjectReference struct {\n\t//TODO: Add other useful fields.  apiVersion, kind, uid?\n\tName string"
  },
  {
    "id" : "235632d1-d5cc-4bea-9694-8d303c2dc532",
    "prId" : 7868,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e871089-64d9-4f8e-bc5d-6348f36a6646",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is it right to include pull time in this deadline?\n",
        "createdAt" : "2015-05-11T17:02:18Z",
        "updatedAt" : "2015-05-15T20:33:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b8f31274-ad2b-4cb3-8f82-45e807156be4",
        "parentId" : "3e871089-64d9-4f8e-bc5d-6348f36a6646",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Ideally, we should separate the limit of pulling all images in a pod from how long a container in pod could run, but that is much more complicated today. Also I feel one bound limit to the end user is much easy to understand. \n",
        "createdAt" : "2015-05-11T17:27:22Z",
        "updatedAt" : "2015-05-15T20:33:45Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "82163326117f095e75b4f1f1d830eb95667e86e6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +846,850 @@\n\t// Date and time at which the object was acknowledged by the Kubelet.\n\t// This is before the Kubelet pulled the container image(s) for the pod.\n\tStartTime *util.Time `json:\"startTime,omitempty\"`\n"
  },
  {
    "id" : "c49a7df9-911e-489a-ad24-96f3f4c3b2f2",
    "prId" : 7704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c02ca13-251d-4f98-8427-374dd4aa6dfb",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "For the sake of poor old Pete, please comment these?  What are they?  What are valid values?\n",
        "createdAt" : "2015-05-07T06:48:32Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bbb64cd8bb225bc725e8577b66264a867280502",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1930,1934 @@\t// port range \"10000-30000\". Range is not strongly schema'd here. The Range is expected to define\n\t// a start and end unless there is an implicit end.\n\tRange string `json:\"range\"`\n\t// A byte array representing the serialized state of a range allocation. Additional clarifiers on\n\t// the type or format of data should be represented with annotations. For IP allocations, this is"
  },
  {
    "id" : "c9d7e8c1-b6e5-4754-acb0-5be8710f26c9",
    "prId" : 7432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "316779dd-b65b-4bd5-98eb-5a715144a36f",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "closing ) with no opening (\n(same in the other files)\n",
        "createdAt" : "2015-04-30T19:29:09Z",
        "updatedAt" : "2015-04-30T19:29:09Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a2dc496fef202470058e439a4983d592cfffba",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +804,808 @@\t// If this value is nil, the default grace period will be used instead.\n\t// The grace period is the duration in seconds after the processes running in the pod are sent\n\t// a termination signal and the time when the processes are forcibly halted with a kill signal).\n\t// Set this value longer than the expected cleanup time for your process.\n\tTerminationGracePeriodSeconds *int64 `json:\"terminationGracePeriodSeconds,omitempty\"`"
  },
  {
    "id" : "1355783c-c7ca-4138-8765-d4e82af9c57b",
    "prId" : 7394,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5314b431-86f2-4850-86f9-a8308ddd3b12",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "FYI, omitempty implies that it's optional\n",
        "createdAt" : "2015-04-27T23:07:23Z",
        "updatedAt" : "2015-04-27T23:07:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bf0b03c17f55def656c7ce40a73c7965dd22d29",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +519,523 @@type EnvVarSource struct {\n\t// Required: Selects a field of the pod; only name and namespace are supported.\n\tFieldPath *ObjectFieldSelector `json:\"fieldPath,omitempty\"`\n}\n"
  },
  {
    "id" : "51758689-811d-4d43-882f-c4ea63c4e302",
    "prId" : 7343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69f24cb-9d1e-4028-b6b5-8c1c3cd9e5e4",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Are these fields really optional?  Is it valid to, for example, only declare a type? Or a role and user, but no type?\n",
        "createdAt" : "2015-04-30T21:18:05Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3eb8642c-9223-48a1-8aee-25288c1054d3",
        "parentId" : "e69f24cb-9d1e-4028-b6b5-8c1c3cd9e5e4",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "yes, they have different knobs you can turn on and off in the docker settings.  It may not be a valid configuration but it is a possible configuration.\n",
        "createdAt" : "2015-05-01T00:40:32Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e5b904e8c462b2ccf0660a6f0fa7c4d45cd4252",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1898,1902 @@type SELinuxOptions struct {\n\t// SELinux user label\n\tUser string `json:\"user,omitempty\" description:\"the user label to apply to the container\"`\n\n\t// SELinux role label"
  },
  {
    "id" : "4f19a229-ffd6-43bf-9424-efe6b151008c",
    "prId" : 7343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c5e6791-3782-455a-a289-63c86a99ee31",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I don't think this comment is correct for the context, since in the internal API these fields are not on Container.  I think we can probably leave this comment out (except for the first sentence).\n",
        "createdAt" : "2015-05-04T18:54:50Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2e7abb21-1a0a-481d-ba3a-0d1724462481",
        "parentId" : "4c5e6791-3782-455a-a289-63c86a99ee31",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "Not sure I follow, the SecurityContext field is on the Container struct in the internal api and v1beta\\* apis.  \n",
        "createdAt" : "2015-05-04T19:10:57Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e5b904e8c462b2ccf0660a6f0fa7c4d45cd4252",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1876,1880 @@}\n\n// SecurityContext holds security configuration that will be applied to a container.  SecurityContext\n// contains duplication of some existing fields from the Container resource.  These duplicate fields\n// will be populated based on the Container configuration if they are not set.  Defining them on"
  },
  {
    "id" : "4e912678-79c9-4e7d-a3c0-55e0c2c42de4",
    "prId" : 7101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm interested in this change because I'm trying to get #7444 done. I don't understand why you need a specific secret type for a service account token. Shouldn't the secret only contain a token, and the system will authorize accordingly? Why does the secret need to know it's got a service account token?\n",
        "createdAt" : "2015-05-08T23:18:23Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "57e715f9-fc46-4b17-9f0d-e982a80cf984",
        "parentId" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Secrets with this type are automatically managed/gc'ed by the ServiceAccountController/TokenController.  Opaque type tokens are not automatically managed by any controller. \n",
        "createdAt" : "2015-05-10T16:27:45Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "80f5b370-d5cb-429b-aa47-0358119c5f0b",
        "parentId" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That doesn't sound like a good reason-- you can just add an \"owned-by\"/\"created-by\" annotation to solve that use case.\n",
        "createdAt" : "2015-05-11T19:53:12Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "532b38e0-3288-4912-b545-3d632cb87e5d",
        "parentId" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Are you arguing against secrets declaring their type for system level components to utilize?\n",
        "createdAt" : "2015-05-11T19:56:16Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "dfcd8244-19a8-458f-ba45-3ea41d821ce8",
        "parentId" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Type indicates what the contents of the secret are. In addition to letting controllers that manage tokens for service accounts filter on this field, it lets the admission plugin know this secret is of a type that can be mounted at a standard path for API tokens\n",
        "createdAt" : "2015-05-11T19:57:51Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8dcce957-9ce3-4f7d-8524-f0e8aa0cb34a",
        "parentId" : "cdf3a5bc-eb21-4945-ae36-41f40b32024a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm arguing that a secret-for-the-purpose-of-auth is likely to be something multiple system components produce or consume, and the fact that these are made by the service account system is a fact about their ownership, not about their type.\n",
        "createdAt" : "2015-05-12T19:52:03Z",
        "updatedAt" : "2015-05-12T19:52:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd58ede6b03a4cc98639ccafdbc4796da9dccb",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1830,1834 @@\tSecretTypeOpaque SecretType = \"Opaque\"\n\n\t// SecretTypeServiceAccountToken contains a token that identifies a service account to the API\n\t//\n\t// Required fields:"
  },
  {
    "id" : "235c4e00-fee3-4e3e-b929-bd10359db1a9",
    "prId" : 7101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eccfcfe4-9f44-4475-9171-2c18eb426ee2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What is a principal in this context?\n",
        "createdAt" : "2015-05-08T23:25:01Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "af26a670-296a-4b78-a15d-4eb625a1fc4b",
        "parentId" : "eccfcfe4-9f44-4475-9171-2c18eb426ee2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "That was copied/pasted from docs/design/service_accounts.md, and could probably use some clarification/rewording. Traditionally, a principal is what you reference in policy rules. Principals can include include human users, machine accounts, etc... I think it's an attempt to avoid \"user\", since that implies a person.\n",
        "createdAt" : "2015-05-12T04:32:23Z",
        "updatedAt" : "2015-05-12T04:32:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd58ede6b03a4cc98639ccafdbc4796da9dccb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1042,1046 @@// ServiceAccount binds together:\n// * a name, understood by users, and perhaps by peripheral systems, for an identity\n// * a principal that can be authenticated and authorized\n// * a set of secrets\ntype ServiceAccount struct {"
  },
  {
    "id" : "36d29b20-7b0c-4f8f-bda8-fecaf67ef8c1",
    "prId" : 7101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "000da7eb-4048-4937-946e-79989d7e41a2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Default value?\n\nWhat does \"allowed\" mean? That they are automatically mounted by kubelet?\n",
        "createdAt" : "2015-05-08T23:26:10Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e2297a18-959e-471d-b76b-a6aa712449e3",
        "parentId" : "000da7eb-4048-4937-946e-79989d7e41a2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Default value?\n\nRight now, the admission plugin does everything serviceaccount-related on a pod, including setting the default serviceaccount on incoming pods without service accounts. I tried to keep pod-related serviceaccount behaviors isolated to the admission plugin to give a unified on/off point.\n\n> What does \"allowed\" mean?\n\nUltimately, that the ServiceAccount admission plugin will reject pods that reference secrets that are not in the pod's service account's list of secrets. Removing from here, and adding to the admission plugin doc, since that's what accomplishes that behavior\n",
        "createdAt" : "2015-05-11T20:41:08Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd58ede6b03a4cc98639ccafdbc4796da9dccb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +816,820 @@\n\t// ServiceAccount is the name of the ServiceAccount to use to run this pod\n\t// The pod will be allowed to use secrets referenced by the ServiceAccount\n\tServiceAccount string `json:\"serviceAccount\"`\n"
  },
  {
    "id" : "4d443a37-647f-41e8-aa38-63bcac2ce843",
    "prId" : 7101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f0e3f32-0a5d-4b91-b176-62707788ab0c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "As opposed to \"kubernetes.config\"?\n",
        "createdAt" : "2015-05-11T19:57:12Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f44a4973-b68d-43d4-9180-03dbf2d508f2",
        "parentId" : "1f0e3f32-0a5d-4b91-b176-62707788ab0c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I actually am removing this, since the kubeconfig generation is a follow up to discuss\n",
        "createdAt" : "2015-05-11T19:59:10Z",
        "updatedAt" : "2015-05-11T21:34:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "92bd58ede6b03a4cc98639ccafdbc4796da9dccb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1845,1849 @@\tServiceAccountTokenKey = \"token\"\n\t// ServiceAccountKubeconfigKey is the key of the optional kubeconfig data for SecretTypeServiceAccountToken secrets\n\tServiceAccountKubeconfigKey = \"kubernetes.kubeconfig\"\n)\n"
  },
  {
    "id" : "be726843-8bc6-4d48-83f3-36be3f2ab171",
    "prId" : 6689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f09a3a5d-c3ae-40a0-bf0d-1e910a26c7c5",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Comment name (CinderVolume) doesn't match Cinder.\n",
        "createdAt" : "2015-08-21T01:35:38Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c841a20361c86ea94acf5e5aff9f319aaa629e89",
    "line" : null,
    "diffHunk" : "@@ -1,1 +252,256 @@\tISCSI *ISCSIVolumeSource `json:\"iscsi,omitempty\"`\n\t// Cinder represents a cinder volume attached and mounted on kubelets host machine\n\tCinder *CinderVolumeSource `json:\"cinder,omitempty\"`\n}\n"
  },
  {
    "id" : "bc216e06-0d80-492d-a326-caaf4044ba0f",
    "prId" : 6597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53e4a52c-8020-4b8f-bfbd-6b75c09298a9",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This file shouldn't have description tags. Description tags need to be on all non-inline fields in the versioned types.go files.\n",
        "createdAt" : "2015-04-20T23:15:31Z",
        "updatedAt" : "2015-04-20T23:15:31Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "aa2f7a55-54ac-4902-ad07-f3b095c1a283",
        "parentId" : "53e4a52c-8020-4b8f-bfbd-6b75c09298a9",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Interesting, I have the standard presubmit hooks. Filed issue #7080 for the \"verify-description.sh\" error. I'll prepare a separate PR and address these.\n",
        "createdAt" : "2015-04-20T23:47:08Z",
        "updatedAt" : "2015-04-20T23:47:08Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6ef2ddf8aa8b3b78fa3397476e4184f6f99731e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1839,1843 @@type ComponentCondition struct {\n\tType    ComponentConditionType `json:\"type\" description:\"the type of condition\"`\n\tStatus  ConditionStatus        `json:\"status\" description:\"the status of this condition\"`\n\tMessage string                 `json:\"message,omitempty\" description:\"health check message received from the component\"`\n\tError   string                 `json:\"error,omitempty\" description:\"error code from health check attempt (if any)\"`"
  },
  {
    "id" : "87ef3900-6d60-474e-9fea-53147edcb406",
    "prId" : 6182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bcb1686-82f9-40d7-b30b-011d96016783",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Technically, isn't the first port allowed to be nameless, regardless how many ports there are?\n",
        "createdAt" : "2015-03-30T21:04:16Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ce02a3fb-4f37-4d58-bcbb-29f59c1585a2",
        "parentId" : "7bcb1686-82f9-40d7-b30b-011d96016783",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "most of the system won't differentiate whether it is the first port or not,\nbut validation enforces it.\n\nOn Mon, Mar 30, 2015 at 2:04 PM, Brian Grant notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6182#discussion_r27431745\n> :\n> \n> > ```\n> > // Required: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity.\n> > SessionAffinity AffinityType `json:\"sessionAffinity,omitempty\"`\n> > ```\n> > \n> >  }\n> > \n> > +type ServicePort struct {\n> > -   // Optional if only one ServicePort is defined on this service: The\n> \n> Technically, isn't the first port allowed to be nameless, regardless how\n> many ports there are?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6182/files#r27431745\n> .\n",
        "createdAt" : "2015-03-30T21:51:43Z",
        "updatedAt" : "2015-03-31T18:14:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e19f4939b1293b8b565a1087dcbb71c1ef46fe47",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +893,897 @@\ntype ServicePort struct {\n\t// Optional if only one ServicePort is defined on this service: The\n\t// name of this port within the service.  This must be a DNS_LABEL.\n\t// All ports within a ServiceSpec must have unique names.  This maps to"
  },
  {
    "id" : "8ff018e1-2c6e-4d8f-b4a1-7fb24ad43f82",
    "prId" : 6174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b6ec16-3e96-4bc8-b7bc-e0f3cd57447a",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "You'll also want to add this to PersistentVolumeSource to make it a provisionable resource.\n\nIf Gluster is not to be exposed to the end user (only the admin provisions it, users claim it), then after the PV framework is fully merged you can remove GFS from VolumeSource and leave it in PVS.  This hides it completely from the pod author.\n",
        "createdAt" : "2015-03-31T17:45:36Z",
        "updatedAt" : "2015-04-07T13:15:33Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a278ceeb0ab17c9472164ee4cf78645c8c1ccec4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +200,204 @@\tISCSI *ISCSIVolumeSource `json:\"iscsi\"`\n\t// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime\n\tGlusterfs *GlusterfsVolumeSource `json:\"glusterfs\"`\n}\n"
  },
  {
    "id" : "93d4bac9-31b6-4fb9-b333-3851fbe2abeb",
    "prId" : 6174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is the assumption that endpoints for gluster lie outside the kubernetes cluster?  I am a bit anxious about direct creation of endpoints without a service (now that we have headless services) since it lays a trap for a later collision that won't be detected.\n",
        "createdAt" : "2015-04-08T04:36:53Z",
        "updatedAt" : "2015-04-08T04:36:53Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0b06140b-3ac7-4ccf-af6b-b6e6547fc8ba",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "the gluster cluster lies outside the kube cluster. what's the collision case?\n",
        "createdAt" : "2015-04-08T13:23:49Z",
        "updatedAt" : "2015-04-08T13:23:49Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "abcaca2f-4717-4b73-b627-7cf6106bb25b",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's not unreasonable to force someone to create an external headless service if they want this behavior.\n\n----- Original Message -----\n\n> > @@ -421,6 +425,19 @@ type NFSVolumeSource struct {\n> >     ReadOnly bool `json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GlusterfsVolumeSource represents a Glusterfs Mount that lasts the\n> > lifetime of a pod\n> > +type GlusterfsVolumeSource struct {\n> > -   // Required: EndpointsName is the endpoint name that details Glusterfs\n> >   topology\n> > -   EndpointsName string `json:\"endpoints\"`\n> \n> Is the assumption that endpoints for gluster lie outside the kubernetes\n> cluster?  I am a bit anxious about direct creation of endpoints without a\n> service (now that we have headless services) since it lays a trap for a\n> later collision that won't be detected.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6174/files#r27942357\n",
        "createdAt" : "2015-04-08T14:00:28Z",
        "updatedAt" : "2015-04-08T14:00:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "28f8bb86-e027-4a08-b896-3ac8646e1e71",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The collision case is that you create endpoints called \"foo\" then I create\na service called \"foo\" and the endpoints controller fails.\nOn Apr 8, 2015 6:24 AM, \"Huamin Chen\" notifications@github.com wrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6174#discussion_r27968510\n> :\n> \n> > @@ -421,6 +425,19 @@ type NFSVolumeSource struct {\n> >     ReadOnly bool `json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GlusterfsVolumeSource represents a Glusterfs Mount that lasts the lifetime of a pod\n> > +type GlusterfsVolumeSource struct {\n> > -   // Required: EndpointsName is the endpoint name that details Glusterfs topology\n> > -   EndpointsName string `json:\"endpoints\"`\n> \n> the gluster cluster lies outside the kube cluster. what's the collision\n> case?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6174/files#r27968510\n> .\n",
        "createdAt" : "2015-04-08T14:49:40Z",
        "updatedAt" : "2015-04-08T14:49:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2c0ba9cb-b09d-40f3-9fb3-36ef1dd17508",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "got it, thanks. would a special namespace for storage help?\n",
        "createdAt" : "2015-04-08T14:53:28Z",
        "updatedAt" : "2015-04-08T14:53:28Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "125c4275-35ec-4b53-960e-dfbc502eb23b",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That won't cross namespaces though, which means we probably either need this to be an object reference, or make this a configuration parameter to the kubelet instead (or take a DNS name)\n\n----- Original Message -----\n\n> > @@ -421,6 +425,19 @@ type NFSVolumeSource struct {\n> >     ReadOnly bool `json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GlusterfsVolumeSource represents a Glusterfs Mount that lasts the\n> > lifetime of a pod\n> > +type GlusterfsVolumeSource struct {\n> > -   // Required: EndpointsName is the endpoint name that details Glusterfs\n> >   topology\n> > -   EndpointsName string `json:\"endpoints\"`\n> \n> got it, thanks. would a special namespace for storage help?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6174/files#r27977053\n",
        "createdAt" : "2015-04-08T15:08:56Z",
        "updatedAt" : "2015-04-08T15:08:56Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "83171d8e-bcd8-4a50-a01b-a4df3e1f8f5d",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Perhaps the real question is whether you expect an external-to-kubernetes gluster cluster to be namespace-scoped or not?\n\nA) The set of gluster endpoints is namespaced - use a headless service\nB) The set of gluster endpoints is not namespaced - use an object reference to a headless service\nC ?\n",
        "createdAt" : "2015-04-08T16:11:07Z",
        "updatedAt" : "2015-04-08T16:11:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c2082c71-1bc8-4100-9c09-166761d19314",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On Apr 8, 2015, at 12:11 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -421,6 +425,19 @@ type NFSVolumeSource struct {\n> >     ReadOnly bool `json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GlusterfsVolumeSource represents a Glusterfs Mount that lasts the lifetime of a pod\n> > +type GlusterfsVolumeSource struct {\n> > -   // Required: EndpointsName is the endpoint name that details Glusterfs topology\n> > -   EndpointsName string `json:\"endpoints\"`\n> >   Perhaps the real question is whether you expect an external-to-kubernetes gluster cluster to be namespace-scoped or not?\n> \n> A) The set of gluster endpoints is namespaced - use a headless service\n> B) The set of gluster endpoints is not namespaced - use an object reference to a headless service\n> C ?\n> \n> At least for persistent volumes (not namespaced), b) is required.\n\nOnly thing I can think of for C is \"a DNS address\" or \"a list of ips\".\n\n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-08T17:44:16Z",
        "updatedAt" : "2015-04-08T17:44:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "339d73fe-4cd3-4028-9a0a-f8a7a8401929",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We do not currently have any concept of non-namespaced endpoints or services.  Are we going to accumulate these things in a random namespace and then violate the cross-namespace principles?\n",
        "createdAt" : "2015-04-08T18:48:54Z",
        "updatedAt" : "2015-04-08T18:48:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "92ff0178-b325-4d2d-babd-b72a32c544d8",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So hypothetically, an admin might run gluster in namespace \"foo\" and have a real service \"gluster\" (headless or no).  They then want to use volumes from that gluster service in other namespaces.  So an admin would automate / manually create persistent volumes that point to that gluster cluster.  The volume settings would be \"use the gluster cluster in namespace foo with name gluster\".  When a volume source is created for that persistent volume, it would be referencing that service.\n\n----- Original Message -----\n\n> > @@ -421,6 +425,19 @@ type NFSVolumeSource struct {\n> >     ReadOnly bool `json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GlusterfsVolumeSource represents a Glusterfs Mount that lasts the\n> > lifetime of a pod\n> > +type GlusterfsVolumeSource struct {\n> > -   // Required: EndpointsName is the endpoint name that details Glusterfs\n> >   topology\n> > -   EndpointsName string `json:\"endpoints\"`\n> \n> We do not currently have any concept of non-namespaced endpoints or services.\n> Are we going to accumulate these things in a random namespace and then\n> violate the cross-namespace principles?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6174/files#r28000861\n",
        "createdAt" : "2015-04-08T19:19:43Z",
        "updatedAt" : "2015-04-08T19:19:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a06ec18c-0fa8-48ca-a9ae-b1858a7dcad3",
        "parentId" : "394046b0-84aa-4dab-8c43-3636865af3d6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I can buy that argument for persistent volumes, where it is an admin that is crossing the namespace boundary.  It's a bit less shiny when it's a user's pod that is referencing Endpoints or Services in another namespace.\n\nAs it stands, the endpoints must be in the same namespace as the pod.  I don't think this is sufficient to handle what you are describing.  This should probably become an ObjectRef, or else we should make it target a multi-record DNS name and treat that as an endpoints set (or something).\n\nThen we have to decide if it is kosher to write an Endpoints object that does not have an associated Service object.\n",
        "createdAt" : "2015-04-08T19:43:12Z",
        "updatedAt" : "2015-04-08T19:43:12Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a278ceeb0ab17c9472164ee4cf78645c8c1ccec4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +429,433 @@type GlusterfsVolumeSource struct {\n\t// Required: EndpointsName is the endpoint name that details Glusterfs topology\n\tEndpointsName string `json:\"endpoints\"`\n\n\t// Required: Path is the Glusterfs volume path"
  },
  {
    "id" : "ed9951e9-1800-45ea-b9a0-4f8b8cb79fdd",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Personally I find it confusing to have this called `EndpointSubset` since it is not directly a set and even if it were I am not sure if thinking of it being a subset of the \"union of Castesian products set\" is that helpful? This type is really a tuple of addresses and ports so why not name it to reflect what it holds e.g. `AddressesAndPorts` or `EndpointsSpec` ?\n",
        "createdAt" : "2015-03-26T16:46:54Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "ab8837aa-14f5-416a-b07b-396aa0baf4df",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "It is an error to have some `Addresses` and no `Ports`?\nOr some `Ports` and no `Addresses`?\nIs this checked/validated? Perhaps I will find out later but that does not seem to be the case in v1beta1/conversion.go\n",
        "createdAt" : "2015-03-26T17:08:36Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "9e9c7906-7341-4ef7-8695-1346c9df8448",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Currently it is an error to have no ports.\n\nIt should be an error to have no addresses.\n\nRe. use of the term \"set\" -- fair enough. \n\nPossible alternatives:\n- EndpointPortGroup -- it's a group identified by the ports\n- EndpointSublist -- less explanatory, but also less likely to be misinterpreted\n",
        "createdAt" : "2015-03-26T19:20:24Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a136defd-1203-4a3b-9475-232093dbaf3b",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "BTW, Spec doesn't work because this isn't really desired state, and we also don't use \"Spec\" to qualify subobjects other than the top-level object Spec subobjects (PodSpec, ReplicationControllerSpec, etc.).\n",
        "createdAt" : "2015-03-26T19:22:10Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "069075e2-0d4b-4972-957e-6faa455c03b7",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "On validation, you're right that this should probably be validated.  As it stands, if either addresses or ports is empty, you get an empty result and a success code.  I'll fix it.\n\nOn naming: It is a compact representation of a set of tuples, which is but a piece of a larger set == subset.  I'm fine renaming it as long as the rename is more valuable.\n\nSublist is no more helpful than Subset IMO.\n\nEndpointGroup?  EndpointPortGroup is no more descriptive that EndpointGroup to me.  Keep in mind that this DOES show up in the API that the user experiences in the form of the field name.\n\nI'm open to better answers.  You guys fight it out.\n",
        "createdAt" : "2015-03-26T22:23:33Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "465da272-b39d-4cf0-bcef-5921e3d46f67",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "EndpointMap (field name Maps) ?\n",
        "createdAt" : "2015-03-26T22:25:42Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "46f1ed02-4302-4eee-84be-f2a4d87304d0",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Regarding a better name for `Subset` -- I don't have a very strong view one this -- although this is a public field (as you point out). As for `EndpointSublist` -- it seems odd to call something that is a pair a list so this could be confusing. \n",
        "createdAt" : "2015-03-26T22:53:42Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "cf0618a4-67f8-4e95-8580-f8407037a2c9",
        "parentId" : "ec505917-0683-42ef-b1df-9eb8857214d2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Map is even more confusing given that it's not actually represented as a map.\n\nWhich is also the argument against set, except that we do de-duplication and it isn't order-preserving, so set seems reasonably appropriate, and there is no such thing as a json set, so no chance for confusion there.\n",
        "createdAt" : "2015-03-27T00:50:48Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +948,952 @@\tAddresses []EndpointAddress\n\tPorts     []EndpointPort\n}\n\n// EndpointAddress is a tuple that describes single IP address."
  },
  {
    "id" : "cae49a58-86d7-41f0-8c75-82eae32325e1",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "516d2fce-bdea-4ece-9bcf-d49a75bd611c",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Since `EndpointSubset` is not directly a set (of course it can be represented as a set) I find the `Set` naming a little confusion (at first glance I thought \"has the endpoint specificaiton been unraveled by computation into a flat list or `Set`?\"). This field represents a list of endpoints specifications. So if you renamed `EndpointSubset` to`EndpointsSpec` then this is perhaps:\n\n```\n  Specs []EndpointsSpec\n```\n",
        "createdAt" : "2015-03-26T16:51:31Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +932,936 @@\n\t// The set of all endpoints is the union of all subsets.\n\tSubsets []EndpointSubset\n}\n"
  },
  {
    "id" : "b4c9106b-4eb1-4e86-872a-c1a86e4fec36",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "And I assume there is no intersection between the Cartesian products of each `EndpointSubset` value otherwise it is an error? Specifically, an IP address must not occur in more than one `EndpointSubset`.\nIs it fine to have instead of this:\n\n```\nSubsets: [\n    {\n     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n     Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n]\n```\n\nto have this:\n\n```\nSubsets: [\n    {\n     Addresses: [{\"ip\": \"10.10.1.1\"}],\n     Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n     Addresses: [{\"ip\": \"10.10.2.2\"}],\n     Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n]\n```\n\nsince some algebra tells us that these should be equivalent?\n",
        "createdAt" : "2015-03-26T17:00:22Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "68cffb08-9ba2-47d3-b6ee-ac99df6e3efb",
        "parentId" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Can the name of a port be a string which represents number e.g. `\"6502\"`?\nThat would be confusing?\n",
        "createdAt" : "2015-03-26T18:34:30Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "4f04f668-006d-498b-9c0f-727a2820a864",
        "parentId" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Having read more code I see that the repacker will take care of this.\n",
        "createdAt" : "2015-03-26T18:58:09Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "8efbadef-fe43-45f7-8428-e640b32c775e",
        "parentId" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The intent is that Subset is effectively a map (represented as a list, as everywhere else in the API), where the key is the concatenation of EndpointPort objects.\n",
        "createdAt" : "2015-03-26T19:24:55Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c33d1db0-cf99-42c2-9aa8-a3ad5a7aab7d",
        "parentId" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Ah, and there is even a test for this case in pkg/api/endpoints/util_test.go\n",
        "createdAt" : "2015-03-26T20:17:49Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "c02496df-8b4c-45ea-a565-79260f1848c2",
        "parentId" : "369dcd7c-1ba3-44ca-99e1-471091fd8d5e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This made me test something I missed and find a bug.  Thanks.\n",
        "createdAt" : "2015-03-26T22:33:59Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +926,930 @@//       Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n//     },\n//  ]\ntype Endpoints struct {\n\tTypeMeta   `json:\",inline\"`"
  },
  {
    "id" : "878c5717-ffbc-4eba-9a10-db7dfed8f198",
    "prId" : 5915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2d036fa-5780-4215-bee9-486d507bf6ba",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "FWIW, there is no prohibition against maps in the internal data structures, only in the serialized, versioned APIs.\n",
        "createdAt" : "2015-03-26T18:58:32Z",
        "updatedAt" : "2015-03-26T19:12:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7689a41a-8aed-45d1-ad2b-04a250f0d28e",
        "parentId" : "b2d036fa-5780-4215-bee9-486d507bf6ba",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I've changed this also internally due to https://github.com/GoogleCloudPlatform/kubernetes/issues/3622#issuecomment-76346910\n",
        "createdAt" : "2015-03-26T19:02:43Z",
        "updatedAt" : "2015-03-26T19:12:05Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "2e06b9b5-2d78-4d6f-8392-db4d0121caef",
        "parentId" : "b2d036fa-5780-4215-bee9-486d507bf6ba",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Fair enough. However, feel free to objectively weigh the complexity of conversions vs. the complexity of list lookups, de-duplication, and normalization (e.g., sort order).\n",
        "createdAt" : "2015-03-26T19:06:16Z",
        "updatedAt" : "2015-03-26T19:12:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ec8995c4-16e7-4a98-88ae-d97df3ab628e",
        "parentId" : "b2d036fa-5780-4215-bee9-486d507bf6ba",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "In terms of complexity I can't see any actual difficulty when using list, however all code that touches that list is modified in this PR, so if you feel it makes code more complex I can change it.\n\nBut I personally think that the code is more complicated when you have two different representations (in this case internal and external ones) of them same object, rather than using just not the best data structure, so I prefer to leave the code as it is now.\n",
        "createdAt" : "2015-03-26T19:43:19Z",
        "updatedAt" : "2015-03-26T19:43:19Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "78871ca508d66456b84dc6b22a1f781edb88491a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +654,658 @@\tTypeMeta      `json:\",inline\"`\n\tObjectMeta    `json:\"metadata,omitempty\"`\n\tContainerInfo []ContainerStatus `json:\"containerInfo\"`\n}\n"
  },
  {
    "id" : "89ce99a0-a469-4398-809b-78b81fe9a836",
    "prId" : 5814,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6ad043a-e35c-4df6-814d-47763ba525a2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment on what this does.  Comment that anyone who sets this really should make sure to declare their ports.\n",
        "createdAt" : "2015-03-24T06:32:47Z",
        "updatedAt" : "2015-03-24T21:40:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d481a956-87a2-47a0-a9a2-d547bc9371dc",
        "parentId" : "d6ad043a-e35c-4df6-814d-47763ba525a2",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Done.\n",
        "createdAt" : "2015-03-24T21:20:24Z",
        "updatedAt" : "2015-03-24T21:40:39Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0793c155e64543e4ce9866f7d2ba56f15b747a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +591,595 @@\t// Uses the host's network namespace. If this option is set, the ports that will be\n\t// used must be specified.\n\t// Optional: Default to false.\n\tHostNetwork bool `json:\"hostNetwork,omitempty\"`\n}"
  },
  {
    "id" : "5a7c42ea-8c83-444d-8968-277aa41e5110",
    "prId" : 5800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73647192-c379-4d9c-bd55-099391345343",
        "parentId" : null,
        "authorId" : null,
        "body" : "Suggest adding a comment to the effect that the Released volume needs to be recycled before becoming Available again.\n",
        "createdAt" : "2015-03-23T20:33:24Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "03381fa9-ffd5-4384-8c28-3d90de9935b0",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : null,
        "body" : "As an aside, and probably out of scope for 1.0, do we accommodate the use case where one user writes to a disk and then hands it over to another user to read?  Seems useful, so ideally don't preclude it as a future possibility.\n",
        "createdAt" : "2015-03-23T20:35:37Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cceb10fe-33c1-426d-97e2-4342cd4be2bb",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Your additional comment suggestion was added to #5800.\n\nRegarding your second comment, not at the same time (can't be ReadWriteOnce and ReadOnlyMany at the same time), but the claim to your volume lives longer than your pod.  You can use ReadWriteOnce to write data to the volume, delete your pod, then mount the volume ReadOnlyMany (assuming a GCE disk) in a ReplController across many pods.\n",
        "createdAt" : "2015-03-23T20:38:25Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "9b92f573-9815-484f-a047-998bbf1f48c2",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : null,
        "body" : "OK, gotcha.  So the state machine looks something like:\n\n(initial) -> Available\nAvailable -> (claim)-> Bound\nBound -> (unclaim) -> Released\nReleased -> (claim) -> Bound\nReleased -> (recycle) -> Available\n\nIn particular the following transition is possible:\n\nReleased ->(claim)-> Bound\n",
        "createdAt" : "2015-03-23T21:06:18Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8176d550-0ef0-4a72-9473-c5bc541360e8",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I've been saying \"release a claim\" to mean the user deletes their PersistentVolumeClaim object, which unbinds from PV, and allows recycling of the volume.\n\nDeleting your pod doesn't release a volume.  The volume is unmounted from the host.\n\nYou still hold your claim check and can use that volume again in another pod.\n",
        "createdAt" : "2015-03-23T21:14:33Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "6bf6f1fd-75ec-4f3b-b457-e80e68f3adb8",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think the transition of:\n    Bound -> (unclaim) -> Released\nis a fatal transition.  Once released, the only next-change is to Available (via recycling)\n\nIf you want to \"hand off\" data you hand off the claim.\n",
        "createdAt" : "2015-03-24T16:21:01Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "068e71f3-03f7-4aec-aabe-b04a7946ece8",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : null,
        "body" : "Mark, how is the distinction between an unmounted and a released volume represented in the system?  In particular, what is the series of API calls necessary in order to locate an unmounted volume (e.g. if a pod dies or is terminated), and mount it to a new (or existing? pod)?  I assume that replication controllers will do this all automatically?\n",
        "createdAt" : "2015-03-24T16:33:51Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "74daed8e-c00f-4a4f-ba05-55274f541a27",
        "parentId" : "73647192-c379-4d9c-bd55-099391345343",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "@quinton-hoole \n1.  With the introduce of a /status subresource (suggested back in #5105), Kubelet could update the volume's status to reflect it's newly mounted state.   Until that is added, there's no way for the user to know if their claim's backing volume is successfully mounted anywhere (perhaps via a cloud API?  Wouldn't help some of the other volumes like NFS).\n2.  Nothing magical needs to happen for the volume to follow the pod.  Kubelet unmounts orphaned volumes, which would include detaching cloud volumes.   Kubelet on another host mounts the volume if the pod is recreated on that host after a crash of the original host. \n",
        "createdAt" : "2015-03-24T16:58:46Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f762b303adc7f348102f9df641992ae6de2955a9",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +296,300 @@\t// used for PersistentVolumes that are bound\n\tVolumeBound PersistentVolumePhase = \"Bound\"\n\t// used for PersistentVolumes where the bound PersistentVolumeClaim was deleted\n\t// released volumes must be recycled before becoming available again\n\tVolumeReleased PersistentVolumePhase = \"Released\""
  },
  {
    "id" : "8ae16130-6db1-4d5a-b3c0-220e6744e7df",
    "prId" : 5800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "parentId" : null,
        "authorId" : null,
        "body" : "I don't understand why we need both this and VolumeSource.  Can't we just re-use PersistentVolumeSource?\nAlong the same lines, I think that the distinction between a user and an administrator here is somewhat artificial and temporary, and should not be unnecessarily exposed via the API.\n\nIn future I imagine that both users and administrators will be able to create PD's, and should both use the same API.\n",
        "createdAt" : "2015-03-23T20:42:03Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0f6a00f8-8127-4ce5-b493-8f6a221f909d",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "@thockin @bgrant0607 suggested this distinction.  Not all volumes are persistent, only a subset.  Volumes may  overlap between the two.  Kubelet has to be made to work with both, which is what Tim was prepping for in #5642.\n\nI tend to agree with you because the implementation is simpler, but then someone just has to ask why an EmptyDir can be a persistent volume (just as I'm using HostPath as a persistent volume for development).\n",
        "createdAt" : "2015-03-23T20:47:26Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "8350ce84-8ead-4c6c-a98f-cadb3a808dc4",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Re: the EmptyDir question, with a little code, any volume can likely be persistent.  Otherwise, wouldn't the admin only provision volumes that make sense as persistent volumes?\n\nIn other words, a volume is a volume is a volume.  The PV framework around it gives a volume longevity outside a pod, regardless of type of volume.  Splitting them between VS and PVS involves more code and complexity that isn't strictly needed, but I'm not as knowledgeable on the architecture or Go-isms of the project.\n",
        "createdAt" : "2015-03-23T21:12:24Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "cf0cfe71-2850-46cb-bdca-03454d24a20a",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Some of the VolumeSource subtypes do not make sense as PersistentVolumeSources.  Maybe they will make sense eventually, but they don't now.  We had a decision to make.  We could either document this for each VolumeSource field and throw errors if used wrongly or we could split the concepts with a promise to merge them if it makes sense later.\n\nBrian and I both came to the latter choice independently, but neither of us is doing the implementation.  It's entirely possible that we're both wrong (again, because neither of us is doing the implementation).  If you feel that way, I'm open to discussing it, but I really want to get something committed here - done is better than perfect.\n\nWe can always revisit this with very little consequence, I think (the API will be compatible).\n\nSo I'll put it back on you.  I am sympathetic to the argument that the duplication to support two structs and two sets of plugins is cumbersome.  Is it worth spending time on right now?  That's not a leading question - I am not the one tasked with getting this work committed :)\n",
        "createdAt" : "2015-03-24T16:29:31Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "99f172f0-483f-44bf-811a-e9c6bd856422",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : null,
        "body" : "That makes sense.  I just thought I'd note the apparent duplication.  Happy go with whatever the most expedient solution is for now, as it doesn't seem to restrict us much in future.\n",
        "createdAt" : "2015-03-24T16:50:27Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "136b2837-16af-454f-aa49-653119021dea",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "This separation in the API allows us to keep some volumes from users (assuming the PV API is restricted to admins) and the implementation in #5398 was pretty easy in retrospect -- so long as it's TA'd (Thockin Approved)<sup>&trade;</sup>\n",
        "createdAt" : "2015-03-24T17:01:41Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "65637cc9-1abb-4072-8cf6-6dbe52ea936c",
        "parentId" : "6b3a59a5-022e-4b17-87a1-7c9069ea74c5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'll try to work through related PRs today.  I will not throw roadblocks up if I decide I was wrong - we can come back to it, later.\n",
        "createdAt" : "2015-03-24T18:12:10Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f762b303adc7f348102f9df641992ae6de2955a9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +198,202 @@// Similar to VolumeSource but meant for the administrator who creates PVs.\n// Exactly one of its members must be set.\ntype PersistentVolumeSource struct {\n\t// GCEPersistentDisk represents a GCE Disk resource that is attached to a\n\t// kubelet's host machine and then exposed to the pod."
  },
  {
    "id" : "1e4642f8-1217-4d83-9ca1-e83fc59001ac",
    "prId" : 5800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "parentId" : null,
        "authorId" : null,
        "body" : "As mentioned elsewhere, I'm not convinced that the concept \"owned by the cluster\" is necessary.  I think that PersistentVolumes are each simply created within a namespace, and \"claimed\", potentially from a different namespace. \n",
        "createdAt" : "2015-03-23T20:44:46Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "276370b4-6261-44fa-9322-6123d0429866",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I would not mind a discussion around this.  There is nothing that requires PV to have no namespace except that we've been thinking of them as analogs to nodes.\n\nIt would be entirely possible for an admin to provision a PV _in a specific namespace_.  Maybe you get the fancy 1TB volume for your data warehouse probject.  Then again, this was thought to be achievable using @derekwaynecarr's quota framework.\n",
        "createdAt" : "2015-03-23T20:50:34Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "5de97443-ce92-470a-ad6d-7a609c251d1e",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There's a general sense that you don't cross namespace boundaries, pretty much ever.  So attaching PVs to a namespace really limits their use (or we break that rule).\n\nThere's no concept of a type that exists sometimes in namespaces and sometimes not.  I don't think we want that, but I guess I am open to arguments.  I think it will make @derekwaynecarr cry.\n\nWe will eventually have ACLs such that your fancy 1TB volume (just large enough for acceptance testing :) can only be bound to claims by users in your warehouse project.\n\nIn short, I think the congruence of this and nodes is powerful and breaking that should be considered precedent setting.  I.e. if we do this, we should consider the same change for nodes.\n",
        "createdAt" : "2015-03-24T16:34:04Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "13613d9a-5ec8-4fb1-953c-98b8d54fc0d4",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : null,
        "body" : "OK, I understand.  Now is probably not the right time for this discussion, and I'm happy to defer it until after v1.0, but I think that there's a lot of value in accommodating users sharing things with each other. And I think that whether a user wants to share something with someone else is an authorization concern, and orthogonal to what namespace the thing is in (along the lines of a file system, where things under my home directory (\"namespace\"), can be made readable to other users).  I suspect that the system is not set up this way today, in which case we should defer this discussion.\n",
        "createdAt" : "2015-03-24T16:59:09Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "41a498ec-6a1b-4f3f-a1c4-3c83af1e9f68",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : null,
        "body" : "PS: I share your distaste for types that are sometimes in a namespace and sometimes not. In fact I would be a fan of everything always being in a namespace.  I believe that @lavalamp also belongs to this school of thought.  I will cry together with @derekwaynecarr if the namespace situation gets even more confusing than it already is :-)\n",
        "createdAt" : "2015-03-24T17:05:42Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ba8524b4-7b16-4215-8e53-da8c8e9bd67f",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : null,
        "body" : "PPS:  Regarding nodes and volumes being analogs of each other, I can't help thinking that they're fundamentally different in that nodes seem to be in the domain of the system infrastructure, whereas volumes seem to be in the domain of the user application.  But that may be a view created in my head by previous work building IAAS, where cloud providers provide and manage nodes, whereas users create, use and delete volumes.\n",
        "createdAt" : "2015-03-24T17:13:01Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9f168695-d87e-4e0a-854f-9134ed854a0f",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "@quinton-hoole Allow me to split this hair for you :)\n\nYou are correct that nodes are system infrastructure.  They represent resources in the infrastructure.  A PersistentVolume is the same thing.  It is a provisioned resource.\n\nA PersistentVolumeClaim is the user application domain you refer to.  Users request a slice of resources by creating a claim (as they request a slice of computing resource by creating a pod).  Users create, use, and delete claims.\n\nWe are introducing another volume plugin that allows the user to use their claim as their volume.\n",
        "createdAt" : "2015-03-24T17:21:46Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "244fc759-97c7-44df-bb41-b3f897c51c02",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : null,
        "body" : "Thanks for so clearly describing your mental model.  It illustrates very well where I think we differ.  Perhaps best discussed in person some time, but I'll dump my brain here in the mean time :-)\n\nIn your current design, as I understand it, a PersistentVolumeClaim lays claim to an already existing, mountable volume, which I agree is in the user application domain.  On the other extreme we have what I will call storage pools, for example the EBS service, the GCE PD service, or an on-premise farm of NetApp filers, all of which have API's for creating mountable volumes of specific sizes, performance characteristics etc. Those storage pools are in the infrastructure domain - they are built, capacity planned, maintained etc by cloud providers (or storage administrators in the case of the on-premise NetApp filer farm) and provide the large slicable resource pool to which you refer.  In between these two (volume claims and storage pools) we have the world where the actual volumes are created. I believe this to be logically in the application domain - users should be able to create and delete them on demand.  Right now I think that we have administrators doing that, but I see that as a temporary measure.  It would be worth getting consensus on the answer to this question - can users (in future) create volumes, or only lay claim to volumes that already exist? \n",
        "createdAt" : "2015-03-24T17:51:53Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b5cceb5e-5ee8-4512-8036-9f101e02514b",
        "parentId" : "a80b1e60-f260-4964-875e-3e131aacba5d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "In the fullness of time users will (with the blessing of clusteradmin) be able to make a claim and have a volume to back that claim be provisioned dynamically.\n\nIn the fullness of time users will (with the blessing of clusteradmin) be able to request a pod and have a node to back that pod be provisioned dynamically.\n\nFor a rough rule of thumb: if it costs the cluster admin money, user should not be able to do it unless explicitly allowed.  Consider on-prem.  Users are bound by the pool of hardware available - they might be able to auto-provision new hardware, but it involves the clusteradmin intern going to Fry's.\n",
        "createdAt" : "2015-03-24T18:17:30Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f762b303adc7f348102f9df641992ae6de2955a9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +212,216 @@\tObjectMeta `json:\"metadata,omitempty\"`\n\n\t//Spec defines a persistent volume owned by the cluster\n\tSpec PersistentVolumeSpec `json:\"spec,omitempty\"`\n"
  },
  {
    "id" : "f1f3e509-6376-42ac-9ad1-f9951e900f84",
    "prId" : 5800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08dc7864-1598-45ca-b116-bbd793b48a93",
        "parentId" : null,
        "authorId" : null,
        "body" : "What phase are claims in, between the time when the user requests unbinding, and when they're actually unbound?  e.g. pod termination has been requested, but not yet completed (e.g. due to a network partition).  This gets back to the storage \"fencing\" discussion that happened at the last contributor summit. \n",
        "createdAt" : "2015-03-23T21:12:19Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1d8591f5-af86-4593-b2db-7cca199a68d8",
        "parentId" : "08dc7864-1598-45ca-b116-bbd793b48a93",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I think claims are only Pending (not yet matched to a backend resource) or Bound.\n\nYou can have a bound claim and never use the volume in a pod.\n",
        "createdAt" : "2015-03-23T21:15:37Z",
        "updatedAt" : "2015-03-25T14:09:58Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f762b303adc7f348102f9df641992ae6de2955a9",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +308,312 @@\t// used for PersistentVolumeClaims that are bound\n\tClaimBound PersistentVolumeClaimPhase = \"Bound\"\n)\n\n// HostPathVolumeSource represents a host directory mapped into a pod."
  },
  {
    "id" : "f1c02e7f-c057-413c-bf64-8db23b5af225",
    "prId" : 5547,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a9e942e-1a3e-4ac8-9299-e8e1d6d07430",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "`maxpods` is not an acceptable resource name. Note that none of the other resources have \"max\" in their names. Whether a resource is a \"max\" or \"min\" depends on whether it is in the `limits` map or the `requests` map. If we were to have such a resource, it should simply be named `pods`.\n",
        "createdAt" : "2015-05-18T20:15:26Z",
        "updatedAt" : "2015-05-18T20:15:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "27d660d0acadef7ea6fb8c878fd8f6b70cc7223e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1240,1244 @@\tResourceStorage ResourceName = \"storage\"\n\t// Number of Pods that may be running on this Node.\n\tResourceMaxPods ResourceName = \"maxpods\"\n)\n"
  },
  {
    "id" : "95e4d166-1f37-458f-93dd-4b5c0ca6f86e",
    "prId" : 5506,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc32a256-05da-4554-9cf9-ea7ab904be7c",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is it required or is there any auto-detect mode?\n",
        "createdAt" : "2015-03-16T17:58:17Z",
        "updatedAt" : "2015-04-06T20:20:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f05d9815-42b2-4b00-aac0-95079888acc3",
        "parentId" : "cc32a256-05da-4554-9cf9-ea7ab904be7c",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "auto-detect works for some (e.g. extX) but not all.  xfs, etc needs explicit specification. \n",
        "createdAt" : "2015-03-16T18:19:52Z",
        "updatedAt" : "2015-04-06T20:20:31Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a82af31de839f70b3e50e71cb52a587e0091b82",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +381,385 @@\t// Required: iSCSI target lun number\n\tLun int `json:\"lun,omitempty\"`\n\t// Required: Filesystem type to mount.\n\t// Must be a filesystem type supported by the host operating system.\n\t// Ex. \"ext4\", \"xfs\", \"ntfs\""
  },
  {
    "id" : "f9a89bac-46f6-4e37-b313-26ef348deed4",
    "prId" : 5166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "768dd60e-33c2-4d24-ad7d-e9dc457de863",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "+1 to calling this Memory instead of tmpfs, since tmpfs is not cross-platform.\n",
        "createdAt" : "2015-03-13T23:14:52Z",
        "updatedAt" : "2015-03-13T23:14:52Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "caca5e73586c7863b6bbd82ca68e7f6ff81c5ddd",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +204,208 @@const (\n\tStorageTypeDefault StorageType = \"\"       // use whatever the default is for the node\n\tStorageTypeMemory  StorageType = \"Memory\" // use memory (tmpfs)\n)\n"
  },
  {
    "id" : "e5bf1088-c74e-4790-ab5b-43dc028253b4",
    "prId" : 5138,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca30ecca-eff9-491e-a03d-1a3248731940",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "@bgrant0607 Are you OK with AWS support here to parallel GCE?  It seems appropriate.  We can EOL them both when persistent volumes are up to snuff.\n",
        "createdAt" : "2015-04-09T04:14:12Z",
        "updatedAt" : "2015-04-10T20:25:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "7626914344504f95092801b2f1fce4a4eb796b49",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +192,196 @@\t// AWSElasticBlockStore represents an AWS EBS disk that is attached to a\n\t// kubelet's host machine and then exposed to the pod.\n\tAWSElasticBlockStore *AWSElasticBlockStoreVolumeSource `json:\"awsElasticBlockStore\"`\n\t// GitRepo represents a git repository at a particular revision.\n\tGitRepo *GitRepoVolumeSource `json:\"gitRepo\"`"
  },
  {
    "id" : "b9666e53-4a98-48de-8312-dc33eb80cb4a",
    "prId" : 5116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4917a62-6f63-4711-8875-804d1d5db6ae",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "I'd prefer not define the method.\n",
        "createdAt" : "2015-03-06T16:39:43Z",
        "updatedAt" : "2015-03-06T16:39:43Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf031fb0822d996e66301708c8a364a945e22b55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1407,1411 @@)\n\n// Appends the NodeAddresses to the passed-by-pointer slice, only if they do not already exist\nfunc AddToNodeAddresses(addresses *[]NodeAddress, addAddresses ...NodeAddress) {\n\tfor _, add := range addAddresses {"
  },
  {
    "id" : "dc84d73a-817f-4c87-8c84-b17162887319",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d745d77-608d-47bf-9a81-82f59dbede5b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This is a pointer so we can distinguish Go defaulting from the user specifying 0?\n",
        "createdAt" : "2015-03-19T00:38:01Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7cc4be20-3a54-4aeb-b536-e077e4b66884",
        "parentId" : "1d745d77-608d-47bf-9a81-82f59dbede5b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Correct.  All the other constructs were more awkward (struct wrapped type, etc).\n\n> On Mar 18, 2015, at 8:38 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -983,6 +994,16 @@ type Binding struct {\n> >     Target ObjectReference `json:\"target\"`\n> >  }\n> > \n> > +// DeleteOptions may be provided when deleting an API object\n> > +type DeleteOptions struct {\n> > -   TypeMeta `json:\",inline\"`\n> >   +\n> > -   // Optional duration in seconds before the object should be deleted. Value must be non-negative integer.\n> > -   // The value zero indicates delete immediately. If this value is nil, the default grace period for the\n> > -   // specified type will be used.\n> > -   GracePeriodSeconds *int64 `json:\"gracePeriodSeconds\"`\n> >   This is a pointer so we can distinguish Go defaulting from the user specifying 0?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-19T00:39:47Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "53c768a5-d278-431d-9111-4c41ab9ab465",
        "parentId" : "1d745d77-608d-47bf-9a81-82f59dbede5b",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Brainstorming other options:\n- -1 to imply either immediate deletion or default grace period\n- use a string\n- use time.Duration\n\nI maybe could get on board with time.Duration (here and elsewhere). It would be similar in spirit to the resource quantity type.\n",
        "createdAt" : "2015-03-19T00:43:11Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ae3758c0-8e75-4b3b-b828-347a2de59591",
        "parentId" : "1d745d77-608d-47bf-9a81-82f59dbede5b",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Current approach is acceptable, too.\n",
        "createdAt" : "2015-03-19T00:52:26Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "42afa3e2-1076-463a-aaa0-37e52ac6d9b7",
        "parentId" : "1d745d77-608d-47bf-9a81-82f59dbede5b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's versioned so before we introduce the first consumer we can rev it.\n",
        "createdAt" : "2015-03-19T14:44:53Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1014,1018 @@\t// The value zero indicates delete immediately. If this value is nil, the default grace period for the\n\t// specified type will be used.\n\tGracePeriodSeconds *int64 `json:\"gracePeriodSeconds\"`\n}\n"
  },
  {
    "id" : "4d949d59-72aa-4e73-a7da-77b506c17ada",
    "prId" : 4653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c330c2ab-8be9-49e5-b95e-5965c1ca73cf",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@bgrant0607 wanted this renamed to `SecretKind` and for it to come before the `Data` field.\n",
        "createdAt" : "2015-02-23T15:22:06Z",
        "updatedAt" : "2015-02-23T20:47:34Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "081ed053-22a8-4e75-a48f-53990a612971",
        "parentId" : "c330c2ab-8be9-49e5-b95e-5965c1ca73cf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will do in next push\n",
        "createdAt" : "2015-02-23T18:02:24Z",
        "updatedAt" : "2015-02-23T20:47:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e7248f0f4cf52f3e996db02645a9dc8350d37d0",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1341,1345 @@const MaxSecretSize = 1 * 1024 * 1024\n\ntype SecretType string\n\nconst ("
  },
  {
    "id" : "5afe248b-ab12-4080-ad9e-a237e96f68cf",
    "prId" : 4601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "619885da-2c45-47c6-8170-de55cfe921ac",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment does not parse: \"ReadOnly here will force the ReadOnly will make the NFS export to be mounted as read-only permissions\"\n",
        "createdAt" : "2015-03-17T23:28:30Z",
        "updatedAt" : "2015-03-19T17:38:12Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a45e37d17de3a6de690dba98675c16ccb93a892",
    "line" : null,
    "diffHunk" : "@@ -1,1 +267,271 @@\tPath string `json:\"path\"`\n\n\t// Optional: Defaults to false (read/write). ReadOnly here will force\n\t// the NFS export to be mounted with read-only permissions\n\tReadOnly bool `json:\"readOnly,omitempty\"`"
  },
  {
    "id" : "72403673-3795-4b8c-bb7d-ffda742acd1b",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c554df16-8bf9-47b6-95a5-eac1e30db51f",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "nit: `Endpoints.Endpoints` seems redundant (and also kind of confusing)\n",
        "createdAt" : "2015-02-19T06:55:04Z",
        "updatedAt" : "2015-02-19T06:55:04Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "792710d4-ec9a-4537-b29c-7bf9bc527133",
        "parentId" : "c554df16-8bf9-47b6-95a5-eac1e30db51f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It gets worse as this PR series evolves - EndpointsList.Items[x].Endpoints[y].Ports[z].IP\n\nI didn't choose the name, I just rolled with what was there.  I'm happy to change it if you have a solid suggestion :)\n",
        "createdAt" : "2015-02-19T07:33:53Z",
        "updatedAt" : "2015-02-19T07:33:53Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ecbad3d6-554f-40ea-8814-1f6643e7a0d4",
        "parentId" : "c554df16-8bf9-47b6-95a5-eac1e30db51f",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "HostPorts?\n",
        "createdAt" : "2015-02-19T18:39:21Z",
        "updatedAt" : "2015-02-19T18:39:21Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7fd69ac8-deba-4232-88e2-36fa97951cb5",
        "parentId" : "c554df16-8bf9-47b6-95a5-eac1e30db51f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The real fix (IMO) would be to rename the struct to ServiceEndpoints or something, but ain't nobody got time to rename REST objects :)\n\nHostPorts is wrong because it implies something like Container[x].Ports[y].HostPort, which is something else.  PodPorts is wrong because endpoints are supposed to be only loosely coupled to kubernetes, and may not even be pods.  Targets?  Destinations?  I didn't find any of these to be significantly better than Endpoints, so I left it as it was.\n",
        "createdAt" : "2015-02-19T19:11:54Z",
        "updatedAt" : "2015-02-19T19:11:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +751,755 @@\t// \"UDP\".  Defaults to \"TCP\".\n\tProtocol  Protocol   `json:\"protocol,omitempty\"`\n\tEndpoints []Endpoint `json:\"endpoints,omitempty\"`\n}\n"
  },
  {
    "id" : "f495ef97-fe5d-46df-9a64-24816e902176",
    "prId" : 4580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98ceb985-a0b1-4d7a-bc7b-0b8f1e179f53",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Protocol needs to go into the Endpoint struct. Example: DNS service listening on both UDP 53 and TCP 53.\n",
        "createdAt" : "2015-02-19T18:44:47Z",
        "updatedAt" : "2015-02-19T18:44:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "217ea1e2-a721-44bd-838c-5e17a88afefc",
        "parentId" : "98ceb985-a0b1-4d7a-bc7b-0b8f1e179f53",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "yes, it will migrate, but I wanted to make clean commits that each are plausibly correct on their own.\n",
        "createdAt" : "2015-02-19T19:13:20Z",
        "updatedAt" : "2015-02-19T19:13:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae0062d00109b1ef13f31c73770b99c8076c0563",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +750,754 @@\t// Optional: The IP protocol for these endpoints. Supports \"TCP\" and\n\t// \"UDP\".  Defaults to \"TCP\".\n\tProtocol  Protocol   `json:\"protocol,omitempty\"`\n\tEndpoints []Endpoint `json:\"endpoints,omitempty\"`\n}"
  },
  {
    "id" : "64dc3fe4-047b-4210-923c-411a37e466d6",
    "prId" : 4560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "039081dc-3143-400a-9817-46be7d4cb748",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is this different from #4370?\n\nDoes it imply separate Endpoints lists for each port range?\n",
        "createdAt" : "2015-02-19T18:36:09Z",
        "updatedAt" : "2015-02-19T18:36:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3cd8c38c-262c-43e8-9767-7f9ca4ff2a54",
        "parentId" : "039081dc-3143-400a-9817-46be7d4cb748",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Protocol needs to be pushed into the Endpoint struct that you created in #4580. I'm not sure this PR makes sense on its own.\n",
        "createdAt" : "2015-02-19T18:43:37Z",
        "updatedAt" : "2015-02-19T18:43:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f22c24ad-ef30-4085-aab3-cf9c105796ef",
        "parentId" : "039081dc-3143-400a-9817-46be7d4cb748",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "#4370 is the destination.  I'm trying to break the implementation into discrete steps.  I'm OK with just doing commits in one massive PR, if people prefer.  I just hate reviewing those...\n",
        "createdAt" : "2015-02-19T19:07:51Z",
        "updatedAt" : "2015-02-19T19:07:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "34eaa0dbd69ba6a38dfda53675ee35f5651131b8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +750,754 @@\t// Optional: The IP protocol for these endpoints. Supports \"TCP\" and\n\t// \"UDP\".  Defaults to \"TCP\".\n\tProtocol  Protocol `json:\"protocol,omitempty\"`\n\tEndpoints []string `json:\"endpoints,omitempty\"`\n}"
  },
  {
    "id" : "3811d80c-976a-4f1f-a55c-60a11ff65873",
    "prId" : 4515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b25865-680f-4244-b971-df749d2ca186",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Did we consider SecretSource holding a slice of ObjectReferences so you could pack more than one secret into a single mount?\n",
        "createdAt" : "2015-02-20T06:31:58Z",
        "updatedAt" : "2015-02-20T06:31:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a42ff94c8ff433b982bb5fd37ff1a0501a0a54ca",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +235,239 @@// The contents of the target Secret's Data field will be presented in a volume\n// as files using the keys in the Data field as the file names.\ntype SecretSource struct {\n\t// Reference to a Secret\n\tTarget ObjectReference `json:\"target\"`"
  },
  {
    "id" : "a70d8de5-5d20-4200-adf5-22a3575a4578",
    "prId" : 4514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This needs a bit more comments to describe the string format?\n",
        "createdAt" : "2015-02-18T17:36:24Z",
        "updatedAt" : "2015-02-18T17:36:24Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b8bd95dd-7269-469b-86d9-0738514802e5",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I see a subsequent comment here about DNS_SUBDOMAIN.  Is that flexible enough for producing arbitrary secrets' filenames?\n",
        "createdAt" : "2015-02-20T05:26:41Z",
        "updatedAt" : "2015-02-20T05:26:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a18c209c-0033-428b-b423-5b311af5562f",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If the value of the map must be base64 encoded, why is this []byte rather than string?  Alternately, why the base64 rule?\n",
        "createdAt" : "2015-02-20T05:27:26Z",
        "updatedAt" : "2015-02-20T05:27:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cd871f6b-886f-413e-a275-d040d344314f",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin DNS_SUBDOMAIN isn't flexible enough.  I expect to make a new format for filenames and/or adapt names in `SecretSource`\n",
        "createdAt" : "2015-02-20T16:02:25Z",
        "updatedAt" : "2015-02-20T16:02:25Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "d0b98d52-6e86-435e-9cdc-90974f897f76",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Sorry, commenting late.\n\nFirst of all: All fields in v1beta1 and v1beta2 need description tags. This will also soon be true for v1beta3. The Travis check was broken, but was fixed today. Please ensure future fields have descriptions.\n\nAs discussed in the recent PR to update api-conventions.md, it is acceptable for an object to not distinguish Spec and Status if we're confident it will only support one or the other, as in this case.\n\nAs discussed in #1627 and #1553, we will want a very similar object for dynamic configuration distribution. But, similar to the distinction between labels and annotations, I agree that it's useful to separate the two use cases.\n",
        "createdAt" : "2015-02-21T06:20:24Z",
        "updatedAt" : "2015-02-21T06:20:24Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "17607418-aebe-47af-ad43-bc60b808b3a0",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "How about the second question?\n\nIf the value of the map must be base64 encoded, why is this []byte rather than string?  Why the base64 rule at all ?\n",
        "createdAt" : "2015-02-21T06:26:10Z",
        "updatedAt" : "2015-02-21T06:26:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bc873876-1ef9-4d33-8e1d-b1fc36a4d97e",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "http://golang.org/pkg/encoding/json/\n\n```\nArray and slice values encode as JSON arrays, except that `[]byte` encodes as a base64-encoded string, and a nil slice encodes as the null JSON object.\n```\n",
        "createdAt" : "2015-02-21T06:32:29Z",
        "updatedAt" : "2015-02-21T06:32:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "caca2445-aea3-48d2-b6b4-dbf9d8dbdf6c",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Ahh, I see.  The comment led me astray.  I though people you were taking strings and base64ing them and then storing that in []byte.  But you're storing arbitrary secret data in []byte, and JSON serializes it to base64.  I'm going to update the comments in my PR, see if it is any better when I am done. :)\n",
        "createdAt" : "2015-02-23T18:50:59Z",
        "updatedAt" : "2015-02-23T18:50:59Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f0efed94-fff2-40b5-9f76-ff1ee41a909e",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also, @bgrant0607 This uses a map - more fodder for maps being the OBVIOUS api for things like environment variables.\n",
        "createdAt" : "2015-02-23T18:54:15Z",
        "updatedAt" : "2015-02-23T18:54:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1bc83f87-f9d6-447b-8425-81a4dd274959",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin @bgrant0607, I was thinking about the `Data` field this weekend -\nI think there's a case to be made for using a list of a type like:\n\n``` go\ntype SecretCell struct {\n    Name  string\n    Value string\n    Binary bool\n```\n\nI don't think you should have to base64 encode everything - it makes for\nkind of a crummy experience IMO, especially when the serialized form is a\nstring anyway.  The binary bit would indicate whether the string is just a\nnormal string or base64 encoded binary data.\n\nOn Mon, Feb 23, 2015 at 1:54 PM, Tim Hockin notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514#discussion_r25190058\n> :\n> \n> > @@ -1309,3 +1317,27 @@ type ResourceQuotaList struct {\n> >     // Items is a list of ResourceQuota objects\n> >     Items []ResourceQuota `json:\"items\"`\n> >  }\n> > +\n> > +// Secret holds secret data of a certain type\n> > +type Secret struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   Data map[string][]byte `json:\"data,omitempty\"`\n> \n> Also, @bgrant0607 https://github.com/bgrant0607 This uses a map - more\n> fodder for maps being the OBVIOUS api for things like environment variables.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514/files#r25190058\n> .\n",
        "createdAt" : "2015-02-23T19:15:07Z",
        "updatedAt" : "2015-02-23T19:15:07Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "1d15cad3-6da8-4bfa-a2b6-54a166ec9392",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm not sure that the \"always base64\" crumminess is worse than the \"sometimes base64\" crumminess :)\n\nAnyway, I'd like to get #4653 in before any significant retool, please.  I just want it off the balance sheet, and it fixes many of the concerns here.\n",
        "createdAt" : "2015-02-23T19:25:42Z",
        "updatedAt" : "2015-02-23T19:25:42Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3e002208-0172-436b-8670-9b4f96f5008f",
        "parentId" : "93874ef9-d3b5-4fe8-b57d-52fb9e086569",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin go for it, I was not proposing that you address that in #4653\n\nOn Mon, Feb 23, 2015 at 2:25 PM, Tim Hockin notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514#discussion_r25192983\n> :\n> \n> > @@ -1309,3 +1317,27 @@ type ResourceQuotaList struct {\n> >     // Items is a list of ResourceQuota objects\n> >     Items []ResourceQuota `json:\"items\"`\n> >  }\n> > +\n> > +// Secret holds secret data of a certain type\n> > +type Secret struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   Data map[string][]byte `json:\"data,omitempty\"`\n> \n> I'm not sure that the \"always base64\" crumminess is worse than the\n> \"sometimes base64\" crumminess :)\n> \n> Anyway, I'd like to get #4653\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4653 in before\n> any significant retool, please. I just want it off the balance sheet, and\n> it fixes many of the concerns here.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514/files#r25192983\n> .\n",
        "createdAt" : "2015-02-23T19:30:07Z",
        "updatedAt" : "2015-02-23T19:30:07Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb001ada21710c87fc0af1cd18c8798303ea000a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1324,1328 @@\tObjectMeta `json:\"metadata,omitempty\"`\n\n\tData map[string][]byte `json:\"data,omitempty\"`\n\tType SecretType        `json:\"type,omitempty\"`\n}"
  },
  {
    "id" : "6a0d1165-4b60-4f3f-89b0-6a2954a03d49",
    "prId" : 4514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6913e7-730c-4e77-b969-adffcaf005c6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should follow Go-style caps - Opaque\n",
        "createdAt" : "2015-02-20T05:28:54Z",
        "updatedAt" : "2015-02-20T05:28:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2bba62da-17d3-4daf-ac4d-c101ffc6b294",
        "parentId" : "ed6913e7-730c-4e77-b969-adffcaf005c6",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "ack\n",
        "createdAt" : "2015-02-20T16:03:09Z",
        "updatedAt" : "2015-02-20T16:03:09Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "773b6a42-b130-4014-9f6b-a7ab0f7fe835",
        "parentId" : "ed6913e7-730c-4e77-b969-adffcaf005c6",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "+1\n",
        "createdAt" : "2015-02-21T06:33:10Z",
        "updatedAt" : "2015-02-21T06:33:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "36338220-3200-4cdd-83f2-806ec992cdf7",
        "parentId" : "ed6913e7-730c-4e77-b969-adffcaf005c6",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@bgrant0607 @thockin will collect these i to a PR soon (might not be until\nMonday).\nOn Sat, Feb 21, 2015 at 1:33 AM Brian Grant notifications@github.com\nwrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514#discussion_r25120223\n> :\n> \n> > @@ -1309,3 +1317,27 @@ type ResourceQuotaList struct {\n> >     // Items is a list of ResourceQuota objects\n> >     Items []ResourceQuota `json:\"items\"`\n> >  }\n> > +\n> > +// Secret holds secret data of a certain type\n> > +type Secret struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   Data map[string][]byte `json:\"data,omitempty\"`\n> > -   Type SecretType        `json:\"type,omitempty\"`\n> >   +}\n> >   +\n> >   +type SecretType string\n> >   +\n> >   +const (\n> > -   SecretTypeOpaque SecretType = \"opaque\" // Default; arbitrary user-defined data\n> \n> +1\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4514/files#r25120223\n> .\n",
        "createdAt" : "2015-02-21T17:28:22Z",
        "updatedAt" : "2015-02-21T17:28:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "20ec8159-8cc6-4f09-921d-b018900c71df",
        "parentId" : "ed6913e7-730c-4e77-b969-adffcaf005c6",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@pmorie /cc me on the PR if it modifies the API that is checked in.  I am working on something that uses this already so I would need to update.\n\nSent from my iPhone\n\n> On Feb 21, 2015, at 12:28 PM, Paul Morie notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -1309,3 +1317,27 @@ type ResourceQuotaList struct {\n> >     // Items is a list of ResourceQuota objects\n> >     Items []ResourceQuota `json:\"items\"`\n> >  }\n> > +\n> > +// Secret holds secret data of a certain type\n> > +type Secret struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -   Data map[string][]byte `json:\"data,omitempty\"`\n> > -   Type SecretType        `json:\"type,omitempty\"`\n> >   +}\n> >   +\n> >   +type SecretType string\n> >   +\n> >   +const (\n> > -   SecretTypeOpaque SecretType = \"opaque\" // Default; arbitrary user-defined data\n> >   @bgrant0607 @thockin will collect these i to a PR soon (might not be until Monday).\n> >   …\n> >   —\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-21T18:48:14Z",
        "updatedAt" : "2015-02-21T18:48:14Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb001ada21710c87fc0af1cd18c8798303ea000a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1331,1335 @@\nconst (\n\tSecretTypeOpaque SecretType = \"opaque\" // Default; arbitrary user-defined data\n)\n"
  },
  {
    "id" : "9b05a4dd-ae7d-4ee9-88c5-19da282b16b5",
    "prId" : 4434,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Everywhere else in the API, we use \"IP\" rather than \"Address\". We should stick to that convention.\n",
        "createdAt" : "2015-02-14T06:09:13Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0fdb04d0-96f4-4e49-834a-7361d310b74d",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Is this convention strictly enforced?  Anything breaks if we change to address?\n\nThe reason to change ip to address is apparent, we want to support hostname too.  We can change back to IPs and use a separate new list, but that seems a little redundant.  See below comment.\n",
        "createdAt" : "2015-02-17T22:16:42Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "e94e2e77-a728-45f9-80c9-c1b18edf0f47",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It's not enforced, but I'd like as much consistency as possible in v1beta3.\n\nAt the moment, is it possible for this list to contain hostnames? Besides, I don't think \"Address\" is appropriate for a hostname.\n",
        "createdAt" : "2015-02-19T17:45:33Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "02f4846a-93a1-4cfa-86e1-519a3d768346",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Normally I would use \"Host\", but that doesn't work here. Maybe \"Address\" is the lesser evil.\n\n@thockin Any preference re. the term we use to refer to something that may be either an IP address or hostname?\n",
        "createdAt" : "2015-02-19T18:16:41Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f730c1d3-94d8-4cc9-be6a-6963c39bdd14",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "yeah, the list can contain hostnames, and that's the intent.\n",
        "createdAt" : "2015-02-19T21:27:33Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "39a26d50-cf51-4277-bc8c-d5e07a239d8b",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How about AlternateEndpoints -- so, including port?\n\nWe've discussed allowing hosts in Endpoints, in #4370.\n\nI want Nodes to actually populate an Endpoints object, as discussed in #4440.\n\nEndpoints will need to be able to carry various information (e.g., internal vs. external), as discussed in #4482 and elsewhere.\n",
        "createdAt" : "2015-02-20T02:56:19Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6572dde5-45a9-42a6-aac1-37d3cb79a382",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Why Alternative in the Name?  Do we have a primary Endpoint or Address?\n\nEndpoints is more or less a concept in our service world now, do we want to overload it here?  It's a little confusing, plus I don't know how useful it would be to have port. Whoever consumes the list should know the port, like api-server proxy.\n\nI think what we need here is a list of equivalent address (external ip, internal ip, hostname).  If the direction is to produce Endpoints in Node, then I'll need to take a deep look at how it might work.\n",
        "createdAt" : "2015-02-24T16:21:35Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "a47fea2b-d22e-4239-adc5-45cc32546f30",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok, `Addresses` is fine, at least for now. I don't have a better alternative.\n",
        "createdAt" : "2015-03-03T21:45:19Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "42c249ec-adea-4616-b1ab-1d75bc16cb39",
        "parentId" : "6a165b5e-5e4e-43bb-903c-adebb8f0d9df",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "BTW, I do want to replace ResourceLocation with node and pod endpoints, but the endpoints wouldn't appear here in that form, regardless.\n",
        "createdAt" : "2015-03-03T21:46:25Z",
        "updatedAt" : "2015-03-04T21:47:40Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b0af8df63215c82224a0ab2b5942ed9706295c9",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +795,799 @@\tConditions []NodeCondition `json:\"conditions,omitempty\"`\n\t// Queried from cloud provider, if available.\n\tAddresses []NodeAddress `json:\"addresses,omitempty\"`\n}\n"
  },
  {
    "id" : "077c776d-a64e-481c-94aa-f448a4ef5489",
    "prId" : 4206,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e96801d-88b1-48a4-be27-0445b85e8d91",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can you talk a bit about semantics?  Is this in perpetuity?  Is there a time horizon beyond which you store a new first event?  How exact a match does an event have to be to be considered a duplicate?  I assume that timestamp and count are ignored when coming from a user?\n",
        "createdAt" : "2015-02-06T04:11:04Z",
        "updatedAt" : "2015-02-06T05:52:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1ee18d40-1d46-4c92-8c45-7ce39addb3e1",
        "parentId" : "4e96801d-88b1-48a4-be27-0445b85e8d91",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "See the detailed design proposal in #4073.\n\nShort answer is compression will be best effort.\n\nThe compression is intended to happen on each kubelet instance. Each kubelet will maintain a hash of each unique event it sees (minus the transient info like timestamps/count) and if it sees the same event again it will update the previous instance in etcd instead of creating a new one.\n\nThat means that compression will not occur across kubelet restarts.\n\nAlso, as noted in the proposal, if, in the future, we decide to age out events from the kubelet events hash table, then events will only be compressed until they age out of the hash table, at which point any new instance of the event will create a new entry in etcd.\n",
        "createdAt" : "2015-02-06T05:46:41Z",
        "updatedAt" : "2015-02-06T05:52:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b0e3d815-5766-4278-90f0-f926333def1f",
        "parentId" : "4e96801d-88b1-48a4-be27-0445b85e8d91",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should convert this doc into something we can actually check in to the codebase under docs/design - doesn't have to be long, but should explain and be actually current.\n",
        "createdAt" : "2015-02-06T17:15:03Z",
        "updatedAt" : "2015-02-06T17:15:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "64414ae4-2721-4f76-b4a8-4ae34a336adb",
        "parentId" : "4e96801d-88b1-48a4-be27-0445b85e8d91",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "and in fact, if you write the compression code as a simple lib, it could be used in other components for the same effect.\n",
        "createdAt" : "2015-02-06T17:16:03Z",
        "updatedAt" : "2015-02-06T17:16:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "79cbcf918e584bf10d508629bd63fa55ef1c189d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1086,1090 @@\tLastTimestamp util.Time `json:\"lastTimestamp,omitempty\"`\n\n\t// The number of times this event has occurred.\n\tCount int `json:\"count,omitempty\"`\n}"
  },
  {
    "id" : "61aef82d-c707-4511-920a-257ecd5a46c0",
    "prId" : 4048,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95f4c4c7-899c-4278-b67a-3ff3655c247c",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It's not clear to me why this is an array?\n",
        "createdAt" : "2015-02-06T17:00:42Z",
        "updatedAt" : "2015-02-10T16:30:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "75251ff9-0cd5-42f1-bf75-666f8deccc7b",
        "parentId" : "95f4c4c7-899c-4278-b67a-3ff3655c247c",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "As per @bgrant0607's suggestion, this is intended to be like [NodCondition](https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/v1beta3/types.go#L768-L812) as he expects to add more conditions in the future. I stopped short of creating the PodCondition struct but I could in order to fully mirror NodeCondition api. Until more PodConditions are added, Ready bool would be a functional substitute for Conditions. So I guess it comes down to whether we want to add PodCondition to the api now or hold off until later.\n",
        "createdAt" : "2015-02-06T17:39:40Z",
        "updatedAt" : "2015-02-10T16:30:18Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d79c1bd3-4732-49ae-897f-5e96414b3fed",
        "parentId" : "95f4c4c7-899c-4278-b67a-3ff3655c247c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "OK\n",
        "createdAt" : "2015-02-06T23:38:16Z",
        "updatedAt" : "2015-02-10T16:30:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7d6a2f15-1d50-4d35-b89a-a0dc3bd4a4c9",
        "parentId" : "95f4c4c7-899c-4278-b67a-3ff3655c247c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I would like to add PodCondition now. I'm ok we initially omit some fields, such as LastTransitionTime, Reason, and Message.\n",
        "createdAt" : "2015-02-07T01:14:26Z",
        "updatedAt" : "2015-02-10T16:30:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c72c2a0d1e654d9b6c418a7f4fc5a5e827b0e18c",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +548,552 @@type PodStatus struct {\n\tPhase      PodPhase       `json:\"phase,omitempty\"`\n\tConditions []PodCondition `json:\"Condition,omitempty\"`\n\t// A human readable message indicating details about why the pod is in this state.\n\tMessage string `json:\"message,omitempty\"`"
  },
  {
    "id" : "72848cb5-ec39-4650-bc31-53dedf0091f8",
    "prId" : 4048,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1534aca5-8965-4412-86f7-d3f3dea93c92",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thanks for doing this refactoring.\n\nFYI, I'm going to try to merge #4241 first, since we're having a bunch of problems in that area right now.\n",
        "createdAt" : "2015-02-09T17:44:57Z",
        "updatedAt" : "2015-02-10T16:30:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c72c2a0d1e654d9b6c418a7f4fc5a5e827b0e18c",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +792,796 @@type NodeCondition struct {\n\tKind               NodeConditionKind `json:\"kind\"`\n\tStatus             ConditionStatus   `json:\"status\"`\n\tLastProbeTime      util.Time         `json:\"lastProbeTime,omitempty\"`\n\tLastTransitionTime util.Time         `json:\"lastTransitionTime,omitempty\"`"
  },
  {
    "id" : "667d553b-9660-4642-98d5-98116fdccd67",
    "prId" : 3841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54ce836b-254c-4a45-9db3-e7b40ae1e70b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit: We don't say \"Spec\" on any other types except the ones that correspond to a \"spec\" field.\n",
        "createdAt" : "2015-02-03T02:06:57Z",
        "updatedAt" : "2015-02-03T02:06:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5c35d062-9723-493e-a1dd-16ca90f38f65",
        "parentId" : "54ce836b-254c-4a45-9db3-e7b40ae1e70b",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Fair enough. I gave up on changing those. We could make this consistent.\n",
        "createdAt" : "2015-02-03T03:41:03Z",
        "updatedAt" : "2015-02-03T03:41:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e36f63f8b909618281e0301d7eff7280e4556d7",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +325,329 @@\tEnv        []EnvVar `json:\"env,omitempty\"`\n\t// Compute resource requirements.\n\tResources     ResourceRequirementSpec `json:\"resources,omitempty\"`\n\tVolumeMounts  []VolumeMount           `json:\"volumeMounts,omitempty\"`\n\tLivenessProbe *Probe                  `json:\"livenessProbe,omitempty\"`"
  },
  {
    "id" : "eb8afca0-2f3c-4088-8ed7-a19f54e25b61",
    "prId" : 3818,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96b75d63-9862-4118-a9cc-fd400141545c",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I suggested embedding here.  However, I realized this is inconsistent with VolumeSource.\n\n@bgrant0607 preference for style?  The difference in JSON comes down to:\n\n```\n\"livenessProbe\": { \"initalDelaySeconds\": 10, \"exec\": { ... } }\n\"volumes\": [ { \"name\": \"vol1\", \"hostDir\": { \"path\": \"/tmp\" } } ]\n```\n\nvs\n\n```\n\"livenessProbe\": { \"initalDelaySeconds\": 10, \"handler\": { \"exec\": { ... } } }\n\"volumes\": [ { \"name\": \"vol1\", \"source\": { \"hostDir\": { \"path\": \"/tmp\" } } } ]\n```\n",
        "createdAt" : "2015-01-27T23:38:41Z",
        "updatedAt" : "2015-01-28T19:21:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "26262268-c915-4c38-bc1a-b318bf322df9",
        "parentId" : "96b75d63-9862-4118-a9cc-fd400141545c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I prefer inlining/embedding.\n",
        "createdAt" : "2015-01-28T02:15:14Z",
        "updatedAt" : "2015-01-28T19:21:46Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "78f33e950a82f7f12ad09002081b4c20c53bb964",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +277,281 @@type Probe struct {\n\t// The action taken to determine the health of a container\n\tHandler `json:\",inline\"`\n\t// Length of time before health checking is activated.  In seconds.\n\tInitialDelaySeconds int64 `json:\"initialDelaySeconds,omitempty\"`"
  },
  {
    "id" : "2c2eb0be-ace0-44da-9947-464830c479c0",
    "prId" : 3789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f610a7-1828-42ea-ac29-0236c3f11d66",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "\"if the Name field has not been provided\".  What if a user provides name and generateName?\n",
        "createdAt" : "2015-02-02T05:50:51Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "927d78b4-a631-4cea-95c5-779fde8f1db5",
        "parentId" : "63f610a7-1828-42ea-ac29-0236c3f11d66",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I thought it was clarified later - Name takes precedence over GenerateName\n",
        "createdAt" : "2015-02-02T17:44:11Z",
        "updatedAt" : "2015-02-02T19:48:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1588970ec429df804708e8f00b66e4b94ba70723",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +86,90 @@\t// it. A non-empty value for the field indicates the name will be made unique (and the name\n\t// returned to the client will be different than the name passed). The value of this field will\n\t// be combined with a unique suffix on the server if the Name field has not been provided.\n\t// The provided value must be valid within the rules for Name, and may be truncated by the length\n\t// of the suffix required to make the value unique on the server."
  },
  {
    "id" : "14be87f7-5fb0-4666-9b23-12166c69202c",
    "prId" : 3707,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8620868b-2083-4af9-a660-52077cb8afbd",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "IIUC, the lists need to match in the versioned types.go files. I don't understand why this list contains so many constants that the others do not, and why the others contain at least one that this does not.\n\n@smarterclayton Is this just a bug?\n",
        "createdAt" : "2015-01-27T19:14:21Z",
        "updatedAt" : "2015-01-28T02:48:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "dd393788-eadc-4c3c-93e3-ae146a1e9cc7",
        "parentId" : "8620868b-2083-4af9-a660-52077cb8afbd",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, I don't think we have removed / changed any constants across versions beyond the lowerCase to CamelCase change, so they should all exist consistently.\n\n> On Jan 27, 2015, at 2:14 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -926,6 +914,12 @@ const (\n> >     // Status code 422\n> >     StatusReasonInvalid StatusReason = \"Invalid\"\n> > -   // StatusReasonTimeout means that the request could not be completed within the given time.\n> >   IIUC, the lists need to match in the versioned types.go files. I don't understand why this list contains so many constants that the others do not, and why the others contain at least one that this does not.\n> \n> @smarterclayton Is this just a bug?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-27T19:20:53Z",
        "updatedAt" : "2015-01-28T02:48:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "082aad69-d7e5-4db2-8cc4-9039e9a8075c",
        "parentId" : "8620868b-2083-4af9-a660-52077cb8afbd",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes. It wasnt clear to me why some of the constants are duplicated in versioned types.\nIt didnt look like they are needed there and hence I didnt add them.\n",
        "createdAt" : "2015-01-27T19:21:12Z",
        "updatedAt" : "2015-01-28T02:48:15Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "1d40316a-680e-4a25-a929-f47519460784",
        "parentId" : "8620868b-2083-4af9-a660-52077cb8afbd",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Constants should always be duplicated in the event we have to covert them - someone who depends on constant from specific version should be able to rely on that in code.\n\n> On Jan 27, 2015, at 2:21 PM, Nikhil Jindal notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -926,6 +914,12 @@ const (\n> >     // Status code 422\n> >     StatusReasonInvalid StatusReason = \"Invalid\"\n> > -   // StatusReasonTimeout means that the request could not be completed within the given time.\n> >   Yes. It wasnt clear to me why some of the constants are duplicated in versioned types.\n> >   It didnt look like they are needed there and hence I didnt add them.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-27T19:23:33Z",
        "updatedAt" : "2015-01-28T02:48:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1c0c6dd3-2ce7-4eee-ae41-65b8a50c61e4",
        "parentId" : "8620868b-2083-4af9-a660-52077cb8afbd",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'm fine if this is addressed in a separate PR.\n\n@nikhiljindal Please file an issue if you don't fix it in this PR.\n",
        "createdAt" : "2015-01-28T03:12:10Z",
        "updatedAt" : "2015-01-28T03:12:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "de606006087e805c72c1de7e52435fbd3dd4811c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +915,919 @@\tStatusReasonInvalid StatusReason = \"Invalid\"\n\n\t// StatusReasonTimeout means that the request could not be completed within the given time.\n\t// Clients can get this response only when they specified a timeout param in the request.\n\t// The request might succeed with an increased value of timeout param."
  },
  {
    "id" : "051ba06e-bff0-4bd1-a332-7d5b9e15fb92",
    "prId" : 3251,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1753bb9-bc4b-4c3e-9869-b08ac69793f1",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "is changing the type of Source going to break the storage in existing clusters?  Maybe better to add a new string.\n",
        "createdAt" : "2015-01-06T23:25:58Z",
        "updatedAt" : "2015-01-07T00:08:32Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "3a273553-f7bb-46bf-98d0-ca4a82d263bf",
        "parentId" : "e1753bb9-bc4b-4c3e-9869-b08ac69793f1",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Oh, you are doing conversion.\n",
        "createdAt" : "2015-01-06T23:26:29Z",
        "updatedAt" : "2015-01-07T00:08:32Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c019128e5666039270b6c42bae8264b43ca925",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1022,1026 @@\n\t// Optional. The component reporting this event. Should be a short machine understandable string.\n\tSource EventSource `json:\"source,omitempty\"`\n\n\t// The time at which the client recorded the event. (Time of server receipt is in TypeMeta.)"
  },
  {
    "id" : "60bf7b65-f843-4ed5-b935-6ad8f742ee99",
    "prId" : 2933,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbca1390-1941-4bac-9e45-de2037612035",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can we fast-forward a bit and think about the abstraction here?  I don't want to define this just in terms of what docker supports.  Internally we use capabilities to control many things (some of which are wrong, but some are OK).  Is the value of these strings defined?  Should we define a list of valid values, starting with the POSIX caps that docker supports?\n\nThen, what about guarding this?  We have guards for privileged such that an admin has to actually enable it - do we need something similar here? \n",
        "createdAt" : "2014-12-16T03:51:37Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ae609995-748d-4ebc-8b75-90ea4c5e1f5e",
        "parentId" : "fbca1390-1941-4bac-9e45-de2037612035",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "These should only be the POSIX capabilities. I don't want to mix in other capabilities. IMO, our internal abstraction is a hindrance more than anything.\n\nI do agree that it should be guarded. Don't have to be in this PR, IMO. \n\nI'd actually prefer that we drop all by default and require a whitelist instead of Docker's default whitelist, which I think is what [Rocket](https://github.com/appc/spec/blob/master/SPEC.md) does.\n\nI agree that we shouldn't necessarily always follow Docker verbatim, but there is a usability cost to incompatibility, so we should choose our battles carefully. \n\nIt is unfortunate that the Docker API pointlessly abbreviated these field names.\n",
        "createdAt" : "2014-12-16T04:19:41Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5e031e58-b454-46c2-8907-80eadd68ae2b",
        "parentId" : "fbca1390-1941-4bac-9e45-de2037612035",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Given that capabilities are a multiple, could we do:\n\n```\nCapabilityType string\n// ... enumerated list of caps\n\n// Capabilities represent POSIX capabilities that can be added or removed to a running container.\nCapabilities struct{\n  Add []CapabilityType\n  Drop []CapabilityType\n{\n```\n\n?  Anyone who wants capabilities will know that docker has CapAdd/CapDrop - anyone who doesn't will at least have a chance of knowing it.\n\nThe Kube API -> Docker API argument I don't think is very strong, because the Docker API was chosen around cmd flags (and I'll go yell at the person at Red Hat who used the shorter name in the API :)).  I doubt anyone will ever fail to understand what the structure does who knows anything about Capabilities.\n\n----- Original Message -----\n\n> > @@ -319,6 +319,9 @@ type Container struct {\n> >     Privileged bool `json:\"privileged,omitempty\"`\n> >     // Optional: Policy for pulling images for this container\n> >     ImagePullPolicy PullPolicy `json:\"imagePullPolicy\"`\n> > -   // Optional: Capabilities for container.\n> \n> These should only be the POSIX capabilities. I don't want to mix in other\n> capabilities. IMO, our internal abstraction is a hindrance more than\n> anything.\n> \n> I do agree that it should be guarded. Don't have to be in this PR, IMO.\n> \n> I'd actually prefer that we drop all by default and require a whitelist\n> instead of Docker's default whitelist, which I think is what\n> [Rocket](https://github.com/appc/spec/blob/master/SPEC.md) does.\n> \n> I agree that we shouldn't necessarily always follow Docker verbatim, but\n> there is a usability cost to incompatibility, so we should choose our\n> battles carefully.\n> \n> It is unfortunate that the Docker API pointlessly abbreviated these field\n> names.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2933/files#r21877181\n",
        "createdAt" : "2014-12-17T15:41:26Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fb5a46a7-23a7-49d1-9dfa-0ae585b01a9a",
        "parentId" : "fbca1390-1941-4bac-9e45-de2037612035",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Fair points re. compatibility.\n\nI like your proposed structure.\n",
        "createdAt" : "2014-12-17T19:43:34Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "49697157-dacd-46bb-9050-5119a706625e",
        "parentId" : "fbca1390-1941-4bac-9e45-de2037612035",
        "authorId" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "body" : "It's great! I'd like to change it.\n",
        "createdAt" : "2014-12-18T15:52:26Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "248624fc1f6b5710db8742c07f9e2d4584ca1525",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +331,335 @@\t// Optional: Policy for pulling images for this container\n\tImagePullPolicy PullPolicy `json:\"imagePullPolicy\"`\n\t// Optional: Capabilities for container.\n\tCapabilities Capabilities `json:\"capabilities,omitempty\"`\n}"
  },
  {
    "id" : "c146d821-299b-4c2f-965c-f3c6973280e0",
    "prId" : 2933,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2922d38-9339-4d7d-9bb7-5055652dcfcf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Shouldn't we define a list of supported caps, so people don't enter random crap and wonder why it doesn't work?\n",
        "createdAt" : "2014-12-22T21:35:37Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ae54a0dd-bbb0-48ff-8efc-50431779b370",
        "parentId" : "f2922d38-9339-4d7d-9bb7-5055652dcfcf",
        "authorId" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "body" : "@thockin POSIX capabilities are too many, may be listed in document is better?\n",
        "createdAt" : "2014-12-23T04:40:41Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "d3504a7e-3f3c-408e-97b5-1a488b36b9c9",
        "tags" : [
        ]
      },
      {
        "id" : "f8117637-c6e5-4b7c-bfc9-52d5f6ddf97d",
        "parentId" : "f2922d38-9339-4d7d-9bb7-5055652dcfcf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Somewhere :)\nOn Dec 22, 2014 8:41 PM, \"Ye Yin\" notifications@github.com wrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2933#discussion-diff-22203474\n> :\n> \n> > @@ -293,6 +293,16 @@ const (\n> >     PullIfNotPresent PullPolicy = \"PullIfNotPresent\"\n> >  )\n> > \n> > +type CapabilityType string\n> \n> @thockin https://github.com/thockin POSIX capabilities are too many,\n> may be listed in document is better?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2933/files#r22203474\n> .\n",
        "createdAt" : "2014-12-23T04:45:58Z",
        "updatedAt" : "2015-01-30T07:10:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "248624fc1f6b5710db8742c07f9e2d4584ca1525",
    "line" : null,
    "diffHunk" : "@@ -1,1 +295,299 @@\n// CapabilityType represent POSIX capabilities type\ntype CapabilityType string\n\n// Capabilities represent POSIX capabilities that can be added or removed to a running container."
  },
  {
    "id" : "46a7127e-1e19-4a85-a20f-4527da0db1c4",
    "prId" : 2875,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a1b0120-ca0f-40ca-86d6-03aa0fb7ff02",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why is this a pointer?  How is a nil pointer different from \"None\"?\n",
        "createdAt" : "2014-12-29T22:23:08Z",
        "updatedAt" : "2014-12-29T22:23:08Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "40b7ffa1-9707-4eb1-809b-701f4aea90bb",
        "parentId" : "0a1b0120-ca0f-40ca-86d6-03aa0fb7ff02",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Nil pointer is better because json defaulting rules are cleaner.  Omitted\nfield becomes nil, not empty string.\n\nBrendan\nOn Dec 29, 2014 2:23 PM, \"Tim Hockin\" notifications@github.com wrote:\n\n> In pkg/api/types.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2875#discussion-diff-22331739\n> :\n> \n> > @@ -606,6 +617,9 @@ type ServiceSpec struct {\n> >     // ContainerPort is the name of the port on the container to direct traffic to.\n> >     // Optional, if unspecified use the first port on the container.\n> >     ContainerPort util.IntOrString `json:\"containerPort,omitempty\"`\n> > +\n> > -   // Optional: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity.\n> > -   SessionAffinity *AffinityType `json:\"sessionAffinity,omitempty\"`\n> \n> Why is this a pointer? How is a nil pointer different from \"None\"?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2875/files#r22331739\n> .\n",
        "createdAt" : "2014-12-30T20:30:57Z",
        "updatedAt" : "2014-12-30T20:30:57Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "e614ca4d-b859-4945-9d85-9c02ea9c0c09",
        "parentId" : "0a1b0120-ca0f-40ca-86d6-03aa0fb7ff02",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "JSON encode an omitempty string omits the field in the output (because \"\" is empty).  Since we don't use empty string as a constant (but default to None), there is no difference in output JSON or internal logic between using nil and using \"\"+omitempty, and we use omitempty consistently elsewhere.\n\nOr maybe I misunderstand the argument\n\n> On Dec 30, 2014, at 3:31 PM, Brendan Burns notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -606,6 +617,9 @@ type ServiceSpec struct {\n> >     // ContainerPort is the name of the port on the container to direct traffic to.\n> >     // Optional, if unspecified use the first port on the container.\n> >     ContainerPort util.IntOrString `json:\"containerPort,omitempty\"`\n> > +\n> > -   // Optional: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity.\n> > -   SessionAffinity *AffinityType `json:\"sessionAffinity,omitempty\"`\n> >   Nil pointer is better because json defaulting rules are cleaner. Omitted field becomes nil, not empty string. Brendan\n> >   …\n> >   —\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-12-30T20:48:44Z",
        "updatedAt" : "2014-12-30T20:48:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f9fd8890-95ec-424c-82f2-cb638327697e",
        "parentId" : "0a1b0120-ca0f-40ca-86d6-03aa0fb7ff02",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "My argument for this change is that it is inconsistent with almost anything else.  If we consistently used pointers for optional fields, maybe, but we don't.  And pointers add extra logic at every site to check for nil, plus increases the need for fuzzing.  Better to just detect \"\" and default it, I think.\n",
        "createdAt" : "2014-12-30T20:59:57Z",
        "updatedAt" : "2014-12-30T20:59:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "569ce87f0eb5da565a2ae43eaa218d3fb3013d2d",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +620,624 @@\n\t// Optional: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity.\n\tSessionAffinity *AffinityType `json:\"sessionAffinity,omitempty\"`\n}\n"
  },
  {
    "id" : "d042a0ab-eb83-4109-9863-89808a75e6e1",
    "prId" : 2478,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b27686d2-bb2e-4f35-9876-7b5bf9bc6a80",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "@bgrant0607 interpreting your comment on the other pull, I moved Capacity to NodeSpec (I specify what capacity this node has), and when we introduce \"Available\" (or whatever it is called) I assume it would be on NodeStatus.  I kept NodeResources for now as a generic container to support CloudProvider, but I'm not sure we wouldn't just remove it in the future and use Capacity and \"Whatever\".  Let me know if this is not the direction you intended.\n",
        "createdAt" : "2014-11-19T22:42:10Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d36a7a52-547a-4d0e-abe8-8a0802a62191",
        "parentId" : "b27686d2-bb2e-4f35-9876-7b5bf9bc6a80",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thanks. Yes, we should remove NodeResources at some point.\n\nWhere available belongs is a bit tricky. Do you consider BoundPods to be \"spec\"-like or \"status\"-like? Available could be considered total - allocated, which is similar. Anyway, I'd like to defer that discussion, but \"capacity\" is ambiguous, as is.\n\nI made a proposal in #2480.\n",
        "createdAt" : "2014-11-20T00:44:26Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "156000ef6d7b71ef45617a330964cf0acddf67c4",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +641,645 @@type NodeSpec struct {\n\t// Capacity represents the available resources of a node\n\tCapacity ResourceList `json:\"capacity,omitempty\" yaml:\"capacity,omitempty\"`\n}\n"
  },
  {
    "id" : "fe8481ac-fa96-4037-bb1e-11a71109ecfb",
    "prId" : 2478,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07a3cd4f-e6b8-4039-ac3c-7544ad1b58ca",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is in Status because all of our code assumes the name resolves, and that this  is set under the covers, vs being something a user specifies\n",
        "createdAt" : "2014-11-19T22:43:29Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "46c07d89-4bf1-4e11-bcf3-daf019212ddd",
        "parentId" : "07a3cd4f-e6b8-4039-ac3c-7544ad1b58ca",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "SGTM. \n\nNote that it adds one more reason why we should store status in etcd: to prevent cascading failure (e.g., apiserver fails and restarts when DNS is down, and then it can't talk to kubelets, killing the entire cluster).\n",
        "createdAt" : "2014-11-20T00:55:20Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "4f7e6f8f-e55f-4eb5-be1f-cb856a154d00",
        "parentId" : "07a3cd4f-e6b8-4039-ac3c-7544ad1b58ca",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Is \"assumes the name resolves\" the correct assumption?  Just come across this issue #2462.  It looks like we never try to query from cloudprovider to populate HostIP.\n",
        "createdAt" : "2014-11-20T01:54:09Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "30ff8a3d-7e43-4b35-8ee9-bbec8c02d298",
        "parentId" : "07a3cd4f-e6b8-4039-ac3c-7544ad1b58ca",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is it the intent we consciously chose?  Probably not.  Is it the way it's used and interpreted in the code?  Yes.\n\n> On Nov 19, 2014, at 8:54 PM, Deyuan Deng notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -637,30 +637,42 @@ type EndpointsList struct {\n> >     Items []Endpoints `json:\"items\" yaml:\"items\"`\n> >  }\n> > \n> > -// NodeResources represents resources on a Kubernetes system node\n> > +// NodeSpec describes the attributes that a node is created with.\n> > +type NodeSpec struct {\n> > -   // Capacity represents the available resources of a node\n> > -   Capacity ResourceList `json:\"capacity,omitempty\" yaml:\"capacity,omitempty\"`\n> >   +}\n> >   +\n> >   +// NodeStatus is information about the current status of a node.\n> >   +type NodeStatus struct {\n> > -   // Queried from cloud provider, if available.\n> > -   HostIP string `json:\"hostIP,omitempty\" yaml:\"hostIP,omitempty\"`\n> >   Is \"assumes the name resolves\" the correct assumption? Just come across this issue #2462. It looks like we never try to query from cloudprovider to populate HostIP.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-21T01:44:37Z",
        "updatedAt" : "2014-11-21T01:53:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ce9f1f66-6e7a-46cb-82fa-7574346025f0",
        "parentId" : "07a3cd4f-e6b8-4039-ac3c-7544ad1b58ca",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "if cloudprovider doesn't give an resovable name, it unconsciously breaks our strategy.  in case we don't have a valid name, we need a failover solution.  (hostip in our case)\n",
        "createdAt" : "2014-11-21T02:37:30Z",
        "updatedAt" : "2014-11-21T02:37:30Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "156000ef6d7b71ef45617a330964cf0acddf67c4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +647,651 @@type NodeStatus struct {\n\t// Queried from cloud provider, if available.\n\tHostIP string `json:\"hostIP,omitempty\" yaml:\"hostIP,omitempty\"`\n}\n"
  },
  {
    "id" : "a07a8088-86a7-4348-8857-622c88e22764",
    "prId" : 2450,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d538fb-a094-4e22-b9f8-bb3f66a9dc8e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "These json tags aren't used for anything, right?\n",
        "createdAt" : "2014-12-09T17:33:07Z",
        "updatedAt" : "2014-12-09T17:48:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0b17a41f-801e-4a74-a3f9-0dc570f353ee",
        "parentId" : "91d538fb-a094-4e22-b9f8-bb3f66a9dc8e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "They are not today, but we haven't globally removed them yet from internal so I was following convention only.\n\n----- Original Message -----\n\n> > @@ -593,8 +593,10 @@ type ServiceSpec struct {\n> >     // Optional: Supports \"TCP\" and \"UDP\".  Defaults to \"TCP\".\n> >     Protocol Protocol `json:\"protocol,omitempty\"`\n> > -   // This service will route traffic to pods having labels matching this\n> >   selector.\n> > -   Selector map[string]string `json:\"selector,omitempty\"`\n> > -   // This service will route traffic to pods having labels matching this\n> >   selector. If empty or not present,\n> > -   // the service is assumed to have endpoints set by an external process\n> >   and Kubernetes will not modify\n> > -   // those endpoints.\n> > -   Selector map[string]string `json:\"selector\"`\n> \n> These json tags aren't used for anything, right?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2450/files#r21545029\n",
        "createdAt" : "2014-12-09T17:34:44Z",
        "updatedAt" : "2014-12-09T17:48:58Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e774ad43-4260-4a57-baf4-a5917d1d9f52",
        "parentId" : "91d538fb-a094-4e22-b9f8-bb3f66a9dc8e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "That's fine.\n",
        "createdAt" : "2014-12-09T17:38:29Z",
        "updatedAt" : "2014-12-09T17:48:58Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c27f7d3320b34e8cb34d3e6327548cba4bac3e9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +597,601 @@\t// the service is assumed to have endpoints set by an external process and Kubernetes will not modify\n\t// those endpoints.\n\tSelector map[string]string `json:\"selector\"`\n\n\t// PortalIP is usually assigned by the master.  If specified by the user"
  },
  {
    "id" : "692440e1-3b57-4ac8-aa5b-544fdeb425e1",
    "prId" : 2319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "644bf38c-1a71-4ae2-bf60-6d54811c9fa9",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Idea: What if we just have one Portal IP.  If you set the \"createExternalLoadBalancer\" flag, the portal IP is a public-compatible IP, else it is a cluster-private IP.\n\nFor intra-cluster use, the path is the same:  access the service IP, redirect to kube-proxy, RRLB to backends.\n\nFor external use, the path is: access the IP, (LB stuff), backends.\n\nThe (LB stuff) depends on the cloud provider and setup.  In GCE now, it will be GCLB, pick a node, redirect to kube-proxy, RRLB to backends.  If we replace GCLB with HAProxy it would be external IP, HAProxy, backends.\n\nDo we need two IP fields?  \n",
        "createdAt" : "2014-11-13T21:38:46Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a474a1eb-a07e-4216-986c-b10926b3622c",
        "parentId" : "644bf38c-1a71-4ae2-bf60-6d54811c9fa9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Interesting idea.  Thinking deeply.\n\n----- Original Message -----\n\n> > @@ -517,6 +517,8 @@ type ServiceSpec struct {\n> > \n> > ```\n> > // CreateExternalLoadBalancer indicates whether a load balancer should be\n> > created for this service.\n> > CreateExternalLoadBalancer bool\n> > `json:\"createExternalLoadBalancer,omitempty\"\n> > yaml:\"createExternalLoadBalancer,omitempty\"`\n> > ```\n> > -   // PublicIPs are used by external load balancers.\n> > -   PublicIPs []string `json:\"publicIPs,omitempty\"\n> >   yaml:\"publicIPs,omitempty\"`\n> \n> Idea: What if we just have one Portal IP.  If you set the\n> \"createExternalLoadBalancer\" flag, the portal IP is a public-compatible IP,\n> else it is a cluster-private IP.\n> \n> For intra-cluster use, the path is the same:  access the service IP, redirect\n> to kube-proxy, RRLB to backends.\n> \n> For external use, the path is: access the IP, <LB stuff>, backends.\n> \n> The <LB stuff> depends on the cloud provider and setup.  In GCE now, it will\n> be GCLB, pick a node, redirect to kube-proxy, RRLB to backends.  If we\n> replace GCLB with HAProxy it would be external IP, HAProxy, backends.\n> \n> Do we need two IP fields?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2319/files#r20325230\n",
        "createdAt" : "2014-11-13T22:02:17Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3e74c268-c01d-4cc4-9f76-455cf0c16d57",
        "parentId" : "644bf38c-1a71-4ae2-bf60-6d54811c9fa9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "+1 to unification\n",
        "createdAt" : "2014-11-19T02:50:36Z",
        "updatedAt" : "2014-11-19T02:50:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a8a2b5a9f87413a3284caa6de7f99ca4edf4921",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +578,582 @@\tCreateExternalLoadBalancer bool `json:\"createExternalLoadBalancer,omitempty\" yaml:\"createExternalLoadBalancer,omitempty\"`\n\t// PublicIPs are used by external load balancers.\n\tPublicIPs []string `json:\"publicIPs,omitempty\" yaml:\"publicIPs,omitempty\"`\n\n\t// ContainerPort is the name of the port on the container to direct traffic to."
  },
  {
    "id" : "d2425034-bb6a-4708-807a-73f7aade2db1",
    "prId" : 2319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment: Are users expected to provide this?  What if they don't, what happens?\n",
        "createdAt" : "2014-11-14T20:57:23Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "81eb98a8-64f0-4be3-820b-c015cada3ec2",
        "parentId" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "They can provide it.  If they don't and there is a cloud load balancer, it grabs it from the external load balancer.\n",
        "createdAt" : "2014-11-14T21:21:35Z",
        "updatedAt" : "2014-11-15T01:23:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "7686dfea-a622-47bd-be04-75e7d512ee09",
        "parentId" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I meant to comment the answer, not tell me :)\n",
        "createdAt" : "2014-11-15T04:59:59Z",
        "updatedAt" : "2014-11-15T04:59:59Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "069a47e4-b505-4069-b56f-de4dc07d4cb0",
        "parentId" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(Too late) Please fix the docs here, it's confusing. Under what circumstances should users specify a value here?\n",
        "createdAt" : "2014-12-03T06:38:02Z",
        "updatedAt" : "2014-12-03T06:38:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d1acd8a0-0697-41df-9bd5-c4326bb45b7d",
        "parentId" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "They were originally called \"ExternalIPs\"  See the comments from Clayton\nabout \"ExternalIP\" meaning IP for Nominal Services, hence PublicIP.\n\n(there's still time to change for v1beta3 ;)\n\n--brendan\n\nOn Tue, Dec 2, 2014 at 10:38 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/types.go:\n> \n> > @@ -576,6 +576,8 @@ type ServiceSpec struct {\n> > \n> > ```\n> > // CreateExternalLoadBalancer indicates whether a load balancer should be created for this service.\n> > CreateExternalLoadBalancer bool `json:\"createExternalLoadBalancer,omitempty\" yaml:\"createExternalLoadBalancer,omitempty\"`\n> > ```\n> > -   // PublicIPs are used by external load balancers.\n> \n> (Too late) Please fix the docs here, it's confusing. Under what\n> circumstances should users specify a value here?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2319/files#r21214653\n> .\n",
        "createdAt" : "2014-12-03T07:04:22Z",
        "updatedAt" : "2014-12-03T07:04:22Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "0e07bfc8-15e3-4618-b965-95c4cf7df7dc",
        "parentId" : "4383fcd3-49fe-4a04-808f-5d6b11a4ee91",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry if I'm being dense, I still don't follow. Under what circumstances should users specify a value here? Who is the consumer of this information? Who is the source?\n",
        "createdAt" : "2014-12-03T07:07:26Z",
        "updatedAt" : "2014-12-03T07:07:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a8a2b5a9f87413a3284caa6de7f99ca4edf4921",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +577,581 @@\t// CreateExternalLoadBalancer indicates whether a load balancer should be created for this service.\n\tCreateExternalLoadBalancer bool `json:\"createExternalLoadBalancer,omitempty\" yaml:\"createExternalLoadBalancer,omitempty\"`\n\t// PublicIPs are used by external load balancers.\n\tPublicIPs []string `json:\"publicIPs,omitempty\" yaml:\"publicIPs,omitempty\"`\n"
  },
  {
    "id" : "91cede86-9d9c-45b2-9501-a6011fc4ef1d",
    "prId" : 2022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e324d02-7e42-47a1-adce-97cbcb8e50be",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit: s/5/a flag-configured limit/\n",
        "createdAt" : "2014-10-29T03:55:31Z",
        "updatedAt" : "2014-10-29T03:55:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "51bf451932cab4ab1bf2315ca602d8b51333f2f8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +375,379 @@\tState ContainerState `json:\"state,omitempty\" yaml:\"state,omitempty\"`\n\t// Note that this is calculated from dead containers.  But those containers are subject to\n\t// garbage collection.  This value will get capped at 5 by GC.\n\tRestartCount int `json:\"restartCount\" yaml:\"restartCount\"`\n\t// TODO(dchen1107): Deprecated this soon once we pull entire PodStatus from node,"
  },
  {
    "id" : "3438fffa-28a2-4dd6-a28c-aa16d0c0fefa",
    "prId" : 1982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab759920-f670-43f8-9b03-306f95033a3d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should settle and doc whether master-assigned properties stored atomically with the resource should be stored in spec, status, or a separate entity.  Is the rule of thumb whether the end user can set it?  It would be nice to filter status prior to storage with a blanket clear, but we can also allow attributes through.\n",
        "createdAt" : "2014-10-27T16:41:52Z",
        "updatedAt" : "2014-10-27T21:04:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b4351708-cc9c-4911-b10f-8b010fccf60c",
        "parentId" : "ab759920-f670-43f8-9b03-306f95033a3d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That is the rule of thumb I was using - can a user set it?  If so it is part of their intent == spec.\n",
        "createdAt" : "2014-10-27T16:45:29Z",
        "updatedAt" : "2014-10-27T21:04:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5ca0f91b8dd452d0806ef46558dbdde7d8461d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +493,497 @@\n\t// ProxyPort is assigned by the master.  If specified by the user it will be ignored.\n\t// TODO: This is awkward - if we had a BoundService, it would be better factored.\n\tProxyPort int `json:\"proxyPort,omitempty\" yaml:\"proxyPort,omitempty\"`\n}"
  },
  {
    "id" : "551b7a94-c826-4227-9d07-9156c2137669",
    "prId" : 1946,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0275daf9-1c03-4ae6-bba2-1c36ed953e8e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What are you going to use this selector to accomplish? @erictune and I were talking about something similar based on the presence of a trust relationship in the auth stuff.\n",
        "createdAt" : "2014-10-22T05:25:34Z",
        "updatedAt" : "2014-10-26T05:08:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e951e4ae-c40f-43e3-9884-8df271de57b6",
        "parentId" : "0275daf9-1c03-4ae6-bba2-1c36ed953e8e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Look at the changes to predicates.  This is so that we can do constraint/requirements based scheduling.\n",
        "createdAt" : "2014-10-22T17:03:13Z",
        "updatedAt" : "2014-10-26T05:08:08Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5856092e-f6ab-4062-bbea-05e6d0bf32ce",
        "parentId" : "0275daf9-1c03-4ae6-bba2-1c36ed953e8e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "See #367.\n",
        "createdAt" : "2014-10-22T17:10:00Z",
        "updatedAt" : "2014-10-26T05:08:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4d60783db00a057d99bd3352e019bc297e8750",
    "line" : null,
    "diffHunk" : "@@ -1,1 +426,430 @@\tCurrentState PodState `json:\"currentState,omitempty\" yaml:\"currentState,omitempty\"`\n\t// NodeSelector is a selector which must be true for the pod to fit on a node\n\tNodeSelector map[string]string `json:\"nodeSelector,omitempty\" yaml:\"nodeSelector,omitempty\"`\n}\n"
  },
  {
    "id" : "54c9d56f-ae70-423c-bf82-baea69cbc2ce",
    "prId" : 1945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9b5d9d-6863-4227-a1fb-68c79153eecf",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "TODO for credentials?  Similar to docker registry credentials use case\n",
        "createdAt" : "2014-10-22T03:40:37Z",
        "updatedAt" : "2014-10-27T23:36:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e94b8c88-d944-41c1-a204-6ef4aed903d6",
        "parentId" : "fd9b5d9d-6863-4227-a1fb-68c79153eecf",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Done.\n",
        "createdAt" : "2014-10-22T04:52:05Z",
        "updatedAt" : "2014-10-27T23:36:01Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b59e49fa13f49855cf6a46418fc7ea2cc5a92e88",
    "line" : null,
    "diffHunk" : "@@ -1,1 +195,199 @@\tRepository string `yaml:\"repository\" json:\"repository\"`\n\t// Commit hash, this is optional\n\tRevision string `yaml:\"revision\" json:\"revision\"`\n\t// TODO: Consider credentials here.\n}"
  },
  {
    "id" : "abe57ea7-5c86-4fc7-81b5-424e7c76a4fd",
    "prId" : 1945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8248358-43f9-4e73-9cd6-d5bc056c254a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "One comment here - we are having the debate in OpenShift about what to use in a similar spot for Git (for builds), and had been leaning towards `Commit` because that's what `git checkout` uses from the doc:\n\n```\ngit checkout [-q] [-f] [-m] [--detach] <commit>\n```\n\nRevision is also valid (`git rev-parse`), and is a bit broader in scope across other SCMs.  So neither is wrong, but we do want to be consistent.  Is there a strong preference for Revision here over Commit?  Other arguments we've missed?\n",
        "createdAt" : "2014-11-03T15:06:09Z",
        "updatedAt" : "2014-11-03T15:06:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8d7b59dd-06d6-4aff-ae7a-482fc975c027",
        "parentId" : "e8248358-43f9-4e73-9cd6-d5bc056c254a",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "No strong preferences.  \"commit\" is an active word, that feels like the act\nof submitting, rather than \"revision\" which is more descriptive and feels\nlike the state of the repository.  Also \"revision\" feels more generally\nsource control like, where-as commit is pretty git specific.\n\nI have no problems merging a PR in v1beta3 to make this \"Commit\" instead.\n(since it is a breaking api change) Anyone else have thoughts?\n\n--brendan\n\nOn Mon, Nov 3, 2014 at 7:06 AM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/api/types.go:\n> \n> > @@ -187,6 +189,15 @@ type GCEPersistentDisk struct {\n> >     ReadOnly bool `yaml:\"readOnly,omitempty\" json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GitRepo represents a volume that is pulled from git when the pod is created.\n> > +type GitRepo struct {\n> > -   // Repository URL\n> > -   Repository string `yaml:\"repository\" json:\"repository\"`\n> > -   // Commit hash, this is optional\n> > -   Revision string `yaml:\"revision\" json:\"revision\"`\n> \n> One comment here - we are having the debate in OpenShift about what to use\n> in a similar spot for Git (for builds), and had been leaning towards\n> Commit because that's what git checkout uses from the doc:\n> \n> git checkout [-q] [-f] [-m] [--detach] <commit>\n> \n> Revision is also valid (git rev-parse), and is a bit broader in scope\n> across other SCMs. So neither is wrong, but we do want to be consistent. Is\n> there a strong preference for Revision here over Commit? Other arguments\n> we've missed?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1945/files#r19737560\n> .\n",
        "createdAt" : "2014-11-03T15:47:19Z",
        "updatedAt" : "2014-11-03T15:47:19Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "e0371c15-a6d5-4428-a6bf-0f4b9cb970dd",
        "parentId" : "e8248358-43f9-4e73-9cd6-d5bc056c254a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree Revision is more generic, and Repository also works well in a generic fashion.\n\nI'm not strongly on one side or another, I just want to make sure we look and feel consistent.\n",
        "createdAt" : "2014-11-03T16:23:50Z",
        "updatedAt" : "2014-11-03T16:24:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5a6d5ca6-e680-45cb-b568-0d0ac693637e",
        "parentId" : "e8248358-43f9-4e73-9cd6-d5bc056c254a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm fine with revision for now - we went with revision for the top level name (generic) and commit for the nested git specific struct.  \n\n> On Nov 3, 2014, at 10:47 AM, Brendan Burns notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -187,6 +189,15 @@ type GCEPersistentDisk struct {\n> >     ReadOnly bool `yaml:\"readOnly,omitempty\" json:\"readOnly,omitempty\"`\n> >  }\n> > \n> > +// GitRepo represents a volume that is pulled from git when the pod is created.\n> > +type GitRepo struct {\n> > -   // Repository URL\n> > -   Repository string `yaml:\"repository\" json:\"repository\"`\n> > -   // Commit hash, this is optional\n> > -   Revision string `yaml:\"revision\" json:\"revision\"`\n> >   No strong preferences. \"commit\" is an active word, that feels like the act of submitting, rather than \"revision\" which is more descriptive and feels like the state of the repository. Also \"revision\" feels more generally source control like, where-as commit is pretty git specific. I have no problems merging a PR in v1beta3 to make this \"Commit\" instead. (since it is a breaking api change) Anyone else have thoughts?\n> >   …\n> >   —\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-05T00:22:20Z",
        "updatedAt" : "2014-11-05T00:22:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "b59e49fa13f49855cf6a46418fc7ea2cc5a92e88",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +195,199 @@\tRepository string `yaml:\"repository\" json:\"repository\"`\n\t// Commit hash, this is optional\n\tRevision string `yaml:\"revision\" json:\"revision\"`\n\t// TODO: Consider credentials here.\n}"
  },
  {
    "id" : "0b8297a2-f40d-4804-9d82-b427c88ae29d",
    "prId" : 1569,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c966388a-483a-48c9-b606-d40e1766ccd7",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Why do we need PodIP?  It's already present in the PodState, also since IP is specific to pod not container, why is it in the ContainerState?\n",
        "createdAt" : "2014-10-04T04:59:09Z",
        "updatedAt" : "2014-10-06T21:41:31Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "9beb7c82-594d-4509-8637-b713ccb0edd8",
        "parentId" : "c966388a-483a-48c9-b606-d40e1766ccd7",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "We need PodIP today because apiserver only pulls PodInfo from kubelet, not CurrentState which defined as PodState. We used to find PodIP from docker.Container -- net's NetworkSettings.IPAddress. This PR deprecated docker.Container completely from our APIs. My initial PR actually wanted to pulls the entire CurrentState from kubelet, but that is too big change, and hard to review; also we changed the API to use PodStatus instead of PodState in v1beta3; thus, at the end, I decided not include such change in this PR. \n",
        "createdAt" : "2014-10-06T17:49:54Z",
        "updatedAt" : "2014-10-06T21:41:31Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fdfeaa30e6efe87851fc0e76f251e5483e3fdba",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +329,333 @@\t// TODO(dchen1107): Deprecated this soon once we pull entire PodStatus from node,\n\t// not just PodInfo. Now we need this to remove docker.Container from API\n\tPodIP string `json:\"podIP,omitempty\" yaml:\"podIP,omitempty\"`\n\t// TODO(dchen1107): Need to decide how to represent this in v1beta3\n\tImage string `yaml:\"image\" json:\"image\"`"
  },
  {
    "id" : "c2363dbb-4a79-48e7-9ded-05388fd65eb5",
    "prId" : 1474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6630adf9-58ea-4761-8b83-da88f1826b04",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm afraid this will end up being map[name]interface{}, but I guess we can adapt that later.  @lavalamp has a half-baked PR to provide a different type than IntOrString here, which we should revisit before IntOrString becomes too deeply baked.\n",
        "createdAt" : "2014-09-30T17:55:03Z",
        "updatedAt" : "2014-10-01T19:38:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ec9df646-91d0-40c6-b4fa-e602fde7163d",
        "parentId" : "6630adf9-58ea-4761-8b83-da88f1826b04",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "If you'd prefer, I can make this exclusively a string for now...\n",
        "createdAt" : "2014-09-30T18:18:38Z",
        "updatedAt" : "2014-10-01T19:38:20Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "dbb91644-84ee-47c7-a0bb-cbc3ee511c5c",
        "parentId" : "6630adf9-58ea-4761-8b83-da88f1826b04",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Whatever is easy for now - let's change it when we have a better answer - if this works, I'd say leave it.  Float is sort of clumsy, but probably good enough to keep pushing ahead.  Maybe a TODO here?\n",
        "createdAt" : "2014-09-30T18:35:47Z",
        "updatedAt" : "2014-10-01T19:38:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "39d03948e78eaeda5bfa96208cd1f8e5972c1826",
    "line" : null,
    "diffHunk" : "@@ -1,1 +434,438 @@\n// TODO Replace this with a more complete \"Quantity\" struct\ntype ResourceList map[ResourceName]util.IntOrString\n\n// Minion is a worker node in Kubernetenes."
  },
  {
    "id" : "e4f71066-3258-467a-bc61-50ab0a6c8d38",
    "prId" : 1458,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8bc0a9a-52ac-4ff5-9d88-820c72eb8c29",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "along the way we lost the ToUpper() or ToLower() to make these case-insensitive.\n\nAs a different question: This pattern (IsFoo() functions which encode the if-not-specified behavior) vs defaulting values in validation?  This pattern has a distinct advantage of working in tests where validation has not run.  It has the distinct disadvantage that not all fields are so self-contained - some set their default based on another field's value.\n\nI'd like to be consistent as much as possible. I'll file an issue.  No urgency.\n",
        "createdAt" : "2014-09-30T05:03:28Z",
        "updatedAt" : "2014-10-01T19:34:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b9705bf6-9b13-457c-a686-c166f7dcddad",
        "parentId" : "a8bc0a9a-52ac-4ff5-9d88-820c72eb8c29",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Other disadvantages:\n- Clients can't introspect default behavior\n- Creates a subtle API version dependency: Changing default behavior is a breaking API change. If we were to ever change such defaults, we'd need to factor out the code into a version-specific location. Furthermore, if we were to allow objects to survive API version changes (which we probably will eventually), we'd want to record the original default in the object.\n",
        "createdAt" : "2014-09-30T07:30:36Z",
        "updatedAt" : "2014-10-01T19:34:35Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c456015b6ebb573cd0471f1673ded2f06980888",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +193,197 @@\t\treturn true\n\t}\n\treturn pullPoliciesEqual(p, PullAlways)\n}\n"
  },
  {
    "id" : "eb050c60-210e-4f77-9324-bff32944c9be",
    "prId" : 1402,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70c189c1-ed82-4770-adaa-b04241524803",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This will go into ServiceStatus, also.\n",
        "createdAt" : "2014-10-05T05:53:56Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f48a6c3e-193f-4b10-8c05-f7cb144e7a61",
        "parentId" : "70c189c1-ed82-4770-adaa-b04241524803",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Already is :)\n",
        "createdAt" : "2014-10-06T16:00:45Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3b8f165e-9152-43a2-a7c7-4f0e06a3bbf8",
        "parentId" : "70c189c1-ed82-4770-adaa-b04241524803",
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "(to answer thockin's question)\n\n.. because the port in the variable name is the container port you're trying to refer to, and the value of the variable is the mapped external/host port.  If you like, the (container name, container port) tuple is \"known\" and the actual published port is potentially dynamic or up to local configuration and unknown.\n\nAs an example, consider a web server available on host port 8080.  It probably points at docker containers running apache (or whatever) on container port 80.  So to refer to this service using a regular docker link setup or kubernetes, you would use APACHE_PORT_80_TCP_PORT and find it had value 8080.\n",
        "createdAt" : "2014-10-08T02:53:48Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      },
      {
        "id" : "e01a5ec1-ed1e-49fd-9437-23f5fb3b40fe",
        "parentId" : "70c189c1-ed82-4770-adaa-b04241524803",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "See, that's what I thought, but I tried it.\n\nthockin@thockin-glaptop:~$ sudo docker run -d --name db -p 8001:8002 -p 8003:8004 ubuntu sleep 600\nf67a0d4d99e24c02756c4259f07a617231b67e4af2d74a5d269355581a05d6af\n\nthockin@thockin-glaptop:~$ sudo docker run -ti --link db:db ubuntu bash\nroot@9de6633e68fa:/# set | grep DB\nDB_NAME=/angry_bohr/db\nDB_PORT=tcp://172.17.0.14:8002\nDB_PORT_8002_TCP=tcp://172.17.0.14:8002\nDB_PORT_8002_TCP_ADDR=172.17.0.14\nDB_PORT_8002_TCP_PORT=8002\nDB_PORT_8002_TCP_PROTO=tcp\nDB_PORT_8004_TCP=tcp://172.17.0.14:8004\nDB_PORT_8004_TCP_ADDR=172.17.0.14\nDB_PORT_8004_TCP_PORT=8004\nDB_PORT_8004_TCP_PROTO=tcp\n\nNote that the only ports exposed are container ports, which makes total sense - why bounce through a host port for container-to-container comms?\n\nAnyway, this is way OT for this PR :)\n",
        "createdAt" : "2014-10-08T03:00:08Z",
        "updatedAt" : "2014-10-16T15:37:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c4bd552730fb2a4ca6d5c85230aed4f37734e7e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +430,434 @@\n\t// ProxyPort is assigned by the master.  If specified by the user it will be ignored.\n\tProxyPort int `json:\"proxyPort,omitempty\" yaml:\"proxyPort,omitempty\"`\n}\n"
  },
  {
    "id" : "cc43896d-40cc-423f-b65b-246e8ce94138",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea82d28-830b-4f8e-b555-abb6ec80991d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why do we need this?  It seems like this is temporal and will quickly be obsolete - is it useful historical info, maybe?\n",
        "createdAt" : "2014-09-24T22:16:52Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4743713c-c809-4e22-b434-28e4abfc578a",
        "parentId" : "4ea82d28-830b-4f8e-b555-abb6ec80991d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Seems quite useful for debugging-- did the scheduler fail before or after I fixed my pod?\n",
        "createdAt" : "2014-09-24T22:21:33Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cf4c2136-a507-4e9e-9d22-5825ebc1e08b",
        "parentId" : "4ea82d28-830b-4f8e-b555-abb6ec80991d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "sure, SGTM\n",
        "createdAt" : "2014-09-24T22:26:30Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "201788d3-fbae-4188-a86c-efd29c2ac1b7",
        "parentId" : "4ea82d28-830b-4f8e-b555-abb6ec80991d",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "In the spirit of HATEOAS, I think when we present this information in an HTTP response it should be in the form of two self-links:\n\n``` json\n{\n\"OriginalSelfLink\" : \"/api/${APIVERSION}/${KIND}/?uid=${UID}&version=${VERSION}\",\n\"LatestSelfLink\" : \"/api/${APIVERSION}/${KIND}/${NAME}\"\n}\n```\n\nOf course, since we don't support these URLs yet, I don't expect you to do it in this PR.\n",
        "createdAt" : "2014-09-25T16:10:40Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +621,625 @@\tUID             string `json:\"uid,omitempty\" yaml:\"uid,omitempty\"`\n\tAPIVersion      string `json:\"apiVersion,omitempty\" yaml:\"apiVersion,omitempty\"`\n\tResourceVersion uint64 `json:\"resourceVersion,omitempty\" yaml:\"resourceVersion,omitempty\"`\n\n\t// Optional. If referring to a piece of an object instead of an entire object, this string"
  },
  {
    "id" : "59cbcfda-fcc0-40db-9841-10d2b951e471",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is there a reference you can link to for a spec on valid syntax?\n",
        "createdAt" : "2014-09-24T22:17:40Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c289203a-d28c-4706-a8d0-072aac81a53f",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Source: @smarterclayton \n\nAlso I really hate this and would happily change it if you have a better suggestion. Concrete problem: need to reference a container inside a pod.\n",
        "createdAt" : "2014-09-24T22:22:53Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d91ae432-cec2-4834-82de-4ac29be70ba1",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We could write one up for API spec - I was looking for maximum simplicity and compatibility with js clients so I went with the literal JS one would invoke to access that field if it were loaded.\n\n> On Sep 24, 2014, at 6:17 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -621,3 +613,58 @@ type ServerOpList struct {\n> >  }\n> > \n> >  func (*ServerOpList) IsAnAPIObject() {}\n> > +\n> > +// ObjectReference contains enough information to let you inspect or modify the referred object.\n> > +type ObjectReference struct {\n> > -   Kind            string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`\n> > -   Name            string `json:\"name,omitempty\" yaml:\"name,omitempty\"`\n> > -   UID             string `json:\"uid,omitempty\" yaml:\"uid,omitempty\"`\n> > -   APIVersion      string `json:\"apiVersion,omitempty\" yaml:\"apiVersion,omitempty\"`\n> > -   ResourceVersion uint64 `json:\"resourceVersion,omitempty\" yaml:\"resourceVersion,omitempty\"`\n> >   +\n> > -   // Optional. If referring to a piece of an object instead of an entire object, this string\n> > -   // should contain a valid field access statement. For example,\n> > -   // if the object reference is to a container within a pod, this would take on a value like:\n> > -   // \"desiredState.manifest.containers[2]\". Such statements are valid language constructs in\n> >   Is there a reference you can link to for a spec on valid syntax?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-24T22:23:51Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ae88098f-6bdb-4a1b-abca-8bdda32eac35",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On Sep 24, 2014, at 6:23 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/api/types.go:\n> \n> > @@ -621,3 +613,58 @@ type ServerOpList struct {\n> >  }\n> > \n> >  func (*ServerOpList) IsAnAPIObject() {}\n> > +\n> > +// ObjectReference contains enough information to let you inspect or modify the referred object.\n> > +type ObjectReference struct {\n> > -   Kind            string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`\n> > -   Name            string `json:\"name,omitempty\" yaml:\"name,omitempty\"`\n> > -   UID             string `json:\"uid,omitempty\" yaml:\"uid,omitempty\"`\n> > -   APIVersion      string `json:\"apiVersion,omitempty\" yaml:\"apiVersion,omitempty\"`\n> > -   ResourceVersion uint64 `json:\"resourceVersion,omitempty\" yaml:\"resourceVersion,omitempty\"`\n> >   +\n> > -   // Optional. If referring to a piece of an object instead of an entire object, this string\n> > -   // should contain a valid field access statement. For example,\n> > -   // if the object reference is to a container within a pod, this would take on a value like:\n> > -   // \"desiredState.manifest.containers[2]\". Such statements are valid language constructs in\n> >   Source: @smarterclayton\n> \n> Also I really hate this and would happily change it if you have a better suggestion. Concrete problem: need to reference a container inside a pod.\n> \n> Strength of hate and basis?\n\nOther concrete problem, when a deep complex object fails validation, don't make clients guess which field is invalid, provide an unambiguous locator.=\n",
        "createdAt" : "2014-09-24T22:26:07Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f21664db-2063-4841-9187-66bb821efb03",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm fine with literal JS syntax, but let's say that.\n",
        "createdAt" : "2014-09-24T22:27:20Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "928dcc25-93aa-492a-899a-632c7dd82263",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "It would be nice if we could use an existing partial response filter format.\nThis article discusses 3 already in use by google, facebook, twitter and linkedin:\nhttps://blog.apigee.com/detail/restful_api_design_can_your_api_give_developers_just_the_information\n\nThere is more documentation on the google format here:\nhttps://developers.google.com/+/api/#partial-response\n\nThe one issue I see is that those formats don't appear to let you select a specific item from an array.\n",
        "createdAt" : "2014-09-25T16:30:13Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "22020711-9a66-42b4-b9ff-f79ae921d3e4",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If ContainerManifest.Containers was a map by name, then you could use the partial response format.  But it isn't and the format is locked in due to its used by containerVMs.\n",
        "createdAt" : "2014-09-25T16:45:48Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "fbede605-aed4-4322-a4fc-7499dd0e2da2",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "What if the list of Containers in ContainerManifest was converted to a map keyed by the ith container's Name.  Could this happen when it was serialized to JSON?  \n\nThen, if the 1st container is named foo, you could write \"filter=desiredState/manifest/containers/foo\".\n",
        "createdAt" : "2014-09-25T16:53:22Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "af595fc1-e4f6-4a84-a668-d13de14e2bac",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "@lavalamp \nCan you omit FieldPath for now and still make some progress?\n",
        "createdAt" : "2014-09-25T17:02:36Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "7c189caf-dcf4-4f14-9782-d3fafad9b444",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The first thing I intended to do was re-implement the container restart reporting, which needs this, but I can start somewhere else, I suppose.\n\n \"filter=desiredState/manifest/containers/?name=foo\" would be a cool syntax. specifying it completely would be a pain, though. \n",
        "createdAt" : "2014-09-25T18:00:47Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6c03727a-cd39-49e7-a25d-5bfa669f8529",
        "parentId" : "c3b2d3b7-f67f-428c-9b0f-ce099e4d80cf",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Related to #1362 \n",
        "createdAt" : "2014-09-25T18:16:19Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +626,630 @@\t// should contain a valid field access statement. For example,\n\t// if the object reference is to a container within a pod, this would take on a value like:\n\t// \"desiredState.manifest.containers[2]\". Such statements are valid language constructs in\n\t// both go and JavaScript. This is syntax is chosen only to have some well-defined way of\n\t// referencing a part of an object."
  },
  {
    "id" : "ea37c6cf-23c7-4074-97cb-1d3b841bb48a",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5a8e5f-8225-49d5-aa86-532bcb6186c0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we decide to store with the object, does this become obsolete?\n",
        "createdAt" : "2014-09-24T22:18:12Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "898f5257-c9eb-4453-a0a5-2cc0a8c6b7dd",
        "parentId" : "ad5a8e5f-8225-49d5-aa86-532bcb6186c0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Seems that the ResourceVersion and FieldPath fields would still be relevant. We could make an EmbeddedEvent type for that purpose.\n",
        "createdAt" : "2014-09-24T22:23:57Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d0de3cea-1ee7-4e23-b1ef-05791216298a",
        "parentId" : "ad5a8e5f-8225-49d5-aa86-532bcb6186c0",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We can revisit this as the decision solidifies, that's fine\n",
        "createdAt" : "2014-09-24T22:27:56Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +639,643 @@\n\t// Required. The object that this event is about.\n\tInvolvedObject ObjectReference `json:\"involvedObject,omitempty\" yaml:\"involvedObject,omitempty\"`\n\n\t// Should be a short, machine understandable string that describes the current status"
  },
  {
    "id" : "93acf213-6fba-4220-8b0a-d5361396b4a9",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c4c3b90-fb77-42b7-aed4-6cd75f5b32ee",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should this be namespaced like everything else?  Or are collisions really a bad thing, given the context of the object-ref?\n",
        "createdAt" : "2014-09-24T22:19:34Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8843f7e2-de0f-40a7-b50d-93bdbd61fbd5",
        "parentId" : "6c4c3b90-fb77-42b7-aed4-6cd75f5b32ee",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "hm... namespace might make sense.\n",
        "createdAt" : "2014-09-24T22:25:27Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6afa3ee2-aa61-4d6a-9b21-819e260cd58f",
        "parentId" : "6c4c3b90-fb77-42b7-aed4-6cd75f5b32ee",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "see etune's #1323 \n",
        "createdAt" : "2014-09-24T22:28:57Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d898561a-9d05-4a35-88ea-7d2282a78292",
        "parentId" : "6c4c3b90-fb77-42b7-aed4-6cd75f5b32ee",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "That can wait.  The unspecified namespace can default to kubernetes.io/ which is used for names allocated by the core system components.\n",
        "createdAt" : "2014-09-25T17:10:01Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +646,650 @@\t// It's OK for components to make up statuses to report here, but the same string should\n\t// always be used for the same status.\n\t// TODO: define a way of making sure these are consistent and don't collide.\n\t// TODO: provide exact specification for format.\n\tStatus string `json:\"status,omitempty\" yaml:\"status,omitempty\"`"
  },
  {
    "id" : "e300464a-2c0b-4893-b265-c67ddbf77305",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47bc166a-7749-4782-a21f-46ede8faaa51",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Any restrictions on format?  Are spaces allowed?  embedded quotes?  Open parens without close?\n",
        "createdAt" : "2014-09-24T22:20:26Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1b3c76d2-1292-4d42-834f-a9a56aa4b4d6",
        "parentId" : "47bc166a-7749-4782-a21f-46ede8faaa51",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Or restrictions on length?\n",
        "createdAt" : "2014-09-24T22:20:41Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +648,652 @@\t// TODO: define a way of making sure these are consistent and don't collide.\n\t// TODO: provide exact specification for format.\n\tStatus string `json:\"status,omitempty\" yaml:\"status,omitempty\"`\n\n\t// Optional; this should be a short, machine understandable string that gives the reason"
  },
  {
    "id" : "de605819-21b9-4a56-9bc6-7c28111c99ea",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf56c3a-6d81-4de3-baa4-abd563a86fc6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same questions about format, length, etc\n",
        "createdAt" : "2014-09-24T22:20:58Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +654,658 @@\t// \"cantStart\", StatusReason might be \"imageNotFound\".\n\t// TODO: provide exact specification for format.\n\tReason string `json:\"reason,omitempty\" yaml:\"reason,omitempty\"`\n\n\t// Optional. A human-readable description of the status of this operation."
  },
  {
    "id" : "4678b099-2f66-467e-a7ea-9d63f8502452",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f4b02b-cb8d-49b5-bd02-9d46a09f85f9",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same questions\n",
        "createdAt" : "2014-09-24T22:21:07Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +658,662 @@\t// Optional. A human-readable description of the status of this operation.\n\t// TODO: decide on maximum length.\n\tMessage string `json:\"message,omitempty\" yaml:\"message,omitempty\"`\n\n\t// Optional. The component reporting this event. Should be a short machine understandable string."
  },
  {
    "id" : "2a5a22b5-6be5-4711-bd52-70760d087cac",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67f120d6-7e9c-48ad-adbd-42f3b60bbd25",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same questions\n",
        "createdAt" : "2014-09-24T22:21:21Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +662,666 @@\t// Optional. The component reporting this event. Should be a short machine understandable string.\n\t// TODO: provide exact specification for format.\n\tSource string `json:\"source,omitempty\" yaml:\"source,omitempty\"`\n}\n"
  },
  {
    "id" : "0b0a1f3d-e32a-4223-91c7-5dcd89eaefd7",
    "prId" : 1354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c0f0070-8c0e-4f7f-b217-d292b738aaa6",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "ObjectReference is spelled \"URL\" in REST.  \n",
        "createdAt" : "2014-09-25T17:04:33Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "a31ef518-71e6-44e2-b23a-1f6dca3d4acd",
        "parentId" : "0c0f0070-8c0e-4f7f-b217-d292b738aaa6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hm, this is a good point. I should cause SelfLink to get filled in, that would greatly simplify constructing this object.\n",
        "createdAt" : "2014-09-25T18:02:17Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "211f6b5e-ad6f-43a9-a506-ad2376417ded",
        "parentId" : "0c0f0070-8c0e-4f7f-b217-d292b738aaa6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think it still makes sense to have this be more than just a URL-- ResourceVersion and FieldPath (or equivalent) wouldn't show up in a URL. Or should they?\n",
        "createdAt" : "2014-09-25T18:03:42Z",
        "updatedAt" : "2014-09-25T18:33:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5244475f-2aac-4b79-bf4c-c2ae1c03b0e9",
        "parentId" : "0c0f0070-8c0e-4f7f-b217-d292b738aaa6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I could see both of them as query parameters, but I'm not sure that the best way to describe that for a consumer is part of a URL (unless it's opaque).  Clients of one part of the API shouldn't have to know how to generate URLs to another unless that URL is guaranteed forever.\n\n----- Original Message -----\n\n> > @@ -621,3 +613,58 @@ type ServerOpList struct {\n> >  }\n> > \n> >  func (*ServerOpList) IsAnAPIObject() {}\n> > +\n> > +// ObjectReference contains enough information to let you inspect or\n> > modify the referred object.\n> > +type ObjectReference struct {\n> \n> I think it still makes sense to have this be more than just a URL--\n> ResourceVersion and FieldPath (or equivalent) wouldn't show up in a URL. Or\n> should they?\n",
        "createdAt" : "2014-09-25T20:36:55Z",
        "updatedAt" : "2014-09-25T20:36:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "283eaf3931322cee7f793052dcbbbdb87951fb21",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +616,620 @@\n// ObjectReference contains enough information to let you inspect or modify the referred object.\ntype ObjectReference struct {\n\tKind            string `json:\"kind,omitempty\" yaml:\"kind,omitempty\"`\n\tName            string `json:\"name,omitempty\" yaml:\"name,omitempty\"`"
  },
  {
    "id" : "0f1ab447-3e55-4ef8-b003-5a9d25164830",
    "prId" : 1337,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01ea689f-cd3e-44f8-948d-65d6b71edb9a",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "How should a user debug when they have violated this rule?  \n",
        "createdAt" : "2014-09-26T05:36:27Z",
        "updatedAt" : "2014-10-09T03:04:11Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "9974a222-ac52-47e9-aa79-23ff6476193a",
        "parentId" : "01ea689f-cd3e-44f8-948d-65d6b71edb9a",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Okay.  I see the validation in the replication controller. \n",
        "createdAt" : "2014-09-26T05:43:18Z",
        "updatedAt" : "2014-10-09T03:04:11Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec25f3b8121a25242c6743a0bbdaa90df8d1536",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +118,122 @@// A GCE PD must exist and be formatted before mounting to a container.\n// The disk must also be in the same GCE project and zone as the kubelet.\n// A GCE PD can only be mounted as read/write once.\ntype GCEPersistentDisk struct {\n\t// Unique name of the PD resource. Used to identify the disk in GCE"
  },
  {
    "id" : "c03843ab-7d41-49d2-a999-36bb52d697e6",
    "prId" : 1199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4276019-4a36-43e3-b934-9a411dc903fb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Uh... Isn't the current ID field going to be where we put UUIDs? Why are we making another field?\n",
        "createdAt" : "2014-09-08T06:00:41Z",
        "updatedAt" : "2014-09-08T21:24:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "128f852e-36c7-4c2e-8f42-ad001a29cfe4",
        "parentId" : "a4276019-4a36-43e3-b934-9a411dc903fb",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Current ID is used for PodName by default. If it is absent, the system generate a UUID for it as a name. You can see without this PR, if a pod defined with a name, there is no UUID associated with it at all. \n",
        "createdAt" : "2014-09-08T16:13:51Z",
        "updatedAt" : "2014-09-08T21:24:29Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ace5a3e8326ac31e0a9175f19ff87e64ffb40d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +59,63 @@\t// with the API refactoring. It is required for now to determine the instance\n\t// of a Pod.\n\tUUID       string      `yaml:\"uuid,omitempty\" json:\"uuid,omitempty\"`\n\tVolumes    []Volume    `yaml:\"volumes\" json:\"volumes\"`\n\tContainers []Container `yaml:\"containers\" json:\"containers\"`"
  },
  {
    "id" : "a4bb551e-7ccf-4391-8325-2b2bfaef1ec0",
    "prId" : 1147,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hm, I don't feel like this switch to using types instead of an enum is good, given the tools we have. The enum was simple and clear.\n",
        "createdAt" : "2014-09-03T17:50:03Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "56547776-ceda-4e6f-b5b0-ca555d88f9ff",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You're basically counting on the json package to encode the difference between a null and a struct with no contents, which I'm uncomfortable with.\n",
        "createdAt" : "2014-09-03T17:51:34Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a1edd846-5615-42b7-83e9-1f8b3483bbb1",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If you want to do it this way, I think you have to embed inside a runtime.Object.\n",
        "createdAt" : "2014-09-03T18:00:42Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4b8b93c1-a067-41aa-8185-7cf2df816510",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Please see my comment above to @csrwng. I made this change based on Tim's comment in a separate thread. We had this kind of arguments a lot internally before. :-)\n\nI am looking into runtime.Object.\n",
        "createdAt" : "2014-09-03T18:46:13Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "9f786f18-5326-48f0-8711-52ffcf81282e",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I feel quite strongly that we shouldn't do it this way. Explanation later.\n",
        "createdAt" : "2014-09-03T20:00:34Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0ccf57db-4900-4caf-b728-a7e751a7db5e",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Isn't this exactly the pattern we use for things like LivenessProbe and Handler (and didn't we just argue Brendan out of a 'type' field?)\n",
        "createdAt" : "2014-09-04T00:12:37Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cdc45738-af1c-4037-8dcf-caea87682325",
        "parentId" : "ce6adbd0-19c6-40a4-b997-74e07fc1b2eb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Discussed IRL - we'll do this for now and propose a more general approach later.\n",
        "createdAt" : "2014-09-06T04:40:55Z",
        "updatedAt" : "2014-09-09T05:41:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "15cab4d0531b5e2e75c3addb0b5e41fb14e44af8",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +256,260 @@type PodInfo map[string]docker.Container\n\ntype RestartPolicyAlways struct{}\n\n// TODO(dchen1107): Define what kinds of failures should restart."
  },
  {
    "id" : "6ad91392-2baa-44f3-ab0b-71c85b2832fd",
    "prId" : 1147,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b144a6a0-5a1d-450c-b2de-33ff1f5fbd34",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If we don't have any options for anything, then once again I feel like I must vote for strings over the empty policy struct.\n",
        "createdAt" : "2014-09-09T06:48:38Z",
        "updatedAt" : "2014-09-09T06:48:38Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a9c36f0c-e9e4-42d2-9c79-ed894dd7635a",
        "parentId" : "b144a6a0-5a1d-450c-b2de-33ff1f5fbd34",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@lavalamp How about we leave this PR as is, and then have the debate about the policy struct. v1beta3 will be a breaking change. We can change it then.\n",
        "createdAt" : "2014-09-09T14:42:22Z",
        "updatedAt" : "2014-09-09T14:42:22Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "44c828a0-0fe6-43b3-9c1f-cab38b712397",
        "parentId" : "b144a6a0-5a1d-450c-b2de-33ff1f5fbd34",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yes.  I declare the bikeshedding over, for now.\n",
        "createdAt" : "2014-09-09T21:43:05Z",
        "updatedAt" : "2014-09-09T21:43:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "15cab4d0531b5e2e75c3addb0b5e41fb14e44af8",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +262,266 @@type RestartPolicyOnFailure struct{}\n\ntype RestartPolicyNever struct{}\n\ntype RestartPolicy struct {"
  },
  {
    "id" : "a6b68217-3201-497b-8109-f4936fcbfeaf",
    "prId" : 1041,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62f0ee89-7604-49fe-8a24-2a0001c47b24",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Update comments, too.\n",
        "createdAt" : "2014-08-26T21:38:02Z",
        "updatedAt" : "2014-09-02T22:14:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "906ccafc-2b11-496a-a7bb-61cc9fa6302d",
        "parentId" : "62f0ee89-7604-49fe-8a24-2a0001c47b24",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-08-26T21:45:57Z",
        "updatedAt" : "2014-09-02T22:14:18Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd9ecf5b794594e9654c82962e246217db324f02",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\n// HTTPGetAction describes an action based on HTTP Get requests.\ntype HTTPGetAction struct {\n\t// Optional: Path to access on the HTTP server.\n\tPath string `yaml:\"path,omitempty\" json:\"path,omitempty\"`"
  },
  {
    "id" : "286606f1-c58d-4bcc-bfc7-8933ac78dd5b",
    "prId" : 958,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f08fc01-813c-4d68-8bc9-bd372be47e52",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "fix comment in v1beta1/types.go, too?\n",
        "createdAt" : "2014-08-19T22:35:57Z",
        "updatedAt" : "2014-08-19T22:45:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8e03850f-7f37-4d4f-af1a-fbd623ebe576",
        "parentId" : "0f08fc01-813c-4d68-8bc9-bd372be47e52",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Ahh, how come I forget this one? :-P Done!\n",
        "createdAt" : "2014-08-19T22:45:35Z",
        "updatedAt" : "2014-08-19T22:45:35Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a2365b323ecb87c587ac493b87422d153f91c7b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +100,104 @@\t// in a pod must have a unique name.\n\tName string `yaml:\"name,omitempty\" json:\"name,omitempty\"`\n\t// Optional: If specified, this must be a valid port number, 0 < x < 65536.\n\tHostPort int `yaml:\"hostPort,omitempty\" json:\"hostPort,omitempty\"`\n\t// Required: This must be a valid port number, 0 < x < 65536."
  },
  {
    "id" : "7eb98715-3715-4279-8106-e370f4527c0b",
    "prId" : 592,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "parentId" : null,
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "This feels weird from a Mesos scheduler perspective, since when a Mesos scheduler decides which machine to run its pod on, it will tell the Mesos master to launchTask, which will then tell the slave to download the kubelet/executor and call runTask. We wouldn't want to do the binding/pod-assignment through etcd itself, since we need the Mesos master to be able to do resource accounting for the task/pod being launched.\nOr maybe I'm misunderstanding what it means to \"cause a pod to be bound to a host.\" If this just means announcing which machine a pod will be/is launched on, then a Mesos scheduler could announce its binding either once the scheduling decision is made (Assigned) or after the kubelet is ready to run the task (Task_Starting in Mesos TaskStates). But we would not want the Binding object itself to be expected to be the driver of actually launching a pod.\n",
        "createdAt" : "2014-08-01T09:12:59Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "3c56e88d-2b00-4d4b-85b7-ff9f8d3a5732",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The model I was going by is that:\n1. A scheduler writes this binding.\n2. The apiserver atomically writes the pod's containers to the key in etcd that the kubelet in question is watching.\n3. The \"atomic\" part there means that:\n   a. It reads the list of containers\n   b. Sums their resource requests\n   c. Verifies that the new containers fit\n   d. Writes the new containers. If this fails because the list has changed in the meantime, it starts over at a. If the containers don't fit, then writing the binding fails.\n4. Kubelet is watching the key and begins starting the containers.\n\nOnly kubelet knows how to actually launch a pod, and I think we want to keep it that way. We also want to push resource usage prediction and similar things down into kubelet.\n\nIt's not clear to me that the Mesos model you described is actually incompatible with this.\n",
        "createdAt" : "2014-08-01T17:05:21Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "37307a2f-b2c9-453e-9290-e0d324cbad9a",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "The missing piece here is that there may not be a Kubelet already running on a Mesos slave initially, so I think we'll first go through a message cycle where KubernetesMesosScheduler calls MesosMaster.launchTask (to allocate the resources to Kubernetes) which calls MesosSlave.runTask (to download and launch the Kubelet + Executor, if necessary). Then either the KubernetesMesosExecutor or KubernetesMesosScheduler can write the Binding, triggering the (now running) Kubelet to observe the Binding and start the pod.\nThanks for the clarification. I think we can work with this model for now, but I can imagine a future where Mesos would want to launch pods itself. We can cross that bridge if/when we get to it.\n",
        "createdAt" : "2014-08-05T09:15:59Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "c39ad737-996d-4c91-89ec-f79f141b4412",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, so one last piece of the puzzle: writing the binding causes a state to change in etcd, _not_ an RPC to kubelet. Kubelet monitors etcd. kubelet itself does not have to be running at the moment when the binding is written. So the below works fine:\n1. T0: Binding is written\n   a. k8s master: atomically ensure capacity on the host and write containers to the etcd key /registry/hosts/<hostname>/kubelet, or reject the binding.\n2. T1: Kubelet launches/recovers from crash/etc\n3. T2: Kubelet watches /registry/hosts/<kubelethostname>/kubelet for containers it should be running\n\nI believe this means you don't need to worry about startup order at all, which sounds like it will greatly simplify what you're doing.\n",
        "createdAt" : "2014-08-05T17:43:00Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "986996cf-a6a3-4d89-9514-d5ea41da14ce",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "At T0, if no Kubelet is running on that host, how will the k8s master \"ensure capacity\" on the host?\n\nThe Mesos master needs to do its resource allocation/assignment before it allows the kubelet to launch the pod (even if the kubelet is already running/watching), or else another framework (Spark, Marathon, etc.) could launch a task on the same resource offer. So the KubernetesMesosScheduler will at least have to claim the pod's resources with the MesosMaster before writing the Binding.\n",
        "createdAt" : "2014-08-05T17:58:15Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "2385e94f-0014-4094-8bea-c7bbad93e673",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess I would view writing a binding as the act of attempting to claim resources. If this needs to result in a claim in the Mesos system, then we need to add a hook or something. Having two such claiming steps seems racy to me. (I suppose another alternative is to allocate/claim the resources in Mesos, and then write the binding to k8s as a formality to get the master to assign the pod to the kubelet. You could report infinite/very large resources on the kubelet to make k8s master's check always pass. However, this would potentially make k8s' hypothetical admission logic not know what it has resources to run.)\n\n> At T0, if no Kubelet is running on that host, how will the k8s master \"ensure capacity\" on the host?\n\nWe'll need to have a previously stored record of the host's capacity. Then we can add up the containers assigned to it and compare. We haven't developed a capacity reporting system at all yet. It sounds like to make this work, we'd need Mesos to update this in response to other frameworks claiming the resources. I'm really not sure how that would work within Mesos.\n\n(Keep in mind I'm thinking out loud here.)\n",
        "createdAt" : "2014-08-05T18:58:04Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a52478d6-8300-40de-82cc-6bc97ba7f96b",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "One question this conversation brings up for me is, which system should be the source of truth for resource accounting? And should this source be pluggable in K8S?  Mesos is already (among other things) a generic resource broker.\n",
        "createdAt" : "2014-08-05T19:54:11Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "8993b97f-9040-4140-9ae9-f4e9184bedcc",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It is certainly conceivable that we could make this pluggable.\n",
        "createdAt" : "2014-08-05T20:01:42Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "411f055b-c39b-428d-a80c-912b4b168044",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "In our world, the Mesos master will be responsible for allocating resources between frameworks, and then the Kubernetes master will allocate them to pods within the K8s framework. So, first we'll need to let the Mesos master claim the resources for K8s, then K8s can claim them for a particular pod.\n\nAs for updating the K8s-master's notion of capacity on each host, we could update a node's K8s resource capacity once new resources have been claimed for K8s within Mesos, and then write the Binding. This way, the Binding's capacity check should pass, but K8s will otherwise see itself as operating at capacity (until new resources are allocated to it).\n(Also thinking out loud)\n",
        "createdAt" : "2014-08-05T20:13:02Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "9fbe94af-5385-483c-8fa3-a157ee58ab68",
        "parentId" : "7ac4a946-8e13-429f-ac4c-616ab5467f80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That would probably work, even if it's a bit rube-goldberg-like. I'm concerned that k8s master may reject the pod to begin with due to thinking it's at capacity, though.\n",
        "createdAt" : "2014-08-05T20:26:11Z",
        "updatedAt" : "2014-08-11T02:06:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d605467dc0926f07fd9825e754589d4c026b3ce",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +336,340 @@}\n\n// Binding is written by a scheduler to cause a pod to be bound to a host.\ntype Binding struct {\n\tJSONBase `json:\",inline\" yaml:\",inline\"`"
  },
  {
    "id" : "4c6e8359-b58e-4378-ab3f-e6955f617823",
    "prId" : 571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Correct me if I'm wrong, but this is schema change in etcd (kubelet will no longer correctly deserialize the old format)?  Do we need to do something concrete to warn users of the old schema and inform them they need to reschedule everything?  Or should we have a deprecated code bath that handles the old deserialization?\n",
        "createdAt" : "2014-07-23T19:06:35Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9549134f-b086-4614-85d4-d487492bdd6b",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also, this is a change that needs new kubelets prior to new apiservers when doing an upgrade.\n",
        "createdAt" : "2014-07-23T19:09:23Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9ea5375d-c870-4e4a-84ea-95b352beee41",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, it's two schema changes in etcd (Endpoints changes, too).\n\nHm. That may be a good idea. If we had the reconciliation loop that I wanted in apiserver, it wouldn't be a problem, but we don't. Let me think about this while I grab lunch.\n",
        "createdAt" : "2014-07-23T19:09:44Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "10fbbfba-045a-46fb-bc5b-793506053afe",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yeah, we really don't want to break old kubelets - or if we do that we do\nit all at once, one time.\nOn Jul 23, 2014 12:09 PM, \"Daniel Smith\" notifications@github.com wrote:\n\n> In pkg/api/types.go:\n> \n> > @@ -58,6 +58,12 @@ type ContainerManifest struct {\n> >     Containers []Container `yaml:\"containers\" json:\"containers\"`\n> >  }\n> > \n> > +// ContainerManifestList is used to communicate container manifests to kubelet.\n> > +type ContainerManifestList struct {\n> \n> Yes, it's two schema changes in etcd (Endpoints changes, too).\n> \n> Hm. That may be a good idea. If we had the reconciliation loop that I\n> wanted in apiserver, it wouldn't be a problem, but we don't. Let me think\n> about this while I grab lunch.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/571/files#r15308571\n> .\n",
        "createdAt" : "2014-07-23T19:12:17Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b11a1235-fd53-4c4f-9968-97336a00de72",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Version keyspace in etcd.... :)\n",
        "createdAt" : "2014-07-23T19:22:12Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bc0f7581-c108-4142-a406-1a7749855e1f",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think this change+brendan's other change may be appropriate for the (hopefully) last ever breakage of kubelets. This is because together they add versioning to etcd, which is the thing that one ideally needs to solve exactly this kind of problem. What do you guys think?\n\nVersioning the keyspace in etcd is not a bad idea and probably the easiest way to fix this, but then we'll have weird things like storing a version both in the path and in all the objects we store, which I'm not sure we want.\n",
        "createdAt" : "2014-07-23T19:44:41Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "97445854-fc35-4b5e-ae39-9ab837a95f49",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Last ever breakage unless we need to change names or split resources.  Keyspace is overkill I think, but perhaps we'd like to adjust the registry names coincidentally at this time for future proofing?  I.e. is \"kubelet\" really the correct key name for this item?\n",
        "createdAt" : "2014-07-23T20:47:34Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b6784493-011d-46d7-b4db-818b06e59ce2",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "In the interest of expediency, I vote we don't hold this & brendan's change up while debating the best name for the key.\n",
        "createdAt" : "2014-07-23T22:14:50Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e7c09c60-8ce4-47c3-98bf-b68d2fe1e2c1",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Sorry, I was implying that from the perspective of avoiding breaking old kubelets that cannot decode the old value (since arguments hadn't settled on breaking old kubelets).  If we're willing to break old kubelets anyway a rename at this time would make sense.  If we aren't willing to break old kubelets we'd need to write to two locations anyway.\n",
        "createdAt" : "2014-07-23T22:30:05Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b75f8cda-2407-4625-91c2-8c2fa3a7a329",
        "parentId" : "1400d9dc-00d1-40d9-9053-1af0c1bbdf85",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, I see what you're saying :)\n\nI don't think a name change buys us that much unless we also write something to convert old to new.\n",
        "createdAt" : "2014-07-23T22:34:20Z",
        "updatedAt" : "2014-07-29T22:47:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2396bdfa1be503d8a3b267e3b3eb6af21053969e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +60,64 @@\n// ContainerManifestList is used to communicate container manifests to kubelet.\ntype ContainerManifestList struct {\n\tJSONBase `json:\",inline\" yaml:\",inline\"`\n\tItems    []ContainerManifest `json:\"items,omitempty\" yaml:\"items,omitempty\"`"
  },
  {
    "id" : "4e2b0343-81fd-43ce-92ae-30e21ce25fad",
    "prId" : 557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9913a1ad-445e-49bc-bb09-8c5e87f1fbf0",
        "parentId" : null,
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "stopped, or was rejected before it even started running, or has been disconnected and is considered lost (for now; what about when it comes back?)\n",
        "createdAt" : "2014-08-01T08:50:38Z",
        "updatedAt" : "2014-08-11T22:13:58Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "85a4d332-1111-42d0-8846-60327a00d7ad",
        "parentId" : "9913a1ad-445e-49bc-bb09-8c5e87f1fbf0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Per what @bgrant0607 was sayaing, we'll disambiguate those cases with a StatusReason/StatusDetails field, to be added in another PR.\n",
        "createdAt" : "2014-08-01T17:44:17Z",
        "updatedAt" : "2014-08-11T22:13:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a6e1d2e1-4271-4c0e-84d8-fb389fd5f582",
        "parentId" : "9913a1ad-445e-49bc-bb09-8c5e87f1fbf0",
        "authorId" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "body" : "Sure. I was just pointing out that the comment (and name \"Stopped\") isn't 100% accurate, since it might never have been \"Running\", or it may in fact still be running, but in a disconnected mode. Not sure I have a better name that encompasses all terminal states. In Mesos, we use \"Lost\" to indicate alternative non-running states.\n",
        "createdAt" : "2014-08-05T08:48:52Z",
        "updatedAt" : "2014-08-11T22:13:58Z",
        "lastEditedBy" : "911fae49-4bfc-49cb-815b-bf168e470d24",
        "tags" : [
        ]
      },
      {
        "id" : "ce6b1ccc-7199-4bdc-968f-218ec39d9611",
        "parentId" : "9913a1ad-445e-49bc-bb09-8c5e87f1fbf0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I did change it to Terminated, which is admittedly not much different. I view both words as a current state and not carrying the implication that it previously was in a Running state. E.g., a pod could go directly from waiting to terminated under some unfortunate circumstances. \"Lost\" sounds like it's always a bad thing to me, whereas \"Terminated\" sounds like it could normal or bad depending on exactly why.\n",
        "createdAt" : "2014-08-05T17:20:50Z",
        "updatedAt" : "2014-08-11T22:13:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5352a81c795ee18fde3da694a22d1ebcc383491",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +213,217 @@\t// PodRunning means that the pod is up and running.\n\tPodRunning PodStatus = \"Running\"\n\t// PodTerminated means that the pod has stopped.\n\tPodTerminated PodStatus = \"Terminated\"\n)"
  },
  {
    "id" : "8103f1af-37a0-4712-ae0e-5644e4973da1",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93157e8f-ab8b-4100-8092-8dd362e539d0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is this is Host directory in the sense of the REAL host, or in the sense of what the default Volume struct is today.  Comment on this should be clearer.\n",
        "createdAt" : "2014-07-15T20:12:32Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +81,85 @@}\n\n// Bare host directory volume.\ntype HostDirectory struct {\n\tPath string `yaml:\"path\" json:\"path\"`"
  },
  {
    "id" : "128f23dc-fc61-4015-b21f-65dc79896110",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9cd288d-7f14-4ce3-b0a2-54d467ac4e89",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should capture today's default behavior as an Empty or EmptyDir or something.  The actual structure has no fields, but this makes the API absolutely explicit.\n",
        "createdAt" : "2014-07-15T20:21:05Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// Required: This must be a DNS_LABEL.  Each volume in a pod must have\n\t// a unique name.\n\tName string `yaml:\"name\" json:\"name\"`\n\t// Source represents the location and type of a volume to mount.\n\t// This is optional for now. If not specified, the Volume is implied to be an EmptyDir."
  },
  {
    "id" : "57a9e72a-a512-4ad8-a505-7d3c39e66cd5",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10b78f92-d2af-4c3e-b25c-61ca14f8a875",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Design question:  Should we wrap all of the \"kinds\" of sources into a struct Source or struct What?  This makes the JSON look more like:\n\n```\n{\n  \"name\": \"foo\"\n  \"source\": {\n        \"hostDir\": {\n            \"path\": \"/proc\"\n        }\n    }\n}\n```\n\nWe don't have to do it, but it has the nice property that the one-of is contained in a structure.\n",
        "createdAt" : "2014-07-15T20:29:02Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0e3f206a-08fc-4fab-a913-d7cd0548068f",
        "parentId" : "10b78f92-d2af-4c3e-b25c-61ca14f8a875",
        "authorId" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "body" : "I think this decision will help us later down the road when we want to add options for where we want to mount volumes (tmpfs vs disk,etc) and clarifies exactly what is needed to differentiate source types. I'll update the api to reflect this.\n",
        "createdAt" : "2014-07-15T21:29:08Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@\t// TODO(jonesdl) We need to restrict who can use host directory mounts and\n\t// who can/can not mount host directories as read/write.\n\tHostDirectory *HostDirectory `yaml:\"hostDir\" json:\"hostDir\"`\n\t// EmptyDirectory represents a temporary directory that shares a pod's lifetime.\n\tEmptyDirectory *EmptyDirectory `yaml:\"emptyDir\" json:\"emptyDir\"`"
  },
  {
    "id" : "a3b4e445-e4bf-44d6-a25e-82e581edf7d8",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e00382bc-2f31-4954-9f85-d9672e392ca5",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "blank line above\n",
        "createdAt" : "2014-07-16T21:31:21Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +81,85 @@}\n\n// Bare host directory volume.\ntype HostDirectory struct {\n\tPath string `yaml:\"path\" json:\"path\"`"
  },
  {
    "id" : "6a7fdb58-368a-4ed5-b901-12101a44f31e",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875c681d-cc67-4b11-9cda-8661f9861206",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment: This is optional for now.  If not specified, the Volume is implied to be an EmptyDir.  This implied behavior is deprecated and will be removed in a future version.\n",
        "createdAt" : "2014-07-16T21:34:22Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3129eeea-01ff-42d3-9167-4ddd88d0c0c6",
        "parentId" : "875c681d-cc67-4b11-9cda-8661f9861206",
        "authorId" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "body" : "Done.\n",
        "createdAt" : "2014-07-16T23:00:32Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +63,67 @@\t// a unique name.\n\tName string `yaml:\"name\" json:\"name\"`\n\t// Source represents the location and type of a volume to mount.\n\t// This is optional for now. If not specified, the Volume is implied to be an EmptyDir.\n\t// This implied behavior is deprecated and will be removed in a future version."
  },
  {
    "id" : "9ef1fba6-c8e9-4513-8e61-5c3a3215d503",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e0cf352-39ab-4075-9ad6-05c57422c1d7",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "TODO(thockin): Lock this down so it can;t be abused\n",
        "createdAt" : "2014-07-17T05:29:05Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +73,77 @@\t// HostDirectory represents a pre-existing directory on the host machine that is directly\n\t// exposed to the container. This is generally used for system agents or other privileged\n\t// things that are allowed to see the host machine. Most containers will NOT need this.\n\t// TODO(jonesdl) We need to restrict who can use host directory mounts and\n\t// who can/can not mount host directories as read/write."
  },
  {
    "id" : "af361bac-2d16-4cb1-8849-2601ecea31ba",
    "prId" : 452,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d923002-6363-4e3b-8f86-57561632ec20",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Recommendation, possibly for a future PR:\n\nMake a VolumeSource interface, with several struct implementations. I think that, if we register the types, we may not even have to write yaml/JSON setters to make it work. I don't really care for the fake enum in the VolumeSource struct.\n",
        "createdAt" : "2014-07-17T20:40:16Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "95f4864b-4f3a-4dbf-9f49-0d5ea57b3249",
        "parentId" : "7d923002-6363-4e3b-8f86-57561632ec20",
        "authorId" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "body" : "I don't think an Interface would work well here or even when we pass the api parameters to the internal volume representation. If we choose to use an interface here, I think we can only unmarshal to an empty interface{}. This would either require a whole lot of reflection to differentiate types or a method(s) that exposes members of the struct in an array/map. This also becomes more difficult to validate since we wont have access to members directly.\n",
        "createdAt" : "2014-07-17T21:15:22Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "5047b1e4-a97e-4cdf-96ee-2e59b9b3fe43",
        "tags" : [
        ]
      },
      {
        "id" : "6b27191e-f97b-4222-9100-d52117010a0f",
        "parentId" : "7d923002-6363-4e3b-8f86-57561632ec20",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I meant an interface{}. And no reflection should be required; it'd be as simple as:\nswitch concrete := volume.VolumeSource.(type) {\ncase api.EmptyDir: ...\ncase api.HostDir: ...\ndefault:\n  // reject invalid VolumeSource\n}\n\nHm, complication: I keep forgetting that encoding/json doesn't have gob's http://golang.org/pkg/encoding/gob/#Register. That may mean we'd have to implement http://golang.org/pkg/encoding/json/#Unmarshaler to make it work. At any rate, this can be changed when we accumulate some more volume sources.\n",
        "createdAt" : "2014-07-17T21:23:29Z",
        "updatedAt" : "2014-07-17T22:26:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb2843498df6d534741fa7554bc36502dc9c603a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +66,70 @@\t// This is optional for now. If not specified, the Volume is implied to be an EmptyDir.\n\t// This implied behavior is deprecated and will be removed in a future version.\n        Source *VolumeSource `yaml:\"source\" json:\"source\"`\n}\n"
  },
  {
    "id" : "48ba01ef-23fc-4a14-8bc6-522e862af591",
    "prId" : 388,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8d3149c-5153-46c0-b8cc-a6ef32bffea3",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "One unpleasant aspect of this is that Container is now no longer copyable using standard go semantics - consumers must be careful to duplicate liveness probes and health checks to ensure there are no side effects of a copy.  I mention that because a lot of the config code I'm cleaning up is using standard stack variable copy to send notifications along.  Should we bring in and fixup those places now to use deepcopy or an equivalent?\n",
        "createdAt" : "2014-07-10T14:51:43Z",
        "updatedAt" : "2014-07-11T17:16:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0661231f-544b-455d-bb60-1cf4af641728",
        "parentId" : "c8d3149c-5153-46c0-b8cc-a6ef32bffea3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Or maybe we should not b e treating Container as a value type, and instead be using pointers to it ~everywhere?  Internally we found that things like command-lines grew very large and we were surprised at how many times we were copying them and storing copies of them.  \n",
        "createdAt" : "2014-07-10T15:21:44Z",
        "updatedAt" : "2014-07-11T17:16:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ff94e364-f2da-41ef-b5d7-55a77a6474f4",
        "parentId" : "c8d3149c-5153-46c0-b8cc-a6ef32bffea3",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Yeah, I think we should treat Container as an immutable value type.  (also why won't standard copy work?  assuming that we treat it as read-only?)\n\n(also, can we get this PR submitted? ;)\n",
        "createdAt" : "2014-07-11T16:38:12Z",
        "updatedAt" : "2014-07-11T17:16:41Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "cdd4961f-0b56-41f3-84cd-94456651efc1",
        "parentId" : "c8d3149c-5153-46c0-b8cc-a6ef32bffea3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Copy does work if it's read only, I'm pretty sure there are cases in code where it's not treated as read only.  That can be sorted out separately.\n",
        "createdAt" : "2014-07-11T18:02:06Z",
        "updatedAt" : "2014-07-11T18:02:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b4dfe7d1489e5045a216f51d90f626261b49c81",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +143,147 @@\tCPU           int            `yaml:\"cpu,omitempty\" json:\"cpu,omitempty\"`\n\tVolumeMounts  []VolumeMount  `yaml:\"volumeMounts,omitempty\" json:\"volumeMounts,omitempty\"`\n\tLivenessProbe *LivenessProbe `yaml:\"livenessProbe,omitempty\" json:\"livenessProbe,omitempty\"`\n}\n"
  },
  {
    "id" : "2b4ab227-d57f-428e-adb2-37887b29a0ee",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09a8f4d8-6e2f-45a4-b938-da7cf22d7ae9",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We normally use \"grace period\" to mean the time between notification and SIGKILL. We should be passing this as the \"t\" parameter to Docker's stop operation.\n\nIf this is the probe interval, we should call it that. Also, any time-related fields should specify the units in the name, such as probeIntervalSeconds.\n\nAnd, there almost certainly needs a startup-time allowance of some sort, such as a different initial probe interval, an additional initial probe delay, or a number of initial probes that are allowed to fail without consequence. I'm fine if this gets pushed to a subsequent PR, because adding it wouldn't break compatibility, especially if one of the latter 2 approaches were taken.\n",
        "createdAt" : "2014-07-07T21:48:36Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "de81144a-50b4-4200-9582-4b80fc0043b4",
        "parentId" : "09a8f4d8-6e2f-45a4-b938-da7cf22d7ae9",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This was intended as startup allowance.  Fixed.  (probe interval is set as part of the sync-manifests loop, for now, but as I write this, I realize that's incorrect, added a TODO to fix this.)\n",
        "createdAt" : "2014-07-08T05:29:17Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "7e1985e0-6270-4790-af0a-c748a390bb79",
        "parentId" : "09a8f4d8-6e2f-45a4-b938-da7cf22d7ae9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How about initialDelaySeconds?\n\nWhat's the timeout duration? We'll eventually want that to be configurable, also.\n",
        "createdAt" : "2014-07-08T17:16:22Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "01a258df-0b77-4190-bd40-c47fef6f7292",
        "parentId" : "09a8f4d8-6e2f-45a4-b938-da7cf22d7ae9",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done for initialDelaySeconds.\n\nis timeout request timeout?  Or is it number of fails in a row before death?\n",
        "createdAt" : "2014-07-08T18:01:47Z",
        "updatedAt" : "2014-07-09T19:01:52Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : null,
    "diffHunk" : "@@ -1,1 +118,122 @@\t// HTTPGetProbe parameters, required if Type == 'http'\n\tHTTPGet HTTPGetProbe `yaml:\"httpGet,omitempty\" json:\"httpGet,omitempty\"`\n\t// Length of time before health checking is activated.  In seconds.\n\tInitialDelaySeconds int64 `yaml:\"initialDelaySeconds,omitempty\" json:\"initialDelaySeconds,omitempty\"`\n}"
  },
  {
    "id" : "1f091b6f-d23b-43d9-9d8f-ed2e24417d7e",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4852aaea-5c37-4673-842c-4076251a8301",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why is port a string?  Is this trying to say \"name or port number\" ?  What about just having two fields and saying we prefer them in a particular order?  OK to answer in a followup PR if we want to do this.\n",
        "createdAt" : "2014-07-09T23:08:29Z",
        "updatedAt" : "2014-07-09T23:08:29Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d47508dd-8451-4a10-a34e-aab62b7ce3aa",
        "parentId" : "4852aaea-5c37-4673-842c-4076251a8301",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "hrm, I kind of like one source, it makes the JSON cleaner, but I could be convinced.  What do others think?\n",
        "createdAt" : "2014-07-09T23:24:13Z",
        "updatedAt" : "2014-07-09T23:24:13Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5db3fde9-59cc-4b5f-87a7-150303a5b95d",
        "parentId" : "4852aaea-5c37-4673-842c-4076251a8301",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Ideally the same json name would be accepted as int or string and unmarshalled into PortName or PortNum fields.  I don't know if Go can do that.  I find it very inconsistent that sometimes port is an int and sometimes a string in the json.\n\nWe could write a PortNameOrNum type that had custom JSON and YAML unmarshalling code to do this.  This sounds best to me. \n",
        "createdAt" : "2014-07-09T23:42:06Z",
        "updatedAt" : "2014-07-09T23:42:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +107,111 @@\tPath string `yaml:\"path,omitempty\" json:\"path,omitempty\"`\n\t// Name or number of the port to access on the container\n\tPort string `yaml:\"port,omitempty\" json:\"port,omitempty\"`\n\t// Host name to connect to.  Optional, default: \"localhost\"\n\tHost string `yaml:\"host,omitempty\" json:\"host,omitempty\"`"
  },
  {
    "id" : "2fa983b7-faac-4231-a053-5b7356f9e835",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "465a5040-0625-4137-bdbc-f5064f582bcc",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "When would this ever not be localhost?\n",
        "createdAt" : "2014-07-09T23:08:44Z",
        "updatedAt" : "2014-07-09T23:08:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "db2b899c-ec1f-47c2-b9c9-565819892dac",
        "parentId" : "465a5040-0625-4137-bdbc-f5064f582bcc",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "@smarterclayton was making the point about implementing your own health checks, I could imagine having a centralized health monitoring service container that monitors and provides health for all of the other pods in your application.  So in that case\n\nHost: &lt;constant-host-name&gt;\nPath: /some/path/to/checker?container=foo\n\nso you could provide centralized logic for determining health.  I know seems a little far-fetched, but I think the extensibility is useful.\n",
        "createdAt" : "2014-07-09T23:26:37Z",
        "updatedAt" : "2014-07-09T23:39:25Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "71eb3006-0cde-40d5-8949-1605ad59bbac",
        "parentId" : "465a5040-0625-4137-bdbc-f5064f582bcc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is the hostname \"localhost\" the container's localhost or the VM's localhost?  What happens when/if we do truly distinct IPs per pod at the host level (no shared VM IP carrying HostPort)?  localhost is no longer correct.  Can the hostname be another container in the pod or another pod (assuming we had DNS for that)?\n\nAt the least I would argue to spec it as \"default: &lt;this container&gt;\"\n",
        "createdAt" : "2014-07-09T23:38:15Z",
        "updatedAt" : "2014-07-09T23:39:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +108,112 @@\t// Name or number of the port to access on the container\n\tPort string `yaml:\"port,omitempty\" json:\"port,omitempty\"`\n\t// Host name to connect to.  Optional, default: \"localhost\"\n\tHost string `yaml:\"host,omitempty\" json:\"host,omitempty\"`\n}"
  },
  {
    "id" : "ea1bea10-a148-43c3-ad49-8c283d5d99e1",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b4dc459-42f0-475c-8ba3-8edf825a69fe",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There will be other places where we do discriminated \"unions\".  Is this the pattern we want to follow?  I assumed it would be easier to have a set of pointers and say that only one pointer should be non-nil.  Sort of like proto.\n",
        "createdAt" : "2014-07-09T23:10:10Z",
        "updatedAt" : "2014-07-09T23:10:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7250836b-aff3-4f62-8964-1762fc7d0e6f",
        "parentId" : "9b4dc459-42f0-475c-8ba3-8edf825a69fe",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "yeah, this should probably be a pointer.  I'll send another PR.  And in general, I think that's the right approach.  Too bad Go doesn't support true Unions ;)\n",
        "createdAt" : "2014-07-09T23:27:15Z",
        "updatedAt" : "2014-07-09T23:27:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +115,119 @@\tEnabled bool `yaml:\"enabled,omitempty\" json:\"enabled,omitempty\"`\n\t// Type of liveness probe.  Current legal values \"http\"\n\tType string `yaml:\"type,omitempty\" json:\"type,omitempty\"`\n\t// HTTPGetProbe parameters, required if Type == 'http'\n\tHTTPGet HTTPGetProbe `yaml:\"httpGet,omitempty\" json:\"httpGet,omitempty\"`"
  },
  {
    "id" : "d9af1438-391d-4d8c-913d-b5b830ec7f5a",
    "prId" : 365,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb7e7950-aa69-448f-8b17-41af201647d6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Another precedent: Do we want to indicate presence of optional structs like this as each having an \"Enabled\" field?  Or by pointers and nil?\n",
        "createdAt" : "2014-07-09T23:11:17Z",
        "updatedAt" : "2014-07-09T23:11:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e96e01e4-e531-414f-ba97-00c17c8ab8d8",
        "parentId" : "bb7e7950-aa69-448f-8b17-41af201647d6",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Don't care to strongly.  Thoughts from others?\n",
        "createdAt" : "2014-07-09T23:27:38Z",
        "updatedAt" : "2014-07-09T23:27:38Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "41c6680943c620b90c598dc6d12a817cfb625820",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +140,144 @@\tCPU           int           `yaml:\"cpu,omitempty\" json:\"cpu,omitempty\"`\n\tVolumeMounts  []VolumeMount `yaml:\"volumeMounts,omitempty\" json:\"volumeMounts,omitempty\"`\n\tLivenessProbe LivenessProbe `yaml:\"livenessProbe,omitempty\" json:\"livenessProbe,omitempty\"`\n}\n"
  },
  {
    "id" : "edd0ab11-9e5c-4bdf-9773-c0fb98ed2b3c",
    "prId" : 333,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a6494fc-6b9c-4717-a986-20bd7813aff3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You missed a \"name\" inside the json field. We really need a thingy that sets all fields, marshals and unmarshals to catch these.\n",
        "createdAt" : "2014-07-02T16:34:42Z",
        "updatedAt" : "2014-07-02T16:34:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2a27dd4c-c1e8-46cc-bb18-4eb02186992b",
        "parentId" : "4a6494fc-6b9c-4717-a986-20bd7813aff3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will fix and send.  dammit.\n\nOn Wed, Jul 2, 2014 at 9:34 AM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/types.go:\n> \n> > ```\n> > Name string `yaml:\"name\" json:\"name\"`\n> > ```\n> > -   Key  string `yaml:\"key,omitempty\" json:\"name,omitempty\"`\n> \n> You missed a \"name\" inside the json field. We really need a thingy that\n> sets all fields, marshals and unmarshals to catch these.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/333/files#r14467915\n> .\n",
        "createdAt" : "2014-07-02T17:29:18Z",
        "updatedAt" : "2014-07-02T17:29:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "839f2aed7bfcafe3ec7d7d3c0067505c21755a3c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +96,100 @@\t// DEPRECATED: EnvVar.Key will be removed in a future version of the API.\n\tName string `yaml:\"name\" json:\"name\"`\n\tKey  string `yaml:\"key,omitempty\" json:\"name,omitempty\"`\n\t// Optional: defaults to \"\".\n\tValue string `yaml:\"value,omitempty\" json:\"value,omitempty\"`"
  },
  {
    "id" : "0b4e63d8-bbcc-428c-9139-8c2168f53e80",
    "prId" : 312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e2fabe-6a36-4cb8-8ea8-cac645ef15a2",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "nit: gofmt doesn't handle comments well... Can you manually align string and `yaml:...` with the lines below for easier scanning?\n",
        "createdAt" : "2014-07-01T03:18:56Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5f0b02df-5865-4b51-bb56-544d140f88d0",
        "parentId" : "76e2fabe-6a36-4cb8-8ea8-cac645ef15a2",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Actually, nm.  That's probably not sustainable, as gofmt will likely just re-scamble it.  _sigh_\n",
        "createdAt" : "2014-07-01T03:19:54Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "6faae78b-63b4-4298-8e03-39ebf60c8cf3",
        "parentId" : "76e2fabe-6a36-4cb8-8ea8-cac645ef15a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yeah, I noticed that it screws up when a comment comes between.  Ignoring for now.\n",
        "createdAt" : "2014-07-01T04:52:22Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc49a02c316a2778e828e9963166f8e2024103a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +47,51 @@type ContainerManifest struct {\n\t// Required: This must be a supported version string, such as \"v1beta1\".\n\tVersion string `yaml:\"version\" json:\"version\"`\n\t// Required: This must be a DNS_SUBDOMAIN, 255 characters or less.\n\tID         string      `yaml:\"id\" json:\"id\"`"
  },
  {
    "id" : "ec570d87-0c9c-4b6f-8816-797695aca3d2",
    "prId" : 312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c24bdd4c-2483-4baa-95f6-19aec470037f",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Meta point, we should try to figure out how to integrate this w/ the .raml file so that they stay in sync.\n",
        "createdAt" : "2014-07-01T03:20:56Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "033cffe0-8327-4a14-8015-126e832469da",
        "parentId" : "c24bdd4c-2483-4baa-95f6-19aec470037f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'll update that schema as part of this patchset.  Would you prefer to just leave comments out of this file and point people at the RAML/HTML?\n",
        "createdAt" : "2014-07-01T04:55:33Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "756471c6-3810-498a-b6e3-8cca5d03c3ac",
        "parentId" : "c24bdd4c-2483-4baa-95f6-19aec470037f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'll have to figure out how to express formatting in RAML...\n",
        "createdAt" : "2014-07-01T04:56:11Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "845fe4d6-9558-427b-9805-5433c8ca38a8",
        "parentId" : "c24bdd4c-2483-4baa-95f6-19aec470037f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I would prefer that comments be in this file, so they show up in godoc. Maybe we could write a script to instead generate the RAML from here? ;)\n",
        "createdAt" : "2014-07-01T16:14:18Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6421c5c8-61aa-4792-b709-ea171d152614",
        "parentId" : "c24bdd4c-2483-4baa-95f6-19aec470037f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Or make all of these be end-of-line comments (on multiple lines?  yick)\n\nOn Tue, Jul 1, 2014 at 9:14 AM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/api/types.go:\n> \n> > @@ -16,34 +16,70 @@ limitations under the License.\n> > \n> >  package api\n> > \n> > +// Common string formats\n> \n> I would prefer that comments be in this file, so they show up in godoc.\n> Maybe we could write a script to instead generate the RAML from here? ;)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/312/files#r14413581\n> .\n",
        "createdAt" : "2014-07-01T16:34:55Z",
        "updatedAt" : "2014-07-01T20:59:10Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bc49a02c316a2778e828e9963166f8e2024103a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +17,21 @@package api\n\n// Common string formats\n// ---------------------\n// Many fields in this API have formatting requirements.  The commonly used"
  },
  {
    "id" : "3a43a940-a66f-4346-a48e-8eaec77cc33d",
    "prId" : 174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77fbd354-498b-43cd-8480-d7d7312abb81",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Why do we need to use percentiles?  I view percentiles as something that you may chose to use in a UI for readability, but not as an internal representation for data.\n",
        "createdAt" : "2014-10-29T20:19:27Z",
        "updatedAt" : "2014-10-29T20:19:27Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a64856d0ce30c8cdc25a8e9fd0d2eb64739da",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +74,78 @@}\n\n// ContainerStats represents statistical information of a container\ntype ContainerStats struct {\n\tCpuUsagePercentiles    []Percentile `json:\"cpu_usage_percentiles,omitempty\"`"
  },
  {
    "id" : "66647d98-eb95-4634-ab70-0ecbe502b605",
    "prId" : 174,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bcbdfd0-56d8-48e9-bb4a-a4dd2259b7d3",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If you are going to expose this in the public API, please clearly document the meaning of the measurements.\n- What is the denominator of the percentage?  Of the container's reservation? Its limit? \n- Over what time period is the information averaged or maxed?  When was this measurement taken?\n",
        "createdAt" : "2014-10-29T20:23:41Z",
        "updatedAt" : "2014-10-29T20:23:41Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a64856d0ce30c8cdc25a8e9fd0d2eb64739da",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +75,79 @@\n// ContainerStats represents statistical information of a container\ntype ContainerStats struct {\n\tCpuUsagePercentiles    []Percentile `json:\"cpu_usage_percentiles,omitempty\"`\n\tMemoryUsagePercentiles []Percentile `json:\"memory_usage_percentiles,omitempty\"`"
  },
  {
    "id" : "37f5a495-074e-4ed2-9f16-40b79f33db0d",
    "prId" : 164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "785e195f-5374-432d-bf6c-96d28e576f1c",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "indents seem messed up here.  gofmt?\n",
        "createdAt" : "2014-06-19T03:08:28Z",
        "updatedAt" : "2014-06-19T20:33:41Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "44886e29-9f64-447e-ad4e-e8459a38966d",
        "parentId" : "785e195f-5374-432d-bf6c-96d28e576f1c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'll double check, but I'm pretty sure that's just the way gofmt does things. I always thought it was weird how it lines up anonymous member's tags.\n",
        "createdAt" : "2014-06-19T04:03:55Z",
        "updatedAt" : "2014-06-19T20:33:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "75800d8e-1f28-402c-bfa5-614ea09007b8",
        "parentId" : "785e195f-5374-432d-bf6c-96d28e576f1c",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Ah, I had expected the types to line up, but I think that the comments and line separators disrupt the alignment for gofmt (that's kind of weird, I think, but likely how it works.\n",
        "createdAt" : "2014-06-19T04:11:21Z",
        "updatedAt" : "2014-06-19T20:33:41Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "4d073443-6e72-42d2-9b57-832fbba1abf0",
        "parentId" : "785e195f-5374-432d-bf6c-96d28e576f1c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, that's how it works.\n",
        "createdAt" : "2014-06-19T05:21:28Z",
        "updatedAt" : "2014-06-19T20:33:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a1a79378404cdb719baf48966b629c1c68a6319",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +142,146 @@// will answer requests sent through the proxy.\ntype Service struct {\n\tJSONBase `json:\",inline\" yaml:\",inline\"`\n\tPort     int `json:\"port,omitempty\" yaml:\"port,omitempty\"`\n"
  }
]