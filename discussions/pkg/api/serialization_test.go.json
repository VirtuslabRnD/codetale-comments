[
  {
    "id" : "871cbe49-2861-47b6-ab96-1371c0a276cb",
    "prId" : 41788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41788#pullrequestreview-23739163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2ef1179-3fdd-4a99-b322-3a1cb25f9ae0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@smarterclayton @deads2k without the `into` object, we get an internal type by default. According to https://github.com/kubernetes/kubernetes/blob/6a4d5cd7cc58e28c20ca133dab7b0e9e56192fe3/staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go#L96-L96 this is intentional. Is that intent wrong or this test?",
        "createdAt" : "2017-02-24T11:31:09Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "dbc9dca0-ecd2-47d4-932e-e72dfbb2eee5",
        "parentId" : "d2ef1179-3fdd-4a99-b322-3a1cb25f9ae0",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "doc. If you specify the targetGVK, we honor it.",
        "createdAt" : "2017-02-24T13:05:30Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "155b8792-4ace-494d-804e-d06b4f73c429",
        "parentId" : "d2ef1179-3fdd-4a99-b322-3a1cb25f9ae0",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "That's the point: the doc of the versioning codec says that internal objects are returned. The code also implement that.\r\n\r\nThe interface docs (https://github.com/kubernetes/kubernetes/blob/6a4d5cd7cc58e28c20ca133dab7b0e9e56192fe3/staging/src/k8s.io/apimachinery/pkg/runtime/interfaces.go#L55) sound like the `defaults` gvk is effective.\r\n\r\nWhat is right?",
        "createdAt" : "2017-02-24T15:31:59Z",
        "updatedAt" : "2017-02-27T21:02:05Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "f11d76ae44f60b2a515096f6d2f50646a8bfc711",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\tdefaults := gv.WithKind(\"\")\n\t\t\tvar got *schema.GroupVersionKind\n\t\t\tif obj, got, err = api.Codecs.LegacyCodec().Decode([]byte(`{\"kind\":\"`+kind+`\"}`), &defaults, obj); err != nil || gvk != *got {\n\t\t\t\tt.Errorf(\"expected %v: %v %v\", gvk, got, err)\n\t\t\t}"
  },
  {
    "id" : "1e8aa8a1-7bfa-4f45-b001-ea1f4acf30d8",
    "prId" : 39915,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39915#pullrequestreview-16821403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e66e41f8-c9e8-4e09-b7db-be597be19a4d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Is this anything other than a move?",
        "createdAt" : "2017-01-16T13:52:45Z",
        "updatedAt" : "2017-01-16T13:52:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b2ceb896-f49d-4db4-b393-2a88bb3a7dfe",
        "parentId" : "e66e41f8-c9e8-4e09-b7db-be597be19a4d",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Nope, just a move so that `doRoundTripTest`, `roundTrip`, and `roundTripSame` are located together instead of spread throughout the (fairly lengthy) file.",
        "createdAt" : "2017-01-16T14:52:42Z",
        "updatedAt" : "2017-01-16T14:52:42Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7408e6292e99cf10f64a70c456912beb62b5348d",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +261,265 @@// roundTripSame verifies the same source object is tested in all API versions\n// yielded by codecsToTest\nfunc roundTripSame(t *testing.T, group testapi.TestGroup, item runtime.Object, except ...string) {\n\tset := sets.NewString(except...)\n\tseed := rand.Int63()"
  },
  {
    "id" : "16bbf2c0-407c-4fc3-ae63-528d3c4a5e40",
    "prId" : 39915,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39915#pullrequestreview-16821474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf75c997-3b38-44a8-a663-565486bebd21",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "anything other than a move?",
        "createdAt" : "2017-01-16T13:53:44Z",
        "updatedAt" : "2017-01-16T13:53:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e2ee9e4c-773e-44c6-83d1-e941cb600a9c",
        "parentId" : "cf75c997-3b38-44a8-a663-565486bebd21",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Also just a move (and some comments).",
        "createdAt" : "2017-01-16T14:52:58Z",
        "updatedAt" : "2017-01-16T14:52:58Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7408e6292e99cf10f64a70c456912beb62b5348d",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +292,296 @@// deep-copied and converted from internal -> versioned -> internal without\n// loss of data.\nfunc roundTrip(t *testing.T, codec runtime.Codec, item runtime.Object) {\n\tprinter := spew.ConfigState{DisableMethods: true}\n\toriginal := item"
  },
  {
    "id" : "83b12e47-1403-45ad-8423-cbf29fb0cdc4",
    "prId" : 24733,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b0579a1-19bb-45e3-a793-a01068246e39",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "``` go\n\nfunc Convert_v1beta1_ReplicaSet_to_ReplicationController(in *v1beta1.ReplicaSet, out *api.ReplicationController, s conversion.Scope) error {\n    intermediate1 := &extensions.ReplicaSet{}\n    if err := v1beta1.Convert_v1beta1_ReplicaSet_To_extensions_ReplicaSet(in, intermediate1, s); err != nil {\n        return err\n    }\n\n    intermediate2 := &v1.ReplicationController{}\n    if err := v1.Convert_extensions_ReplicaSet_to_v1_ReplicationController(intermediate1, intermediate2, s); err != nil {\n        return err\n    }\n\n    return v1.Convert_v1_ReplicationController_To_api_ReplicationController(intermediate2, out, s)\n}\n\nfunc TestSetControllerConversion(t *testing.T) {\n    if err := api.Scheme.AddConversionFuncs(Convert_v1beta1_ReplicaSet_to_ReplicationController); err != nil {\n        t.Fatal(err)\n    }\n\n    rs := &extensions.ReplicaSet{}\n    rc := &api.ReplicationController{}\n\n    extGroup := testapi.Extensions\n    defaultGroup := testapi.Default\n\n    fuzzInternalObject(t, extGroup.InternalGroupVersion(), rs, rand.Int63())\n\n    // RS -> RC\n    data, err := runtime.Encode(extGroup.Codec(), rs)\n    if err != nil {\n        t.Fatalf(\"unexpected encoding error: %v\", err)\n    }\n    t.Logf(\"ext.version %v  default.version %v\", extGroup.GroupVersion(), defaultGroup.GroupVersion())\n\n    decoder := api.Codecs.UniversalDecoder(*extGroup.GroupVersion(), *defaultGroup.GroupVersion())\n    if err := versioning.EnableCrossGroupDecoding(decoder, extGroup.GroupVersion().Group, defaultGroup.GroupVersion().Group); err != nil {\n        t.Fatalf(\"unexpected error while enabling cross-group decoding: %v\", err)\n    }\n    if err := runtime.DecodeInto(decoder, data, rc); err != nil {\n        t.Fatalf(\"unexpected decoding error: %v\", err)\n    }\n\n    // RC -> RS\n    data, err = runtime.Encode(defaultGroup.Codec(), rc)\n    if err != nil {\n        t.Fatalf(\"unexpected encoding error: %v\", err)\n    }\n    // TODO: Enable cross-group decoding\n    if err := runtime.DecodeInto(decoder, data, rs); err != nil {\n        t.Fatalf(\"unexpected decoding error: %v\", err)\n    }\n}\n```\n\nWorks like a champ.  Seems like that should be acceptable as a test conversion to prove the concept.\n",
        "createdAt" : "2016-07-12T19:19:05Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "57985ad4-e55c-46f7-bf2d-651868a44c64",
        "parentId" : "4b0579a1-19bb-45e3-a793-a01068246e39",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Sup, the conversion is what I was missing. Thanks\n",
        "createdAt" : "2016-07-13T08:30:22Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f85067b27dc41cff188afe72241b8eb46b1ddf6b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +163,167 @@}\n\nfunc TestSetControllerConversion(t *testing.T) {\n\tif err := api.Scheme.AddConversionFuncs(Convert_v1beta1_ReplicaSet_to_api_ReplicationController); err != nil {\n\t\tt.Fatal(err)"
  },
  {
    "id" : "d13d3236-bdf7-4c22-acca-5416ed025b96",
    "prId" : 24733,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bf9eb72-f384-4ce9-be98-b915f326f894",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why are you doing this in a test? Doesn't this invalidate the assumption that the non-test code will work the same as what's getting tested?\n",
        "createdAt" : "2016-07-13T20:24:11Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "89e12b22-9e1a-4e84-a752-d4efa2a334a5",
        "parentId" : "8bf9eb72-f384-4ce9-be98-b915f326f894",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Non-test code is the half part - test code is the other half of what's needed to have a full-fidelity conversion. The test part is more of a poc.\n",
        "createdAt" : "2016-07-14T09:33:56Z",
        "updatedAt" : "2016-07-15T12:52:37Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f85067b27dc41cff188afe72241b8eb46b1ddf6b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +164,168 @@\nfunc TestSetControllerConversion(t *testing.T) {\n\tif err := api.Scheme.AddConversionFuncs(Convert_v1beta1_ReplicaSet_to_api_ReplicationController); err != nil {\n\t\tt.Fatal(err)\n\t}"
  },
  {
    "id" : "3c76389d-41fe-4697-9aa8-c338ac075761",
    "prId" : 23806,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ab0cf0f-98a8-4108-b1d0-5f0ebd1e81c5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Just curious - what's that?\n",
        "createdAt" : "2016-04-11T07:22:12Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "909a6fa7-7911-478c-ae4f-fc00092bdca3",
        "parentId" : "3ab0cf0f-98a8-4108-b1d0-5f0ebd1e81c5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's a helper that shows using proto rules the structs and their types.\nIt's moderately useful when debugging proto here to have the machine say\n\"this is what I got\" and compare that to what turned up in the struct (in\ncase there is a mismatch between the correct proto and an incorrect\ndeserializer)\n\nOn Mon, Apr 11, 2016 at 3:22 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/api/serialization_test.go\n> https://github.com/kubernetes/kubernetes/pull/23806#discussion_r59162670\n> :\n> \n> > @@ -58,6 +61,15 @@ func fuzzInternalObject(t *testing.T, forVersion unversioned.GroupVersion, item\n> >     return item\n> >  }\n> > \n> > +func dataAsString(data []byte) string {\n> > -   dataString := string(data)\n> > -   if !strings.HasPrefix(dataString, \"{\") {\n> > -       dataString = \"\\n\" + hex.Dump(data)\n> > -       proto.NewBuffer(make([]byte, 0, 1024)).DebugPrint(\"decoded object\", data)\n> \n> Just curious - what's that?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23806/files/e6879a33f46577ce93328230a28453244c3a408f#r59162670\n",
        "createdAt" : "2016-04-11T14:08:25Z",
        "updatedAt" : "2016-04-11T15:22:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "34749117364be27ac7c6d5826043687210dfed34",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +66,70 @@\tif !strings.HasPrefix(dataString, \"{\") {\n\t\tdataString = \"\\n\" + hex.Dump(data)\n\t\tproto.NewBuffer(make([]byte, 0, 1024)).DebugPrint(\"decoded object\", data)\n\t}\n\treturn dataString"
  },
  {
    "id" : "ed2a5185-2f77-45c5-8c42-031b2191dfac",
    "prId" : 19133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c92201d0-3170-468e-bb26-01b19ad3074d",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Add a comment explaining why you leave this code commented instead of removing it. Same below.\n",
        "createdAt" : "2015-12-28T10:44:28Z",
        "updatedAt" : "2015-12-28T11:13:15Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a6a69c13-3f90-4bed-8d46-8acb6c0798ed",
        "parentId" : "c92201d0-3170-468e-bb26-01b19ad3074d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I did it the same way it was already commented in one of the tests below: TestRoundTripTypes\n",
        "createdAt" : "2015-12-28T10:47:10Z",
        "updatedAt" : "2015-12-28T11:13:15Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6fe261b5-de5d-4988-b41b-28c362c43e6b",
        "parentId" : "c92201d0-3170-468e-bb26-01b19ad3074d",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Oh, OK.\n",
        "createdAt" : "2015-12-28T10:52:26Z",
        "updatedAt" : "2015-12-28T11:13:15Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1803a11557f1548e03584dd5239433aa32abf2f8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +120,124 @@// For debugging problems\nfunc TestSpecificKind(t *testing.T) {\n\t// api.Scheme.Log(t)\n\t// defer api.Scheme.Log(nil)\n"
  },
  {
    "id" : "c06c0e17-5cb5-474e-ac84-a992bd65ca4a",
    "prId" : 17099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a35628f-b4d1-40b1-b18d-a87843ebcbeb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: extra blank line (and all three of these things could be in one `var ( ... )` block...)\n",
        "createdAt" : "2015-12-01T00:35:46Z",
        "updatedAt" : "2015-12-01T00:35:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf6d785b74b3d9f17a8b428cecd3428cac39bce",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +129,133 @@\nvar nonRoundTrippableTypes = sets.NewString()\n\nvar nonInternalRoundTrippableTypes = sets.NewString(\"List\", \"ListOptions\")\nvar nonRoundTrippableTypesByVersion = map[string][]string{}"
  },
  {
    "id" : "a6eee3a5-7d1c-4dc4-886c-cec61215fa8c",
    "prId" : 16364,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c993a46-8f73-4b9a-9fbe-acf2b45d4ba6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "change to Fatalf instead of adding return?\n",
        "createdAt" : "2015-10-27T21:41:46Z",
        "updatedAt" : "2015-10-27T21:41:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "39bcc546-bfef-4304-b588-f52c4980671f",
        "parentId" : "6c993a46-8f73-4b9a-9fbe-acf2b45d4ba6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Anything used in loops I like to error and let continue to see as many possible errors at once. Don't feel strongly though \n",
        "createdAt" : "2015-10-27T21:43:57Z",
        "updatedAt" : "2015-10-27T21:43:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e5141253-6e8c-4cc9-b6a6-d30bc1d14c94",
        "parentId" : "6c993a46-8f73-4b9a-9fbe-acf2b45d4ba6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh sorry, didn't realize it wasn't a top level test function. It's fine how it is.\n",
        "createdAt" : "2015-10-27T21:45:49Z",
        "updatedAt" : "2015-10-27T21:45:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bc4abb9aa4a3be5bfb3c7f5015339bcfa3e9d18",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +96,100 @@\tif err != nil {\n\t\tt.Errorf(\"unexpected error: %v\", err)\n\t\treturn\n\t}\n"
  },
  {
    "id" : "cca07c4b-feb0-4fca-8ce8-226c2ab0e686",
    "prId" : 9807,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c567ca-fd7e-4df3-9988-2ae5a3fbf16b",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal @bgrant0607 , can we remove `nonRoundTrippableTypes`? Or are we expecting there will be new member in this sets in the future?\n",
        "createdAt" : "2015-06-16T22:53:33Z",
        "updatedAt" : "2015-06-24T18:39:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5f090cdd-7f2b-4da4-bb4b-2b16d087b287",
        "parentId" : "f4c567ca-fd7e-4df3-9988-2ae5a3fbf16b",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "cc @smarterclayton \n",
        "createdAt" : "2015-06-17T16:44:15Z",
        "updatedAt" : "2015-06-24T18:39:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13421e084eda5d898f312b41de473984e12d84d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +127,131 @@\nvar nonRoundTrippableTypes = util.NewStringSet()\nvar nonInternalRoundTrippableTypes = util.NewStringSet(\"List\", \"ListOptions\", \"PodExecOptions\")\nvar nonRoundTrippableTypesByVersion = map[string][]string{}\n"
  },
  {
    "id" : "dd0bfa89-d0b6-4312-96f5-d35175ef5e12",
    "prId" : 8917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2f5322d-c700-42b0-8c35-224608aa8fad",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I suggest leaving a comment about the expected format.\n",
        "createdAt" : "2015-05-28T20:03:01Z",
        "updatedAt" : "2015-05-30T00:18:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4e2c738f6dea089af9b6253477d436a686c084f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +128,132 @@var nonRoundTrippableTypes = util.NewStringSet(\"ContainerManifest\", \"ContainerManifestList\")\nvar nonInternalRoundTrippableTypes = util.NewStringSet(\"List\", \"ListOptions\", \"PodExecOptions\")\nvar nonRoundTrippableTypesByVersion = map[string][]string{}\n\nfunc TestRoundTripTypes(t *testing.T) {"
  },
  {
    "id" : "500d59f6-9268-4c29-8d62-5298e7585203",
    "prId" : 1377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "896c47b8-1c37-4e40-a805-be380277e36c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should call https://godoc.org/github.com/google/gofuzz#Fuzzer.RandSource each time, otherwise your benchmark will be testing different pods with every call.\n",
        "createdAt" : "2014-09-19T19:47:22Z",
        "updatedAt" : "2014-09-19T21:18:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bbc572f36b10882c24ebf8cbddfe155238f4086",
    "line" : null,
    "diffHunk" : "@@ -1,1 +212,216 @@\tpod := api.Pod{}\n\tapiObjectFuzzer.RandSource(rand.NewSource(benchmarkSeed))\n\tapiObjectFuzzer.Fuzz(&pod)\n\tfor i := 0; i < b.N; i++ {\n\t\tlatest.Codec.Encode(&pod)"
  },
  {
    "id" : "ac01e958-0962-4c6c-8758-9d093753fa0f",
    "prId" : 1377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a89e216f-af55-492d-b381-87702bc2a4b2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add a comment that it's only here to see how much worse our regular encode is?\n",
        "createdAt" : "2014-09-19T19:48:19Z",
        "updatedAt" : "2014-09-19T21:18:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bbc572f36b10882c24ebf8cbddfe155238f4086",
    "line" : null,
    "diffHunk" : "@@ -1,1 +224,228 @@\tapiObjectFuzzer.Fuzz(&pod)\n\tfor i := 0; i < b.N; i++ {\n\t\tjson.Marshal(&pod)\n\t}\n}"
  },
  {
    "id" : "09d5b21e-189e-425a-bc6d-6b53d40b2e9b",
    "prId" : 1377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28426d9b-991b-4d3b-a432-13fad8eb70f8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "RandSource here, too\n",
        "createdAt" : "2014-09-19T20:40:04Z",
        "updatedAt" : "2014-09-19T21:18:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "932477e2-697f-48db-9ff2-5f44cd7166c3",
        "parentId" : "28426d9b-991b-4d3b-a432-13fad8eb70f8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Fixed\n\n> On Sep 19, 2014, at 4:40 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/api/serialization_test.go:\n> \n> > @@ -203,3 +205,56 @@ func TestBadJSONRejection(t _testing.T) {\n> >         t.Errorf(\"Kind is set but doesn't match the object type: %s\", badJSONKindMismatch)\n> >     }_/\n> >  }\n> > +\n> > +const benchmarkSeed = 100\n> > +\n> > +func BenchmarkEncode(b *testing.B) {\n> > -   pod := api.Pod{}\n> >   RandSource here, too\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-19T22:00:11Z",
        "updatedAt" : "2014-09-19T22:00:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bbc572f36b10882c24ebf8cbddfe155238f4086",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +210,214 @@\nfunc BenchmarkEncode(b *testing.B) {\n\tpod := api.Pod{}\n\tapiObjectFuzzer.RandSource(rand.NewSource(benchmarkSeed))\n\tapiObjectFuzzer.Fuzz(&pod)"
  }
]