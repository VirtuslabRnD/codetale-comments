[
  {
    "id" : "33156943-af48-4088-8135-de88c3d96c46",
    "prId" : 40301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40301#pullrequestreview-17997144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c2b2b1a-9fdb-41a3-8f63-4e009846d112",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you at least add this same check into `ValidateRunOptions` as well so they get a nice error under normal circumstances?",
        "createdAt" : "2017-01-23T18:56:42Z",
        "updatedAt" : "2017-01-23T21:01:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "37cd1792b5f5bc573c0ea3fb430f220d2716e227",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +268,272 @@\t\t\t\t// normally this would be no-no, but its the minimal change to backport to 1.5 and\n\t\t\t\t// every caller is going to do this.\n\t\t\t\tpanic(fmt.Errorf(\"unable to load client CA file: %v\", err))\n\t\t\t}\n\t\t\tif secureServingInfo.ClientCA == nil {"
  },
  {
    "id" : "b904b4ee-5d6a-4528-aa62-a65abe7945f6",
    "prId" : 38869,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38869#pullrequestreview-13373878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d82be442-5160-445d-a0c2-9cab71fce681",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This means that we have to call `ApplyDelegatingAuthenticationOptions` **after** `ApplySecureServingOptions`. Same is true for `applyClientCert`. This asks for trouble. Here it's even security related.",
        "createdAt" : "2016-12-16T17:01:13Z",
        "updatedAt" : "2016-12-16T17:40:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "cc6f1deb-8c75-447c-b071-472b08b181fe",
        "parentId" : "d82be442-5160-445d-a0c2-9cab71fce681",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Correction: here it's not `SecureServingInfo`, but not less critical.",
        "createdAt" : "2016-12-16T17:04:02Z",
        "updatedAt" : "2016-12-16T17:40:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "21622249-3a36-4069-b552-3e20dc932ff9",
        "parentId" : "d82be442-5160-445d-a0c2-9cab71fce681",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Could we go via `Config.Complete` to fill the `SecurityDefinitions` if still nil?",
        "createdAt" : "2016-12-16T17:07:38Z",
        "updatedAt" : "2016-12-16T17:40:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6c5d47c5-dbb2-4c86-bdd6-624a51c5883a",
        "parentId" : "d82be442-5160-445d-a0c2-9cab71fce681",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Could we go via Config.Complete to fill the SecurityDefinitions if still nil?\r\n\r\nWe'd have to track them differently.  The problem already exists and this pull doesn't make it worse.  This pull just fixes the NPE.",
        "createdAt" : "2016-12-16T17:17:34Z",
        "updatedAt" : "2016-12-16T17:40:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcbdaffd101285f4e237dcdaba374b4a4100d28",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +400,404 @@\n\tc.Authenticator = authenticator\n\tif c.OpenAPIConfig != nil {\n\t\tc.OpenAPIConfig.SecurityDefinitions = securityDefinitions\n\t}"
  },
  {
    "id" : "63ac5331-9020-42b9-902a-27f3d031eebe",
    "prId" : 38603,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38603#pullrequestreview-12467585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a453f57-db4f-4f1f-9c26-c5630ab11264",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "HealthzChecks is the default set of healthz checks....",
        "createdAt" : "2016-12-12T14:41:30Z",
        "updatedAt" : "2016-12-12T14:41:30Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1f0bdbf378a28321d02a3b54c59b8c1ac056a87",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +126,130 @@\t// always reported\n\tDiscoveryAddresses DiscoveryAddresses\n\t// The default set of healthz checks. There might be more added via AddHealthzChecks dynamically.\n\tHealthzChecks []healthz.HealthzChecker\n\t// LegacyAPIGroupPrefixes is used to set up URL parsing for authorization and for validating requests"
  },
  {
    "id" : "b9a23d8e-4c3c-48c1-b5fa-2c241caae1ce",
    "prId" : 38125,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38125#pullrequestreview-11455891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7e9c12b-37d9-45c2-9dd8-8f7588a69bb0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "huh... we now have two potentially (hopefully?) distinct CA pools we'll validate client certs from (to validate request header proxy auth or to verify a client cert for auth directly). We need to include CAs from both pools in the server handshake, so both files need to make it to the secure serving info",
        "createdAt" : "2016-12-05T19:53:51Z",
        "updatedAt" : "2016-12-06T14:40:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb35b72ed144ca98d88efce8cfc8832336d2a8d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +306,310 @@\n\tif o.ClientCert != nil && c.SecureServingInfo != nil {\n\t\tc.SecureServingInfo.ClientCA = o.ClientCert.ClientCA\n\t}\n"
  },
  {
    "id" : "e08ca616-e541-4bee-9726-b17c429ad1d8",
    "prId" : 36604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36604#pullrequestreview-8131997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4b6021c-5853-4036-bab0-23cd6e85a80c",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This is not really a solution for our stratification problem, is it? Now `Complete()` is not needed anymore of course to create the certs necessary for the loopback client. But on the other hand we use the config before it is finalized by `Complete()` which is also kind of unclean.\n",
        "createdAt" : "2016-11-10T22:21:40Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c1e2dd62-94ac-438b-b78e-ca799ce4bff4",
        "parentId" : "e4b6021c-5853-4036-bab0-23cd6e85a80c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Final solution, no, but it eliminates another level of defaulting.  I think we factor out one more and we can finally do this in order.\n",
        "createdAt" : "2016-11-11T01:12:18Z",
        "updatedAt" : "2016-11-29T16:02:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab9a842f3c7f6d7b20a07a87332e555aa73c2389",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +454,458 @@\n// MaybeGenerateServingCerts generates serving certificates if requested and needed.\nfunc (c *Config) MaybeGenerateServingCerts(alternateIPs ...net.IP) error {\n\t// It would be nice to set a fqdn subject alt name, but only the kubelets know, the apiserver is clueless\n\t// alternateDNS = append(alternateDNS, \"kubernetes.default.svc.CLUSTER.DNS.NAME\")"
  },
  {
    "id" : "17dfc1fa-2b68-4dbc-a93d-92b2cb09cfb1",
    "prId" : 33846,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33846#pullrequestreview-2540686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8a8ede6-5fb3-4503-8dde-f58017917fe6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is the point at which we know whether we should generate a self-signed one or not\n",
        "createdAt" : "2016-10-03T15:13:09Z",
        "updatedAt" : "2016-10-03T17:35:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eddc7158ba50058d0c9977a52cca64ca3dbdbdf",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +217,221 @@\t\t\tClientCA: options.ClientCAFile,\n\t\t}\n\t\tif options.TLSCertFile == \"\" && options.TLSPrivateKeyFile == \"\" {\n\t\t\tsecureServingInfo.ServerCert.Generate = true\n\t\t\tsecureServingInfo.ServerCert.CertFile = path.Join(options.CertDirectory, \"apiserver.crt\")"
  },
  {
    "id" : "687a4d74-aef8-4d12-8d29-1baacfb18e3d",
    "prId" : 33490,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33490#pullrequestreview-1945417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5067d83d-ea05-42bb-bc2b-624e80a05240",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "make sure c.APIPrefix and c.APIGroupPrefix are not empty strings before including them in the sets. When we eventually start up a generic API server that is only serving grouped APIs, I _think_ I would expect `APIPrefix` to be empty\n",
        "createdAt" : "2016-09-28T14:09:49Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6d9a787e-60b0-4de4-ab50-2416fb1dcdf5",
        "parentId" : "5067d83d-ea05-42bb-bc2b-624e80a05240",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Certainly true. But it's only moved code here. I have added a note to https://github.com/kubernetes/kubernetes/issues/32792 for a follow-up.\n",
        "createdAt" : "2016-09-28T14:19:44Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c75e922f31b9b3963fd5f1466b9ebc6f9c4b8d2",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +448,452 @@\treturn &request.RequestInfoResolver{\n\t\tAPIPrefixes:          sets.NewString(strings.Trim(c.APIPrefix, \"/\"), strings.Trim(c.APIGroupPrefix, \"/\")), // all possible API prefixes\n\t\tGrouplessAPIPrefixes: sets.NewString(strings.Trim(c.APIPrefix, \"/\")),                                      // APIPrefixes that won't have groups (legacy)\n\t}\n}"
  },
  {
    "id" : "1a5b9740-ae73-43b9-96f6-8add79f1c437",
    "prId" : 33365,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33365#pullrequestreview-1748679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72f2841e-44ae-401e-b31b-395c66d00397",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : ":+1: for this, passing those back and forth was a pain.\n",
        "createdAt" : "2016-09-27T14:52:32Z",
        "updatedAt" : "2016-09-27T14:53:36Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "157dcda8cc45ceac33fea72aeb8ed0645b95ce93",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +170,174 @@\tvar auditWriter io.Writer\n\tif len(options.AuditLogPath) != 0 {\n\t\tauditWriter = &lumberjack.Logger{\n\t\t\tFilename:   options.AuditLogPath,\n\t\t\tMaxAge:     options.AuditLogMaxAge,"
  },
  {
    "id" : "5f14591e-88af-4ade-b745-bef8d34a5f7e",
    "prId" : 33164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33164#pullrequestreview-937492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e05118bd-493a-44cd-a886-69253fe66348",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Let's add to our running issue.  I think all the audit stuff should be gathered up into a pointer to a struct.\n",
        "createdAt" : "2016-09-21T12:14:20Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a1aeff4d-4fd1-4fe7-9c53-d72c76e7647b",
        "parentId" : "e05118bd-493a-44cd-a886-69253fe66348",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Not in this pull.\n",
        "createdAt" : "2016-09-21T12:14:34Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "87356c0623cd759df5879dc753c8a885bce4ef64",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +333,337 @@\t}\n\n\tif len(c.AuditLogPath) != 0 {\n\t\ts.auditWriter = &lumberjack.Logger{\n\t\t\tFilename:   c.AuditLogPath,"
  },
  {
    "id" : "ac197d3b-e1dd-44a9-8578-07fbd9ea8794",
    "prId" : 33164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33164#pullrequestreview-938716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d88dd8a-c515-4745-aa49-5f284bf3c63e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can't we push these into `WithTimeoutForNonLongRunningRequests`?\n",
        "createdAt" : "2016-09-21T12:15:43Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e07ecf89-3dd2-487f-b916-b1a0bf080dc2",
        "parentId" : "4d88dd8a-c515-4745-aa49-5f284bf3c63e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "yes, makes sense\n",
        "createdAt" : "2016-09-21T12:22:46Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "87356c0623cd759df5879dc753c8a885bce4ef64",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +354,358 @@\nfunc (s *GenericAPIServer) buildHandlerChains(c *Config, handler http.Handler) (secure http.Handler, insecure http.Handler) {\n\tlongRunningRE := regexp.MustCompile(c.LongRunningRequestRE)\n\tlongRunningFunc := genericfilters.BasicLongRunningRequestCheck(longRunningRE, map[string]string{\"watch\": \"true\"})\n"
  },
  {
    "id" : "b7b1a31a-e063-4146-8976-a678cce1aafd",
    "prId" : 33164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33164#pullrequestreview-937980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1540aae6-8f36-4c77-b2d0-5e1f0b29f184",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "So much cleaner.  TODO to type the function and take it as an optional struct value in genericapiserver.\n",
        "createdAt" : "2016-09-21T12:17:50Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "87356c0623cd759df5879dc753c8a885bce4ef64",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +353,357 @@}\n\nfunc (s *GenericAPIServer) buildHandlerChains(c *Config, handler http.Handler) (secure http.Handler, insecure http.Handler) {\n\tlongRunningRE := regexp.MustCompile(c.LongRunningRequestRE)\n\tlongRunningFunc := genericfilters.BasicLongRunningRequestCheck(longRunningRE, map[string]string{\"watch\": \"true\"})"
  },
  {
    "id" : "6e7eb457-e6eb-4684-8a32-997b4879b881",
    "prId" : 33164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33164#pullrequestreview-942302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8357980-2553-4c5a-bcf2-ed1074a90937",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : ":+1: \n",
        "createdAt" : "2016-09-21T12:45:17Z",
        "updatedAt" : "2016-09-23T10:08:36Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "87356c0623cd759df5879dc753c8a885bce4ef64",
    "line" : null,
    "diffHunk" : "@@ -1,1 +371,375 @@\tsecure = apiserver.WithAuthorization(secure, attributeGetter, c.Authorizer)\n\tsecure = apiserver.WithImpersonation(secure, c.RequestContextMapper, c.Authorizer)\n\tsecure = audit.WithAudit(secure, attributeGetter, s.auditWriter) // before impersonation to read original user\n\tsecure = authhandlers.WithAuthentication(secure, c.RequestContextMapper, c.Authenticator, authhandlers.Unauthorized(c.SupportsBasicAuth))\n\tsecure = api.WithRequestContext(secure, c.RequestContextMapper)"
  },
  {
    "id" : "17ae894f-5432-4c9a-8bd2-573f27f25c2f",
    "prId" : 32622,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32622#pullrequestreview-857616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9d70e32-db84-4c34-b823-290b8bc93b75",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Eventually I think the generator and generic apiserver will not live in the same repository, so I think this import path shouldn't go this direction. I'm OK with it temporarily (and possibly past me even suggested this?) but I think this definition package should actually be a subdirectory of genericapiserver.\n\nSo the import chain should eventually be [specific apiserver] -> generator -> genericapiserver.\n",
        "createdAt" : "2016-09-20T23:01:00Z",
        "updatedAt" : "2016-09-20T23:01:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "38b2567d8b2af28f0191a20fdaa33d82bd824c38",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +33,37 @@\t\"gopkg.in/natefinch/lumberjack.v2\"\n\n\t\"k8s.io/kubernetes/cmd/libs/go2idl/openapi-gen/generators/common\"\n\t\"k8s.io/kubernetes/pkg/admission\"\n\t\"k8s.io/kubernetes/pkg/api\""
  },
  {
    "id" : "56278a46-01c9-4294-bd57-480f0609045c",
    "prId" : 32387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac758792-d9bb-4355-bb7f-d69084d13c8e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "We need to followup and see if swagger ui is generic.  As I recall, it didn't actually work generically when I tried to embed it downstream.\n",
        "createdAt" : "2016-09-10T17:02:29Z",
        "updatedAt" : "2016-09-15T11:23:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5e38c265-a9fc-4d74-88a5-7af20a07d6c5",
        "parentId" : "ac758792-d9bb-4355-bb7f-d69084d13c8e",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Curious to know what did not work when you tried it.\nShould be generic. Reads the spec and displays it in a UI.\n",
        "createdAt" : "2016-09-13T20:30:53Z",
        "updatedAt" : "2016-09-15T11:23:03Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f78661d0b24e48b7acdb82554559e72375dad55",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +346,350 @@\n\tif c.EnableSwaggerSupport && c.EnableSwaggerUI {\n\t\troutes.SwaggerUI{}.Install(s.Mux, s.HandlerContainer)\n\t}\n\tif c.EnableProfiling {"
  },
  {
    "id" : "b3b5fa77-021d-4b57-975c-bab408a37f01",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee3665cb-552c-4ea7-9b5e-fceb643d55fa",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I would expect the defaulting here in fact.\n",
        "createdAt" : "2016-08-25T09:37:10Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "84f97d92-3bd3-4170-ad89-65ebe02246fc",
        "parentId" : "ee3665cb-552c-4ea7-9b5e-fceb643d55fa",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I see the issue: Config is full of public fields and the actual code does not necessarily go via `NewConfig`.\n\nWhat about a nice `func (c Config) WithDefaults() Config`, called from the New() functions.\n",
        "createdAt" : "2016-08-25T09:59:04Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +162,166 @@\nfunc NewConfig(options *options.ServerRunOptions) *Config {\n\treturn &Config{\n\t\tAPIGroupPrefix:            options.APIGroupPrefix,\n\t\tAPIPrefix:                 options.APIPrefix,"
  },
  {
    "id" : "7341fdd0-5dc0-492f-8d11-1ac32697153c",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a00f7f97-af78-47e7-b7cc-23676e58120d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "``` go\nc.setDefaults()\nreturn c\n```\n",
        "createdAt" : "2016-08-25T09:41:47Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +196,200 @@\t\t},\n\t}\n}\n\n// setDefaults fills in any fields not set that are required to have valid data."
  },
  {
    "id" : "344eb058-bd10-4929-a13c-57cd1a220bda",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a02b9d8c-1c31-4ea5-9535-987a98b13673",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "As `SetDefaults` is called outside this comment is not correct anymore.\n",
        "createdAt" : "2016-08-25T09:46:59Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +257,261 @@// Certain config fields will be set to a default value if unset,\n// including:\n//   ServiceClusterIPRange\n//   ServiceNodePortRange\n//   MasterCount"
  },
  {
    "id" : "2878238a-765b-4db1-a3c8-c46f884f3d5d",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "678252b6-8826-4f9e-865c-f2a89b2cfc7d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why these docs here? Why not in the definition of `GenericAPIServer`?\n",
        "createdAt" : "2016-08-25T09:48:32Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +263,267 @@//   PublicAddress\n// Public fields:\n//   Handler -- The returned GenericAPIServer has a field TopHandler which is an\n//   http.Handler which handles all the endpoints provided by the GenericAPIServer,\n//   including the API, the UI, and miscellaneous debugging endpoints.  All"
  },
  {
    "id" : "3d3a91fd-1bdc-47b8-9a2e-0a3132ff0dcb",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f8ede7f-9ac6-4b27-914f-e85a86451fba",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why is Handler written twice. Keep the temporary value local. This avoid any kind of hidden closures of the temporary value.\n",
        "createdAt" : "2016-08-25T09:52:12Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "831fca2a-d393-4a5a-9e08-16ac2725d442",
        "parentId" : "4f8ede7f-9ac6-4b27-914f-e85a86451fba",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> why is Handler written twice. Keep the temporary value local. This avoid any kind of hidden closures of the temporary value.\n\nFixing, but I'll point out that I was shooting for a straight move. \n",
        "createdAt" : "2016-08-25T18:23:20Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c7a190b7-9e04-4e3e-a66e-2dd2c0186408",
        "parentId" : "4f8ede7f-9ac6-4b27-914f-e85a86451fba",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Fixing, but I'll point out that I was shooting for a straight move.\n\nhrm. side effects will be subtle if I break it doing this.  Can I get a deferment so you can carefully review 10 lines instead of a bulk move?\n",
        "createdAt" : "2016-08-25T18:24:41Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 402,
    "diffHunk" : "@@ -1,1 +400,404 @@\n\t// TODO: Make this optional?  Consumers of GenericAPIServer depend on this currently.\n\ts.Handler = handler\n\n\t// After all wrapping is done, put a context filter around both handlers"
  },
  {
    "id" : "487b45c7-8d5f-4470-9fad-270d2dee1bf7",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2d5142d-6f39-4472-a672-d1078ac2912b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why is insecureHandler written twice. Keep the temporary value local. This avoids any kind of hidden closures of the temporary value.\n",
        "createdAt" : "2016-08-25T09:52:35Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +373,377 @@\t}\n\n\ts.InsecureHandler = handler\n\n\tattributeGetter := apiserver.NewRequestAttributeGetter(c.RequestContextMapper, s.NewRequestInfoResolver())"
  },
  {
    "id" : "727826a6-1274-46f1-9d5c-84fd008c0eb0",
    "prId" : 31247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8d2facc-6d5f-4f88-8b33-07ffd6bb665f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "elegant, non-pointer `c` :+1: \n",
        "createdAt" : "2016-08-26T06:41:16Z",
        "updatedAt" : "2016-09-08T12:57:20Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0d770ad7b01aaa860154905568cd8d94f3fd391",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +276,280 @@//   auth, then the caller should create a handler for those endpoints, which delegates the\n//   any unhandled paths to \"Handler\".\nfunc (c Config) New() (*GenericAPIServer, error) {\n\tif c.Serializer == nil {\n\t\treturn nil, fmt.Errorf(\"Genericapiserver.New() called with config.Serializer == nil\")"
  }
]