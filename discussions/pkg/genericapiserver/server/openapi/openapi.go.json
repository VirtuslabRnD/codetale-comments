[
  {
    "id" : "7f11d8f4-96d5-41ca-9583-7a0ddd40d97d",
    "prId" : 40124,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40124#pullrequestreview-18774744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Even with escaping i'm pretty sure this is going to break naive clients.",
        "createdAt" : "2017-01-20T16:28:17Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4e2d2c4f-6ffb-44e5-9726-7c3e644cf25e",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "can you elaborate?",
        "createdAt" : "2017-01-20T17:28:25Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "bde17936-eaca-4100-bcef-e15168b4889b",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should verify that this doesn't horribly break any of the generation code we use today (docs, client code) - I am skeptical that people implementing those libraries handle escaping correctly, because no one handles escaping correctly.",
        "createdAt" : "2017-01-23T19:41:17Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f53e5281-f04f-4892-a15a-165ce1efe429",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "The escaping is a standard which without it, the spec would be invalid (the validation will fail for it). The client and doc generators are already doing some preprocessing before consuming this spec, and even without this escaping we need to do more preprocessing to use this new spec. Adding a step to deal with this in the preprocessing shouldn't be hard (if the standard json readers does not deal with it).",
        "createdAt" : "2017-01-24T22:10:43Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "78dabc82-7eb6-4f98-b64c-e85f999fe3c0",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I would just like to know if we break the spec just by adding this escaping for any of our existing tools before we merge it.",
        "createdAt" : "2017-01-24T23:01:52Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5beb85e6-5271-4fdd-bfcb-b79910e18a8a",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "There are two tools that are currently using this. The documentation (cc @pwittrock) and python client. For the python client, with no pre-processing, it will break the client generator and we need to update pre-processing step and re-generate it. The other option is not to use \"/\" as separator. Basically this is not a problem for python client as I am doing a preprocessing anyway and I can fix it, but I see your point. Do you have any suggestion for other separators? maybe \"_\"?",
        "createdAt" : "2017-01-25T02:00:14Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "33e3a2ab-b7a4-409a-a259-2c7a99ee20df",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "\".\" Would be the most used separator in the widest range of languages.  If we do that I think we should also do domain reversing (github.com -> com.github).  Go's type naming systems is fairly obscure.",
        "createdAt" : "2017-01-25T03:08:14Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fbecdac7-4cae-4c58-a42d-f21fbd64b63f",
        "parentId" : "101a4e2f-0a31-4408-aca1-cf3551594d2a",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "Done.",
        "createdAt" : "2017-01-27T03:54:03Z",
        "updatedAt" : "2017-01-31T04:05:36Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      }
    ],
    "commit" : "32e1ef9a87a7339e12918c4891a187471519ad65",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +88,92 @@\to.definitions = o.config.GetDefinitions(func(name string) spec.Ref {\n\t\tdefName, _ := o.config.GetDefinitionName(o.servePath, name)\n\t\treturn spec.MustCreateRef(\"#/definitions/\" + openapi.EscapeJsonPointer(defName))\n\t})\n\tif o.config.CommonResponses == nil {"
  }
]