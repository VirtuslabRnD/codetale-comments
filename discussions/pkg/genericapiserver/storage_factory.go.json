[
  {
    "id" : "f54c211b-3360-420c-832e-46e24469a11c",
    "prId" : 37770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37770#pullrequestreview-11730459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "349e1042-2698-412f-92cc-b3c31dc98310",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "@liggitt please validate this.",
        "createdAt" : "2016-12-06T22:33:00Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "083d42ae-b040-4483-803d-558760054a21",
        "parentId" : "349e1042-2698-412f-92cc-b3c31dc98310",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "running from master, here are the calls to get resource prefixes:\r\n```\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"configMaps\"}=configmaps\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"endpoints\"}=services/endpoints\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"events\"}=events\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"limitRanges\"}=limitranges\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"namespaces\"}=namespaces\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"nodes\"}=minions\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"persistentVolumeClaims\"}=persistentvolumeclaims\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"persistentVolumes\"}=persistentvolumes\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"podTemplates\"}=podtemplates\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"pods\"}=pods\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"replicationControllers\"}=controllers\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"resourceQuotas\"}=resourcequotas\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"secrets\"}=secrets\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"serviceAccounts\"}=serviceaccounts\r\nResourcePrefix: schema.GroupResource{Group:\"\", Resource:\"services\"}=services/specs\r\nResourcePrefix: schema.GroupResource{Group:\"apps\", Resource:\"statefulsets\"}=statefulsets\r\nResourcePrefix: schema.GroupResource{Group:\"autoscaling\", Resource:\"horizontalpodautoscalers\"}=horizontalpodautoscalers\r\nResourcePrefix: schema.GroupResource{Group:\"batch\", Resource:\"jobs\"}=jobs\r\nResourcePrefix: schema.GroupResource{Group:\"certificates.k8s.io\", Resource:\"certificatesigningrequests\"}=certificatesigningrequests\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"daemonsets\"}=daemonsets\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"deployments\"}=deployments\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"horizontalpodautoscalers\"}=horizontalpodautoscalers\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"ingresses\"}=ingress\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"jobs\"}=jobs\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"networkpolicies\"}=networkpolicies\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"podsecuritypolicy\"}=podsecuritypolicy\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"replicasets\"}=replicasets\r\nResourcePrefix: schema.GroupResource{Group:\"extensions\", Resource:\"thirdpartyresources\"}=thirdpartyresources\r\nResourcePrefix: schema.GroupResource{Group:\"policy\", Resource:\"poddisruptionbudgets\"}=poddisruptionbudgets\r\nResourcePrefix: schema.GroupResource{Group:\"rbac.authorization.k8s.io\", Resource:\"clusterrolebindings\"}=clusterrolebindings\r\nResourcePrefix: schema.GroupResource{Group:\"rbac.authorization.k8s.io\", Resource:\"clusterroles\"}=clusterroles\r\nResourcePrefix: schema.GroupResource{Group:\"rbac.authorization.k8s.io\", Resource:\"rolebindings\"}=rolebindings\r\nResourcePrefix: schema.GroupResource{Group:\"rbac.authorization.k8s.io\", Resource:\"roles\"}=roles\r\nResourcePrefix: schema.GroupResource{Group:\"storage.k8s.io\", Resource:\"storageclasses\"}=storageclasses\r\n```",
        "createdAt" : "2016-12-07T03:24:33Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6bafbacbf2e4a4f54f3e7993440122e24acdee0",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +104,108 @@// specialDefaultResourcePrefixes are prefixes compiled into Kubernetes.\n// TODO: move out of this package, it is not generic\nvar specialDefaultResourcePrefixes = map[schema.GroupResource]string{\n\tschema.GroupResource{Group: \"\", Resource: \"replicationControllers\"}:        \"controllers\",\n\tschema.GroupResource{Group: \"\", Resource: \"replicationcontrollers\"}:        \"controllers\","
  },
  {
    "id" : "f9e7d178-5988-472a-b877-4a43aa360fe7",
    "prId" : 32309,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32309#pullrequestreview-862142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ca0e820-ce47-4105-98b4-3fb91e8ffacb",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why isn't this a part of `overrides`?\n",
        "createdAt" : "2016-09-08T18:47:09Z",
        "updatedAt" : "2016-11-03T14:52:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "baaa36dd-ca82-4aa5-aa6f-ec9462f285e1",
        "parentId" : "2ca0e820-ce47-4105-98b4-3fb91e8ffacb",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will make this cleaner\n",
        "createdAt" : "2016-09-13T22:25:58Z",
        "updatedAt" : "2016-11-03T14:52:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b2abd30f-0a55-4354-9474-e0d78efb3f17",
        "parentId" : "2ca0e820-ce47-4105-98b4-3fb91e8ffacb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Having customizable defaults and overrides separate (like in this PR) is actually cleanest, IMO. Otherwise the caller will have to figure out if the user's flags imply a default change. If they're split like that, we can leave the code interpreting the flags in genericapiserver.\n",
        "createdAt" : "2016-09-20T23:42:35Z",
        "updatedAt" : "2016-11-03T14:52:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "56f8d6ecb5920778380432ef79e6668735dda4bd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +58,62 @@\tOverrides map[unversioned.GroupResource]groupResourceOverrides\n\n\tDefaultResourcePrefixes map[unversioned.GroupResource]string\n\n\t// DefaultMediaType is the media type used to store resources. If it is not set, \"application/json\" is used."
  },
  {
    "id" : "bfeadd33-a8bc-46d3-9e0b-46fcadfef819",
    "prId" : 32309,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32309#pullrequestreview-861830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e6a925e-15ca-448f-874e-d50f5e9daf14",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "minion -> node rename: 2.5 years and counting\n",
        "createdAt" : "2016-09-20T23:39:35Z",
        "updatedAt" : "2016-11-03T14:52:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "56f8d6ecb5920778380432ef79e6668735dda4bd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +108,112 @@\tunversioned.GroupResource{Group: \"\", Resource: \"replicationcontrollers\"}: \"controllers\",\n\tunversioned.GroupResource{Group: \"\", Resource: \"endpoints\"}:              \"services/endpoints\",\n\tunversioned.GroupResource{Group: \"\", Resource: \"nodes\"}:                  \"minions\",\n\tunversioned.GroupResource{Group: \"\", Resource: \"services\"}:               \"services/specs\",\n\tunversioned.GroupResource{Group: \"extensions\", Resource: \"ingresses\"}:    \"ingress\","
  },
  {
    "id" : "833e80a8-052e-47f8-85e6-62fc4b1a1747",
    "prId" : 29557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db6f2816-74e4-4721-8939-23c891f6e292",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "How do we prove we don't regress on old clusters here?  Will 1.3 -> 1.4 deployment catch us.\n",
        "createdAt" : "2016-07-26T14:33:01Z",
        "updatedAt" : "2016-07-27T11:51:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "81fae9ba-ff05-4b52-b97c-b648c354e18e",
        "parentId" : "db6f2816-74e4-4721-8939-23c891f6e292",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> How do we prove we don't regress on old clusters here? Will 1.3 -> 1.4 deployment catch us.\n\nI had to find these manually based on code inspection.  Going forward, everyone will be using their resources, to-lowered.  I would suggest that for an etcd3 migration, we consider changing directories to subdivide by API group.\n",
        "createdAt" : "2016-07-26T14:54:36Z",
        "updatedAt" : "2016-07-27T11:51:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa3db4d995192bf4fa236c213f745a8adc41f750",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +288,292 @@}\n\nvar specialDefaultResourcePrefixes = map[unversioned.GroupResource]string{\n\tunversioned.GroupResource{Group: \"\", Resource: \"replicationControllers\"}: \"controllers\",\n\tunversioned.GroupResource{Group: \"\", Resource: \"replicationcontrollers\"}: \"controllers\","
  },
  {
    "id" : "05cb46b2-a127-43a6-b1d4-d8a472a071c5",
    "prId" : 29557,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0565313-b217-426a-8764-3e0d771eeeb1",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Godoc\n",
        "createdAt" : "2016-07-26T14:35:59Z",
        "updatedAt" : "2016-07-27T11:51:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa3db4d995192bf4fa236c213f745a8adc41f750",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@\n// SetResourceEtcdPrefix sets the prefix for a resource, but not the base-dir.  You'll end up in `etcdPrefix/resourceEtcdPrefix`.\nfunc (s *DefaultStorageFactory) SetResourceEtcdPrefix(groupResource unversioned.GroupResource, prefix string) {\n\toverrides := s.Overrides[groupResource]\n\toverrides.etcdResourcePrefix = prefix"
  },
  {
    "id" : "aa43640b-a98c-4469-9c01-1a1ba8f7f018",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e5455f-c451-4724-b076-39cbaa7c41eb",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "I'm confused here.\nIn etcd, string are just immutable representation of []byte.\nWhy do we need to base64-encode it again?\n\n/cc @xiang90 \n",
        "createdAt" : "2016-05-03T04:28:47Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "8a68d265-1b67-4aa0-99e4-ee29fbb1eaf2",
        "parentId" : "71e5455f-c451-4724-b076-39cbaa7c41eb",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "for etcd2 yes. etcd2 only accepts json. json string cannot contain random bytes, you have to base64 it.\n",
        "createdAt" : "2016-05-03T04:36:29Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +249,253 @@\ts := serializer.Serializer\n\n\t// etcd2 only supports string data - we must wrap any result before returning\n\t// TODO: storagebackend should return a boolean indicating whether it supports binary data\n\tif !serializer.EncodesAsText && (config.Type == storagebackend.StorageTypeUnset || config.Type == storagebackend.StorageTypeETCD2) {"
  },
  {
    "id" : "11228c5f-23ce-49d3-901b-51ca32431043",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1f80554-05a4-4ee0-8aaa-2d276b15d179",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "question: does it mean that we will have migration to protobufs in etcd for free?\n",
        "createdAt" : "2016-05-05T08:36:44Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c41acada-e4a4-4d94-b190-90b2bd1c60ba",
        "parentId" : "a1f80554-05a4-4ee0-8aaa-2d276b15d179",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, once the storage type is set registries will start replacing values\nthat are written with proto.  So the same as a version upgrade - read /\nwrite all values.\n\nOn Thu, May 5, 2016 at 4:37 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In pkg/genericapiserver/storage_factory.go\n> https://github.com/kubernetes/kubernetes/pull/24710#discussion_r62161116\n> :\n> \n> > -   }\n> > -   serializer, ok := ns.SerializerForMediaType(mediaType, options)\n> > -   if !ok {\n> > -       return nil, fmt.Errorf(\"unable to find serializer for %q\", storageMediaType)\n> > -   }\n> >   +\n> > -   s := serializer.Serializer\n> >   +\n> > -   // etcd2 only supports string data - we must wrap any result before returning\n> > -   // TODO: storagebackend should return a boolean indicating whether it supports binary data\n> > -   if !serializer.EncodesAsText && (config.Type == storagebackend.StorageTypeUnset || config.Type == storagebackend.StorageTypeETCD2) {\n> > -       glog.V(4).Infof(\"Wrapping the underlying binary storage serializer with a base64 encoding for etcd2\")\n> > -       s = runtime.NewBase64Serializer(s)\n> > -   }\n> >   +\n> > -   ds := recognizer.NewDecoder(s, ns.UniversalDeserializer())\n> \n> question: does it mean that we will have migration to protobufs in etcd\n> for free?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24710/files/e416be61b90b5dc461dc8a84a94d6ecd0d76c216#r62161116\n",
        "createdAt" : "2016-05-05T13:57:53Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d63b92bf-ef86-4e11-9aa5-b67fa0ea9e40",
        "parentId" : "a1f80554-05a4-4ee0-8aaa-2d276b15d179",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - that's how I understood it. Thanks!\n",
        "createdAt" : "2016-05-05T14:00:51Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +256,260 @@\t}\n\n\tds := recognizer.NewDecoder(s, ns.UniversalDeserializer())\n\tencoder := ns.EncoderForVersion(s, storageVersion)\n\tdecoder := ns.DecoderToVersion(ds, memoryVersion)"
  },
  {
    "id" : "9fb7d51b-3f8c-41cd-800e-fff33d5eff56",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2627631-c758-4bbb-bce6-7864d8f2add0",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Add `var _ StorageFactory := &DefaultStorageFactory{}` to ensure that DefaultStorageFactory implements StorageFactory interface.\n",
        "createdAt" : "2016-04-19T01:55:34Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +44,48 @@// 2. Resource encodings for storage: group,version,kind to store as\n// 3. Cohabitating default: some resources like hpa are exposed through multiple APIs.  They must agree on 1 and 2\ntype DefaultStorageFactory struct {\n\t// DefaultEtcdConfig describes how to connect to etcd in general.  It's authentication information will be used for\n\t// every storage.Interface returned."
  },
  {
    "id" : "247c42b8-8db1-4f4a-bbe1-325ad79fa0df",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96a4644f-41df-453b-a3da-9206c8bd7979",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should be public?\n",
        "createdAt" : "2016-04-19T20:20:55Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e5ab2950-1ce8-4897-903e-b015dbd35417",
        "parentId" : "96a4644f-41df-453b-a3da-9206c8bd7979",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Should be public?\n\nDoesn't need to be.  Prefer to keep it private until we really need it exposed.\n",
        "createdAt" : "2016-04-19T20:30:29Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +66,70 @@}\n\ntype groupResourceOverrides struct {\n\t// etcdLocation contains the list of \"special\" locations that are used for particular GroupResources\n\t// These are merged on top of the default DefaultEtcdConfig when requesting the storage.Interface for a given GroupResource"
  },
  {
    "id" : "572e691b-a704-45d0-a390-75ad4762143c",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cba1273-a2e3-4fb6-9767-f2716233196d",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "same `var _ StorageFactory := &DefaultStorageFactory{}`\n",
        "createdAt" : "2016-04-20T18:35:16Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@// 2. Resource encodings for storage: group,version,kind to store as\n// 3. Cohabitating default: some resources like hpa are exposed through multiple APIs.  They must agree on 1 and 2\ntype DefaultStorageFactory struct {\n\t// DefaultEtcdConfig describes how to connect to etcd in general.  It's authentication information will be used for\n\t// every storage.Interface returned."
  }
]