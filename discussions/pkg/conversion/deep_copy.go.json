[
  {
    "id" : "5775d2ca-c3e5-4aab-a04f-a2db3d9a287f",
    "prId" : 8188,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40952e50-4f59-4f37-827d-dc47e5392e76",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This doesn't \"deep-copy\" keys of the map. It works for all our current api types, but this might not be true in the future, right? Maybe a TODO to fix it?\n",
        "createdAt" : "2015-05-14T07:39:35Z",
        "updatedAt" : "2015-05-14T20:47:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6101c99a-27ad-4b4b-994f-dc279fe93862",
        "parentId" : "40952e50-4f59-4f37-827d-dc47e5392e76",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Keys to a map in most cases can't be mutated, and in all cases should not. I don't think this is a big issue.\n\nIn fact, if you had a struct as a key that had a pointer, it would be hashed on what the pointer is, not the value of what it points to. So a deep copied key would no longer be equivalent.\n\nhttp://play.golang.org/p/iXtIlEFz7J\n",
        "createdAt" : "2015-05-14T16:46:42Z",
        "updatedAt" : "2015-05-14T20:47:20Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d031abc1679ccdc6ad0a2b4dd08d8dd71f7fb84",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +60,64 @@\t\t\t\treturn src, err\n\t\t\t}\n\t\t\tdst.SetMapIndex(k, copyVal)\n\t\t}\n\t\treturn dst, nil"
  },
  {
    "id" : "9e8701e4-7fea-4066-96c4-e8582dc3050c",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98e69b5f-04b2-4e68-8196-1324002bbcd7",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Creating an encoder on the fly makes this much more expensive than it has to be, because all the reflections have to be recopied.  The encoder should be static (assuming we have a finite number of types) and that will make this much less expensive.\n",
        "createdAt" : "2015-04-11T23:04:24Z",
        "updatedAt" : "2015-04-11T23:04:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\tbuff := &bytes.Buffer{}\n\tenc := gob.NewEncoder(buff)\n\tdec := gob.NewDecoder(buff)\n\terr := enc.Encode(source)"
  },
  {
    "id" : "d73be24c-9b31-4918-aa7d-3d7910c3a290",
    "prId" : 6435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935fac8e-d64a-4045-8140-72dd664614f6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What if source ins not Kind() Ptr?\n",
        "createdAt" : "2015-04-10T19:34:32Z",
        "updatedAt" : "2015-04-10T20:27:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2646e895-a913-49ee-841d-6e035b52cf08",
        "parentId" : "935fac8e-d64a-4045-8140-72dd664614f6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "reflect.New() will always return a pointer.\n",
        "createdAt" : "2015-04-10T20:13:11Z",
        "updatedAt" : "2015-04-10T20:27:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c2c8d6e4-d7b0-49ce-bd4b-4a0c36da8127",
        "parentId" : "935fac8e-d64a-4045-8140-72dd664614f6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "doh, of course.  Sorry.\n",
        "createdAt" : "2015-04-10T20:48:37Z",
        "updatedAt" : "2015-04-10T20:48:37Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f591873af7c12668c06736eb12f71ab8f325fc8c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@func DeepCopy(source interface{}) (interface{}, error) {\n\tsrc := reflect.ValueOf(source)\n\tv := reflect.New(src.Type()).Elem()\n\ts := &scope{\n\t\tconverter: deepCopier,"
  },
  {
    "id" : "a3d07ee5-a402-4a06-ba25-46d930516135",
    "prId" : 6435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3294d33a-def7-4eff-8537-82939cd36d29",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You're just using converter here because it exists, right?  There's not really any deeper reason?\n",
        "createdAt" : "2015-04-10T19:38:59Z",
        "updatedAt" : "2015-04-10T20:27:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "28faf620-8ae2-4665-ac8e-86a56d9f32e2",
        "parentId" : "3294d33a-def7-4eff-8537-82939cd36d29",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah.\n",
        "createdAt" : "2015-04-10T20:09:45Z",
        "updatedAt" : "2015-04-10T20:27:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f591873af7c12668c06736eb12f71ab8f325fc8c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\t\tconverter: deepCopier,\n\t}\n\tif err := deepCopier.convert(src, v, s); err != nil {\n\t\treturn nil, err\n\t}"
  }
]