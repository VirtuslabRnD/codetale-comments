[
  {
    "id" : "3a2fdabe-3f2d-4216-aa10-e6a8c28f1893",
    "prId" : 26044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90355542-45a7-47d9-ada7-595d406182e8",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This will tie particular conversions to particular encoders.  I'm not strictly against it since I can see the necessity for converting embedded objects (`Templates` come to mind), but are we sure this is the interface we want instead of forcing a little more structure and sending a `GroupVersioner`.\n",
        "createdAt" : "2016-06-07T16:57:42Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "22d60318-b39a-4aa6-a463-731f28958b9a",
        "parentId" : "90355542-45a7-47d9-ada7-595d406182e8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Conversion needs to be ignorant of who is using it I think.  And just\nfrom a package structure point of view, I don't want conversion to\ndepend on runtime or an external package.  It truly is generic to how\nit's used.\n",
        "createdAt" : "2016-06-07T21:11:30Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "12d7032c3973e3401244970b240ceae995a8eac2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +215,219 @@\tKeyNameMapping FieldMappingFunc\n\t// Context is an optional field that callers may use to pass info to conversion functions.\n\tContext interface{}\n}\n"
  },
  {
    "id" : "8d014fa0-8a30-4216-a60c-8463cd72b6fc",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2e9ba6b-29be-4540-8bf0-c37029967228",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Optional: Consider making this a method of ConversionFuncs?\n",
        "createdAt" : "2015-12-02T00:17:45Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b85ca966-e214-4cac-ba00-519c677b7584",
        "parentId" : "a2e9ba6b-29be-4540-8bf0-c37029967228",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, would be cleaner\n\nOn Dec 1, 2015, at 7:18 PM, Daniel Smith notifications@github.com wrote:\n\nIn pkg/conversion/converter.go\nhttps://github.com/kubernetes/kubernetes/pull/17922#discussion_r46361017:\n\n>  }\n> \n>  func (c *Converter) HasConversionFunc(inType, outType reflect.Type) bool {\n> - _, found := c.conversionFuncs[typePair{inType, outType}]\n> - _, found := c.conversionFuncs.fns[typePair{inType, outType}]\n\nOptional: Consider making this a method of ConversionFuncs?\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/17922/files#r46361017.\n",
        "createdAt" : "2015-12-02T04:31:49Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +377,381 @@\nfunc (c *Converter) HasConversionFunc(inType, outType reflect.Type) bool {\n\t_, found := c.conversionFuncs.fns[typePair{inType, outType}]\n\treturn found\n}"
  },
  {
    "id" : "194d29fa-f376-414b-9b0e-2c417833a342",
    "prId" : 7832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d668d65-4d3e-4e5b-a16c-e7c49f243197",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: missing r\n",
        "createdAt" : "2015-05-06T17:54:07Z",
        "updatedAt" : "2015-05-06T17:54:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "35a698ff-292f-49fa-af4d-ff58e8d2abaf",
        "parentId" : "3d668d65-4d3e-4e5b-a16c-e7c49f243197",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Will fix that in a subsequenct PR\n",
        "createdAt" : "2015-05-06T18:00:52Z",
        "updatedAt" : "2015-05-06T18:00:52Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "458fec6c9921b0b50030343820b4b64b1a7990d4",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +278,282 @@//\n// Example:\n// c.RegisteConversionFunc(\n//         func(in *Pod, out *v1beta1.Pod, s Scope) error {\n//                 // conversion logic..."
  },
  {
    "id" : "53dbca77-a16d-42d8-a9b9-681d425a38d4",
    "prId" : 3854,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3d43adb-522d-4a7e-b75e-9534d7946414",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add a TODO to convert this to glog.\n",
        "createdAt" : "2015-01-28T22:20:57Z",
        "updatedAt" : "2015-02-03T08:58:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a9c8acd8-6c19-4a99-b716-694a6cc5af04",
        "parentId" : "f3d43adb-522d-4a7e-b75e-9534d7946414",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Part of the reason it's not glog is that in test cases glog is not properly interspersed with \"t.Errorf\" messages, which makes debugging tables very very difficult.  It's probably better to leave this, since the only real case for this log is test suites.\n",
        "createdAt" : "2015-01-28T22:49:56Z",
        "updatedAt" : "2015-02-03T08:58:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9aee7232-6a94-4bbd-9b3b-5e42e54af5a4",
        "parentId" : "f3d43adb-522d-4a7e-b75e-9534d7946414",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ok.\n",
        "createdAt" : "2015-01-30T01:34:17Z",
        "updatedAt" : "2015-02-03T08:58:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a72addaeb301da2a8f8fbcb226991d62dbb012f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +418,422 @@\tif fv, ok := c.defaultingFuncs[st]; ok {\n\t\tif c.Debug != nil {\n\t\t\tc.Debug.Logf(\"Applying defaults for '%v'\", st)\n\t\t}\n\t\targs := []reflect.Value{sv.Addr()}"
  },
  {
    "id" : "b5c7ff14-2c3e-4d8a-a177-7a33ffaa685e",
    "prId" : 3854,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c485915-92b9-4d88-a228-ef716b32386b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We need a test explicitly for the new defaulting code. The existing tests were implicitly relying on the ad hoc default approaches that were previously used. Now they're not.\n",
        "createdAt" : "2015-01-28T23:42:54Z",
        "updatedAt" : "2015-02-03T08:58:13Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a72addaeb301da2a8f8fbcb226991d62dbb012f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +283,287 @@//                 // defaulting logic...\n//          })\nfunc (c *Converter) RegisterDefaultingFunc(defaultingFunc interface{}) error {\n\tfv := reflect.ValueOf(defaultingFunc)\n\tft := fv.Type()"
  }
]