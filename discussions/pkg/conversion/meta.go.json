[
  {
    "id" : "dc054260-0ab1-49a6-94ca-bd58e33ee85d",
    "prId" : 18473,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d54c828-9e10-4fd5-a362-1c53e2b015cf",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If this method stays, I'll update it to accept `GroupVersion`.  Also, do we really care about supporting `versionField` and `kindField` with different values now that there's a mechanism to set it exactly how you want with `SetGroupVersionKind`?  They seem unnecessary.\n",
        "createdAt" : "2015-12-10T12:58:30Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a7b8eb02-571b-4664-9db1-4dd81f6db855",
        "parentId" : "4d54c828-9e10-4fd5-a362-1c53e2b015cf",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This method does not stay.  It's deader than a doorknob.\n\nOn Thu, Dec 10, 2015 at 7:58 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/conversion/meta.go\n> https://github.com/kubernetes/kubernetes/pull/18473#discussion_r47222593\n> :\n> \n> > @@ -76,11 +76,35 @@ func (f SimpleMetaFactory) Update(version, kind string, obj interface{}) error {\n> >     return UpdateVersionAndKind(f.BaseFields, f.VersionField, version, f.KindField, kind, obj)\n> >  }\n> > \n> > +// typedObject is identical to pkg/runtime.Object.\n> > +// TODO: will be removed when codec is separated from scheme.\n> > +type typedObject interface {\n> > -   // SetGroupVersionKind sets or clears the stored version with an object. Because most serialization\n> > -   // requires this field, it is our marker interface for our objects.\n> > -   SetGroupVersionKind(gvk *unversioned.GroupVersionKind)\n> > -   // GroupVersionKind returns the stored group, version, and kind of an object, or nil if the object does\n> > -   // not allow those fields to be encoded.\n> > -   GroupVersionKind() *unversioned.GroupVersionKind\n> >   +}\n> >   +\n> >   // UpdateVersionAndKind uses reflection to find and set the versionField and kindField fields\n> >   // on a pointer to a struct to version and kind. Provided as a convenience for others\n> >   // implementing MetaFactory. Pass an array to baseFields to check one or more nested structs\n> >   // for the named fields. The version field is treated as optional if it is not present in the struct.\n> >   func UpdateVersionAndKind(baseFields []string, versionField, version, kindField, kind string, obj interface{}) error {\n> \n> If this method stays, I'll update it to accept GroupVersion. Also, do we\n> really care about supporting versionField and kindField with different\n> values now that there's a mechanism to set it exactly how you want with\n> SetGroupVersionKind? They seem unnecessary.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/18473/files#r47222593.\n",
        "createdAt" : "2015-12-10T14:25:59Z",
        "updatedAt" : "2015-12-15T18:36:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f203a28f1d17b9371673ff147aa7e8f34f093f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +82,86 @@// for the named fields. The version field is treated as optional if it is not present in the struct.\n// TODO: this method is on its way out\nfunc UpdateVersionAndKind(baseFields []string, versionField, version, kindField, kind string, obj interface{}) error {\n\tif typed, ok := obj.(unversioned.ObjectKind); ok {\n\t\tif len(version) == 0 && len(kind) == 0 {"
  },
  {
    "id" : "37441aca-31a9-4e11-a1c0-4b055c044329",
    "prId" : 14203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53f819ab-41ce-4125-bd11-8bf4e2edcd8b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does the test exercise this code path? I'm pretty sure it doesn't-- please add a test.\n",
        "createdAt" : "2015-09-19T00:19:00Z",
        "updatedAt" : "2015-09-21T22:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab5c1f6710ca88b274d927b7197ce02df15f621b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\t\t// overly broad and a bit hacky.\n\t\tif pkg == \"unversioned\" {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"couldn't find %v field in %#v\", kindField, v.Interface())"
  },
  {
    "id" : "74d0df5f-e696-4031-9ac2-44f939f6a8e3",
    "prId" : 14203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3e948aa-3a1e-4185-bd8c-9118968a0ed1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry, I was still thinking about this one. :) Can you add a comment here, `// TODO: add some type trait here, or some way of indicating whether this feature is allowed on a per-type basis. Using package name is overly broad and a bit hacky.`\n",
        "createdAt" : "2015-09-21T18:31:20Z",
        "updatedAt" : "2015-09-21T22:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab5c1f6710ca88b274d927b7197ce02df15f621b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +102,106 @@\t\t// this feature is allowed on a per-type basis. Using package name is\n\t\t// overly broad and a bit hacky.\n\t\tif pkg == \"unversioned\" {\n\t\t\treturn nil\n\t\t}"
  }
]