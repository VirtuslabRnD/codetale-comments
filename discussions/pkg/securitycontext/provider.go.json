[
  {
    "id" : "ec028b02-9582-4d6f-932c-6491ee70b39c",
    "prId" : 24600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04dd3161-1932-4e27-a749-3b442006366a",
        "parentId" : null,
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "this is a partial commit of https://github.com/kubernetes/kubernetes/pull/22857 for just what I need.  I can rebase https://github.com/kubernetes/kubernetes/pull/22857 after this goes in.\n",
        "createdAt" : "2016-05-06T00:24:55Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c8a1f66c14a2cb2223d5ab12340fa4b2d88f95",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +160,164 @@\t}\n\n\tif containerSc.ReadOnlyRootFilesystem != nil {\n\t\teffectiveSc.ReadOnlyRootFilesystem = new(bool)\n\t\t*effectiveSc.ReadOnlyRootFilesystem = *containerSc.ReadOnlyRootFilesystem"
  },
  {
    "id" : "4ff9554b-2b0c-4092-8266-328342c07d44",
    "prId" : 14991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ed0880a-8a93-4bf1-9848-6f298b1c009c",
        "parentId" : null,
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "nit, we can just check len(supgroups) here and skip the make\n",
        "createdAt" : "2015-10-13T18:20:44Z",
        "updatedAt" : "2015-10-20T16:51:13Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "08d275e5-9b58-450b-b8b8-62082f006b97",
        "parentId" : "8ed0880a-8a93-4bf1-9848-6f298b1c009c",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "is there any reason to skip the infra container here @pmorie ?  I think there was an open question on that item before.\n",
        "createdAt" : "2015-10-13T18:21:43Z",
        "updatedAt" : "2015-10-20T16:51:13Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "1004a723-e003-4d41-8b93-6fed68865af2",
        "parentId" : "8ed0880a-8a93-4bf1-9848-6f298b1c009c",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@pweil- The reason to skip the infra container is the bug fixed by opencontainers/runc#313, where a container without an /etc/groups file can't be started if it has supplemental groups.\n\nI _think_ we should be able to back that hack out, but for now, it should really be documented with a comment in the code.\n\n@swagiaal \n",
        "createdAt" : "2015-10-15T16:14:17Z",
        "updatedAt" : "2015-10-20T16:51:13Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "030f882f06ec7cbb47dab0ae573ed084a00de8be",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@\t\t// This can be removed once the fix makes it into the\n\t\t// required version of docker.\n\t\tif pod.Spec.SecurityContext.SupplementalGroups != nil && container.Name != leaky.PodInfraContainerName {\n\t\t\thostConfig.GroupAdd = make([]string, len(pod.Spec.SecurityContext.SupplementalGroups))\n\t\t\tfor i, group := range pod.Spec.SecurityContext.SupplementalGroups {"
  },
  {
    "id" : "18612451-a31d-4a1e-900d-eccfbdbf21e8",
    "prId" : 14705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dbfa2dc-e38f-4c3b-aa34-c7b8166c4b99",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@pweil- Particularly interested in your thoughts on this code before I write a bunch of tests for code that's wrong :-D\n",
        "createdAt" : "2015-09-29T03:06:29Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "a183f45d-f60d-4c2d-b75c-411d56847a69",
        "parentId" : "1dbfa2dc-e38f-4c3b-aa34-c7b8166c4b99",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "Still need a nil check here if PSC and CSC aren't set but this otherwise matches up with what we were discussing.  \n",
        "createdAt" : "2015-09-29T13:28:39Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "393e2bc0195343c83933aa0cf1c02e854fe8779b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@// the container is created.\nfunc (p SimpleSecurityContextProvider) ModifyContainerConfig(pod *api.Pod, container *api.Container, config *docker.Config) {\n\teffectiveSC := determineEffectiveSecurityContext(pod, container)\n\tif effectiveSC == nil {\n\t\treturn"
  },
  {
    "id" : "d415465f-54c7-4519-865e-0bcc16d99635",
    "prId" : 14705,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@pweil- @smarterclayton @liggitt I'm starting to think this is wrong.  I think if you have `container.SecurityContext` specified at all, it should win for that container over `pod.Spec.SecurityContext`, period.  Otherwise old clients cannot reason correctly about what a container's `SecurityContext` is.\n",
        "createdAt" : "2015-09-29T04:05:34Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2af1a60a-1a73-412e-bde2-9b4a0010b85c",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That is correct.\n\nOn Tue, Sep 29, 2015 at 6:05 AM, Paul Morie notifications@github.com\nwrote:\n\n> In pkg/securitycontext/provider.go\n> https://github.com/kubernetes/kubernetes/pull/14705#discussion_r40632969\n> :\n> \n> > @@ -95,3 +96,53 @@ func makeCapabilites(capAdd []api.Capability, capDrop []api.Capability) ([]strin\n> >     }\n> >     return addCaps, dropCaps\n> >  }\n> > +\n> > +func determineEffectiveSecurityContext(pod *api.Pod, container *api.Container) *api.SecurityContext {\n> \n> @pweil- https://github.com/pweil- @smarterclayton\n> https://github.com/smarterclayton @liggitt https://github.com/liggitt\n> I'm starting to think this is wrong. I think if you have\n> container.SecurityContext specified at all, it should win for that\n> container over pod.Spec.SecurityContext, period. Otherwise old clients\n> cannot reason correctly about what a container's SecurityContext is.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/14705/files#r40632969.\n",
        "createdAt" : "2015-09-29T13:31:18Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2e28d908-67ee-4cee-b41c-c0b5cf5f3f8e",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I am not sure I follow.  If we assert that non-specified values in container.SC mean \"do the right thing\" and always have, why would a non-nil CSC with no values in it take precedence over PSC with values?\n",
        "createdAt" : "2015-10-09T05:02:40Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "31f1de29-7dc5-4ddd-8143-1408a23cfb48",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I think I'm with @thockin on this one.\n",
        "createdAt" : "2015-10-09T20:28:36Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "2d12af4f-58c3-47f0-83d9-01443fce7a0f",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "a non-nil CSC should take precedence\n",
        "createdAt" : "2015-10-09T20:30:36Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "92e7528b-b688-4fc3-9175-404e65361e8e",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "It does take precedence, in fact, what am I missing?\n",
        "createdAt" : "2015-10-09T20:30:56Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "60969703-03e6-469a-bc7b-6d35169cc43e",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "If you have a non-nil but empty CSC, that means none of the values from the PSC apply. e.g. if you have PSC.RunAsUser=1234, you lose that because CSC.RunAsUser=nil wins.\n",
        "createdAt" : "2015-10-09T20:32:45Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "3e227a52-66db-4dd3-95dc-878041636419",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "if you have a non-nil but empty CSC you did it wrong\n",
        "createdAt" : "2015-10-10T05:45:20Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "42b31717-f575-45a8-97b8-23061c74abe6",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "the doc fir this feature should handle this corner case and call it out as something not to do\n",
        "createdAt" : "2015-10-10T05:46:56Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "43252ac6-43e9-48b9-981e-4e4539eab9bf",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "So if I have a CSC `{ RunAsUser: 1234 }`, that nullifies my PSC `{ Capabilities: {...}; SELinux: {...}; /* etc */ }` ??  That still feels wrong\n",
        "createdAt" : "2015-10-16T03:59:27Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f259cb64-bd91-4a96-a524-0ad6b69e01ab",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin It does, but that's the only way this can work and be backwards compatible.\n",
        "createdAt" : "2015-10-16T16:55:31Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "edc0596e-34a3-462e-a6ba-7a2bba8dbd91",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I would say perhaps in the V2 API we can implement field-level munging into an effective security context, but V1 has to be this way for backward compat.\n",
        "createdAt" : "2015-10-16T16:56:12Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3a56d578-8745-42fb-87df-5c3b7ab45d5e",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Hold up.  @smarterclayton I thought we (you) made a strong case that every field in container.SecurityContext had \"do the right thing if not provided\" semantics.  I took a look at it, and (while the comments are obsolete and terrible) that seems to be the case.\n\nIn this case DTRT means defer to PSC, doesn't it?  Why do I find myself convincing you when you convinced me? \n",
        "createdAt" : "2015-10-16T17:30:36Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1a313001-cb48-4cd6-a508-f5391c3bb890",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Do we need to have a hangout to work through this @smarterclayton @thockin ?  I feel like if we are still not clear on the semantics we need to get on the same page and update the recorded semantics in the proposal, since if there's any confusion, the proposal didn't successfully articulate things clearly.\n",
        "createdAt" : "2015-10-17T16:50:25Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3f0d20c9-ad26-4fef-a9d8-27612f611b9d",
        "parentId" : "a97aa7de-2f39-42fb-86c2-07c9a6f54344",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Added a comment on #14705 to articulate my thoughts on this\n",
        "createdAt" : "2015-10-17T17:54:58Z",
        "updatedAt" : "2015-10-21T23:01:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "393e2bc0195343c83933aa0cf1c02e854fe8779b",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +117,121 @@}\n\nfunc determineEffectiveSecurityContext(pod *api.Pod, container *api.Container) *api.SecurityContext {\n\teffectiveSc := securityContextFromPodSecurityContext(pod)\n\tcontainerSc := container.SecurityContext"
  },
  {
    "id" : "29c32078-5024-4ff6-bb46-1ce5400d496e",
    "prId" : 7343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6efe0661-6076-4ba7-a701-25096c28b1c9",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Nit, godoc\n",
        "createdAt" : "2015-04-30T21:53:58Z",
        "updatedAt" : "2015-05-05T17:53:02Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e5b904e8c462b2ccf0660a6f0fa7c4d45cd4252",
    "line" : null,
    "diffHunk" : "@@ -1,1 +27,31 @@\n// NewSimpleSecurityContextProvider creates a new SimpleSecurityContextProvider.\nfunc NewSimpleSecurityContextProvider() SecurityContextProvider {\n\treturn SimpleSecurityContextProvider{}\n}"
  }
]