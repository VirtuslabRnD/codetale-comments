[
  {
    "id" : "04d48a9b-536d-4226-b0a4-ee6aa67e95e5",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d30f5fed-706d-401f-8504-2fedf0b2373c",
        "parentId" : null,
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "Quorum-read knob?\n",
        "createdAt" : "2016-03-25T08:09:56Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      },
      {
        "id" : "dbef7eea-d1c9-4507-a048-45f2e8d71df0",
        "parentId" : "d30f5fed-706d-401f-8504-2fedf0b2373c",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "seems etcd v3 ensures linearizability for all operations except watch by default.\n",
        "createdAt" : "2016-03-25T09:00:30Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "ff51ec48-947d-40c5-bcf1-5a27bd88be2e",
        "parentId" : "d30f5fed-706d-401f-8504-2fedf0b2373c",
        "authorId" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "body" : "yeah, see [v3-api](https://github.com/coreos/etcd/blob/master/Documentation/api_v3.md)\n",
        "createdAt" : "2016-03-25T09:12:32Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "tags" : [
        ]
      },
      {
        "id" : "849363a1-3179-46b1-90f2-934691a06254",
        "parentId" : "d30f5fed-706d-401f-8504-2fedf0b2373c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@hongchaodeng - IIUC, there isn't something like \"read-knob\" in v3, since all operations are linearized.\nCan you confirm?\n",
        "createdAt" : "2016-03-29T09:43:33Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "af831da0-5848-4193-a6ca-39137021c0f3",
        "parentId" : "d30f5fed-706d-401f-8504-2fedf0b2373c",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Yes.\n",
        "createdAt" : "2016-03-29T15:10:27Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@\tcodec      runtime.Codec\n\tversioner  storage.Versioner\n\tpathPrefix string\n}\n"
  },
  {
    "id" : "1252e723-1448-4985-b966-229dc0c15653",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4ef1551-8f34-4b04-b212-d02e428a5183",
        "parentId" : null,
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "Quorum-read parameter?\n",
        "createdAt" : "2016-03-25T08:10:16Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : null,
    "diffHunk" : "@@ -1,1 +57,61 @@}\n\nfunc newStore(c *clientv3.Client, codec runtime.Codec, prefix string) *store {\n\treturn &store{\n\t\tclient:     c,"
  },
  {
    "id" : "40a0f31a-c25d-424a-8ff3-6fc4739cd17b",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e240401-5f5b-4af4-b08a-b0aa9690d6cc",
        "parentId" : null,
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "in some case we may want to ignore the not found error if we are deleting not exist key.\n",
        "createdAt" : "2016-03-25T08:39:07Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "06541b9b-6381-4a80-9060-d70c92cc2480",
        "parentId" : "5e240401-5f5b-4af4-b08a-b0aa9690d6cc",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Not at this level. You may handle it in upper versions of the system.\n",
        "createdAt" : "2016-03-25T13:04:26Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +162,166 @@\t}\n\tgetResp := txnResp.Responses[0].GetResponseRange()\n\tif len(getResp.Kvs) == 0 {\n\t\treturn storage.NewKeyNotFoundError(key, 0)\n\t}"
  },
  {
    "id" : "47b000b4-c143-484a-8444-320d18b72c4d",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "parentId" : null,
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "should read requests also support serializable consistency mode?\n",
        "createdAt" : "2016-03-25T09:01:36Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "958a5625-ad4b-4e96-9ee2-2dd6fb862c0b",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "body" : "seems not, please see:\n\n```\nFor example, consider a client completing a write at time point 1 (t1). A client issuing a read at t2 (for t2 > t1) should receive a value at least as recent as the previous write, completed at t1. However, the read might actually complete only by t3, and the returned value, current at t2 when the read began, might be \"stale\" by t3.\n```\n\nt3>t2>t1\nwrite-> value1-- t1\nread -- begin at t2, complete at t3\nwhen there has another write  completes(value2) in t2~t3, the read maybe get  value2. am i right?\n@hongchaodeng \n",
        "createdAt" : "2016-03-25T09:23:16Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "tags" : [
        ]
      },
      {
        "id" : "a72e8862-ecec-45df-b087-71612d113417",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "body" : "If we use serializable consistency mode, we may get stale data for read requests, but for use cases which needs low latency and high throughput, this maybe useful.\n",
        "createdAt" : "2016-03-25T09:29:36Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "9eb1241d-3dca-4a34-a85d-a880ba615f8c",
        "tags" : [
        ]
      },
      {
        "id" : "f5628674-fac2-4e81-971d-d7bffa784f66",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "body" : "yes:)\n",
        "createdAt" : "2016-03-25T09:32:15Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "tags" : [
        ]
      },
      {
        "id" : "eb9ca033-114c-4dee-8562-2b24ebcc45fb",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "So, we should add a quorum-read knob, user could config it.\n",
        "createdAt" : "2016-03-25T09:38:17Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      },
      {
        "id" : "18bca1ba-347c-4a5f-a3ee-856f727a05e7",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I agree that we might want to have a quorum-read knob at the level of the class.\nHowever, we don't want to change the interface of this method, because it's just implementation of the existing interface. So if you think we should change it - please open an issue for it.\n",
        "createdAt" : "2016-03-25T13:03:19Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "01952de9-0e75-4414-b888-91c51efa2b35",
        "parentId" : "fbe831f5-a10b-48b7-bb81-99e25e9e3172",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We already have a quorum-read knob, it gets plumbed into the construction\nroutine.\n\nOn Fri, Mar 25, 2016 at 6:03 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/storage/etcd3/store.go\n> https://github.com/kubernetes/kubernetes/pull/23387#discussion_r57442015\n> :\n> \n> > -   if err != nil {\n> > -       return err\n> > -   }\n> > -   if !txnResp.Succeeded {\n> > -       return storage.NewResourceVersionConflictsError(key, rev)\n> > -   }\n> >   +\n> > -   if out != nil {\n> > -       putResp := txnResp.Responses[0].GetResponsePut()\n> > -       return decode(s.codec, s.versioner, data, out, putResp.Header.Revision)\n> > -   }\n> >   +\n> > -   return nil\n> >   +}\n> >   +\n> >   +func (s *store) Get(ctx context.Context, key string, out runtime.Object, ignoreNotFound bool) error {\n> \n> I agree that we might want to have a quorum-read knob at the level of the\n> class.\n> However, we don't want to change the interface of this method, because\n> it's just implementation of the existing interface. So if you think we\n> should change it - please open an issue for it.\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23387/files/b5089be779696ff7f5d6bf9131dff18c03949cb7#r57442015\n",
        "createdAt" : "2016-03-25T17:00:12Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : null,
    "diffHunk" : "@@ -1,1 +91,95 @@\n// Get implements storage.Interface.Get.\nfunc (s *store) Get(ctx context.Context, key string, out runtime.Object, ignoreNotFound bool) error {\n\tkey = keyWithPrefix(s.pathPrefix, key)\n\tgetResp, err := s.client.KV.Get(ctx, key)"
  },
  {
    "id" : "57e6b259-c284-4ac6-ba33-91b6bbac3b51",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df548445-5b69-410c-b955-74b78b0bcee0",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I still don't understand the need for Get + Delete vs. just Delete.  \n",
        "createdAt" : "2016-03-28T20:36:08Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "2223abbc-d8bc-42c7-94d5-3671e2ea3323",
        "parentId" : "df548445-5b69-410c-b955-74b78b0bcee0",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "https://github.com/coreos/etcd/issues/4620.\n\nDelete now does not return previous value (or by default in the future.)\n",
        "createdAt" : "2016-03-28T20:43:32Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "8b9cb090-7cad-4e93-8b6a-405df3bf9113",
        "parentId" : "df548445-5b69-410c-b955-74b78b0bcee0",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I need to double check if the higher order code even uses the previous value.  If not, couldn't we just eliminate the need for (out)?  \n",
        "createdAt" : "2016-03-30T16:54:07Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "10bc49a0-dd02-4485-9f2a-8ddb85059b31",
        "parentId" : "df548445-5b69-410c-b955-74b78b0bcee0",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "@timothysc Thanks! That would be great. Previously, it is impossible for etcd to get previous after a deletion or modification. Now etcd supports multiple versioned key, so it is possible for the application to get the previous value when they want. We will probably add a shortcut into etcd to save a RTT, but it will be an optional optimization.\n",
        "createdAt" : "2016-03-30T16:59:10Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +155,159 @@\t// know the value and revision before deleting it.\n\ttxnResp, err := s.client.KV.Txn(ctx).If().Then(\n\t\tclientv3.OpGet(key),\n\t\tclientv3.OpDelete(key),\n\t).Commit()"
  },
  {
    "id" : "8171e1f3-4024-4fb7-8f17-9acd069fbd4d",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41fd73f3-b12d-4439-8773-c6e7fbc01156",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Don't we risk getting stuck in a loop with no diagnostics.  Could we create a V4 log to denote here. \n",
        "createdAt" : "2016-03-28T20:39:31Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "90e51a67-2aec-4e82-96a1-a3ec07aa5474",
        "parentId" : "41fd73f3-b12d-4439-8773-c6e7fbc01156",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I totally share the fear here.\nAnd to be honest, I'm not even sure, we should do this in a loop here. Why not just simply single \"if-then-else\" transaction?\n",
        "createdAt" : "2016-03-29T09:54:20Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "0d72615b-8283-4157-8a58-c5c53db817af",
        "parentId" : "41fd73f3-b12d-4439-8773-c6e7fbc01156",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "I agree with the logging.\n\nRe. \"getResp\", we can save a round-trip in combing the get into else statement. Basically, we need to get  current state from etcd before passing to user defined func. If we do normal flow like getState -> user update -> transaction in etcd, we have 2 round-trips. Doing like this only have one.\n\nOf course, this is not very urgent in my mind. Let me know if you want the other.\n",
        "createdAt" : "2016-03-29T15:21:58Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : null,
    "diffHunk" : "@@ -1,1 +196,200 @@\t\t\tgetResp = (*clientv3.GetResponse)(txnResp.Responses[0].GetResponseRange())\n\t\t\tglog.V(4).Infof(\"deletion of %s failed because of a conflict, going to retry\", key)\n\t\t\tcontinue\n\t\t}\n\t\treturn decode(s.codec, s.versioner, origState.data, out, origState.rev)"
  },
  {
    "id" : "d8eb7fad-c996-49c6-ae9c-810cfbea7574",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47fa0657-eff0-4978-940d-307d3911379c",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "same comment. \n",
        "createdAt" : "2016-03-28T20:40:46Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "b6304eb8-56f9-4bd8-83c5-162c5a35dd71",
        "parentId" : "47fa0657-eff0-4978-940d-307d3911379c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1 for V(4) log\n",
        "createdAt" : "2016-03-29T09:58:40Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +247,251 @@\t\t}\n\t\tif !txnResp.Succeeded {\n\t\t\tgetResp = (*clientv3.GetResponse)(txnResp.Responses[0].GetResponseRange())\n\t\t\tglog.V(4).Infof(\"GuaranteedUpdate of %s failed because of a conflict, going to retry\", key)\n\t\t\tcontinue"
  },
  {
    "id" : "0d8dea4c-7641-448b-92d2-f21a8f51aa00",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f230551-278f-4b73-bb29-4ff774af9fbe",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I like this better +1\n",
        "createdAt" : "2016-03-28T20:43:36Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +271,275 @@\t\treturn nil\n\t}\n\telems := []*elemForDecode{{\n\t\tdata: getResp.Kvs[0].Value,\n\t\trev:  uint64(getResp.Kvs[0].ModRevision),"
  },
  {
    "id" : "68116e03-4797-4be5-b9c1-bb0d6ed254e9",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5a42249-3345-4fc4-8250-cec61c76b0e9",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Comments on exposed f(n)s. \n",
        "createdAt" : "2016-03-30T16:32:14Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "8143b2fe-ee8e-4971-8421-05ccbf224e1a",
        "parentId" : "d5a42249-3345-4fc4-8250-cec61c76b0e9",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Those are implementation of storage.Interface. It's not really a convention to put comments on implementation. But sure, I will put some simple thing to say that they \"implements storage.Interface\"\n",
        "createdAt" : "2016-03-30T16:48:07Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "0ebfb363-f4ff-4954-bcbe-3f8683b06131",
        "parentId" : "d5a42249-3345-4fc4-8250-cec61c76b0e9",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "probably just Backends implements Backends method in X interface?\n",
        "createdAt" : "2016-03-30T16:49:16Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : null,
    "diffHunk" : "@@ -1,1 +67,71 @@\n// Backends implements storage.Interface.Backends.\nfunc (s *store) Backends(ctx context.Context) []string {\n\tresp, err := s.client.MemberList(ctx)\n\tif err != nil {"
  }
]