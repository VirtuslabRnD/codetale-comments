[
  {
    "id" : "35b783b9-8f08-4f3b-9646-2a1ede1d3e18",
    "prId" : 40548,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40548#pullrequestreview-18790428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48b32080-8649-4d80-a991-da773e899fe5",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "So you go the same route as I do in episode 3: use client-go's api code in tests. I hope this cyclic dependency does not bite us one day.",
        "createdAt" : "2017-01-27T07:59:49Z",
        "updatedAt" : "2017-01-27T19:02:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fb37f3bbac099502d99a04d056f0eeec868d7ef",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@\t\"k8s.io/apimachinery/pkg/util/wait\"\n\t\"k8s.io/apimachinery/pkg/watch\"\n\t\"k8s.io/client-go/pkg/api\"\n\t\"k8s.io/client-go/pkg/api/v1\"\n\t\"k8s.io/kubernetes/pkg/storage\""
  },
  {
    "id" : "07511274-659c-426d-8a47-433ba47e3d0d",
    "prId" : 24208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "252463ce-d1d9-4993-9e11-ecc7bf8a7bef",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "this logic could probably be reduced but it's a test so whatevers... re: parse + addition + convert \n",
        "createdAt" : "2016-04-13T21:13:38Z",
        "updatedAt" : "2016-04-14T13:37:30Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "d884f517-b4ed-447b-a8ba-d45a9bde7f9b",
        "parentId" : "252463ce-d1d9-4993-9e11-ecc7bf8a7bef",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yeah, I considered that but decided to be lazy :smile: \n",
        "createdAt" : "2016-04-13T21:15:12Z",
        "updatedAt" : "2016-04-14T13:37:30Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "aa9aa770-f0e9-4e2b-a1f9-c76691b86e8c",
        "parentId" : "252463ce-d1d9-4993-9e11-ecc7bf8a7bef",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "SGTM\n",
        "createdAt" : "2016-04-14T06:37:01Z",
        "updatedAt" : "2016-04-14T13:37:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d2899989-3a0b-4a4e-a609-6bdf67901b66",
        "parentId" : "252463ce-d1d9-4993-9e11-ecc7bf8a7bef",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I would do the same :)\n",
        "createdAt" : "2016-04-14T06:37:15Z",
        "updatedAt" : "2016-04-14T13:37:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "049e63d253d5e7005c392fa37b0271119f761e72",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +359,363 @@\n\t// Set up Watch starting at fooCreated.ResourceVersion + 10\n\trv, err := storage.ParseWatchResourceVersion(fooCreated.ResourceVersion)\n\tif err != nil {\n\t\tt.Fatalf(\"Unexpected error: %v\", err)"
  },
  {
    "id" : "90cbc62c-4738-4d5f-92de-36dec4b68572",
    "prId" : 24208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ad71944-59ee-4756-aa5d-b42341480778",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "could nit, not going to, will let @wojtek-t decide.\n",
        "createdAt" : "2016-04-14T02:11:23Z",
        "updatedAt" : "2016-04-14T13:37:30Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "049e63d253d5e7005c392fa37b0271119f761e72",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +394,398 @@\t\tt.Errorf(\"timed out waiting for event\")\n\t}\n}"
  },
  {
    "id" : "e9146caa-e224-4612-ac98-a5945994d808",
    "prId" : 16947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10feef86-2ac9-4ff0-ae3e-398e9f0ae36e",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "What are these magic numbers? Is it that the cacheWatchers have input and result channels with buffer size 10? so enough to block both?\n",
        "createdAt" : "2015-11-06T21:12:34Z",
        "updatedAt" : "2015-11-06T21:12:34Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "07bdb9d6-e6dd-4b41-856b-cd184d708bc0",
        "parentId" : "10feef86-2ac9-4ff0-ae3e-398e9f0ae36e",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - exactly.\nBoth input and output have size 10 and there can we 1 \"in flight\" during the translation.\nSo with 21 the tests was still passing without the fix.\n",
        "createdAt" : "2015-11-06T21:16:40Z",
        "updatedAt" : "2015-11-06T21:16:40Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "45a1ec73bb3a0658a482e17c05ef27e2f1bd493a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +243,247 @@\tdefer readingWatcher.Stop()\n\n\tfor i := 1; i <= 22; i++ {\n\t\tpod := makeTestPod(strconv.Itoa(i))\n\t\t_ = updatePod(t, etcdStorage, pod, nil)"
  },
  {
    "id" : "8fe8e729-23a0-4b62-9034-17285574fd17",
    "prId" : 16664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e1d4891-1f8c-42e8-96aa-073f70523ada",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "same comment as above, otherwise folks reading would need to follow \"why\" it's 8.  \n",
        "createdAt" : "2015-11-02T19:51:46Z",
        "updatedAt" : "2015-11-03T09:59:49Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "483f88db-c044-498f-98ec-0c501c16f172",
        "parentId" : "8e1d4891-1f8c-42e8-96aa-073f70523ada",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added comment.\n",
        "createdAt" : "2015-11-03T09:57:16Z",
        "updatedAt" : "2015-11-03T09:59:49Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6246201eece9045efe72910cea0ffd99b5a30fae",
    "line" : null,
    "diffHunk" : "@@ -1,1 +108,112 @@\t// TODO: We need to pass ResourceVersion of barPod deletion operation.\n\t// However, there is no easy way to get it, so it is hardcoded to 8.\n\tif err := cacher.List(context.TODO(), \"pods/ns\", 8, storage.Everything, result); err != nil {\n\t\tt.Errorf(\"Unexpected error: %v\", err)\n\t}"
  },
  {
    "id" : "c857ffa6-8869-4317-b6c6-846e887d5e58",
    "prId" : 16664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41b6cc30-cbdb-4aae-9c2b-0630b505c04d",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Do we need this?  I typically like having the tests get stuck in the exact location where it is to trace through the stack.  \n",
        "createdAt" : "2015-11-02T19:53:09Z",
        "updatedAt" : "2015-11-03T09:59:49Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "37a9ed36-e77e-46f9-b9db-ddee50969c32",
        "parentId" : "41b6cc30-cbdb-4aae-9c2b-0630b505c04d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think we need - if there is a bug and events are not delivered to the watcher, this branch will be triggered.\n",
        "createdAt" : "2015-11-03T09:58:16Z",
        "updatedAt" : "2015-11-03T09:59:49Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6246201eece9045efe72910cea0ffd99b5a30fae",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\t\tt.Errorf(\"Expected (%s): %#v, got: %#v\", eventType, e, a)\n\t\t}\n\tcase <-time.After(util.ForeverTestTimeout):\n\t\tt.Errorf(\"Timed out waiting for an event\")\n\t}"
  },
  {
    "id" : "d44779bf-5b9d-4940-8a85-800688227e2d",
    "prId" : 13910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "098c13f6-3482-4fd4-9935-3ff4b74b14a3",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think we still need a test to test the too-old-error scenario when resourceVersion != 0\n\nIs that covered elsewhere, it looked like previously we were using 0 as that test which is no longer valid.\n",
        "createdAt" : "2015-09-15T14:04:21Z",
        "updatedAt" : "2015-09-15T14:17:38Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "b995ab77-ba2f-44bb-8b01-8fa6b6e04c9d",
        "parentId" : "098c13f6-3482-4fd4-9935-3ff4b74b14a3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Done.\n",
        "createdAt" : "2015-09-15T14:17:45Z",
        "updatedAt" : "2015-09-15T14:17:45Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "12eaf67acceb0bcd49527667dc154b8c670752ea",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +304,308 @@\n\t// Now test watch from \"now\".\n\tnowWatcher, err := cacher.Watch(\"pods/ns/foo\", 0, storage.Everything)\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error: %v\", err)"
  },
  {
    "id" : "467f0857-192f-4172-8f1f-e71aba38ef0c",
    "prId" : 12975,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0206b792-a679-4fb6-88c9-c6e54c2e9e61",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "should you duplicate this function, so you still have TestList(), in addition to TestListFromMemory()?\n",
        "createdAt" : "2015-08-21T07:13:47Z",
        "updatedAt" : "2015-08-21T07:25:01Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "6336df7f-f757-4192-ae26-7cd24cc56ee2",
        "parentId" : "0206b792-a679-4fb6-88c9-c6e54c2e9e61",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The new List() function is just delegating its work to underlying storage. I can add a test for it, but I'm not sure it adds any value.\n",
        "createdAt" : "2015-08-21T07:25:41Z",
        "updatedAt" : "2015-08-21T07:25:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "faa0baca-e056-42c1-8de2-6f716f69e14e",
        "parentId" : "0206b792-a679-4fb6-88c9-c6e54c2e9e61",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "But you used to test List() whereas now you are not, right?\n",
        "createdAt" : "2015-08-21T08:00:04Z",
        "updatedAt" : "2015-08-21T08:00:04Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "2a0d4753-bd5a-4ad5-9eb8-fdb2b9723e74",
        "parentId" : "0206b792-a679-4fb6-88c9-c6e54c2e9e61",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "But I renamed previous List to ListFromMemory (so I'm basically testing the same code that I tested before).\n",
        "createdAt" : "2015-08-21T08:04:11Z",
        "updatedAt" : "2015-08-21T08:04:11Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a43afb3e-8def-470f-9e19-f17b123b1ab2",
        "parentId" : "0206b792-a679-4fb6-88c9-c6e54c2e9e61",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Ah right, now I get it. This is fine.\n",
        "createdAt" : "2015-08-21T08:11:54Z",
        "updatedAt" : "2015-08-21T08:11:54Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec6556987e969d6b09426380a03414c7d6fc1825",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +75,79 @@}\n\nfunc TestListFromMemory(t *testing.T) {\n\tfakeClient := tools.NewFakeEtcdClient(t)\n\tprefixedKey := etcdtest.AddPrefix(\"pods\")"
  }
]