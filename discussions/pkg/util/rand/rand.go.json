[
  {
    "id" : "49f51c18-0557-490e-9a00-c04edb64fdbd",
    "prId" : 37225,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37225#pullrequestreview-391708689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc2bcd71-da4c-4c6f-bea4-0998e04c2275",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "well we still have 3,1 and 0",
        "createdAt" : "2016-11-23T19:52:45Z",
        "updatedAt" : "2016-11-24T05:53:41Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "9950dac7-cba7-4204-8beb-1f7696afee51",
        "parentId" : "bc2bcd71-da4c-4c6f-bea4-0998e04c2275",
        "authorId" : "db529637-cbe6-4a53-b265-736f5823ba98",
        "body" : "I guess we need a character set or function that properly considers \"leet speak\" encoded \"bad words\". $DEITY forbid that someone be confronted with a 'n0sh1t' Pod or something.",
        "createdAt" : "2020-04-10T23:39:34Z",
        "updatedAt" : "2020-04-10T23:39:35Z",
        "lastEditedBy" : "db529637-cbe6-4a53-b265-736f5823ba98",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6c66f02f96fa353f5c4598a825be22b14441a9d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +73,77 @@// We omit vowels from the set of available characters to reduce the chances\n// of \"bad words\" being formed.\nvar alphanums = []rune(\"bcdfghjklmnpqrstvwxz0123456789\")\n\n// String generates a random alphanumeric string, without vowels, which is n"
  },
  {
    "id" : "1adf099b-6afc-443c-93da-096bea8ff6e5",
    "prId" : 13755,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aa77afd-c13b-45d2-afa3-4e786398f163",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Who seeds this RNG?  I don't see a call to Seed() in here - isn't this the same problem, just one extra layer?\n",
        "createdAt" : "2015-09-10T05:04:16Z",
        "updatedAt" : "2015-09-10T05:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5f0d2f00-6c64-4b37-bd1d-66534f1dcf30",
        "parentId" : "2aa77afd-c13b-45d2-afa3-4e786398f163",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "wouldn't this be enough ? https://github.com/ArtfulCoder/kubernetes/blob/shufflestrings/pkg/util/rand/rand.go#L32\n",
        "createdAt" : "2015-09-10T05:35:52Z",
        "updatedAt" : "2015-09-10T05:35:52Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "ce3a3fc5-416c-474c-9240-a82d8bd34896",
        "parentId" : "2aa77afd-c13b-45d2-afa3-4e786398f163",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "oops.  I missed that.  Was too busy looking for init()\n",
        "createdAt" : "2015-09-10T06:01:17Z",
        "updatedAt" : "2015-09-10T06:01:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "da06ecfc1fea699ee7db457faea3b7076413f4a6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +59,63 @@// from the default Source.\nfunc Perm(n int) []int {\n\trng.Lock()\n\tdefer rng.Unlock()\n\treturn rng.rand.Perm(n)"
  },
  {
    "id" : "10e89046-0236-4536-94cd-2b591cde1442",
    "prId" : 9162,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1daa7a88-92c1-47d7-be3f-4357d17d9317",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "Consider adding something as listed below\nrefer to https://golang.org/pkg/math/rand/#Seed\nWithout the seeding, we are not guaranteed to get different number sequences on every run.\nDoing the seeding in init, helps it be a one-time initialization. http://golang.org/doc/effective_go.html#init\n\nimport \"time\"\nfunc init() {\n  rand.Seed(time.Now().UTC().UnixNano())\n}\n",
        "createdAt" : "2015-06-03T07:12:08Z",
        "updatedAt" : "2015-06-25T04:13:48Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "07717872-6b39-4883-a89f-ed0e5debb2fb",
        "parentId" : "1daa7a88-92c1-47d7-be3f-4357d17d9317",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "done\n",
        "createdAt" : "2015-06-19T01:38:19Z",
        "updatedAt" : "2015-06-25T04:13:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "7874743a43699357e7fe869f5b94bda65d18ccc5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +32,36 @@\trand: rand.New(rand.NewSource(time.Now().UTC().UnixNano())),\n}\n\n// String generates a random alphanumeric string n characters long.  This will\n// panic if n is less than zero."
  },
  {
    "id" : "6fb3b28c-0497-48f9-8153-d3cb55143ce9",
    "prId" : 9162,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8793b3f-1544-4d9b-bee3-977748791008",
        "parentId" : null,
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "given that this is a utility function, should we guard against bad input like negative numbers ?\nIf a negative number is passed, it will cause panic and program termination.\nwould it be more desirable to return (string, error) and use error if the input parameter is bad instead of just causing program termination ?\n",
        "createdAt" : "2015-06-03T07:36:01Z",
        "updatedAt" : "2015-06-25T04:13:48Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "2a2260f7-7f9d-438c-8f2c-62d469d55dde",
        "parentId" : "d8793b3f-1544-4d9b-bee3-977748791008",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "sure.  We do not do a good job of this all over, but we should.\n",
        "createdAt" : "2015-06-19T01:42:22Z",
        "updatedAt" : "2015-06-25T04:13:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "7874743a43699357e7fe869f5b94bda65d18ccc5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@\t\tpanic(\"out-of-bounds value\")\n\t}\n\tb := make([]rune, n)\n\trng.lock.Lock()\n\tdefer rng.lock.Unlock()"
  }
]