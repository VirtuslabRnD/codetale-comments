[
  {
    "id" : "ef35c7ec-e9d0-4ce4-a310-0255d5155715",
    "prId" : 72291,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72291#pullrequestreview-187574006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e35234b-94c0-47bd-a39f-7bb94eb260fd",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I opened up https://github.com/kubernetes/kubernetes/issues/72290 for refactoring and fixing these inter-pkg dependency issues",
        "createdAt" : "2018-12-22T01:12:04Z",
        "updatedAt" : "2018-12-26T18:50:31Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ebbbbd5d8670868bd7d4744803241b0fec07836",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +56,60 @@\n\t// place for subpath mounts\n\t// TODO: pass in directory using kubelet_getters instead\n\tcontainerSubPathDirectoryName = \"volume-subpaths\"\n\t// syscall.Openat flags used to traverse directories not following symlinks"
  },
  {
    "id" : "d6f121b4-df21-4a6a-b9a8-9a1c62042779",
    "prId" : 71804,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71804#pullrequestreview-189233853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8ded77f-a802-403d-973f-e991cf8ea932",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "maybe make this log to V(4) and update the message to \"cleaning up subPath successfully\"?",
        "createdAt" : "2019-01-04T00:24:16Z",
        "updatedAt" : "2019-01-04T00:36:36Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a4f906f25fc3e1ae6f12df645c84dea15048f2f",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +938,942 @@\t\treturn fmt.Errorf(\"error cleaning subpath mount %s: %s\", fullSubPath, err)\n\t}\n\n\tklog.V(4).Infof(\"Successfully cleaned subpath directory %s\", fullSubPath)\n\treturn nil"
  },
  {
    "id" : "4e413f58-f8ae-4c2e-baec-9c7b03d3f10e",
    "prId" : 68759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68759#pullrequestreview-156171344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cee8b47-71d4-4a48-af7d-30552f364077",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Add unit test?\r\n\r\nI think the other GetMountRefs implementations also need to be updated.",
        "createdAt" : "2018-09-18T00:45:35Z",
        "updatedAt" : "2018-09-18T17:45:25Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "d8446588-e02a-4f30-8954-09fcabd9ad8c",
        "parentId" : "0cee8b47-71d4-4a48-af7d-30552f364077",
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "Updated windows and nsenter. They dont have unit tests for this so I didn't add anything. But I added a test case in `mount_linux_test.go`",
        "createdAt" : "2018-09-18T00:51:05Z",
        "updatedAt" : "2018-09-18T17:45:25Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "704573d304096c4c0e769a3e7ffdd4d23737b99f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1006,1010 @@\nfunc (mounter *Mounter) GetMountRefs(pathname string) ([]string, error) {\n\tif _, err := os.Stat(pathname); os.IsNotExist(err) {\n\t\treturn []string{}, nil\n\t} else if err != nil {"
  },
  {
    "id" : "48a474bf-dff5-4b3f-8087-eb8750273174",
    "prId" : 68759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68759#pullrequestreview-156488447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed01a320-711e-4e78-92a4-2173247e6014",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "if err is anything other than not exists, should we return error?",
        "createdAt" : "2018-09-18T17:43:50Z",
        "updatedAt" : "2018-09-18T17:45:25Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "704573d304096c4c0e769a3e7ffdd4d23737b99f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1006,1010 @@\nfunc (mounter *Mounter) GetMountRefs(pathname string) ([]string, error) {\n\tif _, err := os.Stat(pathname); os.IsNotExist(err) {\n\t\treturn []string{}, nil\n\t} else if err != nil {"
  },
  {
    "id" : "89bd0384-97a6-488a-9c04-3db7e05b32c5",
    "prId" : 64026,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64026#pullrequestreview-122402798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ad5d2dd-1f30-4e84-a8ca-40264fc58fd1",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "make this a constant?",
        "createdAt" : "2018-05-23T00:55:27Z",
        "updatedAt" : "2018-05-23T01:03:18Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "080d2dfe8f1e3cf6bad8ef2c5fecbe695ee9d90a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +634,638 @@\t\t// See `man proc` for authoritative description of format of the file.\n\t\tfields := strings.Fields(line)\n\t\tif len(fields) < 10 {\n\t\t\treturn nil, fmt.Errorf(\"wrong number of fields in (expected %d, got %d): %s\", 10, len(fields), line)\n\t\t}"
  },
  {
    "id" : "e1d3e58b-4f3b-4a32-9644-a13b553fa90a",
    "prId" : 63143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63143#pullrequestreview-116259119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cc5ab61-8db0-4ae3-9b3f-e1b9cea11bff",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Add comment this is also used by nsenter",
        "createdAt" : "2018-04-27T17:12:47Z",
        "updatedAt" : "2018-05-23T08:32:39Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "994e008d-c47d-4e89-816c-9f954ed7174b",
        "parentId" : "4cc5ab61-8db0-4ae3-9b3f-e1b9cea11bff",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Comment added",
        "createdAt" : "2018-04-30T11:33:26Z",
        "updatedAt" : "2018-05-23T08:32:39Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5eb25ec197e6bb97c4044effa5e2489b889651",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +741,745 @@}\n\n// prepareSubpathTarget creates target for bind-mount of subpath. It returns\n// \"true\" when the target already exists and something is mounted there.\n// Given Subpath must have all paths with already resolved symlinks and with"
  },
  {
    "id" : "61d064bc-57d7-4bee-ad24-8dd4bff22875",
    "prId" : 63143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63143#pullrequestreview-116005475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31eb4584-6a12-4b12-b025-9f2745b60ac4",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Check this first?",
        "createdAt" : "2018-04-27T17:22:31Z",
        "updatedAt" : "2018-05-23T08:32:39Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5eb25ec197e6bb97c4044effa5e2489b889651",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +824,828 @@\tdefer syscall.Close(fd)\n\n\talreadyMounted, bindPathTarget, err := prepareSubpathTarget(mounter, subpath)\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "a5d8a376-2722-41f6-8931-2938b33377dd",
    "prId" : 61480,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61480#pullrequestreview-106308390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c2432a-19da-45eb-85df-d67a3895062b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "does rdonly matter with opath?",
        "createdAt" : "2018-03-22T20:06:42Z",
        "updatedAt" : "2018-03-22T22:57:18Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "549d3839-146e-4321-b153-dca1fee139c8",
        "parentId" : "f4c2432a-19da-45eb-85df-d67a3895062b",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "yeah you can't use `read` on a file descriptor opened with `O_PATH` and hence `O_RDONLY` will be ignored.",
        "createdAt" : "2018-03-22T21:27:31Z",
        "updatedAt" : "2018-03-22T22:57:18Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "32de642fa1f4d6189463a10d33a561130d5e6059",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1079,1083 @@\t\t// Using O_PATH here will prevent hangs in case user replaces directory with\n\t\t// fifo\n\t\tchildFD, err := syscall.Openat(fd, dir, unix.O_PATH, 0)\n\t\tif err != nil {\n\t\t\tif os.IsNotExist(err) {"
  },
  {
    "id" : "c480c7c9-cddf-4e81-8d99-f25515c94449",
    "prId" : 61480,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61480#pullrequestreview-106337746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b855026-9cfb-44eb-9c6d-dd7009d5e516",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Do we still use this anywhere?",
        "createdAt" : "2018-03-22T23:13:22Z",
        "updatedAt" : "2018-03-22T23:13:38Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "09cf2a5b-df41-469c-9190-42d160156120",
        "parentId" : "1b855026-9cfb-44eb-9c6d-dd7009d5e516",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Yes, in few places with outer `Open` calls when we are opening base directory.",
        "createdAt" : "2018-03-22T23:27:43Z",
        "updatedAt" : "2018-03-22T23:27:43Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "32de642fa1f4d6189463a10d33a561130d5e6059",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +55,59 @@\tcontainerSubPathDirectoryName = \"volume-subpaths\"\n\t// syscall.Openat flags used to traverse directories not following symlinks\n\tnofollowFlags = unix.O_RDONLY | unix.O_NOFOLLOW\n\t// flags for getting file descriptor without following the symlink\n\topenFDFlags = unix.O_NOFOLLOW | unix.O_PATH"
  },
  {
    "id" : "6e161317-e766-4eec-aa98-77e6b0d5fa13",
    "prId" : 49640,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49640#pullrequestreview-52580237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "215edd29-70b3-4afc-858f-6652aba43092",
        "parentId" : null,
        "authorId" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "body" : "This change breaks error handling here.\r\n\r\nBefore `err` would be set if the mount command exited nonzero. Now it won't since systemd-run will create a transient service and exit 0 once the service is created, regardless if the service actually executes successfully.\r\n\r\nWe still get errors for the mount binary referenced not existing, but any errors later than that are lost to the kubelet.",
        "createdAt" : "2017-07-27T01:28:42Z",
        "updatedAt" : "2017-08-08T16:07:04Z",
        "lastEditedBy" : "2fa5a4c6-e0a7-4dbe-a80e-7770a5dc92a1",
        "tags" : [
        ]
      },
      {
        "id" : "67ad21e6-281a-4a05-aeaa-c1a69aeb276a",
        "parentId" : "215edd29-70b3-4afc-858f-6652aba43092",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "no, `systemd-run --scope` waits for the command (/bin/mount) to exit and returns the right exit code and stdout/stderr\r\n\r\n```\r\n$ systemd-run --scope /bin/sh -c \"echo hello; exit 42\"\r\nRunning as unit run-12305.scope.\r\nhello\r\n$ echo $?\r\n42\r\n```",
        "createdAt" : "2017-07-27T07:50:42Z",
        "updatedAt" : "2017-08-08T16:07:04Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd0338474725d1f7ab8e04b1bf6474313b3dd3a7",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +159,163 @@\tglog.V(4).Infof(\"Mounting cmd (%s) with arguments (%s)\", mountCmd, mountArgs)\n\tcommand := exec.Command(mountCmd, mountArgs...)\n\toutput, err := command.CombinedOutput()\n\tif err != nil {\n\t\targs := strings.Join(mountArgs, \" \")"
  },
  {
    "id" : "5a03c823-3710-421b-994c-259027e324e4",
    "prId" : 46458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46458#pullrequestreview-43406290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d5a6fc9-236a-46bf-bb4a-f442ab9020b0",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "`findmnt` too (both in util-linux package)?",
        "createdAt" : "2017-06-09T15:51:06Z",
        "updatedAt" : "2017-08-14T11:16:16Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "7e62e9b8-8da0-4e30-89ea-5742f3850754",
        "parentId" : "5d5a6fc9-236a-46bf-bb4a-f442ab9020b0",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I'm not sure what you mean by this comment. `findmnt` is not used by `mount_linux.go` and it has no use when finding a fs on a block device.",
        "createdAt" : "2017-06-12T11:07:34Z",
        "updatedAt" : "2017-08-14T11:16:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e547bae225b8d019d31054c4cf66670abf9ec17",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +476,480 @@\targs := []string{\"-n\", \"-o\", \"FSTYPE\", disk}\n\tglog.V(4).Infof(\"Attempting to determine if disk %q is formatted using lsblk with args: (%v)\", disk, args)\n\tdataOut, err := mounter.Exec.Run(\"lsblk\", args...)\n\toutput := string(dataOut)\n\tglog.V(4).Infof(\"Output: %q\", output)"
  },
  {
    "id" : "8d9ebb70-bdad-4b30-986e-e1906871107d",
    "prId" : 45724,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45724#pullrequestreview-59794934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f469e71c-280f-413b-b2dd-32d96f7123d9",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Why not use the `syscall` package? Why exec?",
        "createdAt" : "2017-05-20T13:01:14Z",
        "updatedAt" : "2017-08-31T08:57:51Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "359c3264-1c38-49dc-b3f8-5f056a809bf5",
        "parentId" : "f469e71c-280f-413b-b2dd-32d96f7123d9",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "huh? `syscall.Exec` will replace `/usr/bin/kulebet` in current process with `/bin/mount` and it won't ever return. We need `fork()`+`exec()` and that's exactly what `os.Exec` does.",
        "createdAt" : "2017-05-23T11:27:36Z",
        "updatedAt" : "2017-08-31T08:57:51Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "0ff5d2a7-d405-4ec6-8dd3-5feba88d2fc1",
        "parentId" : "f469e71c-280f-413b-b2dd-32d96f7123d9",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "https://golang.org/pkg/syscall/#Mount",
        "createdAt" : "2017-08-30T18:30:49Z",
        "updatedAt" : "2017-08-31T08:57:51Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "3b703c4c-01b9-47c0-992f-ac918470cfd3",
        "parentId" : "f469e71c-280f-413b-b2dd-32d96f7123d9",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I see. Reworked to use `syscall.Mount`.",
        "createdAt" : "2017-08-31T08:58:59Z",
        "updatedAt" : "2017-08-31T08:58:59Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9500105d88467a632777098e15f565e4eed0666",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +563,567 @@\n\tglog.V(2).Infof(\"Bind-mounting %q with shared mount propagation\", path)\n\t// mount --bind /var/lib/kubelet /var/lib/kubelet\n\tif err := syscall.Mount(path, path, \"\" /*fstype*/, syscall.MS_BIND, \"\" /*data*/); err != nil {\n\t\treturn fmt.Errorf(\"failed to bind-mount %s: %v\", path, err)"
  },
  {
    "id" : "05be7d83-042c-483c-a105-5ca0d3ee700a",
    "prId" : 45724,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45724#pullrequestreview-59962293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a44f9b8-9b9d-4f6d-b60e-d3b6b34f05d8",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Is a remount flag (MS_REMOUNT) required here?",
        "createdAt" : "2017-08-31T14:49:53Z",
        "updatedAt" : "2017-08-31T14:49:53Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "c465f8cd-dfba-4da3-a3ff-0e2552546dab",
        "parentId" : "3a44f9b8-9b9d-4f6d-b60e-d3b6b34f05d8",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "No, remount is not required. `mount --make-rshared` uses only the fags above as implied by the man page and checked with strace.",
        "createdAt" : "2017-08-31T19:13:40Z",
        "updatedAt" : "2017-08-31T19:13:40Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9500105d88467a632777098e15f565e4eed0666",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +569,573 @@\n\t// mount --make-rshared /var/lib/kubelet\n\tif err := syscall.Mount(path, path, \"\" /*fstype*/, syscall.MS_SHARED|syscall.MS_REC, \"\" /*data*/); err != nil {\n\t\treturn fmt.Errorf(\"failed to make %s rshared: %v\", path, err)\n\t}"
  },
  {
    "id" : "3e9b53f3-3b4e-4c99-b328-8a99d862be1c",
    "prId" : 43378,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43378#pullrequestreview-27840166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d96ff88e-fa74-47f0-bf9c-20392dc0b460",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "-> `containers %q` to match unit test.",
        "createdAt" : "2017-03-20T13:18:56Z",
        "updatedAt" : "2017-03-20T13:54:00Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "eaf14dfb-ce7c-4eeb-a85b-7576d4c3d936",
        "parentId" : "d96ff88e-fa74-47f0-bf9c-20392dc0b460",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "yeah, I changed it the other way around, `it already contains \"unknown data, probably partitions\"` looked weird. It should be fixed now.",
        "createdAt" : "2017-03-20T13:20:05Z",
        "updatedAt" : "2017-03-20T13:54:00Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cf36b8b3946b0fd2abf5f651c3d4e232021eced",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +387,391 @@\t\t\t} else {\n\t\t\t\t// Block device is formatted with unexpected filesystem, let the user know\n\t\t\t\treturn fmt.Errorf(\"failed to mount the volume as %q, it already contains %s. Mount error: %v\", fstype, existingFormat, mountErr)\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "cf3c2aae-f10a-48fc-ba79-ffcdcaa862ab",
    "prId" : 40297,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40297#pullrequestreview-20333228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "084961f6-5c80-4b32-bb93-905c0efbf5e9",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I guess kubelet is using this utility. Mind explaining what's the impact of this change?",
        "createdAt" : "2017-01-31T08:57:56Z",
        "updatedAt" : "2017-02-15T06:06:27Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "652b0230-dd3d-489b-a05b-64844293a062",
        "parentId" : "084961f6-5c80-4b32-bb93-905c0efbf5e9",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "This method is used in kubelet to make sure `/proc/mounts` is steady.\r\n \r\nIt reads contents of `/proc/mounts` for multiple times and hash all results to see if any difference happens. There's no cached value of this hash result and it will only be used to compare with **the hash result from same method**. So I assume it is safe to make this change.\r\n\r\nSee: https://github.com/kubernetes/kubernetes/blob/master/pkg/util/mount/mount_linux.go#L252-L271",
        "createdAt" : "2017-02-06T13:17:40Z",
        "updatedAt" : "2017-02-15T06:06:27Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "32281bd8-0b85-4400-adeb-d8aa326c971d",
        "parentId" : "084961f6-5c80-4b32-bb93-905c0efbf5e9",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I see, thanks!",
        "createdAt" : "2017-02-06T18:24:15Z",
        "updatedAt" : "2017-02-15T06:06:27Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bdc3f25ecc969c039946e1abebe593c7e65ff92",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +283,287 @@\nfunc readProcMountsFrom(file io.Reader, out *[]MountPoint) (uint32, error) {\n\thash := fnv.New32a()\n\tscanner := bufio.NewReader(file)\n\tfor {"
  },
  {
    "id" : "795b3109-5714-449a-acbb-b7ffeedb8222",
    "prId" : 35821,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35821#pullrequestreview-6953291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "febcece8-c125-4825-b5c1-c8bfe6a49860",
        "parentId" : null,
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "What about XFS ? XFS is the recommended FS for GlusterFS.\n",
        "createdAt" : "2016-11-03T05:56:15Z",
        "updatedAt" : "2016-11-03T05:56:15Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      }
    ],
    "commit" : "40fc804831c9ec856c291f1816cb46fb35a38e34",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +76,80 @@\t}\n\t// These filesystem types are expected to be supported by the mount utility on the host across all Linux distros.\n\tvar defaultMounterFsTypes = sets.NewString(\"tmpfs\", \"ext4\", \"ext3\", \"ext2\")\n\tif !defaultMounterFsTypes.Has(fstype) {\n\t\tmounterPath = mounter.mounterPath"
  },
  {
    "id" : "3c32b2b7-e71a-47dd-ab02-145cfad89834",
    "prId" : 35652,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35652#pullrequestreview-5956341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ae186d-0ee7-48f2-9502-c3aaf8735665",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "I might miss something here, but source is already an absolute path?\n",
        "createdAt" : "2016-10-26T21:49:27Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "2ecc3191-4b3f-49b6-93b8-01df7914616a",
        "parentId" : "b7ae186d-0ee7-48f2-9502-c3aaf8735665",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "`source` is already an absolute path in the native namespace. But from within the container, all native (root fs) paths have to be relative to the `mounterRootfsPath`.\n",
        "createdAt" : "2016-10-26T21:52:24Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e861a5761da23577f563cdc32c1c6e8f7d549b06",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +68,72 @@\tbind, bindRemountOpts := isBind(options)\n\tif bind {\n\t\terr := doMount(mounter.mounterPath, path.Join(mounter.mounterRootfsPath, source), target, fstype, []string{\"bind\"})\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "27a5dd23-fc4d-4060-9cfa-48d6a0e82fdf",
    "prId" : 33616,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33616#pullrequestreview-2820738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae574934-ebc5-4a1f-a8c5-eac3dbb27cde",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "This case used to return non-nil error, now it returns nil error. Is that intentional?\n",
        "createdAt" : "2016-10-04T05:07:15Z",
        "updatedAt" : "2016-10-25T19:29:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "091aeef5-b940-4422-8d7e-ce03c9c0a255",
        "parentId" : "ae574934-ebc5-4a1f-a8c5-eac3dbb27cde",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "Yes. If the path is not a device (this might happen e.g., when reconstructing state from directory, no device path can be recovered, and the state will have an empty device path), there is no need to check whether device is in use or not since it is not a device at all. So the function call will return false without error. \nIf it returns error in case of passing path is not a device path, operation_executor will return with error without marking volume as unmounted.\n",
        "createdAt" : "2016-10-04T20:32:06Z",
        "updatedAt" : "2016-10-25T19:29:27Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "ec97da97-7131-49d8-ba97-8fa4abaf455f",
        "parentId" : "ae574934-ebc5-4a1f-a8c5-eac3dbb27cde",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ack\n",
        "createdAt" : "2016-10-04T23:01:18Z",
        "updatedAt" : "2016-10-25T19:29:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "b02481708a369f2f5bc49f59fb71ee8d5a0c8c12",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +203,207 @@\tif !isDevice {\n\t\tglog.Errorf(\"Path %q is not refering to a device.\", pathname)\n\t\treturn false, nil\n\t}\n\tfd, errno := syscall.Open(pathname, syscall.O_RDONLY|syscall.O_EXCL, 0)"
  },
  {
    "id" : "e3e2bcf6-2fe1-43a6-a47a-f27dbf394dab",
    "prId" : 14200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "362b282a-9687-4491-84e6-e6821410511f",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "i like these.  they are obvious without mental parsing.\n",
        "createdAt" : "2015-12-09T02:35:57Z",
        "updatedAt" : "2015-12-09T02:35:57Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c18f342ac6dc33d12300b8147d1833f4a063a2cd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +47,51 @@\tfsckErrorsCorrected = 1\n\t// 'fsck' found errors but exited without correcting them\n\tfsckErrorsUncorrected = 4\n)\n"
  },
  {
    "id" : "ab8acc59-f5e8-45dc-a354-aac1c8796a4f",
    "prId" : 14200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "So fsck has to be in the kubelet's path now, right?\n",
        "createdAt" : "2015-12-18T16:12:08Z",
        "updatedAt" : "2015-12-18T16:12:08Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "1ee74836-00f5-4595-a666-a64ae4320229",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "You might want to do something similar to what nsenter_mount.go does to find the absolute path to the fsck binary\n",
        "createdAt" : "2015-12-18T16:12:41Z",
        "updatedAt" : "2015-12-18T16:12:41Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "1727e2f8-14e2-48a3-ae33-65933e2fd732",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : null,
        "body" : "> You might want to do something similar to what nsenter_mount.go does to find the absolute path to the fsck binary\n\nHmm.. I don't think that is necessary. `fsck` is a low level utility and is usually found in PATH. In addition this PR handles the case where `fsck` is not found and proceeds with a mount after logging a warning. but if something like is is really needed then I think it should be done in `pkg/util/exec` so all callers can benefit.\n\nIncidentally, it looks like nsenter_mount is overriding $PATH which might confuse some users.\n",
        "createdAt" : "2016-01-11T21:36:37Z",
        "updatedAt" : "2016-01-11T21:36:37Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "53d4a97a-d9f9-4977-891d-e0d2e776d088",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "How do you feel about this relative to mount?  I would expect them to have about the same level of 'i expect this to be in path' -- thoughts?\n",
        "createdAt" : "2016-01-13T18:47:05Z",
        "updatedAt" : "2016-01-13T18:47:05Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "ab91e833-99ee-46a9-8dc3-2bf4c4cd7e1c",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : null,
        "body" : "> How do you feel about this relative to mount? I would expect them to have about the same level of 'i expect this to be in path' -- thoughts?\n\nI agree... In fact in Fedora they come from the same package. It looks like mount_linux.go is also just using mount from $PATH. I think nsenter_mount is a special case really since it is trying to avoid path and deliberately use mount from `/rootfs` \n",
        "createdAt" : "2016-01-13T19:05:37Z",
        "updatedAt" : "2016-01-13T19:05:37Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8a377965-1865-458f-8245-0530719d266f",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Well, I expected them to be in the path as well, and yet, we had to add the search anyway for it to work for everyone everywhere, so I would argue that means we should add the search for fsck as well.\n",
        "createdAt" : "2016-01-13T19:19:19Z",
        "updatedAt" : "2016-01-13T19:19:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "81ecfcd3-6cfc-4bf5-a1e7-9fdbac3eb24c",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : null,
        "body" : "mount does not do a search: https://github.com/kubernetes/kubernetes/blob/master/pkg/util/mount/mount_linux.go#L99\n\nnsenter_mount does. I misread when I made my last comment. The issue there must have been an unset $PATH since the path it is searching is fairly standard.\n\nAnyhow if a path search is necessary I think it should be done in `util/exec` instead of duplicating the code from nsenter_mounter.go here. WDYT ? \n",
        "createdAt" : "2016-01-13T19:54:11Z",
        "updatedAt" : "2016-01-13T19:54:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9f7b6b24-a80d-4ff9-a47f-2615a547f95f",
        "parentId" : "0e0b9039-9ae3-4252-98bc-802cece4ab50",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Let's skip the scan for now.  We can do it in a follow up if it's an issue.\n",
        "createdAt" : "2016-01-13T21:22:24Z",
        "updatedAt" : "2016-01-13T21:22:24Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c18f342ac6dc33d12300b8147d1833f4a063a2cd",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +251,255 @@\t// Run fsck on the disk to fix repairable issues\n\targs := []string{\"-a\", source}\n\tcmd := mounter.Runner.Command(\"fsck\", args...)\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {"
  },
  {
    "id" : "d6ae5370-8ad7-40a0-8b00-514c2f02cfcd",
    "prId" : 6400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b058fcda-8b04-4799-a622-9c2dcd9643b9",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "what if the mount option is \"-o remount\"? the following code will remount it, again.\n",
        "createdAt" : "2015-04-14T00:54:55Z",
        "updatedAt" : "2015-04-29T14:46:35Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "6f06c8a5-be46-44ff-af31-76c31a021966",
        "parentId" : "b058fcda-8b04-4799-a622-9c2dcd9643b9",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "I guess you mean `mount --bind -o remount,ro x x`?  In this case, I'm not sure if the remount option will work or not.  But yes, it will remount again.\n",
        "createdAt" : "2015-04-14T02:25:06Z",
        "updatedAt" : "2015-04-29T14:46:35Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "6897095e56a5b856863dcf6aae2d5ddbc66a3564",
    "line" : null,
    "diffHunk" : "@@ -1,1 +95,99 @@\t}\n\tmountArgs = append(mountArgs, target)\n\tcommand := exec.Command(\"mount\", mountArgs...)\n\toutput, err := command.CombinedOutput()\n\tif err != nil {"
  },
  {
    "id" : "6951ece3-88a2-448f-a77c-40a8080eb0e7",
    "prId" : 6400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c90d48b2-139c-4278-b00b-ea200b5db76b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should expand the options here, or at least offer the most common ones:\n\n`eg: \"ro\", \"remount\", \"bind\"`\n",
        "createdAt" : "2015-04-26T18:11:42Z",
        "updatedAt" : "2015-04-29T14:46:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b5d61e79-1729-451f-8016-6db84405e19c",
        "parentId" : "c90d48b2-139c-4278-b00b-ea200b5db76b",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Added comment.\n",
        "createdAt" : "2015-04-28T21:36:51Z",
        "updatedAt" : "2015-04-29T14:46:35Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "6897095e56a5b856863dcf6aae2d5ddbc66a3564",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +45,49 @@// Mount mounts source to target as fstype with given options. 'source' and 'fstype' must\n// be an emtpy string in case it's not required, e.g. for remount, or for auto filesystem\n// type, where kernel handles fs type for you. The mount 'options' is a list of options,\n// currently come from mount(8), e.g. \"ro\", \"remount\", \"bind\", etc. If no more option is\n// required, call Mount with an empty string list or nil."
  }
]