[
  {
    "id" : "d007d873-e286-43c5-aead-eba2917dfe91",
    "prId" : 81180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81180#pullrequestreview-273238682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86f3bb3d-6314-4ef1-a0bd-120d7f12e0b8",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It's not clear from the comment what this function is returning. Is it returning the device name, like the name of the function suggests? Or is it returning a global mount path?  Also global mount path and plugin directory are mainly Kubernetes concepts.  It might be good to describe them in a way that's more widely applicable.",
        "createdAt" : "2019-08-08T22:35:56Z",
        "updatedAt" : "2019-08-08T23:46:36Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "304d18a8-9b01-4b42-8d0f-e59eb5badf22",
        "parentId" : "86f3bb3d-6314-4ef1-a0bd-120d7f12e0b8",
        "authorId" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "body" : "Agreed. There are a few of them like that. I haven't tried to address comments like [this](https://github.com/kubernetes/utils/pull/100/files#r311321310) yet. :/ Do you want me to try and do that here?",
        "createdAt" : "2019-08-09T14:05:16Z",
        "updatedAt" : "2019-08-09T14:05:16Z",
        "lastEditedBy" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "tags" : [
        ]
      },
      {
        "id" : "8f29041c-f0d3-46f9-abab-9703ccd4d3cf",
        "parentId" : "86f3bb3d-6314-4ef1-a0bd-120d7f12e0b8",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It can be done as a followup",
        "createdAt" : "2019-08-09T16:24:30Z",
        "updatedAt" : "2019-08-09T16:24:30Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b47184e9549f80de14024a06796c14a694cffcc5",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +81,85 @@\tPathIsDevice(pathname string) (bool, error)\n\t// GetDeviceNameFromMount finds the device name by checking the mount path\n\t// to get the global mount path within its plugin directory.\n\tGetDeviceNameFromMount(mounter Interface, mountPath, pluginMountDir string) (string, error)\n\t// MakeRShared checks that given path is on a mount with 'rshared' mount"
  },
  {
    "id" : "0dfc7e96-c970-41a7-b7bd-3d7233a6a8c0",
    "prId" : 74880,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74880#pullrequestreview-210486654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "601f7a91-9f17-4d93-b307-eb55a6d8b967",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`IsLikelyNotMountPoint` should work correctly on symbolic links.",
        "createdAt" : "2019-03-05T04:17:20Z",
        "updatedAt" : "2019-05-20T03:37:07Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "a81f77047282db283141fe426dc7eaf82a7827d2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +55,59 @@\t// IsLikelyNotMountPoint does NOT properly detect all mountpoint types\n\t// most notably linux bind mounts and symbolic link.\n\tIsLikelyNotMountPoint(file string) (bool, error)\n\t// DeviceOpened determines if the device is in use elsewhere\n\t// on the system, i.e. still mounted."
  },
  {
    "id" : "998b6020-440e-47a9-9f0d-e4813ed9562a",
    "prId" : 68741,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68741#pullrequestreview-156288017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4da9ff1-a395-426a-9a29-dfaf5d3cc194",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "err - tests may be?",
        "createdAt" : "2018-09-17T15:14:34Z",
        "updatedAt" : "2018-09-18T08:06:42Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "24b4c39f-a46c-4423-8742-0fda6ea65c51",
        "parentId" : "d4da9ff1-a395-426a-9a29-dfaf5d3cc194",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "That's the problematic part. e2e test would require changing /var/lib/kubelet into a symlink somehow.",
        "createdAt" : "2018-09-17T15:33:48Z",
        "updatedAt" : "2018-09-18T08:06:42Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "c4459507-9f86-49a3-8265-afa7cc74aa44",
        "parentId" : "d4da9ff1-a395-426a-9a29-dfaf5d3cc194",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Can we not write/update unit test for `IsNotMountPoint`, so as it considers symbolic links properly?",
        "createdAt" : "2018-09-17T15:48:22Z",
        "updatedAt" : "2018-09-18T08:06:42Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "77c9a793-71ab-4020-982f-71aa39476353",
        "parentId" : "d4da9ff1-a395-426a-9a29-dfaf5d3cc194",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Proper IsNotMountPoint unit test would require mounting / bind-mounting stuff, which is impossible in an unit test. I could fake all this, but then it would just test very little piece of code and I don't think it's worth all the effort.",
        "createdAt" : "2018-09-18T09:52:57Z",
        "updatedAt" : "2018-09-18T09:52:57Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e24ccbda026e28c43c8c7ba0e94fb836b497f6f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +280,284 @@\t}\n\tfor _, mp := range mountPoints {\n\t\tif mounter.IsMountPointMatch(mp, resolvedFile) {\n\t\t\tnotMnt = false\n\t\t\tbreak"
  },
  {
    "id" : "769341b2-4acd-4352-b878-b48ce711aaad",
    "prId" : 68626,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68626#pullrequestreview-156497390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Why is this being special cased in the bind mount? Shouldn't it be a mount option for the global mount? That way the bind mounts can be simple?",
        "createdAt" : "2018-09-14T21:43:05Z",
        "updatedAt" : "2018-09-14T21:44:23Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "440959f6-a0a2-473c-858a-87094436e5dd",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "The problem is - when we bind mount we are dropping *ALL* mount options supplied by global mount. That is because traditionally Kernel drops most mount options when bind mounting something.  So even if global mount did use `_netdev`, the bind mount will not use it.  \r\n\r\nSo, this fix makes sure that - if global mount had `_netdev`, then we must carry that option when creating bind mount. We ourselves don't supply `_netdev` but we expect that mount option to come from global mount (either via storageClass mount option or plugin uses `_netdev` as one of the default mount options).\r\n\r\n",
        "createdAt" : "2018-09-17T15:19:32Z",
        "updatedAt" : "2018-09-17T15:19:32Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "4855fae7-f28c-4c70-9e51-e25edaa418f5",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "can we just apply all mount options we applied to global mount to the bind mount too? Then we don't have to special case netdev",
        "createdAt" : "2018-09-17T17:48:04Z",
        "updatedAt" : "2018-09-17T17:48:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "8a0f51bd-42d3-4b30-ac71-d76be2a4fef3",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "> can we just apply all mount options we applied to global mount to the bind mount too? Then we don't have to special case netdev\r\n\r\nWe should start with just special casing. Suddenly having all mount options apply to bind may have unexpected results.",
        "createdAt" : "2018-09-18T03:19:47Z",
        "updatedAt" : "2018-09-18T03:19:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "e0e6146e-e4cf-4d99-8681-d6858e134d2f",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It's a bit confusing because it looks like for `bindRemountOpts` we are applying all the mount options from the global mount.",
        "createdAt" : "2018-09-18T03:30:36Z",
        "updatedAt" : "2018-09-18T03:30:36Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "3537ba94-c802-47b5-9865-236dbf707a66",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "The problem is - remount also does not copy `_netdev` mount option over, if original bind mount did not had it. I am somewhat skeptical about using remount to apply mount options to be honest. We know that - mount options that Kernel knows about are automatically copied over from original mount point when bind mount is created. We don't need remount for that.\r\n\r\nAnd userspace mount options aren't copied over on remount. ",
        "createdAt" : "2018-09-18T15:37:51Z",
        "updatedAt" : "2018-09-18T15:37:51Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "9ae62fe8-bf65-4a66-a84b-c476744d8f12",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Where is the \"_netdev\" mount option coming from since it's not from the global mount?\r\n\r\nI see that:\r\n1. bind options will return \"bind\" and \"_netdev\" if it's set\r\n2. bind remount options will return \"bind\", \"remount\", and all other options (including \"_netdev\")\r\n\r\nDo we really need to special case the \"_netdev\" in the first bind mount if the remount is going to already include it?",
        "createdAt" : "2018-09-18T16:55:00Z",
        "updatedAt" : "2018-09-18T16:55:00Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "d2d54837-4d9f-4ceb-b74d-27376fed4d75",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "> Do we really need to special case the \"_netdev\" in the first bind mount if the remount is going to already include it?\r\n\r\nYeah we do need to. If first bind mount did not include `_netdev` mount option then `_netdev` mount option on remount has no effect and it isn't applied.",
        "createdAt" : "2018-09-18T17:45:46Z",
        "updatedAt" : "2018-09-18T17:45:47Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "2b8267a5-acd8-4f3f-bef6-7926c1cbe1f0",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Thanks for clarifying.  This looks fine then.  Another issue I found is that all other plugins besides rbd are not using storageclass mount options in SetUp, so this fix will only work for rbd.  We can handle the other plugins separately.",
        "createdAt" : "2018-09-18T17:58:01Z",
        "updatedAt" : "2018-09-18T17:58:01Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "a99b79e2-78be-4de8-a841-72fdd0ff1741",
        "parentId" : "a40d926c-d761-4fc3-8c23-623f2aae3552",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Yeah - I logged https://github.com/kubernetes/kubernetes/issues/68797 to fix that as a follow up item.",
        "createdAt" : "2018-09-18T18:03:53Z",
        "updatedAt" : "2018-09-18T18:03:53Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "e881a291073a1106bea202ce9b58e2ec1cc049fe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +287,291 @@// The list equals:\n//   options - 'bind' + 'remount' (no duplicate)\nfunc isBind(options []string) (bool, []string, []string) {\n\t// Because we have an FD opened on the subpath bind mount, the \"bind\" option\n\t// needs to be included, otherwise the mount target will error as busy if you"
  },
  {
    "id" : "e524807d-834c-4393-9a30-f3a286b93166",
    "prId" : 68626,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68626#pullrequestreview-156192078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9888bc7-7a9e-433b-b4ec-e4268a8381b7",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Any issues with specifying this option on a non-systemd host?",
        "createdAt" : "2018-09-14T21:43:26Z",
        "updatedAt" : "2018-09-14T21:44:23Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "e3cac65d-3097-4894-bc07-0c92f02b552d",
        "parentId" : "e9888bc7-7a9e-433b-b4ec-e4268a8381b7",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Thing is - this PR does not add `_netdev` mount option by default, it just says if user or plugin author has specified `_netdev` mount option, I will try to honor it while creating bind mount. ",
        "createdAt" : "2018-09-17T15:21:09Z",
        "updatedAt" : "2018-09-17T15:21:10Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "e07806de-6095-4ca5-9e86-a963ffdb7b8d",
        "parentId" : "e9888bc7-7a9e-433b-b4ec-e4268a8381b7",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Got it!",
        "createdAt" : "2018-09-18T03:20:00Z",
        "updatedAt" : "2018-09-18T03:20:00Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "e881a291073a1106bea202ce9b58e2ec1cc049fe",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +321,325 @@func checkForNetDev(options []string) bool {\n\tfor _, option := range options {\n\t\tif option == \"_netdev\" {\n\t\t\treturn true\n\t\t}"
  },
  {
    "id" : "e07e7186-dd9e-43a8-b706-63b5e5cdab47",
    "prId" : 68626,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68626#pullrequestreview-155982852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77d87442-013d-4c18-9b17-ad2c088503b0",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "NFS has a similar issue, where we can't unmount if share (server is disabled or network issues). Can we apply this to NFS as well? ",
        "createdAt" : "2018-09-14T21:44:21Z",
        "updatedAt" : "2018-09-14T21:44:23Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "7a232e1e-cbf8-4d59-80e3-4ff5dee85ec0",
        "parentId" : "77d87442-013d-4c18-9b17-ad2c088503b0",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "may be. But systemd at least already knows that NFS mounts are using network.  This problem  is more severe in case of block storage volume types, which appear as regular block device to systemd  but actually are networked and hence must be unmounted before network is toredown during shutdown sequence. \r\n\r\nThe premise of the PR isn't for Kubernetes to apply `_netdev` whenever it can, but it is to honor that mount option, if user or plugin author has chosen to use it while creating bind mounts. ",
        "createdAt" : "2018-09-17T15:26:43Z",
        "updatedAt" : "2018-09-17T15:26:43Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "e881a291073a1106bea202ce9b58e2ec1cc049fe",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +324,328 @@\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
  },
  {
    "id" : "f05687e4-4e3c-4d7c-bb7f-92652903fdc5",
    "prId" : 63143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63143#pullrequestreview-158250322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27337758-f957-4bfe-a80c-1137fd52deaa",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It's weird that a seemingly generic interface in a generic lib (pkg/util) has any comprehension of  \"kubelet\" at all.  Can we decouple these layered ideas?",
        "createdAt" : "2018-05-31T20:22:46Z",
        "updatedAt" : "2018-05-31T20:22:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cf64b976-1c02-4cba-9c68-1bc13baf4596",
        "parentId" : "27337758-f957-4bfe-a80c-1137fd52deaa",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Kubelet is the only user of this API and it makes the whole picture more visible. It would be harder to go through all the layers and see how they fit together if they contain just generic comments.\r\n\r\nWe could move the big picture to a separate file / documentation, however, these tend to rot.\r\n\r\nI filled #64603 for that.",
        "createdAt" : "2018-06-01T08:05:27Z",
        "updatedAt" : "2018-06-01T08:05:27Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "57c7efdb-2c2c-4537-bed1-56ba60f4532e",
        "parentId" : "27337758-f957-4bfe-a80c-1137fd52deaa",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "SafeFormatAndMount is a very delicate and tricky operation, and kops uses it (and this package).  Another vote from me for keeping the layers well-factored here.",
        "createdAt" : "2018-09-22T19:18:45Z",
        "updatedAt" : "2018-09-22T19:18:45Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "71e7662f-156e-424a-bad3-0902fa975ce5",
        "parentId" : "27337758-f957-4bfe-a80c-1137fd52deaa",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "There is ongoing work to refactor the mount library to separate out k8s specific operations (like subpath processing), and general mounting/formatting utilities.  https://github.com/kubernetes/kubernetes/pull/68513",
        "createdAt" : "2018-09-24T19:04:53Z",
        "updatedAt" : "2018-09-24T19:04:53Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb5eb25ec197e6bb97c4044effa5e2489b889651",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +94,98 @@\t// escape the volume to create directories somewhere else.\n\tSafeMakeDir(subdir string, base string, perm os.FileMode) error\n\t// Will operate in the host mount namespace if kubelet is running in a container.\n\t// Error is returned on any other error than \"file not found\".\n\tExistsPath(pathname string) (bool, error)"
  },
  {
    "id" : "b58e1853-6705-4084-93ea-d93b2d4bd137",
    "prId" : 61080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61080#pullrequestreview-103303624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9863ed-1add-45a2-85dc-5fcd3f1dc782",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This function is also implemented in Kubelet, although I'm not sure it's used anywhere? https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/util/util.go#L51",
        "createdAt" : "2018-03-13T05:22:20Z",
        "updatedAt" : "2018-03-13T12:54:04Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "166b5018-f0f3-4e86-8bee-8184ec006a54",
        "parentId" : "ca9863ed-1add-45a2-85dc-5fcd3f1dc782",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "I don't see any uses of that method on master, v1.9.4, v1.8.9, or v1.7.9\r\n\r\n```\r\n$ ag 'pathWithinBase'\r\npkg/util/mount/mount_windows_test.go\r\n544:            result := pathWithinBase(test.fullPath, test.basePath)\r\n545:            assert.Equal(t, result, test.expectedResult, \"Expect result not equal with pathWithinBase(%s, %s) return: %q, expected: %q\",\r\n\r\npkg/util/mount/mount_linux_test.go\r\n407:            if pathWithinBase(test.fullPath, test.basePath) != test.expected {\r\n\r\npkg/util/mount/mount_linux.go\r\n732:    if !pathWithinBase(evalSubPath, subpath.VolumePath) {\r\n912:    if !pathWithinBase(endDir, baseDir) {\r\n949:    if !pathWithinBase(pathname, base) {\r\n976:    if !pathWithinBase(fullExistingPath, base) {\r\n1121:           if !pathWithinBase(currentPath, base) {\r\n\r\npkg/util/mount/mount_windows.go\r\n329:            if !pathWithinBase(currentFullPath, volumePath) {\r\n473:    if !pathWithinBase(pathname, base) {\r\n508:    if !pathWithinBase(fullExistingPath, fullBasePath) {\r\n\r\npkg/util/mount/mount.go\r\n322:// pathWithinBase checks if give path is within given base directory.\r\n323:func pathWithinBase(fullPath, basePath string) bool {\r\n\r\npkg/kubelet/util/util.go\r\n51:func pathWithinBase(fullPath, basePath string) bool {\r\n```",
        "createdAt" : "2018-03-13T05:41:07Z",
        "updatedAt" : "2018-03-13T12:54:04Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "de439cae-04b5-45f2-aa23-385acc5f29e6",
        "parentId" : "ca9863ed-1add-45a2-85dc-5fcd3f1dc782",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "removed the unused function. similar faulty logic exists in `pkg/util/mount/mount_windows.go` lockAndCheckSubPathWithoutSymlink and findExistingPrefix",
        "createdAt" : "2018-03-13T05:49:11Z",
        "updatedAt" : "2018-03-13T12:54:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "806f6772c6ccc0d852a2120631f6938ae09a3118",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +323,327 @@func pathWithinBase(fullPath, basePath string) bool {\n\trel, err := filepath.Rel(basePath, fullPath)\n\tif err != nil {\n\t\treturn false\n\t}"
  },
  {
    "id" : "00c1599e-7897-43f6-bc98-7cfb01cbd5e8",
    "prId" : 58912,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58912#pullrequestreview-92145934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b7ba3c0-fb1e-4811-a2af-a6782fcfa57e",
        "parentId" : null,
        "authorId" : "60a2148d-5cbe-4c5f-8c70-27925a3b117b",
        "body" : "what about mount_windows.go, need some change?",
        "createdAt" : "2018-01-29T07:09:21Z",
        "updatedAt" : "2018-02-08T12:03:22Z",
        "lastEditedBy" : "60a2148d-5cbe-4c5f-8c70-27925a3b117b",
        "tags" : [
        ]
      },
      {
        "id" : "d89aa8b9-4ad0-4876-920a-d3e662b1a83e",
        "parentId" : "1b7ba3c0-fb1e-4811-a2af-a6782fcfa57e",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "I'm not sure, as I haven't find anywhere uses the `options` parameter in `mount_windows.formatAndMount`",
        "createdAt" : "2018-01-29T10:09:02Z",
        "updatedAt" : "2018-02-08T12:03:22Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f46df3540860517188a7ff7fd96ac7b68ecb3c6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +126,130 @@// will be mounted without formatting.\nfunc (mounter *SafeFormatAndMount) FormatAndMount(source string, target string, fstype string, options []string) error {\n\treturn mounter.formatAndMount(source, target, fstype, options)\n}\n"
  },
  {
    "id" : "720da7d9-b44f-4948-8b2a-7ea867e149fc",
    "prId" : 48402,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48402#pullrequestreview-47931290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "270549b9-037a-4d52-af71-5012a2265977",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Add a comment that in particular this is can detect bind mounts of directories.",
        "createdAt" : "2017-07-04T22:45:54Z",
        "updatedAt" : "2017-07-11T21:24:24Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b18d3b6f71a1786c68dee630b0452d20c71f844",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +216,220 @@// IsNotMountPoint determines if a directory is a mountpoint.\n// It should return ErrNotExist when the directory does not exist.\n// This method uses the List() of all mountpoints\n// It is more extensive than IsLikelyNotMountPoint\n// and it detects bind mounts in linux"
  },
  {
    "id" : "51f2de3d-88e9-40ab-a418-8a34831f425c",
    "prId" : 48402,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48402#pullrequestreview-48114300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08938657-0f0e-44cf-82c6-15e7d466c135",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Also add a comment indicating that compared to `IsLikelyNotMountPoint(...)`, this will have a higher perf impact if the machine has a lot of mounts (since it lists all the mounts), and should not be used in critical paths unless absolutely necessary.",
        "createdAt" : "2017-07-05T16:52:52Z",
        "updatedAt" : "2017-07-11T21:24:24Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b18d3b6f71a1786c68dee630b0452d20c71f844",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +218,222 @@// This method uses the List() of all mountpoints\n// It is more extensive than IsLikelyNotMountPoint\n// and it detects bind mounts in linux\nfunc IsNotMountPoint(mounter Interface, file string) (bool, error) {\n\t// IsLikelyNotMountPoint provides a quick check"
  },
  {
    "id" : "71af2aca-999d-487b-bf51-1a7a8dc4dc04",
    "prId" : 38124,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38124#pullrequestreview-11529485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c680a9a-a81e-4e23-b621-5da299495114",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This is a total hack. `gci_mounter` is a GKE specific deployment detail. We should not be leaking that logic into upstream. ",
        "createdAt" : "2016-12-06T02:01:25Z",
        "updatedAt" : "2016-12-06T21:03:08Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "b3015d34-f726-485d-b17d-acd431f47849",
        "parentId" : "9c680a9a-a81e-4e23-b621-5da299495114",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "We discussed a few options, but they are all seem hacky...",
        "createdAt" : "2016-12-06T06:28:55Z",
        "updatedAt" : "2016-12-06T21:03:08Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "896e0b867e8db0b0d4ed94e1763fc8583aa66c0c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +131,135 @@\t}\n\n\t// TODO: this is a workaround for the unmount device issue caused by gci mounter.\n\t// In GCI cluster, if gci mounter is used for mounting, the container started by mounter\n\t// script will cause additional mounts created in the container. Since these mounts are"
  },
  {
    "id" : "19e1d14b-6840-44c3-b262-c067cf81ddd6",
    "prId" : 36840,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36840#pullrequestreview-8759462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91db1afe-ec1f-44c4-a105-70cc1f941a47",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I wonder if we should return a struct with the mount information.  I see there's another overload which returns the ref count, so it's difficult to know exactly where this is used by pure grep.  But this is my go-to trick (when in doubt, create a type!); not sure it's needed.\n",
        "createdAt" : "2016-11-15T23:18:38Z",
        "updatedAt" : "2016-11-17T19:14:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "78f487b5-3cbc-403f-bf01-b8a4656601da",
        "parentId" : "91db1afe-ec1f-44c4-a105-70cc1f941a47",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "Yes, I plan to change the function name to avoid the confusion in another PR.\n",
        "createdAt" : "2016-11-16T07:09:41Z",
        "updatedAt" : "2016-11-17T19:14:57Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b89c79e557a19b6f824796ff77283722a161f5d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +200,204 @@\t\t\t}\n\t\t\treturn volumeID, nil\n\t\t}\n\t}\n"
  },
  {
    "id" : "4451be53-0036-4a52-b795-51c34c4f43e9",
    "prId" : 35652,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35652#pullrequestreview-5960765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "164a87b8-a7f0-4870-950c-5fe7a9c54665",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "Could you explain why this mounterRootfsPath is needed? how it works?\n",
        "createdAt" : "2016-10-26T21:49:30Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "688a2491-c9e7-4843-993a-d655a9ad0884",
        "parentId" : "164a87b8-a7f0-4870-950c-5fe7a9c54665",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "`/` to kubelet is `/rootfs` to the mounter container. So if kubelet wants to mount `/foo/bar`, then it has to pass `/rootfs/foo/bar` to the container.\n",
        "createdAt" : "2016-10-26T21:54:18Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "d91318c7-192d-4878-a9f9-d6b4962fa143",
        "parentId" : "164a87b8-a7f0-4870-950c-5fe7a9c54665",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "Is that ok to put some comments about this somewhere in the code?\n",
        "createdAt" : "2016-10-26T22:03:48Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "4fa3b5ae-db76-47dd-ba9f-a0d236c17e47",
        "parentId" : "164a87b8-a7f0-4870-950c-5fe7a9c54665",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Sure\n",
        "createdAt" : "2016-10-26T22:10:57Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "04a1b4f0-f168-4439-85ec-1332a5b2a206",
        "parentId" : "164a87b8-a7f0-4870-950c-5fe7a9c54665",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Done. PTAL\n",
        "createdAt" : "2016-10-26T22:21:27Z",
        "updatedAt" : "2016-10-27T04:43:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e861a5761da23577f563cdc32c1c6e8f7d549b06",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +113,117 @@\treturn &Mounter{\n\t\tmounterPath:       mounterPath,\n\t\tmounterRootfsPath: mounterRootfsPath,\n\t}\n}"
  },
  {
    "id" : "f54d8cd4-956e-4afa-a0c3-8b8545d8e498",
    "prId" : 16942,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abcafc5c-127b-4ff9-9647-fb26f67e8a19",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "Can you put more words on usage? Distinguishing `Mount` and `SafeFormatAndMount` doesn't look quite easy to digest on the first glance.\n",
        "createdAt" : "2015-11-07T14:51:18Z",
        "updatedAt" : "2015-12-02T16:16:11Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "e9af2d5e-dd24-4263-ab45-027d95a8edc1",
        "parentId" : "abcafc5c-127b-4ff9-9647-fb26f67e8a19",
        "authorId" : null,
        "body" : "@rootfs updated... do fc, iscsi, and rbd changes look OK to you ?\n",
        "createdAt" : "2015-11-12T15:27:23Z",
        "updatedAt" : "2015-12-02T16:16:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d03d6130-fde5-4ac7-a0c1-8627994e057e",
        "parentId" : "abcafc5c-127b-4ff9-9647-fb26f67e8a19",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "@swagiaal look good to me. spent some time figuring out ident in `fc` though\n",
        "createdAt" : "2015-11-12T17:23:16Z",
        "updatedAt" : "2015-12-02T16:16:11Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "66c905d63e146f9478e678fbc8fabc017b6c8bd0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +63,67 @@// disk is already formatted or it is being mounted as read-only, it\n// will be mounted without formatting.\nfunc (mounter *SafeFormatAndMount) FormatAndMount(source string, target string, fstype string, options []string) error {\n\t// Don't attempt to format if mounting as readonly. Go straight to mounting.\n\tfor _, option := range options {"
  },
  {
    "id" : "a69ac02a-db35-4e7a-9d66-496b8a6b9296",
    "prId" : 16536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a2fac9-84cc-436f-902e-6d50ca66e08d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "shouldn't this all go in a *_linux .go file?\n",
        "createdAt" : "2015-11-02T20:48:33Z",
        "updatedAt" : "2015-11-02T20:48:33Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "71f92d76-791d-4926-bc89-caf826e87f1a",
        "parentId" : "78a2fac9-84cc-436f-902e-6d50ca66e08d",
        "authorId" : null,
        "body" : "> shouldn't this all go in a *_linux .go file?\n\nAh yes they should. I filed https://github.com/kubernetes/kubernetes/issues/16729. Would you be okay with me moving them after this PR and #14200 ?\n",
        "createdAt" : "2015-11-03T14:30:30Z",
        "updatedAt" : "2015-11-03T14:30:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d6c2c31c-f71b-4b9d-8735-8ac31ff1e416",
        "parentId" : "78a2fac9-84cc-436f-902e-6d50ca66e08d",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "sounds a plan for me, @thockin ?\n",
        "createdAt" : "2015-11-03T14:46:54Z",
        "updatedAt" : "2015-11-03T14:46:54Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a31d23ea0e1839d14a4ac112d962735480276793",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +86,90 @@\t\t\t}\n\t\t\tif fstype == \"ext4\" || fstype == \"ext3\" {\n\t\t\t\targs = []string{\"-E\", \"lazy_itable_init=0,lazy_journal_init=0\", \"-F\", source}\n\t\t\t}\n\t\t\tcmd := mounter.Runner.Command(\"mkfs.\"+fstype, args...)"
  },
  {
    "id" : "6cec70ca-f3a8-4742-aa98-273899a7e712",
    "prId" : 6269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2179b7-03d2-4f36-8a60-7e550066a437",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Is this of any actual value?\n",
        "createdAt" : "2015-04-01T20:05:24Z",
        "updatedAt" : "2015-04-02T03:04:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9a96b5a9-9f73-46c2-ae83-f3013be310e7",
        "parentId" : "5d2179b7-03d2-4f36-8a60-7e550066a437",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "No real value, it was there before.  (I moved the order though, to make type declaration before method declaration).\n\nI think we can leave it there.  The New() method hides interface implementation from user, so client code doesn't need to know what type implements the interface.  Everything is defined in mount.go.\n",
        "createdAt" : "2015-04-02T01:55:55Z",
        "updatedAt" : "2015-04-02T03:04:56Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "d62afa85ff598ef62422348effee194d7159e939",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +47,51 @@\n// New returns a mount.Interface for the current system.\nfunc New() Interface {\n\treturn &Mounter{}\n}"
  },
  {
    "id" : "ca46a750-85c2-4919-9333-f97434a82112",
    "prId" : 5036,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b41b23ae-22eb-49eb-8db8-484cdaafde9a",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "why not just create a mount_util.go? \n",
        "createdAt" : "2015-03-05T00:57:39Z",
        "updatedAt" : "2015-03-05T18:49:42Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "1ea8d7d9-3767-4c24-b56b-d708e7de2c18",
        "parentId" : "b41b23ae-22eb-49eb-8db8-484cdaafde9a",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@rootfs things are in the files they are to ensure that the build flags for\neach function / type didn't change across this commit.\nOn Wed, Mar 4, 2015 at 7:58 PM Huamin Chen notifications@github.com wrote:\n\n> In pkg/util/mount/mount.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5036#discussion_r25830927\n> :\n> \n> > @@ -49,3 +49,30 @@ type MountPoint struct {\n> >     Freq   int\n> >     Pass   int\n> >  }\n> > +\n> > +// Examines /proc/mounts to find all other references to the device referenced\n> \n> why not just create a mount_util.go?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5036/files#r25830927\n> .\n",
        "createdAt" : "2015-03-05T01:41:51Z",
        "updatedAt" : "2015-03-05T18:49:42Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ef04a842518b7759b65d43471be3c4535b7a45b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +51,55 @@}\n\n// Examines /proc/mounts to find all other references to the device referenced\n// by mountPath.\nfunc GetMountRefs(mounter Interface, mountPath string) ([]string, error) {"
  },
  {
    "id" : "4aaa50db-e117-4807-b06e-22d6a7f10968",
    "prId" : 5036,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45795bc0-f5b2-4d5f-9aa1-343e1933dff5",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Comment should detail that it returns a list of paths.\n",
        "createdAt" : "2015-03-06T08:04:39Z",
        "updatedAt" : "2015-03-06T08:04:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ef04a842518b7759b65d43471be3c4535b7a45b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +52,56 @@\n// Examines /proc/mounts to find all other references to the device referenced\n// by mountPath.\nfunc GetMountRefs(mounter Interface, mountPath string) ([]string, error) {\n\tmps, err := mounter.List()"
  }
]