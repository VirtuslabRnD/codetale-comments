[
  {
    "id" : "2f3fa9c9-70ec-4f8f-b579-77a3be27debd",
    "prId" : 35583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35583#pullrequestreview-6369387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83c1071e-353d-4a27-8d74-0dcc8c50f9f7",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Float math scares me.\n\nI was going to suggest making this all int based but did some tests and convinced myself it isn't a problem.  See: https://play.golang.org/p/LSKUOGz2LG\n\nFeel free to link that from here so that folks can run it and convince themselves.\n",
        "createdAt" : "2016-10-26T17:21:45Z",
        "updatedAt" : "2016-10-31T00:55:19Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "948de881-54a3-461d-adbc-9f7a169fcc95",
        "parentId" : "83c1071e-353d-4a27-8d74-0dcc8c50f9f7",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Will do - I also hand-waving satisifed myself that there's no loss of precision for qps from about 1E6 to 1E-6.\n\nI'll actually add some unit tests just to prove it :-)\n",
        "createdAt" : "2016-10-30T19:06:21Z",
        "updatedAt" : "2016-10-31T00:55:19Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "cebfc821a4418a1c23b4bf7e1cff6967aff2df0f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@type Bucket struct {\n\tunitsPerNano float64\n\tnanosPerUnit float64\n\tcapacity     int64\n"
  },
  {
    "id" : "36dc640e-68b0-4849-8947-0eeb0d7f2163",
    "prId" : 35583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35583#pullrequestreview-6369085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "599dec17-1161-4866-b50a-cdf176d01422",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Any reason not to make this be a `time.Time`?\n",
        "createdAt" : "2016-10-26T17:23:43Z",
        "updatedAt" : "2016-10-31T00:55:19Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "e3c3d8da-0a99-4b72-96de-cfb542bb7ee0",
        "parentId" : "599dec17-1161-4866-b50a-cdf176d01422",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "time.Time has an odd sec / nsec structure; it's a little more efficient & simpler to just \"think in nanoseconds\"\n\nSecretly though, I hope that the gorus will allow us to have a monotonic clock and we can switch to that, and that won't be in time.Time...\n",
        "createdAt" : "2016-10-30T18:48:19Z",
        "updatedAt" : "2016-10-31T00:55:19Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "cebfc821a4418a1c23b4bf7e1cff6967aff2df0f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\tmutex      sync.Mutex\n\tavailable  int64\n\tlastRefill int64\n\t// fractionalAvailable \"buffers\" any amounts that flowed into the bucket smaller than one unit\n\t// This lets us retain precision even with pathological refill rates like (1E9 + 1) per second"
  }
]