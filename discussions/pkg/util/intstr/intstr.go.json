[
  {
    "id" : "cf5dd460-6a9a-4a28-8eaf-37b6a8ee5510",
    "prId" : 31468,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eddad6f3-05fb-4fa4-9202-d2292a28536c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This seems really wrong - now we're coupling every Go type that ever uses IntOrString with commonapi?  \n\nThis really needs to be outside this type as a separate package. \n",
        "createdAt" : "2016-09-13T16:55:45Z",
        "updatedAt" : "2016-09-13T16:55:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5b6e8919-65ba-4e50-9c00-b5b22f3b97db",
        "parentId" : "eddad6f3-05fb-4fa4-9202-d2292a28536c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see your point, but at the same time intOrString is effectively part of our API. Maybe we should split it into two types, and move a copy into our api somewhere? (My preference is to nuke IntOrString from orbit but I think that's not on the table at the moment :) )\n",
        "createdAt" : "2016-09-13T18:26:11Z",
        "updatedAt" : "2016-09-13T18:26:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "469c7d37f306f3e5b46dc9c91a8b4b15762d5991",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +106,110 @@}\n\nfunc (_ IntOrString) OpenAPIDefinition() common.OpenAPIDefinition {\n\treturn common.OpenAPIDefinition{\n\t\tSchema: spec.Schema{"
  },
  {
    "id" : "b61ed4af-2133-4b75-8823-aed5990a5557",
    "prId" : 17353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e330e3f-8e0e-429a-9d1f-efc6c0b569d8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think this is wrong and we should not do it.  It's scope creep for this PR anyway.  Was there a use case justifying this?  I think we should roll it back\n",
        "createdAt" : "2015-11-30T18:27:28Z",
        "updatedAt" : "2015-11-30T18:27:28Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "00c8d555-9572-42c7-b4e0-743ca47ba53c",
        "parentId" : "6e330e3f-8e0e-429a-9d1f-efc6c0b569d8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It was to prevent having to refactor 900 lines of internal code that assume\nIntOrString is int, not int32.  The string conversion bit can be removed as\nlong as we doc it (all the places it was used was the IntValue)\n\nOn Mon, Nov 30, 2015 at 1:27 PM, Tim Hockin notifications@github.com\nwrote:\n\n> In pkg/util/intstr/intstr.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r46181719\n> :\n> \n> > @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string {\n> >     if intstr.Type == String {\n> >         return intstr.StrVal\n> >     }\n> > -   return strconv.Itoa(intstr.IntVal)\n> > -   return strconv.Itoa(intstr.IntValue())\n> >   +}\n> >   +\n> >   +// IntValue returns the IntVal if type Int, or if\n> >   +// it is a String, will attempt a conversion to int.\n> >   +func (intstr *IntOrString) IntValue() int {\n> > -   if intstr.Type == String {\n> \n> I think this is wrong and we should not do it. It's scope creep for this\n> PR anyway. Was there a use case justifying this? I think we should roll it\n> back\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r46181719.\n",
        "createdAt" : "2015-11-30T19:44:05Z",
        "updatedAt" : "2015-11-30T19:44:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1ea3776d-5979-4aad-9760-a124a9706a53",
        "parentId" : "6e330e3f-8e0e-429a-9d1f-efc6c0b569d8",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't mean the function, I mean the new cast of string -> int.  I assert\nthat this is a discriminated union, and not a \"best effort to figure out\nwhat the user meant\".  if they said type String and read it back as an int,\nthey get a 0 or an error or a panic.  Not an atoi() of the string.\n\nOn Mon, Nov 30, 2015 at 11:44 AM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/util/intstr/intstr.go\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r46192602\n> :\n> \n> > @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string {\n> >     if intstr.Type == String {\n> >         return intstr.StrVal\n> >     }\n> > -   return strconv.Itoa(intstr.IntVal)\n> > -   return strconv.Itoa(intstr.IntValue())\n> >   +}\n> >   +\n> >   +// IntValue returns the IntVal if type Int, or if\n> >   +// it is a String, will attempt a conversion to int.\n> >   +func (intstr *IntOrString) IntValue() int {\n> > -   if intstr.Type == String {\n> \n> It was to prevent having to refactor 900 lines of internal code that\n> assume IntOrString is int, not int32. The string conversion bit can be\n> removed as long as we doc it (all the places it was used was the IntValue)\n> … <#15159ed0968e77c8_>\n> On Mon, Nov 30, 2015 at 1:27 PM, Tim Hockin notifications@github.com\n> wrote: In pkg/util/intstr/intstr.go <#17353 (comment)\n> https://github.com/kubernetes/kubernetes/pull/17353#discussion_r46181719>\n> : > @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string { > if\n> intstr.Type == String { > return intstr.StrVal > } > - return\n> strconv.Itoa(intstr.IntVal) > + return strconv.Itoa(intstr.IntValue()) > +}\n> \n> > - > +// IntValue returns the IntVal if type Int, or if > +// it is a\n> >   String, will attempt a conversion to int. > +func (intstr *IntOrString)\n> >   IntValue() int { > + if intstr.Type == String { I think this is wrong and\n> >   we should not do it. It's scope creep for this PR anyway. Was there a use\n> >   case justifying this? I think we should roll it back — Reply to this email\n> >   directly or view it on GitHub <\n> >   https://github.com/kubernetes/kubernetes/pull/17353/files#r46181719>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17353/files#r46192602.\n",
        "createdAt" : "2015-12-01T06:37:56Z",
        "updatedAt" : "2015-12-01T06:37:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6b27eabb-f0f4-48ae-9cb4-0b13a84f4536",
        "parentId" : "6e330e3f-8e0e-429a-9d1f-efc6c0b569d8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I will nuke the best effort in a pr.\n\nOn Dec 1, 2015, at 1:38 AM, Tim Hockin notifications@github.com wrote:\n\nIn pkg/util/intstr/intstr.go\nhttps://github.com/kubernetes/kubernetes/pull/17353#discussion_r46244484:\n\n> @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string {\n>   if intstr.Type == String {\n>       return intstr.StrVal\n>   }\n> - return strconv.Itoa(intstr.IntVal)\n> - return strconv.Itoa(intstr.IntValue())\n>   +}\n>   +\n>   +// IntValue returns the IntVal if type Int, or if\n>   +// it is a String, will attempt a conversion to int.\n>   +func (intstr *IntOrString) IntValue() int {\n> - if intstr.Type == String {\n\nI don't mean the function, I mean the new cast of string -> int. I assert\nthat this is a discriminated union, and not a \"best effort to figure out\nwhat the user meant\". if they said type String and read it back as an int,\nthey get a 0 or an error or a panic. Not an atoi() of the string.\n… <#>\nOn Mon, Nov 30, 2015 at 11:44 AM, Clayton Coleman notifications@github.com\nwrote: In pkg/util/intstr/intstr.go <#17353 (comment)\nhttps://github.com/kubernetes/kubernetes/pull/17353#discussion_r46192602>\n: > @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string { > if\nintstr.Type == String { > return intstr.StrVal > } > - return\nstrconv.Itoa(intstr.IntVal) > + return strconv.Itoa(intstr.IntValue()) > +}\n\n> - > +// IntValue returns the IntVal if type Int, or if > +// it is a\n>   String, will attempt a conversion to int. > +func (intstr *IntOrString)\n>   IntValue() int { > + if intstr.Type == String { It was to prevent having to\n>   refactor 900 lines of internal code that assume IntOrString is int, not\n>   int32. The string conversion bit can be removed as long as we doc it (all\n>   the places it was used was the IntValue) … <#15159ed0968e77c8_> On Mon, Nov\n>   30, 2015 at 1:27 PM, Tim Hockin notifications@github.com wrote: In\n>   pkg/util/intstr/intstr.go <#17353\n>   https://github.com/kubernetes/kubernetes/pull/17353 (comment) <#17353\n>   (comment)\n>   https://github.com/kubernetes/kubernetes/pull/17353#discussion_r46181719>>\n>   : > @@ -67,7 +71,17 @@ func (intstr *IntOrString) String() string { > if\n>   intstr.Type == String { > return intstr.StrVal > } > - return\n>   strconv.Itoa(intstr.IntVal) > + return strconv.Itoa(intstr.IntValue()) > +}\n> - > +// IntValue returns the IntVal if type Int, or if > +// it is a\n>   String, will attempt a conversion to int. > +func (intstr *IntOrString)\n>   IntValue() int { > + if intstr.Type == String { I think this is wrong and\n>   we should not do it. It's scope creep for this PR anyway. Was there a use\n>   case justifying this? I think we should roll it back — Reply to this email\n>   directly or view it on GitHub <\n>   https://github.com/kubernetes/kubernetes/pull/17353/files#r46181719>. —\n>   Reply to this email directly or view it on GitHub <\n>   https://github.com/kubernetes/kubernetes/pull/17353/files#r46192602>.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/17353/files#r46244484.\n",
        "createdAt" : "2015-12-01T11:27:30Z",
        "updatedAt" : "2015-12-01T11:27:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e02bdd5005dd9c5787f25cb1817053907cbd84",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +78,82 @@// it is a String, will attempt a conversion to int.\nfunc (intstr *IntOrString) IntValue() int {\n\tif intstr.Type == String {\n\t\ti, _ := strconv.Atoi(intstr.StrVal)\n\t\treturn i"
  },
  {
    "id" : "3b677837-27d4-4971-97ac-7f04b8d738a0",
    "prId" : 14469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0884e8eb-1152-4283-bcba-dbc489db926f",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "2015\n",
        "createdAt" : "2015-09-24T15:51:49Z",
        "updatedAt" : "2015-11-16T18:58:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "9e23543b-15a6-48f4-b8fe-635463aadaa5",
        "parentId" : "0884e8eb-1152-4283-bcba-dbc489db926f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ditto\n",
        "createdAt" : "2015-09-24T16:17:15Z",
        "updatedAt" : "2015-11-16T18:58:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba383bcfeb31cf5bce478e33289451de42d22c04",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@/*\nCopyright 2014 The Kubernetes Authors All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");"
  }
]