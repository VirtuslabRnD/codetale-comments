[
  {
    "id" : "d3a0b261-c23a-4d13-b69d-6238a44421f1",
    "prId" : 24052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is it a critical property of this queue that items come out in the order you'd expect based on their delays? Because I'm pretty sure there are some conditions under which this won't be true.\n",
        "createdAt" : "2016-04-11T23:37:18Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "86221453-3525-4cf0-b936-6c08c4b71d6d",
        "parentId" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "No, this is just testing that a long wait followed by a short wait fires at the shorter time, not the longest time\n",
        "createdAt" : "2016-04-11T23:51:32Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c3aa1ec5-9fb9-415e-a593-13a78ec440a6",
        "parentId" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Is it a critical property of this queue that items come out in the order you'd expect based on their delays? Because I'm pretty sure there are some conditions under which this won't be true.\n\nI'd be surprised if I bugged that, but no, it isn't essential.\n",
        "createdAt" : "2016-04-11T23:57:11Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "86bc676f-a314-4225-bfaf-583632c5e9e5",
        "parentId" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm quite sure that the code as it exists right will not process things in the expected order in all cases.\n",
        "createdAt" : "2016-04-12T20:56:50Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2d062075-5689-4914-8414-51187cd125bc",
        "parentId" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I wouldn't consider relative ordering important once you're requesting time-based adds, since an indeterminate amount of time passes between two consecutive calls to AddAfter\n",
        "createdAt" : "2016-04-12T21:01:26Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "84f5f430-5619-4170-9d30-cd1246c4ea50",
        "parentId" : "3571b953-006f-4793-8f2a-e277ed8a6ed8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'm quite sure that the code as it exists right will not process things in the expected order in all cases.\n\nSorry, I'm not seeing how this test will flake with a `util.FakeClock`.  Are you asking about this test or in actual usage?  In actual usage I have no way to guarantee when discrete calls to `AddAfter` actually happen, so nothing can guarantee the final ordering.  In this test, I'm confident that the order to will behave ask expected since I control time (the power!).\n",
        "createdAt" : "2016-04-13T20:30:37Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf95b124e66acf503e6699e42504d8a5d45883ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +129,133 @@\tq.AddAfter(first, 1*time.Second)\n\tq.AddAfter(second, 500*time.Millisecond)\n\tq.AddAfter(third, 250*time.Millisecond)\n\tif err := waitForWaitingQueueToFill(q); err != nil {\n\t\tt.Fatalf(\"unexpected err: %v\", err)"
  },
  {
    "id" : "7c3d1ddf-5f08-4f0a-8e5a-f50621fb0297",
    "prId" : 23444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7cf21fe-ed47-4cee-a9b5-a277c10f650b",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "This has the potential to be the source of a lot of test flakes. Can you modify the main code to use `util.Clock` with `RealClock` and have the tests use `FakeClock` so you can control it?\n",
        "createdAt" : "2016-03-29T16:52:26Z",
        "updatedAt" : "2016-04-07T19:10:58Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf097ea233126a4d63f99cec25cdcc27f907794b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +33,37 @@\tfirst := \"foo\"\n\n\tq.AddAfter(first, 50*time.Millisecond)\n\tif err := waitForWaitingQueueToFill(q); err != nil {\n\t\tt.Fatalf(\"unexpected err: %v\", err)"
  },
  {
    "id" : "47ae04e6-a4cd-4527-a695-a72431902ec4",
    "prId" : 23444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04131e33-163a-480f-87de-3a3d68dcbe63",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This condition only works on synchronous insertion from AddAfter.  \n",
        "createdAt" : "2016-04-06T15:18:38Z",
        "updatedAt" : "2016-04-07T19:10:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf097ea233126a4d63f99cec25cdcc27f907794b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +38,42 @@\t}\n\n\tif q.Len() != 0 {\n\t\tt.Errorf(\"should not have added\")\n\t}"
  }
]