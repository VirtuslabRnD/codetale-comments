[
  {
    "id" : "a9618359-b4fe-4838-8090-3c7a00bc46d7",
    "prId" : 24052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3612f418-fe54-4f4e-ab02-7c595c5fe9f0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "RateLimiter?\n",
        "createdAt" : "2016-04-11T23:37:42Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf95b124e66acf503e6699e42504d8a5d45883ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +19,23 @@// RateLimitingInterface is an Interface that can Add an item at a later time.  This makes it easier to\n// requeue items after failures without ending up in a hot-loop.\ntype RateLimitingInterface interface {\n\tDelayingInterface\n\t// AddRateLimited adds an item to the workqueue after the rate limiter says its ok"
  },
  {
    "id" : "49364123-b5a9-4b9f-8382-af48536493c8",
    "prId" : 24052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "982156eb-58a3-48b4-986c-03e0bb18166c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Document that this only clears the rate limiter. (Or fix to do Get()/Done() to remove from the queue, too)\n",
        "createdAt" : "2016-04-11T23:39:04Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3063a8e6-623a-4b36-8141-7a3e33136f42",
        "parentId" : "982156eb-58a3-48b4-986c-03e0bb18166c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess that's not the intention. Hm.\n",
        "createdAt" : "2016-04-11T23:39:55Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf95b124e66acf503e6699e42504d8a5d45883ca",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@}\n\nfunc (q *rateLimitingType) Forget(item interface{}) {\n\tq.rateLimiter.Forget(item)\n}"
  },
  {
    "id" : "1461aa3e-1c54-4284-be7b-17fb9cc3a548",
    "prId" : 24052,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63849d95-6422-4a40-ac32-5c712f17ff83",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should you automatically call forget when people call Done()?\n",
        "createdAt" : "2016-04-11T23:40:19Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "000ff341-1527-450e-935b-3277007bf04a",
        "parentId" : "63849d95-6422-4a40-ac32-5c712f17ff83",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "No, Done means we're done processing one try and the queue is free to return the key from Get again, not that we should forget how many retries have been done\n",
        "createdAt" : "2016-04-11T23:52:55Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2c8eeb90-b597-453b-bfc1-903b274735c0",
        "parentId" : "63849d95-6422-4a40-ac32-5c712f17ff83",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Should you automatically call forget when people call Done()?\n\nNo.  `Done` simply means, \"this `Get` is logically concluded\".  It does not mean that we should forget about the item.  If the item failed again, we wouldn't want to forget it.\n",
        "createdAt" : "2016-04-11T23:56:33Z",
        "updatedAt" : "2016-05-10T13:04:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf95b124e66acf503e6699e42504d8a5d45883ca",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n// NewRateLimitingQueue constructs a new workqueue with rateLimited queuing ability\n// Remember to call Forget!  If you don't, you may end up tracking failures forever.\nfunc NewRateLimitingQueue(rateLimiter RateLimiter) RateLimitingInterface {\n\treturn &rateLimitingType{"
  }
]