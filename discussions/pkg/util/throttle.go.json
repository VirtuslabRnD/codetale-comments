[
  {
    "id" : "b83bee98-4aa5-4a2a-9977-8e17dd0a103b",
    "prId" : 17694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b5a7453-ab41-4c10-bc54-fa7df7003197",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Godoc please while you are here.\n",
        "createdAt" : "2015-11-25T16:56:23Z",
        "updatedAt" : "2015-11-25T16:56:23Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "d615dfcf-e026-464a-9c01-eafe51225b17",
        "parentId" : "2b5a7453-ab41-4c10-bc54-fa7df7003197",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "This is private implementation.\nThe docs should be covered in public interface (i.e. RateLimiter), right?\n",
        "createdAt" : "2015-11-25T16:58:28Z",
        "updatedAt" : "2015-11-25T16:58:45Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "e42b4d2c-ed9a-4d8c-97c6-afb775cc3e82",
        "parentId" : "2b5a7453-ab41-4c10-bc54-fa7df7003197",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "ah, sorry, I agree.  thanks!\n",
        "createdAt" : "2015-11-25T16:59:41Z",
        "updatedAt" : "2015-11-25T16:59:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "e858f5b3-503c-498c-a27e-e668cb05a42b",
        "parentId" : "2b5a7453-ab41-4c10-bc54-fa7df7003197",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Great. Thanks!\n",
        "createdAt" : "2015-11-25T17:01:20Z",
        "updatedAt" : "2015-11-25T17:01:20Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d152a873bc326ecb623dfe86a359c0ab724802",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +49,53 @@}\n\nfunc (t *tickRateLimiter) TryAccept() bool {\n\treturn t.limiter.TakeAvailable(1) == 1\n}"
  },
  {
    "id" : "9c80b848-c3b1-44e2-a6bf-c442edf33e5b",
    "prId" : 17694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a23eca0-be34-4a07-a3cb-d05ab9d23b0a",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Godoc as well.\n",
        "createdAt" : "2015-11-25T16:56:37Z",
        "updatedAt" : "2015-11-25T16:56:37Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "13d152a873bc326ecb623dfe86a359c0ab724802",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +61,65 @@}\n\nfunc (t *fakeRateLimiter) TryAccept() bool {\n\treturn true\n}"
  },
  {
    "id" : "459d85ae-f11b-44ad-9e41-1a49c0c1e849",
    "prId" : 17673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "277a0988-86be-4c86-adf1-e785820ef833",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "the name change seems orthogonal to the change of the metric, but Meh. \n",
        "createdAt" : "2015-12-01T18:02:01Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4fdb7a2d06db250f577f06e41182a9f22cc8f7c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@}\n\ntype tokenBucketRateLimiter struct {\n\tlimiter *ratelimit.Bucket\n}"
  },
  {
    "id" : "5ba8dc31-02c5-4ab8-9f76-fc92edd4362c",
    "prId" : 17673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add: \"1.0 means no tokens are available, 0.0 means all tokens are available.\"\n",
        "createdAt" : "2015-12-01T18:26:41Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a0b4a613-3023-4b84-8da5-762dd4da5183",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'd suggest a slightly different semantics: there are 2 different 'full' levels, all burst tokens are gone, and we're using tokens in the same rate we're producing them (i.e. we're at full capacity of 'normal' rate). I'd rather have 1.0 mean the latter, and values above 1.0 the former (concrete value depends on how much given RL can burst)\n",
        "createdAt" : "2015-12-01T20:56:35Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "f2ac0f27-8be2-47f3-af52-1314326c519d",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "@gmarek That doesn't sound like Saturation() but Available() rate.\n",
        "createdAt" : "2015-12-02T01:32:19Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "2dfbe575-0194-4735-9852-03c970631726",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@gmarek I don't really follow how that would make a difference. There's no difference between \"burst\" and \"regular\" tokens.\n",
        "createdAt" : "2015-12-02T04:26:04Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0887738b-876d-4114-84df-c62445c043d8",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I probably wrote something too complex. Rate limiter has to 'limits' one that is sustainable and 'burst' limit for short bursts. I think that exposing `number of tokens / max number of tokens` (something like 'burst saturation') is not enough. We want to know when RL allowed more QPS than it's sustainable level. There's no difference between tokens themselves, but there's a difference between having 1 QPS and 10 QPS with RL producing 2tok/sec and having burst value of 20. Does it make more sense now?\n",
        "createdAt" : "2015-12-02T06:37:01Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "bb1debba-4fd9-42c2-a28b-acd8c4d50396",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I initially thought I agree with @gmarek  but after more thinking about it, I think that I don't agree.\n\nI think that the reason behind having this metric is to expose how many operations we are still able to process. And we are not going to look into a single value of the metric, but its graph over time.\n\nSo if the saturation is going up, it's a clear signal that there are more requests that we can actually handle (which is obviously a bad sign).\n\nI think that we should leave as is (and potentially add another metric (something similar to what @gmarek suggested) in the future).\n",
        "createdAt" : "2015-12-02T10:17:16Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d8c4caba-146d-449d-9964-26d6ca6ad12f",
        "parentId" : "ebddad6a-2600-4644-8e1e-d60f74a8a1ec",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@gmarek No, it still doesn't make sense to me. All that matters is the aggregate qps. If the actions taken are bursty then that will show up as sometimes being saturated and sometimes not. Since we poll this every second and we will look at an aggregate value, I don't think we need to add any logic to consider that case to this saturation function; it should return instantaneous saturation, as it does.\n\nIOW, bursting really doesn't change the logic because you can't sustain it-- either you'll run out of tokens eventually and it will show up in this metric OR you're not actually exceeding the QPS limit and therefore we don't care.\n",
        "createdAt" : "2015-12-02T18:03:49Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4fdb7a2d06db250f577f06e41182a9f22cc8f7c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +28,32 @@\tStop()\n\t// Saturation returns a percentage number which describes how saturated\n\t// this rate limiter is.\n\t// Usually we use token bucket rate limiter. In that case,\n\t// 1.0 means no tokens are available; 0.0 means we have a full bucket of tokens to use."
  },
  {
    "id" : "814f5b34-5fd3-4fb7-b022-e76af29c3f1d",
    "prId" : 17673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2d205f-6315-4e1d-9da7-e2f4c4dc4eb5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thanks, this looks much more useful!\n",
        "createdAt" : "2015-12-01T18:32:04Z",
        "updatedAt" : "2015-12-03T18:43:57Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4fdb7a2d06db250f577f06e41182a9f22cc8f7c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +58,62 @@}\n\nfunc (t *tokenBucketRateLimiter) Saturation() float64 {\n\tcapacity := t.limiter.Capacity()\n\tavail := t.limiter.Available()"
  },
  {
    "id" : "8bba953e-5593-4c84-8507-4630dc0d1d43",
    "prId" : 1457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eb4308a-8d6c-4ead-a336-18612d890121",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We don't do a lot of precondition checking, and Go does not seem to endorse CHECK failing - is this a pattern we should follow elsewhere?  I have wanted to do this many times...\n",
        "createdAt" : "2014-09-26T19:36:35Z",
        "updatedAt" : "2014-09-26T19:36:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ac706a32e64c37da72691cd2daab312ef800045",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@func newTokenBucketRateLimiterFromTicker(ticker <-chan time.Time, burst int) *tickRateLimiter {\n\tif burst < 1 {\n\t\tpanic(\"burst must be a positive integer\")\n\t}\n\trate := &tickRateLimiter{"
  }
]