[
  {
    "id" : "93059967-6d2a-4986-944f-39baebc68f39",
    "prId" : 19314,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76815a2c-3402-4842-9344-31870bd04332",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "refactor into member functions so you can avoid things like `entry := entry`\n",
        "createdAt" : "2016-01-27T20:37:42Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f01e5dc5-2b58-49b3-9175-85b8e4ee61c6",
        "parentId" : "76815a2c-3402-4842-9344-31870bd04332",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Member functions felt weird here, so I just passed `entry` into my go func. What do you think about that?\n",
        "createdAt" : "2016-01-28T04:32:42Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "04eb90a5d488de787ebe99fea4d394f1a53c6450",
    "line" : null,
    "diffHunk" : "@@ -1,1 +287,291 @@\t}\n\thealthCheckPoll := 1 * time.Minute\n\tgo Until(func() {\n\t\tl.tunnelsLock.Lock()\n\t\tdefer l.tunnelsLock.Unlock()"
  },
  {
    "id" : "41be9709-8968-489a-8a34-c1732e665441",
    "prId" : 19314,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55422e6e-c76b-4fb3-b016-0d0a1303f2ad",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "We would eventually like to plumb the tls options through to here. Maybe add a TODO?\n",
        "createdAt" : "2016-02-01T19:34:35Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "e3ca6b82-085f-47a1-bf32-442582af7946",
        "parentId" : "55422e6e-c76b-4fb3-b016-0d0a1303f2ad",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Done.\n",
        "createdAt" : "2016-02-01T23:42:59Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "04eb90a5d488de787ebe99fea4d394f1a53c6450",
    "line" : null,
    "diffHunk" : "@@ -1,1 +318,322 @@\t\tDial: e.Tunnel.Dial,\n\t\t// TODO(cjcullen): Plumb real TLS options through.\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t})\n\tclient := &http.Client{Transport: transport}"
  },
  {
    "id" : "2cde4712-a378-47fe-968d-ab8e243fe304",
    "prId" : 9905,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "662d7946-0ca6-418c-a9ff-684d1604a981",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "tests?\n",
        "createdAt" : "2015-06-17T04:45:27Z",
        "updatedAt" : "2015-06-20T22:18:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "80e7eef3-8f97-4e7a-8a1d-2c3ab170b6fd",
        "parentId" : "662d7946-0ca6-418c-a9ff-684d1604a981",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Sure, but not obvious to me how to do that.  I could create and pass in an SSH dialer, which would wrap ssh.Dial and verify the host & config.  Is that what you had in mind?\n",
        "createdAt" : "2015-06-19T01:35:32Z",
        "updatedAt" : "2015-06-20T22:18:18Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "d80559f3-86d6-4f6b-9118-5a910a007137",
        "parentId" : "662d7946-0ca6-418c-a9ff-684d1604a981",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "typical pattern would be something like:\n\n```\ntype sshDialer interface {\n    Dial(...) error\n}\n\ntype realDialer struct{}\n\nfunc (d *realDialer) Dial() {\n    // real dial\n}\n\nfunc RunSSHCommand(cmd, user, host string, signer ssh.Signer) (string, string, int, error) {\n  return runSSHCommand(&realDialer{}, cmd, user, host, signer)\n}\n\nfunc runSSHCommand(dialer sshDialer, cmd, user, host string, signer ssh.Signer) (string, string, int, error) {\n  // real code\n}\n```\n\nThen test runSSHCommand and play ostritch with RunSSHCommand\n",
        "createdAt" : "2015-06-19T01:48:05Z",
        "updatedAt" : "2015-06-20T22:18:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5f90853982a565dfc230d094903f96158b92dd5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +160,164 @@// host as specific user, along with any SSH-level error.\n// If user==\"\", it will default (like SSH) to os.Getenv(\"USER\")\nfunc RunSSHCommand(cmd, user, host string, signer ssh.Signer) (string, string, int, error) {\n\treturn runSSHCommand(&realSSHDialer{}, cmd, user, host, signer)\n}"
  },
  {
    "id" : "1f73c095-db30-490a-b9b1-99d9b0f1eef2",
    "prId" : 9905,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "104781b4-77e8-44fa-9458-61e7c0843f29",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit, it's traditional to add a \n\n```\nvar _ sshDialer = &realSSHDialer{}\n```\n\nto ensure the contract stays implemented :)\n",
        "createdAt" : "2015-06-19T20:14:04Z",
        "updatedAt" : "2015-06-20T22:18:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5f90853982a565dfc230d094903f96158b92dd5",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +149,153 @@\n// Real implementation of sshDialer\ntype realSSHDialer struct{}\n\nvar _ sshDialer = &realSSHDialer{}"
  },
  {
    "id" : "a25d1ef0-b1e1-45f3-adeb-e415fdf7de9c",
    "prId" : 9292,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24439294-bb3b-4e9a-be7d-bd2a5bb80d98",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Document that this is async, and tunnels won't be closed when the method returns.\n",
        "createdAt" : "2015-06-05T20:42:24Z",
        "updatedAt" : "2015-06-05T22:24:36Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ab329827a1424482358d72b1a83424ee19fb83b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +186,190 @@// minute. Tunnels will still be open upon this function's return, but should\n// no longer be used.\nfunc (l SSHTunnelList) Close() {\n\tfor ix := range l {\n\t\tentry := l[ix]"
  },
  {
    "id" : "fe392735-824b-4128-a006-220f331136ff",
    "prId" : 8898,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e35b124-29a7-4586-bf56-aabb4a9044eb",
        "parentId" : null,
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Should these be net.JoinHostPort()?\n\nWon't matter in our case, but might be nice if any of those IPv6ers want to use this util package.\n",
        "createdAt" : "2015-05-27T23:46:50Z",
        "updatedAt" : "2015-05-27T23:59:22Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      },
      {
        "id" : "66657682-23b6-43f7-a307-777320552f8f",
        "parentId" : "4e35b124-29a7-4586-bf56-aabb4a9044eb",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "feel free to ignore/TODO\n",
        "createdAt" : "2015-05-27T23:49:44Z",
        "updatedAt" : "2015-05-27T23:59:22Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      },
      {
        "id" : "e08feccd-d542-472c-bfd5-7de73554db0c",
        "parentId" : "4e35b124-29a7-4586-bf56-aabb4a9044eb",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "choosing to ignore for now...\n",
        "createdAt" : "2015-05-28T00:00:36Z",
        "updatedAt" : "2015-05-28T00:00:36Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "e5756a3b-106b-4ca9-afff-6000db10176f",
        "parentId" : "4e35b124-29a7-4586-bf56-aabb4a9044eb",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "eh... I'm with CJ on this one...\n",
        "createdAt" : "2015-05-28T00:10:39Z",
        "updatedAt" : "2015-05-28T00:10:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a51747f9413aa74dca97bc9901e64ffc9ab53365",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@func (s *SSHTunnel) Open() error {\n\tvar err error\n\ts.client, err = ssh.Dial(\"tcp\", fmt.Sprintf(\"%s:%d\", s.Host, s.SSHPort), s.Config)\n\tif err != nil {\n\t\treturn err"
  }
]