[
  {
    "id" : "751c9906-5ff6-4a34-8ba0-925b2846b644",
    "prId" : 19259,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "863cfe23-a449-486e-a43f-5ad29591efa0",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "If `pollImmediateInternal` is not supposed to call WaitFunc then why we pass it there?\n",
        "createdAt" : "2016-01-05T09:21:00Z",
        "updatedAt" : "2016-01-05T09:21:00Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "b91b0337-d190-464a-aa73-f266f321f623",
        "parentId" : "863cfe23-a449-486e-a43f-5ad29591efa0",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It depends on what kind of error do we want to get if it'll get called - panic, or test failure. I can pass nil there if you prefer.\n",
        "createdAt" : "2016-01-05T10:19:05Z",
        "updatedAt" : "2016-01-05T10:19:05Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b180e81f6932cadf932012246b500fba2a35e1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +128,132 @@\t\tt.Fatalf(\"unexpected error %v\", err)\n\t}\n\t// We don't need to wait for fp.wg, as pollImmediate shouldn't call WaitFunc at all.\n\tif invocations != 1 {\n\t\tt.Errorf(\"Expected exactly one invocation, got %d\", invocations)"
  },
  {
    "id" : "00ee9d10-7496-4c0a-b5e5-be8c2be57bac",
    "prId" : 943,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does continue not work here? I didn't think it meant anything to selects or switches?\n",
        "createdAt" : "2014-08-19T19:18:29Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2a023fb2-797d-4f77-8b2e-d5f141f8d781",
        "parentId" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Drain means done - so we want to bail out of the for, not just the select.\n",
        "createdAt" : "2014-08-20T01:02:07Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "720bda97-74d1-4312-9e08-cc17e7cc1019",
        "parentId" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm confused-- `break DRAIN` should cause the for loop to start over. `continue` should do the same thing, but it doesn't require a label. I feel like `break <label>` should be reserved for cases where you need to break out of multiple loops? /nit\n",
        "createdAt" : "2014-08-20T17:10:40Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7dc08ad1-ab4a-4f15-b50f-fc049eb015f5",
        "parentId" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "`break DRAIN` breaks you out of the `for` and you go to the next statement outside the loop.\n",
        "createdAt" : "2014-08-20T17:37:53Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e1ef0a63-a9de-4fae-aaf5-e55e624571a8",
        "parentId" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, you're right. I find that syntax extremely unintuitive. Wow.\n",
        "createdAt" : "2014-08-20T17:45:46Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4e33f0a5-4613-4a10-8091-9243802d4321",
        "parentId" : "79b45049-592b-402a-942c-0b9dcb87049d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree - the other way is to methodize the loop and return, or goto a label after the loop.  I tend to be biased towards break but the confusing syntax is a problem\n",
        "createdAt" : "2014-08-20T18:03:18Z",
        "updatedAt" : "2014-08-20T22:46:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "baaabcaf112f5e5771334b97a8c551554f6ec22b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\t\tcase _, open := <-ch:\n\t\t\tif !open {\n\t\t\t\tbreak DRAIN\n\t\t\t}\n\t\t\tcount++"
  }
]