[
  {
    "id" : "5e954ed9-1d9c-4bb1-8270-9c054411b2b0",
    "prId" : 96311,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96311#pullrequestreview-529414808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e28a0ad-de62-4c59-af51-3d8587f64a63",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we can still consider them as a fallback, but the goal was to give priority to the GA labels",
        "createdAt" : "2020-11-10T21:23:01Z",
        "updatedAt" : "2020-11-12T19:23:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9c9a1b2e-1f3f-4ff0-89da-91fdb83638b5",
        "parentId" : "1e28a0ad-de62-4c59-af51-3d8587f64a63",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't know if that's a good idea - if they are the same value, it doesn't matter.  If they are different values - changing the priority is a breaking change for what gain?  If we are eventually going to have a break, just break it all the way",
        "createdAt" : "2020-11-12T19:21:02Z",
        "updatedAt" : "2020-11-12T19:23:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bd337baf487a0ad9d748e7e0362b3d1b5eb5c4d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +190,194 @@\t// TODO: \"failure-domain.beta...\" names are deprecated, but will\n\t// stick around a long time due to existing on old extant objects like PVs.\n\t// Maybe one day we can stop considering them (see #88493).\n\tzone, ok := labels[v1.LabelFailureDomainBetaZone]\n\tif !ok {"
  },
  {
    "id" : "fb629f70-8702-42db-b037-4f6eda02e7ec",
    "prId" : 96033,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96033#pullrequestreview-524803544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56f3d071-6fab-4fae-8676-6216bbe05956",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Would it be safe at this point to at least switch the priority order here so that the topology labels are checked first?",
        "createdAt" : "2020-11-06T01:32:00Z",
        "updatedAt" : "2020-11-06T01:58:20Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "8b0623da-3c9f-4d97-ac97-6cb2a70ec8ac",
        "parentId" : "56f3d071-6fab-4fae-8676-6216bbe05956",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Same for regions below",
        "createdAt" : "2020-11-06T01:32:06Z",
        "updatedAt" : "2020-11-06T01:58:20Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "7307d44d-6632-481d-b3d8-bb4964adfd72",
        "parentId" : "56f3d071-6fab-4fae-8676-6216bbe05956",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "On second thought, it might be cleaner to keep this PR scoped to the new constants and do the priority switch in a follow-up PR",
        "createdAt" : "2020-11-06T01:42:51Z",
        "updatedAt" : "2020-11-06T01:58:20Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "e098c485-34c3-4f4e-82d4-d2a28f305b8c",
        "parentId" : "56f3d071-6fab-4fae-8676-6216bbe05956",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If at all?  I am not sure it makes any real sense to switch the priority.  If the labels are the same, no-op.  If they are different, best case is that we break users.",
        "createdAt" : "2020-11-06T01:51:27Z",
        "updatedAt" : "2020-11-06T01:58:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6a82952c60e26c2745ea727d989bdbb100eeac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +189,193 @@\n\t// TODO: prefer stable labels for zone in v1.18\n\tzone, ok := labels[v1.LabelFailureDomainBetaZone]\n\tif !ok {\n\t\tzone, _ = labels[v1.LabelTopologyZone]"
  },
  {
    "id" : "254139b1-9b20-451f-a4d2-5c2cd824c7c5",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501541085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6187a06-3370-4c13-ab1d-e94b8c826a14",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "shouldn't we at least log this?",
        "createdAt" : "2020-10-02T17:42:27Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "ac55d666-7928-4884-beec-1bd741f5c0b0",
        "parentId" : "f6187a06-3370-4c13-ab1d-e94b8c826a14",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Hm... I don't like logging messages from \"get\" methods. Who knows how often it might be called.\r\n\r\nThis is mostly a \"can't happen\". (It can only happen if you're using a broken cloud provider. But apparently someone was, because there's a bug report.) I guess kubelet should log an error if it observes the cloud provider setting an invalid IP from the node-address-setting loop.",
        "createdAt" : "2020-10-03T11:57:37Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +105,109 @@\t\tif addr.Type == v1.NodeInternalIP {\n\t\t\tip := net.ParseIP(addr.Address)\n\t\t\tif ip != nil {\n\t\t\t\tallIPs = append(allIPs, ip)\n\t\t\t}"
  },
  {
    "id" : "ea257d17-0084-4fe7-963a-e35ee8e9d931",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501327979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d692373b-b53f-4324-a4ea-d0a0e2fa599e",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "similar to previous comment re logging failures",
        "createdAt" : "2020-10-02T17:42:46Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +113,117 @@\t\tif addr.Type == v1.NodeExternalIP {\n\t\t\tip := net.ParseIP(addr.Address)\n\t\t\tif ip != nil {\n\t\t\t\tallIPs = append(allIPs, ip)\n\t\t\t}"
  },
  {
    "id" : "5257d5e0-e8dd-42ef-ae23-11baa3963460",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501541402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "830ddb4e-6dc1-4132-a93f-8d5c3463901f",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Order is assumed here. Which is fine if we know that the node.Status.Addresses is always ordered correctly. is this confirmed?",
        "createdAt" : "2020-10-02T17:45:36Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "3601d211-c65d-418b-bd62-b42d5d47d181",
        "parentId" : "830ddb4e-6dc1-4132-a93f-8d5c3463901f",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "This function is what defines what \"ordered correctly\" is for node.Status.Addresses. Whatever IP the cloud provider returns first is the one that kubelet will use.\r\n\r\nNote that the first IP returned here is the same as was traditionally returned by the old single-value `GetNodeHostIP()`; \"the first InternalIP, unless there are no InternalIPs, in which case the first ExternalIP\". I just changed the way it figures that out because with dual-stack we need to do that logic twice so it's easier to just sort the IPs correctly beforehand.",
        "createdAt" : "2020-10-03T12:02:16Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +122,126 @@\t}\n\n\tnodeIPs := []net.IP{allIPs[0]}\n\tif utilfeature.DefaultFeatureGate.Enabled(features.IPv6DualStack) {\n\t\tfor _, ip := range allIPs {"
  },
  {
    "id" : "73ba1bfe-0c45-4671-88d3-e10252f74e1e",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501541472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97da52a6-7455-47e8-a76f-a82851c34959",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "why two loops?",
        "createdAt" : "2020-10-02T17:45:59Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "ebc022e9-dcff-485b-ae09-5feab6c22ce4",
        "parentId" : "97da52a6-7455-47e8-a76f-a82851c34959",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "The first loop gets the InternalIPs, the second gets the ExternalIPs.",
        "createdAt" : "2020-10-03T12:03:44Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t}\n\t}\n\tfor _, addr := range node.Status.Addresses {\n\t\tif addr.Type == v1.NodeExternalIP {\n\t\t\tip := net.ParseIP(addr.Address)"
  },
  {
    "id" : "9b5d6ec5-162d-4770-b7e6-df226a99f5af",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-501331907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f79ed88e-8784-48fe-a876-0cc1b5a0c5b6",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "I understand that `GetNodeHostIPs(..)` will return error in case of len()==0. But a comment here will make it clearer.",
        "createdAt" : "2020-10-02T17:49:04Z",
        "updatedAt" : "2020-10-07T21:28:03Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +142,146 @@\t}\n\t// GetNodeHostIPs always returns at least one IP if it didn't return an error\n\treturn ips[0], nil\n}\n"
  },
  {
    "id" : "f891f4cd-baae-4a54-be46-d65b97f0112f",
    "prId" : 95239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95239#pullrequestreview-504777075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d84635f1-ebdc-40c0-98a1-0c918106a629",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ok, I've found it, this has a dependency in kube-proxy but does not break it\r\nhttps://github.com/kubernetes/kubernetes/blob/aa1f91286838d373a6d9217ad9f4fe0647a1c859/cmd/kube-proxy/app/server_others.go#L136-L142\r\n\r\npossible something to follow up or do you want to fix it here?\r\nanyway, unhold as you wish, I just was worried about this dependency in kube-proxy ",
        "createdAt" : "2020-10-08T13:23:34Z",
        "updatedAt" : "2020-10-08T13:23:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "971477d9b5cc4bf5ae62abe3bbc46e534f481e1b",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +147,151 @@// GetNodeIP returns an IP (as with GetNodeHostIP) for the node with the provided name.\n// If required, it will wait for the node to be created.\nfunc GetNodeIP(client clientset.Interface, name string) net.IP {\n\tvar nodeIP net.IP\n\tbackoff := wait.Backoff{"
  },
  {
    "id" : "957cc416-dc89-4ba8-9dca-4a1a55ca7a3b",
    "prId" : 81431,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81431#pullrequestreview-281008185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eeb5c5b-8450-466f-9ff0-70636d9565f8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "In general, we want to respect the old value if it exists.  The rationale being that if someone was using the old and ignorant of the new value, we don't accidentally break them.\r\n\r\nIn this case, I think we always expect these to be the same value, so the risk is probably low.  But still, I think we should flip this.",
        "createdAt" : "2019-08-27T16:39:39Z",
        "updatedAt" : "2019-11-08T02:22:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1cd47c1a-aa13-41f3-8092-2f14e76c479f",
        "parentId" : "1eeb5c5b-8450-466f-9ff0-70636d9565f8",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "done",
        "createdAt" : "2019-08-28T18:05:51Z",
        "updatedAt" : "2019-11-08T02:22:16Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "349749644fb40f737c44e27b5b749bd18a3efaae",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +140,144 @@// GetZoneKey is a helper function that builds a string identifier that is unique per failure-zone;\n// it returns empty-string for no zone.\n// Since there are currently two separate zone keys:\n//   * \"failure-domain.beta.kubernetes.io/zone\"\n//   * \"topology.kubernetes.io/zone\""
  },
  {
    "id" : "3b47c621-8473-4099-b2b1-24a56545ad3d",
    "prId" : 81431,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81431#pullrequestreview-313746190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a62cfd41-7dce-4b82-be97-4f5ab0239fe8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Add a TODO to prefer the stable key in 1.18ish timeframe (once we're certain the active controller is at least 1.17+)",
        "createdAt" : "2019-11-08T01:31:43Z",
        "updatedAt" : "2019-11-08T02:22:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2775a042-8244-47b4-a566-fd85f3e10408",
        "parentId" : "a62cfd41-7dce-4b82-be97-4f5ab0239fe8",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "done",
        "createdAt" : "2019-11-08T01:59:15Z",
        "updatedAt" : "2019-11-08T02:22:16Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "349749644fb40f737c44e27b5b749bd18a3efaae",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +152,156 @@\n\t// TODO: prefer stable labels for zone in v1.18\n\tzone, ok := labels[v1.LabelZoneFailureDomain]\n\tif !ok {\n\t\tzone, _ = labels[v1.LabelZoneFailureDomainStable]"
  },
  {
    "id" : "7ae2ca64-de80-41f8-9d4d-de337f9e0675",
    "prId" : 71855,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71855#pullrequestreview-182845712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d2cc7a2-cdfa-4387-bc55-5980c7fd4c62",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Oooh... I like this!",
        "createdAt" : "2018-12-07T19:43:02Z",
        "updatedAt" : "2018-12-12T19:02:10Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d92ee41e44b41289a6662b0731af4a91a1bb11db",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +73,77 @@// representing an error condition, with the nil value representing no error.\nfunc (e *NoMatchError) Error() string {\n\treturn fmt.Sprintf(\"no preferred addresses found; known addresses: %v\", e.addresses)\n}\n"
  },
  {
    "id" : "688a287e-e2ca-414b-b741-8988e99eee78",
    "prId" : 64815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64815#pullrequestreview-140710533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "072ab7e1-4331-4ac9-a415-1c3d08ed171e",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Shouldn't we be updating a set of test cases too? ",
        "createdAt" : "2018-07-25T18:59:18Z",
        "updatedAt" : "2018-08-01T06:58:17Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "51fcb0cc-f5a9-4fd9-8017-93af11c77d1c",
        "parentId" : "072ab7e1-4331-4ac9-a415-1c3d08ed171e",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@timothysc Tests added. PTAL. Thanks.",
        "createdAt" : "2018-07-26T12:48:28Z",
        "updatedAt" : "2018-08-01T06:58:17Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3dfe0c652acc5e76b51c1ad97d6ac87d906d392",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +55,59 @@\t// Trim whitespaces first to avoid getting an empty hostname\n\t// For linux, the hostname is read from file /proc/sys/kernel/hostname directly\n\thostName = strings.TrimSpace(hostName)\n\tif len(hostName) == 0 {\n\t\treturn \"\", fmt.Errorf(\"empty hostname is invalid\")"
  }
]