[
  {
    "id" : "be990efd-18f0-4d3a-af40-1ca76748657e",
    "prId" : 4865,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c817cc7-f859-4c1a-bd7e-68521d68e9e3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "General note about table-driven tests below.  Ideally the details of each test case are lumped together, so the []net.Addr that goes with each of these is defined right next to this table, and that is defined right next to the code.\n",
        "createdAt" : "2015-03-05T19:32:55Z",
        "updatedAt" : "2015-03-11T08:33:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8c91e7344923e48a6905d642c843cdd86ba5793",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +337,341 @@}\n\nconst gatewayfirst = `Iface\tDestination\tGateway \tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU\tWindow\tIRTT                                                       \neth3\t00000000\t0100FE0A\t0003\t0\t0\t1024\t00000000\t0\t0\t0                                                                   \neth3\t0000FE0A\t00000000\t0001\t0\t0\t0\t0080FFFF\t0\t0\t0                                                                      "
  },
  {
    "id" : "3deae896-5abf-4ae9-827e-cc6a811794a5",
    "prId" : 4865,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02803039-c8db-4c6b-a42d-4fc8d4adcd74",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I wonder if we should be aborting on IPv6 or simply logging and ignoring it - thoughts?\n\n@justinsb for some v6 context?\n",
        "createdAt" : "2015-03-10T05:25:28Z",
        "updatedAt" : "2015-03-11T08:33:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "88b26d7a-3c24-459d-a7db-f19428db2da5",
        "parentId" : "02803039-c8db-4c6b-a42d-4fc8d4adcd74",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Not sure exactly which bit of code you're referring to.\n\nBut... I think we should just ignore IPv6 addresses for now, as the code does now (skip over them, maybe log V(4)).  I think we're stuck with dual-stack for a while, and the IPv4 configuration is much more likely to be correct.  Also, I don't think it is unreasonable to say that if your IPv4 configuration is broken, things may be broken.\n\nThe only problem is for people that are IPv6 only.  I propose we defer that everywhere until we officially add IPv6 support.\n",
        "createdAt" : "2015-03-10T13:10:05Z",
        "updatedAt" : "2015-03-11T08:33:11Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8c91e7344923e48a6905d642c843cdd86ba5793",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +390,394 @@\t\t{\"gatewaylast\", gatewaylast, 4},\n\t\t{\"nothing\", nothing, 0},\n\t\t{\"gatewayfirstIpv6_1\", gatewayfirstIpv6_1, 0},\n\t\t{\"gatewayfirstIpv6_2\", gatewayfirstIpv6_2, 0},\n\t\t{\"route_Invalidhex\", route_Invalidhex, 0},"
  },
  {
    "id" : "78b9cd30-11d1-4fe4-8c3a-17b62a745fea",
    "prId" : 3178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "874fcbe0-c924-437d-b817-84125d0131ac",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add nil objects and non-struct objects to these cases\n",
        "createdAt" : "2014-12-30T22:40:35Z",
        "updatedAt" : "2015-01-04T07:57:54Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "288fff07-66e7-47bc-b4d7-41e2c9d4dab7",
        "parentId" : "874fcbe0-c924-437d-b817-84125d0131ac",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It would be simpler to simply say this function is only valid for structs and pointers to structs.  Acceptable?\n",
        "createdAt" : "2014-12-30T22:58:29Z",
        "updatedAt" : "2015-01-04T07:57:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0686d2e1-edc0-4489-a38b-b01b3540aa71",
        "parentId" : "874fcbe0-c924-437d-b817-84125d0131ac",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Documented\n",
        "createdAt" : "2014-12-30T23:09:54Z",
        "updatedAt" : "2015-01-04T07:57:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d239cbb1e9ba84ac87d14ae692adc26e5fdd75",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +224,228 @@\t\tobj      interface{}\n\t\texpected bool\n\t}{\n\t\t{struct{}{}, true},\n\t\t{struct{ Foo int }{12345}, true},"
  },
  {
    "id" : "f164e679-6243-4ab7-897b-604e88402bc9",
    "prId" : 395,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6426504d-7f6d-4a40-b392-397bc16f80eb",
        "parentId" : null,
        "authorId" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "body" : "alternatively you could build those tests as 'table' test, see:\nhttps://code.google.com/p/go-wiki/wiki/TableDrivenTests\n",
        "createdAt" : "2014-07-10T18:55:12Z",
        "updatedAt" : "2014-07-10T18:55:12Z",
        "lastEditedBy" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "tags" : [
        ]
      },
      {
        "id" : "d6585029-07f8-4a2b-aa58-76fc91b586b3",
        "parentId" : "6426504d-7f6d-4a40-b392-397bc16f80eb",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "+1\n\nAny time you find yourself writing the same block in a test more than once, it's a good sign a table driven test should be used instead. \n",
        "createdAt" : "2014-07-11T06:02:31Z",
        "updatedAt" : "2014-07-11T06:02:31Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "85effbbc3f012f30d98b900d3fe48ec4dcf7c7cd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +74,78 @@\nfunc TestIntOrStringUnmarshalYAML(t *testing.T) {\n\t{\n\t\tyaml_code_int := \"val: 123\\n\"\n"
  }
]