[
  {
    "id" : "c4785391-0ba0-40f6-a2b2-264e59235b37",
    "prId" : 23643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eac45221-6f9e-4d0d-98bb-3ae4bb575293",
        "parentId" : null,
        "authorId" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "body" : "@smarterclayton would also be nice to have package and method level documentation comments that were missing when this package was introduced in #21624, WDYT?\n",
        "createdAt" : "2016-03-31T14:57:17Z",
        "updatedAt" : "2016-03-31T15:39:13Z",
        "lastEditedBy" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "tags" : [
        ]
      },
      {
        "id" : "7534fe3e-b94b-45c7-b44a-c22d08be6721",
        "parentId" : "eac45221-6f9e-4d0d-98bb-3ae4bb575293",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Ok to do in follow-up\n",
        "createdAt" : "2016-03-31T15:01:12Z",
        "updatedAt" : "2016-03-31T15:39:13Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "2b114eee-ad8d-44e2-9a08-5ecc11f7e9e5",
        "parentId" : "eac45221-6f9e-4d0d-98bb-3ae4bb575293",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I added the godoc.\n",
        "createdAt" : "2016-03-31T15:22:10Z",
        "updatedAt" : "2016-03-31T15:39:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "807ee54f-fa1e-485c-bf5f-825e4ba2e097",
        "parentId" : "eac45221-6f9e-4d0d-98bb-3ae4bb575293",
        "authorId" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "body" : "Thanks!\n",
        "createdAt" : "2016-03-31T15:28:20Z",
        "updatedAt" : "2016-03-31T15:39:13Z",
        "lastEditedBy" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "tags" : [
        ]
      },
      {
        "id" : "ad2436e2-3c15-497b-a434-1c20ab9d8a66",
        "parentId" : "eac45221-6f9e-4d0d-98bb-3ae4bb575293",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated\n\nOn Thu, Mar 31, 2016 at 11:28 AM, Rodolfo Carvalho <notifications@github.com\n\n> wrote:\n> \n> In pkg/util/interrupt/interrupt.go\n> https://github.com/kubernetes/kubernetes/pull/23643#discussion_r58074176\n> :\n> \n> > @@ -65,7 +65,10 @@ func (h *Handler) Signal(s os.Signal) {\n> >  func (h *Handler) Run(fn func() error) error {\n> \n> Thanks!\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23643/files/986cd281acd105294f723583cde2821b49cd8603#r58074176\n",
        "createdAt" : "2016-03-31T15:39:18Z",
        "updatedAt" : "2016-03-31T15:39:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "de6e02d8bb179fe6be34d6b44d84ac8ee4b8938e",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +81,85 @@// process is interrupted by an OS termination signal). Notifications are only invoked once\n// per Handler instance, so calling Run more than once will not behave as the user expects.\nfunc (h *Handler) Run(fn func() error) error {\n\tch := make(chan os.Signal, 1)\n\tsignal.Notify(ch, childSignals...)"
  },
  {
    "id" : "37b4c68a-30a6-40e2-823d-bce997534e4b",
    "prId" : 23643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee59d6ca-312e-4c08-a8aa-98bf98924d7d",
        "parentId" : null,
        "authorId" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "body" : "Perhaps `os.Exit(2)` would be better, since that's the default exit code that the Go runtime uses for the signals we're catching?\nExiting with 0 tells that the process exited under \"normal\", okay, circumstances, which is not the case here?\n",
        "createdAt" : "2016-04-06T10:01:56Z",
        "updatedAt" : "2016-04-06T10:01:56Z",
        "lastEditedBy" : "e6e87a4e-1c04-47fc-b080-99a5c8b8b2ea",
        "tags" : [
        ]
      },
      {
        "id" : "7ca3893e-39b0-4685-82fe-53b1d8580ee4",
        "parentId" : "ee59d6ca-312e-4c08-a8aa-98bf98924d7d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm fine with os.Exit(2)\n\nOn Wed, Apr 6, 2016 at 6:02 AM, Rodolfo Carvalho notifications@github.com\nwrote:\n\n> In pkg/util/interrupt/interrupt.go\n> https://github.com/kubernetes/kubernetes/pull/23643#discussion_r58680474\n> :\n> \n> > @@ -35,6 +42,10 @@ func Chain(handler *Handler, notify ...func()) *Handler {\n> >     return New(handler.Signal, append(notify, handler.Close)...)\n> >  }\n> > \n> > +// New creates a new handler that guarantees all notify functions are run after the critical\n> > +// section exits (or is interrupted by the OS), then invokes the final handler. If no final\n> > +// handler is specified, the default final is `os.Exit(0)`. A handler can only be used for\n> \n> Perhaps os.Exit(2) would be better, since that's the default exit code\n> that the Go runtime uses for the signals we're catching?\n> Exiting with 0 tells that the process exited under \"normal\", okay,\n> circumstances, which is not the case here?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23643/files/de6e02d8bb179fe6be34d6b44d84ac8ee4b8938e#r58680474\n",
        "createdAt" : "2016-04-06T16:05:00Z",
        "updatedAt" : "2016-04-06T16:05:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "44bad71f-1e10-4960-8111-d98ae0cb6ad8",
        "parentId" : "ee59d6ca-312e-4c08-a8aa-98bf98924d7d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Follow up though.\n",
        "createdAt" : "2016-04-06T16:37:15Z",
        "updatedAt" : "2016-04-06T16:37:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "de6e02d8bb179fe6be34d6b44d84ac8ee4b8938e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +45,49 @@// New creates a new handler that guarantees all notify functions are run after the critical\n// section exits (or is interrupted by the OS), then invokes the final handler. If no final\n// handler is specified, the default final is `os.Exit(0)`. A handler can only be used for\n// one critical section.\nfunc New(final func(os.Signal), notify ...func()) *Handler {"
  }
]