[
  {
    "id" : "a5e4e92a-0429-4948-b379-cecedb9f0866",
    "prId" : 28800,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "819912bb-636d-4f58-841d-c2fa2b58ed7f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Well, we want the handlers to be called.  The handlers allow us to report to external systems (on my long delayed list is to upstream the sentry code that reports all panics to a remote system).\n",
        "createdAt" : "2016-07-12T05:05:44Z",
        "updatedAt" : "2016-07-13T18:13:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "72cc8ed5-1601-4372-9fe7-a7a4749b462b",
        "parentId" : "819912bb-636d-4f58-841d-c2fa2b58ed7f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The handlers are still called.\n",
        "createdAt" : "2016-07-12T22:17:04Z",
        "updatedAt" : "2016-07-13T18:13:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "78c02cd05238c453aab5f244d7034e776281fd77",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +43,47 @@// catching panics was important. But it's actually much simpler for montoring\n// software if we just exit when an unexpected panic happens.\nfunc HandleCrash(additionalHandlers ...func(interface{})) {\n\tif r := recover(); r != nil {\n\t\tfor _, fn := range PanicHandlers {"
  },
  {
    "id" : "6e1bb658-4755-4567-9b1d-6cc806b58aaf",
    "prId" : 19778,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Do we really need this?  Is it really more valuable than simply logging at the callsite?  It's very custom and very convoluted and it just ends up with a log line in the end.\n\n@lavalamp @brendandburns @smarterclayton \n",
        "createdAt" : "2016-01-20T07:51:30Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1c1a89b3-d4a5-483b-93f1-d32772a31576",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Do we really need this? Is it really more valuable than simply logging at the callsite? It's very custom and very convoluted and it just ends up with a log line in the end.\n> \n> @lavalamp @brendandburns @smarterclayton\n\nThis provides an injection point for enabling things like sentry monitoring.\n",
        "createdAt" : "2016-01-20T13:18:11Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "75ee8262-cce5-4dd4-a8bd-909fc7e27a32",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This line has led to fixes of about 30 misplaced panic, poorly handled\nerrors, or unexpected behavior bugs since 1.0 Kube, some serious.\nForcing developers to eat errors in a consistent way is a best\npractice that we should (and mostly do) enforce across the codebase.\n",
        "createdAt" : "2016-01-20T15:24:16Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "724965f7-eafc-4acc-b2f5-1680ef5fb906",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We actively use this hook on several production and preproduction clusters to provide failure analysis of controllers and \"non obvious fault\" conditions.\n",
        "createdAt" : "2016-01-20T15:25:46Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c23801f1-380b-4eca-8711-16a571795b5b",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I have a long running todo to move the sentry hook upstream and also tee events to sentry as plugins.\n",
        "createdAt" : "2016-01-20T15:26:27Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b814c6d8-d5e2-474b-88b5-8178c1735fc5",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@thockin either way, it's a big code smell (something is probably wrong if one's code \"can't return an error\"). But this is strictly better than a log message everywhere, because it's easy to find all the places that use it.\n",
        "createdAt" : "2016-01-20T22:48:02Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "82a91d51-b87d-4a4b-b619-4c67b93c9a95",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Controllers are are a classic \"can't return an error\" place, I think we\nhave very few other scenarios.  They can emit an event - in which case this\nmethod should be stubbed to emit an event.  But the controller error could\nbe because the apiserver is down - in which case we probably want to hold\nthe event locally.  Technically, the sentry implementation backing this is\nan event recorded, it just happens to be one that is sent somewhere other\nthan the master, which in the past we discussed as a Tee at the event\nrecorder (it also handles and reports panics).  I'm not sure we want to\nfire events when we panic, but at the same time, there's no reason we can't.\n\nOn Wed, Jan 20, 2016 at 5:48 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/util/runtime/runtime.go\n> https://github.com/kubernetes/kubernetes/pull/19778#discussion_r50333611\n> :\n> \n> > -           break\n> > -       }\n> > -       callers = callers + fmt.Sprintf(\"%v:%v\\n\", file, line)\n> > -   }\n> > -   glog.Errorf(\"Recovered from panic: %#v (%v)\\n%v\", r, r, callers)\n> >   +}\n> >   +\n> >   +// ErrorHandlers is a list of functions which will be invoked when an unreturnable\n> >   +// error occurs.\n> >   +var ErrorHandlers = []func(error){logError}\n> >   +\n> >   +// HandlerError is a method to invoke when a non-user facing piece of code cannot\n> >   +// return an error and needs to indicate it has been ignored. Invoking this method\n> >   +// is preferable to logging the error - the default behavior is to log but the\n> >   +// errors may be sent to a remote server for analysis.\n> >   +func HandleError(err error) {\n> \n> @thockin https://github.com/thockin either way, it's a big code smell\n> (something is probably wrong if one's code \"can't return an error\"). But\n> this is strictly better than a log message everywhere, because it's easy to\n> find all the places that use it.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/19778/files#r50333611.\n",
        "createdAt" : "2016-01-21T04:11:06Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cd0e15e7-9689-4e78-b28b-517e7d541342",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "On Wed, Jan 20, 2016 at 5:18 AM, David Eads notifications@github.com wrote:\n\n> > +// HandlerError is a method to invoke when a non-user facing piece of code cannot\n> > +// return an error and needs to indicate it has been ignored. Invoking this method\n> > +// is preferable to logging the error - the default behavior is to log but the\n> > +// errors may be sent to a remote server for analysis.\n> > +func HandleError(err error) {\n> \n> Do we really need this? Is it really more valuable than simply logging at the callsite? It's very custom and very convoluted and it just ends up with a log line in the end.\n> \n> @lavalamp @brendandburns @smarterclayton\n> \n> This provides an injection point for enabling things like sentry monitoring.\n\nI get that, but is it REALLY useful? It is certainly not consistently\napplied.  Heck, I didn't even know about it...\n",
        "createdAt" : "2016-01-22T07:42:17Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "a3aa3587-35a9-4bab-bd2c-f0464423164c",
        "parentId" : "8b05f9ae-5e12-46f6-b4b2-1c61232e09c7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Sure, but we should maybe spread the word on when and how to use this.  I\ndidn't know it existed, and I still don't think I know how to apply it.\n\nOn Wed, Jan 20, 2016 at 2:48 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/util/runtime/runtime.go\n> https://github.com/kubernetes/kubernetes/pull/19778#discussion_r50333611\n> :\n> \n> > -           break\n> > -       }\n> > -       callers = callers + fmt.Sprintf(\"%v:%v\\n\", file, line)\n> > -   }\n> > -   glog.Errorf(\"Recovered from panic: %#v (%v)\\n%v\", r, r, callers)\n> >   +}\n> >   +\n> >   +// ErrorHandlers is a list of functions which will be invoked when an unreturnable\n> >   +// error occurs.\n> >   +var ErrorHandlers = []func(error){logError}\n> >   +\n> >   +// HandlerError is a method to invoke when a non-user facing piece of code cannot\n> >   +// return an error and needs to indicate it has been ignored. Invoking this method\n> >   +// is preferable to logging the error - the default behavior is to log but the\n> >   +// errors may be sent to a remote server for analysis.\n> >   +func HandleError(err error) {\n> \n> @thockin https://github.com/thockin either way, it's a big code smell\n> (something is probably wrong if one's code \"can't return an error\"). But\n> this is strictly better than a log message everywhere, because it's easy to\n> find all the places that use it.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/19778/files#r50333611.\n",
        "createdAt" : "2016-01-22T07:43:43Z",
        "updatedAt" : "2016-02-01T13:07:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "1032067ff98ec94515116c5fef9f108541486771",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@// is preferable to logging the error - the default behavior is to log but the\n// errors may be sent to a remote server for analysis.\nfunc HandleError(err error) {\n\tfor _, fn := range ErrorHandlers {\n\t\tfn(err)"
  }
]