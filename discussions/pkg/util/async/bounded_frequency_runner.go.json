[
  {
    "id" : "78bc8610-3347-4871-8858-8c88341a35d9",
    "prId" : 83387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83387#pullrequestreview-304859721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48c1009e-5500-4958-86fe-fbcafea65a20",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "(Note that the comment applies to the old code as well; the `if` statement here used to always be true, since `nextPossible < nextScheduled` → `bfr.minInterval - elapsed < bfr.maxInterval - elapsed` → `bfr.minInterval < bfr.maxInterval`, which is enforced by `NewBoundedFrequencyRunner`. So we were always resetting the timer before too, it just wasn't immediately obvious.)",
        "createdAt" : "2019-10-21T21:23:31Z",
        "updatedAt" : "2019-10-29T11:36:15Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fd42dee9526a580d2873b4780ac743fca1cebd5",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +306,310 @@\t// It's hard to avoid race conditions in the unit tests unless we always reset\n\t// the timer here, even when it's unchanged\n\tif nextPossible < nextScheduled {\n\t\tnextScheduled = nextPossible\n\t}"
  },
  {
    "id" : "70d93f49-9c61-499b-96e7-cbb6331ed489",
    "prId" : 83387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83387#pullrequestreview-306972374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b66e6a82-1797-40e1-98d5-f45996fe030e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "comment?",
        "createdAt" : "2019-10-25T04:00:41Z",
        "updatedAt" : "2019-10-29T11:36:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fd42dee9526a580d2873b4780ac743fca1cebd5",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +274,278 @@\n\t// Timer wants an interval not an absolute time, so convert retryTime back now\n\tretryInterval := bfr.retryTime.Sub(bfr.timer.Now())\n\tbfr.retryTime = time.Time{}\n\tif retryInterval < bfr.timer.Remaining() {"
  }
]