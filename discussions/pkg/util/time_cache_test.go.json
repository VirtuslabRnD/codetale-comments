[
  {
    "id" : "5a16344d-43dd-448c-a962-1efc67314ec8",
    "prId" : 3444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "097ae7ac-1fdd-468a-94d3-e06ffcace064",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This is to pull stuff into the cache?\n\nA few comments would be helpful.\n",
        "createdAt" : "2015-01-14T01:45:50Z",
        "updatedAt" : "2015-01-14T02:09:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "30be0eeac7853f979656238bdbfbadad852036b0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +159,163 @@\t\t\tr := rand.New(rand.NewSource(seed))\n\t\t\tfor i := 0; i < 500; i++ {\n\t\t\t\tc.Get(keys[r.Intn(len(keys))])\n\t\t\t}\n\t\t\twg.Done()"
  },
  {
    "id" : "6e7bd685-2ca3-49c4-a656-9a9c7e5e7e6e",
    "prId" : 3444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66cae1be-7923-4799-89ed-59c70e4f08ef",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What effect is this supposed to have when using FakeClock? \n",
        "createdAt" : "2015-01-14T01:49:58Z",
        "updatedAt" : "2015-01-14T02:09:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "30be0eeac7853f979656238bdbfbadad852036b0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +143,147 @@\t\t// make sure that there is time for multiple requests to come in\n\t\t// for the same key before this returns.\n\t\ttime.Sleep(time.Millisecond)\n\t\treturn key\n\t}"
  },
  {
    "id" : "507834ec-986e-4ad3-b175-02ba76baefa9",
    "prId" : 3444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f16714b5-7ad6-4908-b942-ac4c6a42ac5d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Does this really work reliably at this timescale? What about NTP setting back the clock, or TSC changes due to rescheduling to a different socket? My experience is that one can't count on clock monotonicity except at the granularity of O(seconds).\n\nI'm willing to merge this and wait and see, but I wouldn't be surprised if it proved to be flaky.\n",
        "createdAt" : "2015-01-14T03:04:44Z",
        "updatedAt" : "2015-01-14T03:04:44Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "30be0eeac7853f979656238bdbfbadad852036b0",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +175,179 @@\t\tfor i := 1; i < len(ct.accessTimes); i++ {\n\t\t\tnext := ct.accessTimes[i]\n\t\t\tif next.Sub(cur) < cacheDur {\n\t\t\t\tt.Errorf(\"%v was called at %v and %v\", k, cur, next)\n\t\t\t}"
  }
]