[
  {
    "id" : "4e74a5fa-f887-4402-bd0e-8fe791f55ec0",
    "prId" : 36140,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36140#pullrequestreview-8551367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ce354c1-5b14-40c3-bd7c-f7d361ed258d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if you want to extract the ability to load a single ConfigJSON file, then having `ReadDockerConfigJSONFile` continue looping over the search paths and calling `ReadSpecificDockerConfigJSONFile(filepath)` seems ok. That should be the only change needed to allow downstream to use the ReadSpecificDockerConfigJSONFile function to read a particular file from a mounted secret location.\n",
        "createdAt" : "2016-11-14T15:31:10Z",
        "updatedAt" : "2016-11-17T01:32:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "97e28967-7aff-4213-bcc3-bc0706c46d09",
        "parentId" : "0ce354c1-5b14-40c3-bd7c-f7d361ed258d",
        "authorId" : "c09bfaa0-c459-4cac-bc30-9a4dd3d651d3",
        "body" : "thatâ€˜s helpful, this modification seems more reasonable than what I do. Thanks.\n",
        "createdAt" : "2016-11-15T07:54:51Z",
        "updatedAt" : "2016-11-17T01:32:04Z",
        "lastEditedBy" : "c09bfaa0-c459-4cac-bc30-9a4dd3d651d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "032e450ec41f2fb06420e4fd1b0aac44f58c2ff5",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +122,126 @@\tif len(searchPaths) == 0 {\n\t\tsearchPaths = DefaultDockerConfigJSONPaths()\n\t}\n\tfor _, configPath := range searchPaths {\n\t\tabsDockerConfigFileLocation, err := filepath.Abs(filepath.Join(configPath, configJsonFileName))"
  },
  {
    "id" : "d291f535-500c-4218-9db8-07f7922417fd",
    "prId" : 31881,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31881#pullrequestreview-3711230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5b8ae42-7287-4f7b-83f7-34bfedcaee82",
        "parentId" : null,
        "authorId" : "f841e73a-d2ba-4be1-9028-bec3b88e342d",
        "body" : "godoc\n",
        "createdAt" : "2016-10-11T16:22:15Z",
        "updatedAt" : "2016-10-14T15:26:23Z",
        "lastEditedBy" : "f841e73a-d2ba-4be1-9028-bec3b88e342d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a9cfdf86aa929d033ca96da5252f20ec546175b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +81,85 @@\n//DefaultDockerConfigJSONPaths returns default search paths of .docker/config.json\nfunc DefaultDockerConfigJSONPaths() []string {\n\treturn []string{GetPreferredDockercfgPath(), workingDirPath, homeJsonDirPath, rootJsonDirPath}\n}"
  },
  {
    "id" : "1b8eb686-186b-4fdb-9a7e-8c3cb7349d8f",
    "prId" : 31881,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31881#pullrequestreview-3711230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5aecbe5-594e-405f-b401-d764d5dbfca8",
        "parentId" : null,
        "authorId" : "f841e73a-d2ba-4be1-9028-bec3b88e342d",
        "body" : "godoc\n",
        "createdAt" : "2016-10-11T16:22:19Z",
        "updatedAt" : "2016-10-14T15:26:23Z",
        "lastEditedBy" : "f841e73a-d2ba-4be1-9028-bec3b88e342d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a9cfdf86aa929d033ca96da5252f20ec546175b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@\n//DefaultDockercfgPaths returns default search paths of .dockercfg\nfunc DefaultDockercfgPaths() []string {\n\treturn []string{GetPreferredDockercfgPath(), workingDirPath, homeDirPath, rootDirPath}\n}"
  },
  {
    "id" : "b0796955-3224-4d14-9bb4-0ad2a9691f30",
    "prId" : 12717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05946d19-5413-47be-8201-126f49192bb9",
        "parentId" : null,
        "authorId" : "e0eead13-59bd-4395-a9c9-e35868b87699",
        "body" : "location has been moved https://github.com/docker/docker/blob/1e2765dabbc37979639b72d460e39a00422e77fe/cliconfig/config.go#L19\n",
        "createdAt" : "2015-08-14T09:27:54Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "e0eead13-59bd-4395-a9c9-e35868b87699",
        "tags" : [
        ]
      },
      {
        "id" : "93285842-b2ff-4389-92fd-72ff6595e25a",
        "parentId" : "05946d19-5413-47be-8201-126f49192bb9",
        "authorId" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "body" : "Fixed locations:\n\n``` go\nauthHomeDirPath    = filepath.Join(homeDirPath, \".docker\")\nauthRootDirPath    = filepath.Join(rootDirPath, \".docker\")\n```\n",
        "createdAt" : "2015-08-14T10:17:43Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "tags" : [
        ]
      }
    ],
    "commit" : "906b2790803760e209872bdc9cfdce7d4b658730",
    "line" : null,
    "diffHunk" : "@@ -1,1 +58,62 @@\trootJsonDirPath   = filepath.Join(rootDirPath, \".docker\")\n\n\tconfigFileName     = \".dockercfg\"\n\tconfigJsonFileName = \"config.json\"\n)"
  },
  {
    "id" : "b543ad0b-49ec-4e96-a44f-9f5b1f147f44",
    "prId" : 12717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "How is docker handling the transition?  Are the files complementary?  If so, we should probably have two different provider instances to build the keyring.\n",
        "createdAt" : "2015-08-14T16:32:16Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "caebdcb3-167a-4550-b3e3-9dae992e8609",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "body" : "[https://github.com/docker/docker/blob/master/cliconfig/config.go#L159](https://github.com/docker/docker/blob/master/cliconfig/config.go#L159)\nIn `func Load(configDir string) (*ConfigFile, error)`, first, they try to load new configuration file at `~/.docker/config.json` and parse by `configFile.LoadFromReader(file)`, if the config file is not found, then they fallback to load the old one at `~/.dockercfg` by `configFile.LegacyLoadFromReader(file)`.\n",
        "createdAt" : "2015-08-16T00:48:21Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "tags" : [
        ]
      },
      {
        "id" : "c96a63f3-5ca1-4fe2-aa1c-23f08f5b9f6a",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> https://github.com/docker/docker/blob/master/cliconfig/config.go#L159\n> In func Load(configDir string) (*ConfigFile, error), first, they try to load new configuration file at ~/.docker/config.json and parse by configFile.LoadFromReader(file), if the config file is not found, then they fallback to load the old one at ~/.dockercfg by configFile.LegacyLoadFromReader(file).\n\nCan you add a comment explaining the behavior and why we're doing it?  It struck me as a little odd when I read it.\n",
        "createdAt" : "2015-08-17T11:49:43Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1c545030-8b67-495e-b7c2-207f708be232",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "body" : "This function `func ReadDockerConfigFile() (cfg DockerConfig, err error)` is used to parse config which is stored in:\n- `GetPreferredDockercfgPath() + \"/config.json\"`\n- `workingDirPath + \"/config.json\"`\n- `$HOME/.docker/config.json`\n- `/.docker/config.json`\n- `GetPreferredDockercfgPath() + \"/.dockercfg\"`\n- `workingDirPath + \"/.dockercfg\"`\n- `$HOME/.dockercfg`\n- `/.dockercfg`\n\nThe first four one are new type of secret, and the last four one are the old type.\n",
        "createdAt" : "2015-08-18T00:31:29Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "tags" : [
        ]
      },
      {
        "id" : "17645ecf-9cc3-4c3d-8ef5-3d9058c5ed75",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "body" : "I'd agree that having multiple providers, one that passes \".docker/config.json\" and one that passes \".dockercfg\" would be preferable because it blends the keyrings.  This is what I did here: https://github.com/kubernetes/kubernetes/pull/13894\n\nHowever, I didn't realize this existed when I wrote that.\n",
        "createdAt" : "2015-09-14T23:08:24Z",
        "updatedAt" : "2015-09-14T23:08:24Z",
        "lastEditedBy" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "tags" : [
        ]
      },
      {
        "id" : "70ffd415-83cc-470b-9f40-64c758ed64d1",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "e0eead13-59bd-4395-a9c9-e35868b87699",
        "body" : "I think having two separate providers for .docker/config.json\" and \".dockercfg\" makes sense. It clearly states in the issue that the format is also changed between the two so we cannot use the same secret for both providers.\n",
        "createdAt" : "2015-09-15T15:01:07Z",
        "updatedAt" : "2015-09-15T15:01:07Z",
        "lastEditedBy" : "e0eead13-59bd-4395-a9c9-e35868b87699",
        "tags" : [
        ]
      },
      {
        "id" : "8f9e9875-e535-4c6e-aa59-f893d4296149",
        "parentId" : "79bc033a-b9f6-41fc-8372-ad8d407a5131",
        "authorId" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "body" : "The new format is a strict superset of the old, so these are not mutually exclusive options.\n\nThe new format adds a level of JSON around an identical structure, and at the top-level can now also include `HttpHeaders`, which you aren't using yet.\n\nThis is clearly possible via `credentialprovider`, as I linked you a PR that does precisely this (ignoring `HttpHeaders`).\n\nTo support `HttpHeaders`, the `credentialprovider` interface will have to change anyways.\n",
        "createdAt" : "2015-09-15T15:38:28Z",
        "updatedAt" : "2015-09-15T15:38:28Z",
        "lastEditedBy" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "906b2790803760e209872bdc9cfdce7d4b658730",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +75,79 @@\nfunc ReadDockerConfigFile() (cfg DockerConfig, err error) {\n\t// Try happy path first - latest config file\n\tdockerConfigJsonLocations := []string{GetPreferredDockercfgPath(), workingDirPath, homeJsonDirPath, rootJsonDirPath}\n\tfor _, configPath := range dockerConfigJsonLocations {"
  },
  {
    "id" : "546d56c1-4c30-4be2-99e9-afe9a46e7975",
    "prId" : 12717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21516138-2c96-4f34-ab52-046bf08fe333",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can you add a comment about what this is for?  (Based on the docs here: https://docs.docker.com/reference/commandline/cli/, it looks like a set of blindly attached headers) and an indication that we don't use or respect them (yet).\n\n@erictune Are you willing to take the `HttpHeaders` support as a follow on item?  I think we'd gain a lot of benefit even without plumbing them through.\n",
        "createdAt" : "2015-08-17T11:47:16Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "405e7bb2-36ff-488f-b335-f10f616c166f",
        "parentId" : "21516138-2c96-4f34-ab52-046bf08fe333",
        "authorId" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "body" : "This struct `DockerConfigJson` is used to store content of `~/.docker/config.json`, it is the same structure as [ConfigFile](https://github.com/docker/docker/blob/master/cliconfig/config.go#L57) struct in `docker/cliconfig`:\n\n``` go\n// ConfigFile ~/.docker/config.json file info\ntype ConfigFile struct {\n    AuthConfigs map[string]AuthConfig `json:\"auths\"`\n    HTTPHeaders map[string]string     `json:\"HttpHeaders,omitempty\"`\n    PsFormat    string                `json:\"psFormat,omitempty\"`\n    filename    string                // Note: not serialized - for internal use only\n}\n```\n\nIn the case we don't use `HTTPHeaders` and `PsFormat`, then we do not need that struct. And as in your comment below, a single method `func DockerConfigFrom(bytes []bytes) (DockerConfig, error)` which parse both new and old type of secrets will make code easier to maintain. \n",
        "createdAt" : "2015-08-18T00:20:59Z",
        "updatedAt" : "2015-08-22T09:29:46Z",
        "lastEditedBy" : "256651b4-3d99-4223-8e78-4a0f0d7e536a",
        "tags" : [
        ]
      },
      {
        "id" : "43befb7b-3191-4dc4-88ec-55e1fbf8db96",
        "parentId" : "21516138-2c96-4f34-ab52-046bf08fe333",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "@deads2k Can you explain what you mean by \"...take the HttpHeaders support as a follow on item... without plumbing them through.\". \n",
        "createdAt" : "2015-09-14T22:15:54Z",
        "updatedAt" : "2015-09-14T22:15:54Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "26bf7cf9-712a-41b1-99f6-bab90dc82e06",
        "parentId" : "21516138-2c96-4f34-ab52-046bf08fe333",
        "authorId" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "body" : "I'd drop HttpHeaders until they are plumbed through.\n",
        "createdAt" : "2015-09-14T23:05:59Z",
        "updatedAt" : "2015-09-14T23:05:59Z",
        "lastEditedBy" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "tags" : [
        ]
      },
      {
        "id" : "d0ea95ea-6727-4e5b-bc36-c3705bc8ca73",
        "parentId" : "21516138-2c96-4f34-ab52-046bf08fe333",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k Can you explain what you mean by \"...take the HttpHeaders support as a follow on item... without plumbing them through.\".\n\nThe `HTTPHeaders` field is used by docker to add opaque headers to client requests.  The new format supports this field, but actually implementing in the kubelet will take additional work.  I'd prefer to avoid having that feature block this pull.  This pull is very useful even if the `HTTPHeaders` field doesn't work as expected.\n",
        "createdAt" : "2015-09-15T12:58:03Z",
        "updatedAt" : "2015-09-15T12:58:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "906b2790803760e209872bdc9cfdce7d4b658730",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +35,39 @@type DockerConfigJson struct {\n\tAuths       DockerConfig      `json:\"auths\"`\n\tHttpHeaders map[string]string `json:\"HttpHeaders,omitempty\"`\n}\n"
  },
  {
    "id" : "87544394-997a-49d4-9c7d-76a27e1adad8",
    "prId" : 9058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df909fe-e169-4c19-96bb-9b54172d19cc",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Can you add a test for expected output in https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/credentialprovider/config_test.go ?\n",
        "createdAt" : "2015-06-04T18:00:51Z",
        "updatedAt" : "2015-06-05T15:14:11Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "4990e7dd-8753-47c3-a75d-0ed689c8ba6f",
        "parentId" : "0df909fe-e169-4c19-96bb-9b54172d19cc",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can you add a test for expected output in https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/credentialprovider/config_test.go ?\n\nI will.\n",
        "createdAt" : "2015-06-05T12:19:42Z",
        "updatedAt" : "2015-06-05T15:14:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac2c43fc8787f78fa3f0bfe0372bc50f8a4afbb1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +182,186 @@\treturn json.Marshal(toEncode)\n}\n\n// decodeDockerConfigFieldAuth deserializes the \"auth\" field from dockercfg into a\n// username and a password. The format of the auth field is base64(<username>:<password>)."
  },
  {
    "id" : "63772f74-de12-4abd-9f6e-dfd4683431e3",
    "prId" : 2409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be2c2668-062a-4243-9b1f-bda2dc0d09fd",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "move this to immediately after the Do(...)\n",
        "createdAt" : "2014-11-17T18:44:03Z",
        "updatedAt" : "2014-11-18T05:47:04Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "28317d63-e76c-4dde-8966-86afb17527e0",
        "parentId" : "be2c2668-062a-4243-9b1f-bda2dc0d09fd",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No, if Do fails resp ought to be nil?\n",
        "createdAt" : "2014-11-17T19:20:40Z",
        "updatedAt" : "2014-11-18T05:47:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "13e74939-a76c-42fa-97fb-e8761a94dc38",
        "parentId" : "be2c2668-062a-4243-9b1f-bda2dc0d09fd",
        "authorId" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "body" : "Yeah, I think either resp or resp.Body may be nil, so I'm pretty sure you aren't expected to Close.\n",
        "createdAt" : "2014-11-18T03:09:39Z",
        "updatedAt" : "2014-11-18T05:47:04Z",
        "lastEditedBy" : "3e7d9ea3-0e67-4a53-b512-35364183d8c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c5d9ed0d21f0ebace1b5bd437077bc6f6e070f2",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {"
  }
]