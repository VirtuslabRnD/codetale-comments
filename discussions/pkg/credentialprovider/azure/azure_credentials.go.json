[
  {
    "id" : "98e7e2e8-9743-45ef-9e6e-8d2601078887",
    "prId" : 96355,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96355#pullrequestreview-529112661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "709afedb-0e61-4fb3-96e6-3e2354920b6a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "in the case where we're returning a cache entry, this is modifying the shared cache object that was previously returned and can cause a data race.\r\n\r\nSuggest making an `addAnonymousCredentials(cfg)` method and calling it from `getFromACR` when we're constructing a new cached credential set, and from the else block in Provide() when we're not using UseManagedIdentityExtension. That ensures we never modify a config after we've returned it from Provide()",
        "createdAt" : "2020-11-12T13:36:03Z",
        "updatedAt" : "2020-11-12T13:36:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "96fefe6e-687a-46de-ac34-0f91cd3d5407",
        "parentId" : "709afedb-0e61-4fb3-96e6-3e2354920b6a",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "hi @liggitt there is no shared cache object anymore, `cfg` is a newly constructed object every time in `Provide()` func, see line 253, I have removed the `cacheDockerConfig` field in this PR.",
        "createdAt" : "2020-11-12T13:54:54Z",
        "updatedAt" : "2020-11-12T13:54:54Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "8ef36eb0-deaa-4ed3-b5da-3f14f153ec9a",
        "parentId" : "709afedb-0e61-4fb3-96e6-3e2354920b6a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah, I see, thanks.",
        "createdAt" : "2020-11-12T14:00:55Z",
        "updatedAt" : "2020-11-12T14:01:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "48ba8830cd974755239c76cf5dcf3e651c1cdd49",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\tEmail:    dummyRegistryEmail,\n\t}\n\tcfg[\"*.azurecr.*\"] = defaultConfigEntry\n\treturn cfg\n}"
  },
  {
    "id" : "f0594d32-af59-4bfd-8d7b-ff83ead55527",
    "prId" : 90425,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90425#pullrequestreview-399612692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80b6dbd8-367c-447c-972c-9393e4e79170",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "there is a security issue here:\r\nif we support self defined ACR domain, e.g. `test.azurecr.my.cloud`, then service principal secret could be sent to that remote server. \r\nThe reason why we use hardcoded domains is that we could always make sure the following 4 domains are owned by Azure:\r\nhttps://github.com/kubernetes/kubernetes/blob/0c0984abdb17246b472e65f0fefee82637dd83e6/pkg/credentialprovider/azure/azure_credentials.go#L49-L50",
        "createdAt" : "2020-04-24T02:41:45Z",
        "updatedAt" : "2020-04-25T02:14:31Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "63f34f89-f04a-41b1-acd1-79d723bf0b7c",
        "parentId" : "80b6dbd8-367c-447c-972c-9393e4e79170",
        "authorId" : "1d31f96a-2d1e-4a21-a0ef-923a0b04727f",
        "body" : "The environment is fetched from ARM or setup as an explicit AzureStack configuration. Thus, the only acr endpoints used here will be the ones setup by a cluster creator or  returned by ARM. This needs to be allowed in order to support clouds with urls we are not allowed to expose publicly.",
        "createdAt" : "2020-04-24T02:57:15Z",
        "updatedAt" : "2020-04-25T02:14:31Z",
        "lastEditedBy" : "1d31f96a-2d1e-4a21-a0ef-923a0b04727f",
        "tags" : [
        ]
      },
      {
        "id" : "8e29e159-8452-451c-9c73-acf16826a1e7",
        "parentId" : "80b6dbd8-367c-447c-972c-9393e4e79170",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "that sounds reasonable, thanks.",
        "createdAt" : "2020-04-24T03:16:26Z",
        "updatedAt" : "2020-04-25T02:14:31Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "333b0493fb8e378ca39a46f025f861f3a2bab7fe",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +220,224 @@\t\t\tif !hasBeenAdded {\n\t\t\t\tcred := &credentialprovider.DockerConfigEntry{\n\t\t\t\t\tUsername: a.config.AADClientID,\n\t\t\t\t\tPassword: a.config.AADClientSecret,\n\t\t\t\t\tEmail:    dummyRegistryEmail,"
  },
  {
    "id" : "f7b77601-c98a-468e-912e-a9ef034a7c4b",
    "prId" : 77245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77245#pullrequestreview-232034721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3fb0f66-43e5-4742-9d1a-44dd182b2c98",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "shall we return error here? If return error, no need to log every error",
        "createdAt" : "2019-04-30T07:59:02Z",
        "updatedAt" : "2019-04-30T08:52:19Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2f4f51b7767612417709cdc5c174ce566970d50",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +226,230 @@\t// Run EnsureFresh to make sure the token is valid and does not expire\n\tif err := a.servicePrincipalToken.EnsureFresh(); err != nil {\n\t\tklog.Errorf(\"Failed to ensure fresh service principal token: %v\", err)\n\t\treturn nil, err\n\t}"
  },
  {
    "id" : "492f19f3-d597-4f26-8dea-f9eba04670a3",
    "prId" : 77245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77245#pullrequestreview-232492151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d2e762e-45f2-4a57-83c2-665e91a457e5",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should there be a log for len(match) > 1  ?",
        "createdAt" : "2019-04-30T22:59:39Z",
        "updatedAt" : "2019-04-30T22:59:39Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "1646110b-7c79-4693-ba50-17210e3637cd",
        "parentId" : "8d2e762e-45f2-4a57-83c2-665e91a457e5",
        "authorId" : "c74f5413-a37b-498a-8e95-a92bf8282930",
        "body" : "The image name is already logged [here](https://github.com/kubernetes/kubernetes/pull/77245/files/a2f4f51b7767612417709cdc5c174ce566970d50#diff-65860720abfa0057bc9fe725fde21bedR189). `len(match) > 1` indicates a wrong image is provided, credential provider can't handle this, in later code flow, no credential will be provided and this error will be caught outside the credential provider when trying to pull the image. Does this make sense?",
        "createdAt" : "2019-05-01T05:11:07Z",
        "updatedAt" : "2019-05-01T05:11:08Z",
        "lastEditedBy" : "c74f5413-a37b-498a-8e95-a92bf8282930",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2f4f51b7767612417709cdc5c174ce566970d50",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +262,266 @@\t\treturn match[0]\n\t}\n\treturn \"\"\n}\nfunc (a *acrProvider) LazyProvide(image string) *credentialprovider.DockerConfigEntry {"
  },
  {
    "id" : "96ae4339-fcfa-41a2-9ce5-31d3bb293def",
    "prId" : 74715,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74715#pullrequestreview-209443666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fddb63a8-58f5-4eeb-bed3-a965b4d474a7",
        "parentId" : null,
        "authorId" : "af6d75df-8a4e-4008-85cf-8aaee4c7ff96",
        "body" : "What all does this match? does this match \"foo.azurecr.bar.com\" ?",
        "createdAt" : "2019-02-28T19:07:21Z",
        "updatedAt" : "2019-02-28T19:07:21Z",
        "lastEditedBy" : "af6d75df-8a4e-4008-85cf-8aaee4c7ff96",
        "tags" : [
        ]
      },
      {
        "id" : "735f14b8-37d1-4e7a-8878-b8ca5460da98",
        "parentId" : "fddb63a8-58f5-4eeb-bed3-a965b4d474a7",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "@sivagms Yes, it match, but I think it does not matter since if user use private repo, suppose they should provide pull image secret by themselves.",
        "createdAt" : "2019-03-01T02:18:55Z",
        "updatedAt" : "2019-03-01T02:44:11Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "434cb02f-3737-4450-92a3-d5b3c2128680",
        "parentId" : "fddb63a8-58f5-4eeb-bed3-a965b4d474a7",
        "authorId" : "af6d75df-8a4e-4008-85cf-8aaee4c7ff96",
        "body" : "Thatâ€™s a bit scary. Some malicious user can just change the registry name in the chart to receive the AKS SP and password ",
        "createdAt" : "2019-03-01T06:28:18Z",
        "updatedAt" : "2019-03-01T06:28:18Z",
        "lastEditedBy" : "af6d75df-8a4e-4008-85cf-8aaee4c7ff96",
        "tags" : [
        ]
      },
      {
        "id" : "16c2f986-6870-4c50-9680-1b36c2bee3a4",
        "parentId" : "fddb63a8-58f5-4eeb-bed3-a965b4d474a7",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "currently the matching patterns are like following:\r\n( *. azurecr.io, SP) ( *. azurecr.cn, SP)  ( * . azurecr . * , empty password)\r\nPer offline discussion, it's safe\r\nThanks for the good point!",
        "createdAt" : "2019-03-01T06:41:41Z",
        "updatedAt" : "2019-03-01T06:41:52Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c7de52cc243efbc8d4623a3d03db5be0724dd86",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +209,213 @@\n\t// add ACR anonymous repo support: use empty username and password for anonymous access\n\tcfg[\"*.azurecr.*\"] = credentialprovider.DockerConfigEntry{\n\t\tUsername: \"\",\n\t\tPassword: \"\","
  },
  {
    "id" : "8748b0b9-dca6-426f-a254-77c185ae276e",
    "prId" : 74715,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74715#pullrequestreview-209403586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f29ad161-0dc1-436a-987b-b7c166c8769d",
        "parentId" : null,
        "authorId" : "3e09a6e1-28af-48bb-8a31-cd646352e1f1",
        "body" : "What's the order of trying the matching? Will it always first try the empty user name one, or always the SP one? \r\nWhich is most likely usage here? I mean depending on the usage, you may want to optimize for the most common scenario.",
        "createdAt" : "2019-02-28T19:27:26Z",
        "updatedAt" : "2019-02-28T19:27:26Z",
        "lastEditedBy" : "3e09a6e1-28af-48bb-8a31-cd646352e1f1",
        "tags" : [
        ]
      },
      {
        "id" : "871fae9c-1adf-4f55-9873-8e1e9944fc1d",
        "parentId" : "f29ad161-0dc1-436a-987b-b7c166c8769d",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "@yuwaMSFT2 good question, now it's this order: \"*.azurecr.io\", \"*.azurecr.*\", which means use SP first, and then empty username/password, SP first should be the better choice in a long period.\r\n",
        "createdAt" : "2019-03-01T02:42:56Z",
        "updatedAt" : "2019-03-01T02:44:11Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c7de52cc243efbc8d4623a3d03db5be0724dd86",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +209,213 @@\n\t// add ACR anonymous repo support: use empty username and password for anonymous access\n\tcfg[\"*.azurecr.*\"] = credentialprovider.DockerConfigEntry{\n\t\tUsername: \"\",\n\t\tPassword: \"\","
  },
  {
    "id" : "c6ce538e-cd93-4045-9991-4f1f83aef779",
    "prId" : 66429,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66429#pullrequestreview-139315903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b95a8db-0ae6-4201-b7b2-b768b08be8af",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "note, we keep the original logic for UseManagedIdentityExtension, while for sp, we always return loginServer as `*.azurecr.io`, `*.azurecr.cn` and that would save ARM calls",
        "createdAt" : "2018-07-20T12:19:30Z",
        "updatedAt" : "2018-07-20T12:20:34Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "f38e5c41-79bc-4346-9022-c7eb8f6390cc",
        "parentId" : "6b95a8db-0ae6-4201-b7b2-b768b08be8af",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "+1 to the new method",
        "createdAt" : "2018-07-23T02:14:02Z",
        "updatedAt" : "2018-07-23T02:14:02Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e328c211262cda99ec1324a846b2ee30ee9a0a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +179,183 @@\tdefer cancel()\n\n\tif a.config.UseManagedIdentityExtension {\n\t\tglog.V(4).Infof(\"listing registries\")\n\t\tresult, err := a.registryClient.List(ctx)"
  },
  {
    "id" : "377651d3-2dbe-46aa-9967-b7007ac50c4c",
    "prId" : 40142,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40142#pullrequestreview-18335914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1a6c5d5-19ca-4a2b-8a75-6ad8320823b6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is there always a default? does it need a fallback to old behavior if it's empty?",
        "createdAt" : "2017-01-24T23:59:43Z",
        "updatedAt" : "2017-01-24T23:59:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "260e7144-e659-4818-8f24-e0396a15f667",
        "parentId" : "c1a6c5d5-19ca-4a2b-8a75-6ad8320823b6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "looks like the old default was wrong. should this return `(string, error)` and error if LoginServer is unset?",
        "createdAt" : "2017-01-25T00:00:35Z",
        "updatedAt" : "2017-01-25T00:00:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "91ff3603-79e9-4b53-a563-daad38311fc8",
        "parentId" : "c1a6c5d5-19ca-4a2b-8a75-6ad8320823b6",
        "authorId" : "b516a0b6-a0cd-4503-a269-18f3909fa05d",
        "body" : "It is always set. There's lots of places that we deref without checking the value in here and the cloudprovider.\r\n\r\nIf you'd prefer, I can add an `error` return value, error check and skip the registry if getLoginServer errors out. LMK if you want that change.",
        "createdAt" : "2017-01-25T00:02:35Z",
        "updatedAt" : "2017-01-25T00:02:44Z",
        "lastEditedBy" : "b516a0b6-a0cd-4503-a269-18f3909fa05d",
        "tags" : [
        ]
      },
      {
        "id" : "74e826fb-598f-4ff0-baa4-381df95ba4bf",
        "parentId" : "c1a6c5d5-19ca-4a2b-8a75-6ad8320823b6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't feel strongly if it's guaranteed to be set",
        "createdAt" : "2017-01-25T06:53:28Z",
        "updatedAt" : "2017-01-25T06:53:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c72f2b9def5ddddbaaf721ab6bca32b86784d6d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +141,145 @@\nfunc getLoginServer(registry containerregistry.Registry) string {\n\treturn *(*registry.RegistryProperties).LoginServer\n}\n"
  },
  {
    "id" : "73fafa9b-f827-4003-972d-a92b14042109",
    "prId" : 37783,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37783#pullrequestreview-11209715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70f966cc-fdf0-4ff1-89b9-b515b58fdba4",
        "parentId" : null,
        "authorId" : "b516a0b6-a0cd-4503-a269-18f3909fa05d",
        "body" : "related: https://github.com/Azure/go-autorest/issues/102",
        "createdAt" : "2016-12-02T20:30:11Z",
        "updatedAt" : "2016-12-09T05:39:01Z",
        "lastEditedBy" : "b516a0b6-a0cd-4503-a269-18f3909fa05d",
        "tags" : [
        ]
      }
    ],
    "commit" : "91f19e3dfc1f5c282032122beefa71d7ab026561",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +134,138 @@\t}\n\tfor ix := range *res.Value {\n\t\t// TODO: I don't think this will work for national clouds\n\t\tcfg[fmt.Sprintf(\"%s.azurecr.io\", *(*res.Value)[ix].Name)] = entry\n\t}"
  }
]