[
  {
    "id" : "44b03ab7-e335-47e0-9962-7d0866c3d346",
    "prId" : 100686,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100686#pullrequestreview-625654689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19f42fbc-1ff0-4a54-9a8d-5a41b8cdc3cb",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "so current default value is never timeout? 10s may be too small compared to never timeout?",
        "createdAt" : "2021-03-31T15:11:06Z",
        "updatedAt" : "2021-03-31T15:11:06Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "b843d918-2071-4ab9-b97d-afbacadcabef",
        "parentId" : "19f42fbc-1ff0-4a54-9a8d-5a41b8cdc3cb",
        "authorId" : "36d7f8b5-3497-43b0-96eb-612a05dccdf8",
        "body" : "@andyzhangx I am open to bumping higher, although I wouldn't think it would require longer than 10s",
        "createdAt" : "2021-03-31T19:41:39Z",
        "updatedAt" : "2021-03-31T19:41:39Z",
        "lastEditedBy" : "36d7f8b5-3497-43b0-96eb-612a05dccdf8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c7cff6d27b925c516b02e36795d1b5827307124",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +81,85 @@var client = &http.Client{\n\tTransport: utilnet.SetTransportDefaults(&http.Transport{}),\n\tTimeout:   time.Second * 10,\n}\n"
  },
  {
    "id" : "3f39b104-8cf4-45a7-8b36-51b8f5a37e6f",
    "prId" : 76519,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76519#pullrequestreview-227877811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "If we're confident that 10MB is sufficient for the foreseeable future, we'd better panic here.",
        "createdAt" : "2019-04-17T02:30:37Z",
        "updatedAt" : "2019-04-17T02:30:37Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "ec56a5e8-39d7-4611-99ae-8df232db487d",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "a library function like this should return an error. callers can panic if they wish, but error propagation is more orderly",
        "createdAt" : "2019-04-17T02:36:23Z",
        "updatedAt" : "2019-04-17T02:36:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e3df0ca6-a819-4553-894a-4da4303009c6",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should I send out a PR in the caller ?\r\nfailure to perform token exchange is a fatal error.",
        "createdAt" : "2019-04-17T02:45:55Z",
        "updatedAt" : "2019-04-17T02:45:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "d05cb901-84d8-42e4-b53c-d68506f73647",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't see anything fundamentally different about this error. I'd expect the existing error handling to be sufficient",
        "createdAt" : "2019-04-17T02:52:18Z",
        "updatedAt" : "2019-04-17T02:52:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ffb3b18f-b53c-46f7-8104-2771507cd101",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Here is how the func is called:\r\n```\r\n\t\t\tcred, err := getACRDockerEntryFromARMToken(a, loginServer)\r\n\t\t\tif err != nil {\r\n\t\t\t\tcontinue\r\n```\r\nI don't see how the above would lead to panic.",
        "createdAt" : "2019-04-17T03:29:32Z",
        "updatedAt" : "2019-04-17T03:29:32Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "44e24405-e7b7-4456-8f62-a5df99f01b6f",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't think a panic is appropriate there. I would think the error should be propagated",
        "createdAt" : "2019-04-17T03:39:49Z",
        "updatedAt" : "2019-04-17T03:39:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "921a4069-8ca9-437c-b2b5-dbcae5d3e037",
        "parentId" : "3ecaa1db-ef8f-45fa-8390-263e962b0563",
        "authorId" : "ad5a6fa4-f2e7-44c8-969f-5aef2d8704df",
        "body" : "I think returning an error is more appropriate here.\r\nFYI, I am working on adding a new util function to cover this feature in https://github.com/kubernetes/kubernetes/pull/76518/files to avoid code duplication. Currently there are about a dozen usage of `ioutil.ReadAll` without a read limit. \r\n\r\n```\r\n// ReadAllWithLimit reads up to `limit` bytes from `r`, and reports an error when\r\n// `limit` bytes are read.\r\nfunc ReadAllWithLimit(r io.Reader, limit int64) ([]byte, error) {\r\n\tlimitedReader := &io.LimitedReader{R: r, N: limit}\r\n\tdata, err := ioutil.ReadAll(limitedReader)\r\n\tif limitedReader.N <= 0 {\r\n\t\treturn nil, errors.New(\"the read limit is reached\")\r\n\t}\r\n\treturn data, err\r\n}\r\n```",
        "createdAt" : "2019-04-17T16:54:22Z",
        "updatedAt" : "2019-04-17T16:54:23Z",
        "lastEditedBy" : "ad5a6fa4-f2e7-44c8-969f-5aef2d8704df",
        "tags" : [
        ]
      }
    ],
    "commit" : "529ac8a2d80c4dbfde9c3cdf7743609d63d748ac",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +187,191 @@\n\tif limitedReader.N <= 0 {\n\t\treturn \"\", errors.New(\"the read limit is reached\")\n\t}\n"
  }
]