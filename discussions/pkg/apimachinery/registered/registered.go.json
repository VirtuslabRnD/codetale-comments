[
  {
    "id" : "b9fa6e9e-9e18-4553-b27d-ea2ddecea345",
    "prId" : 30663,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29c97ec-d907-4aeb-bff2-19fab4fa9fc5",
        "parentId" : null,
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "Is there an issue for cleaning this up globally? Would be a good thing to track. [Maybe easy work for newbies?]\n",
        "createdAt" : "2016-08-16T06:48:27Z",
        "updatedAt" : "2016-08-16T06:48:27Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "7a8d6e7b-ac8a-4f0c-8ced-05920035359d",
        "parentId" : "d29c97ec-d907-4aeb-bff2-19fab4fa9fc5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Not sure if there's an issue or not. I don't think it's easy work, unfortunately. :(\n\nWe _do_ need a global registry for _available_ apis, but this code should _not_ be a global registry at all. Once we have the former, people will be able to make the latter at will. My https://github.com/kubernetes/kubernetes/pull/30565 is the next step.\n",
        "createdAt" : "2016-08-16T17:42:20Z",
        "updatedAt" : "2016-08-16T17:42:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ac0b929b850994b7546aafa60da8be3bcc15997",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +93,97 @@}\n\n// People are calling global functions. Let them continue to do that (for now).\nvar (\n\tValidateEnvRequestedVersions  = DefaultAPIRegistrationManager.ValidateEnvRequestedVersions"
  },
  {
    "id" : "d7a0560e-5fd2-4601-9d44-cb2ee56ead7f",
    "prId" : 28431,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18a25d3e-1f24-4c12-ac29-b6df56675d5b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ugh, this is awful, I really need to get my changes in so it's not necessary :(\n",
        "createdAt" : "2016-07-08T21:21:10Z",
        "updatedAt" : "2016-07-08T21:21:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "891bd3e5223777568efb040f41ca5321e7d0550c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +76,80 @@\n// Resets everything to clean room for the start of a test\nfunc clearForTesting() {\n\tregisteredVersions = map[unversioned.GroupVersion]struct{}{}\n\tthirdPartyGroupVersions = []unversioned.GroupVersion{}"
  },
  {
    "id" : "64e48951-3f78-477b-9fe5-6e5952e2e7db",
    "prId" : 20846,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Map traversal are not stable, is this expect to be?\n",
        "createdAt" : "2016-02-09T02:22:25Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c464a353-2a5f-4950-bd43-b71c020711c2",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Map traversal are not stable, is this expect to be?\n\nNo. Godoc specifies: `Groups are randomly ordered, but versions within groups are priority order from best to worst`.  Random ordering on groups works, but we need correct ordering on versions within those groups.\n",
        "createdAt" : "2016-02-09T13:15:25Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "4ee36817-f383-4d26-a987-c032b0feb810",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why are groups randomly ordered?  What value does it provide?\n",
        "createdAt" : "2016-02-10T13:06:30Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "52e4b5ab-9035-44d1-bd36-38bca22cb500",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Why are groups randomly ordered?  What value does it provide?\n\nWhen choosing how to encode with a legacy encoder, the first matching group is used.  This is a natural method for getting all the GroupVersions and since the group will be traversed eventually, the group ordering doesn't matter.  The version ordering within that group is critical.\n",
        "createdAt" : "2016-02-10T13:30:49Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "dcbb0461-9880-4462-b92a-7e28014ab8d7",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I agree on the version ordering.  I'm just trying to understand why enabled\nversions is random.  It's fine for this issue, but I don't know that I\nconsider randomness correct in this context.\n\nOn Wed, Feb 10, 2016 at 8:31 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/apimachinery/registered/registered.go\n> https://github.com/kubernetes/kubernetes/pull/20846#discussion_r52456327\n> :\n> \n> > @@ -114,22 +114,24 @@ func IsEnabledVersion(v unversioned.GroupVersion) bool {\n> >     return found\n> >  }\n> > \n> > -// EnabledVersions returns all enabled versions.\n> > -func EnabledVersions() (ret []unversioned.GroupVersion) {\n> > -   for v := range enabledVersions {\n> > -       ret = append(ret, v)\n> >   +// EnabledVersions returns all enabled versions.  Groups are randomly ordered, but versions within groups\n> >   +// are priority order from best to worst\n> >   +func EnabledVersions() []unversioned.GroupVersion {\n> > -   ret := []unversioned.GroupVersion{}\n> > -   for _, groupMeta := range groupMetaMap {\n> > -       ret = append(ret, groupMeta.GroupVersions...)\n> \n> Why are groups randomly ordered? What value does it provide?\n> \n> When choosing how to encode with a legacy encoder, the first matching\n> group is used. This is a natural method for getting all the GroupVersions\n> and since the group will be traversed eventually, the group ordering\n> doesn't matter. The version ordering within that group is critical.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20846/files#r52456327.\n",
        "createdAt" : "2016-02-10T19:38:33Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "61ab3c7a-d2dc-4392-a070-7a6630e41e0e",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I agree on the version ordering.  I'm just trying to understand why enabled\n> versions is random.  It's fine for this issue, but I don't know that I\n> consider randomness correct in this context.\n\nI'm not sure that I know what order I'd like this to have.  I know that I don't like alphabetical, because everyone will name theirs `aaaa`.  Given package loading ordering which isn't obvious to me, I'm not sure that I like enablement order.\n\nI think I want group ordering to be suggested by discover endpoints and strictly ordered client-side if desired.\n",
        "createdAt" : "2016-02-10T20:09:46Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "091b7fd7-6e84-450e-aa82-2e44f32fe328",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I agree there - this is fine for now for me.\n",
        "createdAt" : "2016-02-10T20:14:24Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fc41589e-ae79-4517-acfa-132659d61505",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm, ok, so this is a behavior change for ordering, I think after discussion we said this might break rest mapper because it relies on `extensions/v1beta1.pods` to come after `v1.pods`\n",
        "createdAt" : "2016-02-11T15:57:48Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8eb242b8-7e59-4a69-b7ac-92280b8914db",
        "parentId" : "2593f121-6c77-4888-b101-ff9c5560ba74",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Hrm, ok, so this is a behavior change for ordering, I think after discussion we said this might break rest mapper because it relies on extensions/v1beta1.pods to come after v1.pods\n\nThat discussion was related to a different pull where I explicitly called out the change in the description: https://github.com/kubernetes/kubernetes/pull/20829  This has never had an ordering guarantee before.\n",
        "createdAt" : "2016-02-11T16:01:06Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89bd8366417520970bd836bd8d9e1bbbf64d9b8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +120,124 @@\tret := []unversioned.GroupVersion{}\n\tfor _, groupMeta := range groupMetaMap {\n\t\tret = append(ret, groupMeta.GroupVersions...)\n\t}\n\treturn ret"
  },
  {
    "id" : "789e3798-1a71-4fe3-848d-5385b0669389",
    "prId" : 19674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b259e63-7fdd-4aa5-bbb1-502e3679a823",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "How about moving all the functions that are moved from latest.go to their own file, say \"group_meta.go\"? The existing code in this file is not focused on the concept of group, while these functions are, so we can naturally split them in two files.\n",
        "createdAt" : "2016-01-14T22:50:18Z",
        "updatedAt" : "2016-01-21T22:42:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "203f7d6f-cf01-4482-94fb-7dc8aedbb917",
        "parentId" : "7b259e63-7fdd-4aa5-bbb1-502e3679a823",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I am planning to merge RegisterGroup and RegisterVersion into one.\nGroupMeta has all the required information.\n\nIt requires moving enableVersion logic as well (since we cannot create GroupMeta and RestMapper unless objects have been added to schema), which I did not do in this PR.\nWill send another PR for it.\n",
        "createdAt" : "2016-01-14T23:50:10Z",
        "updatedAt" : "2016-01-21T22:42:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad642d37004b575654a0de7917fb205da8670c5",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +72,76 @@\n// RegisterGroup adds the given group to the list of registered groups.\nfunc RegisterGroup(groupMeta apimachinery.GroupMeta) error {\n\tgroupName := groupMeta.GroupVersion.Group\n\tif _, found := groupMetaMap[groupName]; found {"
  }
]