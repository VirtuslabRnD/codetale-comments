[
  {
    "id" : "29b06ed9-e22e-43f8-9756-f4200e22867a",
    "prId" : 36909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36909#pullrequestreview-8896751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eabfc52f-1cf5-4fdf-be89-12f6bc4b5816",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if we don't find a mapping here, I think that's an error we'd want to fix, not ignore. not sure what to do for things like CONNECT\n",
        "createdAt" : "2016-11-16T19:46:19Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4f2d6e9f-cfc3-4465-b022-bc5c79d0b5ce",
        "parentId" : "eabfc52f-1cf5-4fdf-be89-12f6bc4b5816",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "CONNECT is the reason for the check. Who can comment? /cc @deads2k \n",
        "createdAt" : "2016-11-16T19:49:37Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "57afa2b4-110a-4393-b687-c448fa1b1a18",
        "parentId" : "eabfc52f-1cf5-4fdf-be89-12f6bc4b5816",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd rather explicitly map \"CONNECT\":\"\" and exclude it so we can fail if we encounter other unknown verbs\n",
        "createdAt" : "2016-11-16T19:54:33Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "edc31f55-f1b6-487d-aa04-243cbb1db0d0",
        "parentId" : "eabfc52f-1cf5-4fdf-be89-12f6bc4b5816",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "done\n",
        "createdAt" : "2016-11-16T20:02:05Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dff13f332bef6cddff2613023eced01518c5c02",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +535,539 @@\t\t}\n\n\t\tif kubeVerb, found := toDiscoveryKubeVerb[action.Verb]; found {\n\t\t\tif len(kubeVerb) != 0 {\n\t\t\t\tkubeVerbs[kubeVerb] = struct{}{}"
  },
  {
    "id" : "e845b2b3-f1d4-43bb-abce-f4c12d8f7af6",
    "prId" : 36909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36909#pullrequestreview-8897976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f777e702-b470-4d6d-bc2f-e1f82ac66012",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm, I guess we support PATCH if we support UPDATE? that's a little weird\n",
        "createdAt" : "2016-11-16T20:03:42Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "79fc66e9-1912-41d9-8d02-3115241631e1",
        "parentId" : "f777e702-b470-4d6d-bc2f-e1f82ac66012",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "still I wouldn't merge them if it's a different http method.\n",
        "createdAt" : "2016-11-16T20:09:09Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dff13f332bef6cddff2613023eced01518c5c02",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\"WATCH\":            \"watch\",\n\t\"WATCHLIST\":        \"watch\",\n}\n\n// errEmptyName is returned when API requests do not fill the name section of the path."
  },
  {
    "id" : "9ace20e1-2592-4cff-a1d9-a623eff4d25c",
    "prId" : 36909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36909#pullrequestreview-11364817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "If we distinguish between delete and deletecollection, we should keep that distinction for watch as well. Besides, why not just lower-casing the action verb and have an exception list (currently only having connect)?",
        "createdAt" : "2016-11-29T13:36:41Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "8a0eb8c3-242f-49d9-96e6-baad891b2c6b",
        "parentId" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Any reason not to normalize this as written by @soltysh (maybe with the exception of PUT->update). @deads2k @liggitt  wdyt?",
        "createdAt" : "2016-11-29T14:51:03Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "5fef801b-9d41-4ae3-8d5a-11cf1fcd7388",
        "parentId" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't want to blindly pick up new verbs. `watchlist` isn't a recognized API verb, so I wouldn't include it here.",
        "createdAt" : "2016-11-29T15:20:11Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b2c63f2a-8830-4413-b51b-b303fd872e74",
        "parentId" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "That's fair argument.",
        "createdAt" : "2016-11-29T15:58:02Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "339a75bb-ad4f-4b84-9935-dde2a2144909",
        "parentId" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "@liggitt what about deletecollection, isn't just delete sufficient, here?",
        "createdAt" : "2016-12-05T09:48:49Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "51222814-4e70-40a3-971f-e8f16cb1cf1a",
        "parentId" : "462e7f60-da03-408b-9ed0-aea6b77d08c3",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Compare https://github.com/kubernetes/kubernetes/blob/3454a8d52cc684dcbae9b4a924105fd3e869a8d6/pkg/controller/namespace/namespace_controller_utils.go#L301-L301. In the namespace controller we try `deletecollection` first and fall back to single `delete`s. @liggitt @deads2k has anything changed that this is not necessary anymore?",
        "createdAt" : "2016-12-05T12:02:10Z",
        "updatedAt" : "2016-12-05T12:02:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dff13f332bef6cddff2613023eced01518c5c02",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +75,79 @@\t\"PUT\":              \"update\",\n\t\"WATCH\":            \"watch\",\n\t\"WATCHLIST\":        \"watch\",\n}\n"
  },
  {
    "id" : "8826a7ca-9589-470e-a72c-6ce3896d7501",
    "prId" : 32557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32557#pullrequestreview-3219092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ac5077d-7142-4211-8902-38908a84e167",
        "parentId" : null,
        "authorId" : "6f0e0b8d-8a92-4746-b4fe-8a3c75407adc",
        "body" : "@pigmej here is the actual code change. The other stuff is checked in, but not edited by hand (./hack/update-all.sh)\n",
        "createdAt" : "2016-10-06T22:39:39Z",
        "updatedAt" : "2016-10-31T00:22:35Z",
        "lastEditedBy" : "6f0e0b8d-8a92-4746-b4fe-8a3c75407adc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a08cf06196e39b9b9bb16a4643421606696dcb3",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +631,635 @@\t\t\tdoc := \"delete\" + article + kind\n\t\t\tif hasSubresource {\n\t\t\t\tdoc = \"delete \" + subresource + \" of\" + article + kind\n\t\t\t}\n\t\t\thandler := metrics.InstrumentRouteFunc(action.Verb, resource, DeleteResource(gracefulDeleter, isGracefulDeleter, reqScope, admit))"
  },
  {
    "id" : "17d7d5a6-b172-46d1-830c-f87732058737",
    "prId" : 26007,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f359cb39-86f6-4507-a473-88daabbc97b2",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What if the resource is non-namespaced (e.g. Node)?\n",
        "createdAt" : "2016-05-23T09:25:14Z",
        "updatedAt" : "2016-05-23T09:25:14Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1ad49b4b-1d8a-48a3-9857-fe228bc8206d",
        "parentId" : "f359cb39-86f6-4507-a473-88daabbc97b2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's in a different branch.\n\nOn Mon, May 23, 2016 at 5:25 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/apiserver/api_installer.go\n> https://github.com/kubernetes/kubernetes/pull/26007#discussion_r64192201\n> :\n> \n> > ```\n> >         resourcePath = itemPath\n> >         resourceParams = nameParams\n> >     }\n> >     apiResource.Name = path\n> >     apiResource.Namespaced = true\n> >     apiResource.Kind = resourceKind\n> > ```\n> > -       namer := scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix, itemPath), false}\n> >   +\n> > -       itemPathFn := func(name, namespace string) string {\n> > -           return itemPathPrefix + namespace + itemPathMiddle + name + itemPathSuffix\n> \n> What if the resource is non-namespaced (e.g. Node)?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/26007/files/25a2a7d25a45edffcbdaefc20c93822fc71637e0..f670cc465211fb5328ee2beae330a6625750471c#r64192201\n",
        "createdAt" : "2016-05-23T14:00:03Z",
        "updatedAt" : "2016-05-23T14:00:03Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "346afe6d-08be-46a3-bdc3-bcbad5631e70",
        "parentId" : "f359cb39-86f6-4507-a473-88daabbc97b2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Aah ok. I forgot that we handle those separately.\n",
        "createdAt" : "2016-05-23T14:13:12Z",
        "updatedAt" : "2016-05-23T14:13:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6961d6fd623e52993a771f0591acfcebab2be6d",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +416,420 @@\n\t\titemPathFn := func(name, namespace string) string {\n\t\t\treturn itemPathPrefix + namespace + itemPathMiddle + name + itemPathSuffix\n\t\t}\n\t\tnamer := scopeNaming{scope, a.group.Linker, itemPathFn, false}"
  },
  {
    "id" : "89a3b4f2-a7b7-490d-8b39-947df4cb89fc",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec1a16d-69eb-41c9-a13c-53457d12fd00",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Do you know why this is special-cased?  I still don't, but this pull is changing behavior around this bit of hardcoding (unlike the previous comment) so I think it should be re-visited.\n",
        "createdAt" : "2016-02-24T21:12:58Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e71745bb-2f07-472c-873b-1804e8180d00",
        "parentId" : "0ec1a16d-69eb-41c9-a13c-53457d12fd00",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Let's deal with ThirdPartyResource in another PR. The currently implemented behavior isn't what we want.\n",
        "createdAt" : "2016-02-25T00:04:20Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b6779ec2-ccae-43cc-955d-091295cd5d1e",
        "parentId" : "0ec1a16d-69eb-41c9-a13c-53457d12fd00",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Yeah, I think that should be in another PR.\n",
        "createdAt" : "2016-02-25T19:10:52Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +135,139 @@\n\t\t// TODO This keeps it doing what it was doing before, but it doesn't feel right.\n\t\tif fqKind.Group == extensions.GroupName && fqKind.Kind == \"ThirdPartyResourceData\" {\n\t\t\tfqKindToRegister = a.group.GroupVersion.WithKind(fqKind.Kind)\n\t\t}"
  },
  {
    "id" : "b2ffc23c-5219-4f08-b42f-4849cf8227d3",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "'resource' should never be a subresource, correct? Please fix the comments :)\n",
        "createdAt" : "2016-02-29T21:42:47Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6cac2fd6-9d6b-4abb-a2e6-3c85f2227ef3",
        "parentId" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n\nI removed \", or the resource's parent if it is a sub resource\" part from the first line. But I am leaving the subresource example as is. I think that adds some clarity about how the subresource paths are mapped.\n",
        "createdAt" : "2016-02-29T23:12:52Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "c14df168-cc31-4905-a4aa-29396151802f",
        "parentId" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree the example is helpful.\n",
        "createdAt" : "2016-03-01T00:12:45Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9708b7e4-a465-48ab-bd2c-13151913b329",
        "parentId" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you clarify the comment... it looks like you could pass in \"batch/v1.Job\" as the `resource` arg\n",
        "createdAt" : "2016-03-01T20:14:11Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "12a3be3d-f0bd-4508-844a-7c694cf27726",
        "parentId" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1, clarify what resource accepts.\n",
        "createdAt" : "2016-03-02T00:52:08Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5c281ef2-289f-4aba-8ede-f7cccfcf6491",
        "parentId" : "ef5af045-8d5c-4723-9bb7-64e469b560aa",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-03-02T06:40:10Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : null,
    "diffHunk" : "@@ -1,1 +154,158 @@//      Subresource Type: autoscaling/v1.Scale\n//      REST path:        /apis/extensions/v1beta1/namespaces/{namespace}/replicaset/{name}/scale\nfunc (a *APIInstaller) restMapping(resource string) (*meta.RESTMapping, error) {\n\t// subresources must have parent resources, and follow the namespacing rules of their parent.\n\t// So get the storage of the resource (which is the parent resource in case of subresources)"
  },
  {
    "id" : "1672f324-3442-4ba2-9ebe-883cc221df98",
    "prId" : 18290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23382f6e-33a2-4505-802d-64cde24d88f3",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "not obvious to me, but this doesn't appear to be used.  where would this be useful?  am i missing an obvious kind?\n",
        "createdAt" : "2015-12-10T00:00:09Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "4f442b62-3adb-418a-b042-3875da6926e7",
        "parentId" : "23382f6e-33a2-4505-802d-64cde24d88f3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We have the \"hasSubresource\" code in pure \"DELETE\" path:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/api_installer.go#L554\n\nSince DeleteCollection is logicall a \"collection of deletions\", I think it makes sense to have it here.\n",
        "createdAt" : "2015-12-10T08:38:56Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9c824581-4cab-47a8-96e6-fbf21e11d247",
        "parentId" : "23382f6e-33a2-4505-802d-64cde24d88f3",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "ok, just wanted to ensure i wasn't crazy that this was not yet actually supported, but i can see how a kind may manage a collection of subresources and we would want delete on that collection.\n",
        "createdAt" : "2015-12-10T15:34:54Z",
        "updatedAt" : "2015-12-10T15:34:54Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f28bb68d8ce42ac803ec22574d5c3c19affeb0b9",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +575,579 @@\t\t\tdoc := \"delete collection of \" + kind\n\t\t\tif hasSubresource {\n\t\t\t\tdoc = \"delete collection of \" + subresource + \" of a \" + kind\n\t\t\t}\n\t\t\troute := ws.DELETE(action.Path).To(DeleteCollection(collectionDeleter, isCollectionDeleter, reqScope, admit))."
  },
  {
    "id" : "d837d6fe-40b4-4d62-b6e2-2e8ec4c64223",
    "prId" : 17956,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "What if several groups share the same getOptions in the future? Then the getOptionsGVString may not equal to reqScope.InternalVersion (which is the old behavior).\n\nI prefer the old way, using the reqScope.InternalVersion, which must be correct.\n",
        "createdAt" : "2015-12-01T19:02:06Z",
        "updatedAt" : "2015-12-01T21:50:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "7c7e98f3-7e03-401f-aba2-e1db80f4211e",
        "parentId" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I prefer the old way, using the reqScope.InternalVersion, which must be correct.\n\nI think you may have gotten the fields backwards.  The reason we had to have the hack (different version) before was precisely because the `reqScope.InternalVersion` was never correct unless you were in the legacy kube group.  For every other group, your `reqScope.InternalVersion` is for your group, but your `getOptions` were for `/v1` (or `unversioned`).\n\nThis code is done in the order that always correct:  \"Give me an instance of the `getOptions` type you expect and I'll determine the exact internal group.\"\n",
        "createdAt" : "2015-12-01T19:07:29Z",
        "updatedAt" : "2015-12-01T21:50:28Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c2ffe50a-7602-49b1-812d-49ab65593b8a",
        "parentId" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sorry for the continuous questions here, but let me ask one more. It seems the only getOptions in our code base is the PodLogOptions, it's handled at path `/pods/log`, and the reqScope.InternalVersion is \"\", which is correct. So my question is:\n\n> your reqScope.InternalVersion is for your group, but your getOptions were for /v1` (or unversioned)\n\nwhen will this happen?\n",
        "createdAt" : "2015-12-01T19:34:21Z",
        "updatedAt" : "2015-12-01T21:50:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "eb9a8cd0-54f2-47f6-9e40-28652f190132",
        "parentId" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Sorry for the continuous questions here, but let me ask one more. It seems the only getOptions in our code base is the PodLogOptions, it's handled at path /pods/log, and the reqScope.InternalVersion is \"\", which is correct. So my question is:\n> \n> your reqScope.InternalVersion is for your group, but your getOptions were for /v1` (or unversioned)\n> when will this happen?\n\nThis ends up mattering downstream when you're trying to have compatibility with other APIs.  The origin /logs endpoints as a for instance.  The final method destination is also shared with `ConnectResource` (the odd refactoring was done as part of the `ListOptions` work of all things).\n\nI think explicitly locating exactly what's needed gives us flexibility where we need it, since query parameters are not currently self-identifying.\n",
        "createdAt" : "2015-12-01T21:17:32Z",
        "updatedAt" : "2015-12-01T21:50:28Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d5840222-41aa-4a35-8bbb-41aeccc506a6",
        "parentId" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the detailed explanation. It makes sense.\n\nOne last comment, can we get rid of the reqScope.InternalVersion? It seems no one uses it anymore.\n",
        "createdAt" : "2015-12-01T21:43:06Z",
        "updatedAt" : "2015-12-01T21:50:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e3911583-8d07-4284-a2d6-8d73fed6d3a9",
        "parentId" : "c649e5f2-8d19-4ee3-bf83-114c46e35a0e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> One last comment, can we get rid of the reqScope.InternalVersion? It seems no one uses it anymore.\n\nGood call.  Removed.\n",
        "createdAt" : "2015-12-01T21:52:34Z",
        "updatedAt" : "2015-12-01T21:52:34Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7dd09ec47d6031a39d2090fc4cb10e13e44b995",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +226,230 @@\tif isGetterWithOptions {\n\t\tgetOptions, getSubpath, getSubpathKey = getterWithOptions.NewGetOptions()\n\t\tgetOptionsGVString, getOptionsKind, err := a.group.Typer.ObjectVersionAndKind(getOptions)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "a4bbd7a0-1aaf-45c1-a2a1-f869ce747d8e",
    "prId" : 17796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5e77b2-07ab-4291-a353-33b9f8e35f0d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "break or no?\n",
        "createdAt" : "2015-12-01T15:36:47Z",
        "updatedAt" : "2015-12-07T13:35:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f67e1a53-b08e-447d-bdc6-1e542431490e",
        "parentId" : "3f5e77b2-07ab-4291-a353-33b9f8e35f0d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> break or no?\n\nI think I want an actual match to override this \"match\".  That way you can specify exactly what you mean.\n",
        "createdAt" : "2015-12-01T15:50:52Z",
        "updatedAt" : "2015-12-07T13:35:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f764e0099c48de55f6f2dfbffd00e9aeb2bb37c1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +140,144 @@\t\t\tfqKindToRegister = fqKind\n\t\t\tfqKindToRegister.Group = a.group.GroupVersion.Group\n\t\t\tfqKindToRegister.Version = a.group.GroupVersion.Version\n\t\t}\n\t}"
  },
  {
    "id" : "01b0dab4-f290-40e5-aa94-881a014e2914",
    "prId" : 17175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55f0efd1-41f5-4349-ad97-925bcb1607ff",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do you want to change the signature of RESTMapping to use GroupVersion instead of string?\n",
        "createdAt" : "2015-11-12T20:55:15Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "952b3619-3113-4ce3-b3d6-1782f840f965",
        "parentId" : "55f0efd1-41f5-4349-ad97-925bcb1607ff",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "one step at a time. I vastly prefer a PR that addresses one package at a time for a sweeping change like this\n",
        "createdAt" : "2015-11-12T20:57:49Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2f4eee81-db65-4824-a268-985f088af25c",
        "parentId" : "55f0efd1-41f5-4349-ad97-925bcb1607ff",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I mean do you plan to do that in the future?\n",
        "createdAt" : "2015-11-12T20:57:50Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b60a0f46-fa49-4dd9-ad48-7f2c85c39223",
        "parentId" : "55f0efd1-41f5-4349-ad97-925bcb1607ff",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Do you want to change the signature of RESTMapping to use GroupVersion instead of string?\n\nI've just started by adjusting `RESTMapping` to use a `GroupVersionKind` and rippling that out instead of `APIVersion` and `Kind`\n",
        "createdAt" : "2015-11-12T20:58:20Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2b7dfecc-032f-4c6a-b2a8-e2981482c4d7",
        "parentId" : "55f0efd1-41f5-4349-ad97-925bcb1607ff",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Do you want to change the signature of RESTMapping to use GroupVersion instead of string?\n\nAlso,  yes, that's on my list.  I'm trying to keep these pieces small though..\n",
        "createdAt" : "2015-11-12T20:59:02Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c725f17ea4d83088050ce75e64f6f42ac7f96aa",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +149,153 @@\t\t\treturn nil, err\n\t\t}\n\t\tparentMapping, err := a.group.Mapper.RESTMapping(parentKind, a.group.GroupVersion.String())\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "e2bf98e2-3209-4512-89f4-3177b8ba6367",
    "prId" : 14926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "924dab52-bbe4-4fa8-bc0a-85929dcaeb0b",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp this is a new change after your last review. PTAL. Thank you!\n",
        "createdAt" : "2015-10-01T22:16:40Z",
        "updatedAt" : "2015-10-02T01:33:06Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f1df304f-1e42-4612-99f9-3f20ea7a266c",
        "parentId" : "924dab52-bbe4-4fa8-bc0a-85929dcaeb0b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "LGTM\n",
        "createdAt" : "2015-10-01T23:40:56Z",
        "updatedAt" : "2015-10-02T01:33:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4927cec3be9d9a5eeab78fad420c9a5b320a2618",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +91,95 @@\tws := new(restful.WebService)\n\tws.Path(a.prefix)\n\t// a.prefix contains \"prefix/group/version\"\n\tws.Doc(\"API at \" + a.prefix)\n\t// TODO: change to restful.MIME_JSON when we set content type in client"
  },
  {
    "id" : "a96f151b-88b1-44a1-9261-28ed71b17bbb",
    "prId" : 13525,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1831a872-67e6-4b61-920f-067120e1e535",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add godoc.\n",
        "createdAt" : "2015-09-11T23:17:28Z",
        "updatedAt" : "2015-09-14T20:34:17Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "158eb08f-7e4d-4800-af9c-fd9018fff504",
        "parentId" : "1831a872-67e6-4b61-920f-067120e1e535",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "updated\n",
        "createdAt" : "2015-09-13T22:17:36Z",
        "updatedAt" : "2015-09-14T20:34:17Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c90d3a5efd52aade2b36d1b3c3f1a851aacec1d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +84,88 @@\n// NewWebService creates a new restful webservice with the api installer's prefix and version.\nfunc (a *APIInstaller) NewWebService() *restful.WebService {\n\tws := new(restful.WebService)\n\tws.Path(a.prefix)"
  },
  {
    "id" : "cfd6b09e-4c0b-4558-a1fb-6605cff045a9",
    "prId" : 12507,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f7c6cbc-f32a-4472-8dac-ca06295a023c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This seems wrong to me. At minimum, there would need to be a comment explaining why this is doing this.\n",
        "createdAt" : "2015-08-19T04:07:16Z",
        "updatedAt" : "2015-09-18T19:27:00Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "809dec43-a4a4-461b-8b42-969296c7bfd4",
        "parentId" : "1f7c6cbc-f32a-4472-8dac-ca06295a023c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ping.\n",
        "createdAt" : "2015-08-25T18:35:04Z",
        "updatedAt" : "2015-09-18T19:27:00Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "24b35c48-0402-46d9-b6e4-e0507c9b9809",
        "parentId" : "1f7c6cbc-f32a-4472-8dac-ca06295a023c",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I am trying to figure out a way to express this as \n\n```\n\"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      },\n```\n\nhttps://github.com/emicklei/go-restful/issues/225\n\nWill update the PR once I have it working\n",
        "createdAt" : "2015-08-28T21:09:47Z",
        "updatedAt" : "2015-09-18T19:27:00Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ee799e1810495f795c32befa8c22b6101aa9978",
    "line" : null,
    "diffHunk" : "@@ -1,1 +829,833 @@\tcase \"byte\":\n\t\treturn \"string\"\n\tcase \"[]string\":\n\t\t// TODO: Fix this when go-restful supports a way to specify an array query param:\n\t\t// https://github.com/emicklei/go-restful/issues/225"
  },
  {
    "id" : "e76246ed-9475-4cd5-a975-93caab8d339d",
    "prId" : 10426,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c79af5b-cf8f-4270-867b-99f53e17e859",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Sorry I cant find where is this NewGetOptions() method implemented?\nhttps://github.com/GoogleCloudPlatform/kubernetes/search?utf8=%E2%9C%93&q=NewGetOptions returns the implementation for PodLogOptions only.\nI am wondering why does getOptions not have any of these parameters?\n",
        "createdAt" : "2015-07-29T20:30:12Z",
        "updatedAt" : "2015-07-29T20:30:12Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "2ae78690-14d9-42d5-878f-cee9dfac946e",
        "parentId" : "5c79af5b-cf8f-4270-867b-99f53e17e859",
        "authorId" : "3a60a43e-3e3d-40f9-b82d-24959d7af0d3",
        "body" : "Yes, it's currently only implemented by the pod's LogREST storage. It's purpose is to allow the implementing REST storage to receive additional parameters in its get request. The getOptions object is meant to be introspected to correlate request parameters to options object fields, the subpath and subpathkey make it possible to set one of the fields to correspond to the path parameter in the request url.\n",
        "createdAt" : "2015-07-29T21:20:43Z",
        "updatedAt" : "2015-07-29T21:20:43Z",
        "lastEditedBy" : "3a60a43e-3e3d-40f9-b82d-24959d7af0d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a84fa79a01e0ad279f451687ad6de2d260649b03",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +212,216 @@\t)\n\tif isGetterWithOptions {\n\t\tgetOptions, getSubpath, getSubpathKey = getterWithOptions.NewGetOptions()\n\t\t_, getOptionsKind, err = a.group.Typer.ObjectVersionAndKind(getOptions)\n\t\tif err != nil {"
  },
  {
    "id" : "825b340f-f1c7-4211-93e8-fb47a79cb3f2",
    "prId" : 9991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "349ad535-71c4-446a-9098-0e28020470aa",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think we might need this, but I can't remember where.  Will look it up in the morning - please hold till then.\n",
        "createdAt" : "2015-06-18T00:17:58Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c43610d4-8ca8-44be-863f-9bd156eb03be",
        "parentId" : "349ad535-71c4-446a-9098-0e28020470aa",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "@smarterclayton Do you still want the hold? Or is this fine to submit once it is LGTM'd?\n",
        "createdAt" : "2015-06-18T18:29:20Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "15d6dd18-a143-4749-8aed-6a02dc5ad9b8",
        "parentId" : "349ad535-71c4-446a-9098-0e28020470aa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hold is removed - if we need it we can easily fix it.\n\n----- Original Message -----\n\n> > @@ -321,10 +321,12 @@ func (a *APIInstaller) registerResourceHandlers(path\n> > string, storage rest.Storag\n> > \n> > ```\n> >         // list or post across namespace.\n> >         // TODO: more strongly type whether a resource allows these actions on\n> >         \"all namespaces\" (bulk delete)\n> > ```\n> > -           namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix,\n> >   itemPath), true}\n> > -           actions = appendIf(actions, action{\"LIST\", resource, params, namer},\n> >   isLister)\n> > -           actions = appendIf(actions, action{\"POST\", resource, params, namer},\n> >   isCreater)\n> > -           actions = appendIf(actions, action{\"WATCHLIST\", \"watch/\" + resource,\n> >   params, namer}, allowWatchList)\n> > -           if !hasSubresource {\n> \n> @smarterclayton Do you still want the hold? Or is this fine to submit once it\n> is LGTM'd?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9991/files#r32762352\n",
        "createdAt" : "2015-06-18T19:17:31Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3d579f59d7340c9a833ec2110d5adfe1c0677a0",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +328,332 @@\t\t\t// For ex: LIST all pods in all namespaces by sending a LIST request at /api/apiVersion/pods.\n\t\t\t// TODO: more strongly type whether a resource allows these actions on \"all namespaces\" (bulk delete)\n\t\t\tif !hasSubresource {\n\t\t\t\tnamer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix, itemPath), true}\n\t\t\t\tactions = appendIf(actions, action{\"LIST\", resource, params, namer}, isLister)"
  },
  {
    "id" : "b4574442-2fab-4be0-9cb4-4f8f4915ad12",
    "prId" : 9991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "IIRC, we POST /binding and PUT /status.\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/registry/pod/etcd/etcd.go#L123\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/registry/pod/etcd/etcd.go#L202\n\nThe description and operation name (createBindingBinding) are laughably horrible, though.\n",
        "createdAt" : "2015-06-18T03:58:58Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e5192809-5e1b-4227-8779-c0ecc089433e",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Oh, this is the deprecated top-level /binding API. Can't we nuke that entirely by now?\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/master/master.go#L467\n",
        "createdAt" : "2015-06-18T04:02:20Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3fdb1854-bf17-4cd0-9787-62d7780239e9",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not sure if the scheduler has been switched - there was a commented out block when I put pods/binding in\n\n> On Jun 18, 2015, at 12:02 AM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/apiserver/api_installer.go:\n> \n> > @@ -321,10 +321,12 @@ func (a *APIInstaller) registerResourceHandlers(path string, storage rest.Storag\n> > \n> > ```\n> >         // list or post across namespace.\n> >         // TODO: more strongly type whether a resource allows these actions on \"all namespaces\" (bulk delete)\n> > ```\n> > -           namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix, itemPath), true}\n> > -           actions = appendIf(actions, action{\"LIST\", resource, params, namer}, isLister)\n> > -           actions = appendIf(actions, action{\"POST\", resource, params, namer}, isCreater)\n> > -           actions = appendIf(actions, action{\"WATCHLIST\", \"watch/\" + resource, params, namer}, allowWatchList)\n> > -           if !hasSubresource {\n> > -               namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix, itemPath), true}\n> > -               actions = appendIf(actions, action{\"LIST\", resource, params, namer}, isLister)\n> > -               actions = appendIf(actions, action{\"POST\", resource, params, namer}, isCreater)\n> >   Oh, this is the deprecated top-level /binding API. Can't we nuke that entirely by now?\n> >   https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/master/master.go#L467\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-06-18T04:24:32Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6456e819-91f2-4438-b8ca-6950ca7b576f",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Sadly, it looks like you're right:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/5520386b180d3ddc4fa7b7dfe6f52642cc0c25f3/plugin/pkg/scheduler/factory/factory.go#L311\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/52db576617a5d0c10d9ea30ab031f8f4609ddaf4/contrib/mesos/pkg/scheduler/plugin.go#L119\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/241e87cf9b4bfd810fcd92141ee70ff7a201a96b/contrib/mesos/pkg/executor/executor.go#L470\n\nThe client method exists but appears to not be used:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/5520386b180d3ddc4fa7b7dfe6f52642cc0c25f3/pkg/client/pods.go#L112\n",
        "createdAt" : "2015-06-18T05:41:16Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e20cb8cc-0621-4dfd-9552-8bbb086a8328",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This is to stop adding another POST method for pods/ while processing pods/binding.\nIt is correctly added while processing pods.\nRight now,  it is added twice resulting in the `#/apis/56/operations/2/method: Operation method already defined: POST` error\n",
        "createdAt" : "2015-06-18T16:47:21Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "33f2b44c-37d2-4583-bc1a-822bc57e12a6",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think we need to define something in the rest handler that specifies whether it supports all-namespaces, and whether those verbs are allowed (LIST/POST).  As a short term fix this is acceptable, but we'll have to come back with a patch that supports this.\n\nThe way I would envision the long-term fix is:\n\npkg/api/rest/rest.go:\n\n  type CrossNamespaceScoped interface {\n    SupportsCrossNamespace() <returns something that identifies which interface methods among rest.Creator rest.Updater rest.Deletor allow cross namespace, maybe a rest.Storage object again>\n  }\n\nWe want to stop assuming that every resource supports cross namespace calls (that's lead to several security holes), but we want to very explicitly tie the interface to the binding.\n\n----- Original Message -----\n\n> > @@ -321,10 +321,12 @@ func (a *APIInstaller) registerResourceHandlers(path\n> > string, storage rest.Storag\n> > \n> > ```\n> >         // list or post across namespace.\n> >         // TODO: more strongly type whether a resource allows these actions on\n> >         \"all namespaces\" (bulk delete)\n> > ```\n> > -           namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix,\n> >   itemPath), true}\n> > -           actions = appendIf(actions, action{\"LIST\", resource, params, namer},\n> >   isLister)\n> > -           actions = appendIf(actions, action{\"POST\", resource, params, namer},\n> >   isCreater)\n> > -           actions = appendIf(actions, action{\"WATCHLIST\", \"watch/\" + resource,\n> >   params, namer}, allowWatchList)\n> > -           if !hasSubresource {\n> > -               namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix,\n> >   itemPath), true}\n> > -               actions = appendIf(actions, action{\"LIST\", resource, params, namer},\n> >   isLister)\n> > -               actions = appendIf(actions, action{\"POST\", resource, params, namer},\n> >   isCreater)\n> \n> This is to stop adding another POST method for pods/ while processing\n> pods/binding.\n> It is correctly added while processing pods.\n> Right now,  it is added twice resulting in the\n> `#/apis/56/operations/2/method: Operation method already defined: POST`\n> error\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9991/files#r32751166\n",
        "createdAt" : "2015-06-18T17:14:29Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "132c3b38-d62f-4c53-bb6c-9aca76ef5bed",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Do we need cross-namespace POST for anything? If not, we should remove it. If so, I think it needs to be distinguished from LIST and WATCH.\n\nThe fully a la carte approach is flexible, but makes it kind of hard to understand what combinations of operations we do/should actually support. \n\nWe have only a handful of combinations that make sense (maybe not 100% exhaustive, but close, I think, esp. once we eliminate the legacy prefix-based verbs: /bindings, /proxy/..., /watch/...):\n- Non-namespaced collections\n- Namespaced collections\n- Subresources for special mutations\n- Subresources for proxying\n  - full HTTP proxying\n  - restricted proxing\n\nIt might be worthwhile to define some \"profiles\" for these common patterns.\n",
        "createdAt" : "2015-06-18T18:10:33Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e0d1552f-ecae-4d38-b8d6-61788a6c8baf",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Added some comments to the code.\nFiled https://github.com/GoogleCloudPlatform/kubernetes/issues/10043 to keep track of deleting /binding.\n",
        "createdAt" : "2015-06-18T18:14:38Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "3a0d3cf4-f1e0-418d-9ce3-40263310eaff",
        "parentId" : "77ad1d49-3306-411d-8f5d-e6be278459f8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "----- Original Message -----\n\n> > @@ -321,10 +321,12 @@ func (a *APIInstaller) registerResourceHandlers(path\n> > string, storage rest.Storag\n> > \n> > ```\n> >         // list or post across namespace.\n> >         // TODO: more strongly type whether a resource allows these actions on\n> >         \"all namespaces\" (bulk delete)\n> > ```\n> > -           namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix,\n> >   itemPath), true}\n> > -           actions = appendIf(actions, action{\"LIST\", resource, params, namer},\n> >   isLister)\n> > -           actions = appendIf(actions, action{\"POST\", resource, params, namer},\n> >   isCreater)\n> > -           actions = appendIf(actions, action{\"WATCHLIST\", \"watch/\" + resource,\n> >   params, namer}, allowWatchList)\n> > -           if !hasSubresource {\n> > -               namer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix,\n> >   itemPath), true}\n> > -               actions = appendIf(actions, action{\"LIST\", resource, params, namer},\n> >   isLister)\n> > -               actions = appendIf(actions, action{\"POST\", resource, params, namer},\n> >   isCreater)\n> \n> Do we need cross-namespace POST for anything? If not, we should remove it. If\n> so, I think it needs to be distinguished from LIST and WATCH.\n\nWe use cross namespace POST for our ResourceAccessReview and SubjectAccessReview endpoints in OpenShift - where you ask the server whether you have permission to do something.  Those are modeled using apiserver/installer today, and they apply to both cluster and non-cluster scoped resources.\n\n> The fully a la carte approach is flexible, but makes it kind of hard to\n> understand what combinations of operations we do/should actually support.\n> \n> We have only a handful of combinations that make sense (maybe not 100%\n> exhaustive, but close, I think, esp. once we eliminate the legacy\n> prefix-based verbs: /bindings, /proxy/..., /watch/...):\n> - Non-namespaced collections\n> - Namespaced collections\n> - Subresources for special mutations\n> - Subresources for proxying\n>   - full HTTP proxying\n>   - restricted proxing\n> \n> It might be worthwhile to define some \"profiles\" for these common patterns.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9991/files#r32760114\n",
        "createdAt" : "2015-06-18T19:18:25Z",
        "updatedAt" : "2015-06-18T20:51:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3d579f59d7340c9a833ec2110d5adfe1c0677a0",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +331,335 @@\t\t\t\tnamer = scopeNaming{scope, a.group.Linker, gpath.Join(a.prefix, itemPath), true}\n\t\t\t\tactions = appendIf(actions, action{\"LIST\", resource, params, namer}, isLister)\n\t\t\t\tactions = appendIf(actions, action{\"POST\", resource, params, namer}, isCreater)\n\t\t\t\tactions = appendIf(actions, action{\"WATCHLIST\", \"watch/\" + resource, params, namer}, allowWatchList)\n\t\t\t}"
  },
  {
    "id" : "2f5ec0a3-a443-424e-9457-b81080866bdb",
    "prId" : 9600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "805af4e1-cbfc-4018-b333-d395767d5b0e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@smarterclayton can you take a look at this? `rootScopeNaming#GenerateLink` returned an err if Name was empty, and `TestSelfLinkSkipsEmptyName` was complaining unless scopeNaming#GenerateLink behaved similarly\n",
        "createdAt" : "2015-06-10T20:24:28Z",
        "updatedAt" : "2015-06-17T02:40:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a341b8f44fa4b35377094d40d85e511571ec278a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +681,685 @@\tif len(name) == 0 {\n\t\treturn \"\", \"\", errEmptyName\n\t}\n\tpath = strings.Replace(n.itemPath, \"{name}\", name, 1)\n\tpath = strings.Replace(path, \"{\"+n.scope.ParamName()+\"}\", namespace, 1)"
  },
  {
    "id" : "aca292e9-d752-4a44-b7b3-d6ea357c14c2",
    "prId" : 9600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ba0661-c27f-48f0-b7e9-a3209a1510de",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why not just completely remove ParamPath()?\n",
        "createdAt" : "2015-06-17T23:25:45Z",
        "updatedAt" : "2015-06-17T23:25:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a341b8f44fa4b35377094d40d85e511571ec278a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +283,287 @@\t} else {\n\t\t// v1beta3+ format with namespace in path\n\t\tif scope.ParamPath() {\n\t\t\t// Handler for standard REST verbs (GET, PUT, POST and DELETE).\n\t\t\tnamespaceParam := ws.PathParameter(scope.ParamName(), scope.ParamDescription()).DataType(\"string\")"
  },
  {
    "id" : "26fc9e78-1af5-46d2-8c14-c8e3734787f9",
    "prId" : 9361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42ca9617-a186-4f17-8732-b5d8728b3c90",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We should add Param to WATCHLIST, also, for consistency.\n",
        "createdAt" : "2015-06-08T23:57:50Z",
        "updatedAt" : "2015-06-09T04:32:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "2657b771-724b-4911-bf2c-e9e61b3867dd",
        "parentId" : "42ca9617-a186-4f17-8732-b5d8728b3c90",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done (it's marked deprecated so I skipped it...)\n",
        "createdAt" : "2015-06-09T04:33:07Z",
        "updatedAt" : "2015-06-09T04:33:07Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b68ddbaf75ac9fa09a98ca16a31ef83004c0599c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +504,508 @@\t\t\t\tFilter(m).\n\t\t\t\tDoc(\"watch changes to an object of kind \"+kind).\n\t\t\t\tParam(ws.QueryParameter(\"pretty\", \"If 'true', then the output is pretty printed.\")).\n\t\t\t\tOperation(\"watch\"+kind).\n\t\t\t\tProduces(\"application/json\")."
  },
  {
    "id" : "d8c98cde-92b6-49ff-b280-85fd70d082b3",
    "prId" : 7969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ffecc80-e233-44cd-b32b-3e26921ded8e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if the scopes aren't equal, should we err rather than stomp?\n",
        "createdAt" : "2015-05-08T17:27:20Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6afa7360-e309-417d-916f-43ec1d215205",
        "parentId" : "2ffecc80-e233-44cd-b32b-3e26921ded8e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "No - the scope of the child is immaterial in a sub resource.  Sub resources detach scope from kind - the scope is \"the scope of my parent\" always.\n",
        "createdAt" : "2015-05-11T13:57:07Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbca9eb171b9a1f978b9676595db1dac181fa90",
    "line" : null,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\t\treturn err\n\t\t}\n\t\tmapping.Scope = parentMapping.Scope\n\t}\n"
  },
  {
    "id" : "7163b69f-85f7-4519-a55e-344f9f4a2e64",
    "prId" : 7969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba389dc8-89e6-4491-98d4-226b39d3adad",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should this block only be done in the `if !ok || len(values) == 0 {` case? Otherwise a request to `/v1beta1/minions?namespace=bar` is interpreted as namespace none, which doesn't seem right\n",
        "createdAt" : "2015-05-08T17:30:24Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c378cb20-b1f1-4edf-9065-98a0f8414d58",
        "parentId" : "ba389dc8-89e6-4491-98d4-226b39d3adad",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does this break events, which can either have a namespace or not depending on what they are for?\n",
        "createdAt" : "2015-05-08T19:08:22Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "05a2aff9-2c6d-4031-ba09-0705fbdb8e76",
        "parentId" : "ba389dc8-89e6-4491-98d4-226b39d3adad",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Good question, will dig in more.\n\n----- Original Message -----\n\n> > @@ -689,6 +709,9 @@ var _ ScopeNamer = legacyScopeNaming{}\n> > \n> >  // Namespace returns the namespace from the query or the default.\n> >  func (n legacyScopeNaming) Namespace(req *restful.Request) (namespace\n> >  string, err error) {\n> > -   if n.scope.Name() == meta.RESTScopeNameRoot {\n> \n> Does this break events, which can either have a namespace or not depending on\n> what they are for?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7969/files#r29967847\n",
        "createdAt" : "2015-05-08T19:40:01Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7aee807f-ddb5-4da7-a924-5a019b516f2d",
        "parentId" : "ba389dc8-89e6-4491-98d4-226b39d3adad",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Events are namespaced scoped, so all three combinations are valid (empty and default to \"default\", set, and empty and no default applied).\n\nThe larger issue which I won't fix here is that we have a few other resources that are namespaced AND root scoped - events, and in openshift the subject and resource access reviews (which you can ask \"can I do this\" which involves actions in and out of namespaces).  For right now, they are listed as namespaced actions and api.NamespaceAll is a valid option for them.  We probably need to more formally define resources that support NamespaceAll, since there are other actions beyond \"get collection\" you might want to expose on a namespace all resource (post on the root to create a root event).\n",
        "createdAt" : "2015-05-11T14:02:08Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbca9eb171b9a1f978b9676595db1dac181fa90",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +712,716 @@// Namespace returns the namespace from the query or the default.\nfunc (n legacyScopeNaming) Namespace(req *restful.Request) (namespace string, err error) {\n\tif n.scope.Name() == meta.RESTScopeNameRoot {\n\t\treturn api.NamespaceNone, nil\n\t}"
  },
  {
    "id" : "a10a555e-606f-4aed-8ab3-b892e9473914",
    "prId" : 7950,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a54cd88-0dce-4c1c-baa2-7b71a8dd503b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Awesome-- how about adding TRACE while you're here?\n",
        "createdAt" : "2015-05-08T17:22:56Z",
        "updatedAt" : "2015-05-08T17:34:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "772dcf85-fa55-45e5-a90a-952541a83290",
        "parentId" : "2a54cd88-0dce-4c1c-baa2-7b71a8dd503b",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Done.\n",
        "createdAt" : "2015-05-08T17:34:27Z",
        "updatedAt" : "2015-05-08T17:34:27Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      }
    ],
    "commit" : "220e754f3eb4775314139ee6e715ffa8c7d40261",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +515,519 @@\t\t\taddProxyRoute(ws, \"POST\", a.prefix, action.Path, proxyHandler, kind, resource, action.Params)\n\t\t\taddProxyRoute(ws, \"DELETE\", a.prefix, action.Path, proxyHandler, kind, resource, action.Params)\n\t\t\taddProxyRoute(ws, \"HEAD\", a.prefix, action.Path, proxyHandler, kind, resource, action.Params)\n\t\t\taddProxyRoute(ws, \"TRACE\", a.prefix, action.Path, proxyHandler, kind, resource, action.Params)\n\t\tcase \"CONNECT\":"
  },
  {
    "id" : "033ef93a-71fb-49b2-b332-1d477d0ff941",
    "prId" : 6613,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f64f54f9-db68-412e-b439-59371e190e39",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Delete returns Status.\n",
        "createdAt" : "2015-04-09T03:24:44Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c4ba0a35-09b1-4c28-b2ef-0741a8f0f933",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-04-09T20:16:31Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "5688ea04-a5d8-46bc-9025-bd250839f04c",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Needs to be the versioned object, not the internal one.\n",
        "createdAt" : "2015-04-09T20:30:20Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9deb0789-fe7e-4d30-b6c2-85617eea4417",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done (had to create versionedStatus)\n",
        "createdAt" : "2015-04-09T22:32:32Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "ec3e8603-1285-4f1d-ab92-74e06f4e12d9",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This shows up as `*v1beta1.Status` in the swagger output. You need to deref the pointer.\n",
        "createdAt" : "2015-04-09T23:25:24Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0b901b01-b485-4e09-b9a9-cd979d175df9",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ah, you copied a pattern that was broken. DeleteOptions and ListOptions have the same problem.\n\nPlease fix these as long as you're there. See:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/apiserver/api_installer.go#L122\n",
        "createdAt" : "2015-04-09T23:30:02Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "dc73dcb9-e1fc-4383-8342-af06b09d5f73",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Fixed (although ListOptions appeared to actually already be correct)\n",
        "createdAt" : "2015-04-10T03:18:13Z",
        "updatedAt" : "2015-04-10T03:18:13Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "9f3bab43-096e-46fd-9e79-4664aef47dbc",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "ListOptions looks broken to me, but nothing seems to use it.\n",
        "createdAt" : "2015-04-10T06:02:27Z",
        "updatedAt" : "2015-04-10T06:02:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "211d3857-9033-4644-b5fe-a0925df938d8",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "What do you mean by nothing seems to use it?  It should be used to deserialize List options.\n",
        "createdAt" : "2015-04-10T15:49:48Z",
        "updatedAt" : "2015-04-10T15:49:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8f2c5035-9489-4922-8c61-307823797caf",
        "parentId" : "f64f54f9-db68-412e-b439-59371e190e39",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I didn't find it anywhere in the swagger output.\n",
        "createdAt" : "2015-04-10T16:26:30Z",
        "updatedAt" : "2015-04-10T16:26:30Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8694f6f550ba8b0ee105f3612c2ddaff3ee569f8",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +408,412 @@\t\t\taddParams(route, action.Params)\n\t\t\tws.Route(route)\n\t\tcase \"DELETE\": // Delete a resource.\n\t\t\troute := ws.DELETE(action.Path).To(DeleteResource(gracefulDeleter, isGracefulDeleter, reqScope, admit)).\n\t\t\t\tFilter(m)."
  },
  {
    "id" : "1e2b2d0f-87d4-40f8-8baa-cb0590cc73b4",
    "prId" : 6613,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed034f8c-ab12-4f13-9a2c-b06ca9130160",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What is up with these spacing changes? did gofmt change?\n",
        "createdAt" : "2015-04-09T17:21:50Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "831bb8ef-71c5-4615-b965-374de6d3be9e",
        "parentId" : "ed034f8c-ab12-4f13-9a2c-b06ca9130160",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It's not gofmt. Delete wasn't changed.\n",
        "createdAt" : "2015-04-09T17:56:31Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6c383bd5-3e6f-42ec-8e9e-24db18ffead3",
        "parentId" : "ed034f8c-ab12-4f13-9a2c-b06ca9130160",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I think this file got checked in non-gofmt'd somehow, and since I changed it, it now forced me to gofmt it.\n\nWe only run gofmt on changes afaik.\n\n(anyway, the change itself was due to gofmt, I didn't make the changes myself)\n",
        "createdAt" : "2015-04-09T20:05:09Z",
        "updatedAt" : "2015-04-10T03:16:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "8694f6f550ba8b0ee105f3612c2ddaff3ee569f8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +344,348 @@\t\t\t\tFilter(m).\n\t\t\t\tDoc(\"read the specified \"+kind).\n\t\t\t\tOperation(\"read\"+kind).\n\t\t\t\tProduces(append(storageMeta.ProducesMIMETypes(action.Verb), \"application/json\")...).\n\t\t\t\tReturns(http.StatusOK, \"OK\", versionedObject)."
  },
  {
    "id" : "30c2ffd8-fc5d-4d9d-9084-e3dfc5bb6c7e",
    "prId" : 6117,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f857fb-d215-4535-ac09-1990e078cf11",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@brendandburns @nikhiljindal Oops. This should have been `time.Time`, to match https://github.com/emicklei/go-restful/blob/master/swagger/model_builder.go#L279. However, I think we'd need `util.Time`, since we wrap time.Time.\n",
        "createdAt" : "2015-04-01T20:15:54Z",
        "updatedAt" : "2015-04-01T20:15:54Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee0d71aac6c7f51f720f33e3d60f1350652de972",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +731,735 @@\tcase \"float64\", \"float32\":\n\t\treturn \"number\"\n\tcase \"time/Time\":\n\t\treturn \"string\"\n\tdefault:"
  },
  {
    "id" : "faef59bf-3fba-43e0-8895-8e6b990744ce",
    "prId" : 5763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b56a09a-c1dc-4642-9d57-f10571559549",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "A comment with an example of what this does would be helpful to others.\n",
        "createdAt" : "2015-03-25T01:56:53Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "870da687d0c2477dc7be1c659a379cfa35a2e850",
    "line" : null,
    "diffHunk" : "@@ -1,1 +677,681 @@// the JSON field name. If a description struct tag is set on the field, that description is used on the\n// query parameter. In essence, it converts a standard JSON top level object into a query param schema.\nfunc addObjectParams(ws *restful.WebService, route *restful.RouteBuilder, obj runtime.Object) error {\n\tsv, err := conversion.EnforcePtr(obj)\n\tif err != nil {"
  },
  {
    "id" : "28bc2a2d-d482-49d1-b0da-c9db62f2df1b",
    "prId" : 5426,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a034575-90d2-4bdb-bb7f-2d60b13cc9ee",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Why not:\n\n```\nfor i, path := range a.group.Storage {\n```\n\n? Since this is really a projection function?\nYou don't need to change it -- I thought I would just ask.\nAnother pattern is `paths := []string{}` and then `paths = append(paths, path)` but what you have written is perhaps a little better for allocation.\n",
        "createdAt" : "2015-03-13T06:26:42Z",
        "updatedAt" : "2015-03-13T06:29:56Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "f1da5234-61d7-4247-a10e-70032f3acfcd",
        "parentId" : "2a034575-90d2-4bdb-bb7f-2d60b13cc9ee",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "IIUC, That will not work because a.group.Storage is a map. There is no concept of an index in a map.\n\n```\nfor i, path := range a.group.Storage {\n```\n\nwill give me the key in i and value in path.\n\nRegarding using\n\n```\npaths := []string{}\npaths = append(paths, path)\n```\n\nYes. What I have, I believe, is better for allocation.\n",
        "createdAt" : "2015-03-13T07:57:58Z",
        "updatedAt" : "2015-03-13T07:57:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b1e8589e9d2638032e5e20261ab01d58bcece71",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +70,74 @@\tpaths := make([]string, len(a.group.Storage))\n\tvar i int = 0\n\tfor path := range a.group.Storage {\n\t\tpaths[i] = path\n\t\ti++"
  },
  {
    "id" : "b270eb73-0750-4e01-9627-d61413c3cf99",
    "prId" : 4395,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a43c556-5454-4481-9a7e-fdf70e7b062d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Doesn't have to be done for this PR, but it would be useful to factor out the common lines of code between the two cases. Or maybe we should just eliminate v1beta1. :-)\n",
        "createdAt" : "2015-02-17T16:00:32Z",
        "updatedAt" : "2015-02-17T16:00:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "eebe00c25950b79328cc574905a1ead761315e94",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +221,225 @@\t\t\tnamer := legacyScopeNaming{scope, a.group.linker, gpath.Join(a.prefix, itemPath)}\n\n\t\t\tactions = appendIf(actions, action{\"LIST\", path, namespaceParams, namer}, storageVerbs[\"RESTLister\"])\n\t\t\tactions = appendIf(actions, action{\"POST\", path, namespaceParams, namer}, storageVerbs[\"RESTCreater\"])\n\t\t\tactions = appendIf(actions, action{\"WATCHLIST\", \"/watch/\" + path, namespaceParams, namer}, allowWatchList)"
  },
  {
    "id" : "b7e92fa8-b15c-4496-9f30-0caabaa93641",
    "prId" : 4263,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261cdbff-7c77-4595-83e0-0d69b027f05e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why doesn't it make sense to just pass a.group, as opposed to the individual fields? Because they're all private, currently?\n",
        "createdAt" : "2015-02-12T00:34:38Z",
        "updatedAt" : "2015-02-12T14:45:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e9e60538-75ef-4898-b456-d9024818ef72",
        "parentId" : "261cdbff-7c77-4595-83e0-0d69b027f05e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, I think I'd like to refactor watch and redirect like the other methods, at which point group can be refactored out as well.\n\n> On Feb 11, 2015, at 7:34 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/apiserver/api_installer.go:\n> \n> > @@ -49,16 +53,16 @@ func (a *APIInstaller) Install() (ws *restful.WebService, errors []error) {\n> > \n> > ```\n> > // Initialize the custom handlers.\n> > watchHandler := (&WatchHandler{\n> > ```\n> > -       storage:                a.restHandler.storage,\n> > -       codec:                  a.restHandler.codec,\n> > -       canonicalPrefix:        a.restHandler.canonicalPrefix,\n> > -       selfLinker:             a.restHandler.selfLinker,\n> > -       apiRequestInfoResolver: a.restHandler.apiRequestInfoResolver,\n> > -       storage: a.group.storage,\n> >   Why doesn't it make sense to just pass a.group, as opposed to the individual fields? Because they're all private, currently?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-12T00:39:57Z",
        "updatedAt" : "2015-02-12T14:45:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6fdac13651922db320a2f7276a294cc4eb6e5ac",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +57,61 @@\t// Initialize the custom handlers.\n\twatchHandler := (&WatchHandler{\n\t\tstorage: a.group.storage,\n\t\tcodec:   a.group.codec,\n\t\tprefix:  a.group.prefix,"
  },
  {
    "id" : "f58227aa-285f-4c6b-94bf-2587af50d5f2",
    "prId" : 4263,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd037228-5240-49da-b1ff-1c0329d16154",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'm still a Go newbie, I guess. What does this do? I don't see a definition of namespace.\n",
        "createdAt" : "2015-02-12T10:15:02Z",
        "updatedAt" : "2015-02-12T14:45:25Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "cd16b69b-63f8-417b-b16a-7f1fa8bc7e42",
        "parentId" : "dd037228-5240-49da-b1ff-1c0329d16154",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Its a named return parameter, which have zero values to start.\n\nHowever, this made me realize that empty names and namespaces (for namespaced scopes) must be rejected with an error.  Will fix that.\n\n> On Feb 12, 2015, at 5:15 AM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/apiserver/api_installer.go:\n> \n> > @@ -148,6 +171,19 @@ func (a *APIInstaller) registerResourceHandlers(path string, storage RESTStorage\n> > \n> > ```\n> >     itemPath := path + \"/{name}\"\n> >     nameParams := append(params, nameParam)\n> > ```\n> > -       namespaceFn = func(req *restful.Request) (namespace string, err error) {\n> > -           return\n> >   I'm still a Go newbie, I guess. What does this do? I don't see a definition of namespace.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-12T13:42:45Z",
        "updatedAt" : "2015-02-12T14:45:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3114df16-c180-4c0c-8574-9deedaea5e45",
        "parentId" : "dd037228-5240-49da-b1ff-1c0329d16154",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Yuck. Naked returns in the middle of a large function are incredibly hard to read. See https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Named_Result_Parameters\n",
        "createdAt" : "2015-02-12T17:03:08Z",
        "updatedAt" : "2015-02-12T17:03:08Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "1af756d5-e0d1-497a-ba19-5f0454a9a7db",
        "parentId" : "dd037228-5240-49da-b1ff-1c0329d16154",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> Naked returns are okay if the function is a handful of lines.\n\nI think these functions can be moved to static functions, they don't need to be closures.  Will do that in a follow up.\n\n----- Original Message -----\n\n> > @@ -148,6 +171,19 @@ func (a *APIInstaller) registerResourceHandlers(path\n> > string, storage RESTStorage\n> > \n> > ```\n> >     itemPath := path + \"/{name}\"\n> >     nameParams := append(params, nameParam)\n> > ```\n> > -       namespaceFn = func(req *restful.Request) (namespace string, err error) {\n> > -           return\n> \n> Yuck. Naked returns in the middle of a large function are incredibly hard to\n> read. See\n> https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Named_Result_Parameters\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4263/files#r24597352\n",
        "createdAt" : "2015-02-12T17:21:36Z",
        "updatedAt" : "2015-02-12T17:21:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "840e11ff-1293-4011-9480-55ec66a0d607",
        "parentId" : "dd037228-5240-49da-b1ff-1c0329d16154",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Right. It's difficult to tell at first glance that most (or all?) of the naked returns are inside tiny functions here. \n",
        "createdAt" : "2015-02-12T17:29:48Z",
        "updatedAt" : "2015-02-12T17:29:48Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6fdac13651922db320a2f7276a294cc4eb6e5ac",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +179,183 @@\t\tnameParams := append(params, nameParam)\n\t\tnamespaceFn = func(req *restful.Request) (namespace string, err error) {\n\t\t\treturn\n\t\t}\n\t\tnameFn = func(req *restful.Request) (namespace, name string, err error) {"
  }
]