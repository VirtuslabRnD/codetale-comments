[
  {
    "id" : "b32e30a3-9689-419b-ba60-6d9885782dd6",
    "prId" : 33490,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33490#pullrequestreview-1954227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac696bc2-ecb5-4d53-a279-575014a97f5c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`httpCode = http.StatusInternalServerError` ?\n",
        "createdAt" : "2016-09-28T13:45:50Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "be161b04-6856-4aa3-b5f6-0ba9fc1fc6b4",
        "parentId" : "ac696bc2-ecb5-4d53-a279-575014a97f5c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "No context means it's not wired correctly.\n",
        "createdAt" : "2016-09-28T14:16:15Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "656c16ac-bc5b-4af6-b112-1a5b53251668",
        "parentId" : "ac696bc2-ecb5-4d53-a279-575014a97f5c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "right, so don't we need to set `httpCode = http.StatusInternalServerError`?\n",
        "createdAt" : "2016-09-28T14:21:29Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "afef99b0-e640-4e8b-9cdf-2b95ba2ab51f",
        "parentId" : "ac696bc2-ecb5-4d53-a279-575014a97f5c",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "sure. fixed.\n",
        "createdAt" : "2016-09-28T14:55:18Z",
        "updatedAt" : "2016-09-28T16:51:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c75e922f31b9b3963fd5f1466b9ebc6f9c4b8d2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +63,67 @@\tctx, ok := r.mapper.Get(req)\n\tif !ok {\n\t\tinternalError(w, req, errors.New(\"Error getting request context\"))\n\t\thttpCode = http.StatusInternalServerError\n\t\treturn"
  },
  {
    "id" : "c7a87b35-5e81-4a88-ae6e-e94e71845ab3",
    "prId" : 16400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "whatever we do here we also need to do in generic/rest/proxy.go (a refactor to make apiserver/proxy.go delegate to the generic proxy is overdue, but should be a separate PR)\n",
        "createdAt" : "2015-10-28T12:54:36Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8d1d7a74-f2d0-4790-97b7-63eb53cbdbf1",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Looks like the reverse proxy strips the transfer encoding header.... isn't it a problem to send content length to the backend without transfer encoding?\n",
        "createdAt" : "2015-10-28T13:02:27Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6f518dbe-8402-4bf3-8638-74ef9923d4bf",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "in any case, I'd want tests through the proxy to a backend using no transport encoding, gzip, and chunked, with and without content-length, to make sure the backend gets a correct content length in all cases\n",
        "createdAt" : "2015-10-28T13:04:15Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "320d545b-9798-4729-92d4-c08ea8cfcb2e",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm... this also gets set prior to the upgrade attempt... not sure if spdy or websockets would ever set a content length or transfer encoding, but we should at least check on that\n",
        "createdAt" : "2015-10-28T13:14:08Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c6a9fcae-2db6-4fd2-93fe-b26c1d4b3015",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks @liggitt. I'll take a look at the issues you mentioned tomorrow or Friday.\n",
        "createdAt" : "2015-10-29T05:33:23Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8fad1267-a009-4faf-beec-69c6eb8d5876",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "After digging more, I'm pretty sure we should only be setting ContentLength. TransferEncoding is interpreted, and the request body wrapped in an interpreting reader before we get it (that's why a request sent as \"chunked\" comes in with no transfer encoding, and reading the body returns unchunked data).\n",
        "createdAt" : "2015-11-18T06:02:14Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "af88cf1b-01d1-4d0c-af05-15c656ca62ba",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "But we need to keep the new request being \"chunked\" when it hits wire, right? If so, I think we need to copy the Request.TransferEncoding\n\nThe transfer writer will set the transfer-encoding header field to \"chunked\" if Request.TransferEncoding contains \"chunked:\nhttps://golang.org/src/net/http/transfer.go#L177\nSame for the Body, the body will be chunked if Request.TransferEncoding contains \"chunked\":\nhttps://golang.org/src/net/http/transfer.go#L213\n",
        "createdAt" : "2015-11-18T06:34:42Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2c0298fd-6b8d-4d30-a50a-b617e57850fe",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm, I suppose so... I'm pretty sure the http package will always unwrap any transfer-encodings that are present, but in case they don't, it doesn't hurt to copy what remains to the new request\n",
        "createdAt" : "2015-11-18T06:39:03Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b18382b0-3555-4557-b495-bba1e6ced4fe",
        "parentId" : "b3c64be5-19b5-4040-86de-c00e33413736",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "tl;dr: we can keep this line, though it may not be useful.\n\nAfter more digging, I found actually the http package is powerful enough deduce the outbound request should be \"chunked\" based on the fact that the content-length is left unset && there is content:\nhttps://golang.org/src/net/http/transfer.go#L88\n\nWell, it doesn't hurt to keep the copy in the PR, and _perhaps_ it will save a broken request where \"transfer-encoding:chunked\" and \"content-length: non-zero-value\" are set at the same time.\n",
        "createdAt" : "2015-11-18T07:22:15Z",
        "updatedAt" : "2015-11-20T17:57:54Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "32f2ec71a8b854d070df11a78070fe96939829e4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +155,159 @@\t// Copy the TransferEncoding is for future-proofing. Currently Go only supports \"chunked\" and\n\t// it can determine the TransferEncoding based on ContentLength and the Body.\n\tnewReq.TransferEncoding = req.TransferEncoding\n\n\t// TODO convert this entire proxy to an UpgradeAwareProxy similar to"
  },
  {
    "id" : "97a094e1-16b7-4555-88b9-55bda30fd15a",
    "prId" : 14876,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e11d6a6c-f056-40fc-8d6f-eaaadc8da7d6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "what problem does this block solve? Is there a test?\n",
        "createdAt" : "2015-10-01T21:40:00Z",
        "updatedAt" : "2015-10-06T02:19:55Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bfa43c28-85eb-4c9b-97cb-f342f9dd3423",
        "parentId" : "e11d6a6c-f056-40fc-8d6f-eaaadc8da7d6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "upgrading connections to a TLS backend wasn't honoring tlsConfig.InsecureSkipVerify flag. Added tests for honoring the insecure flag to skip hostname validation and honoring a root ca bundle on the transport to verify the connection (here and for the generic rest proxy)\n",
        "createdAt" : "2015-10-02T05:46:04Z",
        "updatedAt" : "2015-10-06T02:19:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6ed46d52-d580-4835-88a1-bb7ae09c2824",
        "parentId" : "e11d6a6c-f056-40fc-8d6f-eaaadc8da7d6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Since this wasn't strictly necessary for this PR, I split it out to https://github.com/kubernetes/kubernetes/pull/14889 so it can be reviewed with its tests there.\n",
        "createdAt" : "2015-10-02T06:39:09Z",
        "updatedAt" : "2015-10-06T02:19:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9ba3bd7c23a3045e35d304c5c105624a1b24a25",
    "line" : null,
    "diffHunk" : "@@ -1,1 +287,291 @@\t\t}\n\n\t\t// Return if we were configured to skip validation\n\t\tif tlsConfig != nil && tlsConfig.InsecureSkipVerify {\n\t\t\treturn tlsConn, nil"
  },
  {
    "id" : "5488b788-0cf5-4c2c-bf52-2565e093873b",
    "prId" : 3763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eec0d60f-a207-420a-839d-3b0833904020",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "return at the end of the if block, then omit this else.\n",
        "createdAt" : "2015-01-24T20:33:00Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "701eac87-5164-4b67-b9dd-6d1799952c9c",
        "parentId" : "eec0d60f-a207-420a-839d-3b0833904020",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Not sure I agree in this case. It's more readable if you see there are 2 paths denoted by if/else.\n",
        "createdAt" : "2015-01-27T19:52:39Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "d2e12aa7-ce4a-4261-8af6-a250f408e7c0",
        "parentId" : "eec0d60f-a207-420a-839d-3b0833904020",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Or perhaps I make the 2 paths into individual functions I can call\n",
        "createdAt" : "2015-01-27T19:52:59Z",
        "updatedAt" : "2015-02-20T14:57:12Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd0e9ab05c99c76cc07b84c4134c225994cdcc2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +230,234 @@\n\t\t<-done\n\t} else {\n\t\tproxy := httputil.NewSingleHostReverseProxy(&url.URL{Scheme: \"http\", Host: destURL.Host})\n\t\tproxy.Transport = &proxyTransport{"
  },
  {
    "id" : "cc84debb-6ec9-4c70-a76c-2ae238ba6827",
    "prId" : 2989,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a317f83-e328-4117-be75-a44efc0dbe4e",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Support \"deflate\" here too?  http://golang.org/pkg/compress/flate/\n",
        "createdAt" : "2014-12-18T05:46:07Z",
        "updatedAt" : "2014-12-22T19:36:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "f8f7ac3e-b996-400c-a58f-a2dc46acb31e",
        "parentId" : "9a317f83-e328-4117-be75-a44efc0dbe4e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "or just a TODO?\n",
        "createdAt" : "2014-12-18T05:46:19Z",
        "updatedAt" : "2014-12-22T19:36:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "50c6a7a4-870a-4a59-bc6c-04c2f2a776ae",
        "parentId" : "9a317f83-e328-4117-be75-a44efc0dbe4e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "There's actually a note in the go HTTP package (which I was trolling through before making this) about how difficult it is to support deflate due to differing implementations and how gzip was way better and typically everyone that takes deflate also takes gzip anyway.\n\nI can add support if you wish but I'd rather wait until we have a compelling use case.\n",
        "createdAt" : "2014-12-18T18:53:18Z",
        "updatedAt" : "2014-12-22T19:36:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3d47fddb-414b-4ac8-b050-ab8ae0ff08fa",
        "parentId" : "9a317f83-e328-4117-be75-a44efc0dbe4e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "TODO is fine.\n",
        "createdAt" : "2014-12-18T20:32:37Z",
        "updatedAt" : "2014-12-22T19:36:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ab8f238ce83bcf9a660ea43cbcf71e702b9a6c5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\twriter = gzw\n\t// TODO: support flate, other encodings.\n\tcase \"\":\n\t\t// This is fine\n\tdefault:"
  },
  {
    "id" : "3985ff8a-9a33-486c-83f7-bd5e66f5b3fa",
    "prId" : 2813,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b84a7f58-8e01-4ab0-915b-277c0c42ee75",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What if namespace is all, aka \"\"?\n",
        "createdAt" : "2014-12-10T21:21:42Z",
        "updatedAt" : "2014-12-18T20:27:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6b9b9767-3b74-4fed-a4dd-7cbdc90825cb",
        "parentId" : "b84a7f58-8e01-4ab0-915b-277c0c42ee75",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think its impossible to build a proxy request that correlates to `NamespaceAll`, aka \"\".  I could be missing something, but do you have a proxyTestPattern in mind that I can produce that effect?\n\nEarlier in this func, proxy.go errors if `len(parts) < 2` to enforce that a resource has both a kind and name to fulfill the `Redirector` request.  Per `KindAndNamespace` func, if the path has `len(parts) > 1` the namespace is always set to the non-empty string.\n\nAs a result, we will never have the empty-string use case.\n",
        "createdAt" : "2014-12-10T21:38:49Z",
        "updatedAt" : "2014-12-18T20:27:39Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "334938b6-2f57-42fd-b26a-5d7aaca976e6",
        "parentId" : "b84a7f58-8e01-4ab0-915b-277c0c42ee75",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, I think you're right.\n",
        "createdAt" : "2014-12-10T21:58:49Z",
        "updatedAt" : "2014-12-18T20:27:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbbe61d115011acd2cf428e8ee170a7e40010fa0",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +148,152 @@\t\tproxyScheme:      req.URL.Scheme,\n\t\tproxyHost:        req.URL.Host,\n\t\tproxyPathPrepend: path.Join(r.prefix, \"ns\", namespace, kind, id),\n\t}\n\tproxy.FlushInterval = 200 * time.Millisecond"
  },
  {
    "id" : "7aa629cb-db9d-473b-88c7-10dc1a2ca2d7",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74f22077-7f4b-4fcd-bfad-2dfa68e1d027",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "sometimes?\n",
        "createdAt" : "2014-10-28T20:48:20Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "7d8b0a91-5162-495e-a0f3-d1c1736f6438",
        "parentId" : "74f22077-7f4b-4fcd-bfad-2dfa68e1d027",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I did not investigate further after solving my immediate problem.\n",
        "createdAt" : "2014-10-28T23:55:11Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cd60bc9a-9ecd-4733-87b5-8cf200e488e6",
        "parentId" : "74f22077-7f4b-4fcd-bfad-2dfa68e1d027",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I don't think we want to proxy sending people to unpredictable locations.\n\nWhat do you think about one of the following solutions:\n- require destURL to include a scheme.  \n- require no scheme in destURL and always assume \"http://\".\n",
        "createdAt" : "2014-10-29T15:53:55Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +132,136 @@\t}\n\tif destURL.Scheme == \"\" {\n\t\t// If no scheme was present in location, url.Parse sometimes mistakes\n\t\t// hosts for paths.\n\t\tdestURL.Host = location"
  },
  {
    "id" : "9b1b0f7e-f4c7-4b5d-acde-1429ab8bfa3a",
    "prId" : 1105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ccd01d8-2ae9-4f87-8a1b-18706c564a52",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "godoc\n",
        "createdAt" : "2014-09-03T03:52:20Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6f1f84875344475d477a83f068833ef7a8a83d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +69,73 @@// ProxyHandler provides a http.Handler which will proxy traffic to locations\n// specified by items implementing Redirector.\ntype ProxyHandler struct {\n\tprefix  string\n\tstorage map[string]RESTStorage"
  },
  {
    "id" : "9795cb5b-2264-41ee-885e-220012558f3a",
    "prId" : 1105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b91aba-9516-4c12-a606-45069a0c6d8c",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "this strikes me as more of a 500 than a 404\n",
        "createdAt" : "2014-09-03T03:53:09Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "9d09edf4-0d42-41c4-8b90-47066a069871",
        "parentId" : "66b91aba-9516-4c12-a606-45069a0c6d8c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We do 404 in the other handlers to indicate that you tried to access something that doesn't exist (the handler is defined for all rest storage objects today, rather than just those that implement redirector).  Not every RESTStorage has to implement Redirector.\n\nHowever, just in general, doing these interface tests here is probably the wrong pattern - we may want to eventually change the map[string]RESTStorage to be a map[string]StructForMultipleInterfaces\n",
        "createdAt" : "2014-09-03T15:53:41Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a3764728-ee34-4dfe-9516-ccc11a1eeaa8",
        "parentId" : "66b91aba-9516-4c12-a606-45069a0c6d8c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Leaving as 404. It's expected that not all objects implement the Redirector interface, and that means 404, it's not a server error.\n\nIn the future we may wish to have ProxyHandler take a map of Redirectors instead of a map of RESTStorage objects, and do this assertion elsewhere, which would have the same net effect (result in 404).\n",
        "createdAt" : "2014-09-03T22:59:52Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6f1f84875344475d477a83f068833ef7a8a83d2",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@\tif !ok {\n\t\thttplog.LogOf(w).Addf(\"'%v' is not a redirector\", resourceName)\n\t\tnotFound(w, req)\n\t\treturn\n\t}"
  },
  {
    "id" : "cf69aa9d-bbaa-4cb6-b99f-0eeb2e975f40",
    "prId" : 1105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e851846-6395-4aa2-83c3-3a643141dac4",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "nit: s/resp/res/g  (to match the brevity of req)\n",
        "createdAt" : "2014-09-03T03:56:38Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "ee2a39e4-d91a-46eb-a02b-2101e6f94a58",
        "parentId" : "4e851846-6395-4aa2-83c3-3a643141dac4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "\"resp\" is the golang convention from net/http - it's fairly commonly used.\n",
        "createdAt" : "2014-09-03T15:54:47Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "60cb0b98-a7aa-47d1-87e1-09ee1e9f278d",
        "parentId" : "4e851846-6395-4aa2-83c3-3a643141dac4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "well, I guess its ok if its an established pattern, but -1 to golang for being inconsistent. \n",
        "createdAt" : "2014-09-03T21:59:20Z",
        "updatedAt" : "2014-09-05T20:33:40Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6f1f84875344475d477a83f068833ef7a8a83d2",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +138,142 @@\nfunc (t *proxyTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n\tresp, err := http.DefaultTransport.RoundTrip(req)\n\n\tif err != nil {"
  }
]