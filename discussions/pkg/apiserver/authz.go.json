[
  {
    "id" : "a04f5445-aa6b-435c-bed3-dea56e01a9d4",
    "prId" : 20347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d087fed-a3bf-4d12-9c3b-c46053f5fe48",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "// Options for ModeWebhook\n",
        "createdAt" : "2016-02-04T18:35:17Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ede606f640cd5db9a4be09e436a2648f330d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +73,77 @@\t// Path to a ABAC policy file.\n\tPolicyFile string\n\n\t// Options for ModeWebhook\n"
  },
  {
    "id" : "7eb840ae-6f98-4a04-b2a1-a956f8b4445a",
    "prId" : 13285,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b85462b5-0bc8-468d-a50e-bb6a85385b9c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "track the added modes, and avoid adding the same mode twice (at least until we have the ability to add the same mode with different config)\n",
        "createdAt" : "2015-09-01T02:27:08Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "60130d47-8c8b-4997-9e85-aa5fa13e8c6c",
        "parentId" : "b85462b5-0bc8-468d-a50e-bb6a85385b9c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also, if you use a StringSet to track added modes, you can still check at the end to error if they specified --authorization-policy-file and didn't specify ABAC mode\n",
        "createdAt" : "2015-09-01T02:28:31Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8d6f13f7c25150cbb76eb7423021060a3f3705a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +74,78 @@\t}\n\n\tvar authorizers []authorizer.Authorizer\n\tauthorizerMap := make(map[string]bool)\n"
  },
  {
    "id" : "0cce5666-7dbd-4538-ac1e-683c70930820",
    "prId" : 13285,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4cb7374-d18e-452d-a13f-a05174188ead",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is an empty slice valid? with the current behavior of the union authorizer, that behaves like AlwaysAllow. Is that what we want?\n",
        "createdAt" : "2015-09-01T02:35:09Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "203d987e-2571-4b76-92f9-a130eb1a87c4",
        "parentId" : "b4cb7374-d18e-452d-a13f-a05174188ead",
        "authorId" : "233499d6-89dc-45cd-8146-c5dccec7e9ee",
        "body" : "I am not sure. But, yes, I don't feel comfortable about it either. I guess we should just throw an error in that case and let the user pass something explicitly.\n",
        "createdAt" : "2015-09-01T18:21:23Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "233499d6-89dc-45cd-8146-c5dccec7e9ee",
        "tags" : [
        ]
      },
      {
        "id" : "48c9b9e8-3f83-4e8e-9698-2d11fe4a3724",
        "parentId" : "b4cb7374-d18e-452d-a13f-a05174188ead",
        "authorId" : "233499d6-89dc-45cd-8146-c5dccec7e9ee",
        "body" : "But I guess we should fail during startup itself rather than failing every request that comes to the authorizer after starting up the apiserver successfully.\n",
        "createdAt" : "2015-09-01T18:40:22Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "233499d6-89dc-45cd-8146-c5dccec7e9ee",
        "tags" : [
        ]
      },
      {
        "id" : "e47ef7ab-6363-4c1b-9b2a-6a72a14a7215",
        "parentId" : "b4cb7374-d18e-452d-a13f-a05174188ead",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "probably so, returning an error here would be better than returning a broken authorizer\n",
        "createdAt" : "2015-09-01T18:42:10Z",
        "updatedAt" : "2015-09-04T18:04:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8d6f13f7c25150cbb76eb7423021060a3f3705a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@// based on the authorizationMode or an error.  authorizationMode should be a comma separated values\n// of AuthorizationModeChoices.\nfunc NewAuthorizerFromAuthorizationConfig(authorizationModes []string, authorizationPolicyFile string) (authorizer.Authorizer, error) {\n\n\tif len(authorizationModes) == 0 {"
  },
  {
    "id" : "66f95071-d208-44c7-9b11-ca1fbbc696bc",
    "prId" : 2184,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64694ff-1542-45f3-a49d-f1336c5cc39f",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Do you need to update \"AuthorizationModeChoices\" below?\n",
        "createdAt" : "2014-11-05T22:25:17Z",
        "updatedAt" : "2014-11-06T00:06:50Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "54ea440a-982d-40ea-bcd6-e023907e2c6a",
        "parentId" : "c64694ff-1542-45f3-a49d-f1336c5cc39f",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Fixed.  You'd think I would heed my own comment.\n",
        "createdAt" : "2014-11-05T22:30:06Z",
        "updatedAt" : "2014-11-06T00:06:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e81e8c896c533a3617b249c4157f49551294923",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +58,62 @@\tModeAlwaysAllow string = \"AlwaysAllow\"\n\tModeAlwaysDeny  string = \"AlwaysDeny\"\n\tModeABAC        string = \"ABAC\"\n)\n"
  },
  {
    "id" : "1e370af2-ffa4-45c0-8859-9dbcd5301ac6",
    "prId" : 1847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a139ddb-3418-4219-9d1b-673b6885ddad",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Could these be part of `pkg/auth/authorizer`?  Seems like everyone would want to use them.\n",
        "createdAt" : "2014-10-20T20:27:13Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0839ce62-aa97-4c3c-a356-58d39201f7ce",
        "parentId" : "7a139ddb-3418-4219-9d1b-673b6885ddad",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Who else do you think would want to use them?\n",
        "createdAt" : "2014-10-21T03:32:39Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "0af85de4-cc19-4c1d-b6a6-db74cd82fbdc",
        "parentId" : "7a139ddb-3418-4219-9d1b-673b6885ddad",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Anyone writing tools that extend the rest api I assume.  I guess authorizer doesn't seem like it's specific to apiserver, and these are methods that test frameworks would use as well.\n",
        "createdAt" : "2014-10-21T03:44:16Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4d0b662b-fb78-461d-a584-e49abca497e2",
        "parentId" : "7a139ddb-3418-4219-9d1b-673b6885ddad",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I figure people will either want to reuse all or large parts of pkg/apiserver/... (in which case they get these functions) or they will want to write their own thing entirely (different language or different rest framework.) \n\nIf you don't feel too strongly about it, I'd like to leave it as is.  I like separating the interface file from the implementations.\n",
        "createdAt" : "2014-10-21T03:49:58Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "55c2d6bbbbce373d2e549ba7448db9b070d19749",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2014 Google Inc. All rights reserved.\n"
  },
  {
    "id" : "4e72c84d-57b7-4ad6-a17e-fbc14e0b3129",
    "prId" : 1847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9c70ea8-3a48-4461-b25d-36b0281713ec",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Add NewAlwaysAllowAuthorizer?\n",
        "createdAt" : "2014-10-30T03:29:19Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "f99d2790-a65a-4ddb-94d6-982c308d19d2",
        "parentId" : "f9c70ea8-3a48-4461-b25d-36b0281713ec",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The version I am about to push puts a factory in this module which does NewAlwaysAllowAuthorizer and NewAlwaysDenyAuthorizer\n",
        "createdAt" : "2014-10-30T15:56:35Z",
        "updatedAt" : "2014-10-31T19:05:45Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "55c2d6bbbbce373d2e549ba7448db9b070d19749",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@\treturn nil\n}\n\n// alwaysDenyAuthorizer is an implementation of authorizer.Attributes\n// which always says no to an authorization request."
  }
]