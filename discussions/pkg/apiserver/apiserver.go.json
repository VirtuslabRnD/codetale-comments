[
  {
    "id" : "f50a26fd-3854-49b1-9e56-631835b9a292",
    "prId" : 35840,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35840#pullrequestreview-6525055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "568f712d-b74f-4fb1-8b54-310980500b35",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "both of these groups existed in 1.4... we're completely hiding the groups from the discovery doc? won't that break old kubectl if someone tries to create anything in those groups?\n",
        "createdAt" : "2016-10-31T20:32:50Z",
        "updatedAt" : "2016-10-31T20:33:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fe730b14-945c-4f45-82a1-75724ddf1839",
        "parentId" : "568f712d-b74f-4fb1-8b54-310980500b35",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The alpha version of the two groups will be removed in 1.5, so 1.4 kubectl won't work for these groups with an 1.5 apiserver anyway.\n",
        "createdAt" : "2016-10-31T21:04:05Z",
        "updatedAt" : "2016-10-31T21:04:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a545ac7a907b4606c071a4fbb7b3c9c296cbd1b6",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +363,367 @@// TODO: Remove in 1.6. This is for backward compatibility with 1.4 kubectl.\n// See https://github.com/kubernetes/kubernetes/issues/35791\nvar groupsWithNewVersionsIn1_5 = sets.NewString(\"apps\", \"policy\")\n\n// TODO: Remove in 1.6."
  },
  {
    "id" : "b8d37a76-9ae6-48e9-9544-eeb46792c375",
    "prId" : 33368,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33368#pullrequestreview-1484407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4779951e-ed50-4b14-95f4-0bb631b2d9e2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "What about taking this in the other direction?  Seems like we could provide a nicer message back to the CLI by parsing out the request.\n",
        "createdAt" : "2016-09-23T13:10:43Z",
        "updatedAt" : "2016-09-23T13:10:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a98cd080-b1c8-49b7-a150-c5e25a285806",
        "parentId" : "4779951e-ed50-4b14-95f4-0bb631b2d9e2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "For the moment this was syntactical pruning only. I would like to get rid of the error service handler installation from the api group installer (https://github.com/kubernetes/kubernetes/pull/33368/files#diff-21175d1496189457be1a811db6ce0458L398).\n\nFollowing your idea, we could create \"group/version\" strings of all installed api groups after they have been installed and use those (i.e. in the beginning of `Run()`). The current list of versions created after each group installation and then overwritten, does not make sense.\n\nWhich nicer message do you have in mind?\n",
        "createdAt" : "2016-09-23T13:16:51Z",
        "updatedAt" : "2016-09-23T13:17:03Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "aa3bfab9-8109-4e56-b4c6-39856aca31b7",
        "parentId" : "4779951e-ed50-4b14-95f4-0bb631b2d9e2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@deads2k ptal\n",
        "createdAt" : "2016-09-26T07:21:31Z",
        "updatedAt" : "2016-09-26T07:21:31Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf0a5264a1a8fb885279d2586329fbbc3438190",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +217,221 @@}\n\nfunc serviceErrorHandler(s runtime.NegotiatedSerializer, serviceErr restful.ServiceError, request *restful.Request, response *restful.Response) {\n\terrorNegotiated(\n\t\tapierrors.NewGenericServerResponse(serviceErr.Code, \"\", api.Resource(\"\"), \"\", serviceErr.Message, 0, false),"
  },
  {
    "id" : "b1363bc2-1a33-445d-9707-a1c3e01f5baf",
    "prId" : 29724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80bab4ba-1903-4563-a4ee-72db1c2f6db6",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "At other places we add `var _ APIResourceLister := &staticLister{}` to ensure and document that staticLister implements the APIResourceLister interface.\n",
        "createdAt" : "2016-08-02T05:18:23Z",
        "updatedAt" : "2016-08-13T22:52:17Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "63485728-fc4d-4c96-bac1-09488bfdf580",
        "parentId" : "80bab4ba-1903-4563-a4ee-72db1c2f6db6",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2016-08-07T04:44:50Z",
        "updatedAt" : "2016-08-13T22:52:17Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3658c7b16cd5b55d29769a79f64e941937d7fbc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +126,130 @@\n// staticLister implements the APIResourceLister interface\ntype staticLister struct {\n\tlist []unversioned.APIResource\n}"
  },
  {
    "id" : "5d9d600c-092d-4712-a506-be1571ca4ae3",
    "prId" : 25731,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f428d9c4-5c14-47bb-ab6c-171503650208",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Do we really need this change? with the latest code in  curl -kvs http://127.0.0.1:8080/version already prints the version numbers\n\n```\n$ curl -kvs http://127.0.0.1:8080/version\n*   Trying 127.0.0.1...\n* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n> GET /version HTTP/1.1\n> Host: 127.0.0.1:8080\n> User-Agent: curl/7.47.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Date: Mon, 06 Jun 2016 13:21:42 GMT\n< Content-Length: 295\n<\n{\n  \"major\": \"1\",\n  \"minor\": \"3+\",\n  \"gitVersion\": \"v1.3.0-alpha.4.1106+68097515d82121-dirty\",\n  \"gitCommit\": \"68097515d821217918a1c916759a8373e5e5eb86\",\n  \"gitTreeState\": \"dirty\",\n  \"buildDate\": \"2016-06-06T13:18:29Z\",\n  \"goVersion\": \"go1.6.1\",\n  \"compiler\": \"gc\",\n  \"platform\": \"linux/amd64\"\n* Connection #0 to host 127.0.0.1 left intact\n}\n```\n",
        "createdAt" : "2016-06-06T13:30:55Z",
        "updatedAt" : "2016-06-06T13:30:55Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "d2aeae54-c8df-4c68-88c0-5c0cf2d1d696",
        "parentId" : "f428d9c4-5c14-47bb-ab6c-171503650208",
        "authorId" : "e198e2a7-4d8d-4b8a-95ca-30ec961aee25",
        "body" : "Swagger spec still returns void. Probably @nikhiljindal can comment.\n",
        "createdAt" : "2016-06-06T13:52:58Z",
        "updatedAt" : "2016-06-06T13:52:58Z",
        "lastEditedBy" : "e198e2a7-4d8d-4b8a-95ca-30ec961aee25",
        "tags" : [
        ]
      },
      {
        "id" : "8b9f78e9-bfc2-40d3-be3f-fa52aa0e5ac1",
        "parentId" : "f428d9c4-5c14-47bb-ab6c-171503650208",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "@Pensu : i won't argue with the swagger-spec/version.json change. just the change in pkg/apiserver/apiserver.go\n",
        "createdAt" : "2016-06-06T14:00:07Z",
        "updatedAt" : "2016-06-06T14:00:07Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "8a65aa6e-48da-4e40-aeb7-6defae2fda0b",
        "parentId" : "f428d9c4-5c14-47bb-ab6c-171503650208",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "swagger-spec is auto generated from this code.\n@dims You are right that the response right now is correct. But our documentation of response (in swagger spec) is incorrect. This change just fixes that.\n",
        "createdAt" : "2016-06-06T17:32:26Z",
        "updatedAt" : "2016-06-06T17:32:26Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "78130fe7-abd6-4070-a55e-302ce74e2b8f",
        "parentId" : "f428d9c4-5c14-47bb-ab6c-171503650208",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "AH!! my bad thanks @nikhiljindal i missed that.\n",
        "createdAt" : "2016-06-06T18:02:13Z",
        "updatedAt" : "2016-06-06T18:02:13Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a9f7e9a0ccfebb98818c1b7038638e6bf1a2ce5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\tProduces(restful.MIME_JSON).\n\t\t\tConsumes(restful.MIME_JSON).\n\t\t\tWrites(version.Info{}))\n\n\tcontainer.Add(versionWS)"
  },
  {
    "id" : "0c07ee9f-d21a-4dd7-8f75-3b39907be126",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a3a4ba2-6f64-48af-865e-2913c497609d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "if you want a serializer, why did you change the sig?\n",
        "createdAt" : "2016-04-25T15:15:19Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7f4e322b-a981-4ac0-88d5-a83a4d752150",
        "parentId" : "3a3a4ba2-6f64-48af-865e-2913c497609d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "if you need an interface that implements both, create that interface and use it.\n",
        "createdAt" : "2016-04-25T15:15:59Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "997a2a7d-848c-419f-96d3-2a7434a9e900",
        "parentId" : "3a3a4ba2-6f64-48af-865e-2913c497609d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The overall sig changed, this is a hack because there isn't enough local\ninfo.\n\nOn Mon, Apr 25, 2016 at 11:15 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/apiserver/apiserver.go\n> https://github.com/kubernetes/kubernetes/pull/24710#discussion_r60930806\n> :\n> \n> > @@ -277,9 +274,13 @@ type StripVersionNegotiatedSerializer struct {\n> >     runtime.NegotiatedSerializer\n> >  }\n> > \n> > -func (n StripVersionNegotiatedSerializer) EncoderForVersion(serializer runtime.Serializer, gv unversioned.GroupVersion) runtime.Encoder {\n> > -   encoder := n.NegotiatedSerializer.EncoderForVersion(serializer, gv)\n> > -   return stripVersionEncoder{encoder, serializer}\n> >   +func (n StripVersionNegotiatedSerializer) EncoderForVersion(encoder runtime.Encoder, gv unversioned.GroupVersion) runtime.Encoder {\n> > -   serializer, ok := encoder.(runtime.Serializer)\n> \n> if you want a serializer, why did you change the sig?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24710/files/e4a1f3c4b34ba5ef0c8f08009e202d0b048498ff#r60930806\n",
        "createdAt" : "2016-04-25T15:17:28Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +276,280 @@\nfunc (n StripVersionNegotiatedSerializer) EncoderForVersion(encoder runtime.Encoder, gv unversioned.GroupVersion) runtime.Encoder {\n\tserializer, ok := encoder.(runtime.Serializer)\n\tif !ok {\n\t\t// The stripVersionEncoder needs both an encoder and decoder, but is called from a context that doesn't have access to the"
  },
  {
    "id" : "599a212f-288e-4b30-a688-ac28dffdba9f",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d799c4c3-3425-4a2a-89ea-36da6d0fe11f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why did you need to add it both here and in genericapaiserver? Should only need to be added in one place-- genericapiserver is preferable.\n",
        "createdAt" : "2016-02-27T00:14:48Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "537bf2e3-071b-43bf-86fe-535850a8a897",
        "parentId" : "d799c4c3-3425-4a2a-89ea-36da6d0fe11f",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "As we discussed offline, this is required to plumb the value from master to api_installer.\n",
        "createdAt" : "2016-02-28T04:33:53Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : null,
    "diffHunk" : "@@ -1,1 +102,106 @@\t// the subresource. The key of this map should be the path of the subresource. The keys here should\n\t// match the keys in the Storage map above for subresources.\n\tSubresourceGroupVersionKind map[string]unversioned.GroupVersionKind\n}\n"
  },
  {
    "id" : "d3fffcfc-95c4-4528-b39b-1fbbcedfd59c",
    "prId" : 21009,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5282802-5d78-46cf-8de9-5877250145be",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Comments with each of these and a test to verify no regression, approach looks fine\n",
        "createdAt" : "2016-02-13T00:57:26Z",
        "updatedAt" : "2016-02-19T23:05:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "dbd586db-6ef8-4e44-b574-db6115f70f73",
        "parentId" : "b5282802-5d78-46cf-8de9-5877250145be",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "These are only the discovery endpoints, correct?\n",
        "createdAt" : "2016-02-13T01:08:16Z",
        "updatedAt" : "2016-02-19T23:05:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "26581393-b6a0-4c53-b7af-d8a5c9e997ae",
        "parentId" : "b5282802-5d78-46cf-8de9-5877250145be",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Yes.\n",
        "createdAt" : "2016-02-13T01:09:59Z",
        "updatedAt" : "2016-02-19T23:05:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "39838745e5ede8b5b9b51c3b5680aca441fd6938",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +299,303 @@func AddGroupWebService(s runtime.NegotiatedSerializer, container *restful.Container, path string, group unversioned.APIGroup) {\n\tss := s\n\tif keepUnversioned(group.Name) {\n\t\t// Because in release 1.1, /apis/extensions returns response with empty\n\t\t// APIVersion, we use StripVersionNegotiatedSerializer to keep the"
  },
  {
    "id" : "d7d8b40f-32a7-4f40-abaf-a24290fc42b5",
    "prId" : 17175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "v1 has to keep returning \"v1\" for those unversioned objects, not sure what I would expect from other group/versions\n",
        "createdAt" : "2015-11-12T20:40:54Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1c12691d-46aa-4b01-862d-4bd77ae0c6fc",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why is this one a pointer? I think it should be of the same type as GroupVersion on line 83 for consistency.\n",
        "createdAt" : "2015-11-12T20:59:28Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "49259bb6-9d31-4fef-bf05-1d2c6461e1c2",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt, ServerGroupVersion is the versioned used by encode DeleteOptions ListOptions etc. We may not need it anymore since we are moving these things to unversioned.\n",
        "createdAt" : "2015-11-12T21:00:55Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "58984201-259c-44a6-bb86-d4028d765535",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "a nil check on a pointer is equivalent to a len(0) check on a string if we're trying to check for \"unsettedness\" (though I would sort of expect newer api versions to be returning unversioned status, which is an `apiVersion=\"\"`, right? Is that expressable?)\n",
        "createdAt" : "2015-11-12T21:02:44Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ecdac98d-e2ef-41a3-bcd8-28f67838f4c7",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> @liggitt, ServerGroupVersion is the versioned used by encode DeleteOptions ListOptions etc. We may not need it anymore since we are moving these things to unversioned.\n\nI would expect to need it (or something similar) to keep v1 returning \"v1\" instead of \"\" for unversioned object types, but I haven't swept how this is used to be sure.\n",
        "createdAt" : "2015-11-12T21:05:11Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3ddb6989-de8d-4942-9cb3-d3f738fc4243",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you spawn a separate issue to look at what is being set for apiVersion on unversioned resources from `extensions/v1beta1`?\n",
        "createdAt" : "2015-11-13T13:56:15Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "17cf5bf8-901b-4650-9da2-a4b4cac77717",
        "parentId" : "b6d8faad-edd9-45f2-b697-19c28c9fd0d2",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> can you spawn a separate issue to look at what is being set for apiVersion on unversioned resources from extensions/v1beta1?\n\nDone: https://github.com/kubernetes/kubernetes/issues/17218\n",
        "createdAt" : "2015-11-13T14:04:07Z",
        "updatedAt" : "2015-11-13T14:04:07Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c725f17ea4d83088050ce75e64f6f42ac7f96aa",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +92,96 @@\t// empty, defaults to Version.\n\t// TODO this seems suspicious.  Is this actually just \"unversioned\" now?\n\tServerGroupVersion *unversioned.GroupVersion\n\n\tMapper meta.RESTMapper"
  },
  {
    "id" : "060de98e-7ed4-47b0-996f-7de512d9f37c",
    "prId" : 15958,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78311366-d448-4a0b-be69-a596d6dba24f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Fix up comment?\n",
        "createdAt" : "2015-10-20T19:56:00Z",
        "updatedAt" : "2015-10-20T20:23:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8083e43a-1297-4dfb-94a4-bc69a77401c6",
        "parentId" : "78311366-d448-4a0b-be69-a596d6dba24f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Fix up comment?\n\ndone and added more examples\n",
        "createdAt" : "2015-10-20T20:24:02Z",
        "updatedAt" : "2015-10-20T20:24:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fbb3f4b6e61a89d995fbf4d0fdc6f33881878a5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +84,88 @@\tVersion string\n\n\t// RequestInfoResolver is used to parse URLs for the legacy proxy handler.  Don't use this for anything else\n\t// TODO: refactor proxy handler to use sub resources\n\tRequestInfoResolver *RequestInfoResolver"
  },
  {
    "id" : "71a59955-c300-4a0b-9914-2ad5e7300a90",
    "prId" : 14926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67791982-22cf-48b3-ab69-c6a4b69c8c0f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "From this description, now that we have unversioned objects, we don't need this variable at all. Just noting this for the future.\n",
        "createdAt" : "2015-10-01T21:27:25Z",
        "updatedAt" : "2015-10-02T01:33:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1b008c7c-3118-44ef-83ad-a905281a16e6",
        "parentId" : "67791982-22cf-48b3-ab69-c6a4b69c8c0f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Will we move DeleteOptions and ListOptions to unversioned as well?\n",
        "createdAt" : "2015-10-01T22:04:53Z",
        "updatedAt" : "2015-10-02T01:33:06Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d70928a1-5f30-4351-9da4-ecc6ac3bafb9",
        "parentId" : "67791982-22cf-48b3-ab69-c6a4b69c8c0f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "oh, good question. Let's look into that later.\n",
        "createdAt" : "2015-10-01T23:39:45Z",
        "updatedAt" : "2015-10-02T01:33:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4927cec3be9d9a5eeab78fad420c9a5b320a2618",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +84,88 @@\n\t// ServerVersion controls the Kubernetes APIVersion used for common objects in the apiserver\n\t// schema like api.Status, api.DeleteOptions, and api.ListOptions. Other implementors may\n\t// define a version \"v1beta1\" but want to use the Kubernetes \"v1\" internal objects. If\n\t// empty, defaults to Version."
  },
  {
    "id" : "cb6bb2cd-b8c2-46f8-b912-9ce24007fab8",
    "prId" : 14375,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e253e72-5821-4806-99d0-8611f378f2f2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add TODO: refactor proxy handler to use sub resources\n",
        "createdAt" : "2015-09-30T13:32:17Z",
        "updatedAt" : "2015-09-30T13:46:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "df870cf36a742ad232894112e5670bd15f56c435",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +81,85 @@\tVersion string\n\n\t// APIRequestInfoResolver is used to parse URLs for the legacy proxy handler.  Don't use this for anything else\n\t// TODO: refactor proxy handler to use sub resources\n\tAPIRequestInfoResolver *APIRequestInfoResolver"
  },
  {
    "id" : "4cbd9371-fc78-4a4d-8013-c62039c0a068",
    "prId" : 14148,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23b3fda4-91c4-4bf7-8bf2-b5ca04ae0f84",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "optional: you could plumb pretty down into the stream encode function.\n",
        "createdAt" : "2015-09-18T18:28:16Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6a36f682-7699-4a4f-b220-5da95d739bc1",
        "parentId" : "23b3fda4-91c4-4bf7-8bf2-b5ca04ae0f84",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "interestingly, `json.Encoder` doesn't seem to have a pretty print option.\n",
        "createdAt" : "2015-09-18T19:29:14Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "6c485406-c043-46c9-a6ae-75155dad89e0",
        "parentId" : "23b3fda4-91c4-4bf7-8bf2-b5ca04ae0f84",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, you're right, it doesn't. I forgot, I've wanted such a thing before,\ntoo.\n\nOn Fri, Sep 18, 2015 at 12:29 PM, Brendan Burns notifications@github.com\nwrote:\n\n> In pkg/apiserver/apiserver.go\n> https://github.com/kubernetes/kubernetes/pull/14148#discussion_r39892213\n> :\n> \n> > @@ -311,24 +311,32 @@ func isPrettyPrint(req *http.Request) bool {\n> > \n> >  // writeJSON renders an object as JSON to the response.\n> >  func writeJSON(statusCode int, codec runtime.Codec, object runtime.Object, w http.ResponseWriter, pretty bool) {\n> > -   w.Header().Set(\"Content-Type\", \"application/json\")\n> > -   // We send the status code before we encode the object, so if we error, the status code stays but there will\n> > -   // still be an error object.  This seems ok, the alternative is to validate the object before\n> > -   // encoding, but this really should never happen, so it's wasted compute for every API request.\n> > -   w.WriteHeader(statusCode)\n> > -   if pretty {\n> > -       prettyJSON(codec, object, w)\n> \n> interestingly, json.Encoder doesn't seem to have a pretty print option.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/14148/files#r39892213.\n",
        "createdAt" : "2015-09-18T23:59:03Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "89982196869a73fb1c93466ce770c4076684d35b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +387,391 @@\tw.WriteHeader(statusCode)\n\tif pretty {\n\t\tprettyJSON(codec, object, w)\n\t\treturn\n\t}"
  },
  {
    "id" : "22b9f841-ef4e-42c6-857b-9913e3734c3a",
    "prId" : 13885,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f23361b-aee4-471f-85b9-4c0a099789aa",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "We implemented the spdy upgrade check in pkg/apiserver/proxy.go#ServeHTTP(). Is there a reason you put the websocket check here instead of proxy.go?\n",
        "createdAt" : "2015-09-22T14:11:17Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "ba747127-fa66-4d45-b433-aefd0d607381",
        "parentId" : "1f23361b-aee4-471f-85b9-4c0a099789aa",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Ah, this is to support pod logs, which go a different route through the apiserver than exec does.\n",
        "createdAt" : "2015-09-22T15:11:23Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "1a48f38c-67df-4e62-9090-a843f7644ef3",
        "parentId" : "1f23361b-aee4-471f-85b9-4c0a099789aa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Correct\n",
        "createdAt" : "2015-09-23T19:47:50Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9136d49dc9090142b7ad2838af91703666713d76",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +356,360 @@\t\tdefer out.Close()\n\n\t\tif wsstream.IsWebSocketRequest(req) {\n\t\t\tr := wsstream.NewReader(out, true)\n\t\t\tif err := r.Copy(w, req); err != nil {"
  },
  {
    "id" : "608ccb0a-c6e4-4071-8bc2-17a96de0621c",
    "prId" : 13317,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "How do we know if the client can understand the latest version? writeRawJSON seems to be a safer option.\n",
        "createdAt" : "2015-08-30T18:50:18Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "9622acea-26a8-42b3-9b4d-94991e24ddf8",
        "parentId" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`writeRawJSON` is for non-API responses... we have a way in the API to communicate status, so we should use the structured form. The `latest` codec is just the most reasonable guess we can make, given the info available to the recover handler\n",
        "createdAt" : "2015-08-31T01:07:22Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "167299e8-56de-483b-b974-51658c7d2655",
        "parentId" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you @liggitt. I think if the Status is not versioned, then clients of any version can decode it, it's better than guessing the client supports `latest` version. The disadvantage of making the Status unversioned is that we won't be able to make backward incompatible changes to the Status API. We can mitigate this problem by only making additive changes to the Status API in the future. We have a pending proposal to move Status to unversioned.go in #12591 (please search \"unversioned\"). \n",
        "createdAt" : "2015-08-31T03:37:21Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "23e7e681-6c60-45d1-8cd6-6b05430699cc",
        "parentId" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Versioning aside, I still think we should return an API status from the API if possible. `writeRawJSON` doesn't include the `kind` field\n",
        "createdAt" : "2015-08-31T14:35:07Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fdf388a5-ead1-4525-9dd8-56148541eecf",
        "parentId" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Added a TODO to make status unversioned or get desired version from the request (like `serviceErrorHandler` does)\n",
        "createdAt" : "2015-08-31T17:50:20Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "dc7174b5-afd2-40ca-ab9c-a19c156e72e1",
        "parentId" : "03a251b7-ea73-4910-aa61-abe0fa189569",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks. I think using the latest.codec is fine for now. I can make the necessary change after #12591 settles. Sorry for the delay.\n",
        "createdAt" : "2015-08-31T17:55:03Z",
        "updatedAt" : "2015-08-31T18:55:30Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5e8f7aa4184aba79100ddfc221f7f97dd0f7708",
    "line" : null,
    "diffHunk" : "@@ -1,1 +177,181 @@\n\t// TODO: make status unversioned or plumb enough of the request to deduce the requested API version\n\terrorJSON(apierrors.NewGenericServerResponse(http.StatusInternalServerError, \"\", \"\", \"\", \"\", 0, false), latest.Codec, httpWriter)\n}\n"
  },
  {
    "id" : "2b3d1ca7-c23d-43fd-882f-b5a493753fb3",
    "prId" : 9361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b916070-f0e0-45ac-9464-9e76f7ae8041",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "That was the issue. The PR was #2614\n",
        "createdAt" : "2015-06-06T16:12:14Z",
        "updatedAt" : "2015-06-09T04:32:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b68ddbaf75ac9fa09a98ca16a31ef83004c0599c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +299,303 @@\t}\n\tif pretty {\n\t\t// PR #2243: Pretty-print JSON by default.\n\t\tformatted := &bytes.Buffer{}\n\t\terr = json.Indent(formatted, output, \"\", \"  \")"
  },
  {
    "id" : "1751080d-8ba8-4f95-8193-78c0c48bdef1",
    "prId" : 7215,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "268a7f1c-72a5-4830-aa1c-a9b257d01d8e",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "just a nit: you can `break` here\n",
        "createdAt" : "2015-04-23T20:48:26Z",
        "updatedAt" : "2015-04-23T21:32:19Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4aeb7274-f93d-4ee2-b05f-d9eb3a2e558a",
        "parentId" : "268a7f1c-72a5-4830-aa1c-a9b257d01d8e",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done. Thanks!\n",
        "createdAt" : "2015-04-23T21:32:27Z",
        "updatedAt" : "2015-04-23T21:32:27Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "120904df5f6b7157b03e06f7c606cac74ceb0bbb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t\tif requestInfo.APIVersion == version {\n\t\t\t\t// valid api version.\n\t\t\t\tcodec = runtime.CodecFor(api.Scheme, requestInfo.APIVersion)\n\t\t\t\tbreak\n\t\t\t}"
  },
  {
    "id" : "0af17d03-9bc6-4bb7-91b8-00cba125c858",
    "prId" : 7169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bee443c1-86bb-462b-a578-0f47152823fb",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "Please update the help text to include the new field (and remove handler if you stick with removing it)\n",
        "createdAt" : "2015-04-22T20:35:53Z",
        "updatedAt" : "2015-04-24T11:16:46Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      },
      {
        "id" : "e6804ebe-1c63-413c-9f70-549c227d4c9a",
        "parentId" : "bee443c1-86bb-462b-a578-0f47152823fb",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-04-24T11:18:12Z",
        "updatedAt" : "2015-04-24T11:18:12Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b755c805b8a01354c4776d95595a590af1cde56",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +61,65 @@\t\t\tName: \"apiserver_request_latencies\",\n\t\t\tHelp: \"Response latency distribution in microseconds for each verb, resource and client.\",\n\t\t\t// Use buckets ranging from 125 ms to 8 seconds.\n\t\t\tBuckets: prometheus.ExponentialBuckets(125000, 2.0, 7),\n\t\t},"
  },
  {
    "id" : "a5bc7571-4d7a-47e3-941e-87115f63aec6",
    "prId" : 6881,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d1a86ae-a2cf-4ad6-a47b-8f7038d96ed5",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Cool! When was this added?\n",
        "createdAt" : "2015-04-15T23:45:54Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "8ab96fc7-afa1-4833-9223-4c815fbb1c3e",
        "parentId" : "9d1a86ae-a2cf-4ad6-a47b-8f7038d96ed5",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "https://github.com/emicklei/go-restful/pull/181\n",
        "createdAt" : "2015-04-15T23:57:06Z",
        "updatedAt" : "2015-04-16T21:59:55Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9132dc57288ddf5deeb132b9f6ee7048f3810cb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +172,176 @@\nfunc InstallServiceErrorHandler(container *restful.Container) {\n\tcontainer.ServiceErrorHandler(serviceErrorHandler)\n}\n"
  },
  {
    "id" : "74d21584-99da-4316-bec1-1f9a3434b6b6",
    "prId" : 5763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30b91e3a-2535-4802-8d18-804d5e30bff2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "A comment about the intended behavior would be useful.\n",
        "createdAt" : "2015-03-25T01:58:24Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "870da687d0c2477dc7be1c659a379cfa35a2e850",
    "line" : null,
    "diffHunk" : "@@ -1,1 +218,222 @@\t\t}\n\t\tdefer out.Close()\n\t\tif len(contentType) == 0 {\n\t\t\tcontentType = \"application/octet-stream\"\n\t\t}"
  },
  {
    "id" : "d3347e99-59a5-418f-bae5-e2a12e16f6ca",
    "prId" : 3944,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a06014ff-87ab-4b02-971c-d6267d5d5196",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The good thing here is that this will enable us to use the mapper to generate names for paths.\n",
        "createdAt" : "2015-01-30T19:37:15Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "a928be56ba229e4a0456b9d4a0aeb1d4f73a5494",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +59,63 @@func Handle(storage map[string]RESTStorage, codec runtime.Codec, root string, version string, selfLinker runtime.SelfLinker, admissionControl admission.Interface, mapper meta.RESTMapper) http.Handler {\n\tprefix := root + \"/\" + version\n\tgroup := NewAPIGroupVersion(storage, codec, prefix, selfLinker, admissionControl, mapper)\n\tcontainer := restful.NewContainer()\n\tmux := container.ServeMux"
  },
  {
    "id" : "e8537a32-c26f-4f90-bf85-34824c57862a",
    "prId" : 3944,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d9a0c26-7b11-4ae5-8b5a-90642d2dda8c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You shouldn't need to log here, returning error is enough.\n",
        "createdAt" : "2015-01-30T19:37:45Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "57d12d03-9071-406f-a601-f695848276ff",
        "parentId" : "7d9a0c26-7b11-4ae5-8b5a-90642d2dda8c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I forgot to take my debugging out.  will remove.\n",
        "createdAt" : "2015-01-30T20:09:10Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a928be56ba229e4a0456b9d4a0aeb1d4f73a5494",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\tmapping, err := mapper.RESTMapping(kind, version)\n\tif err != nil {\n\t\tglog.V(1).Infof(\"OH NOES kind %s version %s err: %v\", kind, version, err)\n\t\treturn err\n\t}"
  },
  {
    "id" : "b79910a1-b83d-4e09-856d-9b741f288954",
    "prId" : 3298,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e857b4f9-5733-498b-bd7a-3bf96829d425",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It would be a little nicer to put AddApiWebService and APIVersionHandler (which could be changed to apiVersionHandler) next to each other, and handleVersion and InstallSupport (which could be renamed InstallVersion) next to each other, but that can be left to a future PR.\n",
        "createdAt" : "2015-01-09T20:46:16Z",
        "updatedAt" : "2015-01-09T20:46:16Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e909ed74359590732a17b0250bae513164049f6",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +312,316 @@}\n\n// Adds a service to return the supported api versions.\nfunc AddApiWebService(container *restful.Container, apiPrefix string, versions []string) {\n\t// TODO: InstallREST should register each version automatically"
  },
  {
    "id" : "8eaa015c-ab53-402e-94f8-0dbdbd211d03",
    "prId" : 2614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f53ca2d-e6da-4bf8-a798-7668dede9531",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "nit: 2243 is an issue not a PR.\n",
        "createdAt" : "2014-11-25T23:54:07Z",
        "updatedAt" : "2014-11-25T23:54:07Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e18dcb87c4ac68cf695b76409e0effa78d748f50",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +288,292 @@\t\treturn\n\t}\n\t// PR #2243: Pretty-print JSON by default.\n\tformatted := &bytes.Buffer{}\n\terr = json.Indent(formatted, output, \"\", \"  \")"
  },
  {
    "id" : "d701d4d4-1c3c-4ed2-aac3-8c9d5f0e1932",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6c00c21-f7ad-474c-bdbd-2074d39fcbe6",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Technically it's an APIGroupVersion, since two people can have `v1beta1` but only one person can have `prefix/v1beta1`\n",
        "createdAt" : "2014-11-11T16:03:48Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9f4edc9f-1dbe-40cf-a991-0feff4686246",
        "parentId" : "c6c00c21-f7ad-474c-bdbd-2074d39fcbe6",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Renamed to APIGroupVersion. (Though not pushed yet.)\n",
        "createdAt" : "2014-11-12T05:49:58Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +66,70 @@}\n\n// TODO: This is a whole API version right now. Maybe should rename it.\n// APIGroupVersion is a http.Handler that exposes multiple RESTStorage objects\n// It handles URLs of the form:"
  },
  {
    "id" : "89ed5b6b-df3b-4642-a019-e91cd9a19827",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0583c62e-5652-42a1-8589-0594a631e9b5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "path.Join\n",
        "createdAt" : "2014-11-13T01:19:20Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d4088d66-f396-4267-aa01-ca85eb30876c",
        "parentId" : "0583c62e-5652-42a1-8589-0594a631e9b5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I didn't change this. I just moved it.\n",
        "createdAt" : "2014-11-13T02:55:14Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +174,178 @@\t\tselfLinker:      g.handler.selfLinker,\n\t}\n\tproxyHandler := &ProxyHandler{prefix + \"/proxy/\", g.handler.storage, g.handler.codec}\n\tredirectHandler := &RedirectHandler{g.handler.storage, g.handler.codec}\n\topHandler := &OperationHandler{g.handler.ops, g.handler.codec}"
  },
  {
    "id" : "5fa2e533-5886-4ef0-a8a0-dd36310ababb",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "514b3bec-183b-4bd2-999d-337c9f5448ef",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "It looks like Consume takes as many mime types as you want.  So maybe enumerate the ones we take rather than accept all?\n\nNow, the question is what mime type(s) YAML is.\nI think `ws.Consumes(restful.MIME_JSON, \"application/x-yaml\", \"text/yaml\")` should do it\n",
        "createdAt" : "2014-11-13T05:35:37Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b2c0fc38-d82e-4f36-8853-d9f420e6d3c5",
        "parentId" : "514b3bec-183b-4bd2-999d-337c9f5448ef",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes, Consume takes an arbitrary number of types. However, not all clients set a content type at all, and there is no standard yaml type. I figure this can be fixed in a follow-up PR, after we get our client library and tools squared away.\n",
        "createdAt" : "2014-11-13T05:59:30Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +185,189 @@\t// TODO: change to restful.MIME_JSON when we convert YAML->JSON and set content type in client\n\tws.Consumes(\"*/*\")\n\tws.Produces(restful.MIME_JSON)\n\t// TODO: require json on input\n\t//ws.Consumes(restful.MIME_JSON)"
  },
  {
    "id" : "24e27124-9072-459e-9358-1d82a84719ce",
    "prId" : 807,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a278ddba-e92c-4993-a0d9-7956eb3253ac",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What do you think about:\n- Taking the version out of the prefix\n- Instead, make a supportedVersions map[string]Codec\n",
        "createdAt" : "2014-08-06T22:26:34Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6422b1b7-23d4-4971-a06a-d8a1c08acf74",
        "parentId" : "a278ddba-e92c-4993-a0d9-7956eb3253ac",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should we reject posts/puts to version v1beta1 that have kind v1beta2?  If so, then I think it is codec per version.  Thinking forward though, eventually we have codec per version per serialization format.  Perhaps we want to pass in a codec when we install handlers:\n\n```\nserver := apiserver.New(storage)\nmux.Handle(\"api/v1beta1\", server.HandlerFor(codecV1beta1))\nmux.Handle(\"api/v1beta2\", server.HandlerFor(codecV2beta1))\nserver.InstallSupportHandlers(mux)\n```\n\nEDIT: Basically the same as the map, just cutting down the constructor length\n",
        "createdAt" : "2014-08-06T22:35:54Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6b9b4b8b-c401-4a36-b8d4-6dec557f64be",
        "parentId" : "a278ddba-e92c-4993-a0d9-7956eb3253ac",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "> Should we reject posts/puts to version v1beta1 that have kind v1beta2? If so, then I think it is codec per version. \n\nHm, I'm OK if the codec is \"nice\" and accepts multiple versions as input, but its output should _always_ be of the version it is registered as.\n\n> eventually we have codec per version per serialization format.\n\nAgree, but let's worry about it when we add gob or whatever. :)\n",
        "createdAt" : "2014-08-06T23:06:44Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2c3ff274-1ae1-4ee7-8070-029186cd2703",
        "parentId" : "a278ddba-e92c-4993-a0d9-7956eb3253ac",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can I do that in the follow up where I split up the constructor into multiple methods?\n",
        "createdAt" : "2014-08-07T14:46:39Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "22c01616-54e7-433c-8bf0-989aaa2917a2",
        "parentId" : "a278ddba-e92c-4993-a0d9-7956eb3253ac",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sure.\n",
        "createdAt" : "2014-08-07T17:10:38Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9fc0bcf3d87a5f0c79ffd499cd9feef642b3385",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +51,55 @@\tprefix      string\n\tstorage     map[string]RESTStorage\n\tcodec       Codec\n\tops         *Operations\n\tmux         *http.ServeMux"
  },
  {
    "id" : "32e2dd11-3f09-4bc9-a320-1defa23ebaa4",
    "prId" : 807,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848bd6c4-e57a-4924-9989-ef496e7682c4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "...I guess it makes sense to duplicate this interface here. :/\n",
        "createdAt" : "2014-08-06T22:27:54Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2506af71-cb88-4f6b-9a21-dac43e522c5e",
        "parentId" : "848bd6c4-e57a-4924-9989-ef496e7682c4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : ":)\n",
        "createdAt" : "2014-08-06T22:30:37Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bf7fbe51-aa01-442a-a24d-90684bf10b11",
        "parentId" : "848bd6c4-e57a-4924-9989-ef496e7682c4",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I hate copying these everywhere almost as much as I hate extra dependencies. :( Can we make a tiny package just to declare the interface? I guess that's ugly too.\n",
        "createdAt" : "2014-08-06T22:35:03Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "54e0ce9c-1926-4ba9-b158-00b7fcf3b5ce",
        "parentId" : "848bd6c4-e57a-4924-9989-ef496e7682c4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : ":)\n",
        "createdAt" : "2014-08-06T22:38:42Z",
        "updatedAt" : "2014-08-07T17:35:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9fc0bcf3d87a5f0c79ffd499cd9feef642b3385",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +36,40 @@// Codec defines methods for serializing and deserializing API\n// objects\ntype Codec interface {\n\tEncode(obj interface{}) (data []byte, err error)\n\tDecode(data []byte) (interface{}, error)"
  },
  {
    "id" : "c8042563-045a-4606-b0fe-88fe7542d60d",
    "prId" : 722,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4006dea-9170-45ef-b154-a139f763364a",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "nit: delete stray newline\n",
        "createdAt" : "2014-08-01T16:29:28Z",
        "updatedAt" : "2014-08-08T23:44:51Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "0083fae4539a233301eac5fea7134ebeb0aabe21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +338,342 @@\treturn ioutil.ReadAll(req.Body)\n}\n\n// splitPath returns the segments for a URL path\nfunc splitPath(path string) []string {"
  },
  {
    "id" : "89c17fce-fe73-4eb6-8e79-2209176b620b",
    "prId" : 627,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5036e183-402d-4d8d-a19d-d3cc9afd5b04",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not for this pull, but we need to start splitting up apiserver.go, it's kind of a mess.  We should make the next person to add a method here change it...\n",
        "createdAt" : "2014-07-28T21:19:48Z",
        "updatedAt" : "2014-07-28T22:45:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0f004d4b-5650-4ee3-862f-a9286d4a963b",
        "parentId" : "5036e183-402d-4d8d-a19d-d3cc9afd5b04",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Agreed.\n",
        "createdAt" : "2014-07-28T22:31:58Z",
        "updatedAt" : "2014-07-28T22:45:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b8488028df37ae39349f089dabfc56e1821c840",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +185,189 @@}\n\n// handleVersionReq writes the server's version information.\nfunc (server *APIServer) handleVersionReq(w http.ResponseWriter, req *http.Request) {\n\tserver.writeRawJSON(http.StatusOK, version.Get(), w)"
  },
  {
    "id" : "5102da12-f6c5-4af1-96e6-70378318d7fe",
    "prId" : 562,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "575d21f2-c74b-4fe3-92bd-931f2f2899a1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This will have the result of causing ALL pages not handled otherwise to show our index page. I think it's necessary to add code in handleIndex that checks the path and only responds to \"/\" or reasonable variations of \"/index.html\".\n",
        "createdAt" : "2014-07-22T20:34:11Z",
        "updatedAt" : "2014-07-22T21:12:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ad71f92d400ab1fb5e2037e490a00494cf767e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +151,155 @@\thealthz.InstallHandler(s.mux)\n\n\ts.mux.HandleFunc(\"/\", s.handleIndex)\n\n\t// Handle both operations and operations/* with the same handler"
  },
  {
    "id" : "b59985ee-5272-48ed-a0f8-2269f2a68a43",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a05d43d-c499-4d66-9262-3585a8218f0c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think it's impossible for storage.Create() to return a not found.  A few hypothetical scenarios\n- we add a child relation resource that corresponds to another resource in the system.  Might be bad request, invalidation error, but might also be 404\n- we add a parent relation resource (a project?) that may be deleted in between request and response.\n- storage needs to read its write for some reason - another process goes and deletes the read while that happens (extremely unlikely).  Possibly it should return a 500 there\n\nProbably better to add it rather than not.\n",
        "createdAt" : "2014-07-17T00:58:00Z",
        "updatedAt" : "2014-07-18T05:17:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "800e6b86-e744-4bd7-bb39-cb831968e076",
        "parentId" : "1a05d43d-c499-4d66-9262-3585a8218f0c",
        "authorId" : "fb0ef111-25de-4d6e-872b-9978dad70f6c",
        "body" : "Done.\n\nI agree that it is safer for future addition of resource types, although there's no current Storage implementation whose Create() actually returns a not found, IIUC.\n",
        "createdAt" : "2014-07-17T04:39:15Z",
        "updatedAt" : "2014-07-18T05:17:22Z",
        "lastEditedBy" : "fb0ef111-25de-4d6e-872b-9978dad70f6c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aa3de12d4199e380701e78c9ecdcefcec6ad4d9",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +335,339 @@\t\t\treturn\n\t\t}\n\t\tout, err := storage.Delete(parts[1])\n\t\tif IsNotFound(err) {\n\t\t\tserver.notFound(req, w)"
  },
  {
    "id" : "56aef6db-e5f7-4a31-847f-3c7b9edf5ffe",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "565499b7-ec6e-43f7-82e4-1525e193d68c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also may need to remove any hash/signature headers-- that's a can of worms. TODO?\n",
        "createdAt" : "2014-07-15T20:30:17Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +286,290 @@\n\tresp.Body = ioutil.NopCloser(newContent)\n\t// Update header node with new content-length\n\t// TODO: Remove any hash/signature headers here?\n\tresp.Header.Del(\"Content-Length\")"
  },
  {
    "id" : "e67210df-c8e8-40c9-8aa8-a15e2b291b1a",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97df5765-1c0e-44c2-93b5-d8a15465a125",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is there a test for this rewriting (maybe I missed it)? I think it deserves a test.\n",
        "createdAt" : "2014-07-15T20:42:22Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "77b12be6-9f4f-46e3-90ca-86e541e9f839",
        "parentId" : "97df5765-1c0e-44c2-93b5-d8a15465a125",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Test is adding\n",
        "createdAt" : "2014-07-17T17:44:12Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +259,263 @@\t// point to correct minion\n\tvar updateHRef func(*html.Node)\n\tupdateHRef = func(n *html.Node) {\n\t\tif n.Type == html.ElementNode && n.Data == \"a\" {\n\t\t\tfor i, attr := range n.Attr {"
  },
  {
    "id" : "1e8ca64f-d2c9-4af4-98cc-edf75718a899",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e998cca-6d67-403b-b019-eebc4030c3c4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Shouldn't this URL and the one you pass to the GET request match?\n",
        "createdAt" : "2014-07-18T17:29:41Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9d0eb3df-30ee-4630-93ec-3a566bda298f",
        "parentId" : "9e998cca-6d67-403b-b019-eebc4030c3c4",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "That is what I thought initially. Unfortunately they don't. From godoc, the new ReverseProxy returned here treats Path provides in URL as base path in target.\n",
        "createdAt" : "2014-07-18T20:06:21Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "2defda34-c454-4e66-9bd7-d0033725088f",
        "parentId" : "9e998cca-6d67-403b-b019-eebc4030c3c4",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see.\n",
        "createdAt" : "2014-07-18T20:08:01Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +219,223 @@\t}\n\n\tproxy := httputil.NewSingleHostReverseProxy(minionURL)\n\tproxy.Transport = &minionTransport{}\n\tproxy.ServeHTTP(w, newReq)"
  },
  {
    "id" : "f5e9e381-81a0-4edf-93bd-5220361c4e87",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb91d90-36d7-4cf8-b523-3c6c1c660df9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is req.URL.Path guaranteed to end with a /?\n",
        "createdAt" : "2014-07-18T17:32:16Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5feb81d4-abd7-4d79-8ce3-18a350e9ef41",
        "parentId" : "4eb91d90-36d7-4cf8-b523-3c6c1c660df9",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "yes. \n",
        "createdAt" : "2014-07-18T20:09:28Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +264,268 @@\t\t\t\tif attr.Key == \"href\" {\n\t\t\t\t\tUrl := &url.URL{\n\t\t\t\t\t\tPath: \"/proxy/minion/\" + req.URL.Host + req.URL.Path + attr.Val,\n\t\t\t\t\t}\n\t\t\t\t\tn.Attr[i].Val = Url.String()"
  },
  {
    "id" : "a33207e6-7b97-4241-956e-b079e65a9849",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f95fe8b8-4bd4-4954-8106-2f3cb99653fe",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "In that case, can you construct this URL via a URL object? Sorry to be such a pain about this...\n",
        "createdAt" : "2014-07-18T20:08:52Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c1a1498a-80b5-428d-bcbe-39f8d1a1dadd",
        "parentId" : "f95fe8b8-4bd4-4954-8106-2f3cb99653fe",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "I also tried that, actually that is my initial version I started from at the beginning, but ran into mystery issue with a nil response. I tried it yesterday again, and had the same result. I also dumped the entire Request, before and after proxied, and comparing them with dumps with this version field by field yesterday, cannot figure it out. It looks like a bug in httputil package. Already spent too much time on this, didn't dive deeper. \n",
        "createdAt" : "2014-07-18T20:17:45Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +214,218 @@\t\tHost:   minionHost,\n\t}\n\tnewReq, err := http.NewRequest(\"GET\", minionPath+\"?\"+rawQuery, nil)\n\tif err != nil {\n\t\tglog.Errorf(\"Failed to create request: %s\", err)"
  },
  {
    "id" : "f0c7c49d-9697-4cc6-9e44-3187cd854eaf",
    "prId" : 249,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fb15abb-eb92-4e4c-98c8-bbb9fdcc93a9",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Let's make this have a buffer of size 1 so that writes to the channel don't block on the read.\n",
        "createdAt" : "2014-06-26T17:33:33Z",
        "updatedAt" : "2014-06-26T18:36:51Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2359f1d3-c031-4328-a1ec-8e09356efd21",
        "parentId" : "9fb15abb-eb92-4e4c-98c8-bbb9fdcc93a9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's only written to here in this function, and it's as the last thing the goroutine does, and there is now always a reader. I'd rather leave as-is to explicitly show that it has these properties.\n",
        "createdAt" : "2014-06-26T17:36:51Z",
        "updatedAt" : "2014-06-26T18:36:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "33d7a9c6-0779-4ae5-a6ab-382e6fc7e438",
        "parentId" : "9fb15abb-eb92-4e4c-98c8-bbb9fdcc93a9",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "My concern is that if we timeout, there is now no one reading on the channel, and so we'll block up this goroutine, essentially forever, and we'll leak threads.\n",
        "createdAt" : "2014-06-26T17:52:34Z",
        "updatedAt" : "2014-06-26T18:36:51Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "59b6cf17-f620-4b0f-97eb-770255d18081",
        "parentId" : "9fb15abb-eb92-4e4c-98c8-bbb9fdcc93a9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I reworked the way timeouts are handled in this PR. We don't stop reading the channel if the client times out. We now wait and cache the result for up to 10 minutes. I can change it back to a buffered channel if you're really worried.\n",
        "createdAt" : "2014-06-26T17:55:39Z",
        "updatedAt" : "2014-06-26T18:36:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "afd13edd6a16c86de4991f272a939fe60b652824",
    "line" : null,
    "diffHunk" : "@@ -1,1 +50,54 @@// by RESTStorage's Update, Delete, and Create methods.\nfunc MakeAsync(fn WorkFunc) <-chan interface{} {\n\tchannel := make(chan interface{})\n\tgo func() {\n\t\tdefer util.HandleCrash()"
  },
  {
    "id" : "17d3a64f-0d6e-4971-a5ee-e727fcfc9b12",
    "prId" : 166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf4b560-cb19-4ee7-b45e-368412ad4316",
        "parentId" : null,
        "authorId" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "body" : "you could directly do: `case <- time.After(timeout)`\n",
        "createdAt" : "2014-06-19T05:17:07Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "tags" : [
        ]
      },
      {
        "id" : "1e5f7d44-7c9c-4309-95ec-c9da0e17ff1d",
        "parentId" : "6cf4b560-cb19-4ee7-b45e-368412ad4316",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1\n",
        "createdAt" : "2014-06-19T21:45:49Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2640de5c0272a345764332693bfc005808f68ddd",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +153,157 @@\tcase obj = <-out:\n\t\treturn obj, nil\n\tcase <-tick:\n\t\treturn nil, fmt.Errorf(\"Timed out waiting for synchronization.\")\n\t}"
  },
  {
    "id" : "e2171846-5c94-4fde-8c9f-ebcb46bc5be3",
    "prId" : 166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c484caa5-a81b-447f-97a9-8d8f6f7d2746",
        "parentId" : null,
        "authorId" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "body" : "`case obj := <- out:`\n",
        "createdAt" : "2014-06-19T05:19:31Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "tags" : [
        ]
      },
      {
        "id" : "b678a69d-4d2e-40ea-a222-4dff23c9deff",
        "parentId" : "c484caa5-a81b-447f-97a9-8d8f6f7d2746",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1.\n",
        "createdAt" : "2014-06-19T21:45:19Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2640de5c0272a345764332693bfc005808f68ddd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +151,155 @@\tvar obj interface{}\n\tselect {\n\tcase obj = <-out:\n\t\treturn obj, nil\n\tcase <-tick:"
  },
  {
    "id" : "52d06638-749c-4ee0-ab15-90a563126b84",
    "prId" : 166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a296f8b4-b943-4be7-b574-7045f7642c80",
        "parentId" : null,
        "authorId" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "body" : "`obj :=`\n",
        "createdAt" : "2014-06-19T05:20:41Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "6001b825-f0f9-4fc3-b624-34a076b031e1",
        "tags" : [
        ]
      },
      {
        "id" : "f7ff7f29-2dd6-44ed-9daf-2b0a8c4ec4db",
        "parentId" : "a296f8b4-b943-4be7-b574-7045f7642c80",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Can't do that, since I need obj to be of type interface{} not type Status()\n",
        "createdAt" : "2014-06-19T22:49:25Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2640de5c0272a345764332693bfc005808f68ddd",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\tout, err := storage.Delete(parts[1])\n\t\tvar obj interface{}\n\t\tobj = Status{Success: true}\n\t\tif err == nil && sync {\n\t\t\tobj, err = server.waitForObject(out, timeout)"
  },
  {
    "id" : "7ae54c92-2863-41ba-bfd0-a526389e2af9",
    "prId" : 166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32c6b7fa-256f-4894-9023-3465069af3ea",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think we may want to handle a timeout error differently. Perhaps return 202, Accepted?\n",
        "createdAt" : "2014-06-19T21:51:13Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c1583c56-5303-4718-b189-c63e2a8a3dbc",
        "parentId" : "32c6b7fa-256f-4894-9023-3465069af3ea",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Done.\n",
        "createdAt" : "2014-06-19T22:17:13Z",
        "updatedAt" : "2014-06-19T23:13:25Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2640de5c0272a345764332693bfc005808f68ddd",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +228,232 @@\t\t}\n\t\tif err != nil {\n\t\t\tserver.error(err, w)\n\t\t\treturn\n\t\t}"
  }
]