[
  {
    "id" : "ec533119-f0f3-4d58-abe9-ed6213058420",
    "prId" : 30881,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bcfd77a-7a0c-4a0b-bde2-af90aef5921b",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Since these are evaluated one at a time, it might be good to document that extra values should be independent of Group and User information. Though I'm trying to think through the implications of that.\n",
        "createdAt" : "2016-08-18T16:47:37Z",
        "updatedAt" : "2016-08-22T11:44:09Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "aa4eeda8-923a-4d7a-93fb-ec5d55f6d64c",
        "parentId" : "0bcfd77a-7a0c-4a0b-bde2-af90aef5921b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Since these are evaluated one at a time, it might be good to document that extra values should be independent of Group and User information. Though I'm trying to think through the implications of that.\n\nI think one at a time checks make sense because we're checking if the requesting subject can specify the extra.  It would be pretty strange for the requesting subject to be allowed to use an extra key/value pair, but only in the presence of certain groups.\n",
        "createdAt" : "2016-08-18T17:54:07Z",
        "updatedAt" : "2016-08-22T11:44:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "432e6ecdaec7a972af03f295efdd9ae0d59a9ae3",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +93,97 @@\t\t\t\tgroups = append(groups, impersonationRequest.Name)\n\n\t\t\tcase authenticationapi.Kind(\"UserExtra\"):\n\t\t\t\textraKey := impersonationRequest.FieldPath\n\t\t\t\textraValue := impersonationRequest.Name"
  },
  {
    "id" : "726fcf14-2d21-41f6-8cd2-0bd61f659a6d",
    "prId" : 30803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8953ea5d-1eff-49e3-a8b0-baeafd26240d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "error on passing the impersonate groups header but not the impersonate user?\n",
        "createdAt" : "2016-08-17T19:51:26Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d5715fb8-5a7b-4a4e-a80e-641059ed9aa0",
        "parentId" : "8953ea5d-1eff-49e3-a8b0-baeafd26240d",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "probably best to delete these headers regardless, right?\n",
        "createdAt" : "2016-08-17T20:04:08Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "116f2d3b-3a22-4e79-b4e4-2beffe780c12",
        "parentId" : "8953ea5d-1eff-49e3-a8b0-baeafd26240d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> probably best to delete these headers regardless, right?\n\nWe delete authorization headers because they are confidential, but the impersonation headers don't contain confidential information.\n",
        "createdAt" : "2016-08-17T20:09:41Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1f3cf1c8-1e71-4235-b6e7-0b36e65ef712",
        "parentId" : "8953ea5d-1eff-49e3-a8b0-baeafd26240d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> error on passing the impersonate groups header but not the impersonate user?\n\nSure.\n",
        "createdAt" : "2016-08-17T20:09:51Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb56512ea221a441353ce4a5855b882c57bfa8dd",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@func WithImpersonation(handler http.Handler, requestContextMapper api.RequestContextMapper, a authorizer.Authorizer) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n\t\trequestedUser := req.Header.Get(authenticationapi.ImpersonateUserHeader)\n\t\tif len(requestedUser) == 0 {\n\t\t\tif len(req.Header[authenticationapi.ImpersonateGroupHeader]) > 0 {"
  },
  {
    "id" : "00e9f168-063c-4001-ab59-531cfaa096d8",
    "prId" : 30803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "864ad052-4018-488d-a68b-29fdfd7b887c",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Shouldn't these be appended? e.g. I can request to impersonate a set of groups as well as a service account. Or are service accounts always guaranteed to be evaluated first?\n",
        "createdAt" : "2016-08-17T20:09:00Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "2f6824e3-aaaa-4c68-986e-b281d65a9d0c",
        "parentId" : "864ad052-4018-488d-a68b-29fdfd7b887c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`if !groupsSpecified` means `groups` will not get values anywhere else\n",
        "createdAt" : "2016-08-17T20:11:59Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "10885c66-a213-41fd-9dfe-fff275c0ce60",
        "parentId" : "864ad052-4018-488d-a68b-29fdfd7b887c",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "ah, right\n",
        "createdAt" : "2016-08-17T20:16:07Z",
        "updatedAt" : "2016-08-18T12:02:51Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb56512ea221a441353ce4a5855b882c57bfa8dd",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\t\t\tif !groupsSpecified {\n\t\t\t\t\t// if groups aren't specified for a service account, we know the groups because its a fixed mapping.  Add them\n\t\t\t\t\tgroups = serviceaccount.MakeGroupNames(impersonationRequest.Namespace, impersonationRequest.Name)\n\t\t\t\t}\n"
  }
]