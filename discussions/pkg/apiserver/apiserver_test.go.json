[
  {
    "id" : "c6d21f8e-e93d-45fe-91a3-008d99c5788f",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b517cff-3351-488f-ac91-6a24a931d129",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "yeouch.\n",
        "createdAt" : "2016-04-25T15:17:11Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "317dfac0-b188-453d-9ca3-fc33243adb82",
        "parentId" : "4b517cff-3351-488f-ac91-6a24a931d129",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Tempted to refactor this but it's kind of ugly in general to calculate this\nany other way.\n\nOn Mon, Apr 25, 2016 at 11:17 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/apiserver/apiserver_test.go\n> https://github.com/kubernetes/kubernetes/pull/24710#discussion_r60931185\n> :\n> \n> > @@ -1234,8 +1242,9 @@ func TestMetadata(t *testing.T) {\n> >         }\n> >     }\n> >     if matches[\"text/plain,application/json,application/yaml,application/vnd.kubernetes.protobuf\"] == 0 ||\n> > -       matches[\"application/json,application/json;stream=watch,application/vnd.kubernetes.protobuf,application/vnd.kubernetes.protobuf;stream=watch\"] == 0 ||\n> \n> yeouch.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24710/files/e4a1f3c4b34ba5ef0c8f08009e202d0b048498ff#r60931185\n",
        "createdAt" : "2016-04-25T15:18:48Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1235,1239 @@\t}\n\tif matches[\"text/plain,application/json,application/yaml,application/vnd.kubernetes.protobuf\"] == 0 ||\n\t\tmatches[\"application/json,application/json;stream=watch,application/vnd.kubernetes.protobuf,application/vnd.kubernetes.protobuf;stream=watch\"] == 0 ||\n\t\tmatches[\"application/json,application/yaml,application/vnd.kubernetes.protobuf\"] == 0 ||\n\t\tmatches[\"application/json\"] == 0 ||"
  },
  {
    "id" : "e148ce72-a984-4eb5-90ec-620a4f7fe116",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf3f15f2-b309-45e2-aedf-b158094d3d49",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Test that the returned item is the correct group/version/kind.\n",
        "createdAt" : "2016-02-29T21:48:56Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "97f4ffeb-1105-4ad9-a8e5-d4dbb91f81c2",
        "parentId" : "bf3f15f2-b309-45e2-aedf-b158094d3d49",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-03-02T00:49:19Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +3288,3292 @@\tif itemOut.Name != subresourceStorage.item.Name {\n\t\tt.Errorf(\"Unexpected data: %#v, expected %#v (%s)\", itemOut, subresourceStorage.item, string(body))\n\t}\n}\n"
  },
  {
    "id" : "2e1bbfce-daf1-4476-bfd3-1f9f2095eee7",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf770da-9a6f-40d1-94bb-4d3b65dfac2a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe register this in the other group, too, to prove that the correct one is chosen.\n",
        "createdAt" : "2016-02-29T21:49:47Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6f401f32-d4f3-4d25-9e42-73fc13c44bbe",
        "parentId" : "0cf770da-9a6f-40d1-94bb-4d3b65dfac2a",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-02-29T23:19:47Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : null,
    "diffHunk" : "@@ -1,1 +154,158 @@\t\t&apiservertesting.Simple{}, &apiservertesting.SimpleList{}, &api.ListOptions{},\n\t\t&apiservertesting.SimpleGetOptions{}, &apiservertesting.SimpleRoot{},\n\t\t&SimpleXGSubresource{})\n\t// Register SimpleXGSubresource in both testGroupVersion and testGroup2Version, and also their\n\t// their corresponding internal versions, to verify that the desired group version object is"
  },
  {
    "id" : "b38860e1-08b6-4e85-88e6-96e55582d056",
    "prId" : 21909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54399787-4f25-4407-84dc-12819475e904",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This doesn't seem right… we can't decode an API object using a real codec?\n",
        "createdAt" : "2016-03-02T04:28:08Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b85fd58d-bbf4-45db-b37b-bfe423511c5e",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@liggitt We can decode a serialized API object into a destination, not just `TypeMeta`. In fact we can decode `TypeMeta` just fine, but the decoded values won't be copied to the destination object (`itemOut` here) and that is by design. It would be dangerous to overwrite `TypeMeta`. We could probably implement a converter to allow overwriting `TypeMeta` in tests, but I don't think it is worth spending time on it.\n\nI think this is a reasonable workaround. Any other alternative suggestions?\n",
        "createdAt" : "2016-03-02T06:32:52Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "f37fe36e-c890-4ef0-a992-5de434287a04",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@liggett it's that I asked for the version/kind to be checked, and our codec consumes that information and leaves those fields blank.\n",
        "createdAt" : "2016-03-02T18:50:49Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "62a8b1b3-a48a-43de-9076-d0b96584f3fd",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "UnstructuredJSONScheme would do this, I think...\n\n```\n_, gvk, err := runtime.UnstructuredJSONScheme.Decode(data, nil, nil)\n// assert no err\n// assert gvk matches\n```\n",
        "createdAt" : "2016-03-02T18:57:18Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3400c444-8ff2-43cc-8843-8471dd1a7c72",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I guess it's json decoding either way, I just thought there was an existing codepath we could use\n",
        "createdAt" : "2016-03-02T18:58:10Z",
        "updatedAt" : "2016-03-02T19:40:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2ca4e90c-8063-4732-aa94-794c44a6c742",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@liggitt Do you feel strongly about swapping the current unmarshaling code with this snippet?\n",
        "createdAt" : "2016-03-02T20:29:29Z",
        "updatedAt" : "2016-03-02T20:29:29Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "947619a5-9f95-488f-86bf-10558ae38ffa",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I guess not\n",
        "createdAt" : "2016-03-02T20:32:30Z",
        "updatedAt" : "2016-03-02T20:32:30Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "73dac35a-f93a-4c91-8fb4-572b97401bef",
        "parentId" : "54399787-4f25-4407-84dc-12819475e904",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@liggitt Alright then, thanks!\n",
        "createdAt" : "2016-03-02T20:44:22Z",
        "updatedAt" : "2016-03-02T20:44:22Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7e56d242a90e8cc125ae1fc94a7eaf7767fb92",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +3273,3277 @@\t// conversion type list in API scheme and hence cannot be converted from input type object\n\t// to output type object. So it's values don't appear in the decoded output object.\n\tdecoder := json.NewDecoder(strings.NewReader(body))\n\tvar itemFromBody SimpleXGSubresource\n\terr = decoder.Decode(&itemFromBody)"
  },
  {
    "id" : "59c9f44f-4945-49b2-8a91-d3ab8ec3bcd8",
    "prId" : 17369,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943e32d0-3711-4a12-b90e-19ce1db3bfb5",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sorry I'm not familiar with the background of this PR. Is `labels=a%3Db&fields=c%3Dd` a query sent by old clients? If so, we probably should keep the original line to test the backward compatibility.\n",
        "createdAt" : "2015-11-23T20:05:52Z",
        "updatedAt" : "2015-11-24T13:42:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8d87cb00-a209-4362-813b-dcb00092feb4",
        "parentId" : "943e32d0-3711-4a12-b90e-19ce1db3bfb5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "No - it's not previous format - it's only the format that is introduced in the test - see ListOptions struct that I'm removing from addTestTypes(). In all production code we have labelSelector & fieldSelector.\n",
        "createdAt" : "2015-11-23T21:01:38Z",
        "updatedAt" : "2015-11-24T13:42:29Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a4a2c2e3-ba80-4cd6-a2ad-484329329166",
        "parentId" : "943e32d0-3711-4a12-b90e-19ce1db3bfb5",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ah, thanks.\n",
        "createdAt" : "2015-11-23T21:04:27Z",
        "updatedAt" : "2015-11-24T13:42:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf13bef955e43984f97e801dd71d38da834ba8f6",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +905,909 @@\t\t},\n\t\t{\n\t\t\turl:       \"/\" + prefix + \"/\" + testGroupVersion.Group + \"/\" + testGroupVersion.Version + \"/simple?namespace=other&labelSelector=a%3Db&fieldSelector=c%3Dd\",\n\t\t\tnamespace: \"\",\n\t\t\tselfLink:  \"/\" + prefix + \"/\" + testGroupVersion.Group + \"/\" + testGroupVersion.Version + \"/simple\","
  },
  {
    "id" : "2bd88276-637c-4847-bcd2-9e75ea4311e1",
    "prId" : 17227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d58edc9b-b565-4b90-bcb2-b9bcd0b1a418",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can we remove the testVersion? It's containing group/version.\n",
        "createdAt" : "2015-11-13T18:59:49Z",
        "updatedAt" : "2015-11-16T12:42:07Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5b4dc671-5ef0-430d-8f9a-7a49189ded40",
        "parentId" : "d58edc9b-b565-4b90-bcb2-b9bcd0b1a418",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can we remove the testVersion? It's containing group/version.\n\nThis intersects with the `RESTMapping` that I'm touching now.  May I do it as part of that pull?  The use of `version` in and out of the `RESTMapper` was inconsistent between tests and code\n",
        "createdAt" : "2015-11-13T19:02:40Z",
        "updatedAt" : "2015-11-16T12:42:07Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e60261a1-5dba-439c-898e-9eb36bba5d2f",
        "parentId" : "d58edc9b-b565-4b90-bcb2-b9bcd0b1a418",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sure. Thanks.\n",
        "createdAt" : "2015-11-13T19:07:42Z",
        "updatedAt" : "2015-11-16T12:42:07Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b675a77213760794d3dd2bf819c3d435a9435c30",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +60,64 @@var testAPIGroup = \"test.group\"\nvar testGroupVersion = unversioned.GroupVersion{Group: testAPIGroup, Version: \"version\"}\nvar testVersion = testGroupVersion.String()\nvar newGroupVersion = unversioned.GroupVersion{Group: testAPIGroup, Version: \"version2\"}\nvar newVersion = newGroupVersion.String()"
  },
  {
    "id" : "cedf5ed7-eb50-4d6d-b61f-8c635bb982cc",
    "prId" : 17175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d44b24db-1c0d-4521-9dac-b657b1f4ea5e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The tests were running with invalid `GroupVersion` values, since only `v1` is allowed to not have an API group.  This fixes the behavior of the test, but ends up looking a little noisy.  Ideally, we also move the prefix.\n",
        "createdAt" : "2015-11-12T20:32:06Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "33636aad-6a53-4606-b932-edde54cd0798",
        "parentId" : "d44b24db-1c0d-4521-9dac-b657b1f4ea5e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I'm fixing this this morning..I'll rebase mine on yours.\n",
        "createdAt" : "2015-11-12T21:01:49Z",
        "updatedAt" : "2015-11-13T14:00:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c725f17ea4d83088050ce75e64f6f42ac7f96aa",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +59,63 @@// This creates fake API versions, similar to api/latest.go.\nvar testAPIGroup = \"test.group\"\nvar testGroupVersion = unversioned.GroupVersion{Group: testAPIGroup, Version: \"version\"}\nvar testVersion = testGroupVersion.String()\nvar newGroupVersion = unversioned.GroupVersion{Group: testAPIGroup, Version: \"version2\"}"
  },
  {
    "id" : "3684ab5e-0631-4385-96be-98f2f6685f15",
    "prId" : 13981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f371bf9b-60f6-454a-bf66-49c18aba8238",
        "parentId" : null,
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Could you add a test that verifies the fix (i.e. test with an actual empty namespace)?\n",
        "createdAt" : "2015-09-15T20:06:13Z",
        "updatedAt" : "2015-09-15T20:06:13Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      },
      {
        "id" : "d6ad8ddb-93b2-46f1-a976-0dab0930a662",
        "parentId" : "f371bf9b-60f6-454a-bf66-49c18aba8238",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Note that we should add the test in master and not in this cherrypick PR.\n",
        "createdAt" : "2015-09-15T21:03:32Z",
        "updatedAt" : "2015-09-15T21:03:32Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "a5a50180-0f8a-4c7b-820a-b3d3939d587f",
        "parentId" : "f371bf9b-60f6-454a-bf66-49c18aba8238",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "SGTM.\n",
        "createdAt" : "2015-09-15T21:46:05Z",
        "updatedAt" : "2015-09-15T21:46:05Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf6675c45d3a50df93f8206e9572e2f87a2c39fb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2331,2335 @@\tsimple := &Simple{Other: \"foo\"}\n\tdata, _ := codec.Encode(simple)\n\titemOut := expectApiStatus(t, \"POST\", server.URL+\"/api/version/namespaces/default/foo?timeout=4ms\", data, apierrs.StatusServerTimeout)\n\tif itemOut.Status != api.StatusFailure || itemOut.Reason != api.StatusReasonTimeout {\n\t\tt.Errorf(\"Unexpected status %#v\", itemOut)"
  },
  {
    "id" : "a1078b8c-0218-4944-80e3-837f039c2a1d",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2d20cb9-d12b-4835-8c6d-3dc7c3c025c4",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Are there intermediate proxies that drop request body on HTTP DELETE operations?  Do all common HTTP libraries allow you to send a request entity on a DELETE?  I am wondering why this approach instead of using a header X-Grace-Period or something similar?\n",
        "createdAt" : "2015-03-18T14:01:13Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "3aa7032c-a3c8-4ed1-9fbc-1ffb93c03599",
        "parentId" : "c2d20cb9-d12b-4835-8c6d-3dc7c3c025c4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If it works, JSON is consistent with all other operations and more friendly to our tooling and to forms.\n\nNot surprisingly, others have run into the same issue:\nhttp://stackoverflow.com/questions/299628/is-an-entity-body-allowed-for-an-http-delete-request\nhttp://stackoverflow.com/questions/14323716/restful-alternatives-to-delete-request-body\n\nApparently it mostly works but there are known cases of it not working (e.g. Akamai).\n\nMost common alternatives proposed are a special endpoint or query params. A subresource would be more consistent with our current direction.\n",
        "createdAt" : "2015-03-18T14:27:19Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "faa7f7bf-9113-465a-a11c-cb8a7ff41a79",
        "parentId" : "c2d20cb9-d12b-4835-8c6d-3dc7c3c025c4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We can always add support for transforming headers and query parameters into a resource at the api server level.  The advantage to defining this way first is that those become a special case - i.e. \"gracePeriodSeconds\" on the request params would be transformed into a JSON object passed to conversion.\n",
        "createdAt" : "2015-03-18T20:48:04Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "847ff9a8-b046-4023-9525-e7875d255836",
        "parentId" : "c2d20cb9-d12b-4835-8c6d-3dc7c3c025c4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "sgtm\n",
        "createdAt" : "2015-03-19T00:46:34Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b1e18f67-4a9a-4bbc-a033-76f71885b22c",
        "parentId" : "c2d20cb9-d12b-4835-8c6d-3dc7c3c025c4",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "sgtm\n",
        "createdAt" : "2015-03-19T14:05:22Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +816,820 @@\n\tclient := http.Client{}\n\trequest, err := http.NewRequest(\"DELETE\", server.URL+\"/api/version/simple/\"+ID, bytes.NewReader(body))\n\tres, err := client.Do(request)\n\tif err != nil {"
  },
  {
    "id" : "e00fc43c-d03e-4b43-97f2-261360a5d24b",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df07893f-1322-4f7b-9ef5-c5900f2581d3",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Could use the helper.\n",
        "createdAt" : "2015-03-19T01:24:28Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +807,811 @@\n\tgrace := int64(300)\n\titem := &api.DeleteOptions{\n\t\tGracePeriodSeconds: &grace,\n\t}"
  },
  {
    "id" : "563a35ea-01f3-469b-9288-2046033791a4",
    "prId" : 5085,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ffd121c-021c-45a7-b39c-d12b0ec49787",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is there any reason why we'd want to return different status codes (accepted) for graceful deletion vs. immediate deletion?\n",
        "createdAt" : "2015-03-19T01:36:26Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5f9fdd37-66e4-4d84-b805-498fd54f379b",
        "parentId" : "0ffd121c-021c-45a7-b39c-d12b0ec49787",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Or perhaps if the object has already been gracefully deleted but the requested grace period can't be respected due to a nearer deletionTimestamp?\n",
        "createdAt" : "2015-03-19T01:40:04Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0f1a083b-079d-4a23-b112-b22c400beb84",
        "parentId" : "0ffd121c-021c-45a7-b39c-d12b0ec49787",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, but that requires a bigger change to the C/U/D methods.  Wanted to sync with @lavalamp because tried this once before and didn't like it.  Was considering changing all three mutator signatures to:\n\n```\nfunc Method(ctx, obj) (runtime.Object, api.Status, err)\n```\n\nThe second return value indicates status that modified the runtime object - status, return code (accepted vs created vs ok vs redirect).  Delete could return nil runtime.Object instead of requiring consumers to type check the returned object.  Client methods could also return this.  It doesn't have to be api.Status - it could be something similar.  Goal is to clearly delineate error case (go style) vs object (first ret val) vs restful modifiers (second ret val).  We could wrap the runtime object but that requires consumers to unwrap which seems like bad OO\n\n> On Mar 18, 2015, at 9:36 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/apiserver/apiserver_test.go:\n> \n> > -   grace := int64(300)\n> > -   item := &api.DeleteOptions{\n> > -       GracePeriodSeconds: &grace,\n> > -   }\n> > -   body, err := codec.Encode(item)\n> > -   if err != nil {\n> > -       t.Fatalf(\"unexpected error: %v\", err)\n> > -   }\n> >   +\n> > -   client := http.Client{}\n> > -   request, err := http.NewRequest(\"DELETE\", server.URL+\"/api/version/simple/\"+ID, bytes.NewReader(body))\n> > -   res, err := client.Do(request)\n> > -   if err != nil {\n> > -       t.Fatalf(\"unexpected error: %v\", err)\n> > -   }\n> > -   if res.StatusCode != http.StatusOK {\n> >   Is there any reason why we'd want to return different status codes (accepted) for graceful deletion vs. immediate deletion?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-03-19T03:47:41Z",
        "updatedAt" : "2015-03-19T19:33:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "428d2263e5966e830ce9c1172b48da05d8ce0e44",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +821,825 @@\t\tt.Fatalf(\"unexpected error: %v\", err)\n\t}\n\tif res.StatusCode != http.StatusOK {\n\t\tt.Errorf(\"unexpected response: %s %#v\", request.URL, res)\n\t\ts, _ := ioutil.ReadAll(res.Body)"
  },
  {
    "id" : "d12db204-6424-48d2-abf5-f3765a246086",
    "prId" : 2568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07b47dd2-4421-4bb6-aaf2-83fcc1e5bd76",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please exercise this in a test :)\n",
        "createdAt" : "2014-11-24T19:25:21Z",
        "updatedAt" : "2014-12-05T22:37:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef25520baa736ae7ec2afbd19bb7dfb17a1be164",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +662,666 @@}\n\nfunc (s *setTestSelfLinker) Namespace(runtime.Object) (string, error) { return s.namespace, nil }\nfunc (s *setTestSelfLinker) Name(runtime.Object) (string, error)      { return s.name, nil }\nfunc (*setTestSelfLinker) SelfLink(runtime.Object) (string, error)    { return \"\", nil }"
  },
  {
    "id" : "852c52cd-f347-4493-9990-0b9e7e37b443",
    "prId" : 2568,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2fc0300-f383-41e6-be54-5d4c2c04a63b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thanks for adding-- is there no test for list types?\n",
        "createdAt" : "2014-11-24T21:08:11Z",
        "updatedAt" : "2014-12-05T22:37:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ce6785b4-7d00-4a66-9fbc-81726350a20d",
        "parentId" : "c2fc0300-f383-41e6-be54-5d4c2c04a63b",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "There is a test that gets a non-empty list, but the way that `setTestSelfLinker` works, it will error when any of the descendant items links are set because their links will be different than the `expectedSet`.  As a result, I see no test that uses `expectedSet` when fetching lists of items.\n",
        "createdAt" : "2014-11-25T14:51:05Z",
        "updatedAt" : "2014-12-05T22:37:23Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef25520baa736ae7ec2afbd19bb7dfb17a1be164",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +684,688 @@\t\tname:        \"bar\",\n\t\tnamespace:   \"other\",\n\t\texpectedSet: \"/prefix/version/foo/bar?namespace=other\",\n\t}\n\thandler := Handle(map[string]RESTStorage{"
  },
  {
    "id" : "0db20384-cf88-4b17-b9c2-7f79bda58690",
    "prId" : 457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "783ab1e4-469b-4308-843b-874f96037d15",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please test that the ``href=` were rewritten correctly.\n",
        "createdAt" : "2014-07-17T17:49:38Z",
        "updatedAt" : "2014-07-21T21:47:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc921b8c65a4ca16443ac03c3d44545cefbde479",
    "line" : null,
    "diffHunk" : "@@ -1,1 +715,719 @@\tif !strings.Contains(string(body), expected) {\n\t\tt.Errorf(\"Received wrong content: %s\", string(body))\n\t}\n}"
  }
]