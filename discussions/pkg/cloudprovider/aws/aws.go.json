[
  {
    "id" : "e0ce2d93-bb98-42b1-be5f-d81a651d432a",
    "prId" : 11029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "557fb367-0a27-41c4-8516-c3bd34a8105e",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Optional (potentially) cleaner approach to this style of thing:\n\n``` go\ntick := time.Tick(1 * time.Second)\nfor {\n   select {\n   case <- tick:\n     ...\n   case <- time.After(60 * time.Second):\n   ...\n}\n```\n\nYou can do this if you want, definitely not required.\n",
        "createdAt" : "2015-07-22T20:48:18Z",
        "updatedAt" : "2015-07-26T22:29:17Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "f321591d-11b9-4837-a3a3-a572451534bf",
        "parentId" : "557fb367-0a27-41c4-8516-c3bd34a8105e",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I really should be doing exponential backoff here I think.  AWS had a pretty bad outage in the early days because everyone was just doing straight loops, and so a degraded API grew into a full on outage, as I recall.  I hope we can implement that using a reusable Go function but I'm not entirely sure how best to express that.  Maybe something like time.Tick but with a timeout and backoff?   I'll add a TODO to add exponential backoff in the meantime.\n",
        "createdAt" : "2015-07-26T22:22:35Z",
        "updatedAt" : "2015-07-26T22:29:17Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "23a190cd971842d0662fb3b06ed42d93b93c945a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1740,1744 @@func (s *AWSCloud) createTags(request *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {\n\t// TODO: We really should do exponential backoff here\n\tattempt := 0\n\tmaxAttempts := 60\n"
  },
  {
    "id" : "8a46051b-2907-4771-bb27-f41d812b9dda",
    "prId" : 11029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3da5c8c7-ea2e-4e21-a6d1-878522363ced",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Sorry, I wasn't fully clear in my earlier example:\n\n```\nswitch err := err.(type) {\n  case awserr.Error:\n     if err.Code() == \"InvalidGroup.Duplicate\" ...\n...\n```\n\nshould work.\n",
        "createdAt" : "2015-07-27T20:55:15Z",
        "updatedAt" : "2015-07-27T20:55:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "23a190cd971842d0662fb3b06ed42d93b93c945a",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +1695,1699 @@\t\tif err != nil {\n\t\t\tignore := false\n\t\t\tswitch err.(type) {\n\t\t\tcase awserr.Error:\n\t\t\t\tawsError := err.(awserr.Error)"
  },
  {
    "id" : "a15090f7-e810-40f1-b8a5-7b57ac8e56cd",
    "prId" : 8297,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52e31b8e-4049-4de7-84cb-f2b3e4302696",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I think you need to map nil through i.e. insert this check at the top\n\n```\n      if orig == nil {\n               return nil\n       }\n```\n\nto deal with AWS nil vs []string{}\n",
        "createdAt" : "2015-05-20T11:49:58Z",
        "updatedAt" : "2015-05-20T15:42:36Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad9f2d7a5612e5e326ac4614985a6eec51574681",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\t}\n\n\tn := make([]*string, len(orig))\n\tfor i := range orig {\n\t\tn[i] = &orig[i]"
  },
  {
    "id" : "8088dfdf-3372-40c0-b980-265ca902a9da",
    "prId" : 7775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a41325fd-862a-4438-8095-3f7f1575fe4e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Should InstanceID return a name with a leading slash (here and all other cloudproviders)? You prefix it with ProviderName() followed by `://` to produce the providerID. Also, please document the expectation in the interface declaration.\n",
        "createdAt" : "2015-05-26T22:30:10Z",
        "updatedAt" : "2015-05-28T17:08:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b312e568-f411-4783-9177-385a032bbc94",
        "parentId" : "a41325fd-862a-4438-8095-3f7f1575fe4e",
        "authorId" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "body" : "There's a comment above: in the future the format may be: `<endpoint>/<zone>/<instanceid>`\nTherefore now for aws we would have: `aws:///<zone>/<instanceid>` because `<endpoint>` is empty.\n",
        "createdAt" : "2015-05-27T07:47:03Z",
        "updatedAt" : "2015-05-28T17:08:38Z",
        "lastEditedBy" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "tags" : [
        ]
      },
      {
        "id" : "66977dc8-f447-4015-b24c-8eaa0526c42e",
        "parentId" : "a41325fd-862a-4438-8095-3f7f1575fe4e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ah, ok.\n",
        "createdAt" : "2015-05-27T21:22:37Z",
        "updatedAt" : "2015-05-28T17:08:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a41082ca87026d7ccc4f70293428fdd321443be",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +445,449 @@\t// In the future it is possible to also return an endpoint as:\n\t// <endpoint>/<zone>/<instanceid>\n\treturn \"/\" + *inst.Placement.AvailabilityZone + \"/\" + *inst.InstanceID, nil\n}\n"
  }
]