[
  {
    "id" : "3100ab1f-0dae-4997-8e8b-a13039ad0f45",
    "prId" : 45524,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45524#pullrequestreview-40419639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38630c6a-d146-4d37-b6ce-7d7e442a788a",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "Don't we have this as part of the `set` type already?",
        "createdAt" : "2017-05-25T21:04:35Z",
        "updatedAt" : "2017-05-26T20:19:31Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "4bf25571-b3f0-4f4f-afa7-2ee4411ac043",
        "parentId" : "38630c6a-d146-4d37-b6ce-7d7e442a788a",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Changed to use the _sets_ package.",
        "createdAt" : "2017-05-25T23:48:40Z",
        "updatedAt" : "2017-05-26T20:19:31Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "897da549bc37390e4847946da63da29dc9d1b4c2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +126,130 @@\treturn matches[1], matches[2], matches[3], nil\n}\n\nfunc equalStringSets(x, y []string) bool {\n\tif len(x) != len(y) {"
  },
  {
    "id" : "61326237-8c79-42f8-91ad-b2d8288f46b9",
    "prId" : 45524,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45524#pullrequestreview-40589661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f3b33bd-c758-482a-b8c7-d22fc39b95a3",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "seems redundant...",
        "createdAt" : "2017-05-26T18:41:02Z",
        "updatedAt" : "2017-05-26T20:19:31Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "897da549bc37390e4847946da63da29dc9d1b4c2",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +128,132 @@\nfunc equalStringSets(x, y []string) bool {\n\tif len(x) != len(y) {\n\t\treturn false\n\t}"
  },
  {
    "id" : "2b97e535-803a-4e37-8dc3-897cae8a8d5d",
    "prId" : 45313,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45313#pullrequestreview-37170233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd0e6c06-e0ed-4107-ba21-fcea9a9e7ba3",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "did you check if it was doable with url.Parse BTW?",
        "createdAt" : "2017-05-09T13:33:47Z",
        "updatedAt" : "2017-05-19T06:42:19Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      },
      {
        "id" : "1f3230f8-3b74-4782-88ea-a1ce43af8fbd",
        "parentId" : "cd0e6c06-e0ed-4107-ba21-fcea9a9e7ba3",
        "authorId" : "bc273470-ad20-4d38-9d87-0b41c6ab84ab",
        "body" : "It is doable with `url.Parse()` but it still would be an equal amount of complexity.\r\nYou couldn't tell apart empty parameters for example in `gce:///foo/bar`.\r\nYou however can use it to get the Scheme of the URI, but afterwards you still have to split the path and access `URL.Host`. ",
        "createdAt" : "2017-05-09T22:18:45Z",
        "updatedAt" : "2017-05-19T06:42:19Z",
        "lastEditedBy" : "bc273470-ad20-4d38-9d87-0b41c6ab84ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "250b2299121997a8503013f6a7172079cdcc5731",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +109,113 @@// A providerID is build out of '${ProviderName}://${project-id}/${zone}/${instance-name}'\n// See cloudprovider.GetInstanceProviderID.\nfunc splitProviderID(providerID string) (project, zone, instance string, err error) {\n\tmatches := providerIdRE.FindStringSubmatch(providerID)\n\tif len(matches) != 4 {"
  },
  {
    "id" : "32bf32be-2cc9-4986-badc-6e0e4786934e",
    "prId" : 45313,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45313#pullrequestreview-38689697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1adb998-c695-4e94-93bc-273301c7f6b7",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Why not use a regular expression rather than a series of string splits?",
        "createdAt" : "2017-05-17T07:30:51Z",
        "updatedAt" : "2017-05-19T06:42:19Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "f797661c-e02b-4480-beb2-caad270c275e",
        "parentId" : "c1adb998-c695-4e94-93bc-273301c7f6b7",
        "authorId" : "bc273470-ad20-4d38-9d87-0b41c6ab84ab",
        "body" : "Personally I use regexp only for non trivial things to parse. But a simple regex could easily enhance the readability of this function.  I'd go with something like this`^gce://(.+?)/(.+?)/(.+)$`.",
        "createdAt" : "2017-05-17T14:43:06Z",
        "updatedAt" : "2017-05-19T06:42:19Z",
        "lastEditedBy" : "bc273470-ad20-4d38-9d87-0b41c6ab84ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "250b2299121997a8503013f6a7172079cdcc5731",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +109,113 @@// A providerID is build out of '${ProviderName}://${project-id}/${zone}/${instance-name}'\n// See cloudprovider.GetInstanceProviderID.\nfunc splitProviderID(providerID string) (project, zone, instance string, err error) {\n\tmatches := providerIdRE.FindStringSubmatch(providerID)\n\tif len(matches) != 4 {"
  }
]