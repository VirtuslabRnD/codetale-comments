[
  {
    "id" : "49930c5c-d133-479d-9339-191eb97d561c",
    "prId" : 63322,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63322#pullrequestreview-124581987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e99ea3b6-9a73-4be5-97fb-53f3f6263bc2",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "can a unit test be added?",
        "createdAt" : "2018-05-01T00:10:45Z",
        "updatedAt" : "2018-05-01T00:10:45Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "7681e393-8937-46d5-a61e-82710571a5c0",
        "parentId" : "e99ea3b6-9a73-4be5-97fb-53f3f6263bc2",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "A good chunk of disk methods aren't covered by unit tests today. To address that, I'm looking into refactoring `gce_disks.go` to reduce complexity as part of implementing disk naming disambiguation, and refactoring `gce_disks_test.go` as well (using mocks from generated cloud provider, pulling out common code, etc). After that I'll add these tests.",
        "createdAt" : "2018-05-02T19:18:59Z",
        "updatedAt" : "2018-05-02T19:18:59Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "0d71d30d-8508-4d2d-9f25-59d27c89afeb",
        "parentId" : "e99ea3b6-9a73-4be5-97fb-53f3f6263bc2",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Unfortunately I didn't have time to do the refactor for this release, and I'm planning to leave this unit test for either after code freeze (ideally) or the next release. Sorry this is non-ideal :(",
        "createdAt" : "2018-05-30T20:35:02Z",
        "updatedAt" : "2018-05-30T20:35:03Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4009c5444b0996f7f7ba2a3e8a5025efd6143e2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +536,540 @@\t\tdisk, err = gce.getRegionalDiskByName(diskName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmc = newDiskMetricContextRegional(\"attach\", gce.region)"
  },
  {
    "id" : "4cfd3e5a-b235-4967-b495-bed27af278de",
    "prId" : 63322,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63322#pullrequestreview-125719351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "478746a9-99c6-4286-8763-0cb9b696183f",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "what is regional is true, but feature is not enabled, or this case is not possible at all.",
        "createdAt" : "2018-06-04T19:03:02Z",
        "updatedAt" : "2018-06-04T19:03:02Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "746d1882-ad89-4315-84b9-bd6d0c649987",
        "parentId" : "478746a9-99c6-4286-8763-0cb9b696183f",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "In that case we fall back to the behavior for a regular disk, as if the regional PD feature doesn't exist.\r\n\r\n`regional` is set if the volume is a PV spec and its zone label has the regional PD format. If the feature gate is disabled, when a user creates a PV with regional PD zone label, the PV is rejected by an admission controller, so usually we don't hit this scenario.",
        "createdAt" : "2018-06-04T19:55:39Z",
        "updatedAt" : "2018-06-04T19:55:39Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4009c5444b0996f7f7ba2a3e8a5025efd6143e2",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +534,538 @@\tvar mc *metricContext\n\tif regional && utilfeature.DefaultFeatureGate.Enabled(features.GCERegionalPersistentDisk) {\n\t\tdisk, err = gce.getRegionalDiskByName(diskName)\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "6faa7be4-7647-4399-a6e2-cf632c36dda2",
    "prId" : 62297,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62297#pullrequestreview-125279429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaa62152-e670-48bb-90d1-e4149dc97e76",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "We're \"Observing\" metrics no matter what now instead of only on error. Wont this emit a ton of \"nil\"'s? Ditto everywhere else",
        "createdAt" : "2018-04-25T00:03:45Z",
        "updatedAt" : "2018-06-05T23:38:00Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "c3260a1e-b8af-4dcd-910d-5702b2eeba37",
        "parentId" : "eaa62152-e670-48bb-90d1-e4149dc97e76",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "The old logic observes the operation regardless of whether an error exists, and this is done inside `WaitForZoneOp()`.",
        "createdAt" : "2018-04-25T00:24:10Z",
        "updatedAt" : "2018-06-05T23:38:00Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "8d54da00-5861-40f2-9745-1bf53d381520",
        "parentId" : "eaa62152-e670-48bb-90d1-e4149dc97e76",
        "authorId" : "3e4fca9c-38d2-48b7-8f51-aa84ce73e592",
        "body" : "Note that metrics capture latency as well as error/success.",
        "createdAt" : "2018-06-01T18:51:38Z",
        "updatedAt" : "2018-06-05T23:38:00Z",
        "lastEditedBy" : "3e4fca9c-38d2-48b7-8f51-aa84ce73e592",
        "tags" : [
        ]
      }
    ],
    "commit" : "47f7672e2e2da6d5b2f3247063faf7452f8d4834",
    "line" : 338,
    "diffHunk" : "@@ -1,1 +561,565 @@\t}\n\n\treturn mc.Observe(gce.manager.AttachDiskOnCloudProvider(disk, readWrite, instance.Zone, instance.Name))\n}\n"
  },
  {
    "id" : "a26d13fa-53f6-47e7-97a6-5b038fc11737",
    "prId" : 60337,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60337#pullrequestreview-99433537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28a3acee-975f-42d0-8607-065180333000",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Update the error below. It is no longer valid:\r\n`The regional PD feature is only available via the GCE Alpha API. Enable \\\"DiskAlphaAPI\\\" in the list of \\\"alpha-features\\\" in \\\"gce.conf\\\" to use the feature.\")`\r\n\r\nDitto below.",
        "createdAt" : "2018-02-26T19:01:59Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "56ff44d0-858e-4d26-bc6b-7b14573e63ba",
        "parentId" : "28a3acee-975f-42d0-8607-065180333000",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Also since you have a k8s feature gate, maybe you can do the gating at the GCE Volume Plugin layer now instead of in the cloud provider code? Your call.",
        "createdAt" : "2018-02-26T19:03:52Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "2ed05dba-05fe-480b-b3ba-b513299a37cc",
        "parentId" : "28a3acee-975f-42d0-8607-065180333000",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Yep it's gated at volume plugin layer as well. It's left here as a safeguard.",
        "createdAt" : "2018-02-26T19:25:30Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb0f819d0bc9aceecf455ce2c8549e53d702370f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +146,150 @@\treplicaZones sets.String) (gceObject, error) {\n\n\tif utilfeature.DefaultFeatureGate.Enabled(features.GCERegionalPersistentDisk) {\n\t\tdiskTypeURI, err := manager.getDiskTypeURI(\n\t\t\tmanager.gce.region /* diskRegion */, multiZone{replicaZones}, diskType, true /* useAlphaAPI */)"
  },
  {
    "id" : "c5d62e15-294c-4623-8acc-f7e9506314e0",
    "prId" : 60337,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60337#pullrequestreview-99493845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48d58b2a-5cbb-4efe-9782-1b82c7d9a4ba",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Should we be gating this? At this point the disk has already been created. Doing this will just not report the correct info back to the scheduler. But I can buy the argument, that disabling the feature means disabling *all* of it.",
        "createdAt" : "2018-02-26T19:07:19Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "e033f958-068c-43db-a803-1eb83504ffa3",
        "parentId" : "48d58b2a-5cbb-4efe-9782-1b82c7d9a4ba",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Without this check, a user can manually provision a PV with with zones label `zone1__zone2` and still have it point to a regional PD. I don't think we should allow this if the flag gate is unset",
        "createdAt" : "2018-02-26T19:29:49Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "65b9222c-d37e-4919-97fa-6284682e7a6d",
        "parentId" : "48d58b2a-5cbb-4efe-9782-1b82c7d9a4ba",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Should it fall back to non-regional behavior in that case, or be completely unusable?",
        "createdAt" : "2018-02-26T22:26:59Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "8ee778e7-c5f9-4c85-861f-b651cc237212",
        "parentId" : "48d58b2a-5cbb-4efe-9782-1b82c7d9a4ba",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "The `else` clause here is the non-regional behavior before any regional logic was added",
        "createdAt" : "2018-02-26T22:31:12Z",
        "updatedAt" : "2018-02-26T23:31:11Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb0f819d0bc9aceecf455ce2c8549e53d702370f",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +844,848 @@\t\t// However it is more consistent to ensure the disk exists,\n\t\t// and in future we may gather addition information (e.g. disk type, IOPS etc)\n\t\tif utilfeature.DefaultFeatureGate.Enabled(features.GCERegionalPersistentDisk) {\n\t\t\tzoneSet, err := volumeutil.LabelZonesToSet(zone)\n\t\t\tif err != nil {"
  },
  {
    "id" : "2eedf4da-4f67-48b0-a422-288f3e099abb",
    "prId" : 55815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55815#pullrequestreview-78497012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a749cf7e-42ab-4f65-bca1-f1dca53a70dc",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you make GB a constant? Do we have one already defined somewhere?",
        "createdAt" : "2017-11-21T19:06:33Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "e4b4e0d5-bb74-4dc9-90e4-fe19fe9be6cb",
        "parentId" : "a749cf7e-42ab-4f65-bca1-f1dca53a70dc",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Would `Quantity.RoundUp()` work?",
        "createdAt" : "2017-11-21T22:53:33Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "9f48d5a8-697e-4ea0-aad1-67b62e07957c",
        "parentId" : "a749cf7e-42ab-4f65-bca1-f1dca53a70dc",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "`RoundUp` is for rounding a value upto certainc scale not rounding the value to GB or GiB chunks.",
        "createdAt" : "2017-11-22T15:13:15Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "174d44e5-3077-4aa7-9a9f-630134579f3a",
        "parentId" : "a749cf7e-42ab-4f65-bca1-f1dca53a70dc",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "@msau42 lets do the GB constant cleanup in a follow up PR, because I did not find a pre-defined GB constant and such a change will affect other volume types too. I will open a follow up github issue for myself.",
        "createdAt" : "2017-11-22T16:05:47Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee4d2bbf5b61d5d8fc71b57f68955effc96e2d7",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +846,850 @@\trequestBytes := newSize.Value()\n\t// GCE resizes in chunks of GBs (not GiB)\n\trequestGB := volume.RoundUpSize(requestBytes, 1000*1000*1000)\n\tnewSizeQuant := resource.MustParse(fmt.Sprintf(\"%dG\", requestGB))\n"
  },
  {
    "id" : "b5e79ef1-bd81-4a81-91c4-a32f7d6a3fa5",
    "prId" : 52169,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52169#pullrequestreview-61719156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae17ac44-8182-4870-a251-3f2f83c54192",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Should consider a typecast declaration here to ensure this correctly implements the interface",
        "createdAt" : "2017-09-08T13:50:12Z",
        "updatedAt" : "2017-09-08T19:26:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "416aef53-1f71-4e18-9c84-8d17ff9e74db",
        "parentId" : "ae17ac44-8182-4870-a251-3f2f83c54192",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "E.g. `var _ = cloud.PVLabeler(&GCECloud{})`",
        "createdAt" : "2017-09-08T13:51:25Z",
        "updatedAt" : "2017-09-08T19:26:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e3c0b681-8688-499d-98ee-c51e0662f40f",
        "parentId" : "ae17ac44-8182-4870-a251-3f2f83c54192",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Great tip. will do",
        "createdAt" : "2017-09-08T15:44:08Z",
        "updatedAt" : "2017-09-08T19:26:10Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "a7f16234-dd7a-4b28-bb88-251e45a1d2df",
        "parentId" : "ae17ac44-8182-4870-a251-3f2f83c54192",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "usual pattern is `var _ cloud.PVLabeler = &GCECloud{}` I think?",
        "createdAt" : "2017-09-11T05:33:55Z",
        "updatedAt" : "2017-09-11T05:33:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "d47bd26c4b6866644a5f0dd7fb8b3f4756ce4b0b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +126,130 @@}\n\nfunc (gce *GCECloud) GetLabelsForVolume(pv *v1.PersistentVolume) (map[string]string, error) {\n\t// Ignore any volumes that are being provisioned\n\tif pv.Spec.GCEPersistentDisk.PDName == volume.ProvisionedVolumeName {"
  },
  {
    "id" : "59b1b9b9-22e5-4a08-b20b-bfd0afb43748",
    "prId" : 51667,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51667#pullrequestreview-59922326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46eeaa1e-c024-48d9-8693-3cfc6ddb90c2",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It's ok, but we still return error?",
        "createdAt" : "2017-08-31T05:14:01Z",
        "updatedAt" : "2017-09-05T03:16:45Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "961ad508-94c1-4abe-b53a-65109df4a2dc",
        "parentId" : "46eeaa1e-c024-48d9-8693-3cfc6ddb90c2",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Good catch. Adding `continue`",
        "createdAt" : "2017-08-31T16:51:08Z",
        "updatedAt" : "2017-09-05T03:16:45Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a2d1cd63a62e76cee94b9796198c7fecdc30a8f",
    "line" : 413,
    "diffHunk" : "@@ -1,1 +526,530 @@\t\t\tcase multiZone:\n\t\t\t\tif zoneInfo.replicaZones.Has(zone) {\n\t\t\t\t\tglog.Warningf(\"GCE PD name (%q) was found in multiple zones (%q), but ok because it is a RegionalDisk.\",\n\t\t\t\t\t\tdiskName, zoneInfo.replicaZones)\n\t\t\t\t\tcontinue"
  }
]