[
  {
    "id" : "53e1a3bb-a0d6-4f22-b4a2-0b6d5d616fda",
    "prId" : 2278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "godoc, mention that it dosen't return.\n",
        "createdAt" : "2014-11-18T01:41:20Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8eeb96b3-5d91-4f56-b24b-1b552c9182b4",
        "parentId" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "scratch that-- remove the \"period\" parameter and the `for {`; call via go `util.Forever(s.SyncStatic, period)`\n",
        "createdAt" : "2014-11-18T01:42:32Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5ef1b397-4429-42bc-8d4e-d29be104a0cf",
        "parentId" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Do we want it to be a forever loop?  As it's a static list, I think it should just be a one-off registration here.  I assumed here we only want to register the set of machines at startup, that's what we previously do.  The problem it solves is to makes sure the startup order doesn't matter.\n",
        "createdAt" : "2014-11-18T02:56:52Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "cf671766-11e1-407d-b15d-44a71b96d35c",
        "parentId" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, I see, it can return. OK, that's fine then.\n",
        "createdAt" : "2014-11-18T17:56:33Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b1a4b3d5-63d5-4b7f-8c10-cc17052e2eb9",
        "parentId" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Still needs godoc comment :)\n",
        "createdAt" : "2014-11-20T18:49:46Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d5e18f16-6a72-4a9d-af8c-cd8d144853d5",
        "parentId" : "da61236e-d926-4b7f-a179-75fe2c8f523b",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Done.\n",
        "createdAt" : "2014-11-20T23:19:24Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "762e9a0f5787f5057577305534cc390797d78885",
    "line" : null,
    "diffHunk" : "@@ -1,1 +63,67 @@// SyncStatic registers list of machines from command line flag. It returns after successful\n// registration of all machines.\nfunc (s *MinionController) SyncStatic(period time.Duration) error {\n\tregistered := util.NewStringSet()\n\tfor {"
  },
  {
    "id" : "f7705005-23ad-43f9-8d98-30ed59de3dbc",
    "prId" : 2278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ff2d16-1602-443f-9c85-4e62acb9ef1d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What if the minion already exists? You'll try to recreate it over and over. And once you do create a minion, you never try to recreate it (like what if it goes away for some reason.) Also what if unwanted minions exist in the cluster; should you delete them?\n",
        "createdAt" : "2014-11-18T01:46:04Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dfa58491-039a-4bf1-bb0b-b70ad9861919",
        "parentId" : "14ff2d16-1602-443f-9c85-4e62acb9ef1d",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "For the minion already exists case, it's annoying because I don't have a precise error code.  I can only get an error message, is there any way to interpret it?   The Create method call translates and swallows a lot information.\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/client/minions.go#L45\n\nFor recreate and remove unhealthy minion, I think that's a larger changes that we can have separate issue & PR to disscus?  Like creating node status #2315\n",
        "createdAt" : "2014-11-18T02:58:59Z",
        "updatedAt" : "2014-11-21T01:22:42Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "762e9a0f5787f5057577305534cc390797d78885",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\t\t\tNodeResources: *s.staticResources,\n\t\t\t})\n\t\t\tif err == nil {\n\t\t\t\tregistered.Insert(minionID)\n\t\t\t}"
  }
]