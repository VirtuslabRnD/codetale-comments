[
  {
    "id" : "ba410ecc-3e49-4462-bbca-a44b213d5cf6",
    "prId" : 12079,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54b299b4-b614-4a4d-9485-b2a0f3805439",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "am i right in assumin we don't delete the pods in this case (and if so, why not)?\n",
        "createdAt" : "2015-07-31T16:03:11Z",
        "updatedAt" : "2015-08-03T08:20:06Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "046549e9-525b-43a8-9a30-85dc74f0ed2a",
        "parentId" : "54b299b4-b614-4a4d-9485-b2a0f3805439",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "We will - there's a deletePods call few lines below.\n",
        "createdAt" : "2015-07-31T16:19:38Z",
        "updatedAt" : "2015-08-03T08:20:06Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e772738ca5342c72e5f741af8af82c58cc014c3",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +423,427 @@\t\t\t\tif _, err := instances.ExternalID(node.Name); err != nil && err == cloudprovider.InstanceNotFound {\n\t\t\t\t\tglog.Infof(\"Deleting node (no longer present in cloud provider): %s\", node.Name)\n\t\t\t\t\tnc.recordNodeEvent(node.Name, fmt.Sprintf(\"Deleting Node %v because it's not present according to cloud provider\", node.Name))\n\t\t\t\t\tif err := nc.kubeClient.Nodes().Delete(node.Name); err != nil {\n\t\t\t\t\t\tglog.Errorf(\"Unable to delete node %s: %v\", node.Name, err)"
  },
  {
    "id" : "3840c57b-beb8-45a3-8c38-075d9e5b36df",
    "prId" : 12079,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ab92e59-6a8c-4455-ab34-ea75fd084683",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The message should be something like \"Deleting pod from Node %s\" because the pod name is already printed out when you print the event with `kubectl get events`, and it is implied when you do `kubectl describe pod foo`\n",
        "createdAt" : "2015-08-05T15:47:14Z",
        "updatedAt" : "2015-08-05T15:47:14Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e772738ca5342c72e5f741af8af82c58cc014c3",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +453,457 @@\t\t}\n\t\tglog.V(2).Infof(\"Delete pod %v\", pod.Name)\n\t\tnc.recorder.Eventf(&pod, \"NodeControllerEviction\", \"Deleting Pod %s from Node %s\", pod.Name, nodeID)\n\t\tif err := nc.kubeClient.Pods(pod.Namespace).Delete(pod.Name, nil); err != nil {\n\t\t\tglog.Errorf(\"Error deleting pod %v: %v\", pod.Name, err)"
  },
  {
    "id" : "76effb2e-a078-4c39-8717-031eca228f87",
    "prId" : 8495,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9045f33-5e4f-4743-b2e9-90abfe629f48",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "please explain why you need a goroutine/queue (as opposed to, say, listing pods and just not doing the CanAccept() if a bad node has no pods or something)?\n",
        "createdAt" : "2015-05-19T17:24:48Z",
        "updatedAt" : "2015-06-01T09:39:32Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "6e5c59b8-4404-4cba-bb48-755be72a5958",
        "parentId" : "b9045f33-5e4f-4743-b2e9-90abfe629f48",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I believe this is clearer than asking API server for list of pods. It's probably a matter of taste, but I'd rather depend on local thread than external service.\n",
        "createdAt" : "2015-05-19T18:17:31Z",
        "updatedAt" : "2015-06-01T09:39:32Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "faed39e5-0c8d-4acc-a7f0-8cb96b2ba635",
        "parentId" : "b9045f33-5e4f-4743-b2e9-90abfe629f48",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "In that case you might want to think about making this a more general queue (not in this pr, just as a consideration). Since I can see times when we realize a node is bad and want to take some offline action that isn't deletePods (eg: set status of pods to unknown).\n",
        "createdAt" : "2015-05-20T18:09:22Z",
        "updatedAt" : "2015-06-01T09:39:32Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "a907bc66-cb84-4b5d-85f4-895a3d071c5b",
        "parentId" : "b9045f33-5e4f-4743-b2e9-90abfe629f48",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Filed #8613\n",
        "createdAt" : "2015-05-21T07:01:22Z",
        "updatedAt" : "2015-06-01T09:39:32Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1490543d5437ce0fa19008e1e6ed8ce11e95c271",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +188,192 @@\t}, nc.nodeMonitorPeriod)\n\n\tgo util.Forever(func() {\n\t\tnc.podEvictor.TryEvict(func(nodeName string) { nc.deletePods(nodeName) })\n\t}, nodeEvictionPeriod)"
  },
  {
    "id" : "e204a780-10bd-42c5-9ae5-b824cd9939dc",
    "prId" : 8164,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ad5f1d-620c-496f-b9b9-5c861c179283",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "// TODO: use stuff from the controller framework to watch, to reduce the number of lists executed.\n",
        "createdAt" : "2015-05-21T22:57:11Z",
        "updatedAt" : "2015-05-22T01:05:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7f872687-e1e3-4af2-8505-27fb350f5644",
        "parentId" : "35ad5f1d-620c-496f-b9b9-5c861c179283",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Done.\n",
        "createdAt" : "2015-05-21T23:19:17Z",
        "updatedAt" : "2015-05-22T01:05:34Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6da5b9601738069e0a3f81aca6dcf4bb24a4b4f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +344,348 @@\t\t// TODO (cjcullen): Use pkg/controller/framework to watch nodes and\n\t\t// reduce lists/decouple this from monitoring status.\n\t\tnc.reconcileNodeCIDRs(nodes)\n\t}\n\tfor i := range nodes.Items {"
  },
  {
    "id" : "e69163b8-90cc-4850-9cce-61bb715876e8",
    "prId" : 6949,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5eb3fc20-8f33-41ad-8c29-61490bc494f8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "You should be able to delete the cloudprovider here.\n",
        "createdAt" : "2015-04-17T23:56:25Z",
        "updatedAt" : "2015-05-19T16:55:22Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "73c9af15-00fc-4655-b07d-92b5ae9d4aec",
        "parentId" : "5eb3fc20-8f33-41ad-8c29-61490bc494f8",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Now that I re-added the code to handle deleting nodes that no longer exist, we are still using the cloud provider. \n",
        "createdAt" : "2015-04-26T14:55:46Z",
        "updatedAt" : "2015-05-19T16:55:22Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e356f84396642ecd5529ac5f4eb57e936e38922",
    "line" : null,
    "diffHunk" : "@@ -1,1 +26,30 @@\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/client/record\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/cloudprovider\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/fields\"\n\t\"github.com/GoogleCloudPlatform/kubernetes/pkg/labels\""
  },
  {
    "id" : "a8fd7555-f546-40b5-952c-24cb7bea7cad",
    "prId" : 6949,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9ab215-9284-4df3-bfe1-7365f2bb2343",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should it be called reconcile_Node_CIDRs?\n",
        "createdAt" : "2015-05-20T19:40:25Z",
        "updatedAt" : "2015-05-20T19:40:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a090467d-19aa-435f-a5a0-b6d5c83df307",
        "parentId" : "cc9ab215-9284-4df3-bfe1-7365f2bb2343",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Yes, probably should have renamed it while I was in here...\n",
        "createdAt" : "2015-05-20T19:42:40Z",
        "updatedAt" : "2015-05-20T19:42:40Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "69e297dc-b743-45b1-892e-62d4f7ab5b97",
        "parentId" : "cc9ab215-9284-4df3-bfe1-7365f2bb2343",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "#8584\n",
        "createdAt" : "2015-05-20T19:44:28Z",
        "updatedAt" : "2015-05-20T19:44:28Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e356f84396642ecd5529ac5f4eb57e936e38922",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +151,155 @@// reconcilePodCIDRs looks at each node and assigns it a valid CIDR\n// if it doesn't currently have one.\nfunc (nc *NodeController) reconcilePodCIDRs(nodes *api.NodeList) {\n\tglog.V(4).Infof(\"Reconciling pods cidrs for %d nodes\", len(nodes.Items))\n\t// TODO(roberthbailey): This seems inefficient. Why re-calculate CIDRs"
  },
  {
    "id" : "b06efd14-7a5c-4328-a40a-1c0a761c69e6",
    "prId" : 6949,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c4e6e04-8319-4322-b82d-8c383aafa938",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The CIDR has to match the network forwarding rules?\n",
        "createdAt" : "2015-05-20T20:30:03Z",
        "updatedAt" : "2015-05-20T20:30:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dc986dce-02e7-4fbb-9515-346a57c8c395",
        "parentId" : "8c4e6e04-8319-4322-b82d-8c383aafa938",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Yes, that's why we only persist it if nc.configureNodeCIDR returns success (b/c that's what configures the route on GCE). \n",
        "createdAt" : "2015-05-20T20:38:26Z",
        "updatedAt" : "2015-05-20T20:38:26Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e356f84396642ecd5529ac5f4eb57e936e38922",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +164,168 @@\tfor _, node := range nodes.Items {\n\t\tif node.Spec.PodCIDR == \"\" {\n\t\t\tpodCIDR, found := availableCIDRs.PopAny()\n\t\t\tif !found {\n\t\t\t\tglog.Errorf(\"No available CIDR for node %s\", node.Name)"
  },
  {
    "id" : "706fdd2f-c1e4-46a1-ba23-4a81a26854e2",
    "prId" : 6949,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c02bec-e23b-4a84-acf7-5e67f41f9876",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This should be a get/update/retry loop. From my logs:\n\n```\nnodecontroller.go:179] Unable to assign node e2e-test-dbsmith-minion-f48d CIDR 10.245.0.0/24: minion \"e2e-test-dbsmith-minion-f48d\" cannot be upd\nated: the resource was updated to 154\nE0520 18:43:19.622813       5 nodecontroller.go:179] Unable to assign node e2e-test-dbsmith-minion-nv8h CIDR 10.245.1.0/24: minion \"e2e-test-dbsmith-minion-nv8h\" cannot be upd\nated: the resource was updated to 192\n```\n",
        "createdAt" : "2015-05-20T20:30:57Z",
        "updatedAt" : "2015-05-20T20:30:57Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7c2c4bbe-b968-4762-b3d3-9bb5f90f1cd2",
        "parentId" : "15c02bec-e23b-4a84-acf7-5e67f41f9876",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "reconcilePodCIDRs is called every N seconds. So it will retry on the next loop. \n",
        "createdAt" : "2015-05-20T20:37:32Z",
        "updatedAt" : "2015-05-20T20:37:32Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e356f84396642ecd5529ac5f4eb57e936e38922",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, err := nc.kubeClient.Nodes().Update(&node); err != nil {\n\t\t\t\tglog.Errorf(\"Unable to assign node %s CIDR %s: %v\", node.Name, podCIDR, err)\n\t\t\t}"
  }
]