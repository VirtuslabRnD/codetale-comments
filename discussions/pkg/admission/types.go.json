[
  {
    "id" : "e67e5163-b45f-44e3-b4fd-183932888bed",
    "prId" : 32555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32555#pullrequestreview-725217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Why does this also include the Validator interface?\n",
        "createdAt" : "2016-09-13T16:34:25Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "ee702dfb-0fe0-4ede-9fe3-58528adfd24b",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Why does this also include the Validator interface?\n\nWe've used the `Wants` pattern in OpenShift and one of the issues we've had is a lack of validation methods that catching initialization problems.  This forces every implementor to at least pretend to consider the need to validate the input.\n",
        "createdAt" : "2016-09-13T17:04:18Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ed1df624-0c9b-4ca8-9a1a-96197a6d1e45",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I don't get how that follows. Can't you just as well type assert to a `Validator` for that purpose without having to pollute these interface definitions? I would much rather have interface definitions be as narrow as possible.\n",
        "createdAt" : "2016-09-13T17:12:36Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "9d2aa143-c6cc-4de7-a780-2e0212991022",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I don't get how that follows. Can't you just as well type assert to a Validator for that purpose without having to pollute these interface definitions? I would much rather have interface definitions be as narrow as possible.\n\nSeems like that would require the admission plugin author to have remembered to write the `Validate` method.  Since the problem is that we had authors forgetting to do that, I'm not sure having them remember to do a parallel task would help.\n\nEven if a `Validate` method always returns \"fine\", it's still better to force an admission plugin author to consider the problem.  In some cases the information is optional, in other cases it isn't.\n",
        "createdAt" : "2016-09-13T17:38:02Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "645ef5c5-6011-49e8-ba7f-f673be2e14ce",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Nope. Still doesn't make sense. If you want them to have a `Validate` method, but optionally have these setters, then have `Initialize` take something that requires a `Validate` method. If you want them to validate the setting of these things, then have the setters return an error.\n\nWhere is `Validate` called anyway? Openshift only? If so, can I have a link?\n",
        "createdAt" : "2016-09-13T17:49:20Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "5acd97d4-e3b3-4d4c-a25e-0afc020e3de3",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "here https://github.com/kubernetes/kubernetes/blob/master/pkg/admission/init.go#L53 from here https://github.com/kubernetes/kubernetes/blob/master/pkg/admission/chain.go#L36\n",
        "createdAt" : "2016-09-13T17:54:38Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c8650624-e7f2-479f-ae5e-b9c71c985bd0",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "From what you've linked, it seems like these setters should return errors, `PluginInitializer.Initialize` should propagate those errors, and then you've eliminated the need for a separate validation step.\n",
        "createdAt" : "2016-09-13T18:09:31Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "8789c60a-5e83-4504-ad4b-ad8ba6682839",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> From what you've linked, it seems like these setters should return errors, PluginInitializer.Initialize should propagate those errors, and then you've eliminated the need for a separate validation step.\n\nAs we add more of these, the interactions between them will become significant.  For instance, you can have `(A && B) || (-A && -B)`, but you can't have `-A && B`\n",
        "createdAt" : "2016-09-13T18:13:19Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "909a05e9-f460-4f9f-8a29-c7e937a51a41",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "So you're saying you're going to have complex initialization interactions and validation spread across N setters and a separate validator? Why not at this point just create a config struct that can be easily added to and have all the interaction and validation in one method/spot?\n",
        "createdAt" : "2016-09-13T18:19:08Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "09e20fa8-44f3-4a55-92d4-d0372767ebec",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> So you're saying you're going to have complex initialization interactions and validation spread across N setters and a separate validator? Why not at this point just create a config struct that can be easily added to and have all the interaction and validation in one method/spot?\n\nHaving an initializer interfaces allows someone who chooses to extend the admission chain via godep-ing a spot to add custom initializers without having to patch upstream code (a config struct as a for instance).\n",
        "createdAt" : "2016-09-13T18:40:23Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5aee6d52-4568-4bc5-8bad-9dbb651d09d2",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "IMO I've found the validator interface handy to force folks to remember to implement it even if they don't want to ever return an error.  I see value in making all admission plugins provide `Validate` and moving it out of these \"wants\" interfaces but then we're still in the same boat of having interfaces that are not as narrow as they possibly could be.  \n",
        "createdAt" : "2016-09-15T07:21:01Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "e99c46d2-9791-4a7a-86da-9a9b8bdde845",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "@deads2k @krousey - any more thoughts here?  In either case I need to get an authorizer into an admission plugin, whether that infrastructure is a config object all pieces get or the Wants pattern.  Thanks for the reviews so far.\n",
        "createdAt" : "2016-09-19T10:19:40Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "fdfbc419-35dd-4754-88af-f8cecb41f4c5",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k @krousey - any more thoughts here? In either case I need to get an authorizer into an admission plugin, whether that infrastructure is a config object all pieces get or the Wants pattern. Thanks for the reviews so far.\n\nI really like prefer having the `Validator` interface required for all the `Wants*` types, but @krousey seems to feel pretty strongly.  I'd give it up to get the rest of the pull.\n",
        "createdAt" : "2016-09-19T11:47:25Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ec6d7c0a-1dc8-409c-a601-a6403dcbf407",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Sorry my intention wasn't clear. This is something I would like to see fixed, but in a separate PR because this PR isn't introducing this pattern. Sorry if this held this up. I'm fine with this PR given that this exists already.\n",
        "createdAt" : "2016-09-19T18:40:58Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "2c64c344-aa0e-40cf-a99b-bbd2ede758a3",
        "parentId" : "0dcccd5b-1b1f-48dd-8e8e-ea8208e2f78b",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "All good.  Added it back in.\n",
        "createdAt" : "2016-09-20T11:10:26Z",
        "updatedAt" : "2016-10-12T17:06:22Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c66dcb52618e6c17f0a3068dc7c1be551777ade",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +37,41 @@type WantsAuthorizer interface {\n\tSetAuthorizer(authorizer.Authorizer)\n\tValidator\n}"
  },
  {
    "id" : "ebcace0e-ddbb-40f8-ba7b-82a2fafe10f3",
    "prId" : 26709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b910664-cd03-43d9-aef8-d523ad1fab00",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Godoc on the function too, please\n",
        "createdAt" : "2016-06-06T10:42:08Z",
        "updatedAt" : "2016-07-21T12:05:15Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "037d116add1f4a59db2767d21aa6189a4c9cabb0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +24,28 @@// and should be implemented on admission plugins\ntype Validator interface {\n\tValidate() error\n}\n"
  }
]