[
  {
    "id" : "97110c75-a604-4d82-936d-cc9cd33a5299",
    "prId" : 17798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67d64938-2c57-4543-b753-2b4d916fa0cb",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Godoc please\n",
        "createdAt" : "2015-11-26T01:02:15Z",
        "updatedAt" : "2015-11-30T14:22:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "92e51091-2518-4fb7-a079-227914dc1aaa",
        "parentId" : "67d64938-2c57-4543-b753-2b4d916fa0cb",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "abstain from commenting on same throughout\n",
        "createdAt" : "2015-11-26T01:02:31Z",
        "updatedAt" : "2015-11-30T14:22:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ac6d8afd32dda8a61c9da48e2536622de5f62c3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +30,34 @@\n// Kind takes an unqualified kind and returns back a Group qualified GroupKind\nfunc Kind(kind string) unversioned.GroupKind {\n\treturn SchemeGroupVersion.WithKind(kind).GroupKind()\n}"
  }
]