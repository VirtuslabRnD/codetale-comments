[
  {
    "id" : "3d0aa417-3b3d-489b-811f-a37ff28dc675",
    "prId" : 29930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I thought `AttributeRestrictions` was supposed to be dropped in the port. @deads2k, am I misremembering?\n",
        "createdAt" : "2016-08-02T19:00:51Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bf43b4cf-be17-42d7-9b6d-be2d10a72b32",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "I believe we discussed keeping them on one of the big PRs. We actually use this field internally and would like to keep it if it makes sense.\n",
        "createdAt" : "2016-08-02T19:04:09Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "66417239-a28d-4aa3-bf85-3f9078876cfe",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I believe we discussed keeping them on one of the big PRs. We actually use this field internally and would like to keep it if it makes sense.\n\nThis was one of our regrets from openshift.  As I recall we kept it out of use in the new authorizer.  Where are we using it now?\n",
        "createdAt" : "2016-08-02T19:37:23Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "cbf9c370-f3c9-433d-9012-17b69aa5185b",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Sorry. The second \"we\" is CoreOS. We're using it for some of our internal TPM stuff. Allows us to encode permissions that RBAC doesn't currently understand.\n",
        "createdAt" : "2016-08-02T19:41:04Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "f45e29c6-b4af-4df5-8c23-38619d5a6a40",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Sorry. The second \"we\" is CoreOS. We're using it for some of our internal TPM stuff. Allows us to encode permissions that RBAC doesn't currently understand.\n\nOk.  I don't mind keeping for now, we considered using it for similar reasons.  However, I think we recently came to the conclusion that we may be better off with multiple authorizers.\n",
        "createdAt" : "2016-08-02T19:48:43Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b079bafb-a773-41cb-9a3c-f46b166fbb55",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "To add some concrete detail.  We used to inspect the body of the request; that was a mistake.  We then considered using to encode rules like: nodes can access things like this.  We've since decided that a second authorizer linked by an \"any authorizer approves\" policy will end up cleaner.\n",
        "createdAt" : "2016-08-02T19:53:22Z",
        "updatedAt" : "2016-08-02T20:33:44Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "eee7da15-3ae1-4834-93a4-51963f36d338",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I also came to the conclusion that node-related authorization (kubelet, kube-proxy, ...) should use a separate authorizer.  If you make the RBAC expressive enough to handle all the policies you might want for node stuff, then it becomes so expressive that it is hard to (reason about / cache / implement efficiently).  \n\nSince the nodes access the API at high rate, their authorizer should probably be first in the chain.\nIf you have some kind of TPM daemon per node, then  then I suspect \n",
        "createdAt" : "2016-08-02T21:41:16Z",
        "updatedAt" : "2016-08-02T21:41:16Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b6186413-e299-4295-8ece-50cfa2eb83d3",
        "parentId" : "24c470f1-53ca-4dc4-9660-57adc8cb5e77",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Our TPM component is actually a custom admission controller which uses this field to do it's own authorization. The RBAC API group just happens to be an extremely convenient way of associating policies with users or groups, even when the RBAC authorizer is disabled. \n",
        "createdAt" : "2016-08-02T21:59:21Z",
        "updatedAt" : "2016-08-02T21:59:21Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ec270dce7e8e9f4fb658bc12116c0218e7d5339",
    "line" : null,
    "diffHunk" : "@@ -1,1 +35,39 @@\t// AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports.\n\t// If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.\n\tAttributeRestrictions runtime.RawExtension `json:\"attributeRestrictions,omitempty\" protobuf:\"bytes,2,opt,name=attributeRestrictions\"`\n\n\t// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of"
  }
]