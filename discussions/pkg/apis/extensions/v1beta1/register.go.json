[
  {
    "id" : "9e08d690-c360-4444-a2d8-083610ddf3ba",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This makes the scheme map `extensions,v1beta1,DeleteOptions` maps to `v1.DeleteOptions`. Why would I want that to happen?  I'd rather have code that expects a `v1.DeleteOptions` decode it with the proper scheme.  Why would would I want to cross register it?\n",
        "createdAt" : "2015-12-21T14:03:39Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d5be7056-23d5-459f-9d7e-a6dd8a6cf7ea",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Because clients need a consistent view of the world.  Different groups\nevolve at different times - when we lock and create a version we need\nto identify the recognized options.  There can be no consistency\noutside of a version.  All these lines say is is that this go type\ncorresponds to a particular schema.\n\nWe absolutely, totally, 100% want a DeleteOptipns and ListOptions in\nevery group.\n",
        "createdAt" : "2015-12-21T14:29:04Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "238029d2-164c-4703-9456-6d754e2703d9",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Remember, delete options are query based and have no innate type meta.\nThey exist as a schema tied to every version and group.\n",
        "createdAt" : "2015-12-21T14:35:24Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bfc1219e-80cd-4b85-8c14-e89e9df4d3ec",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Because clients need a consistent view of the world.  Different groups\n> evolve at different times - when we lock and create a version we need\n> to identify the recognized options.\n\nThat sounds a lot like an argument saying that no other API group should embed a `v1.PodSpec`.  Given that we know we want to do exactly that, I'm not completely convinced.\n",
        "createdAt" : "2015-12-21T14:40:04Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ffe2dc56-3eb7-4968-8efa-561b1ac242dc",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Remember, delete options are query based and have no innate type meta.\n> They exist as a schema tied to every version and group.\n\nWithout innate `TypeMeta` it seems like I'd express my preferred decoding target in the API server and write my code to that target.  I'm not seeing why I would choose to cross register.  I have a logical dependency, lets express that and expose it via swagger.\n",
        "createdAt" : "2015-12-21T14:44:21Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1f3d91b5-274b-4fa6-8d1d-bfadac1bce40",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Opposite argument.  Every group should have a DeleteOptions kind\nregistered to it that converts to the internal DeleteOptions.  When we\nrev delete options, we would also update those groups if necessary.\n\nThe go types are just schemas.  Saying \"extensions/v1beta1\" used the\ncore group \"v1\" delete options is all those code is doing (vs copying\nthe struct for no reason).\n\nEverything in unversioned should really just be a common API group\nthat other groups are required to select a version of.  There is no\nsuch thing as unversioned - there is just \"things we haven't versioned\nyet\" and \"things retrieved outside a version concept that we must be\n100% back compatible on\"\n",
        "createdAt" : "2015-12-21T17:48:27Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a5a04266-767c-4395-bf99-b47af25ba5a5",
        "parentId" : "f2fb9290-a8d7-42b8-ae39-4c14cbfc51da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's what this code is doing.  The internal version (the go type) is\nirrelevant - it merely defines a schema.\n",
        "createdAt" : "2015-12-21T17:49:07Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +59,63 @@\t\t&ConfigMap{},\n\t\t&ConfigMapList{},\n\t\t&v1.DeleteOptions{},\n\t\t&ReplicaSet{},\n\t\t&ReplicaSetList{},"
  }
]