[
  {
    "id" : "501db500-706f-46b6-9cb7-e1caf491e6f4",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-21261595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Add `// +optional` tag to all fields with `omitempty` json tag, and add \"optional\" tag to relative fields in extensions/types.go too, see #34860 \r\n\r\ncc @mbohlool ",
        "createdAt" : "2017-02-08T19:31:52Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "cf307250-ec22-46b6-b625-e5a68f160e4f",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "done",
        "createdAt" : "2017-02-09T00:19:10Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "6e364414-b171-40bd-9bb2-9190c4c4d1b7",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "Ah, I didn't add it everywhere.",
        "createdAt" : "2017-02-09T00:31:37Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "c832d20d-6b00-4581-aba3-d69286e00c89",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "body" : "I didn't read this PR, so ignore my comment (or ask me to review the PR) if it does not make sense. There are cases that you may want to have `omitempty` but not `+optional`. If your intention is actually making a field optional, then add `+optional` otherwise we can discuss it more. ",
        "createdAt" : "2017-02-09T02:47:25Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "7f521a0d-2137-47c7-a390-3b4bdcffe306",
        "tags" : [
        ]
      },
      {
        "id" : "f3b00f4d-9b68-4f23-a869-8bb3b6d202e8",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@mbohlool thanks for the clarification!",
        "createdAt" : "2017-02-09T19:53:38Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "20f035aa-f45c-4efe-a3a9-664c0b612301",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@lukaszo most fields in the file still need the `+optional` flag",
        "createdAt" : "2017-02-09T19:55:22Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "9b408b48-a38a-4b2d-90c7-c9bbb41caf54",
        "parentId" : "a844a4f1-db5b-42f7-a9fe-ee32f731d3f4",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "done",
        "createdAt" : "2017-02-10T14:49:47Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +372,376 @@type DaemonSetUpdateStrategy struct {\n\t// Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\".\n\t// Default is OnDelete.\n\t// +optional\n\tType DaemonSetUpdateStrategyType `json:\"type,omitempty\" protobuf:\"bytes,1,opt,name=type\"`"
  },
  {
    "id" : "96daa4bd-7284-4bff-bbb0-1c8cbf1aca71",
    "prId" : 39157,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39157#pullrequestreview-15829525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c2c1048-e97b-4904-9c02-82873c466763",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "All of these comments should reference the json field names rather than the Go field names.",
        "createdAt" : "2017-01-10T00:42:34Z",
        "updatedAt" : "2017-01-10T00:42:34Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36a9787811983c2f4081fbc621a9a49e00de21b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +570,574 @@\tNumberReady int32 `json:\"numberReady\" protobuf:\"varint,4,opt,name=numberReady\"`\n\n\t// ObservedGeneration is the most recent generation observed by the daemon set controller.\n\t// +optional\n\tObservedGeneration int64 `json:\"observedGeneration,omitempty\" protobuf:\"varint,5,opt,name=observedGeneration\"`"
  },
  {
    "id" : "122b9882-3ff2-4dc7-af1f-aa68916a8f2b",
    "prId" : 22724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "240e02a5-14ee-4434-bd20-98d2655b4a35",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@bgrant0607 for 1.2, with extensions/v1beta1 ScaleStatus, is there a reason we don't use the same external representation as extensions/v1beta1 ReplicaSet and Deployment? If we want to move to a string externally, shouldn't that be done for all three of those objects at once in the same api version? If we used the same representation as ReplicaSet/Deployment, all the conversions would already exist, and populating the existing `Selector map[string]string` would be trivial as well\n",
        "createdAt" : "2016-03-09T13:25:34Z",
        "updatedAt" : "2016-03-10T01:55:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "292c3ac2-3849-4d71-a356-6b8a619da188",
        "parentId" : "240e02a5-14ee-4434-bd20-98d2655b4a35",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@liggitt The structured form is good for users writing it by hand, but is painful for clients that then need to figure out how to serialize it for list/watch, especially as we evolve the API. I want to move to mirroring selectors as serialized strings in status for all APIs with selectors. Clients should be able to just send it back to apiserver uninterpreted.\n\nDiscussed in the following comment and elsewhere:\nhttps://github.com/kubernetes/kubernetes/issues/3676#issuecomment-147524114\n",
        "createdAt" : "2016-03-09T15:26:19Z",
        "updatedAt" : "2016-03-10T01:55:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe26381c9060980c06b5610f66741164cf140708",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +44,48 @@\t// field and map-based selector field are populated.\n\t// More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors\n\tTargetSelector string `json:\"targetSelector,omitempty\"`\n}\n"
  },
  {
    "id" : "d2f3282d-fa6b-4b2a-b3ce-1236c51467e5",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceac3d39-0a12-478f-90da-e6f290115198",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We need this change in `pkg/apis/extensions/types.go` too\n",
        "createdAt" : "2016-02-08T23:27:07Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "f27b7174-e432-4115-8093-dc38bf654230",
        "parentId" : "ceac3d39-0a12-478f-90da-e6f290115198",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-02-08T23:32:59Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +234,238 @@\tMinReadySeconds int32 `json:\"minReadySeconds,omitempty\"`\n\n\t// The number of old ReplicaSets to retain to allow rollback.\n\t// This is a pointer to distinguish between explicit zero and not specified.\n\tRevisionHistoryLimit *int32 `json:\"revisionHistoryLimit,omitempty\"`"
  },
  {
    "id" : "ca1a9489-ef1b-4ec7-b773-596f69fa67e4",
    "prId" : 19382,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27db7f98-8893-442c-af30-fdb08a0a056c",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@ironcladlou had a comment regarding having these as pointers to separate zero from unknown but I haven't seen any place where we use pointers in status so I am not sure about it. I think this is fine for now. We can come back later if it turns out to be a problem (I don't think it will).\n",
        "createdAt" : "2016-01-20T10:13:51Z",
        "updatedAt" : "2016-01-25T22:36:45Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "ed0186ff-29d6-4c49-a82c-0d0ebbbfb561",
        "parentId" : "27db7f98-8893-442c-af30-fdb08a0a056c",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Agree\n",
        "createdAt" : "2016-01-20T18:38:23Z",
        "updatedAt" : "2016-01-25T22:36:45Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "98409c1d-e150-43b5-b818-8d59da237468",
        "parentId" : "27db7f98-8893-442c-af30-fdb08a0a056c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Without pointers I think the field won't appear if the value is 0. Which probably is ok.\n",
        "createdAt" : "2016-01-22T01:39:35Z",
        "updatedAt" : "2016-01-25T22:36:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "591269c99c28205335f15541057ddfea98de7e1c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +289,293 @@\n\t// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n\tAvailableReplicas int32 `json:\"availableReplicas,omitempty\"`\n\n\t// Total number of unavailable pods targeted by this deployment."
  },
  {
    "id" : "a1e44aa6-5ceb-4a03-badb-789133df7e29",
    "prId" : 18319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f5ece15-1054-40f1-a920-e91d783dfb02",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I see that we use int instead of int32 everywhere else. Dont see anything about it in api-conventions.\n",
        "createdAt" : "2015-12-17T00:45:55Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "2909f759-9660-440c-8dac-c8c950d3ab6a",
        "parentId" : "7f5ece15-1054-40f1-a920-e91d783dfb02",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Internal types.go can be int but versioned types.go should use int32 and unit32 where appropriate. See #17353\n",
        "createdAt" : "2015-12-17T16:52:49Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "1fd7b48c-0ac6-4d09-a9f1-d45185424089",
        "parentId" : "7f5ece15-1054-40f1-a920-e91d783dfb02",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "aah thanks for pointing that out. I now see that MinReadySeconds is int32 in deployments as well.\n",
        "createdAt" : "2015-12-17T19:19:26Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "664589df71955a53b02ad03f5a5e894daad052ab",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +339,343 @@\t// available. Defaults to 0 (pod will be considered available as soon as it\n\t// is ready).\n\tMinReadySeconds int32 `json:\"minReadySeconds,omitempty\"`\n}\n"
  },
  {
    "id" : "288b72dc-ee47-497a-8d83-220a02c3e5b3",
    "prId" : 17940,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056f4baf-0a53-44fd-997d-e161bce8290b",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Complete is an adjective, and so are other ConditionTypes, such as Healthy and Ready.  Fail is a verb (or sometimes a noun).   Failed is the adjective form.  Suggest using Failed.  @bgrant0607 to confirm\n",
        "createdAt" : "2015-12-02T17:13:18Z",
        "updatedAt" : "2015-12-17T15:08:38Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "3c69e680-eba8-4104-96fc-776ba60650e4",
        "parentId" : "056f4baf-0a53-44fd-997d-e161bce8290b",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Confirmed. Failed is also more consistent with pod and volume phases.\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/types.go#L1143\n",
        "createdAt" : "2015-12-02T17:59:29Z",
        "updatedAt" : "2015-12-17T15:08:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "df48dcb9-a88d-4ede-9d4e-6f7d15b6db1a",
        "parentId" : "056f4baf-0a53-44fd-997d-e161bce8290b",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Fixed.\n",
        "createdAt" : "2015-12-02T21:31:19Z",
        "updatedAt" : "2015-12-17T15:08:38Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "327c1044602d5226bdff8d364cdb4b98e02fe10f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +462,466 @@const (\n\t// JobComplete means the job has completed its execution.\n\tJobComplete JobConditionType = \"Complete\"\n\t// JobFailed means the job has failed its execution.\n\tJobFailed JobConditionType = \"Failed\""
  },
  {
    "id" : "8fe8bac8-9d0e-4674-bcce-5c94117566c6",
    "prId" : 17841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f9dc04d-20eb-4053-be57-bb71cdabd57a",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Add this godoc:\n\n```\n// DefaultDeploymentUniqueLabelKey is the default key of the selector that is added\n// to existing RCs (and label key that is added to its pods) to prevent the existing RCs\n// to select new pods (and old pods being selected by new RC).\n```\n",
        "createdAt" : "2015-11-26T22:53:48Z",
        "updatedAt" : "2015-12-05T03:17:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fd51b9e722880f896ac0a903b7bbc8a1d2de1ec",
    "line" : null,
    "diffHunk" : "@@ -1,1 +221,225 @@\t// to select new pods (and old pods being select by new RC). See DeploymentSpec's UniqueLabelKey\n\t// field for more information.\n\tDefaultDeploymentUniqueLabelKey string = \"deployment.kubernetes.io/podTemplateHash\"\n)\n"
  },
  {
    "id" : "3d6e480a-83e5-410d-b574-dbaf5f0f09d1",
    "prId" : 15706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06301510-23c3-47ad-ab68-ed8bf57561f6",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nit: clarify the sampling frequency here. Is this x% over the last minute, or hour or day? \n",
        "createdAt" : "2015-10-15T23:15:03Z",
        "updatedAt" : "2015-10-16T05:16:04Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "df732f061abeb8aa1b7cfca7806df5180f2531b3",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +72,76 @@type CPUTargetUtilization struct {\n\t// fraction of the requested CPU that should be utilized/used,\n\t// e.g. 70 means that 70% of the requested CPU should be in use.\n\tTargetPercentage int `json:\"targetPercentage\"`\n}"
  },
  {
    "id" : "9051200c-646f-4d6e-a743-1f2c09ab3f13",
    "prId" : 7893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "871bb102-62a5-4771-88b2-8dc5f4365d00",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The default values of all these bools is going to be false -- not allowed?\n",
        "createdAt" : "2016-02-04T22:48:25Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b458d57a-d21d-4d60-aac7-4a74e939ed82",
        "parentId" : "871bb102-62a5-4771-88b2-8dc5f4365d00",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "yes, the intention was to opt in to escalated privileges/features rather than opt out\n",
        "createdAt" : "2016-02-05T04:11:22Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c22f348f86e2a9836b0d18be3f27f0ff1c7d5181",
    "line" : null,
    "diffHunk" : "@@ -1,1 +934,938 @@type PodSecurityPolicySpec struct {\n\t// privileged determines if a pod can request to be run as privileged.\n\tPrivileged bool `json:\"privileged,omitempty\"`\n\t// capabilities is a list of capabilities that can be added.\n\tCapabilities []v1.Capability `json:\"capabilities,omitempty\"`"
  }
]