[
  {
    "id" : "6d481780-c07b-4e83-bfec-ad6a62903aff",
    "prId" : 52301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52301#pullrequestreview-61925864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebf3a164-7bd6-468f-a14b-a0ea6d68c816",
        "parentId" : null,
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "nit: should this live in `ValidateSeccompProfile` where the other checks are?  ",
        "createdAt" : "2017-09-11T18:57:03Z",
        "updatedAt" : "2017-09-11T18:57:18Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "bccdc7c0-67e3-4e19-a3c3-af172fb378f9",
        "parentId" : "ebf3a164-7bd6-468f-a14b-a0ea6d68c816",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "No, because `*` is not a valid profile, it is only valid in the context of allowed profiles.",
        "createdAt" : "2017-09-11T19:11:55Z",
        "updatedAt" : "2017-09-11T19:11:55Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "b055f1df-0356-416a-a26b-6f3bd9e903a8",
        "parentId" : "ebf3a164-7bd6-468f-a14b-a0ea6d68c816",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "fair enough, the other values in there are interpreted but are actually passed back as actual profiles.",
        "createdAt" : "2017-09-11T19:17:46Z",
        "updatedAt" : "2017-09-11T19:17:46Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a38728aa9289907a0a37156ab7f347539e2b39",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +699,703 @@\tif allowed := annotations[seccomp.AllowedProfilesAnnotationKey]; allowed != \"\" {\n\t\tfor _, p := range strings.Split(allowed, \",\") {\n\t\t\tif p == seccomp.AllowAny {\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "d058185b-def0-4219-b656-c469a8d4df05",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41759770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48f31bb6-e6cf-4975-9593-275646fc2dd7",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Not sure how necessary this and the not-decrementing change are below.  The controller can be trusted to use the collision counter correctly, I think?",
        "createdAt" : "2017-06-01T14:16:51Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "39df3452-1501-4ec3-9b6b-a0a36273e3b9",
        "parentId" : "48f31bb6-e6cf-4975-9593-275646fc2dd7",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Not when it uses a cache.",
        "createdAt" : "2017-06-02T12:20:03Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +136,140 @@\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(status.NumberUnavailable), fldPath.Child(\"numberUnavailable\"))...)\n\tif status.CollisionCount != nil {\n\t\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(*status.CollisionCount), fldPath.Child(\"collisionCount\"))...)\n\t}\n\treturn allErrs"
  },
  {
    "id" : "30a70729-f39b-4812-a486-d4bf1579a1bf",
    "prId" : 43465,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43465#pullrequestreview-28473609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6eb378e-9e09-4fea-836a-1971cdadcda0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We can't really add new required fields, even in status - we may never be able to get rid of this, and it should probably have been a pointer to begin with.",
        "createdAt" : "2017-03-22T17:49:27Z",
        "updatedAt" : "2017-03-22T17:49:34Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3caecd7c-4daa-4b1e-b9f6-4f5456f675eb",
        "parentId" : "e6eb378e-9e09-4fea-836a-1971cdadcda0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It should definitely have been a pointer. Is it too late to change this?",
        "createdAt" : "2017-03-22T18:18:28Z",
        "updatedAt" : "2017-03-22T18:18:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "47147302-0363-460a-a128-734902d8e2dc",
        "parentId" : "e6eb378e-9e09-4fea-836a-1971cdadcda0",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "> we may never be able to get rid of this\r\n\r\nCare to elaborate? Once we stop supporting updates from 1.5, why can't this be removed?",
        "createdAt" : "2017-03-22T18:34:35Z",
        "updatedAt" : "2017-03-22T18:34:35Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f4670d622345ee077abe7a76f635bb2f9bb4fa4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +355,359 @@\t// TODO: ReadyReplicas is introduced in 1.6 and this check breaks the Deployment controller when pre-1.6 clusters get upgraded.\n\t// \t\t Remove the comparison to zero once we stop supporting upgrades from 1.5.\n\tif status.ReadyReplicas > 0 && status.AvailableReplicas > status.ReadyReplicas {\n\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"availableReplicas\"), status.AvailableReplicas, \"cannot be greater than readyReplicas\"))\n\t}"
  },
  {
    "id" : "4f338437-8afc-4e15-95fc-9e9e8c564855",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-22406457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e41442ef-b2c5-4b1f-923a-97a67f4beb05",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ValidateDaemonSetUpdate needs to validate that templateGeneration is never decremented or incremented more than one.",
        "createdAt" : "2017-02-15T19:08:17Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "312a95c1-3b26-4dc1-867e-b03d3fbbc36d",
        "parentId" : "e41442ef-b2c5-4b1f-923a-97a67f4beb05",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "Is it needed? I've made it read only.",
        "createdAt" : "2017-02-15T19:40:12Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "85caf000-69fd-4ede-933c-5f8f01abdc06",
        "parentId" : "e41442ef-b2c5-4b1f-923a-97a67f4beb05",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Agree that this should never happen, but it wouldn't hurt to add one more validation ",
        "createdAt" : "2017-02-17T01:37:17Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +115,119 @@\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(status.NumberUnavailable), fldPath.Child(\"numberUnavailable\"))...)\n\treturn allErrs\n}\n\n// ValidateDaemonSetStatus validates tests if required fields in the DaemonSet Status section"
  },
  {
    "id" : "0cf2aa86-74fe-4537-ab06-06ef187ccef5",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-22091359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a13b49-4114-456b-8824-b234e2a31023",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "You also need to validate that templateGeneration is non-negative.",
        "createdAt" : "2017-02-15T19:09:23Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "1f7dd93a-1c49-4108-b72e-b3f5326d1d23",
        "parentId" : "31a13b49-4114-456b-8824-b234e2a31023",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "The same as above. I've made it read only.",
        "createdAt" : "2017-02-15T19:40:35Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +145,149 @@\t\tallErrs = append(allErrs, field.NotSupported(fldPath.Child(\"template\", \"spec\", \"restartPolicy\"), spec.Template.Spec.RestartPolicy, []string{string(api.RestartPolicyAlways)}))\n\t}\n\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(spec.MinReadySeconds), fldPath.Child(\"minReadySeconds\"))...)\n\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(spec.TemplateGeneration), fldPath.Child(\"templateGeneration\"))...)\n"
  },
  {
    "id" : "8ada3d67-bab3-477e-9b35-90a107fe3548",
    "prId" : 36241,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36241#pullrequestreview-7410224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3328ae46-8d3e-414e-811f-f4642043292a",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "is this breaking compatibility?\n",
        "createdAt" : "2016-11-07T12:57:44Z",
        "updatedAt" : "2016-11-07T12:57:44Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "21e153f2-1bde-4597-b57d-3f2d10935508",
        "parentId" : "3328ae46-8d3e-414e-811f-f4642043292a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Nope, progressDeadlineSeconds for old deployments is nil so we never get to do this check.\n",
        "createdAt" : "2016-11-07T13:04:48Z",
        "updatedAt" : "2016-11-07T13:04:49Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "365cfa1ef38dd5943aa351c2acb5dc64546a185f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +265,269 @@\tif spec.ProgressDeadlineSeconds != nil {\n\t\tallErrs = append(allErrs, apivalidation.ValidateNonnegativeField(int64(*spec.ProgressDeadlineSeconds), fldPath.Child(\"progressDeadlineSeconds\"))...)\n\t\tif *spec.ProgressDeadlineSeconds <= spec.MinReadySeconds {\n\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"progressDeadlineSeconds\"), spec.ProgressDeadlineSeconds, \"must be greater than minReadySeconds.\"))\n\t\t}"
  },
  {
    "id" : "56760eca-8940-437f-bfc1-f829decc2644",
    "prId" : 29204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "961f9007-8f0d-4c98-890c-5e0f6fea3ac8",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Are we doing enough validation that we no longer need the todo? If not, can you modify the todo to point out exactly what's left, now that we're validating hostname\n",
        "createdAt" : "2016-08-02T18:27:05Z",
        "updatedAt" : "2016-08-04T00:17:12Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "37f3c927-b400-4567-8486-1c6a85ade8ad",
        "parentId" : "961f9007-8f0d-4c98-890c-5e0f6fea3ac8",
        "authorId" : "129a54e8-80b2-43d1-8683-2ca635411520",
        "body" : "I'm not sure what other validation need to be done\n",
        "createdAt" : "2016-08-02T19:24:00Z",
        "updatedAt" : "2016-08-04T00:17:12Z",
        "lastEditedBy" : "129a54e8-80b2-43d1-8683-2ca635411520",
        "tags" : [
        ]
      }
    ],
    "commit" : "60f4fbf4f25764dbd94b7f8146d927ddc684514d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +323,327 @@\tallErrs := field.ErrorList{}\n\t// TODO: Perform a more thorough validation of spec.TLS.Hosts that takes\n\t// the wildcard spec from RFC 6125 into account.\n\tfor _, itls := range spec.TLS {\n\t\tfor i, host := range itls.Hosts {"
  },
  {
    "id" : "6ea0bfad-7bd6-4e4e-9c4a-257f0877c21e",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03a573e-a9ba-4d4e-8ffd-276076c2c85d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Are we allowing updates?  Do we fully comprehend the implications of changing a class while existing volumes might reference it?  Where is that documented (hint: it should be in the API spec).\n\nIf we're not ready for that, we can disallow updates until we know what we want to do with it.  This is a strategy that has been used well and probably not often enough.\n",
        "createdAt" : "2016-07-26T04:14:55Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +773,777 @@\n// ValidateStorageClassUpdate tests if an update to StorageClass is valid.\nfunc ValidateStorageClassUpdate(storageClass, oldStorageClass *extensions.StorageClass) field.ErrorList {\n\tallErrs := apivalidation.ValidateObjectMetaUpdate(&storageClass.ObjectMeta, &oldStorageClass.ObjectMeta, field.NewPath(\"metadata\"))\n\tif !reflect.DeepEqual(oldStorageClass.Parameters, storageClass.Parameters) {"
  },
  {
    "id" : "f551d5c2-44cd-40fb-82f1-70756a92f3f3",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbbbe670-2410-4158-b75f-613f6b265592",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "probably should also assert that len(params) <= 256 (or 512 or 1024 - something sane).  Otherwise it could be a DoS to create a very large number of keys with no value.\n",
        "createdAt" : "2016-07-26T04:19:57Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5a7a4d98-bb87-4f54-af97-a9ee8a1f892e",
        "parentId" : "bbbbe670-2410-4158-b75f-613f6b265592",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also document in API\n",
        "createdAt" : "2016-07-26T04:20:06Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +812,816 @@\t}\n\n\tfor k, v := range params {\n\t\tif len(k) < 1 {\n\t\t\tallErrs = append(allErrs, field.Invalid(fldPath, k, \"field can not be empty.\"))"
  },
  {
    "id" : "1cb97a4c-f25d-4b1e-ad3c-24319bc66814",
    "prId" : 27180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1ab0f04-043b-45b7-bce4-150d8c79c057",
        "parentId" : null,
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "exported symbol => godocs, can you reuse the function from `pkg/api/validation/validation.go`?\n",
        "createdAt" : "2016-08-19T13:00:21Z",
        "updatedAt" : "2016-08-25T11:22:38Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "03d7e33034af425e4ea7da76641d6451abfd501e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +691,695 @@var sysctlPatternRegexp = regexp.MustCompile(\"^\" + SysctlPatternFmt + \"$\")\n\nfunc IsValidSysctlPattern(name string) bool {\n\tif len(name) > apivalidation.SysctlMaxLength {\n\t\treturn false"
  },
  {
    "id" : "bdd0c11d-e05b-462c-8689-5c466d0e546c",
    "prId" : 25638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88049ab2-cb35-4573-a113-59b676913c63",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "see `validateVolumeSource` for example\n",
        "createdAt" : "2016-05-18T00:15:27Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "47248f3698d50f163d9b329e697544a84efbc663",
    "line" : null,
    "diffHunk" : "@@ -1,1 +715,719 @@\n\t\t\tif numFroms == 0 {\n\t\t\t\t// At least one of PodSelector and NamespaceSelector must be defined.\n\t\t\t\tallErrs = append(allErrs, field.Required(fldPath, \"must specify a from type\"))\n\t\t\t}"
  },
  {
    "id" : "c133a610-9735-444d-a286-66c7a59af2d8",
    "prId" : 25007,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48b2eeec-950f-4988-9d9f-0ee6cb7634a2",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "very restrictive, what if i want a third party resource that has an underscore in the name?  Or a colon?\n",
        "createdAt" : "2016-05-09T18:49:08Z",
        "updatedAt" : "2016-05-09T18:49:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d6ccf1ce-6437-4447-9750-00f8503a0672",
        "parentId" : "48b2eeec-950f-4988-9d9f-0ee6cb7634a2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, I'm not sure what the right line to draw is. if there was a way for thirdpartyresources to specify what name formats they allow, that would be better, but in the absence of that, how much should we protect users of this API from bad names? see discussion at https://github.com/kubernetes/kubernetes/pull/25007#discussion-diff-61665610\n\n> @liggitt: should we make the name validation tight (dns label or subdomain, etc) or minimal (anything we can represent as a URL path segment)?\n> \n> @deads2k: Without actual hooks to allow them to shape their names, I think forcing the label is reasonable.\n> \n> @liggitt: you don't think most API consumers would be equipped to handle resources named İ ♥ \\n?\n",
        "createdAt" : "2016-05-09T18:55:20Z",
        "updatedAt" : "2016-05-09T18:55:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a45e278c-4846-4a6f-bfb1-4932c941ebcc",
        "parentId" : "48b2eeec-950f-4988-9d9f-0ee6cb7634a2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm ok with starting tight.  But it also encourages clients to make\nassumptions \"oh, third party is label, I'll just mix in some colons and\nunderscores and everything will be safe\".  No objection, otherwise LGTM.\n\nOn Mon, May 9, 2016 at 2:55 PM, Jordan Liggitt notifications@github.com\nwrote:\n\n> In pkg/apis/extensions/validation/validation.go\n> https://github.com/kubernetes/kubernetes/pull/25007#discussion_r62552880\n> :\n> \n> > @@ -152,6 +165,8 @@ func ValidateThirdPartyResource(obj *extensions.ThirdPartyResource) field.ErrorL\n> >         version := &obj.Versions[ix]\n> >         if len(version.Name) == 0 {\n> >             allErrs = append(allErrs, field.Invalid(field.NewPath(\"versions\").Index(ix).Child(\"name\"), version, \"must not be empty\"))\n> > -       } else if !validation.IsDNS1123Label(version.Name) {\n> \n> yeah, I'm not sure what the right line to draw is. if there was a way for\n> thirdpartyresources to specify what name formats they allow, that would be\n> better, but in the absence of that, how much should we protect users of\n> this API from bad names? see discussion at #25007 (diff)\n> https://github.com/kubernetes/kubernetes/pull/25007#discussion-diff-61665610\n> \n> @liggitt https://github.com/liggitt: should we make the name validation\n> tight (dns label or subdomain, etc) or minimal (anything we can represent\n> as a URL path segment)?\n> \n> @deads2k https://github.com/deads2k: Without actual hooks to allow them\n> to shape their names, I think forcing the label is reasonable.\n> \n> @liggitt https://github.com/liggitt: you don't think most API consumers\n> would be equipped to handle resources named İ ♥ \\n?\n> \n> —\n> You are receiving this because you were assigned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/25007/files/6c323a4f723cbcb1a11d12edf1c81b8ed908057d#r62552880\n",
        "createdAt" : "2016-05-09T19:16:37Z",
        "updatedAt" : "2016-05-09T19:16:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c323a4f723cbcb1a11d12edf1c81b8ed908057d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\tif len(version.Name) == 0 {\n\t\t\tallErrs = append(allErrs, field.Invalid(field.NewPath(\"versions\").Index(ix).Child(\"name\"), version, \"must not be empty\"))\n\t\t} else if !validation.IsDNS1123Label(version.Name) {\n\t\t\tallErrs = append(allErrs, field.Invalid(field.NewPath(\"versions\").Index(ix).Child(\"name\"), version, apivalidation.DNS1123LabelErrorMsg))\n\t\t}"
  },
  {
    "id" : "f528f10b-dd6c-40c5-9023-27c5134ab2e0",
    "prId" : 20703,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10c5b57a-1ffd-484d-858f-430c6e004185",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "should \"metadata\" be \"annotations\" ?\n",
        "createdAt" : "2016-02-05T10:40:09Z",
        "updatedAt" : "2016-02-05T10:40:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "83f6ae07-eca0-47b8-af19-e426dae18ad5",
        "parentId" : "10c5b57a-1ffd-484d-858f-430c6e004185",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "annotations are in metadata\n",
        "createdAt" : "2016-02-05T10:55:03Z",
        "updatedAt" : "2016-02-05T10:55:03Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a74a60413037a3e56c1959ae4cb8f09e0ac94a3",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +113,117 @@\tallErrs := apivalidation.ValidateObjectMeta(&autoscaler.ObjectMeta, true, ValidateHorizontalPodAutoscalerName, field.NewPath(\"metadata\"))\n\tallErrs = append(allErrs, validateHorizontalPodAutoscalerSpec(autoscaler.Spec, field.NewPath(\"spec\"))...)\n\tallErrs = append(allErrs, validateHorizontalPodAutoscalerAnnotations(autoscaler.Annotations, field.NewPath(\"metadata\"))...)\n\treturn allErrs\n}"
  },
  {
    "id" : "9d8bd0b5-71d0-4a46-b211-73512b988444",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "320dc9b6-31c2-49ef-86e5-965ea6180749",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Isn't `spec.Selector` not required?\n",
        "createdAt" : "2016-02-09T02:01:31Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c3abeed2-c2a0-4b9a-ae5e-e65f4cf6cba1",
        "parentId" : "320dc9b6-31c2-49ef-86e5-965ea6180749",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "IIUC, selector is optional only in the external version. By the time it is converted to an internal object, it is defaulted to `Spec.Template.Labels`. Since the validation happens on internal objects, validation should fail if it is nil, IMHO.\n\nThe second thing is, this code is trying to preserve the semantics of what RC based `ValidateDeploymentSpec()` did. Before, this function would call `ValidateNonEmptySelector()` and and that would call \n\n```\nselector := labels.Set(selectorMap).AsSelector()\nif selector.Empty() {\n    allErrs = append(allErrs, field.Required(fldPath, \"\"))\n}\n```\n\nAnd because of the way this worked, selector.Empty() would return true for nil SelectorMap and then there would be an error. I am trying to preserve that behavior here.\n",
        "createdAt" : "2016-02-09T04:05:44Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "f7e27105-ccd9-413f-9e51-bff367cc3e9c",
        "parentId" : "320dc9b6-31c2-49ef-86e5-965ea6180749",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I see. Thanks for the explanation. \n",
        "createdAt" : "2016-02-09T18:08:22Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +350,354 @@\n\tif spec.Selector == nil {\n\t\tallErrs = append(allErrs, field.Required(fldPath.Child(\"selector\"), \"\"))\n\t} else {\n\t\tallErrs = append(allErrs, unversionedvalidation.ValidateLabelSelector(spec.Selector, fldPath.Child(\"selector\"))...)"
  },
  {
    "id" : "dd501d82-428d-44e9-85bf-524140d13078",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3a62158-bfda-451c-8b3e-4cc28e4372fd",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This error message may confuse the users... the conversion between LabelSelector and Selector is implementation detail; the users only know that they have `selector` in deployment.spec. \n",
        "createdAt" : "2016-02-09T02:16:01Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d7fd1a90-fdb1-46f2-b1ad-0ce3ce009537",
        "parentId" : "d3a62158-bfda-451c-8b3e-4cc28e4372fd",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "After reading your comment, I think I agree. But that also means we need to change this in a lot of other places as well. Would you be Ok if these changes are in a separate follow up PR?\n",
        "createdAt" : "2016-02-09T04:07:47Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "a47f8ea7-ed54-4cfd-9e92-dcd34a5bff6c",
        "parentId" : "d3a62158-bfda-451c-8b3e-4cc28e4372fd",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@madhusudancs sounds good\n",
        "createdAt" : "2016-02-09T18:06:29Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +360,364 @@\tselector, err := unversioned.LabelSelectorAsSelector(spec.Selector)\n\tif err != nil {\n\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"selector\"), spec.Selector, \"failed to convert LabelSelector to Selector.\"))\n\t} else {\n\t\tallErrs = append(allErrs, ValidatePodTemplateSpecForReplicaSet(&spec.Template, selector, spec.Replicas, fldPath.Child(\"template\"))...)"
  },
  {
    "id" : "a2dd8742-5d49-47d2-aa6f-50647a019554",
    "prId" : 17195,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d14377e5-6756-44e9-9cf8-95b385d63bfc",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why is empty string valid? It should be set by default prior to validation.\ncc @nikhiljindal \n",
        "createdAt" : "2015-11-17T05:53:01Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "701d3f1e-684d-41ac-aeee-16e02ddba142",
        "parentId" : "d14377e5-6756-44e9-9cf8-95b385d63bfc",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "From https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/extensions/v1beta1/types.go#L210-L211:\n\n> Users can set this to an empty string to indicate that the system should not add any selector and label.\n",
        "createdAt" : "2015-11-17T19:59:57Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "67ccd243-db41-4c8e-9282-6ba9d5544c8e",
        "parentId" : "d14377e5-6756-44e9-9cf8-95b385d63bfc",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "API allows users to set it to empty string to indicate that no label should be added. The default value will be set if user does not set it, not if user sets it to empty string (its a string pointer)\nFrom API comments:\n\n> ```\n>     // Users can set this to an empty string to indicate that the system should\n> // not add any selector and label. If unspecified, system uses\n> // \"deployment.kubernetes.io/podTemplateHash\".\n> // Value of this key is hash of DeploymentSpec.PodTemplateSpec.\n> // No label is added if this is set to empty string.\n> ```\n",
        "createdAt" : "2015-11-17T20:36:43Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0c02c95c4cbd5e4a4f1bef65e813e85035f998e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +298,302 @@\tallErrs = append(allErrs, apivalidation.ValidatePodTemplateSpecForRC(&spec.Template, spec.Selector, spec.Replicas, \"template\")...)\n\tallErrs = append(allErrs, ValidateDeploymentStrategy(&spec.Strategy, \"strategy\")...)\n\t// empty string is a valid UniqueLabelKey\n\tif len(spec.UniqueLabelKey) > 0 {\n\t\tallErrs = append(allErrs, apivalidation.ValidateLabelName(spec.UniqueLabelKey, \"uniqueLabel\")...)"
  },
  {
    "id" : "0ae12146-f063-43d6-9b27-5ff1b711e190",
    "prId" : 16717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1169a179-905a-4e78-aee7-5b23b99b4578",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why do we have this lever?\n",
        "createdAt" : "2015-11-03T15:47:58Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6ac90f75-5ac4-44d4-bda0-19f22b82b19b",
        "parentId" : "1169a179-905a-4e78-aee7-5b23b99b4578",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it's a good question, but as long as we do, we need to make sure we're not accepting bad data, so when we start making use of it, the world doesn't fall apart. @jszczepkowski, any feedback on why we have this field, and why we're not using it?\n",
        "createdAt" : "2015-11-03T16:21:34Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "86bb7022-ae63-4b34-9cba-f69d1ccab92f",
        "parentId" : "1169a179-905a-4e78-aee7-5b23b99b4578",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Subresource is a generic reference, which may point to other sub-resources than scale. In HPA, we need to ensure that it points to scale.\n",
        "createdAt" : "2015-11-17T13:27:31Z",
        "updatedAt" : "2015-11-17T13:27:31Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "2530deb2-e5d6-4e99-b5c1-3275f2611ac1",
        "parentId" : "1169a179-905a-4e78-aee7-5b23b99b4578",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't see why it has to be named \"scale\", as long as the referenced subresource accepts and returns API objects of the correct type\n",
        "createdAt" : "2015-11-17T14:45:29Z",
        "updatedAt" : "2015-11-17T14:45:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3157d1445baef3b5adbaa97da9fca5154bfe251",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +58,62 @@\tif refErrs := ValidateSubresourceReference(autoscaler.ScaleRef); len(refErrs) > 0 {\n\t\tallErrs = append(allErrs, refErrs.Prefix(\"scaleRef\")...)\n\t} else if autoscaler.ScaleRef.Subresource != \"scale\" {\n\t\tallErrs = append(allErrs, errs.NewFieldValueNotSupported(\"scaleRef.subresource\", autoscaler.ScaleRef.Subresource, []string{\"scale\"}))\n\t}"
  },
  {
    "id" : "df8abc59-2e29-43ef-9b85-7deb9209cd92",
    "prId" : 16717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5eb03abe-1c86-4266-b34b-d915bb8be317",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Don't we have an `APIVersion` too?\n",
        "createdAt" : "2015-11-03T15:48:59Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "494f0b66-a1ba-44d5-8b9d-53eeffa01cde",
        "parentId" : "5eb03abe-1c86-4266-b34b-d915bb8be317",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we do, it's unused, and it's unclear (to me) what the validation should be\n",
        "createdAt" : "2015-11-03T18:09:49Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3157d1445baef3b5adbaa97da9fca5154bfe251",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +64,68 @@}\n\nfunc ValidateSubresourceReference(ref extensions.SubresourceReference) errs.ValidationErrorList {\n\tallErrs := errs.ValidationErrorList{}\n\tif len(ref.Kind) == 0 {"
  },
  {
    "id" : "4f3b9818-d024-4817-98ee-57e63c1a931b",
    "prId" : 15520,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I kinda feel like we should error on duplicate keys. \n",
        "createdAt" : "2015-10-13T06:46:07Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "b5be9692-8c9d-41b5-80d5-2164d9f924e3",
        "parentId" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "That would make it impossible to express that a key must exist but is not in a set of values.\n",
        "createdAt" : "2015-10-13T07:12:02Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9dd821b4-3e8c-4bb9-a18f-e7e740aca6c1",
        "parentId" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "True, but is there a use case for that? I thought you were the one who was supposed to argue for making these easy for a human to analyze. :-)\n",
        "createdAt" : "2015-10-13T08:34:56Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "cc961f9a-4500-40cc-8624-0e525df32788",
        "parentId" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I agree with @bgrant0607 but lack a good example now.  I don't think allowing it makes it necessarily harder to analyze.\n",
        "createdAt" : "2015-10-13T20:23:30Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "b11ece92-6624-4d41-9f3f-645dea6fd7af",
        "parentId" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The only case I can think of is the one I mentioned: exists and notin. This is actually the behavior I originally expected from notin. An alternative to allowing multiple requirements would be to create a new notin operator (say, !in) with this behavior. (!in would be slightly tricky to parse, but is pithy.)\n\nWe couldn't enforce non-repeated keys on list/watch filters, but could enforce it for uses of PodSelector in the API.\n",
        "createdAt" : "2015-10-13T20:36:33Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "8868d468-4992-4793-9bc6-c28d5f73f9fe",
        "parentId" : "dbf1a473-84e6-47c9-b1e6-6e28f48592ef",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I withdraw my comment.\n",
        "createdAt" : "2015-10-13T20:54:47Z",
        "updatedAt" : "2015-10-15T14:48:59Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7a54cac74dd2f7642e0276bb926f9d90aa11f74",
    "line" : null,
    "diffHunk" : "@@ -1,1 +579,583 @@\t}\n\tallErrs = append(allErrs, apivalidation.ValidateLabels(ps.MatchLabels, \"matchLabels\")...)\n\tfor i, expr := range ps.MatchExpressions {\n\t\tallErrs = append(allErrs, ValidatePodSelectorRequirement(expr).Prefix(fmt.Sprintf(\"matchExpressions.[%v]\", i))...)\n\t}"
  },
  {
    "id" : "01f1449c-3f32-4cf9-aa2c-7892cf654494",
    "prId" : 15491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12c8b1b-4046-44e6-993e-49180bcd97e6",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Godoc please (too many public functions in this file don't have one, but at least all the Ingress ones do, so victory!)\n",
        "createdAt" : "2015-10-14T17:49:29Z",
        "updatedAt" : "2015-10-14T18:36:56Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae56c3b2d0b90c7a3b3bf91f693a6a4573f1257",
    "line" : null,
    "diffHunk" : "@@ -1,1 +449,453 @@\n// ValidateIngressStatusUpdate tests if required fields in the Ingress are set when updating status.\nfunc ValidateIngressStatusUpdate(ingress, oldIngress *extensions.Ingress) errs.ValidationErrorList {\n\tallErrs := errs.ValidationErrorList{}\n\tallErrs = append(allErrs, apivalidation.ValidateObjectMetaUpdate(&ingress.ObjectMeta, &oldIngress.ObjectMeta).Prefix(\"metadata\")...)"
  },
  {
    "id" : "2fe19641-741d-433b-9a40-d9d8b2af1c2b",
    "prId" : 7893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c308457-3cc4-4247-b38a-3d808528fbf4",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Okay, good, you are using `sets.NewString` here.\n",
        "createdAt" : "2016-01-08T16:32:23Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c22f348f86e2a9836b0d18be3f27f0ff1c7d5181",
    "line" : null,
    "diffHunk" : "@@ -1,1 +761,765 @@func validatePodSecurityPolicyVolumes(fldPath *field.Path, volumes []extensions.FSType) field.ErrorList {\n\tallErrs := field.ErrorList{}\n\tallowed := sets.NewString(string(extensions.HostPath),\n\t\tstring(extensions.EmptyDir),\n\t\tstring(extensions.GCEPersistentDisk),"
  }
]