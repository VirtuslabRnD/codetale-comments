[
  {
    "id" : "830bdcd8-63f5-41b9-9793-020926c109ac",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-42763535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac988b4e-941d-4b6c-b6b6-6db3793f087d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`storageOS`?",
        "createdAt" : "2017-06-02T03:14:35Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2d069f7a-24f0-431c-a9a3-7be3f3badc3d",
        "parentId" : "ac988b4e-941d-4b6c-b6b6-6db3793f087d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Please copy the const to pkg/apis/extensions/v1beta1/types.go as well.",
        "createdAt" : "2017-06-07T20:24:05Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "c7f96bac-fac4-47ab-999c-269c7b81a1bd",
        "parentId" : "ac988b4e-941d-4b6c-b6b6-6db3793f087d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It looks like the list in [v1beta1/types.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/extensions/v1beta1/types.go#L940) has already diverged, please keep them consistent if possible.\r\n\r\nAlso, is it intentional to make these variables instead of constants?",
        "createdAt" : "2017-06-07T23:50:14Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +946,950 @@\tAzureDisk             FSType = \"azureDisk\"\n\tPhotonPersistentDisk  FSType = \"photonPersistentDisk\"\n\tStorageOS             FSType = \"storageos\"\n\tProjected             FSType = \"projected\"\n\tPortworxVolume        FSType = \"portworxVolume\""
  },
  {
    "id" : "8e553486-e554-44fb-bdb8-45c4ff1c4097",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-21568640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This is not clear to me. Does it include nodes where the pod does not exist at all or only nodes where the pod is created but not yet ready for minReadySeconds? In Deployment, UnavailableReplicas maps to the latter.",
        "createdAt" : "2017-02-10T09:56:18Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "33b57b8a-4a21-4acf-9a6c-a391692cdb20",
        "parentId" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Although I think I would be fine with this meaning the former for DaemonSets. ",
        "createdAt" : "2017-02-10T10:40:24Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8f4018d2-81ce-4e43-a97f-e2a81838657e",
        "parentId" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "If the pod is missing I'm counting it as unavailable so the first option.",
        "createdAt" : "2017-02-10T11:15:29Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "2b34989c-c3da-4aa8-bd1d-7a0e91a34f1f",
        "parentId" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This also implies that if a node has 2 daemon pods (from the same DS), where one pod is available but the other one is not, we won't count this as unavailable. \r\n\r\nShould we rephrase it to make it more clear? How about this:\r\n\r\n```go\r\n// NumberUnavailable is the number of nodes that should be running the\r\n// daemon pod but have no available daemon pod\r\n```",
        "createdAt" : "2017-02-10T23:31:04Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "117d29da-8434-45f9-803c-48116ad4c82f",
        "parentId" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@janetkuo confused how come a node can have 2 daemon pods from the same DS. The DS has one podspec and can only schedule one pod per node for a given DS spec.",
        "createdAt" : "2017-02-12T04:45:13Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "eabd62b6-206c-4c50-8376-d3526aa923d6",
        "parentId" : "6d984868-e957-4aab-a0df-2a4ecede7114",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@krmayankk We use cache in controllers (e.g. while listing pods), so it's theoretically possible that a DaemonSet controller create more than one DaemonSet pod on a node transiently. ",
        "createdAt" : "2017-02-13T17:43:41Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +483,487 @@\n\t// NumberUnavailable is the number of nodes that should be running the\n\t// daemon pod and have none of the daemon pod running and available\n\t// (ready for at least minReadySeconds)\n\t// +optional"
  },
  {
    "id" : "f5e394a2-e3f7-48f7-b54f-20f7f74c2fbe",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-21360952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f29fca3-ec1d-497a-ac08-38e9b7b60804",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`MinReadySeoncds is...` or just remove MinReadySeconds (`Minimum number of...`)",
        "createdAt" : "2017-02-10T23:05:55Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +436,440 @@\tUpdateStrategy DaemonSetUpdateStrategy\n\n\t// MinReadySeconds minimum number of seconds for which a newly created DaemonSet pod should\n\t// be ready without any of its container crashing, for it to be considered\n\t// available. Defaults to 0 (pod will be considered available as soon as it"
  },
  {
    "id" : "0653cdab-5a81-4577-b701-4c54c9a4e243",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-21360952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef63b17-6cd5-47a1-bce2-287f081778d1",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Maybe remove \"running\" since a ready/available pod must be running? Just trying to make it more understandable:\r\n\r\n```go\r\n// NumberAvailable is the number of nodes that should be running the\r\n// daemon pod and have at least one available daemon pod (ready for\r\n// at least minReadySeconds)\r\n```",
        "createdAt" : "2017-02-10T23:26:58Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +477,481 @@\n\t// NumberAvailable is the number of nodes that should be running the\n\t// daemon pod and have one or more of the daemon pod running and\n\t// available (ready for at least minReadySeconds)\n\t// +optional"
  },
  {
    "id" : "76cc5bf3-0493-4004-b413-25ac9aeae787",
    "prId" : 32771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32771#pullrequestreview-1295212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c43160c8-39d9-4427-a8f6-2b9292248dc9",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "here also \n",
        "createdAt" : "2016-09-23T00:34:22Z",
        "updatedAt" : "2016-09-28T09:25:32Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c1d5f36b-1514-4264-b5c9-993aa04f440a",
        "parentId" : "c43160c8-39d9-4427-a8f6-2b9292248dc9",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "done\n",
        "createdAt" : "2016-09-23T09:11:40Z",
        "updatedAt" : "2016-09-28T09:25:32Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8dc2aac07809eb914c675caf8e73c05969617a6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +639,643 @@\n\t// The number of available replicas (ready for at least minReadySeconds) for this replica set.\n\tAvailableReplicas int32 `json:\"availableReplicas,omitempty\"`\n\n\t// ObservedGeneration is the most recent generation observed by the controller."
  },
  {
    "id" : "a0863340-5809-462b-852d-3f79f571d95a",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6fd0972-6fe4-4546-85dd-327de9c1f3ef",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I really wish we could generate these list types.\n",
        "createdAt" : "2016-07-19T20:49:20Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2c59544b-8464-4a70-847a-1db9249f0fbf",
        "parentId" : "c6fd0972-6fe4-4546-85dd-327de9c1f3ef",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As we move more towards IDL we can.  Keep it in your mind - it's a good idea.\n",
        "createdAt" : "2016-07-26T04:04:46Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +929,933 @@\n// StorageClassList is a collection of storage classes.\ntype StorageClassList struct {\n\tunversioned.TypeMeta `json:\",inline\"`\n\t// Standard list metadata"
  },
  {
    "id" : "996b1a6d-acda-4ca8-82da-e83fd417fa64",
    "prId" : 22402,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca77e5d4-510a-4dfc-ad9a-4ede81cada21",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "for the json tag, do we want \"seLinux (implies 2 words) or \"selinux\" implies a single proper name?  I've always thought of selinux as the latter, but I yield to RH folks who are obviously more invested in selinux.\n",
        "createdAt" : "2016-03-03T16:28:40Z",
        "updatedAt" : "2016-03-03T19:49:55Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "83cb069e-153d-4b09-8352-4c7e3ea4f90e",
        "parentId" : "ca77e5d4-510a-4dfc-ad9a-4ede81cada21",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I prefer the latter, I don't know whether there are other examples sufficiently thought through.\n",
        "createdAt" : "2016-03-03T18:32:43Z",
        "updatedAt" : "2016-03-03T19:49:55Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "23b660a6-70f6-4ec5-b4e0-6e66f348fb3e",
        "parentId" : "ca77e5d4-510a-4dfc-ad9a-4ede81cada21",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Well, the RH guys wrote what was there before, and it was spelled `seLinuxContext`, so I just shortened it.\n",
        "createdAt" : "2016-03-03T19:42:19Z",
        "updatedAt" : "2016-03-03T19:49:55Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "f18e3670-8c19-4486-9d08-1b6a8052b45b",
        "parentId" : "ca77e5d4-510a-4dfc-ad9a-4ede81cada21",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Okay, I'll make it \"selinux\".\n",
        "createdAt" : "2016-03-03T19:59:39Z",
        "updatedAt" : "2016-03-03T19:59:39Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "85525e2c-c784-4dfa-8c4a-be346b62cd93",
        "parentId" : "ca77e5d4-510a-4dfc-ad9a-4ede81cada21",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "+1 to `selinux`\n",
        "createdAt" : "2016-03-07T15:59:22Z",
        "updatedAt" : "2016-03-07T15:59:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "87b095d33c706b0f2c9d74ffc3d2d43a935b8ffa",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +847,851 @@\tHostIPC bool `json:\"hostIPC,omitempty\"`\n\t// SELinux is the strategy that will dictate the allowable labels that may be set.\n\tSELinux SELinuxStrategyOptions `json:\"seLinux,omitempty\"`\n\t// RunAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.\n\tRunAsUser RunAsUserStrategyOptions `json:\"runAsUser,omitempty\"`"
  },
  {
    "id" : "73bd8f02-b687-44b6-88f5-4a91023d976e",
    "prId" : 20937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e72b3a2d-1664-4321-bf5c-742bf839d7f8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add TODO comments\n",
        "createdAt" : "2016-02-10T00:41:24Z",
        "updatedAt" : "2016-02-10T23:44:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c267fb93-5984-4877-816f-d1ae50e2cd73",
        "parentId" : "e72b3a2d-1664-4321-bf5c-742bf839d7f8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "To all the commented-out sections.\n",
        "createdAt" : "2016-02-10T01:32:25Z",
        "updatedAt" : "2016-02-10T23:44:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "be11dbd4-683b-401e-a158-2842e84ec894",
        "parentId" : "e72b3a2d-1664-4321-bf5c-742bf839d7f8",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Done.\n",
        "createdAt" : "2016-02-10T23:33:04Z",
        "updatedAt" : "2016-02-10T23:44:23Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad9ba239956e581f6bb402bcdc7ca52d20fab668",
    "line" : null,
    "diffHunk" : "@@ -1,1 +355,359 @@\n// TODO(madhusudancs): Uncomment while implementing DaemonSet updates.\n/* Commenting out for v1.2. We are planning to bring these types back with a more robust DaemonSet update implementation in v1.3, hence not deleting but just commenting the types out.\ntype DaemonSetUpdateStrategy struct {\n\t// Type of daemon set update. Only \"RollingUpdate\" is supported at this time. Default is RollingUpdate."
  },
  {
    "id" : "8fca5598-4d13-45aa-89dd-5f17e0908b46",
    "prId" : 20765,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dd2010e-5f2d-45d4-bb0a-ea135186b259",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Shouldn't this still be namespaced?\n",
        "createdAt" : "2016-02-06T04:25:30Z",
        "updatedAt" : "2016-02-06T05:21:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "3e962f20-2aab-4a99-8140-d84dc17728b1",
        "parentId" : "4dd2010e-5f2d-45d4-bb0a-ea135186b259",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Discussed with @bgrant0607 about this, and we renamed it to be without namespace because it's too long whenever we display resources with their labels, and putting namespace is more suitable for annotations because annotations targets machines, not humans. \n",
        "createdAt" : "2016-02-06T05:25:12Z",
        "updatedAt" : "2016-02-06T05:25:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "fa32a935-e4c7-41aa-aa60-7a6ba27d1de9",
        "parentId" : "4dd2010e-5f2d-45d4-bb0a-ea135186b259",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The desire for lack of a namespace prefix was one reason I had originally insisted on the key being configurable -- so that the user could change the key in order to avoid key-name collisions with their own labels.\n\nHowever, in the short term it's easier if we don't support that field. If users request it, we can add it back later.\n",
        "createdAt" : "2016-02-06T05:40:22Z",
        "updatedAt" : "2016-02-06T05:40:22Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "38ae5785dcc9c5e89a1dbf649933f74ac1d07e39",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +280,284 @@\t// to existing RCs (and label key that is added to its pods) to prevent the existing RCs\n\t// to select new pods (and old pods being select by new RC).\n\tDefaultDeploymentUniqueLabelKey string = \"pod-template-hash\"\n)\n"
  },
  {
    "id" : "be293ebf-cfcf-4983-9025-ec539c35937a",
    "prId" : 19686,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8e61a6c-fef9-4881-9317-046353ac93bd",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The subresource needs another top-level object with at least TypeMeta and annotations, which can inline RollbackConfig.\n\n``` go\ntype DeploymentRollback struct {\n  TypeMeta\n  Annotations map[string]string\n  RollbackConfig\n}\n```\n",
        "createdAt" : "2016-01-25T22:47:15Z",
        "updatedAt" : "2016-01-31T00:08:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "16f5c000-f23a-4428-9c6c-4766c6da27cf",
        "parentId" : "b8e61a6c-fef9-4881-9317-046353ac93bd",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Note: I do realize that the Annotations field is different than what we did for Binding. I think the simplicity gained is worth the inconsistency.\n",
        "createdAt" : "2016-01-25T22:54:22Z",
        "updatedAt" : "2016-01-31T00:08:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "fe9c38d4-1b92-4051-8f7e-2283006ebdf4",
        "parentId" : "b8e61a6c-fef9-4881-9317-046353ac93bd",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done (as discussed, added Name and Namespace too.)\n",
        "createdAt" : "2016-01-27T06:29:54Z",
        "updatedAt" : "2016-01-31T00:08:59Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3396db95106e3257946f78334017e6024e704b9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +252,256 @@}\n\ntype RollbackConfig struct {\n\t// The revision to rollback to. If set to 0, rollbck to the last revision.\n\tRevision int64 `json:\"revision,omitempty\"`"
  },
  {
    "id" : "ff0845b5-dcca-4795-8c80-1a1cd3ac08b0",
    "prId" : 19343,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/19343#pullrequestreview-2671247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dba3d85d-dcca-41fe-b89a-539900dcca5a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Thank god for this.\n",
        "createdAt" : "2016-09-15T19:24:46Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "efd95a3e-db9b-463e-a8b4-46bd30e7303c",
        "parentId" : "dba3d85d-dcca-41fe-b89a-539900dcca5a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "There are still pod failures not associated with pod creation/deletion that need to be surfaced as replica set events/conditions such as ImagePullBackOff. I will open a follow-up issue for making sure every warning reported on a pod is propagated to replica sets.\n",
        "createdAt" : "2016-09-16T11:31:20Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "f47cb0bc-114c-4ad5-ae6d-ba1cc60a429d",
        "parentId" : "dba3d85d-dcca-41fe-b89a-539900dcca5a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "https://github.com/kubernetes/kubernetes/issues/32863\n",
        "createdAt" : "2016-09-16T11:49:06Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "acde8236-1e18-4387-9193-3ab3297e35f2",
        "parentId" : "dba3d85d-dcca-41fe-b89a-539900dcca5a",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "Shouldn't there be a state which just means the Deployment has been marked failed, or is ReplicaFailure that state ? Why is not called `Failure' rather than qualifying it as ReplicaFailure. ?\n",
        "createdAt" : "2016-10-04T07:12:02Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "8aba2a65-666a-4bec-8ccc-8e567470648f",
        "parentId" : "dba3d85d-dcca-41fe-b89a-539900dcca5a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Conditions are slightly different from states aka Phases: https://github.com/kubernetes/kubernetes/issues/7856\n\nA ReplicaFailure does not mean a Deployment failure. For example. when a pod for a Deployment lands on a node that it shouldn't and it starts crashlooping, this is not a Deployment failure, is it?\n",
        "createdAt" : "2016-10-04T08:55:53Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf9fd31d00c4f01a10cac490226bbd0659d6b483",
    "line" : null,
    "diffHunk" : "@@ -1,1 +341,345 @@\t// ReplicaFailure is added in a deployment when one of its pods fails to be created\n\t// or deleted.\n\tDeploymentReplicaFailure DeploymentConditionType = \"ReplicaFailure\"\n)\n"
  },
  {
    "id" : "ff07f3d1-cd1e-446d-b7b9-9552158e0704",
    "prId" : 19042,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71665048-9ea3-43b6-a69c-5477cd694625",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "As per api-conventions.md, internal types should be int. External type can be int64.\n",
        "createdAt" : "2015-12-28T18:54:16Z",
        "updatedAt" : "2016-01-21T08:46:31Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "eca81bef-58f4-460b-bed2-00200be354ed",
        "parentId" : "71665048-9ea3-43b6-a69c-5477cd694625",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "api-convensions.md says \"Internal types may use (u)int.\" here - https://github.com/kubernetes/kubernetes/blob/master/docs/devel/api-conventions.md#primitive-types. Am I missing something here?\n\nAlso, I think ObservedGeneration should use int64 for both public and internal types to preserve precision.\n",
        "createdAt" : "2015-12-28T23:45:09Z",
        "updatedAt" : "2016-01-21T08:46:31Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "f5150cae-8acc-4d68-9848-8cc20ee39f8a",
        "parentId" : "71665048-9ea3-43b6-a69c-5477cd694625",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@nikhiljindal What in api-conventions.md suggests this can't be int64? We'd lose precision if it were only int.\n\n@madhusudancs Please keep this int64.\n",
        "createdAt" : "2016-01-06T03:37:54Z",
        "updatedAt" : "2016-01-21T08:46:31Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "5ebc2ef9-ef7b-4e2d-946f-ffddec21ff45",
        "parentId" : "71665048-9ea3-43b6-a69c-5477cd694625",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "ok sorry. looks like I mis-interpreted it.\nIt says \"All public integer fields MUST use the Go (u)int32 or Go (u)int64 types, not (u)int (which is ambiguous depending on target platform). Internal types may use (u)int.\"\n",
        "createdAt" : "2016-01-06T23:04:17Z",
        "updatedAt" : "2016-01-21T08:46:31Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "572abe1c5078ad0048b9b29f135113bd10bee128",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +843,847 @@\n\t// ObservedGeneration is the most recent generation observed by the controller.\n\tObservedGeneration int64 `json:\"observedGeneration,omitempty\"`\n}"
  },
  {
    "id" : "0dc7a66b-ee8e-4464-92d6-719fab8056a1",
    "prId" : 18319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62453bb1-a4f8-4a48-9874-c528304a76a4",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@bgrant0607 we shouldn't use json tags in internal objects, right?\n",
        "createdAt" : "2015-12-10T21:58:30Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "690c0a98-9a9e-406d-b26e-6647dcc07ba0",
        "parentId" : "62453bb1-a4f8-4a48-9874-c528304a76a4",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes, but we havent been able to get to it https://github.com/kubernetes/kubernetes/issues/3933\n",
        "createdAt" : "2015-12-17T00:46:42Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "39c19ee1-486f-44b8-833c-ddb69a5f2db4",
        "parentId" : "62453bb1-a4f8-4a48-9874-c528304a76a4",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ah didn't know about that issue, thanks\n",
        "createdAt" : "2015-12-17T11:00:30Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "664589df71955a53b02ad03f5a5e894daad052ab",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +311,315 @@type DaemonSetUpdateStrategy struct {\n\t// Type of daemon set update. Only \"RollingUpdate\" is supported at this time. Default is RollingUpdate.\n\tType DaemonSetUpdateStrategyType `json:\"type,omitempty\"`\n\n\t// Rolling update config params. Present only if DaemonSetUpdateStrategy ="
  },
  {
    "id" : "0ed6c68f-2a1c-4b9e-82b8-48cc88ad2d8c",
    "prId" : 18319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "967ef0b5-c9ea-40e0-b3d8-b18c34815552",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "fwiw, DeploymentSpec also has a UniqueLabelKey, which is used to identify the new pods and RC.\nAm not sure how will you update, if the new pod has same selector as old one (but a different template)? We use UniqueLabelKey to do that in deployment\n",
        "createdAt" : "2015-12-17T00:50:41Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "18b7da1a-1805-4393-8e4e-b79ca2b67b93",
        "parentId" : "967ef0b5-c9ea-40e0-b3d8-b18c34815552",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "IIUC DeploymentSpec.UniqueLabelKey gives the user an option to define their own key for pod template hash but we use deployment.kubernetes.io/podTemplateHash as the default key. We can still accomplish updates using a similar technique, but using a default key name. I am not entirely sure if we want to let the user choose a key, I will defer that to @bgrant0607 \n",
        "createdAt" : "2016-01-04T23:17:46Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "98c12fd8-6ad5-4daf-8d20-3561de939f17",
        "parentId" : "967ef0b5-c9ea-40e0-b3d8-b18c34815552",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Presumably the label would be used to quickly identify which pods haven't yet been updated.\n\nYes, let's add UniqueLabelKey. In general, I want to give users control over the label keys used on their resources.\n",
        "createdAt" : "2016-01-07T04:44:45Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "eb2bb586-e03e-4fd2-bd51-9f3dcad4a45a",
        "parentId" : "967ef0b5-c9ea-40e0-b3d8-b18c34815552",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Added.\n",
        "createdAt" : "2016-01-12T23:30:54Z",
        "updatedAt" : "2016-01-20T18:44:36Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "664589df71955a53b02ad03f5a5e894daad052ab",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +353,357 @@\n// DaemonSetSpec is the specification of a daemon set.\ntype DaemonSetSpec struct {\n\t// Selector is a label query over pods that are managed by the daemon set.\n\t// Must match in order to be controlled."
  },
  {
    "id" : "03a6c601-aa0b-4754-b515-9c511ef8c685",
    "prId" : 17841,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7c317b-3c8a-4644-8d64-507f11ce7f9e",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Add this godoc:\n\n```\n// DefaultDeploymentUniqueLabelKey is the default key of the selector that is added\n// to existing RCs (and label key that is added to its pods) to prevent the existing RCs\n// to select new pods (and old pods being selected by new RC).\n```\n",
        "createdAt" : "2015-11-26T22:53:32Z",
        "updatedAt" : "2015-12-05T03:17:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fd51b9e722880f896ac0a903b7bbc8a1d2de1ec",
    "line" : null,
    "diffHunk" : "@@ -1,1 +228,232 @@\t// to select new pods (and old pods being select by new RC). See DeploymentSpec's UniqueLabelKey\n\t// field for more information.\n\tDefaultDeploymentUniqueLabelKey string = \"deployment.kubernetes.io/podTemplateHash\"\n)\n"
  },
  {
    "id" : "76ed429a-c896-4c5b-91dc-5948a34d0698",
    "prId" : 16330,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f27124f9-1937-489c-8347-a298874d3582",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Have we given up on ever having a `TemplateRef`?  As I recall, that's why this is a pointer for `ReplicationControllerSpec` and I would expect congruence here.\n",
        "createdAt" : "2015-10-27T15:29:07Z",
        "updatedAt" : "2015-10-28T07:13:50Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "078adff1-774c-45e9-a484-727246f974a6",
        "parentId" : "f27124f9-1937-489c-8347-a298874d3582",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I discussed this with @bgrant0607 yesterday. The work was half done and no one is working on it or owns it. It's likely not going to get done before 1.2. Until that happens, generated documentation is confusing and incorrect (says this field is optional when it is actually not) and has been for months in the case of the ReplicationController. The change back can be made in conversions when we have a new API version.\n",
        "createdAt" : "2015-10-27T16:05:07Z",
        "updatedAt" : "2015-10-28T07:13:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "ed748b13-3162-4f88-859f-916023293aea",
        "parentId" : "f27124f9-1937-489c-8347-a298874d3582",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "See https://github.com/kubernetes/kubernetes/pull/14079/files#r40389805\n",
        "createdAt" : "2015-10-27T16:08:58Z",
        "updatedAt" : "2015-10-28T07:13:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "9b1f4478-245e-4a89-847f-c28261b32184",
        "parentId" : "f27124f9-1937-489c-8347-a298874d3582",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If we were to add TemplateRef, it would be in a new apiVersion, anyway. Making template a required field for now is more understandable for users.\n\nTemplateRef is one of several issues to consider in the controller API overhaul: #14961. I don't know when I'll have time to get to it, though.\n",
        "createdAt" : "2015-10-27T16:43:11Z",
        "updatedAt" : "2015-10-28T07:13:50Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bbc2448c9285a09b60ea4b58e640f948da28be3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +209,213 @@\n\t// Template describes the pods that will be created.\n\tTemplate api.PodTemplateSpec `json:\"template\"`\n\n\t// The deployment strategy to use to replace existing pods with new ones."
  },
  {
    "id" : "450a5413-023e-418a-98fa-3cb59cd00b49",
    "prId" : 15706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "066c797a-7688-4d10-ac1e-4b79a49b7e3b",
        "parentId" : null,
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I really, really don't like the situation when MinReplicas is a pointer while MaxReplicas is not.\n\n@bgrant0607 can we have some consistency here?\n",
        "createdAt" : "2015-10-15T15:27:33Z",
        "updatedAt" : "2015-10-16T05:16:04Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "c8bdb531-2030-41e2-a3dc-6ae86581fc85",
        "parentId" : "066c797a-7688-4d10-ac1e-4b79a49b7e3b",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "+1, i think if out the gate, a user MUST specify a value now since 0 is unsupported.  As a result, making it valid to omit I think can cause confusion or make it too easy in the future for the user to accidentally set the value as 0.  Since scale down to 0 could result in future downtime, I think it should be required to set explicitly.\n",
        "createdAt" : "2015-10-15T17:08:48Z",
        "updatedAt" : "2015-10-16T05:16:04Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "df732f061abeb8aa1b7cfca7806df5180f2531b3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +96,100 @@\tMinReplicas *int `json:\"minReplicas,omitempty\"`\n\t// upper limit for the number of pods that can be set by the autoscaler. It cannot be smaller than MinReplicas.\n\tMaxReplicas int `json:\"maxReplicas\"`\n\t// target average CPU utilization (represented as a percentage of requested CPU) over all the pods;\n\t// if not specified it defaults to the target CPU utilization at 80% of the requested resources."
  },
  {
    "id" : "a15a93ee-4a4f-4c88-8d5c-d54cd0ad968a",
    "prId" : 15706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "037f64fa-0ab0-4e1c-840b-9f07078f7cc0",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I still prefer a map here in the long run.\n\nAs a JS user this seems really verbose:\n\n```\nspec.cpuUtilization.utilizationTarget\n```\n\nversus\n\n```\nspec.target[cpu] = 99\n```\n\nCan we stub how memory would have looked if/when we go add it at a later time?\n",
        "createdAt" : "2015-10-15T17:23:12Z",
        "updatedAt" : "2015-10-16T05:16:04Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "ded4522f-4fd7-4782-a2fa-dcb336b057af",
        "parentId" : "037f64fa-0ab0-4e1c-840b-9f07078f7cc0",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "or even if not a map, it would be fine as a slice of resource/utilization pairs.\n",
        "createdAt" : "2015-10-15T17:26:54Z",
        "updatedAt" : "2015-10-16T05:16:04Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "df732f061abeb8aa1b7cfca7806df5180f2531b3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +99,103 @@\t// target average CPU utilization (represented as a percentage of requested CPU) over all the pods;\n\t// if not specified it defaults to the target CPU utilization at 80% of the requested resources.\n\tCPUUtilization *CPUTargetUtilization `json:\"cpuUtilization,omitempty\"`\n}\n"
  },
  {
    "id" : "488a0998-176b-473c-9fe9-0517e65325aa",
    "prId" : 7893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173f766c-db1e-477e-85b3-9722b1f606ea",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "@thockin @saad-ali did you see that the list of volume types is being enumerated here, and do you reluctantly accept it as necessary?\n",
        "createdAt" : "2016-01-08T16:11:24Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "87ec418c-a6b5-43e0-a40b-4489778b42aa",
        "parentId" : "173f766c-db1e-477e-85b3-9722b1f606ea",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "this seems pretty inflexible, tying volume types directly into the API, and\nseems to contradict the idea of pluggable things - it's not very pluggable\nif it requires API changes.\n\nOn Fri, Jan 8, 2016 at 11:12 AM, Eric Tune notifications@github.com wrote:\n\n> In pkg/apis/extensions/types.go\n> https://github.com/kubernetes/kubernetes/pull/7893#discussion_r49204717:\n> \n> > -   HostPath              FSType = \"hostPath\"\n> > -   EmptyDir              FSType = \"emptyDir\"\n> > -   GCEPersistentDisk     FSType = \"gcePersistentDisk\"\n> > -   AWSElasticBlockStore  FSType = \"awsElasticBlockStore\"\n> > -   GitRepo               FSType = \"gitRepo\"\n> > -   Secret                FSType = \"secret\"\n> > -   NFS                   FSType = \"nfs\"\n> > -   ISCSI                 FSType = \"iscsi\"\n> > -   Glusterfs             FSType = \"glusterfs\"\n> > -   PersistentVolumeClaim FSType = \"persistentVolumeClaim\"\n> > -   RBD                   FSType = \"rbd\"\n> > -   Cinder                FSType = \"cinder\"\n> > -   CephFS                FSType = \"cephFS\"\n> > -   DownwardAPI           FSType = \"downwardAPI\"\n> > -   FC                    FSType = \"fc\"\n> >   +)\n> \n> @thockin https://github.com/thockin @saad-ali\n> https://github.com/saad-ali did you see that the list of volume types\n> is being enumerated here, and do you reluctantly accept it as necessary?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/7893/files#r49204717.\n",
        "createdAt" : "2016-01-08T18:18:32Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "656b9b78-f766-4037-b1ea-01b0a83d71ca",
        "parentId" : "173f766c-db1e-477e-85b3-9722b1f606ea",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Until such a time as these volume types are removed from the core API for\npods and pvs, they ultimately need representation here.  So I agree it's\nnot very pluggable, but that's not a problem created by this PR or one that\nshould be resolved here.\n\nOne consideration is for custom volume plugins is whether the declared type\nof the custom volume should be a string map declared here.  Custom volumes\nhave just as much potential for root compromise as any other type.\n\nOn Fri, Jan 8, 2016 at 1:18 PM, James DeFelice notifications@github.com\nwrote:\n\n> In pkg/apis/extensions/types.go\n> https://github.com/kubernetes/kubernetes/pull/7893#discussion_r49218945:\n> \n> > -   HostPath              FSType = \"hostPath\"\n> > -   EmptyDir              FSType = \"emptyDir\"\n> > -   GCEPersistentDisk     FSType = \"gcePersistentDisk\"\n> > -   AWSElasticBlockStore  FSType = \"awsElasticBlockStore\"\n> > -   GitRepo               FSType = \"gitRepo\"\n> > -   Secret                FSType = \"secret\"\n> > -   NFS                   FSType = \"nfs\"\n> > -   ISCSI                 FSType = \"iscsi\"\n> > -   Glusterfs             FSType = \"glusterfs\"\n> > -   PersistentVolumeClaim FSType = \"persistentVolumeClaim\"\n> > -   RBD                   FSType = \"rbd\"\n> > -   Cinder                FSType = \"cinder\"\n> > -   CephFS                FSType = \"cephFS\"\n> > -   DownwardAPI           FSType = \"downwardAPI\"\n> > -   FC                    FSType = \"fc\"\n> >   +)\n> \n> this seems pretty inflexible, tying volume types directly into the API,\n> and seems to contradict the idea of pluggable things - it's not very\n> pluggable if it requires API changes.\n> … <#506423031_>\n> On Fri, Jan 8, 2016 at 11:12 AM, Eric Tune notifications@github.com\n> wrote: In pkg/apis/extensions/types.go <#7893 (comment)\n> https://github.com/kubernetes/kubernetes/pull/7893#discussion_r49204717>:\n> \n> > - HostPath FSType = \"hostPath\" > + EmptyDir FSType = \"emptyDir\" > +\n> >   GCEPersistentDisk FSType = \"gcePersistentDisk\" > + AWSElasticBlockStore\n> >   FSType = \"awsElasticBlockStore\" > + GitRepo FSType = \"gitRepo\" > + Secret\n> >   FSType = \"secret\" > + NFS FSType = \"nfs\" > + ISCSI FSType = \"iscsi\" > +\n> >   Glusterfs FSType = \"glusterfs\" > + PersistentVolumeClaim FSType =\n> >   \"persistentVolumeClaim\" > + RBD FSType = \"rbd\" > + Cinder FSType = \"cinder\"\n> > - CephFS FSType = \"cephFS\" > + DownwardAPI FSType = \"downwardAPI\" > + FC\n> >   FSType = \"fc\" > +) @thockin https://github.com/thockin <\n> >   https://github.com/thockin> @saad-ali https://github.com/saad-ali <\n> >   https://github.com/saad-ali> did you see that the list of volume types is\n> >   being enumerated here, and do you reluctantly accept it as necessary? —\n> >   Reply to this email directly or view it on GitHub <\n> >   https://github.com/kubernetes/kubernetes/pull/7893/files#r49204717>.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/7893/files#r49218945.\n",
        "createdAt" : "2016-01-09T22:20:31Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "85418378-770a-4f39-9e60-35e498670530",
        "parentId" : "173f766c-db1e-477e-85b3-9722b1f606ea",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "+1 for explicit support of custom volumes in the API\n",
        "createdAt" : "2016-01-27T17:04:33Z",
        "updatedAt" : "2016-02-05T14:04:23Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c22f348f86e2a9836b0d18be3f27f0ff1c7d5181",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +905,909 @@\tDownwardAPI           FSType = \"downwardAPI\"\n\tFC                    FSType = \"fc\"\n)\n\n// SELinuxContextStrategyOptions defines the strategy type and any options used to create the strategy."
  }
]