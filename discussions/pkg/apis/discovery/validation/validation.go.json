[
  {
    "id" : "4f99ddc3-6fa8-41be-9978-8b10f0c6bb18",
    "prId" : 99662,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99662#pullrequestreview-605602877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd7e113-565a-4fa8-adc4-99b7e985bcdf",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "In my sketch I had\r\n\r\n```\r\n+               if _, found := endpoint.DeprecatedTopology[v1.LabelTopologyZone]; found {\r\n+                       allErrs = append(allErrs, field.InternalError(topologyPath.Key(v1.LabelTopologyZone), fmt.Errorf(\"reserved key was not removed in conversion\")))\r\n+               }\r\n```\r\n\r\nDo you think that's a bad idea?",
        "createdAt" : "2021-03-05T06:50:28Z",
        "updatedAt" : "2021-03-05T20:03:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ad4a0a36-8749-4fbd-b205-46c17f886531",
        "parentId" : "acd7e113-565a-4fa8-adc4-99b7e985bcdf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is the only comment to resolve still.\r\n\r\nDid you figure out why the v1b1 controller, setting region, wasn't coming thru to v1 deprecatedTopology?  Highly likely it was PEBKAC, but would be good to verify",
        "createdAt" : "2021-03-05T07:06:47Z",
        "updatedAt" : "2021-03-05T20:03:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f74986a9-ee6d-40fa-bc89-8495e8dd9cc0",
        "parentId" : "acd7e113-565a-4fa8-adc4-99b7e985bcdf",
        "authorId" : "795a7242-f965-4c9a-b641-070356320c29",
        "body" : "I had a question about it initially and just forgot to add it back in once I resolved it.\r\n\r\nWith this branch, when v1b1 controller set region it came through in v1 deprecatedTopology. I didn't investigate too much further. What is PEBKAC?",
        "createdAt" : "2021-03-05T20:07:44Z",
        "updatedAt" : "2021-03-05T20:07:45Z",
        "lastEditedBy" : "795a7242-f965-4c9a-b641-070356320c29",
        "tags" : [
        ]
      },
      {
        "id" : "b0f04c8d-167f-4661-b885-ba802997be24",
        "parentId" : "acd7e113-565a-4fa8-adc4-99b7e985bcdf",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "PEBKAC - Problem Exists Between Keyboard And Chair",
        "createdAt" : "2021-03-05T21:14:29Z",
        "updatedAt" : "2021-03-05T21:14:29Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9891b4b9b909b76533a50812c21575cd96c43b1",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +118,122 @@\t\t\tallErrs = append(allErrs, field.TooMany(topologyPath, len(endpoint.DeprecatedTopology), maxTopologyLabels))\n\t\t}\n\t\tallErrs = append(allErrs, metavalidation.ValidateLabels(endpoint.DeprecatedTopology, topologyPath)...)\n\t\tif _, found := endpoint.DeprecatedTopology[corev1.LabelTopologyZone]; found {\n\t\t\tallErrs = append(allErrs, field.InternalError(topologyPath.Key(corev1.LabelTopologyZone), fmt.Errorf(\"reserved key was not removed in conversion\")))"
  },
  {
    "id" : "c7dccdd2-ff30-4865-a658-91c3d8337644",
    "prId" : 96440,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96440#pullrequestreview-529465516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40c36db-7b54-45f1-9a2c-96924fabc92a",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I never really understood why we check the gate in validation. I see three possible scenarios here:\r\n1. the gate was on and we didn't drop it in strategy -- no need to check `allowNodeName` here since strategy allowed the field to be non-nil.\r\n2. the gate is off and the field was dropped -- this check would be skipped since it's nil\r\n3. the gate is off and on roll back a resource has the field set -- this is identical to 1. in terms of validation logic.",
        "createdAt" : "2020-11-12T02:22:37Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "8096609e-6049-4fd1-b224-8aea2d68c7bf",
        "parentId" : "a40c36db-7b54-45f1-9a2c-96924fabc92a",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Yeah I'm not sure if this really has any value since the strategy should cover everything. I have seen this pattern in a number of validation files though, so I'd lean towards leaving it in just in case we're missing anything.",
        "createdAt" : "2020-11-12T02:28:23Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "76ba1e9c-bad0-42fa-8624-3062a690464e",
        "parentId" : "a40c36db-7b54-45f1-9a2c-96924fabc92a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should not be checking gates except rare cases",
        "createdAt" : "2020-11-12T19:26:35Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1684a290-86fb-40bd-b5c8-ed957186e69c",
        "parentId" : "a40c36db-7b54-45f1-9a2c-96924fabc92a",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Removed, thanks!",
        "createdAt" : "2020-11-12T20:21:04Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e4b30a3e9076312e3bb6953f1000aaaae20056",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +104,108 @@\t\t}\n\n\t\tif endpoint.NodeName != nil {\n\t\t\tnnPath := idxPath.Child(\"nodeName\")\n\t\t\tfor _, msg := range apivalidation.ValidateNodeName(*endpoint.NodeName, false) {"
  },
  {
    "id" : "1806159b-5d10-4401-b2d1-7bdd3bd15aa5",
    "prId" : 84971,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84971#pullrequestreview-315710499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b014101-137a-4760-b0be-61cb69ca0d06",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "nit: This function could be in-lined here, now.\r\n",
        "createdAt" : "2019-11-12T17:27:22Z",
        "updatedAt" : "2019-11-12T17:29:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fa9981e0106d7f0d6f9c88fc49d4cdf779c95c1",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +56,60 @@func ValidateEndpointSlice(endpointSlice *discovery.EndpointSlice, validAddressTypes sets.String) field.ErrorList {\n\tallErrs := apivalidation.ValidateObjectMeta(&endpointSlice.ObjectMeta, true, ValidateEndpointSliceName, field.NewPath(\"metadata\"))\n\tallErrs = append(allErrs, validateAddressType(endpointSlice.AddressType, validAddressTypes)...)\n\tallErrs = append(allErrs, validateEndpoints(endpointSlice.Endpoints, endpointSlice.AddressType, field.NewPath(\"endpoints\"))...)\n\tallErrs = append(allErrs, validatePorts(endpointSlice.Ports, field.NewPath(\"ports\"))...)"
  },
  {
    "id" : "ee69f9dc-1f56-46d8-a3e8-aae35448e6fb",
    "prId" : 84091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84091#pullrequestreview-306829727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "my reading of the caller is that it'd be possible to get here with an addrType of \"\", which sidesteps all this checking -- should probably either test or fix that.",
        "createdAt" : "2019-10-23T19:05:33Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c119b112-c263-4aaa-a9e4-12a953377704",
        "parentId" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "We do have defaulting in place here that should default this to IP as an address type when it isn't specified. Above this we also have validation that ensures that the `addressType` is one of the `supportedAddressTypes`. So as long as every entry in `supportedAddressTypes` is also covered here, we should be covered. Though of course this could all change if it makes sense to make this validation less restrictive to simplify supporting additional address types in the future.",
        "createdAt" : "2019-10-23T22:00:17Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "11b62767-9044-4f1d-b672-536463483ecb",
        "parentId" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "https://github.com/kubernetes/kubernetes/pull/84091/files#diff-d3dbc1e6a66cbe3fe6f1a843d112b96dL48-L50\r\n\r\nI assume defaulting causes you to never take the first branch in the if statement, but if we're so confident in that, why would we even have it?",
        "createdAt" : "2019-10-23T22:22:17Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5df5bc7b-f667-4bf1-b7ff-2f2d1899ce92",
        "parentId" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Yep, you're completely right. It just felt wrong to leave that unguarded without a nil check, but it is unnecessary so I've removed it.",
        "createdAt" : "2019-10-24T00:02:29Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "e3ddb5a4-4203-45f4-a7ad-170e3d477562",
        "parentId" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, that feels pretty weird, I'd actually recommend keeping the nil check (and just setting addrType to something valid if it fails).",
        "createdAt" : "2019-10-24T19:44:45Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cdb34a14-cf48-4d71-9af6-bd6e6269cee6",
        "parentId" : "3a572e4b-fa83-413a-9a6d-b81cd3163ee1",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Sounds good. I've added the nil check back and added a comment with it to indicate that a default value should have already been set at that point. ",
        "createdAt" : "2019-10-24T20:02:27Z",
        "updatedAt" : "2019-10-24T20:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d410bd28c371fbb8c9b07feb8c4bc1fef018173f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +93,97 @@\n\t\tfor i, address := range endpoint.Addresses {\n\t\t\tswitch addrType {\n\t\t\tcase discovery.AddressTypeIP:\n\t\t\t\tfor _, msg := range validation.IsValidIP(address) {"
  },
  {
    "id" : "cb71b6ff-8a3b-44d1-9ca9-5578b54547d1",
    "prId" : 80766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80766#pullrequestreview-274576365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bb355e1-3d41-4913-b2cc-1f008d191744",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "} else if *endpointSlice.TargetType != discovery.IPTargetType {",
        "createdAt" : "2019-08-13T23:12:20Z",
        "updatedAt" : "2019-08-26T21:50:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80cee928040ad458fbced70392063e0a5d160e5",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\t} else {\n\t\taddrType = *endpointSlice.AddressType\n\t}\n\n\tif endpointSlice.AddressType != nil && !supportedAddressTypes.Has(string(*endpointSlice.AddressType)) {"
  },
  {
    "id" : "7d1f9025-6bbe-4491-86c6-84d50d9813fb",
    "prId" : 80766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80766#pullrequestreview-274576365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aca0b195-1f9a-4380-8be5-9a35e78f2617",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "first check if nil - if not, field.Required()",
        "createdAt" : "2019-08-13T23:24:28Z",
        "updatedAt" : "2019-08-26T21:50:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80cee928040ad458fbced70392063e0a5d160e5",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +121,125 @@\tfor i, endpointPort := range endpointPorts {\n\t\tidxPath := fldPath.Index(i)\n\n\t\tif len(*endpointPort.Name) > 0 {\n\t\t\tfor _, msg := range validation.IsValidPortName(*endpointPort.Name) {"
  },
  {
    "id" : "4c40dfda-1039-422a-b5f8-02aca9710edf",
    "prId" : 80766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80766#pullrequestreview-274576365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de52e691-b5e5-49d2-ad98-30f6ef53efee",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "validate every target against targetType - parse it as an IP and check for nil",
        "createdAt" : "2019-08-13T23:38:26Z",
        "updatedAt" : "2019-08-26T21:50:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80cee928040ad458fbced70392063e0a5d160e5",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@\t\t\t}\n\t\t}\n\t}\n\n\treturn allErrs"
  },
  {
    "id" : "0ccc675b-c2f8-4507-bd3d-fa434712e015",
    "prId" : 80766,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80766#pullrequestreview-275510940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f414a342-5d53-4773-ba3f-8b809d238880",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "validate hostname\r\n\r\nvalidate topology",
        "createdAt" : "2019-08-15T16:55:58Z",
        "updatedAt" : "2019-08-26T21:50:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80cee928040ad458fbced70392063e0a5d160e5",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\t\t\t\tallErrs = append(allErrs, field.Invalid(addressPath.Index(i), address, msg))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n"
  }
]