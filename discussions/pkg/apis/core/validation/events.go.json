[
  {
    "id" : "6af2175d-e32a-48da-8154-324a0d5c3539",
    "prId" : 91645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91645#pullrequestreview-439283143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b117ca36-94ad-49e8-b658-3feb82cecea8",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you maybe order it the same way as the fields are ordered in the types.go ?\r\n\r\nIt will make it easier to check if we didn't miss anything.",
        "createdAt" : "2020-06-29T06:15:59Z",
        "updatedAt" : "2020-07-01T14:50:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c7ea75c3-6681-408d-b6e5-f3fc3b4266c1",
        "parentId" : "b117ca36-94ad-49e8-b658-3feb82cecea8",
        "authorId" : "781e3c0d-abea-40c3-b85c-b2e6c69c0f1b",
        "body" : "They were ordered in the same way they appear in types.go. I've checked that other than metadata, all remaining fields were validated.",
        "createdAt" : "2020-06-29T15:54:07Z",
        "updatedAt" : "2020-07-01T14:50:59Z",
        "lastEditedBy" : "781e3c0d-abea-40c3-b85c-b2e6c69c0f1b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c90330d8f4ca9fd980df24044960a4d8bb28a780",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +87,91 @@\t}\n\n\tallErrs = append(allErrs, ValidateImmutableField(newEvent.InvolvedObject, oldEvent.InvolvedObject, field.NewPath(\"involvedObject\"))...)\n\tallErrs = append(allErrs, ValidateImmutableField(newEvent.Reason, oldEvent.Reason, field.NewPath(\"reason\"))...)\n\tallErrs = append(allErrs, ValidateImmutableField(newEvent.Message, oldEvent.Message, field.NewPath(\"message\"))...)"
  },
  {
    "id" : "41e934bb-292b-4910-9fd0-72ee85f12df5",
    "prId" : 49112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49112#pullrequestreview-78379246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc9ea8c3-84e8-46d8-92e9-c1a722311a84",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is it intentional to drop `&& event.Namespace != metav1.NamespaceNone`?",
        "createdAt" : "2017-11-21T22:38:57Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0c4875d4-dcba-4070-a541-9459df1beb98",
        "parentId" : "dc9ea8c3-84e8-46d8-92e9-c1a722311a84",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yup. Instead of non-namespaced Events system ones will be in NamespaceSystem.",
        "createdAt" : "2017-11-22T09:28:29Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef6f0b8c6e73fb8167e5debf7641f30a62c4e30c",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +59,63 @@\n\t} else {\n\t\tif len(event.InvolvedObject.Namespace) == 0 && event.Namespace != metav1.NamespaceSystem {\n\t\t\tallErrs = append(allErrs, field.Invalid(field.NewPath(\"involvedObject\", \"namespace\"), event.InvolvedObject.Namespace, \"does not match event.namespace\"))\n\t\t}"
  },
  {
    "id" : "d7098e81-d3d2-49f7-89db-1d697914d8cf",
    "prId" : 49112,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49112#pullrequestreview-78378827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72e8bfc4-40b7-4c39-9bd8-655ee2ded242",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I'm curious who's enforcing that if it's not the validation layer?",
        "createdAt" : "2017-11-21T22:42:02Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5fabae0e-2a38-4805-ac63-01c40a6e0009",
        "parentId" : "72e8bfc4-40b7-4c39-9bd8-655ee2ded242",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "We can't enforce it here, as validation is done on internal representation and we need to support both kinds of Events. Client library will do this, and documentation will explain this.",
        "createdAt" : "2017-11-22T09:27:02Z",
        "updatedAt" : "2017-11-22T18:52:01Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef6f0b8c6e73fb8167e5debf7641f30a62c4e30c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +43,47 @@\tzeroTime := time.Time{}\n\n\t// \"New\" Events need to have EventTime set, so it's validating old object.\n\tif event.EventTime.Time == zeroTime {\n\t\t// Make sure event.Namespace and the involvedInvolvedObject.Namespace agree"
  }
]