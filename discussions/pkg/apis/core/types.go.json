[
  {
    "id" : "4815502e-a3a0-4168-8c72-dd1a5dd4ab84",
    "prId" : 103276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103276#pullrequestreview-698485418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f619a80-006d-4294-9dda-a548800c1875",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think you need to explain the special relationship to the DataSource field",
        "createdAt" : "2021-07-02T20:35:34Z",
        "updatedAt" : "2021-07-02T20:55:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "00dba76918e8ce5b5cff6719bbd64c2cd38ad4e2",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +462,466 @@\t// When this field is specified, volume binding will only succeed if the type of\n\t// the specified object matches some installed volume populator or dynamic\n\t// provisioner.\n\t// This field will replace the functionality of the DataSource field and as such\n\t// if both fields are non-empty, they must have the same value. For backwards"
  },
  {
    "id" : "93585378-a7e2-4d86-a7f4-3531c46b95a1",
    "prId" : 102028,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102028#pullrequestreview-687575117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b267bc98-3f29-40e4-8b1a-4188d241a483",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "With the new restrictions, IMO a comment here should mention that this mode cannot be used with any other mode.",
        "createdAt" : "2021-06-18T12:21:21Z",
        "updatedAt" : "2021-06-18T12:21:21Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "f1631089-3935-4abe-93b4-1d3b1cdd8841",
        "parentId" : "b267bc98-3f29-40e4-8b1a-4188d241a483",
        "authorId" : "ffc1d568-c5ed-4932-82f4-3ae9d3bee69a",
        "body" : "Done, added `// cannot be used in combination with other access modes`",
        "createdAt" : "2021-06-18T16:30:03Z",
        "updatedAt" : "2021-06-18T16:30:03Z",
        "lastEditedBy" : "ffc1d568-c5ed-4932-82f4-3ae9d3bee69a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7d732d3d6f0f41f2962c674d8cccd92bf5845a9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +512,516 @@\t// can be mounted in read/write mode to many hosts\n\tReadWriteMany PersistentVolumeAccessMode = \"ReadWriteMany\"\n\t// can be mounted read/write mode to exactly 1 pod\n\t// cannot be used in combination with other access modes\n\tReadWriteOncePod PersistentVolumeAccessMode = \"ReadWriteOncePod\""
  },
  {
    "id" : "a8ab4ff6-f404-4757-9e53-8622c90138d3",
    "prId" : 99576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99576#pullrequestreview-605506882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc26fd0c-3860-4e36-9c5a-7199a0538dd3",
        "parentId" : null,
        "authorId" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "body" : "I will update this comment to reflect how we will fail validation if flag is used by future is not set (like below)",
        "createdAt" : "2021-03-05T18:48:00Z",
        "updatedAt" : "2021-05-04T23:16:43Z",
        "lastEditedBy" : "3966b9fe-a8de-4641-9e7e-947bf0585613",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae424160bde1a2db4be91c002944d8a3e2165a0e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5354,5358 @@\n\t// HostProcess determines if a container should be run as a 'Host Process' container.\n\t// This field is alpha-level and will only be honored by components that enable the\n\t// WindowsHostProcessContainers feature flag. Setting this field without the feature\n\t// flag will result in errors when validating the Pod. All of a Pod's containers must"
  },
  {
    "id" : "f49d5172-2bec-4ab8-a3b2-eda1c8004acf",
    "prId" : 98582,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98582#pullrequestreview-591481046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d07703-c85f-48ec-bfa5-97eb74e1d649",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if `namespaces` is null/empty, and `namespaceSelector` is set, is the current namespace included?\r\n\r\nis it possible to express both of these:\r\n* \"this pod's namespace and the namespaces selected by namespaceSelector\"\r\n* \"not this pod's namespace, only the namespaces selected by namespaceSelector\"",
        "createdAt" : "2021-02-16T15:37:48Z",
        "updatedAt" : "2021-03-04T03:53:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7ca67df7-43a8-4516-ac1d-7c0616f4a576",
        "parentId" : "c0d07703-c85f-48ec-bfa5-97eb74e1d649",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> if namespaces is null/empty, and namespaceSelector is set, is the current namespace included?\r\n\r\nno, unless it is explicitly in namespaces or selected by namespaceSelector. This was the existing behavior with namespaces, and I just continued that with namespaceSelector.\r\n\r\n> \"this pod's namespace and the namespaces selected by namespaceSelector\"\r\n\r\nThe pod's namespace must be in the namespaces selected by the selector, or can be added explicitly to `namespaces`.\r\n\r\n> \"not this pod's namespace, only the namespaces selected by namespaceSelector\"\r\n\r\nYes if the namespaceSelector doesn't select the pod's namespace",
        "createdAt" : "2021-02-16T17:53:03Z",
        "updatedAt" : "2021-03-04T03:53:09Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c5f018f8e73bd6b1d84529cda06f6c3c204d274",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2556,2560 @@\t// namespaces specifies a static list of namespace names that the term applies to.\n\t// The term is applied to the union of the namespaces listed in this field\n\t// and the ones selected by namespaceSelector.\n\t// null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"\n\t// +optional"
  },
  {
    "id" : "bd629922-7760-403e-bdbe-df3445dde74c",
    "prId" : 98277,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98277#pullrequestreview-584910521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3676eb49-926c-42ea-b3e7-6a9f4b74b6bb",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What happens if this is modified?  Are controllers expected to manifest that change or is it ignored after create?  I know the KEP debated \"immutable\" - it's not impossible to be semi-immutable (can only be set when initially setting type=LB) but maybe it's useful for this to be mutable?\r\n\r\nEither way we need to decide and document it.,",
        "createdAt" : "2021-02-05T16:44:32Z",
        "updatedAt" : "2021-03-05T01:12:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5f7a3202-8916-42f9-bc88-6fad6fc23a5d",
        "parentId" : "3676eb49-926c-42ea-b3e7-6a9f4b74b6bb",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "ack to have better documentation here \r\n\r\nI'm in favor of having this be immutable as long as the type is LoadBalancer. ",
        "createdAt" : "2021-02-06T18:57:12Z",
        "updatedAt" : "2021-03-05T01:12:13Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "152a6145-8e90-4e3b-9c93-9dc8291141a5",
        "parentId" : "3676eb49-926c-42ea-b3e7-6a9f4b74b6bb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That sounds easiest.",
        "createdAt" : "2021-02-06T19:31:37Z",
        "updatedAt" : "2021-03-05T01:12:13Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da0b1bb06607f3f3e067f1bb5ce329ec861e1b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3737,3741 @@\t// but should apply for any default implementation. If set, it is assumed that a load balancer\n\t// implementation is watching for Services with a matching class. Any default load balancer\n\t// implementation (e.g. cloud providers) should ignore Services that set this field.\n\t// This field can only be set when creating or updating a Service to type 'LoadBalancer'.\n\t// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type."
  },
  {
    "id" : "b287459f-ef57-4a33-add4-4915dfe51f54",
    "prId" : 96600,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96600#pullrequestreview-605681601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfab5f2c-0838-4adf-b71e-5131f93f771f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "`The default value is \"Cluster\".`",
        "createdAt" : "2021-03-05T23:13:26Z",
        "updatedAt" : "2021-03-08T16:43:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "81df48b4-9bc3-447b-89e9-61cbbf885b94",
        "parentId" : "bfab5f2c-0838-4adf-b71e-5131f93f771f",
        "authorId" : "a2e00680-b383-4471-a78c-45fa5811f18b",
        "body" : "updated",
        "createdAt" : "2021-03-05T23:24:07Z",
        "updatedAt" : "2021-03-08T16:43:23Z",
        "lastEditedBy" : "a2e00680-b383-4471-a78c-45fa5811f18b",
        "tags" : [
        ]
      }
    ],
    "commit" : "62804c1ae8762938e4f708f3d6e0408aa47d7020",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +3761,3765 @@\t// \"Cluster\" routes internal traffic to a Service to all endpoints.\n\t// \"Local\" routes traffic to node-local endpoints only, traffic is\n\t// dropped if no node-local endpoints are ready.\n\t// The default value is \"Cluster\".\n\t// +featureGate=ServiceInternalTrafficPolicy"
  },
  {
    "id" : "eae24311-c8e3-46a8-9451-ab8670969cb4",
    "prId" : 96528,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96528#pullrequestreview-578756450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "should we just deprecate this now to start the clock?",
        "createdAt" : "2020-11-12T19:39:35Z",
        "updatedAt" : "2020-11-12T19:39:35Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "9fd8dad9-bd65-400b-89ae-c6d75083ace6",
        "parentId" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yes, I don't see why not",
        "createdAt" : "2020-11-12T21:43:26Z",
        "updatedAt" : "2020-11-12T21:43:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f97e6421-d79c-4b27-a89d-d827357b9ce8",
        "parentId" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "authorId" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "body" : "Why should this be deprecated ? Is ServiceTopology feature not being used anymore ?",
        "createdAt" : "2021-01-26T22:36:15Z",
        "updatedAt" : "2021-01-26T22:36:44Z",
        "lastEditedBy" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "tags" : [
        ]
      },
      {
        "id" : "41b37b70-1575-4f9b-bbcb-cb6ef428ab15",
        "parentId" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yes.  It was an alpha design that we decided there are better answers to.  SO we are deprecating the API for it and will eventually remove it.",
        "createdAt" : "2021-01-27T00:06:16Z",
        "updatedAt" : "2021-01-27T00:06:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ab01b719-6c58-4ef8-87ee-309cac214ff5",
        "parentId" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "authorId" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "body" : "Can you suggest some alternatives to achieve the same effect ? Basically to preferentially route traffic based on the cluster topology ?",
        "createdAt" : "2021-01-27T04:09:13Z",
        "updatedAt" : "2021-01-27T04:09:13Z",
        "lastEditedBy" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "tags" : [
        ]
      },
      {
        "id" : "d0c60886-d243-419f-a312-473f9d16bae4",
        "parentId" : "b1ef9cbe-6051-40cd-ae18-cf9ca7a9816f",
        "authorId" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "body" : "For posterity, this is being built into kube-proxy as [Topology Aware proxying](https://github.com/kubernetes/enhancements/issues/2030#issuecomment-701056673)",
        "createdAt" : "2021-01-28T21:29:51Z",
        "updatedAt" : "2021-01-28T21:29:51Z",
        "lastEditedBy" : "0945c938-19c1-44ae-81ca-cc87101e5c5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "08774ecc747e84149eedbdb0f9b82e95ecbd85c7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3711,3715 @@\t// value, if used, only makes sense as the last value in the list.\n\t// If this is not specified or empty, no topology constraints will be applied.\n\t// This field is alpha-level and is only honored by servers that enable the ServiceTopology feature.\n\t// +optional\n\tTopologyKeys []string"
  },
  {
    "id" : "349f8516-1d5b-4d0c-b961-29209ab9c27d",
    "prId" : 95768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95768#pullrequestreview-534999466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65b6a703-ae26-4930-ada0-c8800a7d6ae7",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "there are a lot of implementation details here, can we make it more abstract?\r\n\"External IPs are not necessarily assigned to nodes, unlike InternalPs, making them less efficient for node-to-node traffic than a NodeInternalIP.\"",
        "createdAt" : "2020-11-10T09:28:33Z",
        "updatedAt" : "2021-04-13T17:58:06Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "cd147d3f-b162-4182-bada-273229c668b6",
        "parentId" : "65b6a703-ae26-4930-ada0-c8800a7d6ae7",
        "authorId" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "body" : "+1, but \"External IPs are not necessarily  _directly_ assigned to nodes ...\"  (or perhaps use \"configured\" rather than \"assigned\")\r\nI think ExternalIPs still need to be unique, and \"not necessarily assigned\" could be misinterpreted to suggest otherwise.",
        "createdAt" : "2020-11-20T01:02:09Z",
        "updatedAt" : "2021-04-13T17:58:06Z",
        "lastEditedBy" : "58cf89ce-9cc3-4dce-b99b-49ae3682cc9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4272ac92a761cdd36b5c4c598d34fb965ad79f70",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +4282,4286 @@\t// NodeInternalIP, or alternatively, packets sent to the external IP may be NAT'ed\n\t// to an internal node IP rather than being delivered directly (making the IP less\n\t// efficient for node-to-node traffic than a NodeInternalIP).\n\tNodeExternalIP NodeAddressType = \"ExternalIP\"\n"
  },
  {
    "id" : "e3494408-b2d5-4ff9-ba1d-e6fdda5d4a24",
    "prId" : 95768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95768#pullrequestreview-649396922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8713d8ad-ae44-4e0a-9a0c-cc8698f87a50",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Non-blocking comment: we probably want to mention here that this usually matches the hostname according to the OS, although it's not strictly required. ",
        "createdAt" : "2021-04-27T16:54:57Z",
        "updatedAt" : "2021-04-27T16:54:58Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0e232fc4-a56c-4799-b408-149acbf20d1c",
        "parentId" : "8713d8ad-ae44-4e0a-9a0c-cc8698f87a50",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Per https://github.com/kubernetes/kubernetes/pull/95768#discussion_r612656206 I don't think that's true",
        "createdAt" : "2021-04-30T16:36:54Z",
        "updatedAt" : "2021-04-30T16:36:54Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "dbb42f24-a345-434d-9ff2-67f1e6089920",
        "parentId" : "8713d8ad-ae44-4e0a-9a0c-cc8698f87a50",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I did say \"usually\" ;) \"primary DNS name\" and \"hostname\" is typically the same from my experience",
        "createdAt" : "2021-04-30T16:41:09Z",
        "updatedAt" : "2021-04-30T16:41:09Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "4272ac92a761cdd36b5c4c598d34fb965ad79f70",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4258,4262 @@\t// NodeHostName identifies a name of the node. Although every node can be assumed\n\t// to have a NodeAddress of this type, its exact syntax and semantics are not\n\t// defined, and are not consistent between different clusters.\n\tNodeHostName NodeAddressType = \"Hostname\"\n"
  },
  {
    "id" : "4afa839c-c42c-4eeb-8c44-cd6ab802dd5b",
    "prId" : 95768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95768#pullrequestreview-656395936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f15658f-83e7-466b-8028-c284fa385a96",
        "parentId" : null,
        "authorId" : "0c5a8fe3-d7c6-4fc1-9a85-a0a659bef1d4",
        "body" : "I believe we're also asserting that any Pod can at least _unambigously identify_ an NodeInternalIP address as an internal IP, even if the Pod may be prevented from sending traffic to / from that internal Node IP.\r\n\r\nDoes that sound right?\r\n\r\nFor example, if I'm running as a Pod `foo` in some namespace in the cluster and I learn that 10.42.0.1 is a node IP address, that doesn't ever conflict with the IP address for a Service, another Pod, the API server, etc. I can recognise that a connection from 10.42.0.1 could only have originated from that node (maybe it is performing a TCP health check as I am executing on that particular node).",
        "createdAt" : "2021-05-10T13:55:45Z",
        "updatedAt" : "2021-05-10T13:55:45Z",
        "lastEditedBy" : "0c5a8fe3-d7c6-4fc1-9a85-a0a659bef1d4",
        "tags" : [
        ]
      },
      {
        "id" : "fcfce949-5cee-4cb2-9cac-cc417b3432ea",
        "parentId" : "0f15658f-83e7-466b-8028-c284fa385a96",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : ">I can recognise that a connection from 10.42.0.1 could only have originated from that node (maybe it is performing a TCP health check as I am executing on that particular node).\r\n\r\nI think this gets tricky given some edge scenarios regarding SNAT",
        "createdAt" : "2021-05-10T15:32:18Z",
        "updatedAt" : "2021-05-10T15:32:18Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "ff7823ab-25bb-4106-adbb-846b1e75fc14",
        "parentId" : "0f15658f-83e7-466b-8028-c284fa385a96",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "pods with hostNetwork will use NodeIPs",
        "createdAt" : "2021-05-11T07:57:01Z",
        "updatedAt" : "2021-05-11T07:57:02Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "4272ac92a761cdd36b5c4c598d34fb965ad79f70",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +4267,4271 @@\t// may not be visible to hosts outside the cluster. By default it is assumed that\n\t// kube-apiserver can reach node internal IPs, though it is possible to configure\n\t// clusters where this is not the case.\n\t//\n\t// NodeInternalIP is the default type of node IP, and does not necessarily imply"
  },
  {
    "id" : "1d6366b5-dea5-4e98-be46-77fc8339d2bc",
    "prId" : 95718,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95718#pullrequestreview-515202335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "680d5e6c-63af-40e9-bc5f-1619db586340",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "KEP moved as it was converted to the new format with the `kep.yaml` file. Are there more referecnes outside of this repo that we would not want to break? I can restore the file in enhancement repository with the redirect to the new README.",
        "createdAt" : "2020-10-23T00:14:45Z",
        "updatedAt" : "2020-11-11T19:22:53Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "06da0e5e74a99d5c6c2f4e120b2cd0c2c6f3caf4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2824,2828 @@\t// If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\n\t// empty definition that uses the default runtime handler.\n\t// More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class/README.md\n\t// +optional\n\tRuntimeClassName *string"
  },
  {
    "id" : "b25d889a-4ef7-45e2-af0b-a232daf3d210",
    "prId" : 95282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95282#pullrequestreview-521163818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da662b45-f09b-4c97-8935-2f254337b8d6",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "L456 below: do we report an event if the data source is not supported? Can we remove that last sentence about future provisioner behavior changes?",
        "createdAt" : "2020-10-31T00:44:51Z",
        "updatedAt" : "2020-11-03T03:14:51Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "89f17a66-1c62-4983-9a9a-b776f4fb17af",
        "parentId" : "da662b45-f09b-4c97-8935-2f254337b8d6",
        "authorId" : "275dd783-53c3-4fed-8434-96ed6a2e0331",
        "body" : "Removed the last sentence about future changes.  I also removed the sentence about reporting an event.  For AnyVolumeDataSource, the external-provisioner will let the external data populator to handle the volume provisioning so it will not report an event about the failure.  We are still working on the design of a data populator implementation so I'm not sure if we can put anything more specific here.",
        "createdAt" : "2020-10-31T19:34:29Z",
        "updatedAt" : "2020-11-03T03:14:51Z",
        "lastEditedBy" : "275dd783-53c3-4fed-8434-96ed6a2e0331",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0eaee34942375d84d19fddf5c2ab3e9ed949460",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +451,455 @@\t// In order to use custom resource types that implement data population,\n\t// the AnyVolumeDataSource feature gate must be enabled.\n\t// If the provisioner or an external controller can support the specified data source,\n\t// it will create a new volume based on the contents of the specified data source.\n\t// +optional"
  },
  {
    "id" : "4dde187a-1a74-4c48-97e9-2fdd22ae34d7",
    "prId" : 94028,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94028#pullrequestreview-522875676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b25ce16e-70b2-4a18-a240-e45d0421fe3c",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will this default to TCP like other instances of Protocol or is it just required?  Given that this is not a user-oriented API it's fine to not default (I just wanted to ask)",
        "createdAt" : "2020-11-02T17:21:26Z",
        "updatedAt" : "2020-11-13T17:53:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "401d6358-cc11-4445-8abb-d8638a53f617",
        "parentId" : "b25ce16e-70b2-4a18-a240-e45d0421fe3c",
        "authorId" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "body" : "It is just required. Actually, I have not thought about defining a default value for it.",
        "createdAt" : "2020-11-03T21:09:06Z",
        "updatedAt" : "2020-11-13T17:53:22Z",
        "lastEditedBy" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "382f6f588f3392e475e0a72825989c2c6f257965",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +5426,5430 @@\tPort int32\n\t// Protocol is the protocol of the service port of which status is recorded here\n\tProtocol Protocol\n\t// Error is to record the problem with the service port\n\t// The format of the error shall comply with the following rules:"
  },
  {
    "id" : "ad83c65e-3488-46e8-a39a-ccb864599438",
    "prId" : 94028,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94028#pullrequestreview-522876428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e56654e-25d3-40f1-8235-022bb21f5b7d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will we validate that this list is identical to service ports? That seems problematic for edits to spec.Ports, where thi would not be in sync.  Maybe change \"must\" to \"should\" in the above?",
        "createdAt" : "2020-11-02T17:25:29Z",
        "updatedAt" : "2020-11-13T17:53:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "824550c3-fac7-4ab7-ba00-b71d12e5ef13",
        "parentId" : "9e56654e-25d3-40f1-8235-022bb21f5b7d",
        "authorId" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "body" : "No, I have not planned validation this far. I changed it to \"should\".",
        "createdAt" : "2020-11-03T21:10:20Z",
        "updatedAt" : "2020-11-13T17:53:22Z",
        "lastEditedBy" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "382f6f588f3392e475e0a72825989c2c6f257965",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +3519,3523 @@\t// If used, every port defined in the service should have an entry in it\n\t// +optional\n\tPorts []PortStatus\n}\n"
  },
  {
    "id" : "97a076da-6652-4f0e-bf37-ac42276f1d15",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-458430112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "688ad86a-4c86-4bda-9170-e2a659ae364a",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "+optional here too ",
        "createdAt" : "2020-07-30T14:03:00Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3696,3700 @@\t// allocateLoadBalancerNodePorts defines if NodePorts will be automatically\n\t// allocated for services with type LoadBalancer.  Default is \"true\". It may be\n\t// set to \"false\" if the cluster load-balancer does not rely on NodePorts.\n\t// allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer\n\t// and will be cleared if the type is changed to any other type."
  },
  {
    "id" : "d7ea370d-0994-4004-8cbf-937575b8e46d",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-523587762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e73539c-4370-45ff-aa8b-8db8685ad056",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should also spec that it must be unset when type is anything but LoadBalancer, and will be wiped when changing from LoadBalancer to any other type.  You can see similar comments on ClusterIP, IPFamilyPolicy, etc (but you'll have to rebase :) ",
        "createdAt" : "2020-11-04T17:35:24Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3696,3700 @@\t// allocateLoadBalancerNodePorts defines if NodePorts will be automatically\n\t// allocated for services with type LoadBalancer.  Default is \"true\". It may be\n\t// set to \"false\" if the cluster load-balancer does not rely on NodePorts.\n\t// allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer\n\t// and will be cleared if the type is changed to any other type."
  },
  {
    "id" : "9b68329f-bd2e-4088-8948-f82ac9f3b70a",
    "prId" : 92312,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92312#pullrequestreview-523675592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "718525a0-1e48-4633-aa5e-812e1cff4659",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This needs to document that it is only meaningful when the IP field is set.  This raises the question of what we should do if it is set but IP is not set?\r\n\r\nE.g.\r\n\r\nset `ip: 1.2.3.4; ipMode: VIP`, then patch `ip: null; hostname: foobar.com`.  That patch will leave the mode field.  Should we a) clear it; b) throw and error; c) leave it?\r\n\r\nThis is analogous to NodePort, which does (b) and is a huge pain in the ass for many users.\r\n\r\n@liggitt @lavalamp for opinion :)",
        "createdAt" : "2020-06-23T23:47:54Z",
        "updatedAt" : "2020-11-07T10:46:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e291f74e-4164-4dc2-9102-dfafadd7f8de",
        "parentId" : "718525a0-1e48-4633-aa5e-812e1cff4659",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It sounds like you have a union / one of structure. It's best to group fields in substructures, having them all loose is very confusing.\r\n\r\nI think throwing an error is the best thing to do now. When we implement union / one of, we will likely have a better answer.",
        "createdAt" : "2020-06-24T22:59:00Z",
        "updatedAt" : "2020-11-07T10:46:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4b2ef549-c4bc-4a40-8bfc-9e7f59578ee6",
        "parentId" : "718525a0-1e48-4633-aa5e-812e1cff4659",
        "authorId" : "2c727fdb-29e7-42eb-9c57-a26df4cf39d5",
        "body" : "If we are throwing an error, it's weird to have a default right? \r\nIn thats case, we should either set the filed nullable (and treat the null value as the default VIP mode), or add a new `None` mode or something like that?",
        "createdAt" : "2020-08-25T08:38:09Z",
        "updatedAt" : "2020-11-07T10:46:52Z",
        "lastEditedBy" : "2c727fdb-29e7-42eb-9c57-a26df4cf39d5",
        "tags" : [
        ]
      },
      {
        "id" : "d0c8f265-ffd1-47af-94fd-003ca6f8daf8",
        "parentId" : "718525a0-1e48-4633-aa5e-812e1cff4659",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "See my comments on v1 types.go",
        "createdAt" : "2020-11-04T19:39:10Z",
        "updatedAt" : "2020-11-07T10:46:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd5646d56da62a0b930abefd86d142a2ca9404e8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3516,3520 @@\t// delivering traffic with the destination IP and port set to the node's IP and nodePort or to the pod's IP and targetPort.\n\t// This field can only be set when the ip field is also set, and defaults to \"VIP\" if not specified.\n\t// +optional\n\tIPMode *LoadBalancerIPMode\n}"
  },
  {
    "id" : "1cb27db2-d7d5-49c2-a787-c6822fe8f36b",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-425451842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42d9b1aa-8523-466f-8f91-f6162d6c7bea",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "~when we pluralize we keep the singular one, right?~\r\nforgive me, this is done in conversion :facepalm: ",
        "createdAt" : "2020-06-05T16:31:51Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +3600,3604 @@\t// first element of ClusterIPs.\n\t// +optional\n\tClusterIPs []string\n\n\t// IPFamilies identifies all the IPFamilies assigned for this Service. If a value"
  },
  {
    "id" : "60e65419-9ec8-4d5c-9fe8-eefe588195cd",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-449292906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d580928-08b2-46ce-97b4-aff9b3ba7a45",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "maybe move `MaxServiceTopologyKeys` out into a different `const` section?",
        "createdAt" : "2020-07-15T20:09:35Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3529,3533 @@// IPFamilyPolicyType represents the dual-stack-ness requested or required by a Service\ntype IPFamilyPolicyType string\n\nconst (\n\t// IPFamilyPolicySingleStack indicates that this service is required to have a single IPFamily."
  },
  {
    "id" : "b6109605-b4c2-4da3-8428-64478ea2a7ea",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-451053104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6389ffe-8a3c-4113-9e58-c2c3bf4011cf",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "hi !! Just starting too look at this ... So, is goal == > 2 IPs some day  @andrewsykim ?\r\nif *yes* so make that explicit  in the comments, otherwise id prefer (ClusterIP4, ClusterIP6) ? ",
        "createdAt" : "2020-07-17T14:39:26Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "3a98125f-4baa-4417-8b5f-c393edb02abb",
        "parentId" : "f6389ffe-8a3c-4113-9e58-c2c3bf4011cf",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "hmm, not sure i understand you. Can you please elaborate?",
        "createdAt" : "2020-07-17T16:20:47Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "1f475384-f2e4-485b-9903-8a7a65be2a51",
        "parentId" : "f6389ffe-8a3c-4113-9e58-c2c3bf4011cf",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "I don't think there was any plan to ever have more than 2 Cluster IPs (unlike with, say, PodIPs, where we did discuss that possibility), but from experience so far in porting stuff from single-stack to dual-stack, it generally ends up being easier to work with an array than with separate fields. ",
        "createdAt" : "2020-07-18T12:14:20Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +3595,3599 @@\t// service. ClusterIPs are assigned or reserved based on the values of\n\t// service.spec.ipFamilies. A maximum of two entries (dual-stack IPs) are\n\t// allowed in ClusterIPs. The IPFamily of each ClusterIP must match\n\t// values provided in service.spec.ipFamilies. Clients using ClusterIPs must\n\t// keep it in sync with ClusterIP (if provided) by having ClusterIP matching"
  },
  {
    "id" : "225f1e9a-3178-46ee-a469-6c7b9e0b5f5d",
    "prId" : 91381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91381#pullrequestreview-418113401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56a70dbb-bcb7-462c-9080-4589ca551f75",
        "parentId" : null,
        "authorId" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "body" : "Maybe you know this out of your mind, so allow me one question:\r\n\r\nDoes it work if the sandbox profile has higher restrictions than the container? For example:\r\n1. Pod sandbox runs on a seccomp profile which forbids `mkdir(2)`\r\n2. Container now runs on a different profile allowing `mkdir(2)`\r\n3. Executing `mkdir` will work inside the container",
        "createdAt" : "2020-05-25T08:01:49Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "tags" : [
        ]
      },
      {
        "id" : "bd46a7cf-8bb3-4dff-ae06-a2d18cf8717b",
        "parentId" : "56a70dbb-bcb7-462c-9080-4589ca551f75",
        "authorId" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "body" : "Verified that it works as intended by my own :heavy_check_mark: ",
        "createdAt" : "2020-05-26T09:13:19Z",
        "updatedAt" : "2020-07-06T08:14:05Z",
        "lastEditedBy" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "tags" : [
        ]
      }
    ],
    "commit" : "8976e3620f8963e72084971d9d4decbd026bf49f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +5118,5122 @@\t// override the pod options.\n\t// +optional\n\tSeccompProfile *SeccompProfile\n}\n"
  },
  {
    "id" : "f72c2976-3916-4261-ad20-87d0cd3e73c9",
    "prId" : 88636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88636#pullrequestreview-369155279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "510dbe08-b8aa-44f6-a3ea-902f80da342c",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Do we also need to talk about the cloning case?",
        "createdAt" : "2020-03-04T22:00:01Z",
        "updatedAt" : "2020-03-04T23:56:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8b09d36440b81fe913aa66f1709269858764349",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +422,426 @@\t// * An existing PVC (PersistentVolumeClaim)\n\t// * An existing custom resource/object that implements data population (Alpha)\n\t// In order to use VolumeSnapshot object types, the appropriate feature gate\n\t// must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource)\n\t// If the provisioner or an external controller can support the specified data source,"
  },
  {
    "id" : "cf608e91-ec1c-473e-a5e2-3cc67d306521",
    "prId" : 88636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88636#pullrequestreview-369180918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0231332-5429-4cbb-983c-0f92d9d5a97a",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "@j-griffith do you plan on updating alpha-beta designation for cloning in your PR?",
        "createdAt" : "2020-03-04T22:00:19Z",
        "updatedAt" : "2020-03-04T23:56:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "eae407dc-b676-417f-ae13-7754f45a637c",
        "parentId" : "b0231332-5429-4cbb-983c-0f92d9d5a97a",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I see cloning is GA now.",
        "createdAt" : "2020-03-04T22:47:12Z",
        "updatedAt" : "2020-03-04T23:56:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8b09d36440b81fe913aa66f1709269858764349",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +420,424 @@\t// This field can be used to specify either:\n\t// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta)\n\t// * An existing PVC (PersistentVolumeClaim)\n\t// * An existing custom resource/object that implements data population (Alpha)\n\t// In order to use VolumeSnapshot object types, the appropriate feature gate"
  },
  {
    "id" : "aca0f2c2-2f1f-4f85-809e-954a8579c41c",
    "prId" : 88488,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88488#pullrequestreview-365411169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b91b3930-f3a1-4abb-9f64-445d89de36bf",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Behavior of nil / unset should be documented.",
        "createdAt" : "2020-02-26T14:43:03Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "eeaa4247-23b5-4959-973b-1878a56c21d6",
        "parentId" : "b91b3930-f3a1-4abb-9f64-445d89de36bf",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "fixed",
        "createdAt" : "2020-02-27T04:41:35Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13295968757aad1d6908d38907e7ec4ebca6a21",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2887,2891 @@\t// Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".\n\t// +optional\n\tFSGroupChangePolicy *PodFSGroupChangePolicy\n\t// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\n\t// sysctls (by the container runtime) might fail to launch."
  },
  {
    "id" : "ba4707bc-7bea-44bd-b51d-b2731adc6ed0",
    "prId" : 88488,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88488#pullrequestreview-366598648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7c46afc-39cd-4fd4-b34e-234cd22986c5",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "we don't check permission match or not, only ownerhship here, right?",
        "createdAt" : "2020-02-28T17:52:27Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "9a0c47d3-ce65-484e-86d2-9e7005543b13",
        "parentId" : "f7c46afc-39cd-4fd4-b34e-234cd22986c5",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "no we check both. Not just permissions.",
        "createdAt" : "2020-02-28T18:29:37Z",
        "updatedAt" : "2020-03-05T13:01:00Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13295968757aad1d6908d38907e7ec4ebca6a21",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2792,2796 @@\t// FSGroupChangeOnRootMismatch indicates that volume's ownership and permissions will be changed\n\t// only when permission and ownership of root directory does not match with expected\n\t// permissions on the volume. This can help shorten the time it takes to change\n\t// ownership and permissions of a volume.\n\tFSGroupChangeOnRootMismatch PodFSGroupChangePolicy = \"OnRootMismatch\""
  },
  {
    "id" : "d77a96aa-1abb-484a-b28f-b16f5b002bc5",
    "prId" : 84051,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84051#pullrequestreview-303942236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da6aa7e5-7b55-46ca-b1c2-3907b4b81b6c",
        "parentId" : null,
        "authorId" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "body" : "`staging/src/k8s.io/api/core/v1/types.go` should also be updated.",
        "createdAt" : "2019-10-17T15:26:42Z",
        "updatedAt" : "2020-02-20T11:55:48Z",
        "lastEditedBy" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "tags" : [
        ]
      },
      {
        "id" : "a9f5e2ab-82c6-4120-9fdf-0df28f3f2afc",
        "parentId" : "da6aa7e5-7b55-46ca-b1c2-3907b4b81b6c",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "It is updated. See below.",
        "createdAt" : "2019-10-18T08:18:41Z",
        "updatedAt" : "2020-02-20T11:55:48Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      },
      {
        "id" : "1679c53a-cf9c-4882-89ef-308d94a369e9",
        "parentId" : "da6aa7e5-7b55-46ca-b1c2-3907b4b81b6c",
        "authorId" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "body" : "Ops, missed that... :sweat_smile: ",
        "createdAt" : "2019-10-18T14:48:15Z",
        "updatedAt" : "2020-02-20T11:55:48Z",
        "lastEditedBy" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "03ecc20b19972ecb4825ecf4ce6868bc2a45f3c0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +587,591 @@\tStorageMediumMemory          StorageMedium = \"Memory\"     // use memory (tmpfs)\n\tStorageMediumHugePages       StorageMedium = \"HugePages\"  // use hugepages\n\tStorageMediumHugePagesPrefix StorageMedium = \"HugePages-\" // prefix for full medium notation HugePages-<size>\n)\n"
  },
  {
    "id" : "1fa62621-2678-4944-992e-448529f562c8",
    "prId" : 84051,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84051#pullrequestreview-334103988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78887ad5-ae21-45cc-a570-b3fec5a6facc",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "since this is adding support for variable hugepage size volumes, we will hit an issue with apiserver and kubelet node skew that we would not have hit prior.  i think this should be gated by a new feature gate as a result.  Can we add a feature gate for \"HugePageStorageMediumSize\" that would gate persistence of HugePages-<size> medium?  We could then default the feature gate to on by default +2 releases from this release.  The concern is a pod spec using the field and landing on a kubelet that may not have enabled the feature gate to understand it.",
        "createdAt" : "2019-12-17T19:14:22Z",
        "updatedAt" : "2020-02-20T11:55:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "46b9cd46-dd33-4ea3-9588-a9f58554fae4",
        "parentId" : "78887ad5-ae21-45cc-a570-b3fec5a6facc",
        "authorId" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "body" : "@derekwaynecarr thank you for the review! I'll implement feature gate as you've suggested.\r\n\r\nBTW, would it make sense to move hugepage medium validation code from pkg/volume/emptydir/ to pkg/apis/core/validation/  to prevent scheduling pods with invalid hugepage medium (see details [here](https://github.com/kubernetes/kubernetes/pull/84051#discussion_r336060531))?",
        "createdAt" : "2019-12-18T16:34:08Z",
        "updatedAt" : "2020-02-20T11:55:48Z",
        "lastEditedBy" : "f46daf11-7000-4650-ae5b-dd25c29b4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "03ecc20b19972ecb4825ecf4ce6868bc2a45f3c0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +587,591 @@\tStorageMediumMemory          StorageMedium = \"Memory\"     // use memory (tmpfs)\n\tStorageMediumHugePages       StorageMedium = \"HugePages\"  // use hugepages\n\tStorageMediumHugePagesPrefix StorageMedium = \"HugePages-\" // prefix for full medium notation HugePages-<size>\n)\n"
  },
  {
    "id" : "548c84bb-d621-4298-8714-09f21569aed3",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-257133378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f252021-7a7a-4862-8369-6105c488e2d4",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "i am trying to remember what was the actual use case for the label selector ?",
        "createdAt" : "2019-05-07T06:45:41Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "fc4fff3a-1a02-4e8b-8975-d96a985308f5",
        "parentId" : "9f252021-7a7a-4862-8369-6105c488e2d4",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "Another way of asking this is why would this label selector be different then the deployments own label selector ? I see two scenarios:-\r\n1: i want to spread all pods of a workload controller (deployment, RS, statefulset). In this case we dont need a selector\r\n2: i want to spread all pods matching a label. This is more common in CRD controllers which deploy a pod and ditch the regular core controllers.\r\nI feel like we need a model where specifying this labelSelector for the first case should not be mandatory and should be derivable from the uber object . @Huang-Wei @bsalamat  wdyt ?",
        "createdAt" : "2019-05-31T07:09:34Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "37698840-5c77-4bb0-93d8-f32a404f08b4",
        "parentId" : "9f252021-7a7a-4862-8369-6105c488e2d4",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "A reasonable model is to not impose limitations in the beginning unless we have a strong reason (e.g. perf) to do that.",
        "createdAt" : "2019-05-31T16:55:26Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "113c30f3-5c77-4824-91d1-ef9394dd2f7e",
        "parentId" : "9f252021-7a7a-4862-8369-6105c488e2d4",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@Huang-Wei  we discussed this in one of our sig-scheduling meetings to deduce the labelselector from its owning Deployment if one is omitted from the topologySpreadConstraint . This would make it painless for majority of the users who just want to spread the pods of their Deployment /Statefulset and wont have to specify the LabelSelector. I can create a issue on this if you want or if you want to address as part of the other implementation PR's you have.",
        "createdAt" : "2019-07-02T20:32:18Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +4901,4905 @@\t// in their corresponding topology domain.\n\t// +optional\n\tLabelSelector *metav1.LabelSelector\n}"
  },
  {
    "id" : "ff645351-3ad2-4e0d-98c4-a4d9cf7760c3",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-234760207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "559aa325-0fff-4d89-8dc9-df3ee78bb78a",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "should we make it unsigned ?",
        "createdAt" : "2019-05-07T06:47:11Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "c685e3bc-322b-4c8e-b9a2-6dfe3853e1a4",
        "parentId" : "559aa325-0fff-4d89-8dc9-df3ee78bb78a",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I also thought of this `uint32`. But it seems we're not enforcing a rule - `DeploymentSpec.Replicas` is using `int32`.",
        "createdAt" : "2019-05-07T07:10:05Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "66cac824-1f43-4def-9fa6-b35ce33dc843",
        "parentId" : "559aa325-0fff-4d89-8dc9-df3ee78bb78a",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "any suggestions from @kubernetes/sig-api-machinery-api-reviews  ?",
        "createdAt" : "2019-05-07T21:02:45Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +4871,4875 @@\t// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.\n\t// It's a required field. Default value is 1 and 0 is not allowed.\n\tMaxSkew int32\n\t// TopologyKey is the key of node labels. Nodes that have a label with this key\n\t// and identical values are considered to be in the same topology."
  },
  {
    "id" : "54f89dda-9f20-4956-8a79-7a0be9907c03",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-239903459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5509c97e-3eed-4e16-901b-b56ef92c8df9",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "nit: replace `ought to` with `should be`",
        "createdAt" : "2019-05-21T04:41:00Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "14d9a738-b3b7-4d33-83bf-9e304770c3f5",
        "parentId" : "5509c97e-3eed-4e16-901b-b56ef92c8df9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The sentence is grammatical as written, please don't change.",
        "createdAt" : "2019-05-21T08:44:19Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2716,2720 @@\t// +optional\n\tEnableServiceLinks *bool\n\t// TopologySpreadConstraints describes how a group of pods ought to spread across topology\n\t// domains. Scheduler will schedule pods in a way which abides by the constraints.\n\t// This field is alpha-level and is only honored by clusters that enables the EvenPodsSpread"
  },
  {
    "id" : "a2e818a6-a5fb-4783-be7d-dcddf80800d2",
    "prId" : 77327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77327#pullrequestreview-257149963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd still love to see some discussion in the comments of how this affects the pod *after* it's been scheduled. E.g. does it affect podDisruptionBudget? (I assume not at the moment but will it ever?) Descheduler? Scale-down behavior?",
        "createdAt" : "2019-07-01T23:14:15Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c640206f-ffa5-4a3c-87eb-79af5c3a22c1",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "@lavalamp  We could add more information on how it could affect later scheduling related decisions. Particularly, autoscaler simulates whether a pod being removed from a node can be scheduled on another node during scale-down. This feature may prevent a pod from being scheduled on a different node/zone/etc if the scheduling of the pod breaks the balanced spreading. Therefore, it could prevent scale-down in certain scenarios. This is actually a positive benefit. I have already heard from some users that the autoscaler sometimes aggressively removes nodes in clusters, causing a few pods of a service to be scheduled on a single node. This could reduce availability/reliability of a service if the node with a few pods of the service goes down.\r\nThis exact topic came up in our SIG Scheduling F2F meeting at KubeCon where people asked for a \"required\" spreading feature in order to prevent autoscaler from removing nodes.\r\n\r\nAll being said, I believe the right place for providing such information about this feature is in its documents. We cannot put all the information in doscstring of the API fields.",
        "createdAt" : "2019-07-02T18:24:59Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "3b823bbe-4b52-4168-9064-03b79ea71352",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Once a pod gets scheduled, default scheduler won't touch it any more. This is aligned with our design rationale, as re-scheduling may cause service down time, so we usually suggest users use external tool like descheduler to balance exsiting workloads proactively.\r\n\r\npodDisruptionBudget is respected upon preemption, and that's covered in preeemption logic specifically.\r\n\r\nScale-down may be the real missing piece in this feature, at this moment we're relying on controller to take out excessive replicas, but it might not be optimal as controller doesn't have enough info to make that decision.",
        "createdAt" : "2019-07-02T18:30:27Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9a473137-74e7-420d-971b-2394034324c6",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think my main point here is that people reading these api comments will not only care about the scheduler, they will care about the entire lifecycle of their pods / services. I think it's reasonable to at least give a breadcrumb here to other documentation to learn about how the system behaves after these pods have been scheduled.",
        "createdAt" : "2019-07-02T19:45:57Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fd1f0cee-12c9-4da3-a702-b0a3a01e2f78",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It makes sense. I will include a link here once the doc is baked.",
        "createdAt" : "2019-07-02T19:50:07Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "48fb8dd9-2294-4845-b90d-4ce0629068f6",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "When we say scale down are we talking about using the scale subresource to reduce the replica count of a Deployment or otherwe resources ?For that we would need logic in the deployment controller to say bring down a pod , which doesnt affect even spreading",
        "createdAt" : "2019-07-02T20:29:41Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "a9db25ed-41a0-486d-9526-4fb097541816",
        "parentId" : "c273061c-5141-4d91-b2aa-eb5534388bdc",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "@krmayankk you're right. we're talking about the logic in XYZ controller - XYZ can be deployment, any core API, or even out-of-tree ones which will be quite challenging. Maybe we should(or can) only cover Repliaset controller.",
        "createdAt" : "2019-07-02T21:06:44Z",
        "updatedAt" : "2019-07-19T00:34:43Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9d49a6309127d79c6c8ccb044c7c7d81c65adb2",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +4896,4900 @@\t// won't make it *more* imbalanced.\n\t// It's a required field.\n\tWhenUnsatisfiable UnsatisfiableConstraintAction\n\t// LabelSelector is used to find matching pods.\n\t// Pods that match this label selector are counted to determine the number of pods"
  },
  {
    "id" : "1c12b07c-bfc3-4ee1-a7ab-31399c686c96",
    "prId" : 76968,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76968#pullrequestreview-230779935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96a2c1a4-09ec-4520-b31f-2c6802470183",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "duplicate line",
        "createdAt" : "2019-04-25T17:19:55Z",
        "updatedAt" : "2019-06-18T14:58:28Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e09568c8ead90caa3613c77745808cb6283f9f7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2709,2713 @@\t// More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md\n\t// This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.\n\t// +optional\n\tOverhead ResourceList\n\t// EnableServiceLinks indicates whether information about services should be injected into pod's"
  },
  {
    "id" : "d34ada41-1175-4919-91d4-1fc16cf76cb7",
    "prId" : 75459,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75459#pullrequestreview-236899770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaace27b-cb69-42f8-bf99-147c88cd1f77",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "both of these fields are alpha level and need to call out the alpha state (and which feature gate they are gated by) in their API doc (applies to the external types.go file as well)\r\n\r\nsee https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api_changes.md#adding-unstable-features-to-stable-versions for details",
        "createdAt" : "2019-05-10T20:42:36Z",
        "updatedAt" : "2019-05-17T02:07:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7bc66fc0-9aec-42d2-a790-fdc97d643314",
        "parentId" : "eaace27b-cb69-42f8-bf99-147c88cd1f77",
        "authorId" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "body" : "👍 ",
        "createdAt" : "2019-05-13T20:26:09Z",
        "updatedAt" : "2019-05-17T02:07:19Z",
        "lastEditedBy" : "01246cf1-b4e0-4cdd-818b-da86865d11bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b39d8f4777b3a01359046d05b1de17298b818f2f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4742,4746 @@\t// GMSACredentialSpecName is the name of the GMSA credential spec to use.\n\t// This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.\n\t// +optional\n\tGMSACredentialSpecName *string\n"
  },
  {
    "id" : "d6c2aea0-30fa-4592-9a06-f829887b8bcf",
    "prId" : 74614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74614#pullrequestreview-242893617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f9ecc16-e2ae-49a1-8a5b-f901f4e5355b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@bsalamat, did you want this to be named `LowerPriority`?",
        "createdAt" : "2019-05-28T15:05:12Z",
        "updatedAt" : "2019-05-31T04:42:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "963a80a4-6f69-496a-aaba-f8d198bb9fd5",
        "parentId" : "6f9ecc16-e2ae-49a1-8a5b-f901f4e5355b",
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "@bsalamat  is PreemptLowerPriority  easier to understand than LowerPriority？WDYT？",
        "createdAt" : "2019-05-28T18:40:44Z",
        "updatedAt" : "2019-05-31T04:42:34Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      },
      {
        "id" : "7ae89cf7-a483-455f-a3a4-a08ebbc6cfe1",
        "parentId" : "6f9ecc16-e2ae-49a1-8a5b-f901f4e5355b",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I don't have a strong preference, but I thought since the field name is \"PreemptionPolicy\", we can be more succinct for the value and call it just \"LowerPriority\", but \"PreemptLowerPriority\" is fine too.",
        "createdAt" : "2019-05-28T20:07:51Z",
        "updatedAt" : "2019-05-31T04:42:34Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "52f3380ef3a5d5de4d75ff92defd1c9af9d775bc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1947,1951 @@const (\n\t// PreemptLowerPriority means that pod can preempt other pods with lower priority.\n\tPreemptLowerPriority PreemptionPolicy = \"PreemptLowerPriority\"\n\t// PreemptNever means that pod never preempts other pods with lower priority.\n\tPreemptNever PreemptionPolicy = \"Never\""
  },
  {
    "id" : "56055fc0-18c1-4bfb-92ad-df2de443c7bd",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-209575273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84e9de09-3689-44b4-93eb-a6d59547a80f",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "will this include the file permission bits ?",
        "createdAt" : "2019-02-22T08:26:54Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "c242575e-a794-446a-bad5-02e063cb08c5",
        "parentId" : "84e9de09-3689-44b4-93eb-a6d59547a80f",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "This is an interesting question. Today, secrets have a setting allows the user to [set the mode](https://sourcegraph.com/github.com/kubernetes/kubernetes/-/blob/pkg/apis/core/types.go#L853), but it is not well integrated with the volume ownership (fsgroup) feature.  For alpha, I think drivers can have an attribute for this, but we may need to revisit adding first class support for a better experience.",
        "createdAt" : "2019-02-22T19:49:02Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "b23c23d3-8d86-401d-92f1-a34dba4694b4",
        "parentId" : "84e9de09-3689-44b4-93eb-a6d59547a80f",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "I think in the future (beta) we should continue to use  attributes or some other semi-structured parameter map to avoid making CSI ephemeral feature looking like any existing ephemeral driver.  It should be more flexible to support unforeseen use cases. ",
        "createdAt" : "2019-02-22T23:04:55Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      },
      {
        "id" : "34ee6bba-d099-4f7c-9326-4ff6a564db13",
        "parentId" : "84e9de09-3689-44b4-93eb-a6d59547a80f",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Flex volumes were used as ephemeral until now and I haven't heard anyone complaining that permissions were missing there.",
        "createdAt" : "2019-03-01T13:13:14Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1628,1632 @@\t// driver. Consult your driver's documentation for supported values.\n\t// +optional\n\tVolumeAttributes map[string]string\n\n\t// NodePublishSecretRef is a reference to the secret object containing"
  },
  {
    "id" : "4755d332-8b46-4728-b506-cb284f36bf1c",
    "prId" : 73405,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73405#pullrequestreview-277400721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5182e613-d7af-4dd9-87fc-2c96e9f257d7",
        "parentId" : null,
        "authorId" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "body" : "Let's add a godoc for `NamespaceConditionType`.",
        "createdAt" : "2019-08-20T19:50:36Z",
        "updatedAt" : "2019-08-29T11:26:50Z",
        "lastEditedBy" : "350ae9b6-b3b1-4ba1-a475-a78423f119d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0459feb7d9ec7381be6ef2e93ae82be6d864ec5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4022,4026 @@\n// NamespaceConditionType defines constants reporting on status during namespace lifetime and deletion progress\ntype NamespaceConditionType string\n\n// These are valid conditions of a namespace."
  },
  {
    "id" : "5d894f56-5c82-4e4a-a77a-d1b872fc7d2b",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-276221645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3c4c6a8-b93d-425d-8882-556917b21f19",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You need to add validation (flag-gated) to verify that these are valid label keys or the special value.",
        "createdAt" : "2019-08-14T17:26:54Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ab46676d-cb3e-4f4d-a413-8e95fe335df7",
        "parentId" : "d3c4c6a8-b93d-425d-8882-556917b21f19",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Yes, I'll add the validation for `TopologyKeys` in `ValidateService` (flag-gated) :\r\nhttps://github.com/kubernetes/kubernetes/blob/117e83157bc340c1823f5bd34d4f73ca126ccdd6/pkg/apis/core/validation/validation.go#L3900",
        "createdAt" : "2019-08-15T12:16:42Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      },
      {
        "id" : "6c3c7389-f94d-4c60-afaf-1c654aeb73ba",
        "parentId" : "d3c4c6a8-b93d-425d-8882-556917b21f19",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "done",
        "createdAt" : "2019-08-17T03:41:03Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +3520,3524 @@\t// If this is not specified or empty, no topology constraints will be applied.\n\t// +optional\n\tTopologyKeys []string\n}\n"
  },
  {
    "id" : "7834a705-3fd4-43d3-8f2f-da739328ed86",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-310318049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0f04e0d-8608-4650-b836-3c66375dbf1b",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Add note here that this can't be used with `externalTrafficPolicy=Local`? ",
        "createdAt" : "2019-10-29T16:19:10Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "d6da326b-90be-4b1b-9969-057217478509",
        "parentId" : "d0f04e0d-8608-4650-b836-3c66375dbf1b",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "done",
        "createdAt" : "2019-11-01T07:13:01Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3519,3523 @@\t// value, if used, only makes sense as the last value in the list.\n\t// If this is not specified or empty, no topology constraints will be applied.\n\t// +optional\n\tTopologyKeys []string\n}"
  },
  {
    "id" : "8b056a03-b581-4778-9da4-934fb7db89e3",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-315980696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e9023bc-8843-48ff-ab36-db6da556a719",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "These changes did not get copied to the v1 types.go, which is where the actually matter.",
        "createdAt" : "2019-11-12T20:37:34Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "672d7a52-3b70-4852-a318-2ca2131e6a77",
        "parentId" : "8e9023bc-8843-48ff-ab36-db6da556a719",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Nice catch. Not very familiar with the mechanism before, now I am familiar with it.",
        "createdAt" : "2019-11-13T03:23:29Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3392,3396 @@\t// IPv6Protocol indicates that this IP is IPv6 protocol\n\tIPv6Protocol IPFamily = \"IPv6\"\n\t// MaxServiceTopologyKeys is the largest number of topology keys allowed on a service\n\tMaxServiceTopologyKeys = 16\n)"
  },
  {
    "id" : "b2a666bf-6db3-4500-89ef-563e1e56b356",
    "prId" : 71351,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71351#pullrequestreview-184147794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad9b8b2c-c219-4b27-a13f-17ac3437143d",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you add one more comment that this is an alpha field?",
        "createdAt" : "2018-12-10T17:17:30Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "83e39c61-1077-4bad-b94d-0bc293b30313",
        "parentId" : "ad9b8b2c-c219-4b27-a13f-17ac3437143d",
        "authorId" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "body" : "Added",
        "createdAt" : "2018-12-12T12:14:33Z",
        "updatedAt" : "2019-02-20T01:37:45Z",
        "lastEditedBy" : "0d43352d-b6ae-4016-9e7f-921f64611474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a64b854137b5fc6c60724cbe349122e3bda8b09e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1650,1654 @@\t// SubPathExpr and SubPath are mutually exclusive.\n\t// This field is alpha in 1.14.\n\t// +optional\n\tSubPathExpr string\n}"
  },
  {
    "id" : "0d4fec88-155e-4560-b70e-02491c190901",
    "prId" : 68925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68925#pullrequestreview-193803975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bf17b52-9fcd-4371-8e15-607f0b2d18fd",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Does the `tenant` have a specified format? Any character can be used? Does it have any size limit? There should be some validation in [validation.go](https://github.com/kubernetes/kubernetes/blob/86165ac87889735abec1c482fb869a7cd10303a3/pkg/apis/core/validation/validation.go#L872)\r\n\r\nI don't want users putting megabytes of data here.",
        "createdAt" : "2019-01-17T17:37:08Z",
        "updatedAt" : "2019-01-22T13:42:57Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "b25c0e82-49fc-46ac-98d8-08b1147d6c3a",
        "parentId" : "2bf17b52-9fcd-4371-8e15-607f0b2d18fd",
        "authorId" : "6f16c8f3-4b9a-4898-b402-7e3f0df62ef9",
        "body" : "The tenant is a uuid, I'll add some validation for that.\r\nThanks for the feedback!",
        "createdAt" : "2019-01-17T19:35:14Z",
        "updatedAt" : "2019-01-22T13:42:57Z",
        "lastEditedBy" : "6f16c8f3-4b9a-4898-b402-7e3f0df62ef9",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc71b0aebd639981f68adc6cad0958105b468f14",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +923,927 @@\t// Used with dynamically provisioned Quobyte volumes, value is set by the plugin\n\t// +optional\n\tTenant string\n}\n"
  },
  {
    "id" : "fdaccb8b-d7b2-44a4-9887-dcad8bb7088d",
    "prId" : 60195,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60195#pullrequestreview-129380768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "600a6b18-159c-49a7-a543-116254a494d4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "document behavior if empty (defaults to the same namespace as the bound PVC, right?)",
        "createdAt" : "2018-06-05T19:18:27Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ae6cab2d-e388-4889-9c8a-f96936bbdf01",
        "parentId" : "600a6b18-159c-49a7-a543-116254a494d4",
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "Done.",
        "createdAt" : "2018-06-17T06:59:26Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdb051c72d836af2ab477dd23c4ff3fa06bbc1f4",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +955,959 @@\t// EndpointsNamespace is the namespace that contains Glusterfs endpoint.\n\t// If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC.\n\t// More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n\t// +optional\n\tEndpointsNamespace *string"
  },
  {
    "id" : "fe7f15c7-3533-4fd3-97f6-da6bf995f493",
    "prId" : 60195,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60195#pullrequestreview-168454815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e199c5a-8f46-4b2e-81dd-30995aa2dbee",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "add `+optional`",
        "createdAt" : "2018-08-08T02:14:07Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e54af394-43c3-4fc6-9436-d18d568cfaee",
        "parentId" : "9e199c5a-8f46-4b2e-81dd-30995aa2dbee",
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "Done.",
        "createdAt" : "2018-10-25T15:46:13Z",
        "updatedAt" : "2018-11-06T10:23:29Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdb051c72d836af2ab477dd23c4ff3fa06bbc1f4",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +955,959 @@\t// EndpointsNamespace is the namespace that contains Glusterfs endpoint.\n\t// If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC.\n\t// More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n\t// +optional\n\tEndpointsNamespace *string"
  },
  {
    "id" : "a5bbab14-3edb-473c-b3a1-14c3bd35657c",
    "prId" : 59847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59847#pullrequestreview-119145495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f17dd64-d0c9-4a31-84fe-295cb04ad205",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "The comment here is very hard to understand, could you please add more clarification here?",
        "createdAt" : "2018-05-07T20:54:57Z",
        "updatedAt" : "2018-05-08T22:37:39Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "8bfbb203-61f1-4b6f-82bb-a9ee220bc2ae",
        "parentId" : "9f17dd64-d0c9-4a31-84fe-295cb04ad205",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "I updated the comment to provide additional context.",
        "createdAt" : "2018-05-08T22:37:41Z",
        "updatedAt" : "2018-05-08T22:37:42Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "516f2f36-572d-4ab5-8621-fa8d52d94621",
        "parentId" : "9f17dd64-d0c9-4a31-84fe-295cb04ad205",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "New comment text:\r\n```\r\n// UID is the metadata.UID of the referenced ConfigMap.\r\n// This field is currently reqired in Node.Spec.\r\n// TODO(#61643): This field will be forbidden in Node.Spec when #61643 is resolved.\r\n//               #61643 changes the behavior of dynamic Kubelet config to respect\r\n//               ConfigMap updates, and thus removes the ability to pin the Spec to a given UID.\r\n// TODO(#56896): This field will be required in Node.Status when #56896 is resolved.\r\n//               #63314 (the PR that resolves #56896) adds a structured status to the Node\r\n//               object for reporting information about the config. This status requires UID\r\n//               and ResourceVersion, so that it represents a fully-explicit description of\r\n//               the configuration in use, while (see previous TODO) the Spec will be\r\n//               restricted to namespace/name in #61643.\r\n```",
        "createdAt" : "2018-05-08T22:37:58Z",
        "updatedAt" : "2018-05-08T22:38:22Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "fc407dff-29fb-4928-a6d2-727226c7bdba",
        "parentId" : "9f17dd64-d0c9-4a31-84fe-295cb04ad205",
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Thanks.",
        "createdAt" : "2018-05-10T16:03:30Z",
        "updatedAt" : "2018-05-10T16:03:30Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      }
    ],
    "commit" : "c41cf55a2cdcb0e678be719c8909ea193b72ca84",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3272,3276 @@\tName string\n\n\t// UID is the metadata.UID of the referenced ConfigMap.\n\t// This field is currently reqired in Node.Spec.\n\t// TODO(#61643): This field will be forbidden in Node.Spec when #61643 is resolved."
  },
  {
    "id" : "a7851b25-3639-4fe8-b09f-c45f6ed34098",
    "prId" : 59416,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59416#pullrequestreview-256546936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7a832e-4c3a-4617-94ab-de9728d47bf9",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So I think there's a bunch of feedback and follow up on these godoc that need to be done, but I don't think they have to happen in this PR if you haven't changed these from the copy.",
        "createdAt" : "2019-06-25T18:52:30Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "59fa63ae-5de4-43ac-a233-0b77247ad015",
        "parentId" : "8a7a832e-4c3a-4617-94ab-de9728d47bf9",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "I haven't changed them from the copy for the fields that are allowed for `EphemeralContainer`. For the fields that are disallowed in ephemeral containers I've replaced the `Container` description with a message that the field is disallowed.\r\n\r\nI'm happy to rewrite the docs in a follow up, too.",
        "createdAt" : "2019-06-25T20:36:29Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "f312fc55-5108-4622-afa0-9d99f7e46a72",
        "parentId" : "8a7a832e-4c3a-4617-94ab-de9728d47bf9",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "@smarterclayton Is there anything I could get started on? I could just start writing docs and see where it goes, but I'm not sure if you want anything specific.",
        "createdAt" : "2019-06-26T20:11:38Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "0bed8ff3-f451-4b20-b8b8-79ec903ae612",
        "parentId" : "8a7a832e-4c3a-4617-94ab-de9728d47bf9",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "Opened separate PR #79614 for documentation",
        "createdAt" : "2019-07-01T20:30:52Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a753c7a44b5f92e52d4119530ac76e38b837336",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +2903,2907 @@\t// +optional\n\tArgs []string\n\t// Optional: Defaults to Docker's default.\n\t// +optional\n\tWorkingDir string"
  },
  {
    "id" : "132307e5-316a-4b4c-913b-395893306a4d",
    "prId" : 59391,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59391#pullrequestreview-97952300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0345fe4b-0285-42fd-af7a-789412f48859",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I did not follow all the discussion closely. Why it changed from `RequiredDuringSchedulingIgnoredDuringExecution` to simple `Required`? What happens when admin edits the selector when a pod is already scheduled / running? Should it be allowed?",
        "createdAt" : "2018-02-08T13:08:10Z",
        "updatedAt" : "2018-02-20T19:43:49Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "e3ab5253-ab3a-4c47-8a1c-fe438df2d265",
        "parentId" : "0345fe4b-0285-42fd-af7a-789412f48859",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think the \"RequiredDuringExecution\" clause doesn't make sense for volumes because:\r\n- That means the storage backend made the volume inaccessible on that node while it was still being used?  I don't think any sane backend would do that and cause data corruption for the application.\r\n- Maybe the storage backend migrated the data to another node and but it's still globally accessible.  Then that becomes a preference instead of a requirement.  Also, I don't see a good reason why a backend would do that because it decrease workload performance.\r\n\r\nIn that case, maybe it is good to disallow modifying the Required field.  I can envision future scenarios for allowing changes to a Preferred field though.\r\n",
        "createdAt" : "2018-02-08T18:12:58Z",
        "updatedAt" : "2018-02-20T19:43:49Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "85e66143-bae8-4b1f-9c72-2d2adef6f751",
        "parentId" : "0345fe4b-0285-42fd-af7a-789412f48859",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "In general, disallow field updates until/unless you know exactly what they are for.",
        "createdAt" : "2018-02-20T18:49:50Z",
        "updatedAt" : "2018-02-20T19:43:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d2b81ba4-c32e-49c4-9efb-63337ed0af71",
        "parentId" : "0345fe4b-0285-42fd-af7a-789412f48859",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Yup, it disallows updates now.  Hm but actually this will make it difficult for users to upgrade from alpha -> beta, or for automatically upgrading zonal PVs like GCE PDs to the beta format.\r\n\r\nI think what I need to do is:\r\n- Allow setting NodeAffinity if it was previously non-nil\r\n- Disallow modifying NodeAffinity once its set.",
        "createdAt" : "2018-02-20T19:12:18Z",
        "updatedAt" : "2018-02-20T19:43:49Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6a225623b0e359b32dec34cb83ad4ad6d5c4f49",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +477,481 @@type VolumeNodeAffinity struct {\n\t// Required specifies hard node constraints that must be met.\n\tRequired *NodeSelector\n}\n"
  },
  {
    "id" : "ff56c752-2e68-43cf-b955-42f8a97eedc5",
    "prId" : 59157,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59157#pullrequestreview-94079356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84fa3c79-9228-4854-901f-5f5c0564d3b2",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Was there a plan to add Attributes into CSIPersistentVolumeSource so we don't need to use annotations? I'd appreciate if the type was completed before marked as beta",
        "createdAt" : "2018-02-02T11:46:06Z",
        "updatedAt" : "2018-02-09T17:54:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "8b932c1a-b360-4365-926b-4d27018b541c",
        "parentId" : "84fa3c79-9228-4854-901f-5f5c0564d3b2",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "@jsafrane yes there is a separate PR for it, this can stall until it goes in. https://github.com/kubernetes/kubernetes/pull/58762",
        "createdAt" : "2018-02-05T17:45:29Z",
        "updatedAt" : "2018-02-09T17:54:16Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5deaf6136e1e398499819455a0a3ebc2b151199",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1605,1609 @@\n// Represents storage that is managed by an external CSI volume driver (Beta feature)\ntype CSIPersistentVolumeSource struct {\n\t// Driver is the name of the driver to use for this volume.\n\t// Required."
  },
  {
    "id" : "31821d03-6346-4af3-9ab2-814c30365c95",
    "prId" : 58762,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58762#pullrequestreview-98398308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18f51052-ee00-4460-bc90-dcf42af28944",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why does this want the \"Volume\" prefix?  Does it feel redundant in actual use?",
        "createdAt" : "2018-02-21T23:07:39Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c8f0413e-0ba0-489f-9034-bb29aa1a0ad6",
        "parentId" : "18f51052-ee00-4460-bc90-dcf42af28944",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "It's to align with the parameter `volume_attributes` in the CSI spec.",
        "createdAt" : "2018-02-21T23:18:47Z",
        "updatedAt" : "2018-02-22T12:38:00Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c16b2c066bb61d61ced56099537e55f6858dde1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1638,1642 @@\t// Attributes of the volume to publish.\n\t// +optional\n\tVolumeAttributes map[string]string\n}\n"
  },
  {
    "id" : "98c82181-22bd-476b-aea4-14f28ad8f813",
    "prId" : 58716,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58716#pullrequestreview-97684656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3723b377-c339-4227-9689-0ae26e0855a3",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why do you have conversion-gen=false on here?  Just because the predecessors have it?",
        "createdAt" : "2018-02-19T21:38:12Z",
        "updatedAt" : "2018-02-21T18:32:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "294b025a-fd09-48be-8e9f-615df7b493d1",
        "parentId" : "3723b377-c339-4227-9689-0ae26e0855a3",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "I thought it would be necessary because the `Spec.ShareProcessNamespace` vs `Spec.SecurityContext.ShareProcessNamespace` path difference needed manual conversion.",
        "createdAt" : "2018-02-20T00:55:38Z",
        "updatedAt" : "2018-02-21T18:32:44Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a41de1b734def3b258d0dcadeaeb98539080fbf4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2651,2655 @@\t// Optional: Default to false.\n\t// This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.\n\t// +k8s:conversion-gen=false\n\t// +optional\n\tShareProcessNamespace *bool"
  },
  {
    "id" : "c6d24790-b9a4-4c20-a623-c7f76c9b4693",
    "prId" : 58444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58444#pullrequestreview-91278271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a37c44d-e353-4e3a-8b32-157bb98407c8",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "@bsalamat - Out of curiosity, why  `system-node-critical` has higher priority than `system-cluster-critical`? Why isn't it otherway around?",
        "createdAt" : "2018-01-22T23:38:52Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "a1521b7f-6c9c-4a6f-bd4c-dff3a5e9f3c4",
        "parentId" : "4a37c44d-e353-4e3a-8b32-157bb98407c8",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "> Out of curiosity, why system-node-critical has higher priority than system-cluster-critical? Why isn't it otherway around?\r\n\r\n`system-node-critical` is used for Pods that are critical and must run on the current node. `system-cluster-critical` are used for Pods that are critical to run in the cluster, but they don't need to run on the current node and things should be fine as long as they run in the cluster. That's why `system-node-critical` has higher priority. If at some point, we reach to a point that we have to choose to preempt Pods having `system-cluster-critical` and `system-node-critical`, we choose the former, because those Pods can be recreated and run on a different node.",
        "createdAt" : "2018-01-23T22:10:30Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "8d251eeb-f574-401a-b56a-066e55994ee6",
        "parentId" : "4a37c44d-e353-4e3a-8b32-157bb98407c8",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "Thanks @bsalamat  - So, in a way, are `system-node-critical` pods static pods with critical pod annotation. I ask because as per https://github.com/kubernetes/kubernetes/issues/58379#issuecomment-359625527, it seems we are treating static pods no differently when compared to normal pods while evicting at kubelet level.",
        "createdAt" : "2018-01-24T11:22:00Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "c6d74999-860f-4581-a604-be8dfb4917e4",
        "parentId" : "4a37c44d-e353-4e3a-8b32-157bb98407c8",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I won't call pods with `system-node-critical` priority static pods. This is merely the priority of Pods. Pods with this priority can be scheduled by the scheduler and may not have a preassigned node.",
        "createdAt" : "2018-01-24T18:20:53Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "646ee95213a8fdbfce416703459a5467a78cfcbf",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2569,2573 @@\t// +optional\n\tHostAliases []HostAlias\n\t// If specified, indicates the pod's priority. \"system-node-critical\" and\n\t// \"system-cluster-critical\" are two special keywords which indicate the\n\t// highest priorities with the former being the highest priority. Any other"
  },
  {
    "id" : "a5ab3612-e6b5-4616-89f9-7b5e919564db",
    "prId" : 58444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58444#pullrequestreview-94571296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "242439f2-9929-4b3f-a1f0-19c4fbe65339",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Does this mean creating a PriorityClass with those two names will be forbidden? Will there ever be additional reserved keyword priorities? Should we reserve the `system-` prefix and disallow priority class objects with that prefix to allow us to expand predefined ones in the future?",
        "createdAt" : "2018-02-04T05:24:13Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5fc456e3-aada-4f0e-ae84-51af1d23e401",
        "parentId" : "242439f2-9929-4b3f-a1f0-19c4fbe65339",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "> Does this mean creating a PriorityClass with those two names will be forbidden?\r\n\r\nYes, Priority admission controller enforces this.\r\n\r\n> Will there ever be additional reserved keyword priorities?\r\n\r\nThere is no plan to add more, but we might add if there is a REAL need for a reserved name.\r\n\r\n> Should we reserve the system- prefix and disallow priority class objects with that prefix to allow us to expand predefined ones in the future?\r\n\r\nThat's actually a good suggestion. We have already reserved all priority values >2 billion for system critical pods. We may as well want to reserve the \"system-\" prefix for such PriorityClass names. I will send a PR.",
        "createdAt" : "2018-02-05T18:31:14Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "b08a4ee1-aa0f-45be-88d0-f63adb0222ad",
        "parentId" : "242439f2-9929-4b3f-a1f0-19c4fbe65339",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "@liggitt, is there anything else I can answer or address in this PR?",
        "createdAt" : "2018-02-07T00:45:21Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "4e95372a-5f88-4df9-a4ea-377c5088850f",
        "parentId" : "242439f2-9929-4b3f-a1f0-19c4fbe65339",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Same doc changes need to be made in the v1 types go file, and generated docs updated. Otherwise, no one will see this information",
        "createdAt" : "2018-02-07T01:37:51Z",
        "updatedAt" : "2018-02-07T01:57:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cbbfd30f-87d3-451e-8271-4741ef96af8c",
        "parentId" : "242439f2-9929-4b3f-a1f0-19c4fbe65339",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Of course! I forgot to do that. It is done now. Thanks!",
        "createdAt" : "2018-02-07T01:58:08Z",
        "updatedAt" : "2018-02-07T01:58:08Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "646ee95213a8fdbfce416703459a5467a78cfcbf",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2572,2576 @@\t// \"system-cluster-critical\" are two special keywords which indicate the\n\t// highest priorities with the former being the highest priority. Any other\n\t// name must be defined by creating a PriorityClass object with that name.\n\t// If not specified, the pod priority will be default or zero if there is no\n\t// default."
  },
  {
    "id" : "4ca929fd-3daf-4cc2-a227-59c5d35df85c",
    "prId" : 57963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57963#pullrequestreview-124978771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aa36f6b-5756-4283-a568-f2fd43ae580d",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "update `IsResourceQuotaScopeValidForResource` to say that priority is valid for both pod object count and pod compute quota resources.",
        "createdAt" : "2018-05-31T04:29:45Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "56247073-4231-4d0c-82f4-4f1126d57738",
        "parentId" : "6aa36f6b-5756-4283-a568-f2fd43ae580d",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "noting to myself this is done.",
        "createdAt" : "2018-05-31T21:15:21Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe6412c70ad1c658cb37013d2300f1707fd290",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4170,4174 @@\tResourceQuotaScopeNotBestEffort ResourceQuotaScope = \"NotBestEffort\"\n\t// Match all pod objects that have priority class mentioned\n\tResourceQuotaScopePriorityClass ResourceQuotaScope = \"PriorityClass\"\n)\n"
  },
  {
    "id" : "a3eaaddb-9f20-40a3-8c8d-26e73fdba414",
    "prId" : 57302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57302#pullrequestreview-97347070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e799419f-4fd7-4423-8033-6c9f06f900bb",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "@derekwaynecarr Do we still need explicit types for first class resources or can we apply the logic this PR employs for first class resources too?",
        "createdAt" : "2018-02-15T21:50:49Z",
        "updatedAt" : "2018-02-15T21:50:49Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ab7d2fb5-477c-4994-aa19-2f41aad9126e",
        "parentId" : "e799419f-4fd7-4423-8033-6c9f06f900bb",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i suspect we could consolidate logic now to say any compute resource (cpu, memory, etc.) could support requests.* or limits.* syntax is overcommittable.",
        "createdAt" : "2018-02-16T23:32:13Z",
        "updatedAt" : "2018-02-16T23:34:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ea565e352c6cd2c60a05a7435385ac9b3ad261f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4161,4165 @@\tResourceRequestsHugePagesPrefix = \"requests.hugepages-\"\n\t// Default resource requests prefix\n\tDefaultResourceRequestsPrefix = \"requests.\"\n)\n"
  },
  {
    "id" : "fb0ce790-dd39-4779-ba76-02613014da66",
    "prId" : 56460,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56460#pullrequestreview-79630318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267e9b0a-47fe-42c3-8552-3ee21a7a50f2",
        "parentId" : null,
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "This field is never read",
        "createdAt" : "2017-11-28T19:23:59Z",
        "updatedAt" : "2017-12-15T05:53:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "9ca9e2c6-12b5-4cb4-b812-c2545d94f108",
        "parentId" : "267e9b0a-47fe-42c3-8552-3ee21a7a50f2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is an exact replica of the existing struct fields to start to make sure wire serialization is precisely compatible",
        "createdAt" : "2017-11-28T19:37:07Z",
        "updatedAt" : "2017-12-15T05:53:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "61369863b244a267725f1e75803819d68eea0e0e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +888,892 @@\t// the ReadOnly setting in VolumeMounts.\n\t// +optional\n\tReadOnly bool\n\t// Optional: Extra driver options if any.\n\t// +optional"
  }
]