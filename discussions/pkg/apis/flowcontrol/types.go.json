[
  {
    "id" : "2203c241-f4ff-458a-90ba-ff466aacb149",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-341317052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "This feels like way too much information for a potential configuration author to keep in their head.\r\n\r\nDo we really need to make the precedence optional? If so, why is the default 10% of the way through the possible range? Is anyone reading a config file ever going to remember that piece of trivia?\r\n\r\nDo we really need exactly five digits of precision in precedences? (Why not either something far more constrained, like 1-100, or the full 32 bits?) \r\n\r\nIf we require the precedence to be non-negative, why is it signed?",
        "createdAt" : "2020-01-09T20:11:57Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "0fd40d81-f98d-4263-85c0-1c1480533378",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The default shouldn't be at the logical top of the precedence range, other than that it doesn't matter too much.\r\n\r\nI agree that it's not necessary to default this and we could make people choose something. OTOH this only matters if your flow schemas are overlapping.\r\n\r\nWe don't use unsigned variables in the API with few exceptions (port numbers), cargo-culting the go preference for signed ints to minimize under/overflow bugs.",
        "createdAt" : "2020-01-09T20:38:12Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5cb5b489-dbf5-4b2d-9fd9-83d994aada66",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "10k levels is probably way more than we need-- it was chosen due to being more readable than 2^31. In the interest of making progress, IMO 10k is good enough for alpha. It's better to have more than needed than less.",
        "createdAt" : "2020-01-09T20:41:26Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9685af50-0785-43cc-a79d-ebead0cd5f9e",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, in my opinion having a default value for matchingPrecedence just adds an unnecessary detail to the API.  Since it is quite plausible that some flow schemas overlap in their matching condition, everybody working on them has to be cognizant of the fact that they are ordered.  Remembering which number corresponds to unspecified matchingPrecedence is just additional burden.",
        "createdAt" : "2020-01-10T00:20:51Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "8a15063d-dca5-4e3b-9a97-630f4bc47891",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Regarding the range of matchingPrecedence: my preference is to not try to figure out how small we can make it.  We have not even begun to explore what configs admins will actually find useful, and that includes not yet exploring how they manage the matchingPrecedence space.  My preference is to leave admins as much freedom as the positive half of `int32` allows.",
        "createdAt" : "2020-01-10T00:23:57Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "f2a311bc-4345-40cc-bd1e-6425df629b11",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> Do we really need to make the precedence optional? \r\n\r\ni think so, the point of matchingPrecedence is to help admins revolve conflict between rules only when there is. non-optional precedence forces users to think of an actual value every time they create one, i can imagine impatient ones abusing the fields.\r\n\r\n> If so, why is the default 10% of the way through the possible range? \r\n\r\n`1000` is not a good default aesthetically, but will be sufficient for use in alpha. in some sense i think `[-10000, 10000]` and `0` default can be a better range, but it probably doesnt make a significant difference for the current stage. ",
        "createdAt" : "2020-01-10T07:43:01Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "92106712-17c9-48dc-864f-81375a4fb0d3",
        "parentId" : "36de3337-7bbb-40e9-95c9-1983d7d35ec9",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If we have a default value for matchingPrecedence then I think it should: (a) roughly correspond to ordinary workload in the suggested config and (b) have plenty of room above and below.",
        "createdAt" : "2020-01-10T17:37:14Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +95,99 @@\t// FlowSchema is among those with the numerically lowest (which we take to be logically highest)\n\t// MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000].\n\t// Note that if the precedence is not specified, it will be set to 1000 as default.\n\t// +optional\n\tMatchingPrecedence int32"
  },
  {
    "id" : "f67efcba-7db8-47d8-9603-26b887c18868",
    "prId" : 84900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84900#pullrequestreview-317290801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d1c8f17-c46c-44d1-a8d2-e48206a86dd7",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "followup: or ClusterScope is true and the request is cluster-scoped",
        "createdAt" : "2019-11-14T22:02:10Z",
        "updatedAt" : "2019-11-14T22:02:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "90135b6f-f88f-4735-972d-7b18e3f79836",
        "parentId" : "0d1c8f17-c46c-44d1-a8d2-e48206a86dd7",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "oh crud, right.  Will fix in a followup PR.",
        "createdAt" : "2019-11-14T22:03:33Z",
        "updatedAt" : "2019-11-14T22:03:33Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "793b5a7c9aa22fa0bc4417558327c57044f86fbe",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +218,222 @@// member of apiGroups matches the request, (c) at least one member of\n// resources matches the request, and (d) least one member of\n// namespaces matches the request.\ntype ResourcePolicyRule struct {\n\t// `verbs` is a list of matching verbs and may not be empty."
  },
  {
    "id" : "3f8c2015-649b-41d0-a4cd-cc00e4f564a5",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-231487029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba07a046-f43f-4335-bf85-8f7a4315ea12",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Explicitly note that this must be a postive number for a non-exempt priority level.",
        "createdAt" : "2019-04-28T21:47:27Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +201,205 @@\t//\n\t//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\t//\n\t// +optional\n\tAssuredConcurrencyShares int32"
  },
  {
    "id" : "cbbb36a0-11e0-4747-a679-9185471f2526",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-231807904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17841a3c-4154-44b8-a899-5a27451bae36",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This name is more complicated than necessary.  The \"Configuration\" is not really adding anything.  I think we should call this just `PriorityLevel`.  Or, `RequestPriority`.",
        "createdAt" : "2019-04-28T21:49:03Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "31ec68ce-a7e8-49d7-9f2a-3fd4defad86d",
        "parentId" : "17841a3c-4154-44b8-a899-5a27451bae36",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "`PriorityLevelConfiguration` sounds like it's in the same family as `Mutating|ValidatingWebhookConfiguration`?",
        "createdAt" : "2019-04-29T15:58:48Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "1a5f4c16-b836-400d-969b-72ded8c951d4",
        "parentId" : "17841a3c-4154-44b8-a899-5a27451bae36",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I can live with the more complicated name if we agree that \"PriorityLevel\" refers to simply a number and the type at hand conveys additional stuff that we are associating with that number.",
        "createdAt" : "2019-04-29T17:38:32Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@\n// PriorityLevelConfiguration represents the configuration of a priority level.\ntype PriorityLevelConfiguration struct {\n\tmetav1.TypeMeta\n\t// `metadata` is the standard object's metadata."
  },
  {
    "id" : "3ac7b7b3-602d-46a1-895a-9d377ffd2c65",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-247680359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df32d8c4-3ae2-4eef-bf45-b22bdeb13468",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Say it must be positive for a non-exempt priority.",
        "createdAt" : "2019-04-28T21:54:26Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "50e6eb05-2238-491a-9832-62618d981e72",
        "parentId" : "df32d8c4-3ae2-4eef-bf45-b22bdeb13468",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "updated",
        "createdAt" : "2019-04-30T16:38:56Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "5d1f8353-30ae-40b3-8b4e-5c58adf6624e",
        "parentId" : "df32d8c4-3ae2-4eef-bf45-b22bdeb13468",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I do not see the update.",
        "createdAt" : "2019-06-10T15:28:31Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +212,216 @@\t// request flow identifier’s string pair is hashed and the hash value is used to shuffle the queue indices and deal\n\t// a hand of the size specified here. If empty, the hand size will the be set to 1.\n\t// +optional\n\tHandSize int32\n\t// `queueLengthLimit` is a length limit applied to each queue belongs to the priority.  The value must be positive"
  },
  {
    "id" : "673d7492-4a89-437f-a0d3-e1a06e930c8a",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-233790632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This struct also needs a `CatchAll bool` field, to identify the prority level that is the non-exempt default.  See https://github.com/MikeSpreitzer/kube-enhancements/blob/add-req-fq-isolated/keps/sig-api-machinery/20190228-priority-and-fairness.md#default-behavior .",
        "createdAt" : "2019-04-28T23:38:39Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "c74c1389-cbbc-4f5c-ad00-d3822db5138e",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> This struct also needs a CatchAll bool field, \r\n\r\ni'm trying to eliminate the `CatchAll` field and convert it to a matching rule that applied to all users and all resources. do we really need that?",
        "createdAt" : "2019-04-29T15:59:00Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "78881f98-81db-4478-899a-ccae0792420b",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I am not sure I understand the alternative being proposed.  Can you explain it?\r\n\r\nMy thinking here is that we need to define what happens to a request that is not matched by any FlowSchema.  My proposed answer is to assign it to one of two priority levels, depending on whether the request should be exempt or not.  In the \"not\" case, we need to know which priority level gets used.  And I am trying to define default behavior in a way that integrates smoothly with regular behavior, so disruption is minimized as these API objects are created/updated/deleted.",
        "createdAt" : "2019-04-29T17:27:39Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "cf62885a-86e3-4d89-9f3c-5c24b784ecbd",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "so there should be at most 1 `catchAll` priority globally?\r\n\r\n",
        "createdAt" : "2019-04-30T16:47:59Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "054dbb17-7f90-4d3f-a137-641c8bd34f5f",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Normally, yes.  But during transitions there might be any number.  That is why I prescribed the behavior in such a way that it is reasonable regardless of the number that exists at the moment.",
        "createdAt" : "2019-04-30T18:43:52Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "66545d2e-1af5-422f-9950-e911b398880b",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "@MikeSpreitzer i see a similar field in scheduling api \r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/c4c9e256c61cfed0eee34750fed3e61d69912080/pkg/apis/scheduling/types.go#L53-L59\r\n\r\nhow do you think if we if make the field name consistent ?",
        "createdAt" : "2019-05-05T12:32:52Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "33015949-e408-4777-893d-1ba0078ca4ec",
        "parentId" : "21527e7f-5558-4927-a828-774cd8a538fd",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "OK with me.",
        "createdAt" : "2019-05-05T17:44:01Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@\n// PriorityLevelConfigurationSpec is specification of a priority level\ntype PriorityLevelConfigurationSpec struct {\n\t// `globalDefault` specifies whether this priority level should be considered as the default priority for requests\n\t// that do not have any priority level. Only one PriorityClass should be marked as `globalDefault`."
  },
  {
    "id" : "41e3f28b-67fb-4a1f-b378-64b7891a3281",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-247681053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0c479c9-1d52-4f29-8162-64569e5602e2",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "We no longer use this type.",
        "createdAt" : "2019-05-18T01:52:37Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "587ab04b-c7ad-4f00-b8e2-0212347f6000",
        "parentId" : "a0c479c9-1d52-4f29-8162-64569e5602e2",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "removed",
        "createdAt" : "2019-05-21T11:40:29Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "ab065f85-b35e-49d8-9868-796b61e1f580",
        "parentId" : "a0c479c9-1d52-4f29-8162-64569e5602e2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I wonder if you have pushed all your updates.  I still see the `Subject` type defined here.",
        "createdAt" : "2019-06-10T15:29:47Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@// User and Group in API group \"rbac.authorization.k8s.io\", to represent such a username or group.\n// The only kind of true object reference that currently will match any users is ServiceAccount.\ntype Subject struct {\n\t// `kind` of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".\n\t// If the kind value is not recognized, the flow-control layer in api-server should report an error."
  },
  {
    "id" : "c21d9869-8f49-43f2-8e01-6592d43183e6",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-239227601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "611970eb-5dc9-4e92-9e1b-601fec68ab60",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "How about making this an enumerated type?",
        "createdAt" : "2019-05-18T02:02:33Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "54a6c3e0-fa56-498b-b52f-be95f0981460",
        "parentId" : "611970eb-5dc9-4e92-9e1b-601fec68ab60",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1",
        "createdAt" : "2019-05-19T08:59:57Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@\n// These are valid flow-dingtinguisher methods.\nconst (\n\t// FlowDistinguisherMethodByUser specifies that the flow distinguisher is the username works in the request context\n\t// so that the requests from the same user will enqueued into the same set of queues for processing."
  },
  {
    "id" : "f7f52584-a0af-4694-ba91-863450bbcd17",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-249064370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b888b39-1fd4-4659-ac4c-08c78107d1e2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Where are the external types? I would prefer to comment on those.",
        "createdAt" : "2019-05-19T09:02:51Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2236399e-ecbd-4058-b898-251656950b04",
        "parentId" : "3b888b39-1fd4-4659-ac4c-08c78107d1e2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "+1",
        "createdAt" : "2019-05-20T03:50:58Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "0c1a6bcf-7ca3-44cc-b022-0a46c49efe2a",
        "parentId" : "3b888b39-1fd4-4659-ac4c-08c78107d1e2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This has been resolved.",
        "createdAt" : "2019-06-12T23:20:32Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2019 The Kubernetes Authors.\n"
  },
  {
    "id" : "7a178096-5b6e-493e-9228-48f1a508a5b4",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-239290067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73f6a0d2-7da4-4697-b33c-d2fd3f17f5cf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why is this a struct and not an enum? Do we intend to add more members?",
        "createdAt" : "2019-05-19T09:06:06Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6a4273cf-799d-4481-a1d6-89282e903ca6",
        "parentId" : "73f6a0d2-7da4-4697-b33c-d2fd3f17f5cf",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Possibly.  Recall that an earlier proposal had a flow distinguisher method that did some string processing on groups, and this processing had some parameters.",
        "createdAt" : "2019-05-20T03:44:09Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "da2889d2-96dc-455f-bdb8-1864a32671a9",
        "parentId" : "73f6a0d2-7da4-4697-b33c-d2fd3f17f5cf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK.",
        "createdAt" : "2019-05-20T04:25:13Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@\n// FlowDistinguisherMethod specifies the method of a flow distinguisher.\ntype FlowDistinguisherMethod struct {\n\t// `type` is the type of flow distinguisher method\n\tType FlowDistinguisherMethodType"
  },
  {
    "id" : "0ffc9e71-3bcf-4926-a84f-c37f68ad2d67",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-241208952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I suggest adding something like this: throughput not used is available for other priority levels to use. Set this value to indicate how much throughput this priority level can consume when the system is completely loaded.",
        "createdAt" : "2019-05-19T14:08:33Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fd399de2-a555-446e-9527-d694b9162d45",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I thought we agreed that the first version would not do that.  The KEP currently says that.",
        "createdAt" : "2019-05-20T04:11:41Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b072a63f-07b3-4c01-843a-30563b3ec58a",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Where does it say that in the KEP?\r\n\r\nIt might be the jet lag talking, but without this property it seems like a configuration that isn't well matched to the types of requests an apiserver actually receives is likely to drastically reduce the throughput of the system, i.e., enabling it by default seems very risky.\r\n\r\nIf I agreed to start like this I think I must have intended to mean as a way of getting started; I'm willing to be convinced otherwise but I currently think we need that property before this can be beta if not alpha?",
        "createdAt" : "2019-05-20T04:50:42Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a0c29373-4750-429d-a392-64d21f71cc82",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The KEP says this in the first paragraph of the Proposal, at https://github.com/kubernetes/enhancements/blob/7a144ac413b0d9b3fbe43c0bc5dd843e2e7c19d7/keps/sig-api-machinery/20190228-priority-and-fairness.md#proposal\r\n\r\nThis is reiterated in https://github.com/kubernetes/enhancements/blob/7a144ac413b0d9b3fbe43c0bc5dd843e2e7c19d7/keps/sig-api-machinery/20190228-priority-and-fairness.md#dispatching",
        "createdAt" : "2019-05-20T20:53:59Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "57d9ff56-37f3-4027-946b-c58c39a58c01",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "And yes, I expect this first version is going to be unsatisfying --- and quite possibly very annoying.  My hope is that it will provide a useful common baseline of experience and understanding.  I thought that was our shared expectation.",
        "createdAt" : "2019-05-21T01:19:39Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "09b068f1-d855-423c-a26d-07145b1545e4",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i remember we agreed that no borrowing in the alpha stage even though that's also what we literally want in a bigger picture of this feature",
        "createdAt" : "2019-05-21T10:46:00Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6f46f6ce-2b66-448b-b968-666b6a418f55",
        "parentId" : "75473df9-2d69-411b-be64-9d2c13ae7cca",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "After I thought about it more, I think this should still behave OK, since the server won't sit idle unless no queue has anything to do. We can probably go to beta with this and get experience.",
        "createdAt" : "2019-05-23T13:40:12Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +201,205 @@\t//\n\t//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\t//\n\t// +optional\n\tAssuredConcurrencyShares int32"
  },
  {
    "id" : "e70bf563-4c7b-4363-8df0-56ff66901e5c",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-239787021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "097c2890-6800-4852-8895-3ee2d903b4e2",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I would suggest adding \"work explanation\" of this formula - it took me couple minutes when I've first seen that in the past to understand it.",
        "createdAt" : "2019-05-20T05:11:26Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c66c0244-fc92-495c-989f-500cd040eca4",
        "parentId" : "097c2890-6800-4852-8895-3ee2d903b4e2",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "@wojtek-t : can you please elaborate on what you are looking for?",
        "createdAt" : "2019-05-21T01:18:23Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@\t// the assured concurrency value (ACV) for each priority level:\n\t//\n\t//             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\t//\n\t// +optional"
  },
  {
    "id" : "fe01a5b6-98f8-4409-83dc-12f441fe2be2",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-250347897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e002d55e-cd71-4af9-bbfa-c6a595ae4b43",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Putting \"user\" in this comment is confusing, because the namespace in question is not an attribute of the user but rather an aspect of the object that the request accesses.  In some sense the user is making the request, but it is also true that the user is an attribute of the request, not the other way around.  Here is a suggested rewording:\r\n```\r\n// FlowDistinguisherMethodByNamespace specifies that the flow distinguisher is the namespace of the object\r\n// that the request accesses.  If the object is not namespaced or the request is a non-resource request then\r\n// the flow distinguisher is the empty string.\r\n```",
        "createdAt" : "2019-06-12T16:05:03Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "8dbfd830-cd82-4dc4-ad49-9f4fed2f65f6",
        "parentId" : "e002d55e-cd71-4af9-bbfa-c6a595ae4b43",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "rewording accepted",
        "createdAt" : "2019-06-17T08:13:16Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@\tFlowDistinguisherMethodByUserType FlowDistinguisherMethodType = \"ByUser\"\n\n\t// FlowDistinguisherMethodByNamespace works by computing flow distinguisher with the user requested namespace. Any\n\t// user requesting the namespace will be put into the same queue for processing.\n\t// FlowDistinguisherMethodByNamespaceType specifies that the flow distinguisher is the namespace of the object"
  },
  {
    "id" : "8990f1fa-6553-4a5d-b8c5-ee5bbd7feb2c",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-250582074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad60720-6794-43d5-bed5-00d421c7e453",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "It is critical to understand that the namespace here is the namespace of the subject, not the object.  Those are standard jargon in authorization in the wider world, where we typically talk about subject, verb, and object.  The comment is a little confusing in this context, due to its use of the word \"object\".  How about saying something like \"`namespace`, if any, of the objects that this Subject is to match\"?",
        "createdAt" : "2019-06-12T16:23:56Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b9f97e16-d3b9-4b47-bc8a-d46647c9d590",
        "parentId" : "1ad60720-6794-43d5-bed5-00d421c7e453",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i don't think so.. subject doesn't belong to any namespace.. it's the namespace of the referenced service-account.. isn't it better to align w/ the comment in the rbac api?",
        "createdAt" : "2019-06-17T08:21:14Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "38cdd0e5-ce51-4d3d-927a-0eac5a3421ac",
        "parentId" : "1ad60720-6794-43d5-bed5-00d421c7e453",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "A `ServiceAccount` object _is_ in a namespace.\r\nThe comment currently in the rbac source is not very clear.  I have opened an issue on that.  I think it is OK to write a clearer comment, if we are going to have our own copy of the type.  It would also be good to have a comment on our Subject type, saying something like \"An object of this type has the same function as an rbac v1 Subject, namely to match a set of users\".  Note that the doc https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding starts by identifying the job of a Subject as being to identify \"a user or set of users\".",
        "createdAt" : "2019-06-17T15:45:42Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +260,264 @@\t// `name` of the object being referenced.\n\tName string\n\t// `namespace` of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\n\t// the Authorizer should report an error.\n\t// +optional"
  },
  {
    "id" : "a44fce76-accb-4897-ae00-c40edc1b51a4",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-251098708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "By comparison with rbac, I have realized that we are missing something here.  I asked myself why does rbac have ClusterRole as well as Role?  The answer is about the namespace of the object that the request accesses.  Note that PolicyRuleWithSubjects currently says nothing about this namespace.\r\n\r\nI suggest that we add `Namespace` here or to `PolicyRule` and stipulate that the Namespace must be empty to match a non-namespaced resource or non-resource.",
        "createdAt" : "2019-06-12T16:27:49Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "4c3c9308-48e2-41bf-8d4b-ea42cfa00238",
        "parentId" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "yeah, +1 .. how did i miss that in the first place.. ",
        "createdAt" : "2019-06-17T08:23:55Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "93031c9d-c380-4045-8be8-e5b54f58ba5b",
        "parentId" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "but wait.. but do we really need a flow-schema to match a set of namespace? can we achieve the same effect using the by-namespace flow-distinguisher?",
        "createdAt" : "2019-06-17T08:39:38Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "bc6c08b0-f83b-4b0e-98f6-d036954cb45d",
        "parentId" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I just noticed that I forgot to say that we should define a value of the `Namespace` field that, in the case of namespaced objects, does not restrict on namespace (e.g., `NamespaceAll = \"*\"` or `NamespaceAll = \"\"`).\r\n\r\nRemember that one FlowSchema has a slice of Subject, so it is enough for each Subject to be specific to one namespace (or not filter on namespace) --- unless and until we discover a use case where what is desired is something like a regex on namespace (and we have _that_ issue on all our fields, again this is one reason I started with a predicate-based approach).",
        "createdAt" : "2019-06-17T15:51:47Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "957b5430-aef1-43a9-9b1e-ad1b171c32f1",
        "parentId" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Note also that the flow distinguisher method plays no role in deciding whether a given FlowSchema matches a given request.  So no, we can not use any flow distinguisher method to get the effect of restricting a FlowSchema to match only requests from service accounts in a given namespace.",
        "createdAt" : "2019-06-17T17:38:56Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "76c12a11-f190-458a-af58-b86c225e5e0c",
        "parentId" : "9c2958e2-5380-4e42-857a-6d30983b9823",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Note that the example configuration in the KEP (https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/20190228-priority-and-fairness.md#example-configuration) includes some filtering on the object namespace.",
        "createdAt" : "2019-06-18T13:33:07Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@// PolicyRuleWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject\n// making the request, the verb being requested, and the resource to be acted upon.\ntype PolicyRuleWithSubjects struct {\n\t// `subjects` is the list of normal user, serviceaccount, or group that this rule cares about.\n\t// +optional"
  },
  {
    "id" : "3884d0fe-1a3a-40a8-acc0-4f8de9cf71b6",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-249056340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2539817c-f633-48f9-b878-ec18bbb4e880",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "golint complains about missing comments here.  See https://prow.k8s.io/view/gcs/kubernetes-jenkins/pr-logs/pull/77048/pull-kubernetes-verify/1138826765037211648",
        "createdAt" : "2019-06-12T22:50:16Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@\tFlowDistinguisherMethodByNamespaceType FlowDistinguisherMethodType = \"ByNamespace\"\n\n\tGroupKind          = \"Group\"\n\tServiceAccountKind = \"ServiceAccount\"\n\tUserKind           = \"User\""
  },
  {
    "id" : "87e39336-b12a-4ab9-961c-96bd75f6fb21",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-250356225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6df6f635-fcc7-4ced-9a7b-c4d6cc125be0",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The reference here to \"the Authorizer\" is copied from rbac and is not quite right in the context here, where \"the Authorizer\" is not a defined term.",
        "createdAt" : "2019-06-12T23:25:09Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "616dd127-b997-4744-9102-ca18962fa541",
        "parentId" : "6df6f635-fcc7-4ced-9a7b-c4d6cc125be0",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "updated, it's copied from rbac api. indeed, it should reworded.",
        "createdAt" : "2019-06-17T08:30:21Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +261,265 @@\tName string\n\t// `namespace` of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\n\t// the Authorizer should report an error.\n\t// +optional\n\tNamespace string"
  },
  {
    "id" : "71717a94-4bcd-44c0-acfe-60d2894abc92",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-250595952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fbee885-6264-4af5-a09b-e4207c4249da",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If I understand correctly, there is currently no way to write a `Subject` that matches all service accounts in a particular namespace.  Do we want to add that?",
        "createdAt" : "2019-06-12T23:28:54Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "88e434f5-aacc-42c6-b7a3-a48f3c416040",
        "parentId" : "1fbee885-6264-4af5-a09b-e4207c4249da",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "there's a group `system:serviceaccounts` doing the same",
        "createdAt" : "2019-06-17T08:31:01Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "93ba86ad-d999-41cb-8fa7-0a49c20a6962",
        "parentId" : "1fbee885-6264-4af5-a09b-e4207c4249da",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Oh, I see that the end of https://kubernetes.io/docs/reference/access-authn-authz/authentication/#service-account-tokens defines the group name pattern \"system:serviceaccounts:(NAMESPACE)\".  That accomplishes part of what am thinking about here, but not all.  Note that a service account can be matched in any of three ways: based on its username, based on its group name(s), or as an object of `ServiceAccount` kind.  It is the latter case that I am thinking about here.  If we defined a value for the `Name` field here that matched all names, then this woud be another way to write a Subject that maches all service accounts in a particular namespace.  But this is not a critical need, since there is another way to do it.\r\n\r\nFor an interesting comparison, if you look at the discussion in https://groups.google.com/forum/#!topic/kubernetes-sig-auth/U_0xYKF7ldQ , you see a preference for matching service accounts as references to objects of the `ServiceAccount` kind.  The reason for that preference --- the ability to pick up the namespace from context --- does not apply here.  But it is interesting to note that there _is_ that preference for this other use of the Subject type.",
        "createdAt" : "2019-06-17T16:08:58Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +258,262 @@\t// +optional\n\tAPIGroup string\n\t// `name` of the object being referenced.\n\tName string\n\t// `namespace` of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty"
  },
  {
    "id" : "9459c4e2-096d-4d6f-a295-32f507786b62",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-257593819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00682ff0-01af-44ac-9bc9-a759908e47f4",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "On further thought, I see no reason to forbid a value of zero here.  It can be treated regularly.  Like any other value for the queue length limit, it is a bound on the length of the queue.  Setting it to zero means the admin does not want requests of this priority level to wait in a queue, they may only be executed immediately and only if this priority level has available concurrency.  I see no reason to forbid this setting.",
        "createdAt" : "2019-07-03T16:06:56Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +215,219 @@\tHandSize int32\n\t// `queueLengthLimit` is a length limit applied to each queue belongs to the priority.  The value must be positive\n\t// for a non-exempt priority level.\n\t// +optional\n\tQueueLengthLimit int32"
  },
  {
    "id" : "d83ddb6e-db0f-4b42-8d7c-8f863a908752",
    "prId" : 77048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77048#pullrequestreview-257593819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9c3c592-5282-44ac-8ff5-ae32b1274d24",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This type should include `Namespace string` or `Namespaces []string` because filtering on object namespace is something we agreed to in the KEP, is something we see in rbac, and is something we see in our example configuration (which is our initial estimate of our default configuration).\r\nWe could accomplish namespace filtering by putting the filter either here or in `PolicyRule`.  Putting it here preserves the alignment of our `PolicyRule` with that of v1 rbac.",
        "createdAt" : "2019-07-03T16:17:16Z",
        "updatedAt" : "2019-07-04T15:48:18Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2d8b964f0f108171a6ff29a0a3c0e8b3d03c08d",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@\t// Required.\n\tRule PolicyRule\n}\n\n// FlowSchemaStatus represents the current state of a flow-schema."
  }
]