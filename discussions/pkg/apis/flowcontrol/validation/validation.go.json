[
  {
    "id" : "5dd8d308-361d-4a3d-92d8-df09eadb78f2",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-340994796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e58c9896-75ea-4b52-8249-ef1bccecd18b",
        "parentId" : null,
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "This conflicts with the decision to make the MatchingPrecedence a non-pointer -- the test should be \"< 0\" now. But changing the type to uint32 would give you that check for free, I think...",
        "createdAt" : "2020-01-09T20:16:08Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "5b4cdf74-79bd-4357-9b24-84c18624e5ae",
        "parentId" : "e58c9896-75ea-4b52-8249-ef1bccecd18b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "To be clear, we are currently not making it a pointer.",
        "createdAt" : "2020-01-09T20:34:50Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cc6fca76-964d-4fc7-837d-afd58bb77ca9",
        "parentId" : "e58c9896-75ea-4b52-8249-ef1bccecd18b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "@jktomer with the defaulting in place, there is no real difference between `< 0` and `<= 0`.\r\n\r\nTo be clear, we are using the sort of defaulting that happens _before_ validation.\r\n\r\nIIRC we specfically chose `<=` so that if the defaulting were faulty or removed then the validation check would catch problems.",
        "createdAt" : "2020-01-09T23:32:00Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "893f2ed2-00a1-4936-9bc4-ae19c6ddfbdf",
        "parentId" : "e58c9896-75ea-4b52-8249-ef1bccecd18b",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "> IIRC we specfically chose <= so that if the defaulting were faulty or removed then the validation check would catch problems.\r\n\r\nyes, in the past meetings we agreed that validation should not reply on defaulting, the correctness of the two goes separately.",
        "createdAt" : "2020-01-10T07:46:50Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +87,91 @@func ValidateFlowSchemaSpec(spec *flowcontrol.FlowSchemaSpec, fldPath *field.Path) field.ErrorList {\n\tvar allErrs field.ErrorList\n\tif spec.MatchingPrecedence <= 0 {\n\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"matchingPrecedence\"), spec.MatchingPrecedence, \"must be a positive value\"))\n\t}"
  },
  {
    "id" : "da0c2d1e-c2d9-47aa-8e8b-eaa2ec4b5ee8",
    "prId" : 84900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84900#pullrequestreview-314505979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11191f32-693d-4228-914f-d7c2595ee372",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We should require that if \"*\" is present, one mustn't also reference specific namespaces, although it's OK to have \"Cluster Scope\" too.",
        "createdAt" : "2019-11-08T23:09:11Z",
        "updatedAt" : "2019-11-14T06:06:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "793b5a7c9aa22fa0bc4417558327c57044f86fbe",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +257,261 @@\t\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"namespaces\").Index(idx), tgtNS, nsErrIntro+msg))\n\t\t\t}\n\t\t}\n\t}\n"
  },
  {
    "id" : "f3498aed-a809-46af-a0a3-fc918d4f314b",
    "prId" : 84771,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84771#pullrequestreview-315057347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a249b9a-b72a-4eed-8f6c-1aba57dabb58",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "we should consider eliminate this nil check by assigning an empty struct if the type is \"Limited\" __and__ the field is a nil pointer, so that the inner defaulting can work. otherwise this validation is forcing users to set an empty struct for the field even if it doesn't really make a difference from nil pointer:\r\n```\r\nspec:\r\n   type: Limited\r\n   limited: {} # we should not force users to set this empty struct \r\n               # if it can be fully defaulted\r\n```",
        "createdAt" : "2019-11-11T07:47:32Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "2054ef0f-f3de-439c-b898-eb3a3041cb7a",
        "parentId" : "0a249b9a-b72a-4eed-8f6c-1aba57dabb58",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I agree",
        "createdAt" : "2019-11-11T17:51:13Z",
        "updatedAt" : "2019-11-13T16:06:35Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9bc2bcf620fccd319e6e4b1b67c5426c87052ec",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +299,303 @@\t\t}\n\tcase flowcontrol.PriorityLevelEnablementLimited:\n\t\tif spec.Limited == nil {\n\t\t\tallErrs = append(allErrs, field.Required(fldPath.Child(\"limited\"), \"must not be empty\"))\n\t\t} else {"
  },
  {
    "id" : "fe01bfc9-3891-4a45-bd2a-72420b5dc6d6",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-307345999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87a53506-d1f5-4b5a-92f8-efdbbc2e8cf1",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This is not checking for URL prefixes that the comment says are illegal --- but should.",
        "createdAt" : "2019-10-24T17:28:25Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "a64642af-3318-4fa1-a47c-acc2858d5e99",
        "parentId" : "87a53506-d1f5-4b5a-92f8-efdbbc2e8cf1",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i dont see such validation in rbac, are we starting that from this pull? i think it will involve more issues.",
        "createdAt" : "2019-10-25T16:05:41Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "92c5d5e7-1185-4c70-ab35-aa77ec6a2a38",
        "parentId" : "87a53506-d1f5-4b5a-92f8-efdbbc2e8cf1",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Are there difficult issues in enforcing the comments?\r\n\r\nWe can leave some non-interface-changing work for later PRs, but I think we will not be done until the comments match the validation logic and the handling by the implementation.",
        "createdAt" : "2019-10-25T17:35:32Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@\n// ValidateFlowSchemaNonResourcePolicyRule validates non-resource policy-rule in the flow-schema.\nfunc ValidateFlowSchemaNonResourcePolicyRule(rule *flowcontrol.NonResourcePolicyRule, fldPath *field.Path) field.ErrorList {\n\tvar allErrs field.ErrorList\n"
  },
  {
    "id" : "f4083cdd-17c5-44c3-88e0-6f466b68e894",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-307343844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1126a4f-9e15-4905-8daf-7574140b1508",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "what about connect, exec ?",
        "createdAt" : "2019-10-24T17:29:55Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6325d8c3-8250-41e9-b06f-6cbbe6a18ec6",
        "parentId" : "c1126a4f-9e15-4905-8daf-7574140b1508",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "ref https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#websockets-and-spdy, it says GET/POST will cover all the streaming calls",
        "createdAt" : "2019-10-25T07:06:46Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "b7855b63-5632-4cdd-9828-934219aec076",
        "parentId" : "c1126a4f-9e15-4905-8daf-7574140b1508",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "OK, and https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/20190228-priority-and-fairness.md#log-and-exec-on-workload-pod shows \"get\" and \"create\" on subresources.",
        "createdAt" : "2019-10-25T17:21:06Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@var priorityLevelConfigurationQueuingMaxQueues int32 = 10 * 1000 * 1000 // 10^7\n\nvar supportedVerbs = sets.NewString(\n\t\"get\",\n\t\"list\","
  },
  {
    "id" : "aacd8804-2ad7-4e74-bab2-06b2b4d24b8f",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-307082998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e641d05-9dc6-442e-ac12-abedec97e4a6",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "In this case the validation should insist that the Queuing field hold `nil`, right?",
        "createdAt" : "2019-10-24T17:33:04Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "60dcfb9e-cf08-493a-8760-d02f1307edee",
        "parentId" : "4e641d05-9dc6-442e-ac12-abedec97e4a6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes",
        "createdAt" : "2019-10-24T23:10:24Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "671d410f-2948-4531-9a67-94129add4ff0",
        "parentId" : "4e641d05-9dc6-442e-ac12-abedec97e4a6",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "added validation",
        "createdAt" : "2019-10-25T09:23:12Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +264,268 @@\tvar allErrs field.ErrorList\n\tswitch spec.Type {\n\tcase flowcontrol.PriorityLevelQueuingTypeExempt:\n\t\tif spec.Queuing != nil {\n\t\t\tallErrs = append(allErrs, field.Forbidden(fldPath.Child(\"queuing\"), \"must be nil if the type is not Queuing\"))"
  },
  {
    "id" : "6b70299e-dfee-4d24-8ade-b6533c7c5e92",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-308274092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "264de358-f7c5-4043-9d4e-0f7526822f25",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: The check here is that it is non-negative...",
        "createdAt" : "2019-10-24T22:14:40Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bf0914aa-56c0-4c54-abf1-9536039480cc",
        "parentId" : "264de358-f7c5-4043-9d4e-0f7526822f25",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "A value of `0` is never going to appear here, the defaulting code ensures that.",
        "createdAt" : "2019-10-25T02:05:09Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "14325ef7-92bd-45b1-b867-ef3b7d0c72e0",
        "parentId" : "264de358-f7c5-4043-9d4e-0f7526822f25",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "yes, the defaulting will make sure 0 wont happen, are we validating that anyway? @lavalamp ",
        "createdAt" : "2019-10-25T07:32:17Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "3f42ef08-4229-45ad-956e-54cfcc56cfce",
        "parentId" : "264de358-f7c5-4043-9d4e-0f7526822f25",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "the same question applies all the suggestions on `<= 0`, they all have a default now",
        "createdAt" : "2019-10-25T09:26:06Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "c714773a-1db2-49fb-9839-107ae207a9d2",
        "parentId" : "264de358-f7c5-4043-9d4e-0f7526822f25",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "We have decided to go with checking whether the value is positive and saying \"must be positive\" in the error message, because (1) this removes the \"long-range dependency\" on defaulting code and (2) the error message is consistent with the check.",
        "createdAt" : "2019-10-29T04:49:12Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@\tvar allErrs field.ErrorList\n\tif spec.MatchingPrecedence <= 0 {\n\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"matchingPrecedence\"), spec.MatchingPrecedence, \"must be positive value\"))\n\t}\n\tif spec.DistinguisherMethod != nil {"
  },
  {
    "id" : "05a9e3ca-d324-4776-9981-28401349fd46",
    "prId" : 83671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83671#pullrequestreview-307345999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b5fe42a-e074-4b41-841f-aaf88e5c9186",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: the name and namespace checks in this function are essentially the same, but they are structured differently, which is confusing? I think I prefer this if/else construction to the if/if construction for name above.",
        "createdAt" : "2019-10-24T22:49:18Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d25521fe-9821-4ddf-b0ff-254fe83e6893",
        "parentId" : "8b5fe42a-e074-4b41-841f-aaf88e5c9186",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Note that for Name we need special treatment for `\"*\"` but we do not have that for Namespace.\r\n\r\nThere is a bug here in the check on Name.  If Name is empty the validation should raise a complaint, but doesn't.",
        "createdAt" : "2019-10-25T02:09:53Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "554d380c-510d-4eb8-960d-ef06c84c4f56",
        "parentId" : "8b5fe42a-e074-4b41-841f-aaf88e5c9186",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : " i refactored throughout the validation code with if/else construction",
        "createdAt" : "2019-10-25T09:27:36Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "b7f88228-c10e-4f9b-81fb-df28903c3110",
        "parentId" : "8b5fe42a-e074-4b41-841f-aaf88e5c9186",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "It could be more uniform: test `len(...) == 0` for both fields, or test `len(...) > 0` for both fields.  Also, I see the error produced in the zero length case is a little different.",
        "createdAt" : "2019-10-25T17:33:36Z",
        "updatedAt" : "2019-10-29T05:00:23Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6db3edff108c568a20688e575be4164768836cd7",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +150,154 @@\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"namespace\"), subject.Namespace, msg))\n\t\t}\n\t} else {\n\t\tallErrs = append(allErrs, field.Required(fldPath.Child(\"namespace\"), \"must specify namespace for service account\"))\n\t}"
  },
  {
    "id" : "3012d75e-071b-419b-b7da-cc6fe0e1f86e",
    "prId" : 81833,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81833#pullrequestreview-279032267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45ce0732-a3d5-435a-b0cb-ea6a98dd3150",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "This test and the previous two are covered by `shufflesharding.ValidateParameters`",
        "createdAt" : "2019-08-23T14:24:18Z",
        "updatedAt" : "2019-08-23T14:24:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e19bee150fee674d94ed0000becf5676e8fd414",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +215,219 @@\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"handSize\"), spec.HandSize, \"must be positive\"))\n\t\t}\n\t\tif spec.HandSize > spec.Queues {\n\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"handSize\"), spec.HandSize,\n\t\t\t\tfmt.Sprintf(\"should not be greater than queues (%d)\", spec.Queues)))"
  },
  {
    "id" : "70b0e4a7-ce97-440f-b003-eaf56670030a",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-266586343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221b9884-9efb-44d6-8817-7a8b29706f50",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "/cc @mars1024",
        "createdAt" : "2019-07-25T12:19:56Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +203,207 @@}\n\nfunc ValidatePriorityLevelConfigurationSpec(spec *flowcontrol.PriorityLevelConfigurationSpec, name string, fldPath *field.Path) field.ErrorList {\n\tvar allErrs field.ErrorList\n\tif name != flowcontrol.PriorityLevelConfigurationNameSystemTop && spec.Exempt {"
  },
  {
    "id" : "c5def5fe-ac10-4097-a345-3169a64f3856",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-269417869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42337fc9-a694-40d5-a8da-6c829f8454dc",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I do not think we have a requirement that there is at least one rule.  An empty set of rules has natural semantics and the implementation does not need to take special care in this case.",
        "createdAt" : "2019-07-25T14:45:18Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "3eed2b09-4ada-4807-9864-c5c93dcdcf18",
        "parentId" : "42337fc9-a694-40d5-a8da-6c829f8454dc",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's basically copied from rbac validation. how will users knows whether empty rules means \"all\" or \"none\"?",
        "createdAt" : "2019-07-26T07:46:12Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "c93e7392-5f10-4014-a256-656597bc5f74",
        "parentId" : "42337fc9-a694-40d5-a8da-6c829f8454dc",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Rules are combined by \"or\".  Everybody knows that reducing the empty list by \"or\" yields `false`.",
        "createdAt" : "2019-07-31T05:09:16Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "157373fd-e4aa-4586-b6da-28ffdf419eeb",
        "parentId" : "42337fc9-a694-40d5-a8da-6c829f8454dc",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's better to keep consistent w/ rbac i suppose.. otherwise it is challenging user-experience, users have to think about the differences between the very similar structures sometimes..",
        "createdAt" : "2019-07-31T16:49:31Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "8869446f-e1d1-41ea-80ad-432eda6a591a",
        "parentId" : "42337fc9-a694-40d5-a8da-6c829f8454dc",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, being consistent with rbac in this matter is OK with me.",
        "createdAt" : "2019-08-01T06:28:53Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t\t}\n\t} else {\n\t\tallErrs = append(allErrs, field.Required(fldPath.Child(\"rules\"), \"rules must contain at least one value\"))\n\t}\n\treturn allErrs"
  },
  {
    "id" : "317895cf-5168-4043-81ba-3ef7cdff5489",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-268788196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ebfac1-8692-4513-a74b-4c37a1f2e542",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I do not think we have a requirement that there is at least one subject. An empty set of subjects has natural semantics and the implementation does not need to take special care in this case.",
        "createdAt" : "2019-07-25T14:47:43Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "f34c0952-4ea1-4d1b-9bed-88f344d2ed66",
        "parentId" : "87ebfac1-8692-4513-a74b-4c37a1f2e542",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "it's basically copied from rbac validation. how will users knows whether empty subject list means \"all\" or \"none\"?",
        "createdAt" : "2019-07-26T07:46:44Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "c426221d-b517-47d6-bfe6-fd2e5ec3a478",
        "parentId" : "87ebfac1-8692-4513-a74b-4c37a1f2e542",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The subjects list is a union.  Everybody knows what the union of an empty set is.  If we do not state the opposite, it is natural to assume the normal semantics.",
        "createdAt" : "2019-07-26T08:02:20Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "75193713-e879-4f66-a9c2-de76d35a9920",
        "parentId" : "87ebfac1-8692-4513-a74b-4c37a1f2e542",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The problem here is that our logic is a hierarchy of alternating conjunction and disjunction: a PolicyRuleWithSubjects matches a request if _both_ the Subjects matches and the Rule matches, and a Subjects matches if _any_ its members matches.  While JSON can distinguish between Subjects being the empty list and Subjects being omitted, the machinery used to convert to our golang data type conflates the two.  So while they have opposite natural semantics, we have to give them the same semantics.  Or just forbid the problem.  That seems to be what rbac has done, and it is OK with me.",
        "createdAt" : "2019-07-31T05:14:49Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\t\t}\n\t} else {\n\t\tallErrs = append(allErrs, field.Required(fldPath.Child(\"subjects\"), \"subjects must contain at least one value\"))\n\t}\n\tallErrs = append(allErrs, ValidateFlowSchemaPolicyRule(&rule.Rule, fldPath.Child(\"rule\"))...)"
  },
  {
    "id" : "2b9d7a08-5132-4221-8a4e-3823a775fdb2",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-267037200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f04e7b41-73a2-491e-be05-f502bf3d7cd7",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "What about checking that Namespace is empty?",
        "createdAt" : "2019-07-25T14:55:25Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "f385f0b3-a520-4d78-b7ff-9b778e22b47c",
        "parentId" : "f04e7b41-73a2-491e-be05-f502bf3d7cd7",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "will update in a follow-up commit.",
        "createdAt" : "2019-07-26T07:47:59Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +141,145 @@\t\tif subject.APIGroup != flowcontrol.GroupName {\n\t\t\tallErrs = append(allErrs, field.NotSupported(fldPath.Child(\"apiGroup\"), subject.APIGroup, []string{flowcontrol.GroupName}))\n\t\t}\n\t\tif len(subject.Namespace) > 0 {\n\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"namespace\"), subject.Namespace, \"must not set namespace for group-kind subject\"))"
  },
  {
    "id" : "c78dd95b-d09f-4860-af81-b29d8a29b05e",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-271686770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb1a8a8e-63b5-40ea-8217-8bb7a67bafe4",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "What about checking the verb in this case?  IIRC, HTTP places some constraints but does not have a fixed vocabulary.  Also, does the kube apiserver support only a fixed vocabulary?",
        "createdAt" : "2019-08-02T20:25:52Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "4e434a51-c77a-45d1-b75e-67e423fe614e",
        "parentId" : "bb1a8a8e-63b5-40ea-8217-8bb7a67bafe4",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "for now, i remember only `GET` and `POST` is supported for non-resource urls. but let's keep in consistent w/ rbac validation for the current stage",
        "createdAt" : "2019-08-05T05:11:10Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "4bf07fec-2e53-461e-8ee1-56048d316891",
        "parentId" : "bb1a8a8e-63b5-40ea-8217-8bb7a67bafe4",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Yes, it's not a big problem to under-validate this; the only down side is that admins will be able to write a rule that matches nothing.",
        "createdAt" : "2019-08-07T01:13:30Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\tif hasWildcard(rule.NonResourceURLs) && len(rule.NonResourceURLs) > 1 {\n\t\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"nonResourceURLs\"), rule.NonResourceURLs, \"if '*' is present, must not specify other non-resource URLs\"))\n\t\t}\n\t\treturn allErrs\n\t}"
  },
  {
    "id" : "53fd017c-b6cb-441e-aaed-368dfe133202",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-270560924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bf7f689-c854-4d3f-b54f-94d3583e2548",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I thought we agreed to use `HandSize*LogBase2(NumQueues)` rather than exact falling factorial.",
        "createdAt" : "2019-08-02T20:32:11Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "8bb86bdf-ee19-4ec2-8313-f5abfe94d2ea",
        "parentId" : "3bf7f689-c854-4d3f-b54f-94d3583e2548",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i think we can address that in another pull #80710?",
        "createdAt" : "2019-08-05T05:17:34Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +244,248 @@\tif !validateShuffleShardingParameters(spec.HandSize, spec.Queues) {\n\t\tallErrs = append(allErrs, field.Invalid(fldPath.Child(\"handSize\"), spec.HandSize,\n\t\t\tfmt.Sprintf(\"falling factorial of handSize (%d) and queues (%d) exceeds %d bits\", spec.HandSize, spec.Queues, maxHashBits)))\n\t}\n\treturn allErrs"
  }
]