[
  {
    "id" : "7cda71a4-ac6d-417b-9a3a-7ca81cdfd69c",
    "prId" : 99275,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99275#pullrequestreview-605576758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dc75ed5-d4f7-4506-8edf-2cdd7faf741e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Add another - same this case but set namespace to \"\" - it should fail",
        "createdAt" : "2021-03-05T21:03:53Z",
        "updatedAt" : "2021-03-06T19:15:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7fc92089a42aff0c2f10d56b0ee290440adfbc4",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +2426,2430 @@\t\t\t\t\"`parameters.scope` is set to 'Namespace'\")},\n\t\t},\n\t\t\"namespace is forbidden when scope is Cluster\": {\n\t\t\tingressClass: networking.IngressClass{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{Name: \"test123\"},"
  },
  {
    "id" : "6198f1f6-3562-47af-b4db-646ea91c2393",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-597421063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27f2f851-a688-4a45-97fd-0035d3558522",
        "parentId" : null,
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "I think we can add networkPolicy info in log. If faild, we can check it quickly. ",
        "createdAt" : "2021-02-23T11:55:19Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      },
      {
        "id" : "570f5485-aa6f-4098-b3a9-1c25649ef179",
        "parentId" : "27f2f851-a688-4a45-97fd-0035d3558522",
        "authorId" : "be6a87c8-8fd7-411a-89ed-f384e381c072",
        "body" : "The networkPolicy struct has too many fields and again I think this would be a lot of noise in the test result. Would you print the whole struct or some specific fields? ",
        "createdAt" : "2021-02-24T12:25:11Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "be6a87c8-8fd7-411a-89ed-f384e381c072",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 1344,
    "diffHunk" : "@@ -1,1 +376,380 @@\tfor testName, networkPolicy := range errorCases {\n\t\tif errs := ValidateNetworkPolicy(networkPolicy); len(errs) == 0 {\n\t\t\tt.Errorf(\"Expected failure for test: %s\", testName)\n\t\t}\n\t}"
  },
  {
    "id" : "c996e50e-75d0-4345-a083-83ac8603624f",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-603311256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e1a236d-2ea8-4d15-9109-20d45ebc3585",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I feel like these can stack.  `setIngressFromEmptyFirstElement` should imply `setIngressEmptyFirstElement` shouldn't it?  Otherwise the caller has to do as many steps as there are levels of struct nesting.  I'll comment at the casller too.",
        "createdAt" : "2021-03-03T20:52:06Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 466,
    "diffHunk" : "@@ -1,1 +80,84 @@\t}\n\n\tsetIngressFromEmptyFirstElement := func(networkPolicy *networking.NetworkPolicy) {\n\t\tif networkPolicy.Spec.Ingress == nil {\n\t\t\tsetIngressEmptyFirstElement(networkPolicy)"
  },
  {
    "id" : "48f7b6c7-c169-4258-b10f-03eabcc0e04e",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-607680439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d22fbc-5e8a-4a27-8380-7125fdcd8871",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "do you even want to test this?  For example: is it useful for a test to set `spec.ingress[]` to a 2-element list and then call this?  I feel like the more opinionated and less subtle these are, the easier they are to comprehend.",
        "createdAt" : "2021-03-09T18:05:38Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2c876f0e-9c43-44d6-b0a0-2007edec2cae",
        "parentId" : "39d22fbc-5e8a-4a27-8380-7125fdcd8871",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I see the IfEmpty() forms below - I won't hold your feet to the fire on this aspect.  Mostly just something to keep in mind.  The more `if` clauses the tweaks grow, the more likely we are to screw it up :)",
        "createdAt" : "2021-03-09T18:09:03Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 467,
    "diffHunk" : "@@ -1,1 +81,85 @@\n\tsetIngressFromEmptyFirstElement := func(networkPolicy *networking.NetworkPolicy) {\n\t\tif networkPolicy.Spec.Ingress == nil {\n\t\t\tsetIngressEmptyFirstElement(networkPolicy)\n\t\t}"
  },
  {
    "id" : "f7bec125-0f3e-4f81-a2d8-114497a861a7",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-607680439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d40e53-3f6c-401f-8f03-220fffb01f5d",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This one is so much shorter than the equialent `FromPodSelector`?  I'd expect them to be congruent",
        "createdAt" : "2021-03-09T18:27:06Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 510,
    "diffHunk" : "@@ -1,1 +124,128 @@\n\tsetIngressFromNamespaceSelector := func(networkPolicy *networking.NetworkPolicy) {\n\t\tsetIngressFromIfEmpty(networkPolicy)\n\t\tnetworkPolicy.Spec.Ingress[0].From[0].NamespaceSelector = &metav1.LabelSelector{\n\t\t\tMatchLabels: map[string]string{\"c\": \"d\"},"
  },
  {
    "id" : "98fe2cd1-217b-41c5-a670-7ba889f626fc",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-607680439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd0b733f-54c2-42b2-86e4-b29a7f96d0ac",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "suggest linewrap on func",
        "createdAt" : "2021-03-09T18:34:22Z",
        "updatedAt" : "2021-03-25T16:13:30Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 723,
    "diffHunk" : "@@ -1,1 +269,273 @@\t\t\"podSelector and ipBlock\":       makeNetworkPolicyCustom(setEgressToPodSelector, setEgressToIPBlockIPV4),\n\t\t\"missing from and to type\":      makeNetworkPolicyCustom(setIngressFromEmptyFirstElement, setEgressToEmptyFirstElement),\n\t\t\"invalid spec.podSelector\": makeNetworkPolicyCustom(setIngressFromNamespaceSelector, func(networkPolicy *networking.NetworkPolicy) {\n\t\t\tnetworkPolicy.Spec = networking.NetworkPolicySpec{\n\t\t\t\tPodSelector: metav1.LabelSelector{"
  },
  {
    "id" : "722699f8-b12d-4375-a3d4-d0d2f1214bff",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-630768365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65a07dc8-65a9-424f-87fc-3f2543beced1",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You could define a `setPolicies(p ...string)` tweak",
        "createdAt" : "2021-04-07T23:02:55Z",
        "updatedAt" : "2021-04-07T23:18:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 1304,
    "diffHunk" : "@@ -1,1 +337,341 @@\t\t\tnetworkPolicy.Spec.PolicyTypes = []networking.PolicyType{\"foo\", \"bar\"}\n\t\t}),\n\t\t\"too many policyTypes\": makeNetworkPolicyCustom(setEgressToIPBlockIPV4, func(networkPolicy *networking.NetworkPolicy) {\n\t\t\tnetworkPolicy.Spec.PolicyTypes = []networking.PolicyType{\"foo\", \"bar\", \"baz\"}\n\t\t}),"
  },
  {
    "id" : "1a48c46f-fbd4-4307-b268-244213ef9d5b",
    "prId" : 99165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99165#pullrequestreview-630768365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4caef594-da52-466b-b328-97671bdc46dd",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If you wanted to get really fancy, maybe you can do something like:\r\n\r\n```\r\nmakeNetworkPolicyCustom(setIngress(setFrom(setIPBlock(\"fd00:192:168:1::/64\", \"fd00:192:168:2::/64\"\"))))`\r\n```\r\n\r\nIt would probably mean you could remove some tweaks.\r\n\r\nThis could be a followup, of course ;)",
        "createdAt" : "2021-04-07T23:06:05Z",
        "updatedAt" : "2021-04-07T23:18:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c105c9e8a14d30573436288e1fd42ba01f4c2d2",
    "line" : 1295,
    "diffHunk" : "@@ -1,1 +328,332 @@\t\t\t}\n\t\t}),\n\t\t\"except IPv6 is outside of CIDR range\": makeNetworkPolicyCustom(setIngressFromEmptyFirstElement, func(networkPolicy *networking.NetworkPolicy) {\n\t\t\tnetworkPolicy.Spec.Ingress[0].From[0].IPBlock = &networking.IPBlock{\n\t\t\t\tCIDR:   \"fd00:192:168:1::/64\","
  },
  {
    "id" : "23f7e27e-2525-4cb4-abc9-797a0698d3f3",
    "prId" : 98726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98726#pullrequestreview-589304241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad2cc629-5f95-4787-ba8c-1b1be54c8750",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Not going to hold this PR to it, but this is a great example of a place where some helper functions could go a LONG way.\r\n\r\nE.g. this should be something like:\r\n\r\n```\r\n\"invalid endport range defined\": makeService(egress(port(intstr.FromInt(30000), 65537)))\r\n```\r\n\r\nEverything else seems like boilerplate.  Repeat that for every test case in this one test and delete hundreds of LOC ",
        "createdAt" : "2021-02-11T17:44:37Z",
        "updatedAt" : "2021-02-11T17:44:37Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d2f11b55-e1cb-45d0-b926-04c9c284376a",
        "parentId" : "ad2cc629-5f95-4787-ba8c-1b1be54c8750",
        "authorId" : "98561b60-58b0-4984-a6ce-e88415a45854",
        "body" : "will do in a follow-up, thanks Tim for the feedback",
        "createdAt" : "2021-02-12T09:44:18Z",
        "updatedAt" : "2021-02-12T09:44:19Z",
        "lastEditedBy" : "98561b60-58b0-4984-a6ce-e88415a45854",
        "tags" : [
        ]
      }
    ],
    "commit" : "e57ea3215892bb8f7d5658fabb70187bbdc45cd4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1019,1023 @@\t\t\t},\n\t\t},\n\t\t\"invalid endport range defined\": {\n\t\t\tObjectMeta: metav1.ObjectMeta{Name: \"foo\", Namespace: \"bar\"},\n\t\t\tSpec: networking.NetworkPolicySpec{"
  },
  {
    "id" : "66c25696-9b98-42c2-8a97-dc0f0dabc56e",
    "prId" : 97058,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97058#pullrequestreview-580932064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "395ec7c4-8eed-42a3-b853-e1502dd5ba08",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "also need one test for 65536?",
        "createdAt" : "2021-02-02T02:19:45Z",
        "updatedAt" : "2021-02-02T02:19:45Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a687357b6ccb8491a1cb2c76d3f226a00966f3c",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +430,434 @@\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIngress: []networking.NetworkPolicyIngressRule{\n\t\t\t\t\t{\n\t\t\t\t\t\tFrom: []networking.NetworkPolicyPeer{"
  },
  {
    "id" : "3125017b-6775-453c-9b6f-2cf2996b7780",
    "prId" : 88775,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88775#pullrequestreview-369164604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0191b22-942a-40ab-bd40-87a53221f8ed",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "additional unit tests:\r\n\r\nallowed:\r\n* changing spec.backend from resource -> no resource\r\n* changing a path backend from resource -> no resource\r\n* changing a path backend from resource -> resource\r\n* changing a path backend from no resource -> no resource\r\n\r\nnot allowed:\r\n* changing a path backend from no resource -> resource\r\n",
        "createdAt" : "2020-03-04T22:17:02Z",
        "updatedAt" : "2020-03-05T21:09:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "912f05bafbb07ec8c296adaa7dc4d722e57b3ea6",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +1561,1565 @@\t\t\t},\n\t\t\texpectedErrs: field.ErrorList{},\n\t\t},\n\t\t\"changing spec.backend from resource -> no resource\": {\n\t\t\ttweakIngresses: func(newIngress, oldIngress *networking.Ingress) {"
  },
  {
    "id" : "410b1726-f193-4a41-b83b-7fa0424c79d3",
    "prId" : 88775,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88775#pullrequestreview-369164604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b72ae1e4-6604-456f-a1ed-6220132b3a5a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "additional unit tests:\r\n* a path resource backend is not allowed on create\r\n* a path resource backend and service name are not allowed together\r\n* a path resource backend and service port are not allowed together\r\n* a spec.backend resource and service name are not allowed together\r\n* a spec.backend resource and service port are not allowed together",
        "createdAt" : "2020-03-04T22:18:40Z",
        "updatedAt" : "2020-03-05T21:09:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "912f05bafbb07ec8c296adaa7dc4d722e57b3ea6",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +1362,1366 @@\t\t\t},\n\t\t\texpectedErrs: field.ErrorList{field.Forbidden(field.NewPath(\"spec.rules[0].http.paths[0].backend.resource\"), \"not supported; only service backends are supported in this version\")},\n\t\t},\n\t}\n"
  }
]