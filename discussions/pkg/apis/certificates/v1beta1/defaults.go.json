[
  {
    "id" : "82895eed-c7a8-4533-9448-ed7582c2aa53",
    "prId" : 91713,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91713#pullrequestreview-424603710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01de241-43ff-47e6-ad17-09411d23650a",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "+1 much tidier",
        "createdAt" : "2020-06-04T16:03:16Z",
        "updatedAt" : "2020-06-05T22:45:44Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      }
    ],
    "commit" : "db4ca87d9d872b3c31df58860bac996c70df6b5b",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +80,84 @@}\n\nfunc usagesToSet(usages []certificatesv1beta1.KeyUsage) sets.String {\n\tresult := sets.NewString()\n\tfor _, usage := range usages {"
  },
  {
    "id" : "b6ece655-1f86-49ed-8bcd-185dac98d701",
    "prId" : 90191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90191#pullrequestreview-419362376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3cb70c-1663-4a50-8efe-723155f1c60e",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Would it be preferable to build a `[]string` or `[]error` of the issues found here instead of just a single error? It may be that multiple issues are found. Not sure if it's necessary ðŸ˜„",
        "createdAt" : "2020-04-17T16:12:06Z",
        "updatedAt" : "2020-05-28T20:53:43Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "074bfb1c-7538-40f3-bb91-65baffd8390d",
        "parentId" : "4c3cb70c-1663-4a50-8efe-723155f1c60e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think I'll just stick with the first one we hit for now",
        "createdAt" : "2020-05-27T15:49:23Z",
        "updatedAt" : "2020-05-28T20:53:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7049149181189eae304246cc49de78d08eef4f80",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +83,87 @@func ValidateKubeletServingCSR(req *x509.CertificateRequest, usages []certificatesv1beta1.KeyUsage) error {\n\tif !reflect.DeepEqual([]string{\"system:nodes\"}, req.Subject.Organization) {\n\t\treturn organizationNotSystemNodesErr\n\t}\n"
  },
  {
    "id" : "31fcdaee-0683-4fac-9484-2f937584e387",
    "prId" : 90191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90191#pullrequestreview-419361801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0730f308-1fd5-47a8-8adb-2c14705ee097",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "nit: don't need `v1` alias",
        "createdAt" : "2020-05-05T15:19:20Z",
        "updatedAt" : "2020-05-28T20:53:43Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "5fff3a24-1037-46b7-bdde-abde6fba7a7f",
        "parentId" : "0730f308-1fd5-47a8-8adb-2c14705ee097",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "goimports adds it automatically",
        "createdAt" : "2020-05-27T15:48:47Z",
        "updatedAt" : "2020-05-28T20:53:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7049149181189eae304246cc49de78d08eef4f80",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +24,28 @@\n\tcertificatesv1beta1 \"k8s.io/api/certificates/v1beta1\"\n\tv1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/apimachinery/pkg/util/sets\""
  },
  {
    "id" : "7409b519-7061-44a4-95ed-a3636bc78114",
    "prId" : 90191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90191#pullrequestreview-422199430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b535359-ce39-4018-aa7e-23ea26d2464f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So much better",
        "createdAt" : "2020-06-01T21:36:18Z",
        "updatedAt" : "2020-06-01T21:36:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "7049149181189eae304246cc49de78d08eef4f80",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +68,72 @@}\n\nvar (\n\torganizationNotSystemNodesErr = fmt.Errorf(\"subject organization is not system:nodes\")\n\tcommonNameNotSystemNode       = fmt.Errorf(\"subject common name does not begin with system:node:\")"
  },
  {
    "id" : "be61c327-fa9a-4c8f-b32e-d02094e33625",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-366882798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "It seems there is no need to create the second Set.\r\nChecking sizes of the slices and whether each of the second slice is contained in the first Set should suffice.",
        "createdAt" : "2020-02-29T15:44:28Z",
        "updatedAt" : "2020-02-29T15:44:28Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "5efd2682-f460-4a6e-8a54-5ff00cd380d1",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that would return true for `[a, b, c]` vs `[a, a, b]`",
        "createdAt" : "2020-02-29T17:43:19Z",
        "updatedAt" : "2020-02-29T17:43:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "871e2c5d-0d11-48a7-8127-62a365e230a2",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The following would achieve same semantics with one map.\r\n```\r\nfunc equalUnsorted(left, right []certificatesv1beta1.KeyUsage) bool {\r\n\tvar l map[string]int\r\n\tl = make(map[string]int)\r\n\tfor _, s := range left {\r\n\t\tk := string(s)\r\n\t\tcnt := l[k]\r\n\t\tl[k] = cnt + 1\r\n\t}\r\n\tfor _, s := range right {\r\n\t\tk := string(s)\r\n\t\tcnt, ok := l[k]\r\n\t\tif !ok {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tcnt--\r\n\t\tif cnt == 0 {\r\n\t\t\tdelete(l, k)\r\n\t\t} else {\r\n\t\t\tl[k] = cnt\r\n\t\t}\r\n\t}\r\n\treturn len(l) == 0\r\n}\r\n```",
        "createdAt" : "2020-02-29T17:55:51Z",
        "updatedAt" : "2020-02-29T18:02:34Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "06c37974-cf07-47e8-920c-275cf53405a4",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "if we really want to be cheap:\r\n```go\r\nfunc equalUnsorted(left, right []certificatesv1beta1.KeyUsage) bool {\r\n\tif len(left) != len(right) {\r\n\t\treturn false\r\n\t}\r\n\tl := make(map[string]int, len(left))\r\n\tfor _, s := range left {\r\n\t\tk := string(s)\r\n\t\tl[k] = l[k] + 1\r\n\t}\r\n\tfor _, s := range right {\r\n\t\tk := string(s)\r\n\t\tc := l[k]\r\n\t\tif c == 0 {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tl[k] = (c - 1)\r\n\t}\r\n\treturn true\r\n}\r\n```\r\nbut we do use the sets API all over, I'm not sure if this change is desirable.",
        "createdAt" : "2020-02-29T19:19:29Z",
        "updatedAt" : "2020-02-29T19:19:30Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "bf89922b-90d8-4095-a796-d79e3ace7d05",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "```\r\n\tif len(left) != len(right) {\r\n\t\treturn false\r\n\t}\r\n```\r\nWe shouldn't use the above check since there may be duplicate in either side.\r\n```\r\n\t\tc := l[k]\r\n\t\tif c == 0 {\r\n```\r\nThe decrement should be done before checking c against 0.\r\n\r\nI prefer the formation I presented above.\r\nSet is not expressive in this use case. We don't have to use it.",
        "createdAt" : "2020-02-29T19:24:50Z",
        "updatedAt" : "2020-02-29T19:24:50Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "da3da3f3-f43d-4a7a-8ebc-fae2258a28e5",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "> We shouldn't use the above check since there may be duplicate in either side.\r\n\r\nIf we're not checking for _identical_ counts in each side, why even count in the map ...?\r\n\r\n> The decrement should be done before checking c against 0.\r\n\r\nNo, if we decrement to zero then we've had an exact match. If we find an entry with zero on the next check we did not. I did test this code ðŸ™ƒ ",
        "createdAt" : "2020-02-29T19:27:46Z",
        "updatedAt" : "2020-02-29T19:27:46Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "c1820678-ff55-438b-84cf-c04675d09816",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Thanks @BenTheElder for looking at my code.\r\n\r\nBefore we dig deeper into the code, can we get agreement on whether the following are considered equal:\r\n\r\n[a, b] vs [a, a, b]\r\n\r\nAlong the current code, they're equal.\r\nThat was why I said we shouldn't check the lengths of two sides.",
        "createdAt" : "2020-02-29T20:16:45Z",
        "updatedAt" : "2020-02-29T20:16:45Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "373e25bb-92c1-45be-98ca-365acfea6692",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@BenTheElder was right in that the value of the map shouldn't be the number of times we see the same key from the left.\r\nHere is revised code which keeps the current semantics and only uses one map where value of 1 represents 'seen from the left' and value of -1 means 'seen from the right' (regardless the number of times seen):\r\n```\r\nfunc equalUnsorted(left, right []certificatesv1beta1.KeyUsage) bool {\r\n\tvar l map[string]int\r\n\tl = make(map[string]int)\r\n\tfor _, s := range left {\r\n\t\tk := string(s)\r\n\t\tl[k] = 1\r\n\t}\r\n\tcount := 0\r\n\tfor _, s := range right {\r\n\t\tk := string(s)\r\n\t\tval, ok := l[k]\r\n\t\tif !ok {\r\n\t\t\t// not equal if we haven't seen this key from the left\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif val == 1 {\r\n\t\t\tcount++\r\n\t\t\t// we don't want to delete the key since there may be more occurrence of this key in right\r\n\t\t\tl[k] = -1\r\n\t\t}\r\n\t}\r\n\t// if we have seen all the keys from the right, they're equal\r\n\treturn len(l) == count\r\n}\r\n```\r\nI can refine the comment in the code if there is question on how it works or whether it is correct.\r\n\r\nThanks",
        "createdAt" : "2020-02-29T21:14:42Z",
        "updatedAt" : "2020-02-29T21:16:48Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "fc5895e5-b95d-462b-abc2-69a17b86b277",
        "parentId" : "51320892-bcb3-40cb-8412-c5c508c85adf",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "We can keep this on the back burner and look out for frequent calls to similar equality checks. ",
        "createdAt" : "2020-03-01T20:07:19Z",
        "updatedAt" : "2020-03-01T20:07:19Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +123,127 @@\t}\n\tr := sets.NewString()\n\tfor _, s := range right {\n\t\tr.Insert(string(s))\n\t}"
  },
  {
    "id" : "7f8f4fdd-55be-4cce-921b-fa2a302560b1",
    "prId" : 86476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86476#pullrequestreview-335162230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1dcfb3a-cf99-4dc2-9d9f-e7628c1d5f38",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "The approval plugin currently uses `reflect.DeepEqual` for this, so I thought I'd do the same",
        "createdAt" : "2019-12-20T09:58:09Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      }
    ],
    "commit" : "a983356caa9876079eafc5e8dd7806473022e958",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +91,95 @@\nfunc IsKubeletClientCSR(req *x509.CertificateRequest, usages []certificatesv1beta1.KeyUsage) bool {\n\tif !reflect.DeepEqual([]string{\"system:nodes\"}, req.Subject.Organization) {\n\t\treturn false\n\t}"
  },
  {
    "id" : "13ade345-d36b-43a5-8cf1-d7740085a989",
    "prId" : 86476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86476#pullrequestreview-335250503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab47c455-154e-4589-b47b-5fc4054760ed",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "`system:node:` and `system:nodes` feel like they should be constants, but I can only find them defined in kubeadm's `constants` package. Even in the current approver implementation these are hardcoded. If we can decide on a sensible common place to include these definitions, I can refactor this to not duplicate it :)",
        "createdAt" : "2019-12-20T09:59:30Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "f0a199f6-4b1f-45c3-b9da-d9945e52ff5d",
        "parentId" : "ab47c455-154e-4589-b47b-5fc4054760ed",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "They can never change.  I don't really care about a field.  You did right by not picking up a package dep.",
        "createdAt" : "2019-12-20T13:16:43Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a983356caa9876079eafc5e8dd7806473022e958",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +99,103 @@\t}\n\n\tif !strings.HasPrefix(req.Subject.CommonName, \"system:node:\") {\n\t\treturn false\n\t}"
  },
  {
    "id" : "85cb1e9a-b7a0-46a2-b77c-535e0afe6402",
    "prId" : 86476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86476#pullrequestreview-351777701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80f02597-3aad-4408-afbd-a50e7ef958c0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "missing restriction on dns names, emailaddresses, and ip addresses.\r\n\r\nComparing against https://github.com/kubernetes/kubernetes/blob/release-1.10/pkg/controller/certificates/approver/sarapprove.go#L179-L193",
        "createdAt" : "2020-01-31T21:07:02Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a983356caa9876079eafc5e8dd7806473022e958",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +111,115 @@\t\treturn false\n\t}\n\n\treturn true\n}"
  },
  {
    "id" : "2d8df8d5-b8cf-4d02-b09e-557ad80aae98",
    "prId" : 86476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86476#pullrequestreview-353913324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57469691-5c70-495c-a1c5-f73d147d0a40",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "Please add an integration test for defaulting.",
        "createdAt" : "2020-02-03T21:36:11Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "b46a23c3-8c91-408d-9951-e285da25f294",
        "parentId" : "57469691-5c70-495c-a1c5-f73d147d0a40",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Is this best as an integration test or a unit test?",
        "createdAt" : "2020-02-05T13:07:20Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "da210db1-aa25-402e-af54-6817c82568cc",
        "parentId" : "57469691-5c70-495c-a1c5-f73d147d0a40",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "After discussion on Slack, I've added a basic integration test that checks everything is wired up properly, and then unit tests that covers various different cases in-depth.",
        "createdAt" : "2020-02-05T17:43:55Z",
        "updatedAt" : "2020-02-27T10:18:17Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      }
    ],
    "commit" : "a983356caa9876079eafc5e8dd7806473022e958",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +36,40 @@\t}\n\n\tif obj.SignerName == nil {\n\t\tsignerName := DefaultSignerNameFromSpec(obj)\n\t\tobj.SignerName = &signerName"
  }
]