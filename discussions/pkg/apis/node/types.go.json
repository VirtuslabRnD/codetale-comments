[
  {
    "id" : "6e7723c2-f4ab-49c5-a968-0f0a34ce77a0",
    "prId" : 76968,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76968#pullrequestreview-250676530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcff0649-624b-4597-9ccd-17d905843bbf",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This should have a comment about being an alpha field, the same as the one on the pod field.",
        "createdAt" : "2019-06-14T20:46:34Z",
        "updatedAt" : "2019-06-18T14:58:28Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "e1454343-21f9-4e09-891d-bb626cb60c6f",
        "parentId" : "bcff0649-624b-4597-9ccd-17d905843bbf",
        "authorId" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "body" : "updated",
        "createdAt" : "2019-06-17T18:37:47Z",
        "updatedAt" : "2019-06-18T14:58:28Z",
        "lastEditedBy" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e09568c8ead90caa3613c77745808cb6283f9f7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +50,54 @@\t// Overhead represents the resource overhead associated with running a pod for a\n\t// given RuntimeClass. For more details, see\n\t// https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md\n\t// This field is alpha-level as of Kubernetes v1.16, and is only honored by servers\n\t// that enable the PodOverhead feature."
  },
  {
    "id" : "1ea37b1b-e683-4b43-9829-68abd121743e",
    "prId" : 74433,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74433#pullrequestreview-210412663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This comment is confusing. Earlier you state RuntimeClassSpec describes the CRI Implementation to be used and here you are referring to runc which does not implement the CRI. \r\nI get the underlying intention of keeping this field generic, but the way it is described will lead to confusion in the years to come for system integrators.",
        "createdAt" : "2019-02-28T20:27:31Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6cd9cddb-d3d4-4c43-83b3-86f01a12f5af",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : ">  ... and configuration that the CRI implementation **will use** ...\r\n\r\nThe point is that the CRI implementation is the component that actually acts on this value, not the kubelet.\r\n\r\nDo you have any suggestions for how to describe this more clearly? Should I just drop the reference to the CRI implementation? I wanted to clarify that this isn't selecting between CRI-o and containerd though, but rather between runc and runsc, etc.",
        "createdAt" : "2019-03-01T17:07:14Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a43cafd3-350a-4c73-b752-40fd93671cc4",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "What stops someone from using this field for a different purpose that what's intended coz it's upto the CRI runtime to interpret this field? Part of the confusion is due to the use of the word \"runtime\" we discussed in a previous comment.\r\nMaybe you can drop \"configuration\" from `RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use` to ensure this field is clearly expected to be used to specify the underlying `sandboxing` solution?\r\nRe-reading the current version, I feel less confused. Maybe we can wait for @thockin to do a pass over this PR and see if he finds the comments unambiguous. ",
        "createdAt" : "2019-03-01T22:27:47Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "905b0652-42ad-4f91-9bd1-3634bbafce85",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "> What stops someone from using this field for a different purpose that what's intended coz it's upto the CRI runtime to interpret this field? \r\n\r\nNothing, it could be completely abused. Maybe we'll need a concept of runtime conformance eventually?\r\n\r\n> Maybe you can drop \"configuration\"\r\n\r\nI don't want to exclude running the same \"runtime binary\" (e.g. runsc) with different configurations. For example, if we wanted to have a \"gvisor\" and \"gvisor-lite\" runtimeclass, where the \"lite\" version sacrificed some extra defenses in the name of performance (e.g. use the host TCP stack).",
        "createdAt" : "2019-03-01T22:53:31Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "089d6f43-4045-4938-94f2-a347a6901cbe",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "> Nothing, it could be completely abused. Maybe we'll need a concept of runtime conformance eventually?\r\n\r\nHmm.. Probably not coz conformance would only make sense at the \"Runtime Class\" naming level right?",
        "createdAt" : "2019-03-04T22:47:30Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "8b829a9b-a96b-49d5-8fdd-ed528aad4122",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Also, do you expect users to want to pass more arbitrary configuration information through Runtime Class object? The reason I ask is if the Runtime Handler fields should end up becoming an arbitrary list which is only interpretable by runtimes. ",
        "createdAt" : "2019-03-04T22:49:19Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "67075b7f-ff1d-46f6-a1e3-92ea285b1834",
        "parentId" : "023283f6-b4ee-4f2d-8bd3-7fe9d82f058f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nvm, I see below that you intend this not be used to pass arbitrary information by controlling the naming spec",
        "createdAt" : "2019-03-04T22:57:17Z",
        "updatedAt" : "2019-03-07T19:57:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "428e9fa3299161be420fcfa7987d0e37aca3ea01",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\t// handlers are available on every node, and handlers of the same name are\n\t// equivalent on every node.\n\t// For example, a handler called \"runc\" might specify that the runc OCI\n\t// runtime (using native Linux containers) will be used to run the containers\n\t// in a pod."
  }
]