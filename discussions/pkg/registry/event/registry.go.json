[
  {
    "id" : "da941c94-756e-4393-8ec9-aa36325e6c63",
    "prId" : 1700,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "My previous comment got lost.  I am concerned about the etcd-ness leaking into each registry module.  Shouldn't registries be defined in terms of backing store interfaces, so they can use etcd but not actually KNOW that?\n",
        "createdAt" : "2014-10-13T18:52:38Z",
        "updatedAt" : "2014-10-13T18:52:38Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ad038a3b-e520-49cd-b119-6208199bf710",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is phrased that way-- see generic.Registry, which makes no mention of etcd.\n\nThis function is specifically to make an etcd registry, so of course it has to mention etcd.\n\nIf we get a new FrooBobber store, then we'd have a file here with a NewFrooBobberRegistry() function.\n\nWould you prefer that I make a pkg/registry/event/etcd directory for this to go in? I can do that if it makes you happy, it just seemed a little excessive.\n",
        "createdAt" : "2014-10-13T18:57:50Z",
        "updatedAt" : "2014-10-13T18:57:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c7dc95cb-3eff-40b5-aeda-cd961a441603",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Caveat, I am not super familiar with this area,s till.  My point is that the word and concept of etcd should never appear here.\n\nstruct registry should be defined as something like \n\n```\n{\n    RegsitryBackingStore\n    ttl int\n}\n```\n\nWhere BackingStore is an interface with functions that map to Etcd.  Creating a registry should be something like:\n\n```\nbackingStore := NewEtcdBackingStore()\n....\neventRegistry:      event.NewRegistry(backingStore, uint64(c.EventTTL.Seconds())),\n```\n",
        "createdAt" : "2014-10-13T19:07:26Z",
        "updatedAt" : "2014-10-13T19:07:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0912d298-0ae4-4c34-995a-4b73b9d73b16",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That confuses me. This file is providing the thing you've called \"RegsitryBackingStore\". How can I make that more clear?\n",
        "createdAt" : "2014-10-13T19:14:23Z",
        "updatedAt" : "2014-10-13T19:14:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6215bc15-5225-4679-993b-410b7043a0d4",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This creates an Event-specific backing store.  Presumably there would be a Pod-specific backing store and a Service-specific backing store and an Enpoints-specific backing store and ...\n\nEtcd should be mentioned once in the whole init sequence.  It is the medium.  Then you can define the schemas that sit atop the medium - Event, Pod, Service..\n\nIf this isn't clear, maybe it is I who just isn't getting it - come by and we can discuss after lunch?\n",
        "createdAt" : "2014-10-13T19:32:49Z",
        "updatedAt" : "2014-10-13T19:32:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d88ff996-86af-46ca-8ff2-c4bd9182922c",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(offline convo: resolution here is that tools.EtcdHelper should be hidden behind some sort of StorageHelper interface. I'll do this in a follow-up PR at some point.)\n",
        "createdAt" : "2014-10-13T21:30:49Z",
        "updatedAt" : "2014-10-13T21:30:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8f4d4ec9-24d1-4dbe-ad16-f99d0d12d925",
        "parentId" : "2e9454dd-c6b2-4cb0-9184-21d5c3e461c5",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "SGTM\n\nOn Mon, Oct 13, 2014 at 2:31 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/registry/event/registry.go:\n> \n> > +\n> > +// registry implements custom changes to generic.Etcd.\n> > +type registry struct {\n> > -   *etcdgeneric.Etcd\n> > -   ttl uint64\n> >   +}\n> >   +\n> >   +// Create stores the object with a ttl, so that events don't stay in the system forever.\n> >   +func (r registry) Create(ctx api.Context, id string, obj runtime.Object) error {\n> > -   err := r.Etcd.Helper.CreateObj(r.Etcd.KeyFunc(id), obj, r.ttl)\n> > -   return etcderr.InterpretCreateError(err, r.Etcd.EndpointName, id)\n> >   +}\n> >   +\n> >   +// NewEtcdRegistry returns a registry which will store Events in the given\n> >   +// EtcdHelper. ttl is the time that Events will be retained by the system.\n> >   +func NewEtcdRegistry(h tools.EtcdHelper, ttl uint64) generic.Registry {\n> \n> (offline convo: resolution here is that tools.EtcdHelper should be hidden\n> behind some sort of StorageHelper interface. I'll do this in a follow-up PR\n> at some point.)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1700/files#r18796285\n> .\n",
        "createdAt" : "2014-10-13T23:16:16Z",
        "updatedAt" : "2014-10-13T23:16:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a6b3eee84eef0326ba204f7103594095a8c705",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@// NewEtcdRegistry returns a registry which will store Events in the given\n// EtcdHelper. ttl is the time that Events will be retained by the system.\nfunc NewEtcdRegistry(h tools.EtcdHelper, ttl uint64) generic.Registry {\n\treturn registry{\n\t\tEtcd: &etcdgeneric.Etcd{"
  }
]