[
  {
    "id" : "9da17136-6068-438b-aec3-590c49e58ed9",
    "prId" : 100254,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100254#pullrequestreview-612388667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57f0f6db-bcd0-442f-a025-fd110a64216c",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I suggest adding\r\n\r\n> // This only happens when the stop channel is closed.",
        "createdAt" : "2021-03-15T16:19:39Z",
        "updatedAt" : "2021-03-19T18:38:01Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b77610942769311fbdf16832a9404fae345de382",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +132,136 @@\n\t\t\t\t// We should not attempt creation of mandatory objects if ensuring the suggested\n\t\t\t\t// configuration resulted in an error.\n\t\t\t\t// This only happens when the stop channel is closed.\n\t\t\t\t// We rely on the presence of the \"exempt\" priority level configuration object in the cluster"
  },
  {
    "id" : "f071b34a-888f-406d-b31b-092e314cd1f8",
    "prId" : 98028,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98028#pullrequestreview-701345188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a07b066-4504-4dc6-997f-393a1845668a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this always logs an error on server shutdown... this should be info, at best",
        "createdAt" : "2021-07-07T18:40:37Z",
        "updatedAt" : "2021-07-07T18:40:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f81305dc-5b0b-4730-8a77-b4da56b49d43",
        "parentId" : "1a07b066-4504-4dc6-997f-393a1845668a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this confused debugging on https://github.com/kubernetes/kubernetes/issues/103512",
        "createdAt" : "2021-07-07T18:40:58Z",
        "updatedAt" : "2021-07-07T18:40:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ff2140dc-4f45-4774-9389-b97ab603c068",
        "parentId" : "1a07b066-4504-4dc6-997f-393a1845668a",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "https://github.com/kubernetes/kubernetes/pull/103550",
        "createdAt" : "2021-07-07T18:53:57Z",
        "updatedAt" : "2021-07-07T18:53:57Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "759a64136b0d4619d5535adb79a8367e124b06c6",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +142,146 @@\t\t\t}, hookContext.StopCh)\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"APF bootstrap ensurer is exiting\")\n\t\t}\n\t}()"
  },
  {
    "id" : "3423d7f9-3b08-471e-a9b0-007fa793fb65",
    "prId" : 96527,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96527#pullrequestreview-530452849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3ca457e-f232-4673-9735-cf435a2b82cf",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this isn't new in this PR, but what is this method doing? it looks like it is reading existing objects via v1alpha1, setting defaults, then comparing to see if there was any change... given defaults are applied to the object when it is read via the Get, if there is any difference, we have a bug in the API server or P&F defaulting path",
        "createdAt" : "2020-11-13T15:17:12Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d2d1e4af-bc75-463e-a479-3c4df78f3ab4",
        "parentId" : "a3ca457e-f232-4673-9735-cf435a2b82cf",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The point of this function is not defaulting, it is to ensure that these objects have exactly the intended spec.\r\nAn explanatory comment would be a good add here, and also on `ensure`; I find both names too short and vague to make their meaning clear.",
        "createdAt" : "2020-11-13T16:54:54Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "24bfee27-2a6c-4d88-8dae-fd6d2734015f",
        "parentId" : "a3ca457e-f232-4673-9735-cf435a2b82cf",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "oh, I see... this is stomping API-persisted objects with the specs for the bootstrap schemas, so if an n-1 API server starts last, it will persist its view of what the bootstrap schemas should look like",
        "createdAt" : "2020-11-13T17:02:37Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6d3526df-6791-4367-a7ca-c695a5f298c4",
        "parentId" : "a3ca457e-f232-4673-9735-cf435a2b82cf",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "I don't fully understand these, so I hope someone else more knowledgable could add a comment in a follow-up PR.",
        "createdAt" : "2020-11-13T20:45:47Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "2486ea96-fefc-463b-a2a8-b57efd7cd1e1",
        "parentId" : "a3ca457e-f232-4673-9735-cf435a2b82cf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Additional context:\r\n* we make the objects so humans know what the system is doing, they don't actually need to be present for the request path to function, it will assume they are there if it doesn't see them\r\n* apiservers which disagree about the definition of these will fight. We made them fight slowly.",
        "createdAt" : "2020-11-13T22:17:25Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "642b11483030e5aedbd6f43aeac3cbe40255b3b6",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +187,191 @@}\n\nfunc upgrade(flowcontrolClientSet flowcontrolclient.FlowcontrolV1beta1Interface, flowSchemas []*flowcontrolv1beta1.FlowSchema, priorityLevels []*flowcontrolv1beta1.PriorityLevelConfiguration) error {\n\tfor _, expectedFlowSchema := range flowSchemas {\n\t\tactualFlowSchema, err := flowcontrolClientSet.FlowSchemas().Get(context.TODO(), expectedFlowSchema.Name, metav1.GetOptions{})"
  },
  {
    "id" : "43b79f10-fcc8-4669-8887-1327f47f27c5",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-358613238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0ec5e54-46df-4cf3-8a8d-49bb11e82a80",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "oh nifty-- how about \"v1.18-defaults\"?",
        "createdAt" : "2020-02-10T21:13:27Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c84b0742-3b05-4e7a-a7ab-704cd92e4961",
        "parentId" : "f0ec5e54-46df-4cf3-8a8d-49bb11e82a80",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Is there a way to read the version from variables or something, rather than code a literal in the controller?",
        "createdAt" : "2020-02-10T22:44:48Z",
        "updatedAt" : "2020-02-11T03:56:19Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "e42c5c88-9550-4e62-9e14-1ed37bd58f37",
        "parentId" : "f0ec5e54-46df-4cf3-8a8d-49bb11e82a80",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I do not see an easy way to plumb this correctly.  I think I would prefer to leave it to a later PR.",
        "createdAt" : "2020-02-11T15:48:04Z",
        "updatedAt" : "2020-02-11T15:48:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "544c4381-f705-4292-8782-761ff186ada6",
        "parentId" : "f0ec5e54-46df-4cf3-8a8d-49bb11e82a80",
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "Seems fine as a constant at least for now.",
        "createdAt" : "2020-02-13T22:35:26Z",
        "updatedAt" : "2020-02-13T22:35:26Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "e4ef9c87-ff90-441a-8ef2-72e3e2387174",
        "parentId" : "f0ec5e54-46df-4cf3-8a8d-49bb11e82a80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah I was just recommending putting \"-v1\" in the constant, we can change it later if needed. We can also wait and do this for the next version, or never.",
        "createdAt" : "2020-02-13T23:00:14Z",
        "updatedAt" : "2020-02-13T23:00:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +154,158 @@}\n\nconst thisFieldManager = \"api-priority-and-fairness-config-producer\"\n\nfunc ensure(flowcontrolClientSet flowcontrolclient.FlowcontrolV1alpha1Interface, flowSchemas []*flowcontrolv1alpha1.FlowSchema, priorityLevels []*flowcontrolv1alpha1.PriorityLevelConfiguration) error {"
  },
  {
    "id" : "3147d6ce-bbd1-48c4-9f77-c496f94724c6",
    "prId" : 87754,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87754#pullrequestreview-358717696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c66bfd10-63d4-49d5-93c8-a4ef41a70846",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "nit: context.TODO() can be lifted outside the loop.",
        "createdAt" : "2020-02-14T04:45:01Z",
        "updatedAt" : "2020-02-14T04:45:01Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "7520e557-555b-4e50-9997-3934833111b7",
        "parentId" : "c66bfd10-63d4-49d5-93c8-a4ef41a70846",
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "There is absolutely no reason to do such a thing.",
        "createdAt" : "2020-02-14T05:21:32Z",
        "updatedAt" : "2020-02-14T05:21:33Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73614ddd4e42728a36c7ac6b7b20f27c8032cafb",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +223,227 @@\t\t\t}\n\t\t\tif wrongSpec {\n\t\t\t\tif _, err := flowcontrolClientSet.PriorityLevelConfigurations().Update(context.TODO(), expectedPriorityLevelConfiguration, metav1.UpdateOptions{FieldManager: thisFieldManager}); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"failed upgrading mandatory PriorityLevelConfiguration %s due to %v, will retry later\", expectedPriorityLevelConfiguration.Name, err)\n\t\t\t\t}"
  },
  {
    "id" : "b0a2c6cd-20cd-4823-873e-cd12f7f0ad69",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-326100934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84f63d0b-610b-490c-a6c7-261371fddea6",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Why do this Get and test?  Why not just always issue the Create?",
        "createdAt" : "2019-11-27T06:55:10Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "dd15f967-2a84-4b51-8812-87a2dcbbfc32",
        "parentId" : "84f63d0b-610b-490c-a6c7-261371fddea6",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "oh didnt think about that before.. it's copied from scheduling api where we're doing similar things to ensure system objects.. issuing the create will indeed make the code much shorter but it's more costy b/c the create requests spawns a TXN request against ETCD cluster..",
        "createdAt" : "2019-11-27T16:00:44Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "95259c22-f3c2-4016-b58c-ec9193955209",
        "parentId" : "84f63d0b-610b-490c-a6c7-261371fddea6",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "In the normal case the GET will fail and the CREATE will happen anyway.  The only case where the GET makes a difference is when the first kube-apiserver crashes in the midst of creating the fixed and suggested objects.",
        "createdAt" : "2019-11-27T22:01:41Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "a5a0dd64-a7e7-4762-93cb-e3dcf107cffb",
        "parentId" : "84f63d0b-610b-490c-a6c7-261371fddea6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think it makes sense to do a single GET for the last-to-be-created object, so that we can short-circuit everything if it is present. If that object is not present, then attempt a POST for the other objects. If a POST fails for a reason other than a conflict (it already exists) we should probably abort the whole attempt (not create the subsequent items) or retry later.",
        "createdAt" : "2019-12-02T22:43:50Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8b2d9f17-cbdd-4ef0-b68f-94ceb354a326",
        "parentId" : "84f63d0b-610b-490c-a6c7-261371fddea6",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "removed the GET, now we always file POST requests if the \"exempt\" PL exists",
        "createdAt" : "2019-12-03T12:26:46Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +185,189 @@\t\t\t// TODO(yue9944882): create w/ version string attached\n\t\t\tidentical, err := flowSchemaHasWrongSpec(expectedFlowSchema, actualFlowSchema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed checking if mandatory FlowSchema %s is up-to-date due to %v, will retry later\", expectedFlowSchema.Name, err)\n\t\t\t}"
  },
  {
    "id" : "52387631-3da1-4d2e-ad1c-ef22abe88318",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-340963053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92a3c702-15b9-4dae-8991-df3079443876",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "After reading through this, it looks pretty easy to run as a controller instead.  Controllers give a better cluster-admin experience because of feedback. ",
        "createdAt" : "2019-12-03T15:14:59Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "70a53b35-768f-4e40-9b17-0e37baf6757a",
        "parentId" : "92a3c702-15b9-4dae-8991-df3079443876",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "wrapped the creation flow w/ `wait.PollImmediatelyUntil`",
        "createdAt" : "2019-12-04T15:42:31Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "e0db3502-50a4-427a-8565-78edc1351274",
        "parentId" : "92a3c702-15b9-4dae-8991-df3079443876",
        "authorId" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "body" : "I'm still catching up on this code, but does the fact that this bootstrapping only happens at post-start-hook time mean that if someone removes their flow-control settings from a running api server, the default configuration won't come back?",
        "createdAt" : "2020-01-09T20:18:46Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "b451f401-2153-49b2-a815-0e09fafa590b",
        "tags" : [
        ]
      },
      {
        "id" : "9b42a208-69e6-4fe6-aeb6-ae9bc42bba43",
        "parentId" : "92a3c702-15b9-4dae-8991-df3079443876",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "\"default configuration\" is a bit imprecise.  We make a distinction between what I call the \"fixed\" objects (Min calls them \"mandatory\" here) and the \"suggested\" objects.  The post-start-hook does two things.  First, it creates the suggested objects if the last-to-be-created fixed object does not exist (which we take as a signal that cluster initialization has not been completed).  Then it runs a loop forever that ensures that the fixed objects exist.  We want admins to be able to delete or modify the suggested objects but we want to keep the fixed objects existing with the Specs that we define.",
        "createdAt" : "2020-01-10T05:56:56Z",
        "updatedAt" : "2020-01-10T17:46:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +89,93 @@}\n\nfunc (p RESTStorageProvider) PostStartHook() (string, genericapiserver.PostStartHookFunc, error) {\n\treturn PostStartHookName, func(hookContext genericapiserver.PostStartHookContext) error {\n\t\tflowcontrolClientSet := flowcontrolclient.NewForConfigOrDie(hookContext.LoopbackClientConfig)"
  },
  {
    "id" : "abe1e1e0-2c2e-454a-b16b-71ca5a47ff0b",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-341327573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5f1f6e0-3f25-40f7-94e8-f4a9d20d0cbe",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "\"system preset\" is perhaps not the best term, we have been saying \"suggested\".",
        "createdAt" : "2020-01-10T20:16:17Z",
        "updatedAt" : "2020-01-10T20:28:49Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +162,166 @@\t\t\treturn fmt.Errorf(\"cannot create FlowSchema %s due to %v\", flowSchema.Name, err)\n\t\t}\n\t\tklog.V(3).Infof(\"created system preset FlowSchema %s\", flowSchema.Name)\n\t}\n\tfor _, priorityLevelConfiguration := range priorityLevels {"
  },
  {
    "id" : "df4ee238-185a-442d-94be-2ce22e11cf4e",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-341327573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f80bb12-c9b8-43ed-b588-a7115d47de30",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "\"ensure\" and \"upgrade\" are not the most clear names for these functions.  What about \"ensureExistence\" and \"ensureExistenceAndSpec\"?  Or \"create\" and \"ensure\"?",
        "createdAt" : "2020-01-10T20:21:25Z",
        "updatedAt" : "2020-01-10T20:28:49Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +105,109 @@\t\t\t\t\t\treturn true, nil\n\t\t\t\t\t}\n\t\t\t\t\terr = ensure(\n\t\t\t\t\t\tflowcontrolClientSet,\n\t\t\t\t\t\tflowcontrolbootstrap.SuggestedFlowSchemas,"
  },
  {
    "id" : "c3202ae6-aee5-449f-b74b-1556ef6d6409",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-341327573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61cd0f4d-b682-4cd3-a734-7ba5e8ee24cf",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The term \"settings\" is rather vague.  How about making these comments speak of \"objects\", or \"API objects\", rather than \"settings\"?",
        "createdAt" : "2020-01-10T20:23:20Z",
        "updatedAt" : "2020-01-10T20:28:49Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t\t\t\t\tflowcontrolbootstrap.SuggestedPriorityLevelConfigurations)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tklog.Errorf(\"failed ensuring suggested settings, will retry later: %v\", err)\n\t\t\t\t\t\treturn false, nil\n\t\t\t\t\t}"
  },
  {
    "id" : "68e20de8-efb0-4ae9-9a82-ddb5e361f981",
    "prId" : 85268,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85268#pullrequestreview-342011934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a1ddc2d-c76f-44a3-8e98-80a3270e7fe1",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Since retry is performed when upgrade succeeds, it may be easier to read if the return on line 131 is removed.\r\n",
        "createdAt" : "2020-01-12T04:53:27Z",
        "updatedAt" : "2020-01-12T15:15:50Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "670d3ffc-e368-41be-81bf-5bb4488fdd50",
        "parentId" : "8a1ddc2d-c76f-44a3-8e98-80a3270e7fe1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No, the existing code is better. The two return statements have a different purpose. Imagine a third chunk of work is added here at the end.",
        "createdAt" : "2020-01-13T17:16:07Z",
        "updatedAt" : "2020-01-13T17:16:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6898b1be-5593-4668-9522-b26f251cfbc2",
        "parentId" : "8a1ddc2d-c76f-44a3-8e98-80a3270e7fe1",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Since you prefer the current formation and there is a comment for line 133, it should be good enough.",
        "createdAt" : "2020-01-13T17:20:24Z",
        "updatedAt" : "2020-01-13T17:34:27Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "5d4a3c26-7787-4632-9302-79e181f3b719",
        "parentId" : "8a1ddc2d-c76f-44a3-8e98-80a3270e7fe1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't see why?",
        "createdAt" : "2020-01-13T17:29:00Z",
        "updatedAt" : "2020-01-13T17:29:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "70dea6e4a8495ff028ccc8dc8e8aec04b93287c3",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +131,135 @@\t\t\t\t\t\treturn false, nil\n\t\t\t\t\t}\n\t\t\t\t\treturn false, nil // always retry\n\t\t\t\t},\n\t\t\t\thookContext.StopCh)"
  },
  {
    "id" : "72e56543-cb94-4c57-8c43-65f61ca4b563",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-270369268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46249678-9d7c-4231-a6cf-fe7807851149",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Polling is problematic.\r\n\r\n1. We have to pick a period.  A short period like 1 second means frequent activity.  The longer the period, the less responsive this behavior is.\r\n\r\n2. Can we do something continuous rather than polling?  If continuous is bad, because there are bad times at which to apply this logic, then polling can also apply this logic at a bad time.\r\n\r\nRemember that there can be multiple apiservers.  Possibly many.  Do we really want all of them running this logic once per second?\r\n\r\nWe agreed on a different approach, in https://github.com/kubernetes/enhancements/blob/31c753ff9a5b8f9a9d89a88de67ea008e872c51d/keps/sig-api-machinery/20190228-priority-and-fairness.md#default-behavior",
        "createdAt" : "2019-07-25T15:51:05Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "87ef0ddb-a14b-4182-b037-a66a351da6cc",
        "parentId" : "46249678-9d7c-4231-a6cf-fe7807851149",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "that's not the so-called \"polling\" works here. `wait.Poll` ensures the execution to be serial. additionally, this is exactly how we're ensuring system objects for scheduling systems. https://github.com/kubernetes/kubernetes/blob/b72077410b8f5bcb2271f3664e62cc05d5d3542c/pkg/registry/scheduling/rest/storage_scheduling.go#L99\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-07-26T07:56:43Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "4a8396ef-a90e-4d04-8af7-3e393f6a52c0",
        "parentId" : "46249678-9d7c-4231-a6cf-fe7807851149",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Oh, I see.  This code is using `wait.Poll` to get a retry loop, and it gives up after 30 seconds of failures.  Why not an exponential back-off that never gives up?",
        "createdAt" : "2019-07-31T05:41:45Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "151db3c1-0265-480a-8e46-9dc73b87da99",
        "parentId" : "46249678-9d7c-4231-a6cf-fe7807851149",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "i don't know if there're difference between constant backoff and exponential backoff in this case..",
        "createdAt" : "2019-08-01T07:21:29Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6ed35fc5-37ec-4e05-854c-2dd6ab955937",
        "parentId" : "46249678-9d7c-4231-a6cf-fe7807851149",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The main difference is in giving up or not.\r\nIf the code does not give up then the pauses should increase beyond 1 second.",
        "createdAt" : "2019-08-02T19:59:41Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t\t// Adding system priority classes is important. If they fail to add, many critical system\n\t\t// components may fail and cluster may break.\n\t\terr := wait.Poll(1*time.Second, 30*time.Second, func() (done bool, err error) {\n\t\t\tif err != nil {\n\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"unable to initialize client: %v\", err))"
  },
  {
    "id" : "505b3532-c383-4cc5-96d6-f69fd4768738",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-268794444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2400641-ed84-445f-99e0-76b16150b6c5",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Is it important to do a live apiserver query rather than query an informer cache at this point?",
        "createdAt" : "2019-07-25T15:54:06Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "1baaf3f2-e559-4f62-a0a8-acca157e4eb6",
        "parentId" : "a2400641-ed84-445f-99e0-76b16150b6c5",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "we better to do live-query here i suppose. or it will be even more complex, we have to hold until the cache is loaded/refreshed before a query-from-cache.",
        "createdAt" : "2019-07-26T07:59:59Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "a81569d3-1ff6-4b83-96e8-af32e7010860",
        "parentId" : "a2400641-ed84-445f-99e0-76b16150b6c5",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I misunderstood the `wait.Poll`.  Since this is only a start-time thing, I am less concerned about doing the live apiserver queries.",
        "createdAt" : "2019-07-31T05:44:22Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@\n\t\t\tfor _, flowSchema := range d.FlowSchemas {\n\t\t\t\t_, err := flowcontrolClientSet.FlowSchemas().Get(flowSchema.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tif apierrors.IsNotFound(err) {"
  },
  {
    "id" : "32315b1e-b0cb-491a-b911-40970b76a9c9",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-270451103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40eb6d72-eee1-4c35-8325-b52b0104e51c",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "If I followed the logic correctly, this code gets run in extension servers (as well as main apiservers) --- where the loopback client config does NOT get to a main apiserver.",
        "createdAt" : "2019-08-02T20:49:43Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "af1bc844-5e8f-46be-87ac-a4bb40708694",
        "parentId" : "40eb6d72-eee1-4c35-8325-b52b0104e51c",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "No, registry/flowcontrol should not be running in an extension server.",
        "createdAt" : "2019-08-03T07:50:34Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@func (d SystemPresetData) EnsureSystemPresetConfiguration() genericapiserver.PostStartHookFunc {\n\treturn func(hookContext genericapiserver.PostStartHookContext) error {\n\t\tflowcontrolClientSet := flowcontrolclient.NewForConfigOrDie(hookContext.LoopbackClientConfig)\n\t\t// Adding system priority classes is important. If they fail to add, many critical system\n\t\t// components may fail and cluster may break."
  },
  {
    "id" : "68455332-7451-45ec-bd95-1899a8fec907",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-272144497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b11b3bf-eac4-453a-8f5f-9d509f4dd346",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I think it will be confusing for admins to see a message saying \"already exists\" in rare circumstances.  Remember, the more common \"already exists\" scenario above provokes no logging.  The difference between that scenario and this one is concurrent activity.  The message that is logged here does not really explain what is distinctive about this situation.",
        "createdAt" : "2019-08-07T18:19:45Z",
        "updatedAt" : "2019-08-07T18:20:05Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@\t\t\t\t\t\t\tklog.V(3).Infof(\"created system preset PriorityLevelConfiguration %s\", priorityLevelConfiguration.Name)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tklog.V(3).Infof(\"system preset PriorityLevelConfiguration %s already exists, skipping creating\", priorityLevelConfiguration.Name)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if err == nil {"
  }
]