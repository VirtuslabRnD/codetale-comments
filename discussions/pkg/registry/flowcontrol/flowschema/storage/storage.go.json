[
  {
    "id" : "a42680c6-100a-47e0-8043-891e9fe28f4f",
    "prId" : 84708,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84708#pullrequestreview-312475489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25f2bb76-bb12-4bb0-b191-bdcf797492d6",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "clear the create and delete strategies to avoid accidents\r\n",
        "createdAt" : "2019-11-06T13:41:08Z",
        "updatedAt" : "2019-11-08T06:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1327abd1-7cd7-4b16-9a38-8a623d91b895",
        "parentId" : "25f2bb76-bb12-4bb0-b191-bdcf797492d6",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "cleared",
        "createdAt" : "2019-11-06T14:34:45Z",
        "updatedAt" : "2019-11-08T06:27:33Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbd2e6b48b4d7ca0a82d544c4a228c7b0d70d433",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@\tstatusStore := *store\n\tstatusStore.CreateStrategy = nil\n\tstatusStore.UpdateStrategy = flowschema.StatusStrategy\n\tstatusStore.DeleteStrategy = nil\n"
  },
  {
    "id" : "87d1357d-f5bc-4c93-98c6-4aa4858fa0cf",
    "prId" : 80257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80257#pullrequestreview-270371641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The KEP does not forbid deleting any configuration objects.  https://github.com/kubernetes/enhancements/blob/31c753ff9a5b8f9a9d89a88de67ea008e872c51d/keps/sig-api-machinery/20190228-priority-and-fairness.md#default-behavior says what happens, for any given set of configuration API objects that exist.",
        "createdAt" : "2019-07-25T15:36:34Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "74679e36-3062-4a73-9b11-4af560be63e2",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "in the implementation of this pull, we forbid users from creating neither `exempt` nor `globalDefault` PL objects. if we allow the deletion, they will never be recovered. wdyt?",
        "createdAt" : "2019-07-26T07:52:27Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "9de3ef2f-4769-45cc-98ff-18d7f51d9b14",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "yes, if we forbid creation of those then we have to either (a) forbid their deletion or (b) implement reasonable behavior in the absence of such objects.  I think admins should be able to create as well as delete.  If you read https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/20190228-priority-and-fairness.md#default-behavior you will see a design that allows admins to create and delete any config objects and produces well-defined behavior at all times.",
        "createdAt" : "2019-07-31T05:23:30Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "0d114ba4-d4da-4258-9d7a-6f5cffd0d04c",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "isn't that increasing complexity? even tho the system is designed to deal with configuration changes flexibly. for now, system critical resources like service `kubernetes.default` is allowed to delete, but there's a daemon controller inside kube-apiserver to reconcile it back in an interval. if we allows deletion, we should probably do the same i.e. reconciling `system-top` and `workload-low` back. forbidding deletion will be the cleanest as far as i can see...",
        "createdAt" : "2019-07-31T16:54:00Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "a0b63ae9-5c0a-4d06-8003-08ab1773dc14",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The situation with the `kubernetes` service is more severe: the apiservers can not compensate for the absence of that service, because it is needed by clients to contact the main apiservers.  Our config objects, on the other hand, are used only inside apiservers by code that we control.  So we can easily supply default behavior when config objects are missing.  The KEP says that this happens, and it has the virtue that admins can make any changes they want.  I contemplate admins not only deleting objects but also creating alternatives.  Those two can not happen at the same instant, and the design in the KEP provides decent bridging behavior if necessary.  Allowing admins to make arbitrary changes is particularly good for an alpha feature, where us developers can not be very confident that we know the right configuration.  It is also important in scenarios with extensions to Kubernetes.\r\n\r\nI can see an argument for making an exception for the exempt priority level.  Since it has no hair, there are no changes for admins to make to it.  But this logic applies only to that one config object.",
        "createdAt" : "2019-08-01T06:44:21Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "4ea8abe5-bc02-4105-bece-b2ec64a1ab0f",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "that's definitely true. if users are complaining with the presets, they're always welcome to make adjustment(update) the priority-level objects. as for `system-top`, they can delete related flow-schemas in order to \"mute\" the top priority i think?\r\n",
        "createdAt" : "2019-08-01T07:18:53Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "fdd02617-64fb-4a91-b913-a9ec373115ea",
        "parentId" : "10caf300-73da-4c51-9ba8-910fbf47fa08",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "What I aimed for in the designed defaulting behavior is to allow administrators to make any change they want, from small isolated tweaks to wholesale replacement of all the config objects if they decide on a different organization.\r\n\r\nFor an ordinary priority level, if the administrators modify all the FlowSchema objects that formerly referred to that priority level to make them refer to other priority levels, we should not require the undesired priority level config object to remain, right?  For an undesired non-exempt priority level to have no effect it needs to have zero assured concurrency shares.  Since we are defining just a few, editing one to have shares==1 would leave an acceptably small loss but still be an additional bit of work involved.\r\n\r\nThe `system-top` priority level is a special case.  It is exempt, and has no other properties.  I am convinced that in our initial release there will need to be an exempt priority level, and there is no need to have more than one (excepting possibly for a transient period while the config objects are being re-organized).  I see no need to fix the name of the exempt priority level to be `system-top`, but can live with that.",
        "createdAt" : "2019-08-02T20:05:12Z",
        "updatedAt" : "2019-08-07T04:00:46Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2163ce227e3978a9dc3d051d2148bde47766122",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@// Delete ensures that system priority classes are not deleted.\nfunc (r *REST) Delete(ctx context.Context, name string, deleteValidation rest.ValidateObjectFunc, options *metav1.DeleteOptions) (runtime.Object, bool, error) {\n\tfor _, pl := range flowcontrolbootstrap.SystemPriorityLevelConfigurations() {\n\t\tif name == pl.Name {\n\t\t\treturn nil, false, apierrors.NewForbidden(flowcontrol.Resource(\"flowschemas\"), pl.Name, errors.New(\"this is a system flow schema and cannot be deleted\"))"
  }
]