[
  {
    "id" : "27a5d7b8-7cbc-44b4-a316-0190ccfaeb41",
    "prId" : 6857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c3334dd-c565-4957-9cb8-c687dff5f17c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ugh, did we really call this field Unschedulable? :( :( field names should always be in the positive IMO (should be Schedulable)\n",
        "createdAt" : "2015-04-15T17:58:32Z",
        "updatedAt" : "2015-04-15T17:58:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a1893eb1-7c7c-4b62-abe4-a2e75bb58a2b",
        "parentId" : "3c3334dd-c565-4957-9cb8-c687dff5f17c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I completely agree, but I'm afraid it's too late now to change it :(\n",
        "createdAt" : "2015-04-16T07:15:39Z",
        "updatedAt" : "2015-04-16T07:15:39Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "afb94c43b1ef1ee4750d424215b190f1e36cbd72",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +109,113 @@\treturn fields.Set{\n\t\t\"metadata.name\":      node.Name,\n\t\t\"spec.unschedulable\": fmt.Sprint(node.Spec.Unschedulable),\n\t}\n}"
  },
  {
    "id" : "32bac592-189a-45b0-9300-d921f6d8e362",
    "prId" : 2893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb05ef95-ec7e-42a9-a5ea-5d174d2c32cc",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "FYI, fixing kubectl seems to be another hack, we are shifting the hack from server to client.  For resources like this, a none namespace is preferrable.  See https://github.com/GoogleCloudPlatform/kubernetes/issues/2548#issuecomment-64506253 https://github.com/GoogleCloudPlatform/kubernetes/issues/2548#issuecomment-64514262\n",
        "createdAt" : "2014-12-13T00:38:02Z",
        "updatedAt" : "2014-12-18T05:50:42Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf0b41535fed9128645c124fdf45fa0ae8419367",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +102,106 @@\t\treturn nil, fmt.Errorf(\"not a minion: %#v\", obj)\n\t}\n\t// This is hacky, but minions don't really have a namespace, but kubectl currently automatically\n\t// stuffs one in there.  Fix it here temporarily until we fix kubectl\n\tif minion.Namespace == api.NamespaceDefault {"
  },
  {
    "id" : "9777749b-9aa1-41bc-8ec3-33bd03379a7c",
    "prId" : 2893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c721d79c-10bf-4668-971a-7e54fdc895d0",
        "parentId" : null,
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "We need another fix, can you also clear out SelfLink here? \n`minion.SelfLink = \"\"`\n\nSee #2797 for context.\n",
        "createdAt" : "2014-12-13T00:38:05Z",
        "updatedAt" : "2014-12-18T05:50:42Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf0b41535fed9128645c124fdf45fa0ae8419367",
    "line" : null,
    "diffHunk" : "@@ -1,1 +109,113 @@\t// Clear out the self link, if specified, since it's not in the registry either.\n\tminion.SelfLink = \"\"\n\n\t// TODO: GetMinion will health check the minion, but we shouldn't require the minion to be\n\t// running for updating labels."
  },
  {
    "id" : "09ea3ef0-f3c4-4fc2-8e48-87e77f68689e",
    "prId" : 2397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb2d55ed-98c6-40bd-ad8d-8d3ec537a664",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "PR #2412 validates that only labels are updated.\n",
        "createdAt" : "2014-11-17T17:49:12Z",
        "updatedAt" : "2014-11-17T18:44:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "43cd5326-daa0-422d-8f73-647df83d2219",
        "parentId" : "fb2d55ed-98c6-40bd-ad8d-8d3ec537a664",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Yeah, I'm going to include it here.\n",
        "createdAt" : "2014-11-17T17:54:56Z",
        "updatedAt" : "2014-11-17T18:44:49Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "c20ceea170bef6d723c8597b64e907b825ea75e8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +117,121 @@\t}\n\n\treturn apiserver.MakeAsync(func() (runtime.Object, error) {\n\t\terr := rs.registry.UpdateMinion(ctx, minion)\n\t\tif err != nil {"
  },
  {
    "id" : "541f61e5-13d1-4ea5-9929-f1a3fd2b584b",
    "prId" : 2239,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edf21c30-80e0-4bf7-898f-b6d0615ccddf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why does GetMinion error out on the minion being unhealthy? IMO unhealthy should be a bit in the minion's state. ...I realize this would be a large change now that I say it.\n",
        "createdAt" : "2014-11-07T20:53:36Z",
        "updatedAt" : "2014-11-07T20:53:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d3b6b893-73da-4d9a-b8fe-9f1052f661c6",
        "parentId" : "edf21c30-80e0-4bf7-898f-b6d0615ccddf",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Because we can have a health registry on top of that.\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/master/master.go#L266\n",
        "createdAt" : "2014-11-07T21:04:01Z",
        "updatedAt" : "2014-11-07T21:04:01Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "4b1aecfc-843f-4665-863c-721e06f82f40",
        "parentId" : "edf21c30-80e0-4bf7-898f-b6d0615ccddf",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, we should remove the healthy registry thingy and just have a controller doing health checks and setting a healthy bit, e.g., minion.State.Healthy = false. Then scheduler needs to pay attention to that...\n",
        "createdAt" : "2014-11-07T21:09:23Z",
        "updatedAt" : "2014-11-07T21:09:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "17243458-958b-4546-9957-7b38aff3ae7e",
        "parentId" : "edf21c30-80e0-4bf7-898f-b6d0615ccddf",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Corrent.  That's part of the larger change I wanna make :)\n\nAt initial stage, I plan to have apiserver filter out unhealthy node to keep the interface the same, i.e. scheduler doesn't have to take care of filtering out unhealthy node.  Later, we can use something similar to a selector.  So scheduler can select healthy node, admin can find and diagonse unhealthy node.  We can probabaly add more states later.\n",
        "createdAt" : "2014-11-07T22:33:33Z",
        "updatedAt" : "2014-11-07T22:33:33Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "38abf0c7ad800fa4be6515203fed0cf46ea78967",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +63,67 @@\t\t}\n\t\tminionName := minion.Name\n\t\tminion, err := rs.registry.GetMinion(ctx, minionName)\n\t\tif err == ErrNotHealty {\n\t\t\treturn rs.toApiMinion(minionName), nil"
  },
  {
    "id" : "88bccd76-222d-446c-b049-0f446a0a2f85",
    "prId" : 1884,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc894c76-2f44-4245-82ac-2ef868f989f9",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you add a TODO here that this should be replaced with a secure protocol in the future?\n",
        "createdAt" : "2014-10-20T13:33:57Z",
        "updatedAt" : "2014-10-20T18:28:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "855f4485-c888-4025-b701-1c700372d06b",
        "parentId" : "dc894c76-2f44-4245-82ac-2ef868f989f9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Secure protocol and/or use the protocol of the incoming request / make a correct decision based on other factors.\n",
        "createdAt" : "2014-10-20T13:35:22Z",
        "updatedAt" : "2014-10-20T18:28:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "61dce3ac-3430-4832-acf6-118e3172523d",
        "parentId" : "dc894c76-2f44-4245-82ac-2ef868f989f9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It might make sense to omit the scheme here and let the proxying code figure that out. I'll make a change.\n",
        "createdAt" : "2014-10-20T17:19:43Z",
        "updatedAt" : "2014-10-20T18:28:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f758b5be-22a6-4f61-a1b5-6e959e7f5ab7",
        "parentId" : "dc894c76-2f44-4245-82ac-2ef868f989f9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "On second thought, the proxying code has no idea what the thing it's headed to supports, so it needs to be told. We really just shouldn't let kubelet spill its guts over unsecured sessions.\n\nTODO added.\n",
        "createdAt" : "2014-10-20T17:48:53Z",
        "updatedAt" : "2014-10-20T18:28:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf942e859f5de1230eea36e53c796b6edb9a15ab",
    "line" : null,
    "diffHunk" : "@@ -1,1 +121,125 @@\t}\n\t// TODO: Minion webservers should be secure!\n\treturn \"http://\" + net.JoinHostPort(host, strconv.Itoa(ports.KubeletPort)), nil\n}"
  }
]