[
  {
    "id" : "0dee7199-c54f-4b06-93e5-2e1b56fee871",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4319a6a6-a4ed-49f0-aaa1-b0da2ce8f3ae",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should this be feature gated?\n",
        "createdAt" : "2016-09-07T21:00:46Z",
        "updatedAt" : "2016-09-08T18:36:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "09697a73-5e38-4061-875d-0f316755e4ec",
        "parentId" : "4319a6a6-a4ed-49f0-aaa1-b0da2ce8f3ae",
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Good point - yes, I need to add feature gates to the new calls in Delete and Update.\n",
        "createdAt" : "2016-09-07T21:08:27Z",
        "updatedAt" : "2016-09-08T18:36:18Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      },
      {
        "id" : "7cac313f-fb2a-4699-9130-0ad6051d27d7",
        "parentId" : "4319a6a6-a4ed-49f0-aaa1-b0da2ce8f3ae",
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Actually, Delete already has the feature gate. healthCheckNodePortUpdate() internally has the feature gate check, but it is not complete, will fix that up.\n",
        "createdAt" : "2016-09-07T21:12:48Z",
        "updatedAt" : "2016-09-08T18:36:18Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +445,449 @@\t}\n\n\tsuccess, err := rs.healthCheckNodePortUpdate(oldService, service)\n\tif !success {\n\t\treturn nil, false, err"
  },
  {
    "id" : "76240056-8f0f-47e2-b6d0-a7bed47458e6",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf92e7c4-dce8-4646-bf81-2f990bb7eb28",
        "parentId" : null,
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Added missing feature gate check here.\n",
        "createdAt" : "2016-09-08T18:39:03Z",
        "updatedAt" : "2016-09-08T18:39:03Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +298,302 @@\t//   Reject changing the value of the healthCheckNodePort annotation\n\t//\n\toldServiceHasHealthCheckNodePort := shouldCheckOrAssignHealthCheckNodePort(oldService)\n\toldHealthCheckNodePort := apiservice.GetServiceHealthCheckNodePort(oldService)\n"
  },
  {
    "id" : "f3aacae2-6aed-4d59-b188-1d50b28835b5",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b50002f3-1e7c-4531-81b5-3f6fd6cda335",
        "parentId" : null,
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Github not broken, it was me, I forgot to add that to the commit. Fixed now.\n",
        "createdAt" : "2016-09-08T18:41:24Z",
        "updatedAt" : "2016-09-08T18:41:24Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +354,358 @@\t\tif _, ok := service.Annotations[apiservice.AnnotationHealthCheckNodePort]; !ok {\n\t\t\tglog.Warningf(\"Attempt to delete health check node port annotation DENIED\")\n\t\t\tel := field.ErrorList{field.Invalid(field.NewPath(\"metadata\", \"annotations\"),\n\t\t\t\tapiservice.AnnotationHealthCheckNodePort, \"Cannot delete healthcheck nodePort annotation\")}\n\t\t\treturn false, errors.NewInvalid(api.Kind(\"Service\"), service.Name, el)"
  },
  {
    "id" : "1d12a9b9-4ca7-47b0-b96f-5eda0bc4dc32",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a24b14c7-616c-45ca-98ab-7f09282b8a98",
        "parentId" : null,
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Changed to utilruntime.HandleError here.\n",
        "createdAt" : "2016-09-08T18:42:04Z",
        "updatedAt" : "2016-09-08T18:42:04Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +242,246 @@\t\t\tif err != nil {\n\t\t\t\t// these should be caught by an eventual reconciliation / restart\n\t\t\t\tutilruntime.HandleError(fmt.Errorf(\"Error releasing service health check %s node port %d: %v\", service.Name, nodePort, err))\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "f2d5c6b6-30d1-4c96-9de4-b563b78b3a49",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6562e3f-5640-4d3f-9390-fb2cb4cfa068",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "you have a comment below that I don't understand \"Insert the newly allocated health check port as an annotation (plan of record for Alpha)\", can you clarify it.\n",
        "createdAt" : "2016-09-09T19:15:54Z",
        "updatedAt" : "2016-09-09T19:15:55Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +159,163 @@\t}\n\n\tif shouldCheckOrAssignHealthCheckNodePort(service) {\n\t\tvar healthCheckNodePort int\n\t\tvar err error"
  },
  {
    "id" : "77a03d51-d656-418d-bed7-21241d92c990",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49ca1857-c034-4091-a1bd-e55cb538bcfe",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Doesn't `GetServiceHealthCheckNodePort` do this for you? maybe you just return an err and int32 as the distinction between \"no node port specified\" and \"node port specified but couldn't parse\".  What do we think should happen if user sets it to 0? currently we clobber it. Maybe we should throw an error instead? \n\nLeave it to you to do what you think is cleaner, just bringing it up because I observed duplicated code. \n",
        "createdAt" : "2016-09-09T19:15:55Z",
        "updatedAt" : "2016-09-09T19:15:55Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +162,166 @@\t\tvar healthCheckNodePort int\n\t\tvar err error\n\t\tif l, ok := service.Annotations[apiservice.AnnotationHealthCheckNodePort]; ok {\n\t\t\thealthCheckNodePort, err = strconv.Atoi(l)\n\t\t\tif err != nil || healthCheckNodePort <= 0 {"
  },
  {
    "id" : "250b5d15-ff34-477a-88c4-bfd6dceace38",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "debdadea-8153-4fce-8d42-f5f050f19def",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "the name of this function is confusing and makes me think it's doing 2 different things. Can you clarify the name or add a comment above it. It returns a bool, so the shouldCheck part doesn't make sense to me. \n",
        "createdAt" : "2016-09-09T19:16:00Z",
        "updatedAt" : "2016-09-09T19:16:00Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +301,305 @@\toldHealthCheckNodePort := apiservice.GetServiceHealthCheckNodePort(oldService)\n\n\tassignHealthCheckNodePort := shouldCheckOrAssignHealthCheckNodePort(service)\n\trequestedHealthCheckNodePort := apiservice.GetServiceHealthCheckNodePort(service)\n"
  },
  {
    "id" : "e6fcd916-5b9a-4aa9-8dda-d9543b308221",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e0d34f9-8072-46c5-8ab8-532c6b9aa0bf",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Not sure if anything else uses Infof.V(2) in apiserver logs. If you open it up all you'll see is Http requests and latency traces. Suggest converting to V(4) everywhere in its currently V(2) in this pr. \n",
        "createdAt" : "2016-09-09T19:16:02Z",
        "updatedAt" : "2016-09-09T19:16:02Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +317,321 @@\t\t\t\treturn false, errors.NewInvalid(api.Kind(\"Service\"), service.Name, el)\n\t\t\t}\n\t\t\tglog.Infof(\"Reserved user requested nodePort: %d\", requestedHealthCheckNodePort)\n\t\t} else {\n\t\t\t// If the request has no health check nodePort specified, allocate any"
  },
  {
    "id" : "6a5aaff5-d333-407f-a980-5444f637abce",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40ecbf7c-0510-48e2-975f-faec15fcb973",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "it's useful to add a comment here saying this is the \"normal\" update path, i.e the else clause is what happens if i modify labels on a Service using esipp. \n",
        "createdAt" : "2016-09-09T19:16:04Z",
        "updatedAt" : "2016-09-09T19:16:04Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +364,368 @@\t\t\treturn false, errors.NewInvalid(api.Kind(\"Service\"), service.Name, el)\n\t\t}\n\t}\n\treturn true, nil\n}"
  },
  {
    "id" : "f7284959-338f-43a8-9e95-787f266c9710",
    "prId" : 31990,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ef86734-c7b6-4692-9a24-9667394166b8",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "worth adding a comment that this is what happens in the normal Service update case when the feature is gated (so every service on aws, azure etc). \n",
        "createdAt" : "2016-09-09T19:21:30Z",
        "updatedAt" : "2016-09-09T19:21:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02754547fbbc9110358763aa38a9d3770af691f4",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +349,353 @@\t\t\t\tapiservice.AnnotationHealthCheckNodePort, \"Cannot insert healthcheck nodePort annotation\")}\n\t\t\treturn false, errors.NewInvalid(api.Kind(\"Service\"), service.Name, el)\n\t\t}\n\n\tcase oldServiceHasHealthCheckNodePort && assignHealthCheckNodePort:"
  },
  {
    "id" : "dddeda6f-b1fc-4e5c-b5d1-7cd7ad962113",
    "prId" : 29409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd972f99-850f-4dcf-9c24-cf21fc4ee96c",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "please add a unittest to service/rest_test where you actually invoke this Create method with various services and verify the output (with node port, with annotation set to garbage, clusterIP etc)\n",
        "createdAt" : "2016-08-16T01:46:47Z",
        "updatedAt" : "2016-08-23T23:16:56Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "9dbc2a62-ccba-4434-9c26-cb0f3b757cd6",
        "parentId" : "fd972f99-850f-4dcf-9c24-cf21fc4ee96c",
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Added.\n",
        "createdAt" : "2016-08-17T20:11:55Z",
        "updatedAt" : "2016-08-23T23:16:56Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "b82c028f77d85ac0be39b510ccdbc2783e43fdc7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +137,141 @@\n\tif featuregate.DefaultFeatureGate.ExternalTrafficLocalOnly() && shouldCheckOrAssignHealthCheckNodePort(service) {\n\t\tvar healthCheckNodePort int\n\t\tvar err error\n\t\tif l, ok := service.Annotations[apiservice.AnnotationHealthCheckNodePort]; ok {"
  },
  {
    "id" : "3daf995d-c8ba-43a8-9b8f-52bcf457b983",
    "prId" : 18276,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2358c85a-1207-469a-bac9-e8685e067d9c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It seems the only possible cause of error here is the ports pool is depleted, so how about a `503 Service Unavailable`? \n",
        "createdAt" : "2015-12-10T19:20:53Z",
        "updatedAt" : "2015-12-10T19:48:27Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4f1bf385-6c23-45b9-b8bb-7952dd08f69c",
        "parentId" : "2358c85a-1207-469a-bac9-e8685e067d9c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I didn't want to change behavior in this PR, just cleanup.  That's a good answer for a different PR :)\n",
        "createdAt" : "2015-12-10T19:40:37Z",
        "updatedAt" : "2015-12-10T19:48:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "872faffdac1ddb419a6bf06d0f295df466fb514b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +87,91 @@\t\t\t// TODO: what error should be returned here?  It's not a\n\t\t\t// field-level validation failure (the field is valid), and it's\n\t\t\t// not really an internal error.\n\t\t\treturn nil, errors.NewInternalError(fmt.Errorf(\"failed to allocate a serviceIP: %v\", err))\n\t\t}"
  },
  {
    "id" : "ba4636e5-7091-4372-83d8-f6bb3c3e0790",
    "prId" : 12340,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd27a2e2-d1a8-4f0c-a1e4-32385dd70fe7",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Why do we want to leave dangling endpoints?\n",
        "createdAt" : "2015-08-10T06:42:20Z",
        "updatedAt" : "2015-08-10T11:27:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "3ed4874b-8ac6-4c05-964c-93b86a442301",
        "parentId" : "dd27a2e2-d1a8-4f0c-a1e4-32385dd70fe7",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Is the TODO stale since you are deleting the endpoints now?\n",
        "createdAt" : "2015-08-10T06:42:42Z",
        "updatedAt" : "2015-08-10T11:27:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "95aa5eb2-90a7-47fd-8ba3-d068a8460815",
        "parentId" : "dd27a2e2-d1a8-4f0c-a1e4-32385dd70fe7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I separated this PR into 2 commits.\nBasically, the first commit is moving some logic (that is not related to storage operations)\nfrom: pkg/registry/etcd/etcd_test.go\nto: pkg/registry/service/rest.go\n\nSo I'm not adding it - I'm just moving it to a better location (this is just refactoring, not changing logic).\n",
        "createdAt" : "2015-08-10T07:03:06Z",
        "updatedAt" : "2015-08-10T11:27:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "79125f460c5449f944840b072b70434c8b5c7e47",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +145,149 @@\t}\n\n\t// TODO: can leave dangling endpoints, and potentially return incorrect\n\t// endpoints if a new service is created with the same name\n\terr = rs.endpoints.DeleteEndpoints(ctx, id)"
  },
  {
    "id" : "238eb059-405c-4f09-bf92-7f7f3dab3e30",
    "prId" : 5939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07ae3190-1267-426d-90c6-e41203d86880",
        "parentId" : null,
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "What if `len(parts) == 1`? Does the loop below make sense for `portStr = \"\"` ?\n",
        "createdAt" : "2015-03-26T18:28:38Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "b654d77a-5f7d-48f2-9b4c-4fb2bd034633",
        "parentId" : "07ae3190-1267-426d-90c6-e41203d86880",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "So if a port is not specified do we need to do anything here for backward compatibility? i.e. assume (and check) just one available port and use that?\n",
        "createdAt" : "2015-03-26T18:30:35Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "fdfd68ff-0cf1-4981-b4bd-3ad2b0e01602",
        "parentId" : "07ae3190-1267-426d-90c6-e41203d86880",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Tim explained to me what happens here so now I see what it means for `portStr` to be empty (plus associated question of what we should really do in this case).\n",
        "createdAt" : "2015-03-26T20:40:56Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "a5ac33be-44b9-46de-b717-0506415dfcf0",
        "parentId" : "07ae3190-1267-426d-90c6-e41203d86880",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm fine with requiring port names in the case that all service ports are named.  If users scream we can add an \"is default\" flag.\n",
        "createdAt" : "2015-03-26T22:43:19Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9e27b90b-091a-4325-ba8a-7aba73e92405",
        "parentId" : "07ae3190-1267-426d-90c6-e41203d86880",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "To me, it only makes sense to permit the port to be omitted in the case that the service exposes just one port. Otherwise, we should require servicename:portnumber or servicename:portname.\n",
        "createdAt" : "2015-03-27T05:59:26Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "309de5dc-176b-4b17-b3c0-fcc24d9b7fea",
        "parentId" : "07ae3190-1267-426d-90c6-e41203d86880",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't think it is worth special casing one port - this allows you to have N ports, but only one can be unnamed.  OK?\n",
        "createdAt" : "2015-03-27T18:27:41Z",
        "updatedAt" : "2015-03-27T19:36:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ae203825b3b28c45ac7d23f3d107c66df9dad7c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +245,249 @@\t\tportStr = parts[1]\n\t}\n\n\teps, err := rs.endpoints.GetEndpoints(ctx, svcName)\n\tif err != nil {"
  },
  {
    "id" : "44697a40-c859-4921-8cae-5bd66af33fde",
    "prId" : 4484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d8c313e-9573-4347-9314-4673e618c7ff",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should this also check (old.Spec.CreateExternalLoadBalancer || new.Spec.CreateExternalLoadBalancer) ?  If neither spec has a load balancer, you can safely say \"false\" right?\n",
        "createdAt" : "2015-02-17T17:35:18Z",
        "updatedAt" : "2015-02-17T20:51:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "374fba23-ecb4-47d3-86f3-df8b1642ab18",
        "parentId" : "2d8c313e-9573-4347-9314-4673e618c7ff",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Yes, added.\n",
        "createdAt" : "2015-02-17T20:53:03Z",
        "updatedAt" : "2015-02-17T20:53:03Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "397c1fc69a98b2b4903e66ef1060a5440a79f03a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +304,308 @@\t\treturn false\n\t}\n\tif old.Spec.CreateExternalLoadBalancer != new.Spec.CreateExternalLoadBalancer ||\n\t\told.Spec.Port != new.Spec.Port ||\n\t\told.Spec.SessionAffinity != new.Spec.SessionAffinity ||"
  },
  {
    "id" : "f79696a0-abac-4884-bee4-57355eae2522",
    "prId" : 4484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3410944f-2b3d-4ed5-84ac-1d6033a0fa91",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "TODO: support updating existing balancers\n",
        "createdAt" : "2015-02-17T17:37:06Z",
        "updatedAt" : "2015-02-17T20:51:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5f70801d-dfe0-43c6-a017-58412f0619b9",
        "parentId" : "3410944f-2b3d-4ed5-84ac-1d6033a0fa91",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Done.\n",
        "createdAt" : "2015-02-17T20:53:10Z",
        "updatedAt" : "2015-02-17T20:53:10Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "397c1fc69a98b2b4903e66ef1060a5440a79f03a",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +193,197 @@\t}\n\t// Recreate external load balancer if changed.\n\tif externalLoadBalancerNeedsUpdate(oldService, service) {\n\t\t// TODO: support updating existing balancers\n\t\tif oldService.Spec.CreateExternalLoadBalancer {"
  },
  {
    "id" : "c69abccf-2394-4424-9962-c65bfaac0839",
    "prId" : 2086,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1f8581b-beec-4c7b-8f0e-3bf99e5762d6",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@thockin Are we in agreement that auto-populated spec fields is ok at this point?\n",
        "createdAt" : "2014-11-04T01:42:52Z",
        "updatedAt" : "2014-11-04T19:24:02Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd7643c033392b6331d0c876fe2da389e0429679",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\t\treturn nil, err\n\t\t} else {\n\t\t\tservice.Spec.PortalIP = ip.String()\n\t\t}\n\t} else {"
  },
  {
    "id" : "94bc7cde-d98f-4e0a-95ed-00804517af70",
    "prId" : 1982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2e53909-313a-45b8-b18a-909f9e4a2dfb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "// TODO: Fix this when we stand up multiple api servers.\n",
        "createdAt" : "2014-10-28T06:47:00Z",
        "updatedAt" : "2014-10-28T06:47:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5ca0f91b8dd452d0806ef46558dbdde7d8461d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +100,104 @@\t} else {\n\t\t// Try to respect the requested IP.\n\t\tif err := rs.portalMgr.Allocate(net.ParseIP(service.PortalIP)); err != nil {\n\t\t\t// TODO: Differentiate \"IP already allocated\" from real errors.\n\t\t\tel := errors.ValidationErrorList{errors.NewFieldInvalid(\"portalIP\", service.PortalIP)}"
  },
  {
    "id" : "227a6a54-afe8-4984-bb48-fb6aa50e4498",
    "prId" : 1326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fc00aca-9681-49a2-a2f8-721bc98c764e",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Perhaps file an issue on this?\n",
        "createdAt" : "2014-09-18T15:58:02Z",
        "updatedAt" : "2014-09-18T15:58:02Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "a1ec275b-3ca3-4225-8aaa-8a1db5f87d54",
        "parentId" : "4fc00aca-9681-49a2-a2f8-721bc98c764e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Filed #1362 for the general problem.\n",
        "createdAt" : "2014-09-18T17:50:08Z",
        "updatedAt" : "2014-09-18T17:50:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9cf2ccb43ebf75e15b8904d5baac3d16cd6aba",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +114,118 @@}\n\n// TODO: implement field selector?\nfunc (rs *REST) List(label, field labels.Selector) (runtime.Object, error) {\n\tlist, err := rs.registry.ListServices()"
  }
]