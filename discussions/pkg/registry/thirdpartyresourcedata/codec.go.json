[
  {
    "id" : "04327e0d-8c34-4576-8bd7-093762085a99",
    "prId" : 26012,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c6d61eb-797f-453c-beb3-31ef51f8ce2e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "omit blank line\n",
        "createdAt" : "2016-05-24T22:27:14Z",
        "updatedAt" : "2016-06-27T08:27:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eef335dec97fd5cad68c48ec7c6d562b98189b8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +510,514 @@\t\t\treturn err\n\t\t}\n\n\t\t_, err = stream.Write(encBytes)\n\t\treturn err"
  },
  {
    "id" : "f277092c-ae12-48f5-8729-394c84bf6fa2",
    "prId" : 25938,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e5cb08e-3920-415a-abc9-b79c517190e5",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I think you should use `t.delegate.EncodeToStream(...)` here.\n",
        "createdAt" : "2016-06-09T18:22:44Z",
        "updatedAt" : "2016-06-21T07:30:38Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "106ceb53-96d7-4376-af6c-a06563fc37c1",
        "parentId" : "6e5cb08e-3920-415a-abc9-b79c517190e5",
        "authorId" : "84acd31d-e743-4d34-981b-239bc2712cc1",
        "body" : "@brendandburns I dont think this is possible as it currently stands, attempting it throws an error e.g. no kind \"WatchEvent\" is registered for version \"stable.sitepod.io/v1\"\n",
        "createdAt" : "2016-06-12T07:39:52Z",
        "updatedAt" : "2016-06-21T07:30:38Z",
        "lastEditedBy" : "84acd31d-e743-4d34-981b-239bc2712cc1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3758df16810cb4984eeecad98b1763bfc112d3e1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +509,513 @@\t\t}\n\n\t\tenc := json.NewEncoder(stream)\n\t\terr = enc.Encode(event)\n\t\tif err != nil {"
  },
  {
    "id" : "109e558e-d976-4138-b310-892485668807",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3c13f6-c37f-436f-871e-57941a6d4ffd",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can I get a comment about why this is correct?  Seems like you should check for this conflicting with `outVersion` and you not having any way to convert.\n",
        "createdAt" : "2016-01-22T19:21:00Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f431d755-beac-44ae-9181-9db30ba9666d",
        "parentId" : "be3c13f6-c37f-436f-871e-57941a6d4ffd",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "added a note.\n",
        "createdAt" : "2016-03-10T01:57:56Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +45,49 @@\t// The actual thing printed/sent to server is the actual raw third party resource data, which only has one version.\n\tcase *extensions.ThirdPartyResourceData:\n\t\treturn in, nil\n\tdefault:\n\t\treturn t.converter.ConvertToVersion(in, outVersion)"
  },
  {
    "id" : "6b101f88-bd0e-495f-b84e-808acc3f7d88",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcf7f659-6580-4001-9a93-7b745ca0fe31",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It only has one version now, but its part of `extensions` which will someday be promoted and probably have `v1beta1` and `v1` available at the same time.  Seems like you should attempt to convert the requested version.\n",
        "createdAt" : "2016-03-10T14:20:28Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "31ad538f-ac81-464f-b7db-222ed2a35ff5",
        "parentId" : "fcf7f659-6580-4001-9a93-7b745ca0fe31",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "No, this is different (sorry this is sort of meta level so the explanation is tricky)\n\nThere is only one version of the user object (the raw object that is wrapped by the ThirdPartyResourceData) not the ThirdPartyResourceData object (which might be v1beta1 or v1) and the user object can only have one version.  (since user version conversions aren't [currently] supported)\n",
        "createdAt" : "2016-03-24T22:50:25Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +43,47 @@\tswitch in.(type) {\n\t// This seems weird, but in this case the ThirdPartyResourceData is really just a wrapper on the raw 3rd party data.\n\t// The actual thing printed/sent to server is the actual raw third party resource data, which only has one version.\n\tcase *extensions.ThirdPartyResourceData:\n\t\treturn in, nil"
  },
  {
    "id" : "17d567a6-cc2a-4d23-9e42-29065fe003c4",
    "prId" : 18835,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8b23fc-edd7-4017-a3b1-87693e25051e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Seems like this should be tightened to match `GroupVersionKind`.  Otherwise I could end up with weird results around `/v1 Pod` and `thirdparty/v6 Pod`, right?\n",
        "createdAt" : "2016-03-10T14:23:22Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ca262ae4-84a2-4475-b0ad-8eb44aa7a0a4",
        "parentId" : "fe8b23fc-edd7-4017-a3b1-87693e25051e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "No, this code path should never get called for any object that isn't under a third party group.\n",
        "createdAt" : "2016-03-24T22:50:31Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2695c600-48ab-4ffa-bec6-64f0b4a4f0d3",
        "parentId" : "fe8b23fc-edd7-4017-a3b1-87693e25051e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : ">  this code path should never get called for any object that isn't under a third party group.\n\nRight, but I think it's more robust if we check the group here. This won't block the PR, but I'd like to get your confirmation that there is nothing preventing us from making t.kind a GroupKind in the future.\n",
        "createdAt" : "2016-03-31T04:38:32Z",
        "updatedAt" : "2016-03-31T17:53:48Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "be6c5b332b37f3f488b069aca2555d79b3eebea3",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +234,238 @@\t}\n\tswitch typeMeta.Kind {\n\tcase t.kind:\n\t\tresult := &extensions.ThirdPartyResourceData{}\n\t\tif err := t.populateResource(result, mapObj, data); err != nil {"
  },
  {
    "id" : "08e83080-4a6e-4bdf-b64c-9e291ea25f7a",
    "prId" : 14157,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf248ab7-8c59-4bef-b12a-96e0100b2460",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The input argument `version` will be `groupVersion` after #14156 is merged.\n",
        "createdAt" : "2015-09-21T01:35:49Z",
        "updatedAt" : "2015-09-22T05:32:44Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1de364a0e6f48de8b3d55f23bc8e9cfce54520c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +266,270 @@}\n\nfunc (t *thirdPartyResourceDataCreator) New(version, kind string) (out runtime.Object, err error) {\n\tswitch kind {\n\tcase \"ThirdPartyResourceData\":"
  },
  {
    "id" : "48368ef3-b57f-476f-a207-ebac4be74b5b",
    "prId" : 14157,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ef78ce9-ec5c-453b-ab3c-5880fdce360b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Much better, thanks!\n",
        "createdAt" : "2015-09-22T00:11:00Z",
        "updatedAt" : "2015-09-22T05:32:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1de364a0e6f48de8b3d55f23bc8e9cfce54520c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +279,283 @@\t\treturn &experimental.ThirdPartyResourceDataList{}, nil\n\tdefault:\n\t\treturn t.delegate.New(version, kind)\n\t}\n}"
  },
  {
    "id" : "851676be-0729-4a11-b935-02f113812490",
    "prId" : 14148,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b3be84e-cf7d-4013-928b-ecb675ce72dc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "no & necessary\n",
        "createdAt" : "2015-09-18T00:52:50Z",
        "updatedAt" : "2015-09-24T22:52:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e45ae7e6-3d65-4b5e-9784-4cb435127ecf",
        "parentId" : "0b3be84e-cf7d-4013-928b-ecb675ce72dc",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Actually it is:\n\n``` sh\n_output/local/go/src/k8s.io/kubernetes/pkg/registry/thirdpartyresourcedata/codec.go:242: cannot use buff (type bytes.Buffer) as type io.Writer in argument to encodeToJSON:\n    bytes.Buffer does not implement io.Writer (Write method has pointer receiver)\n```\n\nI could take the pointer below where I pass it into the Encoder, but that seems like 6 of one 1/2 dozen of the other.\n",
        "createdAt" : "2015-09-18T03:27:52Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "860bcc33-a378-4f46-8694-5f5b98fa2564",
        "parentId" : "0b3be84e-cf7d-4013-928b-ecb675ce72dc",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I was thinking that moving the & below may allow buff to be stack-allocated. :) Not worth changing, probably.\n",
        "createdAt" : "2015-09-18T18:23:58Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b026e2cf-4040-4773-8494-5ff72b5d107d",
        "parentId" : "0b3be84e-cf7d-4013-928b-ecb675ce72dc",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I'm pretty sure that's not true, since I can pass `&foo` into a function that expects `*foo` and then takes ownership of the value.  Any stack allocation has to be via pessimistic static analysis (e.g. no one ever asks for `&` of the variable, rather than anything else.\n",
        "createdAt" : "2015-09-18T19:27:27Z",
        "updatedAt" : "2015-09-24T22:52:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "89982196869a73fb1c93466ce770c4076684d35b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +236,240 @@\nfunc (t *thirdPartyResourceDataCodec) Encode(obj runtime.Object) ([]byte, error) {\n\tbuff := &bytes.Buffer{}\n\tif err := t.EncodeToStream(obj, buff); err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "17bd582e-123f-4cd9-95f3-65a4d27a015d",
    "prId" : 13000,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc84fbf0-ad64-49da-ae73-1653a943573d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do we also need to change mapping.Scope? Or do we suppose t.kind is always namespace scoped?\n",
        "createdAt" : "2015-08-27T22:19:51Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e1285724-41a8-49ac-a571-30cda53d2021",
        "parentId" : "fc84fbf0-ad64-49da-ae73-1653a943573d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "no, we don't need to change scope, this codec is really just to wrap/unwrap a `ThirdPartyResourceData` object everything else stays the same.\n",
        "createdAt" : "2015-08-28T03:22:36Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "de851403-29af-4e3a-8599-1759a4f4c25d",
        "parentId" : "fc84fbf0-ad64-49da-ae73-1653a943573d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I disagree. The function is called [here](https://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/api_installer.go#L132) and the input kind = ThirdPartyResourceData, so the mapping here is for ThirdPartyResourceData. And mapping.scope is used [here](https://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/api_installer.go#L265). We need to change the scope to the scope of the ThirdPartyResourceData.data.\n",
        "createdAt" : "2015-08-28T17:56:47Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ac1f6c2f-ef1e-49f6-8930-592bb6bb4628",
        "parentId" : "fc84fbf0-ad64-49da-ae73-1653a943573d",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I'm not sure I fully follow this, the `ThirdPartyResourceData` object and the `Foo` object should have exactly the same scope, they're just different data representations of the same object.\n\nHowever, I admit to not fully understanding the details here, so I could be wrong...\n",
        "createdAt" : "2015-09-01T05:41:43Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "a2d4b476-f276-499d-a9a0-2780a7c6baaf",
        "parentId" : "fc84fbf0-ad64-49da-ae73-1653a943573d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "After reading the design doc I agree we don't need to change the scope, because the design doc states that \"For now, non-namespaced objects are not supported\", so `Foo` object is namespace scoped. `ThirdPartyResourceData` is also namespaced (see [here](https://github.com/kubernetes/kubernetes/blob/master/pkg/expapi/latest/latest.go#L54)).\nSo both of their scopes are meta.RESTScopeNameNamespace.\n",
        "createdAt" : "2015-09-01T06:35:33Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa7ce268993bf1fdc8bba502d554431840d7ed0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +54,58 @@\t\treturn nil, err\n\t}\n\tmapping.Codec = NewCodec(mapping.Codec, t.kind)\n\treturn mapping, nil\n}"
  },
  {
    "id" : "7bf0b6d7-bd21-48fe-9826-6a08d56441ac",
    "prId" : 13000,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddaf38c9-54f7-40c5-ab58-d7c4c9cff53a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Won't json.Unmarshal correctly populate this Name field? Could you explain? Thanks.\n",
        "createdAt" : "2015-08-27T22:30:34Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "c975daa4-889c-482a-ac35-11359c086033",
        "parentId" : "ddaf38c9-54f7-40c5-ab58-d7c4c9cff53a",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "We don't unmarshal into a `ThirdPartyResourceData` object.  We populate it directly.\n\nA user specifies an object like:\n\n```\n{\n  \"metadata\": {\n    \"name\": \"bar\",\n    \"kind\": \"Foo\"\n  }\n  ...\n}\n```\n\nAnd we populate a `ThirdPartyResourceData`\n\n```\n{\n   \"metadata\": {\n      \"name\": \"bar\",\n      \"kind\": \"ThirdPartyResourceData\"\n   },\n   \"data\": <json-bytes-from-above-go-here>\n}\n```\n",
        "createdAt" : "2015-08-28T03:20:16Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "cf3edd72-2542-49d7-a888-7ca6c454e729",
        "parentId" : "ddaf38c9-54f7-40c5-ab58-d7c4c9cff53a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you.\n",
        "createdAt" : "2015-08-28T17:23:50Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "71b67ba5-a022-463b-b4ee-e02314f3f517",
        "parentId" : "ddaf38c9-54f7-40c5-ab58-d7c4c9cff53a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How are you going to stuff resource version in this?\n",
        "createdAt" : "2015-08-28T17:29:25Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "30f89431-99b8-48f7-b035-530c30690d72",
        "parentId" : "ddaf38c9-54f7-40c5-ab58-d7c4c9cff53a",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Added resource version in (as well as tests to validate that it is working...)\n",
        "createdAt" : "2015-09-01T06:07:41Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa7ce268993bf1fdc8bba502d554431840d7ed0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +145,149 @@\t}\n\n\tobjIn.Name = name\n\tobjIn.Data = data\n\treturn nil"
  },
  {
    "id" : "3a6afbe7-e882-4d2b-a596-99ef067669b7",
    "prId" : 13000,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09376964-3dc5-49c0-97f5-bfa25ce4964e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "should use explatest.Version\n",
        "createdAt" : "2015-09-01T18:31:03Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "533674f0-e541-4d0a-ae91-90d7b83fbd1f",
        "parentId" : "09376964-3dc5-49c0-97f5-bfa25ce4964e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-09-01T21:40:12Z",
        "updatedAt" : "2015-09-01T21:40:12Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa7ce268993bf1fdc8bba502d554431840d7ed0",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@\t\treturn nil, fmt.Errorf(\"unknown kind %s expected %s\", kind, t.kind)\n\t}\n\tmapping, err := t.mapper.RESTMapping(\"ThirdPartyResourceData\", latest.Version)\n\tif err != nil {\n\t\treturn nil, err"
  }
]