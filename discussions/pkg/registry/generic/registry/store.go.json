[
  {
    "id" : "48466292-43b3-4076-844e-cb9a5d21840f",
    "prId" : 37770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37770#pullrequestreview-10982125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "649e60f8-96f5-4307-ba29-046351f0976b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "doc that we're adapting the store keyfunc for the storage decorator",
        "createdAt" : "2016-12-06T16:35:07Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6bafbacbf2e4a4f54f3e7993440122e24acdee0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1025,1029 @@\t// We adapt the store's keyFunc so that we can use it with the StorageDecorator\n\t// without making any assumptions about where objects are stored in etcd\n\tkeyFunc := func(obj runtime.Object) (string, error) {\n\t\taccessor, err := meta.Accessor(obj)\n\t\tif err != nil {"
  },
  {
    "id" : "274c38b5-e8a3-4733-a70c-2e764c498264",
    "prId" : 37770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37770#pullrequestreview-10982125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3c581f9-0d63-4c53-8ae9-04d0cf8480cf",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "check AttrFunc is non-nil and error",
        "createdAt" : "2016-12-06T16:42:52Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6bafbacbf2e4a4f54f3e7993440122e24acdee0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +988,992 @@\tif options.AttrFunc == nil {\n\t\treturn fmt.Errorf(\"options for %s must have AttrFunc set\", e.QualifiedResource.String())\n\t}\n\n\topts, err := options.RESTOptions.GetRESTOptions(e.QualifiedResource)"
  },
  {
    "id" : "97dc165d-4d7a-4275-9452-50306a6dd35c",
    "prId" : 37770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37770#pullrequestreview-12087489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01ce898-2e3b-455f-8f7d-5623d1e155d0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "make sure prefix is not just `/`",
        "createdAt" : "2016-12-08T18:38:14Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6bafbacbf2e4a4f54f3e7993440122e24acdee0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1003,1007 @@\t\treturn fmt.Errorf(\"store for %s has an invalid prefix %q\", e.QualifiedResource.String(), opts.ResourcePrefix)\n\t}\n\n\t// Set the default behavior for storage key generation\n\tif e.KeyRootFunc == nil && e.KeyFunc == nil {"
  },
  {
    "id" : "dfb9915a-8084-45b6-a2c0-fc3729f89f78",
    "prId" : 37487,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37487#pullrequestreview-10327115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a64eba2-ed60-4421-80ff-8dfd7503773a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@liggitt @ncdc ",
        "createdAt" : "2016-11-28T12:50:07Z",
        "updatedAt" : "2016-11-28T12:50:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5e7a7c9d-b8e0-4fdd-b069-23cd854be1a9",
        "parentId" : "2a64eba2-ed60-4421-80ff-8dfd7503773a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Does this need backporting?",
        "createdAt" : "2016-11-28T13:28:32Z",
        "updatedAt" : "2016-11-28T13:28:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f7cbf390-95fd-4249-a290-9cd296a99417",
        "parentId" : "2a64eba2-ed60-4421-80ff-8dfd7503773a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think so.",
        "createdAt" : "2016-11-28T14:44:03Z",
        "updatedAt" : "2016-11-28T14:44:03Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "17606603d25e0a692329a0affdd388326fb9ff53",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +205,209 @@\tif options == nil {\n\t\t// By default we should serve the request from etcd.\n\t\toptions = &api.ListOptions{ResourceVersion: \"\"}\n\t}\n\tlist := e.NewListFunc()"
  },
  {
    "id" : "4fc55054-d8c7-49f9-9824-0f153c515e6f",
    "prId" : 32751,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32751#pullrequestreview-398602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "822f6e8e-f620-4b2d-b081-61a951ec852e",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Can't it happen for replica sets as well?\n",
        "createdAt" : "2016-09-16T14:06:12Z",
        "updatedAt" : "2016-09-16T14:06:12Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "fe15c827-9e08-40a9-ba48-c3fb219e5afa",
        "parentId" : "822f6e8e-f620-4b2d-b081-61a951ec852e",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "OK, this new review thingy is strange - I see @lavalamp's reply at the bottom.\n\nI don't know - I thought that replica set is just a copy of replication controller + new selector.\n",
        "createdAt" : "2016-09-16T17:06:18Z",
        "updatedAt" : "2016-09-16T17:06:18Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "055be2fd-a056-4930-a9e0-d0bf54639bf3",
        "parentId" : "822f6e8e-f620-4b2d-b081-61a951ec852e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "`kubectl rolling-update` only works with rc, so we don't worry about rs.\n",
        "createdAt" : "2016-09-16T17:53:00Z",
        "updatedAt" : "2016-09-16T17:53:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4ea205aebd6d750c422365e5fc96f0891966bb6",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +278,282 @@\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif e.QualifiedResource.Resource != \"replicationcontrollers\" {\n\t\t\t\treturn nil, err\n\t\t\t}"
  },
  {
    "id" : "da224915-addf-4a93-8d39-17daafb644db",
    "prId" : 32751,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32751#pullrequestreview-420435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d549213-3329-40ef-b159-6d0d75e6f1fd",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Shouldn't we check if the error is actually a name collision, not e.g. internal server error?\n",
        "createdAt" : "2016-09-16T14:06:48Z",
        "updatedAt" : "2016-09-16T14:06:48Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "09d3de74-9493-4cf4-b9ba-3d5058880ea0",
        "parentId" : "8d549213-3329-40ef-b159-6d0d75e6f1fd",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It's checked a few lines before.\n",
        "createdAt" : "2016-09-16T17:53:46Z",
        "updatedAt" : "2016-09-16T17:53:46Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "175e6e40-4a51-4b86-aff8-c8c5508d012f",
        "parentId" : "8d549213-3329-40ef-b159-6d0d75e6f1fd",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "```\n        if !kubeerr.IsAlreadyExists(err) {\n            return nil, err\n        }\n```\n",
        "createdAt" : "2016-09-16T17:55:55Z",
        "updatedAt" : "2016-09-16T17:55:55Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0a6a1747-ebf9-4cf5-ba05-75ff3df6d89f",
        "parentId" : "8d549213-3329-40ef-b159-6d0d75e6f1fd",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Oh, OK - I was looking only at your changes.\n",
        "createdAt" : "2016-09-16T20:14:13Z",
        "updatedAt" : "2016-09-16T20:14:13Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4ea205aebd6d750c422365e5fc96f0891966bb6",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +281,285 @@\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\t*msg = fmt.Sprintf(\"Note: if you are using \\\"kubectl rolling-update\\\" and your kubectl version is older than v1.4.0, your rolling-update has probably failed, though the pods are correctly updated. Please see https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#kubectl-rolling-update for a workaround. : %s\", *msg)\n\t\t}\n\t\treturn nil, err"
  },
  {
    "id" : "e72ee4e6-5e58-457b-a4c6-0fc29a5b2aca",
    "prId" : 31189,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cca79b69-9bf5-4294-aa61-f9090f19cb39",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This changes the behavior of the decorator - probably ok, but something that we need to call out on the decorator Godoc (gets passed either an individual object or the list type returned by the store).\n",
        "createdAt" : "2016-08-24T04:42:04Z",
        "updatedAt" : "2016-08-25T02:58:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f01bc0a62f950883a2de0fefc2d8830d44e916a4",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +190,194 @@\t}\n\tif e.Decorator != nil {\n\t\tif err := e.Decorator(out); err != nil {\n\t\t\treturn nil, err\n\t\t}"
  },
  {
    "id" : "5a2033d7-3732-4b41-9a84-9e278d7874b8",
    "prId" : 30838,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33a8283e-7bc2-460e-87dd-597848eec9ed",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This is the meat.\n",
        "createdAt" : "2016-08-18T01:00:43Z",
        "updatedAt" : "2016-08-22T18:37:31Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "67b7c7290ac76e0ae619263ffc116d9b1e596181",
    "line" : null,
    "diffHunk" : "@@ -1,1 +451,455 @@// order of highest to lowest priority are: options.OrphanDependents, existing\n// finalizers of the object, e.DeleteStrategy.DefaultGarbageCollectionPolicy.\nfunc shouldUpdateFinalizers(e *Store, accessor meta.Object, options *api.DeleteOptions) (shouldUpdate bool, newFinalizers []string) {\n\tshouldOrphan := false\n\t// Get default orphan policy from this REST object type"
  },
  {
    "id" : "42e9bc09-532e-4c63-83cd-6683f17e3a05",
    "prId" : 26378,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dae5002-841f-48a3-a675-3790dabc806e",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "use it in L320\n",
        "createdAt" : "2016-05-26T20:18:37Z",
        "updatedAt" : "2016-05-26T21:45:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "0ae9ded1-1438-4cd5-bad3-7d892f61b094",
        "parentId" : "8dae5002-841f-48a3-a675-3790dabc806e",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Done\n",
        "createdAt" : "2016-05-26T21:41:36Z",
        "updatedAt" : "2016-05-26T21:45:12Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "32745630-8e14-42ee-88f4-6b7a9608af04",
        "parentId" : "8dae5002-841f-48a3-a675-3790dabc806e",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Done\n",
        "createdAt" : "2016-05-26T21:43:55Z",
        "updatedAt" : "2016-05-26T21:45:12Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "feaa3aba82520437503a4602c3badd2b84e5d15f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +118,122 @@}\n\nconst OptimisticLockErrorMsg = \"the object has been modified; please apply your changes to the latest version and try again\"\n\n// NamespaceKeyRootFunc is the default function for constructing storage paths to resource directories enforcing namespace rules."
  },
  {
    "id" : "5b50dcee-6480-4eb2-8f9e-3b4346b0ebe8",
    "prId" : 25787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "595eb839-eb7d-44d6-9844-db2d3c94d7a6",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you keep this logic out of the `tryUpdate` function? It doesn't need to be rerun in every retry. I think you can get the `obj` by `objInfo.UpdatedObject(ctx, nil)`.\n",
        "createdAt" : "2016-05-24T00:49:34Z",
        "updatedAt" : "2016-05-24T01:11:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "00fc7f4d-9b53-41d3-9d80-47912d6c482d",
        "parentId" : "595eb839-eb7d-44d6-9844-db2d3c94d7a6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, this check is not expensive, and I _definitely_ don't want to call `UpdatedObject` with a nil oldObj (or even call it multiple times unnecessarily). in Patch API calls, passing in the old object is how the new object is determined, and the admission chain now lives in that call as well.\n\nThere are unit tests in place in resttest.go to make sure the old object passed to `UpdatedObject()` is actually the old object from storage.\n",
        "createdAt" : "2016-05-24T00:52:39Z",
        "updatedAt" : "2016-05-24T01:11:47Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fc4a9431-2af0-4553-9514-7ebcf0b68d5c",
        "parentId" : "595eb839-eb7d-44d6-9844-db2d3c94d7a6",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the explanation.\n",
        "createdAt" : "2016-05-24T03:12:36Z",
        "updatedAt" : "2016-05-24T03:12:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0e960990-b469-4150-a1c3-07e936db2a3a",
        "parentId" : "595eb839-eb7d-44d6-9844-db2d3c94d7a6",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt, I realized if `obj` is not available until calling into the storage layer, I don't know how to rebase my PR onto yours: https://github.com/kubernetes/kubernetes/pull/25599/files#diff-543310447bdc03ffceba5cf23a04be97R313\n\nDo you have any suggestions?\n",
        "createdAt" : "2016-05-24T03:41:13Z",
        "updatedAt" : "2016-05-24T03:41:13Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "29252acd1ad80ca492c800713d9bc329282e9ed8",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +271,275 @@\t\t\treturn nil, nil, err\n\t\t}\n\t\tdoUnconditionalUpdate := resourceVersion == 0 && e.UpdateStrategy.AllowUnconditionalUpdate()\n\n\t\tversion, err := e.Storage.Versioner().ObjectResourceVersion(existing)"
  },
  {
    "id" : "cae2931b-9788-4d39-97b1-a5cf04d91291",
    "prId" : 25599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I made it a global flag. I had another local branch that plumbed this through from generic api server to the REST handlers, that's a lot of code. Let me know if the global flag is ok.\n",
        "createdAt" : "2016-05-19T17:08:47Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2d6e47d0-aac7-4ca6-8824-211c64344883",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Pretty barfy, but I understand why you want to do it. This may not be the best place but I can live with it.\n",
        "createdAt" : "2016-05-20T23:59:43Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9ed975b3-c640-4673-a8f3-1e2a4a143bd8",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "At the very least, though, make a copy of this variable in the Store object, default it to this value at construction time. That way this will at least be testable.\n",
        "createdAt" : "2016-05-21T00:00:38Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b9d4991b-9e42-48e5-93fc-97d71a7b8a6e",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I thought we had rest options for this... didn't that already get plumbed through for deletecollectionworkers?\n\nedit: yeah, I think this should be added to `RESTOptions`, which is already plumbed through and built from master config\n",
        "createdAt" : "2016-05-24T17:39:09Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bc7ccecd-58b6-46f9-b9e0-22b77ec2129e",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks. That looks promising. I'll try.\n",
        "createdAt" : "2016-05-24T19:26:47Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "7b9acdbc-2e8b-4bbe-aaf7-fe459420f7c1",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt my only complain about RESTOptions is that it's populated to the storage in individual `NewREST()` functions (e.g. https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/podsecuritypolicy/etcd/etcd.go#L59). If someone creates a new registry and forgets to populate the option, it will cause hard to find bugs. \n",
        "createdAt" : "2016-05-24T19:54:43Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "182e5959-4974-48a3-98e3-82359f5fc86f",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Hm.. I can't find an elegant way to check if the option is properly passed to the storage. Can I keep the global flag for now and open a tracking issue? \n",
        "createdAt" : "2016-05-24T20:22:21Z",
        "updatedAt" : "2016-05-24T20:22:21Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "11a1b958-11f0-4f72-9c1e-6a56577751c9",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> @liggitt my only complain about RESTOptions is that it's populated to the storage in individual NewREST() functions \n\ntrue, though the same could be said for the existing DeleteCollectionWorkers option. Should maybe update to actually set the RESTOptions into the store (or have a helper func responsible for setting DeleteCollectionWorkers, EnableGarbageCollection, etc, from the options)\n",
        "createdAt" : "2016-05-24T20:26:35Z",
        "updatedAt" : "2016-05-24T20:30:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "05daecd9-8f53-437b-8627-6ccbfbc52c42",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Just wanted to point out that it's always safe to default the DeleteCollectionWorkers to 1, but it's not safe to always EnabledGarbageCollector to false, because that disables the orphaning ability. So it's more harmful if someone forgets propagate the `EnabledGarbageCollector`.\n\nI think the solution would be create the Store via a initialization function rather than using struct literals, but that might hurt readability.\n\n> Should maybe update to actually set the RESTOptions into the store \n\nI'm not sure I follow. Do you mean make RESTOptions a member of store?\n\n> (or have a helper func responsible for setting DeleteCollectionWorkers, EnableGarbageCollection, etc, from the options)\n\nBut that still requires every NewREST() to call the helper func and someone can forget to call it.\n",
        "createdAt" : "2016-05-24T21:19:50Z",
        "updatedAt" : "2016-05-24T21:22:51Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "e3bd7120-8a8e-49ba-9ba1-19d936a58819",
        "parentId" : "a3b200c7-486a-4ed3-8da6-d1c0b3a8595c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Tracked in https://github.com/kubernetes/kubernetes/issues/26120\n",
        "createdAt" : "2016-05-24T22:54:33Z",
        "updatedAt" : "2016-05-24T22:54:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1665546d2d7ae2c15f35c038f26401322404884f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +45,49 @@// EnableGarbageCollector affects the handling of Update and Delete requests. It\n// must be synced with the corresponding flag in kube-controller-manager.\nvar EnableGarbageCollector bool\n\n// Store implements generic.Registry."
  },
  {
    "id" : "b208994b-b79e-404e-93a7-160bd9d6b5c1",
    "prId" : 25599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "749b2995-6730-4a85-9d8e-9eb835d9aa0f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Check err?\n",
        "createdAt" : "2016-05-23T20:05:53Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7f16718d-b656-46f5-b07a-95c56c5b4273",
        "parentId" : "749b2995-6730-4a85-9d8e-9eb835d9aa0f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "`!deleteImmediately` actually covers `err != nil`, but I'll add the error check to be future-proof.\n",
        "createdAt" : "2016-05-23T20:26:10Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1665546d2d7ae2c15f35c038f26401322404884f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +654,658 @@\t\t\terr, ignoreNotFound, deleteImmediately, out, lastExisting = e.updateForGracefulDeletionAndFinalizers(ctx, name, key, options, preconditions, obj)\n\t\t}\n\t}\n\t// !deleteImmediately covers all cases where err != nil. We keep both to be future-proof.\n\tif !deleteImmediately || err != nil {"
  },
  {
    "id" : "cac38435-2cff-4ace-8b9d-e8b94d5a79af",
    "prId" : 25599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c551d830-8fa6-4d01-9426-9832b0210df4",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt could you double check this logic? I rebased it atop your changes. Thanks.\n",
        "createdAt" : "2016-05-24T19:24:38Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b29c7fd3-628f-46a6-a138-06bc90950b62",
        "parentId" : "c551d830-8fa6-4d01-9426-9832b0210df4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should this be passing in the old object as well, to see if the particular update that is being made is that finalizers were non-empty, and now are empty?\n",
        "createdAt" : "2016-05-24T20:04:08Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b31cce93-1be7-4267-b915-e313c617a603",
        "parentId" : "c551d830-8fa6-4d01-9426-9832b0210df4",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I thought `existing` is the old object? As to whether check finalizers were non-empty, I replied to your other comment.\n",
        "createdAt" : "2016-05-24T20:17:31Z",
        "updatedAt" : "2016-05-24T20:17:31Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "be108937-77d0-4636-a485-a7fdca1037a7",
        "parentId" : "c551d830-8fa6-4d01-9426-9832b0210df4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, `existing` is the old object\n",
        "createdAt" : "2016-05-24T20:20:51Z",
        "updatedAt" : "2016-05-24T20:20:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1665546d2d7ae2c15f35c038f26401322404884f",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +371,375 @@\t\t\treturn nil, nil, err\n\t\t}\n\t\tdelete := e.shouldDelete(ctx, key, obj, existing)\n\t\tif delete {\n\t\t\tdeleteObj = obj"
  },
  {
    "id" : "57531077-f19e-44bd-801f-87312524ac03",
    "prId" : 25599,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3e65c44-a33a-4eae-a4a9-86c5218af6dd",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "shouldn't we also check `len(oldMeta.Finalizers) > 0`?\n",
        "createdAt" : "2016-05-24T20:05:34Z",
        "updatedAt" : "2016-05-24T20:07:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e81e8cbe-1253-4f90-9019-e54afd16888f",
        "parentId" : "c3e65c44-a33a-4eae-a4a9-86c5218af6dd",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "No, that would make the apiserver non-idempotent. Here is the previous discussion: https://github.com/kubernetes/kubernetes/pull/25599#discussion_r63802795\n",
        "createdAt" : "2016-05-24T20:11:47Z",
        "updatedAt" : "2016-05-24T20:11:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "11617cea-4403-4740-b9d4-54cf436c1497",
        "parentId" : "c3e65c44-a33a-4eae-a4a9-86c5218af6dd",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm... then this isn't really checking that this update is removing finalizers, is it?\n",
        "createdAt" : "2016-05-24T20:37:33Z",
        "updatedAt" : "2016-05-24T20:37:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "395f7d0b-f15b-49b6-ac37-bfadce88b27d",
        "parentId" : "c3e65c44-a33a-4eae-a4a9-86c5218af6dd",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Your statement is correct. My reasoning is: If oldMeta.DeletionGracePeriodSeconds==0, and the object still exists, it could only be that the finalizers were not empty, or the apiserver had crashed, either way we should delete the object now.\n",
        "createdAt" : "2016-05-24T20:57:36Z",
        "updatedAt" : "2016-05-24T20:57:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1665546d2d7ae2c15f35c038f26401322404884f",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +258,262 @@\t\treturn false\n\t}\n\treturn len(newMeta.Finalizers) == 0 && oldMeta.DeletionGracePeriodSeconds != nil && *oldMeta.DeletionGracePeriodSeconds == 0\n}\n"
  }
]