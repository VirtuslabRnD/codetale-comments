[
  {
    "id" : "06ba3b29-5479-4626-91f8-2b90a61d99b4",
    "prId" : 22965,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "261374c1-230d-4058-b766-65e4dcb3d27f",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It seems we cannot force user to support an UID (https://github.com/kubernetes/kubernetes/issues/23297#issuecomment-199506793), so we only use it as a precondition if it's not empty.\n",
        "createdAt" : "2016-03-22T00:03:04Z",
        "updatedAt" : "2016-03-25T18:21:52Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "31b425b3a189fc4ceee377038ff4337a6dca481c",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +266,270 @@\tvar preconditions *storage.Preconditions\n\t// If the UID of the new object is specified, we use it as an Update precondition.\n\tif len(meta.UID) != 0 {\n\t\tUIDCopy := meta.UID\n\t\tpreconditions = &storage.Preconditions{UID: &UIDCopy}"
  },
  {
    "id" : "ac894848-2a32-4a8a-b2b8-e3a8e1c51361",
    "prId" : 22418,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb5fa2b8-da7d-4b3a-b00e-3f6016f562f1",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt I keep var name as `ignoreNotFound` as I think `returnLastExistingForNotFound` is redundant. I could change if you insist.\n",
        "createdAt" : "2016-03-03T21:29:21Z",
        "updatedAt" : "2016-03-03T21:29:21Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3a6130f4495d76a6abacacca1da2e2e06d2e1fc",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +438,442 @@\t\t\t// https://github.com/kubernetes/kubernetes/issues/19403 for\n\t\t\t// details.\n\t\t\tignoreNotFound = true\n\t\t\t// exit the switch and delete immediately\n\t\tcase errDeleteNow:"
  },
  {
    "id" : "45bd87a4-fa3d-4001-aacf-a0ec6c00e5b2",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "484753cf-7241-4a60-8f9f-31cd3af66e67",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "always need a crash handler for spawned gofuncs, and ensure if a crash happens, it propagates an error to the error channel so it doesn't appear successful\n",
        "createdAt" : "2016-02-18T14:59:10Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "43634df1-48e1-4a3a-bde6-8939bdc674ca",
        "parentId" : "484753cf-7241-4a60-8f9f-31cd3af66e67",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "hmm - can you point me to some example of it?\n",
        "createdAt" : "2016-02-18T15:04:53Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b651b0c8-5678-4ef4-a191-6f363640c7f5",
        "parentId" : "484753cf-7241-4a60-8f9f-31cd3af66e67",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "https://github.com/kubernetes/kubernetes/blob/17325ef6ef61918d49a28d615c717bccec5b5a71/pkg/apiserver/resthandler.go#L909\n",
        "createdAt" : "2016-02-18T15:07:21Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +491,495 @@\twg.Add(workersNumber)\n\tfor i := 0; i < workersNumber; i++ {\n\t\tgo func() {\n\t\t\t// panics don't cross goroutine boundaries\n\t\t\tdefer utilruntime.HandleCrash(func(panicReason interface{}) {"
  },
  {
    "id" : "7abc366a-42ca-400a-a624-a02d6ab118c7",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bbb90fb-9a03-4aa2-bfbf-e86d1ca080d4",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`utilruntime.HandleCrash()`\n",
        "createdAt" : "2016-02-18T19:29:49Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +479,483 @@\terrs := make(chan error, workersNumber+1)\n\n\tgo func() {\n\t\tdefer utilruntime.HandleCrash(func(panicReason interface{}) {\n\t\t\terrs <- fmt.Errorf(\"DeleteCollection distributor panicked: %v\", panicReason)"
  },
  {
    "id" : "facbb622-2877-4086-9777-8772a65b4bf0",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b80e63da-041a-4a0b-95b7-77b15e9e18b0",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "side note: we should probably create a util for scatter+gather, because we do it in a couple of locations. \n",
        "createdAt" : "2016-02-18T22:09:46Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "74ce6720-2a6e-4ddb-8d13-f31cc68c9964",
        "parentId" : "b80e63da-041a-4a0b-95b7-77b15e9e18b0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - will add a TODO\n",
        "createdAt" : "2016-02-22T15:07:26Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +476,480 @@\t}\n\twg := sync.WaitGroup{}\n\ttoProcess := make(chan int, 2*workersNumber)\n\terrs := make(chan error, workersNumber+1)\n"
  },
  {
    "id" : "fa95a966-c41c-422d-b645-fbd4b50aa8b6",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fc095b5-dfaa-4023-8f06-b02116545df2",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "So I'm a little concerned we can mask errors here, how do we ensure reporting *errors?  \n",
        "createdAt" : "2016-02-18T22:14:58Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "5c481d51-fe28-4d61-b1b5-73ff32453ee2",
        "parentId" : "4fc095b5-dfaa-4023-8f06-b02116545df2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@timothysc We always report the first error - I think it's enough, because what we need to ensure is that we won't return nil if some error happened. If there were multiple errors from multiple workers, I think it's enough to return just the first one.\nDo you see any usecase to return the concatenation of all errors?\n",
        "createdAt" : "2016-02-22T15:10:20Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "42fb1c2a-79de-424b-b1dd-02a621e698e6",
        "parentId" : "4fc095b5-dfaa-4023-8f06-b02116545df2",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "couldn't we just have a V4 or V5 log on the delete call, jic.  \n",
        "createdAt" : "2016-02-23T17:39:43Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "fdb0116f-9d8e-4200-903e-1e2596293146",
        "parentId" : "4fc095b5-dfaa-4023-8f06-b02116545df2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added a log (hopefully I understood correctly what you meant).\n",
        "createdAt" : "2016-02-24T08:48:43Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1b15044f-398e-4bab-8c4b-6e31223314f0",
        "parentId" : "4fc095b5-dfaa-4023-8f06-b02116545df2",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "lgtm\n",
        "createdAt" : "2016-02-24T16:08:42Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +518,522 @@\twg.Wait()\n\tselect {\n\tcase err := <-errs:\n\t\treturn nil, err\n\tdefault:"
  },
  {
    "id" : "320f74c8-17f3-44eb-aeb9-cf4cb5f1bd94",
    "prId" : 21469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caf8c4ad-7fc3-4820-92f9-9ec9f9fe04a7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "min of 1\n",
        "createdAt" : "2016-02-23T17:19:17Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2db01e5c-e2fb-4337-8367-28832fb814bd",
        "parentId" : "caf8c4ad-7fc3-4820-92f9-9ec9f9fe04a7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "you mean max, right?\n",
        "createdAt" : "2016-02-24T08:45:43Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d457462a-6cf7-456c-bcea-709885777921",
        "parentId" : "caf8c4ad-7fc3-4820-92f9-9ec9f9fe04a7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "add a TODO to make this proportional to the number of items to delete, up to the max... feels silly to spawn 16 workers to delete 10 items\n",
        "createdAt" : "2016-02-25T14:58:00Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "75d2cfc9-6f2f-4c40-88ce-770638fbd71b",
        "parentId" : "caf8c4ad-7fc3-4820-92f9-9ec9f9fe04a7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-02-25T15:02:02Z",
        "updatedAt" : "2016-02-25T15:33:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "506899008f888df9d862abee93fde5488972c0ff",
    "line" : null,
    "diffHunk" : "@@ -1,1 +471,475 @@\t// DeleteCollectionWorkers (it doesn't make much sense to spawn 16\n\t// workers to delete 10 items).\n\tworkersNumber := e.DeleteCollectionWorkers\n\tif workersNumber < 1 {\n\t\tworkersNumber = 1"
  },
  {
    "id" : "3ef9e947-fa8e-4ce0-9ca7-9eef9cdbf1e1",
    "prId" : 20202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1273c2-4fe6-4099-a44f-be7aca028fe4",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should probably remove this comment, and add one before this line that explains what is happening.  This block is basically now just `return out, nil` and that needs a comment.\n",
        "createdAt" : "2016-01-29T18:20:09Z",
        "updatedAt" : "2016-02-02T21:01:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4df2378b-0637-41c9-884f-e187a3692965",
        "parentId" : "1c1273c2-4fe6-4099-a44f-be7aca028fe4",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> This block is basically now just return out, nil\n\nActually rest.BeforeDelete() at line 387 may change the `*options.GracePeriodSeconds` to 0, so I kept this block.\n",
        "createdAt" : "2016-01-29T18:23:56Z",
        "updatedAt" : "2016-02-02T21:01:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "32f3264b-046c-476b-bf42-d2ae4f7c6a56",
        "parentId" : "1c1273c2-4fe6-4099-a44f-be7aca028fe4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I mean, you have an if block that does the same thing as your normal return.  So you need the case, but you should remove the if block.\n",
        "createdAt" : "2016-01-29T18:25:36Z",
        "updatedAt" : "2016-02-02T21:01:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b7928c76-f77c-4508-8c22-0fc1c1aa9b21",
        "parentId" : "1c1273c2-4fe6-4099-a44f-be7aca028fe4",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Oh, the addition at line 406 is unintended. I'll remove it (and keep the if block).\n",
        "createdAt" : "2016-01-29T18:39:35Z",
        "updatedAt" : "2016-02-02T21:01:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6d96a04d05f546b16b4199bbc8aeda6102aedad",
    "line" : null,
    "diffHunk" : "@@ -1,1 +413,417 @@\t\t\t\treturn out, nil\n\t\t\t}\n\t\t\t// fall through and delete immediately\n\t\tcase errDeleteNow:\n\t\t\t// we've updated the object to have a zero grace period, or it's already at 0, so"
  },
  {
    "id" : "fb832a2f-be4e-441a-92cd-028b61cafe48",
    "prId" : 19342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "ref https://github.com/kubernetes/kubernetes/pull/18526#issuecomment-173572336\n",
        "createdAt" : "2016-01-22T18:33:04Z",
        "updatedAt" : "2016-01-22T18:33:04Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "dae4fe5d-08ee-43e1-8973-0c1cd0e5e2fd",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@deads2k, we may need to add a Resource field to NewInvalid as well. I couldn't find an elegant way to get Kind here.\n",
        "createdAt" : "2016-01-22T18:34:20Z",
        "updatedAt" : "2016-01-22T18:34:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5c538b7d-024f-4f41-80ed-5bbef3a5ae4e",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal could you take another look of this particular change (using Resource as Kind)? I left a TODO to explain why we did it.\n",
        "createdAt" : "2016-01-27T00:41:41Z",
        "updatedAt" : "2016-01-27T00:41:41Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "24014ae9-c79b-4c6d-9d81-9c42e9867998",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Looks fine to me, but I will let @deads2k give the final LGTM.\n",
        "createdAt" : "2016-01-27T22:43:26Z",
        "updatedAt" : "2016-01-27T22:43:26Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "9c842ebf-96c1-47ca-b02e-69fa46fe63b4",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Looks fine to me, but I will let @deads2k give the final LGTM.\n\nThis is fine for now.  @smarterclayton and I have been going back and forth with each other.  In most places before we were passing back a resource name in the `kind` field, but I made the mismatch painfully obvious.  That has led to a discussion of what `StatusDetails` should actually return to clients and how to populate it, but that discussion is beyond the scope of this pull.\n\nThanks for calling this out.\n",
        "createdAt" : "2016-01-28T13:50:24Z",
        "updatedAt" : "2016-01-28T13:50:24Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "224c6aaf-86cf-4fd8-b135-f80902a0e42c",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm fine too - Kind being practically wrong in implementation has made\nit useless for the original intent, and since changing error paths is\ndangerous we can phase in a new solution for the problem.\n",
        "createdAt" : "2016-01-28T14:57:47Z",
        "updatedAt" : "2016-01-28T14:57:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "62a17d44-fd00-4d7f-8ebc-9d70250b1a4d",
        "parentId" : "ca7580e5-0209-4310-9b3c-5b9345213060",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for the confirmation. I'll apply the lgtm.\n",
        "createdAt" : "2016-01-28T18:13:47Z",
        "updatedAt" : "2016-01-28T18:13:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "db9b5c97fb6e59f590cc2616155cd932f65e650c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +290,294 @@\t\t\t\t// TODO: The Invalid error should has a field for Resource.\n\t\t\t\t// After that field is added, we should fill the Resource and\n\t\t\t\t// leave the Kind field empty. See the discussion in #18526.\n\t\t\t\tqualifiedKind := unversioned.GroupKind{e.QualifiedResource.Group, e.QualifiedResource.Resource}\n\t\t\t\tfieldErrList := field.ErrorList{field.Invalid(field.NewPath(\"metadata\").Child(\"resourceVersion\"), newVersion, \"must be specified for an update\")}"
  },
  {
    "id" : "f7d8460b-219f-424e-933b-060e3a5cf7b6",
    "prId" : 18290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa48b82a-16c1-4086-9f5d-4c87249ddee5",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am wondering if the response should be the following:\n1. all the items that were in the listing scope (as i see it is now)\n2. all the items that were actually deleted\n3. all the items that did not delete \n\nSince we return immediately on error, I guess (3) is not really possible, and if that is the case, (2) and (1) become the same result.\n",
        "createdAt" : "2015-12-07T14:49:38Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "106b223e-a526-4371-8238-c0416d84182a",
        "parentId" : "fa48b82a-16c1-4086-9f5d-4c87249ddee5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@wojtek-t - does the etcd v3 api remove the concept of a directory node?  if we only intend to use this from the context of namespace deletion (where we know creates are blocked), then it would be good if after all the delete nodes, we delete the immediate parent directory node in etc.\n",
        "createdAt" : "2015-12-07T14:52:24Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "de0266f1-575b-47d7-8a08-37c5eeed2cf4",
        "parentId" : "fa48b82a-16c1-4086-9f5d-4c87249ddee5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Regarding the first one - yes - it's exactly as you wrote. I think it's the cleanest semantics, although we probably need to be clear that the operation is (at least for now) NOT atomic (i.e. it can happen that some of the elements will be removed, before error is returned.\n\nRegarding the second comment - AFAIK yes - they are removing the concept of directory.\nI agree that ideally we should remove also the \"directory\" entry in etcd, but currently it's not doable with our API. I will extend this TODO to be clear about.\nAlso note, that this PR is NOT making things worse (in fact we are moving \"bulk deletion\" from client to server. The result in the etcd is exactly the same.\n",
        "createdAt" : "2015-12-07T14:59:25Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b7614ac0-01b6-4408-8784-8ef04f4b636f",
        "parentId" : "fa48b82a-16c1-4086-9f5d-4c87249ddee5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "make sense.\n",
        "createdAt" : "2015-12-07T15:03:20Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f28bb68d8ce42ac803ec22574d5c3c19affeb0b9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +448,452 @@// possibly with etcd API, but watch is not delivered correctly then).\n// It will be possible to fix it with v3 etcd API.\nfunc (e *Etcd) DeleteCollection(ctx api.Context, options *api.DeleteOptions, listOptions *unversioned.ListOptions) (runtime.Object, error) {\n\tlistObj, err := e.List(ctx, listOptions)\n\tif err != nil {"
  },
  {
    "id" : "c1e9ed27-df9f-4b7b-a3c0-1f31210c6515",
    "prId" : 18290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11183fdc-15fb-4e86-b2c9-fb1f3c66f9f0",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "you \"could\" even parallelize this operation... Don't know if you want to, but  Namespace deletes are so painful in e2es. \n",
        "createdAt" : "2015-12-07T22:38:55Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "b4948949-9336-43fe-b81a-f3f123c5f56c",
        "parentId" : "11183fdc-15fb-4e86-b2c9-fb1f3c66f9f0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I agree - but even without any paralellization it's 3m instead of 35m in scalability tests.\nI think it's good enough for the first step - we can do further improvements later.\n",
        "createdAt" : "2015-12-08T08:25:52Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cfbab02c-8489-4028-bd43-d43d17870a18",
        "parentId" : "11183fdc-15fb-4e86-b2c9-fb1f3c66f9f0",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "That is great! @rrati will be thrilled. \n",
        "createdAt" : "2015-12-08T14:15:09Z",
        "updatedAt" : "2015-12-10T08:46:34Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "f28bb68d8ce42ac803ec22574d5c3c19affeb0b9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +462,466 @@\t\t\treturn nil, err\n\t\t}\n\t\tif _, err := e.Delete(ctx, accessor.Name(), options); err != nil {\n\t\t\treturn nil, err\n\t\t}"
  },
  {
    "id" : "47da37a0-e9f1-49dc-820c-de137bff84ca",
    "prId" : 16610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b7695d-d236-4a0d-92e0-65a64fae919e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1 from me.\n\nHowever, I remember @smarterclayton wasn't convinced about it at some point (although I'm not 100% it was about this particular class). @smarterclayton - thought about it?\n",
        "createdAt" : "2015-11-02T09:17:00Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f2f41ab38b2aef2f82587141038e535a444346",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +55,59 @@//\n// TODO: make the default exposed methods exactly match a generic RESTStorage\n// TODO: because all aspects of etcd have been removed it should really\n//       just be called a registry implementation.\ntype Etcd struct {"
  },
  {
    "id" : "f9084183-fe52-43d1-b1ca-a281e0d6a727",
    "prId" : 13746,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6380c9d0-c3ee-400a-8e68-2de68521cea4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think we should build these smarts into the KeyFunc-- won't this change prevent one from (efficiently) watching an object before it is created?\n",
        "createdAt" : "2015-09-09T17:20:53Z",
        "updatedAt" : "2015-09-15T00:53:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f7de805e-e257-47b0-8b79-62cd420a9e61",
        "parentId" : "6380c9d0-c3ee-400a-8e68-2de68521cea4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Shouldn't - you have to say what namespace you want to watch in.  The problem is the predictate (metadata.name) does not include the implicit predicate coming off the url (the namespace value).  KeyFunc requires name && namespace > 0.  The only thing this prevents is us rejecting metadata.name= at this level (but it should be higher anyway)\n\n```\n/v1/pods?fields=metadata%2Dname=\n```\n\nThe predicate is `metadata.name=`.  The predicate should be validated before we get here (since it's parsed) - we error from key func if either namespace or name is empty.  However, the predicate is a single match and ignores namespace.\n",
        "createdAt" : "2015-09-09T17:27:35Z",
        "updatedAt" : "2015-09-15T00:53:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b5c793ab-08bf-4ea0-b669-6f716a26b3bd",
        "parentId" : "6380c9d0-c3ee-400a-8e68-2de68521cea4",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK.\n",
        "createdAt" : "2015-09-11T21:54:26Z",
        "updatedAt" : "2015-09-15T00:53:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f63fe9c52e9156480721598b92f2b1f9b7792d06",
    "line" : null,
    "diffHunk" : "@@ -1,1 +154,158 @@\tdefer trace.LogIfLong(600 * time.Millisecond)\n\tif name, ok := m.MatchesSingle(); ok {\n\t\tif key, err := e.KeyFunc(ctx, name); err == nil {\n\t\t\ttrace.Step(\"About to read single object\")\n\t\t\terr := e.Storage.GetToList(key, filterFunc, list)"
  },
  {
    "id" : "294d7994-20e1-4380-838d-0a816bb3ee1c",
    "prId" : 10074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "259d9b0f-fe80-47cc-bff3-0cd5b412b97e",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "is there some reason why you don't return obj, nil, err here?\n",
        "createdAt" : "2015-06-24T05:12:20Z",
        "updatedAt" : "2015-06-24T05:12:20Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "6c3dacea-c7da-4c15-86a7-9f82fc7ad943",
        "parentId" : "259d9b0f-fe80-47cc-bff3-0cd5b412b97e",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "oh sorry, never mind, this is an error case.\n",
        "createdAt" : "2015-06-24T05:14:12Z",
        "updatedAt" : "2015-06-24T05:14:12Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "221ae4d63b5340d551f5ad51f11525f3a1bfc6ab",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +308,312 @@\t\t\terr = e.Helper.Versioner.UpdateObject(obj, res.Expiration, res.ResourceVersion)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t} else {"
  },
  {
    "id" : "7fc8bed5-6148-4a30-aa90-42b7d69f7746",
    "prId" : 9569,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't think this text is a net win. How about something more like one of these:\n- \"the resource has been changed since you read it; re-read it and try your change again\"\n- \"the resource's version has been incremented to %v; please retry\"\n- \"changes must be made against the most recent resource version\"\n- \"the resourceVersion you reported (%v) is out-of-date; please re-read the object and try your change again\"\n",
        "createdAt" : "2015-06-10T19:52:33Z",
        "updatedAt" : "2015-06-10T19:52:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4f1710c4-434b-4542-a239-528148f2b901",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "----- Original Message -----\n\n> > @@ -301,7 +301,7 @@ func (e *Etcd) Update(ctx api.Context, obj\n> > runtime.Object) (runtime.Object, bool\n> >         }\n> >         if newVersion != version {\n> >             // TODO: return the most recent version to a client?\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"the resource was updated to %d\", version))\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"another client made an update to this object in resource\n> >   version %d\", version))\n> \n> I don't think this text is a net win. How about something more like one of\n> these:\n> - \"the resource has been changed since you read it; re-read it and try your\n>   change again\"\n> - \"the resource's version has been incremented to %v; please retry\"\n> - \"changes must be made against the most recent resource version\"\n> - \"the resourceVersion you reported (%v) is out-of-date; please re-read the\n>   object and try your change again\"\n\nWe wanted to catch the version (useful for anyone who knows what they have to do) and that the likely cause was someone else actually changed this object (to slow someone down from doing an overwrite, or to explain to a brand new user why it failed).  The first example with resource version included would be fine for me as well.\n",
        "createdAt" : "2015-06-10T19:56:41Z",
        "updatedAt" : "2015-06-10T19:56:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ccfe3e47-92f4-4189-973f-049233713b68",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "There's two problems with the wording:\n- apiserver doesn't know if it was another client that made the conflicting change (it probably is, but we shouldn't report it as certain-- imagine a user modifying a pod and then modifying it again without re-getting it: this error will be very confusing for them.)\n- \"made an update to this object in resource version X\" is grammatically confusing and hard to parse. And by my parsing, incorrect-- the first offending change would actually be resourceVersion X+1.\n\nI agree we can do better than the old wording, and that making this clear is a good goal, but I don't agree that the new wording will actually help people more than it confuses them.\n\nI actually think my last suggestion (\"the resourceVersion you reported (%v) is out-of-date; please re-read the object and try your change again\") is best. Maybe amended to \"the resourceVersion you reported (%v) is out-of-date, the object has been modified; please re-read the object and try your change again\"\n",
        "createdAt" : "2015-06-10T20:05:01Z",
        "updatedAt" : "2015-06-10T20:05:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6dde0650-74f8-4f7d-8bbb-74547258984d",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "----- Original Message -----\n\n> > @@ -301,7 +301,7 @@ func (e *Etcd) Update(ctx api.Context, obj\n> > runtime.Object) (runtime.Object, bool\n> >         }\n> >         if newVersion != version {\n> >             // TODO: return the most recent version to a client?\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"the resource was updated to %d\", version))\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"another client made an update to this object in resource\n> >   version %d\", version))\n> \n> There's two problems with the wording:\n> - apiserver doesn't know if it was another client that made the conflicting\n>   change (it probably is, but we shouldn't report it as certain-- imagine a\n>   user modifying a pod and then modifying it again without re-getting it: this\n>   error will be very confusing for them.)\n> - \"made an update to this object in resource version X\" is grammatically\n>   confusing and hard to parse. And by my parsing, incorrect-- the first\n>   offending change would actually be resourceVersion X+1.\n> \n> I agree we can do better than the old wording, and that making this clear is\n> a good goal, but I don't agree that the new wording will actually help\n> people more than it confuses them.\n> \n> I actually think my last suggestion (\"the resourceVersion you reported (%v)\n> is out-of-date; please re-read the object and try your change again\") is\n> best. Maybe amended to \"the resourceVersion you reported (%v) is\n> out-of-date, the object has been modified; please re-read the object and try\n> your change again\"\n\nSome of that is almost like instructions to a programmer, and also long.  Also, %v was the new resource version, not the old one, so the user could copy and paste it into whatever they're changing (in the unlikely event the conflict happens with a human or is a one off, vs the more common continual updates of the kubelets/rcs).\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9569/files#r32160088\n",
        "createdAt" : "2015-06-10T20:15:16Z",
        "updatedAt" : "2015-06-10T20:15:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "08e4dea5-27a5-4c02-a7d0-77d92b3efc8c",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Not sure if I agree with giving the new resource version, because someone copy and pasting it is probably blowing away a change that they don't intend to.\n",
        "createdAt" : "2015-06-10T20:58:21Z",
        "updatedAt" : "2015-06-10T20:58:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a0dad0d4-b8b3-4a43-b2bb-f9124db64e79",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Not sure there is much value in the older value - either you set it and don't need it, or you didn't set it and so it means nothing to you.  The new value at least tells you what is on the server which doesn't require you potentially dropping context to run kubectl get foo bar.\n\n> On Jun 10, 2015, at 4:58 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/registry/generic/etcd/etcd.go:\n> \n> > @@ -301,7 +301,7 @@ func (e *Etcd) Update(ctx api.Context, obj runtime.Object) (runtime.Object, bool\n> >         }\n> >         if newVersion != version {\n> >             // TODO: return the most recent version to a client?\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name, fmt.Errorf(\"the resource was updated to %d\", version))\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name, fmt.Errorf(\"another client made an update to this object in resource version %d\", version))\n> >   Not sure if I agree with giving the new resource version, because someone copy and pasting it is probably blowing away a change that they don't intend to.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-06-10T21:00:41Z",
        "updatedAt" : "2015-06-10T21:00:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7578797b-40f0-498a-bf6d-e93a68ce9d85",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sure, I don't think that printing the old one or not is a big deal. I still think printing the new version basically enables user error; I can't think of a way to use that information safely.\n",
        "createdAt" : "2015-06-10T21:04:48Z",
        "updatedAt" : "2015-06-10T21:04:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3b0ef319-5ae6-4543-a7fb-9c1e542c599e",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's fair - hadn't followed the thought through to that.\n\n\"the resourceVersion you reported (%v) is out-of-date, the object has been modified; please re-read the object and try your change again\"\n\nHow about: \"the object has been modified; please apply your changes to the latest version and try again\"\n\n----- Original Message -----\n\n> > @@ -301,7 +301,7 @@ func (e *Etcd) Update(ctx api.Context, obj\n> > runtime.Object) (runtime.Object, bool\n> >         }\n> >         if newVersion != version {\n> >             // TODO: return the most recent version to a client?\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"the resource was updated to %d\", version))\n> > -           return nil, nil, kubeerr.NewConflict(e.EndpointName, name,\n> >   fmt.Errorf(\"another client made an update to this object in resource\n> >   version %d\", version))\n> \n> Sure, I don't think that printing the old one or not is a big deal. I still\n> think printing the new version basically enables user error; I can't think\n> of a way to use that information safely.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/9569/files#r32166322\n",
        "createdAt" : "2015-06-11T14:21:23Z",
        "updatedAt" : "2015-06-11T14:21:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f9958545-b016-4515-be58-20162e7bbd00",
        "parentId" : "23e503cd-370e-4a95-af66-1bfb2373fe8b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "> \"the object has been modified; please apply your changes to the latest version and try again\"\n\nSGTM\n",
        "createdAt" : "2015-06-11T18:28:10Z",
        "updatedAt" : "2015-06-11T18:28:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "90dcd347ac19e96c77bc4adaf84ee9a5747b72aa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +302,306 @@\t\tif newVersion != version {\n\t\t\t// TODO: return the most recent version to a client?\n\t\t\treturn nil, nil, kubeerr.NewConflict(e.EndpointName, name, fmt.Errorf(\"another client made an update to this object in resource version %d\", version))\n\t\t}\n\t\tif err := rest.BeforeUpdate(e.UpdateStrategy, ctx, obj, existing); err != nil {"
  },
  {
    "id" : "edbbb915-4deb-4c2c-8c02-578cfb8cd129",
    "prId" : 8724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bca93892-af75-44cd-acf6-9af10666b3df",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "So returned ttl is allowed to be > 2^63 - 1, but not the default? comment on this maybe?\n",
        "createdAt" : "2015-05-23T05:26:09Z",
        "updatedAt" : "2015-05-28T23:59:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "94fdbbd9-0e41-49ed-9184-31f481c9daf6",
        "parentId" : "bca93892-af75-44cd-acf6-9af10666b3df",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah I need to look at the etcd source code but it's either because in rare cases observed TTL can be negative or part of the original spec.  Will add a comment.\n\n> On May 23, 2015, at 1:26 AM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/registry/generic/etcd/etcd.go:\n> \n> > @@ -455,3 +445,16 @@ func (e *Etcd) WatchPredicate(ctx api.Context, m generic.Matcher, resourceVersio\n> > \n> > ```\n> > return e.Helper.WatchList(e.KeyRootFunc(ctx), version, filterFunc)\n> > ```\n> > \n> >  }\n> > +\n> > +// calculateTTL is a helper for retrieving the updated TTL for an object or returning an error\n> > +// if the TTL cannot be calculated. The defaultTTL is changed to zero if less than zero.\n> > +func (e *Etcd) calculateTTL(obj runtime.Object, defaultTTL int64, update bool) (ttl uint64, err error) {\n> > -   if defaultTTL < 0 {\n> > -       defaultTTL = 0\n> > -   }\n> > -   ttl = uint64(defaultTTL)\n> > -   if e.TTLFunc != nil {\n> > -       ttl, err = e.TTLFunc(obj, ttl, update)\n> > -   }\n> >   So returned ttl is allowed to be > 2^63 - 1, but not the default? comment on this maybe?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-05-23T05:36:31Z",
        "updatedAt" : "2015-05-28T23:59:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b8e918ed9449cdb6b83a182241f5b3edf2af1f2",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +482,486 @@\tif e.TTLFunc != nil {\n\t\tttl, err = e.TTLFunc(obj, ttl, update)\n\t}\n\treturn ttl, err\n}"
  },
  {
    "id" : "48504fe6-83e4-4fb7-a512-328c705ff998",
    "prId" : 5013,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8462423c-44d8-4f70-b2ab-3692543520bf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: name doesn't match\n",
        "createdAt" : "2015-03-05T20:00:15Z",
        "updatedAt" : "2015-03-05T20:00:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "17f7dd8d6db2ed687422257d0a9140796bdd54bb",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +357,361 @@}\n\n// WatchPredicate starts a watch for the items that m matches.\n// TODO: Detect if m references a single object instead of a list.\nfunc (e *Etcd) Watch(ctx api.Context, label, field labels.Selector, resourceVersion string) (watch.Interface, error) {"
  },
  {
    "id" : "4326b43b-4bbe-4f52-bf94-44d64ec1e86b",
    "prId" : 5010,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29fd728a-5b50-4334-8352-eed47edd335b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why is this Update function using the AtomicUpdate pattern? Shouldn't it just use CompareAndSwap?\n",
        "createdAt" : "2015-03-04T22:44:32Z",
        "updatedAt" : "2015-03-04T22:44:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "16e03ef2-7faa-4b26-b2d8-e76981a6f66f",
        "parentId" : "29fd728a-5b50-4334-8352-eed47edd335b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Setting the stage for being able to pass an arbitrary function into Update(), to allow Update() to be used from contexts that want to use the AtomicUpdate style remerge behavior on specific fields.  The normal Update case is what it uses today.\n\n----- Original Message -----\n\n> > ```\n> >     creating = false\n> > ```\n> > -       newVersion, err := e.Helper.ResourceVersioner.ResourceVersion(obj)\n> \n> Why is this Update function using the AtomicUpdate pattern? Shouldn't it just\n> use CompareAndSwap?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5010/files#r25822475\n",
        "createdAt" : "2015-03-04T22:48:43Z",
        "updatedAt" : "2015-03-04T22:48:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a344cf9c-1f3e-49fc-ba23-85b5e8e8bbca",
        "parentId" : "29fd728a-5b50-4334-8352-eed47edd335b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "An example is the generic Resize controller.  I'd like to expose Resize in a way that allows it to use the same update logic, but detect whether a size changed in the event of a conflict.  If it didn't, it should allow the update to continue.\n\n----- Original Message -----\n\n> Setting the stage for being able to pass an arbitrary function into Update(),\n> to allow Update() to be used from contexts that want to use the AtomicUpdate\n> style remerge behavior on specific fields.  The normal Update case is what\n> it uses today.\n> \n> ----- Original Message -----\n> \n> > > ```\n> > >   creating = false\n> > > ```\n> > > -     newVersion, err := e.Helper.ResourceVersioner.ResourceVersion(obj)\n> > \n> > Why is this Update function using the AtomicUpdate pattern? Shouldn't it\n> > just\n> > use CompareAndSwap?\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/5010/files#r25822475\n",
        "createdAt" : "2015-03-04T22:51:21Z",
        "updatedAt" : "2015-03-04T22:51:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d52aac13c71cfb3ac28e5b3695c04648c96bc94",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +251,255 @@\n\t\tcreating = false\n\t\tnewVersion, err := e.Helper.ResourceVersioner.ResourceVersion(obj)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "c8835fe8-a852-4899-971c-3284bf439074",
    "prId" : 4419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Does Helper still need to be public?\n",
        "createdAt" : "2015-02-13T17:36:07Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ca790ce2-8a26-4865-b7f6-4729027e4f5e",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The underlying store pattern for offering different behavior with the same core code would be \"copy store, update Decorator (pod cache integration), update strategy (pod status update)\".  Would prefer they all be public so that it's clear that you copy that way.\n",
        "createdAt" : "2015-02-13T17:37:39Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "80eb6c8b-5d34-43e3-b56c-37abf4d9ea41",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please answer questions like this with comments. :-)\n",
        "createdAt" : "2015-02-13T17:50:23Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "88c58a0f-c5cc-49d6-895e-decf47732eda",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "In the code.\n",
        "createdAt" : "2015-02-13T17:50:31Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "2f07d13e-1155-4c96-9bfb-4d3b5fac6402",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This seems to be a lower-level storage abstraction than generic.Registry. If we were to port to another k-v store (say, Zookeeper, for Fabric8), we'd need something similar for that store. Is any of this interface really Etcd-specific? Please put a TODO in what you think is the right place to introduce that abstraction.\n",
        "createdAt" : "2015-02-13T18:00:31Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b4d871d2-318b-400b-83a7-8b604c4c23b4",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think this is intentionally specific to etcd, specially TTLFunc.  Someone doing Zookeeper would copy generic.Etcd, and then copy pod/etcd/etcd.go.  The copied code would only be the stubs that expose the specific methods, which the test cases should validate.  Will add more godoc.\n\n----- Original Message -----\n\n> > -   // Called on all objects returned from the underlying store, after\n> > -   // the exit hooks are invoked.\n> > -   Decorator rest.ObjectFunc\n> > -   // Allows extended behavior during creation\n> > -   CreateStrategy rest.RESTCreateStrategy\n> > -   // On create of an object, attempt to run a further operation.\n> > -   AfterCreate rest.ObjectFunc\n> > -   // Allows extended behavior during updates\n> > -   UpdateStrategy rest.RESTUpdateStrategy\n> > -   // On update of an object, attempt to run a further operation.\n> > -   AfterUpdate rest.ObjectFunc\n> > -   // If true, return the object that was deleted. Otherwise, return a\n> >   generic\n> > -   // success status response.\n> > -   ReturnDeletedObject bool\n> > -   // On deletion of an object, attempt to run a further operation.\n> > -   AfterDelete rest.ObjectFunc\n> >   \n> >   // Used for all etcd access functions\n> >   Helper tools.EtcdHelper\n> \n> This seems to be a lower-level storage abstraction than generic.Registry. If\n> we were to port to another k-v store (say, Zookeeper, for Fabric8), we'd\n> need something similar for that store. Is any of this interface really\n> Etcd-specific? Please put a TODO in what you think is the right place to\n> introduce that abstraction.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24682873\n",
        "createdAt" : "2015-02-13T18:08:43Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9cd051c1-fd8e-4562-b479-d87c71d904c6",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Added doc.\n\n----- Original Message -----\n\n> I think this is intentionally specific to etcd, specially TTLFunc.  Someone\n> doing Zookeeper would copy generic.Etcd, and then copy pod/etcd/etcd.go.\n> The copied code would only be the stubs that expose the specific methods,\n> which the test cases should validate.  Will add more godoc.\n> \n> ----- Original Message -----\n> \n> > > - // Called on all objects returned from the underlying store, after\n> > > - // the exit hooks are invoked.\n> > > - Decorator rest.ObjectFunc\n> > > - // Allows extended behavior during creation\n> > > - CreateStrategy rest.RESTCreateStrategy\n> > > - // On create of an object, attempt to run a further operation.\n> > > - AfterCreate rest.ObjectFunc\n> > > - // Allows extended behavior during updates\n> > > - UpdateStrategy rest.RESTUpdateStrategy\n> > > - // On update of an object, attempt to run a further operation.\n> > > - AfterUpdate rest.ObjectFunc\n> > > - // If true, return the object that was deleted. Otherwise, return a\n> > >   generic\n> > > - // success status response.\n> > > - ReturnDeletedObject bool\n> > > - // On deletion of an object, attempt to run a further operation.\n> > > - AfterDelete rest.ObjectFunc\n> > >   \n> > >   // Used for all etcd access functions\n> > >   Helper tools.EtcdHelper\n> > \n> > This seems to be a lower-level storage abstraction than generic.Registry.\n> > If\n> > we were to port to another k-v store (say, Zookeeper, for Fabric8), we'd\n> > need something similar for that store. Is any of this interface really\n> > Etcd-specific? Please put a TODO in what you think is the right place to\n> > introduce that abstraction.\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24682873\n",
        "createdAt" : "2015-02-13T18:12:27Z",
        "updatedAt" : "2015-02-13T18:12:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "85cd6365-c97b-4c87-a751-7163267e70f1",
        "parentId" : "5a762cb0-1ee5-4984-9c79-9f96ff9e95da",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Any other comments?\n\n----- Original Message -----\n\n> Added doc.\n> \n> ----- Original Message -----\n> \n> > I think this is intentionally specific to etcd, specially TTLFunc.  Someone\n> > doing Zookeeper would copy generic.Etcd, and then copy pod/etcd/etcd.go.\n> > The copied code would only be the stubs that expose the specific methods,\n> > which the test cases should validate.  Will add more godoc.\n> > \n> > ----- Original Message -----\n> > \n> > > > -   // Called on all objects returned from the underlying store, after\n> > > > -   // the exit hooks are invoked.\n> > > > -   Decorator rest.ObjectFunc\n> > > > -   // Allows extended behavior during creation\n> > > > -   CreateStrategy rest.RESTCreateStrategy\n> > > > -   // On create of an object, attempt to run a further operation.\n> > > > -   AfterCreate rest.ObjectFunc\n> > > > -   // Allows extended behavior during updates\n> > > > -   UpdateStrategy rest.RESTUpdateStrategy\n> > > > -   // On update of an object, attempt to run a further operation.\n> > > > -   AfterUpdate rest.ObjectFunc\n> > > > -   // If true, return the object that was deleted. Otherwise, return a\n> > > >   generic\n> > > > -   // success status response.\n> > > > -   ReturnDeletedObject bool\n> > > > -   // On deletion of an object, attempt to run a further operation.\n> > > > -   AfterDelete rest.ObjectFunc\n> > > >   \n> > > >   // Used for all etcd access functions\n> > > >   Helper tools.EtcdHelper\n> > > \n> > > This seems to be a lower-level storage abstraction than generic.Registry.\n> > > If\n> > > we were to port to another k-v store (say, Zookeeper, for Fabric8), we'd\n> > > need something similar for that store. Is any of this interface really\n> > > Etcd-specific? Please put a TODO in what you think is the right place to\n> > > introduce that abstraction.\n> > > \n> > > ---\n> > > \n> > > Reply to this email directly or view it on GitHub:\n> > > https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24682873\n",
        "createdAt" : "2015-02-13T18:24:53Z",
        "updatedAt" : "2015-02-13T18:24:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440310ea0d11ad2e3f8e21c98bae08dc3ee3e13",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +88,92 @@\n\t// Used for all etcd access functions\n\tHelper tools.EtcdHelper\n}\n"
  }
]