[
  {
    "id" : "835ad793-9e16-4936-afbe-fcd8488907c3",
    "prId" : 20897,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if possible, can we also have a separate test that inserts an old incorrect record (containing resourceVersion) into etcd, makes sure a no-op update is ignored, and an actual update is persisted?\n",
        "createdAt" : "2016-02-09T15:40:23Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1df2a7e1-f340-438a-981e-38a37d4655cf",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I'm afraid I don't understand:\n- what do you mean by \"inserts an old incorrect record (containing resourceVersion) into etcd\"?\n- actual updates are tested by a bunch of other tests, I don't think we need to test it here again\n",
        "createdAt" : "2016-02-09T15:43:57Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "09bf4cfe-f72f-48a0-8263-bac3db9f9521",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "All the other tests are testing updates against new records made with the current version which will not set resourceVersion in etcd. I want to make sure when this fix runs against an etcd containing old incorrect records which contain resourceVersion, we get correct update behavior\n",
        "createdAt" : "2016-02-09T15:47:14Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "62732cfd-0845-4397-a3b1-271ef9160601",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Got it - makes sense (although in that case no-op update is not no-op so it will be performed). But having such test makes sense.\n",
        "createdAt" : "2016-02-09T15:49:54Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "df651ee0-d64a-492b-adc6-5d15b8fa79f5",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Will add such test tomorrow.\n",
        "createdAt" : "2016-02-09T15:55:20Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1295ce09-047e-48b2-9782-96961b65b922",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> although in that case no-op update is not no-op so it will be performed\n\nfair enough. I guess the first one would actually update, and correctly empty the `resourceVersion` in etcd, so a second update should be a true no-op, right?\n",
        "createdAt" : "2016-02-09T15:57:05Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "56bac5a3-03b0-4667-8a0c-10b66bdfde77",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - that should be the case.\n",
        "createdAt" : "2016-02-09T15:57:58Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "19be74c0-411d-4e93-935d-f1a9733ec3f8",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Hmm - it seems that there is no easy way to store object with ResourceVersion set in etcd after my fixes.\nI manually checked that it works as expected and added a TODO for it.\n",
        "createdAt" : "2016-02-10T08:48:38Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "26c4a669-4335-40c5-a016-986c7a370530",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You can't use a fake storage interface to test?\n",
        "createdAt" : "2016-02-10T10:03:39Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a7378f44-c96b-49c5-b836-382e4d863da0",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I can, but we don't have such, so this would make this change much bigger (it will take some time to implement it).\n",
        "createdAt" : "2016-02-10T10:06:50Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "5c779ba4-cfda-4f6c-a5ca-0bcedf2271ea",
        "parentId" : "08d92244-371a-4675-8cad-a1b71ae76bd1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We don't have a fake storage interface anymore?  ....\n\n....\n\n....\n\nOk.  Then it can wait for a follow up.\n",
        "createdAt" : "2016-02-10T10:45:31Z",
        "updatedAt" : "2016-02-12T08:23:38Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e97793840440a1122fa86289edc08105a76792e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +341,345 @@\nfunc TestNoOpUpdates(t *testing.T) {\n\tserver, registry := NewTestGenericEtcdRegistry(t)\n\tdefer server.Terminate(t)\n"
  },
  {
    "id" : "a6ef53d9-0efd-4a49-beba-e7f74699439a",
    "prId" : 16610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f2c49ab-3864-4fef-95e3-0a13fe494247",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "it's so much easier now :) thanks!\n",
        "createdAt" : "2015-11-02T10:09:11Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6b9757d4-7101-4d9a-a3fc-cd2242172163",
        "parentId" : "6f2c49ab-3864-4fef-95e3-0a13fe494247",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : ";-) \n",
        "createdAt" : "2015-11-03T20:43:06Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f2f41ab38b2aef2f82587141038e535a444346",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +235,239 @@\t_, err = registry.Create(testContext, podB)\n\tif !errors.IsAlreadyExists(err) {\n\t\tt.Errorf(\"Unexpected error: %v\", err)\n\t}\n}"
  },
  {
    "id" : "f22e8874-a913-4a4c-80e5-ec42b9b0933b",
    "prId" : 16610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29538037-5542-4851-8e74-9bd1ab8bffa6",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Is it necessary for podB to have RV=3? Can't we remove it? If not can you please add a comment?\n",
        "createdAt" : "2015-11-02T10:15:06Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "0df5e15b-e836-444c-b38c-77145ff0e03c",
        "parentId" : "29538037-5542-4851-8e74-9bd1ab8bffa6",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Removed the explicit RV=3 in this case. \n",
        "createdAt" : "2015-11-03T20:55:41Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f2f41ab38b2aef2f82587141038e535a444346",
    "line" : 435,
    "diffHunk" : "@@ -1,1 +295,299 @@\n\t// Test4 normal update and verify\n\tif !updateAndVerify(t, testContext, registry, podB) {\n\t\tt.Errorf(\"Unexpected error updating podB\")\n\t}"
  },
  {
    "id" : "164e5f73-9726-4860-bfc4-d9697145f2da",
    "prId" : 16610,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8485b62e-8209-4386-851d-20c3c614d035",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What do you mean by: \"creation of root objects\"?\n\n@smarterclayton who wrote this code originally for thoughts (I don't know motivation why it was added).\n",
        "createdAt" : "2015-11-02T10:19:23Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "69af4785-5b68-49a9-8e42-40c98ed3867a",
        "parentId" : "8485b62e-8209-4386-851d-20c3c614d035",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "default creation of /registry/pods means that RV=2.. So the unconditional update logic will never be met.  (resourceVersion == 0) < never happens. \n",
        "createdAt" : "2015-11-03T20:57:10Z",
        "updatedAt" : "2015-11-05T14:29:36Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f2f41ab38b2aef2f82587141038e535a444346",
    "line" : 452,
    "diffHunk" : "@@ -1,1 +302,306 @@\t// NOTE: The logic for unconditional updates doesn't make sense to me, and imho should be removed.\n\t// doUnconditionalUpdate := resourceVersion == 0 && e.UpdateStrategy.AllowUnconditionalUpdate()\n\t// ^^ That condition can *never be true due to the creation of root objects.\n\t//\n\t// registry.UpdateStrategy.(*testRESTStrategy).allowUnconditionalUpdate = true"
  },
  {
    "id" : "f7badb6a-6544-4636-8d59-737b2009190e",
    "prId" : 6373,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f5ded15-acee-42bb-9d23-3092ae387f97",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think it should return true if the size of StringSet is set to 1.\n",
        "createdAt" : "2015-04-03T06:11:20Z",
        "updatedAt" : "2015-04-03T20:11:40Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8943f1bb-e4a6-4032-b627-b70c94d2320d",
        "parentId" : "5f5ded15-acee-42bb-9d23-3092ae387f97",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why would that be guaranteed to match a single resource?  Field \"portalIP=None\" would have a single selector but match many services.\n\n> On Apr 3, 2015, at 2:11 AM, Wojciech Tyczynski notifications@github.com wrote:\n> \n> In pkg/registry/generic/etcd/etcd_test.go:\n> \n> > @@ -97,13 +97,21 @@ func (sm SetMatcher) Matches(obj runtime.Object) (bool, error) {\n> >     return sm.Has(pod.Name), nil\n> >  }\n> > \n> > -// EverythingMatcher matches everything\n> > -type EverythingMatcher struct{}\n> > +func (setMatcher) MatchesSingle() (string, bool) {\n> > -   return \"\", false\n> >   I think it should return true if the size of StringSet is set to 1.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-03T14:37:31Z",
        "updatedAt" : "2015-04-03T20:11:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "395c03b1-75bf-4357-9797-db688411e1e5",
        "parentId" : "5f5ded15-acee-42bb-9d23-3092ae387f97",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "IIUC setMatcher contains only the list of names that we would like to match (at least it's how I understood it from Matches method and its line 97)\n",
        "createdAt" : "2015-04-03T15:10:36Z",
        "updatedAt" : "2015-04-03T20:11:40Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "215c1144-4136-4489-b023-da7d2494889b",
        "parentId" : "5f5ded15-acee-42bb-9d23-3092ae387f97",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "My bad, you're right.\n\n> On Apr 3, 2015, at 11:10 AM, Wojciech Tyczynski notifications@github.com wrote:\n> \n> In pkg/registry/generic/etcd/etcd_test.go:\n> \n> > @@ -97,13 +97,21 @@ func (sm SetMatcher) Matches(obj runtime.Object) (bool, error) {\n> >     return sm.Has(pod.Name), nil\n> >  }\n> > \n> > -// EverythingMatcher matches everything\n> > -type EverythingMatcher struct{}\n> > +func (setMatcher) MatchesSingle() (string, bool) {\n> > -   return \"\", false\n> >   IIUC setMatcher contains only the list of names that we would like to match (at least it's how I understood it from Matches method and its line 97)\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-04-03T15:22:35Z",
        "updatedAt" : "2015-04-03T20:11:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "34e5b2c3-9fd3-45bf-8e80-640e68e6934b",
        "parentId" : "5f5ded15-acee-42bb-9d23-3092ae387f97",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, I think you're right-- it matches by name which is indeed its key. Good catch.\n",
        "createdAt" : "2015-04-03T18:02:53Z",
        "updatedAt" : "2015-04-03T20:11:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c2d3ffe689b33a1974a5b94e85f55963223e0e6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\t\treturn sm.List()[0], true\n\t}\n\treturn \"\", false\n}\n"
  }
]