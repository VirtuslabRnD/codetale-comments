[
  {
    "id" : "8807d9a4-6cbb-4f75-b735-774042f51658",
    "prId" : 71564,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71564#pullrequestreview-180282042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0689d30-c79f-4a62-88a9-fcaca0e15be4",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Not overly familiar with the code, but is this actually a behaviour change or just something that was harmless before but now causes extra output? ",
        "createdAt" : "2018-11-30T13:02:01Z",
        "updatedAt" : "2018-11-30T13:02:04Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "19f9543b-f061-48d4-9949-c5906cd5c08e",
        "parentId" : "c0689d30-c79f-4a62-88a9-fcaca0e15be4",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "The rules in aggregated roles are set by the aggregating controller, based on the selector in the role. If both the expected and existing roles are aggregated roles, it doesn't make sense to compute \"extra\" rules by looking at the expected role's rules.\r\n\r\nreconciliation has two callers: kube-apiserver on startup, and `kubectl auth reconcile`\r\n* kube-apiserver doesn't remove extra rules or subjects, so this is not a behavior change for it\r\n* kubectl would have removed these extra rules if `--remove-extra-rules` was passed, then the rules would have been immediately/eventually reset by the aggregated role controller. I'd actually consider removing them a bug for an aggregated role.",
        "createdAt" : "2018-11-30T14:14:28Z",
        "updatedAt" : "2018-11-30T14:14:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "74ecf8d978e3a4cd569d8355a01b6da144100c70",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +196,200 @@\t// Compute extra and missing rules\n\t// Don't compute extra permissions if expected and existing roles are both aggregated\n\tif expected.GetAggregationRule() == nil || existing.GetAggregationRule() == nil {\n\t\t_, result.ExtraRules = validation.Covers(expected.GetRules(), existing.GetRules())\n\t}"
  }
]