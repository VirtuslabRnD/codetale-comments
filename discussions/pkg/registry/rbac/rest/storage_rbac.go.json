[
  {
    "id" : "482d687a-aa1a-43b2-85b1-b8d243589485",
    "prId" : 96444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96444#pullrequestreview-528639722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d49594e0-0e4a-4d53-b8de-8278d5ec2b25",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "if we are concerned about changing the no-retry behavior, we can put this under the StorageVersionAPI feature gate, just to deflake the tests. \r\n\r\nbut according to https://github.com/kubernetes/kubernetes/blob/667d1c2c3fe7f6cece4f74dfd28983d5bdbf4208/pkg/registry/rbac/rest/storage_rbac.go#L174-L175, I think we should retry and reconcile these objects properly. ",
        "createdAt" : "2020-11-11T23:56:58Z",
        "updatedAt" : "2020-11-12T01:42:48Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bf7fcfc76eb809ac74ce1f5f36f95de5e3a06ba",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +338,342 @@\t\t\t}\n\t\t\t// failed to reconcile some objects, retry\n\t\t\tif failedReconciliation {\n\t\t\t\treturn false, nil\n\t\t\t}"
  },
  {
    "id" : "97b8a0fe-5f39-4ddc-9d50-47203695e37f",
    "prId" : 93873,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93873#pullrequestreview-512313101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace94b7c-05cd-4205-86e6-c57bf25aec8c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is ServiceUnavailble error returned when the API server is blocked by storage version updates? Can you add a comment?",
        "createdAt" : "2020-10-20T04:05:56Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f77ce7c62db3761580d06622fbfb1cedaa1293",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +217,221 @@\t\t\t\t}\n\t\t\t\t// ServiceUnavailble error is returned when the API server is blocked by storage version updates\n\t\t\t\terr := retryOnConflictOrServiceUnavailable(retry.DefaultBackoff, func() error {\n\t\t\t\t\tresult, err := opts.Run()\n\t\t\t\t\tif err != nil {"
  },
  {
    "id" : "d06fe7e8-80f0-4a44-9070-6a7c505ce0f4",
    "prId" : 93873,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93873#pullrequestreview-526693681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "An alternative to this is to permit self-requests even when blocking other requests, right? Did we think about that?",
        "createdAt" : "2020-11-04T23:39:15Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0e6f2655-c2ee-48f5-bee3-a484dbb6cd1a",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Another option is to do a GET first. This might be useful anyway, as 99.99% of the time this stuff will already be correct.",
        "createdAt" : "2020-11-05T00:02:01Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c6a55c02-0da9-46e8-b036-dff61d78d02f",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "> An alternative to this is to permit self-requests even when blocking other requests\r\n\r\nThe purpose of the filter is to make sure no write request gets through before the apiserver updates the corresponding storage version record. I don't see how self-requests are different from other requests.  \r\n\r\n> Another option is to do a GET first\r\n\r\nDo you mean get the rule or get the storage version? ",
        "createdAt" : "2020-11-05T06:48:47Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "7a74c82f-ea99-42f3-97b9-f00b8e48c152",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Getting the rule.",
        "createdAt" : "2020-11-05T23:33:47Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "decfd2e9-7cc6-4ae6-8d1b-1f1cc6d78770",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "The ReconcileRole logic does do a [get](https://github.com/kubernetes/kubernetes/blob/bd95fb101dd83cfca9d95e55b2f0d29720016e51/staging/src/k8s.io/component-helpers/auth/rbac/reconciliation/reconcile_role.go#L110) first and skips if no Reconciliation is needed",
        "createdAt" : "2020-11-06T09:03:46Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "fa26879b-93cc-49dc-857a-dfb98148a132",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Great.",
        "createdAt" : "2020-11-09T22:05:49Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "31800113-5106-47b9-b90b-07a3ee58ed98",
        "parentId" : "2f0f84be-3269-41c8-9647-9f4927ef8b89",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess in the future we might want to think about just retrying, period, rather than build up a long list of reasons.",
        "createdAt" : "2020-11-09T22:07:06Z",
        "updatedAt" : "2020-11-09T23:23:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f77ce7c62db3761580d06622fbfb1cedaa1293",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +217,221 @@\t\t\t\t}\n\t\t\t\t// ServiceUnavailble error is returned when the API server is blocked by storage version updates\n\t\t\t\terr := retryOnConflictOrServiceUnavailable(retry.DefaultBackoff, func() error {\n\t\t\t\t\tresult, err := opts.Run()\n\t\t\t\t\tif err != nil {"
  },
  {
    "id" : "552ad350-42a0-47a9-9828-f4fe63f725f2",
    "prId" : 73807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73807#pullrequestreview-209434774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a862871-1698-4fd0-84bc-00f26de76dd7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the subfields of `existingRoleBinding` can be used directly. can simplify to:\r\n\r\n```go\r\nnewCRB := clusterRoleBindingToCreate.DeepCopy()\r\nnewCRB.Subjects = existingRoleBinding.Subjects\r\nnewCRB.Labels = existingRoleBinding.Labels\r\nnewCRB.Annotations = existingRoleBinding.Annotations\r\nif _, err := clusterRoleBindingClient.ClusterRoleBindings().Create(newCRB) ...\r\n```",
        "createdAt" : "2019-03-01T05:08:44Z",
        "updatedAt" : "2019-03-02T02:45:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "57288610-b339-4832-a4c4-35592e71541d",
        "parentId" : "9a862871-1698-4fd0-84bc-00f26de76dd7",
        "authorId" : "1f68015a-b968-47bc-b26f-0adff52fb6d8",
        "body" : "done",
        "createdAt" : "2019-03-01T05:49:16Z",
        "updatedAt" : "2019-03-02T02:45:17Z",
        "lastEditedBy" : "1f68015a-b968-47bc-b26f-0adff52fb6d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d31928d26684bdcafdb801cbcdff0fc77171b",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +368,372 @@\n\t\t// If the source exists, but the target does not,\n\t\t// copy the subjects, labels, and annotations from the former to create the latter.\n\t\tklog.V(1).Infof(\"copying subjects, labels, and annotations from ClusterRoleBinding %q to template %q\", existingBindingName, clusterRoleBindingToCreate.Name)\n\t\tnewCRB := clusterRoleBindingToCreate.DeepCopy()"
  },
  {
    "id" : "896541d3-c750-47ed-8836-80b710799c2e",
    "prId" : 47011,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47011#pullrequestreview-54538444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5577459d-97a4-42ce-a09a-6844d63942df",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we have multiple consumers of this, I'd rather it go to the eventual util repo than the client repo.  Am I wrong?",
        "createdAt" : "2017-07-06T21:28:59Z",
        "updatedAt" : "2017-08-14T21:16:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "81252d6f-efcd-4851-9e36-ee9c7d70b5fb",
        "parentId" : "5577459d-97a4-42ce-a09a-6844d63942df",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "`retry` depends on `k8s.io/apimachinery`, see: https://github.com/mengqiy/kubernetes/blob/05deb21f5c84324a24660f8e85e8e5d4f21a7419/staging/src/k8s.io/client-go/util/retry/util.go#L22-L23.\r\n\r\nIMHO, it's not a generic util. Not sure where it should live.\r\n",
        "createdAt" : "2017-07-06T21:40:17Z",
        "updatedAt" : "2017-08-14T21:16:44Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "3cf9fd00-563e-455f-a95a-bc7902713fd0",
        "parentId" : "5577459d-97a4-42ce-a09a-6844d63942df",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "yeah, that sounds good to me",
        "createdAt" : "2017-08-06T15:50:00Z",
        "updatedAt" : "2017-08-14T21:16:44Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "7500b55ce42f82a405def05386e642ba661b2460",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +36,40 @@\tgenericapiserver \"k8s.io/apiserver/pkg/server\"\n\tserverstorage \"k8s.io/apiserver/pkg/server/storage\"\n\t\"k8s.io/client-go/util/retry\"\n\t\"k8s.io/kubernetes/pkg/api\"\n\t\"k8s.io/kubernetes/pkg/apis/rbac\""
  },
  {
    "id" : "796a5f47-700e-434c-8ec5-eb2360a7c586",
    "prId" : 39149,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39149#pullrequestreview-14234855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b3ba684-41b8-487d-bfe6-990291c87a21",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this still exit even if RBAC authz isn't being used?",
        "createdAt" : "2016-12-22T21:23:51Z",
        "updatedAt" : "2017-01-03T13:52:29Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7637fb36-2b1c-4718-bfdd-cd3cfa2d56f6",
        "parentId" : "8b3ba684-41b8-487d-bfe6-990291c87a21",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Yes, but the group is on and something is seriously wrong, so I don't feel too bad.",
        "createdAt" : "2016-12-22T21:39:38Z",
        "updatedAt" : "2017-01-03T13:52:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "484b4069-95bb-4563-b166-21a9f1168686",
        "parentId" : "8b3ba684-41b8-487d-bfe6-990291c87a21",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Also, I don't think we should plumb authorizer knowledge down here",
        "createdAt" : "2016-12-22T21:40:53Z",
        "updatedAt" : "2017-01-03T13:52:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "90a7251394ade5170bf4d55b610f6fadc3111b97",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +164,168 @@\t// if we're never able to make it through intialization, kill the API server\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to initialize roles: %v\", err)\n\t}\n"
  },
  {
    "id" : "de0b68aa-edae-4767-a4ed-fd49971b8332",
    "prId" : 37770,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37770#pullrequestreview-12090219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dc8a676-8447-411b-8479-b1283c197bd3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "move the construction of the storage objects up... we want to share them between the rule resolver and the rest storage so we share watch caches",
        "createdAt" : "2016-12-08T18:47:25Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "47f69e5f-6dc8-41d6-ba91-28ed048c85e4",
        "parentId" : "0dc8a676-8447-411b-8479-b1283c197bd3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "be careful not to initialize storage if all types are disabled",
        "createdAt" : "2016-12-08T18:49:10Z",
        "updatedAt" : "2016-12-08T22:24:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6bafbacbf2e4a4f54f3e7993440122e24acdee0",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +64,68 @@func (p RESTStorageProvider) v1alpha1Storage(apiResourceConfigSource genericapiserver.APIResourceConfigSource, restOptionsGetter generic.RESTOptionsGetter) map[string]rest.Storage {\n\tversion := rbacapiv1alpha1.SchemeGroupVersion\n\n\tonce := new(sync.Once)\n\tvar ("
  }
]