[
  {
    "id" : "e2989bae-1afd-44f8-921c-1698bf3de866",
    "prId" : 100842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100842#pullrequestreview-650778275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "072528a6-b6b1-4075-8b0e-908fed5a9b12",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This is wrong, you want to always set this field to 0 when the feature is off, so:\r\n```golang\r\nif newSS != nil {\r\n    newSS.Spec.MinReadySeconds = int32(0)\r\n}\r\n```",
        "createdAt" : "2021-04-29T16:53:37Z",
        "updatedAt" : "2021-05-03T22:43:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "684cc5c8-62ac-493c-94a0-b3d3590e8100",
        "parentId" : "072528a6-b6b1-4075-8b0e-908fed5a9b12",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "We should be using the oldSS only, I slightly tweaked the defaulting. Now, if the minReadySeconds is >0 then only old value will be copied to new value if not the defaulting to 0 happens.",
        "createdAt" : "2021-05-03T22:23:37Z",
        "updatedAt" : "2021-05-03T22:43:48Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "08857fea-cf31-4dde-b701-dd4c8b2fbb2b",
        "parentId" : "072528a6-b6b1-4075-8b0e-908fed5a9b12",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "To be clear, following scenarios happen\r\n- When the user disables feature flag and gives a -ve value for minReadySeconds, it will be defaulted to 0.\r\n- When the user enables this flag and gives a -ve value for minReadySeconds, the validation will fail and the user will not be able to create a StatefulSet\r\n\r\nThis ensures updates go smoothly.",
        "createdAt" : "2021-05-03T23:03:37Z",
        "updatedAt" : "2021-05-03T23:06:24Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c95bc8830be754c6189320bd4e13b5cd7b8b95c",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +119,123 @@\t\tif !minReadySecondsFieldsInUse(oldSS) {\n\t\t\tnewSS.Spec.MinReadySeconds = int32(0)\n\t\t}\n\t}\n}"
  },
  {
    "id" : "037a72d2-aeeb-4b0d-ac8b-90091986acc7",
    "prId" : 100842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100842#pullrequestreview-667530418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2b390a6-7d62-44f9-8069-7dea63b8f523",
        "parentId" : null,
        "authorId" : "0b8a340d-147f-4dd4-8384-35edecd298a1",
        "body" : "so if I understand this correctly we allow MyFeature to continue to exist if it was used before the FeatureGate was disabled? What are the benefits of that?",
        "createdAt" : "2021-05-21T21:02:16Z",
        "updatedAt" : "2021-05-21T22:12:39Z",
        "lastEditedBy" : "0b8a340d-147f-4dd4-8384-35edecd298a1",
        "tags" : [
        ]
      },
      {
        "id" : "8d54259b-fc67-43c7-8256-d762048ea066",
        "parentId" : "a2b390a6-7d62-44f9-8069-7dea63b8f523",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "The value will continue to exist but it won't have any effect as the controller will not act on it. The main benefit is the scenario of enabling, disabling and enabling featuregate  again.",
        "createdAt" : "2021-05-24T19:37:20Z",
        "updatedAt" : "2021-05-24T19:41:39Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "357d2b0c-3de8-448f-bb21-e8784b9e8470",
        "parentId" : "a2b390a6-7d62-44f9-8069-7dea63b8f523",
        "authorId" : "0b8a340d-147f-4dd4-8384-35edecd298a1",
        "body" : "Thanks for explanation",
        "createdAt" : "2021-05-25T08:21:10Z",
        "updatedAt" : "2021-05-25T08:21:11Z",
        "lastEditedBy" : "0b8a340d-147f-4dd4-8384-35edecd298a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c95bc8830be754c6189320bd4e13b5cd7b8b95c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +114,118 @@//     if !utilfeature.DefaultFeatureGate.Enabled(features.MyFeature) && !myFeatureInUse(oldSvc) {\n//         newSvc.Spec.MyFeature = nil\n//     }\nfunc dropStatefulSetDisabledFields(newSS *apps.StatefulSet, oldSS *apps.StatefulSet) {\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.StatefulSetMinReadySeconds) {"
  },
  {
    "id" : "1b269a25-350f-4780-af80-b034e980f4c0",
    "prId" : 100842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100842#pullrequestreview-667127988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21c5448c-8ae6-4e9d-ae7b-7b62aed3bdcc",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is ok.  As long as omitempty is present in the serialization (it is) then this is allowed.",
        "createdAt" : "2021-05-24T20:04:18Z",
        "updatedAt" : "2021-05-24T20:05:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c95bc8830be754c6189320bd4e13b5cd7b8b95c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +128,132 @@\tif ss == nil {\n\t\treturn false\n\t} else if ss.Spec.MinReadySeconds >= 0 {\n\t\treturn true\n\t}"
  }
]