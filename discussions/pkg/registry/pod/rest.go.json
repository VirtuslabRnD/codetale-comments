[
  {
    "id" : "6b60d671-ed9c-4ed8-940b-cd69bfbed23d",
    "prId" : 5970,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14f7a05-0c80-4b82-b50e-4e9a14291759",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The podStatusStrategy below embeds podStrategy, so this method will also be called when updating the status. Status would never be updated :\\\n",
        "createdAt" : "2015-03-26T03:58:37Z",
        "updatedAt" : "2015-03-26T20:48:48Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "72986217-219e-4195-b939-8e29c724bd2f",
        "parentId" : "c14f7a05-0c80-4b82-b50e-4e9a14291759",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Another great observation.  This REST code has changed a lot since I touched it last :)\n\nWhat's the clean fix here?  Just override PrepareForUpdate on StatusStrategy?\n",
        "createdAt" : "2015-03-26T04:28:09Z",
        "updatedAt" : "2015-03-26T20:48:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4cc67c03-eaba-443a-b89d-4a7c486902fb",
        "parentId" : "c14f7a05-0c80-4b82-b50e-4e9a14291759",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The podStatusStrategy should be defining PrepareForUpdate as well.\n",
        "createdAt" : "2015-03-26T14:30:38Z",
        "updatedAt" : "2015-03-26T20:48:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f36c6824454333cd510f360d8a52478557f5640",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +61,65 @@\n// PrepareForUpdate clears fields that are not allowed to be set by end users on update.\nfunc (podStrategy) PrepareForUpdate(obj, old runtime.Object) {\n\tnewPod := obj.(*api.Pod)\n\toldPod := old.(*api.Pod)"
  },
  {
    "id" : "890f4cdc-2f46-4ae4-a12b-ae2321c4f6aa",
    "prId" : 3115,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76002459-4919-4fa9-92ed-c08dbf807a8b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "break?\n",
        "createdAt" : "2014-12-23T20:09:35Z",
        "updatedAt" : "2014-12-23T20:54:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d7cf25cd-40fa-43df-a787-77389a31ea8b",
        "parentId" : "76002459-4919-4fa9-92ed-c08dbf807a8b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Good catch.  test added.\n",
        "createdAt" : "2014-12-23T20:50:44Z",
        "updatedAt" : "2014-12-23T20:54:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb0a7a9693b01443d2db7a5f76fc565bd018d9af",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +206,210 @@\t\tfor i := range pod.Spec.Containers {\n\t\t\tif len(pod.Spec.Containers[i].Ports) > 0 {\n\t\t\t\tport = fmt.Sprintf(\"%d\", pod.Spec.Containers[i].Ports[0].ContainerPort)\n\t\t\t\tbreak\n\t\t\t}"
  },
  {
    "id" : "82c7462c-416f-4a4a-9e36-6835afa1bcea",
    "prId" : 2999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d951d8c2-27a3-479f-a853-263014624909",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This deserves a comment.\n",
        "createdAt" : "2014-12-17T17:51:36Z",
        "updatedAt" : "2014-12-17T19:39:22Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "deafd9028076ceb4a3d5e51d280f02b3dab2423d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +348,352 @@\t\t// RestartPolicy is OnFailure, and at least one in failure\n\t\t// and in the process of restarting\n\t\treturn api.PodRunning, nil\n\tdefault:\n\t\treturn api.PodPending, nil"
  },
  {
    "id" : "72dec4c2-b74f-4fb8-900d-4f616a990586",
    "prId" : 2665,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The \"status\" aspect of pods probably should be set here by the watch command in filter.  Can you add a todo to add status to watch here?  \n",
        "createdAt" : "2014-12-01T22:53:09Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "972ba660-aa11-4b5b-9c99-4d1f5bf3d3da",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Done.   We didn't set pod status for watch command previously? How does client get pod with current status by watching...\n",
        "createdAt" : "2014-12-02T03:46:40Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "fcfd6f63-3bb4-46d3-a2f0-9d076bfba192",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It doesn't - we did a bunch of ugly hacking around this in OpenShift a few weeks ago - @jwforres and @ironcladlou can now go and remove those ugly hacks \n\n> On Dec 1, 2014, at 10:46 PM, Deyuan Deng notifications@github.com wrote:\n> \n> In pkg/registry/pod/rest.go:\n> \n> > @@ -184,7 +184,7 @@ func (rs *REST) List(ctx api.Context, label, field labels.Selector) (runtime.Obj\n> > \n> >  // Watch begins watching for new, changed, or deleted pods.\n> >  func (rs *REST) Watch(ctx api.Context, label, field labels.Selector, resourceVersion string) (watch.Interface, error) {\n> > -   return rs.registry.WatchPods(ctx, resourceVersion, rs.filterFunc(label, field))\n> > -   return rs.registry.WatchPods(ctx, label, field, resourceVersion)\n> >   Done. We didn't set pod status for watch command previously? How does client get pod with current status by watching...\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-12-02T04:15:43Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0e813299-38d7-46e0-824e-6677b4bde5ea",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Oh, that's a bit surprising... I just add a todo here, but i feel like this is something we need to fix sooner.  Having WatchPods (WatchController, etc.) take another updater/filter to update the matched object seems to be the path to go down.\n\nThis way, we separate the updating logic from registry, and also keep a consistent way of updating object.\n",
        "createdAt" : "2014-12-02T04:52:50Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "622c7252-a160-424c-b684-47c1239cdb51",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "@smarterclayton \n\n> It doesn't - we did a bunch of ugly hacking around this in OpenShift a few weeks ago - @jwforres and @ironcladlou can now go and remove those ugly hacks\n\nThe root of our problem is etcd is never updated with new pod status. Has that changed somewhere recently?\n",
        "createdAt" : "2014-12-02T14:16:57Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "e1e61c39-5c6e-4976-9248-8614d4f5c5bb",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The ugly hacks to stitch status in to the first view of the watch list, not the fact that status isn't updated in etcd.\n\n----- Original Message -----\n\n> > @@ -184,7 +184,7 @@ func (rs *REST) List(ctx api.Context, label, field\n> > labels.Selector) (runtime.Obj\n> > \n> >  // Watch begins watching for new, changed, or deleted pods.\n> >  func (rs *REST) Watch(ctx api.Context, label, field labels.Selector,\n> >  resourceVersion string) (watch.Interface, error) {\n> > -   return rs.registry.WatchPods(ctx, resourceVersion, rs.filterFunc(label,\n> >   field))\n> > -   return rs.registry.WatchPods(ctx, label, field, resourceVersion)\n> > \n> > It doesn't - we did a bunch of ugly hacking around this in OpenShift a few\n> > weeks ago - @jwforres and @ironcladlou can now go and remove those ugly\n> > hacks\n> \n> The root of our problem is etcd is never updated with new pod status. Has\n> that changed somewhere recently?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2665/files#r21160525\n",
        "createdAt" : "2014-12-02T15:44:46Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "173b87b4-724f-45ca-a97f-70cbcde8742b",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "@smarterclayton   How do you think the we add an extra updater for watch command?  Something like:\nWatchControllers(ctx api.Context, label, field labels.Selector, resourceVersion string updater func(*api.ReplicationController) error) (watch.Interface, error)\n",
        "createdAt" : "2014-12-02T22:09:44Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      },
      {
        "id" : "c74d614c-80ed-433b-8c9b-c2377b884edd",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You can use watch.Filter (or transform) from the rest code or watchandtransform from inside the registry.  Right now a lot of our \"stitch resources together\" stuff is in rest which works ok for most - I think I'd lean towards watch.Filter in Rest, but that's just because we're transforming the underlying data before returning it.\n\n> On Dec 2, 2014, at 5:10 PM, Deyuan Deng notifications@github.com wrote:\n> \n> In pkg/registry/pod/rest.go:\n> \n> > @@ -184,7 +184,7 @@ func (rs *REST) List(ctx api.Context, label, field labels.Selector) (runtime.Obj\n> > \n> >  // Watch begins watching for new, changed, or deleted pods.\n> >  func (rs *REST) Watch(ctx api.Context, label, field labels.Selector, resourceVersion string) (watch.Interface, error) {\n> > -   return rs.registry.WatchPods(ctx, resourceVersion, rs.filterFunc(label, field))\n> > -   return rs.registry.WatchPods(ctx, label, field, resourceVersion)\n> >   @smarterclayton How do you think the we add an extra updater for watch command? Something like:\n> >   WatchControllers(ctx api.Context, label, field labels.Selector, resourceVersion string updater func(*api.ReplicationController) error) (watch.Interface, error)\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-12-02T22:45:01Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "77356bcb-05b4-4a85-b76e-375a44bdbefb",
        "parentId" : "5490bb1e-eaa1-4383-b5e6-b9909403c728",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Cool.  I'll file a bug for it, yet another bug.  I'd like to keep this PR to only address the issue of watch filter layer.\n\nI vote for updater or transform since filter is somewhat confusing.  But I guess it has other meanings as well, so using watch.Filter looks good to me.\n",
        "createdAt" : "2014-12-03T01:00:42Z",
        "updatedAt" : "2014-12-05T01:15:43Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "76552423f93b9020554c592ea278bbb13a30b6cb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +186,190 @@func (rs *REST) Watch(ctx api.Context, label, field labels.Selector, resourceVersion string) (watch.Interface, error) {\n\t// TODO: Add pod status to watch command\n\treturn rs.registry.WatchPods(ctx, label, field, resourceVersion)\n}\n"
  },
  {
    "id" : "3a3fadec-19d9-4d9b-bf92-7e35ef77aaef",
    "prId" : 2097,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c43460d-552f-4d12-8ce2-03cda2ef45b6",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add a TODO to properly handle auto-generated names as discussed in #148, #170, #1135, and other issues.\n",
        "createdAt" : "2014-11-17T06:11:45Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af4ccb1110f2fa548df3098c87638e376a9b2ef",
    "line" : null,
    "diffHunk" : "@@ -1,1 +96,100 @@\t\t// TODO properly handle auto-generated names.\n\t\t// See https://github.com/GoogleCloudPlatform/kubernetes/issues/148 170 & 1135\n\t\tpod.Name = pod.UID\n\t}\n\tif errs := validation.ValidatePod(pod); len(errs) > 0 {"
  },
  {
    "id" : "6fe6e286-b0b6-4f8e-b4a1-7150e7dd0993",
    "prId" : 2097,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1aaa4cb5-b816-4d23-b95b-63a57ececb06",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This was called already on line 104. Please remove that call.\n",
        "createdAt" : "2014-11-17T23:24:39Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9c93cd8d-2874-4f34-85eb-b6c0972f74d7",
        "parentId" : "1aaa4cb5-b816-4d23-b95b-63a57ececb06",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Good catch.  Pushed.  Rebuilding.\n",
        "createdAt" : "2014-11-17T23:53:31Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af4ccb1110f2fa548df3098c87638e376a9b2ef",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +92,96 @@\t\treturn nil, errors.NewConflict(\"pod\", pod.Namespace, fmt.Errorf(\"Pod.Namespace does not match the provided context\"))\n\t}\n\tapi.FillObjectMetaSystemFields(ctx, &pod.ObjectMeta)\n\tif len(pod.Name) == 0 {\n\t\t// TODO properly handle auto-generated names."
  },
  {
    "id" : "8ba3a89a-c294-463c-9fd6-8aa89d89e1bd",
    "prId" : 1560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "608e77d2-1a53-41d5-bc93-d560ecd5c647",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What about net.IP, which we've discussed using in the API (#1300)?\n",
        "createdAt" : "2014-10-03T06:42:55Z",
        "updatedAt" : "2014-10-03T06:42:55Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a115840e4f350d36924e5893518d7fe7d8383620",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +38,42 @@\ntype ipCacheEntry struct {\n\tip         string\n\tlastUpdate time.Time\n}"
  },
  {
    "id" : "3539a5e4-1b09-4c6a-b2cf-34fdea5b9808",
    "prId" : 1560,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b46b20-8127-485c-9b80-8697b2209a32",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "The pod polling interval is 10 seconds. Is 30 seconds long enough? \n\nAnyway, I suppose we can always tune this later, make it configurable, etc.\n",
        "createdAt" : "2014-10-03T06:44:08Z",
        "updatedAt" : "2014-10-03T06:44:08Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a115840e4f350d36924e5893518d7fe7d8383620",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +238,242 @@\tnow := rs.clock.Now()\n\n\tif !ok || now.Sub(data.lastUpdate) > (30*time.Second) {\n\t\tip := getInstanceIPFromCloud(rs.cloudProvider, host)\n\t\tdata = ipCacheEntry{"
  },
  {
    "id" : "4a916da8-65eb-43f3-8e9f-c2e6f16bc232",
    "prId" : 1356,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7de15ad7-f3b3-4b7b-a361-9d6b25727169",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Users could see a pod go from running to unknown...\n",
        "createdAt" : "2014-09-18T16:01:19Z",
        "updatedAt" : "2014-09-18T16:01:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9a40903f-8f9a-40a7-bddf-2f637102c7f8",
        "parentId" : "7de15ad7-f3b3-4b7b-a361-9d6b25727169",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "How?  They could see a pod going from Terminated to Waiting (which seems ok) but I don't see how this change makes it possible for it to go from running to unknown?\n",
        "createdAt" : "2014-09-18T16:43:16Z",
        "updatedAt" : "2014-09-18T16:43:16Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2498d90d-f846-4e30-aa1d-496fc460172f",
        "parentId" : "7de15ad7-f3b3-4b7b-a361-9d6b25727169",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry, I meant from Running to Waiting. My brain decided to insert the word \"unknown\" from the sentence I didn't write about how really apiserver should not make stuff up when it doesn't know what the state is. We can hash that out in the meeting later today, though.\n",
        "createdAt" : "2014-09-18T17:54:24Z",
        "updatedAt" : "2014-09-18T17:54:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c6674270-a736-4596-aa84-f3225bebf7b6",
        "parentId" : "7de15ad7-f3b3-4b7b-a361-9d6b25727169",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I think it is possible in both paths, (and this is partially why we need \"Unknown\") but I don't think that this PR changes any of the possible paths.\n",
        "createdAt" : "2014-09-18T19:03:54Z",
        "updatedAt" : "2014-09-18T19:03:54Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "17cbde0c5a0a8c77546ab46d853c579a76c93987",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +234,238 @@\t}\n\tif pod.CurrentState.Info == nil {\n\t\treturn api.PodWaiting, nil\n\t}\n\trunning := 0"
  },
  {
    "id" : "304d5c13-b3e5-401d-b543-a29980552275",
    "prId" : 1347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caaab5d7-4efa-4223-9900-d7481bfc8fa3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is much better, but I'd prefer even more if we just put in an\n\n```\ntype MinionLister interface {\n  ListMinions(selector) (*api.MinionList, error)\n}\n```\n",
        "createdAt" : "2014-09-17T23:18:30Z",
        "updatedAt" : "2014-09-18T01:17:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9173a503-99a0-4de7-89af-94fa075d2420",
        "parentId" : "caaab5d7-4efa-4223-9900-d7481bfc8fa3",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This is already exactly what MinionInterface is, why should we introduce a different interface?\n",
        "createdAt" : "2014-09-17T23:25:31Z",
        "updatedAt" : "2014-09-18T01:17:03Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "6a5d52ec-7489-4bbb-a64d-4d5aacc1c417",
        "parentId" : "caaab5d7-4efa-4223-9900-d7481bfc8fa3",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Haha, you're right-- fine for now.\n",
        "createdAt" : "2014-09-17T23:31:31Z",
        "updatedAt" : "2014-09-18T01:17:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "99586b4da490614a5ede191c953d1d152e7eeab0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +45,49 @@\tpodPollPeriod time.Duration\n\tregistry      Registry\n\tminions       client.MinionInterface\n}\n"
  }
]