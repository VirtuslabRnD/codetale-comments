[
  {
    "id" : "6a726206-5d23-4d20-9c0b-27d41adfde81",
    "prId" : 23295,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f26718c4-a343-4378-98cf-67508fcae8ea",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nice finding\n",
        "createdAt" : "2016-03-22T09:02:22Z",
        "updatedAt" : "2016-03-22T15:19:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "189ce6e397e1e9db5c3d5151f41afabd4a3a3c25",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +140,144 @@func (f FailDeletionStorage) Delete(ctx context.Context, key string, out runtime.Object) error {\n\t*f.Called = true\n\treturn storage.NewKeyNotFoundError(key, 0)\n}\n"
  },
  {
    "id" : "145cc9d8-c58f-4b60-8645-7bacde049926",
    "prId" : 22502,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af0e44f8-a63f-4b92-b6c9-84c6ff77f8c0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "won't this also set `called` to true here? check and reset it before making the graceful=0 delete call\n",
        "createdAt" : "2016-03-07T15:36:15Z",
        "updatedAt" : "2016-03-07T15:36:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "81580fac-5582-411b-b9df-075df2ced9b9",
        "parentId" : "af0e44f8-a63f-4b92-b6c9-84c6ff77f8c0",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt sorry I was OOO last a few days.\n\nNo, the overriding Delete method won't be called here. The registry.Delete() fails at here: https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/generic/etcd/etcd.go#L390, which is several lines before where the overriding Delete method is called.\n",
        "createdAt" : "2016-03-10T17:56:18Z",
        "updatedAt" : "2016-03-10T17:56:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "69ef2137-e807-4954-b9cc-ae709654cc79",
        "parentId" : "af0e44f8-a63f-4b92-b6c9-84c6ff77f8c0",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ping @liggitt :)\n",
        "createdAt" : "2016-03-11T19:14:40Z",
        "updatedAt" : "2016-03-11T19:14:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "447ea989-f7a7-4daf-8f86-47586e5e247e",
        "parentId" : "af0e44f8-a63f-4b92-b6c9-84c6ff77f8c0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "LGTM, although this should probably eventually move to rest/test.  Doesn't have to happen here.\n",
        "createdAt" : "2016-03-11T19:36:54Z",
        "updatedAt" : "2016-03-11T19:36:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff446ece57ce0c17da198d432cf50295a1b58156",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\tt.Errorf(\"Unexpected error: %v\", err)\n\t}\n\n\t// create pod\n\t_, err = registry.Create(testContext, pod)"
  },
  {
    "id" : "f5a6a25b-538b-4f84-99ff-df474c64f477",
    "prId" : 17469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a243423f-de49-4c10-887a-b7bdd1111e9b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please opaque the whole body of the loop into \nfunc() {\n}()\nand the use defer server.Terminate() just after this line?\n\nI think this is more robust.\n",
        "createdAt" : "2015-11-19T10:52:20Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7a44e5fc-0ee9-4d2b-b1d8-4d68150cb572",
        "parentId" : "a243423f-de49-4c10-887a-b7bdd1111e9b",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "So I've done that with other tests, I had chosen not to do that here in part because the data could collide and it's slightly orthogonal to the main purpose of the PR.  \n\nI'd be happy to do a follow-up PR for some of these to cleanup, if that makes sense. \n",
        "createdAt" : "2015-11-19T15:40:46Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "584c214a-7ff9-4411-a0db-f927f64d8a37",
        "parentId" : "a243423f-de49-4c10-887a-b7bdd1111e9b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm fine with follow-up PR - can you please leave a TODO then?\n",
        "createdAt" : "2015-11-19T16:00:44Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "02851dd1b78cc7659f639b827a215531e356f197",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +246,250 @@\tctx := api.NewDefaultContext()\n\tfor _, tc := range testCases {\n\t\tstorage, _, _, server := newStorage(t)\n\t\tkey, _ := storage.KeyFunc(ctx, tc.pod.Name)\n\t\tkey = etcdtest.AddPrefix(key)"
  },
  {
    "id" : "0f60f719-d798-4e84-85d1-e551b6db9ce3",
    "prId" : 17469,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "886af039-4e1d-43b6-bb83-29ed590e8781",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "You need to opaque the body of the loop into\nfunc() {\n}()\nto make defer work correctly.\n",
        "createdAt" : "2015-11-19T10:54:37Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "dbe501cd-17a0-45b5-be87-f353adaf4369",
        "parentId" : "886af039-4e1d-43b6-bb83-29ed590e8781",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I added the explicit terminate at the end similar to the other example. \n\nSame comment on cleanup I think would apply here. \n",
        "createdAt" : "2015-11-19T15:42:46Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "e49095d2-68b0-4735-8cbd-c1e3af29fab3",
        "parentId" : "886af039-4e1d-43b6-bb83-29ed590e8781",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I still think that having this in a func(){}() and leaving a defer is cleaner.\n",
        "createdAt" : "2015-11-19T15:46:39Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d9c71117-cc8d-49f7-9788-d4991b1f4eeb",
        "parentId" : "886af039-4e1d-43b6-bb83-29ed590e8781",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I don't disagree.  Are you opposed to follow up PR on this one.  The changeset is so large I would prefer to follow up then conflate it.  I would call it test cleanup from XYZ PR. \n",
        "createdAt" : "2015-11-19T15:58:25Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "ac912b38-80a5-4f06-8b4d-385c1cab0adc",
        "parentId" : "886af039-4e1d-43b6-bb83-29ed590e8781",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm fine with separate PR - can you please leave a TODO then?\n",
        "createdAt" : "2015-11-19T16:01:14Z",
        "updatedAt" : "2015-11-19T16:34:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "02851dd1b78cc7659f639b827a215531e356f197",
    "line" : 305,
    "diffHunk" : "@@ -1,1 +508,512 @@\t}\n\tfor k, test := range testCases {\n\t\tstorage, bindingStorage, _, server := newStorage(t)\n\t\tkey, _ := storage.KeyFunc(ctx, \"foo\")\n\t\tkey = etcdtest.AddPrefix(key)"
  },
  {
    "id" : "fcdefb0d-9102-4d65-8484-ad7778be7b7c",
    "prId" : 12969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efa59a0d-11eb-4d38-ba0f-ef744c5bbc7d",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Can you add a comment explaining why this pod in invalid? I know that the label name has it, but it wasn't the first place I looked.\n",
        "createdAt" : "2015-08-20T08:32:51Z",
        "updatedAt" : "2015-08-20T08:41:41Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "4c085fc0-1df2-47cc-959c-ae1f981b2308",
        "parentId" : "efa59a0d-11eb-4d38-ba0f-ef744c5bbc7d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Added comment.\n",
        "createdAt" : "2015-08-20T08:41:47Z",
        "updatedAt" : "2015-08-20T08:41:47Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45e41a58433ff0a84140d3e0ad46ca4453a5295",
    "line" : null,
    "diffHunk" : "@@ -1,1 +101,105 @@\tpod.ObjectMeta = api.ObjectMeta{}\n\t// Make an invalid pod with an an incorrect label.\n\tinvalidPod := validNewPod()\n\tinvalidPod.Namespace = test.TestNamespace()\n\tinvalidPod.Labels = map[string]string{"
  },
  {
    "id" : "1b49237b-b6f3-45e8-91a2-09bac282ddb3",
    "prId" : 12969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10db2a63-d4d5-4e9d-827d-abfcf942ec04",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Can't comment on lines you didn't change... Can you also add a comment why the pod below is invalid. My guess is that it's because it has empty container list, but that should be obvious.\n",
        "createdAt" : "2015-08-20T08:35:04Z",
        "updatedAt" : "2015-08-20T08:41:41Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "061ac8b9-d740-4c61-9a3d-1da268dcfba8",
        "parentId" : "10db2a63-d4d5-4e9d-827d-abfcf942ec04",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - it's empty containers list. Added comment.\n",
        "createdAt" : "2015-08-20T08:41:59Z",
        "updatedAt" : "2015-08-20T08:41:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45e41a58433ff0a84140d3e0ad46ca4453a5295",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +108,112 @@\ttest.TestCreate(\n\t\t// valid\n\t\tpod,\n\t\t// invalid (empty contains list)\n\t\t&api.Pod{"
  },
  {
    "id" : "34c8842e-edde-4446-9e26-39331fe8c8cd",
    "prId" : 4780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb38b8f-3d3d-4aef-83da-e2b94d1f0573",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Just a nit. It might be useful to check if \"err\" is nil and surface that. Otherwise, LGTM. \n",
        "createdAt" : "2015-02-26T18:05:49Z",
        "updatedAt" : "2015-03-09T14:08:35Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "7a70c8b6-f36f-42ba-b01a-d9a9c6500c9b",
        "parentId" : "bdb38b8f-3d3d-4aef-83da-e2b94d1f0573",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Can you implement @yujuhong 's suggestion? Once you do that, this PR LGTM.\n",
        "createdAt" : "2015-03-04T09:00:47Z",
        "updatedAt" : "2015-03-09T14:08:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf02d17244b0288306e957c412fa1970cfa5bfdf",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +866,870 @@\t// - Schedule (scheduler)\n\t// - Delete (apiserver)\n\t_, err := bindingRegistry.Create(ctx, &api.Binding{PodID: \"foo\", Host: \"machine\", ObjectMeta: api.ObjectMeta{Namespace: api.NamespaceDefault}})\n\tif err == nil {\n\t\tt.Fatalf(\"Expected not-found-error but got nothing\")"
  },
  {
    "id" : "22c76370-52b2-40cc-863c-2570acbef970",
    "prId" : 4780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73c6e8ab-ac98-4785-8dca-226cce634158",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Please add a comment describing what this is trying to test (very brief summary of the scenario you are creating). Something like \"Ensure that when scheduler creates a binding for a pod that has already been deleted by the API server, API server returns not-found error.\"\n",
        "createdAt" : "2015-02-27T01:15:18Z",
        "updatedAt" : "2015-03-09T14:08:35Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf02d17244b0288306e957c412fa1970cfa5bfdf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +850,854 @@// Ensure that when scheduler creates a binding for a pod that has already been deleted\n// by the API server, API server returns not-found error.\nfunc TestEtcdCreateBindingNoPod(t *testing.T) {\n\tregistry, bindingRegistry, _, fakeClient, _ := newStorage(t)\n\tctx := api.NewDefaultContext()"
  }
]