[
  {
    "id" : "f4c514ae-94f3-49ba-a177-1b418544e388",
    "prId" : 22769,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef541f15-3a34-4dae-ad14-4c1d8dc577b8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@bgrant0607 are we going to require every client submitting a scale request do a Get first and handle retry on conflict, or allow an empty resource version if the client doesn't care about current state and just wants to submit a scale request? I'd expect to only set this if `len(scale.ResourceVersion) > 0`. Same goes for the Update methods on Deployments and ReplicaSet, I think\n",
        "createdAt" : "2016-03-10T04:33:40Z",
        "updatedAt" : "2016-03-10T04:33:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e858fdc5-5798-48f0-abdf-3661d4b20407",
        "parentId" : "ef541f15-3a34-4dae-ad14-4c1d8dc577b8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@liggitt If scale.ResourceVersion is empty string, this should result in an unconditional update, whereas if we didn't copy the empty string, the user could get spurious update failures.\n",
        "createdAt" : "2016-03-10T04:48:16Z",
        "updatedAt" : "2016-03-10T04:48:16Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d1873ed6-6ce4-4dc7-8df9-2810c2cc99fa",
        "parentId" : "ef541f15-3a34-4dae-ad14-4c1d8dc577b8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Ah, I'd forgotten that. That means if the client's intent was to only update the scale bit unconditionally, that means the server-side impl could stomp a change in another part of the rc/rs/deployment.\n\nIf the incoming scale has no ResourceVersion, I would expect the server to do the get/update inside a retryonconflict loop, fulfilling client intent while being a good citizen and not stomping bits unrelated to scale. I guess we don't do that today, so it's not a regression, and the window is small, but it would be an improvement (whether or not it happens for 1.2)\n",
        "createdAt" : "2016-03-10T04:56:54Z",
        "updatedAt" : "2016-03-10T04:58:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8ee3eda2a62a86d06c0f2f063b7c117f1c591d2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +89,93 @@\t}\n\trc.Spec.Replicas = scale.Spec.Replicas\n\trc.ResourceVersion = scale.ResourceVersion\n\trc, err = (*r.registry).UpdateController(ctx, rc)\n\tif err != nil {"
  },
  {
    "id" : "51e987ae-e46c-4814-a59b-7d4695c59dc8",
    "prId" : 22724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3996159-9e64-40c4-9af3-066a35ac9128",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also set TargetSelector\n",
        "createdAt" : "2016-03-09T17:54:05Z",
        "updatedAt" : "2016-03-10T01:55:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "deaf8917-9f19-4e98-b128-dee5fea9a240",
        "parentId" : "f3996159-9e64-40c4-9af3-066a35ac9128",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind, this is internal\n",
        "createdAt" : "2016-03-09T17:55:01Z",
        "updatedAt" : "2016-03-10T01:55:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe26381c9060980c06b5610f66741164cf140708",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\t\tReplicas: rc.Status.Replicas,\n\t\t\tSelector: &unversioned.LabelSelector{\n\t\t\t\tMatchLabels: rc.Spec.Selector,\n\t\t\t},\n\t\t},"
  },
  {
    "id" : "d5f17107-fa2e-4f12-83db-4b284cac3e48",
    "prId" : 22724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f1d5312-112a-4b69-8833-c4d478cbb856",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we're not doing anything with the ResourceVersion in the scale object... are we expecting a mismatch there to produce a resource conflict here? for that to happen we'd have to set the rc.ResourceVersion to the scale.ResourceVersion before calling `UpdateController`, right?\n",
        "createdAt" : "2016-03-10T03:03:11Z",
        "updatedAt" : "2016-03-10T03:03:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3cc94319-5ef9-442e-abe8-845561048c0b",
        "parentId" : "8f1d5312-112a-4b69-8833-c4d478cbb856",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "previously, it was possible to send a scale request without a resource version, and the server would get/update the rc internally. That seems like it would still be useful (\"I want to scale to 10... I don't care what it currently is\"). How would that be expressed?\n",
        "createdAt" : "2016-03-10T03:06:53Z",
        "updatedAt" : "2016-03-10T03:07:09Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "730ce49a-0e97-42fe-8e3b-a9c8d2683f2c",
        "parentId" : "8f1d5312-112a-4b69-8833-c4d478cbb856",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Good catch!  We did that elsewhere, but not here.\n\n@madhusudancs Please submit a follow-up PR to do that.\n",
        "createdAt" : "2016-03-10T03:07:14Z",
        "updatedAt" : "2016-03-10T03:07:14Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe26381c9060980c06b5610f66741164cf140708",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +90,94 @@\trc.Spec.Replicas = scale.Spec.Replicas\n\trc, err = (*r.registry).UpdateController(ctx, rc)\n\tif err != nil {\n\t\treturn nil, false, errors.NewConflict(extensions.Resource(\"replicationcontrollers/scale\"), scale.Name, err)\n\t}"
  },
  {
    "id" : "9cda4807-ea1e-4709-a054-a8d7aec65ec0",
    "prId" : 16677,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb67b583-c553-444d-901c-0666481e20ac",
        "parentId" : null,
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "I'm against faking old scale object here. It bring no value. I think it is better to just call ValidateScale here on the new object.\n",
        "createdAt" : "2015-11-18T10:27:42Z",
        "updatedAt" : "2015-11-18T18:54:27Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "3cfa0503-5323-4aed-b310-d7cfe6f6c616",
        "parentId" : "bb67b583-c553-444d-901c-0666481e20ac",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "Fair enough.  The main thing it brought was consistency with the other validators (and a check that the user didn't accidentally think he or she was changing an object in a different namespace), but this is kind of a weird case since there's no \"create\" action for scale anyway.\n",
        "createdAt" : "2015-11-18T18:38:25Z",
        "updatedAt" : "2015-11-18T18:54:27Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ef9e1406a12811f08139d88a7552e8c9e52e79",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +92,96 @@\t\treturn nil, false, errors.NewBadRequest(fmt.Sprintf(\"wrong object passed to Scale update: %v\", obj))\n\t}\n\n\tif errs := extvalidation.ValidateScale(scale); len(errs) > 0 {\n\t\treturn nil, false, errors.NewInvalid(\"scale\", scale.Name, errs)"
  },
  {
    "id" : "fc4e975e-eec8-4712-aed2-80e0beb280b4",
    "prId" : 12217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "996edbf7-cd36-4386-8686-7ef2d6866219",
        "parentId" : null,
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Add validation for update/create (pkg/expapi/validation/validation), e.g.: number of pods not negative.\n",
        "createdAt" : "2015-08-05T11:40:23Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "5d0b5f1b-5578-45f9-8040-8e49a17962eb",
        "parentId" : "996edbf7-cd36-4386-8686-7ef2d6866219",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Validation happens in rest.go files which are not immediately needed for this PR. Will do rest.go for expapi/scaler it in the next PR.  \nAnd btw, replicas count most likely will be validated in pkg/registry/controller/rest.go which is used in Scaler.\n",
        "createdAt" : "2015-08-06T16:33:16Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "91584c6b3b971b1bc257b5f91f4138db7122d6b6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +83,87 @@\tif obj == nil {\n\t\treturn nil, false, errors.NewBadRequest(fmt.Sprintf(\"nil update passed to Scale\"))\n\t}\n\tscaler, ok := obj.(*expapi.Scale)\n\tif !ok {"
  },
  {
    "id" : "cb78231f-3b00-4faa-b799-e325fdefa49e",
    "prId" : 12217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "578e1b3a-b002-422a-9e8b-94dd30034695",
        "parentId" : null,
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Add unittest etc_test.go for creation, update, etc. (like controller/etcd/etcd_test.go).\n",
        "createdAt" : "2015-08-05T11:48:30Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "6910d359-2902-4913-a85f-9a15cb246141",
        "parentId" : "578e1b3a-b002-422a-9e8b-94dd30034695",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Added.\n",
        "createdAt" : "2015-08-06T16:34:37Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "91584c6b3b971b1bc257b5f91f4138db7122d6b6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage etcd\n\nimport ("
  }
]