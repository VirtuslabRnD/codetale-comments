[
  {
    "id" : "1956c191-a78c-4ae4-b9bf-12b96cdff675",
    "prId" : 98866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98866#pullrequestreview-685355906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73cd5eb2-bb48-4f2a-9c21-8d43c666795e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this needs a comment and associated unit test",
        "createdAt" : "2021-06-16T16:02:36Z",
        "updatedAt" : "2021-06-16T16:05:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d4cfac933485b9b4e5e802e267723ce9d2b90f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +169,173 @@\t}\n\n\tif period < 0 {\n\t\tperiod = 1\n\t}"
  },
  {
    "id" : "f9e2eab8-8b44-4850-aa8f-e2c96a31bdd0",
    "prId" : 91408,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91408#pullrequestreview-441475686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f79aa38f-0ac0-422b-9ec7-22a1368360aa",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is called pre-validation ... should we handle a zero-length localhostProfile by omitting this?",
        "createdAt" : "2020-07-01T15:10:26Z",
        "updatedAt" : "2020-07-06T14:06:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "224ae37c-3675-4901-ae67-967f4c5badd4",
        "parentId" : "f79aa38f-0ac0-422b-9ec7-22a1368360aa",
        "authorId" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "body" : "Okay, added a check and unit test for `localhostProfile != \"\"`.",
        "createdAt" : "2020-07-02T08:47:33Z",
        "updatedAt" : "2020-07-06T14:06:37Z",
        "lastEditedBy" : "36b049e7-5c64-46e2-809a-9067732f0056",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3ba2d8b8b801ea9658e15d8c53068ba2de7ce9e",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +690,694 @@\t\t\treturn &api.SeccompProfile{\n\t\t\t\tType:             api.SeccompProfileTypeLocalhost,\n\t\t\t\tLocalhostProfile: &localhostProfile,\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "c07e9889-a2f7-43aa-8e99-52fc8ba2cbe2",
    "prId" : 80521,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80521#pullrequestreview-267943745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41c602c7-c859-49b9-9960-7365356d1fb3",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Missed this one? Rename to `NameTriggerFunc` for consistency?",
        "createdAt" : "2019-07-26T21:18:49Z",
        "updatedAt" : "2019-07-26T21:23:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "ee3e1643-8946-4b2f-bd38-31fde46442bd",
        "parentId" : "41c602c7-c859-49b9-9960-7365356d1fb3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Left this on purpose - because it's for `Pod` object, for which NameTriggerFunc would suggest it's pod`s name (as it's the case for all other triggers), whereas we are looking into `Spec.NodeName` field.",
        "createdAt" : "2019-07-29T06:29:12Z",
        "updatedAt" : "2019-07-29T06:29:13Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "68d6b9e1-a0a2-44a6-92e3-75a1e032016d",
        "parentId" : "41c602c7-c859-49b9-9960-7365356d1fb3",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Gotcha.",
        "createdAt" : "2019-07-29T17:56:28Z",
        "updatedAt" : "2019-07-29T17:56:29Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "467f5e96ee073cf69cffe45066a51b8611203249",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +205,209 @@\n// NodeNameTriggerFunc returns value spec.nodename of given object.\nfunc NodeNameTriggerFunc(obj runtime.Object) string {\n\treturn obj.(*api.Pod).Spec.NodeName\n}"
  },
  {
    "id" : "0ad4686b-9fcd-438a-96f0-a93ca1a11aa3",
    "prId" : 80260,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80260#pullrequestreview-263303515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df489c7-de35-43a9-9321-a5eff5eae5c7",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "getPodIP returns the primary IP for a Pod. Returns an empty string if pod is nil or there are no IPs",
        "createdAt" : "2019-07-17T20:39:14Z",
        "updatedAt" : "2019-07-17T20:39:15Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "41f313570e27da20f28694b0a9e2ae0a014a9d2f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +240,244 @@}\n\n// returns primary IP for a Pod\nfunc getPodIP(pod *api.Pod) string {\n\tif pod == nil {"
  },
  {
    "id" : "f5b3bb4e-2191-4c5a-be56-b47320d9f6d5",
    "prId" : 71980,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71980#pullrequestreview-184032982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14dc53cc-f3cf-487f-8949-1b5fce90f211",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "how can pod.Status.PodIP be not proxyable ? If so , isnt the fix required in CNI or whatever component assigns the Pod IP  @kubernetes/sig-network-api-reviews  ",
        "createdAt" : "2018-12-12T06:55:07Z",
        "updatedAt" : "2018-12-12T06:55:07Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "9740b6a6e1fd2362f8aad03fa42e0d344018001b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +294,298 @@\tif err := proxyutil.IsProxyableIP(pod.Status.PodIP); err != nil {\n\t\treturn nil, nil, errors.NewBadRequest(err.Error())\n\t}\n\n\tloc := &url.URL{"
  },
  {
    "id" : "1f29101e-c82f-4089-a7b2-a1843627e207",
    "prId" : 60880,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60880#pullrequestreview-101904341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fec2f878-da4d-46ac-82aa-54f865bcd787",
        "parentId" : null,
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "How much difference do you think this would create?",
        "createdAt" : "2018-03-07T11:29:47Z",
        "updatedAt" : "2018-03-07T11:29:48Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "e55d2a09-1118-4c28-aff6-7c50b10758f1",
        "parentId" : "fec2f878-da4d-46ac-82aa-54f865bcd787",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't think it would solve the regression. But this means that every call to PodsToSelectableFields was doing more than 2x allocations without this change.\r\nBut this should be called constant number of times per pod modification hopefully, so probably the difference won't be huge...",
        "createdAt" : "2018-03-07T11:34:23Z",
        "updatedAt" : "2018-03-07T11:34:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8d18a171-a362-4fb4-90de-37544b697bb2",
        "parentId" : "fec2f878-da4d-46ac-82aa-54f865bcd787",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Sounds reasonable.",
        "createdAt" : "2018-03-07T12:12:20Z",
        "updatedAt" : "2018-03-07T12:12:20Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      }
    ],
    "commit" : "6786d6691ae290f3953d63a071049b4c89ac418d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +238,242 @@\t// field here or the number of object-meta related fields changes, this should\n\t// be adjusted.\n\tpodSpecificFieldsSet := make(fields.Set, 8)\n\tpodSpecificFieldsSet[\"spec.nodeName\"] = pod.Spec.NodeName\n\tpodSpecificFieldsSet[\"spec.restartPolicy\"] = string(pod.Spec.RestartPolicy)"
  },
  {
    "id" : "028ef025-57c3-4195-b07c-b797c65e5b2b",
    "prId" : 51733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51733#pullrequestreview-59964817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why shouldn't a pod be allowed to be invalid during the process of initialization?  It is possible to do with admission today and given a \"my special defaulter that can take an invalid user object and choose a good/valid default\" initializer, seems even more useful after.",
        "createdAt" : "2017-08-31T19:04:26Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "91a2e73f-3d76-4054-bf8b-3391e29c205d",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> It is possible to do with admission today\r\n\r\nnot in a persisted, visible state that someone getting an object from the API has to deal with, or that migration has to take into account. bad data in etcd is not something I'm excited about.",
        "createdAt" : "2017-08-31T19:07:54Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "74d31cfe-a22f-4de6-b4cf-0551d448c9f9",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> not in a persisted, visible state that someone getting an object from the API has to deal with, or that migration has to take into account. bad data in etcd is not something I'm excited about.\r\n\r\nIt's uninitialized data.  Not allowing someone to initialize that data to a shape of their choosing seems excessively restrictive.  I know that I would respond to an API not letting me do it by pushing garbage into fields that fail validation and using magic values.\r\n\r\nOur API already has problems dealing with new fields and I don't see forcing this limitation as helping.",
        "createdAt" : "2017-08-31T19:12:19Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7a4c85fc-372b-465c-aa02-637d511b8277",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if we want to further relax this in the future, I think we can, if there are compelling use cases that outweigh the downsides of persisting bad data.",
        "createdAt" : "2017-08-31T19:13:15Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c4db9516-56be-4059-b162-029e585d7016",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> if we want to further relax this in the future, I think we can, if there are compelling use cases that outweigh the downsides of persisting bad data.\r\n\r\nI suppose its true that we can't go the other way around.  If we do it, I reserve the right to say \"I told you so\" twice. :)",
        "createdAt" : "2017-08-31T19:14:46Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0898f8d6-5e22-4d1d-9d4b-07fd7bdcf561",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> seems even more useful after.\r\n\r\nIt might be useful. However, user can GET uninitialized objects. I think it's more important to never persist invalid objects.",
        "createdAt" : "2017-08-31T19:14:49Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "73e73c38-8746-45ba-9090-151963e97055",
        "parentId" : "46d814ef-b779-46be-9034-f34ea55f1a3f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> I suppose its true that we can't go the other way around. If we do it, I reserve the right to say \"I told you so\" twice. :)\r\n\r\nlet the record show that @deads2k and @liggitt do not *always* agree :)",
        "createdAt" : "2017-08-31T19:23:58Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3432e38f90b9871b922ea7088fe363b18e88a0b6",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +117,121 @@// ValidateUpdate is the default update validation for an end user.\nfunc (podStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {\n\terrorList := validation.ValidatePod(obj.(*api.Pod))\n\tuninitializedUpdate, err := isUpdatingUninitializedPod(old)\n\tif err != nil {"
  },
  {
    "id" : "b6b9dee2-3c4b-4b40-8f18-a0b661ef275a",
    "prId" : 51733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51733#pullrequestreview-59988396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ef98c46-c964-4576-b93c-85901bdeccaf",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt I just saw the code you posted. Do you have a strong preference using the `switch` statement?",
        "createdAt" : "2017-08-31T20:30:19Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "fe1af106-a473-4a17-aceb-76d912f4e45f",
        "parentId" : "7ef98c46-c964-4576-b93c-85901bdeccaf",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I find it easier to read, but don't feel strongly",
        "createdAt" : "2017-08-31T20:56:32Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3432e38f90b9871b922ea7088fe363b18e88a0b6",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +118,122 @@func (podStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {\n\terrorList := validation.ValidatePod(obj.(*api.Pod))\n\tuninitializedUpdate, err := isUpdatingUninitializedPod(old)\n\tif err != nil {\n\t\treturn append(errorList, field.InternalError(field.NewPath(\"metadata\"), err))"
  },
  {
    "id" : "00c173ee-2cf5-486d-b8ba-3adde2752e1c",
    "prId" : 51733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51733#pullrequestreview-59982099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82700ed3-2b44-471b-b536-825ffb4ba78e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The generic registry will delete the initiailizers if the feature gate is disabled, so the check here is just to be future-proof.",
        "createdAt" : "2017-08-31T20:32:11Z",
        "updatedAt" : "2017-09-06T05:08:18Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3432e38f90b9871b922ea7088fe363b18e88a0b6",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +101,105 @@\nfunc isUpdatingUninitializedPod(old runtime.Object) (bool, error) {\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.Initializers) {\n\t\treturn false, nil\n\t}"
  },
  {
    "id" : "a075628b-612f-42d2-abd2-2b1e0adb8666",
    "prId" : 45826,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45826#pullrequestreview-38157758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9093cf0e-0aae-475c-98c7-88eddfd52b34",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably should guard this by \"if terminating\".",
        "createdAt" : "2017-05-15T14:14:58Z",
        "updatedAt" : "2017-05-15T14:14:59Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ba06d1a3-25d1-424a-adbe-3e00af88e04f",
        "parentId" : "9093cf0e-0aae-475c-98c7-88eddfd52b34",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Probably should guard this by \"if terminating\".\r\n\r\nI think this is a general statement.  pods/status probably shouldn't be updating ownerrefs under any circumstances",
        "createdAt" : "2017-05-15T14:26:46Z",
        "updatedAt" : "2017-05-15T14:26:47Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e99b4ecb-87fa-47ab-9c72-6249209adcc1",
        "parentId" : "9093cf0e-0aae-475c-98c7-88eddfd52b34",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i worry the terminating guard may cause other side effects.  i prefer to keep it as-is. ",
        "createdAt" : "2017-05-15T14:34:55Z",
        "updatedAt" : "2017-05-15T14:34:55Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "12ffcc96-0c79-4ac6-a440-0cf57b348e74",
        "parentId" : "9093cf0e-0aae-475c-98c7-88eddfd52b34",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "we need to keep this as-is.  guarding on termination is insufficient.  the older kubelets hit status update failures independent of the pod deletion problem when paired with this plug-in.",
        "createdAt" : "2017-05-15T15:53:53Z",
        "updatedAt" : "2017-05-15T15:53:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b630e44dee41bc0e07d3d3248fdf51022ad14a9d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +157,161 @@\t// don't allow the pods/status endpoint to touch owner references since old kubelets corrupt them in a way\n\t// that breaks garbage collection\n\tnewPod.OwnerReferences = oldPod.OwnerReferences\n}\n"
  },
  {
    "id" : "785a70ab-7862-46a4-8c59-82a7cb339b6d",
    "prId" : 38989,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38989#pullrequestreview-16010175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb3e270-ac3d-4a92-8afc-db8a7ef23a5c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i think we should have a test case for this in strategy_test.go\r\n\r\nit also would be good if we had a e2e that verified qos class is set as well for each qos tier.  maybe in e2e pods.go?",
        "createdAt" : "2017-01-10T20:22:50Z",
        "updatedAt" : "2017-01-10T22:32:02Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "74ff57c6-df64-41f9-bcbb-7557bc723d43",
        "parentId" : "9eb3e270-ac3d-4a92-8afc-db8a7ef23a5c",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1",
        "createdAt" : "2017-01-10T20:24:42Z",
        "updatedAt" : "2017-01-10T22:32:02Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "924a48da-ef98-4838-bed8-52b6dabfea9d",
        "parentId" : "9eb3e270-ac3d-4a92-8afc-db8a7ef23a5c",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "I'm pretty sure the unit test would basically be the same as `TestGetPodQOS()` in `qos_test.go`.  I can work on an e2e test.",
        "createdAt" : "2017-01-10T20:54:19Z",
        "updatedAt" : "2017-01-10T22:32:02Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2402b781b27ec9fa11827e64096d476ad49176b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +63,67 @@\tpod.Status = api.PodStatus{\n\t\tPhase:    api.PodPending,\n\t\tQOSClass: qos.InternalGetPodQOS(pod),\n\t}\n}"
  },
  {
    "id" : "c0584f4f-955c-42ad-ab3b-a3de47380644",
    "prId" : 33684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33684#pullrequestreview-15065833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99b88402-7a34-4344-a505-43a3ca8add5d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "does it make sense to throw and error here if `Ports` is empty? We require at least one port in the server.",
        "createdAt" : "2017-01-04T07:34:04Z",
        "updatedAt" : "2017-02-02T01:03:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "f07f5a4cc367c390b14281a6cce060488d4edfcd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +385,389 @@\t\t}\n\tcase *api.PodPortForwardOptions:\n\t\tif len(opts.Ports) > 0 {\n\t\t\tports := make([]string, len(opts.Ports))\n\t\t\tfor i, p := range opts.Ports {"
  }
]