[
  {
    "id" : "e46b63eb-f2e9-4cb5-a8d7-2554dfa7ee0c",
    "prId" : 94685,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94685#pullrequestreview-499062471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is there a reason the entire pod metadata isn't being copied, like this?\r\n```\r\nObjectMeta: pod.ObjectMeta,\r\n```",
        "createdAt" : "2020-09-22T18:04:01Z",
        "updatedAt" : "2020-09-22T18:04:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e01b003e-7425-4bbd-88cd-888c64c4495c",
        "parentId" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "I copied this behavior from scale:\r\n https://github.com/kubernetes/kubernetes/blob/f99ed92ed149e8cbb09dfcdcff78e6fb4024d3a0/pkg/registry/apps/deployment/storage/storage.go#L334 where there's a comment `TODO: Create a variant of ObjectMeta type that only contains the fields below.`\r\n\r\nI'm not sure of the original reason, but I'm happy to experiment here.",
        "createdAt" : "2020-09-22T18:49:23Z",
        "updatedAt" : "2020-09-22T18:49:23Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "b07b23a6-cfe5-4736-88ef-518bf88b6553",
        "parentId" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "hmm... ok. the labels and annotations seem most likely to be of interest. managedFields would not be coherent if copied from the pod metadata.",
        "createdAt" : "2020-09-23T13:33:20Z",
        "updatedAt" : "2020-09-23T13:33:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0304cdc1-f602-41b6-9002-b7bbab1461c0",
        "parentId" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "We could copy the entire ObjectMeta and prune out fields that don't make sense. I guess it's not uncommon to derive `ObjectMeta`, so maybe there should be a helper for it.",
        "createdAt" : "2020-09-23T14:15:02Z",
        "updatedAt" : "2020-09-23T14:15:09Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "fd32ce5a-5e18-48d3-bce0-f0914e4e6d5a",
        "parentId" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "@liggitt shall we submit this as-is to fix the bug and open a follow-up issue?",
        "createdAt" : "2020-09-28T11:29:45Z",
        "updatedAt" : "2020-09-28T11:29:45Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "928a3616-c4ce-41f7-a7ca-e1ea79fa2491",
        "parentId" : "3304d839-d9e3-42d2-a84d-ff0640a75438",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, follow-up for considering what we want to do with this bit is fine.",
        "createdAt" : "2020-09-30T03:36:59Z",
        "updatedAt" : "2020-09-30T03:37:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf0a33d1de4cff08f527c29ab235ea85def3e197",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +369,373 @@// Extract the list of Ephemeral Containers from a Pod\nfunc ephemeralContainersInPod(pod *api.Pod) *api.EphemeralContainers {\n\tephemeralContainers := pod.Spec.EphemeralContainers\n\tif ephemeralContainers == nil {\n\t\tephemeralContainers = []api.EphemeralContainer{}"
  },
  {
    "id" : "97cc7374-9f1e-41a7-bb78-ec6e510e344b",
    "prId" : 79793,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79793#pullrequestreview-258067815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c58dc2-3316-42d9-a83a-04a942878738",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "this PR would enable indexing by `spec.nodeName`, will this indexing add any load or resource consumption on the apiserver ?",
        "createdAt" : "2019-07-04T14:07:16Z",
        "updatedAt" : "2019-07-16T06:55:45Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "b0649c70-f827-4955-83bd-5850ea07956b",
        "parentId" : "66c58dc2-3316-42d9-a83a-04a942878738",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "this PR is noop from functionality POV - we were already doing that",
        "createdAt" : "2019-07-04T14:11:19Z",
        "updatedAt" : "2019-07-16T06:55:45Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "4357b60b-3393-45c8-8912-256ac6c970d4",
        "parentId" : "66c58dc2-3316-42d9-a83a-04a942878738",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "ack",
        "createdAt" : "2019-07-04T14:14:53Z",
        "updatedAt" : "2019-07-16T06:55:45Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68fd329e00d1ddf19a7ec0db1607820a1c4c008a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\tRESTOptions: optsGetter,\n\t\tAttrFunc:    pod.GetAttrs,\n\t\tTriggerFunc: map[string]storage.TriggerPublisherFunc{\"spec.nodeName\": pod.NodeNameTriggerFunc},\n\t}\n\tif err := store.CompleteWithOptions(options); err != nil {"
  },
  {
    "id" : "490aab11-b92b-476c-85f2-0c59feb7f9f6",
    "prId" : 59416,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59416#pullrequestreview-150746309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2d23ff8-1655-439b-b41c-17aded3f15b1",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we'll probably want this endpoint to work with patch/apply, which has a couple implications for this storage:\r\n* it should implement Get() as well as Update()\r\n* for Update(), the `old v1.Pod -> old v1.EphemeralContainers -> calling objInfo(oldEphemeralContainers) -> new v1.EphemeralContainers -> new v1.Pod` transformation should happen inside an UpdatedObjectInfo implementation you pass to the pod storage (and the old v1.Pod will be fed in, you won't need to look it up yourself). Something like this:\r\n\r\n```go\r\n\t// Build an UpdatedObjectInfo to pass to the pod store.\r\n\t// It is given the currently stored v1.Pod and transforms it to the new pod that should be stored.\r\n\tupdatedPodInfo := rest.DefaultUpdatedObjectInfo(nil, func(ctx context.Context, oldObject, _ runtime.Object) (newObject runtime.Object, err error) {\r\n\t\toldPod, ok := oldObject.(*api.Pod)\r\n\t\tif !ok {\r\n\t\t\treturn nil, fmt.Errorf(\"unexpected type %T\", oldObject)\r\n\t\t}\r\n\r\n\t\tnewEphemeralContainersObj, err := objInfo.UpdatedObject(ctx, ephemeralContainersInPod(oldPod))\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\tnewEphemeralContainers, ok := newEphemeralContainersObj.(*api.EphemeralContainers)\r\n\t\tif !ok {\r\n\t\t\treturn nil, fmt.Errorf(\"unexpected type %T\", newEphemeralContainersObj)\r\n\t\t}\r\n\r\n\t\t// avoid mutating\r\n\t\tnewPod := oldPod.DeepCopy()\r\n\t\t// identity, version (make sure we're working with the right object, instance, and version)\r\n\t\tnewPod.Name = newEphemeralContainers.Name\r\n\t\tnewPod.Namespace = newEphemeralContainers.Namespace\r\n\t\tnewPod.UID = newEphemeralContainers.UID\r\n\t\tnewPod.ResourceVersion = newEphemeralContainers.ResourceVersion\r\n\t\t// ephemeral containers\r\n\t\tnewPod.Spec.EphemeralContainers = newEphemeralContainers.EphemeralContainers\r\n\r\n\t\treturn newPod, nil\r\n\t})\r\n\r\n\tobj, _, err := r.store.Update(ctx, name, updatedPodInfo, createValidation, updateValidation, false, options)\r\n\tif err != nil {\r\n\t\treturn nil, false, err\r\n\t}\r\n\treturn ephemeralContainersInPod(obj.(*api.Pod)), false, err\r\n```\r\n\r\n",
        "createdAt" : "2018-08-29T02:57:24Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "455de471-f8d7-458e-8824-50e18345d16a",
        "parentId" : "a2d23ff8-1655-439b-b41c-17aded3f15b1",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "this example code made it super easy to support patch, thanks for this. I've updated to Patcher, though merging doesn't work (see mergeKeys comment below for details).",
        "createdAt" : "2018-10-15T09:09:30Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a753c7a44b5f92e52d4119530ac76e38b837336",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +273,277 @@\t}\n\n\tobj, err := r.store.Get(ctx, name, &metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, false, err"
  },
  {
    "id" : "3208d202-6039-4760-a9b7-c42ac9a1e8d6",
    "prId" : 59416,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59416#pullrequestreview-256624136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "826e8a96-59e5-4951-94bf-10404547f272",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This probably deserves an integration test, can be a follow up (do you have a follow up list in the parent issue)?",
        "createdAt" : "2019-07-02T00:26:52Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "64296aca-3e1b-445b-a892-80f041b581e8",
        "parentId" : "826e8a96-59e5-4951-94bf-10404547f272",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "np, I've already added some integration tests in PR #79216. \r\n\r\nI've added a list of follow up PRs to the description of this PR, and a list of all PRs in the parent issue.",
        "createdAt" : "2019-07-02T01:05:55Z",
        "updatedAt" : "2019-07-22T11:21:01Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a753c7a44b5f92e52d4119530ac76e38b837336",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +281,285 @@\t// Build an UpdatedObjectInfo to pass to the pod store.\n\t// It is given the currently stored v1.Pod and transforms it to the new pod that should be stored.\n\tupdatedPodInfo := rest.DefaultUpdatedObjectInfo(pod, func(ctx context.Context, oldObject, _ runtime.Object) (newObject runtime.Object, err error) {\n\t\toldPod, ok := oldObject.(*api.Pod)\n\t\tif !ok {"
  },
  {
    "id" : "e604254b-e734-43cc-a63f-39395483f7e6",
    "prId" : 53185,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53185#pullrequestreview-272339855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ed60bc-8d35-48d0-9c50-df67fb5bf473",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why was this needed? I thought BindingREST would be able to tell based on `len(name) == 0` whether it was being invoked as a subresource or a top-level resource",
        "createdAt" : "2019-08-08T04:33:57Z",
        "updatedAt" : "2019-08-22T03:47:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1c0291c5-458f-4d6b-9c41-a86ed1ee3f1b",
        "parentId" : "48ed60bc-8d35-48d0-9c50-df67fb5bf473",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "actually, looks like the the name extraction in create.go will do the same thing this adapter is doing, and the name param will be populated... was there another reason LegacyBindingREST was created?",
        "createdAt" : "2019-08-08T04:40:29Z",
        "updatedAt" : "2019-08-22T03:47:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8eafac62-31ca-4b0e-ae99-9120a4543837",
        "parentId" : "48ed60bc-8d35-48d0-9c50-df67fb5bf473",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "mm... that triggers namedCreater, which triggers `includeName`, which returns an error if the scope.Namer.Name can't extract a name from the request",
        "createdAt" : "2019-08-08T04:41:43Z",
        "updatedAt" : "2019-08-22T03:47:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "277150362661cb4363404787352065df371c55dd",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +233,237 @@\n// LegacyBindingREST implements the REST endpoint for binding pods to nodes when etcd is in use.\ntype LegacyBindingREST struct {\n\tbindingRest *BindingREST\n}"
  }
]