[
  {
    "id" : "de2ca9af-e754-4ce3-ad60-99bf7c226123",
    "prId" : 103532,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103532#pullrequestreview-701222217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "277c32a4-13fa-4cbf-b5f3-f20d5c70e604",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "name is optional if there is only one port, isn't it?",
        "createdAt" : "2021-07-07T13:46:05Z",
        "updatedAt" : "2021-07-07T13:46:06Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "2911f83a-95ce-4d0e-a042-f6d6835455e2",
        "parentId" : "277c32a4-13fa-4cbf-b5f3-f20d5c70e604",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "if that is the case we should add a check for services with a single srevice port without name",
        "createdAt" : "2021-07-07T13:54:07Z",
        "updatedAt" : "2021-07-07T13:54:07Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "2987cbce-1002-4467-aad6-81ab12f14675",
        "parentId" : "277c32a4-13fa-4cbf-b5f3-f20d5c70e604",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The name is \"\" in that case.  I could add a multi-port testcase if it makes us feel safer",
        "createdAt" : "2021-07-07T16:05:02Z",
        "updatedAt" : "2021-07-07T16:05:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "63baf382-9521-4aa0-b675-633269f19b1f",
        "parentId" : "277c32a4-13fa-4cbf-b5f3-f20d5c70e604",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Added in next push",
        "createdAt" : "2021-07-07T16:34:04Z",
        "updatedAt" : "2021-07-07T16:34:05Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "80dda49ce22e0b7d5c1f8fc0a310021fc1d0935d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +319,323 @@\n\tif needsNodePort(oldSvc) && needsNodePort(newSvc) {\n\t\t// Map NodePorts by name.  The user may have changed other properties\n\t\t// of the port, but we won't see that here.\n\t\tnp := map[string]int32{}"
  },
  {
    "id" : "51e77c31-18c1-40e8-b4cb-9114731dd35c",
    "prId" : 103532,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103532#pullrequestreview-701837405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "what about adding something like in https://github.com/kubernetes/kubernetes/pull/103532/files#diff-2dd9a1ef6872092e519941c8a4870f4c2a71eda096b660510b02afe9b3d19fefR432-R436\r\n```go\r\n\t// For now we are only wiping on updates.  This minimizes potential\r\n\t// confusion since many of the cases we are handling here are pretty niche.\r\n\tif oldSvc == nil {\r\n\t\treturn\r\n\t}\r\n```\r\n",
        "createdAt" : "2021-07-07T13:50:59Z",
        "updatedAt" : "2021-07-07T13:53:03Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "403b87b2-6b3e-40a8-a11c-42a3c43d536a",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If someone passes nil, I think we WANT it to crash - it's semantically wrong",
        "createdAt" : "2021-07-07T16:36:03Z",
        "updatedAt" : "2021-07-07T16:36:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0ea8c36c-325d-4389-b9f8-f4681c452d91",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "> If someone passes nil, I think we WANT it to crash - it's semantically wrong\r\n\r\nThe \"old\" object is not obtained from storage? if is an Update it can't be nil",
        "createdAt" : "2021-07-07T17:59:50Z",
        "updatedAt" : "2021-07-07T17:59:51Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "f724190a-bcc5-429e-b41e-fc7c9131a7f6",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "so we can shortcircuit here",
        "createdAt" : "2021-07-07T21:45:39Z",
        "updatedAt" : "2021-07-07T21:45:39Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "4d473b0d-d145-42cf-a31f-d7223b5d3aee",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I think we are agreeing?\r\n\r\nThis is only called on the update path and if it turns out to be a creat-on-update, we end up calling the create path (PrepareForCreate()) and not PrepareForUpdate().  So I don't see how we could end up in PrepareForUpdate() without a valid old and new object.\r\n\r\nIf we ever did end up here with a nil pointer, that would indicate some bizarre condition I have no idea how to handle properly right now.\r\n\r\nDo you buy that ?\r\n",
        "createdAt" : "2021-07-08T00:15:05Z",
        "updatedAt" : "2021-07-08T00:15:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "449f1fea-e1ca-4e80-b72b-7d051bcf3c18",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "the code will panic for us, I guess ...",
        "createdAt" : "2021-07-08T09:13:29Z",
        "updatedAt" : "2021-07-08T09:13:29Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "4c1ac308-f16e-4f10-a5c7-28a81d830cce",
        "parentId" : "829bacfe-90c1-4749-8e98-7de028e700d9",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I see it now https://github.com/kubernetes/kubernetes/blob/f01c9e8683adacbfbad58e5153dfac9ebf954c4b/staging/src/k8s.io/apiserver/pkg/registry/rest/update.go#L121-L134\r\n\r\nThanks",
        "createdAt" : "2021-07-08T09:23:50Z",
        "updatedAt" : "2021-07-08T09:23:50Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "80dda49ce22e0b7d5c1f8fc0a310021fc1d0935d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +309,313 @@// allocate one.  If they resubmit that same YAML, we want it to succeed.\nfunc patchAllocatedValues(newSvc, oldSvc *api.Service) {\n\tif needsClusterIP(oldSvc) && needsClusterIP(newSvc) {\n\t\tif newSvc.Spec.ClusterIP == \"\" {\n\t\t\tnewSvc.Spec.ClusterIP = oldSvc.Spec.ClusterIP"
  },
  {
    "id" : "a5dbf263-4bc3-413a-94e9-398761d5fd3f",
    "prId" : 96600,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96600#pullrequestreview-584449630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e41c5ae3-1af0-4454-9db0-78eaade70c9d",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Can probably add a testcase for this in TestDropDisabledField",
        "createdAt" : "2021-02-05T15:58:24Z",
        "updatedAt" : "2021-03-08T16:43:22Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "62804c1ae8762938e4f708f3d6e0408aa47d7020",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +183,187 @@\n\t// Clear InternalTrafficPolicy if not enabled\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.ServiceInternalTrafficPolicy) {\n\t\tif !serviceInternalTrafficPolicyInUse(oldSvc) {\n\t\t\tnewSvc.Spec.InternalTrafficPolicy = nil"
  },
  {
    "id" : "5d97fff1-9f9f-4e8c-b4f4-a18a68c1401b",
    "prId" : 95196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95196#pullrequestreview-500772624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1565343-4817-48f1-9c3c-f99d7b70aaf9",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "I don't know how you feel about this in general:\r\n```suggestion\r\n\treturn svc.Spec.Type != api.ServiceTypeExternalName\r\n```",
        "createdAt" : "2020-10-01T23:01:46Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8fb1d3ca5ac8cbacf814a75fbe92f7093bc23e",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +366,370 @@\t\treturn false\n\t}\n\treturn true\n}\n"
  },
  {
    "id" : "440a82f2-282d-49f8-9ebb-025d15b3b923",
    "prId" : 95196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95196#pullrequestreview-500772624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb85073-eabb-494d-9b95-e4876dd86b70",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "```suggestion\r\n\treturn svc.Spec.Type == api.ServiceTypeNodePort || svc.Spec.Type == api.ServiceTypeLoadBalancer\r\n```",
        "createdAt" : "2020-10-01T23:02:08Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8fb1d3ca5ac8cbacf814a75fbe92f7093bc23e",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +394,398 @@\t\treturn true\n\t}\n\treturn false\n}\n"
  },
  {
    "id" : "a50384a0-2e9c-44c5-9fc5-2883b4029364",
    "prId" : 95196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95196#pullrequestreview-506933748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba443b0a-f350-4252-b045-0c974627a184",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also make sure newSvc did not change the clusterIP (if the incoming request explicitly monkeyed with the field, they should fail rather than get wiped and succeed)",
        "createdAt" : "2020-10-12T19:46:11Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e35d4646-c048-4239-9008-b02a32e7339b",
        "parentId" : "ba443b0a-f350-4252-b045-0c974627a184",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK, in next push",
        "createdAt" : "2020-10-12T21:38:03Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8fb1d3ca5ac8cbacf814a75fbe92f7093bc23e",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +327,331 @@\t// clusterIP/clusterIPs (even \"None\" counts as a value), we might be able\n\t// to wipe some fields.\n\tif needsClusterIP(oldSvc) && !needsClusterIP(newSvc) {\n\t\tif sameClusterIPs(oldSvc, newSvc) {\n\t\t\t// These will be deallocated later."
  },
  {
    "id" : "ee83a4cb-1eb1-445a-8a81-f4b62b2f11c0",
    "prId" : 95196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95196#pullrequestreview-506934076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "098eee1f-e1c9-4e2d-9d3e-b4e53032da16",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we also allocate HealthCheckNodePort? how does that interact with load balancer policy. check what API validation existed around this case.",
        "createdAt" : "2020-10-12T19:54:41Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4b1b3d7f-fbad-4dbb-8c71-138254c11a6c",
        "parentId" : "098eee1f-e1c9-4e2d-9d3e-b4e53032da16",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "That is cleared later, but I will add it here for completeness.",
        "createdAt" : "2020-10-12T21:38:47Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8fb1d3ca5ac8cbacf814a75fbe92f7093bc23e",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +349,353 @@\t\t}\n\t}\n\n\t// If the user is switching to a case that doesn't use HealthCheckNodePort AND they\n\t// did not change the HealthCheckNodePort value, we can wipe it.  It will"
  },
  {
    "id" : "6ec07cc3-252f-4e64-97a6-b0dd7d0d78c2",
    "prId" : 95196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95196#pullrequestreview-506934530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d41910ff-2a7f-48a4-920d-c495c405ec73",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same question about ordering w.r.t. ipFamilies/ipFamilyPolicy/clusterIPs population",
        "createdAt" : "2020-10-12T20:07:14Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "482da9b0-eaad-4442-8e99-85f1c3c20e43",
        "parentId" : "d41910ff-2a7f-48a4-920d-c495c405ec73",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yes, allocation happens later",
        "createdAt" : "2020-10-12T21:39:52Z",
        "updatedAt" : "2020-10-28T17:41:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f8fb1d3ca5ac8cbacf814a75fbe92f7093bc23e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +110,114 @@\tnormalizeClusterIPs(oldService, newService)\n\tdropServiceDisabledFields(newService, oldService)\n\tdropTypeDependentFields(newService, oldService)\n\ttrimFieldsForDualStackDowngrade(newService, oldService)\n}"
  },
  {
    "id" : "edb37138-0ed2-42ea-9d74-f27aec927291",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-525571607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8808df33-b773-4945-a4e4-3507f0d0f5d8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If you rebase you will find a new function `dropTypeDependentFields` which can be updated to wipe this field when changing `type` ",
        "createdAt" : "2020-11-04T17:58:11Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b2a44260-a4ad-4c8c-976c-88846ae96341",
        "parentId" : "8808df33-b773-4945-a4e4-3507f0d0f5d8",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't see this change in here?",
        "createdAt" : "2020-11-07T00:46:16Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\tnewSvc.Spec.TopologyKeys = nil\n\t}\n\n\t// Clear AllocateLoadBalancerNodePorts if ServiceLBNodePortControl if not enabled\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.ServiceLBNodePortControl) {"
  },
  {
    "id" : "74d73941-d9f6-4504-8b27-096c64ba2ceb",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-530201911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7118109-e046-4708-807d-7030e4e18aa3",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This check used to check for `!allocateLoadBalancerNodePortsInUse` but it seems like we dropped it, was that intentional?",
        "createdAt" : "2020-11-11T14:41:55Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "a864372b-ace4-4bf8-a446-a8f9e9a83361",
        "parentId" : "d7118109-e046-4708-807d-7030e4e18aa3",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "Yes, since the allocateLoadBalancerNodePorts must be nil if the feature-gate is not set. At least that's how I have understood it.",
        "createdAt" : "2020-11-12T11:45:55Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      },
      {
        "id" : "37ec8e94-05b2-4a61-961e-e57b9571e332",
        "parentId" : "d7118109-e046-4708-807d-7030e4e18aa3",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "> allocateLoadBalancerNodePorts must be nil if the feature-gate is not set\r\n\r\nThis and if an existing resource has the field already set. So this check should still check if `oldSvc` was using this field, and if it was, don't drop it.",
        "createdAt" : "2020-11-12T14:41:57Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "b3beeb6f-8e4c-4a54-b632-4aa6efca1bef",
        "parentId" : "d7118109-e046-4708-807d-7030e4e18aa3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yeah this needs to preserve the field if it was already set in oldSvc.  The rationale is that a user might upgrade to 1.21, use the field, temporarily roll back to 1.20 (where it is gated) - the field value should be preserved so that when they roll forward it is still present.\r\n\r\nIf this is the only issue I will approve but we need a followup to fix this",
        "createdAt" : "2020-11-12T23:56:23Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6870d7da-db06-481e-bdfe-94cd9de34d60",
        "parentId" : "d7118109-e046-4708-807d-7030e4e18aa3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Re-skim: This will need a followup, still.",
        "createdAt" : "2020-11-13T16:20:59Z",
        "updatedAt" : "2020-11-13T16:21:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +182,186 @@\n\t// Clear AllocateLoadBalancerNodePorts if ServiceLBNodePortControl if not enabled\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.ServiceLBNodePortControl) {\n\t\tnewSvc.Spec.AllocateLoadBalancerNodePorts = nil\n\t}"
  },
  {
    "id" : "579cfa5d-af37-4fae-97df-f820a3d36383",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-530202337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I think here we also need to check whether `allocatedLoadBalancerNodePorts` was trying to be set by `oldSvc`, otherwise this wouldn't fail validation checks.  ",
        "createdAt" : "2020-11-11T14:46:31Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "3127477b-31d9-4fe2-aa9e-b25a2b7a01a2",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "So something like\r\n\r\n```\r\n// If a user is switching to a type that doesn't need allocatedLoadBalancerNodePorts AND they did not change\r\n// this field, it is safe to drop it. \r\nif oldSvc.Spec.Type == api.ServiceTypeLoadBalancer && newSvc.Spec.Type != api.ServiceTypeLoadBalancer {\r\n   if oldSvc.Spec.AllocateLoadBalancerNodePorts == newSvc.Spec.AllocatedLoadBalancerNodePorts {\r\n       newSvc.Spec.AllocateLoadBalancerNodePorts = nil\r\n   }\r\n}\r\n```",
        "createdAt" : "2020-11-11T14:51:36Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "397e60e7-4069-46a2-bb58-26400dfd448e",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Can we also add a test case for this in TestDropTypeDependentFields?",
        "createdAt" : "2020-11-11T14:52:26Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "31d4384d-795d-4a53-8150-e5b3169a9184",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "Why all the extra checks? If type != LoadBalancer the AllocateLoadBalancerNodePorts _must_ be nil no matter what.\r\n",
        "createdAt" : "2020-11-12T11:48:36Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      },
      {
        "id" : "cb90b410-dabc-4268-887a-16c436d2f843",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "I also find the conditions hard to follow. If the type is changed from LoadBalancer but newSvc sets AllocateLoadBalancerNodePorts to true or false it will remain != nil?",
        "createdAt" : "2020-11-12T11:54:41Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      },
      {
        "id" : "25f4b815-46ec-4025-8b11-27b2ec5b5d10",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "It's not a very common scenario, but I _think_ this is covering the case where a user changes from Type=LoadBalancer to Type=NodePort (or others) AND tries to toggle `allocateLoadBalancerNodePorts` in the same request. That should fail validation since `allocateLoadBalancerNodePorts` is only relevant for Type=LoadBalancer. If we always drop based on type, that request would silently pass with `allocateLoadBalancerNodePorts` being dropped, which is not what the user intended. \r\n\r\nIn other words, we should only drop the field if the type changed from `LoadBalancer` -> `NodePorts` (or others) AND `allocateLoadBalancerNodePorts` did not change.  ",
        "createdAt" : "2020-11-12T14:47:11Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "fa732c2a-71fa-4842-9b42-2b263d7749cc",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yes, we only want to auto-clear fields if we don't need it AND the user is not trying to change it.  If they are trying to change it then we should let validation fail.",
        "createdAt" : "2020-11-12T23:58:40Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "817e3d57-224b-4940-b382-9b53a4ff12db",
        "parentId" : "aab03547-75a2-4a1b-89d3-bc93147e7f97",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "as above, followup needed",
        "createdAt" : "2020-11-13T16:21:32Z",
        "updatedAt" : "2020-11-13T16:21:33Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +364,368 @@\n\t// AllocateLoadBalancerNodePorts may only be set for type LoadBalancer\n\tif newSvc.Spec.Type != api.ServiceTypeLoadBalancer {\n\t\tnewSvc.Spec.AllocateLoadBalancerNodePorts = nil\n\t}"
  },
  {
    "id" : "f190d8d8-8d94-462d-b81e-3212d5f4c87c",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-312403239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7befc33-3aa7-4c6f-b12f-2d6eab46978d",
        "parentId" : null,
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Drop `TopologyKeys` if `ServiceTopology` is not enabled  to prevent compatibility issues in some edge case. (e.g. create Service with TopologyKeys when `ServiceTopology` is not enabled, then upgrade master with `ServiceTopology` enabled, but Service with TopologyKeys have already stored in etcd and not been validated, if it's invalid, some weird thing might happen).",
        "createdAt" : "2019-11-06T12:47:16Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +123,127 @@\t// Drop TopologyKeys if ServiceTopology is not enabled\n\tif !utilfeature.DefaultFeatureGate.Enabled(features.ServiceTopology) && !topologyKeysInUse(oldSvc) {\n\t\tnewSvc.Spec.TopologyKeys = nil\n\t}\n}"
  },
  {
    "id" : "4b5d2586-9033-48b4-8800-dedffaeb2684",
    "prId" : 52009,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52009#pullrequestreview-60878012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c7ace0a-ddd5-4e47-829e-f1d0715ffe87",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Please also fix `strategy_test.go`.",
        "createdAt" : "2017-09-06T09:23:22Z",
        "updatedAt" : "2017-09-06T10:10:32Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "24b6fafa-fa5d-4907-a3c6-c31550efc46d",
        "parentId" : "6c7ace0a-ddd5-4e47-829e-f1d0715ffe87",
        "authorId" : "b636cffe-e356-4628-b016-7e9b414c5367",
        "body" : "updated",
        "createdAt" : "2017-09-06T11:19:45Z",
        "updatedAt" : "2017-09-06T11:19:45Z",
        "lastEditedBy" : "b636cffe-e356-4628-b016-7e9b414c5367",
        "tags" : [
        ]
      }
    ],
    "commit" : "a88e8e21583179d02eba4c72e3d144a5771ef7c9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +90,94 @@\t}\n\tif t.Spec.ClusterIP != api.ClusterIPNone {\n\t\tt.Spec.ClusterIP = \"\"\n\t}\n\tif t.Spec.Type == api.ServiceTypeNodePort {"
  }
]