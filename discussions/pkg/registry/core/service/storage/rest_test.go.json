[
  {
    "id" : "7666773a-129a-46ea-af47-b68cf03fdf89",
    "prId" : 103467,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103467#pullrequestreview-701525280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054720f9-7ff5-411f-b25e-10c9d0f7f9aa",
        "parentId" : null,
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "Should a similar test be added to NodePort service type too? Here or in TestDryRunNodePort?",
        "createdAt" : "2021-07-07T23:32:52Z",
        "updatedAt" : "2021-07-07T23:32:52Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b787aa18431fdce683563aa41f3a298191fc2fc",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +777,781 @@\t\tallocateNodePortGate: true,\n\t}, {\n\t\tname: \"allocate false, gate on, port specified\",\n\t\tsvc: svctest.MakeService(\"alloc-false-specific\",\n\t\t\tsvctest.SetTypeLoadBalancer,"
  },
  {
    "id" : "1b58565f-d3e4-4e38-b5e8-e9faf66594b9",
    "prId" : 103462,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103462#pullrequestreview-699379743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e244577-c2b1-4ef5-933f-62fac5b54a9e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'd prefer these as two table-entries in a single test which also covered the gate being disabled, but I won't hold your feet to that fire this week.",
        "createdAt" : "2021-07-05T17:35:15Z",
        "updatedAt" : "2021-07-05T17:39:38Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "0663aa59-cf25-4fc9-bdfe-217a5646b3cc",
        "parentId" : "4e244577-c2b1-4ef5-933f-62fac5b54a9e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "These tests are not really testing much, are they?  We should probably just have a single test that permutes all of the \"dumb data\" (no side-effects) fields, creates them, verifies, updates them, verifies.  Later.",
        "createdAt" : "2021-07-05T17:37:31Z",
        "updatedAt" : "2021-07-05T17:39:38Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "73678a6e-7fe4-46e6-8340-da88d604f5ee",
        "parentId" : "4e244577-c2b1-4ef5-933f-62fac5b54a9e",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "ack",
        "createdAt" : "2021-07-05T18:18:26Z",
        "updatedAt" : "2021-07-05T18:18:27Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "fc31e3ce-7711-4cf3-8230-efea5aac05a2",
        "parentId" : "4e244577-c2b1-4ef5-933f-62fac5b54a9e",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "@hanlins @XudongLiuHarold @nicolehanjing in case any of you are interested in refactoring these tests in a follow-up :) ",
        "createdAt" : "2021-07-05T18:21:35Z",
        "updatedAt" : "2021-07-05T18:21:35Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "d41902a4-bff3-40cc-b3c5-bee95bc86384",
        "parentId" : "4e244577-c2b1-4ef5-933f-62fac5b54a9e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Also, I am working on de-layering service REST (https://github.com/kubernetes/kubernetes/pull/96684) which includes auditing and overhauling tests.",
        "createdAt" : "2021-07-05T19:02:00Z",
        "updatedAt" : "2021-07-05T19:02:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0971788c970aacdf9e8d5e16c4fc02db0bb952c5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1453,1457 @@\n// Validate the internalTrafficPolicy field when set to \"Cluster\" then updated to \"Local\"\nfunc TestServiceRegistryInternalTrafficPolicyClusterThenLocal(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()\n\tstorage, server := NewTestREST(t, []api.IPFamily{api.IPv4Protocol})"
  },
  {
    "id" : "866eecde-cf3f-4362-85d5-7741e1e93415",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696732273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b9c2929-dffa-481e-8d2b-5b323a6d95f9",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "I think it is safe to remove this ancient TODO now. right?",
        "createdAt" : "2021-06-30T20:14:40Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "2bb11e55-f907-44a0-91f0-6fda029f4e67",
        "parentId" : "1b9c2929-dffa-481e-8d2b-5b323a6d95f9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I was saving that for the very end when all the tests are moved to storage_test.go and this file is deleted :)",
        "createdAt" : "2021-07-01T01:15:23Z",
        "updatedAt" : "2021-07-01T01:15:23Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +58,62 @@// It is now testing mostly the same things as other resources but\n// in a completely different way. We should unify it.\n\ntype serviceStorage struct {\n\tServices map[string]*api.Service"
  },
  {
    "id" : "1fce645f-0f17-4815-8768-fc610dc57197",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696733182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e02e4b8-4db4-470e-ba3d-69cdcbce0d6e",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "do we really to go at it twice. one to sort keys and iterate over the map? This can be replaced by loop that checks for `namespace == All || namespace == svc.Namespace`",
        "createdAt" : "2021-06-30T20:21:21Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "fbbf2826-daab-4ff9-9f1b-ed32bcebea2f",
        "parentId" : "1e02e4b8-4db4-470e-ba3d-69cdcbce0d6e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "map iteration is randomized and the few tests that check the result expect it in order.  Those test cases will PROBABLY go away as we keep beating this, but they did fail randomly.",
        "createdAt" : "2021-07-01T01:18:01Z",
        "updatedAt" : "2021-07-01T01:18:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\tkeys = append(keys, k)\n\t}\n\tsort.Strings(keys)\n\n\tres := new(api.ServiceList)"
  },
  {
    "id" : "a941a8c6-d2ce-4ea3-ac02-a9780bb76fc9",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696733599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "631cd70c-09e2-4ff2-bd00-04a11d088150",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Since this func now does not do anything that can cause error. do we still the second error return?",
        "createdAt" : "2021-06-30T20:22:22Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "4aacfd91-f215-47c7-9162-88bda58d343f",
        "parentId" : "631cd70c-09e2-4ff2-bd00-04a11d088150",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "To conform to `rest.Lister`",
        "createdAt" : "2021-07-01T01:19:09Z",
        "updatedAt" : "2021-07-01T01:19:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +110,114 @@\t}\n\n\treturn res, nil\n}\n"
  },
  {
    "id" : "5fae2164-4fa5-4c72-af49-e2b72a8d105d",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696735946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ff28142-11b3-408b-b651-885341e59d50",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "this is no longer needed, right?",
        "createdAt" : "2021-06-30T21:43:08Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "a7ea554a-e53e-400c-904b-ee171e1657b3",
        "parentId" : "2ff28142-11b3-408b-b651-885341e59d50",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should keep the testing until the gate is locked-on.  It can still be disabled.",
        "createdAt" : "2021-07-01T01:25:42Z",
        "updatedAt" : "2021-07-01T01:25:42Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +284,288 @@\t\tname            string\n\t\tfamilies        []api.IPFamily\n\t\tenableDualStack bool\n\t}{{\n\t\tname:            \"Service IPFamily default cluster dualstack:off\","
  },
  {
    "id" : "9515d448-30b5-4637-809b-2689547eef51",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696736773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fa01a93-6aa3-4f48-8748-b25a16b383b7",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "a comment around error expected is 404 will be very helpful here.",
        "createdAt" : "2021-06-30T21:45:15Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "428d659a-1056-4898-a470-9f1dd6ee288f",
        "parentId" : "0fa01a93-6aa3-4f48-8748-b25a16b383b7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK",
        "createdAt" : "2021-07-01T01:28:06Z",
        "updatedAt" : "2021-07-01T01:28:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 590,
    "diffHunk" : "@@ -1,1 +432,436 @@\t\tt.Errorf(\"unexpected side effect: NodePort allocated\")\n\t}\n\t_, err = getService(storage, ctx, svc.Name, &metav1.GetOptions{})\n\tif err == nil {\n\t\t// Should get a not-found."
  },
  {
    "id" : "e71d36a2-0592-4694-b170-5f41e7ed76e4",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696738026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb60773-7b10-4412-ba0f-79d37ee1037f",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "We should remove this. it is already well covered in `TestServiceRegistryCreateDryRun(...)`",
        "createdAt" : "2021-06-30T21:47:33Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "092eb875-dd38-4f4f-9708-30ed86613791",
        "parentId" : "fcb60773-7b10-4412-ba0f-79d37ee1037f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't see TestServiceRegistryCreateDryRun covering nodeports?",
        "createdAt" : "2021-07-01T01:31:40Z",
        "updatedAt" : "2021-07-01T01:31:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 655,
    "diffHunk" : "@@ -1,1 +460,464 @@\t\t}\n\t}\n\t_, err = getService(storage, ctx, svc.Name, &metav1.GetOptions{})\n\tif err == nil {\n\t\t// Should get a not-found."
  },
  {
    "id" : "6a61bd25-5b28-4951-959b-9daaf4cc157b",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697549364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d40e2a8-d392-40c0-ad49-76664aa4c473",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Fatalf(...)",
        "createdAt" : "2021-06-30T21:55:04Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "af22d9c1-625a-40f7-8fde-7c6b2a1ed10a",
        "parentId" : "0d40e2a8-d392-40c0-ad49-76664aa4c473",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "given there's cleanup at the bottom of this loop, I think this should remain and get cleaned up as we delayer",
        "createdAt" : "2021-07-01T18:35:43Z",
        "updatedAt" : "2021-07-01T18:35:43Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 849,
    "diffHunk" : "@@ -1,1 +552,556 @@\t\tsrv, err := getService(storage, ctx, test.name, &metav1.GetOptions{})\n\t\tif err != nil {\n\t\t\tt.Errorf(\"unexpected error: %v\", err)\n\t\t}\n\t\tif srv == nil {"
  },
  {
    "id" : "13be7534-27bd-45eb-971f-3afe4ccbbbcc",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697557286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c89f939-aeb5-490c-85d0-cc10b5aabded",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "shouldn't that be if `err ==nil` and bails out with `t.Fatalf(...)` as we are expecting errors here",
        "createdAt" : "2021-06-30T21:57:01Z",
        "updatedAt" : "2021-06-30T22:56:29Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "c347320c-e788-4c21-bb5f-8ebbb170d491",
        "parentId" : "1c89f939-aeb5-490c-85d0-cc10b5aabded",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "both end-conditions are true - err and c are nil. Below this it tests the err itself, so I think we should leave this.",
        "createdAt" : "2021-07-01T18:46:38Z",
        "updatedAt" : "2021-07-01T18:46:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 906,
    "diffHunk" : "@@ -1,1 +578,582 @@\tfor _, failureCase := range failureCases {\n\t\tc, err := storage.Create(ctx, failureCase, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\t\tif c != nil {\n\t\t\tt.Errorf(\"Expected nil object\")\n\t\t}"
  },
  {
    "id" : "fe840d2e-8c51-41b7-b447-d2136dfbf7ec",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697755803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c065231d-27a6-4b7b-b010-9ce6527d3b8a",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "if we are going for `exemplar` (your words not mine :-))\r\n\r\nI really dislike how this test is written. This is not your PR thing. It is a general statement for these kinds of tests we should we do something like\r\n```\r\nbase: MakeService(...) \r\nsteps := []struct{\r\nname: string,\r\n    tweeker: servicesTesting.Tweek,\r\n    checker: func(t *testing.T, original, updated *api.Service),\r\n  } \r\noriginal := // create logic\r\nfor _, step := range steps{\r\nt.Run(step.Name, func(t *testing.T){\r\n step.tweeker(&original)\r\nupdated := // updated logic\r\nstep.checker(t, original, updated)\r\n})\r\n// step might not be the best name. but the general idea remain.\r\n```\r\n}",
        "createdAt" : "2021-06-30T22:10:33Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "27893e42-a287-45af-b024-235bd92ec918",
        "parentId" : "c065231d-27a6-4b7b-b010-9ce6527d3b8a",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I agree, but let's make the single-layer tests (in storage_test) the good stuff.  Rewriting this now is counter-productive.  FWIW I agree",
        "createdAt" : "2021-07-02T01:20:02Z",
        "updatedAt" : "2021-07-02T01:20:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 943,
    "diffHunk" : "@@ -1,1 +622,626 @@}\n\nfunc TestServiceRegistryUpdateDryRun(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()\n\tstorage, server := NewTestREST(t, []api.IPFamily{api.IPv4Protocol})"
  },
  {
    "id" : "bfb63fd1-686d-4c87-ad4e-4f8199238909",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697849528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97855e90-3d3a-404e-90d2-7c09957e3243",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "service type does not match test name.",
        "createdAt" : "2021-06-30T22:12:01Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "1966af0e-14c9-4339-bb24-20acef329929",
        "parentId" : "97855e90-3d3a-404e-90d2-7c09957e3243",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK",
        "createdAt" : "2021-07-02T06:04:00Z",
        "updatedAt" : "2021-07-02T06:04:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1236,
    "diffHunk" : "@@ -1,1 +737,741 @@\tstorage, server := NewTestREST(t, []api.IPFamily{api.IPv4Protocol})\n\tdefer server.Terminate(t)\n\tsvc := svctest.MakeService(\"foo\", svctest.SetTypeLoadBalancer)\n\t_, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif err != nil {"
  },
  {
    "id" : "4679d1d3-a460-437a-a767-5010fc2dc739",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56d197af-f0ee-4c0c-98b3-97bf2a853061",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "we don't need L886-L893. We create the storage for every test.",
        "createdAt" : "2021-06-30T22:18:02Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1445,
    "diffHunk" : "@@ -1,1 +823,827 @@\t}\n}\n\nfunc TestServiceRegistryDelete(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()"
  },
  {
    "id" : "1849e266-5ba8-4bff-a398-bbcb331e4db1",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697858937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0f5fd33-2fcc-4afc-99dc-b5577903f924",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Wouldn't better if we do another `Get` here?",
        "createdAt" : "2021-06-30T22:18:57Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "63e51309-30e9-4a33-8964-4be6a6f0185b",
        "parentId" : "a0f5fd33-2fcc-4afc-99dc-b5577903f924",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As we delayer we'll use more normal tests, so I will defer this for now",
        "createdAt" : "2021-07-02T06:22:29Z",
        "updatedAt" : "2021-07-02T06:22:29Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1475,
    "diffHunk" : "@@ -1,1 +837,841 @@\t\tt.Fatalf(\"unexpected error: %v\", err)\n\t}\n}\n\nfunc TestServiceRegistryDeleteDryRun(t *testing.T) {"
  },
  {
    "id" : "c8c5c1f6-58e3-4bc5-9fd0-cb2af3bdce1d",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697859182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "230bcc26-0466-412f-9c14-44fb6da1ef9e",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "I think we can merge the dualstack test into the normal test and replay on # of Cluster IPs in the original service.",
        "createdAt" : "2021-06-30T22:20:57Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "50202972-69eb-4f4f-9319-b47a7522d0af",
        "parentId" : "230bcc26-0466-412f-9c14-44fb6da1ef9e",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Similarly we can merge all DeleteXXXDryRun(...) tests into one test. ",
        "createdAt" : "2021-06-30T22:21:36Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "2d990310-edfe-489d-980b-dfef8ce80b70",
        "parentId" : "230bcc26-0466-412f-9c14-44fb6da1ef9e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Defer into the delayering process, if that's OK",
        "createdAt" : "2021-07-02T06:22:57Z",
        "updatedAt" : "2021-07-02T06:22:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1568,
    "diffHunk" : "@@ -1,1 +892,896 @@func TestDualStackServiceRegistryDeleteDryRun(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()\n\n\t// dry run for non dualstack\n\tdefer featuregatetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.IPv6DualStack, true)()"
  },
  {
    "id" : "cdf1477a-de7b-4645-8545-035ebb82babf",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "736cd90c-f950-432c-b83f-56cd364789cd",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "test is misnamed (is it meant to be `TestServiceRegistryUpdateExternal*Name*Service`?). we are creating ClusterIP service then updating it to LoadBalancer",
        "createdAt" : "2021-06-30T22:24:08Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1649,
    "diffHunk" : "@@ -1,1 +935,939 @@\nfunc TestServiceRegistryUpdateLoadBalancerService(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()\n\tstorage, server := NewTestREST(t, []api.IPFamily{api.IPv4Protocol})\n\tdefer server.Terminate(t)"
  },
  {
    "id" : "f95dcd9f-af0c-4f39-b398-d67fc53f617b",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697756954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7db0fef4-18d0-4b6b-aa0e-1d00db622503",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "this is a funky if statement. valid but funky.",
        "createdAt" : "2021-06-30T22:25:50Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "2e7780b3-1756-4777-9511-1ae6fd76bbd5",
        "parentId" : "7db0fef4-18d0-4b6b-aa0e-1d00db622503",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I usually see it as `want, got = expr, expr; got != want` but this is valid so I won't change it now.  As tests move to the single-layer we can scrub the hell out of them",
        "createdAt" : "2021-07-02T01:23:41Z",
        "updatedAt" : "2021-07-02T01:23:41Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 1759,
    "diffHunk" : "@@ -1,1 +995,999 @@\tobj, _ := storage.Get(ctx, \"foo\", &metav1.GetOptions{})\n\tsvc := obj.(*api.Service)\n\tif e, a := \"foo\", svc.Name; e != a {\n\t\tt.Errorf(\"Expected %v, but got %v\", e, a)\n\t}"
  },
  {
    "id" : "db554572-e306-4676-8e9f-d84ead4b535a",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697757162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29d1dc3-fdfc-4e16-9cec-f7da6d27a21e",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "same funky if statement. why not just go with `tc.expect != location.String()`",
        "createdAt" : "2021-06-30T22:29:37Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "ccca6b7b-c0a7-472b-a4d4-e33fbda6a882",
        "parentId" : "b29d1dc3-fdfc-4e16-9cec-f7da6d27a21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "it shortens the error line - you don't have to call `location.String()` again",
        "createdAt" : "2021-07-02T01:24:20Z",
        "updatedAt" : "2021-07-02T01:24:20Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2131,
    "diffHunk" : "@@ -1,1 +1147,1151 @@\t\t\t\t\tt.Errorf(\"unexpected location: %v\", location)\n\t\t\t\t}\n\t\t\t\tif e, a := tc.expect, location.String(); e != a {\n\t\t\t\t\tt.Errorf(\"expected %q, but got %q\", e, a)\n\t\t\t\t}"
  },
  {
    "id" : "08316b07-7119-4cd3-a760-7567ec78461d",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697860856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fc1a0f1-952b-49ae-8ac2-07f1866017ae",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "this can be replaced by calling `allocator.Next()`.. then release it before L1303.",
        "createdAt" : "2021-06-30T22:32:59Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "e3b8602e-b962-4638-a5f2-f2c9e3904474",
        "parentId" : "0fc1a0f1-952b-49ae-8ac2-07f1866017ae",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "With all the changes, github has lost track of where this goes, so I have no idea what it means",
        "createdAt" : "2021-07-02T06:26:06Z",
        "updatedAt" : "2021-07-02T06:26:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2259,
    "diffHunk" : "@@ -1,1 +1219,1223 @@\t\t\tbreak\n\t\t}\n\t}\n\n\tsvc3 := svctest.MakeService(\"qux\", svctest.SetClusterIPs(testIP))"
  },
  {
    "id" : "b69626d7-e71f-4dc3-8702-53c96b111f14",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697861736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a4dc3c-a26b-4e9e-ae9e-48482d647e7b",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "we should remove this. Ports is covered elsewhere.",
        "createdAt" : "2021-06-30T22:35:33Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "76e508a8-7666-40c5-a4be-8622bdd8f7a8",
        "parentId" : "78a4dc3c-a26b-4e9e-ae9e-48482d647e7b",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "defer",
        "createdAt" : "2021-07-02T06:27:51Z",
        "updatedAt" : "2021-07-02T06:27:51Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2398,
    "diffHunk" : "@@ -1,1 +1282,1286 @@\t}\n\tcreatedService := createdSvc.(*api.Service)\n\tif createdService.Spec.Ports[0].Port != svc.Spec.Ports[0].Port {\n\t\tt.Errorf(\"Expected port %d, but got %v\", svc.Spec.Ports[0].Port, createdService.Spec.Ports[0].Port)\n\t}"
  },
  {
    "id" : "42369c1d-f10a-4c4a-a7b7-597c8b2ed1a9",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697852600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb33df90-1a8b-49cb-aa21-ff7e6fdc054d",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "same -- let us refocus tests each covers one aspect of services. or if we have to validate ports in every test then let us create a helper then call it from every test.",
        "createdAt" : "2021-06-30T22:36:34Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "70abf4f4-cb1f-46dd-b482-c2efefa4086b",
        "parentId" : "eb33df90-1a8b-49cb-aa21-ff7e6fdc054d",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Let's do that as we move - I'm just trying to clear the way for the delayering.  Not Worse Than Before is the goal :)",
        "createdAt" : "2021-07-02T06:10:21Z",
        "updatedAt" : "2021-07-02T06:10:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2452,
    "diffHunk" : "@@ -1,1 +1333,1337 @@\n\tcreatedService := createdSvc.(*api.Service)\n\tif createdService.Spec.Ports[0].Port != svc.Spec.Ports[0].Port {\n\t\tt.Errorf(\"Expected port %d, but got %v\", svc.Spec.Ports[0].Port, createdService.Spec.Ports[0].Port)\n\t}"
  },
  {
    "id" : "8db80bdc-764d-4ead-a90b-80d3f67b85ce",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697862053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ae03e20-a4b4-4279-8707-ab532b986c95",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "not clear. should be separate if statements on for nil error and one for unexpected error.",
        "createdAt" : "2021-06-30T22:37:49Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "a32af073-ca3d-4d89-bc05-42250e464a46",
        "parentId" : "7ae03e20-a4b4-4279-8707-ab532b986c95",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "defer",
        "createdAt" : "2021-07-02T06:28:27Z",
        "updatedAt" : "2021-07-02T06:28:27Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2419,
    "diffHunk" : "@@ -1,1 +1317,1321 @@\t_, _, err = storage.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(update), rest.ValidateAllObjectFunc, rest.ValidateAllObjectUpdateFunc, false, &metav1.UpdateOptions{})\n\tif err == nil || !errors.IsInvalid(err) {\n\t\tt.Errorf(\"Unexpected error type: %v\", err)\n\t}\n}"
  },
  {
    "id" : "133c226b-7511-4d01-8b76-3eae76f5e2e0",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697861826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b65bdd1f-b72f-42a2-a512-d3e690b80b58",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "this is covered in alloc. we should remove.",
        "createdAt" : "2021-06-30T22:38:07Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "9fa9c372-0d0e-438e-b0d3-e4fb96de46f4",
        "parentId" : "b65bdd1f-b72f-42a2-a512-d3e690b80b58",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "defer",
        "createdAt" : "2021-07-02T06:28:01Z",
        "updatedAt" : "2021-07-02T06:28:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2401,
    "diffHunk" : "@@ -1,1 +1285,1289 @@\t\tt.Errorf(\"Expected port %d, but got %v\", svc.Spec.Ports[0].Port, createdService.Spec.Ports[0].Port)\n\t}\n\tif !makeIPNet(t).Contains(net.ParseIP(createdService.Spec.ClusterIPs[0])) {\n\t\tt.Errorf(\"Unexpected ClusterIP: %s\", createdService.Spec.ClusterIPs[0])\n\t}"
  },
  {
    "id" : "5658b1bd-ba54-4874-a546-988aa979a5ca",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697862138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61ff01f3-bcdc-4496-afab-17c39e59d627",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "same re clarity of failure ",
        "createdAt" : "2021-06-30T22:38:25Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "a8d05176-121c-416c-b097-5a59484183f4",
        "parentId" : "61ff01f3-bcdc-4496-afab-17c39e59d627",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "defer",
        "createdAt" : "2021-07-02T06:28:34Z",
        "updatedAt" : "2021-07-02T06:28:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2445,
    "diffHunk" : "@@ -1,1 +1329,1333 @@\tcreatedSvc, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif createdSvc == nil || err != nil {\n\t\tt.Errorf(\"Unexpected failure creating service %v\", err)\n\t}\n"
  },
  {
    "id" : "fc8d9d84-bc15-45cd-9f59-385e20ce2478",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697862271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d50b08ea-78ab-4b2d-9cdf-485c66987487",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "first check is not needed.",
        "createdAt" : "2021-06-30T22:44:18Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "355846f8-df9e-4ce8-86ae-34e0d9903e50",
        "parentId" : "d50b08ea-78ab-4b2d-9cdf-485c66987487",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "defer",
        "createdAt" : "2021-07-02T06:28:49Z",
        "updatedAt" : "2021-07-02T06:28:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2507,
    "diffHunk" : "@@ -1,1 +1358,1362 @@\t})\n\tobj, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif obj == nil || err != nil {\n\t\tt.Errorf(\"Unexpected failure creating service %v\", err)\n\t}"
  },
  {
    "id" : "cfb5e75d-98db-4763-8f88-cd86607f8c28",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22326bcb-a375-409c-8eb4-8ce83a34579f",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "first check is not needed",
        "createdAt" : "2021-06-30T22:45:56Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2563,
    "diffHunk" : "@@ -1,1 +1386,1390 @@\t})\n\tobj, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif obj == nil || err != nil {\n\t\tt.Fatalf(\"Unexpected failure creating service :%v\", err)\n\t}"
  },
  {
    "id" : "39a59a02-4e33-465b-8adc-210082e42d35",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52212935-f51d-41ee-b89f-460a7c77a3be",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "if port != svc.Spec.HealthCheckNodePort\r\n\r\n* release is also not needed.",
        "createdAt" : "2021-06-30T22:48:32Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2578,
    "diffHunk" : "@@ -1,1 +1397,1401 @@\tif port == 0 {\n\t\tt.Errorf(\"Failed to allocate health check node port and set the HealthCheckNodePort\")\n\t}\n\tif port != 30501 {\n\t\tt.Errorf(\"Failed to allocate requested nodePort expected %d, got %d\", 30501, port)"
  },
  {
    "id" : "d6b3f72f-d9c6-41f1-8c96-01572d05bf55",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e03e016-e3a0-487f-90ee-58d439dcd9c1",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "first check is not needed",
        "createdAt" : "2021-06-30T22:49:05Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2616,
    "diffHunk" : "@@ -1,1 +1413,1417 @@\t})\n\tobj, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif obj == nil || err != nil {\n\t\treturn\n\t}"
  },
  {
    "id" : "683a7f93-e308-4458-8fcd-88afe670e575",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f371dcc0-9f99-486f-b45b-228fa334f2a4",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "first check is not needed",
        "createdAt" : "2021-06-30T22:49:30Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2647,
    "diffHunk" : "@@ -1,1 +1428,1432 @@\t})\n\tobj, err := storage.Create(ctx, svc, rest.ValidateAllObjectFunc, &metav1.CreateOptions{})\n\tif obj == nil || err != nil {\n\t\tt.Errorf(\"Unexpected failure creating service %v\", err)\n\t}"
  },
  {
    "id" : "ae0a5146-3ae3-4a9c-8508-2de072c35963",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-696559375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c66b8d2b-667a-4a65-ab7e-7ae736994dc5",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Not needed. Tested here: https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/core/validation/validation.go#L4528",
        "createdAt" : "2021-06-30T22:51:44Z",
        "updatedAt" : "2021-06-30T22:56:30Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 2589,
    "diffHunk" : "@@ -1,1 +1404,1408 @@\n// Validate that the service creation fails when the requested port number is -1.\nfunc TestServiceRegistryExternalTrafficHealthCheckNodePortNegative(t *testing.T) {\n\tctx := genericapirequest.NewDefaultContext()\n\tstorage, server := NewTestREST(t, []api.IPFamily{api.IPv4Protocol})"
  },
  {
    "id" : "204a350b-3231-49e2-9aa8-26b2dc6f52b7",
    "prId" : 103379,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103379#pullrequestreview-697858062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9df7f9f6-3cbf-4e60-9a6d-0f6147dfa450",
        "parentId" : null,
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "I think we can safety remove that. We covered alloc an allocated IP so many times in other tests including dual stack",
        "createdAt" : "2021-07-01T17:46:41Z",
        "updatedAt" : "2021-07-01T17:56:56Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "2c0e9aae-4851-42c3-a0d7-18087dd41bb7",
        "parentId" : "9df7f9f6-3cbf-4e60-9a6d-0f6147dfa450",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm going to defer this sort of cleanup until after delayering\r\n",
        "createdAt" : "2021-07-02T06:20:52Z",
        "updatedAt" : "2021-07-02T06:20:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b84b49ea981533730539abf8bfc4e4a05ece3b8",
    "line" : 4075,
    "diffHunk" : "@@ -1,1 +2001,2005 @@\t\t}),\n\t}, {\n\t\tname:                     \"upgrade to v6,4 (specific ip) - fail ip is already allocated\",\n\t\tenableDualStackAllocator: true,\n\t\tenableDualStackGate:      true,"
  },
  {
    "id" : "37b801e6-5f10-4d2d-8049-649f493dc00b",
    "prId" : 102898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102898#pullrequestreview-688875313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "The downgrade is the more complex thing, we end with a dual-stack service in a single stack cluster.\r\nThe funny thing is that I think that the IPv6 family may still work ... :) \r\n",
        "createdAt" : "2021-06-16T10:37:41Z",
        "updatedAt" : "2021-06-16T10:37:41Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "ec699b4b-1696-4150-971f-1fb1ac5c4bbd",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "This is no different from changing service CIDR. services with allocated IP from wrong family (or outside cidr range) will always be there until user fixes them. ",
        "createdAt" : "2021-06-16T16:24:54Z",
        "updatedAt" : "2021-06-16T16:25:04Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "377de0fa-df1a-4b8d-810a-523aab5c7921",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "are they not fixed by the repair loop?\r\n\r\nfor downgrade the problem seems that the repair loop will only run with the configured cluster cidr, leaving the second one as is ... but I'm talking from the top of my head, I didn't have time to check it",
        "createdAt" : "2021-06-17T10:23:59Z",
        "updatedAt" : "2021-06-17T10:24:00Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "f0fdc75c-0108-48d0-ad20-ffef5818a522",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we find IPs allocated outside the known CIDRs, what are we supposed to do?  We can't just change them (I think?) and we can't just delete them.  I think the root of the discussion is that changing CIDRs, especially deactivating them, needs to be carefully managed.\r\n\r\nIn this regard, your IP ranges change is superior - we can at least put a finalizer on it :)",
        "createdAt" : "2021-06-18T21:28:39Z",
        "updatedAt" : "2021-06-18T21:40:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "19410986-64d4-4a31-a20c-86f1c54b782e",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "no fix. Loop will generate an event for the user to fix. Which usually means delete/re-create due to immutability rules. Hence changing service cidr is generally a bad idea.",
        "createdAt" : "2021-06-18T21:35:04Z",
        "updatedAt" : "2021-06-18T21:39:44Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "3d63ba12-e2fc-4370-b5fb-7588e7b716d2",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Even if we allowed `clusterIPs[0]` to change, we could still end up with Services that should not be possible.  E.g.\r\n\r\n* create a PreferDualStack, get v4\r\n* upgrade to dual-stack cluster\r\n* change to RequireDualStack, get v4,v6\r\n* downgrade to single-stack\r\n\r\nThat Service is RequireDual.  We can't automatically change that to Prefer.   If you created a new service with that config it would be rejected.  With the finalizer, the CIDR it draws from would be stuck in delete-pending, so at least we know something is wrong.",
        "createdAt" : "2021-06-18T21:35:08Z",
        "updatedAt" : "2021-06-18T21:40:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "baf627a8-9eb6-4519-bc47-39c0e2e501ac",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Let us assume it is a single stack with ClusterIP outside the range (as in service-cidr has changed cluster wide). Today we let the repair loop deal with it (broadcasts an event) and user must delete and recreate it. Same applies for dual-stack. \r\n\r\nam i misunderstanding something?",
        "createdAt" : "2021-06-21T20:23:45Z",
        "updatedAt" : "2021-06-21T20:23:45Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "44a089ac-5dc9-47df-ab0f-ec2106063395",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "if you move from dual to single, you will only run the repair in the single clusterIP cidr family, the existent secondary ClusterIPs  would not go through the repair loop, right?\r\nSo if I have ClusterIPs: [10.0.0.1, fd00::123] there will be nothing iterating over ClusterIPs[1] and that fd00::123 will be there until someone notices it",
        "createdAt" : "2021-06-21T20:32:25Z",
        "updatedAt" : "2021-06-21T20:33:58Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "2ade36fd-53a9-49fa-8354-fa969153d830",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "no, repair loop has been modified to work with IPs in `spec.ClusterIPs` as part of the dual stack work. ",
        "createdAt" : "2021-06-21T20:37:43Z",
        "updatedAt" : "2021-06-21T20:37:44Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "e86aab56-1e60-4b0f-8de6-bac2ccd7c744",
        "parentId" : "c1a1785e-845e-4506-864d-d83a4ac5f164",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "awesome , I see it now\r\nhttps://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/pkg/registry/core/service/ipallocator/controller/repair.go#L221-L226",
        "createdAt" : "2021-06-21T21:27:14Z",
        "updatedAt" : "2021-06-21T21:27:14Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a83ecbdb3195a227f083dd12cbe468aea7cc35",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +5146,5150 @@\t\t\t},\n\t\t\texpectedIPFamilyPolicy: &preferDualStack,\n\t\t\texpectedIPFamilies:     []api.IPFamily{api.IPv4Protocol, api.IPv6Protocol},\n\t\t\texpectError:            false,\n\t\t},"
  },
  {
    "id" : "046610ed-3170-406d-b687-80e9d45d4541",
    "prId" : 102898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102898#pullrequestreview-687736577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e01dc73a-5c65-4085-b6b7-9e0eb6a476b2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is a weird setup - oldSvc is not really valid since it has 2 families but 1 IP?",
        "createdAt" : "2021-06-18T21:37:47Z",
        "updatedAt" : "2021-06-18T21:40:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a83ecbdb3195a227f083dd12cbe468aea7cc35",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +5156,5160 @@\t\t\t\tSpec: api.ServiceSpec{\n\t\t\t\t\tType:           api.ServiceTypeClusterIP,\n\t\t\t\t\tClusterIPs:     []string{\"1.1.1.1\"},\n\t\t\t\t\tIPFamilies:     []api.IPFamily{api.IPv4Protocol},\n\t\t\t\t\tIPFamilyPolicy: &preferDualStack,"
  },
  {
    "id" : "48b526b2-305a-4926-9e7f-abb80b549dc6",
    "prId" : 99555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99555#pullrequestreview-602379316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ad1625-0d49-46a2-936b-2e336d1310ea",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "why if you \"prefer\" (not \"require\") and the cluster is single stack we have 2 ip families? ",
        "createdAt" : "2021-03-02T11:18:07Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "eb2471a3-c996-49be-a209-af5d5cd9e327",
        "parentId" : "77ad1625-0d49-46a2-936b-2e336d1310ea",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "Headless, selector-less semantics.",
        "createdAt" : "2021-03-02T17:57:55Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "335f124c-514f-4ec3-91be-6af86c283060",
        "parentId" : "77ad1625-0d49-46a2-936b-2e336d1310ea",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Basically, this is a corner case we can't comprehend from Service alone.  It could already be holding dual-stack endpoints (I know some users were doing this).  So we acknowledge that and admit that this Service could have both.  \"require\" vs \"prefer\" was what we specced - it felt more explicit.",
        "createdAt" : "2021-03-02T23:55:23Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "84856c7caedc239224870ce39da351b05a8d2e58",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3893,3897 @@\t\t\t},\n\t\t\texpectedIPFamilyPolicy: &preferDualStack,\n\t\t\texpectedIPFamilies:     []api.IPFamily{api.IPv4Protocol, api.IPv6Protocol},\n\t\t\texpectError:            false,\n\t\t},"
  },
  {
    "id" : "b328428a-4042-4a56-b0a2-7adc4c7438e9",
    "prId" : 93906,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93906#pullrequestreview-469794237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55a2c972-4695-4676-9261-9981046af186",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "This service was created at the beginning of the test but never deleted, so it could take the IP `1.2.3.4` and never release it, causing the test to fail",
        "createdAt" : "2020-08-11T22:24:29Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "cac2179c-7a40-49aa-a5c1-15eb6e364cd3",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm not sure I understand this... wasn't the service created at the beginning an externalname service? I didn't think those got an assigned clusterIP",
        "createdAt" : "2020-08-18T15:43:08Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "899d9679-721b-40d3-9557-e0cbcdb980d0",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "This one (L1248) is creating a new NodePort service, that's why I'm hardcoding the ClusterIP, so it does not get one assigned randomly that may collision\r\n",
        "createdAt" : "2020-08-18T17:37:30Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "b82d3c23-d337-4227-9168-4c3b2e637c90",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "oh, I see... *this* is the problematic service",
        "createdAt" : "2020-08-18T17:39:54Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "36b45391-649d-4da8-9f7f-2feca07c0f33",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ic the problem, my comment is misleading, \r\n\r\n> This service was created at the beginning of the test but never deleted,\r\n\r\nreplace \"beginning of the test\" by \"before the service with the 1.2.3.4 ClusterIP\" :upside_down_face: ",
        "createdAt" : "2020-08-18T17:40:09Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "04f16ae0-7d75-4caa-94cb-8dd7cf918c03",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does setting an explicit IP here remove the need to broaden the range in `makeIPNet`?",
        "createdAt" : "2020-08-18T17:42:14Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "aeb09148-c04c-4179-bb5d-728dbb1dd865",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "yep, I also tested it, \r\nhttps://github.com/kubernetes/kubernetes/pull/93906#issuecomment-672318048\r\n\r\ndo you prefer to keep the subnet size?",
        "createdAt" : "2020-08-18T17:43:32Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "8493b2ed-e3e8-402c-8b11-1673727afea6",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, let's keep the subnet size small (as-is in `master`) so any flakes due to non-deterministic clashing in the tests actually is observable/reproducible",
        "createdAt" : "2020-08-18T17:44:59Z",
        "updatedAt" : "2020-08-18T20:07:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "508fab94-3f16-43f1-ac1a-4db24c031dec",
        "parentId" : "55a2c972-4695-4676-9261-9981046af186",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "done",
        "createdAt" : "2020-08-18T20:08:39Z",
        "updatedAt" : "2020-08-18T20:08:39Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "b276b4775f766131eedfb21c0d4e37bab97a5156",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1252,1256 @@\t\t\tSessionAffinity: api.ServiceAffinityNone,\n\t\t\tType:            api.ServiceTypeNodePort,\n\t\t\tClusterIP:       \"1.2.3.5\",\n\t\t\tPorts: []api.ServicePort{{\n\t\t\t\tNodePort:   30020,"
  },
  {
    "id" : "1dd4c79c-528a-4bf3-90f1-88a56d90d3f1",
    "prId" : 72942,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72942#pullrequestreview-207653856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e60e3c-d292-485e-895f-ce445da3db40",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "what about a test case for service? it is different from other resources.",
        "createdAt" : "2019-02-14T00:36:52Z",
        "updatedAt" : "2019-03-11T17:27:12Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "e46e9471-edbc-42f7-a59c-0f39e01e8332",
        "parentId" : "76e60e3c-d292-485e-895f-ce445da3db40",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "There are a few resources that do not use the vanilla generic registry. The TestStorageVersionHashExist verifies that they have hashes. I don't want to check their values, that makes the test too brittle.",
        "createdAt" : "2019-02-15T02:14:07Z",
        "updatedAt" : "2019-03-11T17:27:12Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "79fefb69-c201-4ac4-a704-bd6c6b326a5e",
        "parentId" : "76e60e3c-d292-485e-895f-ce445da3db40",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What happens if we omit this function? Why should this type implement interfaces that will make it panic? (I see you're not making the problem worse but still...)",
        "createdAt" : "2019-02-21T22:08:33Z",
        "updatedAt" : "2019-03-11T17:27:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a44dae0b-b8f6-42b7-bfb8-9761c5eaf87a",
        "parentId" : "76e60e3c-d292-485e-895f-ce445da3db40",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This is a mock in unit tests. Otherwise the tests fail to compile.",
        "createdAt" : "2019-02-25T21:53:39Z",
        "updatedAt" : "2019-03-11T17:27:12Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "887cb93d8d74ac6491df850edef051bf607fceb6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +163,167 @@\tpanic(\"not implemented\")\n}\n\nfunc generateRandomNodePort() int32 {\n\treturn int32(rand.IntnRange(30001, 30999))"
  },
  {
    "id" : "179b43f8-8d26-48e5-a0d3-8a40d8e2e7c3",
    "prId" : 67038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67038#pullrequestreview-146250159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29043822-e8c4-43fb-93c5-1aae151f2787",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "same comment. Also, we should test that delete dry run doesn't relinquish any ports or cluster IPs.",
        "createdAt" : "2018-08-14T21:02:12Z",
        "updatedAt" : "2018-08-22T23:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf5427967ae4f96e4ac074e66edd8e7095188b",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +721,725 @@\t\tt.Errorf(\"expected not created\")\n\t}\n\tif storage.serviceNodePorts.Has(30020) {\n\t\tt.Errorf(\"unexpected side effect: NodePort allocated\")\n\t}"
  },
  {
    "id" : "104507de-a529-4c7b-9ef8-0f4f723c953b",
    "prId" : 67038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67038#pullrequestreview-147854129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0be0da66-08e3-4d9c-9ef6-455d47909e64",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Seems like we should also test requesting two items with the same node port? (Add port names to make that validate otherwise)",
        "createdAt" : "2018-08-20T23:05:19Z",
        "updatedAt" : "2018-08-22T23:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf5427967ae4f96e4ac074e66edd8e7095188b",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +300,304 @@\t\t\tType:            api.ServiceTypeClusterIP,\n\t\t\tClusterIP:       \"1.2.3.4\",\n\t\t\tPorts: []api.ServicePort{{\n\t\t\t\tPort:       6502,\n\t\t\t\tProtocol:   api.ProtocolTCP,"
  },
  {
    "id" : "b73b6dc7-4936-4c3e-9608-98e794ffe09b",
    "prId" : 67038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67038#pullrequestreview-147854402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdaf057a-eaf0-4225-ae1d-ceba272ef57b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm not sure the AllocateNext function is exercised anywhere in dry run mode, can you add a case that does that?",
        "createdAt" : "2018-08-20T23:06:51Z",
        "updatedAt" : "2018-08-22T23:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf5427967ae4f96e4ac074e66edd8e7095188b",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +331,335 @@\t\t\tType:            api.ServiceTypeNodePort,\n\t\t\tPorts: []api.ServicePort{{\n\t\t\t\tNodePort:   30010,\n\t\t\t\tPort:       6502,\n\t\t\t\tProtocol:   api.ProtocolTCP,"
  },
  {
    "id" : "ac0f409c-20de-48fb-8911-7319475d189b",
    "prId" : 67038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67038#pullrequestreview-147854576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4d016f6-a827-40e8-8a65-97e2c4c0ec34",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I keep thinking of things to test. Should we test that removing a port via an update doesn't actually deallocate it?",
        "createdAt" : "2018-08-20T23:07:46Z",
        "updatedAt" : "2018-08-22T23:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf5427967ae4f96e4ac074e66edd8e7095188b",
    "line" : 280,
    "diffHunk" : "@@ -1,1 +749,753 @@\t}\n\tif storage.serviceIPs.Has(net.ParseIP(\"1.2.3.4\")) {\n\t\tt.Errorf(\"unexpected side effect: ip allocated\")\n\t}\n"
  },
  {
    "id" : "03b510a7-9c85-4d33-a7d5-362073cd4c61",
    "prId" : 67038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67038#pullrequestreview-147854706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "906b008b-eb12-4c8d-86dc-0f6beeff736c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should we unit test the dry-run nature of the portallocator?",
        "createdAt" : "2018-08-20T23:08:32Z",
        "updatedAt" : "2018-08-22T23:58:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0bf5427967ae4f96e4ac074e66edd8e7095188b",
    "line" : 458,
    "diffHunk" : "@@ -1,1 +2006,2010 @@\tstorage, _, server := NewTestREST(t, nil)\n\tdefer server.Terminate(t)\n\tnodePortOp := portallocator.StartOperation(storage.serviceNodePorts, false)\n\tdefer nodePortOp.Finish()\n"
  }
]