[
  {
    "id" : "68137872-286c-4a22-8bbc-16671158ed27",
    "prId" : 103467,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103467#pullrequestreview-701465598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc294aa1-df68-4c3b-9117-5c2ca119f20f",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Does this mean this is an existing bug that applied for any service type that isn't NodePort or LoadBalancer? \r\n\r\nI _think_ it's valid to specify a nodePort for a ClusterIP type Service for example, are those node port allocations not considered either? ",
        "createdAt" : "2021-07-04T23:28:07Z",
        "updatedAt" : "2021-07-04T23:28:10Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "d717acbf-9f20-434f-9daf-752b4a895c0e",
        "parentId" : "dc294aa1-df68-4c3b-9117-5c2ca119f20f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Unless the gate was enabled AND the field was changed from true (default) to false, it should work correctly.  Only when the field is false does it get this wrong.",
        "createdAt" : "2021-07-06T20:43:25Z",
        "updatedAt" : "2021-07-06T20:43:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f435acf0-3b13-4649-a6af-01b7eecbf5d9",
        "parentId" : "dc294aa1-df68-4c3b-9117-5c2ca119f20f",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah I see, so setting `nodePort: 30000` on a `ClusterIP` type Service is still accounted for",
        "createdAt" : "2021-07-06T20:59:12Z",
        "updatedAt" : "2021-07-06T20:59:13Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "fc30f177-db56-44c1-b9ac-5b48fd3993f1",
        "parentId" : "dc294aa1-df68-4c3b-9117-5c2ca119f20f",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "... but it will fail in validation\r\nhttps://github.com/kubernetes/kubernetes/blob/d7123a65248e25b86018ba8220b671cd483d6797/pkg/apis/core/validation/validation.go#L4404-L4412",
        "createdAt" : "2021-07-07T20:59:00Z",
        "updatedAt" : "2021-07-07T20:59:00Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "0ba5a30e-6dca-48ed-a024-6e47626ee092",
        "parentId" : "dc294aa1-df68-4c3b-9117-5c2ca119f20f",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah I missed that part, thanks :) ",
        "createdAt" : "2021-07-07T21:33:09Z",
        "updatedAt" : "2021-07-07T21:33:09Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b787aa18431fdce683563aa41f3a298191fc2fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +227,231 @@\tdefer nodePortOp.Finish()\n\n\tif service.Spec.Type == api.ServiceTypeNodePort || service.Spec.Type == api.ServiceTypeLoadBalancer {\n\t\tif err := initNodePorts(service, nodePortOp); err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "53364058-7642-4281-adc4-45eabc56b8e8",
    "prId" : 102898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102898#pullrequestreview-686690665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "855e38d0-2319-45a0-8df2-1d6da4c47c74",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "do we allow mutations on the type?\r\n```\r\nif oldService.Spec.Type != service.Spec.Type {\r\n    return false\r\n}\r\n```",
        "createdAt" : "2021-06-17T10:26:53Z",
        "updatedAt" : "2021-06-17T10:26:53Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "1d53e10b-8b25-4b5c-a59e-6b21f5c7c82a",
        "parentId" : "855e38d0-2319-45a0-8df2-1d6da4c47c74",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "\r\nYes we do. Thanks for catching this one.",
        "createdAt" : "2021-06-17T18:52:41Z",
        "updatedAt" : "2021-06-17T18:52:41Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a83ecbdb3195a227f083dd12cbe468aea7cc35",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +888,892 @@\t\treturn false\n\t}\n\n\t// both must be of IPFamilyPolicy==PreferDualStack\n\tif service.Spec.IPFamilyPolicy != nil && *(service.Spec.IPFamilyPolicy) != api.IPFamilyPolicyPreferDualStack {"
  },
  {
    "id" : "336e3f5d-5a89-4304-80c7-116fc3c3d8a2",
    "prId" : 102898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102898#pullrequestreview-693046734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0db2705-3aab-4bbf-9c33-3b89a1b6b8a7",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "this is a nit, but one of this is redundant since we check that `oldService.Spec.Type == service.Spec.Type`",
        "createdAt" : "2021-06-21T22:00:21Z",
        "updatedAt" : "2021-06-21T22:00:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "9ae237c7-efda-41f3-8a9c-abfa53607e23",
        "parentId" : "f0db2705-3aab-4bbf-9c33-3b89a1b6b8a7",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "the first if statement \r\n```golang\r\n 875   if oldService.Spec.Type != service.Spec.Type {                                                                                  \r\n 876     return false                                                                                                                   \r\n 877   }\r\n```\r\nvalidates that type has changed, if it is then it should go through the process of alloc/release as needed. the following if statements check if old/new is in fact something that we need we need to alloc/release for.",
        "createdAt" : "2021-06-22T17:35:50Z",
        "updatedAt" : "2021-06-22T17:35:50Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "f8dfcec6-c3ba-42ed-88b7-6150f10e6200",
        "parentId" : "f0db2705-3aab-4bbf-9c33-3b89a1b6b8a7",
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "@khenidak I think what Antonio is saying is, if we already know that service.Spec.Type == oldService.Spec.Type (because line 875) and then we just ensured that service.Spec.Type is OK, why do we need to check that oldService.Spec.Type is OK? we just checked that (by equivalence to service.Spec.Type) in line 879, right?",
        "createdAt" : "2021-06-25T17:26:00Z",
        "updatedAt" : "2021-06-25T17:26:00Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a83ecbdb3195a227f083dd12cbe468aea7cc35",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +887,891 @@\t\toldService.Spec.Type != api.ServiceTypeLoadBalancer {\n\t\treturn false\n\t}\n\n\t// both must be of IPFamilyPolicy==PreferDualStack"
  },
  {
    "id" : "5c9e4971-3202-4f91-b183-7dac43b854a3",
    "prId" : 99555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99555#pullrequestreview-602379316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1aea6c-b137-40bb-b48b-b39da81e1dd9",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "is this not against the least surprise principle?\r\nprevious behaviour was the same as before dualstack ",
        "createdAt" : "2021-03-02T11:20:20Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "d518fb1a-c582-416b-b68c-fbcdb6abd0eb",
        "parentId" : "3f1aea6c-b137-40bb-b48b-b39da81e1dd9",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "a case could be made that it has zero effect on user. As a matter of fact users already use that to create dual stack endpoints for non dualstack clusters today (before dual stack became a thing on kubernetes)",
        "createdAt" : "2021-03-02T19:00:59Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "4fa4e244-a6a6-402b-88ba-1977a84b8ea5",
        "parentId" : "3f1aea6c-b137-40bb-b48b-b39da81e1dd9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Yeah, we don't enforce that they can't create Endpoints of any family.  At this case we just need to pick a value for the policy.  RequireDual was what we wrote in the KEP. ",
        "createdAt" : "2021-03-02T23:53:08Z",
        "updatedAt" : "2021-03-03T19:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "84856c7caedc239224870ce39da351b05a8d2e58",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +912,916 @@\t// Special-case: headless+selectorless\n\tif len(service.Spec.ClusterIPs) > 0 && service.Spec.ClusterIPs[0] == api.ClusterIPNone && len(service.Spec.Selector) == 0 {\n\t\t// If the use said nothing about policy and we can't infer it, they get dual-stack\n\t\tif service.Spec.IPFamilyPolicy == nil {\n\t\t\trequireDualStack := api.IPFamilyPolicyRequireDualStack"
  },
  {
    "id" : "aaae4d8c-0650-4edd-9b1a-67f66d493dff",
    "prId" : 92744,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92744#pullrequestreview-523622754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58603cb5-e85f-40ba-a1a1-64b0e19aa1b3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I am working to clean up the service REST code.  We have a very similar but subtly different function in strategy, which we should comment or rename.\r\n\r\nStrategy is testing \"does this `type` ever need node ports?\" and if not, clears them.\r\n\r\nThis is testing \"does this service ACTUALLY need node ports?\" and if so allocates them.  Can you just comment something here?  My first instinct was to merge the two but that would be wrong (we said we will not clear them on an update of this field).\r\n\r\nI will propose a PR to rename/clarify within strategy.",
        "createdAt" : "2020-11-04T17:52:58Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5780b885-f575-48dc-a044-b116bab0ea09",
        "parentId" : "58603cb5-e85f-40ba-a1a1-64b0e19aa1b3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Should we reconsider the case of changing this from true to false in an update?  Maybe that *should* clear the NodePort values.",
        "createdAt" : "2020-11-04T18:21:16Z",
        "updatedAt" : "2020-11-13T06:50:03Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fca0f995596754ba2f53dab03cafda83632905c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +234,238 @@\t// TODO: This creates nodePorts if needed. In the future nodePorts may be cleared if *never* used.\n\t// But for now we stick to the KEP \"don't allocate new node ports but do not deallocate existing node ports if set\"\n\tif service.Spec.Type == api.ServiceTypeNodePort ||\n\t\t(service.Spec.Type == api.ServiceTypeLoadBalancer && shouldAllocateNodePorts(service)) {\n\t\tif err := initNodePorts(service, nodePortOp); err != nil {"
  },
  {
    "id" : "34fa0a69-84b9-45e7-b06c-2bd13fe33530",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-517058343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4864085-47b5-4966-8142-ea20ba342251",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "The code here and below would be clearer if you added a helper that took a `*net.IPNet` (or `net.IP`) and returned an `api.IPFamily`",
        "createdAt" : "2020-07-16T12:30:29Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "10e3bcd7-e942-4dba-b848-f61247e59871",
        "parentId" : "a4864085-47b5-4966-8142-ea20ba342251",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There are a few places that could benefit from this, but I am not inclined to block on it.",
        "createdAt" : "2020-10-19T22:18:21Z",
        "updatedAt" : "2020-10-26T18:06:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3f8e66f0-725e-4916-bca1-87ea4e97348e",
        "parentId" : "a4864085-47b5-4966-8142-ea20ba342251",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "punting to followups to get this PR in",
        "createdAt" : "2020-10-26T18:21:08Z",
        "updatedAt" : "2020-10-26T18:21:08Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +111,115 @@\tcidr := serviceIPs.CIDR()\n\tif netutil.IsIPv6CIDR(&cidr) {\n\t\tserviceIPFamily = api.IPv6Protocol\n\t}\n"
  },
  {
    "id" : "5a34d454-5986-44ff-9079-be44b12cfc9d",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-450032714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c196c1ce-5c41-4828-8788-45cc6de127c7",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "TODO: determine if this comment is still meaningful, possibly address it if it is",
        "createdAt" : "2020-07-16T12:38:30Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "914e2cef-71d6-4e98-a209-bee7b65e31f3",
        "parentId" : "c196c1ce-5c41-4828-8788-45cc6de127c7",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "still meaningful. and doing that is massive amount of work (needed, but not necessarily as part of this PR). Basically the whole defaulting, validation and alloc needs to move to strategy as the rest of the api types.",
        "createdAt" : "2020-07-16T16:49:34Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +205,209 @@\t}\n\n\t// TODO: this should probably move to strategy.PrepareForCreate()\n\tdefer func() {\n\t\treleased, err := rs.releaseClusterIPs(toReleaseClusterIPs)"
  },
  {
    "id" : "ebca99b9-c17f-4c28-991a-7bb82ee075a6",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-449292906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f80e6ba6-21f2-49c9-8ef5-4df4523003e8",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "(weird that `allocateClusterIPs` returns an empty map on empty input but `releaseClusterIPs` returns `nil`)",
        "createdAt" : "2020-07-16T12:49:47Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 286,
    "diffHunk" : "@@ -1,1 +614,618 @@func (rs *REST) releaseClusterIPs(toRelease map[api.IPFamily]string) (map[api.IPFamily]string, error) {\n\tif toRelease == nil {\n\t\treturn nil, nil\n\t}\n"
  },
  {
    "id" : "6509122d-7ed7-4619-98d9-f1149270fa63",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-517059838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12095568-5359-4b82-8749-dbaf9aece1a4",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "definitely should be a helper function for this...",
        "createdAt" : "2020-07-16T13:00:23Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "b77b879f-cd9f-4023-96a2-2e6160a94eb7",
        "parentId" : "12095568-5359-4b82-8749-dbaf9aece1a4",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "followups welcome :)",
        "createdAt" : "2020-10-26T18:23:04Z",
        "updatedAt" : "2020-10-26T18:23:04Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 489,
    "diffHunk" : "@@ -1,1 +817,821 @@\n\t// headless don't get ClusterIPs\n\tif len(service.Spec.ClusterIPs) > 0 && service.Spec.ClusterIPs[0] == api.ClusterIPNone {\n\t\treturn nil, nil\n\t}"
  },
  {
    "id" : "6da3877d-ba8b-4125-9327-38afde7407bd",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-498750685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab7ec758-4c15-4a72-944d-789563cd0b53",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "I think this comment is confused? There has to be a cluster default service IP family regardless of the feature flag",
        "createdAt" : "2020-07-16T13:13:17Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "100e4386-196d-485c-b275-cb2b5b6e6118",
        "parentId" : "ab7ec758-4c15-4a72-944d-789563cd0b53",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "As agreed else where fields will carry values only if feature flag is turned on.",
        "createdAt" : "2020-09-29T18:08:30Z",
        "updatedAt" : "2020-10-26T18:06:39Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 643,
    "diffHunk" : "@@ -1,1 +958,962 @@\t}\n\n\t// nil families, gets cluster default (if feature flag is not in effect, the strategy will take care of removing it)\n\tif len(service.Spec.IPFamilies) == 0 {\n\t\tservice.Spec.IPFamilies = []api.IPFamily{rs.defaultServiceIPFamily}"
  },
  {
    "id" : "72ce41eb-aba3-4044-adbb-bb3b3840235c",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-449292906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e01f370-bc5c-44fe-aee3-b7fb34923c4a",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "`} else {`",
        "createdAt" : "2020-07-16T13:14:20Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 658,
    "diffHunk" : "@@ -1,1 +973,977 @@\t\t}\n\n\t\tif service.Spec.IPFamilies[0] == api.IPv6Protocol {\n\t\t\tservice.Spec.IPFamilies = append(service.Spec.IPFamilies, api.IPv4Protocol)\n\t\t}"
  },
  {
    "id" : "fc63516e-a59c-4239-945d-f3399803bf97",
    "prId" : 79386,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79386#pullrequestreview-276717806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09ad2b11-6664-4295-98ba-745df1555b3b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This will disregard the user's request.  I think this should be an error - user asked for v6 in a v4-only cluster.  Or will that get caught elsewhere?",
        "createdAt" : "2019-08-12T22:18:51Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "098656bf-db83-4b57-b4a3-71077d9315f8",
        "parentId" : "09ad2b11-6664-4295-98ba-745df1555b3b",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "It is caught at the allocation step. the allocator will not allocate an IP and will broadcast an error event on the service.",
        "createdAt" : "2019-08-19T17:53:00Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "c27e0b029d328552cc3ef0661f16a5ad3c422fb8",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +572,576 @@\tif !utilfeature.DefaultFeatureGate.Enabled(features.IPv6DualStack) ||\n\t\tservice.Spec.IPFamily == nil ||\n\t\tr.secondaryServiceIPs == nil {\n\t\treturn r.serviceIPs\n\t}"
  },
  {
    "id" : "99084511-a3a5-4c53-b2fb-ddb73ba235cc",
    "prId" : 76346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76346#pullrequestreview-227966940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4357434-1156-4ea9-bcf6-d737a92755bb",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "interesting... does this mean delete admission is not (and was not) done on endpoints deleted by the service REST handler?",
        "createdAt" : "2019-04-16T03:45:22Z",
        "updatedAt" : "2019-05-17T16:54:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c3bd0cf2-62c3-49f6-a9b6-5d32000c30e8",
        "parentId" : "b4357434-1156-4ea9-bcf6-d737a92755bb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Right. I think it's ok. If needed, the service webhook can check the endpoints when validating the service deletion.",
        "createdAt" : "2019-04-17T19:58:23Z",
        "updatedAt" : "2019-05-17T16:54:41Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d40e3c9e98ecade4a62d18f20163164d3e5e862",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\t// TODO: can leave dangling endpoints, and potentially return incorrect\n\t\t// endpoints if a new service is created with the same name\n\t\t_, _, err = rs.endpoints.Delete(ctx, id, rest.ValidateAllObjectFunc, &metav1.DeleteOptions{})\n\t\tif err != nil && !errors.IsNotFound(err) {\n\t\t\treturn nil, false, err"
  },
  {
    "id" : "e2dabe08-5fb2-4f1f-9b69-54187f8a1479",
    "prId" : 65154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65154#pullrequestreview-134122909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb79262-b270-4548-8ddc-df3c69cc03d8",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@jennybuckley just noticed this... this will return a NotFound error and short-circuit, right? need a follow up for this and any other custom Update() impls to honor forceAllowCreate and add tests for it",
        "createdAt" : "2018-07-03T18:14:53Z",
        "updatedAt" : "2018-07-03T18:14:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "311f4221-eed3-4916-84aa-c710870dd622",
        "parentId" : "beb79262-b270-4548-8ddc-df3c69cc03d8",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Great catch! I'll make an issue to track it since it's too late for a TODO.\r\nit shouldn't cause any bugs right now because forceAllowCreate will never be set to true yet.",
        "createdAt" : "2018-07-03T18:30:42Z",
        "updatedAt" : "2018-07-03T18:30:42Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "2248cb0c-a0a3-4a84-ba6d-95b1fe8fe4e2",
        "parentId" : "beb79262-b270-4548-8ddc-df3c69cc03d8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "sounds good, thanks",
        "createdAt" : "2018-07-03T18:35:11Z",
        "updatedAt" : "2018-07-03T18:35:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c60fe4fb7623e7c20696d7093c11a09d5c86987a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +328,332 @@\nfunc (rs *REST) Update(ctx context.Context, name string, objInfo rest.UpdatedObjectInfo, createValidation rest.ValidateObjectFunc, updateValidation rest.ValidateObjectUpdateFunc, forceAllowCreate bool) (runtime.Object, bool, error) {\n\toldObj, err := rs.services.Get(ctx, name, &metav1.GetOptions{})\n\tif err != nil {\n\t\treturn nil, false, err"
  },
  {
    "id" : "76beece8-59db-4de2-b30d-fc91d79ff49d",
    "prId" : 59510,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59510#pullrequestreview-98654785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b6cd18f-62f9-4883-ad0f-d601970d9c84",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "type assertions for these would be nice",
        "createdAt" : "2018-02-22T17:13:27Z",
        "updatedAt" : "2018-02-23T04:26:30Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e550468c-f79d-4936-aca4-373a23f72254",
        "parentId" : "8b6cd18f-62f9-4883-ad0f-d601970d9c84",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "just moved. nvmd",
        "createdAt" : "2018-02-22T17:19:33Z",
        "updatedAt" : "2018-02-23T04:26:30Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "98cf7e6ae2e3368d355aca690a7ab931f15e096f",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +143,147 @@}\n\nfunc (rs *REST) Export(ctx genericapirequest.Context, name string, opts metav1.ExportOptions) (runtime.Object, error) {\n\treturn rs.services.Export(ctx, name, opts)\n}"
  }
]