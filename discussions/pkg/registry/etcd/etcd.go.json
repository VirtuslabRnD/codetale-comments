[
  {
    "id" : "b0188c71-c612-4490-95e6-aa5dbf22823d",
    "prId" : 6989,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bc62d1-a370-4372-ae94-0b3015b40781",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you add a `TODO: use generic.SelectionPredicate` somewhere in this function?\n",
        "createdAt" : "2015-04-17T20:17:35Z",
        "updatedAt" : "2015-04-20T23:02:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f90dc8f413b12fdf579044de1e0055dcfabadf57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +273,277 @@\t\t}\n\t\t// TODO: use generic.SelectionPredicate\n\t\treturn r.Watch(key, version, tools.Everything)\n\t}\n\tif field.Empty() {"
  },
  {
    "id" : "1535badf-9573-4b0a-a69f-ccac9e5b1a19",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb076ae-aaf8-495a-88df-f4f1425df9aa",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@bprashanth Please remove pods from Registry as part of #4429.\n",
        "createdAt" : "2015-02-13T23:31:28Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da3b44244b2d9ecb5a650334aec7528808ff6f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +49,53 @@type Registry struct {\n\ttools.EtcdHelper\n\tpods pod.Registry\n}\n"
  },
  {
    "id" : "a912330c-8e17-498c-bae2-9241718cdbd9",
    "prId" : 3923,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f3bcc5d-992e-47fe-b342-994bc5b1acca",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I don't understand this. The code is if pods != nil, but the warning says it is nil? Also, no pods seems legit.\n",
        "createdAt" : "2015-01-29T06:17:50Z",
        "updatedAt" : "2015-01-29T06:23:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "619ddb54-dcc2-4a80-83ef-f55f48094df3",
        "parentId" : "0f3bcc5d-992e-47fe-b342-994bc5b1acca",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "oops, good catch, should be `pods == nil` not `!=` copy/paste error from the above...\n\npods.Items might be nil, but pods certainly should _not_ be nil unless err is non-nil, which I'm checking above.\n\nSee the stack trace in #3624 which is a nil dereference of a nil `pods` variable.  In that case, I'm pretty sure `err` was non nil, but as long as I was in here, I figured I'd add the extra check, just in case.\n",
        "createdAt" : "2015-01-29T06:24:57Z",
        "updatedAt" : "2015-01-29T06:24:57Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d4e72f1fab6455805c47cab97f13bfe3c348451",
    "line" : null,
    "diffHunk" : "@@ -1,1 +355,359 @@\t\t\t}\n\t\t\tif pods == nil {\n\t\t\t\tglog.Warningf(\"Pods list is nil.  This should never happen...\")\n\t\t\t\t// No object that's useable so drop it on the floor\n\t\t\t\treturn false"
  },
  {
    "id" : "a2a198a5-5477-4825-9a4d-1066a0d60896",
    "prId" : 3029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91447897-98e3-4521-94ad-7a832ebf338a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Was this a bug?\n",
        "createdAt" : "2014-12-18T15:15:10Z",
        "updatedAt" : "2014-12-18T15:15:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f1c68ea0-8e2c-42c4-a33d-090a559baee6",
        "parentId" : "91447897-98e3-4521-94ad-7a832ebf338a",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Yes, it was.\n\n```\ncurl localhost:8080/api/v1beta1/minions/127.0.0.10\n{\n  \"kind\": \"Status\",\n  \"creationTimestamp\": null,\n  \"apiVersion\": \"v1beta1\",\n  \"status\": \"Failure\",\n  \"message\": \"minion \\\"\\\" not found\",\n  \"reason\": \"NotFound\",\n  \"details\": {\n    \"kind\": \"minion\"\n  },\n  \"code\": 404\n}\n```\n\nShould be\n\n```\ncurl localhost:8080/api/v1beta1/minions/127.0.0.10\n{\n  \"kind\": \"Status\",\n  \"creationTimestamp\": null,\n  \"apiVersion\": \"v1beta1\",\n  \"status\": \"Failure\",\n  \"message\": \"minion \\\"127.0.0.10\\\" not found\",\n  \"reason\": \"NotFound\",\n  \"details\": {\n    \"kind\": \"minion\"\n  },\n  \"code\": 404\n}\n```\n",
        "createdAt" : "2014-12-18T15:24:13Z",
        "updatedAt" : "2014-12-18T15:24:13Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "677f68ec02ff304ebe8ea15813204949293d2d9f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +605,609 @@\terr := r.ExtractObj(key, &minion, false)\n\tif err != nil {\n\t\treturn nil, etcderr.InterpretGetError(err, \"minion\", minionID)\n\t}\n\treturn &minion, nil"
  },
  {
    "id" : "9afc7e73-120c-4437-a49b-992054ed7f91",
    "prId" : 2097,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "857928cc-9607-4053-b892-2e4fa4a16917",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I will remove the above block of code if no longer relevant.  It doesn't seem to be.\n",
        "createdAt" : "2014-11-13T18:00:26Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "32f0b0c6-830e-4afc-a126-168523c05f00",
        "parentId" : "857928cc-9607-4053-b892-2e4fa4a16917",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This prevents updates from being visible to pods, which is the point of the block.\n",
        "createdAt" : "2014-11-13T20:04:51Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af4ccb1110f2fa548df3098c87638e376a9b2ef",
    "line" : null,
    "diffHunk" : "@@ -1,1 +271,275 @@\t\treturn boundPods, fmt.Errorf(\"Failed to update pod, couldn't find %s in %#v\", pod.Name, boundPods)\n\t})\n}\n\n// DeletePod deletes an existing pod specified by its ID."
  },
  {
    "id" : "8e5f76e7-68b5-4945-ad7a-9721f26fde60",
    "prId" : 2097,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cefd9ba6-ac0b-484c-bced-897078ebb7e5",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "UpdatePod was the only function that did not update the state of BoundPods.   Add/Delete already do.  I changed Update to match.\n",
        "createdAt" : "2014-11-14T06:04:41Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "b31899f8-1494-4b7f-867a-7d5860c90de6",
        "parentId" : "cefd9ba6-ac0b-484c-bced-897078ebb7e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's the right solution\n",
        "createdAt" : "2014-11-14T15:49:42Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "da8811a5-4cf7-4c1d-8bc0-4844b59111c0",
        "parentId" : "cefd9ba6-ac0b-484c-bced-897078ebb7e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "@brendandburns the version you added as UpdatePods was merging the wrong object (etcd stores BoundPods, not CMLs) - I _think_ it worked because of conversion, but I'm not positive.  Can you look through the old and new code and help me figure out if there is any impact to end users.\n",
        "createdAt" : "2014-11-14T15:50:55Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a508cb33-e839-4934-a358-96d5c0b21e2d",
        "parentId" : "cefd9ba6-ac0b-484c-bced-897078ebb7e5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If pod updates work with this change, that seems good enough to me.\n",
        "createdAt" : "2014-11-17T06:01:20Z",
        "updatedAt" : "2014-11-18T14:25:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af4ccb1110f2fa548df3098c87638e376a9b2ef",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +265,269 @@\t\t\t\tboundPods.Items[ix].Spec = pod.Spec\n\t\t\t\treturn boundPods, nil\n\t\t\t}\n\t\t}\n\t\t// This really shouldn't happen"
  },
  {
    "id" : "c70b047a-8a0b-4490-8a09-5704df56506c",
    "prId" : 1861,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b55f44ac-2d22-4665-b4ff-f87fb3dc217c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: get the namespace out of the context before calling the key construction function; I can't think of a reason to pass the whole context.\n",
        "createdAt" : "2014-10-17T17:53:21Z",
        "updatedAt" : "2014-10-17T17:53:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "38b70d64-2b8f-40fd-a12e-4eca1a5bdd81",
        "parentId" : "b55f44ac-2d22-4665-b4ff-f87fb3dc217c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I think we need to do that globally for a number of other areas if we go this route.  Right now, namespace is not required on the context for the function to work.  In fact, that was the bug this fixed.\n",
        "createdAt" : "2014-10-17T18:04:23Z",
        "updatedAt" : "2014-10-17T18:04:23Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "9be8c689-09ce-4e75-872b-e87825bc9386",
        "parentId" : "b55f44ac-2d22-4665-b4ff-f87fb3dc217c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Prefer if we can deliver this fix now so its consistent with the rest of the areas, and we update how context/namespace is handled per our other issue.\n",
        "createdAt" : "2014-10-17T18:05:03Z",
        "updatedAt" : "2014-10-17T18:05:03Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d6c937183169a27dea40f69d327257103431659",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +576,580 @@\t}\n\tif field.Empty() {\n\t\treturn r.WatchList(makeServiceEndpointsListKey(ctx), version, tools.Everything)\n\t}\n\treturn nil, fmt.Errorf(\"only the 'ID' and default (everything) field selectors are supported\")"
  },
  {
    "id" : "0a21339f-92a3-44c5-aa7e-b1038e157c0e",
    "prId" : 1713,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90a132dc-d661-4071-a215-18bdcda92489",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "From here to the set should be in an AtomicUpdate function. As written it's racy. The atomic update thingy will do the read for you.\n",
        "createdAt" : "2014-10-13T17:31:09Z",
        "updatedAt" : "2014-10-14T00:27:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a36c0b8a-6d87-41d3-b086-44ec118c9fe6",
        "parentId" : "90a132dc-d661-4071-a215-18bdcda92489",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's not racy - it'll reject the write if the version changes in between (SetObj compareandswaps), whereas atomic just tries to keep merging.  So technically this path is more correct right now than AtomicUpdate which should really be AtomicMergeHelper\n\n----- Original Message -----\n\n> > @@ -198,7 +198,37 @@ func (r *Registry) assignPod(podID string, machine\n> > string) error {\n> >  }\n> > \n> >  func (r *Registry) UpdatePod(ctx api.Context, pod *api.Pod) error {\n> > -   return fmt.Errorf(\"unimplemented!\")\n> > -   var podOut api.Pod\n> > -   podKey := makePodKey(pod.ID)\n> > -   err := r.EtcdHelper.ExtractObj(podKey, &podOut, false)\n> \n> From here to the set should be in an AtomicUpdate function. As written it's\n> racy. The atomic update thingy will do the read for you.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1713/files#r18782464\n",
        "createdAt" : "2014-10-13T17:42:39Z",
        "updatedAt" : "2014-10-14T00:27:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "def46492-6c70-4e3f-b973-fd439b724f39",
        "parentId" : "90a132dc-d661-4071-a215-18bdcda92489",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, ok. Should be exactly the same behavior, then.\n",
        "createdAt" : "2014-10-13T18:45:18Z",
        "updatedAt" : "2014-10-14T00:27:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "79055648-47a9-41a0-89c4-158da1b19d70",
        "parentId" : "90a132dc-d661-4071-a215-18bdcda92489",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Yeah, actually I want the behavior.  I don't want it to keep trying to do the update, it should try once, and then reject if the update failed.\n",
        "createdAt" : "2014-10-13T23:11:55Z",
        "updatedAt" : "2014-10-14T00:27:34Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "4380637be75b8fd3768748a920b0943e3119b27f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +203,207 @@\tvar podOut api.Pod\n\tpodKey := makePodKey(pod.ID)\n\terr := r.EtcdHelper.ExtractObj(podKey, &podOut, false)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "e5f5c912-a837-405b-b731-2befefb3f59d",
    "prId" : 1478,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "025117d3-368a-402d-ae1c-e9ff8c290cca",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Add a TODO for adding some validation here.\n",
        "createdAt" : "2014-10-07T19:48:15Z",
        "updatedAt" : "2014-10-07T20:23:19Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "7b10d5fb-2f5d-459e-af59-7c21bfccc573",
        "parentId" : "025117d3-368a-402d-ae1c-e9ff8c290cca",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Done.\n",
        "createdAt" : "2014-10-07T20:01:00Z",
        "updatedAt" : "2014-10-07T20:23:19Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "4de810efb48e60545272a1aa9da03c4dd8734982",
    "line" : null,
    "diffHunk" : "@@ -1,1 +395,399 @@func (r *Registry) CreateMinion(ctx api.Context, minion *api.Minion) error {\n\t// TODO: Add some validations.\n\terr := r.CreateObj(makeMinionKey(minion.ID), minion, 0)\n\treturn etcderr.InterpretCreateError(err, \"minion\", minion.ID)\n}"
  },
  {
    "id" : "5e06bd96-5c9f-4b58-8e6a-cbbdd02f7808",
    "prId" : 899,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abe17f2c-f917-491b-81af-ad6c2d9e7544",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I realize you didn't introduce this, but this \"update\" has a really bad use of AtomicUpdate. It will obliterate whatever is there, regardless of whether `e` was based on it or not. It's impossible to use this UpdateEndpoints function safely if there is a chance it can be called concurrently. Can you add a TODO?\n",
        "createdAt" : "2014-08-15T19:03:27Z",
        "updatedAt" : "2014-08-27T19:50:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "957c60eb-1653-4f24-8b60-6ec35e7597dd",
        "parentId" : "abe17f2c-f917-491b-81af-ad6c2d9e7544",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah\n",
        "createdAt" : "2014-08-15T19:07:30Z",
        "updatedAt" : "2014-08-27T19:50:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "9006eadcfee2e0493590fce7dc2968db2779bb43",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +372,376 @@// UpdateEndpoints update Endpoints of a Service.\nfunc (r *Registry) UpdateEndpoints(e api.Endpoints) error {\n\treturn r.AtomicUpdate(makeServiceEndpointsKey(e.ID), &api.Endpoints{},\n\t\tfunc(input interface{}) (interface{}, error) {\n\t\t\t// TODO: racy - label query is returning different results for two simultaneous updaters"
  }
]