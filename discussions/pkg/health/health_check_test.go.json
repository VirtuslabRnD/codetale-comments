[
  {
    "id" : "985143f8-6edf-4c7d-a1f4-88586d0dab96",
    "prId" : 648,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec53ae2-99b8-4452-ab29-21f56606aae6",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "nit: this could just be called \"testCase\" and \"testCases\".  We're not consistent on it, but it would save having to redefine it as tt immediately below.\n",
        "createdAt" : "2014-07-28T00:21:42Z",
        "updatedAt" : "2014-07-28T00:22:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8aa737ae-c4a8-4a15-98ae-58eb425595d8",
        "parentId" : "0ec53ae2-99b8-4452-ab29-21f56606aae6",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "We are redefining to tt below to prevent any possible side effects of httpHealthCheckerTest being reused between iterations. \n",
        "createdAt" : "2014-07-28T06:22:39Z",
        "updatedAt" : "2014-07-28T06:22:39Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "c120bada-30b7-4b8d-b9ab-2ce4c4c5843a",
        "parentId" : "0ec53ae2-99b8-4452-ab29-21f56606aae6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ranges already copy values and you're not closing a goroutine on the loop var - what side effect is possible?\n",
        "createdAt" : "2014-07-28T12:28:30Z",
        "updatedAt" : "2014-07-28T12:28:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3b70b21f-fdc0-48fd-b769-e034eb62acd2",
        "parentId" : "0ec53ae2-99b8-4452-ab29-21f56606aae6",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "I'm closing over with the httptest.NewServer. This came up in another PR, where there was concern about side effects. So I did the same thing here, but if in this case I should remove the reassignment I'm happy to do it.\n",
        "createdAt" : "2014-07-28T19:42:42Z",
        "updatedAt" : "2014-07-28T19:42:42Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "0f924653-b225-4165-9573-0cfe447b3163",
        "parentId" : "0ec53ae2-99b8-4452-ab29-21f56606aae6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's fine to leave it - the old ts should not be called when the loop val changed, but someone could always get tricked by it.\n",
        "createdAt" : "2014-07-28T19:46:07Z",
        "updatedAt" : "2014-07-28T19:46:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c860ac3afc0ef018e692d7f12e02d7eba312c367",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\tclient: &http.Client{},\n\t}\n\tfor _, httpHealthCheckerTest := range httpHealthCheckerTests {\n\t\ttt := httpHealthCheckerTest\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
  },
  {
    "id" : "4dc9d264-d1d7-4239-b09d-58bef4caffaf",
    "prId" : 545,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "parentId" : null,
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "Are you sure we can use tt, which is a loop counter, inside the function without races? I know the following code will be racy:\n\n```\nfor i, obj := range slice {\n    go func() {\n       fmt.Println(i, obj)\n    }()\n}\n```\n\nBecause a loop counter cannot be used within a goroutine started inside the loop. I think `NewServer()` will start goroutines for each connection, which may be a problem. Could you write a small program to confirm with?\n",
        "createdAt" : "2014-07-21T01:22:52Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      },
      {
        "id" : "45c06a10-f4ff-4690-be2e-60baa5d97870",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think it's fine as written, because no side effects outlive a loop iteration.\n",
        "createdAt" : "2014-07-21T01:27:47Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8a9a1318-0d06-4fde-a143-259b8612c5de",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "What @lavalamp said.\n",
        "createdAt" : "2014-07-21T03:10:15Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "c90ed66d-bf94-4035-a8ba-e55a3bad211f",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "@lavalamp Are you sure? The [following code](http://play.golang.org/p/Cc3KwHdyqH) will be wrong even if we only print the value in goroutines and no write operation happens on the varables. (Printing something itself is a side effect, so I'm not sure what you mean by \"no side effects\" --- there's `w.WriteHeader(tt.status)`, which is considered as side effect. I think you may mean that the loop variable is not changed.)\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nfunc main() {\n    slice := []int{1, 2, 3, 4, 5}\n    var wg sync.WaitGroup\n    for i, v := range slice {\n        wg.Add(1)\n        go func() {\n            fmt.Printf(\"%v is %v\\n\", i, v)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n```\n\n`tt` will be changed between loops and might be a race. Probably you may need to pass `tt.status` as the parameter?\n",
        "createdAt" : "2014-07-21T05:00:45Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      },
      {
        "id" : "fdccc257-f2b5-443b-b126-1418e2f68988",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@monnand, the analogy doesn't hold-- fmt.Printf causes a side-effect that outlives an iteration of the loop. While this code does leave a test server around for each iteration of the loop, and it's true that, should a request get routed to the old test server, it would return with a different tt than it started out with, nothing can access these leftover servers, so there's not actually a problem here. (Disclaimer: I haven't actually run this code, but I think travis would fail it if it were actually racy-- we turned on the data race detector, right?)\n",
        "createdAt" : "2014-07-21T05:08:41Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "845f11ee-caf5-4e97-8b71-c13af7451aac",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "Not that I think there is a problem with this, but if we are worried I can always do\n\n```\ntt := tt\n```\n\ninside the loop.\n",
        "createdAt" : "2014-07-21T05:46:04Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "29f20c8b-e656-4796-8639-784356b36193",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "I'm going to change this to be safe.\n",
        "createdAt" : "2014-07-21T05:57:00Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "72348881-bce6-4847-b949-ad3e1beb8fec",
        "parentId" : "1b15a1ff-aaa2-4751-88e5-fd86fd4b1bb9",
        "authorId" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "body" : "@lavalamp I see what you mean. Yes, it's fine if you only use the server within the loop.\n",
        "createdAt" : "2014-07-21T21:01:01Z",
        "updatedAt" : "2014-07-21T22:30:39Z",
        "lastEditedBy" : "ec51f754-9844-4e72-8c9e-8d1105d99228",
        "tags" : [
        ]
      }
    ],
    "commit" : "fce90dc761b542c26e4af746fc1c29eeb12fb3e5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@\t\ttt := healthCheckerTest\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.WriteHeader(tt.status)\n\t\t}))\n\t\tu, err := url.Parse(ts.URL)"
  }
]