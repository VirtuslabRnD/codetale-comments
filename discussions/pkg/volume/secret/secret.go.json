[
  {
    "id" : "267e21b3-973a-4053-9498-a0c096d1eba3",
    "prId" : 29641,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bc89090-23fb-45f1-b82b-91c0d6e9bf3a",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Is it possible to create a common wrappedVolumeSpec method (say in pkg/volume/util.go) and use that in all the 4 locations? (Looks like you may need to pass in a parameter)?\n\nThanks,\nDims\n",
        "createdAt" : "2016-07-27T10:12:01Z",
        "updatedAt" : "2016-07-27T10:12:01Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "fca001a4-9c43-4725-a794-dc9e265ecc46",
        "parentId" : "5bc89090-23fb-45f1-b82b-91c0d6e9bf3a",
        "authorId" : "bfb32501-a689-4c4c-941b-d6dcf433bb91",
        "body" : "Well I could do this by adding say `WrappedVolumeSpec()` to pkg/volume/util.go, but that would be a kind of `volume` -> `volume/empty_dir` quasi-dependency which is probably not very pretty.\n",
        "createdAt" : "2016-07-27T10:41:45Z",
        "updatedAt" : "2016-07-27T10:44:25Z",
        "lastEditedBy" : "bfb32501-a689-4c4c-941b-d6dcf433bb91",
        "tags" : [
        ]
      },
      {
        "id" : "cdc19d3d-e452-4ffa-8f1a-4d352a090bfe",
        "parentId" : "5bc89090-23fb-45f1-b82b-91c0d6e9bf3a",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "ouch. never mind. scratch that then :)\n",
        "createdAt" : "2016-07-27T11:04:13Z",
        "updatedAt" : "2016-07-27T11:04:13Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "d95b1bce-c2f1-4778-a26c-8e4ca8790ff1",
        "parentId" : "5bc89090-23fb-45f1-b82b-91c0d6e9bf3a",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I think it's ok/expected for util packages to live at the same level as the package that consumes them. So as long it doesn't result in circular dependencies that would be a good cleanup.\n\nRegardless, any cleanup/refactoring can be done in a follow up.\n",
        "createdAt" : "2016-07-27T17:48:36Z",
        "updatedAt" : "2016-07-27T17:48:36Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1e925143daf34199b55ffb91d0598244888cce",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +46,50 @@var _ volume.VolumePlugin = &secretPlugin{}\n\nfunc wrappedVolumeSpec() volume.Spec {\n\treturn volume.Spec{\n\t\tVolume: &api.Volume{VolumeSource: api.VolumeSource{EmptyDir: &api.EmptyDirVolumeSource{Medium: api.StorageMediumMemory}}},"
  },
  {
    "id" : "fe25685c-c847-4cc4-9b81-21768aacfedf",
    "prId" : 28936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a58cca5f-f55f-4813-a137-0b4738bce439",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "change this error message as i suggested for configmap\n",
        "createdAt" : "2016-08-17T14:53:10Z",
        "updatedAt" : "2016-08-17T18:50:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a14a64f347f72ef282d2b6f675f30683be85b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +220,224 @@func makePayload(mappings []api.KeyToPath, secret *api.Secret, defaultMode *int32) (map[string]volumeutil.FileProjection, error) {\n\tif defaultMode == nil {\n\t\treturn nil, fmt.Errorf(\"No defaultMode used, not even the default value for it\")\n\t}\n"
  },
  {
    "id" : "08b7bce1-95d3-425f-8482-33cd74c4df53",
    "prId" : 27970,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "641a4222-45cf-45f5-98a6-360bf20d64a6",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ditto\n",
        "createdAt" : "2016-08-06T03:56:55Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "f19a1148db1b7584be6b6b60abaf8c0bd1503ed3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +116,120 @@\t\tVolumeSource: api.VolumeSource{\n\t\t\tSecret: &api.SecretVolumeSource{\n\t\t\t\tSecretName: volName,\n\t\t\t},\n\t\t},"
  },
  {
    "id" : "b24ecd09-99c9-4a7e-be4a-31333d0fa89d",
    "prId" : 25285,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c2514ec-dc23-4014-ab9c-42659787cd65",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I frequently wish that go allowed interface specifications to contain fields or had a mixin mechanism that allow type-unspecific use of fields with a specific type signature.\n",
        "createdAt" : "2016-05-07T03:03:19Z",
        "updatedAt" : "2016-05-18T14:14:23Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3aa900d52cd3d1bc47aa2196af049df6b8c2a95",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +195,199 @@\n\tif len(mappings) == 0 {\n\t\tfor name, data := range secret.Data {\n\t\t\tpayload[name] = []byte(data)\n\t\t}"
  }
]