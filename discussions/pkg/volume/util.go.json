[
  {
    "id" : "936829a9-c5f5-4422-a7cf-85435af43cd3",
    "prId" : 53491,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53491#pullrequestreview-70476677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17f6eb06-274b-4204-9311-6252a7e7ca3a",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "If the pod was taking to long to run, I'm worried this could get stuck in a loop, where recycler creates the pod, which gets stuck, and then in the next loop delete's the pod before it's ever able to finish.",
        "createdAt" : "2017-10-18T18:25:29Z",
        "updatedAt" : "2017-10-18T18:26:30Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "caa80e06-5d6d-4ee4-ac2d-2e798ac59d63",
        "parentId" : "17f6eb06-274b-4204-9311-6252a7e7ca3a",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Whole `internalRecycleVolumeByWatchingPodUntilCompletion` does not return until the recycler pod dies. PV controller makes sure that only one of this function is running per each PV.\r\n\r\nIf the pod takes too long kubelet kills it with something like `DeadlineExceeded`.\r\n\r\nSo the only case when this code kills a real recycler pod is after controller restart. New controller starts `internalRecycleVolumeByWatchingPodUntilCompletion`, it finds an old recycler pod and kills it. IMO it's ok, controllers should not be restarted that often.",
        "createdAt" : "2017-10-19T09:40:48Z",
        "updatedAt" : "2017-10-19T09:40:48Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceb10ac0a540fbaae81797a572a88c22b318843d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +82,86 @@\tif err != nil {\n\t\tif errors.IsAlreadyExists(err) {\n\t\t\tdeleteErr := recyclerClient.DeletePod(pod.Name, pod.Namespace)\n\t\t\tif deleteErr != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to delete old recycler pod %s/%s: %s\", pod.Namespace, pod.Name, deleteErr)"
  },
  {
    "id" : "a504a94c-6aa2-4cba-bf69-6c99b67773a6",
    "prId" : 41906,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41906#pullrequestreview-23749762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af8cda8e-1e4c-4ef5-a84d-e684d183126f",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Please add unit tests for these methods.",
        "createdAt" : "2017-02-23T19:06:20Z",
        "updatedAt" : "2017-03-01T16:50:50Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "62a73275-a94e-49e6-98d0-a71cd090bf8a",
        "parentId" : "af8cda8e-1e4c-4ef5-a84d-e684d183126f",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "done",
        "createdAt" : "2017-02-24T16:14:38Z",
        "updatedAt" : "2017-03-01T16:50:50Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d3008fc56f09c181565f9f27f3076270546de2a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +376,380 @@\n// MountOptionFromSpec extracts and joins mount options from volume spec with supplied options\nfunc MountOptionFromSpec(spec *Spec, options ...string) []string {\n\tpv := spec.PersistentVolume\n"
  },
  {
    "id" : "182a2769-0b28-4291-9754-3da0445ba543",
    "prId" : 38505,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38505#pullrequestreview-39999003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e076813-0106-4dea-918d-8ab51dfb7eb8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we defined it as a space separated string, we could just use strings.Fields() and maybe not need a helper function at all?",
        "createdAt" : "2017-05-22T23:11:49Z",
        "updatedAt" : "2017-05-24T08:48:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e1ed1f56-adcc-4be1-8bc5-2d7567ee166f",
        "parentId" : "0e076813-0106-4dea-918d-8ab51dfb7eb8",
        "authorId" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "body" : "It is necessary to convert the input string with list of zones to a set because the [func ChooseZoneForVolume ](https://github.com/kubernetes/kubernetes/blob/master/pkg/volume/util.go#L295) requires a set as one of the input parameters. As the `strings.Fields` converts a string to a slice a helper function will be needed anyway. However, the line `trimmedZone := strings.TrimSpace(zone)` could be deleted if `strings.Fields` is used.\r\nIMHO, comma separated list feels better than a space separated list. That's why I prefer to keep it as it is.",
        "createdAt" : "2017-05-23T11:11:09Z",
        "updatedAt" : "2017-05-24T08:48:32Z",
        "lastEditedBy" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "tags" : [
        ]
      },
      {
        "id" : "ebc59a9c-9897-4632-a445-c2a42fe2d7ad",
        "parentId" : "0e076813-0106-4dea-918d-8ab51dfb7eb8",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "ack",
        "createdAt" : "2017-05-24T11:39:56Z",
        "updatedAt" : "2017-05-24T11:39:56Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eb912e62fd7a8f9fd7d6347b412e5b80ae98ab3",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +417,421 @@\tzonesSet := make(sets.String)\n\tfor _, zone := range zonesSlice {\n\t\ttrimmedZone := strings.TrimSpace(zone)\n\t\tif trimmedZone == \"\" {\n\t\t\treturn make(sets.String), fmt.Errorf(\"comma separated list of zones (%q) must not contain an empty zone\", zonesString)"
  },
  {
    "id" : "6c74ec01-2f68-4514-8997-791563da762e",
    "prId" : 38505,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38505#pullrequestreview-39706617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91fe0d78-0316-47d2-b7f7-7b4f5909df45",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can we in-line this at call-sites?  It's sort of silly to out-of-line this.",
        "createdAt" : "2017-05-22T23:14:15Z",
        "updatedAt" : "2017-05-24T08:48:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "25d6d1f2-7a26-4837-ba0c-9a0dfeca9851",
        "parentId" : "91fe0d78-0316-47d2-b7f7-7b4f5909df45",
        "authorId" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "body" : "IMHO, it's a matter of subjective preference.\r\nI prefer to express my [intention](https://en.wikipedia.org/wiki/Intentional_programming) at call-sites rather than to in-line the implementation at call-sites even though the current implementation of the validation is trivial.\r\nIn addition, the function `ValidateZone` is not called at only 1 place.\r\nThat's why I prefer to keep it as it is.",
        "createdAt" : "2017-05-23T10:52:51Z",
        "updatedAt" : "2017-05-24T08:48:32Z",
        "lastEditedBy" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eb912e62fd7a8f9fd7d6347b412e5b80ae98ab3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +429,433 @@// - an error in case zone is an empty string or contains only any combination of spaces and tab characters\n// - nil otherwise\nfunc ValidateZone(zone string) error {\n\tif strings.TrimSpace(zone) == \"\" {\n\t\treturn fmt.Errorf(\"the provided %q zone is not valid, it's an empty string or contains only spaces and tab characters\", zone)"
  },
  {
    "id" : "3a86749d-be14-48a4-a573-11bf5d9ac046",
    "prId" : 27714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60b50190-7208-4864-89be-f964b93230a9",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@jsafrane So, `Event` in this interface creates an event for the volume, right?\n",
        "createdAt" : "2016-08-22T14:25:00Z",
        "updatedAt" : "2016-09-08T10:58:18Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "750db5f7-0da1-4e87-9de8-478c5def7fe9",
        "parentId" : "60b50190-7208-4864-89be-f964b93230a9",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I think it would help if there was godoc in the interface declaration for `WatchPod` and `Event`\n",
        "createdAt" : "2016-08-22T14:38:20Z",
        "updatedAt" : "2016-09-08T10:58:18Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "05aec562-4004-4392-ae97-460622f678ce",
        "parentId" : "60b50190-7208-4864-89be-f964b93230a9",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "godoc added\n",
        "createdAt" : "2016-08-23T08:25:17Z",
        "updatedAt" : "2016-09-08T10:58:18Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7111b282f1298071c8b6a2602356c67ddaa7c57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +138,142 @@\tWatchPod(name, namespace string, stopChannel chan struct{}) (<-chan watch.Event, error)\n\t// Event sends an event to the volume that is being recycled.\n\tEvent(eventtype, message string)\n}\n"
  },
  {
    "id" : "d56092ee-4a5d-4b7e-b8d6-0e8921e6653f",
    "prId" : 27714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3717582-57dd-43a7-93e7-0288bc39c594",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "off-topic, it seems redundant that you should have to specify `Watch=true` for the watch API endpoint\n",
        "createdAt" : "2016-08-22T14:40:53Z",
        "updatedAt" : "2016-09-08T10:58:18Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7111b282f1298071c8b6a2602356c67ddaa7c57",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +173,177 @@\toptions := api.ListOptions{\n\t\tFieldSelector: podSelector,\n\t\tWatch:         true,\n\t}\n"
  },
  {
    "id" : "0402f33c-b567-44d5-bcbe-86e183a845da",
    "prId" : 27553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f129b85e-74d2-40bc-8fea-facdc092f92e",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Does the spreading property depend on zones.List() returning the zones in the same order every time it's called? If so, do we know this will actually be true?\n",
        "createdAt" : "2016-06-19T19:11:39Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1b3bc269-d575-4b4e-9da8-2a9a422cedd8",
        "parentId" : "f129b85e-74d2-40bc-8fea-facdc092f92e",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "It does depend on it, but List() is sorted: https://github.com/kubernetes/kubernetes/blob/master/pkg/util/sets/string.go#L167\n\nThis could probably use a comment though.\n\nThe case where it fails is if the set of zone changes while volumes are being created for a PetSet.  I think the most likely case here is that we grow a PetSet from N=1 -> N=3 some time _after_ initial creation, and in the meantime the user has also expanded their k8s cluster.  However, I don't really know what we can practically do better here in 1.3 (suggestions welcome).  We really should look at the set of PVCs and pick a zone based on the other allocations (like we would with pod anti affinity), but those scheduler-like changes seem impractical for 1.3 (and we know we want to do them later, which is why we are favoring the name-based hack over an annotation that might constrain us in future).\n\nI hypothesize though that what we have here will be good enough in practice.  I don't think AWS or GCE have any regions with 5 zones.  I suspect most HA clusters will be launched into 3 zones, and then the set of zones will not change.\n",
        "createdAt" : "2016-06-19T20:31:16Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "80fa6701-b614-4af3-8598-3794ba811a1b",
        "parentId" : "f129b85e-74d2-40bc-8fea-facdc092f92e",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Yeah, that's fine, I was just curious. Thanks for the thorough explanation!\n",
        "createdAt" : "2016-06-19T20:41:56Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "457ff890-1852-4a6b-8c19-886529aa70fa",
        "parentId" : "f129b85e-74d2-40bc-8fea-facdc092f92e",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Yeah i think we can simply document around scaling zones while a pet is scaling\n",
        "createdAt" : "2016-06-19T22:29:07Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd949976199b4cb741ef0175353c2601dd9a8c90",
    "line" : null,
    "diffHunk" : "@@ -1,1 +243,247 @@\t// PVC placement (which could also e.g. avoid putting volumes in overloaded or\n\t// unhealthy zones)\n\tzoneSlice := zones.List()\n\tzone := zoneSlice[(hash+index)%uint32(len(zoneSlice))]\n"
  },
  {
    "id" : "23d540cb-2e48-4d82-a6ce-30217099c8b8",
    "prId" : 27553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c915b1-4a35-42b2-9806-3bfb27584c60",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "can you document that if anyone creates volumes like foo-index they'll get spreading across zones? (just comment is fine)\n",
        "createdAt" : "2016-06-19T22:28:59Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "402cf86c-0112-4f8d-a848-a9f5ea603024",
        "parentId" : "85c915b1-4a35-42b2-9806-3bfb27584c60",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Will do!\n",
        "createdAt" : "2016-06-20T01:54:23Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd949976199b4cb741ef0175353c2601dd9a8c90",
    "line" : null,
    "diffHunk" : "@@ -1,1 +199,203 @@// This means that a PetSet's volumes (`claimname-petsetname-id`) will spread across available zones,\n// assuming the id values are consecutive.\nfunc ChooseZoneForVolume(zones sets.String, pvcName string) string {\n\t// We create the volume in a zone determined by the name\n\t// Eventually the scheduler will coordinate placement into an available zone"
  },
  {
    "id" : "840d1b0d-322c-4302-80b8-3cd8e8024dd8",
    "prId" : 27553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38585a63-e9e7-4b0f-818d-bfc205a5bd58",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "can you please add a comment above where we insert the pet name identityt mentioning that it's used to detect zone? we should consider isolating this into a common function called `getOrdinality` or something that just returns an index for any given name that other parts of the system can reuse, but we can do that later and just put in a comment for now. \n",
        "createdAt" : "2016-06-19T22:29:02Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "6374b12a-cac4-4ac1-9310-c775df4c3f00",
        "parentId" : "38585a63-e9e7-4b0f-818d-bfc205a5bd58",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Sure.  I'm using the PVC name though - it seemed superfluous to add another annotation, and also like it would box us in for the future (we'd have to support it forever, whereas now we just have a heuristic that means that PetSet volumes do a sensible thing in most cases today, and in future they can do the optimal thing in all cases)\n",
        "createdAt" : "2016-06-20T01:57:36Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd949976199b4cb741ef0175353c2601dd9a8c90",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +219,223 @@\t\tif lastDash != -1 {\n\t\t\tpetIDString := pvcName[lastDash+1:]\n\t\t\tpetID, err := strconv.ParseUint(petIDString, 10, 32)\n\t\t\tif err == nil {\n\t\t\t\t// Offset by the pet id, so we round-robin across zones"
  },
  {
    "id" : "220dc4ea-fa9e-4a54-901b-7aaa52661fae",
    "prId" : 27553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20fc1112-709e-42b7-940d-f1dae516d765",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "log the error at warningf, if any? \n",
        "createdAt" : "2016-06-19T22:29:03Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "a9b3d423-2e6e-4df9-ba64-4c730c011928",
        "parentId" : "20fc1112-709e-42b7-940d-f1dae516d765",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "We expect an error though if the PVC name is not a PetSet created name (e.g. \"my-cool-pvc\").\n",
        "createdAt" : "2016-06-20T01:55:59Z",
        "updatedAt" : "2016-06-21T19:23:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd949976199b4cb741ef0175353c2601dd9a8c90",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +226,230 @@\t\t\t\thashString = pvcName[:lastDash]\n\t\t\t\tglog.V(2).Infof(\"Detected PetSet-style volume name %q; index=%d\", pvcName, index)\n\t\t\t}\n\t\t}\n"
  },
  {
    "id" : "9ec677a5-4561-4393-b081-3108c4b228da",
    "prId" : 20900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d94e75ee-a9ab-405e-b490-3cd541a72581",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "What if `pvLen + 1 > maxLength`?\n",
        "createdAt" : "2016-02-10T00:45:51Z",
        "updatedAt" : "2016-02-12T08:50:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "4656585c-eb6b-4b46-901f-be319f0b147b",
        "parentId" : "d94e75ee-a9ab-405e-b490-3cd541a72581",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Good catch. Currently, it cannot happen - GCE has limit of 63 characters and pv.Name there has 12 characters. All the other clouds have 255 characters limit.\n\nOf course, it's not robust, but cutting `pvName` (guaranteed to be unique) may generate non-unique volume names. And error is not an option. Suggestions?\n",
        "createdAt" : "2016-02-10T11:00:46Z",
        "updatedAt" : "2016-02-12T08:50:57Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "7f4ec764-e54e-4d94-8205-eeead89e6f14",
        "parentId" : "d94e75ee-a9ab-405e-b490-3cd541a72581",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Non-ideal, but it should be ok, because it shouldn't happen.\n",
        "createdAt" : "2016-02-10T22:10:04Z",
        "updatedAt" : "2016-02-12T08:50:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "9675b725-57fc-46df-b205-aeac8197d82b",
        "parentId" : "d94e75ee-a9ab-405e-b490-3cd541a72581",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: Maybe add a comment explaining this, in case someone encounters it.\n",
        "createdAt" : "2016-02-10T22:15:18Z",
        "updatedAt" : "2016-02-12T08:50:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "618f08c3-ef62-473d-86dc-bc797e7af2fb",
        "parentId" : "d94e75ee-a9ab-405e-b490-3cd541a72581",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Comment added, I hope it's not too confusing.\n",
        "createdAt" : "2016-02-11T13:01:43Z",
        "updatedAt" : "2016-02-12T08:50:57Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d0b1c227b85a836988bedf15fd3f12c1e372a3f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +162,166 @@\t// +1 for the '-' dash\n\tif pvLen+1+len(prefix) > maxLength {\n\t\tprefix = prefix[:maxLength-pvLen-1]\n\t}\n\treturn prefix + \"-\" + pvName"
  }
]