[
  {
    "id" : "c275a65d-cd5f-46f9-9c37-05c9799ec142",
    "prId" : 67443,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67443#pullrequestreview-146540604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb149195-951f-453e-9a42-526278619571",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "Just curious: not sure why is assumed to be mounted if the error can be ENOTCONN, for example\r\n\r\nBut this is identical to the original, so the same should be here in the cherry-pick :)",
        "createdAt" : "2018-08-15T17:31:15Z",
        "updatedAt" : "2018-08-15T17:33:11Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa90843008872902f2d02bb4b3099bb0a2403a5c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +62,66 @@\tif err != nil {\n\t\tif util.IsCorruptedMnt(err) {\n\t\t\tnotmnt = false // Corrupted error is assumed to be mounted.\n\t\t} else {\n\t\t\treturn err"
  },
  {
    "id" : "ccf1bb04-5923-4569-a59a-f870395ffb40",
    "prId" : 41804,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41804#pullrequestreview-23581686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840f518c-679c-409a-adae-02fca51f2860",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I say just remove this logic. If a driver implements this call they can implement these checks. If they don't then the default unmount device command should just call `UnmountPath(...)` from `pkg/volume/util/util.go` which has the most robust implementation of this logic.",
        "createdAt" : "2017-02-23T21:46:08Z",
        "updatedAt" : "2017-02-25T01:18:26Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d2af70e95dc25141d6d179a088b3d1af26eb206",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@func (d *flexVolumeDetacher) UnmountDevice(deviceMountPath string) error {\n\n\tif pathExists, pathErr := util.PathExists(deviceMountPath); pathErr != nil {\n\t\treturn fmt.Errorf(\"Error checking if path exists: %v\", pathErr)\n\t} else if !pathExists {"
  }
]