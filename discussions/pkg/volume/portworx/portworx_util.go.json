[
  {
    "id" : "e1cf0d08-9380-4ad8-97d4-93ba0ee7a024",
    "prId" : 76341,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76341#pullrequestreview-226725689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4125ddac-1382-4aa9-afc9-461cda211d05",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this doesn't seem to protect against concurrent access... was the issue concurrency or assigning to a nil map?",
        "createdAt" : "2019-04-10T13:26:03Z",
        "updatedAt" : "2019-04-10T13:26:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5287fde4-3e63-4de0-83ab-31fd79ad62c0",
        "parentId" : "4125ddac-1382-4aa9-afc9-461cda211d05",
        "authorId" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "body" : "@liggitt  thanks for reviewing this.\r\n\r\nBefore this change, reference to `p.options.Parameters` (which is the shared map) was getting saved in `spec.VolumeLabels` and line 103 below updates this map. When multiple PVCs are getting provisioned, this causes concurrent map writes. The golang panic will say `fatal: concurrent map read and write`.\r\n\r\nAnother problem you can see from the below for loop is `p.options.Parameters` will start accumulate annotations of all PVCs sharing a StorageClass.\r\n\r\nLet me know if you have further questions.",
        "createdAt" : "2019-04-11T01:21:53Z",
        "updatedAt" : "2019-04-11T01:21:53Z",
        "lastEditedBy" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "tags" : [
        ]
      },
      {
        "id" : "e13f5111-aeaf-46c4-b150-4501a3b8f3da",
        "parentId" : "4125ddac-1382-4aa9-afc9-461cda211d05",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I see, thanks",
        "createdAt" : "2019-04-15T15:38:31Z",
        "updatedAt" : "2019-04-15T15:38:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "17dd5989dfaab8b18ba68a040f5d05e309eaab0a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +73,77 @@\n\t// Pass all parameters as volume labels for Portworx server-side processing\n\tif spec.VolumeLabels == nil {\n\t\tspec.VolumeLabels = make(map[string]string, 0)\n\t}"
  },
  {
    "id" : "6be956c6-9174-4782-b808-70168fe44136",
    "prId" : 70392,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70392#pullrequestreview-172311388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e536a66-9620-4606-a948-b420ba2bcea3",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "What if the service uses named port?",
        "createdAt" : "2018-10-30T09:51:17Z",
        "updatedAt" : "2018-11-12T19:11:46Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "53f059d2-d741-46ea-8580-f38fd619cbd9",
        "parentId" : "4e536a66-9620-4606-a948-b420ba2bcea3",
        "authorId" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "body" : "Portworx users use a fixed portworx-service spec generated from https://install.portworx.com. Hence above logic that looks for `port` and `targetPort` works.\r\n\r\nThe spec is \r\n\r\n```\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: portworx-service\r\n  namespace: kube-system\r\n  labels:\r\n    name: portworx\r\nspec:\r\n  selector:\r\n    name: portworx\r\n  ports:\r\n    - name: px-api\r\n      protocol: TCP\r\n      port: 9001\r\n      targetPort: 9001\r\n```",
        "createdAt" : "2018-11-07T01:39:55Z",
        "updatedAt" : "2018-11-12T19:11:46Z",
        "lastEditedBy" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdc60629c9b7640f2711645e9ad55ebc4a52ce47",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +341,345 @@\tfor _, p := range svc.Spec.Ports {\n\t\tif p.Port == osdMgmtDefaultPort {\n\t\t\treturn p.TargetPort.IntVal\n\t\t}\n\t}"
  },
  {
    "id" : "a802ae67-7897-4c2e-92ba-db09d6610c74",
    "prId" : 62308,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62308#pullrequestreview-111452623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "931fa5ab-a69c-436f-a7ce-3c50990769ee",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "only the first volume will be resized?",
        "createdAt" : "2018-04-10T08:05:28Z",
        "updatedAt" : "2018-04-19T19:15:08Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "578bebd0-1eca-4ba9-a045-6baf49e9e2d3",
        "parentId" : "931fa5ab-a69c-436f-a7ce-3c50990769ee",
        "authorId" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "body" : "Yes, because we inspected one volume above. So only one volume is expected is the response. Line 200 also explicitly makes that check. `ResizeVolume` is a per-volume call.",
        "createdAt" : "2018-04-12T01:14:23Z",
        "updatedAt" : "2018-04-19T19:15:08Z",
        "lastEditedBy" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "tags" : [
        ]
      }
    ],
    "commit" : "adc71854e2c58394333abe15af29e964ab183760",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +203,207 @@\t}\n\n\tvol := vols[0]\n\tnewSizeInBytes := uint64(volutil.RoundUpToGiB(newSize) * volutil.GIB)\n\tif vol.Spec.Size >= newSizeInBytes {"
  },
  {
    "id" : "c52ce196-107f-455c-b086-16d212e149ae",
    "prId" : 49526,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49526#pullrequestreview-52820009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9ea3f7d-dea6-4a06-97bd-6a4d093b417b",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I am puzzled by this PR. StorageClass A has these parameters:\r\n\r\n```\r\n   repl: \"3\"\r\n```\r\n\r\n`SpecFromOpts` returns a spec with `HaLevel = 3` and you pass it to `driver.Create`. Cool.\r\n\r\nStorageClass B has these parameters:\r\n\r\n```\r\n   repl: \"3\"\r\n   io_priority: \"high\"\r\n```\r\n\r\nIn #49526 you say that `SpecFromOpts` fails. Now you pass the default spec with `HaLevel = 1, Cos = 0` and with `repl` and `io_priority` labels to `driver.Create`. Is this correct? Will `driver.Create` parse the labels again and override `spec.HaLevel` and `spec.Cos`? So what's the point of calling `SpecFromOpts` if everything can be passed as labels?",
        "createdAt" : "2017-07-25T07:43:13Z",
        "updatedAt" : "2017-07-27T23:12:54Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "f1dbedbd-918f-47fc-b931-32bfb9375c1a",
        "parentId" : "e9ea3f7d-dea6-4a06-97bd-6a4d093b417b",
        "authorId" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "body" : "> Now you pass the default spec with HaLevel = 1, Cos = 0 and with repl and io_priority labels to driver.Create. Is this correct? \r\nYes. \r\n> Will driver.Create parse the labels again and override spec.HaLevel and spec.Cos?\r\n\r\nYes, our latest server side implementation of driver.Create will overide the spec with entries given in the labels. \r\n\r\n> So what's the point of calling SpecFromOpts if everything can be passed as labels?\r\n\r\nIf everyone is running the latest Portworx version, we don't need to call `SpecFromOpts`\r\nThis is done to handle the case, someone updates to the latest k8s but doesn't update Portworx. Since previous versions of Portworx do not overide spec from labels, I am still calling `SpecFromOpts` for backward compatibility. \r\n\r\nThe err is ignored because going forward, we don't want any StorageClass parsing errors in the k8s driver to block volume creation. ",
        "createdAt" : "2017-07-25T16:50:28Z",
        "updatedAt" : "2017-07-27T23:12:54Z",
        "lastEditedBy" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "tags" : [
        ]
      },
      {
        "id" : "86ad959b-62af-44f5-85b5-d7b4ab96d9d3",
        "parentId" : "e9ea3f7d-dea6-4a06-97bd-6a4d093b417b",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "A comment about this would be nice, the code is really confusing",
        "createdAt" : "2017-07-26T10:47:36Z",
        "updatedAt" : "2017-07-27T23:12:54Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "b8b0c16c-14ea-4afa-ae90-1649bf4236e1",
        "parentId" : "e9ea3f7d-dea6-4a06-97bd-6a4d093b417b",
        "authorId" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "body" : "Done in latest incremental.",
        "createdAt" : "2017-07-28T00:27:22Z",
        "updatedAt" : "2017-07-28T00:27:22Z",
        "lastEditedBy" : "137889cb-cbfa-494b-994e-071dbd8d3ffc",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6927108764225fc092fbb6268e788a6999d843a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +63,67 @@\tspec, _ := specHandler.SpecFromOpts(p.options.Parameters)\n\tif spec == nil {\n\t\tspec = specHandler.DefaultSpec()\n\t}\n"
  }
]