[
  {
    "id" : "a9ea9dd7-a564-4c70-8205-b0b5ce559eb5",
    "prId" : 64532,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64532#pullrequestreview-125346021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b944495-0778-415a-943e-53d97efbca92",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we need to trim first? would git be fooled by \" --recursive\"?",
        "createdAt" : "2018-06-01T19:55:36Z",
        "updatedAt" : "2018-06-01T19:55:36Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "496dbb2c-b64c-4ee4-84a5-84644fec3af2",
        "parentId" : "4b944495-0778-415a-943e-53d97efbca92",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Tested this manually, and it just treats it as a directory named \" --recursive\".",
        "createdAt" : "2018-06-02T00:07:45Z",
        "updatedAt" : "2018-06-02T00:07:45Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce730d96b7cea1e825e42ef791451e57cd7b9d47",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +297,301 @@\nfunc validateNonFlagArgument(arg, argName string) error {\n\tif len(arg) > 0 && arg[0] == '-' {\n\t\treturn fmt.Errorf(\"%q is an invalid value for %s\", arg, argName)\n\t}"
  },
  {
    "id" : "2e87a708-271c-4eaa-9920-85dc300e6852",
    "prId" : 64532,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64532#pullrequestreview-125346978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d587dc4-e41e-4e51-ad32-5e01e93c2bf3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this supported in all git versions we care about?",
        "createdAt" : "2018-06-01T19:56:09Z",
        "updatedAt" : "2018-06-01T19:56:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b74f9ed5-9e30-4f31-8584-5323eb7690bc",
        "parentId" : "1d587dc4-e41e-4e51-ad32-5e01e93c2bf3",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "AFAICT it's been supported since 1.0",
        "createdAt" : "2018-06-02T00:19:35Z",
        "updatedAt" : "2018-06-02T00:19:35Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce730d96b7cea1e825e42ef791451e57cd7b9d47",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +196,200 @@\t}\n\n\targs := []string{\"clone\", \"--\", b.source}\n\n\tif len(b.target) != 0 {"
  },
  {
    "id" : "d0621484-9953-4b10-8944-817258de24e4",
    "prId" : 15533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae341f3a-d8da-45e8-b069-3fca12f44dc9",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "More concise this way and also supports N git args in the error message:\n\n```\n    args := []string{\"clone\", b.source}\n    if b.target != \"\" {\n        args = append(args, b.target)\n    }\n    if output, err := b.execCommand(\"git\", args, dir); err != nil {\n        return fmt.Errorf(\"failed to exec 'git %s': %s: %v\", strings.Join(append(args[:1], args[1:len(args)]...), \" \"), output, err)\n    }\n```\n",
        "createdAt" : "2015-10-13T22:02:51Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "d07db424-fcef-4b1e-ab4e-94151d28452f",
        "parentId" : "ae341f3a-d8da-45e8-b069-3fca12f44dc9",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Will this part fail if you specify a target?  The current implementation assumes there will be exactly 1 directory (the repo name) in the volume.\n\n```\nif len(files) != 1 {\n        return fmt.Errorf(\"unexpected directory contents: %v\", files)\n    }\n```\n\nI couldn't comment on that line in the diff because you didn't edit it.\n",
        "createdAt" : "2015-10-13T22:06:25Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "62e8f441-2e42-4682-bd6b-3fccd6891d4c",
        "parentId" : "ae341f3a-d8da-45e8-b069-3fca12f44dc9",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "This will fail when clone directory is '.'\n\nActually, see my comments here: https://github.com/kubernetes/kubernetes/issues/15421#issuecomment-147963960\n\nI'd like to update the code if we reached a agreement.\n",
        "createdAt" : "2015-10-14T07:54:03Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "fd8efd6a-446b-4956-82f9-ad196309dc9d",
        "parentId" : "ae341f3a-d8da-45e8-b069-3fca12f44dc9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As per #15421\n\nHow urgent is this one small feature? I'm not deeply against adding it if\nit solves real problems, but I'd rather focus energy on the git-sync\nsidecar. Additionally, we need clarity on whether this is just \"checkout\nand rename\" or whether \".\" is expected to be supported. Doing a checkout to\na subdir has one significant advantage - it can be updated atomically. This\nmeans you could periodically sync to head of a branch, which seems like a\npowerful feature to me.\n\nIf we support \".\", that does not work.\n\nOn Wed, Oct 14, 2015 at 12:54 AM, Harry Zhang notifications@github.com\nwrote:\n\n> In pkg/volume/git_repo/git_repo.go\n> https://github.com/kubernetes/kubernetes/pull/15533#discussion_r41964131\n> :\n> \n> > @@ -138,8 +140,15 @@ func (b *gitRepoVolumeBuilder) SetUpAt(dir string) error {\n> >         return err\n> >     }\n> > -   if output, err := b.execCommand(\"git\", []string{\"clone\", b.source}, dir); err != nil {\n> > -       return fmt.Errorf(\"failed to exec 'git clone %s': %s: %v\", b.source, output, err)\n> > -   // If provided target directory\n> > -   if \"\" != b.target {\n> > -       if output, err := b.execCommand(\"git\", []string{\"clone\", b.source, b.target}, dir); err != nil {\n> > -           return fmt.Errorf(\"failed to exec 'git clone %s %s': %s: %v\", b.source, b.target, output, err)\n> > -       }\n> > -   } else {\n> > -       if output, err := b.execCommand(\"git\", []string{\"clone\", b.source}, dir); err != nil {\n> > -           return fmt.Errorf(\"failed to exec 'git clone %s': %s: %v\", b.source, output, err)\n> > -       }\n> >   }\n> \n> This will fail when clone directory is '.'\n> \n> Actually, see my comments here: #15421 (comment)\n> https://github.com/kubernetes/kubernetes/issues/15421#issuecomment-147963960\n> \n> I'd like to update the code if we reached a agreement.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15533/files#r41964131.\n",
        "createdAt" : "2015-10-16T19:05:22Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "70a9c0bf56c5efd20c7e3d623cd236f08cfd72f8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +155,159 @@\t\treturn fmt.Errorf(\"failed to exec 'git %s': %s: %v\",\n\t\t\tstrings.Join(args, \" \"), output, err)\n\t}\n\n\tfiles, err := ioutil.ReadDir(dir)"
  },
  {
    "id" : "b2a9feae-0bdd-40eb-97d5-d7eaec1a82cc",
    "prId" : 15533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fca5c5dc-2f0b-4583-8e18-e78271501e3f",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Better to use switch over if/else:\n\n```\nswitch {\ncase b.target == \"\":\ncase b.target != \"\" && len(files) == 1:\ncase b.target != && len(files) != 1\n}\n```\n",
        "createdAt" : "2015-10-17T15:16:20Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "70a9c0bf56c5efd20c7e3d623cd236f08cfd72f8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\t// if target is not '.', but generated many files, it's wrong\n\t\treturn fmt.Errorf(\"unexpected directory contents: %v\", files)\n\t}\n\n\tif output, err := b.execCommand(\"git\", []string{\"checkout\", b.revision}, subdir); err != nil {"
  },
  {
    "id" : "d6229fd2-4b45-47ad-b19f-dfe3f014fdd8",
    "prId" : 15533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2740740c-928f-45bc-8ac8-e45f7a274ab6",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "`len(b.revision) == 0` and `b.target != \"\"` are the same (in effect) but different implementations.  They should be consistent.  I've mostly seen (and used) empty string \"\" comparison instead of string length check.\n",
        "createdAt" : "2015-10-22T12:34:51Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "70a9c0bf56c5efd20c7e3d623cd236f08cfd72f8",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +162,166 @@\t}\n\n\tif len(b.revision) == 0 {\n\t\t// Done!\n\t\tvolumeutil.SetReady(b.getMetaDir())"
  },
  {
    "id" : "57e00426-9d00-43f8-b050-dbd289a4b92c",
    "prId" : 15533,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44c80777-c637-40dd-a3af-5b2770751c8d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Should just be `default:`?\n",
        "createdAt" : "2015-11-28T02:38:16Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5bea95c4-e030-4c0a-b123-58c2048a256e",
        "parentId" : "44c80777-c637-40dd-a3af-5b2770751c8d",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Yes, I'll refactor this one\n",
        "createdAt" : "2015-11-28T03:12:24Z",
        "updatedAt" : "2015-12-01T16:21:11Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "70a9c0bf56c5efd20c7e3d623cd236f08cfd72f8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +179,183 @@\tdefault:\n\t\t// if target is not '.', but generated many files, it's wrong\n\t\treturn fmt.Errorf(\"unexpected directory contents: %v\", files)\n\t}\n"
  }
]