[
  {
    "id" : "b5891f59-edf7-4a37-8c7c-d8ead17a385f",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-369962406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cbf9056-c0cc-473b-bc75-1d20aae66948",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "It is still not clear to me how this led to PD leaks in e2e.. ",
        "createdAt" : "2020-03-05T17:30:16Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "2e82f826-3632-4f5f-8ef0-aed5c6d88a48",
        "parentId" : "9cbf9056-c0cc-473b-bc75-1d20aae66948",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "What's not covered here is the internal implementation in response to `opZ(v0)` finishing. What happens is that `nestedPendingOperations` re-orders its op slice when removing a succeeded op, which puts op2 before op1 in the slice. \r\n\r\nThe bug was that op1 \"key\" can match op2, but that only happens if they get rearranged.\r\n\r\n@verult Maybe add that to this comment?",
        "createdAt" : "2020-03-05T19:02:15Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "52651907-7172-4ec1-b46e-3616705295db",
        "parentId" : "9cbf9056-c0cc-473b-bc75-1d20aae66948",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Added a description here: https://github.com/kubernetes/kubernetes/issues/88355#issuecomment-595480033\r\n\r\nLet me know if anything is unclear, happy to get on a call to go over it if you'd like!",
        "createdAt" : "2020-03-05T22:32:22Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 733,
    "diffHunk" : "@@ -1,1 +695,699 @@\t// op4(v1, n2) starts\n\t// op4(v1, n2) ends with success\n\n\tconst (\n\t\tmainVolumeName = \"main-volume\""
  },
  {
    "id" : "e9a17da2-70b1-4db9-b8d4-c44d57f8b20f",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-368418329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9caa8903-b32a-4e60-a0be-23627e728442",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "None what?",
        "createdAt" : "2020-03-05T18:53:44Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 612,
    "diffHunk" : "@@ -1,1 +574,578 @@// Covered cases:\n// FIRST OP    | SECOND OP   | RESULT\n// None        | None        | Positive\n// None        | Volume      | Positive\n// None        | Volume Pod  | Positive"
  },
  {
    "id" : "27e1df60-8863-4378-91e4-50af9872f3b2",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-370031772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b98f935a-1f58-4e49-b57a-3b968d1bba84",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "FYI `interface{}` uses more memory than `struct{}`. It surely doesn't matter here, but it's something to think about when using channels for synchronization.",
        "createdAt" : "2020-03-05T21:15:34Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "257b88e2-6a6d-4109-af08-09ab3c1e1d09",
        "parentId" : "b98f935a-1f58-4e49-b57a-3b968d1bba84",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "I left it as `interface{}` this time around - couldn't figure out the appropriate value to pass into a `struct{}` channel quickly enough. Next time!",
        "createdAt" : "2020-03-06T03:22:50Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 749,
    "diffHunk" : "@@ -1,1 +711,715 @@\n\tgrm := NewNestedPendingOperations(true /* exponentialBackOffOnError */)\n\topZContinueCh := make(chan interface{}, 0 /* bufferSize */)\n\top1ContinueCh := make(chan interface{}, 0 /* bufferSize */)\n\top2ContinueCh := make(chan interface{}, 0 /* bufferSize */)"
  },
  {
    "id" : "f05e8fbf-684b-4a49-ab6d-3bffdfe01025",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-368418329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d64f8025-3e62-4aca-9b2f-d20f255fcdc9",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Out of scope for this PR, but it seems inappropriate for us to recover from panics in this utility.",
        "createdAt" : "2020-03-05T21:17:13Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 874,
    "diffHunk" : "@@ -1,1 +839,843 @@}\n\nfunc panicFunc() (error, error) {\n\tpanic(\"testing panic\")\n}"
  },
  {
    "id" : "5a0852b5-0cb9-49bc-9f9d-8f2c7422b718",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-370031772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4914f0a-650c-47b9-84d8-24092ebea017",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : ":cry: \r\n\r\nLet's revisit this when we refactor this package.",
        "createdAt" : "2020-03-05T21:20:24Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "c69a5a13-2fb2-482b-be9a-333b60858d27",
        "parentId" : "d4914f0a-650c-47b9-84d8-24092ebea017",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Yup! I thought about doing it with channels but it adds a lot of complexity to the reader trying to understand what the code is doing. Maybe there's a simpler way than what was on my mind though.",
        "createdAt" : "2020-03-06T03:24:22Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 774,
    "diffHunk" : "@@ -1,1 +736,740 @@\n\topZContinueCh <- true\n\ttime.Sleep(delay)\n\top2ContinueCh <- true\n\ttime.Sleep(delay)"
  },
  {
    "id" : "82c4c180-c28e-4acd-930e-e70b28c7f690",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-370116923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c2447f0-51aa-4832-a325-a37fdb90f908",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Does this test fail fast when the bug is present, or does it hang?",
        "createdAt" : "2020-03-05T21:24:29Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "6ef2b507-8e79-402b-8ecd-5dcf9b5432ee",
        "parentId" : "9c2447f0-51aa-4832-a325-a37fdb90f908",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Fail with an alreadyExists error :(",
        "createdAt" : "2020-03-05T22:54:37Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "0933719d-b622-4d70-b041-452bf4e9a03c",
        "parentId" : "9c2447f0-51aa-4832-a325-a37fdb90f908",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "That seems like the right behavior to me. Just wanted to make sure that the failure mode did not hang tests.",
        "createdAt" : "2020-03-06T07:05:11Z",
        "updatedAt" : "2020-03-06T07:06:39Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 780,
    "diffHunk" : "@@ -1,1 +742,746 @@\ttime.Sleep(delay)\n\n\tfor {\n\t\terr3 := grm.Run(mainVolumeName, \"\" /* podName */, node2, volumetypes.GeneratedOperations{OperationFunc: operation3})\n\t\tif err3 == nil {"
  },
  {
    "id" : "3c023cbb-e966-4ed0-bb6f-24c4482b9948",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-370116923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7483209d-c0f3-4d90-97d9-67384f181fec",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Do you leak a goroutine by not closing or writing to this channel? Even for test, I think it matters a little.",
        "createdAt" : "2020-03-05T21:27:30Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "21607d47-22d3-407b-87c0-f93755fee63a",
        "parentId" : "7483209d-c0f3-4d90-97d9-67384f181fec",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "It's a lot of spots to change due to the fact that `Fatalf()` changes control flow. I made a note to include it for the refactor, but please bring it up if I forget",
        "createdAt" : "2020-03-06T04:00:56Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "6177639c-0586-48af-924b-d567d150e5fc",
        "parentId" : "7483209d-c0f3-4d90-97d9-67384f181fec",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "`Fatalf()` does not prevent a defer, but let's leave this as is since a lot will change in the refactor.",
        "createdAt" : "2020-03-06T07:06:05Z",
        "updatedAt" : "2020-03-06T07:06:40Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 811,
    "diffHunk" : "@@ -1,1 +773,777 @@\t// Arrange\n\tgrm := NewNestedPendingOperations(false /* exponentialBackOffOnError */)\n\toperation1DoneCh := make(chan interface{}, 0 /* bufferSize */)\n\toperation1 := generateWaitFunc(operation1DoneCh)\n\terr1 := grm.Run(volumeName1, podName1, nodeName1 /* nodeName */, volumetypes.GeneratedOperations{OperationFunc: operation1})"
  },
  {
    "id" : "1129319c-bcf7-4fe3-90f1-1f074b858fa0",
    "prId" : 88678,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88678#pullrequestreview-370088573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21e34861-1a7d-444f-8986-5ba833f14632",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "If the test actually depends on this time value matching one in the code under test, then it smells funny to me. However, I think it would be better to address this during the refactor.",
        "createdAt" : "2020-03-06T05:40:02Z",
        "updatedAt" : "2020-03-06T06:22:35Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3d66b98bb0d251208ef990895bc944343d1142",
    "line" : 745,
    "diffHunk" : "@@ -1,1 +707,711 @@\n\t\t// Replicates the default AttachDetachController reconcile period\n\t\treconcilerPeriod = 100 * time.Millisecond\n\t)\n"
  },
  {
    "id" : "ed297ef9-4790-47ea-91d0-e9a53c756929",
    "prId" : 87258,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87258#pullrequestreview-348899918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e88f617e-f6c6-45e5-af5c-28d15129af03",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Consider adding tests where the 2nd call is not expected to fail (verify that palatalization works).",
        "createdAt" : "2020-01-24T03:36:30Z",
        "updatedAt" : "2020-01-27T23:02:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "bd123928-fa1e-49bb-aad4-f57f5cf65004",
        "parentId" : "e88f617e-f6c6-45e5-af5c-28d15129af03",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "that's what this test function does: if the 2nd operation returns an error when being created (i.e. can't be executed in parallel for whatever reason), it fails.\r\n\r\nAdded comments to test functions to clarify",
        "createdAt" : "2020-01-27T19:00:33Z",
        "updatedAt" : "2020-01-27T23:02:47Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6a03fa5be5a3a8eaf1d3953918390230d8115ef",
    "line" : 749,
    "diffHunk" : "@@ -1,1 +737,741 @@\t// Assert\n\tif err2 != nil {\n\t\tt.Fatalf(\"NestedPendingOperations failed. Expected: <no error> Actual: <%v>\", err2)\n\t}\n}"
  },
  {
    "id" : "32c24e0d-06da-478a-a242-2fc09f55460f",
    "prId" : 75213,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75213#pullrequestreview-214104727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5974bee3-31ca-4967-a6da-cc85b2c45df5",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "the second operation returns successfully, so it won't really test the scenarios you are trying to do?\r\n\r\nMake put another failed operation 3, and then test operation 4 with different operation name? ",
        "createdAt" : "2019-03-12T00:50:08Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "123e104b-81fc-4cf2-85ff-4e78962b4f0b",
        "parentId" : "5974bee3-31ca-4967-a6da-cc85b2c45df5",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "It does tests the scenario I am trying to verify. Second operation does not even run because it triggers exponential backoff and `Run` function throws error and returns immediately. ",
        "createdAt" : "2019-03-12T01:27:48Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "ab27d196-aea9-48b3-9965-94f8cf8d0c76",
        "parentId" : "5974bee3-31ca-4967-a6da-cc85b2c45df5",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "guess, what I am trying to say is - it does not matter what we do in second operation. It will *not* run and exponential backoff error is thrown and hence when third operation comes in (which is still well within 500ms of exponential backoff period) then if it did had same `operationName` it will result in exponential backoff too. ",
        "createdAt" : "2019-03-12T01:29:37Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "daac482b-654f-4862-b1d2-152e4d21fc72",
        "parentId" : "5974bee3-31ca-4967-a6da-cc85b2c45df5",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "maybe setting the second operation to return error so that we can make sure exponential backoff is not finished yet when issuing the third operation?",
        "createdAt" : "2019-03-13T17:22:35Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "808fe472-5270-4b5c-9c90-fe8779d0becd",
        "parentId" : "5974bee3-31ca-4967-a6da-cc85b2c45df5",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "okay done. ",
        "createdAt" : "2019-03-13T17:30:00Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "97ec61561af6bd37f489d3ea71ada66d7e13aae2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +298,302 @@\t}\n\n\toperation3 := generateNoopFunc()\n\top3Name := \"unmount_volume\"\n\t// Act"
  },
  {
    "id" : "cb01fa13-5157-4cc5-ac13-49a131afd4e0",
    "prId" : 75213,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75213#pullrequestreview-213554911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bd1fb04-ebb7-4a66-9c5a-1d887ba430af",
        "parentId" : null,
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "Nit: it's possible to join these two `if`'s (e.g., keep this one and use previous message).",
        "createdAt" : "2019-03-12T12:46:08Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      },
      {
        "id" : "abf141b1-9226-44e0-bb53-0ff6030be912",
        "parentId" : "9bd1fb04-ebb7-4a66-9c5a-1d887ba430af",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I am leaving this as it. I would like to know if error was nil vs if error was really exponential backoff.",
        "createdAt" : "2019-03-12T17:53:52Z",
        "updatedAt" : "2019-03-13T18:21:07Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "97ec61561af6bd37f489d3ea71ada66d7e13aae2",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +296,300 @@\tif err2 != nil {\n\t\tt.Fatalf(\"Expected NewGoRoutine to fail with exponential backoff for operationKey : %s and operationName : %s\", volumeName, op1Name)\n\t}\n\n\toperation3 := generateNoopFunc()"
  }
]