[
  {
    "id" : "c1fe720a-fb15-4cec-a7b4-d367e089d32b",
    "prId" : 99326,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99326#pullrequestreview-601104722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7deb5ce3-ac0d-4a70-b583-d9a4a80837ad",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Is this just re factoring change?",
        "createdAt" : "2021-03-01T19:47:33Z",
        "updatedAt" : "2021-03-09T07:56:27Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f69cf74d836ef08c3a340b7d0b48c4a463a3258",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +64,68 @@\tkubeClient clientset.Interface) error {\n\tpvClone := pv.DeepCopy()\n\tpvClone.Spec.Capacity[v1.ResourceStorage] = newSize\n\n\treturn PatchPV(pv, pvClone, kubeClient)"
  },
  {
    "id" : "7d20298d-67a1-4960-bf2a-8940d8a2e6d4",
    "prId" : 99326,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99326#pullrequestreview-635982631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d257f07-5ea7-4520-8bb8-b90cbc1716e4",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you add a comment when the annotation is supposed to be removed?",
        "createdAt" : "2021-04-14T04:56:10Z",
        "updatedAt" : "2021-04-14T05:00:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "129a0241-f0c4-4dd7-8469-5c8ba1f2484f",
        "parentId" : "7d257f07-5ea7-4520-8bb8-b90cbc1716e4",
        "authorId" : "c4121125-5aca-4c2b-a2a2-5aabaa95ec29",
        "body" : "Will do :)",
        "createdAt" : "2021-04-14T18:58:21Z",
        "updatedAt" : "2021-04-14T18:58:21Z",
        "lastEditedBy" : "c4121125-5aca-4c2b-a2a2-5aabaa95ec29",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f69cf74d836ef08c3a340b7d0b48c4a463a3258",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +44,48 @@\t// Its value is status capacity of the PVC prior to the volume expansion\n\t// Its value will be set by the external-resizer when it deems that filesystem resize is required after resizing volume.\n\t// Its value will be used by pv_controller to determine pvc's status capacity when binding pvc and pv.\n\tAnnPreResizeCapacity = \"volume.alpha.kubernetes.io/pre-resize-capacity\"\n)"
  },
  {
    "id" : "1e59d308-2356-4988-bf51-301dacc0abd2",
    "prId" : 77994,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77994#pullrequestreview-242874404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bde69177-f62f-41ea-b63f-dd1bef8b8f39",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Should there be a check (in PatchPVCStatus?) that old and new are really different, so we don't do unnecessary API server request?",
        "createdAt" : "2019-05-27T12:58:57Z",
        "updatedAt" : "2019-05-29T15:02:17Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "a9738fab-f655-43b2-8712-875e2aabd928",
        "parentId" : "bde69177-f62f-41ea-b63f-dd1bef8b8f39",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "may be - but I am not sure. I think such a check belongs may be to generic http client. In this case though - the \"diff\" byte array will be empty and hence http client can reject such a patch. BTW - I tried to look for a precedence of performing old vs new object (diff) before submitting patch request and I couldn't find one.\r\n\r\n",
        "createdAt" : "2019-05-28T19:25:44Z",
        "updatedAt" : "2019-05-29T15:02:17Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "7563b4d01b5e5dde148f746ccb1ff47c5b5b9272",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +99,103 @@\tnewPVC = MergeResizeConditionOnPVC(newPVC, conditions)\n\tnewPVC = setResizer(newPVC, resizerName)\n\treturn PatchPVCStatus(pvc /*oldPVC*/, newPVC, kubeClient)\n}\n"
  },
  {
    "id" : "1b101437-b294-4f87-bad1-2c92d0218fb8",
    "prId" : 77883,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77883#pullrequestreview-238701560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66bbda4d-4dd0-4ebd-86d7-48c36e743b6c",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "is resource version in this patch?",
        "createdAt" : "2019-05-16T23:10:24Z",
        "updatedAt" : "2019-05-17T01:35:09Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9a37f0ee-ee72-4b38-8f6d-3660047ea078",
        "parentId" : "66bbda4d-4dd0-4ebd-86d7-48c36e743b6c",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "The PV update is not doing resource version check. I think it is fine, because resource version check is important when you don't want to unconditionally patch a field but is less important when your patch does not depend on more recent version of object. \r\n\r\nIn this case - getting latest version of PV object isn't going to make a difference. Also since PV is non-namespaced object, users should not be editing them.\r\n\r\n",
        "createdAt" : "2019-05-17T01:08:13Z",
        "updatedAt" : "2019-05-17T01:35:09Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "4886e8782c82e1484b04b9d14bb589548ebca83e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +70,74 @@\t}\n\n\tpatchBytes, err := strategicpatch.CreateTwoWayMergePatch(oldData, newData, pvClone)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error Creating two way merge patch for PV %q with error : %v\", pvClone.Name, err)"
  },
  {
    "id" : "c260548c-74e6-4426-8251-1e0747da3edf",
    "prId" : 58415,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58415#pullrequestreview-91987776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32562d21-6913-496a-accd-ebc692d8099a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this reorders conditions, which we don't want. see https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/kubelet_node_status.go#L770-L788 for an example of in-place updating of an existing condition, then appending to the end if no existing condition is found\r\n\r\n1. if the condition already exists and already has the same status, there should be no change\r\n2. if the condition already exists with a different status, the status and timestamp should update\r\n3. if the condition does not exist, it should get appended to the end\r\n\r\nonly in case 2 and 3 should we attempt an update of the object",
        "createdAt" : "2018-01-26T21:32:47Z",
        "updatedAt" : "2018-01-29T20:08:05Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "916cd1e5-6f28-4ad1-9351-0fa6fc4831fe",
        "parentId" : "32562d21-6913-496a-accd-ebc692d8099a",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I fixed this. I did not quite use same approach as code you linked but the end result should be same. \r\n",
        "createdAt" : "2018-01-26T22:26:15Z",
        "updatedAt" : "2018-01-29T20:08:05Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa8cbc5e417005b85b9ed8061285e7ef8876618",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\t\t// If Condition is of not resize type, we keep it.\n\t\tif _, ok := knownResizeConditions[condition.Type]; !ok {\n\t\t\tnewConditions = append(newConditions, condition)\n\t\t\tcontinue\n\t\t}"
  }
]