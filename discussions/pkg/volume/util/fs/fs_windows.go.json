[
  {
    "id" : "3e43171f-3b35-4422-8432-787f765ce8a3",
    "prId" : 81437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81437#pullrequestreview-279872848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eef0b8f-7039-4bbc-8d0a-dd80d36c1786",
        "parentId" : null,
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "shouldn't this go up before 88 for the rare case Open() could succeed but LStat fails?",
        "createdAt" : "2019-08-15T23:48:45Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      },
      {
        "id" : "f416f1c0-565b-44eb-bb3e-88e990908ca6",
        "parentId" : "0eef0b8f-7039-4bbc-8d0a-dd80d36c1786",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "fixed",
        "createdAt" : "2019-08-26T22:35:03Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7e696c2f5e71f0cc717342d099bf4e223f94fd",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\treturn size, err\n\t}\n\tdefer dir.Close()\n\n\tfiles, err := dir.Readdir(-1)"
  },
  {
    "id" : "29a1c3ce-ad37-471b-b609-68fe382ed939",
    "prId" : 81437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81437#pullrequestreview-280421260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe7e564e-c4d2-47ff-b0aa-8da48765c347",
        "parentId" : null,
        "authorId" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "body" : "missing an err check here",
        "createdAt" : "2019-08-19T14:09:42Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "tags" : [
        ]
      },
      {
        "id" : "bb342f7c-7afa-4a71-88d6-cd87f72883d2",
        "parentId" : "fe7e564e-c4d2-47ff-b0aa-8da48765c347",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "fixed",
        "createdAt" : "2019-08-26T22:32:45Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "b3224ca0-ee24-4859-8e15-3c31ab3eca2d",
        "parentId" : "fe7e564e-c4d2-47ff-b0aa-8da48765c347",
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "I don't see a change here, still has unchecked err",
        "createdAt" : "2019-08-26T23:35:31Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      },
      {
        "id" : "d304dcb2-ab81-4af4-930e-889cc62d8e97",
        "parentId" : "fe7e564e-c4d2-47ff-b0aa-8da48765c347",
        "authorId" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "body" : "LGTM now",
        "createdAt" : "2019-08-27T19:27:42Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7e696c2f5e71f0cc717342d099bf4e223f94fd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +60,64 @@// DiskUsage gets disk usage of specified path.\nfunc DiskUsage(path string) (*resource.Quantity, error) {\n\tinfo, err := os.Lstat(path)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "1cf2cdf7-74e3-4dde-973f-03fc44ea2671",
    "prId" : 81437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81437#pullrequestreview-281756588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd6f69fa-792d-437a-9fd6-3605210f0ec4",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Where is info used?",
        "createdAt" : "2019-08-28T21:21:04Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "3b5c406d-af27-466f-b610-5e97e3496a2f",
        "parentId" : "fd6f69fa-792d-437a-9fd6-3605210f0ec4",
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "see https://github.com/kubernetes/kubernetes/issues/81088\r\n\r\nEviction manager needs to calculate emptydir usage, which is broken on Windows. It's using the full disk usage, not the pod's usage when comparing against the eviction threshold.",
        "createdAt" : "2019-08-29T18:27:54Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      },
      {
        "id" : "1e794b45-3b63-46ce-b552-3f886b28c2ae",
        "parentId" : "fd6f69fa-792d-437a-9fd6-3605210f0ec4",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I'm talking about the `info os.FileInfo` parameter here. It doesn't look like it is used anywhere.\r\nCC @jingxu97 ",
        "createdAt" : "2019-08-29T20:16:22Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "5d815151-78ba-4a41-99c9-a6cb5c8278dd",
        "parentId" : "fd6f69fa-792d-437a-9fd6-3605210f0ec4",
        "authorId" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "body" : "Yeah, I think either the `Lstat` in this method or the one whose result is being passed in here could be removed. Right now the same directory is being `Lstat`-ed twice.",
        "createdAt" : "2019-08-29T21:09:52Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "tags" : [
        ]
      },
      {
        "id" : "a7e3774c-e5b9-4114-8eba-9b2fc589ca8a",
        "parentId" : "fd6f69fa-792d-437a-9fd6-3605210f0ec4",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "I fixed the issue. Thanks!",
        "createdAt" : "2019-08-29T22:37:08Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7e696c2f5e71f0cc717342d099bf4e223f94fd",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +83,87 @@}\n\nfunc diskUsage(currPath string, info os.FileInfo) (int64, error) {\n\tvar size int64\n"
  },
  {
    "id" : "253f0207-69a2-4298-9b00-5d700bb0d417",
    "prId" : 81437,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81437#pullrequestreview-300389938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "From \"Nicolas T.\" on slack:\r\n```\r\nCan't diskUsage being recursive (not in tail position) cause a stackoverflow for deeply nested directories? Or is there some path depth limit preventing anything close to exceeding the stack size?\r\n```",
        "createdAt" : "2019-08-28T21:23:00Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "323eec3a-1c80-4239-8669-a5cc489b5e81",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "453293ec-3a4f-48bf-a328-08b0dff6c1ef",
        "body" : "/subscribe",
        "createdAt" : "2019-08-28T21:46:39Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "453293ec-3a4f-48bf-a328-08b0dff6c1ef",
        "tags" : [
        ]
      },
      {
        "id" : "35de51e1-26c5-4fc7-9448-1a8a650cf304",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "body" : "Due to the way Go's stack [is implemented](https://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite). I think it's unlikely we'll exhaust all the memory in the system traversing these directories. I might be wrong about this though.",
        "createdAt" : "2019-08-29T20:06:34Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "cb143ff8-4479-4c31-a009-b383d0bdd58d",
        "tags" : [
        ]
      },
      {
        "id" : "1f8192d8-a6fe-460e-aeac-0c0274f119d9",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "SGTM",
        "createdAt" : "2019-08-29T20:17:29Z",
        "updatedAt" : "2019-08-29T22:37:39Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "8bad4bd8-c6df-4779-81c2-8dabf431dda8",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "How about process open FD limits?",
        "createdAt" : "2019-08-29T23:47:50Z",
        "updatedAt" : "2019-08-29T23:47:50Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "277b9662-9816-41e6-beac-90a0d28bea57",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "body" : "There's no specific limit on file handles per process. There's a per-process handle limit that's >16 million. https://blogs.technet.microsoft.com/markrussinovich/2009/09/29/pushing-the-limits-of-windows-handles/",
        "createdAt" : "2019-10-10T20:27:01Z",
        "updatedAt" : "2019-10-10T20:27:01Z",
        "lastEditedBy" : "a1a1c8af-e8d1-473f-b2b9-b14426320bcb",
        "tags" : [
        ]
      },
      {
        "id" : "6af875ca-fd26-4bab-b62d-802b95e6b6e2",
        "parentId" : "81558bac-1343-4cd5-b8b2-9387191c0b70",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "thanks @PatrickLang for the information",
        "createdAt" : "2019-10-10T22:38:54Z",
        "updatedAt" : "2019-10-10T22:38:54Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b7e696c2f5e71f0cc717342d099bf4e223f94fd",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +109,113 @@\tfor _, file := range files {\n\t\tif file.IsDir() {\n\t\t\ts, err := diskUsage(fmt.Sprintf(\"%s/%s\", currPath, file.Name()), file)\n\t\t\tif err != nil {\n\t\t\t\treturn size, err"
  }
]