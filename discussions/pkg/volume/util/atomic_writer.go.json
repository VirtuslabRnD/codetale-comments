[
  {
    "id" : "96f00507-73b3-4085-ba47-24609bb99505",
    "prId" : 89193,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89193#pullrequestreview-403120542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Does kubelet ever run as non-root?",
        "createdAt" : "2020-03-27T23:52:38Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "1faf107a-769e-4963-9bc5-36bf38423689",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I'm going with probably somewhere, someone is doing this. Nevermind.",
        "createdAt" : "2020-03-28T00:04:38Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d7020f49-b835-45e8-b5f8-1d5fed98bd80",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "atomic writer should have the assumption that kubelet runs as root to chmod, chmod etc at least for some period of time.",
        "createdAt" : "2020-03-28T00:19:07Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "3bec0371-eaa0-4b2f-80d2-d9183b48e188",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Actually, right now if kubelet runs as non-root, files written by atomic writer will be the some random user. We should probably always Chown() files. I suggest changing FsUser to an int64 (defaults to 0 which is root) and always chowning. Might want to do the same for group as well.",
        "createdAt" : "2020-04-09T18:45:21Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d64ae0c5-a639-438d-bf1f-3a061c578fb3",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Kubelet could possible run as non-root with CAP_FOWNER|CAP_CHOWN.",
        "createdAt" : "2020-04-09T18:46:49Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "408325b3-764c-4b88-9a11-fba10d27b136",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "we might consider doing this in another PR on all volume types, because the change to atomic writer only applies to ephemeral volumes and will cause inconsistency if a container mounts other volume types together with projected token volume.",
        "createdAt" : "2020-04-10T17:32:36Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "be82fa4b-2c67-4b1c-9305-836d0c27f043",
        "parentId" : "34dbe0ae-6eeb-4b53-8375-c4b9a8f683af",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Cleanup for a later day. I'm going to resolve.",
        "createdAt" : "2020-04-30T00:02:08Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3db7275b549559696c42c0b5f51c9a2397e9571d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +66,70 @@\tData   []byte\n\tMode   int32\n\tFsUser *int64\n}\n"
  },
  {
    "id" : "2886fda4-608e-4f2e-affc-abeabf3edab4",
    "prId" : 89193,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89193#pullrequestreview-391562551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534e8f64-a342-48d7-b447-38fe02f2b545",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Log an error like we do above.",
        "createdAt" : "2020-04-09T18:38:49Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "29941913-9836-44c4-aece-cdc14eda589b",
        "parentId" : "534e8f64-a342-48d7-b447-38fe02f2b545",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "done",
        "createdAt" : "2020-04-10T17:26:57Z",
        "updatedAt" : "2020-05-05T01:25:34Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      }
    ],
    "commit" : "3db7275b549559696c42c0b5f51c9a2397e9571d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +403,407 @@\t\tif err := os.Chown(fullPath, int(*fileProjection.FsUser), -1); err != nil {\n\t\t\tklog.Errorf(\"%s: unable to change file %s with owner %v: %v\", w.logContext, fullPath, int(*fileProjection.FsUser), err)\n\t\t\treturn err\n\t\t}\n\t}"
  },
  {
    "id" : "91481fc2-9e4a-4ab3-86a9-5e6d5c9b8a0f",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89554278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0de74e2c-779d-4eb6-82f8-06d16e6dd668",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "nice cleanup removing from the struct üëç\r\n\r\nCan we just use `dataDirName` instead of `oldTsDir` and avoid adding a param to the func?",
        "createdAt" : "2018-01-17T17:33:20Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "dac2ed30-0a1b-42b3-ae25-cf1daef02cec",
        "parentId" : "0de74e2c-779d-4eb6-82f8-06d16e6dd668",
        "authorId" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "body" : "On this one, yes, we could keep the struct, then do something like:\r\n```\r\n shouldWrite, err := shouldWriteFile(path.Join(w.targetDir, dataDirName, userVisiblePath), fileProjection.Data)\r\n```\r\nand then `shouldWriteFile()` would follow the `..data` symlink.",
        "createdAt" : "2018-01-17T19:02:18Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +278,282 @@\n// shouldWritePayload returns whether the payload should be written to disk.\nfunc shouldWritePayload(payload map[string]FileProjection, oldTsDir string) (bool, error) {\n\tfor userVisiblePath, fileProjection := range payload {\n\t\tshouldWrite, err := shouldWriteFile(path.Join(oldTsDir, userVisiblePath), fileProjection.Data)"
  },
  {
    "id" : "4fe966a8-2ff4-4baf-be15-bef90f242d5a",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89519649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41fbab2d-3ffc-4c8e-8976-534305b2246c",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "nice cleanup üëç ",
        "createdAt" : "2018-01-17T17:35:34Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +352,356 @@// newTimestampDir creates a new timestamp directory\nfunc (w *AtomicWriter) newTimestampDir() (string, error) {\n\ttsDir, err := ioutil.TempDir(w.targetDir, time.Now().UTC().Format(\"..2006_01_02_15_04_05.\"))\n\tif err != nil {\n\t\tglog.Errorf(\"%s: unable to create new temp directory: %v\", w.logContext, err)"
  },
  {
    "id" : "5376ca3a-b2bc-43e4-8b09-43bc76f8023a",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89542379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b75fb092-571c-457e-ac5a-4a30a3be5667",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "Makes sense that we don't need the path ordering anymore. Just calling it out to make sure.",
        "createdAt" : "2018-01-17T17:59:16Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "c6e64775-326b-42c0-b6bf-712c6d268e58",
        "parentId" : "b75fb092-571c-457e-ac5a-4a30a3be5667",
        "authorId" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "body" : "Right, the ordered removal is no longer necessary. Thanks for making sure.",
        "createdAt" : "2018-01-17T18:24:52Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +440,444 @@\tps := string(os.PathSeparator)\n\tvar lasterr error\n\tfor p := range paths {\n\t\t// only remove symlinks from the volume root directory (i.e. items that don't contain '/')\n\t\tif strings.Contains(p, ps) {"
  },
  {
    "id" : "eef9a299-a6e6-49d1-a7a8-a7aa0e3fa3d4",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89541965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80d3bcb9-adea-45e7-b4c8-f4569eb86e9a",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "Removal failures are not immediately fatal now.  We could lose errors.  Just pointing it out.",
        "createdAt" : "2018-01-17T18:01:15Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "dded576a-2b89-4bbd-ad1c-46e379d990f0",
        "parentId" : "80d3bcb9-adea-45e7-b4c8-f4569eb86e9a",
        "authorId" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "body" : "I did this on purpose, but I don't know that it's better. My thinking was \"If we have a problem removing 1 file, isn't it better to clean up as much of the rest of it as possible?\" but I'm not sure what the answer is. The other problem with the new approach is that any errors but the last one will not be seen by the caller (but will be in the error log). I'm happy with either behavior (old/new).",
        "createdAt" : "2018-01-17T18:23:33Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +447,451 @@\t\tif err := os.Remove(path.Join(w.targetDir, p)); err != nil {\n\t\t\tglog.Errorf(\"%s: error pruning old user-visible path %s: %v\", w.logContext, p, err)\n\t\t\tlasterr = err\n\t\t}\n\t}"
  },
  {
    "id" : "7b7c63a0-0eea-4610-b7fa-00e185d6c545",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89519649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe16235-2866-47e8-b0bf-27ab6e2c0400",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "better than `_, tsDirName := filepath.Split(tsDir)` :+1:",
        "createdAt" : "2018-01-17T18:06:45Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\treturn err\n\t}\n\ttsDirName := filepath.Base(tsDir)\n\n\t// (6)"
  },
  {
    "id" : "c21a0bfa-6fba-456e-b559-2ff775c287c3",
    "prId" : 57422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57422#pullrequestreview-89553062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "512be93e-81f3-409b-96dd-ec3e2e55c346",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "Can we just use `dataDirName` instead of `oldTsDir` and avoid adding a param to the func?",
        "createdAt" : "2018-01-17T18:09:45Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "c0a3d6d8-f2f1-481a-bc6a-26406c5b0ec6",
        "parentId" : "512be93e-81f3-409b-96dd-ec3e2e55c346",
        "authorId" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "body" : "I don't think so because we need an absolute path for the `root` passed to `filepath.Walk()`. Also, because `filepath.Walk()` doesn't follow symlinks, we'd have to construct an absolute path out of `w.targetDir` and `dataDirName`, and then we'd need to follow that symlink to get the path. My thought is that it's better to follow the symlink once (to create `oldTsDir`) and pass that to anything that needs it.",
        "createdAt" : "2018-01-17T18:58:24Z",
        "updatedAt" : "2018-01-17T19:09:27Z",
        "lastEditedBy" : "cebc811c-e565-44d5-bbb6-3b767a712327",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e09237850925d71d887996ac6b6fcb590ff026",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +311,315 @@// determines which paths should be removed (if any) after the payload is\n// written to the target directory.\nfunc (w *AtomicWriter) pathsToRemove(payload map[string]FileProjection, oldTsDir string) (sets.String, error) {\n\tpaths := sets.NewString()\n\tvisitor := func(path string, info os.FileInfo, err error) error {"
  },
  {
    "id" : "8205e741-6ca6-4db3-87dc-3c9f30dd2674",
    "prId" : 50724,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50724#pullrequestreview-56534459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e68bb7bc-b6e9-481e-b9e1-5f267cb32368",
        "parentId" : null,
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "how about use `no more than` instead of `less than or equal to` ?",
        "createdAt" : "2017-08-16T03:56:27Z",
        "updatedAt" : "2017-08-27T00:39:40Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "73f4538b-8a45-45fa-8639-5e3dba5bd4c7",
        "parentId" : "e68bb7bc-b6e9-481e-b9e1-5f267cb32368",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "or `no greater than` ?",
        "createdAt" : "2017-08-16T05:03:50Z",
        "updatedAt" : "2017-08-27T00:39:40Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      },
      {
        "id" : "f77dac8a-b840-47b4-9d29-a615b880a258",
        "parentId" : "e68bb7bc-b6e9-481e-b9e1-5f267cb32368",
        "authorId" : "48ccacbe-0dfa-40f2-b105-1fe77e8ddf21",
        "body" : "Thanks for your review. \r\nWhile I think both are OK. In addition, I found that in the original source code, there are many places where we use phrase `must be less than or equal to`. So I keep the same without changing to the part you mentioned. And please tell me if I missed something. ",
        "createdAt" : "2017-08-16T05:48:25Z",
        "updatedAt" : "2017-08-27T00:39:40Z",
        "lastEditedBy" : "48ccacbe-0dfa-40f2-b105-1fe77e8ddf21",
        "tags" : [
        ]
      },
      {
        "id" : "950db70f-46c4-4077-95b1-580ac0b088e8",
        "parentId" : "e68bb7bc-b6e9-481e-b9e1-5f267cb32368",
        "authorId" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "body" : "Agreed :)",
        "createdAt" : "2017-08-16T05:54:26Z",
        "updatedAt" : "2017-08-27T00:39:40Z",
        "lastEditedBy" : "a09f2d48-fec0-4c0d-bd81-6de7378a6ebf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f63d828745b5db1980dbe2b508d44c2cebd7c4cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +251,255 @@\n\tif len(targetPath) > maxPathLength {\n\t\treturn fmt.Errorf(\"invalid path: must be less than or equal to %d characters\", maxPathLength)\n\t}\n"
  },
  {
    "id" : "3406ae69-afaa-4f43-bec8-a714817a64a5",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdf00f3c-5a2d-429c-85a8-4930b2f648e6",
        "parentId" : null,
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "So, most of the other errors here seem to have an associated glog.Errorf message giving more detail as to the context.  Perhaps this should print out \"Unable to created new payload data directory\" or something of the sort?\n",
        "createdAt" : "2016-02-01T22:32:15Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "8fca87cb-e993-48d4-bb0b-1e8a23d2e0ec",
        "parentId" : "cdf00f3c-5a2d-429c-85a8-4930b2f648e6",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I can add that.\n",
        "createdAt" : "2016-02-02T14:34:02Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +145,149 @@\tif err != nil {\n\t\tglog.V(5).Infof(\"%s: error creating new ts data directory: %v\", w.logContext, err)\n\t\treturn err\n\t}\n"
  },
  {
    "id" : "a80da0d5-f26e-488a-9bd0-04726541fe15",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca6510c5-f099-436f-b802-2c10be8e6dff",
        "parentId" : null,
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "Sorry Paul but really I'm not a fan of `func ts()`. It's used in on onlye one place (where you can inline the usual `time.Now().Format...` and the name it's not that great :). nit: but I would remove it \n",
        "createdAt" : "2016-02-03T10:50:34Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "e91adf33-fa58-4472-897b-2f26eb2b2ea1",
        "parentId" : "ca6510c5-f099-436f-b802-2c10be8e6dff",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Accepted\n",
        "createdAt" : "2016-02-03T17:39:35Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "a8305cac-90b9-4066-8ccc-64eb65978719",
        "parentId" : "ca6510c5-f099-436f-b802-2c10be8e6dff",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK. nowString() ?\n",
        "createdAt" : "2016-02-04T00:29:16Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +36,40 @@\tmaxPathLength     = 4096\n)\n\n// AtomicWriter handles atomically projecting content for a set of files into\n// a target directory.  AtomicWriter maintains a sentinel file named"
  },
  {
    "id" : "e75ea3a2-53be-45c7-bf6c-91b5fe0ee2b2",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7277df35-dabb-4395-8880-d9d59990e3a9",
        "parentId" : null,
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "nit: the same\n",
        "createdAt" : "2016-02-03T10:53:23Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "da5e719a-ca4b-40af-a7ae-327235e558e1",
        "parentId" : "7277df35-dabb-4395-8880-d9d59990e3a9",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This one can be safely written as just the call to `os.IsNotExist`, I will change\n",
        "createdAt" : "2016-02-03T17:40:05Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +282,286 @@\t_, err := os.Lstat(path)\n\tif os.IsNotExist(err) {\n\t\treturn true, nil\n\t}\n"
  },
  {
    "id" : "ae84d824-2a52-4e87-b85f-6b7982e71d4f",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8ac7df9-19f7-4c73-8863-3b8241b16d9f",
        "parentId" : null,
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "@pmorie what about adding a ctor `NewAtomicWriter(...)` checking `TargetDir` exists and is writable?\n",
        "createdAt" : "2016-02-03T11:11:39Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "e354d006-334e-43d8-9646-0fd7a11b3a89",
        "parentId" : "a8ac7df9-19f7-4c73-8863-3b8241b16d9f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Yeah, i'm going to add one to build the log context from pod name, namespace, volume as well\n",
        "createdAt" : "2016-02-03T23:39:30Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@\tlogContext string\n}\n\n// NewAtomicWriter creates a new AtomicWriter configured to write to the given\n// target directory, or returns an error if the target directory does not exist."
  },
  {
    "id" : "04a1f78c-7fdd-43ba-9c86-54f0560998e6",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a87e9302-78ff-4b74-b8db-cdac6cbce096",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Be clear that this may write new files that did not exist in a previous generation of the dataset.\n\nDocument what happens if a payload is missing a file that currently exists.  Obviously this will not remove it - will anyone?  Or do those get orphaned and left dangling?\n",
        "createdAt" : "2016-02-04T01:25:09Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +375,379 @@// createUserVisibleFiles creates the relative symlinks for all the\n// files configured in the payload. If the directory in a file path does not\n// exist, it is created.\n//\n// Viz:"
  },
  {
    "id" : "4be90403-b28a-48f6-b776-ba95a370288b",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad2f4fe3-3040-4d25-b9a2-dd1a232e47c0",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I guess here is where you should unlink files that exist but are not in the payload?  and directories if they are empty.\n",
        "createdAt" : "2016-02-04T01:33:11Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f779ff50-20e3-429d-8ff3-c93000955f3b",
        "parentId" : "ad2f4fe3-3040-4d25-b9a2-dd1a232e47c0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin yep, @sdminonne were discussing that this morning, it's on my list\n",
        "createdAt" : "2016-02-04T17:49:54Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "b5cef6a7-aa28-40a3-ace7-c978d69c1b66",
        "parentId" : "ad2f4fe3-3040-4d25-b9a2-dd1a232e47c0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin yep, @sdminonne were discussing that this morning, it's on my list.\n",
        "createdAt" : "2016-02-04T17:50:22Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "67d7bfad-8e26-4533-b626-6ba0765e6ee1",
        "parentId" : "ad2f4fe3-3040-4d25-b9a2-dd1a232e47c0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin yep, @sdminonne were discussing that this morning, it's on my list.\n",
        "createdAt" : "2016-02-04T17:52:22Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +260,264 @@\n\treturn nil\n}\n\n// shouldWritePayload returns whether the payload should be written to disk."
  },
  {
    "id" : "6d382383-e261-4b4c-99b7-3f27b150a7e3",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c2597be-2100-4b2e-9d9a-139d6f271d51",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "here you check HasPrefix, rather than Contains() :)\n",
        "createdAt" : "2016-02-05T22:15:51Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8d5ba7e3-e3b4-4caa-8b4c-586b200abcb6",
        "parentId" : "7c2597be-2100-4b2e-9d9a-139d6f271d51",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "Yeah to skip `..sentinel`, `..data` and the magic `..tsFormat`ted dir.\n",
        "createdAt" : "2016-02-06T15:38:32Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "ea968fde-6905-4bd5-af2d-846ee5e846c5",
        "parentId" : "7c2597be-2100-4b2e-9d9a-139d6f271d51",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "Thinking twice `..sentinel`, `..data` and the magic tsformatted dir are the only paths I would forbid in the payload (and obviously the \"..\"), since these are the only paths that `AtomicWriter` generates.\n",
        "createdAt" : "2016-02-06T15:50:19Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "2040b1c8-be5a-4ea6-a91a-7ab8904772dc",
        "parentId" : "7c2597be-2100-4b2e-9d9a-139d6f271d51",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "having the whole .. prefix reserved gives us room to grow.\n",
        "createdAt" : "2016-02-06T21:51:01Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "98c2562f-6dec-4dc9-81d1-e745ba6b1642",
        "parentId" : "7c2597be-2100-4b2e-9d9a-139d6f271d51",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "I'm fine with whole `..`. \n",
        "createdAt" : "2016-02-08T11:03:29Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\trelativePath := strings.TrimPrefix(path, w.targetDir)\n\t\trelativePath = strings.TrimPrefix(relativePath, \"/\")\n\t\tif strings.HasPrefix(relativePath, \"..\") {\n\t\t\treturn nil\n\t\t}"
  },
  {
    "id" : "cf50f11b-55fc-4e55-b6b8-d1f97b4fdc0d",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9442ccbc-60c1-4c50-8d00-5e41aba2ec93",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "if you busted this into a function which takes (existingPaths, newPaths) and returns (prunePaths) then you could have a really nice little unit test\n",
        "createdAt" : "2016-02-05T22:20:15Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +321,325 @@\tglog.V(5).Infof(\"%s: current paths:   %+v\", w.targetDir, paths.List())\n\n\tnewPaths := sets.NewString()\n\tfor file := range payload {\n\t\t// add all subpaths for the payload to the set of new paths"
  },
  {
    "id" : "d22d075b-61ab-4158-879d-6713ce031413",
    "prId" : 20397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0db230e-07f4-4cd6-9bc6-73c5e47ea478",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "should we remove the old user visible paths before touching the sentinel?\n",
        "createdAt" : "2016-02-10T04:03:01Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "d6b78eac-d605-41c8-ad82-04efde7c4383",
        "parentId" : "e0db230e-07f4-4cd6-9bc6-73c5e47ea478",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I edited this incorrectly earlier and Tim and I both missed it, good catch.\n",
        "createdAt" : "2016-02-10T04:35:25Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "bf28dc09-ce0a-40b0-a0cc-8fc6f7d1fbd5",
        "parentId" : "e0db230e-07f4-4cd6-9bc6-73c5e47ea478",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "no, why?  The sentinal is the signal that the old dataset is dead.  Until\nwe touch the sentinal, the app could rightfully use any file in the\ndataset, and any error we cause is a really bad thing.\n\nOn Tue, Feb 9, 2016 at 8:03 PM, Seth Jennings notifications@github.com\nwrote:\n\n> In pkg/volume/util/atomic_writer.go\n> https://github.com/kubernetes/kubernetes/pull/20397#discussion_r52412448\n> :\n> \n> > -       return err\n> > -   }\n> >   +\n> > -   if err = os.Rename(newDataDirPath, dataDirPath); err != nil {\n> > -       os.Remove(newDataDirPath)\n> > -       os.RemoveAll(tsDir)\n> > -       glog.Errorf(\"%s: error renaming symbolic link for data directory %s: %v\", w.logContext, newDataDirPath, err)\n> > -       return err\n> > -   }\n> >   +\n> > -   if err = w.touchSentinelFile(); err != nil {\n> > -       glog.Errorf(\"%s: error touching sentinel file: %v\", err)\n> > -       return err\n> > -   }\n> >   +\n> > -   if err = w.removeUserVisiblePaths(pathsToRemove); err != nil {\n> \n> should we remove the old user visible paths before touching the sentinel?\n> \n> ‚Äî\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20397/files#r52412448.\n",
        "createdAt" : "2016-02-10T06:16:26Z",
        "updatedAt" : "2016-02-10T08:20:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b750ea678fd8774e85e465110c6bc9ab3634e45c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +192,196 @@\n\t// (11)\n\tif err = w.removeUserVisiblePaths(pathsToRemove); err != nil {\n\t\tglog.Errorf(\"%s: error removing old visible symlinks: %v\", w.logContext, err)\n\t\treturn err"
  }
]