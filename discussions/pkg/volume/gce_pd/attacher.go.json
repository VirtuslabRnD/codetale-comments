[
  {
    "id" : "a85664a5-8e10-437a-8d09-5b2b52a966ce",
    "prId" : 34859,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34859#pullrequestreview-5921618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f8baa0-ad56-4362-97be-9b610cddcf0e",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Might be time to create the Volumes interface on the cloudprovider :-)  The objection last time was that there could be different types; maybe if the volumes interface took a string argument for the \"volume type\" that would overcome that objection?  cc @thockin \n",
        "createdAt" : "2016-10-26T18:54:45Z",
        "updatedAt" : "2016-10-28T16:25:23Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "abbde4337485d0286ab51bbebff54ff02eb33694",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +97,101 @@}\n\nfunc (attacher *gcePersistentDiskAttacher) VolumesAreAttached(specs []*volume.Spec, nodeName types.NodeName) (map[*volume.Spec]bool, error) {\n\tvolumesAttachedCheck := make(map[*volume.Spec]bool)\n\tvolumePdNameMap := make(map[string]*volume.Spec)"
  },
  {
    "id" : "265f940e-5274-493f-b9bb-dbf29873979a",
    "prId" : 28448,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efd6e283-e9d1-4e10-9bbc-e4cc2b953fd9",
        "parentId" : null,
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "According to the same documentation don't we also want to do this for mkfs?\nDo we need to add it also in [mount_linx.go]?(https://github.com/kubernetes/kubernetes/blob/master/pkg/util/mount/mount_linux.go#L282)?\n",
        "createdAt" : "2016-07-07T06:24:45Z",
        "updatedAt" : "2016-07-07T06:24:45Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "1616b4ed-508f-43db-8f0d-f3ddc0b0c697",
        "parentId" : "efd6e283-e9d1-4e10-9bbc-e4cc2b953fd9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "pkg/util/mount is used by more than GCE, and I don't know if that option should be used on real disks...\n",
        "createdAt" : "2016-07-07T06:29:21Z",
        "updatedAt" : "2016-07-07T06:29:21Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f25dd892-56ac-4f54-b089-1c6210f1ef63",
        "parentId" : "efd6e283-e9d1-4e10-9bbc-e4cc2b953fd9",
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "So you just made me look at the kernel source code again.\n\nWe should not run mkfs if we don't know that the device supports TRIM. \n\nYou can see in fs/ext4/mballoc.c that if DISCARD is set but not supported in the device the kernel will emit a warning to dmesg, even just for mount.  I think if we cannot test for SSD or discard supported device we should not set this. \nThere is no way to set mkfs flags per device?\n",
        "createdAt" : "2016-07-07T06:44:58Z",
        "updatedAt" : "2016-07-07T06:44:58Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "e5c6c783-205c-4f00-b9ae-d3fa08c9c34c",
        "parentId" : "efd6e283-e9d1-4e10-9bbc-e4cc2b953fd9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Does this mean we should not mount with trim if we did not mkfs with trim?\n as things stand today, there is no way to pass custom flags to mkfs.  But\nit looks like GCE suggests setting it regardless of SSD-ness (since PD is\n...unique)\n\nOn Wed, Jul 6, 2016 at 11:45 PM, Michael Rubin notifications@github.com\nwrote:\n\n> In pkg/volume/gce_pd/attacher.go\n> https://github.com/kubernetes/kubernetes/pull/28448#discussion_r69857853\n> :\n> \n> > @@ -165,6 +165,9 @@ func (attacher *gcePersistentDiskAttacher) MountDevice(spec *volume.Spec, device\n> >     options := []string{}\n> >     if readOnly {\n> >         options = append(options, \"ro\")\n> > -   } else {\n> > -       // as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n> > -       options = append(options, \"discard\")\n> \n> So you just made me look at the kernel source code again.\n> \n> We should not run mkfs if we don't know that the device supports TRIM.\n> \n> You can see in fs/ext4/mballoc.c that if DISCARD is set but not supported\n> in the device the kernel will emit a warning to dmesg, even just for mount.\n> I think if we cannot test for SSD or discard supported device we should not\n> set this.\n> There is no way to set mkfs flags per device?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/28448/files/8efefab9a3fdc4906ca53d4a23d22c3846d0610b#r69857853,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFVgVICvE6nVIqxXld383IVXtADLn7maks5qTKCYgaJpZM4JECrD\n> .\n",
        "createdAt" : "2016-07-07T06:51:24Z",
        "updatedAt" : "2016-07-07T06:51:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1e8cfcbd-dd37-4c7b-af92-2e61ebe11bda",
        "parentId" : "efd6e283-e9d1-4e10-9bbc-e4cc2b953fd9",
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "OK I looked at it even deeper. enabling this in mkfs only speeds up mkfs, it has no fs impact once mounted. We get benefits of \"discard\" in the mount option. So we don't need to do both.\n",
        "createdAt" : "2016-07-07T07:12:09Z",
        "updatedAt" : "2016-07-07T07:12:09Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      }
    ],
    "commit" : "8efefab9a3fdc4906ca53d4a23d22c3846d0610b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +168,172 @@\t} else {\n\t\t// as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n\t\toptions = append(options, \"discard\")\n\t}\n\tif notMnt {"
  },
  {
    "id" : "abe21b8d-0660-4d9d-9a4d-672cd90e9ff2",
    "prId" : 28448,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "parentId" : null,
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "We need to test for ext4 also. I don't think ext2 (nor implictly ext3 supports this mount option)?\n",
        "createdAt" : "2016-07-07T06:51:02Z",
        "updatedAt" : "2016-07-07T06:51:02Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "b6d7a80a-2b9a-46c9-acd0-0f244b400628",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Good point.  This just got complicated.\n\nOn Wed, Jul 6, 2016 at 11:51 PM, Michael Rubin notifications@github.com\nwrote:\n\n> In pkg/volume/gce_pd/attacher.go\n> https://github.com/kubernetes/kubernetes/pull/28448#discussion_r69858276\n> :\n> \n> > @@ -165,6 +165,9 @@ func (attacher *gcePersistentDiskAttacher) MountDevice(spec *volume.Spec, device\n> >     options := []string{}\n> >     if readOnly {\n> >         options = append(options, \"ro\")\n> > -   } else {\n> > -       // as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n> \n> We need to test for ext4 also. I don't think ext2 (nor implictly ext3\n> supports this mount option)?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/28448/files/8efefab9a3fdc4906ca53d4a23d22c3846d0610b#r69858276,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFVgVG1VbgifAwcL_sXxrRhsOd1YPG9Dks5qTKIEgaJpZM4JECrD\n> .\n",
        "createdAt" : "2016-07-07T06:53:19Z",
        "updatedAt" : "2016-07-07T06:53:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5e1374f2-69d9-4bc7-b0b3-90011c003188",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "@thockin @saad-ali @ciwang Can't you just use \"file -s\"?\n",
        "createdAt" : "2016-07-07T07:13:52Z",
        "updatedAt" : "2016-07-07T07:13:52Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "b14d165c-8991-49af-9b1f-f42d49a6228e",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "@thockin @saad-ali @ciwang Can't you just use \"file -s\"?\n",
        "createdAt" : "2016-07-07T07:13:52Z",
        "updatedAt" : "2016-07-07T07:13:52Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "2248b106-3bd4-47ea-a11b-d06723c7c2b5",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You'd have to explain more what you're thinking.\n\nOn Thu, Jul 7, 2016 at 12:14 AM, Michael Rubin notifications@github.com\nwrote:\n\n> In pkg/volume/gce_pd/attacher.go\n> https://github.com/kubernetes/kubernetes/pull/28448#discussion_r69860194\n> :\n> \n> > @@ -165,6 +165,9 @@ func (attacher *gcePersistentDiskAttacher) MountDevice(spec *volume.Spec, device\n> >     options := []string{}\n> >     if readOnly {\n> >         options = append(options, \"ro\")\n> > -   } else {\n> > -       // as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n> \n> @thockin https://github.com/thockin @saad-ali\n> https://github.com/saad-ali @ciwang https://github.com/ciwang Can't\n> you just use \"file -s\"?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/28448/files/8efefab9a3fdc4906ca53d4a23d22c3846d0610b#r69860194,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFVgVMuhjJb2CDIZeLUmPmD6RanfX6Dvks5qTKdggaJpZM4JECrD\n> .\n",
        "createdAt" : "2016-07-07T07:33:11Z",
        "updatedAt" : "2016-07-07T07:33:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "31512db4-bfc1-4ef7-bab1-2e28ceb51d1c",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "body" : "@thockin @ciwang @saad-ali \nCan we invoke [file -s](http://linux.die.net/man/1/file) on the block device so that we can determine the filesystem type in a portable manner? \nCheck out: http://www.thegeekstuff.com/2011/04/identify-file-system-type/\nThis might be a good PR for ciwang's stack of intern items. Or does \"file\" not exist in our image?\n",
        "createdAt" : "2016-07-07T07:38:37Z",
        "updatedAt" : "2016-07-07T07:38:37Z",
        "lastEditedBy" : "9680f0db-1c00-49c9-968a-be3d5084d153",
        "tags" : [
        ]
      },
      {
        "id" : "4fffa17a-7e68-4b63-9335-9aad9cb311e7",
        "parentId" : "5df7943a-8457-4cdd-90bb-74354137a156",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "oh!  Yeah, we could, I'm just wary of too many \"is ext4\" conditionals\nspread throughout the code makeing assumptions about what flags other parts\ndid or did not use.\n\nOn Thu, Jul 7, 2016 at 12:39 AM, Michael Rubin notifications@github.com\nwrote:\n\n> In pkg/volume/gce_pd/attacher.go\n> https://github.com/kubernetes/kubernetes/pull/28448#discussion_r69863021\n> :\n> \n> > @@ -165,6 +165,9 @@ func (attacher *gcePersistentDiskAttacher) MountDevice(spec *volume.Spec, device\n> >     options := []string{}\n> >     if readOnly {\n> >         options = append(options, \"ro\")\n> > -   } else {\n> > -       // as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n> \n> @thockin https://github.com/thockin @ciwang https://github.com/ciwang\n> @saad-ali https://github.com/saad-ali\n> Can we invoke file -s http://linux.die.net/man/1/file on the block\n> device so that we can determine the filesystem type in a portable manner?\n> Check out: http://www.thegeekstuff.com/2011/04/identify-file-system-type/\n> This might be a good PR for ciwang's stack of intern items. Or does \"file\"\n> not exist in our image?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/28448/files/8efefab9a3fdc4906ca53d4a23d22c3846d0610b#r69863021,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFVgVGT2iHT8jQF0IdjDo2mBquiaRFSLks5qTK0rgaJpZM4JECrD\n> .\n",
        "createdAt" : "2016-07-07T07:43:31Z",
        "updatedAt" : "2016-07-07T07:43:31Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8efefab9a3fdc4906ca53d4a23d22c3846d0610b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\toptions = append(options, \"ro\")\n\t} else {\n\t\t// as per https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n\t\toptions = append(options, \"discard\")\n\t}"
  },
  {
    "id" : "338d3454-c44f-4486-81ff-a1a664024df6",
    "prId" : 27567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7a4fd30-7bc0-4d3a-b1e2-3612fbcd0585",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "So devicePath is not used for this function? Is that possible to use this instead of other information?\n",
        "createdAt" : "2016-06-20T22:20:31Z",
        "updatedAt" : "2016-06-21T01:20:41Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "331893a0-20e7-42f4-9116-bc0e59add115",
        "parentId" : "b7a4fd30-7bc0-4d3a-b1e2-3612fbcd0585",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "GCE PD generates it's own list of paths to check. It doesn't this without calling out to the cloud provider, so that's perfectly fine.\n",
        "createdAt" : "2016-06-21T00:54:44Z",
        "updatedAt" : "2016-06-21T01:20:41Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "e716ddc771be0b4314590ca924547ab74b2ff684",
    "line" : null,
    "diffHunk" : "@@ -1,1 +90,94 @@}\n\nfunc (attacher *gcePersistentDiskAttacher) WaitForAttach(spec *volume.Spec, devicePath string, timeout time.Duration) (string, error) {\n\tticker := time.NewTicker(checkSleepDuration)\n\tdefer ticker.Stop()"
  },
  {
    "id" : "607497d9-47a6-4b77-b652-b6cdac85ad64",
    "prId" : 27567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "021aa46e-d217-48b7-9017-499bee91b6a7",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "diskGooglePrefix + pdName (add space?)\n",
        "createdAt" : "2016-06-20T23:04:52Z",
        "updatedAt" : "2016-06-21T01:20:41Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "f715dd7d-b9be-41b2-8077-ad67dca09162",
        "parentId" : "021aa46e-d217-48b7-9017-499bee91b6a7",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "gofmt does not permit spaces\n",
        "createdAt" : "2016-06-21T01:08:43Z",
        "updatedAt" : "2016-06-21T01:20:41Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "e716ddc771be0b4314590ca924547ab74b2ff684",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +87,91 @@\t}\n\n\treturn path.Join(diskByIdPath, diskGooglePrefix+pdName), nil\n}\n"
  },
  {
    "id" : "605e6365-fe45-4676-b9db-a49df4278987",
    "prId" : 21709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712c9109-5996-4d3c-9971-011790cfddcb",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "As soon as your volume manager is in and mount/unmount attach/detach are no longer happening async we can get rid of this hack. \n",
        "createdAt" : "2016-05-09T05:43:25Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "4858d0ab6f612248f356c4cdcd0353b5667fc359",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\n\t// Block execution until any pending detach operations for this PD have completed\n\tattachDetachMutex.LockKey(pdName)\n\tdefer attachDetachMutex.UnlockKey(pdName)\n"
  },
  {
    "id" : "6d073389-6417-43ee-952c-bb77f71ce608",
    "prId" : 21709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e2409b9-c7a4-458d-a4a0-08cb99f7a380",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Once your volume manager is in (and my attach/detach controller), it can be responsible for retrying so we'll be able to simplify this code as well then. \n",
        "createdAt" : "2016-05-09T05:44:31Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "1090bf2c-e77e-4298-adfb-d0f8f8d9d526",
        "parentId" : "4e2409b9-c7a4-458d-a4a0-08cb99f7a380",
        "authorId" : null,
        "body" : "So if we remove the `DiskIsAttached` check as you suggested below, there will no longer be a predicate upon which to base the retry. We will have to rely on the sync loop (actually in this case the pod worker thread) to do the provide the retry. WDYT ?\n",
        "createdAt" : "2016-05-09T13:52:45Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2ba8d1cf-5e3b-4855-8a6a-9f64b11a3026",
        "parentId" : "4e2409b9-c7a4-458d-a4a0-08cb99f7a380",
        "authorId" : null,
        "body" : "Actually the update PR retries on failure of the Attach/Detach call to the cloud provider. I personally like leaving retries to the sync loop but I hesitate to destabilize this code too much in this change which is already pretty big.\n",
        "createdAt" : "2016-05-09T14:45:10Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a6085816-77e9-4fbd-b4e9-d54cfebd5e32",
        "parentId" : "4e2409b9-c7a4-458d-a4a0-08cb99f7a380",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "> So if we remove the DiskIsAttached check as you suggested below, there will no longer be a predicate upon which to base the retry\n\nRetry would be based on the AttachDisk call failing immediately with err (unlikely).\n\n> I personally like leaving retries to the sync loop but I hesitate to destabilize this code too much in this change which is already pretty big.\n\nYes, it would be a bad idea to remove the retries and leave them to the sync loop for now. But once the volume manager exists, then it is safe to let the volume manager do the retries.\n",
        "createdAt" : "2016-05-09T19:18:56Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "4858d0ab6f612248f356c4cdcd0353b5667fc359",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@\t}\n\n\tfor numRetries := 0; numRetries < maxRetries; numRetries++ {\n\t\tif numRetries > 0 {\n\t\t\tglog.Warningf(\"Retrying attach for GCE PD %q (retry count=%v).\", pdName, numRetries)"
  },
  {
    "id" : "e9c075be-3855-4f45-be40-61c7b1b163d9",
    "prId" : 21709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86bc5452-aa1b-414b-ba31-ff231b9e94c1",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "how are we sure the disk is not already attached by now? If already attached, `sdBefore` then contains the newly attached device.\n\nIn current code, `sdBefore` is extracted before attach happens and is protected by mutex. The new API breaks that atomicty.  @saad-ali @swagiaal \n",
        "createdAt" : "2016-05-12T20:02:40Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "27b1d16e-847a-4250-88e8-71ef1e5d7963",
        "parentId" : "86bc5452-aa1b-414b-ba31-ff231b9e94c1",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "If the device is found this hack doesn't matter anyway. It was put in place to ensure the device shows up. I'm pretty sure we can get rid of the hack now. But maybe as a separate deliberate action in another PR, not here.\n",
        "createdAt" : "2016-05-13T22:09:34Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "4858d0ab6f612248f356c4cdcd0353b5667fc359",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@\t}\n\n\tsdBefore, err := filepath.Glob(diskSDPattern)\n\tif err != nil {\n\t\tglog.Errorf(\"Error filepath.Glob(\\\"%s\\\"): %v\\r\\n\", diskSDPattern, err)"
  },
  {
    "id" : "c87c8f3a-d0c5-499a-9229-b13b721bc42f",
    "prId" : 21709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4207747-9a9f-44a7-9c01-f147e739c2d6",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I know I am too late and `Attacher` interface is already merged, but `Attach()` and `WaitForAttach()` should not be part of the same interface - one will be implemented by kube-controller-manager and requires `VolumeHost.GetCloudProvider()` and the second one by kubelet and should **not** require cloud instance - one reason why we do the controller is not to have AWS credentials on the node.\n",
        "createdAt" : "2016-05-20T14:11:07Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "a7c14661-6365-41de-b242-584f179a8884",
        "parentId" : "d4207747-9a9f-44a7-9c01-f147e739c2d6",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I agree. But for slightly different reasons. Both could require cloud provider--attach for attaching, wait for attach because some plugins like AWS EBS, waitForAttach would need to first call the cloud provider to figure out where on the node to expect the volume (it is not deterministic). But attach would never require the kubelet specific volume host stuff where as waitForAttach would.\n",
        "createdAt" : "2016-05-20T17:55:20Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "7dc7b72f-623b-42d2-8148-2f01129ecf15",
        "parentId" : "d4207747-9a9f-44a7-9c01-f147e739c2d6",
        "authorId" : null,
        "body" : "@jsafrane also if you follow the early discussion on #24557 we first tried to create an Attacher interface and a PhysicalAttacher interface where Attacher would run in the master and PhysicalAttacher runs in the kubelet, but the number of interfaces was getting out of hand so we decided to tackle this by storing minimal information int the Attacher object and instead passing everything that is needed through arguments to individual functions. Functions which require cloud stuff would only be run on master and functions which look at the local file system would only run on kubelet\n",
        "createdAt" : "2016-05-20T18:43:35Z",
        "updatedAt" : "2016-05-22T12:28:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4858d0ab6f612248f356c4cdcd0353b5667fc359",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@}\n\nfunc (attacher *gcePersistentDiskAttacher) WaitForAttach(spec *volume.Spec, timeout time.Duration) (string, error) {\n\tticker := time.NewTicker(checkSleepDuration)\n\tdefer ticker.Stop()"
  }
]