[
  {
    "id" : "5da8b82d-f060-4f19-9d6b-5cd7004ed98f",
    "prId" : 69782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69782#pullrequestreview-188549135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f43a7513-1c48-49fb-bd75-72d2311cc952",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "lets not use capitalization for error messages.",
        "createdAt" : "2018-12-12T16:40:05Z",
        "updatedAt" : "2019-01-28T17:28:27Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "3f1ad4eb-f2c7-46a3-bb7b-eef88074b1ae",
        "parentId" : "f43a7513-1c48-49fb-bd75-72d2311cc952",
        "authorId" : "297e3d73-1e98-47c7-8920-7b79da4a2e13",
        "body" : "Was just being consistent with the existing format in the same file and the other plugins. Should I change all the existing error messages to be non-capitalized?",
        "createdAt" : "2019-01-01T07:47:16Z",
        "updatedAt" : "2019-01-28T17:28:27Z",
        "lastEditedBy" : "297e3d73-1e98-47c7-8920-7b79da4a2e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "835183ad5075249c4017f49cf60ae08d7c05687e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +359,363 @@\tif err := b.manager.AttachDevice(b, targetPath); err != nil {\n\t\tklog.Errorf(\"Failed to attach device at %s: %s\", targetPath, err.Error())\n\t\treturn err\n\t}\n"
  },
  {
    "id" : "f1ebee91-2fef-4bd0-b135-2d1dbb6184b7",
    "prId" : 69782,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69782#pullrequestreview-188549265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d724ff52-e64b-404f-a415-294b4519721d",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "there is also a `AttachVolume` defined above and it isn't immediately obvious how is `AttachDevice` different from `AttachVolume`. \r\n\r\nThere is another bigger design issue with this plugin which I am not quite sure about is - it implements mounting the device to global path and unmounting from it, without implementing `MountDevice` and `UnmountDevice` functions.  It is expected that a plugin that mounts the volume to a global path implements these functions (for various reasons).\r\n",
        "createdAt" : "2018-12-12T16:41:09Z",
        "updatedAt" : "2019-01-28T17:28:27Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "b14b9b46-4bc1-4548-8cab-b0eddf65c683",
        "parentId" : "d724ff52-e64b-404f-a415-294b4519721d",
        "authorId" : "297e3d73-1e98-47c7-8920-7b79da4a2e13",
        "body" : "`AttachDevice` calls a StorageOS API for the virtual volumes which are created on the host and it doesn't actually attaches a device. The StorageOS virtual volume is then used by `AttachVolume` to attach the volume to the kubelet.",
        "createdAt" : "2019-01-01T07:55:32Z",
        "updatedAt" : "2019-01-28T17:28:27Z",
        "lastEditedBy" : "297e3d73-1e98-47c7-8920-7b79da4a2e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "835183ad5075249c4017f49cf60ae08d7c05687e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +283,287 @@\tAttachVolume(mounter *storageosMounter) (string, error)\n\t// Attaches the device to the host at a mount path.\n\tAttachDevice(mounter *storageosMounter, deviceMountPath string) error\n\t// Detaches the disk from the kubelet's host machine.\n\tDetachVolume(unmounter *storageosUnmounter, dir string) error"
  },
  {
    "id" : "9af23d09-a7ce-41eb-b9cc-d340678dd90d",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-37084320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5fe0ef-43f9-447a-ba5b-e53cbc78d863",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "passing labels from PVC to PV?",
        "createdAt" : "2017-04-27T17:20:02Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "5cef870e-599a-4019-b0fb-927be6f50e43",
        "parentId" : "ad5fe0ef-43f9-447a-ba5b-e53cbc78d863",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "This is setting labels created by StorageOS when the volume is provisioned and applying them to the PV.  So in the example above, the label `storageos.feature.replicas=2` would be set on the PV.  These labels are only informational.",
        "createdAt" : "2017-05-09T16:35:44Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 644,
    "diffHunk" : "@@ -1,1 +642,646 @@\t\t}\n\t\tfor k, v := range vol.Labels {\n\t\t\tpv.Labels[k] = v\n\t\t}\n\t}"
  },
  {
    "id" : "1df1327c-22ef-4f91-a961-ba6f188bee77",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-41297188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c30c608f-41fb-4bbc-998f-184e4ffb1104",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I'm not sure if this is prone to the volume reconstruction issue. @chakri-nelluri, can you check?",
        "createdAt" : "2017-05-31T17:41:05Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +237,241 @@\t}\n\tstorageosVolume := &v1.Volume{\n\t\tName: volumeName,\n\t\tVolumeSource: v1.VolumeSource{\n\t\t\tStorageOS: &v1.StorageOSVolumeSource{"
  },
  {
    "id" : "53a0076d-1963-459b-b07a-119bcd250b1a",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-41662880",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c368f1d-580f-4d48-aadb-2930ce6b8af7",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "The copying of all labels from PVC to PV object is unprecedented. I would prefer if you removed this unless there is strong justification for it.",
        "createdAt" : "2017-06-01T19:23:24Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ae383dc2-b576-4736-a9ad-4a768e0595ed",
        "parentId" : "5c368f1d-580f-4d48-aadb-2930ce6b8af7",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "I believe the AWS, GCE, Flocker and Portworx provisioners also do this.  We think it's a useful feature as it allows k8s tools to query/verify storage parameters directly without having to use our api and tools.  \r\n\r\nFor example, you could query on PVs that have the production label where storageos.feature.replicas < 1 to show data at risk.\r\n\r\nIf you still feel strongly about removing it let me know and I will.",
        "createdAt" : "2017-06-01T22:20:31Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      },
      {
        "id" : "5307400b-2d1d-436a-846c-3a8422eb647a",
        "parentId" : "5c368f1d-580f-4d48-aadb-2930ce6b8af7",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I don't feel super strongly about this. Fine to leave it in.",
        "createdAt" : "2017-06-01T23:28:37Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 643,
    "diffHunk" : "@@ -1,1 +641,645 @@\t\t\tpv.Labels = make(map[string]string)\n\t\t}\n\t\tfor k, v := range vol.Labels {\n\t\t\tpv.Labels[k] = v\n\t\t}"
  },
  {
    "id" : "3e3d1846-db88-42e3-9044-15026b07c28f",
    "prId" : 42156,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42156#pullrequestreview-42474363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Do not allow user to control `secretNamespace` for provisioning either (remove this parameter). Infer the secret namespace for provisioning from the PVC (i.e. use the PVC namespace).",
        "createdAt" : "2017-06-06T22:51:51Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b39e6e2f-bc9c-4672-9ee4-dd4992f9657e",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "ahh.. yes",
        "createdAt" : "2017-06-06T23:01:27Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      },
      {
        "id" : "9b9aac5a-44e7-41be-b8e0-b9e5fe23f9d5",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This is specified in the storage class, right? That's a privileged object to write, and other plugins let you fully specify the coordinates of a secret in storage class parameters",
        "createdAt" : "2017-06-06T23:01:46Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e4870f5c-5943-4fae-b8e0-c343e5bb6bf7",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "If you require a secret for a dynamically provisioned PV to be in the namespace of the PVC, you either have to rely on the user providing it (unlikely), or you have to make the provisioner place a secret in the namespace (not good)",
        "createdAt" : "2017-06-06T23:03:45Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b23ee1c1-055b-436b-aa32-c30ef39bdd25",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "Yes, it's in the storage class currently.\r\n\r\nThe idea behind allowing it to be set was to support the secret being in the PVCs namespace and also the default namespace (I bet many installs will have a single admin credential).\r\n\r\nWould it work if I add a check to enforce it matches either PVC namespace or default?",
        "createdAt" : "2017-06-06T23:13:34Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      },
      {
        "id" : "10cac287-b01b-466d-867b-7682fdd42309",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "> This is specified in the storage class, right? That's a privileged object to write, and other plugins let you fully specify the coordinates of a secret in storage class parameters\r\n> \r\n> If you require a secret for a dynamically provisioned PV to be in the namespace of the PVC, you either have to rely on the user providing it (unlikely), or you have to make the provisioner place a secret in the namespace (not good)\r\n\r\n@liggitt Good point. I would be fine leaving it as is then, if you're ok with it.\r\n\r\n> Would it work if I add a check to enforce it matches either PVC namespace or default?\r\n\r\n@croomes At that point might as well remove it as a parameter. So either keep it as is (if @liggitt is ok with that), or remove the `adminsecretnamespace` parameter altogether and use the PVC's namespace. I'm ok with either. ",
        "createdAt" : "2017-06-06T23:45:25Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "f83b7252-51d0-4696-9bdc-120f5cb4f721",
        "parentId" : "6b9611cb-68d4-4da7-a320-cd7f11bd76d1",
        "authorId" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "body" : "My preference is to leave it.  I'm about to push the other changes, but can remove later it if needed.",
        "createdAt" : "2017-06-06T23:49:58Z",
        "updatedAt" : "2017-06-09T12:33:33Z",
        "lastEditedBy" : "5b71401e-a8b4-4ca9-b5a3-9345cba53672",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e2503e71fa51ae08fbbc90cc94e7d293709528e",
    "line" : 565,
    "diffHunk" : "@@ -1,1 +563,567 @@\t\tcase \"adminsecretname\":\n\t\t\tadminSecretName = v\n\t\tcase \"adminsecretnamespace\":\n\t\t\tadminSecretNamespace = v\n\t\tcase \"volumenamespace\":"
  }
]