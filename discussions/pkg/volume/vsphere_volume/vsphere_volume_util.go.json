[
  {
    "id" : "d5782127-8b8b-44ef-8434-f7be7eb93d8d",
    "prId" : 100404,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100404#pullrequestreview-618894405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16e84811-832a-4555-9e22-4531e8a30c49",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "number `90` in the comment above does not correspond to the actual code now.",
        "createdAt" : "2021-03-23T08:53:25Z",
        "updatedAt" : "2021-03-23T17:44:18Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "b807a28b-2bb6-42b1-916c-52a199468184",
        "parentId" : "16e84811-832a-4555-9e22-4531e8a30c49",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I removed this comment altogether. ",
        "createdAt" : "2021-03-23T17:44:51Z",
        "updatedAt" : "2021-03-23T17:44:51Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c9138a2045f57b62c0c1d73c866f5d6990e3349",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +108,112 @@\t}\n\tvolSizeKiB := volSizeMiB * 1024\n\tname := volumeutil.GenerateVolumeName(v.options.ClusterName, v.options.PVName, maxVolumeLength)\n\tvolumeOptions := &vclib.VolumeOptions{\n\t\tCapacityKB: volSizeKiB,"
  },
  {
    "id" : "c1584cee-67b0-4dae-84e1-1e96b69c9f4d",
    "prId" : 98546,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98546#pullrequestreview-578850077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58387fc4-6617-4589-ad88-bf064d1cf1e3",
        "parentId" : null,
        "authorId" : "47dfb7ab-db92-411d-a70b-1dc70d2a9420",
        "body" : "After the deprecation, will the default disk format continue to be \"thin\"?",
        "createdAt" : "2021-01-28T23:32:14Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "47dfb7ab-db92-411d-a70b-1dc70d2a9420",
        "tags" : [
        ]
      },
      {
        "id" : "7605a20b-cfc1-476c-bc89-0a78ab5ff65d",
        "parentId" : "58387fc4-6617-4589-ad88-bf064d1cf1e3",
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : "After deprecation, if the user has enabled vSphere CSI Migration,  and if `thick` or `zeoredthick` value is specified for `diskformat` parameter, new volume creation using the in-tree vsphere storage class will fail.\r\n\r\nIf migration is not enabled, the `diskformat` parameter will continue to work as it is.\r\n\r\n\r\n",
        "createdAt" : "2021-01-29T00:22:03Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e91ac26fbda2a2e82e56f809edfc8136384e83d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +41,45 @@\tdiskByIDPath       = \"/dev/disk/by-id/\"\n\tdiskSCSIPrefix     = \"wwn-0x\"\n\t// diskformat parameter is deprecated as of Kubernetes v1.21.0\n\tdiskformat        = \"diskformat\"\n\tdatastore         = \"datastore\""
  },
  {
    "id" : "038fee86-a092-4688-af68-24a4088fcd0a",
    "prId" : 98546,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98546#pullrequestreview-579508611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1636c0f7-b767-4d29-aeb9-8cb8624dda91",
        "parentId" : null,
        "authorId" : "7b403c3c-4a19-4e93-b252-11ae5c611e35",
        "body" : "Shouldn't all these deprecations be part of Kubernetes doc as well? Are you planning to address that in a separate PR?",
        "createdAt" : "2021-01-29T18:18:34Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "7b403c3c-4a19-4e93-b252-11ae5c611e35",
        "tags" : [
        ]
      },
      {
        "id" : "ebc3a2fb-92d0-4945-a526-fb8057f18374",
        "parentId" : "1636c0f7-b767-4d29-aeb9-8cb8624dda91",
        "authorId" : "275dd783-53c3-4fed-8434-96ed6a2e0331",
        "body" : "This PR is needed for release notes to be generated.\r\n\r\nWe should submit another PR to update the doc as well: https://kubernetes.io/docs/concepts/storage/volumes/#vsphere-csi-migration",
        "createdAt" : "2021-01-29T18:23:01Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "275dd783-53c3-4fed-8434-96ed6a2e0331",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e91ac26fbda2a2e82e56f809edfc8136384e83d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +41,45 @@\tdiskByIDPath       = \"/dev/disk/by-id/\"\n\tdiskSCSIPrefix     = \"wwn-0x\"\n\t// diskformat parameter is deprecated as of Kubernetes v1.21.0\n\tdiskformat        = \"diskformat\"\n\tdatastore         = \"datastore\""
  },
  {
    "id" : "57040697-23c7-4f0b-b43b-3555edbcadca",
    "prId" : 98546,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98546#pullrequestreview-582788842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc1c1ea3-8a97-418c-b168-8967726f0256",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "~~I am still somewhat concerned about deprecating support for `diskformat` option. As per - https://www.vmware.com/pdf/vsp_4_thinprov_perf.pdf - for certain workloads performance of zeroedthick disks are 20-30% faster than thinly provisioned disks for VMFS disk types. Now we are saying - user may not have this choice~~\r\n\r\nYou mentioned that - `diskformat` might eventually get supported via SPBM policy (or I don't know if this is already supported). Do we have a timeline for this? Do we need an issue to track that?\r\n\r\nEDIT: reading the performance document again, looks like for zeroing stage, there is virtually no performance difference between thin and thick and hence I was mistaken. I am still curious if this is still true.  We should still have some document/issue to track the support via SPBM policy because `diskformat` is chosen for reasons other than performance. ",
        "createdAt" : "2021-02-02T03:27:04Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "682933c7-b4fe-446c-b912-54781ace9a19",
        "parentId" : "bc1c1ea3-8a97-418c-b168-8967726f0256",
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : ">  Do we have a timeline for this? Do we need an issue to track that?\r\n\r\nThe feature will be available in the future vSphere release, we do not have the timeline.\r\n\r\n> Do we need an issue to track that?\r\n\r\nIf you can create an issue on the vSphere CSI driver repository, it will help.\r\n\r\n\r\n",
        "createdAt" : "2021-02-03T01:26:09Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      },
      {
        "id" : "b79ad140-1197-4f34-8378-57641129249a",
        "parentId" : "bc1c1ea3-8a97-418c-b168-8967726f0256",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "why csi does not support diskformat?",
        "createdAt" : "2021-02-03T04:32:57Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "3a298851-74c1-4c1d-b94e-0b23a986e406",
        "parentId" : "bc1c1ea3-8a97-418c-b168-8967726f0256",
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : "@jingxu97 \r\nvSphere CSI Driver is using [CNS CreateVolume API](https://vdc-download.vmware.com/vmwb-repository/dcr-public/8ed923df-bad4-49b3-b677-45bca5326e85/d2d90bb6-d1b3-4266-8ce5-443680187a9a/vim.cns.VolumeCreateSpec.html) which does not have the capability to supply the \"diskformat\" parameter while creating volume.\r\n\r\n\r\n\r\n",
        "createdAt" : "2021-02-03T20:50:10Z",
        "updatedAt" : "2021-02-20T00:31:21Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e91ac26fbda2a2e82e56f809edfc8136384e83d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +42,46 @@\tdiskSCSIPrefix     = \"wwn-0x\"\n\t// diskformat parameter is deprecated as of Kubernetes v1.21.0\n\tdiskformat        = \"diskformat\"\n\tdatastore         = \"datastore\"\n\tStoragePolicyName = \"storagepolicyname\""
  },
  {
    "id" : "092ebfce-44df-4a43-a588-aaa1104aa86e",
    "prId" : 98546,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98546#pullrequestreview-595980419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70cf59e8-8bc5-4452-82ba-3471a59b01c9",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Should these be v1.21 or are just adding comments to something that has already been deprecated?",
        "createdAt" : "2021-02-22T16:43:16Z",
        "updatedAt" : "2021-02-22T16:55:21Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "bd9506d8-c82f-43ca-a216-d805abb10ae4",
        "parentId" : "70cf59e8-8bc5-4452-82ba-3471a59b01c9",
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : "We do not want to remove any feature, so the deprecation notice is sufficient. ",
        "createdAt" : "2021-02-23T03:57:18Z",
        "updatedAt" : "2021-02-23T03:57:18Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e91ac26fbda2a2e82e56f809edfc8136384e83d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +46,50 @@\tStoragePolicyName = \"storagepolicyname\"\n\n\t// hostfailurestotolerate parameter is deprecated as of Kubernetes v1.19.0\n\tHostFailuresToTolerateCapability = \"hostfailurestotolerate\"\n\t// forceprovisioning parameter is deprecated as of Kubernetes v1.19.0"
  },
  {
    "id" : "e6a84159-1217-406c-9de3-3570613da766",
    "prId" : 72731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72731#pullrequestreview-194060586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0fb347e-1565-4825-ae6e-dc058717cbaf",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "So if I understand this correctly, this feature does not uses `NodeAffinity` field of PVs and hence does not uses topology aware provisioning? ",
        "createdAt" : "2019-01-09T16:41:39Z",
        "updatedAt" : "2019-02-18T06:11:35Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "3fa255e6-4828-4163-ab8c-ed8ae17dab47",
        "parentId" : "e0fb347e-1565-4825-ae6e-dc058717cbaf",
        "authorId" : "ab57419c-34f1-4825-866b-5e8c80a97b98",
        "body" : "Yes. Your understanding is correct. The scope of this fix is limited to honouring the allowedTopologies zones during volume provisioning.",
        "createdAt" : "2019-01-10T15:54:08Z",
        "updatedAt" : "2019-02-18T06:11:35Z",
        "lastEditedBy" : "ab57419c-34f1-4825-866b-5e8c80a97b98",
        "tags" : [
        ]
      },
      {
        "id" : "c466e95f-f2bc-44ab-bd7f-f97a32388717",
        "parentId" : "e0fb347e-1565-4825-ae6e-dc058717cbaf",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "So if I don't specify `allowedTopology` in my default storageClass and my nodes are spread across zones then it will basically result in PVCs which can not be used by pods.  Previously - we blocked/errored out on volume provisioning altogether if datastore being used is not shared with all VMs (https://github.com/kubernetes/kubernetes/issues/72497).  How does this interact with that bug?",
        "createdAt" : "2019-01-17T16:40:50Z",
        "updatedAt" : "2019-02-18T06:11:35Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "76bb764e-b9fe-4d1e-a276-248bd5f28465",
        "parentId" : "e0fb347e-1565-4825-ae6e-dc058717cbaf",
        "authorId" : "ab57419c-34f1-4825-866b-5e8c80a97b98",
        "body" : "The issue in https://github.com/kubernetes/kubernetes/issues/72497 is that volume provisioning will fail if there is no shared datastore available across all kubernetes node VMs. Now, with this change, by specifying allowedTopologies in SC, the volume provisioning can happen as long as there is a shared datastore available for the nodes within the zone. \r\nThere is no change in behaviour when allowedTopology is not specified. It will continue to work in the same way today, i.e by looking for shared datastore across all nodes and succeed or fail as the case is.",
        "createdAt" : "2019-01-18T11:47:20Z",
        "updatedAt" : "2019-02-18T06:11:35Z",
        "lastEditedBy" : "ab57419c-34f1-4825-866b-5e8c80a97b98",
        "tags" : [
        ]
      }
    ],
    "commit" : "a309d8a6c1430b4d1f0108dac3cd32e08ae69d2b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +107,111 @@\t}\n\n\tvolumeOptions.Zone = selectedZone\n\t// Apply Parameters (case-insensitive). We leave validation of\n\t// the values to the cloud provider."
  },
  {
    "id" : "bfc62f27-1996-480c-8986-81998f75e492",
    "prId" : 42974,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42974#pullrequestreview-29029404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb9da409-5462-4bb5-830c-f947581014cd",
        "parentId" : null,
        "authorId" : "5d1f7040-18ac-4dc2-aadb-f39c5601803e",
        "body" : "why it's diskformat (no quote) here but the next case is \"datastore\"?",
        "createdAt" : "2017-03-24T00:00:08Z",
        "updatedAt" : "2017-03-27T19:43:18Z",
        "lastEditedBy" : "5d1f7040-18ac-4dc2-aadb-f39c5601803e",
        "tags" : [
        ]
      },
      {
        "id" : "7903c6bd-c5be-4787-9256-8adcaf9b3d09",
        "parentId" : "bb9da409-5462-4bb5-830c-f947581014cd",
        "authorId" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "body" : "Done!",
        "createdAt" : "2017-03-24T23:28:19Z",
        "updatedAt" : "2017-03-27T19:43:18Z",
        "lastEditedBy" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbe94833ebb78bccb34b062ffac88828585ab764",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +95,99 @@\tfor parameter, value := range v.options.Parameters {\n\t\tswitch strings.ToLower(parameter) {\n\t\tcase diskformat:\n\t\t\tvolumeOptions.DiskFormat = value\n\t\tcase datastore:"
  },
  {
    "id" : "9f406523-ffbf-4f84-af10-e241f9feb8c6",
    "prId" : 24947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b76217c-ec0a-49cf-bc6f-5f21577b7fbb",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "why just `Contains` not `==`? Is disk partition supported?\n",
        "createdAt" : "2016-05-17T21:04:34Z",
        "updatedAt" : "2016-05-21T19:53:34Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "e24740c4-cf5c-40fd-904e-88c38a6036fd",
        "parentId" : "9b76217c-ec0a-49cf-bc6f-5f21577b7fbb",
        "authorId" : "69937de3-2ddb-47e1-a5a3-f89875ba29d4",
        "body" : "devID has some more characters prefixed to it compared to uuid that we get from diskUUID. \n",
        "createdAt" : "2016-05-19T00:03:54Z",
        "updatedAt" : "2016-05-21T19:53:34Z",
        "lastEditedBy" : "69937de3-2ddb-47e1-a5a3-f89875ba29d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "11397654b6e9a8ab3bd4272d37e87163e3cf70b4",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +113,117 @@\t\tif strings.Contains(f.Name(), \"scsi-\") {\n\t\t\tdevID := f.Name()[len(\"scsi-\"):len(f.Name())]\n\t\t\tif strings.Contains(diskUUID, devID) {\n\t\t\t\tglog.V(4).Infof(\"Found disk attached as %q; full devicepath: %s\\n\", f.Name(), path.Join(\"/dev/disk/by-id/\", f.Name()))\n\t\t\t\treturn path.Join(\"/dev/disk/by-id/\", f.Name())"
  },
  {
    "id" : "72dd3e73-fac1-4d96-9dbe-9f46fbcf435d",
    "prId" : 24947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f76713f6-0812-4986-8ef5-64910dd08ae2",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "where is `60s` timeout?\n",
        "createdAt" : "2016-05-17T21:05:48Z",
        "updatedAt" : "2016-05-21T19:53:34Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "89677c49-d8f5-4f83-ae26-a5970f02f4c1",
        "parentId" : "f76713f6-0812-4986-8ef5-64910dd08ae2",
        "authorId" : "69937de3-2ddb-47e1-a5a3-f89875ba29d4",
        "body" : "missed that line, added it in the next commit\n",
        "createdAt" : "2016-05-18T22:08:04Z",
        "updatedAt" : "2016-05-21T19:53:34Z",
        "lastEditedBy" : "69937de3-2ddb-47e1-a5a3-f89875ba29d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "11397654b6e9a8ab3bd4272d37e87163e3cf70b4",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@\t\tnumTries++\n\t\tif numTries == maxRetries {\n\t\t\treturn errors.New(\"Could not attach disk: Timeout after 60s\")\n\t\t}\n\t\ttime.Sleep(time.Second * 60)"
  }
]