[
  {
    "id" : "7d008e0d-550f-4c84-b651-158ed33ed682",
    "prId" : 89511,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89511#pullrequestreview-382614660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b0bc73c-3c3b-409e-b4cb-b1d07ab57fb2",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Add a unit test for this?",
        "createdAt" : "2020-03-27T06:54:23Z",
        "updatedAt" : "2020-03-29T09:35:31Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "51e0bd2480f23de9697b5e388335b547282b3431",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +181,185 @@\n\tsupportedModes := p.plugin.GetAccessModes()\n\tif maxShares < 2 {\n\t\t// only do AccessModes validation when maxShares < 2\n\t\tif !util.AccessModesContainedInAll(p.plugin.GetAccessModes(), p.options.PVC.Spec.AccessModes) {"
  },
  {
    "id" : "f1e3213c-1da2-4801-97b9-496c9ae3cf55",
    "prId" : 84605,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84605#pullrequestreview-311068055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55cd6393-e43a-423d-bec4-67d775b32087",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "could we add a validation of diskEncryptionSetID before other operations? it needs to be in format `\"/subscriptions/{subs-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSet-name}\"`.",
        "createdAt" : "2019-11-04T03:51:52Z",
        "updatedAt" : "2019-11-04T13:30:28Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "27e394ad-799d-40ef-b0a6-350de49b2e42",
        "parentId" : "55cd6393-e43a-423d-bec4-67d775b32087",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "fixed",
        "createdAt" : "2019-11-04T13:31:30Z",
        "updatedAt" : "2019-11-04T13:31:31Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "b26467b34446d6371bcdd0266a745f6d1c156ca0",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\t\ttags = *(p.options.CloudTags)\n\t\t}\n\n\t\tvolumeOptions := &azure.ManagedDiskOptions{\n\t\t\tDiskName:            name,"
  },
  {
    "id" : "ea9fd65d-838c-4887-a068-99387e0acc0f",
    "prId" : 70477,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70477#pullrequestreview-170569805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26da7982-c68b-4828-b77a-6e232eab1f63",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Those two options only work for UltraSSD disk. Add a pre-check here and fail out if the disk is not UltraSSD.",
        "createdAt" : "2018-10-31T11:43:30Z",
        "updatedAt" : "2018-11-01T06:30:29Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "87cf063d-b935-471c-9c95-2f309d7c9db2",
        "parentId" : "26da7982-c68b-4828-b77a-6e232eab1f63",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "fixed",
        "createdAt" : "2018-11-01T06:31:34Z",
        "updatedAt" : "2018-11-01T06:31:34Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1bd292c764e5dac507c5d5ca52784b5d3c04c4d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +251,255 @@\t\t\tAvailabilityZone:   selectedAvailabilityZone,\n\t\t\tDiskIOPSReadWrite:  diskIopsReadWrite,\n\t\t\tDiskMBpsReadWrite:  diskMbpsReadWrite,\n\t\t}\n\t\tdiskURI, err = diskController.CreateManagedDisk(volumeOptions)"
  },
  {
    "id" : "d41f7381-c092-4fbb-9215-50ae37fdf1f9",
    "prId" : 67604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67604#pullrequestreview-148358290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b32b34e-8c7e-466d-b767-22d0983aad00",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "is this code change related to this PR?",
        "createdAt" : "2018-08-22T06:12:52Z",
        "updatedAt" : "2018-08-23T02:38:58Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "27891e16-aa03-4b4b-af43-837ead2465c7",
        "parentId" : "1b32b34e-8c7e-466d-b767-22d0983aad00",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "yep, managed disks and availability zones are also validated.",
        "createdAt" : "2018-08-22T07:22:19Z",
        "updatedAt" : "2018-08-23T02:38:58Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5101b5630d25f7f996b969ec48e0849b49136a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\tif zoned {\n\t\t\t// Set node affinity labels based on availability zone labels.\n\t\t\tif len(labels) > 0 {\n\t\t\t\trequirements := make([]v1.NodeSelectorRequirement, 0)\n\t\t\t\tfor k, v := range labels {"
  },
  {
    "id" : "169656eb-4f33-4954-a043-a6da05c71e5e",
    "prId" : 67229,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67229#pullrequestreview-145785953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f5d4e37-abf5-4aff-89b9-6b2936f7dcaa",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "Is there a way to get the number of fault domains dynamically (e.g. from Azure metadata) instead of hardcoding it to 3 here? Some of the regions do not appear to have 3 fault domains like West Central US, Canada East according to the link above.",
        "createdAt" : "2018-08-13T03:55:47Z",
        "updatedAt" : "2018-08-14T06:25:38Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "7bb55136-602a-4413-bc12-67c01b0e70f8",
        "parentId" : "2f5d4e37-abf5-4aff-89b9-6b2936f7dcaa",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "There is no API for such use cases. 3 works for all regions, so it won't break any clusters, even with 2 FDs.",
        "createdAt" : "2018-08-13T05:58:28Z",
        "updatedAt" : "2018-08-14T06:25:38Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "e5f03cba-ec40-4df4-be2e-2fe8189c08ed",
        "parentId" : "2f5d4e37-abf5-4aff-89b9-6b2936f7dcaa",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Is there any chance in the future that you would have more than 3 fault domains?",
        "createdAt" : "2018-08-13T18:46:26Z",
        "updatedAt" : "2018-08-14T06:25:38Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbdfd0fab2728f2b807286c8b3baf08552eb58ff",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +318,322 @@\t\t\t// There are at most 3 fault domains available in each region.\n\t\t\t// Refer https://docs.microsoft.com/en-us/azure/virtual-machines/windows/manage-availability.\n\t\t\tfor i := 0; i < 3; i++ {\n\t\t\t\trequirements := []v1.NodeSelectorRequirement{\n\t\t\t\t\t{"
  },
  {
    "id" : "ca37d3ae-8b71-47a5-8042-d6d886c18412",
    "prId" : 67229,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67229#pullrequestreview-145522412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2bfcabc-56b3-422d-aeb2-06221581dbcb",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "Is it going to be legal to have AllowedTopology set for un-zoned AzureDisks (with zones set to fault domains)? It seems that should not be allowed based on the logic below. If so, should it be checked for and rejected?",
        "createdAt" : "2018-08-13T04:15:01Z",
        "updatedAt" : "2018-08-14T06:25:38Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "8d2805f3-f554-47a9-be8e-dfe44b5a0ade",
        "parentId" : "e2bfcabc-56b3-422d-aeb2-06221581dbcb",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Good catch. Added in the new commit.",
        "createdAt" : "2018-08-13T06:04:40Z",
        "updatedAt" : "2018-08-14T06:25:38Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbdfd0fab2728f2b807286c8b3baf08552eb58ff",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +314,318 @@\t\t\t})\n\t\t} else {\n\t\t\t// Set node affinity labels based on fault domains.\n\t\t\t// This is required because unzoned AzureDisk can't be attached to zoned nodes.\n\t\t\t// There are at most 3 fault domains available in each region."
  },
  {
    "id" : "69146c4c-04f3-456c-9bf6-77a3cfa5a06d",
    "prId" : 67121,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67121#pullrequestreview-144668667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67418b9d-2970-4c23-af55-85ccc5143b81",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "`zonePresent` may be removed (since single-zone volumes is no longer a special case) and `false` passed directly to `SelectZoneForVolume` below",
        "createdAt" : "2018-08-08T15:58:51Z",
        "updatedAt" : "2018-08-08T16:05:04Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "b006f265-968f-4625-88fe-4288970f6cfa",
        "parentId" : "67418b9d-2970-4c23-af55-85ccc5143b81",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "yep, availabilityZone could be merged into availabilityZones. But since `SelectZoneForVolume` has already handled them inside, they are still kept here",
        "createdAt" : "2018-08-09T01:56:45Z",
        "updatedAt" : "2018-08-09T01:57:00Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "30fe79d63fc12e328ae287e43e7918e36909a71c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +121,125 @@\n\t\tzoned                    bool\n\t\tzonePresent              bool\n\t\tzonesPresent             bool\n\t\tstrZoned                 string"
  },
  {
    "id" : "0ed2e368-2b7a-4e3e-91f8-4e206c3bf075",
    "prId" : 67121,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67121#pullrequestreview-144668147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1fc702e-60a8-491a-9f39-f761222f7013",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "`zoned` seems to only have been initialized above this and assigned to down below through the call to `parseZoned`. Should this check be done after `zoned` is populated through `parseZoned`?",
        "createdAt" : "2018-08-08T16:00:39Z",
        "updatedAt" : "2018-08-08T16:05:04Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "868c7305-387a-44d0-b420-1b707141394e",
        "parentId" : "c1fc702e-60a8-491a-9f39-f761222f7013",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Oops, you're right.  Let me file another PR fix this",
        "createdAt" : "2018-08-09T01:53:25Z",
        "updatedAt" : "2018-08-09T01:53:25Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "30fe79d63fc12e328ae287e43e7918e36909a71c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t}\n\n\t\tif zoned {\n\t\t\treturn nil, errors.New(\"StorageClass option 'zoned' parameter is only supported for managed disks\")\n\t\t}"
  },
  {
    "id" : "7fdf919a-6414-4b2b-abc2-db9f22d2b1b8",
    "prId" : 66553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66553#pullrequestreview-142860175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d1d7f7-7002-4e89-a582-737e32606298",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "The zone parameters can also be specified through `allowedTopologies`. I am adding a volumeutils.PopulateZoneConfig() that will look at all the parameters: zone/zones/allowedTopologies and return a list of zones as well as do all the validation necessary. Once that is ready, we can switch to use that here and remove the validations above. ",
        "createdAt" : "2018-07-24T18:57:44Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "c25deeb9-f663-4a19-93d5-ebc604b93227",
        "parentId" : "05d1d7f7-7002-4e89-a582-737e32606298",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "@ddebroy Thanks. allowedTopologies will be added in the next PR.",
        "createdAt" : "2018-07-24T23:36:44Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "b1ae89aa-8ae5-4339-b742-d10c9bf7503d",
        "parentId" : "05d1d7f7-7002-4e89-a582-737e32606298",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I would suggest only supporting a \"zones\" argument.  The reason aws and gce have both parameters was because zones was added later and we couldn't break backwards compatibility with zone.  But since this is new for azure, I think the code can be simplified if you only support zones.",
        "createdAt" : "2018-08-02T15:52:19Z",
        "updatedAt" : "2018-08-02T15:52:20Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bfd2be2eaee5f1841dbca2242125ae35bd29450",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +188,192 @@\t\treturn nil, fmt.Errorf(\"both zone and zones StorageClass parameters must not be used at the same time\")\n\t}\n\n\tif cachingMode, err = normalizeCachingMode(cachingMode); err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "014e3d92-5d47-4609-a482-e547ffb1b712",
    "prId" : 66553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66553#pullrequestreview-140785922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a767d513-fa3a-47e6-8708-17ec8d97b33d",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "I still think `zoned` is not a good term, maybe `enablezone` is better",
        "createdAt" : "2018-07-26T02:49:07Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "c9fcc717-02c8-4f55-9861-a14d2e71779a",
        "parentId" : "a767d513-fa3a-47e6-8708-17ec8d97b33d",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "`zoned` is from the KEP and it looks good to me. @khenidak What's your opinion?",
        "createdAt" : "2018-07-26T08:09:32Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "9dfc8a3c-d4a1-4930-954e-7d63a6590687",
        "parentId" : "a767d513-fa3a-47e6-8708-17ec8d97b33d",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "`Zoned` is fine. `Enable` imply something that you an turn on/off which might be confusing.",
        "createdAt" : "2018-07-26T15:34:28Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bfd2be2eaee5f1841dbca2242125ae35bd29450",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +158,162 @@\t\t\tzonesPresent = true\n\t\t\tavailabilityZones = v\n\t\tcase \"zoned\":\n\t\t\tstrZoned = v\n\t\tdefault:"
  },
  {
    "id" : "cb433f90-36dc-4506-a05a-8ac0bdeca535",
    "prId" : 66553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66553#pullrequestreview-140623354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9163253-a6fa-44ce-a3ef-22d02c70609d",
        "parentId" : null,
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "add unit test for this?",
        "createdAt" : "2018-07-26T02:49:30Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "cbe8340b-3abb-4bde-91f4-0c94db235d41",
        "parentId" : "c9163253-a6fa-44ce-a3ef-22d02c70609d",
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "ACK",
        "createdAt" : "2018-07-26T08:22:49Z",
        "updatedAt" : "2018-07-30T05:34:22Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bfd2be2eaee5f1841dbca2242125ae35bd29450",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +73,77 @@// parseZoned parsed 'zoned' for storage class. If zoned is not specified (empty string),\n// then it defaults to true for managed disks.\nfunc parseZoned(zonedString string, kind v1.AzureDataDiskKind) (bool, error) {\n\tif zonedString == \"\" {\n\t\treturn kind == v1.AzureManagedDisk, nil"
  },
  {
    "id" : "4c1f3ab8-540a-44cb-bcf0-3d82a79617dc",
    "prId" : 64427,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64427#pullrequestreview-123891991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1778a52-2ce3-40ce-b2c9-aa55d011b8d2",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "nit: default to c.common.resourceGroup",
        "createdAt" : "2018-05-29T08:16:43Z",
        "updatedAt" : "2018-06-19T07:39:49Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "cc38e982-d41a-431b-bf87-b491bd352f75",
        "parentId" : "b1778a52-2ce3-40ce-b2c9-aa55d011b8d2",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "I set the default in `diskController.CreateManagedDisk`, mainly it's difficult to get `c.common.resourceGroup` in this code level",
        "createdAt" : "2018-05-29T08:30:36Z",
        "updatedAt" : "2018-06-19T07:39:49Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee290fe42e4a0d1549c7e9c5e10457480966a3fd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +150,154 @@\tdiskURI := \"\"\n\tif kind == v1.AzureManagedDisk {\n\t\tresourceGroup := \"\"\n\t\tif rg, found := p.options.PVC.Annotations[PVCAnnotationResourceGroup]; found {\n\t\t\tresourceGroup = rg"
  },
  {
    "id" : "976e4c84-74b1-4cbc-a392-7a7be5162810",
    "prId" : 64427,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64427#pullrequestreview-131568224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3965b58c-ac07-41f3-818f-be66acdec213",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "why use annotation instead of storage class parameter?",
        "createdAt" : "2018-06-18T13:55:05Z",
        "updatedAt" : "2018-06-19T07:39:49Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "32d293ec-ff61-41c8-8fdd-eef6d47c5a1b",
        "parentId" : "3965b58c-ac07-41f3-818f-be66acdec213",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "@rootfs if we add a new parameter in azure disk storage class, this requires API change, which would be a big change, cannot cherry-pick to old version. I could send out another seperate PR to address this, and would only be in v1.12. Just let me know your requirements, thanks.",
        "createdAt" : "2018-06-19T02:29:29Z",
        "updatedAt" : "2018-06-19T07:39:49Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      },
      {
        "id" : "60c31e37-2ca8-46f4-9a5b-56326fabbeb2",
        "parentId" : "3965b58c-ac07-41f3-818f-be66acdec213",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "let's keep this conversation live.\r\ncc @jsafrane ",
        "createdAt" : "2018-06-19T12:25:40Z",
        "updatedAt" : "2018-06-19T12:25:40Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "8cfd7d9e-dd8e-46bc-bab6-2216fc1cabdf",
        "parentId" : "3965b58c-ac07-41f3-818f-be66acdec213",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Adding new parameters to storage class indeed is API change, however there is no strict policy around that. Nothing prevents you from backporting this into older release. You don't need to regenerate anything and you don't need sig-apimachinery approval. Just update the code + docs.",
        "createdAt" : "2018-06-25T11:33:07Z",
        "updatedAt" : "2018-06-25T11:33:07Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee290fe42e4a0d1549c7e9c5e10457480966a3fd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +46,50 @@// PVCAnnotationResourceGroup is the annotation used on the PVC\n// to specify the resource group of azure managed disk that are not in the same resource group as the cluster.\nconst PVCAnnotationResourceGroup = \"volume.beta.kubernetes.io/resource-group\"\n\nfunc (d *azureDiskDeleter) GetPath() string {"
  }
]