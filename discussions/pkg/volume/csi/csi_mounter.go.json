[
  {
    "id" : "444b3dda-5247-401a-826e-730579e397a7",
    "prId" : 103244,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103244#pullrequestreview-698624688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e02d9008-8cd6-4a5d-993b-3763ad4edd78",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "nit: there is a slight inconsistency in how we handle fsgroup in node-publish and how we handle in node-stage. in node-stage, we check feature-gate inside the CSI client call. Can we keep it uniform? \r\n\r\nHaving said that - I know we will have to check for fsgroup support before calling `NodePublish` here, so as fsgroup permissions below can be skipped. \r\n\r\n",
        "createdAt" : "2021-07-01T20:00:27Z",
        "updatedAt" : "2021-07-01T20:00:27Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "5a0f35c0-d9e3-44b5-858c-e672b47cdb5e",
        "parentId" : "e02d9008-8cd6-4a5d-993b-3763ad4edd78",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Yeah, to make it consistent I was thinking of two options:\r\n\r\n1. Add a capabilities check in NodePublishVolume, which then makes a redundant `NodeGetCapabilities` gRPC call\r\n2. Move the capabilities check from NodeStageVolume to MountDevice. I decided against this because relying on the caller (and having to include a comment to describe the behavior) is just slightly more error prone IMO, but I think either this or the current form would be OK\r\n\r\nWDYT?",
        "createdAt" : "2021-07-01T21:33:05Z",
        "updatedAt" : "2021-07-01T21:33:57Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "846675e4-28fa-499e-86fb-0e5f3ea7f992",
        "parentId" : "e02d9008-8cd6-4a5d-993b-3763ad4edd78",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I think that - it is caller that should verify feature gate and if plugin supports `VOLUME_MOUNT_GROUP`. We can make a common util function somewhere and call it in both places.",
        "createdAt" : "2021-07-01T22:40:36Z",
        "updatedAt" : "2021-07-01T22:40:36Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "26632b32-ff17-45dc-b204-93b0af5812bb",
        "parentId" : "e02d9008-8cd6-4a5d-993b-3763ad4edd78",
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Sounds good. I opted not to have a util func because it ended up looking a bit messy: `SetupAt` needs a both a `driverSupportsCSIVolumeMountGroup` bool and an FSGroup arg, whereas `MountDevice` only needs the final arg; I wanted to have a different log message before calls to NodePublish and NodeStage, which would add extra args to the util func.",
        "createdAt" : "2021-07-03T23:13:11Z",
        "updatedAt" : "2021-07-03T23:13:11Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "c50b3074fe876a91ac4a67d917b8f6c8caa922b2",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\t}\n\t}\n\n\terr = csi.NodePublishVolume(\n\t\tctx,"
  },
  {
    "id" : "013e96f3-de7e-40e0-b483-dc87da20cc55",
    "prId" : 103244,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103244#pullrequestreview-697701924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c69e7f7-2420-4626-b966-e36d4904ce8b",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "for ease of debugging - lets add a log line at V3 that fsgroup of this volume will be handled by driver.",
        "createdAt" : "2021-07-01T22:36:24Z",
        "updatedAt" : "2021-07-01T22:37:49Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "c50b3074fe876a91ac4a67d917b8f6c8caa922b2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +246,250 @@\t\tif driverSupportsCSIVolumeMountGroup {\n\t\t\tklog.V(3).Infof(\"Driver %s supports applying FSGroup (has VOLUME_MOUNT_GROUP node capability). Delegating FSGroup application to the driver through NodePublishVolume.\", c.driverName)\n\t\t\tnodePublishFSGroupArg = mounterArgs.FsGroup\n\t\t}\n\t}"
  },
  {
    "id" : "989df064-2bb2-4f75-9b46-420f670b4c7b",
    "prId" : 102653,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102653#pullrequestreview-677809687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72cf9fb4-2274-4dc3-af46-47125f5e98ab",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Can we add a unit test for this?",
        "createdAt" : "2021-06-07T19:33:24Z",
        "updatedAt" : "2021-06-07T19:33:25Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "1eb8060dd618430cad584db4d564159275612bd9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +402,406 @@\t}\n\tif !hasReadWriteOnce(c.spec.PersistentVolume.Spec.AccessModes) {\n\t\tklog.V(4).Info(log(\"mounter.SetupAt WARNING: skipping fsGroup, only support ReadWriteOnce access mode\"))\n\t\treturn false\n\t}"
  },
  {
    "id" : "dfd12d2a-8335-4eab-bc5d-293c455f09e9",
    "prId" : 102653,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102653#pullrequestreview-679721648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3080dac2-aac1-4f2e-8156-effa763ffdb9",
        "parentId" : null,
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Is there really no way to support fsGroup for CSI ephemeral inline volumes? \r\n\r\nAnd if that is an intentional limitation, should it be documented somewhere?\r\n\r\n",
        "createdAt" : "2021-06-09T12:23:38Z",
        "updatedAt" : "2021-06-09T12:24:50Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "d5d058d3-3b36-4b97-933d-ceaad62aa486",
        "parentId" : "3080dac2-aac1-4f2e-8156-effa763ffdb9",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "there is a way. I left a comment above https://github.com/kubernetes/kubernetes/pull/102653#discussion_r646889247 explaining that. ",
        "createdAt" : "2021-06-09T14:18:50Z",
        "updatedAt" : "2021-06-09T14:18:50Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "1eb8060dd618430cad584db4d564159275612bd9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +395,399 @@\tif c.spec.PersistentVolume == nil {\n\t\tklog.V(4).Info(log(\"mounter.SetupAt Warning: skipping fsGroup permission change, no access mode available. The volume may only be accessible to root users.\"))\n\t\treturn false\n\t}\n\tif c.spec.PersistentVolume.Spec.AccessModes == nil {"
  },
  {
    "id" : "3c65407c-d99c-4d92-8a2a-70216bc0d506",
    "prId" : 101441,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101441#pullrequestreview-646485114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef2cfb47-a123-4625-9629-f6758e322038",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "sorry about keep going back and forth on this but - we should be explicit in comment as well that we are only deprecating support for removing NodePublish target_path, removal of parent directories are still a responsibility of kubelet.\r\n\r\nSo something like:\r\n\r\nDeprecation: Removal of target_path provided in NodePublish RPC call (in this case location `dir`)\r\nMUST be done by the CSI plugin according to the spec. \r\nThis will no longer be done directly as part of TearDown by the kubelet in the future.Kubelet will only be\r\nresponsible for removal of json data files it creates and parent directories.\r\n\r\n",
        "createdAt" : "2021-04-27T23:26:11Z",
        "updatedAt" : "2021-04-27T23:52:53Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "70e09ae0-bc87-4af7-8115-bdfdb5d6f59d",
        "parentId" : "ef2cfb47-a123-4625-9629-f6758e322038",
        "authorId" : "9d24241f-6d25-4b9f-9d9c-8e5aed00c39d",
        "body" : "All good, thanks for the feedback :+1: ",
        "createdAt" : "2021-04-27T23:53:21Z",
        "updatedAt" : "2021-04-27T23:53:21Z",
        "lastEditedBy" : "9d24241f-6d25-4b9f-9d9c-8e5aed00c39d",
        "tags" : [
        ]
      }
    ],
    "commit" : "260426bf445935d760cc09679637c19b1017e544",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +371,375 @@\t// by the kubelet in the future. Kubelet will only be responsible for\n\t// removal of json data files it creates and parent directories.\n\tif err := removeMountDir(c.plugin, dir); err != nil {\n\t\treturn errors.New(log(\"mounter.TearDownAt failed to clean mount dir [%s]: %v\", dir, err))\n\t}"
  },
  {
    "id" : "6d3ea10d-1020-45e6-b3c7-ec16fa0e5803",
    "prId" : 95892,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95892#pullrequestreview-520357717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60e70146-ad58-443a-b050-8407d5326168",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Can we fix `GetFullQualifiedPluginNameForVolume` instead to consider `CSIVolumeSource` correctly?",
        "createdAt" : "2020-10-27T18:48:48Z",
        "updatedAt" : "2020-11-04T11:13:55Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "edea64c4-ff6d-402d-8df6-b1caa96aeb4f",
        "parentId" : "60e70146-ad58-443a-b050-8407d5326168",
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "updated. ",
        "createdAt" : "2020-10-30T03:39:47Z",
        "updatedAt" : "2020-11-04T11:13:55Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      }
    ],
    "commit" : "db53ca01da41dec1e5d6a228ba0cd452837ef9a2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t// fullPluginName helps to distinguish different driver from csi plugin\n\t\terr := volume.SetVolumeOwnership(c, mounterArgs.FsGroup, mounterArgs.FSGroupChangePolicy, util.FSGroupCompleteHook(c.plugin, c.spec))\n\t\tif err != nil {\n\t\t\t// At this point mount operation is successful:\n\t\t\t//   1. Since volume can not be used by the pod because of invalid permissions, we must return error"
  },
  {
    "id" : "ce6f9a63-111d-4192-ad74-4c0c8e770fc5",
    "prId" : 95866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95866#pullrequestreview-517325077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b547949a-e1cd-42c5-b90b-d58b547bd063",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "should the plugin name be \"csi\", or should it be the name of the csi driver?",
        "createdAt" : "2020-10-26T22:36:55Z",
        "updatedAt" : "2020-10-26T22:56:58Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9297ee0f-4dd2-4e11-90c7-8fcd1d136f06",
        "parentId" : "b547949a-e1cd-42c5-b90b-d58b547bd063",
        "authorId" : "5d64207d-3933-4932-8517-aace5b6574c0",
        "body" : "+1, it should probably be c.driverName or maybe pluginName/driverName",
        "createdAt" : "2020-10-26T23:48:59Z",
        "updatedAt" : "2020-10-26T23:49:00Z",
        "lastEditedBy" : "5d64207d-3933-4932-8517-aace5b6574c0",
        "tags" : [
        ]
      },
      {
        "id" : "66318900-1dbf-4fa2-87f6-9b17830cc4ca",
        "parentId" : "b547949a-e1cd-42c5-b90b-d58b547bd063",
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "ohh, sorry! I will take other PR to fix it.  Thanks for pointing at it! ",
        "createdAt" : "2020-10-27T01:14:33Z",
        "updatedAt" : "2020-10-27T01:14:33Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      },
      {
        "id" : "12013e30-d28f-4ec1-9aee-8409338cdecb",
        "parentId" : "b547949a-e1cd-42c5-b90b-d58b547bd063",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "+1 to capturing full plugin name. we should use `GetFullQualifiedPluginNameForVolume` I think.\r\n\r\n",
        "createdAt" : "2020-10-27T03:05:20Z",
        "updatedAt" : "2020-10-27T03:05:21Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "41a9582e-f054-4df8-8a9a-d903fb132ca2",
        "parentId" : "b547949a-e1cd-42c5-b90b-d58b547bd063",
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "IMO,  c.driverName is more detailed maybe.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/87cc9bca0fcbbdf1b8232c9c71e50023d62667c3/pkg/volume/csi/csi_plugin.go#L357-L370 \r\n\r\nc.driverName gets driver name from `CSIVolumeSource` and `CSIPersistentVolumeSource` \r\n\r\nWhile, `GetFullQualifiedPluginNameForVolume` get driver name from `CSIPersistentVolumeSource`\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/87cc9bca0fcbbdf1b8232c9c71e50023d62667c3/pkg/volume/util/metrics.go#L122-L127\r\n\r\nSee https://github.com/kubernetes/kubernetes/pull/95892\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-10-27T03:35:24Z",
        "updatedAt" : "2020-10-27T03:35:25Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ed770977443cf0cf34cab743085d5c31b2f8034",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +280,284 @@\n\tif c.supportsFSGroup(fsType, mounterArgs.FsGroup, c.fsGroupPolicy) {\n\t\terr := volume.SetVolumeOwnership(c, mounterArgs.FsGroup, mounterArgs.FSGroupChangePolicy, util.FSGroupCompleteHook(c.plugin.GetPluginName()))\n\t\tif err != nil {\n\t\t\t// At this point mount operation is successful:"
  },
  {
    "id" : "59adbe0b-f870-4a3e-bdca-bba9007ecfd6",
    "prId" : 93130,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93130#pullrequestreview-489159402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63db70dd-f979-4732-b0dd-78954252f6ce",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "A side effect that we need to think about is since this function will be called much more frequently for the plugins that enable it, are there any log statements we need to conditionally not log?",
        "createdAt" : "2020-09-11T00:52:21Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "81a6787a-1a08-42e3-aaa9-e6b4d567105b",
        "parentId" : "63db70dd-f979-4732-b0dd-78954252f6ce",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "looking at the SetupAt function which will be called more frequently: all informational logs are V(4) and other logs are all about errors.",
        "createdAt" : "2020-09-12T04:41:25Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "e36fb237-55d2-4f62-b866-e12f09a29000",
        "parentId" : "63db70dd-f979-4732-b0dd-78954252f6ce",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I need to double check the log level for other messages in the remount path.",
        "createdAt" : "2020-09-15T19:16:24Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "c6ceca67-1c7f-406e-b244-70e13df292af",
        "parentId" : "63db70dd-f979-4732-b0dd-78954252f6ce",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Looks like we use log level 5 for logs during remount: https://github.com/kubernetes/kubernetes/blob/e23d83eead3b5ae57731afb0209f4a2aaa4009dd/pkg/kubelet/volumemanager/reconciler/reconciler.go#L271",
        "createdAt" : "2020-09-15T22:49:02Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2859cd89b0ec00054219ed9988c6dccff39a0c8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +227,231 @@\t\treturn volumetypes.NewTransientOperationFailure(log(\"mounter.SetUpAt failed to assemble volume attributes: %v\", err))\n\t}\n\tvolAttribs = mergeMap(volAttribs, podAttrs)\n\n\t// Inject pod service account token into volume attributes"
  },
  {
    "id" : "98de1af4-2c03-4f96-aaeb-30c98798171b",
    "prId" : 93130,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93130#pullrequestreview-528590127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d5e2b85-ebe1-4c62-b167-9c2fefcf2c95",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "how frequently is republish called? do we recreate all tokens on every republish call or do we reuse the previously requested one if it is still valid?",
        "createdAt" : "2020-11-11T18:59:48Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d24ff24f-66d3-4a03-b4c3-eb2cda84c7fb",
        "parentId" : "4d5e2b85-ebe1-4c62-b167-9c2fefcf2c95",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "100ms between republish calls. the tokens are cached in kubelet. it is using the same handler as projected tokens.",
        "createdAt" : "2020-11-11T22:33:07Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "22f53b5b-ce4b-41f1-a820-327fcc6161d7",
        "parentId" : "4d5e2b85-ebe1-4c62-b167-9c2fefcf2c95",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does that mean we're calling the CSI driver every 100ms?",
        "createdAt" : "2020-11-11T22:39:17Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3349a9ac-2e0f-481c-aee9-4e723be27896",
        "parentId" : "4d5e2b85-ebe1-4c62-b167-9c2fefcf2c95",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "no because every reconciler loop takes some time and the reconciler loop calls republish. https://github.com/kubernetes/kubernetes/blob/8be0a29ce027ecc75004c1a4945a87d128c4f45f/pkg/kubelet/volumemanager/reconciler/reconciler.go#L80-L81\r\n\r\nfrom what i observed from e2e test, it is about 2~3/second.",
        "createdAt" : "2020-11-11T22:46:06Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2859cd89b0ec00054219ed9988c6dccff39a0c8",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +342,346 @@\n\toutputs := map[string]authenticationv1.TokenRequestStatus{}\n\tfor _, tokenRequest := range csiDriver.Spec.TokenRequests {\n\t\taudience := tokenRequest.Audience\n\t\taudiences := []string{audience}"
  },
  {
    "id" : "f5796e5c-020f-4301-960e-e371c349863c",
    "prId" : 88759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88759#pullrequestreview-526557747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48c78b92-cd0b-44f2-ba7c-195eb9a86ae2",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can we add a unit test to make sure we're creating the right directories?",
        "createdAt" : "2020-11-07T02:19:50Z",
        "updatedAt" : "2020-11-09T18:57:49Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "cd3c9e7a-5742-4462-8877-a9d501b45371",
        "parentId" : "48c78b92-cd0b-44f2-ba7c-195eb9a86ae2",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Added",
        "createdAt" : "2020-11-09T18:57:39Z",
        "updatedAt" : "2020-11-09T18:57:49Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "6060c57ba3a944bd133968fd669980c97af846c6",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +203,207 @@\n\t// create target_dir before call to NodePublish\n\tparentDir := filepath.Dir(dir)\n\tif err := os.MkdirAll(parentDir, 0750); err != nil {\n\t\treturn errors.New(log(\"mounter.SetUpAt failed to create dir %#v:  %v\", parentDir, err))"
  },
  {
    "id" : "e94484e8-29d4-466d-949a-f35a1edc0ae3",
    "prId" : 83747,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83747#pullrequestreview-300556801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca64303-71fa-43d5-858f-e5c08df93336",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "should we return error instead?  I guess that would also introduce the problem that we wouldn't try cleaning up the mount since asw won't be marked as mounted. cc @jingxu97 ",
        "createdAt" : "2019-10-10T18:54:35Z",
        "updatedAt" : "2019-10-10T18:54:36Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "cdda0fdd-681a-4636-843d-c506858e3ed1",
        "parentId" : "7ca64303-71fa-43d5-858f-e5c08df93336",
        "authorId" : "6b2231c4-6572-4943-93e6-5a2e21c0d4c8",
        "body" : "I wasn't really sure what to do about it. The old implementation just assumed `false` and logged the error. I suppose moving the SELinux check to here does raise the possibility of backing out in the same way as failing during the fsgroup change a few lines below.\r\n\r\nThe question is whether we **should** fail the mount if we can't detect the SELinux status... I could go either way on that.",
        "createdAt" : "2019-10-10T19:04:26Z",
        "updatedAt" : "2019-10-10T19:04:26Z",
        "lastEditedBy" : "6b2231c4-6572-4943-93e6-5a2e21c0d4c8",
        "tags" : [
        ]
      },
      {
        "id" : "7100bf41-a948-41cd-8002-7ccee2505868",
        "parentId" : "7ca64303-71fa-43d5-858f-e5c08df93336",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "It might be problematic to fail the mount if selinux support can't be determined. I would vote for keeping existing behaviour and assume selinux is not supported if we can't determine it.",
        "createdAt" : "2019-10-10T21:46:29Z",
        "updatedAt" : "2019-10-10T21:46:29Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "8aa56e6c-0153-46cc-9ed6-186c4c5b2805",
        "parentId" : "7ca64303-71fa-43d5-858f-e5c08df93336",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It seems like the error handling below is also problematic. If applyFSGroup returns error and rolling back the mount failed, then we may also get into a bad state. But I guess that is less likely to happen in practice.",
        "createdAt" : "2019-10-11T00:42:15Z",
        "updatedAt" : "2019-10-11T00:42:15Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9d2349a9-71b5-415c-bb8f-fa6428411a6c",
        "parentId" : "7ca64303-71fa-43d5-858f-e5c08df93336",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "> If applyFSGroup returns error and rolling back the mount failed, then we may also get into a bad state. But I guess that is less likely to happen in practice.\r\n\r\nThis is a separate issue that could be fixed by returning uncertain mount status that is @gnufied working on.",
        "createdAt" : "2019-10-11T09:05:33Z",
        "updatedAt" : "2019-10-11T09:05:33Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "55881f2fc4b8dacdba32a317d92e4ca1f1013512",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +263,267 @@\tc.supportsSELinux, err = c.kubeVolHost.GetHostUtil().GetSELinuxSupport(dir)\n\tif err != nil {\n\t\tklog.V(2).Info(log(\"error checking for SELinux support: %s\", err))\n\t}\n"
  },
  {
    "id" : "60602d12-c3e0-4ddc-85c5-d487149d99e6",
    "prId" : 82492,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82492#pullrequestreview-327110551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20fd5050-ba1d-49b5-b4f0-ac6ad7245a1f",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "maybe add comment here. At this point, mount is successful, but we want to \r\n1. return error so that volume cannot be used since ownership is not set correctly\r\n2. return NewUncertainProgressError so that volume will be marked in actual state and mount will be cleaned up when it is needed.",
        "createdAt" : "2019-12-03T20:38:42Z",
        "updatedAt" : "2019-12-12T03:10:37Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "bf7dd24b-b9be-4fb4-9a1b-0e8a5cd5734f",
        "parentId" : "20fd5050-ba1d-49b5-b4f0-ac6ad7245a1f",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "added comment",
        "createdAt" : "2019-12-04T19:51:51Z",
        "updatedAt" : "2019-12-12T03:10:37Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca532c6fb2c08f859eca13e0557f3b2aec9a18e0",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t//   2. Since mount is successful, we must record volume as mounted in uncertain state, so it can be\n\t\t//      cleaned up.\n\t\treturn volumetypes.NewUncertainProgressError(fmt.Sprintf(\"applyFSGroup failed for vol %s: %v\", c.volumeID, err))\n\t}\n"
  },
  {
    "id" : "fec585e8-88ad-460f-8c72-9c07dbba2c3d",
    "prId" : 82492,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82492#pullrequestreview-327948145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3a89acd-3962-42c5-9ed7-2e4c7615b99d",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "MkdirAll() can be called right before NodePublishVolume call, right? so all previous errors does not need to worry about remove dir.",
        "createdAt" : "2019-12-06T01:06:59Z",
        "updatedAt" : "2019-12-12T03:10:37Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca532c6fb2c08f859eca13e0557f3b2aec9a18e0",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +258,262 @@\n\tif err != nil {\n\t\t// If operation finished with error then we can remove the mount directory.\n\t\tif volumetypes.IsOperationFinishedError(err) {\n\t\t\tif removeMountDirErr := removeMountDir(c.plugin, dir); removeMountDirErr != nil {"
  },
  {
    "id" : "54007ca2-ee97-4fbc-a947-d76a148ed9f1",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211245121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a52b3682-bcb8-4632-b34c-ecde1263ffca",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "do you want to check that driver mode is persistent here? (under the feature gate)",
        "createdAt" : "2019-03-02T02:37:51Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "2e1ee395-6703-445a-aec0-1e1958210ddf",
        "parentId" : "a52b3682-bcb8-4632-b34c-ecde1263ffca",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "done.",
        "createdAt" : "2019-03-06T14:02:18Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +161,165 @@\t\t}\n\n\t\tfsType = pvSrc.FSType\n\n\t\tvolAttribs = pvSrc.VolumeAttributes"
  },
  {
    "id" : "5423123d-3cd6-4b95-828c-8c9750774123",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211543814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67c66acb-ba70-4136-8f72-3ad2eaf3d065",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "nit: `getCSISourceFromSpec`",
        "createdAt" : "2019-03-06T23:54:45Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "41c4e305-7613-4264-9e36-84bc50f3669e",
        "parentId" : "67c66acb-ba70-4136-8f72-3ad2eaf3d065",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "Yes, I will overhaul the func names for retrieving volume sources.",
        "createdAt" : "2019-03-07T00:14:31Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +116,120 @@\tdefer cancel()\n\n\tvolSrc, pvSrc, err := getSourceFromSpec(c.spec)\n\tif err != nil {\n\t\tklog.Error(log(\"mounter.SetupAt failed to get CSI persistent source: %v\", err))"
  },
  {
    "id" : "973dcdf7-3f57-409e-b353-7ffb27d9fcca",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211838482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa8012ca-1161-4f6b-850b-82c7bcc354ae",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "nit: `volumeHandle` == `volumeID`? Maybe we should rename the `volumeID` to `volumeHandle` on the `csiMountMgr`",
        "createdAt" : "2019-03-06T23:55:52Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "d1f8e867-4cff-4bfd-b45a-4836617b83e2",
        "parentId" : "aa8012ca-1161-4f6b-850b-82c7bcc354ae",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "yeah it should be standard everywhere.",
        "createdAt" : "2019-03-07T15:14:01Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +123,127 @@\n\tdriverName := c.driverName\n\tvolumeHandle := c.volumeID\n\treadOnly := c.readOnly\n\taccessMode := api.ReadWriteOnce"
  },
  {
    "id" : "e7121ff7-acdd-432d-8ca1-d9d7a8b46022",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211539922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5901df4-baa9-4933-b688-d43b1e1583ba",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "nit: imo not really the use case for a `switch` statement. an `if, else if` block should suffice.",
        "createdAt" : "2019-03-06T23:59:47Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +137,141 @@\t)\n\n\tswitch {\n\tcase volSrc != nil:\n\t\tif !utilfeature.DefaultFeatureGate.Enabled(features.CSIInlineVolume) {"
  },
  {
    "id" : "4e78f125-04a3-4610-a8b7-a4621a5908f2",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211841076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df34fe4d-8957-4e04-9eae-6ac53dac6ff6",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "what does this comment mean? it doesn't seem to have anything to do with surrounding calls",
        "createdAt" : "2019-03-07T00:01:45Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "f9e79ed7-fa0a-43ab-b9fb-4f1392cfebeb",
        "parentId" : "df34fe4d-8957-4e04-9eae-6ac53dac6ff6",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "Will check.",
        "createdAt" : "2019-03-07T15:18:07Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +191,195 @@\t\t}\n\n\t\t// search for attachment by VolumeAttachment.Spec.Source.PersistentVolumeName\n\t\tif c.publishContext == nil {\n\t\t\tnodeName := string(c.plugin.host.GetNodeName())"
  },
  {
    "id" : "32370e9d-bb20-4ad0-a4ec-aef0df1b9403",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211840966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3a626e2-f3a3-47dd-9a79-4c21ee11c672",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "nit: logic here is a little wacky. Can we just do what is in the else block every time? and just initialize volAttribs to not nil somewhere outside of these if statements",
        "createdAt" : "2019-03-07T00:04:01Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "a7e3b254-273a-4e20-ac26-0fa23c0d8bb3",
        "parentId" : "d3a626e2-f3a3-47dd-9a79-4c21ee11c672",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "Will take a look.",
        "createdAt" : "2019-03-07T15:17:56Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +229,233 @@\t}\n\tif podAttrs != nil {\n\t\tif volAttribs == nil {\n\t\t\tvolAttribs = podAttrs\n\t\t} else {"
  },
  {
    "id" : "8902c030-54b0-449f-86be-f44559d66de8",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211547288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "357c0c7f-21df-440a-8997-733b6aa7551a",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "the way we're initializing empty variables, then setting variables in giant switch blocks up above, then using them down here makes me uneasy.\r\n\r\nIt is hard to tell which of these variables is *allowed* to be `nil` or `empty`, which are `required` and whether they are actually set at this point. I don't really have a solution to this but I wanted to flag it in case you could think of a better way.\r\n\r\n@msau42 have any ideas on how to deal with this?",
        "createdAt" : "2019-03-07T00:06:39Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "4345cd22-add0-47cb-83fd-50337b01b6f3",
        "parentId" : "357c0c7f-21df-440a-8997-733b6aa7551a",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Would it help if we defined some internal type, and then had translation methods from PVSource/InlineSource -> internal type?",
        "createdAt" : "2019-03-07T00:24:37Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "bceca8d6-6b56-41ba-8bd6-9bf58b643ec5",
        "parentId" : "357c0c7f-21df-440a-8997-733b6aa7551a",
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "I think that would be an elegant solution.\r\n@vladimirvivien I think we're running low on time so lets not solve it in this PR but lets create an issue for it and link it in a TODO comment.",
        "createdAt" : "2019-03-07T00:28:17Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +240,244 @@\terr = csi.NodePublishVolume(\n\t\tctx,\n\t\tvolumeHandle,\n\t\treadOnly,\n\t\tdeviceMountPath,"
  },
  {
    "id" : "62111e89-383f-4d58-9829-9369192d19af",
    "prId" : 74086,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74086#pullrequestreview-211842809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7614b9e-3ee5-43c9-9380-222a43d862a5",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "I'm a little confused. This is very similar to the Attachment name, but... slightly different? could you add a comment here explaining what this is exactly and what it's used for",
        "createdAt" : "2019-03-07T00:08:21Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "9e2bf611-c6ae-499b-a890-0ba47117cf70",
        "parentId" : "d7614b9e-3ee5-43c9-9380-222a43d862a5",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "ok",
        "createdAt" : "2019-03-07T15:20:56Z",
        "updatedAt" : "2019-03-08T17:42:34Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "923ad369c8a65c8aac47b22457e7e18bbcc1f335",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +445,449 @@\n// makeVolumeHandle returns csi-<sha256(podUID,volSourceSpecName)>\nfunc makeVolumeHandle(podUID, volSourceSpecName string) string {\n\tresult := sha256.Sum256([]byte(fmt.Sprintf(\"%s%s\", podUID, volSourceSpecName)))\n\treturn fmt.Sprintf(\"csi-%x\", result)"
  },
  {
    "id" : "8e4ccf71-1f75-4624-b50a-06a93d6bd1e4",
    "prId" : 67898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67898#pullrequestreview-149816330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "166dd475-efcd-473a-9596-718f37829afe",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Unit tests?",
        "createdAt" : "2018-08-27T17:57:45Z",
        "updatedAt" : "2018-10-12T16:18:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "85b224856d67611060402ae7e6da047ee9aff35f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +196,200 @@\t\tnodePublishSecrets,\n\t\tfsType,\n\t\tc.spec.PersistentVolume.Spec.MountOptions,\n\t)\n"
  },
  {
    "id" : "152f35c8-e3bf-4589-a5ef-e9ca1b53180a",
    "prId" : 67280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67280#pullrequestreview-234834089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7283c877-ad84-46eb-9be9-90eb59efab80",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "instead of skipping, why not we fail the setUp and return the event to the user indicating fsGroup is not allowed in this case?",
        "createdAt" : "2019-05-08T01:49:51Z",
        "updatedAt" : "2019-05-08T01:49:51Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3bc731143a4c3c1e103199fe6d36f3b6fcd15b2",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +341,345 @@\t\t}\n\t\tif !hasReadWriteOnce(accessModes) {\n\t\t\tglog.V(4).Info(log(\"mounter.SetupAt WARNING: skipping fsGroup, only support ReadWriteOnce access mode\"))\n\t\t\treturn nil\n\t\t}"
  },
  {
    "id" : "d4e1c02c-01ec-4dfd-a9ef-2d63b4d70e1f",
    "prId" : 61096,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61096#pullrequestreview-105219076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a53c7c-bf8d-445a-b626-717ad80ab99f",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: `\"fetching NodePublishSecretRef failed for secret %s/%s failed: %v`",
        "createdAt" : "2018-03-19T16:50:03Z",
        "updatedAt" : "2018-03-20T04:59:23Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "95c04bae-ddc3-4eda-85f5-697e6a47593b",
        "parentId" : "60a53c7c-bf8d-445a-b626-717ad80ab99f",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "Same as above.",
        "createdAt" : "2018-03-20T05:01:31Z",
        "updatedAt" : "2018-03-20T05:01:31Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9606696c91f98b6eec5ba9dcdfd582498f9873e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +156,160 @@\tnodePublishSecrets := map[string]string{}\n\tif csiSource.NodePublishSecretRef != nil {\n\t\tnodePublishSecrets, err = getCredentialsFromSecret(c.k8s, csiSource.NodePublishSecretRef)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"fetching NodePublishSecretRef %s/%s failed: %v\","
  },
  {
    "id" : "95fc6c81-6799-4f7b-897c-91a3447d44c8",
    "prId" : 60118,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60118#pullrequestreview-98790280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50761f23-bfad-4344-9be6-0002e45c54fa",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Not your code, but, can you add a commit to remove probe related code in this PR too:\r\n\r\n```go\r\n...\r\n \tif err := csi.NodeProbe(ctx, csiVersion); err != nil {\r\n...\r\n```\r\nand all related comments, e.g.:\r\n```go\r\n// TODO (vladimirvivien) use this method to probe controller using CSI.NodeProbe() call\r\n```",
        "createdAt" : "2018-02-22T23:16:30Z",
        "updatedAt" : "2018-02-23T21:51:08Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "fa8658ea-6771-4ecc-8869-c3dde609ba19",
        "parentId" : "50761f23-bfad-4344-9be6-0002e45c54fa",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "done",
        "createdAt" : "2018-02-23T01:42:36Z",
        "updatedAt" : "2018-02-23T21:51:08Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa462eab49387fe5151ac78cbd44ae25965b876",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\tfsType = defaultFSType\n\t}\n\tnodePublishCredentials := map[string]string{}\n\tif csiSource.NodePublishSecretRef != nil {\n\t\tnodePublishCredentials = getCredentialsFromSecret(c.k8s, csiSource.NodePublishSecretRef)"
  },
  {
    "id" : "a202e84c-b574-4b91-86db-6962439a2f71",
    "prId" : 60118,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60118#pullrequestreview-99045459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaeabf85-d5ee-43af-9467-7316cd0fbf8a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "here and below, I expected to handle an error return from getCredentialsFromSecret by short-circuiting and returning the error, rather than making the csi call with an empty credentials map",
        "createdAt" : "2018-02-23T20:40:35Z",
        "updatedAt" : "2018-02-23T21:51:08Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aa462eab49387fe5151ac78cbd44ae25965b876",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +182,186 @@\tnodePublishCredentials := map[string]string{}\n\tif csiSource.NodePublishSecretRef != nil {\n\t\tnodePublishCredentials = getCredentialsFromSecret(c.k8s, csiSource.NodePublishSecretRef)\n\t}\n\terr = csi.NodePublishVolume("
  },
  {
    "id" : "86877b1f-740e-4fe4-a598-59770c084c77",
    "prId" : 56836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56836#pullrequestreview-186816656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ee0bce3-c005-4656-a168-2d128e3576c0",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "We maybe, just maybe, should not have this check. Consider if a SP backs a storage volume using the local root FS (for something like an `emptyDir` or `localStorage`. We can leave it as is, and add a TODO to revisit in the future.",
        "createdAt" : "2017-12-08T17:49:28Z",
        "updatedAt" : "2017-12-08T20:24:48Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ed6b3e67-b9e1-4593-b733-45b7460d0fdd",
        "parentId" : "8ee0bce3-c005-4656-a168-2d128e3576c0",
        "authorId" : "2dfee1ce-347f-4fd6-869f-a078ffc28288",
        "body" : "@saad-ali  I recently ran into this issue.  This path is actually bind mounted in the csi-driver, however when pod is terminated, it skips unmounting due to this check(isDirMounted returns false).  therefore, the csi-driver will also not unmount. \r\nShould we revert this check ? ",
        "createdAt" : "2018-12-18T20:29:12Z",
        "updatedAt" : "2018-12-18T20:29:13Z",
        "lastEditedBy" : "2dfee1ce-347f-4fd6-869f-a078ffc28288",
        "tags" : [
        ]
      },
      {
        "id" : "9c719c0f-b57c-4909-b9ea-bdb6c38d96f3",
        "parentId" : "8ee0bce3-c005-4656-a168-2d128e3576c0",
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "+1 should revert this check.",
        "createdAt" : "2018-12-19T09:45:45Z",
        "updatedAt" : "2018-12-19T09:45:45Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      },
      {
        "id" : "b450b174-7825-47ab-ba2a-44e9fc4268b7",
        "parentId" : "8ee0bce3-c005-4656-a168-2d128e3576c0",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Agreed. Please open an issue to track this and create a PR to remove this check. We must leave it up to the CSI driver to decide what tear down means.\r\n\r\nCC @vladimirvivien @msau42 ",
        "createdAt" : "2018-12-20T01:13:49Z",
        "updatedAt" : "2018-12-20T01:13:49Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "0ac60da5-cf6c-40e3-ab39-349a1b955e40",
        "parentId" : "8ee0bce3-c005-4656-a168-2d128e3576c0",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "PR #72008 is addressing this",
        "createdAt" : "2018-12-20T01:17:11Z",
        "updatedAt" : "2018-12-20T01:17:11Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "23d59cbe5477fcb905ded72e94026331a566658f",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +241,245 @@\n\tif !mounted {\n\t\tglog.V(4).Info(log(\"unmounter.Teardown skipping unmout, dir not mounted [%s]\", dir))\n\t\treturn nil\n\t}"
  },
  {
    "id" : "5d216113-d8ef-4bb3-9d15-d67ddf66cbc7",
    "prId" : 54529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54529#pullrequestreview-78129444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0b4886c-00cf-4bef-a5cf-4bae58728427",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: wouldn't hurt to `EscapeQualifiedNameForDisk(...)` the `driverName` too, though it shouldn't need it, good to be defensive.",
        "createdAt" : "2017-11-21T06:02:39Z",
        "updatedAt" : "2017-11-22T01:22:10Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b325c56d-9c8f-4b86-a98d-c6058d4aa2fb",
        "parentId" : "f0b4886c-00cf-4bef-a5cf-4bae58728427",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "Agreed on defensive.  But driverName is scrubbed with a RegExp that does not allow non-alpha other than .,-, and _",
        "createdAt" : "2017-11-21T14:49:48Z",
        "updatedAt" : "2017-11-22T01:22:11Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e489629895ffa82eb7cd8281f0a2b7e788a29812",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@\t// driverName validated at Mounter creation\n\t// sanitize (replace / with ~) in volumeID before it's appended to path:w\n\tdriverPath := fmt.Sprintf(\"%s/%s\", driverName, kstrings.EscapeQualifiedNameForDisk(volID))\n\treturn host.GetPodVolumeDir(uid, kstrings.EscapeQualifiedNameForDisk(csiPluginName), driverPath)\n}"
  },
  {
    "id" : "1a463467-8a02-4449-a725-9ee954d79a47",
    "prId" : 54529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54529#pullrequestreview-78129444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc0cb42-b2a6-4a29-a524-f6f2e27a6ce5",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Should you initialize `if c.csiClient == nil`, like you do for `TearDownAt(...)`?\r\n",
        "createdAt" : "2017-11-21T06:28:15Z",
        "updatedAt" : "2017-11-22T01:22:10Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "e22a7ba5-f209-463c-a018-fc2d6f1fdd5a",
        "parentId" : "6dc0cb42-b2a6-4a29-a524-f6f2e27a6ce5",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "I initialized the client in plugin.NewMounter() because all necessary info is there to do so.  I do it mounter.TearDown because that's when there's enough info to do so.",
        "createdAt" : "2017-11-21T14:50:43Z",
        "updatedAt" : "2017-11-22T01:22:11Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e489629895ffa82eb7cd8281f0a2b7e788a29812",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@\tdefer cancel()\n\n\tcsi := c.csiClient\n\tpvName := c.spec.PersistentVolume.GetName()\n"
  },
  {
    "id" : "b2d94f6a-9f8c-4559-a0af-55cf1984ec8f",
    "prId" : 54529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54529#pullrequestreview-78129444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf9d787-be45-4fd5-8e10-11c25edfbcbd",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: `ctx` should be moved closer to where it is used, so that it is not initialized unnecessarily.",
        "createdAt" : "2017-11-21T06:30:22Z",
        "updatedAt" : "2017-11-22T01:22:10Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "8daffaf4-21a3-44e2-8d9a-1e08945e25ed",
        "parentId" : "3cf9d787-be45-4fd5-8e10-11c25edfbcbd",
        "authorId" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "body" : "ok will fix.",
        "createdAt" : "2017-11-21T14:50:20Z",
        "updatedAt" : "2017-11-22T01:22:11Z",
        "lastEditedBy" : "54b8eb75-28dd-421d-a52b-63bf897147a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e489629895ffa82eb7cd8281f0a2b7e788a29812",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@\tglog.V(4).Infof(log(\"Mounter.SetUpAt(%s)\", dir))\n\n\tctx, cancel := grpctx.WithTimeout(grpctx.Background(), csiTimeout)\n\tdefer cancel()\n"
  }
]