[
  {
    "id" : "08180f70-9655-475f-81a3-4a1e9b389a8d",
    "prId" : 38547,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38547#pullrequestreview-12341714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d5f48d3-ceef-4161-8438-f7d9dc4992bb",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Does it makes sense to print error here? Since teardown doesn't do anything anyways.",
        "createdAt" : "2016-12-10T04:19:21Z",
        "updatedAt" : "2016-12-20T00:41:04Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "c14d47dffe23c1a2d8042bd9e7b7d541ceb17afa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +222,226 @@// TearDownAt does not make sense for host paths - probably programmer error.\nfunc (c *hostPathUnmounter) TearDownAt(dir string) error {\n\treturn fmt.Errorf(\"TearDownAt() does not make sense for host paths\")\n}\n"
  },
  {
    "id" : "fccd9c23-d60f-41d6-9465-8f50bd6c1562",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "316bf759-f15d-4e93-9dfe-f45175a76817",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Provisioning host paths is an extremely dubious idea.  What is the use-case?\n",
        "createdAt" : "2016-07-22T05:17:06Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "ea8952ce-e449-429a-8209-89fb5917ce6c",
        "parentId" : "316bf759-f15d-4e93-9dfe-f45175a76817",
        "authorId" : "8d7e3035-146d-4d3c-86b9-e61987a0f17b",
        "body" : "There was a use-case for it in V1 (testing and.. i forget the other) so we left it.\n\nThere's an interesting use case in issue #27732 asking to use node level storage as a local cache.\n",
        "createdAt" : "2016-07-22T14:44:17Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "8d7e3035-146d-4d3c-86b9-e61987a0f17b",
        "tags" : [
        ]
      },
      {
        "id" : "58987ffd-0e0f-4eb6-a415-39d875cf13c3",
        "parentId" : "316bf759-f15d-4e93-9dfe-f45175a76817",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "It is highly useful for testing outside of a cloud environment.  That said, a mock plugin could be made to do the same thing. Swap out the plugins/provisioners in cmd based on the testing flag. \n\nThis provisioner must be explicitly enabled for testing.\n",
        "createdAt" : "2016-07-22T14:53:50Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +122,126 @@\nfunc (plugin *hostPathPlugin) NewProvisioner(options volume.VolumeOptions) (volume.Provisioner, error) {\n\tif !plugin.config.ProvisioningEnabled {\n\t\treturn nil, fmt.Errorf(\"Provisioning in volume plugin %q is disabled\", plugin.GetPluginName())\n\t}"
  },
  {
    "id" : "bd654e50-5d1b-4641-aba0-11f5c7f2f5c1",
    "prId" : 27970,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efbd1ec0-d25e-4c62-924a-f483aca64fd0",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Again, is this correct?\n",
        "createdAt" : "2016-08-06T03:56:09Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "9af2cb50-73a8-4f18-87f6-213372cac9bf",
        "parentId" : "efbd1ec0-d25e-4c62-924a-f483aca64fd0",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "see comments above\n",
        "createdAt" : "2016-08-09T21:54:49Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f19a1148db1b7584be6b6b60abaf8c0bd1503ed3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\tVolumeSource: api.VolumeSource{\n\t\t\tHostPath: &api.HostPathVolumeSource{\n\t\t\t\tPath: volumeName,\n\t\t\t},\n\t\t},"
  },
  {
    "id" : "066237f2-c110-40e4-a942-8eb803973f69",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9f83da4-13c0-4b26-86a7-f707cfa0b4d3",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This isn't going to work with SELinux enforcing.  The SELinux type will be `tmp_t` which is (rightfully) not usable from the SELinux context docker containers get.\n",
        "createdAt" : "2015-09-17T19:45:39Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "791d7587-6d82-4570-9d32-7a8f951949e2",
        "parentId" : "e9f83da4-13c0-4b26-86a7-f707cfa0b4d3",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "That's great, then.  We definitely don't want anyone using this by default in any cluster. \n\nIt's for development and local testing only.  The provisioner will have integration tests that cover it fully.  I don't need a writer pod to test this feature.\n",
        "createdAt" : "2015-09-17T19:55:57Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "0564e761-c7e0-492f-9486-b53747f4283c",
        "parentId" : "e9f83da4-13c0-4b26-86a7-f707cfa0b4d3",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "> It's for development\n\nDo you develop with setenforce 0?\n",
        "createdAt" : "2015-09-18T13:15:52Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "5cbd39de-e679-4d46-9ed2-064fe84bfde1",
        "parentId" : "e9f83da4-13c0-4b26-86a7-f707cfa0b4d3",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "That's right, I think you use a mac for development.  Just make sure someone who wants to develop on this feature doesn't have to setenforce 0 please.\n",
        "createdAt" : "2015-09-18T13:20:13Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +242,246 @@// This Creater is meant for development and testing only and WILL NOT WORK in a multi-node cluster.\nfunc (r *hostPathCreater) Create() (*api.PersistentVolume, error) {\n\tfullpath := fmt.Sprintf(\"/tmp/hostpath_pv/%s\", util.NewUUID())\n\terr := os.MkdirAll(fullpath, 0750)\n\tif err != nil {"
  },
  {
    "id" : "359a7f09-01a0-4315-b7ed-2c5d8314d842",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c7d2ba8-e8d1-4de8-a6ab-5cede1333e1f",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "`ReclaimPolicy` and `AccessModes` set to default?\n",
        "createdAt" : "2015-09-18T06:00:09Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "c0e66b01-f913-4af4-bdd2-e9197c471752",
        "parentId" : "8c7d2ba8-e8d1-4de8-a6ab-5cede1333e1f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I added these two to VolumeOptions.  \n",
        "createdAt" : "2015-09-18T13:23:03Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +255,259 @@\t\t\t},\n\t\t},\n\t\tSpec: api.PersistentVolumeSpec{\n\t\t\tPersistentVolumeReclaimPolicy: r.options.PersistentVolumeReclaimPolicy,\n\t\t\tAccessModes:                   r.options.AccessModes,"
  },
  {
    "id" : "ba97aed8-8d64-4c13-b9b0-9f9bf736bdd8",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "818e7c13-65e3-48af-9276-e3b985d8bcaf",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "How/where does `r.options.CapacityMB` get set? Does it even make sense in context of a hostDir?\n",
        "createdAt" : "2015-09-18T06:03:14Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "998bf5ed-2643-49d2-9594-959c02e977ef",
        "parentId" : "818e7c13-65e3-48af-9276-e3b985d8bcaf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "VolumeOptions is passed to the NewCreater(options) constructor func and plumbed through. \n\nThis follows the NewBuilder(spec, options) pattern.\n",
        "createdAt" : "2015-09-18T13:24:20Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +259,263 @@\t\t\tAccessModes:                   r.options.AccessModes,\n\t\t\tCapacity: api.ResourceList{\n\t\t\t\tapi.ResourceName(api.ResourceStorage): resource.MustParse(fmt.Sprintf(\"%dMi\", r.options.CapacityMB)),\n\t\t\t},\n\t\t\tPersistentVolumeSource: api.PersistentVolumeSource{"
  },
  {
    "id" : "4b48f2a0-5761-4678-961f-3858f8151819",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd017159-a268-4241-ba2f-14d104b7f0dc",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "So will `PersistentVolumeStatus` get set by the controller that calls the creator?\n",
        "createdAt" : "2015-09-18T06:04:08Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "61dff15e-34b8-4a83-ab6e-bb1c47a38d3c",
        "parentId" : "bd017159-a268-4241-ba2f-14d104b7f0dc",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Default empty status would be correct.  That will be updated through the binder and recycler once the PV is persisted in the API.\n",
        "createdAt" : "2015-09-18T13:26:03Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +254,258 @@\t\t\t\t\"createdby\": \"hostpath dynamic provisioner\",\n\t\t\t},\n\t\t},\n\t\tSpec: api.PersistentVolumeSpec{\n\t\t\tPersistentVolumeReclaimPolicy: r.options.PersistentVolumeReclaimPolicy,"
  },
  {
    "id" : "79c16192-01d5-4017-9022-96ab9c37ccd5",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a3a35f3-1987-42c7-b841-4a7d76b78e3b",
        "parentId" : null,
        "authorId" : "6cc3c868-173f-40ea-8728-da5974495fb9",
        "body" : "As HostPath provisioning is only applicable to single node, most likely local dev clusters, How do you feel about changing this to 0777? Any pods running as non-root can't use HostPath provisioned volumes otherwise. Thinking specifically about minikube/minishift which would find a usable HostPath provisioner invaluable.\n",
        "createdAt" : "2016-09-05T13:32:43Z",
        "updatedAt" : "2016-09-05T13:32:56Z",
        "lastEditedBy" : "6cc3c868-173f-40ea-8728-da5974495fb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +243,247 @@func (r *hostPathCreater) Create() (*api.PersistentVolume, error) {\n\tfullpath := fmt.Sprintf(\"/tmp/hostpath_pv/%s\", util.NewUUID())\n\terr := os.MkdirAll(fullpath, 0750)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "7912b169-9a4e-4050-b442-b3ec9e7f8b8e",
    "prId" : 13649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This means a user can nuke all of /tmp - making me nervous here....\n",
        "createdAt" : "2015-09-09T16:55:57Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7b6cd78f-f194-44bb-bab2-c0873ddecd0d",
        "parentId" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Will make it /tmp/hostpath or something else you suggest.\n",
        "createdAt" : "2015-09-09T16:58:20Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "defeb1cf-649f-4290-b673-07e6d2805b7f",
        "parentId" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Maybe just regex it as `/tmp/.+`  (or test that there is some element beyond /tmp/)\n\nYou know my feeling about using HostPath as a test vehicle for PV - the more powerful it becomes the more likely it is to cause some user to nuke their system.  Can we bolster the scary warning in the comment in PersistentVolumeSource?  The scarier the better. :)\n",
        "createdAt" : "2015-09-09T17:06:07Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ef997f9e-fabf-4b07-8776-7160e70780f6",
        "parentId" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Scary comment included, fixed the path validation, and improved the validation tests.\n",
        "createdAt" : "2015-09-09T18:25:33Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "41895bba-5d26-4c37-a10b-4890d792c972",
        "parentId" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I was looking for a comment in the pkg/api/v1/types.go in PersistentVolumeSource, describing HostPath in even scarier terms.\n",
        "createdAt" : "2015-09-10T06:34:14Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "cbc6c59e-32b9-4bf3-bba6-a7b3e636613e",
        "parentId" : "fa545739-e42f-4c38-a112-ae56c11284dd",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I misread where you wanted the scary comment.  I'll add it to types.go.\n",
        "createdAt" : "2015-09-10T12:04:28Z",
        "updatedAt" : "2015-09-17T16:09:15Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2de9e96477ccfc1aa79a482014b75dae822dd57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\treturn fmt.Errorf(\"host_path deleter only supports /tmp/.+ but received provided %s\", r.GetPath())\n\t}\n\treturn os.RemoveAll(r.GetPath())\n}"
  },
  {
    "id" : "8d97032c-0957-4a81-91aa-1052f414e8d3",
    "prId" : 6809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1db40b2b-8033-42ba-8113-0f47e6db3dfc",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Do we still need PVS.HostPath?  I thought that was no longer needed?\n",
        "createdAt" : "2015-04-14T17:01:57Z",
        "updatedAt" : "2015-04-14T18:25:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2de8618d-1f6c-4e88-8764-69df823def04",
        "parentId" : "1db40b2b-8033-42ba-8113-0f47e6db3dfc",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "It's what I use for development and testing.  The API comments explicitly flag it as dev/test use only.\n",
        "createdAt" : "2015-04-14T17:09:55Z",
        "updatedAt" : "2015-04-14T18:25:15Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "7c685c47-db32-4d6f-845b-6f6dc7548b80",
        "parentId" : "1db40b2b-8033-42ba-8113-0f47e6db3dfc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "OK\n",
        "createdAt" : "2015-04-14T17:19:52Z",
        "updatedAt" : "2015-04-14T18:25:15Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1481fb9c2c255ee0f3d5dd407f57740308194ee",
    "line" : null,
    "diffHunk" : "@@ -1,1 +49,53 @@\nfunc (plugin *hostPathPlugin) CanSupport(spec *volume.Spec) bool {\n\treturn spec.VolumeSource.HostPath != nil || spec.PersistentVolumeSource.HostPath != nil\n}\n"
  }
]