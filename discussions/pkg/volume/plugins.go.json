[
  {
    "id" : "20de35df-70b0-44cd-8e09-530a0fb127dc",
    "prId" : 101773,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101773#pullrequestreview-654054545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01c2f780-3af2-4d24-90de-9bc7fca39f94",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Have we reached out to quobyte owners?",
        "createdAt" : "2021-05-07T03:15:38Z",
        "updatedAt" : "2021-05-07T03:16:06Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "d25a51ed-8474-49a4-891c-7dcb68b42388",
        "parentId" : "01c2f780-3af2-4d24-90de-9bc7fca39f94",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "Yep, this is their website doc PR: https://github.com/kubernetes/website/pull/27644/files\r\nThis is their response on the quobyte deprecation: https://github.com/kubernetes/kubernetes/issues/100900#issuecomment-823279294",
        "createdAt" : "2021-05-07T03:37:04Z",
        "updatedAt" : "2021-05-07T03:37:04Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce87fc97a1e4b476c3c9416bfa90747e288070bf",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\t\"kubernetes.io/cinder\":    \"The Cinder volume provider is deprecated and will be removed in a future release\",\n\t\t\"kubernetes.io/storageos\": \"The StorageOS volume provider is deprecated and will be removed in a future release\",\n\t\t\"kubernetes.io/quobyte\":   \"The Quobyte volume provider is deprecated and will be removed in a future release\",\n\t\t\"kubernetes.io/flocker\":   \"The Flocker volume provider is deprecated and will be removed in a future release\",\n\t}"
  },
  {
    "id" : "f9e438c7-6243-4c1a-aa9e-ad45250627b0",
    "prId" : 93130,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93130#pullrequestreview-528660027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Hm, I believe that if kubelet runs in standalone mode, then having `WaitForCacheSync` here is problematic because there's no apiserver.",
        "createdAt" : "2020-11-03T18:58:05Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "07e8dc83-198b-4586-9fa5-ab550acb8b05",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "this is guarded by the `if` here\r\nhttps://github.com/kubernetes/kubernetes/blob/941e9242a50fa8f273a0582eca283176c64e3085/pkg/kubelet/volumemanager/volume_manager.go#L271-L274",
        "createdAt" : "2020-11-04T00:29:10Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "a595c0c2-a3b7-4f08-82ae-538bac17615f",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Ah yes, that should protect it, but I wonder if we need to change the ordering of it because right now the reconciler (which is the one that will call into MountVolume) starts before this.",
        "createdAt" : "2020-11-04T02:13:10Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "48c502f7-f33c-4ca0-a39a-722f0c637338",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "done. moved before ` go vm.desiredStateOfWorldPopulator.Run(sourcesReady, stopCh)` as that's where will call `RequiresRemount`.",
        "createdAt" : "2020-11-04T21:34:55Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "278d9d20-1f63-447d-b46f-f46ad891d3cd",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "body" : "looks like we should not block on the `WaitForCacheSync` before reconciler because it will timeout the bootstrap:\r\n\r\n```\r\nNov 04 21:48:15 kind-control-plane kubelet[266]: E1104 21:48:15.835859     266 kubelet.go:1650] Unable to attach or mount volumes for pod \"kube-apiserver-kind-control-plane_kube-system(b9476abec6e5f541a230b24626dd0325)\": unmounted volumes=[k8s-certs usr-local-share-ca-certificates usr-share-ca-certificates ca-certs etc-ca-certificates], unattached volumes=[k8s-certs usr-local-share-ca-certificates usr-share-ca-certificates ca-certs etc-ca-certificates]: timed out waiting for the condition; skipping pod\r\n```",
        "createdAt" : "2020-11-05T22:08:31Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "f64c354b-61cb-4b89-b58f-f464e7ad4f94",
        "tags" : [
        ]
      },
      {
        "id" : "2836fa1c-456e-435b-bc59-6203324ddd13",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Thanks for experimenting around. I opened up https://github.com/kubernetes/kubernetes/issues/96316.\r\n\r\nFor this feature, if there isn't any negative effect from the informer being not in sync, then I'm ok with not waiting on it, and letting a retry resolve itself.",
        "createdAt" : "2020-11-06T18:50:29Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "ffd5b749-093e-408e-b8b0-4e08574ee392",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> For this feature, if there isn't any negative effect from the informer being not in sync, then I'm ok with not waiting on it, and letting a retry resolve itself.\r\n\r\nis this still outstanding? should WaitForCacheSync be removed?",
        "createdAt" : "2020-11-11T18:53:42Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "13c96943-ce50-4b4b-99ce-0c531672e9a8",
        "parentId" : "e98c9e15-f57e-43b7-93b3-37c623b8ba4b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "`volumeManager.Run` is called in a [go routine](https://github.com/kubernetes/kubernetes/blob/941e9242a50fa8f273a0582eca283176c64e3085/pkg/kubelet/kubelet.go#L1387) so we won't block kubelet boostrapping.",
        "createdAt" : "2020-11-12T00:57:22Z",
        "updatedAt" : "2020-11-12T17:26:59Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2859cd89b0ec00054219ed9988c6dccff39a0c8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1028,1032 @@\t\tinformerFactory := kletHost.GetInformerFactory()\n\t\tinformerFactory.Start(stopCh)\n\t\tinformerFactory.WaitForCacheSync(stopCh)\n\t}\n}"
  },
  {
    "id" : "4858a5cd-e452-4da2-9899-7b636a2d1100",
    "prId" : 80099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80099#pullrequestreview-261373899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79368fb8-6003-4ab5-901e-23da6c313207",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Are there plans for cinder or scaleio to implement csi migration?",
        "createdAt" : "2019-07-12T16:19:07Z",
        "updatedAt" : "2019-07-12T16:19:07Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "cb3494e5-949d-45c3-b5f2-e9d21ac8da05",
        "parentId" : "79368fb8-6003-4ab5-901e-23da6c313207",
        "authorId" : "c9194ca8-ba2f-414b-a596-d6a97308f1aa",
        "body" : "I believe that @adisky and @ramineni would know the most about csi migration plans.",
        "createdAt" : "2019-07-12T16:22:28Z",
        "updatedAt" : "2019-07-12T16:22:28Z",
        "lastEditedBy" : "c9194ca8-ba2f-414b-a596-d6a97308f1aa",
        "tags" : [
        ]
      },
      {
        "id" : "c81a5284-57dd-4dbf-a1ad-0e03bf0b1d2a",
        "parentId" : "79368fb8-6003-4ab5-901e-23da6c313207",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "@msau42 yes! https://github.com/kubernetes/kubernetes/blob/master/pkg/features/kube_features.go#L409",
        "createdAt" : "2019-07-12T17:06:48Z",
        "updatedAt" : "2019-07-12T17:06:48Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fa6fc722675105af043017cc738e1e28166f3b6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +69,73 @@var (\n\tdeprecatedVolumeProviders = map[string]string{\n\t\t\"kubernetes.io/cinder\":  \"The Cinder volume provider is deprecated and will be removed in a future release\",\n\t\t\"kubernetes.io/scaleio\": \"The ScaleIO volume provider is deprecated and will be removed in a future release\",\n\t}"
  },
  {
    "id" : "bd28cb77-378f-4f4d-b36d-ad68ba04ef6c",
    "prId" : 77537,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77537#pullrequestreview-235338673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "906fe4a4-9170-46e7-8123-98b71beb18c6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "FWIW - legacy names have been gone a LONG time",
        "createdAt" : "2019-05-08T23:15:50Z",
        "updatedAt" : "2019-05-08T23:20:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf1eeed30c8edb1f963cb512fa4d4d178e1d5318",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +711,715 @@\tdefer pm.mutex.Unlock()\n\n\t// Once we can get rid of legacy names we can reduce this to a map lookup.\n\tmatchedPluginNames := []string{}\n\tmatches := []VolumePlugin{}"
  },
  {
    "id" : "5b8e995b-e2fc-4504-8516-bbac82acf957",
    "prId" : 75129,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75129#pullrequestreview-222485966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c205c90e-24db-48b3-9141-2625da95559d",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why not:\r\n```\r\ntype KubeletVolumeHost interface {\r\n    VolumeHost\r\n```\r\nAnd then have kubelet depend on the KubeletVolumeHost interface? Same with the attach detach volume host. All the runtime checking `..., ok := ...(KubeletVolumeHost); ok` seems like it can easily be caught at compile time.",
        "createdAt" : "2019-04-03T21:43:20Z",
        "updatedAt" : "2019-04-05T19:20:41Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d9d7f55a-6144-49ea-83b8-454c70f26eee",
        "parentId" : "c205c90e-24db-48b3-9141-2625da95559d",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think this will require a little more refactoring of the Volume interfaces before we can do this.  Right now both controller and node methods are included in the same interface, and some calls are called by both controller and kubelet.",
        "createdAt" : "2019-04-03T22:33:43Z",
        "updatedAt" : "2019-04-05T19:20:41Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "000ab86788d2b32da2d487b6f150b7313fd18be8",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +328,332 @@\n\t// GetInformerFactory returns the informer factory for CSIDriverLister\n\tGetInformerFactory() informers.SharedInformerFactory\n\t// CSIDriverLister returns the informer lister for the CSIDriver API Object\n\tCSIDriverLister() storagelisters.CSIDriverLister"
  },
  {
    "id" : "d27c07e9-dad1-49fe-814f-5c7d1012e762",
    "prId" : 74863,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74863#pullrequestreview-211581876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5372caa6-4d90-4f99-aac8-1b0dfb0d4ca2",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "nit: this is leaking some CSI details. Can we use a name that's more representative of volume manager phases since this is technically a layer above CSI?",
        "createdAt" : "2019-03-07T00:12:18Z",
        "updatedAt" : "2019-03-08T14:23:30Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "b627483d-124c-45b3-b76c-be5035fcccd5",
        "parentId" : "5372caa6-4d90-4f99-aac8-1b0dfb0d4ca2",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I will fix this up in a follow up PR or in this PR itself if time permits.",
        "createdAt" : "2019-03-07T03:07:13Z",
        "updatedAt" : "2019-03-08T14:23:30Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bd9ed06d34efb328ce514551e1a23d708f1e526",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +108,112 @@\n\t// CSIVolumePhase contains volume phase on the node\n\tCSIVolumePhase CSIVolumePhaseType\n}\n"
  },
  {
    "id" : "1431c2a4-a40c-409b-8b7c-2e89673e26db",
    "prId" : 68513,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68513#pullrequestreview-246788655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ad210b1-4164-43ed-a988-96f184f36dcf",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Is this used?",
        "createdAt" : "2019-06-05T02:10:27Z",
        "updatedAt" : "2019-06-14T15:36:25Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "35e7e59a-f9b3-4864-86d7-29581aad6246",
        "parentId" : "0ad210b1-4164-43ed-a988-96f184f36dcf",
        "authorId" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "body" : "Yes. In the other place you commented on -- it's used throughout various volume plugins. ",
        "createdAt" : "2019-06-06T20:09:07Z",
        "updatedAt" : "2019-06-14T15:36:25Z",
        "lastEditedBy" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "tags" : [
        ]
      }
    ],
    "commit" : "be7da5052f40d8bcb7b6195ddae93f33b1faea28",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +336,340 @@\tWaitForCacheSync() error\n\t// Returns HostUtils Interface\n\tGetHostUtil() mount.HostUtils\n}\n"
  },
  {
    "id" : "4b6e31ab-1a5b-48b6-8515-e82941b22193",
    "prId" : 67851,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67851#pullrequestreview-166802701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0115730-011b-469d-94fd-8d8cc45e55d1",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Is anyone using these functions?",
        "createdAt" : "2018-10-19T15:30:57Z",
        "updatedAt" : "2018-10-25T18:50:19Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "58b3a233-beee-4588-b1e4-99d3e57e0131",
        "parentId" : "e0115730-011b-469d-94fd-8d8cc45e55d1",
        "authorId" : "e24e46b9-2cd5-4377-bed6-b6507631afa9",
        "body" : "With [your review comment](https://github.com/kubernetes/kubernetes/pull/67851/files#r226705083)  - , `FindFSResizablePluginByName` will be called in `resizeFileSystem` method.\r\n\r\n",
        "createdAt" : "2018-10-22T03:12:13Z",
        "updatedAt" : "2018-10-25T18:50:19Z",
        "lastEditedBy" : "e24e46b9-2cd5-4377-bed6-b6507631afa9",
        "tags" : [
        ]
      }
    ],
    "commit" : "82f83a8f82640f94e582011edeb90e5cefd031ef",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +903,907 @@\n// FindFSResizablePluginByName fetches a persistent volume plugin by name\nfunc (pm *VolumePluginMgr) FindFSResizablePluginByName(name string) (FSResizableVolumePlugin, error) {\n\tvolumePlugin, err := pm.FindPluginByName(name)\n\tif err != nil {"
  },
  {
    "id" : "27369f34-a1de-4ceb-9c54-87f1e5332bfd",
    "prId" : 65536,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65536#pullrequestreview-132622081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02e29265-93ec-4e7f-ba79-8e0c80232d51",
        "parentId" : null,
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Thanks for the catch!",
        "createdAt" : "2018-06-27T21:51:29Z",
        "updatedAt" : "2018-06-29T15:10:39Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e7c2f638d311a6a939ef7aa146f195bc33d06dc",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +607,611 @@\t\t} else if event.Op == ProbeRemove {\n\t\t\t// Plugin is not available on ProbeRemove event, only PluginName\n\t\t\tdelete(pm.probedPlugins, event.PluginName)\n\t\t} else {\n\t\t\tglog.Errorf(\"Unknown Operation on PluginName: %s.\","
  },
  {
    "id" : "b6bee36b-133d-483a-9ec5-71f34f7a154e",
    "prId" : 64154,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64154#pullrequestreview-123544519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da243aec-2fff-4aa5-a4f0-be4679a52c96",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "how does the scheduler call volume plugin methods? how is that expected to work with CSI / flexvolumes?",
        "createdAt" : "2018-05-24T22:49:29Z",
        "updatedAt" : "2018-06-01T23:17:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0863f2cb-c496-4711-b6ce-2743eca9f024",
        "parentId" : "da243aec-2fff-4aa5-a4f0-be4679a52c96",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Addressed below in response to a comment by @bsalamat  https://github.com/kubernetes/kubernetes/pull/64154#discussion_r190767908",
        "createdAt" : "2018-05-25T00:56:00Z",
        "updatedAt" : "2018-06-01T23:17:42Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "7a7b89b1-01aa-4329-affc-710317516e25",
        "parentId" : "da243aec-2fff-4aa5-a4f0-be4679a52c96",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "fixed. removed volume plugin manager from scheduler. We are probably never going to support dynamic volume limits for flex. We will revisit the problem for CSI in 1.12.",
        "createdAt" : "2018-05-26T02:18:12Z",
        "updatedAt" : "2018-06-01T23:17:42Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f9404dfc0da20ee74529258e55f9a57f81218c3",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +238,242 @@\t//    - storage-limits-csi-cinder\n\t// The key should respect character limit of ResourceName type\n\t// This function may be called by kubelet or scheduler to identify node allocatable property\n\t// which stores volumes limits.\n\tVolumeLimitKey(spec *Spec) string"
  },
  {
    "id" : "b57cb1c2-ff30-4188-94da-9ff240f5f184",
    "prId" : 58519,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58519#pullrequestreview-91035467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb86cd25-f827-40b5-b3b4-040b70fedd56",
        "parentId" : null,
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Is `event.Plugin` going to be nil? If so, please also include comments in the `ProbeEvent` struct describing this behavior for remove events",
        "createdAt" : "2018-01-24T01:01:57Z",
        "updatedAt" : "2018-03-30T06:24:21Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      }
    ],
    "commit" : "128c07fb1e0d784fdffa1c01db585728f4d4b31a",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +568,572 @@\t\t\tpm.probedPlugins[event.Plugin.GetPluginName()] = event.Plugin\n\t\t} else if event.Op == ProbeRemove {\n\t\t\tdelete(pm.probedPlugins, event.Plugin.GetPluginName())\n\t\t} else {\n\t\t\tglog.Errorf(\"Unknown Operation on PluginName: %s.\","
  },
  {
    "id" : "8603b1b3-7762-4d60-973e-1bc0c3a0f061",
    "prId" : 53958,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53958#pullrequestreview-69871049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c40591dd-1ced-4d78-b2a4-1b951e6f5f60",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "Great! This is the only change needed really, as this is a manifest list:\r\n```\r\n$ docker run -it --rm mplatform/mquery busybox\r\nImage: busybox\r\n * Manifest List: Yes\r\n * Supported platforms:\r\n   - amd64/linux\r\n   - arm/linux (variant: v5)\r\n   - arm/linux (variant: v6)\r\n   - arm/linux (variant: v7)\r\n   - arm64/linux (variant: v8)\r\n   - 386/linux\r\n   - ppc64le/linux\r\n   - s390x/linux\r\n```",
        "createdAt" : "2017-10-17T12:52:07Z",
        "updatedAt" : "2017-10-18T02:44:57Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9e9fc84aa999dccba84187616d095fe2f202b96",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +712,716 @@\t\t\t\t{\n\t\t\t\t\tName:    \"pv-recycler\",\n\t\t\t\t\tImage:   \"busybox:latest\",\n\t\t\t\t\tCommand: []string{\"/bin/sh\"},\n\t\t\t\t\tArgs:    []string{\"-c\", \"test -e /scrub && rm -rf /scrub/..?* /scrub/.[!.]* /scrub/*  && test -z \\\"$(ls -A /scrub)\\\" || exit 1\"},"
  },
  {
    "id" : "c2dff618-362c-48ff-a64c-fdb8da3017fa",
    "prId" : 53958,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53958#pullrequestreview-70405602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0aa7c59-1cfd-40d5-8826-a74ee9646e64",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Production images **MUST NOT** use unversioned images, since it is impossible to do a staged rollout. Please fix.",
        "createdAt" : "2017-10-18T18:54:45Z",
        "updatedAt" : "2017-10-18T18:54:45Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "f2e1f9e3-9980-42d0-9871-509228e29a75",
        "parentId" : "e0aa7c59-1cfd-40d5-8826-a74ee9646e64",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "+1. Please use a versioned image as @tallclair suggested. \r\nThere is also no reason to use the \"Always\" pull policy that's set by default for \":latest\" images.",
        "createdAt" : "2017-10-18T21:28:55Z",
        "updatedAt" : "2017-10-18T21:28:55Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "e8af85d8-60e7-466b-88f6-0e49ece9dcbe",
        "parentId" : "e0aa7c59-1cfd-40d5-8826-a74ee9646e64",
        "authorId" : "5a764df5-fdf3-4b03-8549-b0e2d9c30dad",
        "body" : "created https://github.com/kubernetes/kubernetes/pull/54192 take care this comment. -Thanks",
        "createdAt" : "2017-10-19T01:49:17Z",
        "updatedAt" : "2017-10-19T01:49:23Z",
        "lastEditedBy" : "5a764df5-fdf3-4b03-8549-b0e2d9c30dad",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9e9fc84aa999dccba84187616d095fe2f202b96",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +712,716 @@\t\t\t\t{\n\t\t\t\t\tName:    \"pv-recycler\",\n\t\t\t\t\tImage:   \"busybox:latest\",\n\t\t\t\t\tCommand: []string{\"/bin/sh\"},\n\t\t\t\t\tArgs:    []string{\"-c\", \"test -e /scrub && rm -rf /scrub/..?* /scrub/.[!.]* /scrub/*  && test -z \\\"$(ls -A /scrub)\\\" || exit 1\"},"
  },
  {
    "id" : "2b2e4a57-f8ac-4153-85bf-dba4de397f58",
    "prId" : 49727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49727#pullrequestreview-78287954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d5a0d92-7945-4f34-8bfc-8c2b39b7f27f",
        "parentId" : null,
        "authorId" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "body" : "Does it return the new size of the volume after the operation? These methods should have comments.",
        "createdAt" : "2017-11-21T22:27:51Z",
        "updatedAt" : "2017-11-21T22:27:55Z",
        "lastEditedBy" : "34f61776-88da-4b26-aa20-3c4f92530d05",
        "tags" : [
        ]
      },
      {
        "id" : "86dbe8f2-73ad-4933-b40b-0244762f11a6",
        "parentId" : "8d5a0d92-7945-4f34-8bfc-8c2b39b7f27f",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Yes it does return new size after volume operation.  I agree about comments. Added a github issue for myself so as I don't foget - https://github.com/kubernetes/kubernetes/issues/56177",
        "createdAt" : "2017-11-21T23:01:12Z",
        "updatedAt" : "2017-11-21T23:01:12Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "84029c2c1a798bab26781c0219186b278ad69af7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +207,211 @@type ExpandableVolumePlugin interface {\n\tVolumePlugin\n\tExpandVolumeDevice(spec *Spec, newSize resource.Quantity, oldSize resource.Quantity) (resource.Quantity, error)\n\tRequiresFSResize() bool\n}"
  },
  {
    "id" : "07163d26-55e2-456e-ab31-6e79feca025d",
    "prId" : 49596,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49596#pullrequestreview-53878935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83b0f304-b786-427a-9074-f61e09584a7c",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Do we want to remove various checks that were added to guard for nil spec, because I suppose those would be caught by this. ",
        "createdAt" : "2017-07-27T01:17:00Z",
        "updatedAt" : "2017-07-27T01:17:00Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "682c35d3-f438-47d0-ace8-fa4a1dc5e677",
        "parentId" : "83b0f304-b786-427a-9074-f61e09584a7c",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "I think we could do that with a separate PR.",
        "createdAt" : "2017-08-02T17:49:57Z",
        "updatedAt" : "2017-08-02T17:49:58Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c18ecb08259d7fc03375c3a7deb93a9093d6f289",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +391,395 @@\t\treturn nil, fmt.Errorf(\"Could not find plugin because volume spec is nil\")\n\t}\n\n\tmatches := []string{}\n\tfor k, v := range pm.plugins {"
  },
  {
    "id" : "af3135e5-eded-45f8-8d25-78856d56f5b8",
    "prId" : 34611,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34611#pullrequestreview-3872038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "227f5d41-3c17-4629-b4e7-45a0ab926d87",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "leads\n",
        "createdAt" : "2016-10-12T13:28:02Z",
        "updatedAt" : "2016-10-12T13:28:42Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "101602ab11816409f6b6969cd098a0821fd50716",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +45,49 @@\t// volume name.\n\tPVName string\n\t// PVC is reference to the claim that lead to provisioning of a new PV.\n\t// Provisioners *must* create a PV that would be matched by this PVC,\n\t// i.e. with required capacity, accessMode, labels matching PVC.Selector and"
  },
  {
    "id" : "69b1ecc4-e74d-4390-8ef2-e07d921a3918",
    "prId" : 29006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5570c7e-5e4c-4512-b4f6-3f67d8bd784c",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Godoc plz\n",
        "createdAt" : "2016-07-22T02:17:23Z",
        "updatedAt" : "2016-08-18T10:50:16Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5d562f37ab029d2b562e23bd23e906ee099a45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +441,445 @@// FindProvisionablePluginByName fetches  a persistent volume plugin by name.  If\n// no plugin is found, returns error.\nfunc (pm *VolumePluginMgr) FindProvisionablePluginByName(name string) (ProvisionableVolumePlugin, error) {\n\tvolumePlugin, err := pm.FindPluginByName(name)\n\tif err != nil {"
  },
  {
    "id" : "1dc4b482-ae13-44df-80cc-38d16ee0f8b0",
    "prId" : 27970,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ac8167b-f0f9-47ea-ad57-e14677cc7e39",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Let's remove this, as it is not necessary for this PR.\n",
        "createdAt" : "2016-08-05T22:34:19Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "93142eb2-0fc4-4fbc-9355-a93d29039576",
        "parentId" : "6ac8167b-f0f9-47ea-ad57-e14677cc7e39",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Even if you need this in operation executor, it does not need be added to the volume plugin interface. All instances of this for each plugin will be identical. You can call `volumePlugin.NewMounter` etc from operation executor\n",
        "createdAt" : "2016-08-10T03:58:41Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "4734b350-cc37-4929-8c5d-d218391b69eb",
        "parentId" : "6ac8167b-f0f9-47ea-ad57-e14677cc7e39",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ping on this.\n",
        "createdAt" : "2016-08-12T03:18:08Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "4a602913-58a8-4d50-a3a1-bc0f6c7444ea",
        "parentId" : "6ac8167b-f0f9-47ea-ad57-e14677cc7e39",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "I think volumePlugin.NewMounter returns a Mounter \n\n```\n// Mounter interface provides methods to set up/mount the volume.\ntype Mounter interface {\n    // Uses Interface to provide the path for Docker binds.\n    Volume\n        ...\n```\n\nBut where is needed here is \n\n```\ntype Interface interface {\n    // Mount mounts source to target as fstype with given options.\n    Mount(source string, target string, fstype string, options []string) error\n        ...\n```\n",
        "createdAt" : "2016-08-12T17:58:20Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "d339cf0d-eee7-456d-b9c2-a727aff19e76",
        "parentId" : "6ac8167b-f0f9-47ea-ad57-e14677cc7e39",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "This is reaching into volume plugins to fulfill a dependency that this class now has. But that's fine fine for now. We can come back and clean it up later (https://github.com/kubernetes/kubernetes/issues/14217).\n",
        "createdAt" : "2016-08-12T18:21:15Z",
        "updatedAt" : "2016-08-15T18:29:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "f19a1148db1b7584be6b6b60abaf8c0bd1503ed3",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +158,162 @@\tNewAttacher() (Attacher, error)\n\tNewDetacher() (Detacher, error)\n\tGetDeviceMountRefs(deviceMountPath string) ([]string, error)\n}\n"
  },
  {
    "id" : "5e79c705-0c5f-4ba8-a980-d2e4cffb969d",
    "prId" : 25457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aebc4931-5feb-4305-833d-09ca3b809cb6",
        "parentId" : null,
        "authorId" : null,
        "body" : "right on!\n",
        "createdAt" : "2016-05-17T20:48:57Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4d169d77-6eb8-4c67-ab5c-9c612d5fe811",
        "parentId" : "aebc4931-5feb-4305-833d-09ca3b809cb6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "It's not obvious that this is part of the \"attachable\" API.  I'll wait for the followup before passing judgement\n",
        "createdAt" : "2016-05-24T23:26:37Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "92500a20d72712f3ef8e825ee41c38a84288c4a3",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +140,144 @@\t// started on the same volume.\n\t// If the plugin does not support the given spec, this returns an error.\n\tGetUniqueVolumeName(spec *Spec) (string, error)\n\n\t// GetDeviceName returns the name or ID of the device referenced in the"
  },
  {
    "id" : "c1d25720-c813-47f0-861c-285075f41438",
    "prId" : 25457,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f05890d-cc34-4d7d-a451-054262cad27d",
        "parentId" : null,
        "authorId" : null,
        "body" : "optional nit: this should be GetDeviceID. AWS for example does not allow you to give names to volumes and you have to use its ID.\n",
        "createdAt" : "2016-05-17T20:49:07Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ec094289-e5f2-4724-aa9a-5b22178b0152",
        "parentId" : "7f05890d-cc34-4d7d-a451-054262cad27d",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Added comment to clarify it could be name or ID.\n",
        "createdAt" : "2016-05-20T06:36:18Z",
        "updatedAt" : "2016-05-25T06:02:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "92500a20d72712f3ef8e825ee41c38a84288c4a3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +145,149 @@\t// specified volume spec. This is passed by callers to the Deatch method.\n\t// If the plugin does not support the given spec, this returns an error.\n\tGetDeviceName(spec *Spec) (string, error)\n}\n"
  },
  {
    "id" : "660d31c9-6984-4d86-902a-cba7cd42da98",
    "prId" : 13840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58c86445-90cb-4e57-ab16-881d06a8b587",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Should log an error here.\n",
        "createdAt" : "2015-10-02T03:59:44Z",
        "updatedAt" : "2015-12-23T22:11:57Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "4248a2ec-4439-4c0d-b480-51fdd9a78355",
        "parentId" : "58c86445-90cb-4e57-ab16-881d06a8b587",
        "authorId" : "cb578771-ab57-49a0-afd6-27da11c87c6d",
        "body" : "Added the log..\n",
        "createdAt" : "2015-10-02T15:10:19Z",
        "updatedAt" : "2015-12-23T22:11:57Z",
        "lastEditedBy" : "cb578771-ab57-49a0-afd6-27da11c87c6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa76de79e5d1670b8e6add30f0159c833534a298",
    "line" : null,
    "diffHunk" : "@@ -1,1 +267,271 @@\t\tif err != nil {\n\t\t\tglog.Errorf(\"Failed to load volume plugin %s, error: %s\", plugin, err.Error())\n\t\t\tallErrs = append(allErrs, err)\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "3fcde759-06b1-48fd-9d68-66acac5b1b5a",
    "prId" : 13650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "234c62a0-05eb-49d2-9b7a-ade20cd728af",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "typo: Comment shouldn't be specific to `PersistentVolumes` plugin\n",
        "createdAt" : "2015-09-18T06:06:53Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "df362de7-c319-41ec-8591-458a9fd8effa",
        "parentId" : "234c62a0-05eb-49d2-9b7a-ade20cd728af",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I suppose that can be true for a Creater, though I think we should probably encourage the limitation to the PV framework.  A caller could theoretically use Creater to create a volume and stick it on a pod.  I think that pattern would be to create a claim and stick that on a pod.\n\nRecycler and Deleter only work on PVs, so I think the specific comment on those two is appropriate.  \n",
        "createdAt" : "2015-09-18T13:26:17Z",
        "updatedAt" : "2015-09-18T17:24:27Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c7d03b2b6f37d8e12c0cceccb2ab099cf08552a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +110,114 @@type CreatableVolumePlugin interface {\n\tVolumePlugin\n\t// NewCreater creates a new volume.Creater which knows how to create PersistentVolumes in accordance with\n\t// the plugin's underlying storage provider\n\tNewCreater(options VolumeOptions) (Creater, error)"
  },
  {
    "id" : "fb45a4d4-2f9b-457d-aba5-8042cd5baec3",
    "prId" : 13310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e88b3d6e-1e8c-41d8-8947-635b94f8e1db",
        "parentId" : null,
        "authorId" : null,
        "body" : "I see... the above must be a typo then :)\n",
        "createdAt" : "2015-08-28T18:16:39Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "68358fd30879a04eb53d8db6e940fcc785710682",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +145,149 @@// Values in VolumeConfig are intended to be relevant to several plugins, but not necessarily all plugins.  The\n// preference is to leverage strong typing in this struct.  All config items must have a descriptive but non-specific\n// name (i.e, RecyclerMinimumTimeout is OK but RecyclerMinimumTimeoutForNFS is !OK).  An instance of config will be\n// given directly to the plugin, so config names specific to plugins are unneeded and wrongly expose plugins\n// in this VolumeConfig struct."
  },
  {
    "id" : "aa9b6fdf-e89a-417b-88b6-cb239da2233d",
    "prId" : 13310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "parentId" : null,
        "authorId" : null,
        "body" : "So will OtherAttributes be reflected in the controller manager and exposed via a flag in a future PR ? Or did I misunderstand how this will work ?\n",
        "createdAt" : "2015-08-28T18:19:42Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "059c3c3b-5a75-4f81-8e5d-23295dee9f12",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "\"some-other-cli-flag\" that's a one-off would get passed as a string in this map, per our conversation with Tim from a few days ago.\n\nI'm happy to remove this bit entirely until we need it, but leave the idea in comments so we'd know how to handle one-off config when/if it occurs.\n",
        "createdAt" : "2015-08-28T19:32:40Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "39cace41-c4d1-428d-a7fc-fd4b9a93e09b",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Are the attributes going to be different in the kubelet and controller manager?\n",
        "createdAt" : "2015-08-31T15:04:45Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "4c029b57-7b44-4a97-9fc8-45b87472cf2f",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I imagine they will be.  There are no use cases yet for Kubelet's configuration of volume plugins, but when they arise, I think they will be specific to how Kubelet mounts and interacts with plugins.\n\nController manager, on the other hand, worries about the Recycler and PV concerns.  The kubelet doesn't care about it, just as the CtrlMgr doesn't care about mounting volumes.\n",
        "createdAt" : "2015-08-31T15:15:26Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "27704622-9570-4db3-b25f-5cef66ee8e71",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@markturansky \n\n> I think they will be specific to how Kubelet mounts and interacts with plugins.\n\nTell me more?\n",
        "createdAt" : "2015-08-31T17:44:52Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "af5f5b86-ea95-4ec8-a66b-b9edc6a133c0",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "It made me think of 'mount by running a container' versus 'mount by calling mount(8)', but I'm not sure all the facets of that are well know.  @jsafrane, got any opinion on that?\n",
        "createdAt" : "2015-08-31T17:45:33Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "5c4a8ac5-f9cc-4449-bbbc-ee095ce8f405",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@markturansky Also, is `VolumeConfig` ever going to have other attributes?\n",
        "createdAt" : "2015-08-31T17:46:22Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3b682e31-2a86-4bea-ab13-b35422e96651",
        "parentId" : "6f09b8ca-206d-4475-a6eb-900b0bcfe31f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Yes, that's what the comments are intended to address.  This construct should work for us going forward and eventually replaced by file configuration (that's where I'm told Kube is ultimately heading).\n\nAs for Kubelet config, when/if there are requirements for configuring plugins in Kubelet, we'll have specific variables to introduce in the CLI and in VolumeConfig.  Until then, there are no use cases for configuring plugins in Kubelet.\n",
        "createdAt" : "2015-08-31T17:48:45Z",
        "updatedAt" : "2015-09-01T16:05:03Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68358fd30879a04eb53d8db6e940fcc785710682",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +157,161 @@\t// thockin: do we want to wait on this until we have an actual use case?  I can change the comments above to\n\t// reflect our intention for one-off config.\n\tOtherAttributes map[string]string\n}\n"
  },
  {
    "id" : "b5e8cd91-91e9-4a54-af6c-4cbea0c28cf2",
    "prId" : 12603,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Add a comment that, while Volume and PersistentVolume have a Name field, that is ignored.\n\nOr should we EOL Spec.Name instead?\n",
        "createdAt" : "2015-08-26T22:05:22Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c4424605-f6d3-4327-9997-6beb71713559",
        "parentId" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "spec.Name is convenient to avoid the nil checks everywhere the caller wants the name.  There are enough references to it in Kubelet's volumes.go and all the plugins (in builders and cleaners) that it's a nice convenience.\n",
        "createdAt" : "2015-08-26T22:26:59Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "8573c0c3-0abe-457e-ad36-db756259597f",
        "parentId" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "At the risk of bikeshedding, we could have a utility function that gave you the name.\n",
        "createdAt" : "2015-08-26T23:18:36Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "368bf8bf-acc5-4b61-b411-7884c40c2f44",
        "parentId" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I thought something similar.   spec.Name() instead of spec.Name.\n\nIs one preferable over the other or more idiomatic Go?\n",
        "createdAt" : "2015-08-26T23:36:36Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "242b37e8-d8fb-4da6-924c-4e70ed09016b",
        "parentId" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I am starting to like `spec.Name()` after thinking about it a little.  @thockin ?\n",
        "createdAt" : "2015-08-27T03:12:45Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "aa74b789-8c55-444b-9967-c52fb071af27",
        "parentId" : "29ee1810-2f92-423f-829d-1049f945e45e",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I like it better, too.  \n",
        "createdAt" : "2015-08-27T12:17:48Z",
        "updatedAt" : "2015-09-03T12:59:07Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e7f73ad675945373b52104596408e333c8c1659",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@// Spec is an internal representation of a volume.  All API volume types translate to Spec.\ntype Spec struct {\n\tVolume           *api.Volume\n\tPersistentVolume *api.PersistentVolume\n\tReadOnly         bool"
  },
  {
    "id" : "088cf8f2-757a-4147-b50c-5d0776b7d5bb",
    "prId" : 9870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "580f4b57-df39-4ae3-9de7-ed1b4a830fa6",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "This change was necessary so that pv.Spec.Capacity was available to the bits calculating the timeout value.\n\nMaking this change as a separate PR would reduce the review required for this PR.\n",
        "createdAt" : "2015-07-30T21:05:57Z",
        "updatedAt" : "2015-09-15T17:28:06Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd4705c414a31ed34eb9afa5d965f2494639ff3f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +139,143 @@\tPersistentVolume *api.PersistentVolume\n\tReadOnly         bool\n}\n\n// Name returns the name of either Volume or PersistentVolume, one of which must not be nil."
  },
  {
    "id" : "9425349c-9913-476d-8460-109d520943c4",
    "prId" : 9870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60d27de3-1d4d-4e92-811d-a0f0e0e71662",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't understand this.  The only thing api.Volume has that api.VolumeSource doesn't is a name, which you have 1 line above...\n",
        "createdAt" : "2015-08-24T23:02:24Z",
        "updatedAt" : "2015-09-15T17:28:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd4705c414a31ed34eb9afa5d965f2494639ff3f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@// Spec is an internal representation of a volume.  All API volume types translate to Spec.\ntype Spec struct {\n\tVolume           *api.Volume\n\tPersistentVolume *api.PersistentVolume\n\tReadOnly         bool"
  },
  {
    "id" : "c8a7d752-04bb-4e6c-8889-895673ef9fdd",
    "prId" : 9870,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "986c0c1b-f33f-4048-9835-b33fc7da38c7",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I've been thinking about this - is it properly an attribute of a volume driver or is it actually an attribute of each PV?  In other words, are all NFS servers created equal?  Is it plausible to have an installation where the marketing dept gets the old Linux NFS server but the engineering dept gets the fancy netapp which is 8x as fast?\n",
        "createdAt" : "2015-09-03T20:10:12Z",
        "updatedAt" : "2015-09-15T17:28:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "11bcff6c-702e-4f0f-b241-358b23e853c8",
        "parentId" : "986c0c1b-f33f-4048-9835-b33fc7da38c7",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Having these attributes per PV provides great flexibility (because it's plausible that performance can differ between NFS providers on different hardware with faster switches, etc.) but that then makes config part of the API.  It was noted previously (see Clayton's comments from mid-July) that this wasn't an API thing but a config-that's-passed-down thing.\n\nThis implementation of VolumeConfig means 1 value per plugin, but that can be configured to the lowest common denominator in the user's diverse NFS storage infrastructure.\n",
        "createdAt" : "2015-09-03T20:30:09Z",
        "updatedAt" : "2015-09-15T17:28:06Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "0f7913d9-1d2a-4196-be72-d4355087e316",
        "parentId" : "986c0c1b-f33f-4048-9835-b33fc7da38c7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I can live with it for now, but I start to disbelieve that the factoring is\ncorrect.\n\nOn Thu, Sep 3, 2015 at 1:30 PM, Mark Turansky notifications@github.com\nwrote:\n\n> In pkg/volume/plugins.go\n> https://github.com/kubernetes/kubernetes/pull/9870#discussion_r38692835:\n> \n> > @@ -169,6 +169,19 @@ func (spec *Spec) Name() string {\n> >  // The binary should still use strong typing for this value when binding CLI values before they are passed as strings\n> >  // in OtherAttributes.\n> >  type VolumeConfig struct {\n> > -   // RecyclerDefaultPod is the default pod used to scrub a persistent volume clean after its release.\n> > -   // The default scrubber supplied by the system is a simple \"rm -rf /\\* /.*\" of a volume.\n> > -   RecyclerDefaultPod *api.Pod\n> >   +\n> > -   // RecyclerMinimumTimeout is the minimum amount of time in seconds for the scrub pod's ActiveDeadlineSeconds attribute.\n> > -   // Added to the minimum timeout is the increment per Gi of capacity.\n> > -   RecyclerMinimumTimeout int\n> >   +\n> > -   // RecyclerTimeoutIncrement is the number of seconds added to the scrub pod's ActiveDeadlineSeconds for each\n> > -   // Gi of capacity in the persistent volume.\n> > -   // Example: 5Gi volume x 30s increment = 150s + 30s minimum = 180s ActiveDeadlineSeconds for scrub pod\n> > -   RecyclerTimeoutIncrement int\n> \n> Having these attributes per PV provides great flexibility (because it's\n> plausible that performance can differ between NFS providers on different\n> hardware with faster switches, etc.) but that then makes config part of the\n> API. It was noted previously (see Clayton's comments from mid-July) that\n> this wasn't an API thing but a config-that's-passed-down thing.\n> \n> This implementation of VolumeConfig means 1 value per plugin, but that can\n> be configured to the lowest common denominator in the user's diverse NFS\n> storage infrastructure.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/9870/files#r38692835.\n",
        "createdAt" : "2015-09-03T20:39:46Z",
        "updatedAt" : "2015-09-15T17:28:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd4705c414a31ed34eb9afa5d965f2494639ff3f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +182,186 @@\t// Gi of capacity in the persistent volume.\n\t// Example: 5Gi volume x 30s increment = 150s + 30s minimum = 180s ActiveDeadlineSeconds for recycler pod\n\tRecyclerTimeoutIncrement int\n\n\t// OtherAttributes stores config as strings.  These strings are opaque to the system and only understood by the binary"
  },
  {
    "id" : "7e298caa-c73a-4287-a018-bdaf3607f094",
    "prId" : 6689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "@saad-ali This is an extension to the VolumeHost interface, but I think I am OK with it.  Your thoughts?\n",
        "createdAt" : "2015-08-19T05:54:51Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "7b9df757-f6e1-4ea1-bbb8-ce3ab1b196aa",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I would prefer we not extend the VolumeHost interface like this. It feels like an implementation detail leaking into the API.\n",
        "createdAt" : "2015-08-20T01:26:43Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b61a656d-a46b-4a74-b0ee-c889648f2d10",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "The `cloudprovider` package [already provides](https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/plugins.go#L55) a `GetCloudProvider(...)` method that should be used instead.\n",
        "createdAt" : "2015-08-20T01:41:52Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ce7edd26-1164-4181-aef3-f28fb9f45d35",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I am torn on this one.  Modules like GCE instantiate their own instance of\nCloudProvider - I don't see much strong reason to go one way or the other,\nso maybe the conservative answer is to not change the interface?\n\nOn Wed, Aug 19, 2015 at 6:42 PM, Saad Ali notifications@github.com wrote:\n\n> In pkg/volume/plugins.go\n> https://github.com/kubernetes/kubernetes/pull/6689#discussion_r37488358:\n> \n> > @@ -121,6 +122,9 @@ type VolumeHost interface {\n> >     // the provided spec.  See comments on NewWrapperBuilder for more\n> >     // context.\n> >     NewWrapperCleaner(spec *Spec, podUID types.UID, mounter mount.Interface) (Cleaner, error)\n> > +\n> > -   //Get cloud provider from kubelet\n> > -   GetCloudProvider() cloudprovider.Interface\n> \n> The cloudprovider package already provides\n> https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/plugins.go#L55\n> a GetCloudProvider(...) method that should be used instead.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/6689/files#r37488358.\n",
        "createdAt" : "2015-08-20T03:03:15Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bfab762d-8908-423b-9944-de35267a01cd",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "body" : "@saad-ali openstack `cloudprovider` couldn't instantiate itself, so I submitted a different patch to make kubelet `cloudprovider` aware. How ever without adding it to the volume host, the other way that I could think of was to pass `cloudprovider` into the builder, which also didn't seem correct.\n",
        "createdAt" : "2015-08-20T04:02:09Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "tags" : [
        ]
      },
      {
        "id" : "d37eb333-8f45-4cd9-8170-1781aacaaaa4",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "why can't this instantiate openstack directly?\n\nOn Wed, Aug 19, 2015 at 9:02 PM, spothanis notifications@github.com wrote:\n\n> In pkg/volume/plugins.go\n> https://github.com/kubernetes/kubernetes/pull/6689#discussion_r37493239:\n> \n> > @@ -121,6 +122,9 @@ type VolumeHost interface {\n> >     // the provided spec.  See comments on NewWrapperBuilder for more\n> >     // context.\n> >     NewWrapperCleaner(spec *Spec, podUID types.UID, mounter mount.Interface) (Cleaner, error)\n> > +\n> > -   //Get cloud provider from kubelet\n> > -   GetCloudProvider() cloudprovider.Interface\n> \n> @saad-ali https://github.com/saad-ali openstack couldn't instantiate\n> itself, so I submitted a different patch to make kubelet cloudprovider\n> aware. How ever without adding it to the volume host, the only other way\n> was to pass it into the builder, which also didn't seem correct.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/6689/files#r37493239.\n",
        "createdAt" : "2015-08-20T05:40:25Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d3e9069d-e88d-401c-8a0c-fc8bc81f5b3e",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "body" : "Openstack's  implementation in its current form needs cloud config file to be passed in every time to be instantiated.\n",
        "createdAt" : "2015-08-20T16:27:33Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "tags" : [
        ]
      },
      {
        "id" : "a294bfb4-c441-4782-9da0-8ebe0ba16d9b",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I see.  I did not follow that work, but I looked at it now, and yeah.  The passing of configs should not be copied all over.\n",
        "createdAt" : "2015-08-20T17:48:14Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "ff278b82-8eb6-4b87-adfe-3922553a2c2b",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "If it's too much of a pain, I'm ok with leaving it like this. Maybe open up a new issue to try and clean this up?\n",
        "createdAt" : "2015-08-20T18:33:42Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "3f6b96a7-55d9-45d5-b094-33e2bf2a5c53",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "If we change the interface, how many other plugins need to change to use the `GetCloudProvider` method instead of instantiating the cloud provider directly?\n",
        "createdAt" : "2015-08-20T18:39:55Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "97a1dbec-8ff0-49cb-9bba-aecef6baf8ea",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I know it's nitpicky, but cloud provider isn't really a function of the host.  I'm not proposing we add another interface, but maybe it should be more generically named than `VolumeHost`.\n",
        "createdAt" : "2015-08-20T18:40:59Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "16c313dd-e978-409c-9930-7faee68bda7c",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The VolumeHost is is the software abstraction that hosts the plugin, not the machine.  Plugins should have access to only the code they link themselves and the code we offer through the host interface.  If this is something we think plugins should be able to do (\"give me a pointer to the current CloudProvider\"), the the Host interface is the correct place.\n",
        "createdAt" : "2015-08-20T22:18:32Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1b651a89-5e28-4adc-9c22-d01d914e797b",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Any other plugin that calls GetcloudProvider() or instantiates a CloudProvider on its own could switch to this. \n",
        "createdAt" : "2015-08-20T22:19:13Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8b598c09-aaf8-4ac8-98c7-2a1000feddfa",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "What about providers with APIs that aren't cloud providers?   EMC and NetApp are two NFS devices that come to mind that have an API we can use for provisioning.  They're not \"cloud providers\" and have nothing to do with attaching volumes, but we would need that API client correctly configured and in the plugin for use.\n",
        "createdAt" : "2015-08-21T01:34:17Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "03863e6c-2d7c-40e5-a879-ff02ad5284b6",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "> The passing of configs should not be copied all over.\n\n@thockin can you explain this further?  I proposed volumeConfig in #9870 which is extensible to any type of config a volume plugin would need.  I see no reason it couldn't pass an OpenStack config in it.  Each volume takes what it needs from the volumeConfig struct.  \n\nAlternatively, volumeConfig as a struct can be nuked and all config options are passed via VolumeHost.  I originally did it that way but was told that passing config down into components was the preferred method.\n\nI think we should adopt 1 way and use it for all volume configuration.\n",
        "createdAt" : "2015-08-21T13:06:15Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "6457b285-d2cb-4709-97a2-43ee11cf60cf",
        "parentId" : "b506ba7b-5765-4d99-80e4-f83f428925a2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This is not about volume config but cloud-provider config.  Kubelet has a\nflag for cloud-config.  Volumes should not be replicating that.\n\nI think the right answer is to as the VolumeHost for the current\nCloudProvder.\n\nOn Fri, Aug 21, 2015 at 6:06 AM, Mark Turansky notifications@github.com\nwrote:\n\n> In pkg/volume/plugins.go\n> https://github.com/kubernetes/kubernetes/pull/6689#discussion_r37631709:\n> \n> > @@ -121,6 +122,9 @@ type VolumeHost interface {\n> >     // the provided spec.  See comments on NewWrapperBuilder for more\n> >     // context.\n> >     NewWrapperCleaner(spec *Spec, podUID types.UID, mounter mount.Interface) (Cleaner, error)\n> > +\n> > -   //Get cloud provider from kubelet\n> > -   GetCloudProvider() cloudprovider.Interface\n> \n> The passing of configs should not be copied all over.\n> \n> @thockin https://github.com/thockin can you explain this further? I\n> proposed volumeConfig in #9870\n> https://github.com/kubernetes/kubernetes/pull/9870 which is extensible\n> to any type of config a volume plugin would need. I see no reason it\n> couldn't pass an OpenStack config in it. Each volume takes what it needs\n> from the volumeConfig struct.\n> \n> Alternatively, volumeConfig as a struct can be nuked and all config\n> options are passed via VolumeHost. I originally did it that way but was\n> told that passing config down into components was the preferred method.\n> \n> I think we should adopt 1 way and use it for all volume configuration.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/6689/files#r37631709.\n",
        "createdAt" : "2015-08-21T16:08:39Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c841a20361c86ea94acf5e5aff9f319aaa629e89",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +125,129 @@\n\t//Get cloud provider from kubelet\n\tGetCloudProvider() cloudprovider.Interface\n}\n"
  }
]