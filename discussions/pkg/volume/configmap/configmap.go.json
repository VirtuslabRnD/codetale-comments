[
  {
    "id" : "478f0b68-d398-4fdf-b710-e9ba5054e083",
    "prId" : 68691,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68691#pullrequestreview-155672392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce44b45f-1d7a-404c-bca3-19859ee8d851",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: ideally this should also be prefixed with `error cleaning up mount`, but NBD",
        "createdAt" : "2018-09-14T21:45:27Z",
        "updatedAt" : "2018-09-14T21:46:06Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "85e337153a26e677f01282a662c9c63ed0fc58f9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\t\ttearDownErr := unmounter.TearDown()\n\t\t\tif tearDownErr != nil {\n\t\t\t\tglog.Errorf(\"Error tearing down volume %s with : %v\", b.volName, tearDownErr)\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "0dbe18d1-a89e-4f19-8541-e399f33b8861",
    "prId" : 64855,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64855#pullrequestreview-126588313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bcced8f-80cb-420a-8c10-d3d4ded3d110",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "My concern is that any of the steps after this can fail and we won't clean up the result of this method. Maybe we can add a clean up routine to execute if any of the subsequent steps fail?",
        "createdAt" : "2018-06-06T21:55:57Z",
        "updatedAt" : "2018-06-07T13:15:12Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "66070c72-3e05-44dc-b332-a675e5a62633",
        "parentId" : "1bcced8f-80cb-420a-8c10-d3d4ded3d110",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ditto for other plugins.",
        "createdAt" : "2018-06-06T21:56:25Z",
        "updatedAt" : "2018-06-07T13:15:12Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b274fc71-09fb-49c7-ba0a-05b74449504e",
        "parentId" : "1bcced8f-80cb-420a-8c10-d3d4ded3d110",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Yeah - so as I commented above, I omitted that case on purpose and there were 2 reasons of that:\r\n\r\n1. It is much harder to test other failures and hence much smaller chance of them happening in real world. \r\n2. cleaning up after both wrapped emptydir and nested mount points has been created is  messier and since configmap/secrets are such core k8s constructs, I want to approach that cautiously. Problem is - first we have to remove the mount points we created and then unmount emptydir and I am worried we do not have enough test coverage around that area. :(\r\n\r\n",
        "createdAt" : "2018-06-06T22:07:29Z",
        "updatedAt" : "2018-06-07T13:15:12Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "6122fc67-e480-468d-b875-e383a1f9b475",
        "parentId" : "1bcced8f-80cb-420a-8c10-d3d4ded3d110",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ok, I guess this will take care of the worst cases. So it is better then nothing.",
        "createdAt" : "2018-06-06T23:15:36Z",
        "updatedAt" : "2018-06-07T13:15:12Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "f44d1b9b37aa930dda50c239f140f922e3615532",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +211,215 @@\t\treturn err\n\t}\n\tif err := volumeutil.MakeNestedMountpoints(b.volName, dir, b.pod); err != nil {\n\t\treturn err\n\t}"
  },
  {
    "id" : "8197c4eb-087e-40c7-aa78-0e636f1047dc",
    "prId" : 60515,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60515#pullrequestreview-99825895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd13b178-c259-4765-912f-a94969a43b54",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "Seems disturbing to use `b` here and `*b` here: https://github.com/kubernetes/kubernetes/pull/60515/commits/25f34665f8127ec3466c06e733da423772a17f48#diff-a3b28c0b2e7de9ad275e0880d0764c8dR187 (and, of course, totally out of scope for this!)\r\n\r\nBut it's like the original PR, so perfect :)",
        "createdAt" : "2018-02-27T19:46:40Z",
        "updatedAt" : "2018-02-28T05:55:12Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d5da2a11bdc8518d7343e9e4a026476d0f339a9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +195,199 @@\t\treturn err\n\t}\n\tif err := volumeutil.MakeNestedMountpoints(b.volName, dir, b.pod); err != nil {\n\t\treturn err\n\t}"
  },
  {
    "id" : "e7914df7-b5a0-4f67-b2da-29b0eb7d1fcd",
    "prId" : 28936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08e2bbaa-af4f-43a8-9477-48380eadde4e",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "`invalid default mode specified: %v`\n",
        "createdAt" : "2016-08-17T14:36:31Z",
        "updatedAt" : "2016-08-17T18:50:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3b24e3a2-5456-4192-8842-e183b143b8cc",
        "parentId" : "08e2bbaa-af4f-43a8-9477-48380eadde4e",
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "And `%v` is nil. Can I change this in another PR, so this goes in with all the changes to generated code, etc.?\n\nIn any case, this has a default value and should not happen normally, just when created manually or so (when default don't apply) and is just to avoid the null pointer deference. \n",
        "createdAt" : "2016-08-17T14:52:21Z",
        "updatedAt" : "2016-08-17T18:50:22Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      },
      {
        "id" : "1c607928-106d-4920-b7e5-b40f860b1f0a",
        "parentId" : "08e2bbaa-af4f-43a8-9477-48380eadde4e",
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "I'm not sure about `invalid...` because validation is done at another layer. This is just a check to make sure we don't dereference a null pointer and \"fail better\".\n\nIt may affect mostly tests (unit or e2e), because the struct can be created manually in a test and might not have this field. A end user should never see this error, as there is a default value for this field.\n\n@pmorie What about `default mode not specified and is not optional` or something along those lines? What do you think?\n",
        "createdAt" : "2016-08-17T23:27:05Z",
        "updatedAt" : "2016-08-17T23:30:05Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      },
      {
        "id" : "ac277642-f41c-4432-8060-8e0ae6f65d34",
        "parentId" : "08e2bbaa-af4f-43a8-9477-48380eadde4e",
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "@pmorie or `default mode can't be: %v`?\n",
        "createdAt" : "2016-08-19T13:34:27Z",
        "updatedAt" : "2016-08-19T13:34:27Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a14a64f347f72ef282d2b6f675f30683be85b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +205,209 @@func makePayload(mappings []api.KeyToPath, configMap *api.ConfigMap, defaultMode *int32) (map[string]volumeutil.FileProjection, error) {\n\tif defaultMode == nil {\n\t\treturn nil, fmt.Errorf(\"No defaultMode used, not even the default value for it\")\n\t}\n"
  }
]