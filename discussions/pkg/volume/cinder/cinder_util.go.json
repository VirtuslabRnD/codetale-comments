[
  {
    "id" : "7f0d8709-9dba-4925-bdbf-5633e4e14ceb",
    "prId" : 30904,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7fd4ae2-a7ce-44bd-9070-c092571333cb",
        "parentId" : null,
        "authorId" : "8d7e3035-146d-4d3c-86b9-e61987a0f17b",
        "body" : "should this have a default type (in case not specified)\n",
        "createdAt" : "2016-08-18T20:28:45Z",
        "updatedAt" : "2016-08-22T13:28:40Z",
        "lastEditedBy" : "8d7e3035-146d-4d3c-86b9-e61987a0f17b",
        "tags" : [
        ]
      },
      {
        "id" : "c4a284c5-dbc5-4cd7-b9f6-f7c4136dcccf",
        "parentId" : "c7fd4ae2-a7ce-44bd-9070-c092571333cb",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "Cinder volumetype is not preset. You can set anything or nothing there. As long as there is a match volumetype in Cinder, the API returns a success; otherwise the API gets an error telling no matching volumetype is found.\n\nIf volumetype is not provided in the API call, it is set to \"\" in the API implementation later.\n",
        "createdAt" : "2016-08-18T20:34:48Z",
        "updatedAt" : "2016-08-22T13:28:40Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "259bce370ea8487bd0fb776e7f3da4ed78fcf031",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +142,146 @@\tvolSizeGB := int(volume.RoundUpSize(volSizeBytes, 1024*1024*1024))\n\tname := volume.GenerateVolumeName(c.options.ClusterName, c.options.PVName, 255) // Cinder volume name can have up to 255 characters\n\tvtype := \"\"\n\tavailability := \"\"\n\t// Apply ProvisionerParameters (case-insensitive). We leave validation of"
  },
  {
    "id" : "e60997b8-58a3-4a73-b5c2-4552132be8cf",
    "prId" : 6689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac07bfe6-1aa8-4d40-8a2f-547c7a5c85c0",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Does this method also need to unmount the block device?\n",
        "createdAt" : "2015-08-20T18:47:53Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "7afc54a2-f389-4564-b370-3e5470738651",
        "parentId" : "ac07bfe6-1aa8-4d40-8a2f-547c7a5c85c0",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "The TearDown func calls unmount before it calls detach.\n",
        "createdAt" : "2015-08-21T01:48:22Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "843cbbaf-30f4-494d-aa71-935d174ac549",
        "parentId" : "ac07bfe6-1aa8-4d40-8a2f-547c7a5c85c0",
        "authorId" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "body" : "TearDown function unmounts the bind mounts and this one unmounts the device and detaches the disk.\n",
        "createdAt" : "2015-08-22T02:43:34Z",
        "updatedAt" : "2015-08-25T22:15:22Z",
        "lastEditedBy" : "6a794e2e-9efa-46c8-af79-d5016fcccb21",
        "tags" : [
        ]
      },
      {
        "id" : "62fefe12-c8e4-4086-b182-b6aab08cfa24",
        "parentId" : "ac07bfe6-1aa8-4d40-8a2f-547c7a5c85c0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@spothanis Does `DetachDisk` handle unmounting the block device?\n",
        "createdAt" : "2015-08-26T21:32:21Z",
        "updatedAt" : "2015-08-26T21:32:21Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c841a20361c86ea94acf5e5aff9f319aaa629e89",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +110,114 @@\n// Unmounts the device and detaches the disk from the kubelet's host machine.\nfunc (util *CinderDiskUtil) DetachDisk(cd *cinderVolumeCleaner) error {\n\tglobalPDPath := makeGlobalPDName(cd.plugin.host, cd.pdName)\n\tif err := cd.mounter.Unmount(globalPDPath); err != nil {"
  },
  {
    "id" : "0ae53ca0-683c-48ca-82e8-3fe3f8f7b982",
    "prId" : 6689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ccd2964-6581-4651-a372-c36693edcae3",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Better error message please, what volume?\n",
        "createdAt" : "2015-08-26T21:32:41Z",
        "updatedAt" : "2015-08-26T21:32:41Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c841a20361c86ea94acf5e5aff9f319aaa629e89",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@\t}\n\tif fmtRequired {\n\t\tglog.V(2).Infof(\"Formatting of the vol required\")\n\t\tif _, err := formatVolume(device, fstype, diskmounter); err != nil {\n\t\t\tglog.Warningf(\"Failed to format volume: %v\\n\", err)"
  },
  {
    "id" : "b7012610-d496-4cce-ace6-44c14c625930",
    "prId" : 6689,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1f80862-d3fd-48e0-a10d-17591e90d988",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "What volume?\n",
        "createdAt" : "2015-08-26T21:32:46Z",
        "updatedAt" : "2015-08-26T21:32:46Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c841a20361c86ea94acf5e5aff9f319aaa629e89",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\tglog.V(2).Infof(\"Formatting of the vol required\")\n\t\tif _, err := formatVolume(device, fstype, diskmounter); err != nil {\n\t\t\tglog.Warningf(\"Failed to format volume: %v\\n\", err)\n\t\t\treturn err\n\t\t}"
  }
]