[
  {
    "id" : "5699f712-d08b-46ca-b2bf-2cce47e27688",
    "prId" : 30976,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bd217cb-e036-4b30-a1de-1eec0dc048c0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "move body into other function, there's no need to have two functions that I can see. This isn't used elsewhere.\n",
        "createdAt" : "2016-08-19T20:42:48Z",
        "updatedAt" : "2016-08-22T07:39:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "637958b5-de13-4516-aaa5-5544fd1ab3da",
        "parentId" : "5bd217cb-e036-4b30-a1de-1eec0dc048c0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "For now I'm leaving it here for consistency with \"SelectorFromSet\". If you feel really strongly about it, I will send another PR with it.\n",
        "createdAt" : "2016-08-22T07:30:39Z",
        "updatedAt" : "2016-08-22T07:39:42Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9d5be628afef4ee03b7f6dc4a311a36740c8a23",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +801,805 @@// It assumes that Set is already validated and doesn't do any validation.\nfunc SelectorFromValidatedSet(ls Set) Selector {\n\tif ls == nil {\n\t\treturn internalSelector{}\n\t}"
  },
  {
    "id" : "f69ed00f-4ff0-4b60-bc6e-3b5740b68c1f",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1204dd5e-3679-437b-b07a-79805b886efa",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "it would still probably be a good idea to log an error if len(r.strValues) != 1\n",
        "createdAt" : "2016-01-17T02:48:38Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +194,198 @@\n\t\tvar rValue float64\n\t\tfor strValue := range r.strValues {\n\t\t\trValue, err = strconv.ParseFloat(strValue, 64)\n\t\t\tif err != nil {"
  },
  {
    "id" : "9106418f-53dc-4fe5-b39a-f56201bb7368",
    "prId" : 18157,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bf73ed7-dd73-47f3-8901-f1db68e40e58",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why isn't this `internalSelector{}`?\n",
        "createdAt" : "2015-12-03T16:26:37Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "68a0b779-e9bc-408d-9b01-b6c5d46f9990",
        "parentId" : "8bf73ed7-dd73-47f3-8901-f1db68e40e58",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "`TestSetIsEmpty` tests a `nil` selector  https://github.com/kubernetes/kubernetes/pull/18157/files#diff-b2970db202ffdb1dec2b170d88679d3bL171\n",
        "createdAt" : "2015-12-03T18:02:44Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "33d201ad-dfdd-41bb-b488-4f21d2adc2a2",
        "parentId" : "8bf73ed7-dd73-47f3-8901-f1db68e40e58",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "What happens if I do `NewSelector().Add(requirement)`? Isn't that a nil deref?\n",
        "createdAt" : "2015-12-03T18:13:54Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "0b1a409f-0c60-4ded-b68c-ce3ec4629252",
        "parentId" : "8bf73ed7-dd73-47f3-8901-f1db68e40e58",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "okay never mind.\n",
        "createdAt" : "2015-12-03T18:18:45Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3288ce0dcb7d553a83c71db7a8d538aab5322fd1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +74,78 @@\nfunc NewSelector() Selector {\n\treturn internalSelector(nil)\n}\n"
  },
  {
    "id" : "6f6749d0-01f3-488b-85a8-bd3380b258a5",
    "prId" : 18157,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b036243-eff9-4b4b-b183-d1d67aeb0667",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Should this accept (r ...[]Requirements) ?\n",
        "createdAt" : "2015-12-03T16:28:24Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "9519d177-0fae-4a15-8c1a-112fed3c7bd8",
        "parentId" : "3b036243-eff9-4b4b-b183-d1d67aeb0667",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "there's the `Add` func that to add `Requirements` but it could takes also a slice as input (and sort them internally). \n",
        "createdAt" : "2015-12-03T18:04:24Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "7da2dd4d-43cf-4e83-9833-5dfc5c60dd8c",
        "parentId" : "3b036243-eff9-4b4b-b183-d1d67aeb0667",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ya, I think that Add should at least be refactored to take a single Requirement instead of the three args it takes now. I'm so so on whether it should be variadic.\n",
        "createdAt" : "2015-12-03T18:26:50Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "11c469ba-570e-4250-8549-26aa90535d28",
        "parentId" : "3b036243-eff9-4b4b-b183-d1d67aeb0667",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "ok\n",
        "createdAt" : "2015-12-03T18:43:17Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      },
      {
        "id" : "4ada91d1-b1c0-40b0-96ee-a5a38b9deeea",
        "parentId" : "3b036243-eff9-4b4b-b183-d1d67aeb0667",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "+1, you can always call the variadic form without args if you want to use it that way.\n",
        "createdAt" : "2015-12-03T22:02:48Z",
        "updatedAt" : "2015-12-04T08:21:59Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3288ce0dcb7d553a83c71db7a8d538aab5322fd1",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +73,77 @@)\n\nfunc NewSelector() Selector {\n\treturn internalSelector(nil)\n}"
  },
  {
    "id" : "134f6502-bec3-4b8e-9da5-40fff8a379b0",
    "prId" : 15520,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3cc5a0f-9963-4045-a254-e28822987c07",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "@mikedanese \nCan you help clarify what was the reason for `Nothing()`? If it wants to select nothing, why does it even bother to select?\n\n/cc @xiang90 \n",
        "createdAt" : "2016-07-02T21:52:30Z",
        "updatedAt" : "2016-07-02T21:52:31Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "e00b2be3-0edc-4242-bed2-935c81a8fc82",
        "parentId" : "d3cc5a0f-9963-4045-a254-e28822987c07",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Certain use cases for selectors require being able to select nothing, e.g. service selectors. This was part of the original spec for selectors. Obviously services don't always want to select nothing so not bothering to select at all doesn't make sense. Does that answer your question?\n",
        "createdAt" : "2016-07-02T22:27:56Z",
        "updatedAt" : "2016-07-02T22:28:12Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "5aaee411-2b79-4f01-8887-77e3f758fed3",
        "parentId" : "d3cc5a0f-9963-4045-a254-e28822987c07",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Thanks for the clarification!\n",
        "createdAt" : "2016-07-02T22:30:38Z",
        "updatedAt" : "2016-07-02T22:30:38Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7a54cac74dd2f7642e0276bb926f9d90aa11f74",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +56,60 @@\n// Nothing returns a selector that matches no labels\nfunc Nothing() Selector {\n\treturn nothingSelector{}\n}"
  },
  {
    "id" : "d99e5ead-4a42-4100-a065-9a24d8fc7493",
    "prId" : 15509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a7f044c-7f78-4ee2-96a5-becb9627a0f0",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "And ExistsToken?\n",
        "createdAt" : "2015-10-13T17:05:32Z",
        "updatedAt" : "2015-10-13T20:13:29Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "0516bccd-e5ce-4e79-aaaf-10b29313185e",
        "parentId" : "6a7f044c-7f78-4ee2-96a5-becb9627a0f0",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "There is no ExistsToken.\n",
        "createdAt" : "2015-10-13T17:51:02Z",
        "updatedAt" : "2015-10-13T20:13:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bac67f9e2117ac7f7c8b7580c524913c96950e5",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +552,556 @@\ttok, lit := p.consume(KeyAndOperator)\n\tswitch tok {\n\t// DoesNotExistToken shouldn't be here because it's a unary operator, not a binary operator\n\tcase InToken:\n\t\top = InOperator"
  },
  {
    "id" : "99921ba4-4591-4db9-a569-dbdde668e052",
    "prId" : 15509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68cc9829-a30c-409c-bccb-f46df8afc2ee",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Error message on 490 needs update. Can't comment there.\n",
        "createdAt" : "2015-10-13T17:08:41Z",
        "updatedAt" : "2015-10-13T20:13:29Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "bc07b090-9acc-412d-ad3f-b12a2ca4703e",
        "parentId" : "68cc9829-a30c-409c-bccb-f46df8afc2ee",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Done.\n",
        "createdAt" : "2015-10-13T18:05:00Z",
        "updatedAt" : "2015-10-13T20:13:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bac67f9e2117ac7f7c8b7580c524913c96950e5",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +470,474 @@\t\ttok, lit := p.lookahead(Values)\n\t\tswitch tok {\n\t\tcase IdentifierToken, DoesNotExistToken:\n\t\t\tr, err := p.parseRequirement()\n\t\t\tif err != nil {"
  },
  {
    "id" : "505eb285-bdf5-4275-b46a-317ce7d7d5e9",
    "prId" : 15029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "239bf91a-2bac-4714-b6b2-9f89cd79dcfe",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add a test!\n",
        "createdAt" : "2015-10-02T22:25:23Z",
        "updatedAt" : "2015-10-02T23:18:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7b1493b1-df32-4604-bf8b-b45ac1709045",
        "parentId" : "239bf91a-2bac-4714-b6b2-9f89cd79dcfe",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Test cases added\n",
        "createdAt" : "2015-10-02T23:18:42Z",
        "updatedAt" : "2015-10-02T23:18:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9be421c053d77d39362d28b2c7eef88794c2ab8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +601,605 @@func (p *Parser) parseExactValue() (sets.String, error) {\n\ts := sets.NewString()\n\ttok, lit := p.lookahead(Values)\n\tif tok == EndOfStringToken || tok == CommaToken {\n\t\ts.Insert(\"\")"
  },
  {
    "id" : "a3b97afd-35c2-4dba-881f-9551d015f61a",
    "prId" : 15029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0536af90-e18d-4fb4-a324-2d584e4dd526",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "can you not just test the tok this returns? (I don't know how this code works!)\n",
        "createdAt" : "2015-10-02T22:25:46Z",
        "updatedAt" : "2015-10-02T23:18:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8f835012-5c6c-49d4-80cd-d1eb94bd548c",
        "parentId" : "0536af90-e18d-4fb4-a324-2d584e4dd526",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "No. `consume()` will increments the position in the token array. Later this will cause an `index out of range` panic because the EndoOfStringToken is consumed.\n",
        "createdAt" : "2015-10-02T23:00:11Z",
        "updatedAt" : "2015-10-02T23:18:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9be421c053d77d39362d28b2c7eef88794c2ab8f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +606,610 @@\t\treturn s, nil\n\t}\n\ttok, lit = p.consume(Values)\n\tif tok == IdentifierToken {\n\t\ts.Insert(lit)"
  },
  {
    "id" : "4ebb7483-58e3-4383-bb63-5e7ff0fdc07d",
    "prId" : 15029,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f13f91-a84e-46e5-8c0f-9bf9c812f41e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I missed the `tok == CommaToken` case at first.\n",
        "createdAt" : "2015-10-02T23:19:09Z",
        "updatedAt" : "2015-10-02T23:19:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9be421c053d77d39362d28b2c7eef88794c2ab8f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +602,606 @@\ts := sets.NewString()\n\ttok, lit := p.lookahead(Values)\n\tif tok == EndOfStringToken || tok == CommaToken {\n\t\ts.Insert(\"\")\n\t\treturn s, nil"
  },
  {
    "id" : "01ff8b79-24a0-4d80-bbfb-546cffd1da48",
    "prId" : 4486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93930ab1-b80d-40b8-8798-7c8bc48acb40",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is a nit (just a style thing for future pulls): go encourages using a switch whenever you have this sort of pattern - it ends up reading better.  Basically go hates \"else if\" and wants switch.  If you ever are in here again later it's a minor thing to clean up if you can.\n",
        "createdAt" : "2015-02-25T07:11:33Z",
        "updatedAt" : "2015-02-25T08:45:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "63d3db98-3b08-4404-a3dc-13a2122edfe9",
        "parentId" : "93930ab1-b80d-40b8-8798-7c8bc48acb40",
        "authorId" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "body" : "@smarterclayton  I'm aware of this \"go preferred way\" but I've to get rid of some old habits. I'll change it. Thanks.\n",
        "createdAt" : "2015-02-25T08:39:47Z",
        "updatedAt" : "2015-02-25T08:45:29Z",
        "lastEditedBy" : "9f5dc2fc-1039-44a5-863f-115658f282e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "0186acc37c78928153696a9d2ece89e1d4a5e9b4",
    "line" : 391,
    "diffHunk" : "@@ -1,1 +465,469 @@\t\tch = l.read()\n\t}\n\tif ch == 0 { // end of the string?\n\t\treturn EOS, \"\"\n\t} else if isSpecialSymbol(ch) {"
  },
  {
    "id" : "d52ac7f5-24c8-478f-a627-82732f9b5761",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53179b9f-ab65-41a2-85fe-354a25d82ea2",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please also add an indexing TODO:\n\n```\n// TODO: Support forward and reverse indexing (#1183, #1348). Eliminate uses of Selector.RequiresExactMatch.\n```\n",
        "createdAt" : "2014-10-28T21:32:01Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ca88c671-69ff-48b6-8662-2b1df1c5fd12",
        "parentId" : "53179b9f-ab65-41a2-85fe-354a25d82ea2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also be aware of `AsSelector` in labels.go.\n",
        "createdAt" : "2014-10-29T05:22:58Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a7a6414d-0974-4553-9266-9bf49bd05a48",
        "parentId" : "53179b9f-ab65-41a2-85fe-354a25d82ea2",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "And we'll need a new validation routine in api/validation/validation.go, since I think selectors currently piggyback on validateLabels.\n",
        "createdAt" : "2014-10-29T05:45:19Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : null,
    "diffHunk" : "@@ -1,1 +141,145 @@// TODO Support forward and reverse indexing (#1183, #1348). Eliminate uses of Selector.RequiresExactMatch.\n// TODO rename to Selector after Selector interface above removed\ntype SetBasedSelector interface {\n\t// Matches returns true if this selector matches the given set of labels.\n\tMatches(Labels) (bool, error)"
  },
  {
    "id" : "302293d4-3583-40aa-9a74-1c9823187643",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ca1dbeb-5970-4ea1-b5e7-7f5f4fe3132c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add a comment showing what the syntax is and/or point to a doc that describes it. I'm looking for something like what's in #341 (though updated to the actual supported syntax). Bonus points for BNF/BNF-like spec.\n",
        "createdAt" : "2014-10-28T21:51:04Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : null,
    "diffHunk" : "@@ -1,1 +328,332 @@//\n// TODO: value validation possibly including duplicate value check, restricting certain characters\nfunc Parse(selector string) (SetBasedSelector, error) {\n\tvar items []Requirement\n\tvar key string"
  },
  {
    "id" : "9a1b6eab-5b86-4448-9a9f-a45169c99767",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3216d3f9-30d6-4f9c-967f-60a89006760a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I don't feel strongly about it, but it might be more user-friendly to allow an arbitrary amount of whitespace instead of exactly one space (between all tokens, not just here).\n",
        "createdAt" : "2014-10-29T06:33:39Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "9d98f951-fde3-407b-9e6d-801114c000a7",
        "parentId" : "3216d3f9-30d6-4f9c-967f-60a89006760a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind. Let's just start simple, the way it is, and we can make changes later if users ask for them.\n",
        "createdAt" : "2014-10-29T14:25:16Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +366,370 @@\t\t\t\t\titems = append(items, *req)\n\t\t\t\t}\n\t\t\tcase ' ':\n\t\t\t\tstate = waitOp\n\t\t\t\tkey = selector[strStart:i]"
  },
  {
    "id" : "0b00886f-863c-4562-af5a-0654c454f51f",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc036a14-2324-406e-8071-4d3fab20c00a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Actually, we probably should validate label keys when parsing them out, in order to catch syntax errors earlier. Should add a ValidateLabelKey method to api/validation/validation.go and call it wherever we parse out a key here. For now it would just check `util.IsDNS952Label(k)` (see validateLabels in that file).\n",
        "createdAt" : "2014-10-29T06:36:19Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "18d24acc-a383-4811-b815-985a16d4ee42",
        "parentId" : "cc036a14-2324-406e-8071-4d3fab20c00a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Oops. I made the key validation comment in the wrong place.\n\nBut, I was also thinking about what value validation we should do. We're not currently restricting the characters allowed much, but maybe it would be worth checking for duplicate values. Just put a TODO here for now.\n",
        "createdAt" : "2014-10-29T14:30:03Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a6446366-e9be-4c80-9cc1-009d0a85f05c",
        "parentId" : "cc036a14-2324-406e-8071-4d3fab20c00a",
        "authorId" : "1b53d899-2b1e-4bc7-8bac-d1b53a838f43",
        "body" : "Regarding \"Should add a ValidateLabelKey method to api/validation/validation.go and call it wherever we parse out a key here.\" If I understand you correctly, this results in an import cycle. As is, `validation` imports `labels.` If the suggested change was made, `labels` would be importing `validation.` If one of the edges of this cycle were to be removed, I think it should be the `validation` imports `labels` edge since validation seems like a fundamental utility. This follows the idea of an architecture where higher-layer code imports lower-layer utility code, but not vice-versa. I'm not sure how to get around this with a specific implementation/how k8s has solved this in the past.\n",
        "createdAt" : "2014-11-02T21:57:30Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "1b53d899-2b1e-4bc7-8bac-d1b53a838f43",
        "tags" : [
        ]
      },
      {
        "id" : "76fb244b-6459-4041-ac11-8af826503458",
        "parentId" : "cc036a14-2324-406e-8071-4d3fab20c00a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Sorry, I hadn't noticed that. I'm fine with the validation function residing in labels, then.\n",
        "createdAt" : "2014-11-03T19:37:17Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +386,390 @@\t\t\tswitch selector[i] {\n\t\t\tcase ',':\n\t\t\t\tvals.Insert(selector[strStart:i])\n\t\t\t\tstrStart = i + 1\n\t\t\tcase ' ':"
  },
  {
    "id" : "d584da41-b4cf-4f4a-a4c5-4a2e07d2ce59",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce4e6d04-4f7e-4f4e-a57a-e5208fafe078",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please add a TODO to unify with validateLabels.\n",
        "createdAt" : "2014-11-04T21:17:10Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : null,
    "diffHunk" : "@@ -1,1 +428,432 @@\n// TODO: unify with validation.validateLabels\nfunc validateLabelKey(k string) error {\n\tif !util.IsDNS952Label(k) {\n\t\treturn errors.NewFieldNotSupported(\"key\", k)"
  },
  {
    "id" : "d1ad40f8-50e3-4868-8f9f-c12b1dca954c",
    "prId" : 2024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50fcb0ed-f2c9-45f1-a017-e91a7a26049c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Awesome, thanks.\n",
        "createdAt" : "2014-11-04T21:17:58Z",
        "updatedAt" : "2014-11-05T13:51:10Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b74302acd443bb4c1050858f7ca552d1dc112",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +303,307 @@// The input will cause an error if it does not follow this form:\n//\n//     <selector-syntax> ::= <requirement> | <requirement> \",\" <selector-syntax>\n//         <requirement> ::= KEY <set-restriction>\n//     <set-restriction> ::= \"\" | <inclusion-exclusion> <value-set>"
  }
]