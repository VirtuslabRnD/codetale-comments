[
  {
    "id" : "23fefba2-0851-4394-951c-9ee25f019db8",
    "prId" : 94115,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94115#pullrequestreview-521061809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfb00ce3-17e6-48a7-8218-243fae94adb7",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "Why are we surfacing this as a log warning and not in a Prometheus metric?",
        "createdAt" : "2020-10-23T17:00:51Z",
        "updatedAt" : "2020-11-09T18:05:18Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "d1ececcd-c220-4172-874d-cbc89a5dc20e",
        "parentId" : "dfb00ce3-17e6-48a7-8218-243fae94adb7",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Couple reasons:\r\n* this log warning is only going to be around for 1 release until we always enforce probe timeouts in v1.21., it wouldn't make sense to add a prometheus metric now and then start a deprecation period for it one release later.\r\n* there is an action tied to this warning and hints that the user should not be relying on this behavior going forward -- this would be hard to convey in a prometheus metric. ",
        "createdAt" : "2020-10-24T14:12:04Z",
        "updatedAt" : "2020-11-09T18:05:18Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "a3bd1f5a-e032-4452-81d3-0ac623aad5ae",
        "parentId" : "dfb00ce3-17e6-48a7-8218-243fae94adb7",
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "> it wouldn't make sense to add a prometheus metric now and then start a deprecation period for it one release later.\r\n\r\nFWIW this is the point of alpha metrics :) see: https://github.com/kubernetes/enhancements/blob/master/keps/sig-instrumentation/20190404-kubernetes-control-plane-metrics-stability.md#stability-classes",
        "createdAt" : "2020-10-30T22:06:43Z",
        "updatedAt" : "2020-11-09T18:05:18Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      }
    ],
    "commit" : "af40d18b6792cee723f1f25bd5bfd2db79de0fd7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\t\t}\n\n\t\t\tklog.Warningf(\"Exec probe timed out after %s but ExecProbeTimeout feature gate was disabled\", timeoutErr.Timeout())\n\t\t}\n"
  },
  {
    "id" : "7cc899ed-7c19-4fea-9b59-c0a55a8de781",
    "prId" : 3695,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5326a2-0d2a-4727-863c-5c705fbd2fdc",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Shouldn't we just be checking for a zero exit status?\n",
        "createdAt" : "2015-01-27T06:10:24Z",
        "updatedAt" : "2015-01-27T19:20:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "77df0989-eea5-49da-88d0-f0c0bd406983",
        "parentId" : "6a5326a2-0d2a-4727-863c-5c705fbd2fdc",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "My only concern with this is that we would be changing the behavior of the LivenessProbe api (although it's currently not documented). Some ExecActions that used to return Unhealthy would return Healthy, and some that used to return Unknown would return Unhealthy. \n\nThis seems reasonable but I wouldn't want to burry a change that potentially breaks the api. I'll make the change if this is not a concern.\n",
        "createdAt" : "2015-01-27T18:12:14Z",
        "updatedAt" : "2015-01-27T19:20:44Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "56805954-edb7-4c3e-9e4c-cb5c7bdd54c6",
        "parentId" : "6a5326a2-0d2a-4727-863c-5c705fbd2fdc",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Also for an Exec probe, there would be no way to differentiate a Failure on the part of the probe or on the part of the thing being probed. we'd just assume that it was a Failure on the thing being probed i.e. no Unknowns.\n",
        "createdAt" : "2015-01-27T18:27:30Z",
        "updatedAt" : "2015-01-27T19:20:44Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "1f03bbb5-6054-460f-8188-9b7c5fef45b8",
        "parentId" : "6a5326a2-0d2a-4727-863c-5c705fbd2fdc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Well considered points.  I am not sure I like it, but you;re right that this would be a change in semantic.  Leave it as is.  I'll file an issue to discuss\n",
        "createdAt" : "2015-01-28T16:38:08Z",
        "updatedAt" : "2015-01-28T16:38:08Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dc6362f8a1f937a7ee80398a2b6aaf6cc7e9d1b",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\t\treturn probe.Unknown, err\n\t}\n\tif strings.ToLower(string(data)) != defaultHealthyOutput {\n\t\treturn probe.Failure, nil\n\t}"
  }
]