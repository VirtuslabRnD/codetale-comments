[
  {
    "id" : "412e96bc-5a52-4149-ad5a-6983f0dbcd83",
    "prId" : 23387,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb8cb5d3-6fee-494a-bcc6-757c6fecc082",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - my bad.\nI meant to move it to:\npkg/conversion/helper.go\n[Next to EnforcePtr function - which is from the same category].\n",
        "createdAt" : "2016-03-25T12:54:09Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3487f1d8-e0dd-4ffa-8885-6f71f2fa06f3",
        "parentId" : "eb8cb5d3-6fee-494a-bcc6-757c6fecc082",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "This is not possible because of import loop:\n\n```\n    imports k8s.io/kubernetes/pkg/api/unversioned\n    imports k8s.io/kubernetes/pkg/conversion\n    imports k8s.io/kubernetes/pkg/runtime\n    imports k8s.io/kubernetes/pkg/api/unversioned\n```\n",
        "createdAt" : "2016-03-25T16:32:09Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "05039420-8f4b-4209-9883-2db8209ac084",
        "parentId" : "eb8cb5d3-6fee-494a-bcc6-757c6fecc082",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Basically, if we move the function into \"pkg/conversion/\", since it would use \"pkg/runtime.Object\", we then have import loop:\n\n \"pkg/conversion/\" -> \"pkg/runtime\" -> \"api/unversioned\" -> \"pkg/conversion\".\n",
        "createdAt" : "2016-03-25T16:42:18Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "ac14c595-203e-4647-a7d9-95e47dbf7717",
        "parentId" : "eb8cb5d3-6fee-494a-bcc6-757c6fecc082",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "a ok - SGTM\n",
        "createdAt" : "2016-03-29T07:45:08Z",
        "updatedAt" : "2016-03-30T17:21:17Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "00ddf0671d91a9ad6e4316e70af07c38cefb9d35",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +171,175 @@}\n\n// SetZeroValue would set the object of objPtr to zero value of its type.\nfunc SetZeroValue(objPtr Object) error {\n\tv, err := conversion.EnforcePtr(objPtr)"
  },
  {
    "id" : "645dd8b8-0679-45ca-902e-a011e7e799a2",
    "prId" : 5763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1766765e-177b-4e83-aba0-5e1760780b16",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What belongs in pkg/runtime vs. elsewhere?\n",
        "createdAt" : "2015-03-25T02:06:20Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "76cdd4ec-6ab3-4455-8f53-c92e7bbb7e74",
        "parentId" : "1766765e-177b-4e83-aba0-5e1760780b16",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Originally pkg/runtime was an opinionated part of conversion.  Things strictly related to decoding generic objects in JSON showed up here.  I think where we are today is that we want to have the core \"smart object\" model (pkg/smartobjects) which can do defaulting, conversion, new, etc, and then a set of serialization choices (JSON, query, protobufs, msgpack, whatever) laid on top of that (orthogonal to).  The things in pkg/runtime that relate to the \"scheme\" (conversion, defaults) should move to smart objects.  The things related to JSON serialization should be split out.  I'm still torn on what we should do w.r.t. interfaces for helpful methods.  \n\nIdeally, I would think the smart objects code would have the ability to generate boilerplate helper methods (like ObjectMeta() or SetObjectMeta(...)) to your scheme.  That would reduce the amount of code in api/meta (which is really about just having a common interface on all of our api objects to get and set metadata).  We had just balked at adding one getter per type as being painful and hadn't got further.\n",
        "createdAt" : "2015-03-25T03:57:21Z",
        "updatedAt" : "2015-03-27T19:04:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "870da687d0c2477dc7be1c659a379cfa35a2e850",
    "line" : null,
    "diffHunk" : "@@ -1,1 +24,28 @@)\n\n// TODO: move me to pkg/api/meta\nfunc IsListType(obj Object) bool {\n\t_, err := GetItemsPtr(obj)"
  }
]