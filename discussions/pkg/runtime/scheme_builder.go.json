[
  {
    "id" : "18b4283e-db2a-407c-a796-9f053d165f9f",
    "prId" : 25526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a20ffa10-7d7a-4ef7-a898-f4107cb2f157",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "AddToScheme doesnt sound right. We are running some funcs over it, which might involve adding objects or not. How about naming this ApplyToScheme or ProcessScheme?\n",
        "createdAt" : "2016-08-11T19:18:15Z",
        "updatedAt" : "2016-08-12T00:07:47Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "0eebde2c-171b-4168-b889-c49924cb05bf",
        "parentId" : "a20ffa10-7d7a-4ef7-a898-f4107cb2f157",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The point was to replace the existing static \"AddToScheme\" methods in each register.go file, so I can't really change the name. I can do that in a follow-up.\n",
        "createdAt" : "2016-08-11T19:51:42Z",
        "updatedAt" : "2016-08-12T00:07:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "77f5813194afcc2ed45a80753cfcab564faf05dc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +25,29 @@// AddToScheme applies all the stored functions to the scheme. A non-nil error\n// indicates that one function failed and the attempt was abandoned.\nfunc (sb *SchemeBuilder) AddToScheme(s *Scheme) error {\n\tfor _, f := range *sb {\n\t\tif err := f(s); err != nil {"
  },
  {
    "id" : "fdc79c4c-444d-4376-a4a0-0ea148a2804f",
    "prId" : 25526,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e43d89fa-72fc-48c6-8f4d-88c45115a9b9",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Wasnt it the same even before?\nIf the generated code was there, then they had their own init() methods which were registering them.\n",
        "createdAt" : "2016-08-11T19:19:37Z",
        "updatedAt" : "2016-08-12T00:07:47Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "746a3ad4-644d-4d4e-a6b5-391ea3a54473",
        "parentId" : "e43d89fa-72fc-48c6-8f4d-88c45115a9b9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, but there was no way to construct your own runtime.Scheme (e.g., to test). Now you can get everything from a package by calling the scheme builder's AddToScheme, including the generated functions, if they are present. (adding this comment to the change description)\n",
        "createdAt" : "2016-08-11T19:54:09Z",
        "updatedAt" : "2016-08-12T00:07:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "77f5813194afcc2ed45a80753cfcab564faf05dc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@\n// SchemeBuilder collects functions that add things to a scheme. It's to allow\n// code to compile without explicitly referencing generated types. You should\n// declare one in each package that will have generated deep copy or conversion\n// functions."
  }
]