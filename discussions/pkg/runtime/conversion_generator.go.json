[
  {
    "id" : "8757f2b7-d5d3-4bab-a41d-654e635f8f37",
    "prId" : 23213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@pweil - this method is only used to decide whether we want to generate conversion or not - if you return an error from it, conversion will not be generated.\nSo IIUC, this is not exactly what you expect.\n",
        "createdAt" : "2016-03-22T08:25:27Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6f6b661c-5b97-4ab3-8018-7db30280dcf0",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "Yes,  the early return from this method seemed to prevent the generation of public convert methods for other fields in the type unnecessarily.  \n",
        "createdAt" : "2016-03-22T12:51:15Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "8f92716f-512d-4dc1-aa27-ab0b56c24363",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It's not just early return - return with error from this function means that we will not generate anything for that type.\nSo that PR is effectively no-op for now.\n",
        "createdAt" : "2016-03-22T14:06:04Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "bb5e0875-b2fe-4ac3-85ef-a42126456674",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "maybe not for that type, but we will for the fields which do match, which can be used by the custom conversion func, right? I think that was what @pweil- was going for\n",
        "createdAt" : "2016-03-22T14:08:25Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7f383b4c-082e-4e7c-bdcd-928c9738bda0",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@liggitt - I'm afraid I don't understand. Let me describe how this currently works. What happens is:\n- we first choose for what types we will generate conversions - those are the types for which this function will return nil error\n- then for those that returned nil error, we generate conversions\n\nWith this change - you return an error if and only if you were returning error before. So effectively, you will not generate any additional conversion functions (no matter what types you have).\n",
        "createdAt" : "2016-03-22T14:19:42Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "459c3324-ae0c-494d-9896-7301c51a61d7",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`generateConversionsBetween` is not a no-op. Calling it for all possible fields in the struct ensures conversion functions exist for those types, whether or not an automated conversion can be created for this struct.\n",
        "createdAt" : "2016-03-22T14:28:52Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ad9c88f8-0096-4a8f-b908-068f3e322ff9",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "@wojtek-t @liggitt I'll make a reproducer for this so it is more clear what it's actually doing.\n",
        "createdAt" : "2016-03-22T14:31:34Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "3b858cc3-8d9e-44ab-bcf0-fa4d95388a8b",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "> generateConversionsBetween is not a no-op. Calling it for all possible fields in the struct ensures conversion functions exist for those types, whether or not an automated conversion can be created for this struct.\n\nYes - but what matter in the end is whether you return an error or nil. And this is not changed in this PR.\n",
        "createdAt" : "2016-03-22T14:32:59Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b7af6dde-75e9-43cd-b759-89cf590530e6",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Depends what you care about :)\n\n@pweil- wants the generated fast conversions for the struct fields, which this PR accomplishes.\n\ncontinuing to return an error is intentional... we don't want to silently create a conversion func that might be missing fields, but breaking out of the loop early before doing everything we can to generate conversions for the struct fields that do match is incomplete\n",
        "createdAt" : "2016-03-22T15:01:18Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ac16ab6f-111e-4337-929c-7b087f5dd724",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "reproducer added.  As @liggitt says, the generation for the parent type will return an error but the generation of the symmetrical subtypes will not and will produce the public, fast conversion method instead of falling back to reflection for all subtypes.  Then the custom conversion can make use of the public subtype conversions\n",
        "createdAt" : "2016-03-22T15:03:15Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "e786d825-85aa-4378-b5dc-783f73cb62c5",
        "parentId" : "00f1805c-08ba-4585-bdd3-e1be5c024a34",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - sorry. I was still thinking about something different.\n\nMy understanding of what you are trying to achieve is that you would like to create a conversion function for the \"outer\" type, which converts only the fields that exists in both. This is what you will not achieve.\n\nNow I understand that it's not what you wanted to achieve.\n\nSorry - I thought you were trying to achieve something different.\n\nThat LGTM\n",
        "createdAt" : "2016-03-22T15:06:30Z",
        "updatedAt" : "2016-03-22T15:44:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd4ff1690d3dba672751f4bd088dda80d849cdb2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +303,307 @@\nfunc (g *conversionGenerator) generateConversionsForStruct(inType, outType reflect.Type) error {\n\terrs := []string{}\n\tfor i := 0; i < inType.NumField(); i++ {\n\t\tinField := inType.Field(i)"
  },
  {
    "id" : "14873a9e-d0d6-45de-91f1-e3827eb74b1a",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e1c31cd-115f-4cce-aa1a-7f5db5dd6b7c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "this is an example of where we are inconsistent in this PR.\n\ngroupVersion unversioned.GroupVersion\n\nand later:\n\ngv unversioned.GroupVersion\n",
        "createdAt" : "2015-11-19T19:52:56Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "3d3fd44f-a59b-4f5a-900a-01989aef9092",
        "parentId" : "5e1c31cd-115f-4cce-aa1a-7f5db5dd6b7c",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "I think in field names and parameters, it should be spelled out.  I'm personally less concerned about abbreviations within the actual functions.\n",
        "createdAt" : "2015-11-19T20:38:02Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +31,35 @@\ntype ConversionGenerator interface {\n\tGenerateConversionsForType(groupVersion unversioned.GroupVersion, reflection reflect.Type) error\n\tWriteConversionFunctions(w io.Writer) error\n\tRegisterConversionFunctions(w io.Writer, pkg string) error"
  },
  {
    "id" : "ab591ec1-3f65-46e9-9232-4852660fc01e",
    "prId" : 12488,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cd422bb-e0f2-40af-a72c-5d86f9317f49",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "inValue and outValue... both lines need changing\n",
        "createdAt" : "2015-08-10T17:52:55Z",
        "updatedAt" : "2015-08-10T18:00:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c6095bcc-b988-4e4d-ad99-7cee091348d0",
        "parentId" : "7cd422bb-e0f2-40af-a72c-5d86f9317f49",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "I see what you're saying.  Fixed\n",
        "createdAt" : "2015-08-10T18:01:08Z",
        "updatedAt" : "2015-08-10T18:01:08Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "26d80cdb7f6e95869b57e47b5c34a1d6c5cd0e94",
    "line" : null,
    "diffHunk" : "@@ -1,1 +197,201 @@\toutValue := outType.Elem()\n\tg.addImportByPath(inValue.PkgPath())\n\tg.addImportByPath(outValue.PkgPath())\n\tif err := g.generateConversionsBetween(inValue, outValue); err != nil {\n\t\treturn err"
  },
  {
    "id" : "cdc75e56-7afe-412a-bd54-5aadd5c19092",
    "prId" : 9971,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83c370b7-13ef-49b9-8388-5ec0222067cc",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What is the purpose of it? I don't see it used anywhere and I'm not sure if I understand why it is really needed.\n",
        "createdAt" : "2015-06-19T08:08:01Z",
        "updatedAt" : "2015-07-29T21:07:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9362a960-e887-4782-a9c5-ad312db2f031",
        "parentId" : "83c370b7-13ef-49b9-8388-5ec0222067cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Right now conversions for Kube objects are private methods.  OpenShift embeds some of the Kube objects (pod, type meta, object meta) and so when the OpenShift private convertor functions they have to go back to scheme.Convert in order to get access to the method.  Ideally we'd either make the core conversions public or visible through a fast path named accessor, but this was the compromise I made for now.\n\n> On Jun 19, 2015, at 4:08 AM, Wojciech Tyczynski notifications@github.com wrote:\n> \n> In pkg/runtime/conversion_generator.go:\n> \n> > ```\n> > OverwritePackage(pkg, overwrite string)\n> > ```\n> > -   AssumePrivateConversions()\n> >   What is the purpose of it? I don't see it used anywhere and I'm not sure if I understand why it is really needed.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-06-19T13:13:10Z",
        "updatedAt" : "2015-07-29T21:07:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "38167e97-d98c-4d48-86f9-7df48fb40398",
        "parentId" : "83c370b7-13ef-49b9-8388-5ec0222067cc",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK I see - thanks for explanation.\n",
        "createdAt" : "2015-06-22T07:49:04Z",
        "updatedAt" : "2015-07-29T21:07:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d41f5ac75011daf465a7f799401793bd6bede81",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +37,41 @@\tWriteImports(w io.Writer) error\n\tOverwritePackage(pkg, overwrite string)\n\tAssumePrivateConversions()\n}\n"
  },
  {
    "id" : "761afd13-0bc7-46ec-b17a-f5ae95f95245",
    "prId" : 9971,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f1548b-fb31-4a48-b847-37116cb9c8b5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this a typo? wasn't inKey/PkgPath() and outKey.PkgPath() already added above?\n",
        "createdAt" : "2015-08-10T15:49:03Z",
        "updatedAt" : "2015-08-10T15:49:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "521ecd4a-1b36-4ffd-90a7-234c38afc913",
        "parentId" : "f4f1548b-fb31-4a48-b847-37116cb9c8b5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Needs to be out value, otherwise values from a different package don't get added to the imports.\n",
        "createdAt" : "2015-08-10T15:53:15Z",
        "updatedAt" : "2015-08-10T15:53:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d41f5ac75011daf465a7f799401793bd6bede81",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +197,201 @@\toutValue := outType.Elem()\n\tg.addImportByPath(inKey.PkgPath())\n\tg.addImportByPath(outKey.PkgPath())\n\tif err := g.generateConversionsBetween(inValue, outValue); err != nil {\n\t\treturn err"
  }
]