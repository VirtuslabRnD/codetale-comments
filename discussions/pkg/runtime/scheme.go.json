[
  {
    "id" : "2fc7281a-0b5c-4413-b86e-3dd71dfa23b0",
    "prId" : 25018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "915a5ae0-99be-4225-a5b3-eb2ed6ee0245",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "hmm - I don't understand it. Can you please clarify what are you doing here?\n",
        "createdAt" : "2016-05-10T09:10:52Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3818b6f6-be90-4e56-a78f-8dad8ef8b375",
        "parentId" : "915a5ae0-99be-4225-a5b3-eb2ed6ee0245",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Do I understand correctly that it basically mean that exactly the same type is basically registered in few different group versions?\n",
        "createdAt" : "2016-05-10T09:14:59Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "71118351-542c-43ed-b8aa-3ffbc0b878b5",
        "parentId" : "915a5ae0-99be-4225-a5b3-eb2ed6ee0245",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes, that has been in place for quite a while. Schemes register kind\ntuples to go structs.  The same go struct can exist in multiple\nschemes.\n",
        "createdAt" : "2016-05-10T13:00:23Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea7e7a18cb0023a27c732f59dfd6ddd60719cccf",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +554,558 @@\t}\n\n\t// if the Go type is also registered to the destination kind, no conversion is necessary\n\tfor i := range kinds {\n\t\tif kinds[i].Version == outVersion.Version && kinds[i].Group == outVersion.Group {"
  },
  {
    "id" : "02407397-baf1-4070-befb-bf07f0bfcc94",
    "prId" : 25018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f91e2a8-08cd-41a2-9b27-0cb372020fc6",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Don't we need to check if the type is registered in the \"outVersion\" ?\n",
        "createdAt" : "2016-05-10T09:15:28Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "bec0682f-6a2e-481f-944f-c63620329bbb",
        "parentId" : "5f91e2a8-08cd-41a2-9b27-0cb372020fc6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Unversioned types are \"registered\" in all versions.\n",
        "createdAt" : "2016-05-10T15:43:32Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea7e7a18cb0023a27c732f59dfd6ddd60719cccf",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +564,568 @@\t// type is unversioned, no conversion necessary\n\t// it should be possible to avoid this allocation\n\tif unversionedKind, ok := s.unversionedTypes[t]; ok {\n\t\tkind := unversionedKind\n\t\toutKind := outVersion.WithKind(kind.Kind)"
  },
  {
    "id" : "85c9409a-7e88-49c7-a8b0-691c039dc14e",
    "prId" : 20127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47b04bc0-d5a3-4fc0-a3cb-ee6bcc8ef805",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should there be a lock on this map? Do we disallow non-init time registrations?\n",
        "createdAt" : "2016-01-29T23:13:07Z",
        "updatedAt" : "2016-01-30T19:12:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e100c204-f28c-417b-9aee-b407c905e7db",
        "parentId" : "47b04bc0-d5a3-4fc0-a3cb-ee6bcc8ef805",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We don't allow it, expect it, or do it, but we don't disallow it.\n\nOn Fri, Jan 29, 2016 at 6:13 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/runtime/scheme.go\n> https://github.com/kubernetes/kubernetes/pull/20127#discussion_r51328873\n> :\n> \n> >  func (s *Scheme) ObjectKinds(obj Object) ([]unversioned.GroupVersionKind, error) {\n> > -   return s.raw.ObjectKinds(obj)\n> > -   v, err := conversion.EnforcePtr(obj)\n> > -   if err != nil {\n> > -       return nil, err\n> > -   }\n> > -   t := v.Type()\n> >   +\n> > -   gvks, ok := s.typeToGVK[t]\n> \n> Should there be a lock on this map? Do we disallow non-init time\n> registrations?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20127/files#r51328873.\n",
        "createdAt" : "2016-01-29T23:38:09Z",
        "updatedAt" : "2016-01-30T19:12:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b66665e137fc468a9fae83b86686ff93fa3f89",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +234,238 @@\tt := v.Type()\n\n\tgvks, ok := s.typeToGVK[t]\n\tif !ok {\n\t\treturn nil, &notRegisteredErr{t: t}"
  },
  {
    "id" : "86c0bd2b-5e39-452c-a6f3-3b8be168cca3",
    "prId" : 20127,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ceda7c-7393-4378-bc1f-b6947e988c38",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe in the future we can take this out of scheme. It seems totally unrelated to me.\n",
        "createdAt" : "2016-01-29T23:17:25Z",
        "updatedAt" : "2016-01-30T19:12:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5542ef70-41d0-4a96-b592-e4c930479647",
        "parentId" : "33ceda7c-7393-4378-bc1f-b6947e988c38",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree - honestly this should probably just be a method on each struct.\n\nOn Fri, Jan 29, 2016 at 6:17 PM, Daniel Smith notifications@github.com\nwrote:\n\n> In pkg/runtime/scheme.go\n> https://github.com/kubernetes/kubernetes/pull/20127#discussion_r51329260\n> :\n> \n> >  }\n> > \n> >  // Similar to AddConversionFuncs, but registers conversion functions that were\n> >  // automatically generated.\n> >  func (s *Scheme) AddGeneratedConversionFuncs(conversionFuncs ...interface{}) error {\n> > -   return s.raw.AddGeneratedConversionFuncs(conversionFuncs...)\n> > -   for _, f := range conversionFuncs {\n> > -       if err := s.converter.RegisterGeneratedConversionFunc(f); err != nil {\n> > -           return err\n> > -       }\n> > -   }\n> > -   return nil\n> >   }\n> >   \n> >   // AddDeepCopyFuncs adds a function to the list of deep-copy functions.\n> >   // For the expected format of deep-copy function, see the comment for\n> >   // Copier.RegisterDeepCopyFunction.\n> >   func (s *Scheme) AddDeepCopyFuncs(deepCopyFuncs ...interface{}) error {\n> \n> Maybe in the future we can take this out of scheme. It seems totally\n> unrelated to me.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20127/files#r51329260.\n",
        "createdAt" : "2016-01-29T23:38:59Z",
        "updatedAt" : "2016-01-30T19:12:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "803f66e6-286c-450f-8aab-c3729de11d2a",
        "parentId" : "33ceda7c-7393-4378-bc1f-b6947e988c38",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will update those.\n\nOn Fri, Jan 29, 2016 at 6:38 PM, Clayton Coleman ccoleman@redhat.com\nwrote:\n\n> Agree - honestly this should probably just be a method on each struct.\n> \n> On Fri, Jan 29, 2016 at 6:17 PM, Daniel Smith notifications@github.com\n> wrote:\n> \n> > In pkg/runtime/scheme.go\n> > https://github.com/kubernetes/kubernetes/pull/20127#discussion_r51329260\n> > :\n> > \n> > >  }\n> > > \n> > >  // Similar to AddConversionFuncs, but registers conversion functions that were\n> > >  // automatically generated.\n> > >  func (s *Scheme) AddGeneratedConversionFuncs(conversionFuncs ...interface{}) error {\n> > > -  return s.raw.AddGeneratedConversionFuncs(conversionFuncs...)\n> > > -  for _, f := range conversionFuncs {\n> > > -      if err := s.converter.RegisterGeneratedConversionFunc(f); err != nil {\n> > > -          return err\n> > > -      }\n> > > -  }\n> > > -  return nil\n> > >   }\n> > >   \n> > >   // AddDeepCopyFuncs adds a function to the list of deep-copy functions.\n> > >   // For the expected format of deep-copy function, see the comment for\n> > >   // Copier.RegisterDeepCopyFunction.\n> > >   func (s *Scheme) AddDeepCopyFuncs(deepCopyFuncs ...interface{}) error {\n> > \n> > Maybe in the future we can take this out of scheme. It seems totally\n> > unrelated to me.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/kubernetes/kubernetes/pull/20127/files#r51329260.\n",
        "createdAt" : "2016-01-29T23:39:06Z",
        "updatedAt" : "2016-01-30T19:12:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b66665e137fc468a9fae83b86686ff93fa3f89",
    "line" : 384,
    "diffHunk" : "@@ -1,1 +341,345 @@// For the expected format of deep-copy function, see the comment for\n// Copier.RegisterDeepCopyFunction.\nfunc (s *Scheme) AddDeepCopyFuncs(deepCopyFuncs ...interface{}) error {\n\tfor _, f := range deepCopyFuncs {\n\t\tif err := s.cloner.RegisterDeepCopyFunc(f); err != nil {"
  },
  {
    "id" : "709b408f-34f4-432c-9d5c-09ce7cb1e20d",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c41447df-1f19-4056-8b20-db38ceb97014",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: godoc\n",
        "createdAt" : "2015-11-19T19:58:24Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : null,
    "diffHunk" : "@@ -1,1 +262,266 @@// AddInternalGroupVersion registers an internal GroupVersion with the scheme.  This can later be\n// used to lookup the internal GroupVersion for a given Group\nfunc (s *Scheme) AddInternalGroupVersion(gv unversioned.GroupVersion) {\n\ts.raw.InternalVersions[gv.Group] = gv\n}"
  },
  {
    "id" : "83065b98-a698-42a3-b497-ae12e15ec1ed",
    "prId" : 17515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c302a672-b452-4c18-9a76-fd35d3309319",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit godoc: (though it wasnt there before, looks like most of these file has it)\n",
        "createdAt" : "2015-11-19T19:58:47Z",
        "updatedAt" : "2015-11-25T17:15:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e9b9f2da3224daa67fa3610185b5a51d7713839",
    "line" : null,
    "diffHunk" : "@@ -1,1 +500,504 @@// DecodeIntoWithSpecifiedVersionKind coerces the data into the obj, assuming that the data is\n// of type GroupVersionKind\nfunc (s *Scheme) DecodeIntoWithSpecifiedVersionKind(data []byte, obj Object, gvk unversioned.GroupVersionKind) error {\n\treturn s.raw.DecodeIntoWithSpecifiedVersionKind(data, obj, gvk)\n}"
  },
  {
    "id" : "198e750b-3456-4bc3-8230-1c13556009da",
    "prId" : 5200,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08d1b381-9b2c-4d2f-9c2f-0737e2ef00d6",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I recommend not forcing people to write conversion function if it's unnecessary. Up to you, though.\n",
        "createdAt" : "2015-03-10T04:04:13Z",
        "updatedAt" : "2015-03-12T21:11:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d8fea3a6-0b2a-4750-a322-de9de3e9de67",
        "parentId" : "08d1b381-9b2c-4d2f-9c2f-0737e2ef00d6",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Right now, we do need conversion functions for all field selectors. So its good to have this check to  catch errors.\nWe can remove this later, if we add resources for which do not need conversion functions.\n",
        "createdAt" : "2015-03-11T20:18:35Z",
        "updatedAt" : "2015-03-12T21:11:19Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "790a8bbd2322f3538e41822bbfad7a27d57dd9f7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +324,328 @@func (s *Scheme) ConvertFieldLabel(version, apiResource, label, value string) (string, string, error) {\n\tif s.fieldLabelConversionFuncs[version] == nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"No conversion function found for version: %s\", version)\n\t}\n\tconversionFunc, ok := s.fieldLabelConversionFuncs[version][apiResource]"
  },
  {
    "id" : "9a1deacb-2175-4084-b943-49443051626e",
    "prId" : 4575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829d86d3-00c0-46c5-975e-b66d90a8fe11",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add a godoc comment\n",
        "createdAt" : "2015-02-26T19:48:52Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1091e460-19f1-45ef-90ee-9aa0e9734fe0",
        "parentId" : "829d86d3-00c0-46c5-975e-b66d90a8fe11",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-02-26T21:53:56Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "48e7945f65999ee43d48947c6589cc02cdc91705",
    "line" : null,
    "diffHunk" : "@@ -1,1 +289,293 @@// AddFieldLabelConversionFunc adds a conversion function to convert field selectors\n// of the given api resource from the given version to internal version representation.\nfunc (s *Scheme) AddFieldLabelConversionFunc(version, apiResource string, conversionFunc FieldLabelConversionFunc) error {\n\tif s.fieldLabelConversionFuncs[version] == nil {\n\t\ts.fieldLabelConversionFuncs[version] = map[string]FieldLabelConversionFunc{}"
  },
  {
    "id" : "49987164-2c37-494d-9c6f-714f05143e78",
    "prId" : 4575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "020b57db-3241-42ed-bcc9-4f178078d2c1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc this too.\n",
        "createdAt" : "2015-02-26T19:49:03Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a70a8617-84f2-4f34-ba4e-416229f4ff0f",
        "parentId" : "020b57db-3241-42ed-bcc9-4f178078d2c1",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-02-26T21:54:01Z",
        "updatedAt" : "2015-02-28T00:11:14Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "48e7945f65999ee43d48947c6589cc02cdc91705",
    "line" : null,
    "diffHunk" : "@@ -1,1 +322,326 @@// Converts the given field label and value for an apiResource field selector from\n// versioned representation to an unversioned one.\nfunc (s *Scheme) ConvertFieldLabel(version, apiResource, label, value string) (string, string, error) {\n\tif s.fieldLabelConversionFuncs[version] == nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"No conversion function found for version: %s\", version)"
  },
  {
    "id" : "138cbd38-dc09-46cd-954f-1acebafdfa23",
    "prId" : 4575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae0d13b2-a814-4bbc-8e5b-51b710f30a49",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Whoops, I should have caught this, it's not a good default. Should fail by returning its arguments :(\n",
        "createdAt" : "2015-03-02T17:28:55Z",
        "updatedAt" : "2015-03-02T17:28:55Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "48e7945f65999ee43d48947c6589cc02cdc91705",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +324,328 @@func (s *Scheme) ConvertFieldLabel(version, apiResource, label, value string) (string, string, error) {\n\tif s.fieldLabelConversionFuncs[version] == nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"No conversion function found for version: %s\", version)\n\t}\n\tconversionFunc, ok := s.fieldLabelConversionFuncs[version][apiResource]"
  },
  {
    "id" : "dee0a5ce-2fe3-4ea7-bb6a-04d237d49e13",
    "prId" : 2786,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890ab5f3-5837-44ea-97e6-a889834c01b7",
        "parentId" : null,
        "authorId" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "body" : "Is there any consensus on the in/out arguments order?\n\n`runtimeObjectToRawExtensionArray(in *[]Object, out *[]RawExtension, s conversion.Scope)`\nvs. `runtimeObjectToRawExtensionArray(out *[]RawExtension, in *[]Object, s conversion.Scope)`\n\nThe `io` pkg uses `out, in`:\n`func Copy(dst Writer, src Reader) (written int64, err error)`\n",
        "createdAt" : "2014-12-08T14:36:14Z",
        "updatedAt" : "2014-12-09T15:31:22Z",
        "lastEditedBy" : "473c3a16-cb87-4189-9496-af8b26ead122",
        "tags" : [
        ]
      },
      {
        "id" : "d8cb0ff2-350c-4845-b1ab-18bd5f157f02",
        "parentId" : "890ab5f3-5837-44ea-97e6-a889834c01b7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "One would have to change a lot of code to make it the same as the io.Copy function; all of the conversion functions go the other direction. Probably not worth it.\n",
        "createdAt" : "2014-12-09T01:22:02Z",
        "updatedAt" : "2014-12-09T15:31:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5f715330-adc2-4992-9fd2-387353b9dec2",
        "parentId" : "890ab5f3-5837-44ea-97e6-a889834c01b7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Comments addressed - yaml removed and test added.\n\n----- Original Message -----\n\n> > @@ -140,15 +140,77 @@ func (self *Scheme) rawExtensionToEmbeddedObject(in\n> > *RawExtension, out *Embedded\n> >     return nil\n> >  }\n> > \n> > +// runtimeObjectToRawExtensionArray takes a list of objects and encodes\n> > them as RawExtension in the output version\n> > +// defined by the conversion.Scope. If objects must be encoded to\n> > different schema versions you should set them as\n> > +// runtime.Unknown in the internal version instead.\n> > +func (self *Scheme) runtimeObjectToRawExtensionArray(in *[]Object, out\n> > *[]RawExtension, s conversion.Scope) error {\n> \n> One would have to change a lot of code to make it the same as the io.Copy\n> function; all of the conversion functions go the other direction. Probably\n> not worth it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2786/files#r21501525\n",
        "createdAt" : "2014-12-09T15:31:44Z",
        "updatedAt" : "2014-12-09T15:31:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a833ca70160048773102892b0ce236b800def9a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +144,148 @@// defined by the conversion.Scope. If objects must be encoded to different schema versions you should set them as\n// runtime.Unknown in the internal version instead.\nfunc (self *Scheme) runtimeObjectToRawExtensionArray(in *[]Object, out *[]RawExtension, s conversion.Scope) error {\n\tsrc := *in\n\tdest := make([]RawExtension, len(src))"
  }
]