[
  {
    "id" : "dbb8d1bd-b1cb-4058-9a97-bf8db50bce43",
    "prId" : 23288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "680dfd08-784d-4a9d-9c70-db90e6da9e29",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This is unlike any streaming API I'm used to working with.  I really want a way to point at a stream and say, `while obj, err := decoder.NextObject(); err == nil{`.  This looks like it might consume more that one object's worth of bytes off the reader.\n",
        "createdAt" : "2016-03-21T19:31:01Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a33b9115-761b-4aef-9681-22463cd1b976",
        "parentId" : "680dfd08-784d-4a9d-9c70-db90e6da9e29",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "There are two desires here.  1, reuse and grow a single buffer to minimize allocations during streaming decode.  2, have an API aligned with the normal decoder.  We have to be able to create a buffer of data to pass to the decoder.  To get the data, we have to read from a framer.  Someone has to decide the larger buffer size to create (which should be in this code).  \n\n`decoder.NextObject()` doesn't support into or defaults, so the signature would be different than Decode.  I don't think we want to lose that function when we switch to this, so the signature merely aligns with that.\n",
        "createdAt" : "2016-03-21T21:01:13Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "281d2f20-9bfb-42b5-a0bf-76cd255ef9ca",
        "parentId" : "680dfd08-784d-4a9d-9c70-db90e6da9e29",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think I agree with @smarterclayton here.\n",
        "createdAt" : "2016-03-22T08:54:05Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "54eaa56b921a4cd93ab5db5215d094decdc948bf",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@\t\treturn nil, nil, err\n\t}\n\treturn d.decoder.Decode(d.buf[:n], defaults, into)\n}\n"
  },
  {
    "id" : "6260f200-61e1-48fa-bcef-c850a28eb108",
    "prId" : 23288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54cf1529-67f7-4e75-8437-b9c7c506cdfc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is this a factory?\n",
        "createdAt" : "2016-03-21T20:58:11Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "58b62975-f52e-4203-baa9-0ece028ff4e8",
        "parentId" : "54cf1529-67f7-4e75-8437-b9c7c506cdfc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes.\n",
        "createdAt" : "2016-03-21T21:37:02Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "54eaa56b921a4cd93ab5db5215d094decdc948bf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +28,32 @@\n// Framer is a factory for creating readers and writers that obey a particular framing pattern.\ntype Framer interface {\n\tNewFrameReader(r io.Reader) io.Reader\n\tNewFrameWriter(w io.Writer) io.Writer"
  },
  {
    "id" : "ed8eca93-ac39-4e9b-99b0-401de997dc5b",
    "prId" : 23288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8629515-4de3-4f97-9e4e-fdfb562d6002",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm wondering about buffer size. Currently all our objects are relatively small (say <10kB). But is it going to always be like this? Maybe add a TODO to think whether this is enough?\n",
        "createdAt" : "2016-03-22T08:52:29Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b4dfc6fe-c6bf-4bbc-b47c-29490a5b37bf",
        "parentId" : "b8629515-4de3-4f97-9e4e-fdfb562d6002",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I was going to propose solving this with a growing buffer strategy:\n\n```\nfor each object {\n  n, err := reader.Read(d.buf)\n  if err == io.ErrShortRead {\n    if len(d.buf) > d.maxBuffer {\n       return ErrObjectTooLarge\n    }\n    grow(d.buf, len(d.buf) * 2)\n    // read ... loop\n  }\n}\n```\n\nwhich would allow us to start small, grow to a cap, but still reuse the buffer.  The framer (reader) would have to allow us to continue reading the frame, which my initial code doesn't do yet but is easy to do.\n",
        "createdAt" : "2016-03-23T01:31:12Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fce44b36-513c-422e-9174-b5b94716619b",
        "parentId" : "b8629515-4de3-4f97-9e4e-fdfb562d6002",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - SGTM. Can you please add a TODO?\n",
        "createdAt" : "2016-03-23T07:00:01Z",
        "updatedAt" : "2016-03-23T21:25:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "727e3f8a-42ca-4d18-9130-c905af8cd76b",
        "parentId" : "b8629515-4de3-4f97-9e4e-fdfb562d6002",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Added a lot more comments.  I think this is point in time until the watch\nPR is ready - that PR will make it a lot clearer what the code looks like\nwhen we need to get a streaming codec for \"application/json\" that returns\nnewline delimited JSON blobs, but a length prefix framed binary protobuf\nruntime.Unknown wrapping a raw protobuf byte array for\n\"application/vnd.protobuf\".\n\nOn Wed, Mar 23, 2016 at 3:00 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/runtime/serializer/streaming/streaming.go\n> https://github.com/kubernetes/kubernetes/pull/23288#discussion_r57116863\n> :\n> \n> > +type Serializer interface {\n> > -   NewEncoder(w io.Writer) Encoder\n> > -   NewDecoder(r io.Reader) Decoder\n> >   +}\n> >   +\n> >   +type decoder struct {\n> > -   reader  io.Reader\n> > -   decoder runtime.Decoder\n> > -   buf     []byte\n> >   +}\n> >   +\n> >   +func NewDecoder(r io.Reader, d runtime.Decoder) Decoder {\n> > -   return &decoder{\n> > -       reader:  r,\n> > -       decoder: d,\n> > -       buf:     make([]byte, 1024*1024),\n> \n> Yeah - SGTM. Can you please add a TODO?\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23288/files/d1795d969a42d04fad220f4c75f2b95f1cfceb85#r57116863\n",
        "createdAt" : "2016-03-23T21:26:39Z",
        "updatedAt" : "2016-03-23T21:26:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "54eaa56b921a4cd93ab5db5215d094decdc948bf",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@\t\treader:  r,\n\t\tdecoder: d,\n\t\tbuf:     make([]byte, 1024*1024),\n\t}\n}"
  }
]