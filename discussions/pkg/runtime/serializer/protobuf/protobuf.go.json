[
  {
    "id" : "f06ec4af-f712-4e95-8342-27625edae6fc",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe30e76f-389b-49b8-8d5d-0d36d8ada42c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: should we define it as const?\n",
        "createdAt" : "2016-03-07T13:35:55Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7192ca48-606b-4e58-aca0-3d5dff40dd52",
        "parentId" : "fe30e76f-389b-49b8-8d5d-0d36d8ada42c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We can't define slices as const unfortunately.  We could do it as a string\nbut that's kind of ugly.\n\nOn Mon, Mar 7, 2016 at 7:36 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In pkg/runtime/serializer/protobuf/protobuf.go\n> https://github.com/kubernetes/kubernetes/pull/20377#discussion_r55203238\n> :\n> \n> > -   \"github.com/gogo/protobuf/proto\"\n> >   +\n> > -   \"k8s.io/kubernetes/pkg/api/unversioned\"\n> > -   \"k8s.io/kubernetes/pkg/runtime\"\n> >   +)\n> >   +\n> >   +var (\n> > -   // protoEncodingPrefix serves as a magic number for an encoded protobuf message on this serializer. All\n> > -   // proto messages serialized by this schema will be preceeded by the bytes 0x6b 0x38 0x73, with the fourth\n> > -   // byte being reserved for the encoding style. The only encoding style defined is 0x00, which means that\n> > -   // the rest of the byte stream is a message of type k8s.io.kubernetes.pkg.runtime.Unknown (proto2).\n> > -   //\n> > -   // See k8s.io/kubernetes/pkg/runtime/generated.proto for details of the runtime.Unknown message.\n> > -   //\n> > -   // This encoding scheme is experimental, and is subject to change at any time.\n> > -   protoEncodingPrefix = []byte{0x6b, 0x38, 0x73, 0x00}\n> \n> nit: should we define it as const?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20377/files#r55203238.\n",
        "createdAt" : "2016-03-09T05:04:19Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7e58a739-517e-435e-8ed3-83c15179e9a7",
        "parentId" : "fe30e76f-389b-49b8-8d5d-0d36d8ada42c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "ahh ok, I always forget about it. Let's leave as is.\n",
        "createdAt" : "2016-03-09T10:06:39Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@\t//\n\t// This encoding scheme is experimental, and is subject to change at any time.\n\tprotoEncodingPrefix = []byte{0x6b, 0x38, 0x73, 0x00}\n\n\tbufferSize       = uint64(16384)"
  },
  {
    "id" : "82dae7d3-886b-4e29-8919-fc9a6f974565",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec95c9e9-5422-416a-9548-a72d7c66c125",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "please add:\n\nvar _ runtime.Serializer = &Serializer{}\n",
        "createdAt" : "2016-03-10T12:49:53Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "276e0204-414e-41d2-8737-dd3f0b13d60e",
        "parentId" : "ec95c9e9-5422-416a-9548-a72d7c66c125",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "ping\n",
        "createdAt" : "2016-03-29T08:25:38Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@\tcreater runtime.ObjectCreater\n\ttyper   runtime.Typer\n}\n\nvar _ runtime.Serializer = &Serializer{}"
  },
  {
    "id" : "275899c5-2bd0-447d-b7a5-ce5593c9c355",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f987c8b0-21e0-457c-bbb2-d4a010f65775",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't understand this if. Can you give an example where it would be useful (and add a comment about it).\n\nBTW - if into ==nil, I think we wouldn't be here, because \"ok\" would be false. Am I right?\n",
        "createdAt" : "2016-03-10T13:02:56Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "660dbf03-5f88-46a3-84da-b9381046750c",
        "parentId" : "f987c8b0-21e0-457c-bbb2-d4a010f65775",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "we overwrite into on line 90 with the last object (as per the contract of runtime.VersionedObjects).  I'll comment.\n",
        "createdAt" : "2016-03-29T16:30:15Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : 322,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\t// array so the first position is the decoded object and the second position is the outermost object.\n\t\t// if there were no objects in the versioned list passed to us, only add ourselves.\n\t\tif into != nil && into != obj {\n\t\t\tversioned.Objects = []runtime.Object{obj, into}\n\t\t} else {"
  },
  {
    "id" : "9c30aecc-1f93-48d8-8176-b0a3a2af9c4d",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af6a2f5c-2e07-4819-af59-ceaee3341d58",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Shouldn't we copy Version here too?\n",
        "createdAt" : "2016-03-10T13:10:17Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "5646ebbd-4e24-423f-a980-d4eaa7800d88",
        "parentId" : "af6a2f5c-2e07-4819-af59-ceaee3341d58",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Commented, but basically we always ensure there is at least a group set on what we return (if you pass a Job as into, we'll return at least the default group of \"batch\" if no other info as set).  Basically, the user passed into, we used that for defaulting, but if the caller provided a conflicting Kind (as \"Job2\") we set the group to \"batch\".\n",
        "createdAt" : "2016-03-29T16:39:09Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : null,
    "diffHunk" : "@@ -1,1 +364,368 @@\t\t// of into is set if there is no better information from the caller or object.\n\t\tif len(actual.Version) == 0 && len(actual.Group) == 0 {\n\t\t\tactual.Group = typed.Group\n\t\t}\n\t}"
  },
  {
    "id" : "21800868-2ef6-4392-b68a-9330d64feae0",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38040628-52ec-42ad-94a1-c48ec3e0d3cc",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can we somehow try to reuse the code between this Serializer and ImplicitSerializer?\nThe majority of the code is common - maybe create some helper function?\n",
        "createdAt" : "2016-03-10T13:19:40Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b954c70d-103e-4471-b32d-f3bce5b0542f",
        "parentId" : "38040628-52ec-42ad-94a1-c48ec3e0d3cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's tough because one requires `into` (raw) and the other does not.  Will try to extract something.\n",
        "createdAt" : "2016-03-29T16:43:13Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4467a43c-118f-4465-a157-33463967e4e1",
        "parentId" : "38040628-52ec-42ad-94a1-c48ec3e0d3cc",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Was able to extract a small bit.  They are subtly different in a number of ways that make it hard.\n",
        "createdAt" : "2016-03-29T16:46:35Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "101a1fed-e7cb-4ad2-99d4-8fb769b3753e",
        "parentId" : "38040628-52ec-42ad-94a1-c48ec3e0d3cc",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - sure. That lgtm\n",
        "createdAt" : "2016-03-30T21:54:13Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : 395,
    "diffHunk" : "@@ -1,1 +393,397 @@\t\treturn nil, actual, err\n\t}\n\treturn obj, actual, nil\n}\n"
  },
  {
    "id" : "4816b016-e39c-450b-8652-508dfc05b9e8",
    "prId" : 20377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69924226-6409-4198-928c-612606e31e3b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Just curious - why do you call the arg \"peek\"? \n",
        "createdAt" : "2016-03-29T08:32:52Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "56c9de31-c026-4c2b-a41f-b3e525d7c927",
        "parentId" : "69924226-6409-4198-928c-612606e31e3b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just as a hint to the author that they shouldn't expect the full io stream here - they are allowed to read however much the caller gives them, but no more (we wouldn't want to peek 10 megabytes into the file).\n",
        "createdAt" : "2016-03-29T16:54:45Z",
        "updatedAt" : "2016-03-31T15:38:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2139b186ccaac91a28473ce872a825fbed31691",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +232,236 @@\n// RecognizesData implements the RecognizingDecoder interface.\nfunc (s *Serializer) RecognizesData(peek io.Reader) (bool, error) {\n\tprefix := make([]byte, 4)\n\tn, err := peek.Read(prefix)"
  }
]