[
  {
    "id" : "522465f6-a45b-44a7-a658-37621cbad708",
    "prId" : 38330,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38330#pullrequestreview-12117789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01a59a39-6ef0-46c8-8b14-01aa9cfe6793",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "wouldn't this do weird things if I have a `Deployment.v1beta1.extensions`, but pass a versioner that has `Job.v1.batch`?",
        "createdAt" : "2016-12-08T20:12:07Z",
        "updatedAt" : "2016-12-08T20:12:07Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "819f5aeb-a562-4578-9920-7b5d9340c544",
        "parentId" : "01a59a39-6ef0-46c8-8b14-01aa9cfe6793",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "No, `e.Version.KindForGroupVersionKinds` will return `ok=false` in this case, and the code falls back to the first gvk returned by the ObjectTyper.",
        "createdAt" : "2016-12-08T21:08:55Z",
        "updatedAt" : "2016-12-08T21:08:55Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af15f4d30da565907bf5b245ec3b2b41e97e69b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +251,255 @@\t\t}\n\t}\n\tkind.SetGroupVersionKind(gvk)\n\terr = e.Encoder.Encode(obj, stream)\n\tkind.SetGroupVersionKind(oldGVK)"
  },
  {
    "id" : "b221c628-bcc7-4187-bbb2-7e6e85e48321",
    "prId" : 33352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33352#pullrequestreview-3416565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20812b82-53ee-4182-bad2-6e6bfa352479",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think I don't understand why we can't modify the original object. This has just been decoded here, so why we can't do it?\n",
        "createdAt" : "2016-10-04T10:01:07Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f8359067-9c01-4024-94de-1832f76b9118",
        "parentId" : "20812b82-53ee-4182-bad2-6e6bfa352479",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The contract of \"VersionedObjects\" is that we return the decoded, unmodified external version, and the internal, modified version.  In the old code (conversion+defaulting) only the second object had defaults applied.  This is preserving that behavior (various tests caught it).\n",
        "createdAt" : "2016-10-09T00:10:43Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "957c0955aa0ca0dc4eb6b220def556525b9d880c",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t// perform defaulting if requested\n\t\tif c.defaulter != nil {\n\t\t\t// create a copy to ensure defaulting is not applied to the original versioned objects\n\t\t\tif isVersioned {\n\t\t\t\tcopied, err := c.copier.Copy(obj)"
  },
  {
    "id" : "9eb4174a-78f7-45e2-b6a4-58082be9cb9b",
    "prId" : 33352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33352#pullrequestreview-2677904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a9f6986-40bb-4a7e-b327-2d7d8b55dc1c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This error handling is strange. Maybe at least some glog.Errorf() here?\n",
        "createdAt" : "2016-10-04T10:01:24Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a4f044ab-f231-4ba3-83ee-cb9b4a92998c",
        "parentId" : "6a9f6986-40bb-4a7e-b327-2d7d8b55dc1c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Now I see it's pretty much copy from the below code, so maybe Errorf in both places...\n",
        "createdAt" : "2016-10-04T10:03:31Z",
        "updatedAt" : "2016-10-19T01:07:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "957c0955aa0ca0dc4eb6b220def556525b9d880c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +127,131 @@\t\t\t\tif err != nil {\n\t\t\t\t\tutilruntime.HandleError(err)\n\t\t\t\t\tcopied = obj\n\t\t\t\t}\n\t\t\t\tversioned.Objects = []runtime.Object{copied}"
  },
  {
    "id" : "932bb69e-547c-470f-8c97-ab37b06d88a2",
    "prId" : 26007,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21da55fc-b3c7-40ce-ba88-53731d3b4b19",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I don't understand it - why do you want to have a for if there is exactly one element in the slice?\n",
        "createdAt" : "2016-05-23T09:31:01Z",
        "updatedAt" : "2016-05-23T09:31:01Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "91130f03-035c-4185-adba-1943668191c6",
        "parentId" : "21da55fc-b3c7-40ce-ba88-53731d3b4b19",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We need to get the first value out of the map without knowing the key.\n\nOn Mon, May 23, 2016 at 5:31 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/runtime/serializer/versioning/versioning.go\n> https://github.com/kubernetes/kubernetes/pull/26007#discussion_r64192958\n> :\n> \n> > @@ -104,6 +104,11 @@ func NewCodec(\n> >             }\n> >             internal.encodeVersion[v.Group] = v\n> >         }\n> > -       if len(internal.encodeVersion) == 1 {\n> > -           for _, v := range internal.encodeVersion {\n> \n> I don't understand it - why do you want to have a for if there is exactly\n> one element in the slice?\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/26007/files/b1a759cbbc594a7552971a09896034298daf114a..a9c3edc61300320016c2820e28b17260a548118e#r64192958\n",
        "createdAt" : "2016-05-23T14:00:37Z",
        "updatedAt" : "2016-05-23T14:00:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6961d6fd623e52993a771f0591acfcebab2be6d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +106,110 @@\t\t}\n\t\tif len(internal.encodeVersion) == 1 {\n\t\t\tfor _, v := range internal.encodeVersion {\n\t\t\t\tinternal.preferredEncodeVersion = []unversioned.GroupVersion{v}\n\t\t\t}"
  },
  {
    "id" : "26cdd566-b3c5-4a59-a1dc-f283ff1f97a7",
    "prId" : 25018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3774809-193b-4384-b65a-9ab5484dcb04",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "So are we assuming this safe by default since during a conversion step every sane thing I can think of throws away the original or is there some reason I'm not seeing that makes this always safe?\n",
        "createdAt" : "2016-05-06T20:05:32Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "14662df8-0c55-4061-bce9-3c530bc345f5",
        "parentId" : "f3774809-193b-4384-b65a-9ab5484dcb04",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If you are using a versioning codec, conversion is always \"create\nintermediate and then throw it away\".  If you don't run conversion, then we\nguarantee not to mutate your object, _unless_ you give us an object that\nmutates itself during serialization, in which case we hate you and you\ndeserve what you get.\n\nOn Fri, May 6, 2016 at 4:05 PM, David Eads notifications@github.com wrote:\n\n> In pkg/runtime/serializer/versioning/versioning.go\n> https://github.com/kubernetes/kubernetes/pull/25018#discussion_r62383689\n> :\n> \n> > @@ -69,7 +69,7 @@ func NewCodecForScheme(\n> >     encodeVersion []unversioned.GroupVersion,\n> >     decodeVersion []unversioned.GroupVersion,\n> >  ) runtime.Codec {\n> > -   return NewCodec(encoder, decoder, scheme, scheme, scheme, runtime.ObjectTyperToTyper(scheme), encodeVersion, decodeVersion)\n> > -   return NewCodec(encoder, decoder, runtime.UnsafeObjectConvertor(scheme), scheme, scheme, runtime.ObjectTyperToTyper(scheme), encodeVersion, decodeVersion)\n> \n> So are we assuming this safe by default since during a conversion step\n> every sane thing I can think of throws away the original or is there some\n> reason I'm not seeing that makes this always safe?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/25018/files/ca669c5de0eba299d027ecb1c9d32155ef058038#r62383689\n",
        "createdAt" : "2016-05-06T20:50:29Z",
        "updatedAt" : "2016-05-12T14:10:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea7e7a18cb0023a27c732f59dfd6ddd60719cccf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +72,76 @@\tdecodeVersion []unversioned.GroupVersion,\n) runtime.Codec {\n\treturn NewCodec(encoder, decoder, runtime.UnsafeObjectConvertor(scheme), scheme, scheme, runtime.ObjectTyperToTyper(scheme), encodeVersion, decodeVersion)\n}\n"
  },
  {
    "id" : "8de19ca5-dfac-4a2d-b816-433755d7f3bb",
    "prId" : 20846,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b18ef28-23ad-422c-8343-0f7bb62de6df",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This part is fine with me\n",
        "createdAt" : "2016-02-09T02:21:59Z",
        "updatedAt" : "2016-02-15T13:49:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89bd8366417520970bd836bd8d9e1bbbf64d9b8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +58,62 @@\t\tinternal.encodeVersion = make(map[string]unversioned.GroupVersion)\n\t\tfor _, v := range encodeVersion {\n\t\t\t// first one for a group wins.  This is consistent with best to worst order throughout the codebase\n\t\t\tif _, ok := internal.encodeVersion[v.Group]; ok {\n\t\t\t\tcontinue"
  }
]