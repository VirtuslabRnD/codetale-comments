[
  {
    "id" : "6934d861-5029-428f-ac74-6000dfc3c7f8",
    "prId" : 38058,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38058#pullrequestreview-12003267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dce3da71-fce3-47f4-ac39-c8d4d874696a",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`mutable` answers my previous question about modifying in an accessor.",
        "createdAt" : "2016-12-08T11:27:37Z",
        "updatedAt" : "2016-12-10T23:07:43Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "42e0eda3e41a2400863fe40bc684292b8c9d4e23",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +245,249 @@\t// IsList returns true if this type is a list or matches the list convention - has an array called \"items\".\n\tIsList() bool\n\t// UnstructuredContent returns a non-nil, mutable map of the contents of this object. Values may be\n\t// []interface{}, map[string]interface{}, or any primitive type. Contents are typically serialized to\n\t// and from JSON."
  },
  {
    "id" : "994fc19f-7aea-4dad-a618-9e2d8b37254e",
    "prId" : 26044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2cf050d-0836-4cc0-8d91-9f81fcf7e95a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess I would expect this interface to provide just one function, which takes in a fully specified GVK and returns a fully specified GVK. It answers the question \"what should this type be converted to?\"\n",
        "createdAt" : "2016-07-12T16:47:34Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0f33f7a2-3b87-498d-8760-b251771dfa10",
        "parentId" : "d2cf050d-0836-4cc0-8d91-9f81fcf7e95a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The problem is that responsibility today belongs to the scheme, which has the info \"what version _may_ this kind be converted to\".  This type is \"given this info, do you you want to express a preference about _where_ to go\".\n",
        "createdAt" : "2016-07-19T16:15:15Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7218228c-1928-4098-a5c2-28ebfc5b121c",
        "parentId" : "d2cf050d-0836-4cc0-8d91-9f81fcf7e95a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "In that case, maybe the scheme should give a list of options and this interface chooses one.\n",
        "createdAt" : "2016-07-21T22:37:31Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "12d7032c3973e3401244970b240ceae995a8eac2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +32,36 @@\n// GroupVersioner refines a set of possible conversion targets into a single option.\ntype GroupVersioner interface {\n\t// KindForGroupVersionKinds returns a desired target group version kind for the given input, or returns ok false if no\n\t// target is known. In general, if the return target is not in the input list, the caller is expected to invoke"
  },
  {
    "id" : "18d60e54-191f-4dd5-8ba2-6bc922972d99",
    "prId" : 26044,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "174f5378-5ed0-475b-9264-33ad41018f32",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why do these need to be separate interfaces? Why not just always re-call the parent converter?\n",
        "createdAt" : "2016-07-12T16:49:14Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "64033799-04df-4fe6-a46a-9d747c509b66",
        "parentId" : "174f5378-5ed0-475b-9264-33ad41018f32",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Because you don't always want the same convertor to be used.  For example, the majority of runtime.Unknown -> runtime.RawExtension conversions could be generic to context (just does a straight up decode).  But specific cases actually need to handle objects differently - for instance Templates don't actually want to decode objects because type marshaling would break the template replacement.  Templates want to use the unstructured decoder, which preserves the exact syntax of the owner.\n\nSo basically, each top level object can define a distinct behavior.\n",
        "createdAt" : "2016-07-19T16:16:57Z",
        "updatedAt" : "2016-08-18T18:46:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "12d7032c3973e3401244970b240ceae995a8eac2",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +155,159 @@}\n\n// NestedObjectEncoder is an optional interface that objects may implement to be given\n// an opportunity to encode any nested Objects / RawExtensions during serialization.\ntype NestedObjectEncoder interface {"
  },
  {
    "id" : "934dc016-4caa-442f-b9ed-aad59d59614b",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69201530-e772-49e1-b28a-ca39cf2ac7ec",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Seems like this should have `SupportedMediaTypes` too.\n",
        "createdAt" : "2016-04-25T15:25:58Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7d5e7fb1-3670-4164-a80c-02b72b8a9195",
        "parentId" : "69201530-e772-49e1-b28a-ca39cf2ac7ec",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Probably at some point, did not expose it yet until we need it.\n\nOn Mon, Apr 25, 2016 at 11:26 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/runtime/interfaces.go\n> https://github.com/kubernetes/kubernetes/pull/24710#discussion_r60932967\n> :\n> \n> > -   StreamingSerializerForMediaType(mediaType string, params map[string]string) (s StreamSerializerInfo, ok bool)\n> >   +\n> > -   // EncoderForVersion returns an encoder that ensures objects being written to the provided\n> > -   // serializer are in the provided group version.\n> > -   // TODO: take multiple group versions\n> > -   EncoderForVersion(serializer Encoder, gv unversioned.GroupVersion) Encoder\n> > -   // DecoderForVersion returns a decoder that ensures objects being read by the provided\n> > -   // serializer are in the provided group version by default.\n> > -   // TODO: take multiple group versions\n> > -   DecoderToVersion(serializer Decoder, gv unversioned.GroupVersion) Decoder\n> >   +}\n> >   +\n> >   +// StorageSerializer is an interface used for obtaining encoders, decoders, and serializers\n> >   +// that can read and write data at rest. This would commonly be used by client tools that must\n> >   +// read files, or server side storage interfaces that persist restful objects.\n> >   +type StorageSerializer interface {\n> \n> Seems like this should have SupportedMediaTypes too.\n> \n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24710/files/e4a1f3c4b34ba5ef0c8f08009e202d0b048498ff#r60932967\n",
        "createdAt" : "2016-04-25T15:27:03Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +139,143 @@// that can read and write data at rest. This would commonly be used by client tools that must\n// read files, or server side storage interfaces that persist restful objects.\ntype StorageSerializer interface {\n\t// SerializerForMediaType returns a serializer for the provided media type.  Options is a set of\n\t// parameters applied to the media type that may modify the resulting output."
  },
  {
    "id" : "94c75a3d-ebee-4090-b4f9-c87adae6f566",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf0603bf-72b3-4bc6-a6de-76ddeb1acbfc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Comment on the relationship to ObjectTyper?\n",
        "createdAt" : "2015-12-02T00:27:59Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +29,33 @@)\n\n// Typer retrieves information about an object's group, version, and kind.\ntype Typer interface {\n\t// ObjectKind returns the version and kind of the provided object, or an"
  },
  {
    "id" : "b0c26ffa-ecfa-432c-b5de-449a70420ffe",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "699ad05c-38c7-48ba-9a25-8940b2cbcbb1",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Given the new methods on `runtime.Object`, would I ever end up unrecognized?\n",
        "createdAt" : "2015-12-10T13:49:39Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "8f9d0728-dacb-4e59-a9b1-0b058e3aafce",
        "parentId" : "699ad05c-38c7-48ba-9a25-8940b2cbcbb1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes - implementing runtime.Object means you can be part of a scheme.  It\ndoes not mean you are part of this scheme.\n\nOn Thu, Dec 10, 2015 at 8:49 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/runtime/interfaces.go\n> https://github.com/kubernetes/kubernetes/pull/17922#discussion_r47227244\n> :\n> \n> > -// Decoder defines methods for deserializing API objects into a given type\n> > -type Decoder interface {\n> > -   Decode(data []byte) (Object, error)\n> > -   // TODO: Remove this method?\n> > -   DecodeToVersion(data []byte, groupVersion unversioned.GroupVersion) (Object, error)\n> > -   DecodeInto(data []byte, obj Object) error\n> > -   // TODO: Remove this method?\n> > \n> > ## \\-   DecodeIntoWithSpecifiedVersionKind(data []byte, obj Object, groupVersionKind unversioned.GroupVersionKind) error\n> > -   DecodeParametersInto(parameters url.Values, obj Object) error\n> >   +// Typer retrieves information about an object's group, version, and kind.\n> >   +type Typer interface {\n> > -   // ObjectKind returns the version and kind of the provided object, or an\n> > -   // error if the object is not recognized (IsNotRegisteredError will return true).\n> \n> Given the new methods on runtime.Object, would I ever end up unrecognized?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17922/files#r47227244.\n",
        "createdAt" : "2015-12-10T15:06:57Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +32,36 @@type Typer interface {\n\t// ObjectKind returns the version and kind of the provided object, or an\n\t// error if the object is not recognized (IsNotRegisteredError will return true).\n\t// It returns whether the object is considered unversioned at the same time.\n\t// TODO: align the signature of ObjectTyper with this interface"
  },
  {
    "id" : "ae31509d-311f-4434-86af-3d31c59a7d9c",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think this signature is confusing.  I'd rather have two methods: `DecodeInto`, which does not require `defaults` and `Decode`, which does take `defaults`.\n",
        "createdAt" : "2015-12-10T13:53:25Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1c7de43e-fe51-4032-aef8-2f8ba8671008",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It doesn't compose that cleanly unfortunately.  Decode with conversion does\nneed to take defaults.\n\nOn Thu, Dec 10, 2015 at 8:53 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/runtime/interfaces.go\n> https://github.com/kubernetes/kubernetes/pull/17922#discussion_r47227652\n> :\n> \n> > -   // TODO: Add method for processing url parameters.\n> > -   // EncodeParameters(obj Object) (url.Values, error)\n> >   +type Decoder interface {\n> > -   // Decode attempts to deserialize the provided data using either the innate typing of the scheme or the\n> > -   // default kind, group, and version provided. It returns a decoded object as well as the actual kind, group, and\n> > -   // version decoded, or an error. If into is non-nil, it will be used as the target type and implementations\n> > -   // may choose to use it rather than reallocating an object. However, the object is not guaranteed to be\n> > -   // populated. The returned object type is not guaranteed to match into.\n> > -   Decode(data []byte, defaults *unversioned.GroupVersionKind, into Object) (Object, *unversioned.GroupVersionKind, error)\n> \n> I think this signature is confusing. I'd rather have two methods:\n> DecodeInto, which does not require defaults and Decode, which does take\n> defaults.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17922/files#r47227652.\n",
        "createdAt" : "2015-12-10T15:07:21Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "beb370d3-991a-45df-a854-d579fe80f42f",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "What is `innate typing of the scheme`?\nDoes `actual kind, group, and version decoded` mean the serialized kind/group/version in data?\n",
        "createdAt" : "2015-12-11T23:01:01Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "c6840442-6fc0-47bb-a1b8-b3d3239808ca",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes.  I'm still playing with the shape of this method, but it returns what\nthe deserialized value was (I still need to decide whether it's pre or post\ndefaulting, I started with post).\n\nOn Dec 11, 2015, at 6:01 PM, Chao Xu notifications@github.com wrote:\n\n> - // TODO: Add method for processing url parameters.\n> - // EncodeParameters(obj Object) (url.Values, error)\n>   +type Decoder interface {\n> - // Decode attempts to deserialize the provided data using either the innate typing of the scheme or the\n> - // default kind, group, and version provided. It returns a decoded object as well as the actual kind, group, and\n> - // version decoded, or an error. If into is non-nil, it will be used as the target type and implementations\n> - // may choose to use it rather than reallocating an object. However, the object is not guaranteed to be\n> - // populated. The returned object type is not guaranteed to match into.\n> - Decode(data []byte, defaults *unversioned.GroupVersionKind, into Object) (Object, *unversioned.GroupVersionKind, error)\n\nWhat is innate typing of the scheme?\nDoes actual kind, group, and version decoded mean the serialized\nkind/group/version in data?\n",
        "createdAt" : "2015-12-12T01:39:53Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0500249e-8df0-4cd8-b40d-33040d3321c2",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is it possible to remove `into` and the return value `*unversioned.GroupVersionKind` from the signature? Then this method is pure serialization. It will make the refactoring much more difficult, but it seems to worth the effort.\n",
        "createdAt" : "2015-12-12T02:00:32Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "31a7de2e-7951-414e-91a5-6e5a6797b0d3",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Into is pretty widely used in our codebase.  It's actually more correct in\nsome cases than version, because internal clients ultimately need a\nconcrete struct to deal with, and most decodes end up with a cast.\n\nI'm debating between two approaches to layering conversion and\nserialization.  The first, in this pr, wraps a naive serializer (limited\nversion awareness) with a version aware codec.  The challenge is that the\ninterface isn't quite identical.  On the plus side, it was possible to\nprove that we don't need 6 decode methods in order to satisfy our use\ncases, which was something I wasn't sure about until I went and touched all\nthe code again to remember.  On the negative side, negotiated versions are\nharder because a lot of code that has access to a codec may want to choose\nthe target serialization (specifically RESTMapper used by client commands\nand printers).  We also need access in a few cases to the versioned object\nand the original (such as in the apply code) but passing two codecs would\nbe silly\n\nThe alternative is an interface like Decode([]byte, DecodeOptions{}), where\nDecodeOptions may optionally specify things like:\n- version defaulting\n- desired target version\n- desired target object (into)\n- expected (or allowed) serialization formats\n- callback to get access to the raw deserialized object\n- callback to check the type of the object prior to final conversion, or to\n  perform advanced decoding\n- callback to transform nested encoded objects (List, Watch, etc)\n\nI may try that interface to see whether it simplifies the code.  Same for\nEncoding as well.\n\nUltimately the decoupling between conversion and serialization is necessary\nfor sanity of code, even a temporary state along the way is an improvement\n- there was lots of accumulated edge cases that deserved to be flensed and\n  given proper solutions.\n\nOn Dec 11, 2015, at 9:00 PM, Chao Xu notifications@github.com wrote:\n\nIn pkg/runtime/interfaces.go\nhttps://github.com/kubernetes/kubernetes/pull/17922#discussion_r47424917:\n\n> - // TODO: Add method for processing url parameters.\n> - // EncodeParameters(obj Object) (url.Values, error)\n>   +type Decoder interface {\n> - // Decode attempts to deserialize the provided data using either the innate typing of the scheme or the\n> - // default kind, group, and version provided. It returns a decoded object as well as the actual kind, group, and\n> - // version decoded, or an error. If into is non-nil, it will be used as the target type and implementations\n> - // may choose to use it rather than reallocating an object. However, the object is not guaranteed to be\n> - // populated. The returned object type is not guaranteed to match into.\n> - Decode(data []byte, defaults *unversioned.GroupVersionKind, into Object) (Object, *unversioned.GroupVersionKind, error)\n\nIs it possible to remove into and the return value\n*unversioned.GroupVersionKind from the signature? Then this method is pure\nserialization. It will make the refactoring much more difficult, but it\nseems to worth the effort.\n\nThe returned GVK is useful for type enforcement and is required in the\napiserver.  Simpler clients can just ignore it - I don't think creating\nmultiple methods should be necessary for that.  The resulting refactored\ndecode methods are notable mostly for the amount of type defaulting that is\nneeded.\n",
        "createdAt" : "2015-12-12T04:05:48Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a465ca6b-be2b-4df3-895b-4b2da53da899",
        "parentId" : "1dce6d42-90e0-4b0a-a2c0-386d779dcb4c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@kubernetes/goog-csi for the interface change.\n",
        "createdAt" : "2015-12-14T08:38:51Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +53,57 @@\t// provided, they are applied to the data by default. If no defaults or partial defaults are provided, the\n\t// type of the into may be used to guide conversion decisions.\n\tDecode(data []byte, defaults *unversioned.GroupVersionKind, into Object) (Object, *unversioned.GroupVersionKind, error)\n}\n"
  },
  {
    "id" : "e0d49c05-1bf8-46d6-b290-d485048b6afe",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b681633e-57e5-49e7-b3f4-34a6b05a712d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Even with the comment, the utility of this interface isn't clear to me.  Why shouldn't I just check for `Serializer`?  Do we anticipate drift?\n",
        "createdAt" : "2015-12-10T13:56:07Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "edc31895-777c-4e07-a5c3-18fe082b2318",
        "parentId" : "b681633e-57e5-49e7-b3f4-34a6b05a712d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Clarify usage.  Serializer is passed to interfaces that expect raw\nbehavior.  Codec is passed to things that expect conversion.  There are\nother factorings in the future, such as having Decode take more options\n(like the selected serializer).  I don't want to hang up on that - the\nchanges I am making to isolate clients from the impact of this makes\nSerializer a lower level stratification, not a higher level one.\n\nOn Thu, Dec 10, 2015 at 8:56 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/runtime/interfaces.go\n> https://github.com/kubernetes/kubernetes/pull/17922#discussion_r47227948\n> :\n> \n> > -   // EncodeToVersion convert and serializes an object in the internal format\n> > -   // to a specified output version. An error is returned if the object\n> > -   // cannot be converted for any reason.\n> > -   EncodeToVersion(obj Object, outVersion string) ([]byte, error)\n> > -   EncodeToVersionStream(obj Object, outVersion string, stream io.Writer) error\n> >   +// Codec is a Serializer that deals with the details of versioning objects. It offers the same\n> >   +// interface as Serializer, so this is a marker to consumers that care about the version of the objects\n> >   +// they receive.\n> >   +type Codec Serializer\n> \n> Even with the comment, the utility of this interface isn't clear to me.\n> Why shouldn't I just check for Serializer? Do we anticipate drift?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17922/files#r47227948.\n",
        "createdAt" : "2015-12-10T15:08:26Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +66,70 @@// interface as Serializer, so this is a marker to consumers that care about the version of the objects\n// they receive.\ntype Codec Serializer\n\n// ParameterCodec defines methods for serializing and deserializing API objects to url.Values and"
  },
  {
    "id" : "2acd5acc-04a5-476e-bb07-d7f15741e33f",
    "prId" : 17922,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcbf601b-4172-4d1d-8291-636ea78e635e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This should take a `GroupVersion`, right?\n",
        "createdAt" : "2015-12-10T14:01:22Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "55c38376-5200-41b6-afcd-1339fdbe5dd5",
        "parentId" : "fcbf601b-4172-4d1d-8291-636ea78e635e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I will change that in the PR that moves type registry out of conversion and\ninto runtime.  It's coupled enough I believe it should be done at the same\ntime.\n\nOn Thu, Dec 10, 2015 at 9:01 AM, David Eads notifications@github.com\nwrote:\n\n> In pkg/runtime/interfaces.go\n> https://github.com/kubernetes/kubernetes/pull/17922#discussion_r47228534\n> :\n> \n> >  }\n> > \n> >  ///////////////////////////////////////////////////////////////////////////////\n> >  // Non-codec interfaces\n> > \n> > +type ObjectVersioner interface {\n> > -   ConvertToVersion(in Object, outVersion string) (out Object, err error)\n> \n> This should take a GroupVersion, right?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17922/files#r47228534.\n",
        "createdAt" : "2015-12-10T15:08:56Z",
        "updatedAt" : "2016-01-22T18:27:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3262d8efd8ddbd90b0f938c0ebf4dd03d470a1fb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +92,96 @@\ntype ObjectVersioner interface {\n\tConvertToVersion(in Object, outVersion string) (out Object, err error)\n}\n"
  },
  {
    "id" : "bf11177c-d2b9-486c-97bb-1699137d3ef5",
    "prId" : 16726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6b60de-7beb-43f5-99c7-054ef427de75",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I changed the order of definitions in this file, because it was difficult to follow there.\n\nSo summarize the changes:\n- moved ObjectScheme to fixture.go - it is used only there and I think we should remove it completely\n- removed ObjectEncoder interface completely (merged with ObjectCodec)\n- added some TODOs for methods/interfaces that I think should be removed\n  Please take a look if you agree with that.\n",
        "createdAt" : "2015-11-03T12:58:07Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce95f68d2a37f0863465d810f7afe29e4a534da4",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +21,25 @@)\n\n// Codec defines methods for serializing and deserializing API objects.\ntype Codec interface {\n\tDecoder"
  },
  {
    "id" : "bb284874-38ef-4418-81d4-2ab17ec31e54",
    "prId" : 16726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This method is used to default the object to the version/kind deduced from the URL it's sent to. The parameter `kind` and `version` is deduced from the URL.\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/resthandler.go#L331\n\nWe need this method but perhaps we can move it to somewhere else.\n",
        "createdAt" : "2015-11-03T19:50:18Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "33fcd0ee-9437-41bc-860c-84ef3c626292",
        "parentId" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I know what it is used to - I added it TODO based on @lavalamp opinion that Codec shouldn't do any conversion (which I agree with).\n",
        "createdAt" : "2015-11-03T20:40:27Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c08ca7dc-ca35-463f-af3b-166dfb5939ec",
        "parentId" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sounds good. Thanks for the explanation. In that case, DecodeInto() should be removed as well, because if the version in `data` is different from that of the `obj`, it will do the conversion.\n",
        "createdAt" : "2015-11-03T21:15:17Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "00df2cc8-b51a-419b-ae4a-d9b82f017414",
        "parentId" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "To be clear, this is a long-term goal and we have a ways to get there.\n",
        "createdAt" : "2015-11-03T21:25:28Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e066599e-a922-4fd2-aad4-a1620dc4b049",
        "parentId" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "@caesarxuchao DecodeInto could instead return an error if the provided object is of the wrong type.\n",
        "createdAt" : "2015-11-03T21:26:29Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5a87fd47-beb9-41cf-9cdd-d0d7688e5ba5",
        "parentId" : "a831ff38-94dd-4e2e-8996-f787aaee41d2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "But yes. Codec parameters should not be referencing group/version/kind. I didn't stop `DecodeIntoWithSpecifiedVersionKind` because we needed to make progress.\n",
        "createdAt" : "2015-11-03T21:37:04Z",
        "updatedAt" : "2015-11-05T12:52:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce95f68d2a37f0863465d810f7afe29e4a534da4",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +34,38 @@\tDecodeInto(data []byte, obj Object) error\n\t// TODO: Remove this method?\n\tDecodeIntoWithSpecifiedVersionKind(data []byte, obj Object, kind, version string) error\n\n\t// TODO: Add method for processing url parameters."
  },
  {
    "id" : "2a2c46b2-f7b3-47d4-9627-78ade0930dba",
    "prId" : 16726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62a400ee-2060-4b4f-9134-0a472342b8a0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "s/exact/exact (deep!)/\n",
        "createdAt" : "2015-11-05T19:16:33Z",
        "updatedAt" : "2015-11-05T19:16:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "928e5730-b151-459a-8419-79676c04d304",
        "parentId" : "62a400ee-2060-4b4f-9134-0a472342b8a0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "won't block for this :)\n",
        "createdAt" : "2015-11-05T19:20:02Z",
        "updatedAt" : "2015-11-05T19:20:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5303368b-e971-46b3-b150-28979473a5e0",
        "parentId" : "62a400ee-2060-4b4f-9134-0a472342b8a0",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Thanks - I will be touching this file anyway very soon - so I will update it then.\n",
        "createdAt" : "2015-11-05T19:21:54Z",
        "updatedAt" : "2015-11-05T19:21:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce95f68d2a37f0863465d810f7afe29e4a534da4",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +110,114 @@// ObjectCopier duplicates an object.\ntype ObjectCopier interface {\n\t// Copy returns an exact copy of the provided Object, or an error if the\n\t// copy could not be completed.\n\tCopy(Object) (Object, error)"
  },
  {
    "id" : "9cf2f281-fdaf-4ae2-9015-fa41ff72e3b5",
    "prId" : 7490,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "986b9d41-d6ad-4fe0-b7d7-59b1f240cb41",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ObjectDecoder?\n",
        "createdAt" : "2015-05-01T16:06:01Z",
        "updatedAt" : "2015-05-01T16:06:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "acbc3a33-5832-4b1b-8629-b8310d5ad59b",
        "parentId" : "986b9d41-d6ad-4fe0-b7d7-59b1f240cb41",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It does both sides (decode and encode) which we call a codec elsewhere - this is the more powerful interface (let's you pick output version).\n\n> On May 1, 2015, at 12:06 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/runtime/interfaces.go:\n> \n> > +// ObjectScheme represents common conversions between formal external API versions\n> > +// and the internal Go structs. ObjectScheme is typically used with ObjectCodec to\n> > +// transform internal Go structs into serialized versions. There may be many valid\n> > +// ObjectCodecs for each ObjectScheme.\n> > +type ObjectScheme interface {\n> > -   ObjectConvertor\n> > -   ObjectTyper\n> > -   ObjectCreater\n> > -   ObjectCopier\n> >   +}\n> >   +\n> >   +// ObjectCodec represents the common mechanisms for converting to and from a particular\n> >   +// binary representation of an object.\n> >   +type ObjectCodec interface {\n> > -   ObjectEncoder\n> > -   Decoder\n> >   ObjectDecoder?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-05-01T16:08:24Z",
        "updatedAt" : "2015-05-01T16:08:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "12ba4e2452196eeb5c4c5187f7ad8f59ef5e56db",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +32,36 @@type ObjectCodec interface {\n\tObjectEncoder\n\tDecoder\n}\n"
  },
  {
    "id" : "f02f11d4-930d-4a1d-ba09-90aee9d62bea",
    "prId" : 5054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23d3bb18-7bce-4218-b0d3-5a5a89188d9d",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "nit:Creator\n",
        "createdAt" : "2015-03-09T06:32:41Z",
        "updatedAt" : "2015-03-09T19:45:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "efe04f9c-827c-4f59-bcfe-493e0d54a4c4",
        "parentId" : "23d3bb18-7bce-4218-b0d3-5a5a89188d9d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I mostly did this to be consistent with ObjectTyper.  Defer until we clean up runtime?\n",
        "createdAt" : "2015-03-09T15:24:19Z",
        "updatedAt" : "2015-03-09T19:45:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc19185f5de9325bb2c3cbfc2ffc3ea8f9490f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +47,51 @@\n// ObjectCreater contains methods for instantiating an object by kind and version.\ntype ObjectCreater interface {\n\tNew(version, kind string) (out Object, err error)\n}"
  },
  {
    "id" : "b6c77f14-ca53-4ec8-b74c-bcc8afb16c2b",
    "prId" : 1455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1f95bc5-f866-479c-8ec0-bb10a4711aa7",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "GetSelfLink for symmetry\n",
        "createdAt" : "2014-09-26T16:27:36Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "438fc15e-1406-4332-a88e-bf8a91381d68",
        "parentId" : "d1f95bc5-f866-479c-8ec0-bb10a4711aa7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This one is consistent with the rest of the interfaces, leaving. We can change them all later if it really bugs you.\n",
        "createdAt" : "2014-09-26T21:53:17Z",
        "updatedAt" : "2014-09-26T22:08:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e505601e0b4db4ec59441f20629e1fbe87d874",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +44,48 @@type SelfLinker interface {\n\tSetSelfLink(obj Object, selfLink string) error\n\tSelfLink(obj Object) (string, error)\n\n\t// Knowing ID is sometimes necssary to use a SelfLinker."
  }
]