[
  {
    "id" : "dbfa4539-b8bb-4f0d-a2c0-2b3b860c0652",
    "prId" : 63975,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63975#pullrequestreview-122828608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db11327a-90eb-4c99-9002-96a16d3bc0a6",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please add a check to ensure that nodeInfo.Node() is not nil before dereferencing it. It could be nil in tests.",
        "createdAt" : "2018-05-23T22:35:31Z",
        "updatedAt" : "2018-05-24T02:41:48Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "305cafa0-5344-4c2c-b78e-a1bb091465e7",
        "parentId" : "db11327a-90eb-4c99-9002-96a16d3bc0a6",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "The caller is already checking that, but if this function is used from another place, the new caller may not check. So, it is better to check in the function.",
        "createdAt" : "2018-05-23T22:38:40Z",
        "updatedAt" : "2018-05-24T02:41:48Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "aee48a19-407c-4c17-90f9-11773ee049ae",
        "parentId" : "db11327a-90eb-4c99-9002-96a16d3bc0a6",
        "authorId" : "3213399a-70fb-4ce2-9f8d-3bfbdc9c9ff9",
        "body" : "Yes, you are right. \r\nFixed it, thanks!",
        "createdAt" : "2018-05-24T02:34:05Z",
        "updatedAt" : "2018-05-24T02:41:48Z",
        "lastEditedBy" : "3213399a-70fb-4ce2-9f8d-3bfbdc9c9ff9",
        "tags" : [
        ]
      }
    ],
    "commit" : "506271b3635f1e43065f372f4718ac25c2aeb45e",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +111,115 @@\t\treturn\n\t}\n\tnodeName := nodeInfo.Node().GetName()\n\tif _, exist := ec.algorithmCache[nodeName]; !exist {\n\t\tec.algorithmCache[nodeName] = AlgorithmCache{}"
  },
  {
    "id" : "73746ec3-080c-4ec2-9c47-8efb421ea28b",
    "prId" : 63942,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63942#pullrequestreview-124114779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2447c38a-e7b2-4ede-bcf2-4356fb26a54e",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "If you want to name the return values, please use them in the function (instead of `result` and `exist`).",
        "createdAt" : "2018-05-25T20:02:50Z",
        "updatedAt" : "2018-05-29T18:23:54Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "df8b1de1-04ad-4501-af13-345814a6cf0f",
        "parentId" : "2447c38a-e7b2-4ede-bcf2-4356fb26a54e",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "The return type names are there for documentation purposes, so the return statement becomes redundant if I use the same names. I am under the impression that returning values by assigning to named return variables is considered bad style, so I will leave the redundant return in place.",
        "createdAt" : "2018-05-29T18:24:02Z",
        "updatedAt" : "2018-05-29T18:24:02Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba08b05e286e7102dbc4a14638f440e8f42a171f",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +145,149 @@\tpodName, nodeName, predicateKey string,\n\tequivalenceHash uint64,\n) (value predicateResult, ok bool) {\n\tec.mu.RLock()\n\tdefer ec.mu.RUnlock()"
  },
  {
    "id" : "bb79100e-cf09-4f22-9b09-914d720ab07b",
    "prId" : 63459,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63459#pullrequestreview-121568052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d97f8931-7c12-4c51-bd22-5bf4bb3f8930",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "@resouer - do we know why this is nil only sometimes ?",
        "createdAt" : "2018-05-07T20:25:18Z",
        "updatedAt" : "2018-05-07T20:25:27Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "a953c010-7451-43f7-912a-d8ac2b687f77",
        "parentId" : "d97f8931-7c12-4c51-bd22-5bf4bb3f8930",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "I have some theory, but would like to verify it somehow tomorrow :/",
        "createdAt" : "2018-05-08T13:58:50Z",
        "updatedAt" : "2018-05-08T13:58:50Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "33ab35e8-dc9a-4acd-9914-09480ce12d04",
        "parentId" : "d97f8931-7c12-4c51-bd22-5bf4bb3f8930",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "In some of our tests, nodeInfo.Node() is nil. It is expected.",
        "createdAt" : "2018-05-18T20:48:59Z",
        "updatedAt" : "2018-05-18T20:49:18Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "8df3ab75a4fbd814842541724bd30df10c80a702",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +89,93 @@\tdefer ec.mu.Unlock()\n\n\tif nodeInfo == nil || nodeInfo.Node() == nil {\n\t\t// This may happen during tests.\n\t\treturn false, []algorithm.PredicateFailureReason{}, fmt.Errorf(\"nodeInfo is nil or node is invalid\")"
  },
  {
    "id" : "fe5db19e-b4b1-4445-a1c7-81d6d8480738",
    "prId" : 63459,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63459#pullrequestreview-121563960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea42b18-c451-4024-a08d-4fed7817045d",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I think this should return false, nil, fmt.Errorf(...), but I know that breaks tests today.",
        "createdAt" : "2018-05-18T20:33:54Z",
        "updatedAt" : "2018-05-18T20:34:43Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8df3ab75a4fbd814842541724bd30df10c80a702",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +91,95 @@\tif nodeInfo == nil || nodeInfo.Node() == nil {\n\t\t// This may happen during tests.\n\t\treturn false, []algorithm.PredicateFailureReason{}, fmt.Errorf(\"nodeInfo is nil or node is invalid\")\n\t}\n"
  },
  {
    "id" : "5ab56cbb-bff2-48d1-b098-a3fec043917a",
    "prId" : 63178,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63178#pullrequestreview-116078854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5620b9f-2179-457c-a863-d24683650c2a",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "Can we have test case for this function and specifically when nodeInfo is stale.",
        "createdAt" : "2018-04-26T18:08:36Z",
        "updatedAt" : "2018-04-27T22:58:31Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "a9c1cdeb-011f-49ac-bf6f-fc1491f10c2e",
        "parentId" : "d5620b9f-2179-457c-a863-d24683650c2a",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Done",
        "createdAt" : "2018-04-27T20:48:17Z",
        "updatedAt" : "2018-04-27T22:58:31Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d30b1ad623c4e71b8d9ed33f4b18cc353908c7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +96,100 @@\t}\n\t// Skip update if NodeInfo is stale.\n\tif cache != nil && cache.IsUpToDate(nodeInfo) {\n\t\tec.updateResult(pod.GetName(), nodeInfo.Node().GetName(), predicateKey, fit, reasons, equivClassInfo.hash)\n\t}"
  },
  {
    "id" : "e654b46d-a6b2-402a-b96b-143fde99f98c",
    "prId" : 58555,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58555#pullrequestreview-90944663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1d4fde5-47ac-4e5e-b22e-16f4ca968547",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Mind to do a quick benchmark for `getEquivalenceHash` costs before/after this change? It would be helpful for subsequent efforts.",
        "createdAt" : "2018-01-23T04:47:25Z",
        "updatedAt" : "2018-01-25T03:12:27Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "10e7621d-743a-4781-96c3-9e274ec03b15",
        "parentId" : "b1d4fde5-47ac-4e5e-b22e-16f4ca968547",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Sure, I can add a benchmark for this.",
        "createdAt" : "2018-01-23T19:09:12Z",
        "updatedAt" : "2018-01-25T03:12:27Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9a3815a6ce6761bba69e28fb96db704e03708ea",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +211,215 @@// equivalent from the perspective of scheduling.\nfunc (ec *EquivalenceCache) getEquivalenceHash(pod *v1.Pod) (uint64, bool) {\n\tequivalencePod := getEquivalencePod(pod)\n\thash := fnv.New32a()\n\thashutil.DeepHashObject(hash, equivalencePod)"
  }
]