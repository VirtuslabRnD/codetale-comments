[
  {
    "id" : "a1fd06f0-d5c2-4a96-8c0e-61e76f6b870c",
    "prId" : 99671,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99671#pullrequestreview-607475773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5288129-cd30-486b-abb8-f315adfcc904",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Not the best practice to compare error strings.\r\n\r\nPlease do a follow up where you use `cmp.Equal`",
        "createdAt" : "2021-03-09T14:35:07Z",
        "updatedAt" : "2021-03-09T14:35:14Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d79ebbe588ffcf82c2a4e7667b9ee7c478378a9",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +422,426 @@\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\tif !strings.Contains(err.Error(), tc.wantErr) {\n\t\t\t\t\tt.Fatalf(\"Unexpected error, got %v, expect: %s\", err, tc.wantErr)\n\t\t\t\t}"
  },
  {
    "id" : "816acac4-8bd0-43ce-b42b-15783f9f6894",
    "prId" : 95576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95576#pullrequestreview-509411455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7109e3f5-f99a-4280-9538-b505e85f6045",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "also add `wantPlugins schedulerapi.Plugins`",
        "createdAt" : "2020-10-15T14:03:15Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ed6ca58bc29c341e69efe6a66deedf77db196db",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +95,99 @@\t\tname             string\n\t\tconfigData       []byte\n\t\twantPluginConfig []schedulerapi.PluginConfig\n\t\twantPlugins      *schedulerapi.Plugins\n\t}{"
  },
  {
    "id" : "19bc6bb8-12c7-4f70-a567-912b1494ea78",
    "prId" : 95576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95576#pullrequestreview-514807579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f156ce5-f6fe-4210-973e-61b3ea04a80d",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Actually, wait for #95287 to merge first, so we can get rid of these lines\r\n\r\n/hold",
        "createdAt" : "2020-10-15T20:37:05Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "f6115919-8504-4391-b88a-7819d4530432",
        "parentId" : "7f156ce5-f6fe-4210-973e-61b3ea04a80d",
        "authorId" : "4ff6be29-02e8-4f7f-8b4d-a207c13aeecd",
        "body" : "OK",
        "createdAt" : "2020-10-19T17:50:06Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "4ff6be29-02e8-4f7f-8b4d-a207c13aeecd",
        "tags" : [
        ]
      },
      {
        "id" : "6559c6b4-2492-4558-989e-8b1e3214408d",
        "parentId" : "7f156ce5-f6fe-4210-973e-61b3ea04a80d",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It looks to be taking some time\r\n\r\n/hold cancel",
        "createdAt" : "2020-10-22T14:45:41Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ed6ca58bc29c341e69efe6a66deedf77db196db",
    "line" : 384,
    "diffHunk" : "@@ -1,1 +250,254 @@\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tReserve:  &schedulerapi.PluginSet{},\n\t\t\t\tPermit:   &schedulerapi.PluginSet{},\n\t\t\t\tPreBind:  &schedulerapi.PluginSet{},"
  },
  {
    "id" : "ce5a81cb-1db9-40f7-abb1-ee0fc52c2d7b",
    "prId" : 95576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95576#pullrequestreview-511964340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22795d43-72bb-4fdb-9996-3cb03aea1d68",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Have you tried setting these 2 to nil?",
        "createdAt" : "2020-10-15T20:39:13Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "1d8625da-9081-4b8d-82e7-4901558bf429",
        "parentId" : "22795d43-72bb-4fdb-9996-3cb03aea1d68",
        "authorId" : "4ff6be29-02e8-4f7f-8b4d-a207c13aeecd",
        "body" : "It raises and exception for both, *informerFactory* is used for the service affinity, and the *recorderFactory* is used when creating a new Profile.",
        "createdAt" : "2020-10-19T16:51:59Z",
        "updatedAt" : "2020-10-22T15:43:41Z",
        "lastEditedBy" : "4ff6be29-02e8-4f7f-8b4d-a207c13aeecd",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ed6ca58bc29c341e69efe6a66deedf77db196db",
    "line" : 504,
    "diffHunk" : "@@ -1,1 +342,346 @@\t\t\t\tclient,\n\t\t\t\tinformerFactory,\n\t\t\t\trecorderFactory,\n\t\t\t\tmake(chan struct{}),\n\t\t\t\tWithAlgorithmSource(createAlgorithmSourceFromPolicy(tc.configData, client)),"
  },
  {
    "id" : "33bfb9f2-37fb-4f08-9f79-8d5e1aae22a0",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-412181275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "what about the following?\r\n\r\n```\r\n\tcc.InformerFactory.Start(ctx.Done())\r\n\tcc.InformerFactory.WaitForCacheSync(ctx.Done())\r\n```",
        "createdAt" : "2020-05-14T14:34:38Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "995db482-903f-4ab5-8bef-f86f8b62ddc3",
        "parentId" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I tried but didn't help. Say `podLister.Pods(pod.Namespace).Get(pod.Name)` won't return the expected cache pod.",
        "createdAt" : "2020-05-14T15:13:05Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "32023ccd-4bc8-4e21-976c-5812da9926d0",
        "parentId" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Did you do it after creating the podInformer?",
        "createdAt" : "2020-05-14T15:22:04Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "5cde92dc-ed93-412d-a38f-efcd5770100f",
        "parentId" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I tried both (https://gist.github.com/Huang-Wei/8fdabdcafd4d8614fe748c66986e995a) and even used the clientset to Create() the testPod. In all cases, `podLister.Pods(pod.Namespace).Get(pod.Name)` returns nil ðŸ˜ž ",
        "createdAt" : "2020-05-14T18:10:03Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "056ab2a0-65ef-49fe-a991-5ceed6c56813",
        "parentId" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Aha, I found the trick here:\r\n\r\n- `informerFactory` doesn't instantiate any informer when it's created (informers.NewSharedInformerFactory)\r\n- `podInformer`, create by `informerFactory.Core().V1().Pods()` is nothing but a \"hollow\" interface - the concrete podInfomer and its indexer are not created yet\r\n- when the real podInformer (and its indexer) is created? You're hearing right - by explicitly call `podInfomer.Informer()` or `podInfomer.Indexer()` - which will instantiate everything a podInformer needs. Otherwise, the podInformer will be only ready until call ErrFunc (by calling the informer's Lister() function), but by that time, informerFactory has already started for a while, so the informer doesn't really work.\r\n- given the above fact, I really don't want the test to rely on such a tricky triggering point of podInformer.",
        "createdAt" : "2020-05-14T18:29:18Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "93536a2a-0e3a-476c-9440-978ce2df907f",
        "parentId" : "46c84b5d-feca-40f1-bf66-d94efc780496",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This is standard. I remember running into this in the past when writing my own tests.\r\n\r\nSince this is what we do in production code anyways, we can just do the same.",
        "createdAt" : "2020-05-14T21:01:20Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +322,326 @@\t\t\tinformerFactory := informers.NewSharedInformerFactory(client, 0)\n\t\t\tpodInformer := informerFactory.Core().V1().Pods()\n\t\t\t// Need to add/update/delete testPod to the store.\n\t\t\tpodInformer.Informer().GetStore().Add(testPod)\n"
  },
  {
    "id" : "9d997905-872e-42b8-a073-ef4aaef4d55a",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-411913784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03193c44-9a2a-477b-b230-9fb0ea94c3a4",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Why are we testing this?",
        "createdAt" : "2020-05-14T14:44:45Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "eaee74bb-7838-40c4-92f8-9c15d4ba5934",
        "parentId" : "03193c44-9a2a-477b-b230-9fb0ea94c3a4",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "to cover the path \"err == nil\" here, so **don't** remove the Node from cache:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/438debfb7263619d444c2eb9f6b52747415a9f24/pkg/scheduler/factory.go#L464-L470\r\n\r\n",
        "createdAt" : "2020-05-14T15:15:12Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "bb21aca6-03da-4346-96c2-f9dd6ff2cb17",
        "parentId" : "03193c44-9a2a-477b-b230-9fb0ea94c3a4",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "sg",
        "createdAt" : "2020-05-14T15:20:09Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +381,385 @@\t\t},\n\t\t{\n\t\t\tname:            \"node is not deleted but NodeNotFound is received incorrectly\",\n\t\t\tnodes:           []v1.Node{*nodeFoo, *nodeBar},\n\t\t\tinjectErr:       apierrors.NewNotFound(apicore.Resource(\"node\"), nodeFoo.Name),"
  },
  {
    "id" : "f2352d23-b6dd-43ae-a4e8-d43a04b9b4ab",
    "prId" : 87725,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87725#pullrequestreview-352317195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a293c302-d891-474c-93c8-ed55725a1713",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "What is the prioritiby between `c. hardPodAffinitySymmetricWeight` and `hardPodAffinityWeight` in plugin config, which one would be overwritten if we have them both?",
        "createdAt" : "2020-02-01T11:45:03Z",
        "updatedAt" : "2020-02-03T19:59:34Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "c734e33c-8284-4c02-ac24-059052f4ff1a",
        "parentId" : "a293c302-d891-474c-93c8-ed55725a1713",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It was never documented. But looking at the appends in `Configurator.createFromConfig` and `Configurator.createFromProvider` and how the arrays are processed in `NewFramework`, it looks like the pluginConfig had higher preference. This doesn't change with this PR.\r\n\r\nBut ultimately, it doesn't matter much, as a follow up PR is removing `c.hardPodAffinitySymmetricWeight` from v1alpha2.",
        "createdAt" : "2020-02-03T15:00:20Z",
        "updatedAt" : "2020-02-03T19:59:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "60c972098ce888fd1b2ee6be837cc9215c93cd65",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +194,198 @@\t\t\t{\"name\" : \"NodeAffinityPriority\", \"weight\" : 2},\n\t\t\t{\"name\" : \"ImageLocalityPriority\", \"weight\" : 1},\n\t\t\t{\"name\" : \"InterPodAffinityPriority\", \"weight\" : 1}\n\t\t],\n\t\t\"hardPodAffinitySymmetricWeight\" : 10"
  },
  {
    "id" : "973a4796-d28f-40c7-ae06-6f71e083c768",
    "prId" : 85150,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85150#pullrequestreview-315841884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1281ea8-d140-4f6d-ac72-d4b01cebd14e",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This is missing `enableNonPreempting`, but it's hard to see if there's anything else missing. Can you think of a way of avoiding this?",
        "createdAt" : "2019-11-12T20:53:44Z",
        "updatedAt" : "2019-11-13T00:38:41Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "19c70912-58f3-499d-94c1-6b502096ad7d",
        "parentId" : "b1281ea8-d140-4f6d-ac72-d4b01cebd14e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Unit tests is supposed to capture this if this is a parameter that is actually tested. It seems that we don't quite care about the actual parameters in this test file.",
        "createdAt" : "2019-11-12T21:04:47Z",
        "updatedAt" : "2019-11-13T00:38:41Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "acc66ede1afe36bb9a151b0f69bab71687ea916e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +544,548 @@\tinformerFactory := informers.NewSharedInformerFactory(client, 0)\n\tsnapshot := nodeinfosnapshot.NewEmptySnapshot()\n\treturn &Configurator{\n\t\tclient:                         client,\n\t\tinformerFactory:                informerFactory,"
  }
]