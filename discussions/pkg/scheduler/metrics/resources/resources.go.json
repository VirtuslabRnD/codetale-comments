[
  {
    "id" : "c36e5f47-d8b0-464a-bc94-3cba4771a92f",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527301232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c74e6b1-5f46-4439-8755-7087a1478589",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "My only concern with saying kubelet is regarding static Pods. kubelet doesn't publish them to the apiserver until they are running (IIRC)",
        "createdAt" : "2020-11-09T22:29:44Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "5db0e841-61f3-47aa-8ac9-3321e371683e",
        "parentId" : "1c74e6b1-5f46-4439-8755-7087a1478589",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "True but the kubelet applies the same rules to resources to static and non static pods.  I think in this case the comment is about the resource model, and the kubelet and scheduler as high level components.  There are definitely special case behaviors all over both of those components but they are special cases.",
        "createdAt" : "2020-11-10T15:10:17Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@// Package resources provides a metrics collector that reports the\n// resource consumption (requests and limits) of the pods in the cluster\n// as the scheduler and kubelet would interpret it.\npackage resources\n"
  },
  {
    "id" : "f64c6c12-be44-4788-a70c-c87bd2b4a36e",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-526707082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45448412-0e94-47cc-978c-2e8d05f07fd6",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "same problem with kubelet here",
        "createdAt" : "2020-11-09T22:31:02Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\trequests: resourceLifecycleDescriptors{\n\t\ttotal: metrics.NewDesc(\"kube_pod_resource_request\",\n\t\t\t\"Resources requested by workloads on the cluster, broken down by pod. This shows the resource usage the scheduler and kubelet expect per pod for resources along with the unit for the resource if any.\",\n\t\t\t[]string{\"namespace\", \"pod\", \"node\", \"scheduler\", \"priority\", \"resource\", \"unit\"},\n\t\t\tnil,"
  },
  {
    "id" : "148a631b-47ec-4997-987b-950c1604f972",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527308550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fde2a519-47d5-41a5-8634-db3ff73f2b5b",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It doesn't look like this function needs to be exported.",
        "createdAt" : "2020-11-09T22:55:20Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "5f4f449c-0d1e-47de-ab99-951dcbb9fd1f",
        "parentId" : "fde2a519-47d5-41a5-8634-db3ff73f2b5b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Doesn't need to but in general we don't aggressively enforce \"minimal public API\" as a style rule in Kube, and I prefer the clarity of composition here.",
        "createdAt" : "2020-11-10T15:17:07Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@// usage. This allows admins to assess the cost per resource at different phases\n// of startup and compare to actual resource usage.\nfunc NewPodResourcesMetricsCollector(podLister corelisters.PodLister) metrics.StableCollector {\n\treturn &podResourceCollector{\n\t\tlister: podLister,"
  },
  {
    "id" : "1462a2cf-6051-43c4-8f1d-e6a432fd5117",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-526707082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd4cbbed-4d43-4885-961d-f6d7fdd726f0",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "nit: have the order of these parameters match the metric labels.",
        "createdAt" : "2020-11-09T22:59:09Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@\tdesc *metrics.Desc,\n\tnamespace, name, nodeName, schedulerName, priority string,\n\tresourceName v1.ResourceName,\n\tunit string,\n\tval resource.Quantity,"
  },
  {
    "id" : "2cbd2b64-74f0-4d2d-ae08-5f7b279dc3fc",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-529234524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2284810-0ce6-4b78-a1cb-44a724b5b42d",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "why have the check then?",
        "createdAt" : "2020-11-10T19:00:10Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "38d346a0-3ef2-4e2f-8d93-0940d0ed9a87",
        "parentId" : "d2284810-0ce6-4b78-a1cb-44a724b5b42d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "so that we fall through clearly",
        "createdAt" : "2020-11-10T20:04:47Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fad88969-df8f-4e88-ac60-a3c155ab187e",
        "parentId" : "d2284810-0ce6-4b78-a1cb-44a724b5b42d",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "is it possible that an unscheduled Pod gets a Succeeded or Failed phase though?",
        "createdAt" : "2020-11-10T20:14:31Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "369459f6-40d2-4468-bb71-8c7ed0c33bbd",
        "parentId" : "d2284810-0ce6-4b78-a1cb-44a724b5b42d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "yes, if someone violates the API rules.  An extension can easily write pod status entries, and we shouldn't behave differently in that case (defensive).",
        "createdAt" : "2020-11-12T15:58:31Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@\tswitch {\n\tcase len(pod.Spec.NodeName) == 0:\n\t\t// unscheduled pods cannot be terminal\n\tcase pod.Status.Phase == v1.PodSucceeded, pod.Status.Phase == v1.PodFailed:\n\t\tterminal = true"
  },
  {
    "id" : "6e2901ee-664e-4de9-8ea7-8ce5fbd906cf",
    "prId" : 94866,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94866#pullrequestreview-527295938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b9d004-3b7a-4a50-8320-110a70049b5c",
        "parentId" : null,
        "authorId" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "body" : "I would prefer we prefix this with `scheduler_*` rather than `kube_*` since ultimately this metric is being generated by the scheduler.\r\n\r\n`kube_*` is the standard prefix for KSM-generated/derived metrics, so as an end user, when trying to understand or find documentation for this metric I'd check those docs, and then would be unable to find it: https://github.com/kubernetes/kube-state-metrics/blob/master/docs/pod-metrics.md",
        "createdAt" : "2020-11-10T21:28:16Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "31a2ac00-6c67-4307-a4bc-bfd13f41ef27",
        "tags" : [
        ]
      },
      {
        "id" : "80c70574-6562-4bb5-a404-dc0d45610219",
        "parentId" : "33b9d004-3b7a-4a50-8320-110a70049b5c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The KEP created the name under the global namespace because these are intended to be global metrics - the location within the project was chosen as a secondary characteristic, so I don't think location should dominate where the metric is.  Part of the KEP is about standardizing discovery of metrics that reflect the project - if we change names to reflect location, I think that worsens the end administrator experience because if we decide to move these in the future we would break name compatibility. I agree in general that we lack a single unifying principle of metric naming that would have a space for what I would consider \"API metrics\" (as seen by #95839) - the metrics that the Kube project owns that represent a key connection between end user and project without exposing underlying component implementation.\r\n\r\nI don't think KSM \"owns\" `kube_pod_` any more than Kubernetes the project does so it's well within our scope to see if we can identify a better precedent here.  I don't think `scheduler_` is correct because this is a metric that is broader than either component - the scheduler is just the best / simplest place to expose them today.  It's not `kubelet_`.  I worry that `pod_` lacks any identifying info, and we should preserve some prefix, hence `kube_pod_*`",
        "createdAt" : "2020-11-11T13:59:38Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b2b67c94-3892-4a61-8ab4-b0aa475599bf",
        "parentId" : "33b9d004-3b7a-4a50-8320-110a70049b5c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Another note too - these metrics are intended to replace `kube_pod_*` KSM metrics that are difficult and inefficient to use (which was the original feedback), so this will be replacing a bigger set of `kube_pod_*` KSM metrics with a more correct and easier to use `kube_pod_resources_*` metric.",
        "createdAt" : "2020-11-11T20:31:46Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c4a6dda9-26c4-4953-9663-218111f71021",
        "parentId" : "33b9d004-3b7a-4a50-8320-110a70049b5c",
        "authorId" : "a531e2c7-8431-4d2a-aa6f-1fdc4b357779",
        "body" : "I don't see a problem with the `kube_pod` prefix, especially since these metrics will have different target labels, so both could be scrapped if a user wants to and you can always identify them by their target labels (e.g. job label being one of them). So this naming sounds good from my side, at least as kube-state-metrics maintainer. :)\r\n\r\nAs for metrics replacing the kube-state-metrics ones, agreed we reverted the changes we made recently to resource metrics so they can sort of serve as a drop-in replacement for these. Note opening issue in the future would be good so we don't forget to remove them or at least discuss their removal.",
        "createdAt" : "2020-11-12T16:12:40Z",
        "updatedAt" : "2020-11-12T17:37:47Z",
        "lastEditedBy" : "a531e2c7-8431-4d2a-aa6f-1fdc4b357779",
        "tags" : [
        ]
      }
    ],
    "commit" : "264496cc4166d841a4c278fe096d6dd29e8f836a",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@var podResourceDesc = resourceMetricsDescriptors{\n\trequests: resourceLifecycleDescriptors{\n\t\ttotal: metrics.NewDesc(\"kube_pod_resource_request\",\n\t\t\t\"Resources requested by workloads on the cluster, broken down by pod. This shows the resource usage the scheduler and kubelet expect per pod for resources along with the unit for the resource if any.\",\n\t\t\t[]string{\"namespace\", \"pod\", \"node\", \"scheduler\", \"priority\", \"resource\", \"unit\"},"
  }
]