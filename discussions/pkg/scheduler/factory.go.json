[
  {
    "id" : "fbd9950b-1595-4e41-90c3-4644d3749149",
    "prId" : 102796,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102796#pullrequestreview-682136834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c23159b6-300e-4c1d-aa2e-41acc0f58f11",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "why not do this in options.go like before?",
        "createdAt" : "2021-06-11T18:11:56Z",
        "updatedAt" : "2021-06-11T18:25:52Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "cc62fe73-1874-4025-818b-9e219c86f68d",
        "parentId" : "c23159b6-300e-4c1d-aa2e-41acc0f58f11",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "This shouldn't really happen.\r\n\r\n> why not do this in options.go like before?\r\n\r\nNow profiles are getting defaulted in CC defaulting logic, so the CC that we create in options.go will always have profiles set. That is why I am resetting it to nil there if you noticed. \r\n",
        "createdAt" : "2021-06-11T18:57:28Z",
        "updatedAt" : "2021-06-11T18:57:29Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "265ef1741f951290f2b302d81c694186b79decfa",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +220,224 @@\t// If profiles is already set, it means the user is using both CC and policy config, error out\n\t// since these configs are no longer merged and they should not be used simultaneously.\n\tif c.profiles != nil {\n\t\treturn nil, fmt.Errorf(\"profiles and policy config both set, this should not happen\")\n\t}"
  },
  {
    "id" : "23fb735d-7724-4595-9ec9-f1a0f33c9953",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-404314311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4ccd1c-b55b-4585-a3cf-72960681c29c",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "side note: the API request above doesn't seem necessary, as we should be getting the event soon.",
        "createdAt" : "2020-05-01T14:54:28Z",
        "updatedAt" : "2020-05-16T02:28:19Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "830c7783-914a-4d91-81df-2e7b1094d346",
        "parentId" : "9c4ccd1c-b55b-4585-a3cf-72960681c29c",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Which API request do yo mean? The one getting Node?",
        "createdAt" : "2020-05-01T17:08:13Z",
        "updatedAt" : "2020-05-16T02:28:19Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "0e94c9d8-8dea-4af0-9882-21dbf8fec40d",
        "parentId" : "9c4ccd1c-b55b-4585-a3cf-72960681c29c",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Yes. But we can (and should) take care of that in a separate PR, if you agree that it's unnecessary.",
        "createdAt" : "2020-05-01T18:14:00Z",
        "updatedAt" : "2020-05-16T02:28:19Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +491,495 @@\t\t\t}\n\t\t} else {\n\t\t\tklog.Errorf(\"Error scheduling %v/%v: %v; retrying\", pod.Namespace, pod.Name, err)\n\t\t}\n"
  },
  {
    "id" : "a349d2a7-f7bd-45af-8317-d9d715c58d2e",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-411399695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b5c2087-dbe1-435e-9de4-6b69f7633719",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "since this is now invoked once, then we don't need to pass podSchedulingCycle, we can call podQueue.SchedulingCycle() from inside AddUnschedulableIfNotPresent.",
        "createdAt" : "2020-05-06T21:32:13Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "4bc21bb7-dbc2-4611-9da1-a6e66feb339d",
        "parentId" : "8b5c2087-dbe1-435e-9de4-6b69f7633719",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "can you address this one.",
        "createdAt" : "2020-05-13T21:08:56Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "1639ece1-8320-491a-b7da-8f76759a1d57",
        "parentId" : "8b5c2087-dbe1-435e-9de4-6b69f7633719",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Do you mind using a follow up addressing this? As some tests are arbitrary passing in 0, -1.",
        "createdAt" : "2020-05-14T01:09:20Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +502,506 @@\t\t// As <cachedPod> is from SharedInformer, we need to do a DeepCopy() here.\n\t\tpodInfo.Pod = cachedPod.DeepCopy()\n\t\tif err := podQueue.AddUnschedulableIfNotPresent(podInfo, podQueue.SchedulingCycle()); err != nil {\n\t\t\tklog.Error(err)\n\t\t}"
  },
  {
    "id" : "bde003d9-ead0-4267-abd9-7d9d7cb4b497",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-407881333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51a33cb8-efa5-416f-8a76-ba3e9fb00199",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "see https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/scheduler.go#L650, it seems we sometimes pass a copy of podinfo, which could have the ```pod.Spec.NodeName``` changed (https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/scheduler.go#L491).",
        "createdAt" : "2020-05-06T21:58:55Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "30292f7f-54db-42e9-a2ae-8dbd947db393",
        "parentId" : "51a33cb8-efa5-416f-8a76-ba3e9fb00199",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "IMO we should fix this regardless of which option we go with in this PR? By either change `assumedPodInfo` to `podInfo`, or set assumed's nodeName back to empty in error path of `assume()`.",
        "createdAt" : "2020-05-07T06:05:12Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "f7032905-3999-4446-9b7a-fec8fdbe7f38",
        "parentId" : "51a33cb8-efa5-416f-8a76-ba3e9fb00199",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "yeah, but I think reading from informer cache will likely make this more robust against such things.",
        "createdAt" : "2020-05-07T15:33:51Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "5a992e50-d4cf-46b8-8e93-f1f8f6a9d7bd",
        "parentId" : "51a33cb8-efa5-416f-8a76-ba3e9fb00199",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I'm fine with leaving that for follow up",
        "createdAt" : "2020-05-07T22:31:05Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +502,506 @@\t\t// As <cachedPod> is from SharedInformer, we need to do a DeepCopy() here.\n\t\tpodInfo.Pod = cachedPod.DeepCopy()\n\t\tif err := podQueue.AddUnschedulableIfNotPresent(podInfo, podQueue.SchedulingCycle()); err != nil {\n\t\t\tklog.Error(err)\n\t\t}"
  },
  {
    "id" : "980b062c-7ad6-4ac1-9ab6-a14571a3d672",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-407388412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "what if the pod gets updated while it was being processed? aren't we going to miss those updates since the pod is not in the queue at all? perhaps we can read the pod back from informer cache.",
        "createdAt" : "2020-05-06T22:53:49Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "daf114f0-768c-440c-bd3e-57ae8c9c37a4",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "note that if the failure happens in the binding go routine, the pod here will get placed in the queue, and the main thread may pick it up before the update to the pod condition happens, and so we miss that too.",
        "createdAt" : "2020-05-07T00:17:28Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "23890314-693e-4c04-9538-74d6d1c18205",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> what if the pod gets updated while it was being processed?\r\n\r\nThis PR doesn't change how it's processed before, say:\r\n\r\n- If the being processed Pod is schedulable, no matter the updated Pod is schedulable or not, the Pod finished its binding cycle and get its `nodeName` set.\r\n- If the being processed Pod is unschedulable, putting it back to schedulingQ may conflict with the updated version, but it's fault tolerant. Next time when it's popped out, we have the latest copy.\r\n\r\n> aren't we going to miss those updates since the pod is not in the queue at all?\r\n\r\nThis PR only put extra logic on delete case, so no changes on updated Pod.\r\n\r\n> perhaps we can read the pod back from informer cache.\r\n\r\nThat's another approach we can exercise, then we don't need the `processingPods` map.",
        "createdAt" : "2020-05-07T00:52:18Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "6bef5af5-9527-4599-94b2-f56154080ea5",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : ">If the being processed Pod is unschedulable, putting it back to schedulingQ may conflict with the updated version, but it's fault tolerant. Next time when it's popped out, we have the latest copy.\r\n\r\nyou may miss the update because the error function could have been called from the bind goroutine as I mentioned in https://github.com/kubernetes/kubernetes/pull/90660/files?file-filters%5B%5D=.go#r421165418, here is how this could happen in your original version:\r\n1) pod is added to the queue\r\n2) main thread pops the pod from the queue\r\n3) update pod condition happens, but the event is missed because the pod is now not in the queue\r\n\r\n\r\n\r\n> This PR only put extra logic on delete case, so no changes on updated Pod.\r\n\r\nI know, but by removing the pod fetch from the api server, the updates that could have happened to the pod while being processed would be lost. This is not an issue now that we are fetching the pod from the informer cache given that we use it to update the podinfo passed to AddUnschedulableIfNotPresent as the original code did: https://github.com/kubernetes/kubernetes/pull/90660/files?file-filters%5B%5D=.go#diff-ec926856bfdbbcaf5e9dfce784909d51L499 .",
        "createdAt" : "2020-05-07T04:44:08Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "61444950-9c2c-40bd-b142-c795b5577d45",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> 3. update pod condition happens, but the event is missed because the pod is now not in the queue\r\n\r\nI don't quite follow how \"the event is missed\". In this case, isn't the updated Pod added to activeQ?\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/be02fe578588592ee67811ed809eef0a4495537a/pkg/scheduler/internal/queue/scheduling_queue.go#L451-L452",
        "createdAt" : "2020-05-07T05:54:03Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "83942b68-a469-4889-9b6e-86365c0743be",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Nvm, I understand it now. You're referring that when the stale version of pod gets added back to scheduler queue, it would \"overwrite\" the fresh version, so the fresh version gets lost, right?",
        "createdAt" : "2020-05-07T06:18:55Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "85a1a2a2-2f6e-4f97-bd9d-af9812dd7418",
        "parentId" : "8e3c8ad8-7430-4058-a92c-c0b585b2fde3",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> I don't quite follow how \"the event is missed\". In this case, isn't the updated Pod added to activeQ?\r\n\r\nYes, but there is a race, imagine that the main thread poped the pod from the active queue and started to process it again before the update event arrives.",
        "createdAt" : "2020-05-07T11:38:22Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +504,508 @@\t\tif err := podQueue.AddUnschedulableIfNotPresent(podInfo, podQueue.SchedulingCycle()); err != nil {\n\t\t\tklog.Error(err)\n\t\t}\n\t}\n}"
  },
  {
    "id" : "a495a893-8196-475c-a55b-6e481f2b0ca2",
    "prId" : 90660,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90660#pullrequestreview-412053363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cb24f50-c7f7-4994-80c8-ae9bbcfd35bc",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "TODO: error or warning this?",
        "createdAt" : "2020-05-14T04:25:31Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4b1e66a1-7169-4253-a93b-b7f275e569a1",
        "parentId" : "2cb24f50-c7f7-4994-80c8-ae9bbcfd35bc",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This should only happen if there was an incoming Update... I would say Warning is fine.",
        "createdAt" : "2020-05-14T17:56:51Z",
        "updatedAt" : "2020-05-16T02:28:20Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "133a02540fce435996a1104357e123b9f5b29093",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +503,507 @@\t\tpodInfo.Pod = cachedPod.DeepCopy()\n\t\tif err := podQueue.AddUnschedulableIfNotPresent(podInfo, podQueue.SchedulingCycle()); err != nil {\n\t\t\tklog.Error(err)\n\t\t}\n\t}"
  },
  {
    "id" : "9803b926-02aa-4bec-b344-0a842a8a09d1",
    "prId" : 88768,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88768#pullrequestreview-369629983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5120e13e-970d-4000-b0fd-07dd8a2fe2e3",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Add comment like: only reachable when using component config v1alpha1.",
        "createdAt" : "2020-03-05T14:51:34Z",
        "updatedAt" : "2020-03-05T21:42:22Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d7006c38d030a4f2a9f4d3c1e3d89e129133043",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +233,237 @@}\n\n// createFromConfig creates a scheduler from the configuration file\n// Only reachable when using v1alpha1 component config\nfunc (c *Configurator) createFromConfig(policy schedulerapi.Policy) (*Scheduler, error) {"
  },
  {
    "id" : "12b289bd-4a1a-4660-855f-c63e59dbb301",
    "prId" : 88585,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88585#pullrequestreview-386733000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "241f5368-c191-497f-84d2-9a13b6ba8cb5",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Use internal version from `\"k8s.io/kubernetes/pkg/scheduler/apis/config\"`.",
        "createdAt" : "2020-02-28T18:03:28Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9ccff9f4-b829-46fd-bcc2-0562d199169b",
        "parentId" : "241f5368-c191-497f-84d2-9a13b6ba8cb5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is still outstanding, right?",
        "createdAt" : "2020-04-02T19:08:33Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "852fcf4b-403d-471f-9832-d9c03ba0c081",
        "parentId" : "241f5368-c191-497f-84d2-9a13b6ba8cb5",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Not for this PR. Would it help if I do a follow up PR with the idea I describe in other comments?",
        "createdAt" : "2020-04-02T19:26:27Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "afe47b08-298d-4045-b6eb-18c5fa0e3f81",
        "parentId" : "241f5368-c191-497f-84d2-9a13b6ba8cb5",
        "authorId" : "f5a0a152-2396-4fbc-9230-a5078e52ac1e",
        "body" : "Please check https://github.com/kubernetes/kubernetes/pull/88585#discussion_r385853451",
        "createdAt" : "2020-04-02T19:30:51Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "f5a0a152-2396-4fbc-9230-a5078e52ac1e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d20ca8a8d577ad11b1f7440d3896a17458074d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +282,286 @@\tif policy.HardPodAffinitySymmetricWeight != 0 {\n\t\tv := policy.HardPodAffinitySymmetricWeight\n\t\targs.InterPodAffinityArgs = &schedulerv1alpha2.InterPodAffinityArgs{\n\t\t\tHardPodAffinityWeight: &v,\n\t\t}"
  },
  {
    "id" : "04041c29-dd1b-49fe-a4f0-50f6e0d0379f",
    "prId" : 88585,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88585#pullrequestreview-389285434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9626fa46-fac8-489d-96a8-1ee9ce4b0109",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why is this mixing internal config types (NewPluginConfig) with external config types (schedulerv1alpha2.NodeResourcesFitArgs)?",
        "createdAt" : "2020-04-02T19:08:14Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "adfbbbb1-2952-4693-af8e-4be9403f33a8",
        "parentId" : "9626fa46-fac8-489d-96a8-1ee9ce4b0109",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This is temporary. The next step is to make the plugins only handle the internal types. For that, we need to do the conversion of user provided args into the internal types during the initial parsing of component config, as described in https://github.com/kubernetes/kubernetes/issues/87784#issuecomment-592709524",
        "createdAt" : "2020-04-02T19:25:09Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "8497b8d7-8193-4728-a4d4-06d6ea1e7369",
        "parentId" : "9626fa46-fac8-489d-96a8-1ee9ce4b0109",
        "authorId" : "f5a0a152-2396-4fbc-9230-a5078e52ac1e",
        "body" : "The idea behind this PR here was to make the plugin arg types versioned. One can argue that the args of the internal scheduler plugins are a part of the API and therefore should be versioned. The conversion was supposed to be addressed in the v1.19 release cycle.  \r\n\r\nThe internal types map 1:1 to the API, external ones. However, only the external are annotated with JSON tags. ",
        "createdAt" : "2020-04-02T19:27:09Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "f5a0a152-2396-4fbc-9230-a5078e52ac1e",
        "tags" : [
        ]
      },
      {
        "id" : "5b23463a-b324-4815-92e7-e050f610fc20",
        "parentId" : "9626fa46-fac8-489d-96a8-1ee9ce4b0109",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "talked through the plan for shifting plugins to internal types with @alculquicondor, this is ok as an interim step",
        "createdAt" : "2020-04-07T16:25:13Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d20ca8a8d577ad11b1f7440d3896a17458074d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\t\t\tframeworkplugins.NewPluginConfig(\n\t\t\t\t\tnoderesources.FitName,\n\t\t\t\t\tschedulerv1alpha2.NodeResourcesFitArgs{IgnoredResources: ignoredExtendedResources},\n\t\t\t\t),\n\t\t\t)"
  },
  {
    "id" : "73d4fc1c-4044-4d1b-a4c2-87cbf9ae1073",
    "prId" : 88285,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88285#pullrequestreview-362135073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d6df14e-76bf-4e70-97bf-a3f68f77b0c7",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "nit: these 5 lines can be extracted into a function to avoid duplication (with L304~L308)",
        "createdAt" : "2020-02-20T08:16:19Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4b88529d-4d19-449e-a046-c93e9f9fd4fb",
        "parentId" : "0d6df14e-76bf-4e70-97bf-a3f68f77b0c7",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I wouldn't mind too much. They are slightly different and `createFromConfig` should go away soon when we remove policy support.",
        "createdAt" : "2020-02-20T19:08:50Z",
        "updatedAt" : "2020-02-25T17:40:49Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0488584712fe37372f35236d2d6dd0e9f630e26",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +185,189 @@\t\tplugins.Append(defaultPlugins)\n\t\tplugins.Apply(prof.Plugins)\n\t\tprof.Plugins = plugins\n\t}\n"
  },
  {
    "id" : "14d507bc-547e-40a0-b30f-7fa4ad3071f7",
    "prId" : 87261,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87261#pullrequestreview-345546043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c30c54-84c9-4e3f-b4b6-99717754f63e",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "should we disallow specifying both Plugins and Policy in validation? Since all predicates and priorities can now be expressed using plugins, I see no value in allowing to specify both. But that is probably for a separate PR.",
        "createdAt" : "2020-01-16T18:51:28Z",
        "updatedAt" : "2020-01-17T03:10:59Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "463f4aa9-ec23-4f05-a0ba-a50e10e7879a",
        "parentId" : "c5c30c54-84c9-4e3f-b4b6-99717754f63e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I agree. We can have a separate PR addressing this.",
        "createdAt" : "2020-01-16T22:22:53Z",
        "updatedAt" : "2020-01-17T03:10:59Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "3b6004cf-a7d4-464e-ae48-ae9e07bda0b0",
        "parentId" : "c5c30c54-84c9-4e3f-b4b6-99717754f63e",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "were a PR or issue opened for this?",
        "createdAt" : "2020-01-20T21:50:31Z",
        "updatedAt" : "2020-01-20T21:50:32Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "c712230ac1c2e8f1010261b57a75fee0045ebf8a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +299,303 @@\tdefaultPlugins.Append(pluginsForPredicates)\n\tdefaultPlugins.Append(pluginsForPriorities)\n\tdefaultPlugins.Apply(c.plugins)\n\tc.plugins = &defaultPlugins\n"
  },
  {
    "id" : "0f23c574-eedf-4b60-a041-cdbe1327495c",
    "prId" : 86673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86673#pullrequestreview-337790073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3759927-2a8e-4461-8836-e6bb83ddca16",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Why sorting? Can you add a comment?",
        "createdAt" : "2020-01-02T18:19:35Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "f2ffe426-0354-4c2e-88dd-fe9ec5faeeb9",
        "parentId" : "a3759927-2a8e-4461-8836-e6bb83ddca16",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "done.",
        "createdAt" : "2020-01-02T18:26:25Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "b535ed3b0c15178c81fd8469b1d480ce21deb155",
    "line" : 334,
    "diffHunk" : "@@ -1,1 +326,330 @@\t\tsortedKeys = append(sortedKeys, k)\n\t}\n\tsort.Strings(sortedKeys)\n\n\tfor _, priority := range sortedKeys {"
  },
  {
    "id" : "3272776b-4679-4d86-8887-3ebc9b05a520",
    "prId" : 86673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86673#pullrequestreview-337851874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dedf804-1500-4df2-a0b0-b32df82bfad9",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It seems `c.plugins` have to be appended again to itself, how about:\r\n\r\n```go\r\nif c.plugins == nil {\r\n\tc.plugins = &schedulerapi.Plugins{}\r\n}\r\nc.plugins.Append(pluginsForPredicates)\r\nc.plugins.Append(pluginsForPriorities)\r\n```",
        "createdAt" : "2020-01-02T20:32:12Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "1ab1ae89-a430-4948-8877-605c6f3a6222",
        "parentId" : "8dedf804-1500-4df2-a0b0-b32df82bfad9",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "This doesn't work because order matter, we need it to be last.",
        "createdAt" : "2020-01-02T20:50:09Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "b535ed3b0c15178c81fd8469b1d480ce21deb155",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +302,306 @@\tplugins.Append(pluginsForPriorities)\n\tplugins.Append(c.plugins)\n\tc.plugins = &plugins\n\n\tvar pluginConfig []schedulerapi.PluginConfig"
  },
  {
    "id" : "27b0a09d-7449-4aac-a49b-f60b250a102e",
    "prId" : 86673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86673#pullrequestreview-337851935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2268c9b2-0335-459e-93bb-0bf80e9eb96d",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Ditto.",
        "createdAt" : "2020-01-02T20:33:05Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "8e92629d-08ca-48b0-867f-25945cbe091c",
        "parentId" : "2268c9b2-0335-459e-93bb-0bf80e9eb96d",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "addressed above",
        "createdAt" : "2020-01-02T20:50:16Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "b535ed3b0c15178c81fd8469b1d480ce21deb155",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +308,312 @@\tpluginConfig = append(pluginConfig, pluginConfigForPriorities...)\n\tpluginConfig = append(pluginConfig, c.pluginConfig...)\n\tc.pluginConfig = pluginConfig\n\n\treturn c.create(extenders)"
  }
]