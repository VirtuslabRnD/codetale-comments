[
  {
    "id" : "b7182249-7d13-48ee-b552-6a1f76910d7b",
    "prId" : 101394,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101394#pullrequestreview-646123784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cdc5219-4257-4083-beaf-81df81990a1f",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "do we really think that a user will configure a scheduler without registering the volume-based plugins? I feel that those should be treated the same as pod and node.",
        "createdAt" : "2021-04-26T12:48:41Z",
        "updatedAt" : "2021-04-27T16:51:11Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "2f5d0c70-540b-4fca-97ad-49836a8e593a",
        "parentId" : "2cdc5219-4257-4083-beaf-81df81990a1f",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> do we really think that a user will configure a scheduler without registering the volume-based plugins?\r\n\r\nNope, I think volume-based plugins are always needed. The design intention is that they're not interacting with internal cache (but pod and node do), so they fit the `switch` case naturally, to leverage `buildEvtResHandler` generaizing their event handler instantiation.",
        "createdAt" : "2021-04-26T17:11:56Z",
        "updatedAt" : "2021-04-27T16:51:11Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "2dfb7a84-ccc7-4d5d-b32e-de567272eb03",
        "parentId" : "2cdc5219-4257-4083-beaf-81df81990a1f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "We could have `buildEvtResHandler` function moved outside, so we can still reuse it. The way I am interpreting this switch statement is whether or not those events are necessary to register. If we are saying the storage based ones should always be registered, then I think it is better to treat them like pod/node.",
        "createdAt" : "2021-04-26T17:46:18Z",
        "updatedAt" : "2021-04-27T16:51:11Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "29de852a-f441-472a-bae8-2293882e60a9",
        "parentId" : "2cdc5219-4257-4083-beaf-81df81990a1f",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "(missed this comment earlier)\r\n\r\nAnother benefit is that we can generalize the registration for add/update/delete events dynamically - for example, currently storage-related registrations are hard-coded, some register add/update, some register add, etc. But if we leverage the unioned cluster events, we can dynamically register the event handlers - which will be resilient to adapt to further code changes such as add/delete events. WDYT?",
        "createdAt" : "2021-04-27T16:49:34Z",
        "updatedAt" : "2021-04-27T16:51:11Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3a124ba6049f91175ac2f2b141720af1601ffc",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +392,396 @@\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t}\n\t\tcase framework.Service:\n\t\t\t// ServiceAffinity: affected by the selector of the service is updated."
  },
  {
    "id" : "3e25269d-13d5-4aee-a027-c9644c323357",
    "prId" : 100049,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100049#pullrequestreview-619088552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d25dba6-722b-4bd5-ae9b-c83aba473816",
        "parentId" : null,
        "authorId" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "body" : "xref: https://github.com/kubernetes/kubernetes/issues/100408",
        "createdAt" : "2021-03-23T21:17:23Z",
        "updatedAt" : "2021-03-23T21:17:24Z",
        "lastEditedBy" : "d201d1ca-4170-481e-8e0a-c6e9991f353a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6384f397b4702fa6d5543a5947ed0a3f67cf115d",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +512,516 @@\t// the following logic appends a taint/toleration check.\n\t// TODO: verify if kubelet should also apply the taint/toleration check, and then unify the\n\t// logic with kubelet and move to a shared place.\n\t//\n\t// Note: the following checks doesn't take preemption into considerations, in very rare"
  },
  {
    "id" : "fd09fc29-e696-4d44-b586-bb459364cb6b",
    "prId" : 100003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100003#pullrequestreview-698606782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5489d4b9-5a57-4c43-a6b6-e95b2947ed4d",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "The CI failure may be due to this. I think it should be V1().",
        "createdAt" : "2021-07-03T01:12:44Z",
        "updatedAt" : "2021-07-03T01:12:48Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "86792fc7-3d40-4b50-bc0f-eec762d9ed22",
        "parentId" : "5489d4b9-5a57-4c43-a6b6-e95b2947ed4d",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`pull-kubernetes-e2e-gce-alpha-features` fails due to this issue https://github.com/kubernetes/kubernetes/issues/103440\r\n\r\n`pull-kubernetes-e2e-gce-alpha-features` failure is unrelated, can be ignored in this PR\r\n",
        "createdAt" : "2021-07-03T17:01:19Z",
        "updatedAt" : "2021-07-03T17:01:20Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee392ed42732d377b766bcbd77d6ccb28234fb",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +368,372 @@\t\t\t)\n\t\tcase framework.CSIStorageCapacity:\n\t\t\tinformerFactory.Storage().V1beta1().CSIStorageCapacities().Informer().AddEventHandler(\n\t\t\t\tbuildEvtResHandler(at, framework.CSIStorageCapacity, \"CSIStorageCapacity\"),\n\t\t\t)"
  },
  {
    "id" : "4c792d26-6eef-40b5-88da-f60f010d492c",
    "prId" : 98875,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98875#pullrequestreview-594262369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660e1175-541c-42f0-b4c8-ff2a911f6f7b",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Start messages with upper case",
        "createdAt" : "2021-02-19T14:52:52Z",
        "updatedAt" : "2021-02-19T14:57:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "300d109d78a7fa9046667ca1b0ab43ffe6f433ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +61,65 @@\tsc, ok := obj.(*storagev1.StorageClass)\n\tif !ok {\n\t\tklog.ErrorS(nil, \"cannot convert to *storagev1.StorageClass\", \"obj\", obj)\n\t\treturn\n\t}"
  },
  {
    "id" : "34ee4ff8-6323-40eb-bace-7f690572b76c",
    "prId" : 98875,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98875#pullrequestreview-594262369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea4164a5-c187-4c98-ae66-302c9f7296bf",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "let's give more information here:\r\n`Pod update ignored because changes won't affect scheduling`",
        "createdAt" : "2021-02-19T14:57:20Z",
        "updatedAt" : "2021-02-19T14:57:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "300d109d78a7fa9046667ca1b0ab43ffe6f433ce",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +356,360 @@\t\treturn false\n\t}\n\tklog.V(3).InfoS(\"skipping pod update\", \"pod\", klog.KObj(pod))\n\treturn true\n}"
  },
  {
    "id" : "aa6fd024-ef94-4cf5-8e11-25e5a657bb12",
    "prId" : 96071,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96071#pullrequestreview-526529558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "parentId" : null,
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "Should we test the version before invoking `sched.skipPodUpdate`, then we save some useless process.",
        "createdAt" : "2020-11-06T06:05:59Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      },
      {
        "id" : "a1784c7c-1410-428b-89f5-b12f951e5b9d",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I thought of that as well. My idea was to make it conservative. But you're right, moving it ahead will be more efficient.\r\n\r\nThe key question is: can we get a consensus to compare ResourceVersion and do an early return?\r\n\r\n@alculquicondor @ahg-g @damemi @adtac ^^",
        "createdAt" : "2020-11-06T21:55:30Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "1a4e0ece-14ef-4024-b9e9-8943c0eb7e8a",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I don't think doing this check after `skipPodUpdate` is any more conservative. So, fine doing it earlier.\r\n\r\nDoes ResourceVersion also change if there is a Status update?",
        "createdAt" : "2020-11-09T14:15:51Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "238a854d-cfa4-4ccf-b423-f0cb91c4f9f6",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "skipPodUpdate zeroes out ResourceVersion when comparing with in-cache copy. This seems to suggest that resource version may change even if there isn't a real pod update, right?",
        "createdAt" : "2020-11-09T15:12:19Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "030bca0d-16d3-48a4-9b91-07bfd920632f",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "That's not the intention of that zeroing. It's just that resource version will change when fields we don't care about change.",
        "createdAt" : "2020-11-09T15:44:57Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "13fb7464-9f20-4ac6-8ccb-818af5579c53",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> Does ResourceVersion also change if there is a Status update?\r\n\r\nYes, even with status update.",
        "createdAt" : "2020-11-09T18:13:04Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "68572e98-54e9-4217-84da-6260120f8a9e",
        "parentId" : "dec5d380-3fc7-4876-b535-5106f8162049",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> This seems to suggest that resource version may change even if there isn't a real pod update, right?\r\n\r\nNope, once any field of an obj is updated, its resource version gets changed.\r\n\r\nOne case that resource doesn't change is  \"resync\", the semantics of \"resync\" is to re-play the items in informerCache every \"resync period\", so it happens on client side, not server side. Those events individually carry identical objects actually. In some cases, some of them become a \"phantom\" event, just like this issue described.\r\nI _hope_ that \"resync\" is the only case, so that #82222 should be good enough to handle this case. But I'm not 100% sure \"resync\" is the only culprit, so this PR is for extra guarding.",
        "createdAt" : "2020-11-09T18:20:45Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e0fb9ad7fa80adf8c90a97e00d9ff610766ce2e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +185,189 @@\tif sched.skipPodUpdate(newPod) {\n\t\treturn\n\t}\n\tif err := sched.SchedulingQueue.Update(oldPod, newPod); err != nil {\n\t\tutilruntime.HandleError(fmt.Errorf(\"unable to update %T: %v\", newObj, err))"
  },
  {
    "id" : "29abed85-6961-4909-9c78-cfe8eced60a6",
    "prId" : 96071,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96071#pullrequestreview-526846484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98250d00-5453-4c68-86b6-2822f9838697",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "adding a comment here explaining when this could happen would be great.",
        "createdAt" : "2020-11-10T02:28:53Z",
        "updatedAt" : "2020-11-10T04:35:38Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "ee131d97-3932-4bb8-9055-df3f9d537e6c",
        "parentId" : "98250d00-5453-4c68-86b6-2822f9838697",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "updated.",
        "createdAt" : "2020-11-10T04:35:59Z",
        "updatedAt" : "2020-11-10T04:35:59Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e0fb9ad7fa80adf8c90a97e00d9ff610766ce2e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +180,184 @@\t// Bypass update event that carries identical objects; otherwise, a duplicated\n\t// Pod may go through scheduling and cause unexpected behavior (see #96071).\n\tif oldPod.ResourceVersion == newPod.ResourceVersion {\n\t\treturn\n\t}"
  },
  {
    "id" : "39ced51f-1914-419e-9673-20f7f64587d4",
    "prId" : 91126,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91126#pullrequestreview-412872879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52d131d6-fbe7-4dfd-9379-50824128d418",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Why are we here? shouldn't we be here only if NodeName was set? it is not going to be set for the new pod, right?",
        "createdAt" : "2020-05-15T00:55:20Z",
        "updatedAt" : "2020-05-15T18:42:48Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "6f153875-e4cf-4fcc-b4fd-02d8911a7216",
        "parentId" : "52d131d6-fbe7-4dfd-9379-50824128d418",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It's described in #85726 in a HA setup and the author provided a detailed log. Basically it's like this:\r\n\r\n- schedA as the master, schedB as the standby.\r\n- testPod is scheduled to node1; schedA and schedB both gets that cached properly.\r\n- disconnect schedB lost connection to API server (schedB is still alive).\r\n- at the same time, testPod is deleted and then created - schedA works fine - 2 events (Delete and Add) get received, and the new testPod got scheduled (to node1 let's say).\r\n- shut down schedA and recover schedB's connection to API server.\r\n- an interesting thing happens. schedB receives 1 Update event (instead of 2 events) on testPod. Because schedB only has the stale testPod's UID in place, and the internal scheduler `cache state` uses UID to check the Pod's presence, it throws an error and failed the update:\r\n    ```\r\n    E1128 16:42:11.731020 31593 eventhandlers.go:226] scheduler cache UpdatePod failed: pod 3c6696c6-decb-4abd-a1d3-d891e032459d is not added to scheduler cache, so cannot be updated\r\n    ```\r\n- this error is critical, as it means the stale testPod live in scheduler's cache (instead of the new testPod) is corrupted.\r\n- deleting testPod doesn't help, as it cannot be deleted due to UID not found.\r\n    ```\r\n    E1128 16:42:20.632578 31593 eventhandlers.go:254] scheduler cache RemovePod failed: pod 3c6696c6-decb-4abd-a1d3-d891e032459d is not found in scheduler cache, so cannot be removed from it\r\n    ```",
        "createdAt" : "2020-05-15T03:15:13Z",
        "updatedAt" : "2020-05-15T18:42:48Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "a78912e8-ecc3-46e1-8584-ad9686e87317",
        "parentId" : "52d131d6-fbe7-4dfd-9379-50824128d418",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ah, ok, so testPod did get scheduled a second time already, and so it's NodeName is set and that triggers a proper update.\r\n\r\nI was assuming that the new pod isn't scheduled yet, and so according to the [OnUpdate handler](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/cache/controller.go#L264-L276) the update should change to a delete event on the cache and an add event on the queue, which make sense.",
        "createdAt" : "2020-05-15T13:30:37Z",
        "updatedAt" : "2020-05-15T18:42:48Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "78b8516c-0341-4f7f-84d1-9a9133b5e8f6",
        "parentId" : "52d131d6-fbe7-4dfd-9379-50824128d418",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Is there a bug filled for kube-apiserver? I'm fine with dealing with it here for now.",
        "createdAt" : "2020-05-15T15:32:28Z",
        "updatedAt" : "2020-05-15T18:42:48Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "2033781e-891d-4753-b41f-c5977045f5c2",
        "parentId" : "52d131d6-fbe7-4dfd-9379-50824128d418",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> Is there a bug filled for kube-apiserver?\r\n\r\nI _prefer_ to believe it's a bug, but seems it's not the case from api's perspective, and I don't it can be \"fixed\" b/c the underlying DeltaFIFO queue is using namespace/name as the index.",
        "createdAt" : "2020-05-15T18:25:40Z",
        "updatedAt" : "2020-05-15T18:42:48Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b30105dac43fe45dfd872952c769546c2289700",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +247,251 @@\t// into a Pod update event. In this case, we should invalidate the old Pod, and\n\t// then add the new Pod.\n\tif oldPod.UID != newPod.UID {\n\t\tsched.deletePodFromCache(oldObj)\n\t\tsched.addPodToCache(newObj)"
  },
  {
    "id" : "f53be376-19d6-4602-9b0f-7b1d3e06147a",
    "prId" : 85298,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85298#pullrequestreview-317176706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cb2386e-5698-4345-aa0b-305177423426",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "neither onCSINodeAdd nor onCSINodeUpdate use the passed in objects, so no other changes were required",
        "createdAt" : "2019-11-14T18:42:50Z",
        "updatedAt" : "2019-11-14T18:42:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7eb4838a619cf4eea979ec40902feae6c3a2555c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +402,406 @@\t\t\tcache.ResourceEventHandlerFuncs{\n\t\t\t\tAddFunc:    sched.onCSINodeAdd,\n\t\t\t\tUpdateFunc: sched.onCSINodeUpdate,\n\t\t\t},\n\t\t)"
  },
  {
    "id" : "5c57f1dc-fd73-419a-bc74-c9eac853bbe1",
    "prId" : 84017,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84017#pullrequestreview-302955498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f30f05cc-cffa-4857-8399-147c00a122cf",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "We can directly put:\r\n\r\n```go\r\nAddFunc: sched.SchedulingQueue.MoveAllToActiveQueue(),\r\nUpdateFunc: sched.SchedulingQueue.MoveAllToActiveQueue(),\r\n```",
        "createdAt" : "2019-10-16T21:55:21Z",
        "updatedAt" : "2019-10-19T03:52:33Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "b47f9daf-45a8-452e-b580-2742fff8625f",
        "parentId" : "f30f05cc-cffa-4857-8399-147c00a122cf",
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "oh this is what i said elsewhere too\r\n+1 to this",
        "createdAt" : "2019-10-16T23:42:01Z",
        "updatedAt" : "2019-10-19T03:52:33Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "3dea6554-d86e-4704-abdb-a0ab74385f0d",
        "parentId" : "f30f05cc-cffa-4857-8399-147c00a122cf",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we can't the signature is different, so has to be wrapped somehow (inline or a separate func).",
        "createdAt" : "2019-10-17T01:00:12Z",
        "updatedAt" : "2019-10-19T03:52:33Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7727226605c6da96ebcc148ff4ee06ad2feb7b4",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +401,405 @@\t\t\tcache.ResourceEventHandlerFuncs{\n\t\t\t\tAddFunc:    sched.onCSINodeAdd,\n\t\t\t\tUpdateFunc: sched.onCSINodeUpdate,\n\t\t\t},\n\t\t)"
  },
  {
    "id" : "31b7600b-725d-4734-b559-7a2b9541d943",
    "prId" : 84017,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84017#pullrequestreview-302952058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "059e625c-54e0-4ee3-bb6b-e377c6d3cc27",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "why do we keep these stubs here now that they dont' do anything on update? If we want to just maintain `sched.SchedulingQueue.MoveAllToActiveQueue()` behavior all callers of these funcs should just call that function directly",
        "createdAt" : "2019-10-16T23:41:32Z",
        "updatedAt" : "2019-10-19T03:52:33Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "3b00d725-25f8-42c5-9cfe-bb4f4dc794b4",
        "parentId" : "059e625c-54e0-4ee3-bb6b-e377c6d3cc27",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we need to wrap them because MoveAllToActiveQueue  has a different signature compared to the callbacks AddFunc and UpdateFunc.",
        "createdAt" : "2019-10-17T00:43:44Z",
        "updatedAt" : "2019-10-19T03:52:33Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7727226605c6da96ebcc148ff4ee06ad2feb7b4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +162,166 @@}\n\nfunc (sched *Scheduler) onCSINodeUpdate(oldObj, newObj interface{}) {\n\tsched.SchedulingQueue.MoveAllToActiveOrBackoffQueue(queue.CSINodeUpdate)\n}"
  },
  {
    "id" : "23f0aa3e-0e9f-4ab7-8d20-9f6832df9c3a",
    "prId" : 77595,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77595#pullrequestreview-245263690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "854db8ef-19c1-4e19-aebe-bf3e513f2ac8",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Thanks for adding this here, but I am not 100% sure if `CSINode` object should be cached inside `NodInfo` object. I will defer to @ravisantoshgudimetla @bsalamat on this.",
        "createdAt" : "2019-05-31T14:58:02Z",
        "updatedAt" : "2019-06-25T14:31:23Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "f51cb70f-b4ba-4959-9d12-7ae82ff3e638",
        "parentId" : "854db8ef-19c1-4e19-aebe-bf3e513f2ac8",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "Resolving as per comment https://github.com/kubernetes/kubernetes/pull/77595#pullrequestreview-245156870 ",
        "createdAt" : "2019-06-04T08:27:36Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6abc04d059b42ffdc1b68f5b847f18e57ac0680d",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +458,462 @@\t\t)\n\t}\n\n\t// On add and delete of PVs, it will affect equivalence cache items\n\t// related to persistent volume"
  },
  {
    "id" : "894d8504-94e1-43bf-9d9a-0148c7d82b26",
    "prId" : 69504,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69504#pullrequestreview-194317834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f930755-3d4a-4c41-84a2-c206884c3c8a",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I suggest we don't export this function.",
        "createdAt" : "2019-01-14T22:53:10Z",
        "updatedAt" : "2019-01-30T01:53:58Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "bd2b501e-4df4-4024-81dd-b12532cc5592",
        "parentId" : "2f930755-3d4a-4c41-84a2-c206884c3c8a",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "this needs to be called from test/integration/scheduler. This will again go away in later PR when i change everything to scheduler.New()",
        "createdAt" : "2019-01-15T05:37:18Z",
        "updatedAt" : "2019-01-30T01:53:58Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "499e182d-d40b-4857-ba12-430e64789708",
        "parentId" : "2f930755-3d4a-4c41-84a2-c206884c3c8a",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Sounds good - although I think @wgliang has a WIP PR to move everything to scheduler.New.",
        "createdAt" : "2019-01-18T23:13:42Z",
        "updatedAt" : "2019-01-30T01:53:58Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0a7d96632b9b4daa5133df63f1ed16c93cbee6f",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +325,329 @@// AddAllEventHandlers is a helper function used in tests and in Scheduler\n// to add event handlers for various informers.\nfunc AddAllEventHandlers(\n\tsched *Scheduler,\n\tschedulerName string,"
  }
]