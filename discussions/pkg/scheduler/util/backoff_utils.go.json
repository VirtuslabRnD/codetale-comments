[
  {
    "id" : "3fb5b8cf-8bae-476e-8e3f-f511b7f1596c",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-91641883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13be51b8-43c0-4c9b-ab72-23a15af3bbda",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Why are you adding these two queues (expiryQ and backoffQ) here? This is very confusing.",
        "createdAt" : "2018-01-20T02:56:42Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "aa2b8a48-565c-4212-ada7-14530a9fe296",
        "parentId" : "13be51b8-43c0-4c9b-ab72-23a15af3bbda",
        "authorId" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "body" : "The idea is to treat PodBackoff as a queue for the case of finding the next pod we can schedule so we don't need to perform full pass over all pods we know about in order to determine which are done being 'backed off' (this is backoffQ). Once that work is done its pretty simple to change our GC method to also not require a full pass, so I added expiryQ for this.",
        "createdAt" : "2018-01-25T19:25:35Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +84,88 @@type PodBackoff struct {\n\t// expiryQ stores backoffEntry orderedy by lastUpdate until they reach maxDuration and are GC'd\n\texpiryQ         *Heap\n\tlock            sync.Mutex\n\tclock           clock"
  },
  {
    "id" : "efff85df-d295-4992-870b-a77f9f1a5768",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-94228534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcada1c6-e8ec-4b85-b0b2-024b43ad7ca6",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please make sure that all the newly added functions have a comment.",
        "createdAt" : "2018-01-29T01:22:00Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "aa40f707-4bb4-48c7-9a45-3103b1bd82d3",
        "parentId" : "dcada1c6-e8ec-4b85-b0b2-024b43ad7ca6",
        "authorId" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "body" : "done",
        "createdAt" : "2018-02-06T05:23:56Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +206,210 @@\treturn false\n}\n\n// backoffEntryKeyFunc is the keying function used for mapping a backoffEntry to string for heap\nfunc backoffEntryKeyFunc(b interface{}) (string, error) {"
  },
  {
    "id" : "8840de97-1136-4773-9a6e-615baabfc384",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-181538191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c16c1fe-dbfb-4c83-a0de-0d4e5e21a1f2",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "we need mutex locking here.",
        "createdAt" : "2018-12-05T02:19:28Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +187,191 @@\tp.lock.Lock()\n\tdefer p.lock.Unlock()\n\trawBe, exists, _ := p.expiryQ.GetByKey(podID.String())\n\tif !exists {\n\t\treturn time.Time{}, false"
  },
  {
    "id" : "5be56c2f-1c01-4013-a3e1-df3d1e94ccec",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-182344809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1a9660-d7ff-4469-93c7-b81df1d1df51",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Could you please add unit-tests for these new functions that you have added to `PodBackoff`?",
        "createdAt" : "2018-12-05T02:36:11Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "1fe8b277-d2e2-4d56-bb97-311cfb727203",
        "parentId" : "6a1a9660-d7ff-4469-93c7-b81df1d1df51",
        "authorId" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "body" : "I added tests for ClearPodBackoff and TryBackoffAndWait, I renamed TestBackoff to TestBackoffPod so it it more clear this is a unit test for this case. GetBackoffTime is also pretty well covered in this case.",
        "createdAt" : "2018-12-06T17:03:04Z",
        "updatedAt" : "2018-12-06T17:03:23Z",
        "lastEditedBy" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +134,138 @@\n// BackoffPod updates the backoff for a podId and returns the duration until backoff completion\nfunc (p *PodBackoff) BackoffPod(podID ktypes.NamespacedName) time.Duration {\n\tp.lock.Lock()\n\tdefer p.lock.Unlock()"
  }
]