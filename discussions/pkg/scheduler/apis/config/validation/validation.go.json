[
  {
    "id" : "ce1fbe8a-0113-4bcd-b25f-3000c0c33a68",
    "prId" : 103480,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103480#pullrequestreview-699039060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15044d46-f6b1-48fa-b253-448d9576d3e7",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "primarily,  this line is added to check the removed plugin.",
        "createdAt" : "2021-07-05T10:33:57Z",
        "updatedAt" : "2021-07-05T10:33:57Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "823a0f101acb15e6c87f0725f17493f054424637",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\t\tseenPluginConfig.Insert(name)\n\t\t}\n\t\tif removed, removedVersion := isPluginRemoved(apiVersion, name); removed {\n\t\t\terrs = append(errs, field.Invalid(pluginConfigPath, name, fmt.Sprintf(\"was removed in version %q (KubeSchedulerConfiguration is version %q)\", removedVersion, apiVersion)))\n\t\t} else if validateFunc, ok := m[name]; ok {"
  },
  {
    "id" : "195248a7-fa2b-42ec-b82b-48b80e65f154",
    "prId" : 103480,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103480#pullrequestreview-699505537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "149c5307-b10b-4170-8373-2e5c2a5acd06",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "@alculquicondor removed the `return`  here.",
        "createdAt" : "2021-07-06T03:24:52Z",
        "updatedAt" : "2021-07-06T03:24:52Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "823a0f101acb15e6c87f0725f17493f054424637",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +242,246 @@\t\t\t// type mismatch, no need to validate the `args`.\n\t\t\tif reflect.TypeOf(args) != reflect.ValueOf(validateFunc).Type().In(1) {\n\t\t\t\terrs = append(errs, field.Invalid(pluginConfigPath.Child(\"args\"), args, \"has to match plugin args\"))\n\t\t\t} else {\n\t\t\t\tin := []reflect.Value{reflect.ValueOf(pluginConfigPath.Child(\"args\")), reflect.ValueOf(args)}"
  },
  {
    "id" : "838ce674-dc56-4e6d-9110-955a7d1eb86b",
    "prId" : 101822,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101822#pullrequestreview-692864859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Today, in v1beta1, people can use NodeResourcesFit and the other plugins. We should continue allowing that.",
        "createdAt" : "2021-06-24T17:04:43Z",
        "updatedAt" : "2021-06-24T17:12:35Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "2e85de56-22a4-4ee8-b76e-8d9e84f3bebb",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Just deprecating the plugins in v1beta2 is enough.",
        "createdAt" : "2021-06-24T17:07:41Z",
        "updatedAt" : "2021-06-24T17:12:35Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "fc784000-e780-4f17-a29d-40e50f5b71ff",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "I don't think so, we should prevent using both in v1beta1.",
        "createdAt" : "2021-06-24T17:14:30Z",
        "updatedAt" : "2021-06-24T17:14:30Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "5c908fd6-95b3-4366-923e-c28f290dea0a",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ah, we should only do that for score indeed!",
        "createdAt" : "2021-06-24T17:23:23Z",
        "updatedAt" : "2021-06-24T17:23:23Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "4bd29979-64d0-4dd7-b570-a372f51a6c48",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "lets just call this function for \"profile.Plugins.Score\" and rename the function as such: `validateScorePluginSetForConflictPlugins`",
        "createdAt" : "2021-06-24T17:32:20Z",
        "updatedAt" : "2021-06-24T17:32:20Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "8b1ff596-3181-479d-b8b6-3e70f7d21639",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "back-dating plugin conflicts into already-released scheduler configs is _really_ hard to reason about, and seems likely to break a v1beta1 config file that worked in 1.21 and which we still claim to support in 1.22\r\n\r\nif the scoring capability being added to NodeResourcesFit is taking the place of those three separate plugins, it seems more straightforward to:\r\n1. omit the `scoringStrategy` field from the NodeResourcesFit v1beta1 params\r\n2. make NodeResourcesFit keep 1.21 behavior if the `scoringStrategy` field is nil\r\n3. disallow the three individual plugins in v1beta2+\r\n",
        "createdAt" : "2021-06-24T21:37:52Z",
        "updatedAt" : "2021-06-24T21:37:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6f71ca0b-643a-443a-9bb7-9f8978cff1e9",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Ideally we want `ScoringStrategy` in the internal type to not be a reference, which I am planning to change it in a followup PR. Assuming it is not a reference, if a user lists NodeResourcesFit as a scoring plugin in v1beta1, then we will get all sorts of surprising behavior because if it gets properly defaulted, then the pod will get scored by both the legacy plugin (e.g., LeastAllcoated) and the new one (NodeResourcesFit), which is a configuration we don't want users to have.",
        "createdAt" : "2021-06-24T22:02:57Z",
        "updatedAt" : "2021-06-24T22:03:38Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "4e908300-fc3c-4af1-9b30-603a5348cb5b",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : " I want to stress that this conflict check is backward compatible because NodeResourcesFit didn't exist as a scoring plugin in the released versions.",
        "createdAt" : "2021-06-24T22:04:37Z",
        "updatedAt" : "2021-06-24T22:04:37Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "3e076da3-0434-4942-805f-81848e962b6a",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> make NodeResourcesFit keep 1.21 behavior if the scoringStrategy field is nil\r\n\r\nMy concern is that if the user specifies NodeResourcesFit in the Score PluginSet in a v1beta1 configuration, they would be surprised if that resulted in a no-op since NodeResourcesFit now implements the score extension point. I get that this is the existing v1beta1 behavior, but I bet it still be surprising.",
        "createdAt" : "2021-06-25T10:23:13Z",
        "updatedAt" : "2021-06-25T10:23:13Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "ea02d516-2bd5-49a1-821a-9a6a9226d663",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "An alternative is to disallow the use of NodeResroucesFit as a score plugin completely in v1beta1. Which sadly introduces new validation machinery as well.\r\nOTOH, to learn about the new capabilities of NodeResourcesFit, users have to get it from the documentation, where we can stress the fact that in v1beta1 is no-op and they have to migrate to v1beta2. I think this is reasonable.\r\nBut ultimately, I'm not heavily opposed to adding the conflict detection. The problem is that it just sets a precedent in the k8s API that we don't want to encourage.",
        "createdAt" : "2021-06-25T14:11:02Z",
        "updatedAt" : "2021-06-25T14:11:03Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "7c2b84d0-0501-4e98-879f-007abff9b3fa",
        "parentId" : "3c569a53-15ec-4664-9c11-e689f3ba5422",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> But ultimately, I'm not heavily opposed to adding the conflict detection. The problem is that it just sets a precedent in the k8s API that we don't want to encourage.\r\n\r\nThe good thing is that this is not permanent, we will remove it with the v1beta1 deprecation. \r\n",
        "createdAt" : "2021-06-25T14:14:14Z",
        "updatedAt" : "2021-06-25T14:14:14Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb14b995acf9acd3d7efc1e3fcdb640f09ebdb9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +114,118 @@var conflictScorePluginsByVersion = map[string]map[string]sets.String{\n\tv1beta1.SchemeGroupVersion.String(): {\n\t\t\"NodeResourcesFit\": sets.NewString(\n\t\t\t\"NodeResourcesLeastAllocated\",\n\t\t\t\"NodeResourcesMostAllocated\","
  },
  {
    "id" : "5407c7a8-ae7e-4fb1-a98e-bbdfd8948d54",
    "prId" : 100557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100557#pullrequestreview-633629499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "@alculquicondor  This will bring us the extra cost to call `ToAggregate()` to convert the `ErrorList` to `Aggregate`, but the conversion itself seems useful when there are duplicated `error` in the  `ErrorList` ",
        "createdAt" : "2021-04-07T07:11:15Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "009ca29b-3f35-49e9-81fb-fbbf654d4d30",
        "parentId" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "And `go` doesn't allow us to do something like this, this seems the only way out if we don't want to mix `[]error` and `field.ErrorList` in this function.\r\n\r\n```\r\nerrs = append(errs, componentbasevalidation.ValidateClientConnectionConfiguration(&cc.ClientConnection, field.NewPath(\"clientConnection\"))...)\r\n```\r\n\r\n[1] https://golang.org/doc/faq#convert_slice_of_interface",
        "createdAt" : "2021-04-07T08:00:46Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "5967abf4-7639-4a0f-97d2-1e09e78a71c5",
        "parentId" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Yes, use `...`",
        "createdAt" : "2021-04-09T13:29:01Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "0e05f578-ce92-40fe-80bc-5be74316d2be",
        "parentId" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "hmm... sorry, I cannot get it. \r\n\r\nI have explained why `...` is not applicable here, could you pls more explicit? ",
        "createdAt" : "2021-04-12T01:35:14Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "58a05888-d2c2-4acb-b7b2-7b0e5389e0c0",
        "parentId" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I thought you were asking which one was preferred.\r\nI understand why `...` doesn't work in this case now.",
        "createdAt" : "2021-04-12T13:58:38Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "b17433c7-a099-4754-afd2-6803d3011bfb",
        "parentId" : "97f478e3-1d35-45a9-950d-16e3714dbbda",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "my bad, I didn't express it clearly.",
        "createdAt" : "2021-04-12T14:47:33Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6e65079c70100edc647e3ccfdfa9ead1fe71818",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +37,41 @@\tvar errs []error\n\terrs = append(errs, componentbasevalidation.ValidateClientConnectionConfiguration(&cc.ClientConnection, field.NewPath(\"clientConnection\")).ToAggregate())\n\terrs = append(errs, componentbasevalidation.ValidateLeaderElectionConfiguration(&cc.LeaderElection, field.NewPath(\"leaderElection\")).ToAggregate())\n\tprofilesPath := field.NewPath(\"profiles\")\n\tif cc.Parallelism <= 0 {"
  },
  {
    "id" : "207623dc-5ac8-4ef7-b70b-1219e33e7922",
    "prId" : 100557,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100557#pullrequestreview-634727263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "let's validate that `len(QueueSort.Enabled) <= 1`",
        "createdAt" : "2021-04-13T13:12:26Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "a9af338d-e56e-4b05-82f1-5d9a3ceee73b",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "what about this?\r\nPlease squash all commits when you add this.",
        "createdAt" : "2021-04-13T14:53:11Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "5b969e19-8dfd-4fed-9b0a-89e76feb9a60",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "I am doubt that the validate can be added here, my understanding is that we can start a scheduler with a configuration file where \"QueueSort\" plugin is not necessary specified, it can be deferred to the staging of merging of plugin configuration from custom plugins.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/46563b0abebbb00e21db967950a1343e83a0c6a2/pkg/scheduler/apis/config/types.go#L286\r\n\r\n",
        "createdAt" : "2021-04-13T14:56:19Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "071fad70-0512-42af-a72f-4838fc8b3035",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "```\r\n=> 286:         p.QueueSort = mergePluginSets(p.QueueSort, customPlugins.QueueSort)\r\n(dlv) p p.QueueSort.Enabled\r\n[]k8s.io/kubernetes/pkg/scheduler/apis/config.Plugin len: 1, cap: 1, [\r\n        {\r\n                Name: \"PrioritySort\",\r\n                Weight: 0,},\r\n]\r\n(dlv) p customPlugins.QueueSort.Enabled\r\n[]k8s.io/kubernetes/pkg/scheduler/apis/config.Plugin len: 0, cap: 0, nil\r\n\r\n```",
        "createdAt" : "2021-04-13T14:59:26Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "041f0f15-e862-4cf0-9fe0-cdef90a4c1d7",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Add the validation here force us to specify a custom queue sort plugin in the config file always. Did I miss something?",
        "createdAt" : "2021-04-13T15:04:52Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "fbac75e0-9e38-41b9-b38d-42cf44a8daf1",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "That's why I said `<= 1` and not `== 1` :)",
        "createdAt" : "2021-04-13T15:05:16Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "a71180fc-c22f-4b97-ba98-c4b71fab2a2b",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Gotcha, give me one more min.",
        "createdAt" : "2021-04-13T15:16:22Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "dca269b2-50c7-43e7-9a5b-11ba0ed2ccdd",
        "parentId" : "8afea78e-d29e-4d51-8631-d69e00ce525d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Done",
        "createdAt" : "2021-04-13T15:23:13Z",
        "updatedAt" : "2021-04-14T01:31:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6e65079c70100edc647e3ccfdfa9ead1fe71818",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +141,145 @@\t\tif len(profiles[0].Plugins.QueueSort.Enabled) != 0 {\n\t\t\tqueueSortName = profiles[0].Plugins.QueueSort.Enabled[0].Name\n\t\t}\n\t\tlength := len(profiles[0].Plugins.QueueSort.Enabled)\n\t\tif length > 1 {"
  },
  {
    "id" : "a7275c00-2f3b-4235-8ccb-1bbff2dfb71d",
    "prId" : 99597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99597#pullrequestreview-659128667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb0d82db-77b4-46cb-93c6-0705effc8637",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "It looks like the way `isPluginRemoved` works, we may have to list intermediate versions that don't remove any additional plugins. For example, if there's a `v1beta3` that doesn't remove any plugins, and then a `v1beta4` that does remove plugins, we'll need to remember to add an empty entry for `v1beta3`.\r\n\r\nI think this would be worth commenting to remember in the future.",
        "createdAt" : "2021-05-13T23:01:00Z",
        "updatedAt" : "2021-05-14T00:28:58Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8e56bef9514094a640cc6f9ad3ccc8894c5c0e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\tplugins:            []string{\"NodeLabel\", \"ServiceAffinity\", \"NodePreferAvoidPods\"},\n\t},\n}\n\n// isPluginRemoved checks if a given plugin was removed in the given component"
  },
  {
    "id" : "363b83e1-6689-4a3c-870b-586729c8d66f",
    "prId" : 94636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94636#pullrequestreview-513702228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbbe6aa0-c0e6-4914-bedd-baf8600846ef",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we need a maximum? any other considerations we should requirement/document or require (power-of-two, etc)?",
        "createdAt" : "2020-10-16T18:11:10Z",
        "updatedAt" : "2020-10-29T06:46:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "33976a67-bd06-413b-bff0-5ca13581c810",
        "parentId" : "cbbe6aa0-c0e6-4914-bedd-baf8600846ef",
        "authorId" : "3bdcfb0c-c4cb-4ce1-a650-279ad3ab77c8",
        "body" : "Do we want to enforce them , or just add them to documentation as a reference ?\r\n",
        "createdAt" : "2020-10-19T13:12:07Z",
        "updatedAt" : "2020-10-29T06:46:42Z",
        "lastEditedBy" : "3bdcfb0c-c4cb-4ce1-a650-279ad3ab77c8",
        "tags" : [
        ]
      },
      {
        "id" : "96573e25-48ed-48f6-9441-ce734a429cf4",
        "parentId" : "cbbe6aa0-c0e6-4914-bedd-baf8600846ef",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't know what the implications of very high or non-power-of-two numbers are here... if they're really bad, we should probably enforce. If not, docs indicating typical ranges or giving guidance relative to number of CPUs could be fine.",
        "createdAt" : "2020-10-20T16:56:58Z",
        "updatedAt" : "2020-10-29T06:46:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "15885bca-022c-43a9-be00-501702affaee",
        "parentId" : "cbbe6aa0-c0e6-4914-bedd-baf8600846ef",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I've never heard of non-power-of-two being a problem for parallelism. If anything, this should be up to the operator to decide if they want to use all the cores they have or not.\r\n\r\nWe could recommend, in the comment in types.go, to use up to the number of cores available in the system. But a global maximum doesn't necessarily make sense to me. We know current computers go up to about 256 cores, but I don't think we should hardcode that. On the other hand, a hard limit of 256 routines for a 2 core CPU wouldn't prevent an operator from achieving bad performance.",
        "createdAt" : "2020-10-21T13:44:37Z",
        "updatedAt" : "2020-10-29T06:46:42Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "1763688d71ba18b333e9e3d190b0f03a513be57f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +41,45 @@\tif cc.Parallelism <= 0 {\n\t\tallErrs = append(allErrs, field.Invalid(field.NewPath(\"parallelism\"), cc.Parallelism, \"should be an integer value greater than zero\"))\n\t}\n\n\tif len(cc.Profiles) == 0 {"
  },
  {
    "id" : "5d24b222-7a8e-4326-9d78-dd004b948b99",
    "prId" : 88087,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88087#pullrequestreview-358368067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d175fa0e-aa51-4d11-9cd2-7716443629cd",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "How about the PluginConfig? It should be the same for all profiles as well, but I guess this is harder to validate since we don't really know what exact QueueSort Plugin names we will end up with at this point, so perhaps we can delay this to Framework instantiation.",
        "createdAt" : "2020-02-13T03:01:53Z",
        "updatedAt" : "2020-02-24T14:46:17Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "66d6720e-be68-49c2-b5af-a1f1eabf41cf",
        "parentId" : "d175fa0e-aa51-4d11-9cd2-7716443629cd",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "That is my thinking as well. I left a TODO here anyways.",
        "createdAt" : "2020-02-13T16:52:46Z",
        "updatedAt" : "2020-02-24T14:46:17Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e71741d06697a64909142c080d7213e50559c18",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +86,90 @@\tallErrs := field.ErrorList{}\n\tvar canon *config.PluginSet\n\tif profiles[0].Plugins != nil {\n\t\tcanon = profiles[0].Plugins.QueueSort\n\t}"
  },
  {
    "id" : "1eafa168-014c-4884-a148-b01bbdb6803e",
    "prId" : 88087,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88087#pullrequestreview-360394274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60dc1b78-ccab-4449-9c2c-a2397682b904",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Are the following cases valid?\r\n\r\n- some profiles are missing queuesort plugin, however, queuesort plugin is at least specified in one profile\r\n- the profile(s) with queuesort plugin specified is(are) not at `profiles[0]`",
        "createdAt" : "2020-02-14T22:31:34Z",
        "updatedAt" : "2020-02-24T14:46:17Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "3cad5598-e3f0-46f3-91c3-c77fe63cb524",
        "parentId" : "60dc1b78-ccab-4449-9c2c-a2397682b904",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Ideally, this validation logic shouldn't know about valid plugin names or what's the default plugin. That means it can't deduce if two configurations are equivalent. So, we decided that the queuesort plugin specification must be **strictly** equal. Then, the cases you describe are considered invalid.",
        "createdAt" : "2020-02-18T14:44:23Z",
        "updatedAt" : "2020-02-24T14:46:17Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e71741d06697a64909142c080d7213e50559c18",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +87,91 @@\tvar canon *config.PluginSet\n\tif profiles[0].Plugins != nil {\n\t\tcanon = profiles[0].Plugins.QueueSort\n\t}\n\tfor i := 1; i < len(profiles); i++ {"
  },
  {
    "id" : "17da558c-a3b7-479e-9b54-31c7d9a4cfea",
    "prId" : 86673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86673#pullrequestreview-336854291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26365201-52b8-4bf5-b1f9-858ae6edeea8",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "This check was in factory.go, moved it here to simplify the logic in factory.go, let alone this is its right place.",
        "createdAt" : "2019-12-27T19:36:31Z",
        "updatedAt" : "2020-01-02T21:40:47Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "b535ed3b0c15178c81fd8469b1d480ce21deb155",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\tvalidationErrors = append(validationErrors, fmt.Errorf(\"Only one extender can implement bind, found %v\", binders))\n\t}\n\n\tif policy.HardPodAffinitySymmetricWeight < 0 || policy.HardPodAffinitySymmetricWeight > 100 {\n\t\tvalidationErrors = append(validationErrors, field.Invalid(field.NewPath(\"hardPodAffinitySymmetricWeight\"), policy.HardPodAffinitySymmetricWeight, \"not in valid range [0-100]\"))"
  },
  {
    "id" : "905e0694-c7e9-481b-85c4-2599c9e13dee",
    "prId" : 66799,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66799#pullrequestreview-151577926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "where is this range documented or enforced today? It is described in the API type field godoc, but not in the CLI flag help, which is where most users are currently setting it.\r\n* what is the current behavior if a negative number is set via the CLI?\r\n* what is the current behavior if a number over 100 is set via the CLI?",
        "createdAt" : "2018-08-29T15:12:12Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8fc435e6-e44a-4eae-a19d-a9b26db85352",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "6c55a3dd-71a8-4ca6-9016-6c1e17008981",
        "body" : "documented here: https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/api/v1/types.go#L42",
        "createdAt" : "2018-08-29T15:30:07Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "6c55a3dd-71a8-4ca6-9016-6c1e17008981",
        "tags" : [
        ]
      },
      {
        "id" : "27ea650f-21a1-44f6-8954-6c737170e782",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "please also add that to the flag help. if setting this to a value less than 0 or greater than 100 does not prevent the scheduler from working today, then I wouldn't make this a fatal error.",
        "createdAt" : "2018-08-29T15:36:26Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "626e215b-a8b9-4df6-87c5-f543af3dafe1",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "6c55a3dd-71a8-4ca6-9016-6c1e17008981",
        "body" : "added in 3f7830f6826b0ac8b5170f00014d4aaee3fb621f",
        "createdAt" : "2018-08-29T15:48:05Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "6c55a3dd-71a8-4ca6-9016-6c1e17008981",
        "tags" : [
        ]
      },
      {
        "id" : "5ec2eed0-293d-4767-a79e-f3bb23d50f22",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : ">  if setting this to a value less than 0 or greater than 100 does not prevent the scheduler from working today, then I wouldn't make this a fatal error.\r\n\r\ncan you comment on this? @bsalamat, do you know what the effect of setting this to a value outside the 0-100 range is?",
        "createdAt" : "2018-08-29T20:14:32Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "87b4080f-6426-4719-851b-5aea6c68e59e",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "@liggitt Scheduler [has a check](https://github.com/kubernetes/kubernetes/blob/e1a270d6dcfd73e35db3970a042db9c704ec5a8f/pkg/scheduler/factory/factory.go#L1142) to ensure that this value is between 1 and 100. This is done at the scheduler creation. So, it was not possible to provide a value out of this range before this PR.",
        "createdAt" : "2018-08-31T23:11:37Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "a0914e4a-4e72-436a-bcb9-518cb182b1f6",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Ok, great",
        "createdAt" : "2018-08-31T23:39:12Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e53eb786-ebb4-420c-a03d-77cef32d65c5",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Does that mean the allowed range is 1-100 or 0-100? Or is 0 a marker value that means to disable that weight?",
        "createdAt" : "2018-08-31T23:53:59Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0c62e449-4cd5-464e-9255-00bba0c2a1e8",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "0 is changed to the default weight in our defaulting logic.",
        "createdAt" : "2018-09-01T00:38:42Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "e9ef2c0c-18ca-485a-a19a-959dc1118375",
        "parentId" : "e86cbb75-4a96-4e51-96d1-f513cbbfcfa5",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I am referring to this piece of code: https://github.com/kubernetes/kubernetes/blob/2d7b92ee743de20d17406003e463a829a0db5a51/pkg/scheduler/apis/config/v1alpha1/defaults.go#L43",
        "createdAt" : "2018-09-01T00:41:19Z",
        "updatedAt" : "2018-09-01T02:30:14Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "0334a34e4af9b56ffa4d8fe17514c931c69db84b",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\t}\n\tif cc.HardPodAffinitySymmetricWeight < 0 || cc.HardPodAffinitySymmetricWeight > 100 {\n\t\tallErrs = append(allErrs, field.Invalid(field.NewPath(\"hardPodAffinitySymmetricWeight\"), cc.HardPodAffinitySymmetricWeight, \"not in valid range 0-100\"))\n\t}\n\treturn allErrs"
  }
]