[
  {
    "id" : "41cee22e-ba9c-4623-bffd-8b0bd9f3294b",
    "prId" : 83674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83674#pullrequestreview-300329513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d74fec3f-f811-4e2c-acc7-22d42ccbb224",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "this infinite loop is hard to read and reason about, I am pretty sure there is a waitUntil function that we can use instead of this logic, would be great if we can clean this up in a followup PR.",
        "createdAt" : "2019-10-10T20:02:37Z",
        "updatedAt" : "2019-10-10T20:59:05Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "9dfdb3d8-bc61-4666-93d1-8b9269a9fa1e",
        "parentId" : "d74fec3f-f811-4e2c-acc7-22d42ccbb224",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "SG. There is a comment for this `Note that this is extremely rudimentary and we need a more real error handling path.` There might be a chance to further refactor this.\r\n\r\n\r\n",
        "createdAt" : "2019-10-10T20:23:48Z",
        "updatedAt" : "2019-10-10T20:59:05Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "481d5d9c-69cd-498b-8da4-9b477ec61138",
        "parentId" : "d74fec3f-f811-4e2c-acc7-22d42ccbb224",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I am going to create a PR for this.",
        "createdAt" : "2019-10-10T20:24:07Z",
        "updatedAt" : "2019-10-10T20:59:05Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "085852160a65f123f3697cf5968add822a91a8dd",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +680,684 @@\t\t\tgetBackoff := initialGetBackoff\n\t\t\tfor {\n\t\t\t\tpod, err := client.CoreV1().Pods(podID.Namespace).Get(podID.Name, metav1.GetOptions{})\n\t\t\t\tif err == nil {\n\t\t\t\t\tif len(pod.Spec.NodeName) == 0 {"
  },
  {
    "id" : "869c3979-3a35-4916-84d6-4dfba21b1584",
    "prId" : 83099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83099#pullrequestreview-293952509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24b3294b-c080-41de-b95c-db1e2a68503e",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "So predicateKeys not existing in predicate.Ordering() is added after. I think a comment should be added here to highlight this.",
        "createdAt" : "2019-09-25T17:18:16Z",
        "updatedAt" : "2019-09-30T14:37:02Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "53b8da55-99fb-4dca-b024-02a266f93476",
        "parentId" : "24b3294b-c080-41de-b95c-db1e2a68503e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Done.",
        "createdAt" : "2019-09-26T19:28:14Z",
        "updatedAt" : "2019-09-30T14:37:02Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "6120fe9b1129ca10b597df7ae7421396988f3910",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +578,582 @@\n\t// Third, add the rest in no specific order.\n\tfor predicateKey := range asPlugins {\n\t\tproducer := frameworkConfigProducers[predicateKey]\n\t\tp, pc := producer(*configProducerArgs)"
  },
  {
    "id" : "84f739f1-d8e8-4019-b3b9-7ea5e588b0f6",
    "prId" : 83099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83099#pullrequestreview-294551181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64a8bbd5-17d9-4aa5-9914-4da0b7dafda2",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "The logic to produce the eventual algorithm vs. framework plugin output has some subtleties. It depends on a few things - algorithm keys in policy, algorithm to plugin config producer registry, ordered list of predicates, etc. I suggest that we add some high level comments here to explain this. Same for the `getPriorityConfig` method.",
        "createdAt" : "2019-09-27T19:32:23Z",
        "updatedAt" : "2019-09-30T14:37:02Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "2f46292c-37b5-408a-894e-5b59e5ca8c50",
        "parentId" : "64a8bbd5-17d9-4aa5-9914-4da0b7dafda2",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "done.",
        "createdAt" : "2019-09-27T20:35:39Z",
        "updatedAt" : "2019-09-30T14:37:02Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "6120fe9b1129ca10b597df7ae7421396988f3910",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +537,541 @@// Note that the framework executes plugins according to their order in the Plugins list, and so predicates run as plugins\n// are added to the Plugins list according to the order specified in predicates.Ordering().\nfunc (c *Configurator) getPredicateConfigs(predicateKeys sets.String) (map[string]predicates.FitPredicate, *config.Plugins, []config.PluginConfig, error) {\n\talgorithmArgs, configProducerArgs := c.getAlgorithmArgs()\n"
  },
  {
    "id" : "de227ea7-e15b-4256-b3ee-2df91e2e3eda",
    "prId" : 80811,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80811#pullrequestreview-269178787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "337ad6be-a39c-4483-a167-a74b3fa21ca8",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "what does \"waiting\" at the end mean?",
        "createdAt" : "2019-07-31T15:52:43Z",
        "updatedAt" : "2019-08-07T20:20:54Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "300bfb20-5503-4f2c-a935-891ea07e8d38",
        "parentId" : "337ad6be-a39c-4483-a167-a74b3fa21ca8",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "waiting for the pod to be scheduled, you can find \"waiting\" in similar logs on Line 656 and L659. ",
        "createdAt" : "2019-07-31T17:41:03Z",
        "updatedAt" : "2019-08-07T20:20:54Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "7139ec0f-a2ba-40d2-871f-2dd76ec102e2",
        "parentId" : "337ad6be-a39c-4483-a167-a74b3fa21ca8",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg",
        "createdAt" : "2019-07-31T17:50:22Z",
        "updatedAt" : "2019-08-07T20:20:54Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "df0ade56c4894208133963d816cb66630b6c7413",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +659,663 @@\t\t\t\tklog.V(2).Infof(\"Unable to schedule %v/%v: no fit: %v; waiting\", pod.Namespace, pod.Name, err)\n\t\t\t} else if errors.IsNotFound(err) {\n\t\t\t\tklog.V(2).Infof(\"Unable to schedule %v/%v: possibly due to node not found: %v; waiting\", pod.Namespace, pod.Name, err)\n\t\t\t\tif errStatus, ok := err.(errors.APIStatus); ok && errStatus.Status().Details.Kind == \"node\" {\n\t\t\t\t\tnodeName := errStatus.Status().Details.Name"
  },
  {
    "id" : "58826cea-6009-4286-bcba-4df0d3606064",
    "prId" : 80233,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80233#pullrequestreview-266652069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c11ccac0-2590-4404-90f9-48b78395190a",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "update the TODO comment ",
        "createdAt" : "2019-07-25T13:44:47Z",
        "updatedAt" : "2019-07-25T14:09:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "dcc19985-3e2c-427b-be2c-7a91e410a01e",
        "parentId" : "c11ccac0-2590-4404-90f9-48b78395190a",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Done",
        "createdAt" : "2019-07-25T14:10:11Z",
        "updatedAt" : "2019-07-25T14:10:11Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e35ac8f1ed22ff95bc0fd3e596c408b06da5b7c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +166,170 @@// TODO(#80216): Remove pod lister.\ntype configFactory struct {\n\tclient clientset.Interface\n\t// a means to list all known scheduled pods.\n\tscheduledPodLister corelisters.PodLister"
  },
  {
    "id" : "ff200be5-7c04-45bd-85c5-8a80be0ba985",
    "prId" : 80220,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80220#pullrequestreview-262512068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7bcd90b-8919-4e47-b99e-02703f604713",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "why move theses functions here?",
        "createdAt" : "2019-07-16T15:17:52Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "e02108c6-1142-4f6c-8138-6cf9229de4fc",
        "parentId" : "f7bcd90b-8919-4e47-b99e-02703f604713",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "To keep them visible in preparation for the TODO.",
        "createdAt" : "2019-07-16T15:43:59Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "f58abdf96690cb70cc526ca87d35733122ff2210",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +153,157 @@\tGetClient() clientset.Interface\n\n\t// TODO(#80216): Remove these methods from the interface.\n\t// Needs to be exposed for things like integration tests where we want to make fake nodes.\n\tGetNodeLister() corelisters.NodeLister"
  },
  {
    "id" : "ae23a4e6-837d-4661-ad02-0c5303b2b6ab",
    "prId" : 80220,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80220#pullrequestreview-262994344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "528ba4bc-ac8b-406b-82b5-59d38587e4c0",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Why not add a TODO here?",
        "createdAt" : "2019-07-17T00:35:43Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "38812593-dba0-4f0d-a1d3-91b80804b1e5",
        "parentId" : "528ba4bc-ac8b-406b-82b5-59d38587e4c0",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I couldn't assess that GetClient is possible/easy to remove.",
        "createdAt" : "2019-07-17T12:34:37Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "f58abdf96690cb70cc526ca87d35733122ff2210",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +149,153 @@\tGetPredicateMetadataProducer() (predicates.PredicateMetadataProducer, error)\n\tGetPredicates(predicateKeys sets.String) (map[string]predicates.FitPredicate, error)\n\n\t// Exposed for testing\n\tGetClient() clientset.Interface"
  },
  {
    "id" : "a464a33d-d455-4fec-83e3-c170279264d9",
    "prId" : 80220,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80220#pullrequestreview-264388368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc1f6c92-6fd1-40d1-9711-faf80fc4adb5",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "This needs to be addressed according to @bsalamat's comment",
        "createdAt" : "2019-07-19T19:04:55Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "484b5391-de6f-4e47-a6a1-e63167b05c24",
        "parentId" : "dc1f6c92-6fd1-40d1-9711-faf80fc4adb5",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Not necessarilly, that referred to a different struct.",
        "createdAt" : "2019-07-19T19:17:11Z",
        "updatedAt" : "2019-07-24T02:11:01Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "f58abdf96690cb70cc526ca87d35733122ff2210",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +153,157 @@\tGetClient() clientset.Interface\n\n\t// TODO(#80216): Remove these methods from the interface.\n\t// Needs to be exposed for things like integration tests where we want to make fake nodes.\n\tGetNodeLister() corelisters.NodeLister"
  },
  {
    "id" : "b3132767-9508-4fcd-a9e6-9339ca7cb3ff",
    "prId" : 80084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80084#pullrequestreview-261198686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47a0f1c7-d04a-4cf9-9c6a-db261c063a87",
        "parentId" : null,
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "Initially I re-used the `NodeInfo` interface above by adding a new `GetCSINodeInfo()` method to it. However, the patch got fairly bigger because the `NodeInfo` interface is used in many places in k8s.",
        "createdAt" : "2019-07-12T11:13:07Z",
        "updatedAt" : "2019-08-01T08:16:53Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5d9af2bda5a628b1a4123b4bfff6029312c32cc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +560,564 @@\t\tPDBLister:                      c.pdbLister,\n\t\tNodeInfo:                       c.schedulerCache,\n\t\tCSINodeInfo:                    c.schedulerCache,\n\t\tPVInfo:                         &predicates.CachedPersistentVolumeInfo{PersistentVolumeLister: c.pVLister},\n\t\tPVCInfo:                        &predicates.CachedPersistentVolumeClaimInfo{PersistentVolumeClaimLister: c.pVCLister},"
  },
  {
    "id" : "7865d9eb-a5aa-49ad-9293-cfe2137bf8c5",
    "prId" : 77595,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77595#pullrequestreview-245491987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "While I did not review the entire PR, I am not 100% sure about the performance of scheduler with this change and since this feature is beta, this will be enabled by default. So, I feel less confident about this change going into 1.15.",
        "createdAt" : "2019-05-30T15:44:13Z",
        "updatedAt" : "2019-06-25T14:31:23Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "2ec90872-82ff-4190-a323-bed77d7bd4f1",
        "parentId" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "There were no scheduler benchmarks with volumes, I am preparing one at https://github.com/kubernetes/kubernetes/pull/77397.\r\n\r\nCurrent numbers (5000 nodes each with CSINode instance, 1000 pods each with a CSI volume, with all alpha gates disabled, two measurements each):\r\n\r\nWith this PR:    30583423 and 37684721 ns/op\r\nWithout this PR: 33340480 and 36254432 ns/op\r\n\r\nThese numbers are jumping like crazy... will do proper stats on a stable system tomorrow.\r\n",
        "createdAt" : "2019-05-30T16:05:18Z",
        "updatedAt" : "2019-06-25T14:31:23Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "15132e67-f85e-45be-a742-0145ffbc187b",
        "parentId" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Finally I got some real numbers:\r\n\r\n| Volume             | Original (ns/op) | With this PR (ns/op) | Increase |\r\n| ------------------ | -------------- | ------------------ | -------- |\r\n| In-tree volume     |  77432515      |  78835497          | 1.81%  |\r\n| CSI volume         |  64654527      |  70410337          | 8.90%  |\r\n| Migrated volume    |  80161751      |  78255729          | -2.38%   |\r\n\r\nAll numbers are from tests `BenchmarkScheduling*PVs/5000Nodes/1000Pods-4` on 4-core GCE machine, 10 samples each (variation is low, +/- 2-3%)\r\n\r\nCSI scheduling is 9% slower, the rest is IMO fine.",
        "createdAt" : "2019-05-31T18:05:44Z",
        "updatedAt" : "2019-06-25T14:31:23Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "514b8a07-5136-4ece-99f9-596ae9e54c90",
        "parentId" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Thanks for adding benchmarks. The 9% increase is 6ms in this case, so I'm not terribly worried.",
        "createdAt" : "2019-06-03T19:40:49Z",
        "updatedAt" : "2019-06-25T14:31:23Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "3b1dda43-ddd4-44f0-a6cb-8ba014c514f0",
        "parentId" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I ran the tests with current version + enabled benchmark of a pod with Secrets volume (in two flavours, one with no CSINode instances and second with CSINode for each Node), results are not so nice:\r\n\r\nTest | Before (ns/op) | After (ns/op) | Increase\r\n-- | -- | -- | --\r\nBenchmarkSchedulingInTreePVs | 79628055.7 | 79433974.9 | -0.24%\r\nBenchmarkSchedulingCSIPVs | 65328092.6 | 70548380.8 | 7.99%\r\nBenchmarkSchedulingMigratedInTreePVs | 80408231.1 | 80375741.1 | -0.04%\r\nBenchmarkSchedulingSecrets | 30153507.9 | 33890242.5 | 12.39%\r\nBenchmarkSchedulingSecretsWithCSINodes | 30181808.4 | 36221780.5 | 20.01%\r\n\r\nMain culprits:\r\n\r\n- feature gate checks\r\n- VolumeLimits() call\r\n\r\nWe're working on optimizations.\r\n\r\n**edit:** alpha features were erroneously enabled in BenchmarkSchedulingSecrets* tests, impact of this PR is under 5% and it's because of feature gate checks.",
        "createdAt" : "2019-06-04T14:24:07Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "4f22cb64-7813-4441-8b50-28fdc4e63451",
        "parentId" : "be220789-b1ef-4197-9b2f-d38b5ae82623",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "BenchmarkSchedulingSecretsWithCSINodes mistakenly turned on migration alpha gate while the others had it disabled.\r\n\r\nI'm testing out some optimizations.",
        "createdAt" : "2019-06-04T14:38:56Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6abc04d059b42ffdc1b68f5b847f18e57ac0680d",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +242,246 @@\tPdbInformer                    policyinformers.PodDisruptionBudgetInformer\n\tStorageClassInformer           storageinformersv1.StorageClassInformer\n\tCSINodeInformer                storageinformersv1beta1.CSINodeInformer\n\tHardPodAffinitySymmetricWeight int32\n\tDisablePreemption              bool"
  },
  {
    "id" : "9231a7ea-1700-4c40-8566-a7fb0865c3fc",
    "prId" : 77595,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77595#pullrequestreview-246495079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e92da2e2-14d6-4726-8652-1f64736a49f0",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "Where are we passing nil for CSINodeInformer, if featuregates are disabled?",
        "createdAt" : "2019-06-04T15:50:02Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "b095cafc-d2b3-4cdd-9166-6692e57a08e8",
        "parentId" : "e92da2e2-14d6-4726-8652-1f64736a49f0",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "+1",
        "createdAt" : "2019-06-04T17:28:33Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "5aaa2b70-5ce8-4df9-88a6-a69392e5c18c",
        "parentId" : "e92da2e2-14d6-4726-8652-1f64736a49f0",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "I think the comment above is not accurate. Removed.\r\n\r\nI'm keeping the check because the informer is an interface and theory could be `nil` (the `StorageClassInformer` above also checks that).",
        "createdAt" : "2019-06-06T10:49:52Z",
        "updatedAt" : "2019-06-25T14:31:24Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6abc04d059b42ffdc1b68f5b847f18e57ac0680d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +274,278 @@\n\tvar csiNodeLister storagelistersv1beta1.CSINodeLister\n\tif args.CSINodeInformer != nil {\n\t\tcsiNodeLister = args.CSINodeInformer.Lister()\n\t}"
  },
  {
    "id" : "71a003b7-d18d-469f-b177-b1889d1389a2",
    "prId" : 75848,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75848#pullrequestreview-227456976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9499b108-02ef-4258-bba9-d63059fed7e2",
        "parentId" : null,
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "I may not find the other place using `Registry ` except the initialization of framework . Is it better to just put the `NewRegistry ` into the initialization of framework and remove `Registry ` from `ConfigFactoryArgs `. WDYT? Maybe there is other reason I don't know.",
        "createdAt" : "2019-04-01T16:43:28Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      },
      {
        "id" : "7a12b069-0ea0-4de5-ba00-6cdd8e7898c5",
        "parentId" : "9499b108-02ef-4258-bba9-d63059fed7e2",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "The reason for Registry being here is that we want custom scheduler to be able to pass their own registry to the scheduler and have their own set of plugins.",
        "createdAt" : "2019-04-16T21:34:13Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "83828bcb2df27f3111837226ce87258d76533090",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +238,242 @@\tBindTimeoutSeconds             int64\n\tStopCh                         <-chan struct{}\n\tRegistry                       framework.Registry\n}\n"
  },
  {
    "id" : "4d53ab33-7688-4d2e-8762-6cd983d6d668",
    "prId" : 72615,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72615#pullrequestreview-191511931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f4fba11-e3e0-48f8-94cb-ecc7204c849c",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Should we move those help functions into separated file, e.g. `factor/util.go`. Maybe a separated PR.",
        "createdAt" : "2019-01-09T08:10:12Z",
        "updatedAt" : "2019-01-09T08:10:12Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "358a6ff4-2cc1-47fe-a471-5379c0ad2c67",
        "parentId" : "1f4fba11-e3e0-48f8-94cb-ecc7204c849c",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "agreed. my hope is to move it outside of the factory package. when phase :panda_face: completes, it should be easier to accomplish that.",
        "createdAt" : "2019-01-11T04:09:58Z",
        "updatedAt" : "2019-01-11T04:10:03Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf4eacfdc7281e25da1adc23bfc0d258dce40989",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +895,899 @@\n// getBinderFunc returns a func which returns an extender that supports bind or a default binder based on the given pod.\nfunc getBinderFunc(client clientset.Interface, extenders []algorithm.SchedulerExtender) func(pod *v1.Pod) Binder {\n\tvar extenderBinder algorithm.SchedulerExtender\n\tfor i := range extenders {"
  },
  {
    "id" : "cdfb9485-4a28-42d9-8b8b-e3e2af22a690",
    "prId" : 72615,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72615#pullrequestreview-190994068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e39a0421-31e5-49c7-b218-7b876951418e",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Can this be moved to before line 910 below (so that it is only called when needed) ?",
        "createdAt" : "2019-01-09T21:15:26Z",
        "updatedAt" : "2019-01-09T21:15:33Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "fff7c6a4-a5e4-4d00-b6b3-4de5007a52f0",
        "parentId" : "e39a0421-31e5-49c7-b218-7b876951418e",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "@tedyu thanks for the input. This PR has already merged, so any changes have to come in a new PR.\r\n\r\nHowever, I think this line is in the right place. On line 906 we are creating a closure that captures the `defaultBinder` value, so this way we allocate once instead of every time we bind. (They are small objects, but I guess it's good to avoid all the extra allocations.) :smile:\r\n",
        "createdAt" : "2019-01-09T23:07:59Z",
        "updatedAt" : "2019-01-09T23:08:09Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "d21f790e-a619-48c5-b090-1a1ddc0dfe17",
        "parentId" : "e39a0421-31e5-49c7-b218-7b876951418e",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "If the call to binder{client} is moved to between line 909 and line 910 , it would only be called when default binder is needed (not every time), right ?",
        "createdAt" : "2019-01-09T23:14:24Z",
        "updatedAt" : "2019-01-09T23:14:24Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "bb2566c2-7c45-4093-8ffa-6799d306dd62",
        "parentId" : "e39a0421-31e5-49c7-b218-7b876951418e",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "You are correct, but the main difference is that it would be called *each* time that the default binder is needed. `GetBinder` will be called for each pod that the scheduler binds.\r\n\r\nAlso, using the default binder is the common case.",
        "createdAt" : "2019-01-09T23:34:30Z",
        "updatedAt" : "2019-01-09T23:34:30Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "bf1efb21-2489-4ade-93a6-ab44499efcdd",
        "parentId" : "e39a0421-31e5-49c7-b218-7b876951418e",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Thanks for the clarification.",
        "createdAt" : "2019-01-09T23:36:42Z",
        "updatedAt" : "2019-01-09T23:36:42Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf4eacfdc7281e25da1adc23bfc0d258dce40989",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +903,907 @@\t\t}\n\t}\n\tdefaultBinder := &binder{client}\n\treturn func(pod *v1.Pod) Binder {\n\t\tif extenderBinder != nil && extenderBinder.IsInterested(pod) {"
  },
  {
    "id" : "3802a439-26b5-4a67-857e-781b5182ae03",
    "prId" : 71551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71551#pullrequestreview-181072121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93c98e94-2d68-45ab-95c3-464c0046b9f2",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "An optimization we can perform here is to look at the unschedulableQueue and if there is no pod in it, we can skip the check for changes in the node object and call `MoveAllToActiveQueue`. This optimization will be useful in large clusters where many nodes send updates and there is no unschedulable pods in the cluster.",
        "createdAt" : "2018-11-29T22:27:42Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "8fe82e95-73c9-466d-ab84-4c3e797b3a4e",
        "parentId" : "93c98e94-2d68-45ab-95c3-464c0046b9f2",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "Sorry I missed this optimization, I will add this later.",
        "createdAt" : "2018-12-04T02:44:58Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe9b1438c10206247b841b14215287c9a10ce7b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +999,1003 @@\n\tc.invalidateCachedPredicatesOnNodeUpdate(newNode, oldNode)\n\t// Only activate unschedulable pods if the node became more schedulable.\n\t// We skip the node property comparison when there is no unschedulable pods in the queue\n\t// to save processing cycles. We still trigger a move to active queue to cover the case"
  },
  {
    "id" : "3f0a1559-52bd-4620-9a03-d67628cee302",
    "prId" : 71551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71551#pullrequestreview-182530488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d1def28-14b1-47b2-9699-f63d15f6914a",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Can we move this to helper/util and make it as public? So others can reuse it with predicates and priorities :)",
        "createdAt" : "2018-11-30T02:26:30Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "861823a6-0086-44a6-ba06-20a65bd7b9ba",
        "parentId" : "8d1def28-14b1-47b2-9699-f63d15f6914a",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "xref https://github.com/kubernetes-sigs/kube-batch/pull/491\r\n\r\n@jiaxuanzhou , something like this PR seems better :)",
        "createdAt" : "2018-12-07T02:24:23Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe9b1438c10206247b841b14215287c9a10ce7b",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1078,1082 @@}\n\nfunc nodeSchedulingPropertiesChanged(newNode *v1.Node, oldNode *v1.Node) bool {\n\tif nodeSpecUnschedulableChanged(newNode, oldNode) {\n\t\treturn true"
  },
  {
    "id" : "04a3ca71-6767-4ec4-8267-8af11d462a47",
    "prId" : 71551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71551#pullrequestreview-182398068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c593275-9096-4790-a3a7-25900f9a17fc",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "We are not stripping node heartbeat from the conditions. This causes all those node heartbeats to appear as condition changes, which would trigger moving pods to active queue.",
        "createdAt" : "2018-12-05T19:00:16Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "7ed8d3bc-2b07-4251-9a12-aba44d3aba7b",
        "parentId" : "8c593275-9096-4790-a3a7-25900f9a17fc",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "This `strip` function only strips a `NodeConditionType` -> `ConditionStatus` map and ignores each condition's `LastHeartbeatTime`, so if only `LastHeartbeatTime` changed, we still consider these conditions are equal and won't move pods to active queue. This [unit test](https://github.com/kubernetes/kubernetes/pull/71551/files#diff-b5a22d3fdf804b9fbb2d1538f371b87bR753) covers this scenario.",
        "createdAt" : "2018-12-06T03:04:27Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      },
      {
        "id" : "c70145ca-1694-4184-9a85-e9decaa20746",
        "parentId" : "8c593275-9096-4790-a3a7-25900f9a17fc",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Oh, I missed that this code drops most fields of `NodeCondition`. ",
        "createdAt" : "2018-12-06T19:16:53Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe9b1438c10206247b841b14215287c9a10ce7b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1111,1115 @@\nfunc nodeConditionsChanged(newNode *v1.Node, oldNode *v1.Node) bool {\n\tstrip := func(conditions []v1.NodeCondition) map[v1.NodeConditionType]v1.ConditionStatus {\n\t\tconditionStatuses := make(map[v1.NodeConditionType]v1.ConditionStatus, len(conditions))\n\t\tfor i := range conditions {"
  },
  {
    "id" : "10f3b80d-991c-4b8b-b465-6f6b1fc80ad5",
    "prId" : 71551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71551#pullrequestreview-182067165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "637b6955-7d24-45da-9df9-26fe2fb973dc",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please expand the comment by pointing out that:\r\n\r\n\"We skip the node property comparison when there is no unschedulable pods in the queue to save processing cycles. We still trigger a move to active queue to cover the case that a pod being processed by the scheduler is determined unschedulable. We want this pod to be reevaluated when a change in the cluster happens.\"",
        "createdAt" : "2018-12-05T19:04:46Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "adc98ad4-9e19-43d2-9459-61875a7824c3",
        "parentId" : "637b6955-7d24-45da-9df9-26fe2fb973dc",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "Added",
        "createdAt" : "2018-12-06T02:59:45Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe9b1438c10206247b841b14215287c9a10ce7b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +999,1003 @@\n\tc.invalidateCachedPredicatesOnNodeUpdate(newNode, oldNode)\n\t// Only activate unschedulable pods if the node became more schedulable.\n\t// We skip the node property comparison when there is no unschedulable pods in the queue\n\t// to save processing cycles. We still trigger a move to active queue to cover the case"
  },
  {
    "id" : "51627310-0713-4725-80e0-4f3d8a162d68",
    "prId" : 71551,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71551#pullrequestreview-195700958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "977a3961-9e16-4be1-8d49-8c864e6bc537",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "We should order these so that the cheaper functions runs before the more expensive ones.",
        "createdAt" : "2018-12-05T19:07:16Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "717dbf11-0c29-400b-9ada-5a56e19b50a0",
        "parentId" : "977a3961-9e16-4be1-8d49-8c864e6bc537",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "Updated the order to: `Spec.Unschedulable` -> `Status.Allocatable` -> `Labels` -> `Taints` -> `Conditions`. In general, `Status.Allocatable` is changed more frequent than `Labels` and `Taints`, so I make it as the second. `Conditions` is put at the end as it performs more operations to strip each conditions.",
        "createdAt" : "2018-12-06T03:00:26Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      },
      {
        "id" : "6d5510fb-a8d3-4950-afa4-eef050ca6b77",
        "parentId" : "977a3961-9e16-4be1-8d49-8c864e6bc537",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "The order sounds good. Condition changes are somewhat frequent though as kubelet updates last transition time of a condition somewhat frequently. So, it might be better to check that before some other ones, but without actual data it is hard to find the right order. We can go with the current order and study the impact of change of ordering later.",
        "createdAt" : "2018-12-06T19:04:25Z",
        "updatedAt" : "2018-12-10T02:01:58Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "c28aed47-6dfe-406b-8935-adadb1bfed26",
        "parentId" : "977a3961-9e16-4be1-8d49-8c864e6bc537",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Can we use map of func to the total time each func has spent ?\r\nThat way, we can dynamically pick the cheap func first at runtime.",
        "createdAt" : "2019-01-23T19:24:08Z",
        "updatedAt" : "2019-01-23T19:24:08Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fe9b1438c10206247b841b14215287c9a10ce7b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1082,1086 @@\t\treturn true\n\t}\n\tif nodeAllocatableChanged(newNode, oldNode) {\n\t\treturn true\n\t}"
  },
  {
    "id" : "958f75f9-e091-4378-a948-1086382223ac",
    "prId" : 68875,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68875#pullrequestreview-157136115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af27c0f-fcb4-44ef-8c1d-04bece4bf710",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "this is not that necessary, but just to keep the same pattern - init all listers in &configFactory{}, then add watch functions afterwards.",
        "createdAt" : "2018-09-20T07:19:48Z",
        "updatedAt" : "2018-09-27T18:38:17Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "56fcfc5feeac7e02912c2bcdac2b67c71b79e3c9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +177,181 @@\t\tpodLister:                      schedulerCache,\n\t\tpodQueue:                       core.NewSchedulingQueue(),\n\t\tnodeLister:                     args.NodeInformer.Lister(),\n\t\tpVLister:                       args.PvInformer.Lister(),\n\t\tpVCLister:                      args.PvcInformer.Lister(),"
  },
  {
    "id" : "43ce1ff0-42de-4900-85a6-6e77ffe3b638",
    "prId" : 67731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67731#pullrequestreview-152582541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35bb30dc-d2b9-4fc6-8f24-602cb56755fb",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I don't want to hold this PR, but please send a follow-up PR to add tests for these invalidation cases.",
        "createdAt" : "2018-09-05T05:46:18Z",
        "updatedAt" : "2018-09-05T16:29:41Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "b9abae02-5312-49a9-b422-a0d2e1d4f180",
        "parentId" : "35bb30dc-d2b9-4fc6-8f24-602cb56755fb",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "okay sure.",
        "createdAt" : "2018-09-05T16:28:34Z",
        "updatedAt" : "2018-09-05T16:29:41Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc61620db53a9a2ac91de032ea935f8392f64268",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +489,493 @@\t}\n\n\tif pv.Spec.CSI != nil && utilfeature.DefaultFeatureGate.Enabled(features.AttachVolumeLimit) {\n\t\tinvalidPredicates.Insert(predicates.MaxCSIVolumeCountPred)\n\t}"
  },
  {
    "id" : "7fd7324a-6f90-470b-ade4-63ecd062c2b8",
    "prId" : 67308,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67308#pullrequestreview-155878295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df34f032-52df-4edf-866b-ef7429a6ffcd",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Since we will init NodeCache here, it seems we don't need to call `g.equivalenceCache.GetNodeCache(nodeName)` in generic_scheduler?\r\n\r\nInstead, we can only call sth like `g.equivalenceCache.LoadNodeCache()` there, only read operation. WDYT?",
        "createdAt" : "2018-09-17T07:05:05Z",
        "updatedAt" : "2018-09-22T04:10:05Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "28c64e92-eaa1-414b-bbd7-f0238ddc4a15",
        "parentId" : "df34f032-52df-4edf-866b-ef7429a6ffcd",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "I think it's a good idea! Please check https://github.com/kubernetes/kubernetes/pull/67308/commits/8ece5d624ded4815655104d8a12712cfe6d8743e.",
        "createdAt" : "2018-09-17T11:23:27Z",
        "updatedAt" : "2018-09-22T04:10:05Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f1e1200b47b1404f64a0743ece9e1a505677d9",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +858,862 @@\tif c.enableEquivalenceClassCache {\n\t\t// GetNodeCache() will lazily create NodeCache for given node if it does not exist.\n\t\tc.equivalencePodCache.GetNodeCache(node.GetName())\n\t}\n"
  },
  {
    "id" : "95097953-9bcc-44a8-ac76-de69a0411ac5",
    "prId" : 65616,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65616#pullrequestreview-138085413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76487259-296c-42a7-ab75-94cc46fcbf7d",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Please add this scenario to the list of test cases we need to add for predicate invalidation",
        "createdAt" : "2018-07-17T17:55:12Z",
        "updatedAt" : "2018-07-20T01:57:36Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "b7ceb71d-2c7b-4e25-bd84-c1fb4a9a25d8",
        "parentId" : "76487259-296c-42a7-ab75-94cc46fcbf7d",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Added in https://github.com/kubernetes/kubernetes/issues/66148.",
        "createdAt" : "2018-07-18T02:34:05Z",
        "updatedAt" : "2018-07-20T01:57:36Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "c868b5bc881ed2fbb453abf817ec709f57aba33c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +622,626 @@}\n\nfunc (c *configFactory) invalidatePredicatesForStorageClass(sc *storagev1.StorageClass) {\n\tinvalidPredicates := sets.NewString()\n"
  },
  {
    "id" : "ccdaa15c-7f46-4a21-b8e8-8667ee418642",
    "prId" : 63003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63003#pullrequestreview-114623966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10fbec36-2ef3-4a8b-8c9a-17777d5488e5",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "nit: we don-t need to check pod's phase again in `unassignedNonTerminatedPod` :)",
        "createdAt" : "2018-04-24T01:11:30Z",
        "updatedAt" : "2018-04-24T01:11:30Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "54e09c0b-0eeb-44eb-9356-04a74473edfc",
        "parentId" : "10fbec36-2ef3-4a8b-8c9a-17777d5488e5",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Yes, I thought about that too, but I decided not to change that part of the logic in this PR.",
        "createdAt" : "2018-04-24T03:42:10Z",
        "updatedAt" : "2018-04-24T03:42:14Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "a073dfdbd9220168a14670d0b86bc81a67a2335b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1278,1282 @@func NewPodInformer(client clientset.Interface, resyncPeriod time.Duration) coreinformers.PodInformer {\n\tselector := fields.ParseSelectorOrDie(\n\t\t\"status.phase!=\" + string(v1.PodSucceeded) +\n\t\t\t\",status.phase!=\" + string(v1.PodFailed))\n\tlw := cache.NewListWatchFromClient(client.CoreV1().RESTClient(), string(v1.ResourcePods), metav1.NamespaceAll, selector)"
  },
  {
    "id" : "86b08361-58ed-462d-aba5-e1867ac6fe63",
    "prId" : 61816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61816#pullrequestreview-108246705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3207bf61-7931-4016-b384-656fcbffdf8f",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Technically this isn't needed because the beta NodeAffinity is immutable.  But if we decide in the future to make it mutable, then we won't forget to update this.",
        "createdAt" : "2018-03-30T00:24:24Z",
        "updatedAt" : "2018-03-30T00:26:12Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "1b05de37-0419-4519-8cbf-e85ecb9de3a3",
        "parentId" : "3207bf61-7931-4016-b384-656fcbffdf8f",
        "authorId" : "f71497cc-dd85-47eb-bbed-996bde0d13a4",
        "body" : "Got it, I think I can remove this next pr.",
        "createdAt" : "2018-03-30T01:26:15Z",
        "updatedAt" : "2018-03-30T01:26:15Z",
        "lastEditedBy" : "f71497cc-dd85-47eb-bbed-996bde0d13a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "11594333d21180f98c786642bb58acc7fa9ce189",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +407,411 @@\t}\n\tif utilfeature.DefaultFeatureGate.Enabled(features.VolumeScheduling) {\n\t\toldAffinity := oldPV.Spec.NodeAffinity\n\t\tnewAffinity := newPV.Spec.NodeAffinity\n\t\t// If node affinity of PV is changed."
  },
  {
    "id" : "2401bfd8-55e8-48da-a291-72681c1af5f0",
    "prId" : 59335,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59335#pullrequestreview-96704205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aed96b9-ee28-495c-aa2d-3a88b4e49232",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please use `predicates.NoVolumeZoneConflictPred` instead of the string literal.",
        "createdAt" : "2018-02-14T19:17:00Z",
        "updatedAt" : "2018-02-14T19:32:33Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "aaa6ec18-8d88-4b90-a3aa-6db96bbc21bd",
        "parentId" : "5aed96b9-ee28-495c-aa2d-3a88b4e49232",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Yep, and I will also replace all predicate key names to const in this file.",
        "createdAt" : "2018-02-14T23:34:03Z",
        "updatedAt" : "2018-02-14T23:34:03Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "13506686-9f18-4504-87ad-e465b720e079",
        "parentId" : "5aed96b9-ee28-495c-aa2d-3a88b4e49232",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Ok, I lgtm this one and wait for your next PR to replace these literals with the const.",
        "createdAt" : "2018-02-15T00:13:14Z",
        "updatedAt" : "2018-02-15T00:13:14Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "bff62d2c86133db2ede717dda0ffb1ceb012b12e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +382,386 @@\t\t// If PV update modifies the zone/region labels.\n\t\tif isZoneRegionLabel(k) && !reflect.DeepEqual(v, oldPV.Labels[k]) {\n\t\t\tinvalidPredicates.Insert(\"NoVolumeZoneConflict\")\n\t\t\tbreak\n\t\t}"
  }
]