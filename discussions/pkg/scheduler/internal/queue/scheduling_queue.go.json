[
  {
    "id" : "62572aaa-2391-4c6c-b22d-7db7dba5dda3",
    "prId" : 103383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103383#pullrequestreview-700494849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b2a9299-9a4f-4437-945b-72a048dd8cc2",
        "parentId" : null,
        "authorId" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "body" : "We should `break` here?\r\n\r\nOr all/one of pods activate, we call `p.cond.Broadcast()`?",
        "createdAt" : "2021-07-04T05:02:32Z",
        "updatedAt" : "2021-07-04T05:02:33Z",
        "lastEditedBy" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "tags" : [
        ]
      },
      {
        "id" : "2334168b-f634-4ef5-8bcf-050b1561c676",
        "parentId" : "3b2a9299-9a4f-4437-945b-72a048dd8cc2",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> We should `break` here?\r\n\r\nNope, we should activate every pod, and call `p.cond.Broadcast()` once at least one pod gets activated successfully.",
        "createdAt" : "2021-07-07T01:17:50Z",
        "updatedAt" : "2021-07-07T01:17:50Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9cafc99be94a73d9b92545164dbf336bbd230a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +314,318 @@\tfor _, pod := range pods {\n\t\tif p.activate(pod) {\n\t\t\tactivated = true\n\t\t}\n\t}"
  },
  {
    "id" : "9352b060-c807-448c-be81-9b2ad9729f60",
    "prId" : 102498,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102498#pullrequestreview-675630496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bfc8d19-41df-4a70-8885-07461d810278",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "TODO: will rename it to nominator once we agree on the solution.",
        "createdAt" : "2021-06-03T18:59:37Z",
        "updatedAt" : "2021-06-03T18:59:37Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e85a2b0c23a44d67a17d7782784215de9b6a64d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +767,771 @@// may be different than what scheduler has here. We should be able to find pods\n// by their UID and update/delete them.\ntype nominatedPodMap struct {\n\t// podLister is used to verify if the given pod is alive.\n\tpodLister listersv1.PodLister"
  },
  {
    "id" : "2fdb21f1-8fec-4505-86e1-74a8696ac4f5",
    "prId" : 102498,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102498#pullrequestreview-676285529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "555007c4-943a-4090-95e6-ea670fe6fd98",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "We should mark this as deprecated, and eventually make all test use the real nominator.\r\n\r\nAfter this change, which kind of tests still use this?",
        "createdAt" : "2021-06-03T21:10:59Z",
        "updatedAt" : "2021-06-03T21:17:08Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "383cb8aa-5e3e-4207-90b8-ebd98c6978c6",
        "parentId" : "555007c4-943a-4090-95e6-ea670fe6fd98",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Making this as deprecated sounds good.\r\n\r\nHere are the tests using it:\r\n\r\n```\r\npkg/scheduler/scheduler_test.go\r\n834:\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n\r\npkg/scheduler/core/extender_test.go\r\n274:\t\t\t\truntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n\r\npkg/scheduler/core/generic_scheduler_test.go\r\n1000:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1063:\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1096:\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1170:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1332:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1435:\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1521:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n\r\npkg/scheduler/framework/plugins/defaultpreemption/default_preemption_test.go\r\n289:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1006:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1233:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n1638:\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\r\n\r\npkg/scheduler/framework/runtime/framework_test.go\r\n1482:\t\t\tpodNominator := internalqueue.NewPodNominator()\r\n```",
        "createdAt" : "2021-06-03T23:24:23Z",
        "updatedAt" : "2021-06-03T23:24:23Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "2f2aa5fd-fc0a-4ce2-ab00-9f6f76a6a3b4",
        "parentId" : "555007c4-943a-4090-95e6-ea670fe6fd98",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why not just remove it in this PR?",
        "createdAt" : "2021-06-04T13:16:08Z",
        "updatedAt" : "2021-06-04T13:16:09Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "13c453dd-1281-4094-a602-ff3579fc5fa1",
        "parentId" : "555007c4-943a-4090-95e6-ea670fe6fd98",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I'd leave it for a 2nd PR just so that this PR is easier to port",
        "createdAt" : "2021-06-04T13:23:56Z",
        "updatedAt" : "2021-06-04T13:23:56Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "3c58a499-80f7-4ace-aadb-fd20ff201d34",
        "parentId" : "555007c4-943a-4090-95e6-ea670fe6fd98",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg if we are planning to cherrypick.",
        "createdAt" : "2021-06-04T13:28:15Z",
        "updatedAt" : "2021-06-04T13:28:16Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e85a2b0c23a44d67a17d7782784215de9b6a64d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +853,857 @@}\n\n// NewPodNominator creates a nominatedPodMap as a backing of framework.PodNominator.\n// DEPRECATED: use NewSafePodNominator() instead.\nfunc NewPodNominator() framework.PodNominator {"
  },
  {
    "id" : "498b760a-01e5-4b34-8762-abf6358ad63b",
    "prId" : 98446,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98446#pullrequestreview-584706107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a12aea71-eb7f-4ac6-9679-e3396daeacb6",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "what about just accepting the namespaces lister?",
        "createdAt" : "2021-02-05T18:20:35Z",
        "updatedAt" : "2021-03-04T12:30:39Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "8efa1e74-0dc2-4fe7-9329-1ec9ff82f493",
        "parentId" : "a12aea71-eb7f-4ac6-9679-e3396daeacb6",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "not sure it matters much... may be we will need another lister in the future..",
        "createdAt" : "2021-02-05T22:05:08Z",
        "updatedAt" : "2021-03-04T12:30:39Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7fef196b60856420ce3f0470acd1093ab1d9b5f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +228,232 @@func NewPriorityQueue(\n\tlessFn framework.LessFunc,\n\tinformerFactory informers.SharedInformerFactory,\n\topts ...Option,\n) *PriorityQueue {"
  },
  {
    "id" : "06058395-1f10-4b60-a5da-e08e042bb879",
    "prId" : 98358,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98358#pullrequestreview-576958728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07c3a543-bf34-4cc6-9ea9-582dc733a04e",
        "parentId" : null,
        "authorId" : "628143cf-73c8-4c51-bd38-d4079089c756",
        "body" : "I think we'd better add pod key/value in the error logs as well.",
        "createdAt" : "2021-01-25T14:49:08Z",
        "updatedAt" : "2021-02-18T01:57:40Z",
        "lastEditedBy" : "628143cf-73c8-4c51-bd38-d4079089c756",
        "tags" : [
        ]
      },
      {
        "id" : "ae0e1d15-d485-430f-9429-b6b29ff948ca",
        "parentId" : "07c3a543-bf34-4cc6-9ea9-582dc733a04e",
        "authorId" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "body" : "We can't get the pod information because podInfo is nil when something goes wrong.",
        "createdAt" : "2021-01-27T03:44:44Z",
        "updatedAt" : "2021-02-18T01:57:40Z",
        "lastEditedBy" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0eecbd0a9d815ab018529f335f0d6d036404edf",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +806,810 @@\t\t\treturn podInfo\n\t\t}\n\t\tklog.ErrorS(err, \"Error while retrieving next pod from scheduling queue\")\n\t\treturn nil\n\t}"
  },
  {
    "id" : "86bf212b-ee32-4243-b2ca-bc0118e4a3dc",
    "prId" : 97302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97302#pullrequestreview-552351605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "275c5072-cc48-4699-b758-ef7818aec4be",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "lgtm, but I cannot see what's the real impact, the pods in the activeQ will still be popped up with the original order.",
        "createdAt" : "2020-12-15T10:17:14Z",
        "updatedAt" : "2020-12-15T12:07:49Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "ccec79d9-27e5-4c3d-b9ab-06452b2ffac3",
        "parentId" : "275c5072-cc48-4699-b758-ef7818aec4be",
        "authorId" : "693c9ad5-5ad5-4520-9cc6-7dadb56d7448",
        "body" : "If the Pod in activeQ have the same priority, they will be FIFO according to the enqueue time.\r\nIf the enqueue time is refreshed, the order in the activeQ should be updated. \r\nSo I don’t think should refresh the enqueue time\r\n",
        "createdAt" : "2020-12-15T11:22:32Z",
        "updatedAt" : "2020-12-15T12:07:49Z",
        "lastEditedBy" : "693c9ad5-5ad5-4520-9cc6-7dadb56d7448",
        "tags" : [
        ]
      }
    ],
    "commit" : "17b084938aaf7fe3d0e0b7b8c07242976474218f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +312,316 @@\t// Refresh the timestamp since the pod is re-added.\n\tpInfo.Timestamp = p.clock.Now()\n\n\t// If a move request has been received, move it to the BackoffQ, otherwise move\n\t// it to unschedulableQ."
  },
  {
    "id" : "de4de285-7567-4610-8bdb-2a5dfacd2d3e",
    "prId" : 91062,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91062#pullrequestreview-411248097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4dd8f53-c78c-4ca9-998d-2c95b93ba6e7",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Another justification to also have the processed information in the queues.",
        "createdAt" : "2020-05-13T19:32:35Z",
        "updatedAt" : "2020-05-14T14:31:05Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c09927d0-572a-46c4-b531-df3987dce3e2",
        "parentId" : "b4dd8f53-c78c-4ca9-998d-2c95b93ba6e7",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "yeah, the initial thought was to have a single PodInfo type, I think we can get that benefit back by embedding PodInfo in QueuedPodInfo.",
        "createdAt" : "2020-05-13T19:58:54Z",
        "updatedAt" : "2020-05-14T14:31:05Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0211c72de097b931296f5a08c6a94945548312",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +533,537 @@\tfor _, pInfo := range p.unschedulableQ.podInfoMap {\n\t\tup := pInfo.Pod\n\t\tterms := util.GetPodAffinityTerms(up.Spec.Affinity)\n\t\tfor _, term := range terms {\n\t\t\tnamespaces := util.GetNamespacesFromPodAffinityTerm(up, &term)"
  },
  {
    "id" : "6365b68f-2770-46d9-a607-796d16bae31d",
    "prId" : 91062,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91062#pullrequestreview-411897467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7253824-07f3-46c3-82d1-244d6d8f8e29",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "This logic looks strange - for PodAffinity, isn't it needed to match ALL terms? Why it adds the pod upon first match?",
        "createdAt" : "2020-05-14T06:42:36Z",
        "updatedAt" : "2020-05-14T14:31:05Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "8e162b16-ce17-4487-824a-0bca9f5e2c95",
        "parentId" : "c7253824-07f3-46c3-82d1-244d6d8f8e29",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Not really. The other affinity terms might be satisfied by other pods. But ultimately, this is just a heuristic.",
        "createdAt" : "2020-05-14T13:50:29Z",
        "updatedAt" : "2020-05-14T14:31:05Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "26985c5f-e808-4ab5-b1b9-c8fd0fd51b88",
        "parentId" : "c7253824-07f3-46c3-82d1-244d6d8f8e29",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> The other affinity terms might be satisfied by other pods.\r\n\r\nGood point, however it's not the current semantics yet. See the history discussion #68701. And it reminds me of a closed implementation (#68725) I tried - I gave up due to non-trivial code changes by that time. Maybe now it's a good time to re-consider \"Support inter-Pod affinity to multiple Pods\" as codebase is a lot neater :)",
        "createdAt" : "2020-05-14T15:03:13Z",
        "updatedAt" : "2020-05-14T15:03:14Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0211c72de097b931296f5a08c6a94945548312",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +544,548 @@\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t}"
  },
  {
    "id" : "40ef00c8-9c04-4220-becb-7eea08397fb5",
    "prId" : 90415,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90415#pullrequestreview-414055331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787b4e2e-3fd1-43c8-996e-1ee281a12ef2",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "shouldn't the other two functions be removed now? ```PriorityQueue.NominatedPodsForNode``` and ```nominatedPodMap.podsForNode```",
        "createdAt" : "2020-05-19T01:35:32Z",
        "updatedAt" : "2020-05-20T21:05:28Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "f59f82f4-6d3e-40ee-806d-27326d7efbd2",
        "parentId" : "787b4e2e-3fd1-43c8-996e-1ee281a12ef2",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Done.",
        "createdAt" : "2020-05-19T02:17:46Z",
        "updatedAt" : "2020-05-20T21:05:28Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4b726237acd74cb45d0c2d79e03b9a7d36082dc",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +600,604 @@}\n\n// NominatedPodsForNode returns pods that are nominated to run on the given node,\n// but they are waiting for other pods to be removed from the node.\nfunc (npm *nominatedPodMap) NominatedPodsForNode(nodeName string) []*v1.Pod {"
  },
  {
    "id" : "878ad8d5-2776-4336-8a3f-91b85094fc3d",
    "prId" : 90415,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90415#pullrequestreview-415711957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b71e174d-2dd4-499d-8a82-d389086d9a9e",
        "parentId" : null,
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "when do we determine if the TODO is true or not? Seems like we'll probably never return if it doesn't cause a bug. Is there a way to add a unit test?",
        "createdAt" : "2020-05-20T20:17:02Z",
        "updatedAt" : "2020-05-20T21:05:28Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "166f5eb8-b373-4579-9788-afb88ca37abb",
        "parentId" : "b71e174d-2dd4-499d-8a82-d389086d9a9e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Basically it's impossible to use UT to cover potential error is user side, esp. some users are out of k/k.\r\n\r\nStill it's quite related with how caller use it - append pod to the slice is ok, but good with modifying the element using `slice[i]=newPod`.",
        "createdAt" : "2020-05-20T21:03:01Z",
        "updatedAt" : "2020-05-20T21:05:28Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4b726237acd74cb45d0c2d79e03b9a7d36082dc",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +606,610 @@\tdefer npm.RUnlock()\n\t// TODO: we may need to return a copy of []*Pods to avoid modification\n\t// on the caller side.\n\treturn npm.nominatedPods[nodeName]\n}"
  },
  {
    "id" : "2e6c5f3e-c3e2-452b-b557-a623974ebcb2",
    "prId" : 90356,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90356#pullrequestreview-411255796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72362e39-985e-4782-9d99-efbd1ee9fdab",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "ignore this TODO when reviewing - it's covered in the next PR.",
        "createdAt" : "2020-05-13T20:00:34Z",
        "updatedAt" : "2020-05-18T17:29:27Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd184035c4dc150c3e01c894dee04071fabd1e77",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +561,565 @@// can be actually scheduled.\nfunc (p *PriorityQueue) NominatedPodsForNode(nodeName string) []*v1.Pod {\n\t// TODO: make podsForNode() public?\n\treturn p.PodNominator.(*nominatedPodMap).podsForNode(nodeName)\n}"
  },
  {
    "id" : "25038f43-c582-4e06-86c5-0014ae147887",
    "prId" : 87948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87948#pullrequestreview-357637156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43aa665b-5a27-472c-839a-b4dccc5b3bf0",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Add unit test for `Update` that exercises what we discussed.",
        "createdAt" : "2020-02-12T17:16:23Z",
        "updatedAt" : "2020-02-14T00:31:29Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4e4a9943525de2f52fb274e7c6fd442515885d5",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +437,441 @@\tif usPodInfo := p.unschedulableQ.get(newPod); usPodInfo != nil {\n\t\tp.nominatedPods.update(oldPod, newPod)\n\t\tif isPodUpdated(oldPod, newPod) {\n\t\t\tp.unschedulableQ.delete(usPodInfo.Pod)\n\t\t\terr := p.activeQ.Add(updatePod(usPodInfo, newPod))"
  },
  {
    "id" : "a8d408e2-639d-4b3a-a0e3-db90eb18c54a",
    "prId" : 83577,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83577#pullrequestreview-300765408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "958fb301-c923-4b82-8e40-9077a4042f40",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Please pay attention to this change. I think the logic was duplicated therefore I refactored the interface method to call the helper method `movePodsToActiveOrBackoffQueue` directly. ",
        "createdAt" : "2019-10-08T15:43:42Z",
        "updatedAt" : "2019-10-16T18:26:27Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "891e01ab-7d5b-42df-a79e-d3e1cb55f3fd",
        "parentId" : "958fb301-c923-4b82-8e40-9077a4042f40",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "it is different, in this implementation you are not adding back to the unschedulableQ the pods that we failed to move.\r\n\r\nperhaps modify movePodsToActiveOrBackoffQueue to return addErrorPods so that MoveAllToActiveOrBackoffQueue can add them back to the unschedulable queue",
        "createdAt" : "2019-10-11T15:16:13Z",
        "updatedAt" : "2019-10-16T18:26:27Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "471cefa4-3cc5-4caf-8f72-fced7d7094dd",
        "parentId" : "958fb301-c923-4b82-8e40-9077a4042f40",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "In `movePodsToActiveOrBackoffQueue`, the pods that fail to be moved are not deleted from `UnschedulableQ` at the first place - `unschedulableQ.delete(pod)` is only called in the `else` branch where the move is complete.",
        "createdAt" : "2019-10-12T02:41:46Z",
        "updatedAt" : "2019-10-16T18:26:27Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc226e0670cb0b4b582e9527191fb9429efd737f",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +551,555 @@\t\tunschedulablePods = append(unschedulablePods, pInfo)\n\t}\n\tp.movePodsToActiveOrBackoffQueue(unschedulablePods, event)\n\tp.moveRequestCycle = p.schedulingCycle\n\tp.cond.Broadcast()"
  },
  {
    "id" : "36dc7cac-6e64-41cd-a165-05729876d59a",
    "prId" : 81263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81263#pullrequestreview-274096141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56abffc5-8b5e-4926-afa5-ccdc8eb1293f",
        "parentId" : null,
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "how can i configure the max duration if i do not want to default it ?\r\n",
        "createdAt" : "2019-08-13T06:57:04Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      },
      {
        "id" : "2de0b4e3-2473-4db2-b10b-9012e63c44e7",
        "parentId" : "56abffc5-8b5e-4926-afa5-ccdc8eb1293f",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "This is a pattern which used widely in the kubernetes codebase.\r\n\r\n```go\r\nNewPrioirtyQueue(\r\n  stopCh,\r\n  fwk.\r\n  internalqueue.WithPodMaxBackoffDuration(500*time.Second),\r\n  internalqueue.WithClock(xx),\r\n)\r\n```",
        "createdAt" : "2019-08-13T07:04:17Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "f06b5765-d03e-4be9-8bc4-5207b89c751c",
        "parentId" : "56abffc5-8b5e-4926-afa5-ccdc8eb1293f",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "I mean how can i  set the max duration value, any flag for that ? or add it somewhere ?\r\n",
        "createdAt" : "2019-08-13T07:07:37Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      },
      {
        "id" : "5c3297bf-a803-4d70-9085-2352dafe8aeb",
        "parentId" : "56abffc5-8b5e-4926-afa5-ccdc8eb1293f",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "Every time i want to change the value, i need to modify the code ?",
        "createdAt" : "2019-08-13T07:11:59Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      }
    ],
    "commit" : "9646afb1f592a1594c2be987d6c953a13619133c",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +210,214 @@\n// NewPriorityQueue creates a PriorityQueue object.\nfunc NewPriorityQueue(\n\tstop <-chan struct{},\n\tfwk framework.Framework,"
  },
  {
    "id" : "c39100e2-00f0-49d6-8a02-e854332e957d",
    "prId" : 81263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81263#pullrequestreview-290914428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ok, it turns out that we can define constants in kubernetes/pkg/scheduler/apis/config/types.go, and as long as we don't add those constants to staging/src/k8s.io/kube-scheduler/config/v1alpha1/types.go, then they are not part of the API. What do you think about doing that?",
        "createdAt" : "2019-09-11T02:48:33Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "78a79f1e-3a13-4458-934a-268c273307ee",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "> ok, it turns out that we can define constants in kubernetes/pkg/scheduler/apis/config/types.go, and as long as we don't add those constants to staging/src/k8s.io/kube-scheduler/config/v1alpha1/types.go, then they are not part of the API. What do you think about doing that?\r\n\r\nDo we have precedence on such a thing? I'm ok with it if there was one.",
        "createdAt" : "2019-09-11T08:58:11Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "a54f46cf-575c-48ce-90f6-f1c7e83555dd",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "It is up to us, no precedence is required here. k8s don't guarantee any level of compatibility with any source we produce that is not published for consumption as a go library (we only guarantee that for things we publish under the ```staging``` directory), we have strong guarantees only for REST APIs, config file yaml/json and binary flags. That being said, I will leave it up to you to decide.",
        "createdAt" : "2019-09-11T12:59:58Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "4361bcde-dd37-4728-90da-7cddb8adbb3e",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "After some digging, I prefer to keep it **as it is**. Even if we define the constants in `pkg/scheduler/apis/config/types.go`, we still need to use hard code value here https://github.com/kubernetes/kubernetes/pull/81263/files#diff-9d72b6493a5482d8a2829af1390c5733R106-R115 since the package shouldn't depend on other k8s.io/kubernetes code.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/1e761470ad8fa06b50bce99e483f556023b99524/pkg/scheduler/apis/config/v1alpha1/defaults.go#L23-L31",
        "createdAt" : "2019-09-18T07:37:48Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "713c4540-3c74-417b-bafe-e08d02a50c82",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg, please squash.",
        "createdAt" : "2019-09-19T01:33:05Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "051b7f34-eb5e-4f57-a593-6191450efd07",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "> sg, please squash.\r\n\r\ndone, please take a look",
        "createdAt" : "2019-09-19T02:17:14Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "06811d75-80b9-4d8c-8cf4-da95212e2cf0",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "@draveness Regrading  https://github.com/kubernetes/kubernetes/pull/81263/files#r325523994. Are you saying `pkg/scheduler/apis/config/v1alpha1` should not import `pkg/scheduler/apis/config`?",
        "createdAt" : "2019-09-19T17:43:10Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "058b19bc-01d4-47f3-bfa1-a02cdcde5e79",
        "parentId" : "426b880e-76a6-4a1b-9056-1641aa4e1fb3",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "> @draveness Regrading https://github.com/kubernetes/kubernetes/pull/81263/files#r325523994. Are you saying `pkg/scheduler/apis/config/v1alpha1` should not import `pkg/scheduler/apis/config`?\r\n\r\nYes, it documents in the `pkg/scheduler/apis/config/v1alpha1/defaults.go` where I listed above",
        "createdAt" : "2019-09-20T01:13:27Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9646afb1f592a1594c2be987d6c953a13619133c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// for unschedulable pods. To change the default podMaxBackoffDurationSeconds used by the\n\t// scheduler, update the ComponentConfig value in defaults.go\n\tDefaultPodMaxBackoffDuration time.Duration = 10 * time.Second\n)\n"
  },
  {
    "id" : "125fa583-5968-403b-be46-200093430c04",
    "prId" : 77990,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77990#pullrequestreview-239133660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94dc3819-bc7a-4b3b-a406-6c7b2a47271a",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "A neat way is `nodeName = npm.nominatedPodToNode[oldPod.UID]`. If oldPod.UID doesn't exist, a nil string is returned.",
        "createdAt" : "2019-05-17T16:02:33Z",
        "updatedAt" : "2019-05-17T16:02:34Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "04e48926-4e1a-4a72-9563-f473c594ad19",
        "parentId" : "94dc3819-bc7a-4b3b-a406-6c7b2a47271a",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "This change makes the logic more robust, but `nodeName` should not be initialized with empty string. It should be initialized by `NominatedNodeName(newPod)`. Otherwise, all usual updates that do not come inside this `if` statement, would remove nominated pods.",
        "createdAt" : "2019-05-17T19:14:24Z",
        "updatedAt" : "2019-05-17T19:15:02Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "0d0a2043-36f2-44bf-990b-b39aa1c1ef66",
        "parentId" : "94dc3819-bc7a-4b3b-a406-6c7b2a47271a",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Initilizing `nodeName` as empty string should be good b/c in nominatedPodMap.add(), it checks if incoming nodeName is empty; if it is, it calls NominatedNodeName(p):\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/314264aeafb94d4948a3f117bcc4382eba10dede/pkg/scheduler/internal/queue/scheduling_queue.go#L735-L746",
        "createdAt" : "2019-05-17T19:49:28Z",
        "updatedAt" : "2019-05-17T19:49:29Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "aa3b915f-ad56-4ec0-a74c-8f18fea4dbf3",
        "parentId" : "94dc3819-bc7a-4b3b-a406-6c7b2a47271a",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "You are right.",
        "createdAt" : "2019-05-17T21:01:18Z",
        "updatedAt" : "2019-05-17T21:02:59Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "29195faa691d907f4b4d4c700326986133cb7cb4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +782,786 @@\t// (3) NominatedNode info is removed\n\tif NominatedNodeName(oldPod) == \"\" && NominatedNodeName(newPod) == \"\" {\n\t\tif nnn, ok := npm.nominatedPodToNode[oldPod.UID]; ok {\n\t\t\t// This is the only case we should continue reserving the NominatedNode\n\t\t\tnodeName = nnn"
  },
  {
    "id" : "aea8dd41-8826-4ec8-bc32-25c384362b8b",
    "prId" : 77478,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77478#pullrequestreview-234077072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911325ca-b451-4218-87b2-207829b592dc",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "A nit: as you wrap the detailed msg here as an `err`, and re-wrap the err msg in caller side, I suppose we'll get a sort of duplicate err msg? Like:\r\n\r\n```\r\nError add unschedulable pod <pod> to queue: error adding pod <pod> to the backoff queue: <err>.\r\n```\r\n\r\nMaybe it's better wrapping the detailed msg only in one side - (1) either wrap here and in caller side simply log `klog.Errorf(err)`, or (2) simply return err here and in caller side log `klog.Errorf(\"Error add unschedulable pod %v to queue: %v\", pod, err)`.\r\n\r\n(1) is more preferable IMO.",
        "createdAt" : "2019-05-06T16:28:08Z",
        "updatedAt" : "2019-05-06T16:40:35Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "e2c1edb7-7a93-4009-9ae5-4413778308e3",
        "parentId" : "911325ca-b451-4218-87b2-207829b592dc",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Yeah, that's a good one. Updated the code in caller site with `klog.Errorf(err)`. Please take a look at the latest commit.",
        "createdAt" : "2019-05-06T16:38:22Z",
        "updatedAt" : "2019-05-06T16:40:35Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "63825952219335250b168626a856f6fb3b15675c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +314,318 @@\tif p.moveRequestCycle >= podSchedulingCycle {\n\t\tif err := p.podBackoffQ.Add(pInfo); err != nil {\n\t\t\treturn fmt.Errorf(\"error adding pod %v to the backoff queue: %v\", pod.Name, err)\n\t\t}\n\t} else {"
  },
  {
    "id" : "3373360b-48f9-4667-8d1e-923bf597ee6b",
    "prId" : 75497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75497#pullrequestreview-218653245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8825441-8c48-4f71-9fae-3584d2fcc58e",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "As you already have `NewPodBackoffMapWithDefaultTime()`, suggest to use that directly.",
        "createdAt" : "2019-03-23T00:08:27Z",
        "updatedAt" : "2019-04-05T16:15:23Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "81a563f4-9a86-417c-b71d-fd7d57342d72",
        "parentId" : "b8825441-8c48-4f71-9fae-3584d2fcc58e",
        "authorId" : "740aa7e1-09de-43aa-afe4-e89f80f4efe2",
        "body" : "`NewPodBackoffMapWithDefaultTime()` is used in factory.go with `1*time.Second` and `60*time.Second` and here in scheduling_queue we have `1*time.Second` and `10*time.Second`. Shall we keep the original time duration or change to 1 and 10 secs in both place?",
        "createdAt" : "2019-03-23T14:07:08Z",
        "updatedAt" : "2019-04-05T16:15:23Z",
        "lastEditedBy" : "740aa7e1-09de-43aa-afe4-e89f80f4efe2",
        "tags" : [
        ]
      },
      {
        "id" : "69ecfb83-ad38-44c4-a223-04764a73d320",
        "parentId" : "b8825441-8c48-4f71-9fae-3584d2fcc58e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Oh, I misread.. I thought all default backoff threshold is 10 seconds. Then don't bother. Keep them as is.",
        "createdAt" : "2019-03-26T01:04:40Z",
        "updatedAt" : "2019-04-05T16:15:23Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "151649df4ce2b63108a7f021d8e200b1c9dd299d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +296,300 @@\t\tclock:            clock,\n\t\tstop:             stop,\n\t\tpodBackoff:       NewPodBackoffMap(1*time.Second, 10*time.Second),\n\t\tactiveQ:          util.NewHeap(podInfoKeyFunc, activeQComp),\n\t\tunschedulableQ:   newUnschedulablePodsMap(),"
  },
  {
    "id" : "5431b3aa-a48e-478b-8139-8bf02d10c68f",
    "prId" : 73700,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73700#pullrequestreview-204494125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c443086c-ee00-4a1e-83d5-fc0cafe6792a",
        "parentId" : null,
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "Done. I keep the pod's existing timestamp when the pod is updated. Thank you.",
        "createdAt" : "2019-02-16T01:02:22Z",
        "updatedAt" : "2019-02-22T01:46:33Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea9e1a4118141eb71b7c1484adde7b1fddcfd751",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +562,566 @@\t\t\tnewPodInfo := newPodInfoNoTimestamp(newPod)\n\t\t\tnewPodInfo.timestamp = oldPodInfo.(*podInfo).timestamp\n\t\t\terr := p.activeQ.Update(newPodInfo)\n\t\t\treturn err\n\t\t}"
  },
  {
    "id" : "eec3eb4a-bee4-4643-b0de-32b252c6b20d",
    "prId" : 73700,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73700#pullrequestreview-204494125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ac75cd-42bf-444d-b95e-f9cad07d3311",
        "parentId" : null,
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "Done.",
        "createdAt" : "2019-02-16T01:02:34Z",
        "updatedAt" : "2019-02-22T01:46:33Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea9e1a4118141eb71b7c1484adde7b1fddcfd751",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +572,576 @@\t\t\tnewPodInfo := newPodInfoNoTimestamp(newPod)\n\t\t\tnewPodInfo.timestamp = oldPodInfo.(*podInfo).timestamp\n\t\t\terr := p.activeQ.Add(newPodInfo)\n\t\t\tif err == nil {\n\t\t\t\tp.cond.Broadcast()"
  },
  {
    "id" : "c721e5b8-0e05-4e8d-a22c-1cee771f196f",
    "prId" : 73700,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73700#pullrequestreview-204494125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9540ea5f-3ba9-443b-8552-237d8107dbf3",
        "parentId" : null,
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "Done. Thank you. ",
        "createdAt" : "2019-02-16T01:03:10Z",
        "updatedAt" : "2019-02-22T01:46:33Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea9e1a4118141eb71b7c1484adde7b1fddcfd751",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +649,653 @@\t\tpod := pInfo.pod\n\t\tif p.isPodBackingOff(pod) {\n\t\t\tif err := p.podBackoffQ.Add(pInfo); err != nil {\n\t\t\t\tklog.Errorf(\"Error adding pod %v to the backoff queue: %v\", pod.Name, err)\n\t\t\t}"
  },
  {
    "id" : "c693f74b-99e0-4acc-bab3-1ad9e1b2c0e7",
    "prId" : 73309,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73309#pullrequestreview-197351975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97908de3-d2f4-404d-b2fb-941aadc8eb4b",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "nits: one last request is could you please add a comment to explain this `SchedulingCycle` interface a bit? It would be helpful to upcoming contributors.",
        "createdAt" : "2019-01-28T19:11:01Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "5eb1dc97-eb1d-4efa-957c-44e98d2c2f5a",
        "parentId" : "97908de3-d2f4-404d-b2fb-941aadc8eb4b",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Also, a comment for `AddUnschedulableIfNotPresent` to explain `podSchedulingCycle int64`.",
        "createdAt" : "2019-01-28T19:16:03Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "4b3dea6b-b90d-42fa-a651-6e6e53866e19",
        "parentId" : "97908de3-d2f4-404d-b2fb-941aadc8eb4b",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Comments are added. PTAL.",
        "createdAt" : "2019-01-29T02:20:37Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba47beffd2b6680676288290fd780bae445a189e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +67,71 @@\t// cached by scheduling queue. Normally, incrementing this number whenever\n\t// a pod is popped (e.g. called Pop()) is enough.\n\tSchedulingCycle() int64\n\t// Pop removes the head of the queue and returns it. It blocks if the\n\t// queue is empty and waits until a new item is added to the queue."
  },
  {
    "id" : "80848179-2e2a-4b81-9d10-c3e15c5918fd",
    "prId" : 73309,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73309#pullrequestreview-198888795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd50843b-448b-4837-aeec-99bc9164bb6d",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Looking at the code on line 414, it seems the condition should be (without =) :\r\n\r\npodSchedulingCycle > p.moveRequestCycle",
        "createdAt" : "2019-01-31T11:19:54Z",
        "updatedAt" : "2019-01-31T11:22:07Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "aa72cf3c-02d9-4f2a-9602-bba43c4bcb53",
        "parentId" : "bd50843b-448b-4837-aeec-99bc9164bb6d",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "`Greater than or equal` is correct. In fact, it is very important to have =. Equal means that a move request is received in the same scheduling cycle as the pod was being scheduled. So, it is likely that the scheduler has not seen the changes that led to the move request yet and didn't use those changes when making a scheduling decision. As a result, the pod must be retried if it is unschedulable.",
        "createdAt" : "2019-02-01T01:00:12Z",
        "updatedAt" : "2019-02-01T01:00:46Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba47beffd2b6680676288290fd780bae445a189e",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +398,402 @@// queue. If pod is unschedulable, it adds pod to unschedulable queue if\n// p.moveRequestCycle > podSchedulingCycle or to backoff queue if p.moveRequestCycle\n// <= podSchedulingCycle but pod is subject to backoff. In other cases, it adds pod to\n// active queue.\nfunc (p *PriorityQueue) AddUnschedulableIfNotPresent(pod *v1.Pod, podSchedulingCycle int64) error {"
  },
  {
    "id" : "0ebe7d95-0768-4d4a-b7fd-98a0534d65f6",
    "prId" : 73078,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73078#pullrequestreview-194805794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80938b48-3093-497c-bc76-f81c8f8604a7",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "This comment reads like a  montage now, it would be better if:\r\n\r\n```suggestion\r\n // is true but pod is subject to backoff. In other cases, it adds pod to active\r\n // queue and clears p.receivedMoveRequest.\r\n```",
        "createdAt" : "2019-01-21T19:29:26Z",
        "updatedAt" : "2019-01-22T01:24:21Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "47d74519-b8af-484a-9992-ea92ef22cada",
        "parentId" : "80938b48-3093-497c-bc76-f81c8f8604a7",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Done.",
        "createdAt" : "2019-01-22T01:24:06Z",
        "updatedAt" : "2019-01-22T01:24:21Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "02cdc24cd34e46c0d16830b312c0fae25a8f4952",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +376,380 @@// queue. If pod is unschedulable, it adds pod to unschedulable queue if\n// p.receivedMoveRequest is false or to backoff queue if p.receivedMoveRequest\n// is true but pod is subject to backoff. In other cases, it adds pod to active\n// queue and clears p.receivedMoveRequest.\nfunc (p *PriorityQueue) AddUnschedulableIfNotPresent(pod *v1.Pod) error {"
  },
  {
    "id" : "9c117df9-592f-49ef-b285-f827e2013907",
    "prId" : 72632,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72632#pullrequestreview-190078503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfb7d677-b2f4-4432-9ba6-0f7048dce614",
        "parentId" : null,
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "Need `MakeNextPodFunc`  function comment.",
        "createdAt" : "2019-01-07T11:51:17Z",
        "updatedAt" : "2019-01-08T03:08:36Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      },
      {
        "id" : "dcf7d707-03a3-4af8-9e3b-ddc037f0f0b8",
        "parentId" : "cfb7d677-b2f4-4432-9ba6-0f7048dce614",
        "authorId" : "a472aa4a-c4f7-4692-bc21-708257a1dacc",
        "body" : "@wgliang  comment added.",
        "createdAt" : "2019-01-08T03:09:08Z",
        "updatedAt" : "2019-01-08T03:09:08Z",
        "lastEditedBy" : "a472aa4a-c4f7-4692-bc21-708257a1dacc",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dc1e839467d1de98e527fcbf8352e2f5bd1e59f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +809,813 @@\t}\n}\n\n// MakeNextPodFunc returns a function to retrieve the next pod from a given\n// scheduling queue"
  },
  {
    "id" : "8aac5193-7596-4d05-b74a-19cfa2721929",
    "prId" : 72558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72558#pullrequestreview-192473902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21b50562-1186-43a7-98c2-624623e73bd6",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please put `defer p.lock.Unlock()` here.",
        "createdAt" : "2019-01-10T23:16:24Z",
        "updatedAt" : "2019-01-16T04:08:38Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "893a8803-403c-4d98-ba08-851d1646b2ac",
        "parentId" : "21b50562-1186-43a7-98c2-624623e73bd6",
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "Ok thanks",
        "createdAt" : "2019-01-15T03:23:05Z",
        "updatedAt" : "2019-01-16T04:08:38Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8cfdcd79259def9a7bd9f56dc6b984d8045ceb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +452,456 @@// to activeQ.\nfunc (p *PriorityQueue) flushUnschedulableQLeftover() {\n\tp.lock.Lock()\n\tdefer p.lock.Unlock()\n"
  },
  {
    "id" : "2561fdd9-0397-43b8-90e8-f2a18a77639f",
    "prId" : 72303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72303#pullrequestreview-188780549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58151bca-71b9-4c99-a298-e071b1b03346",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "s/either queue/any queue/",
        "createdAt" : "2019-01-02T18:39:50Z",
        "updatedAt" : "2019-01-03T01:26:47Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa88bcc1549b30b0951b54bd372ded31cb1c8fa6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +402,406 @@\n// AddUnschedulableIfNotPresent does nothing if the pod is present in any\n// queue. If pod is unschedulable, it adds pod to unschedulable queue if\n// p.receivedMoveRequest is false or to backoff queue if p.receivedMoveRequest\n// is true but pod is subject to backoff. In other cases, it adds pod to active"
  },
  {
    "id" : "3dfceff9-9274-49c1-9a8e-8dc41edeb77b",
    "prId" : 72259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72259#pullrequestreview-188052757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c90c98bd-8d3c-46f0-99a6-6bac13e31a2a",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "Can we replace nnn by nominatedNodeName here, the intent will be much clearer.",
        "createdAt" : "2018-12-22T11:15:51Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "df9678f7-1e14-45c2-8bdb-6667ced05cc8",
        "parentId" : "c90c98bd-8d3c-46f0-99a6-6bac13e31a2a",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "`nnn` is a common pattern in other functions and is more idiomatic in Go than long names.",
        "createdAt" : "2018-12-27T10:14:13Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "b75672c4bae487c4b3e2dd7db7692864368ed68a",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +751,755 @@\tnpm.delete(p)\n\n\tnnn := nodeName\n\tif len(nnn) == 0 {\n\t\tnnn = NominatedNodeName(p)"
  },
  {
    "id" : "7e2861b1-ab0b-4dfe-a549-faa0fff5d579",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-181538191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4e79f4c-e92e-4e8c-8985-12e4e50d9c8f",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please update the comment of the function:\r\ns/the two queues/the three queues/",
        "createdAt" : "2018-12-05T00:11:34Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +341,345 @@\t\treturn nil\n\t}\n\tif _, exists, _ := p.podBackoffQ.Get(pod); exists {\n\t\treturn nil\n\t}"
  },
  {
    "id" : "7c0d113b-c8fc-415a-b3a0-a13f58abfeb9",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-182344809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b431ee6b-e13d-45bd-8f94-5926d19f9ba9",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "At line 536, we clear backoff of a pod that is updated and is in the unschedulableQ. We then move it directly to the activeQ. Shouldn't we do the same for a pod in the BackoffQ to be consistent? I mean we should clear its backoff and move it to the activeQ if it is updated.",
        "createdAt" : "2018-12-05T00:54:43Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "221c3826-fb6e-49c2-a0ce-03a8396c0087",
        "parentId" : "b431ee6b-e13d-45bd-8f94-5926d19f9ba9",
        "authorId" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "body" : "Yep, I agree - done.",
        "createdAt" : "2018-12-06T17:01:25Z",
        "updatedAt" : "2018-12-06T17:03:23Z",
        "lastEditedBy" : "5c893dc2-0150-429a-991e-ebf206eaa3eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +520,524 @@\n\t\t// If the pod is in the backoff queue, update it there.\n\t\tif _, exists, _ := p.podBackoffQ.Get(oldPod); exists {\n\t\t\tp.updateNominatedPod(oldPod, newPod)\n\t\t\tp.podBackoffQ.Delete(newPod)"
  },
  {
    "id" : "08c003b2-b183-4c7e-ad4d-11bdf7b963bf",
    "prId" : 57057,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57057#pullrequestreview-181538191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e668021c-ee6e-4586-9e56-d7b10a8627ba",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "We must check the BackoffQ and delete the pod from there if it exists.",
        "createdAt" : "2018-12-05T00:56:07Z",
        "updatedAt" : "2018-12-06T17:00:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "73710f06dbaf91851c14f946230f5bc4a3535cce",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +565,569 @@\terr := p.activeQ.Delete(pod)\n\tif err != nil { // The item was probably not found in the activeQ.\n\t\tp.clearPodBackoff(pod)\n\t\tp.podBackoffQ.Delete(pod)\n\t\tp.unschedulableQ.delete(pod)"
  },
  {
    "id" : "8647943d-83dc-448d-ab1d-092d837a81cd",
    "prId" : 103792,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103792#pullrequestreview-712478326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db1e3f2-08bb-49a9-a2ba-7f289c053248",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "either one looks good to me, but \"active\" seems more accurate.\r\n\r\n/lgtm",
        "createdAt" : "2021-07-22T08:21:57Z",
        "updatedAt" : "2021-07-22T08:22:22Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "51e4694cd66d0ccb2ebff42c17ae7ba2e0f1d6fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +288,292 @@\tpInfo := p.newQueuedPodInfo(pod)\n\tif err := p.activeQ.Add(pInfo); err != nil {\n\t\tklog.ErrorS(err, \"Error adding pod to the active queue\", \"pod\", klog.KObj(pod))\n\t\treturn err\n\t}"
  }
]