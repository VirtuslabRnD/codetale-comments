[
  {
    "id" : "2f9b3fbb-91c5-477d-9834-6d1670d9a556",
    "prId" : 98829,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98829#pullrequestreview-600789406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "423364e3-bc01-47e1-93fa-10465bc4ce2c",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "You should unit test both cases. So do one scenario where the pod goes to backoff queue, and one where it goes directly to active.\r\n\r\nWe also need a test for the pod is in backoff queue and stays there after an update.",
        "createdAt" : "2021-03-01T14:34:30Z",
        "updatedAt" : "2021-03-10T07:48:37Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "53ee08a40ee3f89567f98fe99d8014b520f7e296",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +362,366 @@\tupdatedPod = medPriorityPodInfo.Pod.DeepCopy()\n\tupdatedPod.ClusterName = \"test1\"\n\t// Move clock by podInitialBackoffDuration, so that pods in the unschedulableQ would pass the backing off,\n\t// and the pods will be moved into activeQ.\n\tc.Step(q.podInitialBackoffDuration)"
  },
  {
    "id" : "a2163df6-f533-4585-9007-7e537acc448d",
    "prId" : 98829,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98829#pullrequestreview-607481690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09829786-71ee-43f2-85f1-2a3ded14bb05",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Add a comment above describing the case, as you did for the others.\r\n\r\nEven better, can you call `t.Run` for each testcase? They are independent from each other after all.",
        "createdAt" : "2021-03-02T14:38:43Z",
        "updatedAt" : "2021-03-10T07:48:37Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "f6e14d31-bda1-4070-8bb1-0a4503964876",
        "parentId" : "09829786-71ee-43f2-85f1-2a3ded14bb05",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Please do a follow up where each \"test case\" is wrapped in a `t.Run`",
        "createdAt" : "2021-03-09T14:40:18Z",
        "updatedAt" : "2021-03-10T07:48:37Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "53ee08a40ee3f89567f98fe99d8014b520f7e296",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +356,360 @@\t// updating a pod which is in unschedulable queue, and it is not backing off,\n\t// we will move it to active queue\n\tq.AddUnschedulableIfNotPresent(q.newQueuedPodInfo(medPriorityPodInfo.Pod), q.SchedulingCycle())\n\tif len(q.unschedulableQ.podInfoMap) != 1 {\n\t\tt.Error(\"Expected unschedulableQ to be 1.\")"
  },
  {
    "id" : "72d6090a-1502-4c78-bfa2-f640873d8c23",
    "prId" : 98829,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98829#pullrequestreview-608423342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14cd30f5-547f-4851-8064-1c51f0abf48c",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Shoulnd't we pop from activeQ in this cycle?",
        "createdAt" : "2021-03-10T03:14:56Z",
        "updatedAt" : "2021-03-10T07:48:37Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "25abe858-d7dd-4b5c-a15c-0d06f217b9e5",
        "parentId" : "14cd30f5-547f-4851-8064-1c51f0abf48c",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "sorry for the misleading comments, updated",
        "createdAt" : "2021-03-10T07:49:16Z",
        "updatedAt" : "2021-03-10T07:49:16Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      },
      {
        "id" : "24f1a4da-afe4-44d2-b047-d3782d85c5a4",
        "parentId" : "14cd30f5-547f-4851-8064-1c51f0abf48c",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "LGTM now.",
        "createdAt" : "2021-03-10T08:03:50Z",
        "updatedAt" : "2021-03-10T08:03:50Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "53ee08a40ee3f89567f98fe99d8014b520f7e296",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +348,352 @@\tupdatedPod.ClusterName = \"test\"\n\tq.Update(medPriorityPodInfo.Pod, updatedPod)\n\trawPodInfo, err = q.podBackoffQ.Pop()\n\tpodGotFromBackoffQ = rawPodInfo.(*framework.QueuedPodInfo).Pod\n\tif err != nil || podGotFromBackoffQ != updatedPod {"
  },
  {
    "id" : "99960dc8-1ab4-4c5a-ba3d-5c1585117c56",
    "prId" : 98241,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98241#pullrequestreview-600002826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e799d805-526d-45da-974b-371d8c0c53ca",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "what's the rationale here?",
        "createdAt" : "2021-02-26T15:22:41Z",
        "updatedAt" : "2021-03-03T15:20:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c24e4fd8-d184-470a-85ad-771aa8eb46dc",
        "parentId" : "e799d805-526d-45da-974b-371d8c0c53ca",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "The (unschedulable) plugin names here will be eventually intersected with the plugins that register the moveEvent. So here is to cover `intersected()`: the rationale then is to make both ends a big number, i.e., M intersected with N, instead of M with 1, or 1 with N.",
        "createdAt" : "2021-02-26T19:27:14Z",
        "updatedAt" : "2021-03-03T15:20:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "52e6ac22-0ccd-41b8-98b8-cd97384265ff",
        "parentId" : "e799d805-526d-45da-974b-371d8c0c53ca",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "try to put some of the rationale in the comment.",
        "createdAt" : "2021-02-26T21:30:16Z",
        "updatedAt" : "2021-03-03T15:20:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "cda64dcb-a837-4799-bad5-5afc74dd8a42",
        "parentId" : "e799d805-526d-45da-974b-371d8c0c53ca",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "done.",
        "createdAt" : "2021-02-26T22:32:58Z",
        "updatedAt" : "2021-03-03T15:20:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fdb1a8439aa22050e9e30fb9872b1fad92504df",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +433,437 @@\t\t\t\t\t\t\tpodInfo = q.newQueuedPodInfo(p)\n\t\t\t\t\t\t} else if tt.name == \"worst\" {\n\t\t\t\t\t\t\t// Each pod failed by all plugins.\n\t\t\t\t\t\t\tpodInfo = q.newQueuedPodInfo(p, plugins...)\n\t\t\t\t\t\t} else {"
  },
  {
    "id" : "be4fe5cf-3c03-41c7-a5b1-3341eb4ccd3a",
    "prId" : 94413,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94413#pullrequestreview-481516773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0c78466-508f-4e3c-a13e-677bad10890c",
        "parentId" : null,
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "so they are going to unschedulable queue here? this is different with line 368 an 369, so it is better to have assert about it.",
        "createdAt" : "2020-09-03T01:10:08Z",
        "updatedAt" : "2020-09-03T06:05:43Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      },
      {
        "id" : "18392ea4-1edd-4310-8fde-70fe35a6e94a",
        "parentId" : "f0c78466-508f-4e3c-a13e-677bad10890c",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "yes.",
        "createdAt" : "2020-09-03T02:37:13Z",
        "updatedAt" : "2020-09-03T06:05:43Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "a72f373a-1da6-44ac-bebf-70426b3da2a3",
        "parentId" : "f0c78466-508f-4e3c-a13e-677bad10890c",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Done",
        "createdAt" : "2020-09-03T06:06:45Z",
        "updatedAt" : "2020-09-03T06:06:45Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b2c054e598e7118e8c59fe6c2b2b1cf34dbc0b8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +380,384 @@\tq.schedulingCycle++\n\tq.AddUnschedulableIfNotPresent(q.newQueuedPodInfo(&unschedulablePod), q.SchedulingCycle())\n\tq.AddUnschedulableIfNotPresent(q.newQueuedPodInfo(&highPriorityPod), q.SchedulingCycle())\n\tif q.unschedulableQ.get(&unschedulablePod) == nil || q.unschedulableQ.get(&highPriorityPod) == nil {\n\t\tt.Errorf(\"Expected %v and %v in the unschedulableQ\", unschedulablePod.Name, highPriorityPod.Name)"
  },
  {
    "id" : "839e97f8-a566-4666-a20e-ccb4eebc492b",
    "prId" : 94413,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94413#pullrequestreview-482263863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6df3538-e410-4889-9a21-fedac3782b3b",
        "parentId" : null,
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "This assertion seems meanless if without assert the unschedulable queue, since line 378 the pod backoff queue becomes empty, and `AddUnschedulableIfNotPresent` adds the pod to unschedulable queue.  we should assert pods move out unschedulable queue.",
        "createdAt" : "2020-09-03T11:35:42Z",
        "updatedAt" : "2020-09-03T11:40:14Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      },
      {
        "id" : "fcdd9d92-5c03-464d-a497-c5f3c4cccd49",
        "parentId" : "a6df3538-e410-4889-9a21-fedac3782b3b",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Line @390 should already done that, right? this check is used to compare with Line @372 to tell us the pods are not moved to backoffQ, I think it's not useless.",
        "createdAt" : "2020-09-03T14:26:53Z",
        "updatedAt" : "2020-09-03T14:26:53Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "0bc95b9b-6e1a-43e1-9913-09f6ad3726d9",
        "parentId" : "a6df3538-e410-4889-9a21-fedac3782b3b",
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "Emm...you are right, sorry about that.",
        "createdAt" : "2020-09-03T23:22:18Z",
        "updatedAt" : "2020-09-03T23:22:18Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b2c054e598e7118e8c59fe6c2b2b1cf34dbc0b8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +391,395 @@\t\tt.Errorf(\"Expected 3 items to be in activeQ, but got: %v\", q.activeQ.Len())\n\t}\n\tif q.podBackoffQ.Len() != 0 {\n\t\tt.Errorf(\"Expected 0 item to be in podBackoffQ, but got: %v\", q.podBackoffQ.Len())\n\t}"
  },
  {
    "id" : "e22a134c-f2ba-41c0-942d-daa4727bef5b",
    "prId" : 90755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90755#pullrequestreview-406150020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "836cbd39-2f76-4688-aecd-7178b4f1ede8",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why is this necessary?",
        "createdAt" : "2020-05-05T19:33:19Z",
        "updatedAt" : "2020-05-05T19:36:25Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "8bdd4b0f-ccc2-4aa9-ad47-6b165d29dd4d",
        "parentId" : "836cbd39-2f76-4688-aecd-7178b4f1ede8",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "In this case, it's used to make the not-tried Pods' timestamp a bit advanced than the tried Pod (pod-0). Otherwise, even pod-0 is tried once (in `q.Pop()` where its timestamp gets updated), its timestamp holds the same as the other not-tried ones, so in QueueSort, pod-0 would be very likely not popped as expected (we expect it's the last one to be popped).",
        "createdAt" : "2020-05-05T20:57:56Z",
        "updatedAt" : "2020-05-05T20:57:56Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c2a540cdcde6d80850b0bd7fd7970a9e24782d8",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +766,770 @@\t\tq.Add(&p)\n\t}\n\tc.Step(time.Microsecond)\n\t// Simulate a pod being popped by the scheduler, determined unschedulable, and\n\t// then moved back to the active queue."
  },
  {
    "id" : "7979e229-ae2c-4078-92f4-9c5ef2cebac6",
    "prId" : 90755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90755#pullrequestreview-406150072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39a1c760-82e2-47ec-88ea-a0e6c601d3d2",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "this is not necessary now since flush is called explicitly, right?",
        "createdAt" : "2020-05-05T19:35:03Z",
        "updatedAt" : "2020-05-05T19:36:25Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "4c71f957-461e-459a-9cb3-fa88068aec2a",
        "parentId" : "39a1c760-82e2-47ec-88ea-a0e6c601d3d2",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It's still needed as the flush logic is depending on the time difference:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/27f06962d84868be93ead72d0f14eb5922020c4d/pkg/scheduler/internal/queue/scheduling_queue.go#L355-L362\r\n\r\nA nit is to update `xyz + time.Second` to `xyz + time.Microsecond` in all places. But it's trivial as they're just fake clocks.",
        "createdAt" : "2020-05-05T20:57:59Z",
        "updatedAt" : "2020-05-05T20:58:00Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c2a540cdcde6d80850b0bd7fd7970a9e24782d8",
    "line" : 271,
    "diffHunk" : "@@ -1,1 +1006,1010 @@\tq.AddUnschedulableIfNotPresent(q.newQueuedPodInfo(&highPod), q.SchedulingCycle())\n\tq.AddUnschedulableIfNotPresent(q.newQueuedPodInfo(&midPod), q.SchedulingCycle())\n\tc.Step(unschedulableQTimeInterval + time.Second)\n\tq.flushUnschedulableQLeftover()\n"
  },
  {
    "id" : "714ed36d-5731-4424-b2a6-f01b2ca694f0",
    "prId" : 87948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87948#pullrequestreview-357420835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "848da315-7beb-4b18-b0b3-a603216dd1c9",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "maybe we can have another operation that does a clock Step?\r\nI'm actually not sure what we are trying to test here.",
        "createdAt" : "2020-02-10T16:27:59Z",
        "updatedAt" : "2020-02-14T00:31:28Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "94c8fcfb-ab69-49c5-aadb-abfda5d4ab40",
        "parentId" : "848da315-7beb-4b18-b0b3-a603216dd1c9",
        "authorId" : "f28b709f-13c6-489d-a940-4b17c129a45b",
        "body" : "there is an existing operation: moveClockForward",
        "createdAt" : "2020-02-12T12:43:01Z",
        "updatedAt" : "2020-02-14T00:31:28Z",
        "lastEditedBy" : "f28b709f-13c6-489d-a940-4b17c129a45b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4e4a9943525de2f52fb274e7c6fd442515885d5",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +1150,1154 @@\t\t\t\taddPodUnschedulableQ,\n\t\t\t\tmoveClockForward,\n\t\t\t\tmoveAllToActiveOrBackoffQ,\n\t\t\t},\n\t\t\toperands: []*framework.PodInfo{pInfo2, pInfo1, nil, nil},"
  },
  {
    "id" : "faeb80df-ddc5-48a5-8e07-234ef861b868",
    "prId" : 87948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87948#pullrequestreview-356053503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e23fef00-2d77-4b1c-95a7-fc501de68360",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "use Step here too.",
        "createdAt" : "2020-02-10T16:29:41Z",
        "updatedAt" : "2020-02-14T00:31:28Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4e4a9943525de2f52fb274e7c6fd442515885d5",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +1160,1164 @@\t\t\t\taddPodActiveQ,\n\t\t\t\taddPodBackoffQ,\n\t\t\t\tflushBackoffQ,\n\t\t\t\tmoveAllToActiveOrBackoffQ,\n\t\t\t},"
  },
  {
    "id" : "55936c80-7126-4d0d-a728-e808cf2a7a1e",
    "prId" : 87948,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87948#pullrequestreview-356053503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "447e7fd9-3dde-4d94-ab10-3fab918c8283",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Let's not change the output.\r\nWe could have some pods with different timestamps so that some would be in active and some in backoffq.",
        "createdAt" : "2020-02-10T16:31:49Z",
        "updatedAt" : "2020-02-14T00:31:28Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4e4a9943525de2f52fb274e7c6fd442515885d5",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +1273,1277 @@\t\t\tname: \"make some pods subject to backoff, add pods to unschedulableQ, and then move all to activeQ\",\n\t\t\toperations: []operation{\n\t\t\t\taddPodUnschedulableQ,\n\t\t\t\tmoveClockForward,\n\t\t\t\taddPodUnschedulableQ,"
  },
  {
    "id" : "21f7b9ca-8a77-4791-ad30-7a5b50c8fd07",
    "prId" : 87616,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87616#pullrequestreview-349805530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5661d64-e581-4f15-8851-05d0734794ed",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I really like this testcase btw. We can somehow adopt it.",
        "createdAt" : "2020-01-29T00:56:44Z",
        "updatedAt" : "2020-01-29T18:15:52Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d2786c383df20acdeb48dfaf2abc1c050f7dc3e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1517,1521 @@}\n\nfunc TestBackOffFlow(t *testing.T) {\n\tcl := clock.NewFakeClock(time.Now())\n\tq := NewPriorityQueue(newDefaultFramework(), WithClock(cl))"
  },
  {
    "id" : "7e99f7c0-1faf-4ff7-acff-a09c3dc5e292",
    "prId" : 81263,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81263#pullrequestreview-286524883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf706622-87e7-4647-84f2-62008c24100e",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "can we add tests for creating a priority queue WithPodInitialBackoffDuration and WithPodMaxBackoffDuration?",
        "createdAt" : "2019-09-11T02:28:16Z",
        "updatedAt" : "2019-10-09T11:48:57Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "9646afb1f592a1594c2be987d6c953a13619133c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +309,313 @@// if we were trying to schedule them when we received move request.\nfunc TestPriorityQueue_AddUnschedulableIfNotPresent_Backoff(t *testing.T) {\n\tq := NewPriorityQueue(nil, nil, WithClock(clock.NewFakeClock(time.Now())))\n\ttotalNum := 10\n\texpectedPods := make([]v1.Pod, 0, totalNum)"
  },
  {
    "id" : "25517453-d55b-4502-acb2-4d743419ca05",
    "prId" : 81148,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81148#pullrequestreview-272442526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "368972b4-c1f7-42b6-8282-0dc8b4ce9918",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "It would be better to write a function(similar to [L109](https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/internal/queue/scheduling_queue_test.go#L109)) to wrap the lock and getting pod from `podBackoffQ`.",
        "createdAt" : "2019-08-08T08:34:18Z",
        "updatedAt" : "2019-08-08T23:50:29Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "f726e9b6-9672-4903-b006-4ee5b4fb8ea1",
        "parentId" : "368972b4-c1f7-42b6-8282-0dc8b4ce9918",
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "In fact, I prefer to keep the test simple and verify the data like [L358](https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/internal/queue/scheduling_queue_test.go#L358).",
        "createdAt" : "2019-08-08T09:16:21Z",
        "updatedAt" : "2019-08-08T23:50:29Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca61b79996f9225772d661c5f013a8b0fc6578d7",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +352,356 @@\t}\n\n\tq.lock.RLock()\n\t// Since there was a move request at the same cycle as \"oldCycle\", these pods\n\t// should be in the backoff queue."
  },
  {
    "id" : "3ae44a3a-4a04-4a33-bfd8-34ba84e021eb",
    "prId" : 79631,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79631#pullrequestreview-271548638",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a32b5bb-7229-4aee-86c0-4a7cfdbb0b40",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Another way to fix the issue is to use a \"closed\" channel to disable background goroutines: (note the difference with a \"nil\" channel)\r\n\r\n```go\r\nstopped := make(chan struct{})\r\nclose(stopped)\r\nq := NewPriorityQueue(stopped, nil)\r\n```",
        "createdAt" : "2019-07-02T00:39:06Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "5ce18ba9-938b-4b30-a843-97fc7c46bac1",
        "parentId" : "6a32b5bb-7229-4aee-86c0-4a7cfdbb0b40",
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "More inclined to use channel. :)",
        "createdAt" : "2019-07-02T10:39:35Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      },
      {
        "id" : "16b83dfe-519e-4476-b1a4-8111bc9d4eb7",
        "parentId" : "6a32b5bb-7229-4aee-86c0-4a7cfdbb0b40",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I prefer the current PR implementation, as this is the actual queue that we run. And there should be a separate test that makes sure that elements are moved back to the active queue once the backoff is fulfilled.",
        "createdAt" : "2019-08-06T18:20:30Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "bd5d29c5-2958-4575-9ff9-04dfb6ed7db4",
        "parentId" : "6a32b5bb-7229-4aee-86c0-4a7cfdbb0b40",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Thanks @wgliang and @alculquicondor. Could you help double check if the racing issue is reproducible in your env (without this PR)? (may need multiple runnings)\r\n\r\nCommand:\r\n\r\n```\r\ngo test k8s.io/kubernetes/pkg/scheduler/internal/queue -run=^TestPriorityQueue_AddUnschedulableIfNotPresent_Backoff$ --race --count=10\r\n```",
        "createdAt" : "2019-08-06T18:26:35Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "645cfc5b-c4fd-4340-9f55-0a567e5ad1fe",
        "parentId" : "6a32b5bb-7229-4aee-86c0-4a7cfdbb0b40",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It just succeeds for me. Since it is time sensitive, it probably only fails when the test takes more than 1s, which might be possible in an overloaded environment.",
        "createdAt" : "2019-08-06T18:55:29Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "139d9a1b1e112903ed841fb70e385a8060c162bc",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +299,303 @@// if we were trying to schedule them when we received move request.\nfunc TestPriorityQueue_AddUnschedulableIfNotPresent_Backoff(t *testing.T) {\n\tq := NewPriorityQueueWithClock(nil, clock.NewFakeClock(time.Now()), nil)\n\ttotalNum := 10\n\texpectedPods := make([]v1.Pod, 0, totalNum)"
  },
  {
    "id" : "1cbee170-52bd-4914-8808-f88715dd866b",
    "prId" : 79631,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79631#pullrequestreview-271552283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32d76280-2461-4b56-bb69-b46ed196c195",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "We are silencing errors down here. Can we add t.Fatal or at least t.Error for the return value of `Add` and `AddUnschedulableIfNotPresent`",
        "createdAt" : "2019-08-06T18:24:30Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "1b1da4c7-b725-4bc3-a536-2b8ea8a1c116",
        "parentId" : "32d76280-2461-4b56-bb69-b46ed196c195",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "`Add` seems to be already dump errors via klog, I will log the error for `AddUnschedulableIfNotPresent`.",
        "createdAt" : "2019-08-06T19:02:10Z",
        "updatedAt" : "2019-08-06T19:04:36Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "139d9a1b1e112903ed841fb70e385a8060c162bc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +302,306 @@\ttotalNum := 10\n\texpectedPods := make([]v1.Pod, 0, totalNum)\n\tfor i := 0; i < totalNum; i++ {\n\t\tpriority := int32(i)\n\t\tp := v1.Pod{"
  },
  {
    "id" : "068a47b6-ea1c-448e-ad06-6c384f15f8e9",
    "prId" : 79631,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79631#pullrequestreview-272534481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14420ebd-a0b1-48bc-802d-52a709b8d93e",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "we seem to be testing that they go back to the backoff queue. Maybe we should also \"forward\" the time and make sure they make it back to the activeQueue?",
        "createdAt" : "2019-08-06T21:24:18Z",
        "updatedAt" : "2019-08-06T21:24:18Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c97f58b5-b36d-4063-80c6-ff4e78f5a9e2",
        "parentId" : "14420ebd-a0b1-48bc-802d-52a709b8d93e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "We can. But in this PR I just want to focus on resolving the racing issue :)",
        "createdAt" : "2019-08-08T07:18:45Z",
        "updatedAt" : "2019-08-08T07:18:45Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "19a5a338-9102-4cc2-bad0-4b8bd741bf9f",
        "parentId" : "14420ebd-a0b1-48bc-802d-52a709b8d93e",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "sg",
        "createdAt" : "2019-08-08T12:27:34Z",
        "updatedAt" : "2019-08-08T12:27:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "139d9a1b1e112903ed841fb70e385a8060c162bc",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +296,300 @@// TestPriorityQueue_AddUnschedulableIfNotPresent_Backoff tests the scenarios when\n// AddUnschedulableIfNotPresent is called asynchronously.\n// Pods in and before current scheduling cycle will be put back to activeQueue\n// if we were trying to schedule them when we received move request.\nfunc TestPriorityQueue_AddUnschedulableIfNotPresent_Backoff(t *testing.T) {"
  },
  {
    "id" : "0df9d0df-6a63-45e2-ac07-636382f9daeb",
    "prId" : 75501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75501#pullrequestreview-216894361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b8cf186-d933-40a5-9c56-3f8b9ea63475",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I think the previous version of the code was more readable. Also, it had the option of passing a variable number of arguments to `operations`, but I see why you had to make this change. It is fine.",
        "createdAt" : "2019-03-20T18:23:16Z",
        "updatedAt" : "2019-04-09T00:52:47Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "63c3a617cda9e66a89ca7eb7e807185191f6edc0",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +1069,1073 @@\t\tname       string\n\t\toperations []operation\n\t\toperands   []*podInfo\n\t\texpected   []*podInfo\n\t}{"
  },
  {
    "id" : "decba3fa-6fe8-4c18-bbac-ed371d819083",
    "prId" : 75501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75501#pullrequestreview-218650908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9378afc3-8ed8-44d9-856b-fc22b3bf1683",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "You can use `{}` instead.",
        "createdAt" : "2019-03-20T18:34:57Z",
        "updatedAt" : "2019-04-09T00:52:47Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "f8242490-cdcc-4f06-8125-424621560daf",
        "parentId" : "9378afc3-8ed8-44d9-856b-fc22b3bf1683",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It has to be kept; otherwise moveAllToActiveQ/flushBackoffQ will be skipped due to no operand.",
        "createdAt" : "2019-03-26T00:53:01Z",
        "updatedAt" : "2019-04-09T00:52:47Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "63c3a617cda9e66a89ca7eb7e807185191f6edc0",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +1199,1203 @@\t\t\toperands: [][]*podInfo{\n\t\t\t\tpInfos[:total],\n\t\t\t\t{nil},\n\t\t\t},\n\t\t\texpected: []int64{int64(total), 0, 0},"
  },
  {
    "id" : "b375caf1-527b-470d-b05a-d73f512479ca",
    "prId" : 73700,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73700#pullrequestreview-206649271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456f1a3f-c51a-4741-9aed-3ac816e68bac",
        "parentId" : null,
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "@bsalamat  thank you~ Here I add comments to facilitate your review.  Add lock upper and here to prevent data race occuring in `https://gubernator.k8s.io/build/kubernetes-jenkins/pr-logs/pull/73700/pull-kubernetes-bazel-test/76841/`",
        "createdAt" : "2019-02-22T03:54:10Z",
        "updatedAt" : "2019-02-22T03:54:10Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea9e1a4118141eb71b7c1484adde7b1fddcfd751",
    "line" : 372,
    "diffHunk" : "@@ -1,1 +1064,1068 @@\t\t\tqueue.lock.Lock()\n\t\t\tdefer queue.lock.Unlock()\n\t\t\tqueue.podBackoffQ.Add(pInfo)\n\t\t}\n\t}"
  },
  {
    "id" : "11fac8ab-5e85-4e27-b84d-027f15d3c546",
    "prId" : 73309,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73309#pullrequestreview-197193776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a93324b-a3b5-4351-9323-decfb176bd93",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I'd like to extend this case a little bit. Right now, this covers the case that \"Pod i\" is in a goroutine, and it's ensured to be put back into activeQ properly. But the case could be that **\"Pod i to j\"** are in goroutines, and **they** should be put back into activeQ. This is the case my previous PR didn't cover.\r\n\r\nI drafted a new testcase FYI:\r\n\r\nhttps://github.com/Huang-Wei/kubernetes/blob/46fe8e566b7b9435fe905e5e832fff60b02106cb/pkg/scheduler/internal/queue/scheduling_queue_test.go#L212-L264",
        "createdAt" : "2019-01-28T13:43:10Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "d48fdb42-1311-4ef4-8791-4d4ef0984af9",
        "parentId" : "9a93324b-a3b5-4351-9323-decfb176bd93",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Thanks! Your test is much better than mine. Updated.",
        "createdAt" : "2019-01-28T14:22:35Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "6fd7b66e-73dd-4591-959c-6915cca6f62f",
        "parentId" : "9a93324b-a3b5-4351-9323-decfb176bd93",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Thanks, @cofyc and @Huang-Wei.\r\nPlease add a comment above the test and describe the test scenario.",
        "createdAt" : "2019-01-28T18:37:01Z",
        "updatedAt" : "2019-01-30T02:14:09Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba47beffd2b6680676288290fd780bae445a189e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +214,218 @@// current scheduling cycle will be put back to activeQueue if we were trying\n// to schedule them when we received move request.\nfunc TestPriorityQueue_AddUnschedulableIfNotPresent_Async(t *testing.T) {\n\tq := NewPriorityQueue(nil)\n\ttotalNum := 10"
  },
  {
    "id" : "1abf5cac-be1a-47af-b959-ea4cf215a1d3",
    "prId" : 72558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72558#pullrequestreview-189500975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74c2f7a5-3c6c-4b44-bc8f-cb3e02c09cda",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "How does this function test flushing the unschedulable queue?",
        "createdAt" : "2019-01-04T19:47:17Z",
        "updatedAt" : "2019-01-16T04:08:38Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8cfdcd79259def9a7bd9f56dc6b984d8045ceb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +842,846 @@// TestHighProirotyFlushUnschedulableQLeftover tests that pods will be moved to\n// activeQ after one minutes if it is in unschedulableQ\nfunc TestHighProirotyFlushUnschedulableQLeftover(t *testing.T) {\n\tq := NewPriorityQueue(nil)\n\tmidPod := v1.Pod{"
  },
  {
    "id" : "e34c8348-7d4d-4a2e-8066-8334ce998246",
    "prId" : 72558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72558#pullrequestreview-193304375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff23dea9-26c7-416a-ab9c-4cd8cccc02bf",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "`Priority` and `NominatedNodeName` are not really necessary here. ",
        "createdAt" : "2019-01-16T19:10:40Z",
        "updatedAt" : "2019-01-16T19:10:55Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "de8cfdcd79259def9a7bd9f56dc6b984d8045ceb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +850,854 @@\t\t\tUID:       types.UID(\"tp-mid\"),\n\t\t},\n\t\tSpec: v1.PodSpec{\n\t\t\tPriority: &midPriority,\n\t\t},"
  },
  {
    "id" : "5485190d-898d-4fac-afee-5dd65aca1785",
    "prId" : 72259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72259#pullrequestreview-188050945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c54c261-fd65-4936-bb5a-bd9b07397299",
        "parentId" : null,
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "`Pod.UID` is `node1` It doesn't look very suitable. `pod1` is acceptable.",
        "createdAt" : "2018-12-24T02:15:12Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      },
      {
        "id" : "c4d3f6e8-488f-4b7e-9f26-d4237bedf883",
        "parentId" : "5c54c261-fd65-4936-bb5a-bd9b07397299",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "`node1` is not a Pod UID. This is a map from a pod UID to a node name. `node1` is the node name.",
        "createdAt" : "2018-12-27T10:06:00Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "b75672c4bae487c4b3e2dd7db7692864368ed68a",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +172,176 @@\texpectedNominatedPods := &nominatedPodMap{\n\t\tnominatedPodToNode: map[types.UID]string{\n\t\t\tmedPriorityPod.UID:      \"node1\",\n\t\t\tunschedulablePod.UID:    \"node1\",\n\t\t\thighPriNominatedPod.UID: \"node1\","
  },
  {
    "id" : "73be8add-3b72-4da1-98fd-3487a176db28",
    "prId" : 70898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70898#pullrequestreview-174153830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55d442f1-510c-453d-9237-e1664b113666",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "it's a necessary change as right now popping out a pod won't clear cache from nominatedPods cache.",
        "createdAt" : "2018-11-13T00:50:12Z",
        "updatedAt" : "2018-11-16T22:24:26Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4fd11512ac3cce6e7932a08db77db798167af1b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +113,117 @@\t\tt.Errorf(\"Expected: %v after Pop, but got: %v\", unschedulablePod.Name, p.Name)\n\t}\n\tif len(q.nominatedPods[\"node1\"]) != 2 {\n\t\tt.Errorf(\"Expected medPriorityPod and unschedulablePod to be still present in nomindatePods: %v\", q.nominatedPods[\"node1\"])\n\t}"
  },
  {
    "id" : "3c200b76-4fb2-4d98-be1b-898af3ab76f6",
    "prId" : 68966,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68966#pullrequestreview-159971725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ce6a398-2ade-4615-aa3c-f46d0cb957a6",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "where is this line coming from ?",
        "createdAt" : "2018-09-22T06:29:43Z",
        "updatedAt" : "2018-09-28T18:54:50Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "35f0cecc-9878-460b-acc6-958c3434accc",
        "parentId" : "3ce6a398-2ade-4615-aa3c-f46d0cb957a6",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It's from core/generic_scheduler_test.go L798.\r\n\r\nRight now the constants are private, I don't think it's worth making them public and introduce a new dependency to internal package.",
        "createdAt" : "2018-09-22T06:40:12Z",
        "updatedAt" : "2018-09-28T18:54:50Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "6ded7949-6a5d-4e64-ae24-37f9a81c4e70",
        "parentId" : "3ce6a398-2ade-4615-aa3c-f46d0cb957a6",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "\"A little copying is better than a little dependency.\"\r\nhttps://www.youtube.com/watch?v=PAAkCSZUG1c&t=9m28s",
        "createdAt" : "2018-09-28T18:20:34Z",
        "updatedAt" : "2018-09-28T18:54:50Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9da576f03c269fd49d7a1c7db0f213d818f36871",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +28,32 @@)\n\nvar negPriority, lowPriority, midPriority, highPriority, veryHighPriority = int32(-100), int32(0), int32(100), int32(1000), int32(10000)\nvar mediumPriority = (lowPriority + highPriority) / 2\nvar highPriorityPod, highPriNominatedPod, medPriorityPod, unschedulablePod = v1.Pod{"
  }
]