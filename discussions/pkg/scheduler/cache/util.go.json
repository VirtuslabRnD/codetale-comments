[
  {
    "id" : "9545c2ea-08c4-48bb-b00b-2b1cffbf8491",
    "prId" : 65745,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65745#pullrequestreview-136838417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3a28fe1-dd2b-4719-8147-5c55c79450f7",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Could you please write unit tests for these two new functions?",
        "createdAt" : "2018-07-11T18:32:54Z",
        "updatedAt" : "2018-07-12T06:58:50Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "72e6c57a-eb5f-4b9c-a16e-8f3caba5a47f",
        "parentId" : "f3a28fe1-dd2b-4719-8147-5c55c79450f7",
        "authorId" : "02c0526d-01bd-4cb0-97b2-08ed2933051b",
        "body" : "Done - please let me know if further unit tests are needed (e.g., for CreateNodeNameToInfoMap, any ones in cache_test.go) as I am still learning/observing when unit tests are needed (I thought for public/exposed methods they are must-have..) :D - thank you Bobby!",
        "createdAt" : "2018-07-12T04:44:32Z",
        "updatedAt" : "2018-07-12T06:58:50Z",
        "lastEditedBy" : "02c0526d-01bd-4cb0-97b2-08ed2933051b",
        "tags" : [
        ]
      },
      {
        "id" : "2d64e29c-c07d-4781-892e-095e6f5dbad6",
        "parentId" : "f3a28fe1-dd2b-4719-8147-5c55c79450f7",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "We should do our best to cover all of our code by unit and integration tests. I think we didn't have enough coverage in our existing tests for these functions. As you know, there was a bug in the next function.",
        "createdAt" : "2018-07-12T21:35:06Z",
        "updatedAt" : "2018-07-12T21:38:12Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "2003a0db97d421a3e30ac29bf1b1e0484659622d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +47,51 @@\n// getNodeImageStates returns the given node's image states based on the given imageExistence map.\nfunc getNodeImageStates(node *v1.Node, imageExistenceMap map[string]sets.String) map[string]*ImageStateSummary {\n\timageStates := make(map[string]*ImageStateSummary)\n"
  }
]