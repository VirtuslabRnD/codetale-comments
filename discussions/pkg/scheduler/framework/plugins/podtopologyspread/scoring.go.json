[
  {
    "id" : "a0aed349-5f7d-41b8-ba16-dec31af2c8b1",
    "prId" : 95809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95809#pullrequestreview-515450596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0806bc8-8c88-4fd9-8008-04c4e0a94c77",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "why not just set this to \"0\" directly?\r\n```\r\nscores[i].Score = 0\r\n```",
        "createdAt" : "2020-10-23T08:27:58Z",
        "updatedAt" : "2020-10-23T15:15:47Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "e721576d558679e845d957274e2b0f5785f042cd",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +224,228 @@\t\t// it's mandatory to check if <score.Name> is present in m.IgnoredNodes\n\t\tif s.IgnoredNodes.Has(score.Name) {\n\t\t\tscores[i].Score = invalidScore\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "b40142c7-475c-4b31-b979-74f0f6aa6cd0",
    "prId" : 95809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95809#pullrequestreview-516445839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1b8f357-502e-4b97-879f-08474b4b6916",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "and check it as this,\r\n```\r\nif scores[i].Score == 0 {\r\n    continue\r\n}\r\n```",
        "createdAt" : "2020-10-23T08:29:42Z",
        "updatedAt" : "2020-10-23T15:15:47Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "8c707a76-5d2e-4c4b-8132-810590436b99",
        "parentId" : "d1b8f357-502e-4b97-879f-08474b4b6916",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "The score coming from `Score` function is basically a counter. If that counter is zero, it should actually get the highest score. See how the value is reversed in the following lines.",
        "createdAt" : "2020-10-23T14:24:14Z",
        "updatedAt" : "2020-10-23T15:15:47Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "06f8b33f-9a90-4576-9712-97f4ef9dcb74",
        "parentId" : "d1b8f357-502e-4b97-879f-08474b4b6916",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Got you, thanks for the explanation. ",
        "createdAt" : "2020-10-26T03:12:14Z",
        "updatedAt" : "2020-10-26T03:12:14Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "e721576d558679e845d957274e2b0f5785f042cd",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +239,243 @@\t\t\tscores[i].Score = 0\n\t\t\tcontinue\n\t\t}\n\t\tif maxScore == 0 {\n\t\t\tscores[i].Score = framework.MaxNodeScore"
  },
  {
    "id" : "7742c4c7-1f74-4fe1-be44-5d5622ad023c",
    "prId" : 95809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95809#pullrequestreview-516892425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b560361-239a-4513-8d09-ede1fa5fdda3",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "doing `for i, score := range scores` would make a copy of score for each element -- does `for i := range score` do better? kinda premature optimisation, but worth a quick check :)",
        "createdAt" : "2020-10-26T14:33:08Z",
        "updatedAt" : "2020-10-26T14:37:32Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "ccd0e2be-f1f1-45cc-bd6c-34b7cc4cffca",
        "parentId" : "4b560361-239a-4513-8d09-ede1fa5fdda3",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "The object is so small that it doesn't really matter.",
        "createdAt" : "2020-10-26T15:23:55Z",
        "updatedAt" : "2020-10-26T15:23:56Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "e721576d558679e845d957274e2b0f5785f042cd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +221,225 @@\tvar minScore int64 = math.MaxInt64\n\tvar maxScore int64\n\tfor i, score := range scores {\n\t\t// it's mandatory to check if <score.Name> is present in m.IgnoredNodes\n\t\tif s.IgnoredNodes.Has(score.Name) {"
  },
  {
    "id" : "9d8f4a5b-8f4c-45ee-b05e-e7277a8b70e6",
    "prId" : 90820,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90820#pullrequestreview-407588484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95c4e12d-607e-411f-a098-cdac3b8ac7aa",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "needs a comment to explain the rational, something like \"topologies with less than maxSkew pods are considered to have the same priority\".",
        "createdAt" : "2020-05-07T12:00:20Z",
        "updatedAt" : "2020-05-08T13:35:01Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "2d7b62e1-4e6b-4acf-897d-e1a6e2183aa9",
        "parentId" : "95c4e12d-607e-411f-a098-cdac3b8ac7aa",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Done",
        "createdAt" : "2020-05-07T15:29:20Z",
        "updatedAt" : "2020-05-08T13:35:01Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "516c8fbfad3253f7e680ecf5db023944dfa402d4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +293,297 @@// the same priority.\nfunc adjustForMaxSkew(cnt, maxSkew int64) int64 {\n\tif cnt < maxSkew {\n\t\treturn maxSkew - 1\n\t}"
  },
  {
    "id" : "823aab88-dbf0-431d-ac51-4bc1d026957a",
    "prId" : 89487,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89487#pullrequestreview-382342328",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73bf835d-3553-4e39-aae6-f704b7fd92b0",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Just for curiosity: how much percentage does it help in the performance boost?",
        "createdAt" : "2020-03-26T05:44:24Z",
        "updatedAt" : "2020-03-26T19:34:13Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "6215d036-071e-41d3-bfd5-52c0f47d8ce0",
        "parentId" : "73bf835d-3553-4e39-aae6-f704b7fd92b0",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "The benchmark for 100 nodes remains at 0.3ms and goes up to 2.1ms for 1000 nodes.\r\nThe profile shows 10% CPU usage from `sets.String.Insert`, dominated by growing the hash table, which is not negligible.\r\nI think it's fair to assume that if a user sets spreading, they expect all nodes to have the topology keys.",
        "createdAt" : "2020-03-26T19:31:00Z",
        "updatedAt" : "2020-03-26T19:34:13Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b1903149a942dfaf53a881abdefbe27699acc9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +108,112 @@\n\tstate := &preScoreState{\n\t\tNodeNameSet:             make(sets.String, len(filteredNodes)),\n\t\tTopologyPairToPodCounts: make(map[topologyPair]*int64),\n\t}"
  },
  {
    "id" : "8292fb25-e69a-4702-bd84-bfd4146b1b9e",
    "prId" : 87845,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87845#pullrequestreview-353945571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b686b335-151e-4061-b5fd-9e35aac35484",
        "parentId" : null,
        "authorId" : "4e9f2c95-e98e-400a-b9f5-49316b7ad277",
        "body" : "I'm curious about why the namespace is not checked here before?",
        "createdAt" : "2020-02-05T08:13:16Z",
        "updatedAt" : "2020-02-06T15:39:10Z",
        "lastEditedBy" : "4e9f2c95-e98e-400a-b9f5-49316b7ad277",
        "tags" : [
        ]
      },
      {
        "id" : "9117955f-e501-4129-b8ca-088768a41812",
        "parentId" : "b686b335-151e-4061-b5fd-9e35aac35484",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I have to admit it was a pre-existing bug...",
        "createdAt" : "2020-02-05T08:20:24Z",
        "updatedAt" : "2020-02-06T15:39:10Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "46f16f90-e583-4ee1-8c21-48feeac828a7",
        "parentId" : "b686b335-151e-4061-b5fd-9e35aac35484",
        "authorId" : "4e9f2c95-e98e-400a-b9f5-49316b7ad277",
        "body" : "Got it.",
        "createdAt" : "2020-02-05T08:21:21Z",
        "updatedAt" : "2020-02-06T15:39:10Z",
        "lastEditedBy" : "4e9f2c95-e98e-400a-b9f5-49316b7ad277",
        "tags" : [
        ]
      },
      {
        "id" : "cbca500f-5928-4e0c-8162-046e59d6330b",
        "parentId" : "b686b335-151e-4061-b5fd-9e35aac35484",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Let's add a separate regression test for the namespace.",
        "createdAt" : "2020-02-05T18:33:18Z",
        "updatedAt" : "2020-02-06T15:39:10Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "815206685cf1ef2404410838a715527c1e40eaac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +137,141 @@\t\t\tfor _, existingPod := range nodeInfo.Pods() {\n\t\t\t\t// Bypass terminating Pod (see #87621).\n\t\t\t\tif existingPod.DeletionTimestamp != nil || existingPod.Namespace != pod.Namespace {\n\t\t\t\t\tcontinue\n\t\t\t\t}"
  },
  {
    "id" : "8bfaf5b1-3904-4c87-b1b3-a246a96e8b03",
    "prId" : 86684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86684#pullrequestreview-336934343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb08d9f7-fd59-4804-a72c-bf6bfb397a55",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why? the score is zero anyways, right?",
        "createdAt" : "2019-12-28T15:49:04Z",
        "updatedAt" : "2019-12-29T03:29:48Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "32188402-6f91-45d6-9681-95946fb7c12d",
        "parentId" : "fb08d9f7-fd59-4804-a72c-bf6bfb397a55",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It's \"invalid\" (as explained https://github.com/kubernetes/kubernetes/pull/86684#discussion_r361819269), which should only be finalized to 0 at L228~L231; otherwise, it would be treated as a node which has 0 matching pods.",
        "createdAt" : "2019-12-28T23:54:54Z",
        "updatedAt" : "2019-12-29T03:29:48Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "78352240f63e6aa4b5d71e5c15730965fa761b11",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +197,201 @@\tfor _, score := range scores {\n\t\t// it's mandatory to check if <score.Name> is present in m.nodeNameSet\n\t\tif _, ok := s.nodeNameSet[score.Name]; !ok {\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "cab6e2e3-b0f4-449c-8de8-a4db543c7d63",
    "prId" : 86684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86684#pullrequestreview-336934345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faed3757-6e18-4ee3-a62f-9ca524461372",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "shouldn't this node have a score of zero already? why do we need to set it explicitly?",
        "createdAt" : "2019-12-28T15:50:57Z",
        "updatedAt" : "2019-12-29T03:29:48Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "d058365a-a91d-47a5-9794-be94a543971b",
        "parentId" : "faed3757-6e18-4ee3-a62f-9ca524461372",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Technically this line can be removed, however, explicitly setting it to 0 doesn't hurt and make the code easy to read.",
        "createdAt" : "2019-12-28T23:54:57Z",
        "updatedAt" : "2019-12-29T03:29:48Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "78352240f63e6aa4b5d71e5c15730965fa761b11",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@\n\t\tif _, ok := s.nodeNameSet[node.Name]; !ok {\n\t\t\tscores[i].Score = 0\n\t\t\tcontinue\n\t\t}"
  }
]