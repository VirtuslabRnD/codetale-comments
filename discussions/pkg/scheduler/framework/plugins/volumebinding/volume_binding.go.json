[
  {
    "id" : "ef1406b2-c030-4e0e-9dfe-effed592bd6e",
    "prId" : 100003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100003#pullrequestreview-608673359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "315b15cd-6c43-4fdc-92b0-99040ab65cfa",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "do we need CSINode event?",
        "createdAt" : "2021-03-10T07:55:54Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "bf8818ee-9125-46cb-ae2a-c7d4b92782a4",
        "parentId" : "315b15cd-6c43-4fdc-92b0-99040ab65cfa",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "yes",
        "createdAt" : "2021-03-10T12:48:59Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee392ed42732d377b766bcbd77d6ccb28234fb",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\t// We rely on CSI node to translate in-tree PV to CSI.\n\t\t{Resource: framework.CSINode, ActionType: framework.Add | framework.Update},\n\t}\n\tif utilfeature.DefaultFeatureGate.Enabled(features.CSIStorageCapacity) {\n\t\t// When CSIStorageCapacity is enabled, pods may become schedulable"
  },
  {
    "id" : "d1e58c28-d853-41e2-84e7-bcbc480021b8",
    "prId" : 100003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100003#pullrequestreview-698011506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3440a67-dfaa-4d03-b20d-5f2eb5c7d1ad",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we are trying to cut the dependency on feature gates, please follow up with a PR to remove this, see as an example inter-pod affinity https://github.com/kubernetes/kubernetes/blob/23d4b3b4f0d8b844f01b93262737c3d0efb6bff7/pkg/scheduler/framework/plugins/interpodaffinity/plugin.go#L58 ",
        "createdAt" : "2021-03-11T15:33:17Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "09aaf37e-cab0-492f-9d5f-73ecd4fcdec3",
        "parentId" : "b3440a67-dfaa-4d03-b20d-5f2eb5c7d1ad",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Yes. Something to add: volumebinding used to depend on featuregate already, it's not a new dependency here.",
        "createdAt" : "2021-03-11T20:41:02Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "83ff1394-defc-4aa9-b63c-c8f00b6285da",
        "parentId" : "b3440a67-dfaa-4d03-b20d-5f2eb5c7d1ad",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "IIUC, it's ok to use `utilfeature.DefaultFeatureGate.Enabled(...)` now, but it's deprecated and must be migrated to  `k8s.io/kubernetes/pkg/scheduler/framework/plugins/feature`?\r\n\r\nI'll create a follow-up PR later.",
        "createdAt" : "2021-03-25T09:54:37Z",
        "updatedAt" : "2021-07-02T09:35:55Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "f79fb2ec-3179-47c4-8796-a51d1d074682",
        "parentId" : "b3440a67-dfaa-4d03-b20d-5f2eb5c7d1ad",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "do you have a PR ready for this feature gate refactoring? I just don't want this follow up to get lost.",
        "createdAt" : "2021-06-07T13:11:30Z",
        "updatedAt" : "2021-06-23T22:04:10Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "c571a070-1dbb-48c3-81fb-f34c4cf94ef4",
        "parentId" : "b3440a67-dfaa-4d03-b20d-5f2eb5c7d1ad",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "> do you have a PR ready for this feature gate refactoring? I just don't want this follow up to get lost.\r\n\r\nnot yet, created an issue for this https://github.com/kubernetes/kubernetes/issues/103431",
        "createdAt" : "2021-07-02T09:39:52Z",
        "updatedAt" : "2021-07-02T09:39:52Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee392ed42732d377b766bcbd77d6ccb28234fb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\t{Resource: framework.CSINode, ActionType: framework.Add | framework.Update},\n\t}\n\tif utilfeature.DefaultFeatureGate.Enabled(features.CSIStorageCapacity) {\n\t\t// When CSIStorageCapacity is enabled, pods may become schedulable\n\t\t// on CSI driver & storage capacity changes."
  },
  {
    "id" : "f0b50cd8-1e86-4744-9868-4af79c8478ae",
    "prId" : 100003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100003#pullrequestreview-620951351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5a42c23-32ff-4462-8521-13b0a19edff4",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Hold on. Seems we don't get handle StorageClass update event:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/1db614ec8fd2cfe7c0ac852dc54468aa094c11ce/pkg/scheduler/eventhandlers.go#L456-L460",
        "createdAt" : "2021-03-11T21:15:22Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "dd833045-0d3d-4b07-8407-62e4965d48b3",
        "parentId" : "b5a42c23-32ff-4462-8521-13b0a19edff4",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "I guess it's rare to update storage classes in real clusters, but according to API server validation logic `allowedTopologies` is mutable, we need the `Update` event here.",
        "createdAt" : "2021-03-25T10:32:29Z",
        "updatedAt" : "2021-04-29T12:06:24Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee392ed42732d377b766bcbd77d6ccb28234fb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +99,103 @@\t\t// (e.g., allowedTopologies, volumeBindingMode), and hence may become\n\t\t// schedulable upon StorageClass Add or Update events.\n\t\t{Resource: framework.StorageClass, ActionType: framework.Add | framework.Update},\n\t\t// We bind PVCs with PVs, so any changes may make the pods schedulable.\n\t\t{Resource: framework.PersistentVolumeClaim, ActionType: framework.Add | framework.Update},"
  },
  {
    "id" : "3577f453-2500-4121-93e6-391f379d1697",
    "prId" : 100003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100003#pullrequestreview-698040934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bbabf96-f7aa-4d75-a6a8-664910671d9f",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "We don't discover core API res events automatically on the event handler side (we do for CRD), so need to add cases for CSIDriver and CSIStorageCapactiy in eventhandlers.go#addAllEventHandlers().\r\n\r\n(don't need to check feature gate in eventhandlers.go#addAllEventHandlers() as if it's disabled, it won't show up in the eventsMap)\r\n\r\nBTW: please take a second look to ensure all other \"new\" core events are all covered in addAllEventHandlers().",
        "createdAt" : "2021-06-23T22:03:53Z",
        "updatedAt" : "2021-06-23T22:04:29Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "bf7bd364-cd52-4464-b41c-6d63bb6be8dd",
        "parentId" : "2bbabf96-f7aa-4d75-a6a8-664910671d9f",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "done in latest commit",
        "createdAt" : "2021-07-02T10:16:01Z",
        "updatedAt" : "2021-07-02T10:17:24Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "83ee392ed42732d377b766bcbd77d6ccb28234fb",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +115,119 @@\t\tevents = append(events, []framework.ClusterEvent{\n\t\t\t{Resource: framework.CSIDriver, ActionType: framework.Add | framework.Update},\n\t\t\t{Resource: framework.CSIStorageCapacity, ActionType: framework.Add | framework.Update},\n\t\t}...)\n\t}"
  },
  {
    "id" : "d387f672-5e3b-4e58-9923-4098c7e2b180",
    "prId" : 99641,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99641#pullrequestreview-605659264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ed546f5-447d-48b1-9e8f-e36719144e2e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What happens if the scheduler is updated before the apiserver (or before 1 of the apiservers) and ends ups askig for beta which doesn't exist?  Is that a problem or will it recover?\r\n\r\nOr do you need to leave this on v1alpha1 until next release, at which point you can switch?",
        "createdAt" : "2021-03-05T07:21:16Z",
        "updatedAt" : "2021-03-08T20:00:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f6451056-6e2f-4000-8d4b-74eb23c56a0f",
        "parentId" : "7ed546f5-447d-48b1-9e8f-e36719144e2e",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> What happens if the scheduler is updated before the apiserver (or before 1 of the apiservers) and ends ups askig for beta which doesn't exist? Is that a problem or will it recover?\r\n\r\nThis is indeed a bit problematic, depending on what is expected. kube-scheduler waits for all caches to sync (cmd/kube-scheduler/app/server.go), which fails for the beta API if not supported by the kube-apiserver. kube-scheduler then waits and does not schedule anything. It will recover once the apiserver also gets updated. Is that acceptable?\r\n\r\nJust to be sure that this really recovers, I tried it:\r\n- deploy cluster with v1alpha1 API\r\n- update kube-scheduler with v1beta1 API\r\n- create pod with unbound volume, late binding and storage capacity tracking -> stuck, as expected\r\n- update apiserver with v1beta1 API\r\n- kube-scheduler gets the storage capacity information, pod starts\r\n\r\n> Or do you need to leave this on v1alpha1 until next release, at which point you can switch?\r\n\r\nUsing v1alpha1 wouldn't help: in a normal cluster, that API group won't be available in kube-apiserver by default, so updating kube-scheduler before kube-apiserver will still stop scheduling.\r\n\r\nBut is this really a problem? https://kubernetes.io/docs/tasks/administer-cluster/cluster-upgrade/#manual-deployments explicitly instructs to upgrade etcd and kube-apiserver first. If admins don't follow that advice, some breakage has to be expected and isn't too bad in this case (will recover, log output about watch explains what's failing).\r\n",
        "createdAt" : "2021-03-05T09:23:58Z",
        "updatedAt" : "2021-03-08T20:00:14Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "b4df47f4-cd75-4158-9ec1-bcbe041260a0",
        "parentId" : "7ed546f5-447d-48b1-9e8f-e36719144e2e",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> Or do you need to leave this on v1alpha1 until next release, at which point you can switch?\r\n\r\nMy other motivation for using the v1beta1 API was that I intended to add MaximumVolumeSize there, and only there. But that actually then caused test failures during roundtripping and munnerz convinced me that the new field should be added also to v1alpha1 (https://kubernetes.slack.com/archives/C0EG7JC6T/p1614956222111400?thread_ts=1614955402.110000&cid=C0EG7JC6T).\r\n\r\nTherefore v1alpha1 and v1beta1 are now functionally equivalent and we could use it in kube-scheduler without loss of functionality. In case of version skew against an older kube-apiserver it simply wouldn't get the MaximumVolumeSize, which is fine.\r\n\r\nBut my point about the alpha API group not being enabled still stands. Only clusters where the CSIStorageCapacity API was already enabled prior to 1.21 will be able to use kube-scheduler 1.21. Is that enough reason to change the PR or should I keep it as-is, i.e. use v1beta1 in kube-scheduler?\r\n\r\n",
        "createdAt" : "2021-03-05T17:11:09Z",
        "updatedAt" : "2021-03-08T20:00:14Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "7fa42240-756f-49f6-8b32-7525545a1eed",
        "parentId" : "7ed546f5-447d-48b1-9e8f-e36719144e2e",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Since apiserver needs to be upgraded first, I think it is fine to switch the scheduler to use v1beta1 (and the fact that v1alpha1 needs explicit opt-in)",
        "createdAt" : "2021-03-05T22:26:21Z",
        "updatedAt" : "2021-03-08T20:00:14Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c7e4c6316077aaf7822b1d4166ef54218ecee80",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +355,359 @@\t\tcapacityCheck = &scheduling.CapacityCheck{\n\t\t\tCSIDriverInformer:          fh.SharedInformerFactory().Storage().V1().CSIDrivers(),\n\t\t\tCSIStorageCapacityInformer: fh.SharedInformerFactory().Storage().V1beta1().CSIStorageCapacities(),\n\t\t}\n\t}"
  },
  {
    "id" : "5dc90034-0cd8-4c3b-8434-243a144ddf52",
    "prId" : 96850,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96850#pullrequestreview-554072433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a49950-0518-4908-aefd-17728c225481",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "this should return Status, error only if some internal state is bad, otherwise we should return unschedulable.",
        "createdAt" : "2020-12-16T20:49:00Z",
        "updatedAt" : "2020-12-16T20:49:01Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "dd5228ab-63ba-4cef-948b-eeb8a71c38c2",
        "parentId" : "a9a49950-0518-4908-aefd-17728c225481",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ah, I see you use unschedulable when we return in PreFilter",
        "createdAt" : "2020-12-16T20:49:44Z",
        "updatedAt" : "2020-12-16T20:49:44Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b45e9febc44ea3753e6fdb3b9f37a98dfbecd43",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +87,91 @@// - the first one to denote if the given \"pod\" has any PVC defined.\n// - the second one to return any error if the requested PVC is illegal.\nfunc (pl *VolumeBinding) podHasPVCs(pod *v1.Pod) (bool, error) {\n\thasPVC := false\n\tfor _, vol := range pod.Spec.Volumes {"
  },
  {
    "id" : "345db4e7-5171-46ce-b231-1fe9cab235d3",
    "prId" : 96347,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96347#pullrequestreview-601338390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb57ec2d-2415-4a33-a74f-e14197481f86",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Are we going to make the args configurable in alpha or not?",
        "createdAt" : "2021-02-24T01:53:02Z",
        "updatedAt" : "2021-03-05T15:59:45Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9043fa82-d30f-4e13-a0c9-21911f066c46",
        "parentId" : "bb57ec2d-2415-4a33-a74f-e14197481f86",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "in the KEP discussion, we decided to support it in the alpha stage https://github.com/kubernetes/enhancements/tree/master/keps/sig-storage/1845-prioritization-on-volume-capacity#alpha\r\n\r\nIf we don't have enough time to review the API change, can we delay it to the beta stage? @msau42 ",
        "createdAt" : "2021-02-24T06:11:59Z",
        "updatedAt" : "2021-03-05T15:59:45Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "281b0b7a-fa2e-4077-bdfb-9218ff16b0a6",
        "parentId" : "bb57ec2d-2415-4a33-a74f-e14197481f86",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I'm ok deferring it if we don't have time.",
        "createdAt" : "2021-03-02T01:56:52Z",
        "updatedAt" : "2021-03-05T15:59:45Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f3782226fdc8c2f494707309d3940518415007a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +221,225 @@\nvar (\n\t// TODO (for alpha) make it configurable in config.VolumeBindingArgs\n\tdefaultShapePoint = []config.UtilizationShapePoint{\n\t\t{"
  },
  {
    "id" : "1731277b-ef3c-4176-99c7-6a905b273d9a",
    "prId" : 92784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92784#pullrequestreview-445999959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fb610dc-84e0-47b0-b21e-52a215e79a43",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Another followup item before beta. We may need changes in other volume related scheduler plugins, like VolumeAttachLimit",
        "createdAt" : "2020-07-09T22:02:20Z",
        "updatedAt" : "2020-07-09T22:02:20Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "36acc943-061b-49c0-a5b9-a0b430790b72",
        "parentId" : "3fb610dc-84e0-47b0-b21e-52a215e79a43",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Added to https://github.com/kubernetes/enhancements/issues/1698#issuecomment-655344680",
        "createdAt" : "2020-07-09T22:03:54Z",
        "updatedAt" : "2020-07-09T22:03:55Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1178bd925b54898e66cace37d35bf551380a75b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +62,66 @@// Reserve and PreBind phases.\ntype VolumeBinding struct {\n\tBinder                               scheduling.SchedulerVolumeBinder\n\tGenericEphemeralVolumeFeatureEnabled bool\n}"
  },
  {
    "id" : "1bd06dfd-8ca7-41a3-a690-c6c319c1d0de",
    "prId" : 92387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92387#pullrequestreview-438054674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59427580-bf80-491c-bc20-b90f66223a36",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think rbac rules for the scheduler need to be updated with these permissions as well.",
        "createdAt" : "2020-06-23T23:48:30Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "f0fa4d53-dc6a-407e-87b3-da60b5e2cd24",
        "parentId" : "59427580-bf80-491c-bc20-b90f66223a36",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "True. I guess proper E2E testing would have found this. Let me think about how I can add that already now, without depending on the external-provisioner changes and a CSI driver deployment that enables the feature. Probably something involving the mock driver and manually created CSIStorageCapacity objects...\r\n\r\nYes, that works. For the negative case (= volume cannot be created) it's currently waiting to ensure that the pod doesn't start, which makes the test slow. We have other cases like that and there decided against relying on error events to shorten the test runtime. Would it perhaps make sense here?\r\n\r\n",
        "createdAt" : "2020-06-24T11:33:42Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "d4c01960-a08b-41d9-a00d-c0c395fb9002",
        "parentId" : "59427580-bf80-491c-bc20-b90f66223a36",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Would the integration test have caught the rbac issue?\r\n\r\nThe reason to not rely on events wasn't strictly about shortening test time, it was because events are unreliable and could be dropped/garbage collected under high load\r\n\r\n",
        "createdAt" : "2020-06-25T23:47:49Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "64480919-0c1a-42ed-a1ad-ecff84849308",
        "parentId" : "59427580-bf80-491c-bc20-b90f66223a36",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> Would the integration test have caught the rbac issue?\r\n\r\nNot sure... let's test it... no. The test completes fine even with the new RBAC permission missing.\r\n\r\n> The reason to not rely on events wasn't strictly about shortening test time, it was because events are unreliable and could be dropped/garbage collected under high load.\r\n\r\nSo one cannot rely on them for the test (i.e. not encountering the event must not be a test failure). But if the event is seen, the test could be stopped early. If slow test execution isn't an issue, then this is probably not worth the complexity.\r\n",
        "createdAt" : "2020-06-26T06:55:36Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f93802a70f988bee901a6d272883e20eafad57",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +263,267 @@\tif utilfeature.DefaultFeatureGate.Enabled(features.CSIStorageCapacity) {\n\t\tcapacityCheck = &scheduling.CapacityCheck{\n\t\t\tCSIDriverInformer:          fh.SharedInformerFactory().Storage().V1().CSIDrivers(),\n\t\t\tCSIStorageCapacityInformer: fh.SharedInformerFactory().Storage().V1alpha1().CSIStorageCapacities(),\n\t\t}"
  },
  {
    "id" : "6d54c278-310b-4cda-9094-37b4f09e9989",
    "prId" : 92387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92387#pullrequestreview-443292171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61cde0a2-1c1f-4596-a049-1c0ed615fe89",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "I am not sure how expensive this look up is, but lets save this in a variable in the plugin since we are doing this check for every pod for every node.",
        "createdAt" : "2020-07-06T14:30:27Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "31eb93e9-3802-41f8-a7ff-19c5127f7009",
        "parentId" : "61cde0a2-1c1f-4596-a049-1c0ed615fe89",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "This feature check here is only called once when initializing the scheduler, not for every pod.",
        "createdAt" : "2020-07-06T17:18:13Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "ee873ddb-f386-42d4-9b0d-d2b182510dba",
        "parentId" : "61cde0a2-1c1f-4596-a049-1c0ed615fe89",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "oh right.",
        "createdAt" : "2020-07-06T17:55:00Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f93802a70f988bee901a6d272883e20eafad57",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +261,265 @@\tcsiNodeInformer := fh.SharedInformerFactory().Storage().V1().CSINodes()\n\tvar capacityCheck *scheduling.CapacityCheck\n\tif utilfeature.DefaultFeatureGate.Enabled(features.CSIStorageCapacity) {\n\t\tcapacityCheck = &scheduling.CapacityCheck{\n\t\t\tCSIDriverInformer:          fh.SharedInformerFactory().Storage().V1().CSIDrivers(),"
  },
  {
    "id" : "ab7c1fd0-bb55-4e88-bb9a-6d53c5ae3332",
    "prId" : 92222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92222#pullrequestreview-432377274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1aca33c5-3941-414f-b67e-d27ca3b86fdf",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "after https://github.com/kubernetes/kubernetes/pull/91705, we need to revert assumed PV/PVC cache in this extension point",
        "createdAt" : "2020-06-17T13:07:01Z",
        "updatedAt" : "2020-06-24T06:15:34Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "f899976b41b12d83759ef166f0c6b8e167b563f0",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +227,231 @@// Unreserve clears assumed PV and PVC cache.\n// It's idempotent, and does nothing if no cache found for the given pod.\nfunc (pl *VolumeBinding) Unreserve(ctx context.Context, cs *framework.CycleState, pod *v1.Pod, nodeName string) {\n\ts, err := getStateData(cs)\n\tif err != nil {"
  },
  {
    "id" : "87f919da-ebfb-4ed6-8ba5-3e2a257db925",
    "prId" : 91775,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91775#pullrequestreview-425007922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a22de85-7f21-4886-855a-bb1c7c6091c3",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "saving pointers instead of structs ",
        "createdAt" : "2020-06-05T05:37:37Z",
        "updatedAt" : "2020-06-12T02:00:32Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6f2acd5338976dfbda0928344a5093b6728a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +47,51 @@}\n\nfunc (d *stateData) Clone() framework.StateData {\n\treturn d\n}"
  },
  {
    "id" : "d5d4afa5-45f1-4afe-a596-11446a8b74f4",
    "prId" : 91775,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91775#pullrequestreview-426298861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6f5d858-4096-401b-ad0a-3bef516f90ac",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can we add unit tests for these new states and status?",
        "createdAt" : "2020-06-05T17:03:29Z",
        "updatedAt" : "2020-06-12T02:00:32Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9dc53071-0be9-4855-b58f-dedbde6ad510",
        "parentId" : "b6f5d858-4096-401b-ad0a-3bef516f90ac",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "pushed a new commit https://github.com/kubernetes/kubernetes/pull/91775/commits/eca710246a140131237109663c7120d293337942\r\n\r\nI removed the usage of FakeVolumeBinder. I think it's better to use fake kubernetes client with real volume binder \r\nI also removed some unnecessary tests and add new tests for `PreFilter` statues and states.",
        "createdAt" : "2020-06-08T14:27:53Z",
        "updatedAt" : "2020-06-12T02:00:32Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6f2acd5338976dfbda0928344a5093b6728a",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +90,94 @@// immediate PVCs bound. If not all immediate PVCs are bound, an\n// UnschedulableAndUnresolvable is returned.\nfunc (pl *VolumeBinding) PreFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod) *framework.Status {\n\t// If pod does not request any PVC, we don't need to do anything.\n\tif !podHasPVCs(pod) {"
  },
  {
    "id" : "2751fb8b-6919-4a62-b0e5-d3dd7fbeb8b8",
    "prId" : 91775,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91775#pullrequestreview-427660894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f02a849-6edf-4669-8c69-c564f0212403",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Unrelated to this PR, but could we potentially use this state mechanism to get rid of the PodBindingCache, which is only relevant for a single scheduling cycle?",
        "createdAt" : "2020-06-10T01:20:25Z",
        "updatedAt" : "2020-06-12T02:00:32Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "7d1ba5d8-1d9d-4fe3-85e6-5085346b8fb0",
        "parentId" : "6f02a849-6edf-4669-8c69-c564f0212403",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Yes, this is planned https://github.com/kubernetes/kubernetes/issues/90962",
        "createdAt" : "2020-06-10T02:02:09Z",
        "updatedAt" : "2020-06-12T02:00:32Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6f2acd5338976dfbda0928344a5093b6728a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +37,41 @@\tDefaultBindTimeoutSeconds = 600\n\n\tstateKey framework.StateKey = Name\n)\n"
  },
  {
    "id" : "56d82a67-2761-4790-853e-284db0645b45",
    "prId" : 91705,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91705#pullrequestreview-432894577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d20900d5-48aa-45b0-adfb-772188bd4606",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "@cofyc this function needs to be idempotent, meaning ```Unreserve``` could be called multiple times for the same pod in the same cycle, it could also be called when ```Reserve``` wasn't.",
        "createdAt" : "2020-06-17T22:37:35Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "aff2cb59-36a4-42c9-8793-417a55d563a7",
        "parentId" : "d20900d5-48aa-45b0-adfb-772188bd4606",
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "I think this function is idempotent.",
        "createdAt" : "2020-06-18T02:09:47Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      },
      {
        "id" : "e5636059-f39f-4c5e-a590-859ef465e0bb",
        "parentId" : "d20900d5-48aa-45b0-adfb-772188bd4606",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "it is idempotent as it does nothing if no cache or binding state found",
        "createdAt" : "2020-06-18T02:10:44Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "b98b8ab3-b944-4ecc-b15a-6baeafd81e69",
        "parentId" : "d20900d5-48aa-45b0-adfb-772188bd4606",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "@mrkm4ntr maybe it's better to clarify it in the comment, e.g. It's idempotent, and does nothing if no cache or binding state found for the given pod.",
        "createdAt" : "2020-06-18T02:16:09Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "85dd64d3-3e3e-4b70-981f-6d9bdb4bfc10",
        "parentId" : "d20900d5-48aa-45b0-adfb-772188bd4606",
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "OK!",
        "createdAt" : "2020-06-18T02:17:12Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ab958996f4a1d1ebcd20b695624a73d664883f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +158,162 @@}\n\n// Unreserve clears assumed PV and PVC cache and pod binding state.\n// It's idempotent, and does nothing if no cache or binding state found for the given pod.\nfunc (pl *VolumeBinding) Unreserve(ctx context.Context, cs *framework.CycleState, pod *v1.Pod, nodeName string) {"
  },
  {
    "id" : "fe388c92-62f0-4900-8731-d6a4d04fe9f2",
    "prId" : 91705,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91705#pullrequestreview-433897408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dca5ac0-9254-4520-a9f5-f34952367e78",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Thank you for the PR! Is it possible to add a unit test for this scenario that we're fixing?",
        "createdAt" : "2020-06-18T22:26:24Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "363ec442-6cb2-4a8f-9cf1-e30883f2bb29",
        "parentId" : "5dca5ac0-9254-4520-a9f5-f34952367e78",
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "I've added a unit test for SchedulerVolumeBinder. I can add a unit test that checks RevertAssumedPodVolumes is called in Unreserve, but I don't think it would make much sense.",
        "createdAt" : "2020-06-19T08:28:16Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ab958996f4a1d1ebcd20b695624a73d664883f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +161,165 @@// It's idempotent, and does nothing if no cache or binding state found for the given pod.\nfunc (pl *VolumeBinding) Unreserve(ctx context.Context, cs *framework.CycleState, pod *v1.Pod, nodeName string) {\n\tpl.Binder.RevertAssumedPodVolumes(pod, nodeName)\n\tpl.Binder.DeletePodBindings(pod)\n\treturn"
  },
  {
    "id" : "aefefe89-0d1d-4d9f-a24e-ebb1ff3a7800",
    "prId" : 86530,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86530#pullrequestreview-335699066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1e35175-5adc-4fd3-9508-8c57e2026f53",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Lets handle the error here and try to cut the dependency on the ```migration``` package:\r\n\r\n```\r\nif err != nil {\r\n  return framework.NewStatus(framework.Error, err.Error())\r\n}\r\n```",
        "createdAt" : "2019-12-23T03:34:41Z",
        "updatedAt" : "2019-12-23T13:58:24Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "83408acf757e9c0298004e71a31b5fd0a9358540",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +74,78 @@\n\tunboundSatisfied, boundSatisfied, err := pl.binder.Binder.FindPodVolumes(pod, node)\n\n\tif err != nil {\n\t\treturn framework.NewStatus(framework.Error, err.Error())"
  },
  {
    "id" : "4a2db759-042e-4921-aebc-e241372fc010",
    "prId" : 83726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83726#pullrequestreview-407858081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd1478d8-4dd9-44f6-9bfe-052ed689a42a",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "this alias is unnecessary",
        "createdAt" : "2020-04-28T20:52:28Z",
        "updatedAt" : "2020-05-13T02:57:53Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "91c91fa6-e9f4-4124-8e86-0ab90d38e328",
        "parentId" : "bd1478d8-4dd9-44f6-9bfe-052ed689a42a",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "it conflicts with `k8s.io/apimachinery/pkg/runtime`",
        "createdAt" : "2020-04-29T14:30:26Z",
        "updatedAt" : "2020-05-13T02:57:53Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "d0cd2437-c136-462d-93b1-bf2360747db9",
        "parentId" : "bd1478d8-4dd9-44f6-9bfe-052ed689a42a",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Oops, missed it, sorry",
        "createdAt" : "2020-05-07T21:59:42Z",
        "updatedAt" : "2020-05-13T02:57:53Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "85a8740d9b53185cd4fee19935b7da2af7fc9c23",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +24,28 @@\tv1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\tutilruntime \"k8s.io/apimachinery/pkg/util/runtime\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/klog\""
  },
  {
    "id" : "c677bcc2-8840-448b-bb23-c005a29c8108",
    "prId" : 83726,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83726#pullrequestreview-407858081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57bd03bf-5c7b-446a-a20f-e21d67faacd5",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`BindTimeoutSeconds = 100` in `scheduler.go` is moved here. I changed `100` to `600` (default in api types) because `100` in `scheduler.go` is never used actually (overridden by  `ComponentConfig.BindTimeoutSeconds`)\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/be02fe578588592ee67811ed809eef0a4495537a/pkg/scheduler/apis/config/v1alpha2/defaults.go#L132-L135\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/be02fe578588592ee67811ed809eef0a4495537a/cmd/kube-scheduler/app/server.go#L335-L337",
        "createdAt" : "2020-05-07T08:56:56Z",
        "updatedAt" : "2020-05-13T02:57:53Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "b6494323-c805-4da3-ac21-7ef439541e0d",
        "parentId" : "57bd03bf-5c7b-446a-a20f-e21d67faacd5",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I see, sounds good.",
        "createdAt" : "2020-05-07T22:00:22Z",
        "updatedAt" : "2020-05-13T02:57:53Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "85a8740d9b53185cd4fee19935b7da2af7fc9c23",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +34,38 @@const (\n\t// DefaultBindTimeoutSeconds defines the default bind timeout in seconds\n\tDefaultBindTimeoutSeconds = 600\n\n\tallBoundStateKey framework.StateKey = \"volumebinding:all-bound\""
  }
]