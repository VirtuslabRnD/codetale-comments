[
  {
    "id" : "cbf4f3ba-970b-4064-8dad-bae2402c7845",
    "prId" : 101822,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101822#pullrequestreview-664418987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Do we want to register Fit as a score plugin in default provider? If so, we should check if its scoringStrategy is nil here.",
        "createdAt" : "2021-05-17T21:11:27Z",
        "updatedAt" : "2021-05-17T21:27:24Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "be694c25-d6f4-4f43-a623-125cc137386c",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> Do we want to register Fit as a score plugin in default provider?\r\n\r\nYes, but registering is for a followup PR. \r\n\r\n> If so, we should check if its scoringStrategy is nil here.\r\n\r\nYes, I think it is better if we don't embed the `resourceAllocationScorer` in line 70 above, rather make it a reference that we check here (we could fatal since it shouldn't really happen if the plugin config is properly defaulted)",
        "createdAt" : "2021-05-17T22:29:56Z",
        "updatedAt" : "2021-05-17T22:29:57Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "3fbb1ddd-4617-47cf-a3de-9531bccd1dde",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Sort of. There is nothing being shared between the Filtering and Scoring parts, so I'm thinking if we should leave `Fit` as a pure Filter plugin, say not polymorphed to a Score plugin, and then put the scoring stuff into a separate Score struct.",
        "createdAt" : "2021-05-17T23:12:44Z",
        "updatedAt" : "2021-05-17T23:12:44Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "8f4a3e54-404c-43a5-9ff5-53da33dbaa37",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Other features, node affinity, taints/tolerations, pod affinity and topology spread all have filter and score, why not apply the same pattern here?",
        "createdAt" : "2021-05-17T23:58:50Z",
        "updatedAt" : "2021-05-17T23:58:50Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "1c6a8f13-8faf-444a-b1b5-6ac75705ee17",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "By separating, I thought it might be possible to register it as a score plugin _dynamically_, and hence don't need to do the \"if\" check in Score() function. But it seems more complicated, so never mind.",
        "createdAt" : "2021-05-18T01:08:12Z",
        "updatedAt" : "2021-05-18T01:08:12Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "c74c91ad-473b-4d3e-9ce3-fb25578433eb",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> Yes, I think it is better if we don't embed the resourceAllocationScorer in line 70 above, rather make it a reference that we check here (we could fatal since it shouldn't really happen if the plugin config is properly defaulted)\r\n\r\n@yuzhiquan can you please address this one.",
        "createdAt" : "2021-05-19T16:03:15Z",
        "updatedAt" : "2021-05-19T16:05:01Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "278f8572-df1a-47d8-8fad-b34a10ab12c5",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "ac20bfc0-048b-4f7c-8f40-c004ff5299e1",
        "body" : "@ahg-g Maybe i'm not understand this `I think it is better if we don't embed the resourceAllocationScorer in line 70 above, rather make it a reference that we check here` clearly, but we do check scoringStrategy !=nil in newFit and ValidateNodeResourcesFitArgs.If fit as default score plugin, scoringStrategy == nil will not allowed?",
        "createdAt" : "2021-05-20T02:54:50Z",
        "updatedAt" : "2021-05-20T02:54:51Z",
        "lastEditedBy" : "ac20bfc0-048b-4f7c-8f40-c004ff5299e1",
        "tags" : [
        ]
      },
      {
        "id" : "7e473784-8777-497f-85e5-bb52e59bf399",
        "parentId" : "11ae07b0-d4a7-40f6-b0dd-81efaa82568f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Yeah, as I mentioned, this is not supposed to happen if we are properly defaulting the plugin args. A better check is to return an error in NewFit if args.ScoringStrategy == nil.\r\n\r\n",
        "createdAt" : "2021-05-20T13:57:25Z",
        "updatedAt" : "2021-05-20T20:48:41Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb14b995acf9acd3d7efc1e3fcdb640f09ebdb9",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +331,335 @@// Score invoked at the Score extension point.\nfunc (f *Fit) Score(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) (int64, *framework.Status) {\n\tnodeInfo, err := f.handle.SnapshotSharedLister().NodeInfos().Get(nodeName)\n\tif err != nil {\n\t\treturn 0, framework.AsStatus(fmt.Errorf(\"getting node %q from Snapshot: %w\", nodeName, err))"
  },
  {
    "id" : "cb54f158-bc8d-46af-8ea7-2e6637c8dcbe",
    "prId" : 101822,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101822#pullrequestreview-685730341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fd98079-41af-4b0f-8b5f-a233a80e4aa5",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Alternatively, you can define a map which map from `ScoringStrategyType` to `scorer` directly, and initialize the `resourceAllocationScorer` at the end, this will help to reduce lot of duplicated code here.",
        "createdAt" : "2021-06-11T11:01:04Z",
        "updatedAt" : "2021-06-11T11:05:26Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "16d4b800-35ed-4298-875a-4877d600dd34",
        "parentId" : "2fd98079-41af-4b0f-8b5f-a233a80e4aa5",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "I don't see too much duplication, it is simple instantiation, I think this is fine as is.",
        "createdAt" : "2021-06-16T22:55:38Z",
        "updatedAt" : "2021-06-16T22:55:38Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb14b995acf9acd3d7efc1e3fcdb640f09ebdb9",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +73,77 @@\t\t}\n\t},\n}\n\n// Fit is a plugin that checks if a node has sufficient resources."
  },
  {
    "id" : "b1462495-53fe-46bc-82cd-55da2e5c66dc",
    "prId" : 99922,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99922#pullrequestreview-606664432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a69b51-75d6-4a4b-919e-ce2746a1f7f2",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "What about Update? https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/1287-in-place-update-pod-resources#scheduler-and-api-server-interaction",
        "createdAt" : "2021-03-08T19:30:58Z",
        "updatedAt" : "2021-03-08T23:24:38Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "672a1f39-d940-48b1-a9a6-06881ded5d75",
        "parentId" : "d8a69b51-75d6-4a4b-919e-ce2746a1f7f2",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Yes, update should be added when \"in-place-update\" is supported in scheduler, also more importantly, we need to update the logic of `AssignedPodUpdated`:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/c7fef196b60856420ce3f0470acd1093ab1d9b5f/pkg/scheduler/internal/queue/scheduling_queue.go#L516-L520\r\n\r\nSo in other words, even we register PodUpdate, it's a no-op as it's blocked by `AssignedPodUpdated`.",
        "createdAt" : "2021-03-08T20:08:04Z",
        "updatedAt" : "2021-03-08T23:24:38Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "e86a72add72b5010e5892180902009a2c523dd1d",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +198,202 @@func (f *Fit) EventsToRegister() []framework.ClusterEvent {\n\treturn []framework.ClusterEvent{\n\t\t{Resource: framework.Pod, ActionType: framework.Delete},\n\t\t{Resource: framework.Node, ActionType: framework.Add | framework.UpdateNodeAllocatable},\n\t}"
  },
  {
    "id" : "91209456-1a69-4ece-9d7c-6f04774211f8",
    "prId" : 99389,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99389#pullrequestreview-598084556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2a44f1e-7fd0-4d05-af07-b0ee828ca7c5",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It looks like something changed the permissions of this file. Please revert.",
        "createdAt" : "2021-02-24T14:38:09Z",
        "updatedAt" : "2021-03-08T02:28:18Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "a91620de-c607-4ccb-8804-705d8a1a73b9",
        "parentId" : "f2a44f1e-7fd0-4d05-af07-b0ee828ca7c5",
        "authorId" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "body" : "Done.",
        "createdAt" : "2021-02-25T01:37:23Z",
        "updatedAt" : "2021-03-08T02:28:18Z",
        "lastEditedBy" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "61cd099bc1b27a049306c06a0c7691c448296738",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +177,181 @@\nfunc getPreFilterState(cycleState *framework.CycleState) (*preFilterState, error) {\n\tc, err := cycleState.Read(preFilterStateKey)\n\tif err != nil {\n\t\t// preFilterState doesn't exist, likely PreFilter wasn't invoked."
  },
  {
    "id" : "e3abc203-19fb-4d2f-b776-e1622c2ed8dd",
    "prId" : 98583,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98583#pullrequestreview-585961436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d452249a-a567-4d27-99a4-66e39bb10f30",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "should we have the beta features enabled by default? It might save some surprises in tests or other unforeseen users",
        "createdAt" : "2021-02-08T19:10:36Z",
        "updatedAt" : "2021-04-30T17:22:26Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "b6dcdf23-eff7-4175-8cde-83493eacd0cd",
        "parentId" : "d452249a-a567-4d27-99a4-66e39bb10f30",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "this is going to be hard to track though, and so will likely cause inconsistencies. ",
        "createdAt" : "2021-02-08T22:04:52Z",
        "updatedAt" : "2021-04-30T17:22:26Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a77ebe28b75187fc06dcd5a807b4877d524b29a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +78,82 @@\treturn &Fit{\n\t\tignoredResources:      sets.NewString(args.IgnoredResources...),\n\t\tignoredResourceGroups: sets.NewString(args.IgnoredResourceGroups...),\n\t\tenablePodOverhead:     fts.EnablePodOverhead,\n\t}, nil"
  },
  {
    "id" : "04b50d5d-427c-400f-8d03-962e075b2d8a",
    "prId" : 88842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88842#pullrequestreview-427180094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Are both `example.com` and `example.com/` valid?\r\n",
        "createdAt" : "2020-04-14T13:33:55Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c87655d7-800d-47cd-8afe-b7392df308a8",
        "parentId" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "authorId" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "body" : "`example.com` is valid and `example.com/` is not valid.",
        "createdAt" : "2020-04-15T01:51:51Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "tags" : [
        ]
      },
      {
        "id" : "36924e69-d1fc-495e-b016-71130bf5b2be",
        "parentId" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Please add a test for this",
        "createdAt" : "2020-04-15T14:21:28Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "a4e2ba43-a5d8-4d1c-af3c-ae41a37639dd",
        "parentId" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would this allow specifying `example.com/foo` in `IgnoredResourceGroups`? that wouldn't be effective, right, given the matcher checks if the resource has a prefix of `ignoredGroup + \"/\"`?",
        "createdAt" : "2020-05-04T16:47:20Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "94253402-7d73-46d6-8361-a0caf1589931",
        "parentId" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "If you use `example.com/foo`, then you are intending to match something like `example.com/foo/bar`, but not `example.com/foo`",
        "createdAt" : "2020-05-07T14:58:20Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "26318dc4-6519-4d3f-9f3d-438c30b52aae",
        "parentId" : "443887ac-b0ee-46f4-9e10-ba2ab7519b8c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same question about whether `ValidateLabelName` is actually what we want here ",
        "createdAt" : "2020-06-09T13:59:29Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b21b298074d2fdcec504db738a0c29e24de34fee",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\t\tallErrs = append(allErrs, field.Invalid(path, group, \"resource group name can't contain '/'\"))\n\t\t}\n\t\tif errs := metav1validation.ValidateLabelName(group, path); len(errs) != 0 {\n\t\t\tallErrs = append(allErrs, errs...)\n\t\t}"
  },
  {
    "id" : "8b6d8c8a-2f12-4b67-9f15-548e462a2ba1",
    "prId" : 88842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88842#pullrequestreview-405178980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02494277-48e1-44ca-8055-da56d6e53633",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this tighten validation on an existing configuration file? what would have happened before if values that didn't pass ValidateLabelName were passed in this config field?",
        "createdAt" : "2020-05-04T16:46:30Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1d2bfb33-053c-4132-afd7-54ccff8da359",
        "parentId" : "02494277-48e1-44ca-8055-da56d6e53633",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It wouldn't have matched any resources. But it wouldn't fail to start a scheduler.",
        "createdAt" : "2020-05-04T17:06:23Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "b21b298074d2fdcec504db738a0c29e24de34fee",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\tif errs := metav1validation.ValidateLabelName(res, path); len(errs) != 0 {\n\t\t\tallErrs = append(allErrs, errs...)\n\t\t}\n\t}\n"
  },
  {
    "id" : "bcbe867a-8f37-4033-87a6-69f49b488d4f",
    "prId" : 88842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88842#pullrequestreview-410924661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92621734-91d0-4c35-a519-58b8678c7baf",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "This conditional seems unnecessary.\r\n\r\nHowever, if you have `example.com` in `ignoredResourceGroups`, but not in `ignoredResources`, the resource `example.com` would be ignored. Is this what you want?\r\n\r\nThis needs to be very clear in the godoc for the type.",
        "createdAt" : "2020-05-08T13:58:27Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "fc6e63cf-8732-468f-8b1d-db4549fd6a7d",
        "parentId" : "92621734-91d0-4c35-a519-58b8678c7baf",
        "authorId" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "body" : "the resource `example.com` is invalid since it's not an extended resource.",
        "createdAt" : "2020-05-09T03:36:56Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "tags" : [
        ]
      },
      {
        "id" : "741e810c-0580-411c-866c-bd581a313e41",
        "parentId" : "92621734-91d0-4c35-a519-58b8678c7baf",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "add a comment saying that `rName` is guaranteed to have a slash due to API validation.",
        "createdAt" : "2020-05-13T13:33:54Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "b21b298074d2fdcec504db738a0c29e24de34fee",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t\t// rName is guaranteed to have a slash due to API validation.\n\t\t\tvar rNamePrefix string\n\t\t\tif ignoredResourceGroups.Len() > 0 {\n\t\t\t\trNamePrefix = strings.Split(string(rName), \"/\")[0]\n\t\t\t}"
  },
  {
    "id" : "7b10ee87-1e06-4370-b17a-7bd931ad10bc",
    "prId" : 88842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88842#pullrequestreview-427673214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37e50490-723e-46b9-9e38-91133e4ff877",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is `ValidateLabelName` what is used to validate resource names specified in a pod or does it just happen to have similar characteristics? are all resource names valid labels?",
        "createdAt" : "2020-06-09T13:59:14Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "dfdd7641-cefc-49d1-abf2-7f5737d9ce6d",
        "parentId" : "37e50490-723e-46b9-9e38-91133e4ff877",
        "authorId" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "body" : "It is the latter. Yes, all resource names are valid labels.",
        "createdAt" : "2020-06-10T02:43:18Z",
        "updatedAt" : "2020-06-10T02:53:59Z",
        "lastEditedBy" : "6ffc7dc0-dec3-4449-a489-81187ad34f1a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b21b298074d2fdcec504db738a0c29e24de34fee",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +72,76 @@\tfor i, res := range args.IgnoredResources {\n\t\tpath := resPath.Index(i)\n\t\tif errs := metav1validation.ValidateLabelName(res, path); len(errs) != 0 {\n\t\t\tallErrs = append(allErrs, errs...)\n\t\t}"
  },
  {
    "id" : "bc173bf0-50da-49c3-88bd-4a8dc73c350d",
    "prId" : 88585,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88585#pullrequestreview-366570066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8da15fc9-0e1b-4bb9-93dd-1eaa79cc765f",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Ditto. Use internal version from `\"k8s.io/kubernetes/pkg/scheduler/apis/config\"`.",
        "createdAt" : "2020-02-28T18:00:56Z",
        "updatedAt" : "2020-04-08T19:24:22Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4d20ca8a8d577ad11b1f7440d3896a17458074d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +65,69 @@// NewFit initializes a new plugin and returns it.\nfunc NewFit(plArgs *runtime.Unknown, _ framework.FrameworkHandle) (framework.Plugin, error) {\n\targs := &schedulerv1alpha2.NodeResourcesFitArgs{}\n\tif err := framework.DecodeInto(plArgs, args); err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "304ab648-4746-4879-8372-efe7a6eeca43",
    "prId" : 87788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87788#pullrequestreview-354215833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed1d99f5-cbc1-4b26-8533-75fb96940af0",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Pre-allocating both the len and cap for a slice can be _slightly_ faster:\r\n\r\n\r\n```go\r\nfailureReasons := make([]string, len(insufficientResources))\r\nfor i, r := range insufficientResources {\r\n\tfailureReasons[i] = r.Reason\r\n}\r\n```",
        "createdAt" : "2020-02-06T06:00:17Z",
        "updatedAt" : "2020-02-06T06:00:18Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a476eb7d4a8760e5ec82dee39878417a3c6e7c2",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +165,169 @@\t\tfor _, r := range insufficientResources {\n\t\t\tfailureReasons = append(failureReasons, r.Reason)\n\t\t}\n\t\treturn framework.NewStatus(framework.Unschedulable, failureReasons...)\n\t}"
  }
]