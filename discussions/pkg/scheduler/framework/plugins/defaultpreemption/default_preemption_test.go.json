[
  {
    "id" : "baee2a2b-1f48-4cf7-96e9-b17a0b7b66f0",
    "prId" : 102645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102645#pullrequestreview-681256243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Moving this here is b/c with a non-nil podLister, `informerFactory.WaitForCacheSync(ctx.Done())` at L1023 would somehow change the internal `rand` behavior, and cause a unexpected `offset` in L1046.",
        "createdAt" : "2021-06-07T04:43:52Z",
        "updatedAt" : "2021-06-07T04:43:52Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "519ba7af-39b4-46db-9742-c89b86a041c7",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "add a comment on what this is for (stable tests, I suppose)",
        "createdAt" : "2021-06-07T17:31:23Z",
        "updatedAt" : "2021-06-07T17:32:00Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c9ed2680-2655-4b2b-a30a-e8be249c6ff1",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "done.",
        "createdAt" : "2021-06-09T05:40:29Z",
        "updatedAt" : "2021-06-09T05:40:29Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "dbb3c000-5897-4979-a36f-05112bdbedfd",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "the remaining question (prior to this PR) is why do we need to fix the seed in the first place.",
        "createdAt" : "2021-06-09T13:44:35Z",
        "updatedAt" : "2021-06-09T13:44:54Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "80f6650c-299f-4dde-9526-ad955a3b03f5",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I _think_ the original intention is to test `getOffsetAndNumCandidates()` in a deterministic manner, and 4 was chosen as the seed. https://play.golang.org/p/zkp91GhH2BG is consistent with the comment: https://github.com/kubernetes/kubernetes/blob/b049e1b9ab4a8604c0803bf4deada36116884e26/pkg/scheduler/framework/plugins/defaultpreemption/default_preemption_test.go#L778\r\n\r\n",
        "createdAt" : "2021-06-09T16:34:10Z",
        "updatedAt" : "2021-06-09T16:34:11Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "adcac58d-1d0c-4665-a0c9-6c9c808cede9",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "nit: the comment should say: `Fixing seed to deterministically test dryRunPreemption. We need to do it after informerFactory.WaitforCacheSync which might set a seed`.\r\n\r\nThat said, this test is named TestDryRunPreemption, not `TestGetOffsetAndNumCandidates`, so it should just fix the offset rather than fixing the seed. It makes the test hard to read. @chendave can you take this?",
        "createdAt" : "2021-06-10T14:25:24Z",
        "updatedAt" : "2021-06-10T14:27:56Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "b1eab252-bd9c-4a32-a75b-996e0a0b303a",
        "parentId" : "1a916e71-f894-4a2c-bd0b-f7a589bcd821",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "update. PTAL.",
        "createdAt" : "2021-06-10T21:01:22Z",
        "updatedAt" : "2021-06-10T21:01:22Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "36eaa11d50b0d95afe63652c03e6492809252c4d",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1039,1043 @@\t\t\t// However, we need to do it after informerFactory.WaitforCacheSync() which might\n\t\t\t// set a seed.\n\t\t\trand.Seed(4)\n\t\t\tvar prevNumFilterCalled int32\n\t\t\tfor cycle, pod := range tt.testPods {"
  },
  {
    "id" : "c488677e-b82b-45ec-ba74-7a31865ac286",
    "prId" : 102645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102645#pullrequestreview-677341967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8a0c632-1037-4039-855a-5230f69cb110",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ditto, can we don something like this: ```objs = append(objs, tt.pods...)```?",
        "createdAt" : "2021-06-07T12:27:29Z",
        "updatedAt" : "2021-06-07T12:31:08Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "36eaa11d50b0d95afe63652c03e6492809252c4d",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1237,1241 @@\t\t\tfor _, pod := range tt.pods {\n\t\t\t\tobjs = append(objs, pod)\n\t\t\t}\n\t\t\tcs := clientsetfake.NewSimpleClientset(objs...)\n\t\t\tinformerFactory := informers.NewSharedInformerFactory(cs, 0)"
  },
  {
    "id" : "5f404df6-8d7b-4462-96cf-e2bb53291de1",
    "prId" : 102645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102645#pullrequestreview-677662530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "379fd095-b616-4e48-bd38-cc7b07a0aeb0",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "can we do something like the following?\r\n```\r\nobjs := append([]runtime.Object{}, tt.testPods...)\r\nobjs = append(objs, tt.initPods...)\r\nobjs = append(objs, nodes...)\r\n\r\n```",
        "createdAt" : "2021-06-07T12:30:34Z",
        "updatedAt" : "2021-06-07T12:31:08Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "3db3df99-fa5f-4278-a895-b342971168ac",
        "parentId" : "379fd095-b616-4e48-bd38-cc7b07a0aeb0",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Unfortunately not - Go doesn't support generic type yet :)",
        "createdAt" : "2021-06-07T16:52:45Z",
        "updatedAt" : "2021-06-07T16:52:45Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "36eaa11d50b0d95afe63652c03e6492809252c4d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +998,1002 @@\t\t\tfor _, n := range nodes {\n\t\t\t\tobjs = append(objs, n)\n\t\t\t}\n\t\t\tinformerFactory := informers.NewSharedInformerFactory(clientsetfake.NewSimpleClientset(objs...), 0)\n\t\t\tparallelism := parallelize.DefaultParallelism"
  },
  {
    "id" : "a71d3612-15a1-4b2b-8889-e11e42dc21f5",
    "prId" : 101560,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101560#pullrequestreview-651576625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43e96e22-6a9c-4d4a-ae48-ab4b495b61b7",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "You can remove the first sub-test \"No node needs preemption\".",
        "createdAt" : "2021-05-04T05:21:02Z",
        "updatedAt" : "2021-05-05T02:30:29Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "82f69d05-95bf-4695-a2df-e9e1e99c5946",
        "parentId" : "43e96e22-6a9c-4d4a-ae48-ab4b495b61b7",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Bump.",
        "createdAt" : "2021-05-04T16:46:14Z",
        "updatedAt" : "2021-05-05T02:30:29Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "2ad8f6de-145d-437a-afa4-bc6837609172",
        "parentId" : "43e96e22-6a9c-4d4a-ae48-ab4b495b61b7",
        "authorId" : "98e767be-1d9e-41bb-ae64-c1a4a183c8c0",
        "body" : "deleted the test case.",
        "createdAt" : "2021-05-04T19:10:53Z",
        "updatedAt" : "2021-05-05T02:30:29Z",
        "lastEditedBy" : "98e767be-1d9e-41bb-ae64-c1a4a183c8c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "fce28dbac9c8223d627db7dde17463826c61ea40",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +1249,1253 @@\t\t\tif s == nil || len(s.Name()) == 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfound := false\n\t\t\tfor _, nodeName := range tt.expected {"
  },
  {
    "id" : "dcc34891-ba23-4116-bdd6-6cb10c580bed",
    "prId" : 98129,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98129#pullrequestreview-578165684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62c76a52-f975-4fd6-9993-08f0c79589b6",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Can you add a test like: 2 nodes failed on nodesWherePreemptionMightHelp() (due to UnschedulableAndUnresolvable status), and 2 nodes failed in dryRunPreemption()?",
        "createdAt" : "2021-01-28T06:58:03Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4916e87a-5e7d-4163-8cd9-2381212de485",
        "parentId" : "62c76a52-f975-4fd6-9993-08f0c79589b6",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Done",
        "createdAt" : "2021-01-28T10:02:07Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5a266a0314b714bcf443e0fb08bdbf916d2498",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +155,159 @@\t\t\t},\n\t\t\twantResult: nil,\n\t\t\twantStatus: framework.NewStatus(framework.Unschedulable, \"0/1 nodes are available: 1 Preemption is not helpful for scheduling.\"),\n\t\t},\n\t\t{"
  },
  {
    "id" : "4d148ca2-3c19-428e-9359-307b4b0e6959",
    "prId" : 95631,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95631#pullrequestreview-512979701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59062604-b217-4576-b2c3-613439847e81",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why is this necessary now?",
        "createdAt" : "2020-10-20T09:20:36Z",
        "updatedAt" : "2020-10-20T09:30:01Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "a8ca7230-efec-41ee-a07b-a84fc96221e8",
        "parentId" : "59062604-b217-4576-b2c3-613439847e81",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Because when default spreading is enabled, we require the informers for Services and so on.",
        "createdAt" : "2020-10-20T13:56:10Z",
        "updatedAt" : "2020-10-20T13:56:24Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "89fd0fb5-e0d7-4e52-9060-fcd64e9e9eea",
        "parentId" : "59062604-b217-4576-b2c3-613439847e81",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ok, and we were not using selectorspread in the tests (which would have required this).",
        "createdAt" : "2020-10-20T14:04:53Z",
        "updatedAt" : "2020-10-20T14:04:56Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "71a57a1a-956b-426a-94ca-78a2936664d0",
        "parentId" : "59062604-b217-4576-b2c3-613439847e81",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "/hold\r\nI didn't stop to think about that. Let me check",
        "createdAt" : "2020-10-20T14:12:07Z",
        "updatedAt" : "2020-10-20T14:12:08Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "2a743fb7-2110-4d6d-83c7-4def277ed04d",
        "parentId" : "59062604-b217-4576-b2c3-613439847e81",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "/hold cancel\r\n\r\nThere is a test for preemption when there is hard topology spreading, which now has constraints by default.",
        "createdAt" : "2020-10-20T14:20:18Z",
        "updatedAt" : "2020-10-20T14:20:18Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "21ade5c2-52e1-4f7b-8f1b-e231be505a28",
        "parentId" : "59062604-b217-4576-b2c3-613439847e81",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Yes, the test that registers PodTopologySpread plugin now has a system default constraints, and it can pass only with a non-nil informerFactory::\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/af1c8935d9f1f42767c6f5211a668e44a15946b4/pkg/scheduler/framework/plugins/podtopologyspread/plugin.go#L96-L99\r\n\r\n",
        "createdAt" : "2020-10-20T17:40:01Z",
        "updatedAt" : "2020-10-20T17:40:01Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c8349bdc24cd0f984b025c18605483e7e0c57c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +670,674 @@\t\t\t\tframeworkruntime.WithPodNominator(internalqueue.NewPodNominator()),\n\t\t\t\tframeworkruntime.WithSnapshotSharedLister(snapshot),\n\t\t\t\tframeworkruntime.WithInformerFactory(informerFactory),\n\t\t\t)\n\t\t\tif err != nil {"
  },
  {
    "id" : "8908039e-d5e9-48a7-80f7-7a76bec43e5e",
    "prId" : 94814,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94814#pullrequestreview-499765959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f81e3d7e-c837-48a5-90d2-8e942ceb7554",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Can you add a testPod \"tp3\" to verify the with slice boundaries? tp3 is expected to come up with candidates [node5, node1], right?",
        "createdAt" : "2020-09-30T19:10:37Z",
        "updatedAt" : "2020-11-04T22:40:12Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "0d3def63-8649-4187-91f9-9c67f0f71aff",
        "parentId" : "f81e3d7e-c837-48a5-90d2-8e942ceb7554",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "Great point! Done.",
        "createdAt" : "2020-09-30T19:58:45Z",
        "updatedAt" : "2020-11-04T22:40:12Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d94b53ca43e0f1087a7b9c2e5809e6430c6b53",
    "line" : 711,
    "diffHunk" : "@@ -1,1 +782,786 @@\t\t\ttestPods: []*v1.Pod{\n\t\t\t\tst.MakePod().Name(\"tp1\").UID(\"tp1\").Priority(highPriority).Req(largeRes).Obj(),\n\t\t\t\tst.MakePod().Name(\"tp2\").UID(\"tp2\").Priority(highPriority).Req(largeRes).Obj(),\n\t\t\t\tst.MakePod().Name(\"tp3\").UID(\"tp3\").Priority(highPriority).Req(largeRes).Obj(),\n\t\t\t},"
  },
  {
    "id" : "24bc7c27-d877-4d7c-abb2-739567d29748",
    "prId" : 94814,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94814#pullrequestreview-499765887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c6fd1d9-57c5-41b2-9df2-0c268838e77d",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Is this necessary? I'd assume the test cases to have specified the nodes ordered by name.",
        "createdAt" : "2020-09-30T19:17:17Z",
        "updatedAt" : "2020-11-04T22:40:12Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "05957e00-df6e-49e0-95c5-9891c7187b49",
        "parentId" : "5c6fd1d9-57c5-41b2-9df2-0c268838e77d",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "Yes, otherwise the returned node list is in arbitrary order for some reason and there's no way to deterministically test for correct offsets and wrap arounds.",
        "createdAt" : "2020-09-30T19:58:39Z",
        "updatedAt" : "2020-11-04T22:40:12Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d94b53ca43e0f1087a7b9c2e5809e6430c6b53",
    "line" : 871,
    "diffHunk" : "@@ -1,1 +953,957 @@\t\t\tsort.Slice(nodeInfos, func(i, j int) bool {\n\t\t\t\treturn nodeInfos[i].Node().Name < nodeInfos[j].Node().Name\n\t\t\t})\n\n\t\t\tif tt.disableParallelism {"
  },
  {
    "id" : "567f4a50-3fb8-4c67-b917-6c7a29305c25",
    "prId" : 92752,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92752#pullrequestreview-442908353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98895d6a-aa08-42a8-9465-4896483e168d",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "I reverted the \"node\" to \"machine\" cause the extender used here is still using \"machine\" instead of \"node\", this will make the this testcase invalid without the change here.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/865cbf0bdfb4ae0d6cb5029ffacea127cd42e89c/pkg/scheduler/testing/fake_extender.go#L62-L67\r\n\r\nAs there are still other occurrences of \"machine\" in other testcase. I will propose another PR to address it instead of mess up this PR. ",
        "createdAt" : "2020-07-06T08:25:22Z",
        "updatedAt" : "2020-07-07T01:56:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "72533ac2-34c0-41f0-83ee-2ddeae35dd2c",
        "parentId" : "98895d6a-aa08-42a8-9465-4896483e168d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "cc @Huang-Wei ",
        "createdAt" : "2020-07-06T08:25:47Z",
        "updatedAt" : "2020-07-07T01:56:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "6fa3e2ae-67d2-4608-8802-3932a576984e",
        "parentId" : "98895d6a-aa08-42a8-9465-4896483e168d",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "see: https://github.com/kubernetes/kubernetes/pull/92819",
        "createdAt" : "2020-07-06T09:16:35Z",
        "updatedAt" : "2020-07-07T01:56:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "028af0970f7f9f688ff8b44003eb2daa5a1568c9",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1151,1155 @@\t\t\t\tst.MakePod().Name(\"p1.1\").UID(\"p1.1\").Node(\"machine1\").Priority(midPriority).Req(smallRes).Obj(),\n\t\t\t\tst.MakePod().Name(\"p1.2\").UID(\"p1.2\").Node(\"machine1\").Priority(lowPriority).Req(smallRes).Obj(),\n\t\t\t\tst.MakePod().Name(\"p2.1\").UID(\"p2.1\").Node(\"machine2\").Priority(midPriority).Req(largeRes).Obj(),\n\t\t\t},\n\t\t\tnodeNames: []string{\"machine1\", \"machine2\"},"
  },
  {
    "id" : "e4aac31e-9103-4771-a626-5f341d4eb824",
    "prId" : 92604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92604#pullrequestreview-441322393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "826fe67c-b4b3-4f10-8935-439cf2175638",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Can you refer to the format of #92571 to rewrite this test a bit?  In particular, use {Node/Pod}Wrapper to build the API objects.",
        "createdAt" : "2020-07-02T00:29:19Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "231e48ef-63b6-44a9-8d5c-8357f039542e",
        "parentId" : "826fe67c-b4b3-4f10-8935-439cf2175638",
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "got it, will do after #92571 merge.",
        "createdAt" : "2020-07-02T03:16:35Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3741f344e76b0db1c16b026842accdcf648da7c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +890,894 @@}\n\nfunc TestPodEligibleToPreemptOthers(t *testing.T) {\n\ttests := []struct {\n\t\tname                string"
  },
  {
    "id" : "01781a62-ce5d-45c2-a217-b75a163a713b",
    "prId" : 92604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92604#pullrequestreview-441975413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9b9db9-13a8-47ac-b2f0-617e4d606166",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "I'd like to expect another test to cover`expected = false`.\r\n\r\n",
        "createdAt" : "2020-07-02T00:33:01Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "204ebef0-b420-48ec-9440-2db6018972e3",
        "parentId" : "cc9b9db9-13a8-47ac-b2f0-617e4d606166",
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "Since there are missing unittests for podEligibleToPreemptOther method, I orginially plan to add more tests in another PR, but I think I can add them in this PR with separated commit. Let me know if it is good way your expected.",
        "createdAt" : "2020-07-02T03:16:45Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      },
      {
        "id" : "cd16f137-86c8-4c86-9ed7-8faad8415e1b",
        "parentId" : "cc9b9db9-13a8-47ac-b2f0-617e4d606166",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "SG.",
        "createdAt" : "2020-07-02T19:44:46Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3741f344e76b0db1c16b026842accdcf648da7c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +931,935 @@\t\t\texpected:            false,\n\t\t},\n\t}\n\n\tfor _, test := range tests {"
  },
  {
    "id" : "80751253-5b07-4923-ac5c-d910dad2267d",
    "prId" : 92604,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92604#pullrequestreview-441801595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c2a26f-f951-4687-a455-522679a24d14",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "You don't need to build a snapshot **_just for_** fetching nodeInfos. Just build the nodeInfos directly, something like:\r\n\r\n```go\r\nvar nodeInfos []*framework.NodeInfo\r\nfor _, name := range nodeNames {\r\n\tni := framework.NewNodeInfo()\r\n\tni.SetNode(st.MakeNode().Name(name).Obj())\r\n\tnodeInfos = append(nodeInfos, ni)\r\n}\r\n```",
        "createdAt" : "2020-07-02T00:37:45Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "2b79840c-a342-4673-92fe-9f4d2c3124b7",
        "parentId" : "56c2a26f-f951-4687-a455-522679a24d14",
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "got it, thanks!",
        "createdAt" : "2020-07-02T03:16:47Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      },
      {
        "id" : "3caaaddd-0e59-4fe3-bb6d-848958d57d8f",
        "parentId" : "56c2a26f-f951-4687-a455-522679a24d14",
        "authorId" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "body" : "sorry, I continue use the snapshot, since the podEligibleToPreemptOthers function is looking for 'framework.NodeInfoLister' which snapshot implement it",
        "createdAt" : "2020-07-02T15:28:49Z",
        "updatedAt" : "2020-07-03T00:32:46Z",
        "lastEditedBy" : "7ec1dfea-3d2a-4eea-8e24-34a7547407f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3741f344e76b0db1c16b026842accdcf648da7c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +938,942 @@\t\t\tnodes = append(nodes, st.MakeNode().Name(n).Obj())\n\t\t}\n\t\tsnapshot := internalcache.NewSnapshot(test.pods, nodes)\n\t\tif got := podEligibleToPreemptOthers(test.pod, snapshot.NodeInfos(), test.nominatedNodeStatus); got != test.expected {\n\t\t\tt.Errorf(\"expected %t, got %t for pod: %s\", test.expected, got, test.pod.Name)"
  }
]