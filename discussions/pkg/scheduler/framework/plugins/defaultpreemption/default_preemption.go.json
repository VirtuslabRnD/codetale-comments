[
  {
    "id" : "758f0193-6308-48a4-a324-112aeddd4f1e",
    "prId" : 98129,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98129#pullrequestreview-570857590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587e0282-c524-4cfd-b543-e4cea6b53771",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "what happens if a node is a part of both maps? should we overwrite the dryRunPreemption status with the unschedulableNodeStatus value?",
        "createdAt" : "2021-01-18T13:52:30Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "4e4412cb-7005-4a87-862e-3d7da9b7205f",
        "parentId" : "587e0282-c524-4cfd-b543-e4cea6b53771",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Not sure if I understand your question correctly, the `unschedulableNodeStatus` we got here are from the nodes that have not evaluated by `dryRunPreemption`. \r\n\r\n`len(unschedulableNodeStatus) + len(potentialNodes) = allNodes`\r\n\r\nI cannnot see where the overwrite could happen.\r\n",
        "createdAt" : "2021-01-19T02:03:20Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5a266a0314b714bcf443e0fb08bdbf916d2498",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +233,237 @@\tcandidates, nodeStatuses := dryRunPreemption(ctx, pl.fh, state, pod, potentialNodes, pdbs, offset, numCandidates)\n\tfor node, status := range unschedulableNodeStatus {\n\t\tnodeStatuses[node] = status\n\t}\n\treturn candidates, nodeStatuses, nil"
  },
  {
    "id" : "d8699254-b44d-4061-b1df-ca4a1c96b3b7",
    "prId" : 98129,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98129#pullrequestreview-578023349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c7b2ab-5267-4912-916d-829e04c98bfd",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "It's not clear to me that how this returned obj is utilized by subsequent PostFilter plugins.",
        "createdAt" : "2021-01-28T00:34:35Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "3eb92e45-061d-4452-bc0e-5a8b5306c01b",
        "parentId" : "81c7b2ab-5267-4912-916d-829e04c98bfd",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "This PR intends to change the public method of `FindCandidates` to return node `status`, so that the calling of this method could get the node status as well.\r\n\r\nQuote from @ahg-g 's initial comments, \r\n> This is just so external preemption plugins that use this interface can benefit from this info, but this is less critical for this PR, so I guess we can leave this here for now.\r\n\r\n\r\nAs to the return `FitError` here, it's used to populate the log message on the preemption failure.  I did some refactoring to move this obj from  line 224 to here, the reason is I need to add the `unschedulableNodeStatus` into the status or else user might confuse that they have for example they have 3 nodes in the cluster, but only give hint on one node that doesn't have enough resource but no idea on what's happening on other two nodes (please see my update on the testcases).\r\n\r\nIn short, it is sill used by log population.",
        "createdAt" : "2021-01-28T02:54:15Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "5b7ec12a-f138-4974-a286-2572489dd64b",
        "parentId" : "81c7b2ab-5267-4912-916d-829e04c98bfd",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "> so that the calling of this method could get the node status as well.\r\n\r\nWell, the current version is not stateless so arguably I doubt if users would like to use it... But I see your point.",
        "createdAt" : "2021-01-28T06:37:57Z",
        "updatedAt" : "2021-02-01T02:50:27Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe5a266a0314b714bcf443e0fb08bdbf916d2498",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +146,150 @@\t// Return a FitError only when there are no candidates that fit the pod.\n\tif len(candidates) == 0 {\n\t\treturn \"\", &framework.FitError{\n\t\t\tPod:         pod,\n\t\t\tNumAllNodes: len(nodeToStautsMap),"
  },
  {
    "id" : "fd36686c-ff85-4ec1-91f7-85589252794e",
    "prId" : 97599,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97599#pullrequestreview-570660612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddbb1461-aedf-4fdc-9ee0-f5ac6b552355",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "It looks like you can change `removePod` to accept a PodInfo",
        "createdAt" : "2021-01-18T14:53:09Z",
        "updatedAt" : "2021-01-18T16:53:14Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "ef160753-3bf9-463e-87e9-c71d6561674e",
        "parentId" : "ddbb1461-aedf-4fdc-9ee0-f5ac6b552355",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "also change the following to use podInfo:\r\n\r\n1) `potentialVictims` should be of type PodInfo\r\n2) change `filterPodsWithPDBViolation`  to accept and return lists of type PodInfo\r\n3) change `addPod` and `reprievePod` to accept PodInfo",
        "createdAt" : "2021-01-18T15:24:09Z",
        "updatedAt" : "2021-01-18T16:53:14Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "e9234499-4fff-4d1f-a828-4513c0c84209",
        "parentId" : "ddbb1461-aedf-4fdc-9ee0-f5ac6b552355",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "It is fine you were planning to do that in a separate PR, but if so, please update the title and description of the PR to indicate that the goal of this PR is to update the `PreFilterExtensions` interface to use PodInfo (not reduce struct initialization).",
        "createdAt" : "2021-01-18T15:31:33Z",
        "updatedAt" : "2021-01-18T16:53:14Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "d7ce1e37-2a37-4ee1-9ea4-1597283b56c8",
        "parentId" : "ddbb1461-aedf-4fdc-9ee0-f5ac6b552355",
        "authorId" : "628143cf-73c8-4c51-bd38-d4079089c756",
        "body" : "Yes, I am working on it locally with one failing test to investigate. Let us keep this PR small and focused.",
        "createdAt" : "2021-01-18T16:56:10Z",
        "updatedAt" : "2021-01-18T16:56:11Z",
        "lastEditedBy" : "628143cf-73c8-4c51-bd38-d4079089c756",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4418c1402188947cac992de96c04e44ad639997",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +604,608 @@\t\t\treturn err\n\t\t}\n\t\tstatus := ph.RunPreFilterExtensionRemovePod(ctx, state, pod, framework.NewPodInfo(rp), nodeInfo)\n\t\tif !status.IsSuccess() {\n\t\t\treturn status.AsError()"
  },
  {
    "id" : "bf614f00-ec6c-437e-bd91-54b92e18d68b",
    "prId" : 97184,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97184#pullrequestreview-566863147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d3db65-c87a-424e-aabe-ee089b322d6c",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "can you add a comment indicating that \"This happens when the pod is not eligible for preemption or extenders filtered all candidates\"",
        "createdAt" : "2021-01-12T20:51:57Z",
        "updatedAt" : "2021-01-15T15:22:24Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "09343b68-a1e4-4a6a-b411-814ce896b3aa",
        "parentId" : "c7d3db65-c87a-424e-aabe-ee089b322d6c",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Done",
        "createdAt" : "2021-01-13T03:10:06Z",
        "updatedAt" : "2021-01-15T15:22:24Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "7315c1f6ddf37e41ae7826a042d057d5f594c10c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +101,105 @@\t}\n\t// This happens when the pod is not eligible for preemption or extenders filtered all candidates.\n\tif nnn == \"\" {\n\t\treturn nil, framework.NewStatus(framework.Unschedulable)\n\t}"
  },
  {
    "id" : "e995cd8d-237e-4530-a647-699db20b176e",
    "prId" : 96929,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96929#pullrequestreview-553384660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04691a4a-4005-4fed-a9cf-f247659bfa53",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "@Huang-Wei  we should avoid returning errors and perhaps replace with status to avoid incorrectly reporting errors in the attempts metric. Perhaps we need a followup PR to make sure this is the case in this file?",
        "createdAt" : "2020-12-16T03:37:11Z",
        "updatedAt" : "2020-12-19T16:19:06Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "3993cfe9-9f1e-41b6-aaf7-ff8b9aa22535",
        "parentId" : "04691a4a-4005-4fed-a9cf-f247659bfa53",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "SGTM, so that we can filter out the abnormal errors.",
        "createdAt" : "2020-12-16T06:16:53Z",
        "updatedAt" : "2020-12-19T16:19:06Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "070773c3996e12c62455c9a920914945a4efe724",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +191,195 @@\t}\n\tif len(allNodes) == 0 {\n\t\treturn nil, fmt.Errorf(\"no nodes available\")\n\t}\n"
  },
  {
    "id" : "b5f1dbd4-80c9-4de4-a5d7-626891af88e9",
    "prId" : 94814,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94814#pullrequestreview-518618842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6993267c-d54e-4702-8889-87da5ab176d6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "returning a subslice here means that callers can modify members of `cl.items` beyond `cl.size()` which will be overwritten if cl.add is called again (see https://play.golang.org/p/Uw_cq4NK4Tz)",
        "createdAt" : "2020-10-07T20:11:49Z",
        "updatedAt" : "2020-11-04T22:40:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a07d961c-c3fe-4c24-a6fb-6451816c772e",
        "parentId" : "6993267c-d54e-4702-8889-87da5ab176d6",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "IMO this isn't a concern. `get()` is guaranteed to be called after all `add()` operations, but perhaps it's worth adding this as a note to the function documentation -- done.",
        "createdAt" : "2020-10-07T21:23:17Z",
        "updatedAt" : "2020-11-04T22:40:13Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "b8829a6d-ef24-4b46-b889-1b4644c3d80f",
        "parentId" : "6993267c-d54e-4702-8889-87da5ab176d6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "making the other methods atomically safe implies multiple goroutines are interacting with this object... are all parallel operations guaranteed to be stopped before this is called or can a timeout return control to the get() caller while some background operations are still running?",
        "createdAt" : "2020-10-08T15:40:18Z",
        "updatedAt" : "2020-11-04T22:40:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4fecf096-dfe3-4f3e-a1e0-dd2d45791c7b",
        "parentId" : "6993267c-d54e-4702-8889-87da5ab176d6",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : ">are all parallel operations guaranteed to be stopped before this is called\r\n\r\nYes, parallelize.Until will guarantee that all goroutines interacting with this candidateList will have completed before this called.",
        "createdAt" : "2020-10-28T12:44:36Z",
        "updatedAt" : "2020-11-04T22:40:13Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d94b53ca43e0f1087a7b9c2e5809e6430c6b53",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +302,306 @@// assumes that all add() operations have been completed.\nfunc (cl *candidateList) get() []Candidate {\n\treturn cl.items[:cl.size()]\n}\n"
  },
  {
    "id" : "d61b782c-f278-44a5-95ce-d7de5ac8b83e",
    "prId" : 94814,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94814#pullrequestreview-518625952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a594046-34eb-49f2-93b8-f4bdc6b09b4d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "size() is also not atomic and assumes all add() operations have been completed",
        "createdAt" : "2020-10-08T15:42:29Z",
        "updatedAt" : "2020-11-04T22:40:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5e05ca36-a79d-4e24-95b0-0b156572fe8e",
        "parentId" : "8a594046-34eb-49f2-93b8-f4bdc6b09b4d",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "True, but we also don't access the list elements until all add() operations complete. I've updated the function doc to reflect this more accurately.",
        "createdAt" : "2020-10-28T12:53:21Z",
        "updatedAt" : "2020-11-04T22:40:13Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3d94b53ca43e0f1087a7b9c2e5809e6430c6b53",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +291,295 @@// ensure that all add() operations complete before accessing the elements of\n// the list.\nfunc (cl *candidateList) size() int32 {\n\tn := atomic.LoadInt32(&cl.idx) + 1\n\tif n >= int32(len(cl.items)) {"
  },
  {
    "id" : "2cc2d3aa-fe18-49b5-9bb5-62fed2e3b15f",
    "prId" : 92890,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92890#pullrequestreview-445205018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ff732d-8090-43ca-8c98-d2d3b8bdaea9",
        "parentId" : null,
        "authorId" : "60cf1937-b446-4873-9cbc-7c2ea3ae0a27",
        "body" : "perhaps it would have a more descriptive name?  for example, `CallPreemptExtenders`??",
        "createdAt" : "2020-07-08T08:42:20Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "60cf1937-b446-4873-9cbc-7c2ea3ae0a27",
        "tags" : [
        ]
      },
      {
        "id" : "de34f87f-0350-4090-98c6-37140799aef5",
        "parentId" : "55ff732d-8090-43ca-8c98-d2d3b8bdaea9",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "SG.",
        "createdAt" : "2020-07-09T00:00:10Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e8ccf01872bb452a482113fc170eb57d7dff6f1",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +264,268 @@// Extenders which do not support preemption may later prevent preemptor from being scheduled on the nominated\n// node. In that case, scheduler will find a different host for the preemptor in subsequent scheduling cycles.\nfunc CallExtenders(extenders []framework.Extender, pod *v1.Pod, nodeLister framework.NodeInfoLister,\n\tcandidates []Candidate) ([]Candidate, error) {\n\tif len(extenders) == 0 {"
  },
  {
    "id" : "139ceb55-0c0b-438e-b280-c0e14e99cb38",
    "prId" : 92890,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92890#pullrequestreview-445859002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c6333ea-4ee5-447c-9d2c-a6f58c0eb516",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "```suggestion\r\n// FindCandidates returns a slice of preemption candidates.\r\n// Each candidate is scheduable for the given <pod>.\r\n```",
        "createdAt" : "2020-07-09T10:36:22Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "fd35c2ea-0316-4852-95e8-49d9d906a566",
        "parentId" : "7c6333ea-4ee5-447c-9d2c-a6f58c0eb516",
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "I think the `is executable to` is better than `is scheduable for`.  `is executable to` means to  `Make room` for the given pod.  WDYT? @chendave ",
        "createdAt" : "2020-07-09T11:57:50Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      },
      {
        "id" : "82f26377-9a88-4f68-affa-4607fdf691f4",
        "parentId" : "7c6333ea-4ee5-447c-9d2c-a6f58c0eb516",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Agree with @denkensk - the pod is made schedulable with a cost of evicting victims. \"is schedulable\" didn't highlight that.",
        "createdAt" : "2020-07-09T18:17:34Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e8ccf01872bb452a482113fc170eb57d7dff6f1",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +147,151 @@\n// FindCandidates calculates a slice of preemption candidates.\n// Each candidate is executable to make the given <pod> schedulable.\nfunc FindCandidates(ctx context.Context, cs kubernetes.Interface, state *framework.CycleState, pod *v1.Pod,\n\tm framework.NodeToStatusMap, ph framework.PreemptHandle, nodeLister framework.NodeInfoLister,"
  },
  {
    "id" : "59348945-b2b0-4db8-a25b-ce73b152b570",
    "prId" : 92890,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92890#pullrequestreview-445859034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2828c01c-a375-41b4-95aa-b4b366eed8cb",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Can we get into this situation?\r\n```len(bestCandidate.Name()) == 0```",
        "createdAt" : "2020-07-09T11:24:12Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "f5f50e26-90cf-48a4-8ab3-3c8c43b7a58e",
        "parentId" : "2828c01c-a375-41b4-95aa-b4b366eed8cb",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Usually no, just as an extra safety check.",
        "createdAt" : "2020-07-09T18:17:38Z",
        "updatedAt" : "2020-07-12T06:37:44Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e8ccf01872bb452a482113fc170eb57d7dff6f1",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +134,138 @@\t// 4) Find the best candidate.\n\tbestCandidate := SelectCandidate(candidates)\n\tif bestCandidate == nil || len(bestCandidate.Name()) == 0 {\n\t\treturn \"\", nil\n\t}"
  }
]