[
  {
    "id" : "279fb277-e449-460f-8b17-c0dfa39b7512",
    "prId" : 102236,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102236#pullrequestreview-667381393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c320adce-2f38-48bd-b020-e63d5d9e7663",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "one corner case here, a bare pod created after the a matching and existing RS, it was not owned by any controller. pods owned by the RS will get counted in the old logic but not true now.",
        "createdAt" : "2021-05-24T10:33:49Z",
        "updatedAt" : "2021-05-24T10:46:04Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "4f92dcf3-0d0a-4e0b-986f-20fa8248511c",
        "parentId" : "c320adce-2f38-48bd-b020-e63d5d9e7663",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "In that case the replicaset controller is supposed to adopt the pod and update its owner reference. A race could happen (the pod gets scheduled before the replicaset controller gets to update the owner reference), but I don't believe this is a common case that we should care about, especially it has a non-negligible impact on performance.",
        "createdAt" : "2021-05-24T15:48:20Z",
        "updatedAt" : "2021-05-24T15:48:21Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "ddd586d6-5f47-426b-89cb-fe3889474ad7",
        "parentId" : "c320adce-2f38-48bd-b020-e63d5d9e7663",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "Two cases here, \r\n- bare pod created before the RS, the pod will be acquired by the RS\r\n- bare pod created after the RS, RS won't acquire the pod.\r\n\r\nSo, should the code fall back to the old logic when the ownerreference is not set?\r\n",
        "createdAt" : "2021-05-25T02:11:08Z",
        "updatedAt" : "2021-05-25T02:11:08Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "14d89a7c-9352-42f8-a2df-0c388571c52f",
        "parentId" : "c320adce-2f38-48bd-b020-e63d5d9e7663",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "In all cases the replicaset controller will try to find a replicaset to adopt the pod, it may well be the case that the scheduler will try to schedule the pod before it gets adopted. \r\n\r\nBut what is the use case for the two cases you mentioned? If there is no legitimate case, then I don't think we should complicate our code to support it.\r\n",
        "createdAt" : "2021-05-25T03:11:44Z",
        "updatedAt" : "2021-05-25T03:11:45Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "28e76114-3eab-477d-906f-2d096a9b87d6",
        "parentId" : "c320adce-2f38-48bd-b020-e63d5d9e7663",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "no problem, just thought the diff might not nil.",
        "createdAt" : "2021-05-25T04:36:30Z",
        "updatedAt" : "2021-05-25T04:36:31Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c0976814ca85cd92f226ebe964880b78b3de1f4",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +60,64 @@\tgv, err := schema.ParseGroupVersion(owner.APIVersion)\n\tif err != nil {\n\t\treturn selector\n\t}\n"
  }
]