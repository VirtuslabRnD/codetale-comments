[
  {
    "id" : "f3b9f1fd-dc22-4fcf-9db5-467f800440c0",
    "prId" : 90657,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90657#pullrequestreview-406832945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36467cc9-8e81-484b-959d-6970ad22c9e9",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "is the new logic introduced to this file tested somewhere indirectly?",
        "createdAt" : "2020-05-06T14:51:16Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "dcecf22c-f668-478d-a726-74955e6dd258",
        "parentId" : "36467cc9-8e81-484b-959d-6970ad22c9e9",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I initially thought it would be close to impossible because we don't preserve the args, but I just mocked the registry :)",
        "createdAt" : "2020-05-06T18:37:40Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "2935480cc89ce22bd7b2fd5ff9966190233fddaa",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +57,61 @@)\n\nvar configDecoder = scheme.Codecs.UniversalDecoder()\n\n// framework is the component responsible for initializing and running scheduler"
  },
  {
    "id" : "680547be-15e9-40f0-b00d-fb88662b8f27",
    "prId" : 90657,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90657#pullrequestreview-406967174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a3878e1-2d9d-47a4-9e00-d175fef2082f",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why are we assuming v1alpha2? worth a comment.",
        "createdAt" : "2020-05-06T14:53:18Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "74445202-44a5-4aa5-b4ab-e835ea65fc05",
        "parentId" : "7a3878e1-2d9d-47a4-9e00-d175fef2082f",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Done",
        "createdAt" : "2020-05-06T17:32:38Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "b3500fb6-4d22-44bd-8ee3-a0fb6f0a7dc5",
        "parentId" : "7a3878e1-2d9d-47a4-9e00-d175fef2082f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why is using the latest config API version good enough?",
        "createdAt" : "2020-05-06T19:30:30Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "bf323a93-e002-4f4f-a1e3-c47a4687afb3",
        "parentId" : "7a3878e1-2d9d-47a4-9e00-d175fef2082f",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I think the decision is up to us, given that the user is not providing a configuration.",
        "createdAt" : "2020-05-06T20:03:27Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "9a314f3f-0f74-40f5-a033-bd7750585adc",
        "parentId" : "7a3878e1-2d9d-47a4-9e00-d175fef2082f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg",
        "createdAt" : "2020-05-06T20:36:33Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "2935480cc89ce22bd7b2fd5ff9966190233fddaa",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +279,283 @@\t}\n\t// Use defaults from latest config API version.\n\tgvk := v1alpha2.SchemeGroupVersion.WithKind(name + \"Args\")\n\tobj, _, err := configDecoder.Decode(nil, &gvk, nil)\n\tif runtime.IsNotRegisteredError(err) {"
  },
  {
    "id" : "3e74139f-010d-410f-b402-e865eaa85031",
    "prId" : 90657,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90657#pullrequestreview-406997348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "854ecdbb-1e54-4062-91d5-e3cf223c848d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "document this can return `nil, nil` for default args if the plugin is out of tree or does not have a defined arg type",
        "createdAt" : "2020-05-06T21:03:02Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6be2619b-7fb2-4c52-8eb0-7f06c4b8365d",
        "parentId" : "854ecdbb-1e54-4062-91d5-e3cf223c848d",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Done",
        "createdAt" : "2020-05-06T21:22:53Z",
        "updatedAt" : "2020-05-06T22:00:46Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "2935480cc89ce22bd7b2fd5ff9966190233fddaa",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +273,277 @@// defined arg types, such as in-tree plugins that don't require configuration\n// or out-of-tree plugins.\nfunc getPluginArgsOrDefault(pluginConfig map[string]runtime.Object, name string) (runtime.Object, error) {\n\tres, ok := pluginConfig[name]\n\tif ok {"
  },
  {
    "id" : "e2f516ea-ab4c-4b0a-b169-6a0cb04149b6",
    "prId" : 86963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86963#pullrequestreview-340107014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd955648-525e-45e1-a59c-15ee12b61b70",
        "parentId" : null,
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "If you define `statuses := make(PluginToStatus, 1)`, doesn't that initiate with a length of 1 by default? Maybe L426 should be `make(PluginToStatus, 0, 1)`",
        "createdAt" : "2020-01-08T19:49:57Z",
        "updatedAt" : "2020-01-08T21:45:01Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      },
      {
        "id" : "aa1c82e2-03b5-40b5-aa95-f175c85e16e7",
        "parentId" : "bd955648-525e-45e1-a59c-15ee12b61b70",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "no, that is for slice, but I think by default go allocates a small number anyways, so omitted.",
        "createdAt" : "2020-01-08T19:54:44Z",
        "updatedAt" : "2020-01-08T21:45:02Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c7a4c82315e7270401027f6d823426fff48ccc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +427,431 @@\tfor _, pl := range f.filterPlugins {\n\t\tpluginStatus := f.runFilterPlugin(ctx, pl, state, pod, nodeInfo)\n\t\tif len(statuses) == 0 {\n\t\t\tfirstFailedStatus = pluginStatus\n\t\t}"
  },
  {
    "id" : "faa63af0-a536-461b-88e8-ba740ff8565c",
    "prId" : 86545,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86545#pullrequestreview-339258163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd94738b-f42b-4df6-a610-3c1e84fc3697",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Should check `state.ShouldRecordPluginMetrics()`",
        "createdAt" : "2020-01-07T14:15:41Z",
        "updatedAt" : "2020-01-09T04:23:21Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c58cc0ad007179a54f3079083dfdd1bf8bcf393",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +395,399 @@\t\treturn pl.PreFilterExtensions().RemovePod(ctx, state, podToSchedule, podToAdd, nodeInfo)\n\t}\n\tstartTime := time.Now()\n\tstatus := pl.PreFilterExtensions().RemovePod(ctx, state, podToSchedule, podToAdd, nodeInfo)\n\tf.metricsRecorder.observePluginDurationAsync(preFilterExtensionRemovePod, pl.Name(), status, metrics.SinceInSeconds(startTime))"
  },
  {
    "id" : "9703b588-87dc-4b97-9747-8014a0da29d6",
    "prId" : 84522,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84522#pullrequestreview-315096624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53748f88-a03f-4efb-9fa5-17d2ee3ac480",
        "parentId" : null,
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "This looks like it's only used in one spot (https://github.com/kubernetes/kubernetes/pull/84522/files#diff-76b7e314f9618c8bc2ca6442ddd35dc3R448), does that need to be a constant?",
        "createdAt" : "2019-10-29T17:48:48Z",
        "updatedAt" : "2019-11-12T18:00:36Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      },
      {
        "id" : "0bcac0d7-820b-49e5-b156-e9bfec5e735f",
        "parentId" : "53748f88-a03f-4efb-9fa5-17d2ee3ac480",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I don't think whether a var is used once or multiple times determines whether it should be a constant or not. Having it here is just more consistent and easy to read with other constant strings. Let me know if you think otherwise.",
        "createdAt" : "2019-11-11T19:07:34Z",
        "updatedAt" : "2019-11-12T18:00:36Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "af6a8160c3e3f2831e421923c24d9ee388bc1040",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +47,51 @@\tpostFilter                                = \"PostFilter\"\n\tscore                                     = \"Score\"\n\tscoreExtensionNormalize                   = \"ScoreExtensionNormalize\"\n\tpreBind                                   = \"PreBind\"\n\tbind                                      = \"Bind\""
  },
  {
    "id" : "d51afae2-4aca-4a87-b287-f67cb3b89200",
    "prId" : 83569,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83569#pullrequestreview-300260932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b8336ef-6713-45ed-81fb-33d5aae0f282",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Can we make the logic UTed?",
        "createdAt" : "2019-10-08T21:59:25Z",
        "updatedAt" : "2019-10-15T00:26:24Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "a7782324-a6e0-4f67-a9c9-e3e43506dc65",
        "parentId" : "9b8336ef-6713-45ed-81fb-33d5aae0f282",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Added UT",
        "createdAt" : "2019-10-10T18:48:08Z",
        "updatedAt" : "2019-10-15T00:26:24Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "da30a00f9a9053678770e498fede51ebb9b5ba1d",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +237,241 @@func (f *framework) RunPreFilterPlugins(\n\tstate *CycleState, pod *v1.Pod) (status *Status) {\n\tstartTime := time.Now()\n\tdefer func() { recordExtensionPointDuration(startTime, preFilter, status) }()\n\tfor _, pl := range f.preFilterPlugins {"
  },
  {
    "id" : "e9c34cbe-20ed-4b3f-89c6-514b0c7cb672",
    "prId" : 83569,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83569#pullrequestreview-302290311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a28e0f5-54cf-4971-af23-e08a5c133963",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Putting it into a closure so that we can always get the correct `status` instead of zero value. 👍 ",
        "createdAt" : "2019-10-16T02:22:14Z",
        "updatedAt" : "2019-10-16T02:22:15Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "da30a00f9a9053678770e498fede51ebb9b5ba1d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +238,242 @@\tstate *CycleState, pod *v1.Pod) (status *Status) {\n\tstartTime := time.Now()\n\tdefer func() { recordExtensionPointDuration(startTime, preFilter, status) }()\n\tfor _, pl := range f.preFilterPlugins {\n\t\tstatus := pl.PreFilter(state, pod)"
  },
  {
    "id" : "125a10e3-b553-4284-a9bb-59000a46a298",
    "prId" : 83460,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83460#pullrequestreview-301113902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b32f2f50-97c5-4dce-b0b5-2a5613b5285f",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "It seems like we back to use the \"separate data and logic\" approach.",
        "createdAt" : "2019-10-06T01:11:49Z",
        "updatedAt" : "2019-10-06T01:11:53Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "3c5b5356-670e-455c-9ce5-593a459f9335",
        "parentId" : "b32f2f50-97c5-4dce-b0b5-2a5613b5285f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> It seems like we back to use the \"separate data and logic\" approach.\r\n\r\nyes, but there is a difference between the reason we are doing it here and what you suggested in your PR: you separated the data but made it local to the function, you didn't identify or argued that there is an opportunity to reuse the \"data\" in other places, and so I still stand by my opinion that that wasn't useful and it only bloated the function.\r\n\r\nThe situation here is different: 1) we added another function (listPlugins) that needed to iterate over the same set of extension points, 2) identified a third existing function (pluginsNeeded) that also needed to iterate the same extension points.\r\n\r\nIs the difference clear?",
        "createdAt" : "2019-10-06T02:12:16Z",
        "updatedAt" : "2019-10-06T02:12:17Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "95dfbc3f-5b71-479c-acdf-83d37f05b78c",
        "parentId" : "b32f2f50-97c5-4dce-b0b5-2a5613b5285f",
        "authorId" : "74808d33-32a9-4db9-8265-aadfe78d94ab",
        "body" : "Sorry，sir ，this name “PodToleratesNodeTaint” seems little Confuse to me。。。",
        "createdAt" : "2019-10-14T06:04:13Z",
        "updatedAt" : "2019-10-14T06:04:13Z",
        "lastEditedBy" : "74808d33-32a9-4db9-8265-aadfe78d94ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "66386fdf49aee22bf94a4a2b3ebd559992d3f508",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +70,74 @@}\n\nfunc (f *framework) getExtensionPoints(plugins *config.Plugins) []extensionPoint {\n\treturn []extensionPoint{\n\t\t{plugins.PreFilter, &f.preFilterPlugins},"
  },
  {
    "id" : "b08dc9f6-a9dc-4ecb-939a-34521bf38c03",
    "prId" : 82912,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82912#pullrequestreview-292764598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0924a58c-b7a0-4304-9e87-66cba6a398a1",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Since this has same signature as that of updater.AddPod , it seems this func (RunPreFilterUpdaterRemovePod) can be unified with RunPreFilterUpdaterAddPod by passing AddPod / RemovePod as parameter.",
        "createdAt" : "2019-09-24T23:43:45Z",
        "updatedAt" : "2019-09-24T23:43:45Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "37b9e6d1eadbf801b3dae4bdf7738b5eae39bf44",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +334,338 @@\tfor _, pl := range f.preFilterPlugins {\n\t\tif updater := pl.Updater(); updater != nil {\n\t\t\tstatus := updater.RemovePod(pc, podToSchedule, podToRemove, nodeInfo)\n\t\t\tif !status.IsSuccess() {\n\t\t\t\tmsg := fmt.Sprintf(\"error while running RemovePod for plugin %q while scheduling pod %q: %v\","
  },
  {
    "id" : "cb118102-8543-4d39-9ba3-719b8fb9bc59",
    "prId" : 81614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81614#pullrequestreview-277314167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "929123d7-23af-433a-ae16-1af63c1a0432",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why not keep the functions and just make them local (normalizeScores and applyScoreWeights)?",
        "createdAt" : "2019-08-20T14:18:27Z",
        "updatedAt" : "2019-08-20T17:18:49Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "ac1a1f31-1830-48a0-83f7-d87ed41da365",
        "parentId" : "929123d7-23af-433a-ae16-1af63c1a0432",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I just found the 3 steps are very similar (parallel execution and receive error) and it looks good to me to put them in the same function (saves a few lines of code). But no particular reason really.\r\n\r\nIf you like the separately, I can change it.",
        "createdAt" : "2019-08-20T17:10:56Z",
        "updatedAt" : "2019-08-20T17:18:49Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "e50a24d64cfa31eeb26549c2b06df9b60d722d5b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +383,387 @@\t}\n\n\t// Run NormalizeScore method for each ScoreWithNormalizePlugin in parallel.\n\tworkqueue.ParallelizeUntil(ctx, 16, len(f.scoreWithNormalizePlugins), func(index int) {\n\t\tpl := f.scoreWithNormalizePlugins[index]"
  },
  {
    "id" : "9b597736-de80-4664-9117-be4c0956f09e",
    "prId" : 81015,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81015#pullrequestreview-273408556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55afbef5-f1da-4e3d-802f-efab3c3b02e8",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I think we should also send an error over the `errCh`. We currently ignore a faulty plugin and only log a message. These log messages may remain unnoticed for a while. I would prefer a more serious action, like not scheduling the pod so that a cluster admin notices the issue.\r\nIf you decided to go with my suggestion, you may want to remove the `klog.Errorf` above and only send an error message over `errCh`.",
        "createdAt" : "2019-08-09T21:45:28Z",
        "updatedAt" : "2019-08-14T11:16:56Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "1a0725c1-ceb8-495f-823a-5a3f469b96e0",
        "parentId" : "55afbef5-f1da-4e3d-802f-efab3c3b02e8",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "SG",
        "createdAt" : "2019-08-10T02:50:24Z",
        "updatedAt" : "2019-08-14T11:16:56Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3cc73965a0e1ef0d8042a81a5ac79db5589da05",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +438,442 @@\t\t\t\terr := fmt.Errorf(\"score plugin %q returns an invalid score %q, it should in the range of [MinNodeScore, MaxNodeScore] after normalizing\", pl.Name(), nodeScore.Score)\n\t\t\t\terrCh.SendErrorWithCancel(err, cancel)\n\t\t\t\treturn\n\t\t\t}\n"
  },
  {
    "id" : "0a62ce06-a458-46e0-9217-f0f1d60e94a9",
    "prId" : 80846,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80846#pullrequestreview-269554114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a31a887-2a85-4926-934f-be438ac6f629",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Thanks for the catch. I believe there are other occurrences in this or related files. Can you please change them all?\r\n\r\n/assign @ahg-g \r\nfor a thorough check.",
        "createdAt" : "2019-08-01T08:06:26Z",
        "updatedAt" : "2019-08-01T11:59:31Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "539e531e-7cbe-4af7-9913-8dbecd32d8ab",
        "parentId" : "0a31a887-2a85-4926-934f-be438ac6f629",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg, please do the same throughout the file as @Huang-Wei suggested.\r\n\r\nThere are a couple of cases in https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/algorithm/priorities/interpod_affinity.go as well",
        "createdAt" : "2019-08-01T11:22:57Z",
        "updatedAt" : "2019-08-01T11:59:31Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "5efeda3718a2e2eb1aa00831027e8f6446eec3c4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +390,394 @@\t\t\terr := fmt.Errorf(\"score plugin %v has no corresponding scores in the PluginToNodeScoreMap\", pl.Name())\n\t\t\terrCh.SendErrorWithCancel(err, cancel)\n\t\t\treturn\n\t\t}\n\t\tfor i := range nodeScoreList {"
  },
  {
    "id" : "7604d774-cc84-4570-aea5-75b805e818fd",
    "prId" : 80383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80383#pullrequestreview-265107566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dcef231-4c5a-4a5a-8ea1-4081736361a5",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "We could precheck it when initializing the NormalizeSocrePlugins.",
        "createdAt" : "2019-07-22T01:46:17Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "d52eca8a-5383-4d98-9b4b-f50ed47c94be",
        "parentId" : "1dcef231-4c5a-4a5a-8ea1-4081736361a5",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "If this is a requirement for running normalizes extension point, we could embed ScorePlugin into NormalizeScorePlugin.",
        "createdAt" : "2019-07-22T02:01:56Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "e0519a78-ac59-445c-98eb-6810b23181c3",
        "parentId" : "1dcef231-4c5a-4a5a-8ea1-4081736361a5",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I will leave this open for more inputs. I think precheck is good but I am not sure if we should fail the initialization or just print some warning message. \r\n\r\nThe current implementation assumes there isn't a necessary match of score plugin list and normalize score plugin list, and it doesn't fail\r\n\r\n@ahg-g ,  what do you think? @ bsalamat might also want to comment.",
        "createdAt" : "2019-07-22T16:37:30Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "7982cddb-505c-4202-8021-c27dac3515b6",
        "parentId" : "1dcef231-4c5a-4a5a-8ea1-4081736361a5",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "@bsalamat  has clarified this in [this comment](https://github.com/kubernetes/kubernetes/pull/80383#discussion_r306044447). I am going to add precheck logic to make sure that the list of enabled Normalize Score extension points is a subset of Score extension points. And hence the check here is not needed.",
        "createdAt" : "2019-07-22T23:31:49Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "34373662d3d66bf4bed60384140a5a9c473adcdc",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +354,358 @@\tworkqueue.ParallelizeUntil(ctx, 16, len(f.scoreWithNormalizePlugins), func(index int) {\n\t\tpl := f.scoreWithNormalizePlugins[index]\n\t\tnodeScoreList, ok := scores[pl.Name()]\n\t\tif !ok {\n\t\t\terr := fmt.Errorf(\"normalize score plugin %v has no corresponding scores in the PluginToNodeScoreMap\", pl.Name())"
  },
  {
    "id" : "e2e79485-2950-4fba-b987-13c72dbcb867",
    "prId" : 80383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80383#pullrequestreview-267978670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d672969-2846-4bb8-82db-80430b9edea1",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Here, you are assuming that `NormalizeScore` plugins have the exact same names as the `score` plugins. This is a valid assumption, but as I mentioned in my other comment, you should ensure that this assumption is valid.",
        "createdAt" : "2019-07-22T21:32:06Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "4f0a2212-5263-456a-ad85-02bf5e1558dd",
        "parentId" : "2d672969-2846-4bb8-82db-80430b9edea1",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I am going to add logic during framework initialization to make sure NormalizeScore extension points are a subset of Score extension points. ",
        "createdAt" : "2019-07-22T23:34:00Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "a175ffcb-5dea-4087-b3a3-42c7aa0cc290",
        "parentId" : "2d672969-2846-4bb8-82db-80430b9edea1",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "1. Added verification logic in framework initialization to make sure an enabled NormalizeScore plugin is also enabled as a Score plugin.\r\n2. Embed Score interface in NormalizeScore interface to make sure a NormalizeScore plugin is always a Score plugin.\r\n\r\nDo you think there is anything else missing here?",
        "createdAt" : "2019-07-24T00:55:14Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "d28c1e50-2386-4917-9ff6-66bc584eabdc",
        "parentId" : "2d672969-2846-4bb8-82db-80430b9edea1",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Resolving since we now only rely on the ScorePlugin plugin set. NormalizeScorePlugin plugin set is going to be removed in next PR.",
        "createdAt" : "2019-07-29T19:01:38Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      }
    ],
    "commit" : "34373662d3d66bf4bed60384140a5a9c473adcdc",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +354,358 @@\tworkqueue.ParallelizeUntil(ctx, 16, len(f.scoreWithNormalizePlugins), func(index int) {\n\t\tpl := f.scoreWithNormalizePlugins[index]\n\t\tnodeScoreList, ok := scores[pl.Name()]\n\t\tif !ok {\n\t\t\terr := fmt.Errorf(\"normalize score plugin %v has no corresponding scores in the PluginToNodeScoreMap\", pl.Name())"
  },
  {
    "id" : "c01c17c9-86e5-4498-bfe8-73dd365612dc",
    "prId" : 80383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80383#pullrequestreview-265599382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "An alternative is to run NormalizeScore plugins in the same `RunScorePlugins`. That would helps save on memory by not passing a large map around, but it would reduce parallelism. I haven't gone through all the issues that it could introduce, so I leave it up to you.\r\n\r\n```\r\n```",
        "createdAt" : "2019-07-22T22:25:29Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "d38fbb86-e391-49ac-a082-1efd636b617c",
        "parentId" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "I have discussed this with @ahg-g. As you said, there is a trade-off between saving memory vs. reducing parallelism. I have chosen to optimize for parallelism. Since I am new to scheduler, I don't have enough data points to prove that the tradeoff I made is optimal.\r\n\r\nI will keep it as is unless you have further comments.",
        "createdAt" : "2019-07-22T23:25:43Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "5dd68013-4504-4421-9fef-1e2857bc3a5c",
        "parentId" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Weight is currently applied in ```RunScorePlugins```. We need to change that and apply the weight after NormalizeScore, if a NormalizeScore plugin exist.\r\n\r\nIf we are going with this current code structure, we need to add a ApplyScoreWeights function that gets called after RunNormalizeScorePlugins in generic_scheduler.go.",
        "createdAt" : "2019-07-23T08:36:20Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "5f59f0c7-c81a-4ea5-9276-62203d3ff9eb",
        "parentId" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "> That would helps save on memory by not passing a large map around\r\n\r\nThis is not a problem since passing a map to another method only copies the pointer to the map which is only 8 bytes. ",
        "createdAt" : "2019-07-23T09:03:18Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "f2ffa45b-0985-4ce1-bda0-55c7cc8b59f9",
        "parentId" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "> > That would helps save on memory by not passing a large map around\r\n> \r\n> This is not a problem since passing a map to another method only copies the pointer to the map which is only 8 bytes.\r\n\r\nI think the suggestion was to tradeoff parallelism for space. Basically run the plugins sequentially, parallelising across nodes only. If we do this, then we just need to maintain two N-sized arrays instead of kN arrays (where k is the number of plugins)\r\n\r\n",
        "createdAt" : "2019-07-23T17:53:38Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "cbf2e591-aab4-43dd-b694-b28a829b57b0",
        "parentId" : "aa71ee6d-5537-49b2-9098-c321ab879356",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Yesterday, when I was thinking about this I did the math. Since we store one integer per node per plugin, in a cluster with 10K nodes and 20 priority functions, we will store less than 1MB of data (10,000 * 20 * 4). This is not a problem. We need to ensure that we do not allocate and release memory frequently though. Allocation and GC time could degrade performance significantly if we are not careful. We should preallocate all slices (which we do). If we could reuse these slices for other pods that would be even better, but it'd introduce some complexities when nodes are added to the cluster. For now, we can stick to the current implementation and change it in the future if there is a need.\r\n\r\n+1 on applying weights \"after\" normalize score.",
        "createdAt" : "2019-07-23T18:42:58Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "34373662d3d66bf4bed60384140a5a9c473adcdc",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +349,353 @@// It then modifies the map with normalized scores. It returns a non-success Status\n// if any of the NormalizeScore functions returns a non-success status.\nfunc (f *framework) RunNormalizeScorePlugins(pc *PluginContext, pod *v1.Pod, scores PluginToNodeScoreMap) *Status {\n\tctx, cancel := context.WithCancel(context.Background())\n\terrCh := schedutil.NewErrorChannel()"
  },
  {
    "id" : "9141367a-6c65-40de-87b1-7ec335a82d60",
    "prId" : 80383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80383#pullrequestreview-266566139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "618f1d75-06f8-482b-8ae3-51626b8b4230",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "Same as [comment](https://github.com/kubernetes/kubernetes/pull/80383/files#r307218003), we could skip the check. Then there is no error in this func, and we do not need `errCh` to deal with errors.",
        "createdAt" : "2019-07-25T10:15:38Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "e0448d9d-bc08-477b-be18-83af52868977",
        "parentId" : "618f1d75-06f8-482b-8ae3-51626b8b4230",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ditto comment above.",
        "createdAt" : "2019-07-25T11:37:16Z",
        "updatedAt" : "2019-07-31T00:02:33Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "34373662d3d66bf4bed60384140a5a9c473adcdc",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +384,388 @@\t\t// Score plugins' weight has been checked when they are initialized.\n\t\tweight := f.pluginNameToWeightMap[pl.Name()]\n\t\tnodeScoreList, ok := scores[pl.Name()]\n\t\tif !ok {\n\t\t\terr := fmt.Errorf(\"score plugin %v has no corresponding scores in the PluginToNodeScoreMap\", pl.Name())"
  },
  {
    "id" : "f9c9135f-bada-4822-b4d2-82f4652807e5",
    "prId" : 80305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80305#pullrequestreview-263982517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b2c331b-8156-4d83-bd23-0caaa424c53e",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "We need to do an exist check because in reality Name() could return something different from the name set in the config.",
        "createdAt" : "2019-07-18T15:10:21Z",
        "updatedAt" : "2019-07-18T15:10:37Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "99215a7c-146c-48ac-9ade-432154ec436e",
        "parentId" : "5b2c331b-8156-4d83-bd23-0caaa424c53e",
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "If it does not exist, the value of `weight` will be 0, so it is same to check whether it is 0.",
        "createdAt" : "2019-07-18T22:33:45Z",
        "updatedAt" : "2019-07-18T22:33:45Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "d10508be-ce58-4d50-ae55-0281b7040a94",
        "parentId" : "5b2c331b-8156-4d83-bd23-0caaa424c53e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "ok, sounds good then.",
        "createdAt" : "2019-07-19T01:51:34Z",
        "updatedAt" : "2019-07-19T01:51:44Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc5cf8c43a9452fda404106b2cd2925c7646111",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +121,125 @@\t\t\t\t\treturn nil, fmt.Errorf(\"plugin %v does not extend score plugin\", sc.Name)\n\t\t\t\t}\n\t\t\t\tif f.pluginNameToWeightMap[p.Name()] == 0 {\n\t\t\t\t\treturn nil, fmt.Errorf(\"score plugin %v is not configured with weight\", p.Name())\n\t\t\t\t}"
  },
  {
    "id" : "6ddab63a-c1d2-45b5-a1ff-dd80cdf09c48",
    "prId" : 80305,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80305#pullrequestreview-266349713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19bee360-3232-45c6-b438-0b03c6760d56",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder if the check on line 98 should handle 0 value similarly (returning error):\r\n```\r\n\t\tif f.pluginNameToWeightMap[name] == 0 {\r\n```",
        "createdAt" : "2019-07-24T23:49:14Z",
        "updatedAt" : "2019-07-24T23:49:14Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "25513551-2be1-479d-8089-7a59352275d9",
        "parentId" : "19bee360-3232-45c6-b438-0b03c6760d56",
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "The [comment](https://github.com/kubernetes/kubernetes/pull/80305#discussion_r304919930) explained it.",
        "createdAt" : "2019-07-25T00:28:53Z",
        "updatedAt" : "2019-07-25T00:28:53Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dc5cf8c43a9452fda404106b2cd2925c7646111",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t\t\t}\n\t\t\t\tif f.pluginNameToWeightMap[p.Name()] == 0 {\n\t\t\t\t\treturn nil, fmt.Errorf(\"score plugin %v is not configured with weight\", p.Name())\n\t\t\t\t}\n\t\t\t\tf.scorePlugins = append(f.scorePlugins, p)"
  },
  {
    "id" : "ba22aab0-43c2-4355-8144-1d9e73d26148",
    "prId" : 79109,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79109#pullrequestreview-256098479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c73260d4-2839-458b-932c-81cb18889e5c",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "nit: extra new line",
        "createdAt" : "2019-07-01T00:51:43Z",
        "updatedAt" : "2019-07-16T14:25:03Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a80425bd23282ecf37e01d35d901aecdb9704964",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +297,301 @@\t\treturn nil, NewStatus(Error, msg)\n\t}\n\n\treturn pluginToNodeScoreMap, nil\n}"
  },
  {
    "id" : "8e919f51-6b77-4c0e-b147-7e59dbb3b3f6",
    "prId" : 79109,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79109#pullrequestreview-256374689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c20e0f42-324d-4f70-b98b-14257a886fbc",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "IMO this could cause a potential problem, `pl` variable is a loop pointer and could be captured by the goroutines in `ParallelizedUntil` function. I posted a demo which has a similar structure and you could run the code below in https://play.golang.org/p/Jc271gRPfdy to view the problems.\r\n\r\n```go\r\nfunc main() {\r\n\tvalues := []struct {\r\n\t\ti int\r\n\t}{\r\n\t\t{\r\n\t\t\ti: 1,\r\n\t\t},\r\n\t\t{\r\n\t\t\ti: 2,\r\n\t\t},\r\n\t}\r\n\r\n\twg := sync.WaitGroup{}\r\n\twg.Add(2)\r\n\tfor _, value := range values {\r\n\t\tgo func() {\r\n\t\t\tdefer wg.Done()\r\n\t\t\tfmt.Println(value.i)\r\n\t\t}()\r\n\t}\r\n\twg.Wait()\r\n}\r\n\r\n$ go run prog.go\r\n./prog.go:25:16: loop variable value captured by func literal\r\nGo vet exited.\r\n\r\n2\r\n2\r\n```\r\n\r\nWe could solve this problem with the following pattern:\r\n\r\n```go\r\nfor i := range f.scorePlugins {\r\n  pl := f.scorePlugins[i]\r\n  // ...\r\n}\r\n```\r\n\r\nFYI: [Using goroutines on loop iterator variables](https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables)",
        "createdAt" : "2019-07-01T14:31:15Z",
        "updatedAt" : "2019-07-16T14:25:03Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a80425bd23282ecf37e01d35d901aecdb9704964",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +283,287 @@\t\t\t\treturn\n\t\t\t}\n\t\t\tscore, status := pl.Score(pc, pod, nodes[index].Name)\n\t\t\tif !status.IsSuccess() {\n\t\t\t\terrCh.SendErrorWithCancel(fmt.Errorf(status.Message()), cancel)"
  },
  {
    "id" : "25985e66-943e-4c69-831a-1d4134ff6132",
    "prId" : 78513,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78513#pullrequestreview-243757654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c912b834-6386-49a8-8058-a63f047fdd77",
        "parentId" : null,
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "comments needed！",
        "createdAt" : "2019-05-30T11:57:41Z",
        "updatedAt" : "2019-06-20T07:57:03Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b339c0a8bf75ff246440fbd84a3cf93b1f4418bd",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +260,264 @@\n// RunBindPlugins runs the set of configured bind plugins until one returns a non `Skip` status.\nfunc (f *framework) RunBindPlugins(pc *PluginContext, pod *v1.Pod, nodeName string) *Status {\n\tif len(f.bindPlugins) == 0 {\n\t\treturn NewStatus(Skip, \"\")"
  },
  {
    "id" : "da0c9a16-fa42-4055-b60c-1b7f4ca5672e",
    "prId" : 78477,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78477#pullrequestreview-262344726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we should distinguish between success/unschedulable and all other statuses. if success or unschedulable, then we return directly, otherwise we should probably convert the status to Error like we do for other extension points.",
        "createdAt" : "2019-07-02T17:43:44Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "7507520f-5148-4b84-a6cd-4bd5b295b4a2",
        "parentId" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Filter plugins are special, as their returned message is shown to the user. For example, if there is not enough memory on a node, we put a message in pod status which is similar to \"10 nodes insufficient memory\". The part that formats the message for end user is in the scheduler code in `predicates.NewFailureReason()`, but the \"reason\" part of the message (which is \"insufficient memory\" in the above example) is important. We should not alter the `status.Message` here for that reason. So, returning `status` as is, is fine IMO. We may want to check for error and log errors though.",
        "createdAt" : "2019-07-02T19:38:46Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "211d9ff5-b733-4cf7-bc6d-b8a25e969a50",
        "parentId" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "authorId" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "body" : "Message is logged once the plugin returns failure.",
        "createdAt" : "2019-07-03T02:16:43Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "tags" : [
        ]
      },
      {
        "id" : "e9c61b59-7694-4587-aff1-ae64485c01ce",
        "parentId" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "@bsalamat we can keep the message that plugin returned when converting the code to Error: \r\n\r\n```\r\nif status.Code != Unschedulable {\r\n  return NewStatus(Error, status.Message())\r\n} else {\r\n  return status\r\n}\r\n```\r\n\r\nI just want to make sure we don't bubble statuses that don't make sense for a filter plugin, like \"Wait\".",
        "createdAt" : "2019-07-03T13:24:31Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "e4b8248d-f3b5-411d-952d-f98b113f4be9",
        "parentId" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "+1 to @ahg-g's suggestion. It makes sense to convert all codes other than \"Unschedulable\" to an `Error`",
        "createdAt" : "2019-07-09T00:16:25Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "607450e1-2a08-45fc-8a7f-e173626cc577",
        "parentId" : "c6c8e1a2-89d4-4520-9f05-006dbc776e4e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "@YoubingLi this hasn't been addressed yet. I left a comment with the suggestion.\r\n\r\n",
        "createdAt" : "2019-07-16T11:14:50Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f9dd949e01189709b7ec7955204e04378aa64cb",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +288,292 @@\tfor _, p := range f.filterPlugins {\n\t\tstatus := p.Filter(pc, pod, nodeName)\n\t\tif !status.IsSuccess() {\n\t\t\tif status.Code() != Unschedulable {\n\t\t\t\terrMsg := fmt.Sprintf(\"RunFilterPlugins: error while running %s filter plugin for pod %s: %s\","
  },
  {
    "id" : "cef1548b-5283-422e-8f2c-78c53aae9d50",
    "prId" : 78477,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78477#pullrequestreview-262766774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fa8b22b-d73b-4aa8-8b3d-a46afad4afb6",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "The suggestion in the previous comment is to do something like this:\r\n\r\n```\r\nerrMsg := fmt.Sprintf(\"RunFilterPlugins: error while running %s filter plugin for pod %s: %s\",\r\n\t\t\t\t\tp.Name(), pod.Name, status.Message())\r\nklog.Errorf(errMsg)\r\nreturn NewStatus(Error, errMsg)\r\n```",
        "createdAt" : "2019-07-16T11:17:44Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "27f561dc-1a57-4600-bf50-984305e030f3",
        "parentId" : "7fa8b22b-d73b-4aa8-8b3d-a46afad4afb6",
        "authorId" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "body" : "It has been addressed in the latest diff",
        "createdAt" : "2019-07-17T01:44:42Z",
        "updatedAt" : "2019-07-17T07:31:13Z",
        "lastEditedBy" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f9dd949e01189709b7ec7955204e04378aa64cb",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +291,295 @@\t\t\tif status.Code() != Unschedulable {\n\t\t\t\terrMsg := fmt.Sprintf(\"RunFilterPlugins: error while running %s filter plugin for pod %s: %s\",\n\t\t\t\t\tp.Name(), pod.Name, status.Message())\n\t\t\t\tklog.Error(errMsg)\n\t\t\t\treturn NewStatus(Error, errMsg)"
  },
  {
    "id" : "8dd65375-4dcf-4640-8de9-74cd4b80b68b",
    "prId" : 78097,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78097#pullrequestreview-269959442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59d8e899-bd45-4a21-b403-5a5af847a3ab",
        "parentId" : null,
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "Could these plugins run concurrently? Ref: https://github.com/kubernetes/kubernetes/issues/80039",
        "createdAt" : "2019-07-31T00:34:05Z",
        "updatedAt" : "2019-08-02T02:23:56Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      },
      {
        "id" : "a4bc3023-274a-476b-9fcc-d3ff8b50be14",
        "parentId" : "59d8e899-bd45-4a21-b403-5a5af847a3ab",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "They could, I think. lets leave that for a separate PR.",
        "createdAt" : "2019-08-01T11:56:48Z",
        "updatedAt" : "2019-08-02T02:23:56Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "914607a6-05de-4e3c-86a9-a050c02b4d1b",
        "parentId" : "59d8e899-bd45-4a21-b403-5a5af847a3ab",
        "authorId" : "df8dc16d-08c7-457c-8593-619395912000",
        "body" : "OK. I'll handle them all in the PR for #80039.",
        "createdAt" : "2019-08-02T02:24:06Z",
        "updatedAt" : "2019-08-02T02:24:07Z",
        "lastEditedBy" : "df8dc16d-08c7-457c-8593-619395912000",
        "tags" : [
        ]
      }
    ],
    "commit" : "859cac059596f9dda1cb2de93d8d487578f61e1b",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +338,342 @@\tfilteredNodesStatuses NodeToStatusMap,\n) *Status {\n\tfor _, pl := range f.postFilterPlugins {\n\t\tstatus := pl.PostFilter(pc, pod, nodes, filteredNodesStatuses)\n\t\tif !status.IsSuccess() {"
  },
  {
    "id" : "f2996502-63f9-4665-9c6d-18da8baa3f77",
    "prId" : 78005,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78005#pullrequestreview-243243261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d9861d2-30ac-4a30-8f0c-6f0a3f69f9de",
        "parentId" : null,
        "authorId" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "body" : "Please handle \"status == nil\" case.",
        "createdAt" : "2019-05-29T08:09:48Z",
        "updatedAt" : "2019-06-10T21:02:09Z",
        "lastEditedBy" : "ba6240e3-678e-479a-b2f3-a1b796de7259",
        "tags" : [
        ]
      },
      {
        "id" : "95951a4b-19b8-4f19-9189-0a5803614e8a",
        "parentId" : "0d9861d2-30ac-4a30-8f0c-6f0a3f69f9de",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "it is already handled by the IsSuccess function: https://github.com/kubernetes/kubernetes/blob/master/pkg/scheduler/framework/v1alpha1/interface.go#L70",
        "createdAt" : "2019-05-29T13:04:12Z",
        "updatedAt" : "2019-06-10T21:02:09Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "a61a437ef2d9be80884a3e63ee4fa3b103b2d3e4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +209,213 @@\tfor _, pl := range f.prefilterPlugins {\n\t\tstatus := pl.Prefilter(pc, pod)\n\t\tif !status.IsSuccess() {\n\t\t\tif status.Code() == Unschedulable {\n\t\t\t\tmsg := fmt.Sprintf(\"rejected by %v at prefilter: %v\", pl.Name(), status.Message())"
  },
  {
    "id" : "662e3c4c-732a-4f02-a95d-6c28fe5d7f14",
    "prId" : 77567,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77567#pullrequestreview-237034384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cffab5a-5bba-4384-b6e0-197a262312eb",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "nit: `RunPostbindPlugins {`",
        "createdAt" : "2019-05-14T00:54:42Z",
        "updatedAt" : "2019-05-19T10:12:36Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "24d0a5e3-7916-4478-b88f-ed17778e7442",
        "parentId" : "0cffab5a-5bba-4384-b6e0-197a262312eb",
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "Need to pass parameters.",
        "createdAt" : "2019-05-14T03:14:56Z",
        "updatedAt" : "2019-05-19T10:12:36Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      },
      {
        "id" : "4f4cad7b-f500-4e7d-8137-477479905da5",
        "parentId" : "0cffab5a-5bba-4384-b6e0-197a262312eb",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Sorry, thought it was a bracket\r\n",
        "createdAt" : "2019-05-14T05:38:11Z",
        "updatedAt" : "2019-05-19T10:12:36Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "20f9c9940e6e2ceec22443affdeecaa06b2b5b33",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +208,212 @@\n// RunPostbindPlugins runs the set of configured postbind plugins.\nfunc (f *framework) RunPostbindPlugins(\n\tpc *PluginContext, pod *v1.Pod, nodeName string) {\n\tfor _, pl := range f.postbindPlugins {"
  },
  {
    "id" : "483afc76-c195-4154-ad81-2a5989c8942f",
    "prId" : 77559,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77559#pullrequestreview-235055740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a39f494b-3eeb-4314-a6d6-f769f90e22d5",
        "parentId" : null,
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "Why re-declare a new variable here instead of using maxTimeout directly?",
        "createdAt" : "2019-05-07T23:48:31Z",
        "updatedAt" : "2019-05-10T16:42:17Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      },
      {
        "id" : "36e8901a-b892-495a-ba1c-ce2953974cfd",
        "parentId" : "a39f494b-3eeb-4314-a6d6-f769f90e22d5",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "timeout is used to track the minimum duration returned by any plugin. I added a comment to the interface documentation to clarify the semantics.",
        "createdAt" : "2019-05-08T13:28:51Z",
        "updatedAt" : "2019-05-10T16:42:17Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "98de316436503f88204bb8e3eb49e685973d7cbe",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +140,144 @@func (f *framework) RunPermitPlugins(\n\tpc *PluginContext, pod *v1.Pod, nodeName string) *Status {\n\ttimeout := maxTimeout\n\tstatusCode := Success\n\tfor _, pl := range f.permitPlugins {"
  },
  {
    "id" : "b58b500e-ce23-49a8-837f-31432f87f39f",
    "prId" : 77559,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77559#pullrequestreview-235884873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcc4c898-f0e2-4f87-9d45-50aab7a1a1fa",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "It would be good to clarify that if any plugin returns \"wait\", this function will continue running the remaining plugins.",
        "createdAt" : "2019-05-09T23:04:25Z",
        "updatedAt" : "2019-05-10T16:42:17Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "bf83492b-0c5c-4c31-a428-54dd67b4e36a",
        "parentId" : "dcc4c898-f0e2-4f87-9d45-50aab7a1a1fa",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "Done.",
        "createdAt" : "2019-05-10T00:46:34Z",
        "updatedAt" : "2019-05-10T16:42:17Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "98de316436503f88204bb8e3eb49e685973d7cbe",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +134,138 @@// plugins returns a status other than \"Success\" or \"Wait\", it does not continue\n// running the remaining plugins and returns an error. Otherwise, if any of the\n// plugins returns \"Wait\", then this function will block for the timeout period\n// returned by the plugin, if the time expires, then it will return an error.\n// Note that if multiple plugins asked to wait, then we wait for the minimum"
  },
  {
    "id" : "5ad32e49-26e5-49af-bfbe-216a097d789a",
    "prId" : 77529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77529#pullrequestreview-237516134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "004023c8-e884-48cd-bbb8-5f02d824994c",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "An alternative to this approach is to support multiple plugins for QueueSort. We could rename `Less` function to `Cmp` and let it return -1, 0, or 1. A returned 0 means that the values are equal. In that case, we can call the next plugin Cmp until one returns non-zero. For now, I think we can stay with the current implementation.",
        "createdAt" : "2019-05-14T21:59:20Z",
        "updatedAt" : "2019-05-15T01:40:28Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "d60bccc6a4820018b34b20a57491c8d7f54a8ecc",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +98,102 @@\n\t// Only one QueueSort plugin can be enabled.\n\treturn f.queueSortPlugins[0].Less\n}\n"
  },
  {
    "id" : "f65f9edd-6baf-487c-b430-f7fc8a1056bb",
    "prId" : 77529,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77529#pullrequestreview-238489013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c0c3655-0e64-4c0e-8895-9ae7a694ebc6",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "For the current implementation, when len(f.queueSortPlugins) reaches 1, we don't need to append more plugin.",
        "createdAt" : "2019-05-16T15:58:00Z",
        "updatedAt" : "2019-05-16T15:58:00Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "d60bccc6a4820018b34b20a57491c8d7f54a8ecc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +72,76 @@\t\t// later and add these plugins based on the configuration.\n\t\tif qsp, ok := p.(QueueSortPlugin); ok {\n\t\t\tf.queueSortPlugins = append(f.queueSortPlugins, qsp)\n\t\t}\n"
  },
  {
    "id" : "949ef0d3-d6a0-4416-a336-1fc2a910a9f2",
    "prId" : 77501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77501#pullrequestreview-235138505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd01c5bd-3ff3-46a1-a7cd-22b4ae76e385",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "We also need to remove the two `if` statements below and then add plugins at appropriate extension points based on the provided config. Something like:\r\n\r\n```go\r\nfor _, r := range plugins.Reserve {\r\n  if p, ok := f.plugins[r.Name]; ok {\r\n    f.reservePlugins = append(f.reservePlugins, p)\r\n  } else {\r\n    return nil, fmt.Errorf(\"reserve plugin %v does not exist\", r.Name)\r\n  }\r\n}\r\n\r\nfor _, pb := range plugins.PreBind {\r\n  if p, ok := f.plugins[pb.Name]; ok {\r\n    f.prebindPlugins = append(f.prebindPlugins, p)\r\n  }\r\n else {\r\n    return nil, fmt.Errorf(\"prebind plugin %v does not exist\", r.Name)\r\n  }\r\n}\r\n```\r\n\r\nWe could create a helper function instead of having a for loop for every extension point, but let's leave that for a future PR.",
        "createdAt" : "2019-05-07T18:39:16Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "bfbf6680-d941-4c65-8d47-472bc104d97d",
        "parentId" : "cd01c5bd-3ff3-46a1-a7cd-22b4ae76e385",
        "authorId" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "body" : "Updated. PTAL.\r\nThanks",
        "createdAt" : "2019-05-08T15:48:12Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0734d1debb79be8164c8cfca85c7393c0aed6313",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +81,85 @@\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error initializing plugin %v: %v\", name, err)\n\t\t}\n\t\tf.plugins[name] = p\n\t}"
  },
  {
    "id" : "c6924d5d-5d6f-4031-a51d-dfdc624e88ac",
    "prId" : 77501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77501#pullrequestreview-236328315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f882eb7a-cb28-48ff-96ee-a65d597dcf83",
        "parentId" : null,
        "authorId" : "31650cb3-7c7c-47c5-844d-0ca2916de5d6",
        "body" : "I think all plugins in the registry are initialised here. Should we skip the plugins that are not specified in `Plugins`?",
        "createdAt" : "2019-05-08T14:03:55Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "31650cb3-7c7c-47c5-844d-0ca2916de5d6",
        "tags" : [
        ]
      },
      {
        "id" : "1e3b77a1-db19-4e9c-b611-fd8db7627f3b",
        "parentId" : "f882eb7a-cb28-48ff-96ee-a65d597dcf83",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "The `if _, ok := pg[name]; !ok` skips plugins that are not needed.",
        "createdAt" : "2019-05-08T23:14:46Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "673a22d0-a756-4a5f-8e28-c18e3028bcb8",
        "parentId" : "f882eb7a-cb28-48ff-96ee-a65d597dcf83",
        "authorId" : "31650cb3-7c7c-47c5-844d-0ca2916de5d6",
        "body" : "Yea, I believe that line was added after my comment, but force pushed",
        "createdAt" : "2019-05-10T16:23:35Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "31650cb3-7c7c-47c5-844d-0ca2916de5d6",
        "tags" : [
        ]
      },
      {
        "id" : "d263e7a6-d28c-4c35-af02-4fdb9e83c162",
        "parentId" : "f882eb7a-cb28-48ff-96ee-a65d597dcf83",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "GitHub still does not make it easy to review changes relative to code review comments. /=",
        "createdAt" : "2019-05-10T22:15:11Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0734d1debb79be8164c8cfca85c7393c0aed6313",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +78,82 @@\t\tpc := pluginConfig[name]\n\n\t\tp, err := factory(pc, f)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error initializing plugin %v: %v\", name, err)"
  },
  {
    "id" : "72fc92c5-f76c-4a85-937e-eb8058cc9ef4",
    "prId" : 77501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77501#pullrequestreview-235766313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a56fc40c-9a79-4d18-b052-49c46a919757",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please remove this blank line.",
        "createdAt" : "2019-05-09T18:37:16Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "e111084e-c168-4a01-a4dc-26bc81f9da2e",
        "parentId" : "a56fc40c-9a79-4d18-b052-49c46a919757",
        "authorId" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "body" : "Squashed and pushed.\r\nThanks!!",
        "createdAt" : "2019-05-09T18:57:50Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0734d1debb79be8164c8cfca85c7393c0aed6313",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +311,315 @@\t\treturn pgMap\n\t}\n\n\tfind := func(pgs *config.PluginSet) {\n\t\tif pgs == nil {"
  },
  {
    "id" : "9484f47a-11dc-439b-88fa-2ddd7d27cc63",
    "prId" : 77501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77501#pullrequestreview-236328315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a8d6028-3332-4132-b3f8-24e9f1df5719",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "specifying initial capacity is optional.",
        "createdAt" : "2019-05-10T22:14:13Z",
        "updatedAt" : "2019-05-17T23:24:50Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0734d1debb79be8164c8cfca85c7393c0aed6313",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +298,302 @@\nfunc pluginNameToConfig(args []config.PluginConfig) map[string]*runtime.Unknown {\n\tpc := make(map[string]*runtime.Unknown, 0)\n\tfor _, p := range args {\n\t\tpc[p.Name] = &p.Args"
  },
  {
    "id" : "cda19f2e-7293-42b9-a95e-8c269d469eb9",
    "prId" : 77501,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77501#pullrequestreview-239659114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c742eb86-36f0-4759-a5a6-cf1a425b42e2",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Should we check that the plugin has corresponding config ?",
        "createdAt" : "2019-05-18T15:00:26Z",
        "updatedAt" : "2019-05-18T15:11:17Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "e47f2a3f-0bae-4e55-bc6f-3f59aecf60f0",
        "parentId" : "c742eb86-36f0-4759-a5a6-cf1a425b42e2",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "For now, I think it's okay to pass nil config into plugin factories. I'm not sure it would help to pass in an \"empty\" `runtime.Unknown` object.",
        "createdAt" : "2019-05-20T18:33:04Z",
        "updatedAt" : "2019-05-20T18:33:04Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0734d1debb79be8164c8cfca85c7393c0aed6313",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +76,80 @@\n\t\t// find the config args of a plugin\n\t\tpc := pluginConfig[name]\n\n\t\tp, err := factory(pc, f)"
  },
  {
    "id" : "dbad84fa-e84a-426e-86f2-5a829fd98fa7",
    "prId" : 75848,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75848#pullrequestreview-231907731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b2585cd-c6e1-4593-bf33-d17288a6a7d5",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "It's a bit weird to me that plugin factories could use the factory interface to get a list of plugins, and that list will be incomplete.",
        "createdAt" : "2019-04-02T00:19:26Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "00bc1eda-71e0-40f2-8a87-825dad823362",
        "parentId" : "6b2585cd-c6e1-4593-bf33-d17288a6a7d5",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "this is resolved by switching to `FrameworkHandle`",
        "createdAt" : "2019-04-26T20:47:31Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "ae74e6dd-8a68-4abc-b0c1-fd2452a896cc",
        "parentId" : "6b2585cd-c6e1-4593-bf33-d17288a6a7d5",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "that's right",
        "createdAt" : "2019-04-29T21:18:51Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "83828bcb2df27f3111837226ce87258d76533090",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@\tfor name, factory := range r {\n\t\t// TODO: 'nil' should be replaced by plugin config.\n\t\tp, err := factory(nil, f)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error initializing plugin %v: %v\", name, err)"
  },
  {
    "id" : "014f579c-4843-477d-b40f-a99d4b29f33e",
    "prId" : 75848,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75848#pullrequestreview-231907731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bed5b1b5-00e6-4151-a24e-daaabe03ee49",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I don't see the code that updates the snapshot. ",
        "createdAt" : "2019-04-10T23:57:32Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "8e2db8ad-fbc7-4053-be01-ab2d2d977ae7",
        "parentId" : "bed5b1b5-00e6-4151-a24e-daaabe03ee49",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I haven't changed the update logic. It is still in the scheduler.",
        "createdAt" : "2019-04-11T23:53:59Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "53aaf002-43d7-45d8-80b1-ea83c93a63ce",
        "parentId" : "bed5b1b5-00e6-4151-a24e-daaabe03ee49",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Did we decide to remove this func until we need it?",
        "createdAt" : "2019-04-26T20:32:14Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "e7ef1e6b-1036-49b8-ab84-6530e71c367b",
        "parentId" : "bed5b1b5-00e6-4151-a24e-daaabe03ee49",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I removed cache, but not this one. This one is already needed in various plugins that we plan to build, including the predicates.",
        "createdAt" : "2019-04-29T21:19:40Z",
        "updatedAt" : "2019-04-29T23:41:08Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "83828bcb2df27f3111837226ce87258d76533090",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +111,115 @@// unchanged after \"Reserve\".\nfunc (f *framework) NodeInfoSnapshot() *cache.NodeInfoSnapshot {\n\treturn f.nodeInfoSnapshot\n}"
  }
]