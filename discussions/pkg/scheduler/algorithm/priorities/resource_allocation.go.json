[
  {
    "id" : "a4e9d925-e06a-482f-9eec-089ea6d7148b",
    "prId" : 78319,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78319#pullrequestreview-250807648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2fc001-0cee-488e-bd37-28569b8e97bd",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Similar comment about checking feature gates applies here.",
        "createdAt" : "2019-06-18T00:31:48Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "9babbf8bd7f009b4b1738efbf524e90b1c340e85",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +104,108 @@\n\t// If Overhead is being utilized, add to the total requests for the pod\n\tif pod.Spec.Overhead != nil && utilfeature.DefaultFeatureGate.Enabled(features.PodOverhead) {\n\t\tif _, found := pod.Spec.Overhead[v1.ResourceCPU]; found {\n\t\t\tresult.MilliCPU += pod.Spec.Overhead.Cpu().MilliValue()"
  },
  {
    "id" : "c3464703-0b80-484f-aaa0-589392d20e78",
    "prId" : 78319,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78319#pullrequestreview-256567748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d742dbeb-6fe3-41c7-a4eb-e40250179bff",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "What is the effect of adding the overhead here if the container requests were explicitly set to zero?",
        "createdAt" : "2019-06-19T18:52:40Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "45250946-fdd6-4b5c-9e4a-0b137a54930c",
        "parentId" : "d742dbeb-6fe3-41c7-a4eb-e40250179bff",
        "authorId" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "body" : "Interesting - I'm curious when users would do this (ie, if all the container requests are explicitly zero in a pod) \r\n\r\nEither way, if they are running their explicitly-set-zero-request workload in a sandbox (RuntimeClass with Overhead), there is still a cost of running that sandbox, so the result of this call would be just the pod overhead.\r\n\r\nTo me, this makes sense.  WDYT?",
        "createdAt" : "2019-06-19T21:33:33Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "tags" : [
        ]
      },
      {
        "id" : "c0a5e9a5-826c-48cb-b643-5417a30807fd",
        "parentId" : "d742dbeb-6fe3-41c7-a4eb-e40250179bff",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Yeah, makes sense, but I think I don't really understand this method. I think maybe it should just be called \"getRequestsSum\" - I think non-zero just means apply defaulting?",
        "createdAt" : "2019-06-27T22:10:32Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "445fd8da-bb27-4532-9728-3755bd669410",
        "parentId" : "d742dbeb-6fe3-41c7-a4eb-e40250179bff",
        "authorId" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "body" : "Correct -- for accounting purposes it adds a non-zero value for requests that were zero.  The naming and utilization wasn't very clear to me at first.  In either case, though, the Overhead addition is needed.  There was another PR opened to help address the naming/usage: see https://github.com/kubernetes/kubernetes/pull/78263\r\n\r\n",
        "createdAt" : "2019-07-01T21:20:36Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "tags" : [
        ]
      },
      {
        "id" : "81b5e70c-ce4b-483e-9e3a-35c45658a3a5",
        "parentId" : "d742dbeb-6fe3-41c7-a4eb-e40250179bff",
        "authorId" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "body" : "- `requestedResources` is the exact sum of pod resource requests on that node.\r\n- `nonzeroRequest` is a modified version where we apply a minimum value to CPU and memory for any container that doesn't specify a value.",
        "createdAt" : "2019-07-01T21:21:04Z",
        "updatedAt" : "2019-07-16T22:03:48Z",
        "lastEditedBy" : "1ccd067e-9fba-4e11-a385-9b3c638dbd8a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9babbf8bd7f009b4b1738efbf524e90b1c340e85",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +103,107 @@\t}\n\n\t// If Overhead is being utilized, add to the total requests for the pod\n\tif pod.Spec.Overhead != nil && utilfeature.DefaultFeatureGate.Enabled(features.PodOverhead) {\n\t\tif _, found := pod.Spec.Overhead[v1.ResourceCPU]; found {"
  },
  {
    "id" : "b7ff3b15-8beb-4e0c-b22f-4be89c796e32",
    "prId" : 77688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77688#pullrequestreview-254235520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51a864a7-54e7-4b78-a9c1-cdf98426146c",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "The three separate implementations seem duplicate. One way to unify them is to have a single function that computes the pod requested resources for a specific resource name:\r\n\r\n```\r\ncalculateResourceRequest(pod *v1.Pod, resource v1.ResourceName) {\r\n   var podRequest int64\r\n   for i := range pod.Spec.Containers {\r\n\t\t\t\tcontainer := &pod.Spec.Containers[i]\r\n\t\t\t\tvalue := priorityutil.GetNonzeroRequestForResource(resource, &container.Resources.Requests)\r\n\t\t\t\tpodRequest += value\r\n\t\t\t}\r\n\t\t\tfor i := range pod.Spec.InitContainers {\r\n\t\t\t\tcontainer := &pod.Spec.InitContainers[i]\r\n\t\t\t\tvalue := priorityutil.GetNonzeroRequestForResource(resource, &container.Resources.Requests)\r\n\t\t\t\tif podRequest < value {\r\n\t\t\t\t\tpodRequest = value\r\n\t\t\t\t}\r\n\t\t\t}\r\n}\r\nreturn podRequest\r\n}\r\n```\r\n\r\nadd GetNonzeroRequestForResource to util/non_zero.go that does something like this:\r\n\r\n```\r\nfunc GetNonzeroRequestForResource(resource v1.ResourceName, requests *v1.ResourceList) (int64, int64) {\r\n  switch resource {\r\n    case v1.ResourceCPU:\r\n\tif _, found := (*requests)[v1.ResourceCPU]; !found {\r\n\t\treturn DefaultMilliCPURequest\r\n\t} else {\r\n\t\treturn requests.Cpu().MilliValue()\r\n\t}\r\n....\r\n}\r\n```\r\n",
        "createdAt" : "2019-06-21T15:30:48Z",
        "updatedAt" : "2019-08-27T17:42:32Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "c133ac47-c4b3-4574-96d9-bca572c128a8",
        "parentId" : "51a864a7-54e7-4b78-a9c1-cdf98426146c",
        "authorId" : "27d64a5d-4f76-4c5a-8a7c-11f74a736576",
        "body" : "This makes sense to me, also the function name could be GetLeastRequestForResource as it would return 0 for Scalar Resource or Ephemeral Storage. 👍 ",
        "createdAt" : "2019-06-25T19:57:41Z",
        "updatedAt" : "2019-08-27T17:42:32Z",
        "lastEditedBy" : "27d64a5d-4f76-4c5a-8a7c-11f74a736576",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae505930c5b70dd0261c2defbb959ec9dabff18",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +102,106 @@\trequested := nodeInfo.RequestedResource()\n\tpodRequest := calculatePodResourceRequest(pod, resource)\n\tswitch resource {\n\tcase v1.ResourceCPU:\n\t\treturn allocatable.MilliCPU, (nodeInfo.NonZeroRequest().MilliCPU + podRequest)"
  },
  {
    "id" : "188d98fb-58ec-4794-8ee4-051c8a0979d5",
    "prId" : 77688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77688#pullrequestreview-279897176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d882d79-7677-4e7a-9f2a-5316ce1bf0d0",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "we don't need to export this, right? s/ResourceToValueMap/resourceToValueMap",
        "createdAt" : "2019-08-27T00:15:11Z",
        "updatedAt" : "2019-08-27T17:42:32Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae505930c5b70dd0261c2defbb959ec9dabff18",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +41,45 @@\n// ResourceToValueMap contains resource name and score.\ntype ResourceToValueMap map[v1.ResourceName]int64\n\n// DefaultRequestedRatioResources is used to set default requestToWeight map for CPU and memory"
  },
  {
    "id" : "08ac8197-91f5-4282-943d-593be5df90be",
    "prId" : 77688,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77688#pullrequestreview-280022352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "276d7133-1c4d-4815-b85d-24d0cf4f78a4",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Please add the comments back.\r\n\r\n// calculatePodResourceRequest returns the total non-zero requests. If Overhead is defined for the pod and the\r\n// PodOverhead feature is enabled, the Overhead is added to the result.",
        "createdAt" : "2019-08-27T00:51:28Z",
        "updatedAt" : "2019-08-27T17:42:32Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4d4f95da-a424-45b2-a48a-8cec796104dd",
        "parentId" : "276d7133-1c4d-4815-b85d-24d0cf4f78a4",
        "authorId" : "27d64a5d-4f76-4c5a-8a7c-11f74a736576",
        "body" : "added",
        "createdAt" : "2019-08-27T08:08:52Z",
        "updatedAt" : "2019-08-27T17:42:32Z",
        "lastEditedBy" : "27d64a5d-4f76-4c5a-8a7c-11f74a736576",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae505930c5b70dd0261c2defbb959ec9dabff18",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +122,126 @@\treturn 0, 0\n}\n\n// calculatePodResourceRequest returns the total non-zero requests. If Overhead is defined for the pod and the\n// PodOverhead feature is enabled, the Overhead is added to the result."
  },
  {
    "id" : "47e6570f-c0bb-4d68-8b27-cbacf904153c",
    "prId" : 67094,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67094#pullrequestreview-144193320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89f551af-0dc2-4b9b-b3e3-737f99f5ff51",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "I think we are checking feature gate in scorer function but it won't hurt to check it here as well.",
        "createdAt" : "2018-08-07T21:31:28Z",
        "updatedAt" : "2018-08-07T21:31:28Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "be741feb1a242157c21e3fb479cd98fd55df5c53",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +59,63 @@\tvar score int64\n\t// Check if the pod has volumes and this could be added to scorer function for balanced resource allocation.\n\tif len(pod.Spec.Volumes) >= 0 && utilfeature.DefaultFeatureGate.Enabled(features.BalanceAttachedNodeVolumes) && nodeInfo.TransientInfo != nil {\n\t\tscore = r.scorer(&requested, &allocatable, true, nodeInfo.TransientInfo.TransNodeInfo.RequestedVolumes, nodeInfo.TransientInfo.TransNodeInfo.AllocatableVolumesCount)\n\t} else {"
  }
]