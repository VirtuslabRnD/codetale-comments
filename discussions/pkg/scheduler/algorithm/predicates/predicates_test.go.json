[
  {
    "id" : "6e54c4ae-a7d0-426e-9934-f0f71fe5ebca",
    "prId" : 84795,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84795#pullrequestreview-311780981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9feeef-ef6e-4b14-89d2-1945e6a5ce5f",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "we should also add some test cases that has both absent and present labels. I think you can simply copy a few from node_label_test.go.",
        "createdAt" : "2019-11-05T13:32:31Z",
        "updatedAt" : "2019-11-05T15:35:03Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "ad15a3e1-49cf-47f7-86f9-6bde01cbb694",
        "parentId" : "2e9feeef-ef6e-4b14-89d2-1945e6a5ce5f",
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Actually, it's already tested in node_label_test.go. No value to add new tests in the soon to be deprecated code. \r\nLet me know if you are ready to merge, I will lgtm",
        "createdAt" : "2019-11-05T14:37:30Z",
        "updatedAt" : "2019-11-05T15:35:03Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "cbdfbda3-4bf3-4e0b-97ba-b2f87999ce8d",
        "parentId" : "2e9feeef-ef6e-4b14-89d2-1945e6a5ce5f",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "commits squashed.",
        "createdAt" : "2019-11-05T14:42:08Z",
        "updatedAt" : "2019-11-05T15:35:03Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "134baa50b946236a29bfb29738ce9848b08077cd",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1658,1662 @@func TestNodeLabelPresence(t *testing.T) {\n\tlabel := map[string]string{\"foo\": \"bar\", \"bar\": \"foo\"}\n\ttests := []struct {\n\t\tpod           *v1.Pod\n\t\tpresentLabels []string"
  },
  {
    "id" : "a94ee71c-9d6b-4ad0-8404-595aae4e27b6",
    "prId" : 77828,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77828#pullrequestreview-266197685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a3649e6-c985-4fcb-a09c-6739c0c4148e",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "can we add a test where an existing pod has labels that matches only one constraint of an incoming pod, basically test the case we discussed in https://github.com/kubernetes/kubernetes/pull/77760#discussion_r305609112",
        "createdAt" : "2019-07-24T14:58:24Z",
        "updatedAt" : "2019-07-24T17:30:19Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "e69cb270-df9c-48ad-bc16-20e0524f7c25",
        "parentId" : "1a3649e6-c985-4fcb-a09c-6739c0c4148e",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "They're added in the test `TestEvenPodsSpreadPredicate_MultipleConstraints`. You can check out commit \"EvenPodsSpread: update 'selfMatch' logic\".",
        "createdAt" : "2019-07-24T17:26:59Z",
        "updatedAt" : "2019-07-24T17:30:19Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "9ea59d36-7356-4efd-88f3-4fe2b4c1169e",
        "parentId" : "1a3649e6-c985-4fcb-a09c-6739c0c4148e",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "nice!",
        "createdAt" : "2019-07-24T18:15:02Z",
        "updatedAt" : "2019-07-24T18:15:02Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "1822085088dcf43712049e3fa58c46f456505d03",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +5276,5280 @@\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tnodeInfoMap := schedulernodeinfo.CreateNodeNameToInfoMap(tt.existingPods, tt.nodes)"
  },
  {
    "id" : "c39cb0cd-2517-48db-bb7f-09478199ffe2",
    "prId" : 77828,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77828#pullrequestreview-266170516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fbfa0e1-303f-4b65-a8f9-78662edbc542",
        "parentId" : null,
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "seems like a duplicate import :)",
        "createdAt" : "2019-07-24T15:47:41Z",
        "updatedAt" : "2019-07-24T17:30:19Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      },
      {
        "id" : "0567fa55-dcf1-41e3-a5af-524b595d9099",
        "parentId" : "5fbfa0e1-303f-4b65-a8f9-78662edbc542",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Good catch! Updated (removed the above import as `st` is shorter to make the code compact)",
        "createdAt" : "2019-07-24T17:25:15Z",
        "updatedAt" : "2019-07-24T17:31:20Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "1822085088dcf43712049e3fa58c46f456505d03",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +36,40 @@\tschedulerapi \"k8s.io/kubernetes/pkg/scheduler/api\"\n\tschedulernodeinfo \"k8s.io/kubernetes/pkg/scheduler/nodeinfo\"\n\tst \"k8s.io/kubernetes/pkg/scheduler/testing\"\n)\n"
  },
  {
    "id" : "6720c023-1496-4d0d-a922-d54a2032f0b5",
    "prId" : 68984,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68984#pullrequestreview-158470346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "839d806e-6cd2-4d93-bb8a-65c64966ab3b",
        "parentId" : null,
        "authorId" : "7b10c627-72bd-4617-bd7a-2296b88861b7",
        "body" : "seems like the CheckNodeUnschedulablePredicate() has no callers at all, can you confirm about that?\r\nif so, do we still need to update this func?",
        "createdAt" : "2018-09-25T09:26:08Z",
        "updatedAt" : "2018-09-25T09:26:12Z",
        "lastEditedBy" : "7b10c627-72bd-4617-bd7a-2296b88861b7",
        "tags" : [
        ]
      },
      {
        "id" : "61da8951-5e1e-488c-8e07-8f807891a606",
        "parentId" : "839d806e-6cd2-4d93-bb8a-65c64966ab3b",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Added it by `RegisterMandatoryFitPredicate` in this PR.",
        "createdAt" : "2018-09-25T10:17:33Z",
        "updatedAt" : "2018-09-25T10:17:33Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "78f6484e14930cb827449637772198e8c7907f03",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +5035,5039 @@\t\tnodeInfo := schedulercache.NewNodeInfo()\n\t\tnodeInfo.SetNode(test.node)\n\t\tfit, _, err := CheckNodeUnschedulablePredicate(test.pod, nil, nodeInfo)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to check node unschedulable: %v\", err)"
  },
  {
    "id" : "def735cc-c104-4cb7-bc90-d883718d9205",
    "prId" : 68173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/68173#pullrequestreview-155313655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "234d4a4d-f9a9-4a56-b429-dd0ef0109a7f",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Can we have a test case similar to this one in `TestInterPodAffinityWithMultipleNodes` with multiple nodes. Test scenario:\r\n- We have two nodes, each running a pod.\r\n- Each one of the existing pods has anti-affinity with multiple terms (two is enough).\r\n- An incoming pod matches one of the anti-affinity terms of existing on each node and therefore, should not be schedulable.\r\n- we can optionally add a third node and verify that the pod is schedulable there. ",
        "createdAt" : "2018-09-13T21:26:53Z",
        "updatedAt" : "2018-09-14T01:33:36Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "8530f31b-07ee-4949-ae61-85aa508e401d",
        "parentId" : "234d4a4d-f9a9-4a56-b429-dd0ef0109a7f",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Done. It's added in latest commit in `TestInterPodAffinityWithMultipleNodes()`.\r\n\r\n(UT name: Test existing pod's anti-affinity: existingPod on nodeA and nodeB has at least one anti-affinity term matches incoming pod, so incoming pod can only be scheduled to nodeC)",
        "createdAt" : "2018-09-13T23:55:58Z",
        "updatedAt" : "2018-09-17T07:09:41Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "7490542156f6082176f7b85ad455e7470c37bd68",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +2738,2742 @@\t\t\tfits:                 false,\n\t\t\texpectFailureReasons: []algorithm.PredicateFailureReason{ErrPodAffinityNotMatch, ErrExistingPodsAntiAffinityRulesNotMatch},\n\t\t\tname:                 \"PodAntiAffinity symmetry check a2: incoming pod and existing pod partially match each other on AffinityTerms\",\n\t\t},\n\t\t{"
  },
  {
    "id" : "f46df322-d67c-4763-a79a-13170d72ad54",
    "prId" : 63067,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63067#pullrequestreview-115196038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87727458-9d33-4382-9d89-2a66d882e1c9",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "nit: NodeAffninity term would make it clear.",
        "createdAt" : "2018-04-25T14:15:31Z",
        "updatedAt" : "2018-04-25T14:15:31Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "793ed98715f6e490a909d9e2bf16971ef26d0e6e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1386,1390 @@\t\t\t},\n\t\t\tfits: false,\n\t\t\ttest: \"Pod with an invalid value in Affinity term won't be scheduled onto the node\",\n\t\t},\n\t}"
  },
  {
    "id" : "907a6e95-114c-4f8d-9a73-b084a3e78533",
    "prId" : 62453,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62453#pullrequestreview-116243157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5efbda01-7b84-4a76-8233-a391392ac0bf",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Could you please also add a test case with multiple selector terms? For example a case where there are multiple `MatchExpressions` and `MatchFields` terms?",
        "createdAt" : "2018-04-28T01:29:03Z",
        "updatedAt" : "2018-04-28T03:10:41Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "76f3f271-321f-4582-9acd-2e380aafadc8",
        "parentId" : "5efbda01-7b84-4a76-8233-a391392ac0bf",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "done :)",
        "createdAt" : "2018-04-30T10:07:48Z",
        "updatedAt" : "2018-04-30T10:07:49Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a7f85c9e90ef84c51cd173a16e42ce2560fe35",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1389,1393 @@\t\t\ttest: \"Pod with an invalid value in Affinity term won't be scheduled onto the node\",\n\t\t},\n\t\t{\n\t\t\tpod: &v1.Pod{\n\t\t\t\tSpec: v1.PodSpec{"
  },
  {
    "id" : "7f1088c1-943c-40b9-a8ac-1ff8895974d5",
    "prId" : 59735,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59735#pullrequestreview-106441600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01748b6-a020-4aaf-be96-e9455e4616bc",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "nit: I think you can combine splitPVCPod and onePVCPod",
        "createdAt" : "2018-03-23T03:24:24Z",
        "updatedAt" : "2018-03-23T03:24:24Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "7d26f54e-7e1c-4483-8d3b-fb9f674d13f0",
        "parentId" : "f01748b6-a020-4aaf-be96-e9455e4616bc",
        "authorId" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "body" : "This is more clear. At present, it is only a change of the previous function form.",
        "createdAt" : "2018-03-23T10:27:51Z",
        "updatedAt" : "2018-03-23T10:27:51Z",
        "lastEditedBy" : "33ab9fbe-6f55-45c0-a58d-be01aec201d9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fb182646765152d4cde8efe7f6da6804d4a16f7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1579,1583 @@}\n\nfunc onePVCPod(filterName string) *v1.Pod {\n\treturn &v1.Pod{\n\t\tSpec: v1.PodSpec{"
  }
]