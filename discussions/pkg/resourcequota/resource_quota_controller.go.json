[
  {
    "id" : "b47cde50-5d80-4c17-868d-a72d3e5eeb4a",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "970afe31-6b31-49f2-9487-2dac1b110a07",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If there are 1000 namespaces times 5 ResourceQuotas per namespace , is it a good idea to launch 5000 goroutines?  Honest question.   I probably wouldn't do that if it was threads, but maybe goroutines are different.\n",
        "createdAt" : "2015-01-27T09:01:43Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "a06f4c5f-8e80-4694-acb1-30fecd2ef362",
        "parentId" : "970afe31-6b31-49f2-9487-2dac1b110a07",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html?m=1\n\nGreat article.  Short answer is that this is fine to do because go routines are different than threads.  This would have been a bad thing if we modified runtime.GOMAXPROCS\n\nSent from my iPhone\n\n> On Jan 27, 2015, at 4:02 AM, Eric Tune notifications@github.com wrote:\n> \n> In pkg/resourcequota/resource_quota_controller.go:\n> \n> > +// Run begins watching and syncing.\n> > +func (rm *ResourceQuotaManager) Run(period time.Duration) {\n> > -   rm.syncTime = time.Tick(period)\n> > -   go util.Forever(func() { rm.synchronize() }, period)\n> >   +}\n> >   +\n> >   +func (rm *ResourceQuotaManager) synchronize() {\n> > -   var resourceQuotas []api.ResourceQuota\n> > -   list, err := rm.kubeClient.ResourceQuotas(api.NamespaceAll).List(labels.Everything())\n> > -   if err != nil {\n> > -       glog.Errorf(\"Synchronization error: %v (%#v)\", err, err)\n> > -   }\n> > -   resourceQuotas = list.Items\n> > -   wg := sync.WaitGroup{}\n> > -   wg.Add(len(resourceQuotas))\n> > -   for ix := range resourceQuotas {\n> >   If there are 1000 namespaces times 5 ResourceQuotas per namespace , is it a good idea to launch 5000 goroutines? Honest question. I probably wouldn't do that if it was threads, but maybe goroutines are different.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-27T14:07:10Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@\twg := sync.WaitGroup{}\n\twg.Add(len(resourceQuotas))\n\tfor ix := range resourceQuotas {\n\t\tgo func(ix int) {\n\t\t\tdefer wg.Done()"
  },
  {
    "id" : "171fb78b-091a-4561-b454-592b6ef3985b",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d375b8-41b1-483b-b460-61d6ecd56753",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If the atomic compare and swap fails, then this fails, and then retries again in the next interval?  \n",
        "createdAt" : "2015-01-27T16:39:54Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@\n\t// update the usage only if it changed\n\tif dirty {\n\t\treturn rm.kubeClient.ResourceQuotaUsages(usage.Namespace).Create(&usage)\n\t}"
  }
]