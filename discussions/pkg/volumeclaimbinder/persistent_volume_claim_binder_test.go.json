[
  {
    "id" : "4941e8ff-6c89-4ed9-bea9-3407224434e6",
    "prId" : 6105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "minor: why the struct here, rather than map[string]interface{} ?  I'm actually a bit surprised the syntax works - any reason for this?\n",
        "createdAt" : "2015-04-13T20:26:37Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "72ca1dc6-114e-48a7-91ec-7adfe163804d",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "It's an inline definition that I learned from other unit tests.  I've been making all my test scenarios like this across all unit tests.  It's pretty convenient.\n",
        "createdAt" : "2015-04-13T20:31:20Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "7aec8ac9-dfee-41b7-93a3-3771565966bc",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Just curious - how is it more convenient?\n\n```\nscenarios := map[string]struct {\n    expected interface{}\n}{\n    \"foo\": {\n        expected: &Bar{...}\n    }\n}\n```\n\nvs\n\n```\nscenarios := map[string]interface{}{\n    \"foo\": &Bar{...}\n}\n```\n",
        "createdAt" : "2015-04-13T20:39:45Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "50bc17b3-8a5d-4e54-8508-455b4c706b22",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "What is &Bar{} in this example?  Do I have to define Bar's properties elsewhere in the test file?  \n\nThe structs I define inline like this contain all the properties related to that specific testing scenario.\n",
        "createdAt" : "2015-04-14T00:46:41Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "9151ab00-619f-4c28-827a-45abb775315a",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "concretely, taking your code\n\n```\nscenarios := map[string]struct {\n        expected interface{}\n}{\n    \"claims/claim-01.yaml\": &api.PersistentVolumeClaim{\n        Spec: api.PersistentVolumeClaimSpec{\n            AccessModes: []api.AccessModeType{api.ReadWriteOnce},\n            Resources: api.ResourceRequirements{\n                Requests: api.ResourceList{\n                    api.ResourceName(api.ResourceStorage): resource.MustParse(\"3Gi\"),\n                },\n            },\n        },\n    },\n```\n\nThe only difference is that I omitted \"{\\n\\t\\t\\texpected: \" and \" one closing curly.\n",
        "createdAt" : "2015-04-14T01:21:47Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fc99bf2b-e3e3-4553-9ce8-7aae1e9b76a9",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Oh, I see now.   In this particular test I had but the one property in each \"scenario\" whereas all my other tests usually have many properties in the struct.  I just kept the same pattern.  I see how I can reduce it here if I have no other properties to add to the test scenarios.\n",
        "createdAt" : "2015-04-14T02:51:38Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "43104f51-2c22-44e6-b705-ddc2c00204ea",
        "parentId" : "255cd672-80e0-46ef-b9e8-f9607b681b9f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "You don't have to fix it, I just wanted to understand if there was some trickery going on that I did not understand.\n",
        "createdAt" : "2015-04-14T05:51:04Z",
        "updatedAt" : "2015-04-27T19:00:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "beacd8722af7d1c7e6a72360fdbee00b75e03d4b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +52,56 @@\nfunc TestExampleObjects(t *testing.T) {\n\tscenarios := map[string]struct {\n\t\texpected interface{}\n\t}{"
  }
]