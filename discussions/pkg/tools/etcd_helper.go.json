[
  {
    "id" : "8c3683e0-ba90-4334-a43d-031a7ba08fd4",
    "prId" : 10074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd6a6304-9635-4d41-957c-0c4cbb770c45",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "add comment about when this may be nil\n",
        "createdAt" : "2015-06-19T23:02:41Z",
        "updatedAt" : "2015-06-23T07:16:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "79d0fe61-8157-416b-bc40-b2c24369c91d",
        "parentId" : "bd6a6304-9635-4d41-957c-0c4cbb770c45",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Done\n",
        "createdAt" : "2015-06-20T01:29:11Z",
        "updatedAt" : "2015-06-23T07:16:23Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "221ae4d63b5340d551f5ad51f11525f3a1bfc6ab",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +493,497 @@\t// expiration time due to server lag).\n\tTTL int64\n\t// Expiration is the time at which the node that contained the returned object will expire and be deleted.\n\t// This can be nil if there is no expiration time set for the node.\n\tExpiration *time.Time"
  },
  {
    "id" : "8ee2fbd1-8463-4ad2-8a71-062028fbc5cb",
    "prId" : 9958,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5583b4f-6f82-4524-bbb0-f9dc3084108b",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Typo runtiem\n",
        "createdAt" : "2015-06-26T22:27:22Z",
        "updatedAt" : "2015-06-26T22:27:22Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "47018d13-480b-4bec-b4e4-ef6e4e8af600",
        "parentId" : "d5583b4f-6f82-4524-bbb0-f9dc3084108b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "How about when I refactor it :)\n\n> On Jun 26, 2015, at 6:27 PM, Quinton Hoole notifications@github.com wrote:\n> \n> In pkg/tools/etcd_helper.go:\n> \n> > @@ -119,11 +120,13 @@ type EtcdHelper struct {\n> > \n> >  // NewEtcdHelper creates a helper that works against objects that use the internal\n> >  // Kubernetes API objects.\n> > +// TODO: Refactor to take a runtiem.ObjectCopier\n> > nit: Typo runtiem\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-06-26T22:29:39Z",
        "updatedAt" : "2015-06-26T22:29:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "51f1dfad-4aba-49e1-a589-d5e957f64f5f",
        "parentId" : "d5583b4f-6f82-4524-bbb0-f9dc3084108b",
        "authorId" : null,
        "body" : "Agreed.  Unlikely to cause mass system instability :)\n",
        "createdAt" : "2015-06-26T22:38:13Z",
        "updatedAt" : "2015-06-26T22:38:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "6970dda54e6662be6630924ea01f496bbe8a1f57",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +121,125 @@// NewEtcdHelper creates a helper that works against objects that use the internal\n// Kubernetes API objects.\n// TODO: Refactor to take a runtiem.ObjectCopier\nfunc NewEtcdHelper(client EtcdGetSet, codec runtime.Codec, prefix string) EtcdHelper {\n\treturn EtcdHelper{"
  },
  {
    "id" : "e2b9bb57-1127-43f4-871f-277a53d3e778",
    "prId" : 8724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b28b54d5-03b6-4373-84b8-85b9abb9da46",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Much better, thanks!\n",
        "createdAt" : "2015-05-26T18:43:46Z",
        "updatedAt" : "2015-05-28T23:59:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b8e918ed9449cdb6b83a182241f5b3edf2af1f2",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +492,496 @@// an object. It abstracts the actual underlying objects to prevent coupling with etcd\n// and to improve testability.\ntype ResponseMeta struct {\n\t// TTL is the time to live of the node that contained the returned object. It may be\n\t// zero or negative in some cases (objects may be expired after the requested"
  },
  {
    "id" : "41c7a1f7-ec56-44ff-838f-113e4e1830cd",
    "prId" : 7675,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f056e011-7628-42a3-b730-08853eafdaef",
        "parentId" : null,
        "authorId" : null,
        "body" : "Need a better error message here to aid debugging. Please include host and port, and the fact that it's an etcd server.\n",
        "createdAt" : "2015-05-04T21:33:08Z",
        "updatedAt" : "2015-05-04T21:33:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a21713a771a2e66beb3f579326fe1f47bdea95a9",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +484,488 @@\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"Unsuccessful response from server: %v\", err)\n\t}\n\tversionBytes, err := ioutil.ReadAll(response.Body)"
  },
  {
    "id" : "1c804b0a-0ceb-49d1-916e-58523ec20bdd",
    "prId" : 7559,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df378cde-bfd4-40b2-9968-d58b2ccc2f89",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I'm always confused by Go reflection.  Does this somehow do a deep-copy of the object?  (I think I can persuade myself that it does a shallow copy)\n\nIf not, is this safe?\n",
        "createdAt" : "2015-05-15T02:50:59Z",
        "updatedAt" : "2015-05-15T02:50:59Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "4aa42996-82c8-4676-bb3d-cddbc25bf5e9",
        "parentId" : "df378cde-bfd4-40b2-9968-d58b2ccc2f89",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Ooops ... ignore.  Totally missed the deep copy in getFromCache (somehow)\n",
        "createdAt" : "2015-05-15T02:52:26Z",
        "updatedAt" : "2015-05-15T02:52:26Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "15e9bfd9ae5d09ea3dc7f663c2d877f14d6b4d9a",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +136,140 @@\t\t}\n\t\tif obj, found := h.getFromCache(node.ModifiedIndex); found {\n\t\t\tv.Set(reflect.Append(v, reflect.ValueOf(obj).Elem()))\n\t\t} else {\n\t\t\tobj := reflect.New(v.Type().Elem())"
  },
  {
    "id" : "2d1629c4-0533-4602-9ed6-a0f8dabc8b3a",
    "prId" : 7288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bc5162a-0fc0-4529-894d-5dd409ef81eb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "// TODO: Measure how much this cache helps after the conversion code is optimized.\n",
        "createdAt" : "2015-04-27T18:10:15Z",
        "updatedAt" : "2015-04-29T11:14:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6254a1c2-e7d0-49db-9109-a234c75a7aa8",
        "parentId" : "2bc5162a-0fc0-4529-894d-5dd409ef81eb",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-04-28T09:15:38Z",
        "updatedAt" : "2015-04-29T11:14:59Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "016e20167bbd9ebff29085e72d7970f82880a730",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +50,54 @@\t// have to revisited if we decide to do things like multiple etcd clusters, or etcd will\n\t// support multi-object transaction that will result in many objects with the same index.\n\t// Number of entries stored in the cache is controlled by maxEtcdCacheEntries constant.\n\t// TODO: Measure how much this cache helps after the conversion code is optimized.\n\tcache map[uint64]runtime.Object"
  },
  {
    "id" : "311a05fb-3280-4c95-94a4-41a9a71aca5a",
    "prId" : 7288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "207409b1-4b57-4785-8e5f-3f181d0a54b9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Deep copy before adding to cache...\n",
        "createdAt" : "2015-04-27T18:17:22Z",
        "updatedAt" : "2015-04-29T11:14:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ce0bc745-fc07-4578-bf07-705bcdff326a",
        "parentId" : "207409b1-4b57-4785-8e5f-3f181d0a54b9",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done\n",
        "createdAt" : "2015-04-28T09:15:43Z",
        "updatedAt" : "2015-04-29T11:14:59Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "016e20167bbd9ebff29085e72d7970f82880a730",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t\t}\n\t\t\tv.Set(reflect.Append(v, obj.Elem()))\n\t\t\tif node.ModifiedIndex != 0 {\n\t\t\t\th.addToCache(node.ModifiedIndex, obj.Interface().(runtime.Object))\n\t\t\t}"
  },
  {
    "id" : "cd4f859a-0926-4b35-948e-9f052cebdb2f",
    "prId" : 5707,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c28c1de3-eb9b-4786-8d50-710c7e8cff5d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please modify the helper functions in this package to prepend keys with this prefix.\n",
        "createdAt" : "2015-04-08T23:29:55Z",
        "updatedAt" : "2015-04-24T10:13:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7623ca6cc9e4a0566f182b1dfe2a4ae5bd1d548",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +52,56 @@\t\tCodec:      codec,\n\t\tVersioner:  APIObjectVersioner{},\n\t\tPathPrefix: prefix,\n\t}\n}"
  }
]