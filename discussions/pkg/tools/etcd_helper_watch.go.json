[
  {
    "id" : "09804617-41e1-478f-b4b8-66bc6eb0271a",
    "prId" : 10427,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "608c644f-055a-4b5c-93cf-7f2333c1caca",
        "parentId" : null,
        "authorId" : null,
        "body" : "This is going to cause a logging storm, which will further exacerbate the backlog. Don't you rather want this logging threshold to be greater than zero?  Perhaps n/2 for a channel of length n?  And you don't want to log more often than once a minute or so.\n",
        "createdAt" : "2015-06-29T18:06:43Z",
        "updatedAt" : "2015-06-29T18:06:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6c3fa577-ef75-4c1d-bcf2-baa8b7792061",
        "parentId" : "608c644f-055a-4b5c-93cf-7f2333c1caca",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Basically I want to know if it's ever > 0-- if so, that justifies this patch. If not, this patch didn't fix anything.\n\nI can adjust to reduce log spam, but the decoding process that is backing things up is _much_ more resource intensive than a log message, so this is \"only\" a cosmetic problem.\n",
        "createdAt" : "2015-06-29T18:13:46Z",
        "updatedAt" : "2015-06-29T18:13:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c944215b-f5ee-43dc-954e-1068785fe799",
        "parentId" : "608c644f-055a-4b5c-93cf-7f2333c1caca",
        "authorId" : null,
        "body" : "I'd suggest basic edge triggering then.  Log once when it crosses from zero to non-zero, and once when it crosses back again.  \n",
        "createdAt" : "2015-06-29T18:19:41Z",
        "updatedAt" : "2015-06-29T18:19:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6d74c8c7-c7f0-41e4-b345-84c0f916881d",
        "parentId" : "608c644f-055a-4b5c-93cf-7f2333c1caca",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@quinton-hoole - this is logged at the 4 level - by default we're using 2, so this won't be logged\n",
        "createdAt" : "2015-06-29T18:30:39Z",
        "updatedAt" : "2015-06-29T18:30:39Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "63dc5ccd-2a1f-4fe0-b083-f8f5cbf6f883",
        "parentId" : "608c644f-055a-4b5c-93cf-7f2333c1caca",
        "authorId" : null,
        "body" : "Good point.  Fair enough. LGTM\n",
        "createdAt" : "2015-06-29T18:33:00Z",
        "updatedAt" : "2015-06-29T18:33:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "45ac0cf25e9b7def174cef4003275365054c5457",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +260,264 @@\t\tcase res, ok := <-w.etcdIncoming:\n\t\t\tif ok {\n\t\t\t\tif curLen := len(w.etcdIncoming); curLen > 0 {\n\t\t\t\t\t// Monitor if this gets backed up, and how much.\n\t\t\t\t\tglog.V(4).Infof(\"watch: %v objects queued in channel.\", curLen)"
  },
  {
    "id" : "dc7b6068-c6d7-45b5-9c5d-383066ac974b",
    "prId" : 7288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02da60b9-587f-4b79-b0ff-9f4b25f1e31e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe the race is because someone later modifies obj? Maybe you need to deepcopy before returning.\n",
        "createdAt" : "2015-04-27T18:16:41Z",
        "updatedAt" : "2015-04-29T11:14:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "016e20167bbd9ebff29085e72d7970f82880a730",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +286,290 @@\n\tif node.ModifiedIndex != 0 {\n\t\tw.cache.addToCache(node.ModifiedIndex, obj)\n\t}\n\treturn obj, nil"
  }
]