[
  {
    "id" : "279d5142-5cb9-4ca4-8424-c066ef0e472e",
    "prId" : 3535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1020509d-7c11-4d89-a5cc-bc5b96a7c5a3",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is the goroutine on the other side of this channel guaranteed to have seen the above close and in turn closed ResultChan before getting to this line?  Or is it racy?  \n",
        "createdAt" : "2015-01-15T22:08:29Z",
        "updatedAt" : "2015-01-15T22:08:29Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "72cb025d-de63-41ea-882e-e533404e77b2",
        "parentId" : "1020509d-7c11-4d89-a5cc-bc5b96a7c5a3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I was unable to recreate any races as I was testing the behavior.  If the bug is not fixed (if the first watch response is not ignored by the key) the test will hang, because the result chan will still be open until all values are read.\n",
        "createdAt" : "2015-01-15T22:33:35Z",
        "updatedAt" : "2015-01-15T22:33:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7af1e1dc-1f04-4365-9ced-8309814edf16",
        "parentId" : "1020509d-7c11-4d89-a5cc-bc5b96a7c5a3",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I wasn't worried about the bug not being fixed.  I'm worried about spurious test failures.\n",
        "createdAt" : "2015-01-16T16:22:36Z",
        "updatedAt" : "2015-01-16T16:22:36Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "773a5733-7f97-4914-97ce-b6e8e77a52d0",
        "parentId" : "1020509d-7c11-4d89-a5cc-bc5b96a7c5a3",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Right - to the best of my knowledge and testing this is deterministic.  \n\n> On Jan 16, 2015, at 11:23 AM, Eric Tune notifications@github.com wrote:\n> \n> In pkg/tools/etcd_tools_watch_test.go:\n> \n> > -   }\n> > -   // Delete of the parent directory of a key is an event that a list watch would receive,\n> > -   // but will have no value so the decode will fail.\n> > -   fakeClient.WatchResponse <- &etcd.Response{\n> > -       Action: \"delete\",\n> > -       PrevNode: &etcd.Node{\n> > -           Key:           \"/some/key\",\n> > -           Value:         \"\",\n> > -           CreatedIndex:  1,\n> > -           ModifiedIndex: 1,\n> > -       },\n> > -   }\n> > -   close(fakeClient.WatchStop)\n> >   +\n> > -   // the existing node is detected and the index set\n> > -   _, open := <-watching.ResultChan()\n> >   I wasn't worried about the bug not being fixed. I'm worried about spurious test failures.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-01-16T20:14:45Z",
        "updatedAt" : "2015-01-16T20:14:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce36431954a0e012a60a3dfa535903d662f69b1c",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +562,566 @@\n\t// the existing node is detected and the index set\n\t_, open := <-watching.ResultChan()\n\tif open {\n\t\tt.Fatalf(\"unexpected channel open\")"
  },
  {
    "id" : "27c6aa0b-f811-4d1b-9913-165b82252d0a",
    "prId" : 3535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "764e248d-8b26-4671-b842-fe8e45f1ae08",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The docs for NewFakeEtcdClient seem to say that you have to fakeClient.WaitForWatchCompletion before touching the WatchStop channel?\n",
        "createdAt" : "2015-01-15T22:13:13Z",
        "updatedAt" : "2015-01-15T22:13:13Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "e07b6c1a-2af8-42af-823c-746858f45d9b",
        "parentId" : "764e248d-8b26-4671-b842-fe8e45f1ae08",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's called up above.\n",
        "createdAt" : "2015-01-15T22:32:07Z",
        "updatedAt" : "2015-01-15T22:32:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5f6173f0-fc94-46eb-8219-6aed8f094ebb",
        "parentId" : "764e248d-8b26-4671-b842-fe8e45f1ae08",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "oh, I missed that.  Ok.\n",
        "createdAt" : "2015-01-16T16:18:04Z",
        "updatedAt" : "2015-01-16T16:18:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce36431954a0e012a60a3dfa535903d662f69b1c",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +558,562 @@\t\t\tModifiedIndex: 1,\n\t\t},\n\t}\n\tclose(fakeClient.WatchStop)\n"
  }
]