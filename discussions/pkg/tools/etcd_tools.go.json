[
  {
    "id" : "b1b5ecea-2e0a-4efe-9f5b-287002400f18",
    "prId" : 4991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f089928b-f790-456b-bb06-224d5849eb80",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Are we now requiring etcd version >= 2.0?\n",
        "createdAt" : "2015-03-03T19:32:38Z",
        "updatedAt" : "2015-03-04T00:59:57Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "08cf0403-922b-4fa2-b2dd-70972538e9ce",
        "parentId" : "f089928b-f790-456b-bb06-224d5849eb80",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "No explicit version check yet, but this code will enable it. The previous version was just broken. It seems at some point etcd started returning a simple JSON version object for the version request.\n",
        "createdAt" : "2015-03-03T20:18:37Z",
        "updatedAt" : "2015-03-04T00:59:57Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      },
      {
        "id" : "041c63f0-ece7-43ae-a3ba-31d275d87cda",
        "parentId" : "f089928b-f790-456b-bb06-224d5849eb80",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "This unmarshall will return an error with etcd v0.4.6 where /version still returns `etcd 0.4.6` so this is essentially a > 0.4.6 minimum version check. Is that a concern? The transition may have happened at etcd v2.0.\n",
        "createdAt" : "2015-03-03T20:49:21Z",
        "updatedAt" : "2015-03-04T00:59:57Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "b2fc2553-db26-4df2-8c86-7a30701fafb4",
        "parentId" : "f089928b-f790-456b-bb06-224d5849eb80",
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Shouldn't be a concern with the current usage of this code (see NewEtcdClientStartServerIfNecessary below). But, could be an issue if other start relying on this code for a true version check.\n",
        "createdAt" : "2015-03-03T21:40:38Z",
        "updatedAt" : "2015-03-04T00:59:57Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      },
      {
        "id" : "18a97a67-5c0c-41ac-9e39-6ea5e07ca6f7",
        "parentId" : "f089928b-f790-456b-bb06-224d5849eb80",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Sounds good.\n",
        "createdAt" : "2015-03-04T01:04:02Z",
        "updatedAt" : "2015-03-04T01:04:02Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c38c6f0dad31b1f3be95d4f4b8b21eb2273dec1c",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +434,438 @@\n\tvar dat map[string]interface{}\n\tif err := json.Unmarshal(body, &dat); err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"unknown server: %s\", string(body))\n\t}"
  },
  {
    "id" : "67d3d4a7-756f-43a4-9a21-7e8056a93a63",
    "prId" : 4419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "104000d1-c2bc-43c9-8543-57e50ad77acb",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is it possible to apply a resourceVersion precondition on delete? That would be useful for delete-create races.\n",
        "createdAt" : "2015-02-13T17:41:16Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "99744346-8c2e-47ce-ad8a-4db7f243e5a0",
        "parentId" : "104000d1-c2bc-43c9-8543-57e50ad77acb",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'll spawn a follow up for that, it's possible via compareanddelete.\n\n----- Original Message -----\n\n> >  // Delete removes the specified key.\n> >  func (h *EtcdHelper) Delete(key string, recursive bool) error {\n> >     _, err := h.Client.Delete(key, recursive)\n> >     return err\n> >  }\n> > \n> > +// DeleteObj removes the specified key and returns the value that existed\n> > at that spot.\n> > +func (h *EtcdHelper) DeleteObj(key string, out runtime.Object) error {\n> > -   if _, err := conversion.EnforcePtr(out); err != nil {\n> > -       panic(\"unable to convert output object to pointer\")\n> > -   }\n> > -   response, err := h.Client.Delete(key, false)\n> \n> Is it possible to apply a resourceVersion precondition on delete? That would\n> be useful for delete-create races.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24681391\n",
        "createdAt" : "2015-02-13T17:42:47Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440310ea0d11ad2e3f8e21c98bae08dc3ee3e13",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +322,326 @@\t\tpanic(\"unable to convert output object to pointer\")\n\t}\n\tresponse, err := h.Client.Delete(key, false)\n\tif !IsEtcdNotFound(err) {\n\t\t// if the object that existed prior to the delete is returned by etcd, update out."
  },
  {
    "id" : "78a3b873-7bab-49a7-ae51-21eb7cc195b2",
    "prId" : 4419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is #656 still unresolved?\n",
        "createdAt" : "2015-02-13T17:42:02Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "078b8947-8ace-4f33-8c16-8f93d6649d2c",
        "parentId" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will allow create on update, but not overwrite on update (but that can be done from the client).  There's no way to do a blind put today, so it resolves one of those use cases but not the other.\n\n----- Original Message -----\n\n> > @@ -359,10 +409,11 @@ func (h *EtcdHelper) AtomicUpdate(key string,\n> > ptrToType runtime.Object, ignoreNo\n> >             return nil\n> >         }\n> > -       _, err = h.Client.CompareAndSwap(key, string(data), 0, origBody, index)\n> > -       response, err := h.Client.CompareAndSwap(key, string(data), 0, origBody,\n> >   index)\n> \n> Is #656 still unresolved?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24681444\n",
        "createdAt" : "2015-02-13T17:43:42Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "62547a6d-c6cb-41d2-833e-77ae4eb6dc8e",
        "parentId" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "With respect to the storage layer semantics, here.\n",
        "createdAt" : "2015-02-13T17:48:44Z",
        "updatedAt" : "2015-02-13T18:11:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "990c3087-8eaa-4b0d-9bad-cf1f2bc7dcf6",
        "parentId" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Since generic/etcd is essentially a rest store, I'd say the rest semantics are not satisfied for blind put, but all other storage level things are resolved.\n",
        "createdAt" : "2015-02-13T18:47:46Z",
        "updatedAt" : "2015-02-13T18:47:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1af81bae-db54-4fe5-9bd8-f512d8d316db",
        "parentId" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Blind PUT with no precondition? I don't know how important that is. Esp. since we store Spec and Status together, I don't even think we should allow that at the storage layer.\n",
        "createdAt" : "2015-02-13T18:54:16Z",
        "updatedAt" : "2015-02-13T18:54:16Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "93927c9a-5ff7-4ed2-b5d7-a383bdcc44e8",
        "parentId" : "32785955-32d4-47c7-ab65-78cc5b56a2b0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's more for things like \"there should be a thing here with these values, it's ok if a conflict happens and I overwrite it because of the semantics of the request\".  Resize to a specific number (absolute) is probably more efficiently implemented this way, where you say \"size = X\" and last write wins.\n\n----- Original Message -----\n\n> > @@ -359,10 +409,11 @@ func (h *EtcdHelper) AtomicUpdate(key string,\n> > ptrToType runtime.Object, ignoreNo\n> >             return nil\n> >         }\n> > -       _, err = h.Client.CompareAndSwap(key, string(data), 0, origBody, index)\n> > -       response, err := h.Client.CompareAndSwap(key, string(data), 0, origBody,\n> >   index)\n> \n> Blind PUT with no precondition? I don't know how important that is. Esp.\n> since we store Spec and Status together, I don't even think we should allow\n> that at the storage layer.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4419/files#r24686782\n",
        "createdAt" : "2015-02-13T18:58:40Z",
        "updatedAt" : "2015-02-13T18:58:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440310ea0d11ad2e3f8e21c98bae08dc3ee3e13",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +410,414 @@\t\t}\n\n\t\tresponse, err := h.Client.CompareAndSwap(key, string(data), 0, origBody, index)\n\t\tif IsEtcdTestFailed(err) {\n\t\t\tcontinue"
  },
  {
    "id" : "55dde487-9e69-4216-9a9e-681d3a09f034",
    "prId" : 2121,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e0d92ea-a597-4fa5-bd39-6acbb17d4759",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "IIRC version can race on startup because it loads earlier than other attributes.  Can't find the issue now, but we switched to reading the root key in a few places because of it.\n",
        "createdAt" : "2014-11-02T17:58:56Z",
        "updatedAt" : "2014-11-10T21:34:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b1a6c8d7-6256-4635-99f7-67ea9c075835",
        "parentId" : "1e0d92ea-a597-4fa5-bd39-6acbb17d4759",
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Yeah - `/version` returns 200s before things are up and really running.  See: https://github.com/GoogleCloudPlatform/kubernetes/pull/963#issuecomment-52795798\n",
        "createdAt" : "2014-11-02T18:11:44Z",
        "updatedAt" : "2014-11-10T21:34:19Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "7768362a-05cf-4df7-bf76-1f6bcc11267f",
        "parentId" : "1e0d92ea-a597-4fa5-bd39-6acbb17d4759",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I think that's ok.  Nothing crashes if etcd isn't fully there, and if there\nis a /version there, it will get there eventually...\n\nI can switch to hitting the root key, if we really want to, but unlike the\nintegration tests, I don't immediately start hammering the server and\nexpecting correct responses.\n\n--brendan\n\nOn Sun, Nov 2, 2014 at 10:11 AM, Joe Beda notifications@github.com wrote:\n\n> In pkg/tools/etcd_tools.go:\n> \n> > @@ -358,3 +364,42 @@ func (h *EtcdHelper) AtomicUpdate(key string, ptrToType runtime.Object, tryUpdat\n> >         return err\n> >     }\n> >  }\n> > +\n> > +func checkEtcd(host string) error {\n> > -   response, err := http.Get(host + \"/version\")\n> \n> Yeah - /version returns 200s before things are up and really running.\n> See: #963 (comment)\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/963#issuecomment-52795798\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2121/files#r19713556\n> .\n",
        "createdAt" : "2014-11-02T19:14:18Z",
        "updatedAt" : "2014-11-10T21:34:19Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c1221864df05a1fe1f8cdc362ea8121d2c2330b",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +367,371 @@\nfunc checkEtcd(host string) error {\n\tresponse, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "7611595f-c585-4c47-9f44-d96599c89340",
    "prId" : 1564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5254392f-d448-45ab-ac28-7b6227088bbe",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you return here to avoid the deep else?\n",
        "createdAt" : "2014-10-08T15:34:15Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "def87683-2edc-45cf-b71f-2e0e4983e69d",
        "parentId" : "5254392f-d448-45ab-ac28-7b6227088bbe",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@smarterclayton No.  It's possible in the future that we will have a node structure in etcd where a directory and a node exist at the same depth in the hierarchy, so we need to process all non-directory sibling nodes.\n\nFor example:\n\n/key/registry/foo/bar <- Node.Dir=false\n/key/registry/foo/abc <- Node.Dir=true\n/key/registry/foo/abc/def <- Node.Dir = false\n\ncalling List nodes recursively on /key/registry/foo would need to return {bar,def}\n",
        "createdAt" : "2014-10-08T17:20:19Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "f9b5843d-ce19-4b08-bddc-b00e80cd5fe7",
        "parentId" : "5254392f-d448-45ab-ac28-7b6227088bbe",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I meant `continue`\n",
        "createdAt" : "2014-10-08T17:36:30Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a42566c4-8ac5-434d-a446-c2dbf8141980",
        "parentId" : "5254392f-d448-45ab-ac28-7b6227088bbe",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Sure thing - update complete.\n\n----- Original Message -----\nFrom: \"Clayton Coleman\" notifications@github.com\nTo: \"GoogleCloudPlatform/kubernetes\" kubernetes@noreply.github.com\nCc: \"Derek Carr\" decarr@redhat.com\nSent: Wednesday, October 8, 2014 1:36:47 PM\nSubject: Re: [kubernetes] Enforce namespace unique constraints (#1564)\n\n> @@ -139,16 +145,20 @@ func (h *EtcdHelper) ExtractList(key string, slicePtr interface{}, resourceVersi\n>   }\n>   v := pv.Elem()\n>   for _, node := range nodes {\n> -     obj := reflect.New(v.Type().Elem())\n> -     err = h.Codec.DecodeInto([]byte(node.Value), obj.Interface().(runtime.Object))\n> -     if h.ResourceVersioner != nil {\n> -         _ = h.ResourceVersioner.SetResourceVersion(obj.Interface().(runtime.Object), node.ModifiedIndex)\n> -         // being unable to set the version does not prevent the object from being extracted\n> -     }\n> -     if err != nil {\n> -         return err\n> -     if node.Dir {\n> -         h.decodeNodeList(node.Nodes, slicePtr)\n\nI meant continue\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/GoogleCloudPlatform/kubernetes/pull/1564/files#r18598677\n",
        "createdAt" : "2014-10-08T17:42:56Z",
        "updatedAt" : "2014-10-16T17:06:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "085ca40291dc5d40f8e9fccb83352fc6226fdf4f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +179,183 @@\tfor _, node := range nodes {\n\t\tif node.Dir {\n\t\t\th.decodeNodeList(node.Nodes, slicePtr)\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "06d45fdb-95d6-472d-bdaa-8882917165af",
    "prId" : 1438,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "127736bc-3d74-4038-a099-884d6c8a4672",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Add documentation that ttl is in seconds, and zero means no TTL\n",
        "createdAt" : "2014-09-25T05:15:50Z",
        "updatedAt" : "2014-09-25T19:08:25Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d4ebcd38ef228465bea559ee567690e2203195b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +210,214 @@// CreateObj adds a new object at a key unless it already exists. 'ttl' is time-to-live in seconds,\n// and 0 means forever.\nfunc (h *EtcdHelper) CreateObj(key string, obj runtime.Object, ttl uint64) error {\n\tdata, err := h.Codec.Encode(obj)\n\tif err != nil {"
  },
  {
    "id" : "c1770e7c-2311-4f54-a70b-e293bad71df0",
    "prId" : 852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c54ba1-2152-415a-bc5c-b0c8bf9d2eb3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "just to be a pain - what is the transform function signature, and what is it supposed to do?  Maybe a (textual) example?\n",
        "createdAt" : "2014-08-11T17:55:31Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9e5d916d-fc52-4cd4-aa9d-2239c8c3da37",
        "parentId" : "79c54ba1-2152-415a-bc5c-b0c8bf9d2eb3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Woops, signature is just below.  Still a bit more on the intended use would help\n",
        "createdAt" : "2014-08-11T17:56:00Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5630a9567c512eb4774ae71006aaf7795611598",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +322,326 @@// WatchAndTransform begins watching the specified key. Events are decoded into\n// API objects and sent down the returned watch.Interface. If the transform\n// function is provided, the value decoded from etcd will be passed to the function\n// prior to being returned.\n//"
  },
  {
    "id" : "343bfbef-7c4a-43a0-922e-5857fb3ae677",
    "prId" : 852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e36ae66d-cb6d-4d6d-ac7b-1c2173b14e44",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It occurs to me now that TransformFunc and my own FilterFunc are actually better applied as a separate, layered watch.\n\ne.g., in the watch package, `func Filter(w Interface, f FilterFunc) Interface` and `func Transform(w Interface, f TransformFunc) Interface`. Or they could even be combined, with FilterFunc returning the new object and whether to send it.\n\nI can do that in another PR if you don't want to do it here.\n",
        "createdAt" : "2014-08-11T18:02:58Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "30fe1df6-432a-4825-84ab-b952129dcf56",
        "parentId" : "e36ae66d-cb6d-4d6d-ac7b-1c2173b14e44",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree - maybe follow on pull?\n",
        "createdAt" : "2014-08-11T18:08:12Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8d6e4e35-ed00-4ab4-ba55-66aa880b3450",
        "parentId" : "e36ae66d-cb6d-4d6d-ac7b-1c2173b14e44",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sure.\n",
        "createdAt" : "2014-08-11T21:01:13Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5630a9567c512eb4774ae71006aaf7795611598",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +342,346 @@\n// TransformFunc attempts to convert an object to another object for use with a watcher\ntype TransformFunc func(interface{}) (interface{}, error)\n\n// etcdWatcher converts a native etcd watch to a watch.Interface."
  },
  {
    "id" : "af933035-9723-4815-8ef7-b98cc56a61d9",
    "prId" : 852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81482030-eaa0-4afe-bcdb-b2245269a466",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also, what is the use case for transform? (I haven't actually read your other PR yet)\n",
        "createdAt" : "2014-08-11T18:07:18Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "409056f0-5458-45e4-a62e-3edfedf2caa2",
        "parentId" : "81482030-eaa0-4afe-bcdb-b2245269a466",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Convert etcd's []api.ContainerManifestList to an api.PodList (so that the root object has a ResourceVersion so that the kubelet can remember the last seen index version and reconnect at that version).\n",
        "createdAt" : "2014-08-11T18:08:46Z",
        "updatedAt" : "2014-08-11T21:07:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5630a9567c512eb4774ae71006aaf7795611598",
    "line" : null,
    "diffHunk" : "@@ -1,1 +335,339 @@//   })\n//\nfunc (h *EtcdHelper) WatchAndTransform(key string, resourceVersion uint64, transform TransformFunc) (watch.Interface, error) {\n\tw := newEtcdWatcher(false, nil, h.Codec, h.ResourceVersioner, transform)\n\tgo w.etcdWatch(h.Client, key, resourceVersion)"
  },
  {
    "id" : "ffe6b16f-45e7-4ab2-b604-b5a8a0305928",
    "prId" : 806,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34b59dda-6f50-4ac9-9495-49a5b1439e8f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm not sure how I feel about having the exact same interfaces defined in multiple places. I like that it removes dependencies, but I don't like the duplication. What do you think about putting some of these in a package that both api and tools depend on? I think the Conversion package is a good place for the Codec interface, since conversion.Scheme already implements it. ResourceVersioner arguably belongs in the tools package, but that makes the dependency chain weird...\n",
        "createdAt" : "2014-08-06T05:56:42Z",
        "updatedAt" : "2014-08-06T15:25:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0996747f-ea13-4fc2-bf6b-101542509399",
        "parentId" : "34b59dda-6f50-4ac9-9495-49a5b1439e8f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Codec does tend to belong with conversion.  I would argue tools consumes ResourceVersioner, but other places may want to use it without being coupled to etcd.  ResourceVersioner kind of feels like \"behaviors you might want to expose around an object\" which is like encoding but more closely tied to the object lifecycle.\n\nAt the end of the day, Go does try to encourage you to decouple packages by using clean interfaces, and duplication isn't actively discouraged (i.e., trying to get folks away from the Java \"import jars with interfaces everywhere\" mess).  If the interfaces are small enough I feel like the reduced coupling is worth a bit of duplication, but that's just personal bias.\n",
        "createdAt" : "2014-08-06T13:59:30Z",
        "updatedAt" : "2014-08-06T15:25:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "855f89cd-cdba-41f9-bd52-ace26f8832a3",
        "parentId" : "34b59dda-6f50-4ac9-9495-49a5b1439e8f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I think I saw in your other PR these interfaces getting added to apiserver, also. Three places definitely makes me queasy. :)\n\nI vote, for the moment: Put Codec in pkg/conversion, and ResourceVersioner in pkg/api. I think pkg/api is due for another split: we should separate it into two packages, one with general things for our API object system which plugins might reuse (like ResourceVersioner) and one for defining the specific core k8s codec.\n\nAh, I think the relevant distinction is this: JSONBase & functions supporting objects with embedded JSONBases should go into its own package. ResourceVersioner should be defined in that package. Let's do this in a separate PR.\n",
        "createdAt" : "2014-08-06T17:46:34Z",
        "updatedAt" : "2014-08-06T17:46:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "67dbd15929624b6b13b70a991aeeaec877577be8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +44,48 @@\n// Codec provides methods for transforming Etcd values into objects and back\ntype Codec interface {\n\tEncode(obj interface{}) (data []byte, err error)\n\tDecode(data []byte) (interface{}, error)"
  },
  {
    "id" : "c082b9d8-d1e7-4f3f-83f6-95f2ffa339a8",
    "prId" : 784,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b99a81e-1ee7-45f9-924a-61a561c5a1d6",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I don't see this const defined anywhere, did I miss a file? or are they in the etcd client code?\n",
        "createdAt" : "2014-08-04T23:21:07Z",
        "updatedAt" : "2014-08-04T23:21:07Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "e5e46f29-c099-4064-8cec-e58608cb23ae",
        "parentId" : "9b99a81e-1ee7-45f9-924a-61a561c5a1d6",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's in this class up above.  They should probably be put together, and maybe in their own file pkg/tools/etcd_errors.go\n",
        "createdAt" : "2014-08-04T23:22:26Z",
        "updatedAt" : "2014-08-04T23:22:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e6c1617f-d2ce-469f-9f80-7d5ec9c8b187",
        "parentId" : "9b99a81e-1ee7-45f9-924a-61a561c5a1d6",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "ah, I thought they were added, but really just use of already existing codes...\n",
        "createdAt" : "2014-08-04T23:26:45Z",
        "updatedAt" : "2014-08-04T23:26:45Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6288336436adbbacc04c72860ddefe0169a2aee6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +85,89 @@// IsEtcdNotFound returns true iff err is an etcd not found error.\nfunc IsEtcdNotFound(err error) bool {\n\treturn isEtcdErrorNum(err, EtcdErrorCodeNotFound)\n}\n"
  },
  {
    "id" : "b995d409-2aa6-40dc-a02d-23e9e7289372",
    "prId" : 756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68cd51e2-6de8-416d-a19e-fda12bf58663",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc comments + maybe mention that they're the same as interfaces from api?\n",
        "createdAt" : "2014-08-04T04:40:19Z",
        "updatedAt" : "2014-08-04T04:40:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4448be2d95a2a38b3db8d917eab833138ef3d5d2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +42,46 @@)\n\ntype Encoding interface {\n\tEncode(obj interface{}) (data []byte, err error)\n\tDecode(data []byte) (interface{}, error)"
  },
  {
    "id" : "1236db1a-bdc1-4431-a5dd-42648b235965",
    "prId" : 717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just want to double check here - if AtomicUpdate applies only to api objects, we should probably call it out either in the method signature (AtomicUpdateObj) or at a minimum the comments.  Will there be a use case for storing non-api objects in etcd that someone would want to benefit from AtomicUpdate on it?\n",
        "createdAt" : "2014-07-31T13:28:14Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d8d3b66f-5d45-49f3-979b-d90aaead4d83",
        "parentId" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "authorId" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "body" : "> Will there be a use case for storing non-api objects in etcd that someone would want to benefit from AtomicUpdate on it?\n> I don't think there is any, so I think we can just limit this to \"api objects\" only, and rename this to AtomicUpdateObj.\n\nThere is a SetObj call in 221 anyway :)\n",
        "createdAt" : "2014-07-31T14:06:41Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "tags" : [
        ]
      },
      {
        "id" : "fca4868e-ffcb-4bf1-bbf2-34af1d2cb85a",
        "parentId" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If we get agreement this package only applies to api objects (in which case we should switch it from tools maybe to api/etcd or something) I can address some of that in my later pull.\n",
        "createdAt" : "2014-07-31T14:09:19Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0567e223-efce-4745-a8ca-dd94f5cf68d2",
        "parentId" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "authorId" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "body" : "+1 on moving this to api/etcd.\n",
        "createdAt" : "2014-07-31T14:12:11Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "tags" : [
        ]
      },
      {
        "id" : "e018a46e-de01-483b-bf8a-936f1f765f4c",
        "parentId" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree that this should only work on api objects.\n",
        "createdAt" : "2014-07-31T16:13:36Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a6237c2e-b295-4605-b9ba-afc83e88151a",
        "parentId" : "f2f9a13b-5559-4918-8fb1-f92fdfd6e7f9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also, I should have caught this in my earlier change. Actually this is P0 to get in. I may make a PR with just this one line change.\n",
        "createdAt" : "2014-07-31T16:16:16Z",
        "updatedAt" : "2014-07-31T17:35:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4a5ba863ddebf03096898218e5032a059a14b74",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\t}\n\n\t\tdata, err := api.Encode(ret)\n\t\tif err != nil {\n\t\t\treturn err"
  },
  {
    "id" : "c39a5fbe-1310-4606-9300-b701fc32dec2",
    "prId" : 694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c5f6d27-02ef-4eae-9dc1-ac345dc4c116",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "EDIT: Didn't read the method closely enough\n",
        "createdAt" : "2014-07-30T21:28:30Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf117d5b485cbd2470498bd7fa9f4560487a1b8c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +244,248 @@\n\t\t// First time this key has been used, try creating new value.\n\t\tif index == 0 {\n\t\t\t_, err = h.Client.Create(key, string(data), 0)\n\t\t\tif IsEtcdNodeExist(err) {"
  },
  {
    "id" : "703f0251-2aa1-46d5-bddd-dd1a9a94f483",
    "prId" : 694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is fine, it would mean somebody beat you to the create and your next attempt should be an update instead.\n",
        "createdAt" : "2014-07-30T21:31:02Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b109fc44-b857-438a-9b16-35c2d30eb9a9",
        "parentId" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "BTW, I don't think this is actually going to work unless you make key not found an acceptable error in the read step above.\n",
        "createdAt" : "2014-07-30T21:32:21Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f3e77c18-1d44-4dc1-88ff-bfd07ac35399",
        "parentId" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "AtomicUpdate is called by PUT. POST uses SetObj, which should start using create, I think.\n\nNote that AtomicUpdate executes application logic in a loop.\n",
        "createdAt" : "2014-07-30T21:39:57Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "07f3bc72-369d-4f89-b4c3-85337a5c9d67",
        "parentId" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "EDIT: And now I actually notice that this is AtomicUpdate... ignore my original comments on this, they were incorrect.\n",
        "createdAt" : "2014-07-30T21:41:17Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1641e063-5b38-4c23-8714-24c9d16d5d65",
        "parentId" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The KeyAlreadyExists error is 105 which is distinct from conflict\n",
        "createdAt" : "2014-07-30T21:45:36Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fb072b68-4b00-4cfa-9348-50d7ecb07b00",
        "parentId" : "9fcbf531-06c4-4664-a17e-be69b0725364",
        "authorId" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "body" : "Thanks for pointing out! Added IsEtcdNodeExist.\n",
        "createdAt" : "2014-07-31T05:53:43Z",
        "updatedAt" : "2014-08-05T15:31:09Z",
        "lastEditedBy" : "fb7ab367-2dba-431b-9847-0f9ba0560a51",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf117d5b485cbd2470498bd7fa9f4560487a1b8c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +247,251 @@\t\t\t_, err = h.Client.Create(key, string(data), 0)\n\t\t\tif IsEtcdNodeExist(err) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err"
  },
  {
    "id" : "062e45d8-5cd6-4024-b3d7-e04567268ef2",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ee52685-972f-426a-83df-9f6289abd388",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "you need to explicitly check for nil here, or else this code can crash.\n",
        "createdAt" : "2014-07-16T16:51:33Z",
        "updatedAt" : "2014-07-18T05:17:22Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "ec804aa0-22c0-4dac-9234-82bc56214fdd",
        "parentId" : "8ee52685-972f-426a-83df-9f6289abd388",
        "authorId" : "fb0ef111-25de-4d6e-872b-9978dad70f6c",
        "body" : "Done.\n",
        "createdAt" : "2014-07-17T03:52:16Z",
        "updatedAt" : "2014-07-18T05:17:22Z",
        "lastEditedBy" : "fb0ef111-25de-4d6e-872b-9978dad70f6c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aa3de12d4199e380701e78c9ecdcefcec6ad4d9",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +73,77 @@// Returns true iff err is an etcd error, whose errorCode matches errorCode\nfunc isEtcdErrorNum(err error, errorCode int) bool {\n\tetcdError, ok := err.(*etcd.EtcdError)\n\treturn ok && etcdError != nil && etcdError.ErrorCode == errorCode\n}"
  },
  {
    "id" : "ec65ea1f-3d4d-4179-8b4b-d3dcbc9a47b5",
    "prId" : 307,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d69aacf-ffe2-4399-9403-e26b774fd5b3",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "hrm, I think this places the other 'err' in a new scope?  If that's true, doesn't this mean that you won't return an error if you fail to find the JSONBase?\n",
        "createdAt" : "2014-07-02T22:09:32Z",
        "updatedAt" : "2014-07-02T22:42:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "a80e76dd-6daf-4f55-ae47-0ad82db66cdc",
        "parentId" : "2d69aacf-ffe2-4399-9403-e26b774fd5b3",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, that's by design. Added a comment.\n",
        "createdAt" : "2014-07-02T22:41:08Z",
        "updatedAt" : "2014-07-02T22:42:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b9735d787523b3f3d70bd50e635dac36c2d0e43",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +141,145 @@\tbody = response.Node.Value\n\terr = json.Unmarshal([]byte(body), objPtr)\n\tif jsonBase, err := api.FindJSONBase(objPtr); err == nil {\n\t\tjsonBase.ResourceVersion = response.Node.ModifiedIndex\n\t\t// Note that err shadows the err returned below, so we won't"
  }
]