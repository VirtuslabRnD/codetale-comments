[
  {
    "id" : "be0e2204-cf25-4745-ab68-7128451343b0",
    "prId" : 1404,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "639d1249-7b9a-49dc-9247-9ad2a9839672",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should we set a ResourceVersion on the object for the client to read?\n",
        "createdAt" : "2014-09-23T00:43:01Z",
        "updatedAt" : "2014-09-23T00:43:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cb4a78ef-fbdf-4f02-ab6c-547dabfcefd1",
        "parentId" : "639d1249-7b9a-49dc-9247-9ad2a9839672",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't think so-- we want to force them to re-list, don't we?\n",
        "createdAt" : "2014-09-23T00:49:31Z",
        "updatedAt" : "2014-09-23T00:49:31Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e66507ee-56b8-4f40-a3c7-777c348193d1",
        "parentId" : "639d1249-7b9a-49dc-9247-9ad2a9839672",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, you're right.  Ignore that\n\n> On Sep 22, 2014, at 8:49 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/tools/etcd_tools_watch.go:\n> \n> > @@ -197,16 +185,26 @@ func (w *etcdWatcher) translate() {\n> > \n> > ```\n> > for {\n> >     select {\n> > ```\n> > -       case <-w.etcdCallEnded:\n> > -       case err := <-w.etcdError:\n> > -           if err != nil {\n> > -               w.emit(watch.Event{\n> >   I don't think so-- we want to force them to re-list, don't we?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-23T03:20:44Z",
        "updatedAt" : "2014-09-23T03:20:44Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f211e46f20e6e6e86243cfd40612c6f6330a736b",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +188,192 @@\t\tcase err := <-w.etcdError:\n\t\t\tif err != nil {\n\t\t\t\tw.emit(watch.Event{\n\t\t\t\t\twatch.Error,\n\t\t\t\t\t&api.Status{"
  },
  {
    "id" : "8380dd54-8acf-4f22-8fae-78faaecfcb7a",
    "prId" : 1389,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a2a4fbf-531c-456c-a7ec-fb4ab117ddc5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I feel like we're just dancing around not adding an \"error\" result to the watch stream.  Is it really simpler to eat a real error (at any time during a watch) than to just build in the possibility that errors can be returned by the watch interface?\n\nI.e.:\n\n```\nchan <- watch.Event{\n  Type: \"ERROR\",\n  Object: &api.Status{\n    ...\n  },\n```\n",
        "createdAt" : "2014-09-22T13:07:48Z",
        "updatedAt" : "2014-09-22T16:57:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cb90ea85-c375-4df2-ac54-574769faecb7",
        "parentId" : "6a2a4fbf-531c-456c-a7ec-fb4ab117ddc5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I'm convinced--if you have a preference for this, I can make it happen. Can I do it in a subsequent PR, though? This one at least prevents a nasty errorloop.\n",
        "createdAt" : "2014-09-22T17:34:11Z",
        "updatedAt" : "2014-09-22T17:34:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f302ce84-2476-4ade-a31f-b5131ff88ac9",
        "parentId" : "6a2a4fbf-531c-456c-a7ec-fb4ab117ddc5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "----- Original Message -----\n\n> >  func (w *etcdWatcher) etcdWatch(client EtcdGetSet, key string,\n> >  resourceVersion uint64) {\n> >     defer util.HandleCrash()\n> >     defer close(w.etcdCallEnded)\n> > -   go func() {\n> > -       // This is racy; assume that Watch will fail within 100ms if it is going\n> >   to fail.\n> > -       // It's still more useful than blocking until the first result shows up.\n> > -       // Trying to detect the 401: watch window expired error.\n> > -       <-time.After(watchWaitDuration)\n> > -       w.immediateError <- nil\n> \n> Yeah, I'm convinced--if you have a preference for this, I can make it happen.\n> Can I do it in a subsequent PR, though? This one at least prevents a nasty\n> errorloop.\n\nAbsolutely.\n",
        "createdAt" : "2014-09-22T17:36:38Z",
        "updatedAt" : "2014-09-22T17:36:38Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d7c6e2657a04d581851cd00f972451c906eb2b6",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +138,142 @@\t\t// Trying to detect the 401: watch window expired error.\n\t\t<-time.After(watchWaitDuration)\n\t\tw.immediateError <- nil\n\t}()\n\tif resourceVersion == 0 {"
  }
]