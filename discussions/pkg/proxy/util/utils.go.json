[
  {
    "id" : "45889e4e-f70b-451e-8a35-5d7fca092643",
    "prId" : 103116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103116#pullrequestreview-694833180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e81c2d5f-ef3f-4962-911d-3330088ac620",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I do not understand why we need this?  Under what conditions do we get one vs the other?  If this is real, add comments?",
        "createdAt" : "2021-06-28T21:58:13Z",
        "updatedAt" : "2021-06-28T22:16:59Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d933854c-63de-4014-b3c9-499ad6389c26",
        "parentId" : "e81c2d5f-ef3f-4962-911d-3330088ac620",
        "authorId" : "0aa379a2-dc46-4e1f-81d1-8ea59923ffcd",
        "body" : "@aojea \r\nkube-proxy only run on linux, in linux, net.InterfaceAddrs will only return net.IPNet's, Do we only need to determine whether the type of addr is net.IPNet?\r\n\r\nIn addition, net.InterfaceAddrs may return net.IPAddr's or net.IPNet's.\r\n\r\nhttps://github.com/golang/go/blob/4bb0847b088eb3eb6122a18a87e1ca7756281dcc/src/net/interface_linux.go#L175~L200\r\n\r\nhttps://github.com/golang/go/blob/4bb0847b088eb3eb6122a18a87e1ca7756281dcc/src/net/interface_windows.go#L113~L126",
        "createdAt" : "2021-06-29T02:35:19Z",
        "updatedAt" : "2021-06-29T02:35:19Z",
        "lastEditedBy" : "0aa379a2-dc46-4e1f-81d1-8ea59923ffcd",
        "tags" : [
        ]
      },
      {
        "id" : "b9d2491e-e71a-4ef1-8eca-aa320059d7ab",
        "parentId" : "e81c2d5f-ef3f-4962-911d-3330088ac620",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Can you comment this fact here, so nobody \"fixes\" it later?",
        "createdAt" : "2021-06-29T02:43:02Z",
        "updatedAt" : "2021-06-29T02:43:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2234138e-5dfa-4c41-96b4-17076682ea35",
        "parentId" : "e81c2d5f-ef3f-4962-911d-3330088ac620",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "we do have a windows kubeproxy, it doesn't use this function though but who knows :shrug: \r\nSince we don't have platform specific code I think that we just should comment it for future reference as Tim says\r\n",
        "createdAt" : "2021-06-29T09:59:53Z",
        "updatedAt" : "2021-06-29T09:59:53Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f24a198e7632857495c00f5d4d5619ee1ee4198",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\t\tvar ip net.IP\n\t\t\t// nw.InterfaceAddrs may return net.IPAddr or net.IPNet on windows, and it will return net.IPNet on linux.\n\t\t\tswitch v := addr.(type) {\n\t\t\tcase *net.IPAddr:\n\t\t\t\tip = v.IP"
  },
  {
    "id" : "3bb15d44-1be8-4eb5-9f19-76cf50444171",
    "prId" : 103116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103116#pullrequestreview-695400940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d8d33d5-c089-401d-9f2d-4d28b5d5cdda",
        "parentId" : null,
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "Once a ZeroCIDR has been inserted the `uniqueAddressList.Has(IPvXZeroCIDR)` later on will _always_ be true and thus prevent _any_ other ip from beeing inserted. So you should return here. Note that the nodePortAddresses have been filtered so there is no chance that an IPv6ZeroCIDR is passed for the IPv4 proxier.",
        "createdAt" : "2021-06-29T17:51:55Z",
        "updatedAt" : "2021-06-29T17:51:56Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      },
      {
        "id" : "991d7fe4-f3b3-48ee-847d-56b3170b9ca5",
        "parentId" : "7d8d33d5-c089-401d-9f2d-4d28b5d5cdda",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "(but there are unit-tests that tries mix ipv4/6 this even though it will never happen)",
        "createdAt" : "2021-06-29T19:02:28Z",
        "updatedAt" : "2021-06-29T19:02:28Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f24a198e7632857495c00f5d4d5619ee1ee4198",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +207,211 @@\t\tif IsZeroCIDR(cidr) {\n\t\t\tuniqueAddressList.Insert(cidr)\n\t\t}\n\t}\n"
  },
  {
    "id" : "672ca7ff-b807-49b8-8f6a-c7a678d035f1",
    "prId" : 98436,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98436#pullrequestreview-577882950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "629e1650-f71d-4f50-87f4-ca6226a4010f",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "this can return multiple IP families \r\n> // LookupIPAddr looks up host using the local resolver.\r\n// It returns a slice of that host's IPv4 and IPv6 addresses.\r\nfunc (r *Resolver) LookupIPAddr(ctx context.Context, host string) ([]IPAddr, error) {\r\n\treturn r.lookupIPAddr(ctx, \"ip\", host)\r\n}\r\n\r\n:thinking: ",
        "createdAt" : "2021-01-28T00:07:19Z",
        "updatedAt" : "2021-01-28T00:07:20Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "a476cba0-b097-4a33-897f-b6690c24f959",
        "parentId" : "629e1650-f71d-4f50-87f4-ca6226a4010f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "That's fine, this filter just makes sure they all comply with the requirements (no local loopback, or nothing in a forbidden CIDR range)",
        "createdAt" : "2021-01-28T00:13:38Z",
        "updatedAt" : "2021-01-28T00:13:38Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce553e1b68e1f634dd341d8e21b289e5fdac3f72",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +398,402 @@\t\t}\n\n\t\tresp, err := resolv.LookupIPAddr(ctx, addressToResolve)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "1189c75b-5f93-419f-9908-bc1a1295980c",
    "prId" : 98083,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98083#pullrequestreview-579001000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7abf8491-4487-4960-9e43-4d63ec78d3cc",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm torn.  Part of me feels like this should be logged from the caller, which reduces this function to just a few LOC.  I guess it doesn't matter much, its an internal API..",
        "createdAt" : "2021-01-29T07:35:42Z",
        "updatedAt" : "2021-01-29T07:35:54Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f506cadb040940dffbc40b8aae394bdbdd757f6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +161,165 @@func GetLocalAddrSet() utilnet.IPSet {\n\tlocalAddrs, err := GetLocalAddrs()\n\tif err != nil {\n\t\tklog.ErrorS(err, \"Failed to get local addresses assuming no local IPs\", err)\n\t} else if len(localAddrs) == 0 {"
  },
  {
    "id" : "0aad44cb-ed1d-4805-ae31-2af89ce5c3dc",
    "prId" : 96959,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96959#pullrequestreview-640835027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b745eb3-7502-4719-8b60-c4784d68e0f5",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "You just copied the comment from `WriteLine` but forgot to update it. Need to add something about \"prepends \"-A\" and chainName to words\" or something like that.\r\n",
        "createdAt" : "2021-04-18T20:43:40Z",
        "updatedAt" : "2021-04-21T14:41:50Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "baa28721-203e-487d-8b3c-fe99d3077027",
        "parentId" : "7b745eb3-7502-4719-8b60-c4784d68e0f5",
        "authorId" : "b13b2229-4196-4d84-a0fb-238fbdc5407d",
        "body" : "done.",
        "createdAt" : "2021-04-21T09:31:49Z",
        "updatedAt" : "2021-04-21T14:41:50Z",
        "lastEditedBy" : "b13b2229-4196-4d84-a0fb-238fbdc5407d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3fe48e848f49d3c60dd16749228e6471a57458a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +480,484 @@// WriteRuleLine prepends the strings \"-A\" and chainName to the buffer and calls\n// WriteLine to join all the words into the buffer and terminate with newline.\nfunc WriteRuleLine(buf *bytes.Buffer, chainName string, words ...string) {\n\tif len(words) == 0 {\n\t\treturn"
  },
  {
    "id" : "81288dea-803d-4458-a03f-8a437025be8d",
    "prId" : 96959,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96959#pullrequestreview-640837170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c7e46c6-cd4f-42c0-a988-899a184c8426",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Does this actually come up anywhere? Oh, I see, `TestWriteLine` tests this behavior for `WriteLine` so you did the same for `WriteRuleLine`...\r\n\r\nI'm not sure it's useful to have this case for `WriteRuleLine`... but I'm not sure it's _not_ useful... Keep it I guess, but\r\n1. drop the `len(chainName)` part because calling `WriteRuleLine` with no chain name is just a bug\r\n2. say `len(words) == 0` not `len(words) <= 0` because the length of an array can't be negative and probably some linter will eventually complain if you use `<=` here.",
        "createdAt" : "2021-04-18T20:46:32Z",
        "updatedAt" : "2021-04-21T14:41:50Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "9eb270cf-5902-44f9-9946-577200ffe3a1",
        "parentId" : "7c7e46c6-cd4f-42c0-a988-899a184c8426",
        "authorId" : "b13b2229-4196-4d84-a0fb-238fbdc5407d",
        "body" : "yea this check was more of a \"just in case\". ",
        "createdAt" : "2021-04-21T09:32:39Z",
        "updatedAt" : "2021-04-21T14:41:50Z",
        "lastEditedBy" : "b13b2229-4196-4d84-a0fb-238fbdc5407d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3fe48e848f49d3c60dd16749228e6471a57458a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +482,486 @@func WriteRuleLine(buf *bytes.Buffer, chainName string, words ...string) {\n\tif len(words) == 0 {\n\t\treturn\n\t}\n\tbuf.WriteString(\"-A \")"
  },
  {
    "id" : "6a62230f-d5cd-4958-bd38-a36d813d14f7",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-506834966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5653ab3a-e61b-4bfa-adec-31fb49bb8919",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Seems like this function could just iterate over `ClusterIPs` and use `utilnet.IsIPv6String` and it would be a lot simpler?",
        "createdAt" : "2020-07-16T14:04:02Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "2f2fa9e5-a914-4367-b04a-686561c69599",
        "parentId" : "5653ab3a-e61b-4bfa-adec-31fb49bb8919",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "For any client outside the api-server we want to push \"IPFamily are consistent\" message. Kube-proxy is just one of them.",
        "createdAt" : "2020-10-12T18:30:32Z",
        "updatedAt" : "2020-10-26T18:06:39Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +400,404 @@\t\t\t}\n\t\t}\n\t}\n\n\treturn \"\""
  },
  {
    "id" : "9daac7ca-d654-475a-8fc0-d1ee1db11871",
    "prId" : 85617,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85617#pullrequestreview-340083529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e6f2562-7a9d-4e31-bd88-ae9a9e9e94a3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Why not return a \"set\" type here.  k8s.io/utils/net/ipnet.go defines `IPNetSet`.  We could have the equivalent `IPSet` type",
        "createdAt" : "2019-12-17T20:06:26Z",
        "updatedAt" : "2020-02-11T21:44:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "337c442a-ecac-424f-8a2e-92c3e61f3a9a",
        "parentId" : "4e6f2562-7a9d-4e31-bd88-ae9a9e9e94a3",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Makes sense to me, I'll open a PR to add `IPSet` type to k8s.io/utils/net.",
        "createdAt" : "2020-01-06T16:55:45Z",
        "updatedAt" : "2020-02-11T21:44:50Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "9a503b61-4362-43e2-9f3e-7e8486fd2e1a",
        "parentId" : "4e6f2562-7a9d-4e31-bd88-ae9a9e9e94a3",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "On second thought, I'm realizing that a set type for net.IP may not work because we can't do comparison checks for net.IP based on their string values since an IPv6 representation of IPv4 addresses are considered equal (see [net.IP Equals](https://golang.org/src/net/ip.go?s=10028:10057#L397)). We could just ignore this case and assume equality/uniqueness soley based on string values but that would be a behavioral change from what we have right now. ",
        "createdAt" : "2020-01-07T22:39:52Z",
        "updatedAt" : "2020-02-11T21:44:50Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "07c0bfe1-8bb1-486c-b532-8472a6ff4182",
        "parentId" : "4e6f2562-7a9d-4e31-bd88-ae9a9e9e94a3",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "But `String` has the same logic. Any two `net.IP`s that compare as `Equal` will also `String`-ify the same. (Specifically, `net.ParseIP(\"::ffff:1.2.3.4\").String() → \"1.2.3.4\"`)\r\n\r\nSo as long as you know the IPs are in canonical form, you can compare based on string values.",
        "createdAt" : "2020-01-08T15:18:12Z",
        "updatedAt" : "2020-02-11T21:44:50Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "9a5d1a71-fedb-4380-8d37-551db9ba65fd",
        "parentId" : "4e6f2562-7a9d-4e31-bd88-ae9a9e9e94a3",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah good to know! I'll update k8s.io/utils/net to add a set type for net.IP. ",
        "createdAt" : "2020-01-08T19:14:00Z",
        "updatedAt" : "2020-02-11T21:44:50Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "1653476e3f696a2c42d3a509225cedf966f103cf",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +125,129 @@\n// GetLocalAddrs returns a list of all network addresses on the local system\nfunc GetLocalAddrs() ([]net.IP, error) {\n\tvar localAddrs []net.IP\n"
  },
  {
    "id" : "fb5f3630-ff59-4d11-aca0-335b7d7e08b7",
    "prId" : 76320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76320#pullrequestreview-227023246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e40fbbd-69e2-4bee-a061-0e22f01879fb",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Would be great to have a unit test for this helper func :)",
        "createdAt" : "2019-04-15T19:49:09Z",
        "updatedAt" : "2019-04-17T07:34:33Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "8a9d82ca-c013-4044-880e-9e14546d27dd",
        "parentId" : "0e40fbbd-69e2-4bee-a061-0e22f01879fb",
        "authorId" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "body" : "Done.\r\nThanks",
        "createdAt" : "2019-04-16T07:27:09Z",
        "updatedAt" : "2019-04-17T07:34:33Z",
        "lastEditedBy" : "e9ccec4a-f0c0-4820-a947-6050b5de65a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "08e320fa4ef96880f0c8ac7ee69f118306c95702",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +218,222 @@// AppendPortIfNeeded appends the given port to IP address unless it is already in\n// \"ipv4:port\" or \"[ipv6]:port\" format.\nfunc AppendPortIfNeeded(addr string, port int32) string {\n\t// Return if address is already in \"ipv4:port\" or \"[ipv6]:port\" format.\n\tif _, _, err := net.SplitHostPort(addr); err == nil {"
  },
  {
    "id" : "dba9ffc3-2794-4dd3-b446-13192ba1826c",
    "prId" : 73467,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73467#pullrequestreview-199351474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56886d0c-37e7-48f4-9f3f-a56d5cef24af",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Context for reviewers: these were the remaining methods in `pkg/util/net` that were not moved over to `k8s.io/utils/net`. We discussed in previous comments that we move them to `pkg/proxy/util` since it was only consumed in `pkg/proxy` and that would allow us to fully remove `pkg/util/net`. ",
        "createdAt" : "2019-02-02T15:23:48Z",
        "updatedAt" : "2019-02-04T05:05:28Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "63b87f88-7a92-4264-82a1-91fdcac2b248",
        "parentId" : "56886d0c-37e7-48f4-9f3f-a56d5cef24af",
        "authorId" : "79b874bb-d3fb-4232-9840-7306ef90d87f",
        "body" : "yeah @andrewsykim correct",
        "createdAt" : "2019-02-02T15:27:49Z",
        "updatedAt" : "2019-02-04T05:05:28Z",
        "lastEditedBy" : "79b874bb-d3fb-4232-9840-7306ef90d87f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be223e7987e6802d660f68ca8d57aa4ba066ae9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +194,198 @@}\n\n// FilterIncorrectIPVersion filters out the incorrect IP version case from a slice of IP strings.\nfunc FilterIncorrectIPVersion(ipStrings []string, isIPv6Mode bool) ([]string, []string) {\n\treturn filterWithCondition(ipStrings, isIPv6Mode, utilnet.IsIPv6String)"
  },
  {
    "id" : "2184c07f-8822-498d-956c-b899c5c9a18e",
    "prId" : 58052,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58052#pullrequestreview-99438229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "686859fd-a98b-41c5-b1c0-8f9c11093fa8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This will allow the zero-cidr more than once,  Not a big deal, but odd.",
        "createdAt" : "2018-02-26T19:43:57Z",
        "updatedAt" : "2018-02-26T20:02:24Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2edc97bf17cc7e8c6fba1f5b91e270296ea56fab",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +90,94 @@\t// First round of iteration to pick out `0.0.0.0/0` or `::/0` for the sake of excluding non-zero IPs.\n\tfor _, cidr := range cidrs {\n\t\tif IsZeroCIDR(cidr) {\n\t\t\tuniqueAddressList.Insert(cidr)\n\t\t}"
  }
]