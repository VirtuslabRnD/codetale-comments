[
  {
    "id" : "ad94723f-7ba0-4065-8d21-8faaa8039aff",
    "prId" : 101023,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101023#pullrequestreview-634427762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09365490-6083-403b-92a3-c5f69bd356e2",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "Should we reject the loopbacks in validation too? or is excessive? `proxier.nodePortAddresses`\r\nhttps://github.com/kubernetes/kubernetes/blob/57459ebd3e56eb0747e4697422e8ac24f7d113c6/pkg/proxy/apis/config/validation/validation.go#L107",
        "createdAt" : "2021-04-13T10:22:00Z",
        "updatedAt" : "2021-04-16T06:38:17Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "e67cd021-a4fe-4463-ab03-8abeed26d25e",
        "parentId" : "09365490-6083-403b-92a3-c5f69bd356e2",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "No, it is a valid use-case now (that we are using), and it is still necessary for proxy-mode=iptables. The reason for adding loopback in NodePortAddresses is to limit/disable nodeports, not that anybody _wants_ to use loopback for nodeport. I think have different validations for different proxy-modes must be avoided.",
        "createdAt" : "2021-04-13T10:29:15Z",
        "updatedAt" : "2021-04-16T06:38:17Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "e030621e0a7b55097f2c6b8d93071b7e56207317",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1140,1144 @@\t\t\t\tif a.IsLoopback() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif utilproxy.IsZeroCIDR(address) {\n\t\t\t\t\tnodeIPs, err = proxier.ipGetter.NodeIPs()"
  },
  {
    "id" : "c86ce5aa-50b1-463b-bd34-cf6c2972e10f",
    "prId" : 101023,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101023#pullrequestreview-637373734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b14aaa-a610-4752-b064-9c70ab2bb6ea",
        "parentId" : null,
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "we should also modify the comment of this func correspondingly,.\r\nhttps://github.com/kubernetes/kubernetes/blob/8edda782f30a377afd031d5d7f4d62551785c441/pkg/proxy/ipvs/proxier.go#L303\r\n\r\n\r\n\r\n",
        "createdAt" : "2021-04-15T08:43:40Z",
        "updatedAt" : "2021-04-16T06:38:17Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      },
      {
        "id" : "5890b478-535d-4106-9ad0-4a204eda21a9",
        "parentId" : "58b14aaa-a610-4752-b064-9c70ab2bb6ea",
        "authorId" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "body" : "Comment updated.",
        "createdAt" : "2021-04-16T06:38:36Z",
        "updatedAt" : "2021-04-16T06:38:37Z",
        "lastEditedBy" : "277fa141-7693-4721-a67d-27e1a0f085a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "e030621e0a7b55097f2c6b8d93071b7e56207317",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +315,319 @@\t\t\tcontinue\n\t\t}\n\t\tips = append(ips, a)\n\t}\n\treturn ips, nil"
  },
  {
    "id" : "e7464ee5-51b6-4c33-9e20-24208481bb42",
    "prId" : 99448,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99448#pullrequestreview-618279496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "326fb558-93e0-4578-94f3-f3bbe99a2920",
        "parentId" : null,
        "authorId" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "body" : "I suggest directly consume `excludeCIDRs` as it should have been validated already.",
        "createdAt" : "2021-03-23T07:43:44Z",
        "updatedAt" : "2021-03-23T09:17:33Z",
        "lastEditedBy" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1c6e7025524cc97a0d3530eb03f249abd63b5de",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +455,459 @@\t\tsyncPeriod:            syncPeriod,\n\t\tminSyncPeriod:         minSyncPeriod,\n\t\texcludeCIDRs:          parsedExcludeCIDRs,\n\t\tiptables:              ipt,\n\t\tmasqueradeAll:         masqueradeAll,"
  },
  {
    "id" : "290fccad-6304-461f-b6d4-348214012b45",
    "prId" : 98130,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98130#pullrequestreview-579164016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ee794cf-c76d-4f48-9e9a-97fbd3b14e92",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "```suggestion\r\n\t\t\t\t} else if svcInfo.Protocol() == v1.ProtocolTCP {\r\n```",
        "createdAt" : "2021-01-21T16:35:25Z",
        "updatedAt" : "2021-02-15T08:38:35Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "8716520f-2374-4c74-824f-5e691ba72f27",
        "parentId" : "4ee794cf-c76d-4f48-9e9a-97fbd3b14e92",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "discard this comment, it was for debugging",
        "createdAt" : "2021-01-29T11:19:41Z",
        "updatedAt" : "2021-02-15T08:38:35Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "00e26e97855dbc47e47dcd09569430642470a480",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1463,1467 @@\t\t\t\t\t// We do not start listening on SCTP ports, according to our agreement in the\n\t\t\t\t\t// SCTP support KEP\n\t\t\t\t} else if svcInfo.Protocol() != v1.ProtocolSCTP {\n\t\t\t\t\tsocket, err := proxier.portMapper.OpenLocalPort(&lp)\n\t\t\t\t\tif err != nil {"
  },
  {
    "id" : "e1903985-522b-4bf1-86e8-5e2de6d35d60",
    "prId" : 97824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97824#pullrequestreview-581723731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c0f3964-8628-4c7c-acd9-4676c639ca93",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "I'm less familiar with the IPVS rules but I believe the comment I made about iptables should apply here too",
        "createdAt" : "2021-02-02T13:15:59Z",
        "updatedAt" : "2021-02-03T15:23:20Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "49b02d58-d062-41ea-8bee-1a67c72d0040",
        "parentId" : "7c0f3964-8628-4c7c-acd9-4676c639ca93",
        "authorId" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "body" : "yeah same reason as my previous [comment](https://github.com/kubernetes/kubernetes/pull/97824#discussion_r568863008) why we need to keep this rule.",
        "createdAt" : "2021-02-02T20:01:25Z",
        "updatedAt" : "2021-02-03T15:23:20Z",
        "lastEditedBy" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd1eacbc1f90e60061818d1b4713f78e78de0f9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +107,111 @@\t{utiliptables.TableNAT, utiliptables.ChainPostrouting, kubePostroutingChain, \"kubernetes postrouting rules\"},\n\t{utiliptables.TableFilter, utiliptables.ChainForward, KubeForwardChain, \"kubernetes forwarding rules\"},\n\t{utiliptables.TableFilter, utiliptables.ChainInput, KubeNodePortChain, \"kubernetes health check rules\"},\n}\n"
  },
  {
    "id" : "185d0a49-4bdd-4449-bd29-ee8af7209f69",
    "prId" : 97824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97824#pullrequestreview-581722796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4f3a4a-c06d-4aa6-b5ae-c265296cac33",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "I'm not sure if you also need to add something to `ipsetWithIptablesChain`...",
        "createdAt" : "2021-02-02T13:19:49Z",
        "updatedAt" : "2021-02-03T15:23:20Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "78f22816-3da6-47c6-9a8c-809575104127",
        "parentId" : "ec4f3a4a-c06d-4aa6-b5ae-c265296cac33",
        "authorId" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "body" : "Aha that's a tricky one, at first I thought I should add it here, but then I realized that `ipsetWithIptablesChain` is for `nat` table where we need to add it in `filter` table. I've already added the rule below:\r\n```golang\r\n       // Add rule to accept traffic towards health check node port\r\n       utilproxy.WriteLine(proxier.filterRules,\r\n               \"-A\", string(KubeNodePortChain),\r\n               \"-m\", \"comment\", \"--comment\", proxier.ipsetList[kubeHealthCheckNodePortSet].getComment(),\r\n               \"-m\", \"set\", \"--match-set\", proxier.ipsetList[kubeHealthCheckNodePortSet].Name, \"dst\",\r\n               \"-j\", \"ACCEPT\",\r\n       )\r\n```",
        "createdAt" : "2021-02-02T20:00:15Z",
        "updatedAt" : "2021-02-03T15:23:20Z",
        "lastEditedBy" : "89c2ffa8-b294-43fc-85c3-8f33b486c9b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd1eacbc1f90e60061818d1b4713f78e78de0f9",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +164,168 @@\t{kubeNodePortSetSCTP, utilipset.HashIPPort, kubeNodePortSetSCTPComment},\n\t{kubeNodePortLocalSetSCTP, utilipset.HashIPPort, kubeNodePortLocalSetSCTPComment},\n\t{kubeHealthCheckNodePortSet, utilipset.BitmapPort, kubeHealthCheckNodePortSetComment},\n}\n"
  },
  {
    "id" : "faf24a4a-43d6-4875-a9ee-22e2e9f0b5d2",
    "prId" : 97796,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97796#pullrequestreview-609374335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c93a9854-06aa-4c84-8393-71cc30283d4b",
        "parentId" : null,
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "Should we just leave this one as is? Seems odd to change to the structured log if there is no error to report in the structure.\r\n\r\nI believe the KEP explicitly states that it is a non-goal to switch all log functions to the new ones. ",
        "createdAt" : "2021-03-10T20:25:46Z",
        "updatedAt" : "2021-04-19T02:15:19Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      },
      {
        "id" : "ee8d1b54-7c0a-4acb-8fd4-4b1ff9beaf96",
        "parentId" : "c93a9854-06aa-4c84-8393-71cc30283d4b",
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "Firstly, we dont want to change the log level.  If error is nil, it will not print nil.",
        "createdAt" : "2021-03-11T03:52:42Z",
        "updatedAt" : "2021-04-19T02:15:19Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c6637e231991380aac545b2e85ed85d2aba47c9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +377,381 @@\t}\n\tif kernelVersion.LessThan(version.MustParseGeneric(connReuseMinSupportedKernelVersion)) {\n\t\tklog.ErrorS(nil, fmt.Sprintf(\"can't set sysctl %s, kernel version must be at least %s\", sysctlConnReuse, connReuseMinSupportedKernelVersion))\n\t} else {\n\t\t// Set the connection reuse mode"
  },
  {
    "id" : "0c273f51-e790-4b22-b23e-905bdcd1b803",
    "prId" : 97238,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97238#pullrequestreview-607481584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "767c0a20-d656-497b-a44c-31f7f25e7a0f",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "another fix to re-squash into the right place",
        "createdAt" : "2021-03-09T15:41:24Z",
        "updatedAt" : "2021-04-29T20:54:43Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "1010e6a9d98f406a6687eb33573713893dc5431e",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +2094,2098 @@\t\t\tif epInfo.IsReady() {\n\t\t\t\tlocalReadyEndpoints.Insert(epInfo.String())\n\t\t\t} else if epInfo.IsServing() && epInfo.IsTerminating() {\n\t\t\t\tlocalReadyTerminatingEndpoints.Insert(epInfo.String())\n\t\t\t}"
  },
  {
    "id" : "3506104f-6bb4-45a6-a254-94eee01c4e86",
    "prId" : 96830,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96830#pullrequestreview-538113416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a593f18-f280-4509-bd4d-7d8bc6146b27",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This definitely looks right, but trying to dig up history as to why this was pointing to KUBE-POSTROUTING. There may have been some defaulting that is no longer relevant. ",
        "createdAt" : "2020-11-25T01:21:54Z",
        "updatedAt" : "2020-11-25T01:22:05Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "3b83ec7d-f678-4067-8934-faeeeb266418",
        "parentId" : "9a593f18-f280-4509-bd4d-7d8bc6146b27",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I think iptables has the same problem last time I checked",
        "createdAt" : "2020-11-25T01:26:12Z",
        "updatedAt" : "2020-11-25T01:26:12Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "1de690b7-6908-44ea-bae2-aed024ff982e",
        "parentId" : "9a593f18-f280-4509-bd4d-7d8bc6146b27",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Nvm, looks like it was fixed: \r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/d29665cc17f05fbb66ea4b77d2fefbf39abd4e82/pkg/proxy/iptables/proxier.go#L931-L946",
        "createdAt" : "2020-11-25T01:26:33Z",
        "updatedAt" : "2020-11-25T01:26:33Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "90efa32b-842a-4e39-95b9-b1b4c96561aa",
        "parentId" : "9a593f18-f280-4509-bd4d-7d8bc6146b27",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "I guess it was introduced when reducing duplicated code in this PR: https://github.com/kubernetes/kubernetes/commit/339f92c175932d46bd0ef64b419948dbb97b7feb#diff-1f2043db3a45960023376d03e4dd43762d1382ad7ea94e3f26c956410b749c97L729. ",
        "createdAt" : "2020-11-25T02:35:08Z",
        "updatedAt" : "2020-11-25T02:35:09Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bf96b84c416b05d2349f2c08c417f6870afd26a",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1906,1910 @@\t\t\t\twriteBytesLine(proxier.natChains, chain)\n\t\t\t} else {\n\t\t\t\twriteLine(proxier.natChains, utiliptables.MakeChainLine(ch.chain))\n\t\t\t}\n\t\t} else {"
  },
  {
    "id" : "ec092f69-5ed4-47f0-bb2e-3969cfc6ad9d",
    "prId" : 92035,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92035#pullrequestreview-430994581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c34c9003-f3ed-46be-b87b-879f24eeb568",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "comment",
        "createdAt" : "2020-06-15T21:12:41Z",
        "updatedAt" : "2020-06-15T22:47:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "c12534d8b4724424405f848fc7a9afe830859891",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1849,1853 @@\t}...)\n\t// Clear the mark to avoid re-masquerading if the packet re-traverses the network stack.\n\twriteLine(proxier.natRules, []string{\n\t\t\"-A\", string(kubePostroutingChain),\n\t\t// XOR proxier.masqueradeMark to unset it"
  },
  {
    "id" : "05d281f9-8337-4a6c-8b51-d90c35c88d57",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-509948850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c47ad93-8d1a-4fae-8b69-907e3e1590f4",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Might be cleaner to initialize a new slice here instead of rewriting the existing slice.",
        "createdAt" : "2020-07-17T14:42:03Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "00fb4714-4867-4bac-b2a9-df73165dc711",
        "parentId" : "7c47ad93-8d1a-4fae-8b69-907e3e1590f4",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "hmm. I see your point. However i didn't want to do that for:\r\n1. it is technically the correct/better name (after filtering and everything).\r\n2. the statement does in fact init a new slice pointed to using the same pointer.\r\n3. I really wanted to minimize loc changed, we are already running up to 13k (added/deleted). anything helps.",
        "createdAt" : "2020-07-17T17:38:01Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "1c5baf09-5775-475a-be6b-de47d733ae48",
        "parentId" : "7c47ad93-8d1a-4fae-8b69-907e3e1590f4",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I'm not convinced this reduces lines of code, I would think creating a new slice actually improves readability and number of lines added\r\n```\r\nfilteredNodeIPs := []net.IP{}\r\nfor _, nodeIP := range nodeIPs {\r\n    if (proxier.ipFamily == v1.IPv6Protocol) == utilnet.IsIPv6(nodeIP) {\r\n        filteredNodeIPs = append(filteredNodeIP, nodeIP)\r\n    }\r\n}\r\n```",
        "createdAt" : "2020-10-16T14:23:47Z",
        "updatedAt" : "2020-10-26T18:06:39Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1159,1163 @@\t}\n\t// reset slice to filtered entries\n\tnodeIPs = nodeIPs[:idx]\n\n\t// Build IPVS rules for each service."
  },
  {
    "id" : "52b7b179-87d9-4b76-84c4-c55e7cd40fd3",
    "prId" : 88786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88786#pullrequestreview-374641458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe254189-7a5d-4a28-9f92-5d7d22aa7832",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Same question for IPVS, on line 1240 we're adding the externalIP to the ipset `kubeExternalIPSet` which we SNAT. Should there be a new ipset like `kubeExternalIPNodeLocalIPSet` that skips SNAT? ",
        "createdAt" : "2020-03-13T18:18:11Z",
        "updatedAt" : "2020-03-13T21:59:53Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0a0b592a-037f-4605-99a2-368f3c8244a0",
        "parentId" : "fe254189-7a5d-4a28-9f92-5d7d22aa7832",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Fixed. Added `kubeExternalIPNodeLocalIPSet ` that skips SNAT",
        "createdAt" : "2020-03-13T21:58:17Z",
        "updatedAt" : "2020-03-13T21:59:53Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "068963fc0622f2fc4007fe8da0936abcbde20202",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1270,1274 @@\n\t\t\t\tonlyNodeLocalEndpoints := false\n\t\t\t\tif utilfeature.DefaultFeatureGate.Enabled(features.ExternalPolicyForExternalIP) {\n\t\t\t\t\tonlyNodeLocalEndpoints = svcInfo.OnlyNodeLocalEndpoints()\n\t\t\t\t}"
  },
  {
    "id" : "2ea94881-6b61-4ecf-8955-6213456169fd",
    "prId" : 83553,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83553#pullrequestreview-299162369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ac6b580-d442-41c1-8f37-7d6486cd5422",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Prefer to keep this check in the original location (line 593), close to where the output (`modulesFile`) is consumed. ",
        "createdAt" : "2019-10-07T15:50:14Z",
        "updatedAt" : "2019-10-11T12:01:43Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "160586ff-8cfc-471c-94de-06bf00806dbb",
        "parentId" : "3ac6b580-d442-41c1-8f37-7d6486cd5422",
        "authorId" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "body" : "@andrewsykim actually I consume the err here to check if this is not a static kernel. That's why I've changed the location ",
        "createdAt" : "2019-10-08T23:43:08Z",
        "updatedAt" : "2019-10-11T12:01:43Z",
        "lastEditedBy" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "tags" : [
        ]
      },
      {
        "id" : "1858364b-4cc6-417c-8f86-d70c992d30df",
        "parentId" : "3ac6b580-d442-41c1-8f37-7d6486cd5422",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Gotcha, can we move \r\n```\r\n\tmods, err := getFirstColumn(modulesFile)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"failed to find loaded kernel modules: %v\", err)\r\n\t}\r\n```\r\n\r\nup here as well then?",
        "createdAt" : "2019-10-09T04:03:37Z",
        "updatedAt" : "2019-10-11T12:01:43Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0459b67e-7ce9-4225-a9a2-4b7fa9512a43",
        "parentId" : "3ac6b580-d442-41c1-8f37-7d6486cd5422",
        "authorId" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "body" : "For sure! Just did it ",
        "createdAt" : "2019-10-09T04:14:35Z",
        "updatedAt" : "2019-10-11T12:01:43Z",
        "lastEditedBy" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "da8931560bf621497742044a5f368f491883d4b5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +582,586 @@\n\t// Find out loaded kernel modules. If this is a full static kernel it will thrown an error\n\tmodulesFile, err := os.Open(\"/proc/modules\")\n\tif err != nil {\n\t\tklog.Warningf(\"Failed to read file /proc/modules with error %v. Kube-proxy requires loadable modules support enabled in the kernel\", err)"
  },
  {
    "id" : "b503f092-7ed4-4220-8f36-bed4a195eee2",
    "prId" : 82223,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82223#pullrequestreview-292668669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d7b4d1f-0a22-441f-bbef-78a2cd925e53",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Are we confident this check here works across all Linux distributions/kernels? I'm okay with the latter half of this PR where we don't re-run `modprobe` if there's already a match, but unsure about this part. ",
        "createdAt" : "2019-09-24T19:38:13Z",
        "updatedAt" : "2019-10-23T17:00:41Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "72a30b55-9014-464c-a19f-576fb37b2642",
        "parentId" : "9d7b4d1f-0a22-441f-bbef-78a2cd925e53",
        "authorId" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "body" : "About the /proc/modules or about the /boot/config?\r\n\r\nAbout the /boot/config no, I'm far away of being confident but. As I wrote [here](https://github.com/kubernetes/kubernetes/issues/77493#issuecomment-528419879) when I was recompiling the Kernel, I simply didn't copied the file to /boot so in my case this was missing.\r\n\r\nOn the other hand, this 'if' only exists on statically compiled Kernel (that lacks /proc/modules path) so this case might be pretty particular:\r\n\r\n* A very specific distro with a full static kernel (something of IoT maybe?)\r\n* A sysadmin who recompiles the kernel (as our original case/issue) that knows he needs to copy the file (and maybe we should put this into a better logging).\r\n\r\n",
        "createdAt" : "2019-09-24T19:53:38Z",
        "updatedAt" : "2019-10-23T17:00:41Z",
        "lastEditedBy" : "7cdf591c-5b87-4588-b48e-a40560f96eb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aaae7d6466fe8641055fca10b8a88d529759e0f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +587,591 @@\tif err == os.ErrNotExist {\n\t\tklog.Warningf(\"Failed to read file /proc/modules with error %v. Assuming this is a kernel without loadable modules support enabled\", err)\n\t\tkernelConfigFile := fmt.Sprintf(\"/boot/config-%s\", kernelVersionStr)\n\t\tkConfig, err := ioutil.ReadFile(kernelConfigFile)\n\t\tif err != nil {"
  },
  {
    "id" : "479b9438-9a01-43af-a815-5973027288be",
    "prId" : 80636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80636#pullrequestreview-267407386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75899df0-d6ad-4fed-b1ee-64a4372cea9f",
        "parentId" : null,
        "authorId" : "e0fad0d5-8ee7-47e6-bedb-d728f3fc63ce",
        "body" : "I want to change this part to use `Scanner` as well but I don't understand why we just list IPVS related modules for builtin modules, while listing all modules in `/proc/modules' (I will change parsing /proc/modules as well if i can understand the reasoning).",
        "createdAt" : "2019-07-26T21:15:36Z",
        "updatedAt" : "2019-07-31T19:12:33Z",
        "lastEditedBy" : "e0fad0d5-8ee7-47e6-bedb-d728f3fc63ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "90ce2d50d3ae654ff6f4c0c17b4f522240e8ae1b",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +505,509 @@\n\tbuiltinModsFilePath := fmt.Sprintf(\"/lib/modules/%s/modules.builtin\", kernelVersionStr)\n\tb, err := ioutil.ReadFile(builtinModsFilePath)\n\tif err != nil {\n\t\tklog.Warningf(\"Failed to read file %s with error %v. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules\", builtinModsFilePath, err)"
  },
  {
    "id" : "04d25850-ff67-4c05-bad4-cc849eb27d4a",
    "prId" : 79444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79444#pullrequestreview-255893723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a47d86db-891f-4404-861e-012c96a316c5",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "why not to skip iterating nodeAddresses in this case ?",
        "createdAt" : "2019-06-26T22:51:47Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "b1d5cf35-1e99-4130-944e-39e58702fbd4",
        "parentId" : "a47d86db-891f-4404-861e-012c96a316c5",
        "authorId" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "body" : "This is what will happen in practice. When `GetNodeAddresses` returns an error it also returns a nil value for `nodeAddresses` and this will cause the iteration to be skipped.",
        "createdAt" : "2019-06-27T13:32:50Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "tags" : [
        ]
      },
      {
        "id" : "d56cf2f4-c140-4b8b-9a9e-6cec8eb40042",
        "parentId" : "a47d86db-891f-4404-861e-012c96a316c5",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This isn't directly obviously though, I agree with tedyu it's easier to follow with an explicity skip or check. You can use `nodeAddresses.Len()` to do an explicity check before iterating node addresses",
        "createdAt" : "2019-06-28T13:47:01Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "2511b9d5-413d-44d0-b8c7-e6b4b60e5f9c",
        "parentId" : "a47d86db-891f-4404-861e-012c96a316c5",
        "authorId" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "body" : "Done.",
        "createdAt" : "2019-06-28T17:41:04Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25763e159a4560b6a7b794c109255eebbf6385d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +830,834 @@\t\tnodeAddrSet, err := utilproxy.GetNodeAddresses(proxier.nodePortAddresses, proxier.networkInterfacer)\n\t\tif err != nil {\n\t\t\tklog.Errorf(\"Failed to get node ip address matching nodeport cidr: %v\", err)\n\t\t}\n\t\tif err == nil && nodeAddrSet.Len() > 0 {"
  },
  {
    "id" : "f4f413b1-6ccf-4838-81ae-6e9e75f84d4c",
    "prId" : 79444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79444#pullrequestreview-256556983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21a1f6e3-2ed0-424a-93f2-fba45040ecfc",
        "parentId" : null,
        "authorId" : "50978e62-674d-403a-92d2-6a80ec250c92",
        "body" : "Is there a case where `nodeAddresses` could contain 0.0.0.0/0 and other addresses?\r\nBecause we could\r\n- if `nodeAddrSet.Len()==1` and nodeAddrSet[0]=`0.0.0.0/0` => iterate over `nodeAddrSet`\r\n- otherwise iterate over `proxier.ipGetter.NodeIPs()`",
        "createdAt" : "2019-07-01T08:34:21Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "50978e62-674d-403a-92d2-6a80ec250c92",
        "tags" : [
        ]
      },
      {
        "id" : "2ceddade-2294-400c-9450-121781c8688f",
        "parentId" : "21a1f6e3-2ed0-424a-93f2-fba45040ecfc",
        "authorId" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "body" : "Assuming the node has three interfaces:\r\n```\r\neth0:    10.0.0.1, fe80::1c00:a8ff:fe00:481f\r\nlo0:     127.0.0.1, ::1\r\ndocker0: 172.17.0.1\r\n```\r\n\r\nIt's possible for nodeAddresses to contain both `::/0` and another IP, but\r\nonly when mixing IPv4 and IPv6 arguments due to checks here:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/289430a83ebf9c637b9782492aa038e029ee80c5/pkg/proxy/util/utils.go#L179-L184\r\n\r\nStarting kube-proxy with `--nodeport-addresses=::/0,10.0.0.1/32` would cause these values:\r\n\r\n```\r\nnodeAddresses == [\"10.0.0.1\", \"::/0\"]                    # This is the order sets.String.List would return them.\r\nnodeIPs       == [\"10.0.0.1\", \"127.0.0.1\", \"172.17.0.1]  # IPv6 address possibly here also, if there are routes using them as source.\r\n```\r\n\r\nDown the line, when configuring a node port service we would have:\r\n\r\n```\r\nlps == []utilproxy.LocalPort{\r\n    {\r\n        IP: \"10.0.0.1\",\r\n        ...\r\n    },\r\n    {\r\n        IP: \"\",\r\n    },\r\n}\r\n```\r\n\r\nI'm not sure this value for `lps` makes much sense but I didn't touch this part of the code. If it's okay for it to have a single empty IP entry then I guess `utilproxy.GetNodeAddresses` could be modified to return only `::/0` and them skip iterating on `nodeAddresses` if `utilproxy.IsZeroCIDR(nodeAddresses[0])` is true.",
        "createdAt" : "2019-07-01T20:54:24Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25763e159a4560b6a7b794c109255eebbf6385d",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +835,839 @@\t\t\tnodeAddresses = nodeAddrSet.List()\n\t\t\tfor _, address := range nodeAddresses {\n\t\t\t\tif utilproxy.IsZeroCIDR(address) {\n\t\t\t\t\tnodeIPs, err = proxier.ipGetter.NodeIPs()\n\t\t\t\t\tif err != nil {"
  },
  {
    "id" : "1fc48785-66c8-490d-8262-958e5da82a52",
    "prId" : 79444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79444#pullrequestreview-265458295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8645029d-fa28-4324-a9dc-5d8d8f39a080",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "For this PR, can we keep the logic the same as what it was before and open a separate PR for the zero cidr changes? \r\n\r\ni.e. keep this section as:\r\n```go\r\n                      for _, address := range nodeAddresses {\r\n\t\t\t\tif !utilproxy.IsZeroCIDR(address) {\r\n\t\t\t\t\tnodeIPs = append(nodeIPs, net.ParseIP(address))\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\t// zero cidr\r\n\t\t\t\tnodeIPs, err = proxier.ipGetter.NodeIPs()\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tklog.Errorf(\"Failed to list all node IPs from host, err: %v\", err)\r\n\t\t\t\t}\r\n\t\t\t}\r\n```\r\n",
        "createdAt" : "2019-07-22T21:42:41Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "e8f7ac68-a5de-4dcc-a9b8-1edd4432284b",
        "parentId" : "8645029d-fa28-4324-a9dc-5d8d8f39a080",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Fwiw I think your current changes do make more sense since we should break on zero cidr but easier to isolate the PRs that way ",
        "createdAt" : "2019-07-22T21:44:07Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "f4ba6f4e-8307-469e-b573-57960accf0d2",
        "parentId" : "8645029d-fa28-4324-a9dc-5d8d8f39a080",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Not opposed to separate commits either actually ",
        "createdAt" : "2019-07-22T21:44:29Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "388a4bd0-a357-4902-bbc4-595481c3f289",
        "parentId" : "8645029d-fa28-4324-a9dc-5d8d8f39a080",
        "authorId" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "body" : "Thanks for the feedback @andrewsykim! I have updated the PR separating the changes in 2 different commits and trying to explain the reasoning better in the commit messages.",
        "createdAt" : "2019-07-23T14:10:53Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "a9b97932-e4ab-4661-9f09-6cd54e4e121d",
        "tags" : [
        ]
      },
      {
        "id" : "124d0305-2b2d-41f7-854d-7624b69fec6b",
        "parentId" : "8645029d-fa28-4324-a9dc-5d8d8f39a080",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "thank you!",
        "createdAt" : "2019-07-23T14:41:07Z",
        "updatedAt" : "2019-07-23T16:36:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25763e159a4560b6a7b794c109255eebbf6385d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +834,838 @@\t\tif err == nil && nodeAddrSet.Len() > 0 {\n\t\t\tnodeAddresses = nodeAddrSet.List()\n\t\t\tfor _, address := range nodeAddresses {\n\t\t\t\tif utilproxy.IsZeroCIDR(address) {\n\t\t\t\t\tnodeIPs, err = proxier.ipGetter.NodeIPs()"
  },
  {
    "id" : "b8c23eb5-a02d-4a15-bd0d-e36017603f24",
    "prId" : 76779,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76779#pullrequestreview-230440184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a2e4d62-2af7-4445-b39c-c9fef58c9346",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Can this be an unexported function? Doesn't seem like we're using it outside this package. ",
        "createdAt" : "2019-04-25T03:28:59Z",
        "updatedAt" : "2019-04-25T03:28:59Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "89e70dd7-e7a9-4f34-a530-d64fd1fcf293",
        "parentId" : "2a2e4d62-2af7-4445-b39c-c9fef58c9346",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "This is used in test",
        "createdAt" : "2019-04-25T03:36:37Z",
        "updatedAt" : "2019-04-25T03:36:37Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "5b685d26-3ba0-49df-abee-ffd3a744dfd1",
        "parentId" : "2a2e4d62-2af7-4445-b39c-c9fef58c9346",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Tests in the same package can call unexported functions right?",
        "createdAt" : "2019-04-25T03:39:51Z",
        "updatedAt" : "2019-04-25T03:39:51Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "0062a7d8de995fe59bfe7739ad20cea1bdde38e3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +277,281 @@// ParseExcludedCIDRs parses the input strings and returns net.IPNet\n// The validation has been done earlier so the error condition will never happen under normal conditions\nfunc ParseExcludedCIDRs(excludeCIDRStrs []string) []*net.IPNet {\n\tvar cidrExclusions []*net.IPNet\n\tfor _, excludedCIDR := range excludeCIDRStrs {"
  },
  {
    "id" : "938a69c1-8a49-4741-b9df-2fe9e48bb997",
    "prId" : 76779,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76779#pullrequestreview-230442418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "can we flip the err check here?\r\n\r\n```go\r\nif err != nil {\r\n    continue\r\n}\r\n\r\ncidrExclusions = append(cidrExclusions, n)\r\n```\r\n\r\nEasier to read IMO ",
        "createdAt" : "2019-04-25T03:29:49Z",
        "updatedAt" : "2019-04-25T03:32:19Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "9bc23fae-b979-41a3-8739-551aebc4189c",
        "parentId" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Also curious if an err here warrants logging. What do you think?",
        "createdAt" : "2019-04-25T03:32:46Z",
        "updatedAt" : "2019-04-25T03:32:46Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "ac2ab75f-fef7-4093-a3ee-6f0a2842cd3a",
        "parentId" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Please see comment on line 278 - there is no error during parsing.",
        "createdAt" : "2019-04-25T03:37:29Z",
        "updatedAt" : "2019-04-25T03:37:29Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "71f773ae-81ce-4230-b534-38c5cc43920f",
        "parentId" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@andrewsykim \r\nPlease let me know if the code can be kept as is.\r\n\r\nThe reason I ask you to confirm was that, I no longer have the branch locally based on which this PR was generated.\r\nIf you insist I change any of the code, I need to re-create the PR.\r\n\r\nThanks",
        "createdAt" : "2019-04-25T03:39:05Z",
        "updatedAt" : "2019-04-25T03:39:06Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "cceae22b-b8a0-4e71-967e-55224cc6d956",
        "parentId" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "ah I see, can you open follow-up PR to address those comments then? ",
        "createdAt" : "2019-04-25T03:50:51Z",
        "updatedAt" : "2019-04-25T03:54:23Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "be4b3e34-1a2b-4506-87af-a9bf918856a9",
        "parentId" : "0e512f48-8638-4e7c-b385-93e3f2064f12",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Sure. Once this goes in, I will file follow-on PR.",
        "createdAt" : "2019-04-25T03:57:42Z",
        "updatedAt" : "2019-04-25T03:57:42Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "0062a7d8de995fe59bfe7739ad20cea1bdde38e3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +281,285 @@\tfor _, excludedCIDR := range excludeCIDRStrs {\n\t\t_, n, err := net.ParseCIDR(excludedCIDR)\n\t\tif err == nil {\n\t\t\tcidrExclusions = append(cidrExclusions, n)\n\t\t}"
  },
  {
    "id" : "72eb9c07-26cf-4e26-b61e-308a8367b908",
    "prId" : 76779,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76779#pullrequestreview-230441460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a4910c2-da7b-4f7d-8c66-8703b345bfd0",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I don't think this variable name needed to be updated. `excludeCIDRs` IMO is fine ",
        "createdAt" : "2019-04-25T03:50:09Z",
        "updatedAt" : "2019-04-25T03:50:09Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "0062a7d8de995fe59bfe7739ad20cea1bdde38e3",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +300,304 @@\tsyncPeriod time.Duration,\n\tminSyncPeriod time.Duration,\n\texcludeCIDRStrs []string,\n\tstrictARP bool,\n\tmasqueradeAll bool,"
  },
  {
    "id" : "9681c5ed-2353-424b-916f-2bdb90296079",
    "prId" : 76334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76334#pullrequestreview-226359033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Shouldn't we check the error return from this call ?",
        "createdAt" : "2019-04-12T15:57:22Z",
        "updatedAt" : "2019-04-12T15:57:22Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "d5392eec-23bf-4f88-8091-c0f5b5876dbb",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Created #76542",
        "createdAt" : "2019-04-13T14:35:46Z",
        "updatedAt" : "2019-04-13T14:35:46Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "b1d0b4dd-75c6-4a22-ada4-12a92b2e5b15",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "b298815b-4ebf-465d-9bed-ea60f9989f56",
        "body" : "I didn’t investigate this deep, I merely move this code to the function. According to the comment above, error should have already be checked at this place. I believe that’s true :) \r\n/cc @m1093782566 @lbernail",
        "createdAt" : "2019-04-13T14:46:26Z",
        "updatedAt" : "2019-04-13T14:46:59Z",
        "lastEditedBy" : "b298815b-4ebf-465d-9bed-ea60f9989f56",
        "tags" : [
        ]
      },
      {
        "id" : "92992ea9-61bf-4561-bb79-42078f7c908a",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I think adding check of error return is good coding practice.",
        "createdAt" : "2019-04-13T14:49:36Z",
        "updatedAt" : "2019-04-13T14:49:36Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "0ce6a079-94ca-4ade-ade3-977c2ccdf873",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "50978e62-674d-403a-92d2-6a80ec250c92",
        "body" : "Yes it's validated here: https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/apis/config/validation/validation.go#L261\r\n\r\n@m1093782566 will know better if we encourage systematic error checks in kube-proxy, even when we know they are redundant (@tedyu I completely agree on the general statement)\r\n\r\nI think the best would probably be to store parsed CIDRs at initialization (but this is out of the scope of this PR)",
        "createdAt" : "2019-04-13T14:57:14Z",
        "updatedAt" : "2019-04-13T14:57:14Z",
        "lastEditedBy" : "50978e62-674d-403a-92d2-6a80ec250c92",
        "tags" : [
        ]
      },
      {
        "id" : "bb2f9a8e-9f67-43ed-8e72-22e3bd07149f",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Logged issue #76544",
        "createdAt" : "2019-04-13T15:41:05Z",
        "updatedAt" : "2019-04-13T15:41:05Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "2af9aa43-006b-466c-a121-42697d8e0f16",
        "parentId" : "241c4198-71bb-4ade-8c76-3e40b8aead7a",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Created PR #76548",
        "createdAt" : "2019-04-13T16:13:45Z",
        "updatedAt" : "2019-04-13T16:13:46Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "107faf5ab00a3e4bdf9168d2ce4e5d18b880d83a",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1717,1721 @@\tfor _, excludedCIDR := range proxier.excludeCIDRs {\n\t\t// Any validation of this CIDR already should have occurred.\n\t\t_, n, _ := net.ParseCIDR(excludedCIDR)\n\t\tif n.Contains(ip) {\n\t\t\treturn true"
  },
  {
    "id" : "858e8468-372a-4d9b-bc41-cad108c18674",
    "prId" : 70616,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70616#pullrequestreview-172637810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bb69c77-ba26-480b-9ea8-ec7ea83f5739",
        "parentId" : null,
        "authorId" : "fa37bbb4-59dd-42f0-8202-52d5717aff5e",
        "body" : "Comment should be \"Flush all of our chains.\"",
        "createdAt" : "2018-11-07T18:37:37Z",
        "updatedAt" : "2018-11-07T18:38:15Z",
        "lastEditedBy" : "fa37bbb4-59dd-42f0-8202-52d5717aff5e",
        "tags" : [
        ]
      }
    ],
    "commit" : "90d2c5ca5a892b6cdd20d84f80e5bf83840bc50a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +552,556 @@\t}\n\n\t// Flush and remove all of our chains. Flushing all chains before removing them also removes all links between chains first.\n\tfor _, ch := range iptablesChains {\n\t\tif err := ipt.FlushChain(ch.table, ch.chain); err != nil {"
  },
  {
    "id" : "a784cc8f-ecd2-4059-acb8-052259abcf25",
    "prId" : 66012,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66012#pullrequestreview-135757438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dba1505-7e02-47c8-ad92-76000328bcb1",
        "parentId" : null,
        "authorId" : "c135d2c5-f879-4989-b899-96610cfb9026",
        "body" : "I think this identifier should either be created in graceful_delete.go (pass in vs and rs instead of the string), or defined higher up so it's not duplicated with line 1503.",
        "createdAt" : "2018-07-10T10:10:28Z",
        "updatedAt" : "2018-09-27T07:20:54Z",
        "lastEditedBy" : "c135d2c5-f879-4989-b899-96610cfb9026",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e4f84f42eaf626a94fd422e4d4f67601d4d5ac4",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +1555,1559 @@\tfor _, ep := range curEndpoints.Difference(newEndpoints).UnsortedList() {\n\t\t// if curEndpoint is in gracefulDelete, skip\n\t\tuniqueRS := vs.String() + \"/\" + ep\n\t\tif proxier.gracefuldeleteManager.InTerminationList(uniqueRS) {\n\t\t\tcontinue"
  },
  {
    "id" : "98529702-51a9-44e3-aab0-6a4de59055ce",
    "prId" : 65803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65803#pullrequestreview-137255793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "parentId" : null,
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "I don't think this is right. All IP in `kube-ipvs0` interface can match `dst-type LOCAL`. ",
        "createdAt" : "2018-07-06T06:53:29Z",
        "updatedAt" : "2018-07-06T06:53:44Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      },
      {
        "id" : "79372253-efb5-41b0-8527-6dac6c8a2262",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "body" : "Please see the changes of KUBE-NODE-PORT chain. Only packets matching KUBE-NODE-PORT-{TCP,UDP} and not matching KUBE-NODE-PORT-{TCP,UDP}-LOCAL are sent to KUBE-MARK-MASQ. \r\nBefore this commit, packets in KUBE-NODE-PORT are masqueraded by default, but this's is changed in this commit.",
        "createdAt" : "2018-07-06T07:08:43Z",
        "updatedAt" : "2018-07-06T07:12:12Z",
        "lastEditedBy" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "tags" : [
        ]
      },
      {
        "id" : "854ca881-fdba-426c-b393-19d23c468e82",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "What I'm trying to say is, for example, if we have a service with clusterIP address `172.17.0.1:443`, then iptables with treat `172.17.0.1` as `LOCAL`, traffic to `172.17.0.1:443` will match this `-A KUBE-SERVICES  -m addrtype  --dst-type LOCAL -j KUBE-NODE-PORT` rule, then if we have a service with nodeport `443`, error could happen. ",
        "createdAt" : "2018-07-06T07:35:46Z",
        "updatedAt" : "2018-07-06T07:35:46Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      },
      {
        "id" : "b74afb17-9c6a-4a3e-96c0-759b38076572",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "body" : "clusterIP address 172.17.0.1:443 will be matched by the preceding ClusterIP rule:\r\n```\r\n-A KUBE-SERVICES -m comment --comment \"Kubernetes service cluster ip + port for masquerade purpose\" -m set --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ\r\n```\r\n,  not by the rule you mentioned above.\r\n\r\nEven someone disordered these two rules, say,  \"-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT\" is matched first, nothing will happen in KUBE-NODE-PORT chain, and the processing will return from KUBE-NODE-PORT chain to KUBE-SERVICES chain, and hitting KUBE-CLUSTER-IP match.",
        "createdAt" : "2018-07-09T03:03:25Z",
        "updatedAt" : "2018-07-09T03:04:07Z",
        "lastEditedBy" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "tags" : [
        ]
      },
      {
        "id" : "a83d59b0-a3e2-4993-83c8-7daaa2ee5366",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "9fcc8a42-459b-468d-8eeb-60a38e26971d",
        "body" : "@honkiko I don't think `dst-type LOCAL` is right too. \r\nImagine a scenario: there are two nodes in cluster, named node A and node B. If there is a container in node A and it want to access svc by `<node B ip>:<nodePort>`, it will match:\r\n\r\n```\r\n-A OUTPUT -m comment --comment \"kubernetes service portals\" -j KUBE-SERVICES\r\n-A KUBE-SERVICES -m comment --comment \"Kubernetes service cluster ip + port for masquerade purpose\" -m set --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ\r\n-A KUBE-SERVICES -m set --match-set KUBE-CLUSTER-IP dst,dst -j ACCEPT\r\n-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT\r\n```\r\n\r\nIf you set `-m addrtype --dst-type LOCAL`, it will not match `KUBE-NODE-PORT` and the packets will not masq in some cases.",
        "createdAt" : "2018-07-12T03:29:53Z",
        "updatedAt" : "2018-07-12T03:29:53Z",
        "lastEditedBy" : "9fcc8a42-459b-468d-8eeb-60a38e26971d",
        "tags" : [
        ]
      },
      {
        "id" : "ac9f1821-af0c-41e3-b329-6950db95a34b",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "body" : "The masquerade for NodePort is done on redirecting node( node B in your case), not the node initiating access. \r\nIn your case, no SNAT is needed on node A.",
        "createdAt" : "2018-07-12T07:27:45Z",
        "updatedAt" : "2018-07-12T07:28:21Z",
        "lastEditedBy" : "8a68270a-97b3-4b4c-a09f-5c8ea7fdfc1c",
        "tags" : [
        ]
      },
      {
        "id" : "543cc9c1-9b33-48e8-8622-c6127e4755eb",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "9fcc8a42-459b-468d-8eeb-60a38e26971d",
        "body" : "Sorry,it is my mistake. `all nodes can communicate with all containers (and vice-versa) without NAT` is Kubernetes model fundamental requirements. So above scenario will work ok.",
        "createdAt" : "2018-07-12T09:09:49Z",
        "updatedAt" : "2018-07-12T09:09:49Z",
        "lastEditedBy" : "9fcc8a42-459b-468d-8eeb-60a38e26971d",
        "tags" : [
        ]
      },
      {
        "id" : "15855b59-454b-4f52-b5c3-29422e12d399",
        "parentId" : "5bb038ac-9930-4740-9976-2082fb8701e7",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "@honkiko Sorry for the delay replaying. In normal case, if we didn't specified masq-all, traffic from in-cluster to another clusterIP should not be masquerade, cause we need preserve the source address information. \r\nBut if matched `-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT`, jumped to KUBE-NODE_PORT, then the traffic might be masquerade. Right? ",
        "createdAt" : "2018-07-15T06:14:05Z",
        "updatedAt" : "2018-07-15T06:14:05Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2bf173aafccf70e8ca2630f30178e5f7cf138ed",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1277,1281 @@\t\t\"-m\", \"addrtype\", \"--dst-type\", \"LOCAL\",\n\t)\n\twriteLine(proxier.natRules, append(args, \"-j\", string(KubeNodePortChain))...)\n\n\t// mark drop for KUBE-LOAD-BALANCER"
  },
  {
    "id" : "3633f52d-7df5-48ee-bcda-7c2139b1a9dc",
    "prId" : 65422,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65422#pullrequestreview-163233997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e22c3b90-125c-4995-8ff7-e3cfc5cbe320",
        "parentId" : null,
        "authorId" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "body" : "@m1093782566 The file doesn't exist when kube-proxy is running inside container without mounting /lib/modules. Returning a warning instead of an error may be appropriate. Like https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/proxier.go#L467",
        "createdAt" : "2018-10-10T08:20:08Z",
        "updatedAt" : "2018-10-10T08:20:08Z",
        "lastEditedBy" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "73e3d8a081cbe4d90cd2bd2bd3254567ed80ba1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +452,456 @@\tb, err = ioutil.ReadFile(builtinModsFilePath)\n\tif err != nil {\n\t\tglog.Warningf(\"Failed to read file %s with error %v. You can ignore this message when kube-proxy is running inside container without mounting /lib/modules\", builtinModsFilePath, err)\n\t}\n\tvar bmods []string"
  },
  {
    "id" : "98088f7b-3126-41ff-9b3f-7dcfd74106fe",
    "prId" : 65264,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65264#pullrequestreview-131452006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dee4d7d-dc11-43d4-9bbf-ddcb88613564",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Why don't leverage sets.String?",
        "createdAt" : "2018-06-22T11:50:24Z",
        "updatedAt" : "2018-06-25T02:39:52Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "14f4ec4d-30bd-444b-8b39-cc405f6126fc",
        "parentId" : "1dee4d7d-dc11-43d4-9bbf-ddcb88613564",
        "authorId" : "580dfd09-be24-4948-931d-c345b0ff44ef",
        "body" : "Because we need a map (activeBindAddrs) to recode these addresse which successfully bind to DefaultDummyDevice. To check whether an element in `currentBindAddrs` is active, map is more effective (O(1)) than string set. Just like what `activeIPVSServices` and `currentIPVSServices` do",
        "createdAt" : "2018-06-25T02:29:09Z",
        "updatedAt" : "2018-06-25T02:39:52Z",
        "lastEditedBy" : "580dfd09-be24-4948-931d-c345b0ff44ef",
        "tags" : [
        ]
      }
    ],
    "commit" : "7973626e94841ab4d3b182608236337d1129ad61",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +741,745 @@\tcurrentIPVSServices := make(map[string]*utilipvs.VirtualServer)\n\t// activeBindAddrs represents ip address successfully bind to DefaultDummyDevice in this round of sync\n\tactiveBindAddrs := map[string]bool{}\n\n\t// Build IPVS rules for each service."
  },
  {
    "id" : "7f170aee-0e09-4ee0-b4a7-5fecd0a9d8ff",
    "prId" : 63850,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63850#pullrequestreview-120519986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd82e55-f80e-45eb-838e-5c9cf7ec5788",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "There will be duplicated values? But it's not a big deal :)",
        "createdAt" : "2018-05-16T07:29:50Z",
        "updatedAt" : "2018-05-16T07:58:33Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3e2fc0c0f0ae1d4a17bedc0d86f51b210a4eae1",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +450,454 @@\n\tmods := strings.Split(string(out), \"\\n\")\n\treturn append(mods, bmods...), nil\n}\n"
  },
  {
    "id" : "fbf86f2a-a943-415d-8214-8c65db3b289d",
    "prId" : 63585,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63585#pullrequestreview-131873529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f172118-cc3b-4cf9-b1db-33e0a4bbb0ed",
        "parentId" : null,
        "authorId" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "body" : "why we need to destroy `kubeClusterIPSet` twice?",
        "createdAt" : "2018-06-26T05:58:09Z",
        "updatedAt" : "2018-06-26T05:59:48Z",
        "lastEditedBy" : "05637862-b60e-403e-8519-09d1b3f0c9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "10664ee8c6c76ea22b265d1cdddee71f3941803c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +559,563 @@\t// Destroy ip sets created by ipvs Proxier.  We should call it after cleaning up\n\t// iptables since we can NOT delete ip set which is still referenced by iptables.\n\tipSetsToDestroy := []string{kubeClusterIPSet, kubeClusterIPSet, kubeLoadBalancerSet, kubeNodePortSetTCP, kubeNodePortSetUDP,\n\t\tkubeExternalIPSet, kubeLoadbalancerFWSet, kubeLoadBalancerSourceIPSet, kubeLoadBalancerSourceCIDRSet,\n\t\tkubeLoadBalancerLocalSet, kubeNodePortLocalSetUDP, kubeNodePortLocalSetTCP}"
  },
  {
    "id" : "c370f1ee-ba40-456d-8111-aedc6b1e536d",
    "prId" : 62007,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62007#pullrequestreview-108643816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c11465-7587-41ff-b22f-054e93ca2d51",
        "parentId" : null,
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "Can you add a period after \"that same traffic\"? ",
        "createdAt" : "2018-04-02T15:28:28Z",
        "updatedAt" : "2018-04-12T09:26:27Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      }
    ],
    "commit" : "00430b4b6c5b1abfa249fa3ae9c8405f8a2fc5f0",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +1321,1325 @@\t// If the masqueradeMark has been added then we want to forward that same\n\t// traffic, this allows NodePort traffic to be forwarded even if the default\n\t// FORWARD policy is not accept.\n\twriteLine(proxier.filterRules,\n\t\t\"-A\", string(KubeForwardChain),"
  },
  {
    "id" : "e915eb82-9a28-4c80-9469-e502e27e5194",
    "prId" : 62007,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62007#pullrequestreview-108643816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28557656-2bdd-49a6-9073-5bfcff82cde3",
        "parentId" : null,
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "\"...after the initial packet **is** accepted... will be accepted. **Specifically,** the traffic must be sourced or destined to the clusterCIDR...\"",
        "createdAt" : "2018-04-02T15:31:11Z",
        "updatedAt" : "2018-04-12T09:26:27Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      }
    ],
    "commit" : "00430b4b6c5b1abfa249fa3ae9c8405f8a2fc5f0",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +1331,1335 @@\t// The following rules can only be set if clusterCIDR has been defined.\n\tif len(proxier.clusterCIDR) != 0 {\n\t\t// The following two rules ensure the traffic after the initial packet\n\t\t// accepted by the \"kubernetes forwarding rules\" rule above will be\n\t\t// accepted, to be as specific as possible the traffic must be sourced"
  },
  {
    "id" : "02dc92ab-9845-4d2f-8cb2-b2b13f67b5e1",
    "prId" : 61329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61329#pullrequestreview-105165257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a144e705-fb7c-4075-8964-213945872c3d",
        "parentId" : null,
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "Comment here.",
        "createdAt" : "2018-03-19T22:56:51Z",
        "updatedAt" : "2018-04-08T02:33:17Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      }
    ],
    "commit" : "076007b25dc49aa604195ea4feb5ca1edc4c23e8",
    "line" : 406,
    "diffHunk" : "@@ -1,1 +1255,1259 @@\t\t\t\"dst\",\n\t\t)\n\t\twriteLine(proxier.natRules, append(args, \"-j\", string(KubeNodePortChain))...)\n\t\tif !proxier.nodePortLocalSetUDP.isEmpty() {\n\t\t\targs = append(args[:0],"
  },
  {
    "id" : "5dc3f71d-747e-4a1d-9c47-9def1b8145b8",
    "prId" : 61329,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61329#pullrequestreview-107166977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d07cb56-3dac-4594-bd78-8e41008a3f91",
        "parentId" : null,
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "I'm confused on what is happening here. Why do you initialize a new IPSet and then set that to either the existing TCP or UDP nodeport set?",
        "createdAt" : "2018-03-26T22:19:40Z",
        "updatedAt" : "2018-04-08T02:33:17Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      },
      {
        "id" : "dccb742b-cfc4-4d34-a6f2-ccc3b1bb4956",
        "parentId" : "9d07cb56-3dac-4594-bd78-8e41008a3f91",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "This part is to chose the ipset(`KUBE-NODE-PORT-TCP/KUBE-NODE-PORT-UDP`) to insert the entry. Haven't initialized a new ipset, just declared a ipset pointer.",
        "createdAt" : "2018-03-27T06:39:00Z",
        "updatedAt" : "2018-04-08T02:33:17Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      }
    ],
    "commit" : "076007b25dc49aa604195ea4feb5ca1edc4c23e8",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +1033,1037 @@\t\t\t\tSetType:  utilipset.BitmapPort,\n\t\t\t}\n\t\t\tvar nodePortSet *IPSet\n\t\t\tswitch protocol {\n\t\t\tcase \"tcp\":"
  },
  {
    "id" : "7ce40054-5a35-4768-b4ef-3ef8f84196c7",
    "prId" : 61091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61091#pullrequestreview-103706405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "770a9f17-b8cd-4335-8e20-634a73653514",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "append: `\"-j\", string(KubeFireWallChain))...`?",
        "createdAt" : "2018-03-14T06:54:05Z",
        "updatedAt" : "2018-03-27T03:32:19Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8fae0ee4d51254f5c9e10bfd88db22d022a2375",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1149,1153 @@\t\t\t\"-A\", string(kubeServicesChain),\n\t\t\t\"-m\", \"set\", \"--match-set\", proxier.lbIngressSet.Name,\n\t\t\t\"dst,dst\",\n\t\t\t\"-j\", string(KubeFireWallChain),\n\t\t}"
  },
  {
    "id" : "bd84abaa-c5e6-4876-a786-26fc8092968c",
    "prId" : 61091,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61091#pullrequestreview-107142881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c95a4d7-7ceb-4493-aac2-cfe3321b9bc6",
        "parentId" : null,
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "How is this different than what was there originally? In other words, why did it not work previously?",
        "createdAt" : "2018-03-26T21:45:25Z",
        "updatedAt" : "2018-03-27T03:32:19Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      },
      {
        "id" : "8a1ce24c-9b2e-48f3-9375-48294a9a800e",
        "parentId" : "6c95a4d7-7ceb-4493-aac2-cfe3321b9bc6",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "Cause after this sync loop, the whole nat table gonna be restored, including this `-j kube-fire-wall` rule.",
        "createdAt" : "2018-03-27T03:30:40Z",
        "updatedAt" : "2018-03-27T03:32:19Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8fae0ee4d51254f5c9e10bfd88db22d022a2375",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1146,1150 @@\tif !proxier.lbWhiteListCIDRSet.isEmpty() || !proxier.lbWhiteListIPSet.isEmpty() {\n\t\t// link kube-services chain -> kube-fire-wall chain\n\t\targs := []string{\n\t\t\t\"-A\", string(kubeServicesChain),\n\t\t\t\"-m\", \"set\", \"--match-set\", proxier.lbIngressSet.Name,"
  },
  {
    "id" : "65fb2da4-9620-4cfe-8411-74e24a3084ee",
    "prId" : 61077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61077#pullrequestreview-120935139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b616d136-7002-443e-874b-04f068bea1e7",
        "parentId" : null,
        "authorId" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "body" : "@m1093782566 Maybe we can assume ipvs mode has not been used ealier if `canUse` is false at the moment.",
        "createdAt" : "2018-05-17T07:13:42Z",
        "updatedAt" : "2018-05-17T07:13:43Z",
        "lastEditedBy" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "tags" : [
        ]
      },
      {
        "id" : "13eb94d7-4094-4533-9474-633129b0fbd2",
        "parentId" : "b616d136-7002-443e-874b-04f068bea1e7",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "SGTM!",
        "createdAt" : "2018-05-17T08:13:38Z",
        "updatedAt" : "2018-05-17T08:13:39Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff8b70c4094f8d2cc818ce7e88eb7735bd43ae61",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +548,552 @@// CleanupLeftovers clean up all ipvs and iptables rules created by ipvs Proxier.\nfunc CleanupLeftovers(ipvs utilipvs.Interface, ipt utiliptables.Interface, ipset utilipset.Interface, cleanupIPVS bool) (encounteredError bool) {\n\tif canUse, _ := CanUseIPVSProxier(NewLinuxKernelHandler(), ipset); !canUse {\n\t\treturn false\n\t}"
  },
  {
    "id" : "a04457ea-d2d3-445a-a27e-7c77e3da029e",
    "prId" : 58680,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58680#pullrequestreview-93808730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6a4022b-500c-4613-9bd5-884962f75797",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "this breaks cross build https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/59158/pull-kubernetes-cross/6701/",
        "createdAt" : "2018-02-02T18:43:06Z",
        "updatedAt" : "2018-02-02T18:43:06Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "ffd3cd1d-c569-4a4e-a179-efc53f024bc7",
        "parentId" : "a6a4022b-500c-4613-9bd5-884962f75797",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Sorry, but I assume it's fixed by #59243 now.",
        "createdAt" : "2018-02-03T06:19:05Z",
        "updatedAt" : "2018-02-03T06:19:14Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1ba9b453d709be6898fed5b80e8c82d9e122ff8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1706,1710 @@\t\terr := proxier.netlinkHandle.UnbindAddress(addr, DefaultDummyDevice)\n\t\t// Ignore no such address error when try to unbind address\n\t\tif err != nil && err != unix.ENXIO {\n\t\t\tglog.Errorf(\"Failed to unbind service addr %s from dummy interface %s: %v\", addr, DefaultDummyDevice, err)\n\t\t}"
  },
  {
    "id" : "d1ca7c1c-4c75-4035-8dfe-d89825ede756",
    "prId" : 51874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51874#pullrequestreview-67900498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "PR comment says dry-run, this does not ?",
        "createdAt" : "2017-10-06T18:16:24Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "89e2b9fc-b4b1-4469-939a-6a54f84746e1",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Does this work if kube-proxy is in a container?\r\n\r\n@MrHohn ",
        "createdAt" : "2017-10-06T18:19:18Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "53a15ec1-5c08-4433-aa71-4ef163ef0cb4",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "I believe this depends on the works on https://github.com/kubernetes/kubernetes/pull/52003.",
        "createdAt" : "2017-10-06T18:56:20Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "2281c7cd-f2fc-4115-aa81-a568ddc62cd4",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "> PR comment says dry-run, this does not ?\r\n\r\nI did a simple test and found `modprobe --dry-run ${kmod}` == `modprobe -- ${kmod}`\r\n\r\n@vfreex right?",
        "createdAt" : "2017-10-07T02:57:51Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "d010ad99-cafe-4d57-ae71-f77c1385de8c",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "> Does this work if kube-proxy is in a container?\r\n\r\nthis updated logic does no harm when kube-proxy is in a container.",
        "createdAt" : "2017-10-07T02:58:57Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "34c88009-6d5d-486f-866b-0a441183b780",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "How is `--` the same as `--dry-run` ?  That's not in the docs and doesn't make much sense.",
        "createdAt" : "2017-10-09T04:46:45Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4f02ac56-beb8-4543-ab0f-0a29803a84ca",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "body" : "@thockin Sorry I removed the `--dry-run` option in latter commits.\r\nThe latest logic is, try to running `modprobe` to load required kernel modules, and ignore the error if `modprobe` fails. Then check if all those modules are already loaded in the kernel.\r\nSuccessful running `modprobe` in a container requires `/lib/moudules` on node is mounted to the container. If not doing so, `modprobe` will fail but the error will be ignored.",
        "createdAt" : "2017-10-09T07:15:27Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "tags" : [
        ]
      },
      {
        "id" : "8acae153-db1b-465a-8430-91097431f087",
        "parentId" : "0b58a20c-dc72-4158-80d2-92f7606dbcd6",
        "authorId" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "body" : "`--` is different from `--dry-run`. `--dry-run` only checks the existence of the modules without actually loading it.\r\n`--` is only an explicit separator to prevent from parsing options: `modprobe -- ${kmod}` is the same as `modprobe ${kmod}`.",
        "createdAt" : "2017-10-09T07:18:45Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "tags" : [
        ]
      }
    ],
    "commit" : "74a69d8e079852d8e28dbd12efb50347eb359fb9",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +656,660 @@\t// Try to load IPVS required kernel modules using modprobe\n\tfor _, kmod := range ipvsModules {\n\t\terr := utilexec.New().Command(\"modprobe\", \"--\", kmod).Run()\n\t\tif err != nil {\n\t\t\tglog.Warningf(\"Failed to load kernel module %v with modprobe. \"+"
  },
  {
    "id" : "ce83d7c6-ce38-4978-9136-7b525a4ec10d",
    "prId" : 51874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51874#pullrequestreview-67907714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd94bf5f-3211-4542-91ba-b355914d2df2",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Could you please add some explanation on `--`?",
        "createdAt" : "2017-10-09T07:59:05Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "87374495-89e7-4870-aa89-682104197fb1",
        "parentId" : "fd94bf5f-3211-4542-91ba-b355914d2df2",
        "authorId" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "body" : "It is not required. For example, if you want to remove a file called `-f`, you cannot delete it with `rm -f` because `-f` will be treated as an option not a filename. You have to do it with `rm -- -f`.\r\nThe double dash is not something much here, just my personal habit.\r\nhttps://unix.stackexchange.com/questions/11376/what-does-double-dash-mean-also-known-as-bare-double-dash.\r\n",
        "createdAt" : "2017-10-09T08:02:37Z",
        "updatedAt" : "2017-11-01T09:37:50Z",
        "lastEditedBy" : "4dd7c28e-66e6-42c1-9339-aa4da4938e6b",
        "tags" : [
        ]
      }
    ],
    "commit" : "74a69d8e079852d8e28dbd12efb50347eb359fb9",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +656,660 @@\t// Try to load IPVS required kernel modules using modprobe\n\tfor _, kmod := range ipvsModules {\n\t\terr := utilexec.New().Command(\"modprobe\", \"--\", kmod).Run()\n\t\tif err != nil {\n\t\t\tglog.Warningf(\"Failed to load kernel module %v with modprobe. \"+"
  },
  {
    "id" : "a7946d36-939f-4990-b78e-33d68ac744bf",
    "prId" : 46580,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46580#pullrequestreview-59611565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd93b0d3-45f1-42f5-a757-d46ac2732538",
        "parentId" : null,
        "authorId" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "body" : "Shouldn't try to modprobe these modules first ?",
        "createdAt" : "2017-08-30T04:13:23Z",
        "updatedAt" : "2017-08-30T04:13:23Z",
        "lastEditedBy" : "752ab68e-4753-4cc5-b558-f6d9cc14b1f3",
        "tags" : [
        ]
      },
      {
        "id" : "1b21c7ea-9f5b-4bf9-a672-67dab5c58cb5",
        "parentId" : "fd93b0d3-45f1-42f5-a757-d46ac2732538",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Because kube-proxy is running in container.",
        "createdAt" : "2017-08-30T06:34:32Z",
        "updatedAt" : "2017-08-30T06:34:32Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "1ff5e6c1-db6b-4304-8df1-fa90c09bafce",
        "parentId" : "fd93b0d3-45f1-42f5-a757-d46ac2732538",
        "authorId" : "01793168-ae0e-4060-bac2-300bf31a5c8c",
        "body" : "kube-proxy isn't always running in a container",
        "createdAt" : "2017-08-30T16:15:04Z",
        "updatedAt" : "2017-08-30T16:15:04Z",
        "lastEditedBy" : "01793168-ae0e-4060-bac2-300bf31a5c8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed2b44ca7d4f446533d89e2fb70bf2e4ff3ee79",
    "line" : 626,
    "diffHunk" : "@@ -1,1 +624,628 @@\tmodules := wantModules.Difference(loadModules).List()\n\tif len(modules) != 0 {\n\t\treturn false, fmt.Errorf(\"Failed to load kernel modules: %v\", modules)\n\t}\n\treturn true, nil"
  }
]