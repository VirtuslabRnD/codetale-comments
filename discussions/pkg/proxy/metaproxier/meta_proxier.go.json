[
  {
    "id" : "2af82c2e-8450-4670-b9ed-6b0fdb04c2ce",
    "prId" : 91824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91824#pullrequestreview-449292906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7faf3a37-bdc3-4f64-bd94-b8c618c2e692",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "So I think all this (metaproxier changes) can be simplified:\r\n1. have `func getServiceIPFamilies(svc) []v1.IPFamily` that returns either `svc.Spec.IPFamilies` or the family of `ClusterIP` for legacy services. (You already implement this inside `getServiceAlterantiveIPFamily` a few commits later.)\r\n2. on service add/delete you just do `for _, ipFamily := range getServiceIPFamilies(svc) {` and don't need the separate legacy Service case\r\n3. on service update, initialize one `sets.String` with `getServiceIPFamilies(oldService)` and one with `getServiceIPFamilies(service)`, and then for each family in `oldFamilies.Difference(newFamilies)` do `OnServiceDelete`, for each family in `newFamilies.Difference(oldFamilies)` do `OnServiceAdd`, and for each family in `oldFamilies.Intersection(newFamilies)` do `OnServiceUpdate`",
        "createdAt" : "2020-07-16T14:30:35Z",
        "updatedAt" : "2020-10-26T18:06:38Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "14b3451cfa7b96365807f3a0c7f952a87a8ef950",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +82,86 @@\n}\n\n// OnServiceSynced is called once all the initial event handlers were\n// called and the state is fully propagated to local cache."
  },
  {
    "id" : "2e568c59-88c7-44c3-be21-411ba2c96112",
    "prId" : 88934,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88934#pullrequestreview-371241146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70518fee-59f6-42e2-870c-15837ced25fa",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "Maybe we should use V(1)?\r\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md\r\n> klog.V(1) - A reasonable default log level if you don't want verbosity.\r\n\r\n> Information about config (listening on X, watching Y)\r\n> Errors that repeat frequently that relate to conditions that can be corrected (pod detected as unhealthy)",
        "createdAt" : "2020-03-07T10:46:47Z",
        "updatedAt" : "2020-03-07T10:46:47Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "a60209c1-8daa-408a-97db-dd78ed573f43",
        "parentId" : "70518fee-59f6-42e2-870c-15837ced25fa",
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "@aojea I'm fine with V(4). `endpointsIPFamily()` returns errors when (a) there are no subsets, (b) there are no subset addresses, (c) the first subset's ready IP is empty.\r\n\r\nIf we look at validation, then (a) is valid eg endpoints don't need subsets, (b) is valid because there may be not-ready addresses but no ready addresses, and (c) should have been rejected by validation due to `validateEndpointAddress()` and `validation.IsValidIP()`.\r\n\r\neg, none of these things that endpointsIPFamily() returns should be logged with a Warningf() because they are either valid configurations of endpoints/subsets, or are cases that shouldn't be hit becuase they would have been rejected by validation.",
        "createdAt" : "2020-03-09T14:41:06Z",
        "updatedAt" : "2020-03-09T14:41:07Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      }
    ],
    "commit" : "df58c042a8ae6b6a522b44d81e69614038ebbe56",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +104,108 @@\tipFamily, err := endpointsIPFamily(endpoints)\n\tif err != nil {\n\t\tklog.V(4).Infof(\"failed to add endpoints %s/%s with error %v\", endpoints.ObjectMeta.Namespace, endpoints.ObjectMeta.Name, err)\n\t\treturn\n\t}"
  }
]