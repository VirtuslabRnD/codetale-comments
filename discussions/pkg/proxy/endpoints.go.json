[
  {
    "id" : "3196b04e-b9e5-4e14-83a3-0045a713ce84",
    "prId" : 103306,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103306#pullrequestreview-697618228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98dc57e5-a9f4-48e8-87eb-d919af8b3113",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Will the nodeName change present a risk?  You'd have to NOT be using EPSlice to see this right?",
        "createdAt" : "2021-07-01T19:50:26Z",
        "updatedAt" : "2021-07-01T19:50:26Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "f7fe4ead-97f8-4fd9-91cd-ce718bd0ab9d",
        "parentId" : "98dc57e5-a9f4-48e8-87eb-d919af8b3113",
        "authorId" : "795a7242-f965-4c9a-b641-070356320c29",
        "body" : "That is correct, so the risk is mitigated. I am also working on a PR to GA the gates so this code path should not be possible after that gets in.",
        "createdAt" : "2021-07-01T20:15:38Z",
        "updatedAt" : "2021-07-01T20:15:38Z",
        "lastEditedBy" : "795a7242-f965-4c9a-b641-070356320c29",
        "tags" : [
        ]
      }
    ],
    "commit" : "03b7a699c248a6ad64811347b77043aabfdaa594",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +462,466 @@\n\t\t\t\t// Zone information is only supported with EndpointSlice API\n\t\t\t\tbaseEndpointInfo := newBaseEndpointInfo(addr.IP, nodeName, \"\", int(port.Port), isLocal, isReady, isServing, isTerminating, zoneHints)\n\t\t\t\tif ect.makeEndpointInfo != nil {\n\t\t\t\t\tendpointsMap[svcPortName] = append(endpointsMap[svcPortName], ect.makeEndpointInfo(baseEndpointInfo))"
  },
  {
    "id" : "1de0b857-0098-4407-8c26-5fb63affc414",
    "prId" : 96371,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96371#pullrequestreview-550191733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71dc66ac-f448-473d-925c-f2452f0202fb",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Do we need to keep this or can it just be `Serving && !Terminating` ?",
        "createdAt" : "2020-11-13T01:12:41Z",
        "updatedAt" : "2021-01-11T21:27:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3079799c-632b-422d-a917-d69a848bbacd",
        "parentId" : "71dc66ac-f448-473d-925c-f2452f0202fb",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "We need Ready at least for now since serving and terminating will be dropped in v1.20",
        "createdAt" : "2020-11-13T02:59:18Z",
        "updatedAt" : "2021-01-11T21:27:57Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "dbc35d61-e7d2-4037-80bb-13e9f26ea854",
        "parentId" : "71dc66ac-f448-473d-925c-f2452f0202fb",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "ACK - comment?",
        "createdAt" : "2020-11-13T16:28:18Z",
        "updatedAt" : "2021-01-11T21:27:57Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "d3e42f48-05e1-434a-b276-314fdc92f73a",
        "parentId" : "71dc66ac-f448-473d-925c-f2452f0202fb",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "ack, will add a comment for this",
        "createdAt" : "2020-12-11T15:20:48Z",
        "updatedAt" : "2021-01-11T21:27:57Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "a11abb54759919c07b0c0f363be07a80d1eb9a72",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +56,60 @@\t// true since only ready endpoints are read from Endpoints.\n\t// TODO: Ready can be inferred from Serving and Terminating below when enabled by default.\n\tReady bool\n\t// Serving indiciates whether this endpoint is ready regardless of its terminating state.\n\t// For pods this is true if it has a ready status regardless of its deletion timestamp."
  },
  {
    "id" : "3a0b9863-aa05-45a2-8d46-e62f7a3c5114",
    "prId" : 83206,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83206#pullrequestreview-302253272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ad3ffa0-c3c5-463b-a553-8aafdcba19a5",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "nit: consider enclose the critical section into a built in func\r\n```\r\nfunc(){\r\n  ect.lock.Lock()\r\n  defer ect.lock.Unlock()\r\n\r\n  ...\r\n}()\r\n```",
        "createdAt" : "2019-10-14T18:39:58Z",
        "updatedAt" : "2019-10-15T23:31:46Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "eef5753c-2104-4801-88ef-2faff2f59903",
        "parentId" : "1ad3ffa0-c3c5-463b-a553-8aafdcba19a5",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "you have lock in endpointSliceCache already. Do you still need lock here?",
        "createdAt" : "2019-10-14T18:53:04Z",
        "updatedAt" : "2019-10-15T23:31:46Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "97188ea8-19df-48ba-b84b-a4485fe8f1a1",
        "parentId" : "1ad3ffa0-c3c5-463b-a553-8aafdcba19a5",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "After discussing this a bit more I think it makes sense to hold off on any additional changes here until `endpointslicecache` can be moved into its own package.",
        "createdAt" : "2019-10-15T23:34:14Z",
        "updatedAt" : "2019-10-15T23:34:14Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7de45034226c1339856ceecd31b22fdc5fe0aa",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +188,192 @@\tmetrics.EndpointChangesTotal.Inc()\n\n\tect.lock.Lock()\n\tdefer ect.lock.Unlock()\n"
  },
  {
    "id" : "b89abc5a-9e77-4cdf-9bce-90a8149661c9",
    "prId" : 81430,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81430#pullrequestreview-277947313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b66a11-a4cc-4e78-bdef-615b61af33c6",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "log.Error at least if this should never happen.",
        "createdAt" : "2019-08-21T17:38:30Z",
        "updatedAt" : "2019-08-29T08:08:21Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "9665c590c7ac8801215a0bc89d12a9bafb8ceb9d",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +174,178 @@// If removeSlice is true, slice will be removed, otherwise it will be added or updated.\nfunc (ect *EndpointChangeTracker) EndpointSliceUpdate(endpointSlice *discovery.EndpointSlice, removeSlice bool) bool {\n\t// This should never happen\n\tif endpointSlice == nil {\n\t\tklog.Error(\"Nil endpointSlice passed to EndpointSliceUpdate\")"
  },
  {
    "id" : "ab5a436b-6bac-4aca-af47-d34d93940d21",
    "prId" : 81415,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81415#pullrequestreview-278847485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acb93031-f87b-4c98-9ab1-242a7c06a70a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This can technically increase memory usage. Did you think about it?",
        "createdAt" : "2019-08-21T08:11:35Z",
        "updatedAt" : "2019-08-23T13:48:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3013a068-83cf-40e5-9da4-6c9f0d359756",
        "parentId" : "acb93031-f87b-4c98-9ab1-242a7c06a70a",
        "authorId" : "0496c779-6f08-4f05-83a6-905fd6927593",
        "body" : "That's correct. Assuming there is 5000 keys, 60 bytes each, it'll increase memory by 0.3 MB. ",
        "createdAt" : "2019-08-21T11:17:57Z",
        "updatedAt" : "2019-08-23T13:48:41Z",
        "lastEditedBy" : "0496c779-6f08-4f05-83a6-905fd6927593",
        "tags" : [
        ]
      },
      {
        "id" : "f66cd315-d257-4a9a-8d71-9b5ae2edaefe",
        "parentId" : "acb93031-f87b-4c98-9ab1-242a7c06a70a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - please add a comment that if memory usage of kube-proxy will become too much issue, this can be simplified to []time.Time.",
        "createdAt" : "2019-08-23T07:56:35Z",
        "updatedAt" : "2019-08-23T13:48:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c33be173bfdd6d23a2737ab433423632dcc97df4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +199,203 @@\t// network programming latency.\n\t// NOTE(oxddr): this can be simplified to []time.Time if memory consumption becomes an issue.\n\tLastChangeTriggerTimes map[types.NamespacedName][]time.Time\n}\n"
  },
  {
    "id" : "b689a052-5a5a-49a1-a31c-bfb3cc142c25",
    "prId" : 72046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72046#pullrequestreview-313079377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5f6d24d-8c7a-47cf-b5ac-ca1b8f7254e6",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Do we allow nil for `topology` here or should we interpret `nil` as empty map? ",
        "createdAt" : "2019-11-06T15:56:51Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "8b231321-cff7-41aa-8ec7-783b9861b485",
        "parentId" : "f5f6d24d-8c7a-47cf-b5ac-ca1b8f7254e6",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "`topology` map may only be used if both `EndpintSlice` and `ServiceTopology` are enabled, so `topology` will not be nil if it's been used (used only in `FilterTopologyEndpoint` function). For safety, I think `topology` map can be nil, but if it is nil when it was been used, just \"continue\". I'm gonna add a \"continue\" to `FilterTopologyEndpoint`.",
        "createdAt" : "2019-11-07T02:32:39Z",
        "updatedAt" : "2019-11-15T06:38:02Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "31d623b4d74ceadfad101d36a4710d4406fcf144",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +85,89 @@}\n\nfunc newBaseEndpointInfo(IP string, port int, isLocal bool, topology map[string]string) *BaseEndpointInfo {\n\treturn &BaseEndpointInfo{\n\t\tEndpoint: net.JoinHostPort(IP, strconv.Itoa(port)),"
  },
  {
    "id" : "bcb93593-4abe-491d-a74b-22b04b9da957",
    "prId" : 71999,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71999#pullrequestreview-200594227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03441c26-0731-4725-9b7b-2252bce03455",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "add a commet for the function",
        "createdAt" : "2018-12-19T23:14:17Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "93ed9561-cd91-4235-9866-cb2c3e73cdc5",
        "parentId" : "03441c26-0731-4725-9b7b-2252bce03455",
        "authorId" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "body" : "Done.",
        "createdAt" : "2019-02-06T14:12:58Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "tags" : [
        ]
      }
    ],
    "commit" : "7141ece4bfee8cb63a82737a74c14d6340da0bb9",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +161,165 @@// annotation stored in the given endpoints object or the \"zero\" time if the annotation wasn't set\n// or was set incorrectly.\nfunc getLastChangeTriggerTime(endpoints *v1.Endpoints) time.Time {\n\tval, err := time.Parse(time.RFC3339Nano, endpoints.Annotations[v1.EndpointsLastChangeTriggerTime])\n\tif err != nil {"
  },
  {
    "id" : "ac4a1f5b-15fb-44fc-b0e0-c2965d7c234a",
    "prId" : 71999,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71999#pullrequestreview-202436588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "What happen if there are 2 consecutive events, one event has different endpoints, the other event has the same endpoints? Will the 2nd one erase the timestamp of the first one? Causing the 1st event was not measured? Will this happen?\r\n\r\n",
        "createdAt" : "2018-12-20T19:18:54Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "a343b989-51ac-48fc-9efd-a5da36c0e0f2",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "body" : "IIUC, the situation you described is something like this:\r\n\r\nT0: proxier.Sync()\r\nT1: proxier observes Endpoints E1 change, E1.EndpointsLastChangeTriggerTime = t0\r\nT2: proxier observes Endpoints E1 change, E1.EndpointsLastChangeTriggerTime = t1 (t1>=t0)\r\nT3: proxier.Sync()\r\n\r\nIn such case the implementation will ignore the second timestamp and use t0 (which is guaranteed to be <= t1) to measure the latency. \r\n\r\nLet me know if it makes sense.",
        "createdAt" : "2019-02-06T14:33:38Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "tags" : [
        ]
      },
      {
        "id" : "e1b4236a-6222-44fe-97fd-3c3a258f292a",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Ohh - I think I may misunderstood it initially.\r\nI think what Minhan is suggesting is the case:\r\n\r\nT0 proxier Sync() (endpoint is in E0 state)\r\nt1: proxier observes E1\r\nt2: proxier observes E2, but this E2 resolves to the same endpointMap as E0\r\nT3: sync\r\n\r\nIn this case, the sync may be no-op, but in fact those were two changes.\r\n\r\nI think that instead of reporting just the first change since last Sync, I'm leaning towards saying that we may want to report all of them (i.e. it translates to keeping []time.Time instead of single time.Time for a given namespace). I don'tthink it's that extremely expensive (it's just stored in memory).\r\n\r\n@freehan @mm4tt - thoughts?",
        "createdAt" : "2019-02-06T15:21:55Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d576ee4f-96c8-4ca3-a08a-e361661f899e",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "body" : "I agree with reporting multiple triggerTimes for the same endpoint per sync. It makes sense and should be relatively cheap. I updated the code to do that.\r\n\r\nPlease note that regarding opposite events, that combined reduce to no-change, I left the logic as was, i.e. I'm not exporting the metric for such events.\r\nThe definition of Network Programming Latency SLI is (more or less): duration between a time of a change and a time when the network was programmed to incorporate that change. If there are events A and B that together result in no-change (between syncs) there won't be any network programming for neither of them and according the the SLI definition there is nothing to export. To give you more sophisticated example (E0,E1,E2... - endpoints states; A,B,C -> events) in case of:\r\n(Sync) E0 -> A -> E1 -> B -> E2 -> C -> E0 -> D -> E3 -> E -> E4 (Sync)\r\nthe latency will be exported only for the trigger times of D and E.\r\n\r\nPlease correct me if you don't agree with my understanding / reasoning.",
        "createdAt" : "2019-02-06T15:52:39Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "tags" : [
        ]
      },
      {
        "id" : "859e3f5d-3bf6-436a-a85a-6c91bbc93f39",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "TBH, I don't have very strong opinion which one is actually correct :-)\r\nI'm fine with what you're proposing (i.e. skipping it in that case), but please add an explicit comment that this is a conscious decision.",
        "createdAt" : "2019-02-11T09:06:01Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "16d96945-98e6-4472-b26b-fbda959257e4",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "body" : "Done, added a comment.",
        "createdAt" : "2019-02-11T10:24:28Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "efa0987e-7d25-471d-9dea-9daaf77c2120",
        "tags" : [
        ]
      },
      {
        "id" : "032919e9-6f6e-4b9c-820c-18cd392f9d2d",
        "parentId" : "095f6ef9-c880-4df2-a892-6839b1872a20",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Okay. Noop sounds good. ",
        "createdAt" : "2019-02-12T01:25:41Z",
        "updatedAt" : "2019-02-12T07:10:18Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "7141ece4bfee8cb63a82737a74c14d6340da0bb9",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\t// there will be no network programming for them and thus no network programming latency metric\n\t\t// should be exported.\n\t\tdelete(ect.lastChangeTriggerTimes, namespacedName)\n\t}\n\treturn len(ect.items) > 0"
  },
  {
    "id" : "89b7a24f-b373-4e89-985f-925286b90f2a",
    "prId" : 52528,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52528#pullrequestreview-95313566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd1f9a07-a38c-41cf-923b-89514223169e",
        "parentId" : null,
        "authorId" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "body" : "nit: Check if endpoints is still nil and return, in case both previous and current were passed as nil incorrectly?",
        "createdAt" : "2018-02-08T23:24:51Z",
        "updatedAt" : "2018-02-09T09:26:44Z",
        "lastEditedBy" : "c1166017-761f-41df-8ad7-07e3dd792799",
        "tags" : [
        ]
      },
      {
        "id" : "223785cd-2c4b-4613-a763-31069f211b41",
        "parentId" : "dd1f9a07-a38c-41cf-923b-89514223169e",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Make sense, previous == nil && current == nil is unexpected, and we should return false directly.",
        "createdAt" : "2018-02-09T04:27:06Z",
        "updatedAt" : "2018-02-09T09:26:44Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "440deda6-450e-4b83-b81d-e9fed5189cdb",
        "parentId" : "dd1f9a07-a38c-41cf-923b-89514223169e",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "It's fixed now. Thanks!",
        "createdAt" : "2018-02-09T04:27:51Z",
        "updatedAt" : "2018-02-09T09:26:44Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7dbaab96a6f9daa8ef53ba24f565a13921bece4",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@\tif endpoints == nil {\n\t\tendpoints = previous\n\t}\n\t// previous == nil && current == nil is unexpected, we should return false directly.\n\tif endpoints == nil {"
  }
]