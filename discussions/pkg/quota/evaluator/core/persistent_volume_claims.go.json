[
  {
    "id" : "7ccc2377-d912-4099-8a76-56dc4251d643",
    "prId" : 54320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54320#pullrequestreview-71671406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9947828d-e3c7-4ba6-8604-8324052d86a5",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This change isn't obvious to me.",
        "createdAt" : "2017-10-24T15:54:56Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "61480acf-922c-4738-a1d2-66297bc97d8f",
        "parentId" : "9947828d-e3c7-4ba6-8604-8324052d86a5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "the existing behavior was a bug imho.  it was basically copying a pattern from pods that did not make sense for pvcs that basically verified each pvc made a storage request.",
        "createdAt" : "2017-10-24T21:01:50Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9765bcebe77ce4e62dcbdacaa5bb0910220cef0",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +83,87 @@func (p *pvcEvaluator) Constraints(required []api.ResourceName, item runtime.Object) error {\n\t// no-op for persistent volume claims\n\treturn nil\n}\n"
  },
  {
    "id" : "6b9f5718-1edc-4c8e-a0f9-f5e9a740183b",
    "prId" : 51749,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51749#pullrequestreview-60989217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f400e2e-1cec-4385-8896-aa6ae225817a",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This \"if\" block is introduced after rebase. It makes the pvc evaluator handle updates if the \"ExpandPersistentVolumes\" feature gate is enabled. During the rebase, I made it only handle the update if the pvc is initialized after the update.",
        "createdAt" : "2017-09-06T17:28:26Z",
        "updatedAt" : "2017-09-06T17:28:26Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1d33af464fd7805d8b29c74c1ce56d816c8eed",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\treturn true\n\t}\n\tif op == admission.Update && utilfeature.DefaultFeatureGate.Enabled(k8sfeatures.ExpandPersistentVolumes) {\n\t\tinitialized, err := initialization.IsObjectInitialized(a.GetObject())\n\t\tif err != nil {"
  },
  {
    "id" : "9dbad5e5-7077-49fd-99a8-a2784c231b2c",
    "prId" : 34554,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34554#pullrequestreview-11638986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65df2164-60d2-4381-ae4e-d92f3dcd6a6d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "give an example of what the overall string will look like.",
        "createdAt" : "2016-12-06T17:34:13Z",
        "updatedAt" : "2016-12-09T18:27:15Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "459a7a05f18bc242e9e4c756102d53086651354a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@}\n\n// storageClassSuffix is the suffix to the qualified portion of storage class resource name.\n// For example, if you want to quota storage by storage class, you would have a declaration\n// that follows <storage-class>.storageclass.storage.k8s.io/<resource>."
  },
  {
    "id" : "c911c1e2-6786-4bdb-8c99-79fcfcf3dbc1",
    "prId" : 34554,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34554#pullrequestreview-11864987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5709c3a-4d30-46b2-9748-f6b95b794241",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Just to make sure I'm following the logic correctly.  We're called here with `gold.storage` and `bronze.storage` and we match both.  Later, `Usage` is called, but we only return `bronze.storage`, but there won't be any failure due to no value for `gold.storage`?  ",
        "createdAt" : "2016-12-07T14:39:58Z",
        "updatedAt" : "2016-12-09T18:27:15Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "4b4e136c-232c-4cd6-85e3-668f880273e3",
        "parentId" : "a5709c3a-4d30-46b2-9748-f6b95b794241",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "correct.  this method just says this evaluator knows how to track these resources in a quota.  the constraint check is what is responsible for saying we quota gold and not bronze so don't error if the pvc is a bronze item.",
        "createdAt" : "2016-12-07T18:29:36Z",
        "updatedAt" : "2016-12-09T18:27:15Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "459a7a05f18bc242e9e4c756102d53086651354a",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +150,154 @@\n// MatchingResources takes the input specified list of resources and returns the set of resources it matches.\nfunc (p *pvcEvaluator) MatchingResources(items []api.ResourceName) []api.ResourceName {\n\tresult := []api.ResourceName{}\n\tfor _, item := range items {"
  },
  {
    "id" : "0321f98a-4caa-412f-b2fd-a3a60ee9a8d8",
    "prId" : 30330,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a8599df-18f0-4605-9446-93ce031d332b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm not seeing where this is happening.  Isn't the usage func just a hardcoded count?\n",
        "createdAt" : "2016-08-22T18:23:14Z",
        "updatedAt" : "2016-08-22T18:23:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "166237a0-94f5-4c99-b7b4-863cb9465020",
        "parentId" : "0a8599df-18f0-4605-9446-93ce031d332b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'm not seeing where this is happening. Isn't the usage func just a hardcoded count?\n\nnm, I see it.\n",
        "createdAt" : "2016-08-22T18:24:21Z",
        "updatedAt" : "2016-08-22T18:24:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f40c1a709750966ac651199bd2f178569a686b83",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +65,69 @@\n// PersistentVolumeClaimConstraintsFunc verifies that all required resources are present on the claim\n// In addition, it validates that the resources are valid (i.e. requests < limits)\nfunc PersistentVolumeClaimConstraintsFunc(required []api.ResourceName, object runtime.Object) error {\n\tpvc, ok := object.(*api.PersistentVolumeClaim)"
  },
  {
    "id" : "238db8a5-7c66-4af1-a378-c88138b1e460",
    "prId" : 28636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b10270-a9de-452f-a6ef-3115e2a18504",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "shouldn't this be `resource.MustParse(\"0\")` ?\n",
        "createdAt" : "2016-07-27T20:21:34Z",
        "updatedAt" : "2016-07-27T20:21:34Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "882e3c2f-0dec-4d82-b9fe-c76e1242f374",
        "parentId" : "f7b10270-a9de-452f-a6ef-3115e2a18504",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "no - a pvc counts as 1 pvc always\n",
        "createdAt" : "2016-07-27T20:30:13Z",
        "updatedAt" : "2016-07-27T20:30:39Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "a9ce2a2c-e3de-4e51-84a3-7da387d5825b",
        "parentId" : "f7b10270-a9de-452f-a6ef-3115e2a18504",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "nevermind, i totally failed at reading there.\n",
        "createdAt" : "2016-07-27T20:31:07Z",
        "updatedAt" : "2016-07-27T20:31:08Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "09bac89aff5ab502a57d3a7d49fed5d767871903",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +53,57 @@\t}\n\tresult := api.ResourceList{}\n\tresult[api.ResourcePersistentVolumeClaims] = resource.MustParse(\"1\")\n\tif request, found := pvc.Spec.Resources.Requests[api.ResourceStorage]; found {\n\t\tresult[api.ResourceRequestsStorage] = request"
  }
]