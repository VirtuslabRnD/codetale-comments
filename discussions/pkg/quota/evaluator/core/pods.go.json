[
  {
    "id" : "f506fd0e-d983-4bb4-a53c-9c1c1a7a607a",
    "prId" : 57963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57963#pullrequestreview-124978771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65d34109-76cb-45a3-b8a5-f9ff2d97c766",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "if the new syntax matches an exists operation on the old syntax, the other cases probably need to be updated at a future time.  if you use the new syntax, we lack some protection with what invalidScopePairs did in validation to find conflicting scopes.  if validation ensured that exists operator was only valid for the other types, i think this would keep the code logically consistent.  WDYT?",
        "createdAt" : "2018-05-31T04:41:28Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "0ae85f4b-2786-45f5-ae18-ff5c6a5df3c5",
        "parentId" : "65d34109-76cb-45a3-b8a5-f9ff2d97c766",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "where other types == other scopes (duration and qos related)",
        "createdAt" : "2018-05-31T04:41:55Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "09d5c3cb-9e5b-48fa-8261-ecd1fd5491cb",
        "parentId" : "65d34109-76cb-45a3-b8a5-f9ff2d97c766",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "I think you meant \"if the validation ensured that for other types only exists operator was valid, ...\" ?",
        "createdAt" : "2018-05-31T06:48:38Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "eb5b116d-f252-481a-9ced-a3af26cf5fed",
        "parentId" : "65d34109-76cb-45a3-b8a5-f9ff2d97c766",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "updated `validateScopeSelector` in validation.go to ensure that if \"other scopes\" are being expressed in quota object using scope selector, any existing validation logic is not missed.",
        "createdAt" : "2018-05-31T07:32:59Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "d0f4c17b-9573-4acf-b0e8-7a2789621d7d",
        "parentId" : "65d34109-76cb-45a3-b8a5-f9ff2d97c766",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "correct, this looks good now.",
        "createdAt" : "2018-05-31T21:18:40Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe6412c70ad1c658cb37013d2300f1707fd290",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +307,311 @@\t\treturn false, err\n\t}\n\tswitch selector.ScopeName {\n\tcase api.ResourceQuotaScopeTerminating:\n\t\treturn isTerminating(pod), nil"
  },
  {
    "id" : "609c3aa7-6f1b-4699-a13f-f25fe33fcb11",
    "prId" : 54320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54320#pullrequestreview-71673155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2efd161-e117-4b1c-a043-48ccb5f3621c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Explain the change in more detail please.  Why now?",
        "createdAt" : "2017-10-24T15:58:59Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fb64a58f-5b0a-495d-8d5c-8b1e20b2dddd",
        "parentId" : "e2efd161-e117-4b1c-a043-48ccb5f3621c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "added more text.\r\n\r\n\"pods\" == pods that are not in a terminal state (i.e. phase is not Succeeded or Failed)\r\n\"count/pods\" == all the pods independent of state.",
        "createdAt" : "2017-10-24T21:07:51Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9765bcebe77ce4e62dcbdacaa5bb0910220cef0",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +260,264 @@\t}\n\n\t// always quota the object count (even if the pod is end of life)\n\t// object count quotas track all objects that are in storage.\n\t// where \"pods\" tracks all pods that have not reached a terminal state,"
  },
  {
    "id" : "4eb57595-fa4e-4695-97a8-b123a44be3b5",
    "prId" : 54292,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54292#pullrequestreview-74982771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "575faa36-2af9-410c-b824-24427df46474",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i would just quota requests.",
        "createdAt" : "2017-11-08T03:43:27Z",
        "updatedAt" : "2017-11-13T01:38:04Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1029b5477052dbacc229d716a15419315d917bf5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +62,66 @@// potential extended reources with specific prefix) managed by quota associated with pods.\nvar podResourcePrefixes = []string{\n\tapi.ResourceHugePagesPrefix,\n\tapi.ResourceRequestsHugePagesPrefix,\n}"
  },
  {
    "id" : "6a452e73-53aa-4b1b-8649-a9051c20f7f3",
    "prId" : 51749,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51749#pullrequestreview-60260318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c63d5c8-2ec0-4fee-ba98-3aa066509755",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Perhaps the BeforeUpdate/BeforeCreate should fail the request if feature gate is disabled and initializers are set, instead of repairing the request. Then we don't have to deal with feature gate here. Admission is called before BeforeUpdate/BeforeCreate, it's hard to reasoning the correct admission behavior if the object might get changed later.",
        "createdAt" : "2017-09-01T23:31:50Z",
        "updatedAt" : "2017-09-06T17:21:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f170e69a-a90e-4d6a-8ded-c64b7851bc9f",
        "parentId" : "9c63d5c8-2ec0-4fee-ba98-3aa066509755",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Feature gate off should behave as if those fields don't exist. We could drop pre-admission, I suppose",
        "createdAt" : "2017-09-01T23:35:28Z",
        "updatedAt" : "2017-09-06T17:21:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1d33af464fd7805d8b29c74c1ce56d816c8eed",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +266,270 @@\t}\n\t// Only charge pod count for uninitialized pod.\n\tif utilfeature.DefaultFeatureGate.Enabled(features.Initializers) {\n\t\tif !initialization.IsInitialized(pod.Initializers) {\n\t\t\tresult := api.ResourceList{}"
  },
  {
    "id" : "53ad76d0-c30c-4a27-81ea-545a3cfe117f",
    "prId" : 51174,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51174#pullrequestreview-58795102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18960f2f-66a2-4157-9aa0-22391cf0fba6",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i have a goal to enable the following:\r\nhttps://github.com/kubernetes/kubernetes/pull/51370\r\n\r\nwhere do you recommend i best layer in the referenced goal with the need to support initializers?",
        "createdAt" : "2017-08-26T06:06:39Z",
        "updatedAt" : "2017-08-26T06:07:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "4928c8d1bf485a10c61855156bc4342002b3ed93",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +134,138 @@\n// Handles returns true of the evaluator should handle the specified attributes.\nfunc (p *podEvaluator) Handles(a admission.Attributes) bool {\n\top := a.GetOperation()\n\tif op == admission.Create {"
  },
  {
    "id" : "f2416168-aa9e-4af8-bc9b-799af5eeda15",
    "prId" : 49610,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49610#pullrequestreview-58776626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0ce3d4-1f09-46a4-9489-a7880ee3ef91",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "why there are two ResourceLimitsEphemeralStorage",
        "createdAt" : "2017-08-25T17:10:32Z",
        "updatedAt" : "2017-08-26T06:16:21Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "f5ebee00-6d73-4217-8d0e-33881533a2a8",
        "parentId" : "5b0ce3d4-1f09-46a4-9489-a7880ee3ef91",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "Sorry, my bad",
        "createdAt" : "2017-08-25T22:18:03Z",
        "updatedAt" : "2017-08-26T06:16:21Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      },
      {
        "id" : "e6ab832e-4c53-4701-b2d4-dc978cb255d1",
        "parentId" : "5b0ce3d4-1f09-46a4-9489-a7880ee3ef91",
        "authorId" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "body" : "Modified",
        "createdAt" : "2017-08-25T22:26:41Z",
        "updatedAt" : "2017-08-26T06:16:21Z",
        "lastEditedBy" : "cf088828-7f69-4b6e-8956-1842c94daa02",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc393e3f8b839672ea72e729f08697f6a06c73c4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +49,53 @@\tapi.ResourceLimitsCPU,\n\tapi.ResourceLimitsMemory,\n\tapi.ResourceLimitsEphemeralStorage,\n\tapi.ResourcePods,\n}"
  },
  {
    "id" : "bb0f81a1-a3ab-4864-ada7-fca3c1450d0b",
    "prId" : 46542,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46542#pullrequestreview-62222100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "669b5a85-3869-4a20-bccd-b3f6e966abec",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "pods have conditions now, right?  Since you're rewriting the function anyway, can we update to conditions.",
        "createdAt" : "2017-07-05T12:59:05Z",
        "updatedAt" : "2017-09-11T17:33:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7ff4e524-f50e-4595-b725-a0dc33b8e419",
        "parentId" : "669b5a85-3869-4a20-bccd-b3f6e966abec",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "the pod Phase is still the state machine we must follow to know that a pod has reached the end of its life.  the PodCondition is not sufficient for that need.",
        "createdAt" : "2017-08-25T21:26:56Z",
        "updatedAt" : "2017-09-11T17:33:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "3c21ebfe-d8bf-4c8e-bd4e-c1500b5656ba",
        "parentId" : "669b5a85-3869-4a20-bccd-b3f6e966abec",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> the pod Phase is still the state machine we must follow to know that a pod has reached the end of its life. the PodCondition is not sufficient for that need.\r\n\r\nThis is really weird.  It's been over two years since we decided that conditions were a better choice than phases.  When is the kubelet going to update?",
        "createdAt" : "2017-08-28T13:18:29Z",
        "updatedAt" : "2017-09-11T17:33:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "316766a7-1e4f-408d-822c-7885e4163df3",
        "parentId" : "669b5a85-3869-4a20-bccd-b3f6e966abec",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Never because of backwards API compatibility.",
        "createdAt" : "2017-09-08T14:43:42Z",
        "updatedAt" : "2017-09-11T17:33:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ab99bf03-5839-49a7-a328-28b6ced6302c",
        "parentId" : "669b5a85-3869-4a20-bccd-b3f6e966abec",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Never because of backwards API compatibility.\r\n\r\nEh, it only skews two releases.  I'd rather have all our code keep as current as compatibility allows so developers aren't trying to remember: well these conditions match these phases.  Cruft like this is super hard to deal with in controllers and utilities.",
        "createdAt" : "2017-09-12T18:20:02Z",
        "updatedAt" : "2017-09-12T18:20:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "da01c6d3a25e3dc9ab0626da375bfbe5958c058b",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +317,321 @@func QuotaPod(pod *api.Pod, clock clock.Clock) bool {\n\t// if pod is terminal, ignore it for quota\n\tif api.PodFailed == pod.Status.Phase || api.PodSucceeded == pod.Status.Phase {\n\t\treturn false\n\t}"
  },
  {
    "id" : "5664b2fc-f7e5-4660-8704-b6c511fb69b9",
    "prId" : 46542,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46542#pullrequestreview-61527729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314a95ad-0494-4c06-a8f3-8550ffc94aca",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a comment here about the fact that even though the cluster may have drifting clocks, quota makes a reasonable effort to balance cluster needs against user needs (user doesn't control clocks, and at worst a small drift in clicks will only slightly impact quota)",
        "createdAt" : "2017-09-08T14:46:02Z",
        "updatedAt" : "2017-09-11T17:33:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "da01c6d3a25e3dc9ab0626da375bfbe5958c058b",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +321,325 @@\t}\n\t// deleted pods that should be gone should not be charged to user quota.\n\t// this can happen if a node is lost, and the kubelet is never able to confirm deletion.\n\t// even though the cluster may have drifting clocks, quota makes a reasonable effort\n\t// to balance cluster needs against user needs.  user's do not control clocks,"
  },
  {
    "id" : "f4afb86c-e8c0-4527-a474-b30038297953",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-8926443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The outcome object is a lot harder to read.  I'm kind of concerned that this change is just moving  the complexity we have in conversion around in some other spot.  It's possible these usage functions should only work on a single type each and we should register different ones for different internal types.  Having two types in the same function seems prone to error and drift, and makes quota much more complex.\n\nWhat other options do we have for these methods?  @derekwaynecarr ?\n",
        "createdAt" : "2016-11-15T21:53:57Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c7515bc6-611f-4bc0-9b8b-03226cc7ef5d",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "cc @vishh \n",
        "createdAt" : "2016-11-15T22:26:08Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "0db90ad8-af19-4a14-b020-d4f659622be5",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I can create a v1,pod evaluator, that's easier to reason about, but it also duplicates much code, will be hard to maintain.\n",
        "createdAt" : "2016-11-16T04:20:54Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "5aeed2c3-f69b-4bda-881c-dfeda44cfafd",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So changing admission to be versioned is out of scope for now (for lots of reasons).\n\nI'm primarily concerned that the function is now much harder to read than it was before.  Readability of this code is crucial.  The maintenance of the switch is the problem.  A better path may just to do:\n\n```\nfunc PodUsageFunc(obj runtime.Object) api.ResourceList {\n  switch t := obj.(type) {\n  case *api.Pod:\n    converted := &v1.Pod{}\n    if err := v1.Convert_api_Pod_to_v1_Pod(...); err != nil {\n      panic(\"impossible conversion\")\n    }\n    obj = converted\n  }\n  // rest of method, v1 adapted\n  ...\n}\n```\n\nEating errors here is terrifying because this is a security / control code path.  That would be simplest and ensures that the code is exactly the same.  Admission can be slightly slower than it is today.\n",
        "createdAt" : "2016-11-16T21:02:59Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "459a8aed-7d12-47ae-a757-cda5d17dc13f",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Actually we need the conversion the other way around (v1 to api), because all the ResourceList logic is defined on api.ResourceList. So it's the efficiency of the resoucequota controller that gets affected. Is that acceptable?\n",
        "createdAt" : "2016-11-16T21:13:10Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "45314b91-0ad0-4e9e-8a08-f410d24fee93",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Catching up here, I refactored evaluator some in https://github.com/kubernetes/kubernetes/pull/34554 and so i am trying to mentally adjust some... I think if I understand Clayton's comment, in admission, we will always convert to v1, but in the controller side, there would be no conversion, but the core evaluators would then just forever be v1 based.\n",
        "createdAt" : "2016-11-16T21:41:45Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "401bfded-509e-4d5e-b8d8-e98e895acabb",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "ok, after looking at the code change, I prefer Clayton's recommendation in pseudo code above.\n",
        "createdAt" : "2016-11-16T21:42:19Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "af73a645-eda1-4b0f-b650-9df71ae101fa",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Do you want to migrate all the ResoureList utility functions to v1? If not, the conversion will be the other way around.\n",
        "createdAt" : "2016-11-16T22:22:31Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ec3f41d0-6453-4a58-b0f2-9bca995e7eec",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Or the other way around (v1 -> internal).  I'm fine with either, my recommendation was mostly based on the fact that admission does update less often (so internal) than the controllers recalculate usage, so avoiding some incremental effort.  I'd say whatever is less code and complexity for the rest of the change.\n",
        "createdAt" : "2016-11-16T22:25:58Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9654fe8a-9cb8-40c7-893f-3c14853eb2c6",
        "parentId" : "a307bd62-d090-4254-8df1-ff541f569bdb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : ">  the fact that admission does update less often (so internal) than the controllers recalculate usage,\n\nYeah, I thought of that, too. Then I thought doing the conversion for resourcequota controller is no worse than today, so I found my peace.\n",
        "createdAt" : "2016-11-16T22:47:22Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +181,185 @@\n// PodUsageFunc knows how to measure usage associated with pods\nfunc PodUsageFunc(obj runtime.Object) api.ResourceList {\n\tpod := toInternalPodOrDie(obj)\n\t// by convention, we do not quota pods that have reached an end-of-life state"
  },
  {
    "id" : "da98c86d-3a9b-4907-8fd0-0c348946c08a",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-9571784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee4d2d71-41ea-4dcf-a3c0-86c78071e933",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "same comment here as the future potential for skew is greater on if we should panic instead of return no usage.  if we are calling the pod evaluator to know its usage, and it is given a pod object it cannot understand, we should probably panic.",
        "createdAt" : "2016-11-21T21:48:32Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "a9d08ff5-b395-400d-9403-ac0ed7613cb6",
        "parentId" : "ee4d2d71-41ea-4dcf-a3c0-86c78071e933",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Done.",
        "createdAt" : "2016-11-22T00:11:18Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +174,178 @@\tcase *api.Pod:\n\t\tpod = t\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"expect *api.Pod or *v1.Pod, got %v\", t))\n\t}"
  },
  {
    "id" : "ac2b14b9-eb3b-4427-884d-945ebfe47914",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-9568361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee1a0be7-2edf-469f-beff-7d0916acda19",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i would prefer we didnt duplicate this logic for now.  is there a reason we cannot just call the existing QuotaPod function since it looks like we convert in most every instance to the internal format?",
        "createdAt" : "2016-11-21T21:49:59Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "b34d88f5-402a-4d49-a8d6-047daf36fb71",
        "parentId" : "ee1a0be7-2edf-469f-beff-7d0916acda19",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This function is a one-liner, I feel it's more manageable to just duplicate it than doing a type switch, like what we did for PodUsageFunc.",
        "createdAt" : "2016-11-21T23:41:20Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +241,245 @@// QuotaV1Pod returns true if the pod is eligible to track against a quota\n// if it's not in a terminal state according to its phase.\nfunc QuotaV1Pod(pod *v1.Pod) bool {\n\treturn !(v1.PodFailed == pod.Status.Phase || v1.PodSucceeded == pod.Status.Phase)\n}"
  },
  {
    "id" : "b69f2a69-7cb8-4578-a7ef-93229ae2270c",
    "prId" : 34841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34841#pullrequestreview-4682716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07f31e38-f309-46f0-8cc1-7bc7bfc668de",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You can write this generically with `meta.ListAccessor` can't you?\n",
        "createdAt" : "2016-10-17T17:51:20Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "901e6f5d-3c6e-46b3-9b2f-b0e044804a22",
        "parentId" : "07f31e38-f309-46f0-8cc1-7bc7bfc668de",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I looked for a way to write this generically, and spoke with @smarterclayton on it.  it's possible i am missing something, but he had directed me down this path.  Is there something obvious I am missing?\n",
        "createdAt" : "2016-10-17T20:32:04Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "570db078-417d-4098-bed1-3203b9cf65b4",
        "parentId" : "07f31e38-f309-46f0-8cc1-7bc7bfc668de",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> derekwaynecarr 16 hours ago Kubernetes member\n> I looked for a way to write this generically, and spoke with @smarterclayton on it. it's possible i am missing something, but he had directed me down this path. Is there something obvious I am missing?\n\nI miss java so much.  Go has no equivalent for `[]<? extends runtime.Object>`, does it?\n",
        "createdAt" : "2016-10-18T12:46:48Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "641172f7-adcd-4cba-be3e-e107ee85b6fa",
        "parentId" : "07f31e38-f309-46f0-8cc1-7bc7bfc668de",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Didn't know java can be missed.\n",
        "createdAt" : "2016-10-18T12:51:23Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e0951f85-72b2-49a2-be3f-e7ea8d149a72",
        "parentId" : "07f31e38-f309-46f0-8cc1-7bc7bfc668de",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i see no way around the for-loop, and yes, this made me miss java for a brief moment before realizing that java also has problems ;-)\n",
        "createdAt" : "2016-10-18T14:36:46Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bcb0576365b24a10adb3758cead8ffd0082493e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@\t// unfortunately, dynamic client works with Unstructured objects, and when we calculate Usage, we require\n\t// structured objects.\n\treturn func(namespace string, options api.ListOptions) ([]runtime.Object, error) {\n\t\titemList, err := kubeClient.Core().Pods(namespace).List(options)\n\t\tif err != nil {"
  },
  {
    "id" : "979f7329-21f5-4f1c-bd98-fdb41f7fc9fe",
    "prId" : 34841,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34841#pullrequestreview-5299708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "595d3ee8-1936-48dc-b0f9-6ff3ccab1c74",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This is `ClientPool.ClientForGroupVersionResource.Resource.List`, then `api/meta.listaccessor` to avoid having one of these for every type, rigth?\n",
        "createdAt" : "2016-10-21T18:10:29Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c7d432e7-59bf-4105-9991-e1a45482627c",
        "parentId" : "595d3ee8-1936-48dc-b0f9-6ff3ccab1c74",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i think this is problematic.  we expect to be able to cast the runtime.Object returned to an actual *api.Pod, etc. later in the code.  using the dynamic client, I thought everything is an UnstructuredLIst full of Unstructured items?\n",
        "createdAt" : "2016-10-21T18:25:14Z",
        "updatedAt" : "2016-10-31T15:38:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bcb0576365b24a10adb3758cead8ffd0082493e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@\t// structured objects.\n\treturn func(namespace string, options api.ListOptions) ([]runtime.Object, error) {\n\t\titemList, err := kubeClient.Core().Pods(namespace).List(options)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "aae2bcdd-d94f-4e34-9a20-cd766c8a281f",
    "prId" : 29588,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9e5c82d-2d1a-4772-a2ef-6b0065f05ec2",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Am i reading this right @smarterclayton...We add up say ResourceRequestsCPU for all the containers and compare with each init container? (instead of adding all the initcontainers ?)\n\nThanks,\nDims\n",
        "createdAt" : "2016-07-27T01:11:38Z",
        "updatedAt" : "2016-07-27T19:44:27Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "2f1c5cef-10fd-41b4-82e4-c2de6cd46ab4",
        "parentId" : "b9e5c82d-2d1a-4772-a2ef-6b0065f05ec2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Init containers are run one at a time, so the effective pod\nlimit/request is the greater of the highest init container and the sum\nof normal containers.\n",
        "createdAt" : "2016-07-27T01:39:31Z",
        "updatedAt" : "2016-07-27T19:44:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7bf1f66a-9b2a-4052-a543-bbd048538eb8",
        "parentId" : "b9e5c82d-2d1a-4772-a2ef-6b0065f05ec2",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Gotcha. Thanks for the explanation @smarterclayton \n",
        "createdAt" : "2016-07-27T01:55:09Z",
        "updatedAt" : "2016-07-27T19:44:27Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "f027a23c-b832-479a-a4fb-f2be611e756e",
        "parentId" : "b9e5c82d-2d1a-4772-a2ef-6b0065f05ec2",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "it probably would help future authors in the code to have a comment to that effect.\n",
        "createdAt" : "2016-07-27T18:42:29Z",
        "updatedAt" : "2016-07-27T19:44:27Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "958d78cb105cdb45a18188c72792ed0763cb8b4c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +166,170 @@\t// the effective usage for both requests and limits.\n\tfor i := range pod.Spec.InitContainers {\n\t\trequests = quota.Max(requests, pod.Spec.InitContainers[i].Resources.Requests)\n\t\tlimits = quota.Max(limits, pod.Spec.InitContainers[i].Resources.Limits)\n\t}"
  },
  {
    "id" : "4dee7951-1e44-40f1-ba57-419b0b517992",
    "prId" : 26969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60f23839-a9d3-499d-9f23-f3245f623922",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Newbie question : GetPodQos seems to return either Burstable or Guaranteed or BestEffort. So here we look for an exact match for util.BestEffort? (in other words, does ResourceQuotaScopeBestEffort, should it be matched with both Guaranteed and BestEffort)?\n",
        "createdAt" : "2016-06-07T17:47:57Z",
        "updatedAt" : "2016-06-07T17:47:57Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "da724bf5-2b82-433b-957f-228a185c8c30",
        "parentId" : "60f23839-a9d3-499d-9f23-f3245f623922",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "https://github.com/kubernetes/kubernetes.github.io/pull/622\n\nThis is an advanced feature of resourcequota.  See step 5 in PR above that discusses scopes filtering the set of resources a quota tracks in an example.\n\nFull doc on scopes and quota:\nhttps://github.com/kubernetes/kubernetes.github.io/pull/620\n",
        "createdAt" : "2016-06-07T19:23:58Z",
        "updatedAt" : "2016-06-07T19:23:58Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "51a67da5-8ab8-42cd-a3de-8264ef41eeb6",
        "parentId" : "60f23839-a9d3-499d-9f23-f3245f623922",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Thanks @derekwaynecarr \n",
        "createdAt" : "2016-06-07T19:56:36Z",
        "updatedAt" : "2016-06-07T19:56:37Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f796cc335d715efffba6d369fd51f6b1df469de7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +173,177 @@\nfunc isBestEffort(pod *api.Pod) bool {\n\treturn util.GetPodQos(pod) == util.BestEffort\n}\n"
  },
  {
    "id" : "65be8cea-364f-4526-a739-5da5ab71e2a9",
    "prId" : 20446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "316e9f0b-323e-489d-8275-bf996c6194e8",
        "parentId" : null,
        "authorId" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "body" : "I believe `GetFuncByNamespace` should be specified as well`.\n",
        "createdAt" : "2016-02-12T09:31:49Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "tags" : [
        ]
      },
      {
        "id" : "404d1f6a-bdc0-4e57-8b2f-5ef87ffe5d22",
        "parentId" : "316e9f0b-323e-489d-8275-bf996c6194e8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "added.  was not a huge concern yet because resources are not updatable yet in kube.\n",
        "createdAt" : "2016-02-16T20:52:42Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "95df07aa9d4b36dc67458be7416f46cb2f3f72d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@\t}\n\tallResources := append(computeResources, api.ResourcePods)\n\treturn &generic.GenericEvaluator{\n\t\tName:              \"Evaluator.Pod\",\n\t\tInternalGroupKind: api.Kind(\"Pod\"),"
  }
]