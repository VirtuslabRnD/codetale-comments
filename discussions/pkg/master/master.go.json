[
  {
    "id" : "914705d7-278f-4b9a-903e-413c746be71f",
    "prId" : 83297,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83297#pullrequestreview-297771204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d49c3ea9-57b9-4388-816c-72be50005524",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Don't unexport this ",
        "createdAt" : "2019-10-05T02:30:03Z",
        "updatedAt" : "2019-10-05T13:43:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed8767cdedc12f1b42233c4e88950be0e7017b1e",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +405,409 @@\treturn m, nil\n}\n\n// InstallLegacyAPI will install the legacy APIs for the restStorageProviders if they are enabled.\nfunc (m *Master) InstallLegacyAPI(c *completedConfig, restOptionsGetter generic.RESTOptionsGetter, legacyRESTStorageProvider corerest.LegacyRESTStorageProvider) error {"
  },
  {
    "id" : "545b66df-0ff5-456e-95de-606cca0c13b6",
    "prId" : 80952,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80952#pullrequestreview-272596956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35eb3be3-5e3e-4d3a-b2bc-7720c9eac332",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "InstallLegacyAPI above should return an error as well and stop fataling internally",
        "createdAt" : "2019-08-08T14:07:30Z",
        "updatedAt" : "2019-08-12T20:55:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "87b2a3129b57adf8872c4cc0ddc43646c23fe9b3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +363,367 @@\t\tadmissionregistrationrest.RESTStorageProvider{},\n\t\teventsrest.RESTStorageProvider{TTL: c.ExtraConfig.EventTTL},\n\t}\n\tif err := m.InstallAPIs(c.ExtraConfig.APIResourceConfigSource, c.GenericConfig.RESTOptionsGetter, restStorageProviders...); err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "7c321de6-f107-4dae-8d15-bd93edea502b",
    "prId" : 74418,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74418#pullrequestreview-209614817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d0012e1-70ec-4049-8670-da7ab1fc3d1e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Specify a time for removal (usually 3 releases)",
        "createdAt" : "2019-02-23T14:51:11Z",
        "updatedAt" : "2019-02-24T20:29:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b1de85a4-4baa-42ea-837c-6890f1fdc46f",
        "parentId" : "0d0012e1-70ec-4049-8670-da7ab1fc3d1e",
        "authorId" : "a472aa4a-c4f7-4692-bc21-708257a1dacc",
        "body" : "This change is part of the KEP [Kubernetes Metrics Overhaul](https://github.com/kubernetes/enhancements/blob/master/keps/sig-instrumentation/0031-kubernetes-metrics-overhaul.md#deprecation-plan) . We plan to mark all deprecated metrics in 1.14, and remove them in 1.15.\r\nThe pattern \"(Deprecated)\" in front of the metric help text is consistent with other changes.\r\nDoes it sound good ?\r\n/cc @brancz ",
        "createdAt" : "2019-02-25T01:16:31Z",
        "updatedAt" : "2019-02-25T01:16:31Z",
        "lastEditedBy" : "a472aa4a-c4f7-4692-bc21-708257a1dacc",
        "tags" : [
        ]
      },
      {
        "id" : "ff4794d8-d6c6-4553-927f-bc1bbbf48e1b",
        "parentId" : "0d0012e1-70ec-4049-8670-da7ab1fc3d1e",
        "authorId" : "4108cff4-d61c-4717-862b-6c3be3b73be2",
        "body" : "There are no guarantees around metrics at all right now, so technically we can break as much as we want, but we decided we want at least 1 release as transition period.",
        "createdAt" : "2019-02-25T08:15:35Z",
        "updatedAt" : "2019-02-25T08:15:35Z",
        "lastEditedBy" : "4108cff4-d61c-4717-862b-6c3be3b73be2",
        "tags" : [
        ]
      },
      {
        "id" : "28c1a512-241c-4608-9e5a-86f511a872ae",
        "parentId" : "0d0012e1-70ec-4049-8670-da7ab1fc3d1e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "for visibility, asked for an ack on that position [from sig-instrumentation and API reviewers](https://groups.google.com//forum/#!topic/kubernetes-api-reviewers/kdxON6-TtNE). can proceed once there's agreement there",
        "createdAt" : "2019-03-01T14:42:45Z",
        "updatedAt" : "2019-03-01T14:42:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "489dd27268431da5fc2fde874d456416bf9bd777",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +393,397 @@\tprometheus.NewGaugeFunc(prometheus.GaugeOpts{\n\t\tName: \"apiserver_proxy_tunnel_sync_latency_secs\",\n\t\tHelp: \"(Deprecated) The time since the last successful synchronization of the SSH tunnels for proxy requests.\",\n\t}, func() float64 { return float64(nodeTunneler.SecondsSinceSync()) })\n}"
  },
  {
    "id" : "7490f615-5602-4d71-8b68-1227d3bb2fa0",
    "prId" : 70409,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70409#pullrequestreview-172521515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d264b1e-787e-4c67-b95a-60fe15a86c4b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "this is not the same as glog fataling",
        "createdAt" : "2018-11-05T20:51:46Z",
        "updatedAt" : "2018-11-05T20:51:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5de3c0fd-a3ee-4682-b0bf-b0d8e41992cc",
        "parentId" : "1d264b1e-787e-4c67-b95a-60fe15a86c4b",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Should we remedy this distinction in the klog refactor?\r\n\r\nEdit: on second thoughts, we should clarify the docs for Fatalf in klog, to make clear that it does not panic, but calls os.Exit (assuming we keep the same semantics), and that you can't `recover` from a Fatalf",
        "createdAt" : "2018-11-07T14:44:38Z",
        "updatedAt" : "2018-11-07T14:47:02Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c33a913de0c63ca9ab59322b1bce78403c020fc",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +214,218 @@\nfunc (c *Config) createLeaseReconciler() reconcilers.EndpointReconciler {\n\tendpointClient := corev1client.NewForConfigOrDie(c.GenericConfig.LoopbackClientConfig)\n\tttl := c.ExtraConfig.MasterEndpointReconcileTTL\n\tconfig, err := c.ExtraConfig.StorageFactory.NewConfig(api.Resource(\"apiServerIPInfo\"))"
  },
  {
    "id" : "c34cd651-386d-4a58-b204-2bc4db4c1d55",
    "prId" : 53821,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53821#pullrequestreview-70317116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd8a3a67-534b-4a51-8ed6-10d6375826e6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`bootstrapController.Name` would be better.",
        "createdAt" : "2017-10-18T16:32:18Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f511300d-a170-43df-916c-148a427fb62c",
        "parentId" : "fd8a3a67-534b-4a51-8ed6-10d6375826e6",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Done",
        "createdAt" : "2017-10-18T18:45:39Z",
        "updatedAt" : "2017-10-19T12:08:47Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b085ad4ad0c5d26466667a32a28046ffacd7f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +373,377 @@\n\tif c.ExtraConfig.EnableCoreControllers {\n\t\tcontrollerName := \"bootstrap-controller\"\n\t\tcoreClient := coreclient.NewForConfigOrDie(c.GenericConfig.LoopbackClientConfig)\n\t\tbootstrapController := c.NewBootstrapController(legacyRESTStorage, coreClient, coreClient)"
  },
  {
    "id" : "79d74886-048f-4f4a-a091-f02bab12e2d3",
    "prId" : 53458,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53458#pullrequestreview-68580425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d49c99-e7ca-40c2-a002-854f4baea03b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Uggggggh.  All of this default-setting in multiple places is horrific.  It's been a long time since I touched this, but could we find a way to force callers to pass valid values?",
        "createdAt" : "2017-10-11T05:59:11Z",
        "updatedAt" : "2017-10-13T13:15:02Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "1dda34b9-cd30-43bf-9a51-9b2a22383e35",
        "parentId" : "68d49c99-e7ca-40c2-a002-854f4baea03b",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "@thockin yes we can, in a follow up PR. Want to keep it as simple as i can.",
        "createdAt" : "2017-10-11T12:06:25Z",
        "updatedAt" : "2017-10-13T13:15:02Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "eda7fbd16a882998839d5d7c6fbf12330e5ce4fb",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +266,270 @@\t\t// but then that breaks the strict nestedness of ServiceType.\n\t\t// Review post-v1\n\t\tc.ExtraConfig.ServiceNodePortRange = kubeoptions.DefaultServiceNodePortRange\n\t\tglog.Infof(\"Node port range unspecified. Defaulting to %v.\", c.ExtraConfig.ServiceNodePortRange)\n\t}"
  },
  {
    "id" : "3515fd66-e2d3-4c52-8346-6ed6f3c25577",
    "prId" : 51900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51900#pullrequestreview-60572282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f51b1a7-230b-4c25-8235-2732f2b29d8e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This is all so we can trick the golang type system into doing something useful for us?",
        "createdAt" : "2017-09-05T11:50:05Z",
        "updatedAt" : "2017-09-08T14:13:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbd310dbc7312fcae4267dd64326a1e7b4a0a8ae",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +147,151 @@type CompletedConfig struct {\n\t// Embed a private pointer that cannot be instantiated outside of this package.\n\t*completedConfig\n}\n"
  },
  {
    "id" : "622052eb-4b05-4e33-b2a9-1364890ee11b",
    "prId" : 48498,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48498#pullrequestreview-48142504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b64749fd-622b-45de-9ce5-deb35ff3f9f9",
        "parentId" : null,
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Are you going to remove `crdRESTOptionsGetter` in a later PR?",
        "createdAt" : "2017-07-05T17:35:15Z",
        "updatedAt" : "2017-07-05T17:35:28Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "4f7a722b-02af-4183-b79e-700b54491191",
        "parentId" : "b64749fd-622b-45de-9ce5-deb35ff3f9f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Are you going to remove crdRESTOptionsGetter in a later PR?\r\n\r\nYes.  I think the rest of changes ripple out to code we're keeping, so they'll need more careful review.",
        "createdAt" : "2017-07-05T18:39:43Z",
        "updatedAt" : "2017-07-05T18:39:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "254e71bfc62b749355b3e271404872b89323add3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +258,262 @@\t\tbatchrest.RESTStorageProvider{},\n\t\tcertificatesrest.RESTStorageProvider{},\n\t\t// TODO(enisoc): Remove crdRESTOptionsGetter input argument when TPR code is removed.\n\t\textensionsrest.RESTStorageProvider{},\n\t\tnetworkingrest.RESTStorageProvider{},"
  },
  {
    "id" : "d1d4a4a3-f165-4d6e-bf8a-4fd9a74708ad",
    "prId" : 46294,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46294#pullrequestreview-40395760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aacdd880-234c-4fdd-98a0-750fbf08ad95",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "we probably shouldn't enable this by default?",
        "createdAt" : "2017-05-25T21:06:49Z",
        "updatedAt" : "2017-05-26T07:14:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "de90022b-8403-427e-90a8-9f16d4839ec2",
        "parentId" : "aacdd880-234c-4fdd-98a0-750fbf08ad95",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Removed. I went to fix the scripts that forced me to enable it here.",
        "createdAt" : "2017-05-25T21:19:17Z",
        "updatedAt" : "2017-05-26T07:14:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "89e506c46a3a8007e943aac1e743608f6bbc148c",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +375,379 @@\tret.EnableVersions(\n\t\tapiv1.SchemeGroupVersion,\n\t\tadmissionregistrationv1alpha1.SchemeGroupVersion,\n\t\textensionsapiv1beta1.SchemeGroupVersion,\n\t\tbatchapiv1.SchemeGroupVersion,"
  },
  {
    "id" : "a0e6899a-1955-43bf-800a-f03574da42d3",
    "prId" : 41931,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41931#pullrequestreview-40387974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9eb3dc4-7558-40f7-a025-84fc04ae2389",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Was there any discussion on this? We shouldn't be turning alpha APIs on by default.\r\n\r\n@jessfraz @pwittrock ",
        "createdAt" : "2017-05-25T19:33:16Z",
        "updatedAt" : "2017-05-25T19:33:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fb65306e-1e3b-46af-94b2-7098ebf1f179",
        "parentId" : "e9eb3dc4-7558-40f7-a025-84fc04ae2389",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "/sub",
        "createdAt" : "2017-05-25T20:46:14Z",
        "updatedAt" : "2017-05-25T20:46:14Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc3166e2d7427725de968e93f68a11f20c27bad9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +375,379 @@\t\trbacv1beta1.SchemeGroupVersion,\n\t\trbacapi.SchemeGroupVersion,\n\t\tsettingsapi.SchemeGroupVersion,\n\t\tstorageapiv1beta1.SchemeGroupVersion,\n\t\tcertificatesapiv1beta1.SchemeGroupVersion,"
  },
  {
    "id" : "ce092503-320b-4ea8-9f4e-1cf58f190f49",
    "prId" : 39164,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39164#pullrequestreview-38441056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2cae232-f284-4458-94fd-c6deaeea00c5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@danwinship if this came after the `extensions` group, `kubectl get networkpolicy` should return the `extensions/v1beta1` version of NetworkPolicy objects. Is that not the case?",
        "createdAt" : "2017-05-15T19:23:51Z",
        "updatedAt" : "2017-05-28T14:11:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a89d98dd-5c21-48f2-8fcc-cb95dee195fb",
        "parentId" : "a2cae232-f284-4458-94fd-c6deaeea00c5",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "Just checked again; they come back as `networking.k8s.io/v1`. That's also true if I add an AddCohabitatingResources() call, regardless of which order I list the two resource types there... So maybe something else is wrong somewhere else? (I don't really understand all the reststorage stuff, and was relying on reviewers to tell me if I'd done anything wrong. See https://github.com/kubernetes/kubernetes/pull/39164#issuecomment-295334789)",
        "createdAt" : "2017-05-16T16:26:22Z",
        "updatedAt" : "2017-05-28T14:11:18Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "0923f860f1b9a05e9fbeeadc7345e0b0e6105040",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +256,260 @@\t\tcertificatesrest.RESTStorageProvider{},\n\t\textensionsrest.RESTStorageProvider{ResourceInterface: thirdparty.NewThirdPartyResourceServer(s, s.DiscoveryGroupManager, c.StorageFactory)},\n\t\tnetworkingrest.RESTStorageProvider{},\n\t\tpolicyrest.RESTStorageProvider{},\n\t\trbacrest.RESTStorageProvider{Authorizer: c.GenericConfig.Authorizer},"
  },
  {
    "id" : "48272059-dc97-4190-95c7-d71b6f33f99e",
    "prId" : 37547,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37547#pullrequestreview-10746277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2873573-84fd-4731-ac67-54fa4f9f9499",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "while you're reorganizing imports, I'm inclined to follow openshift with \r\n 1. standard lib\r\n 2. other deps\r\n 3. kube deps",
        "createdAt" : "2016-11-30T12:41:27Z",
        "updatedAt" : "2016-12-03T17:35:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "22b7121e-5f1f-436c-bac4-eed347405bd0",
        "parentId" : "e2873573-84fd-4731-ac67-54fa4f9f9499",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Am fine with that order. But I would avoid any unnecessary changes here to escape rebase hell (as far as possible).",
        "createdAt" : "2016-11-30T12:46:05Z",
        "updatedAt" : "2016-12-03T17:35:33Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2b0142b6f6ffc995e62baf4d6045bc44957fc6d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +52,56 @@\tnodeutil \"k8s.io/kubernetes/pkg/util/node\"\n\n\t\"github.com/golang/glog\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n"
  },
  {
    "id" : "a22c6a9f-533e-4a72-9ed0-8877bdea8477",
    "prId" : 36095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36095#pullrequestreview-7278640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e73df1f9-eaf0-4eba-aad0-2a73802c020e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would like someone familiar with the tunneling setup to comment... @mikedanese / @cjcullen? we weren't using NodeInternalIP for tunneling before... is that valid? I think the point of tunneling is that the master isn't on the same network, so internal IP is not likely to work\n",
        "createdAt" : "2016-11-04T20:07:46Z",
        "updatedAt" : "2016-11-04T22:44:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a645601b-159e-45c7-9a40-5f05153db8e7",
        "parentId" : "e73df1f9-eaf0-4eba-aad0-2a73802c020e",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Agreed. We can't use an internal IP for tunneling.\n",
        "createdAt" : "2016-11-04T20:26:08Z",
        "updatedAt" : "2016-11-04T22:44:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "783af943dbf5f57f739feb683c3ae3c2cddbc3e0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +358,362 @@\tpreferredAddressTypes := []api.NodeAddressType{\n\t\tapi.NodeExternalIP,\n\t\tapi.NodeLegacyHostIP,\n\t}\n\tnodes, err := n.nodeClient.List(api.ListOptions{})"
  },
  {
    "id" : "17bf9194-a261-4bba-9bd3-03c9dabb5c03",
    "prId" : 36095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36095#pullrequestreview-7283313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deb52765-4cf0-4ba4-bf3c-2f932831d693",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I misunderstood the tunneling healthz. The tunneling shouldn't use the InternalIP.\n\nNow the changes to this file do not change any logic. The only change is reusing the utility function in pkg/util/node.\n",
        "createdAt" : "2016-11-04T20:56:53Z",
        "updatedAt" : "2016-11-04T22:44:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "783af943dbf5f57f739feb683c3ae3c2cddbc3e0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +356,360 @@\nfunc (n nodeAddressProvider) externalAddresses() (addresses []string, err error) {\n\tpreferredAddressTypes := []api.NodeAddressType{\n\t\tapi.NodeExternalIP,\n\t\tapi.NodeLegacyHostIP,"
  },
  {
    "id" : "147c823c-fe12-46ec-8bbd-13e1301bee16",
    "prId" : 35923,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35923#pullrequestreview-6599426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66711a0e-a309-453e-be47-c8e8bf1e698c",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Can't we merge them with APIServerServicePort in one field (a slice)?\n",
        "createdAt" : "2016-11-01T08:11:44Z",
        "updatedAt" : "2016-11-03T15:50:11Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6ad016f8-9e26-4fad-a2ca-ea0f48c8b866",
        "parentId" : "66711a0e-a309-453e-be47-c8e8bf1e698c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can't we merge them with APIServerServicePort in one field (a slice)?\n\nMaybe?  I think we can build the intermediate reporting first, but I think I want to try to rebase on this first.\n",
        "createdAt" : "2016-11-01T11:48:12Z",
        "updatedAt" : "2016-11-03T15:50:11Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "d82f98c9b3dbbdf7daed2a17fb44ecc3ac7d23ad",
    "line" : null,
    "diffHunk" : "@@ -1,1 +103,107 @@\t// The range of ports to be assigned to services with type=NodePort or greater\n\tServiceNodePortRange utilnet.PortRange\n\t// Additional ports to be exposed on the GenericAPIServer service\n\t// extraServicePorts is injectable in the event that more ports\n\t// (other than the default 443/tcp) are exposed on the GenericAPIServer"
  },
  {
    "id" : "9a0e9cb7-917a-4bfc-aafa-a246d9d8eaa0",
    "prId" : 35923,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35923#pullrequestreview-6575292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe7b1bf-14e7-4a13-9a63-5b7c0c51ddcf",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I would create an ApiServerService struct with the handful of fields to configure the Service object later.\n",
        "createdAt" : "2016-11-01T08:12:41Z",
        "updatedAt" : "2016-11-03T15:50:11Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "d82f98c9b3dbbdf7daed2a17fb44ecc3ac7d23ad",
    "line" : null,
    "diffHunk" : "@@ -1,1 +94,98 @@\tServiceIPRange net.IPNet\n\t// The IP address for the GenericAPIServer service (must be inside ServiceIPRange)\n\tAPIServerServiceIP net.IP\n\t// Port for the apiserver service.\n\tAPIServerServicePort int"
  },
  {
    "id" : "281dd722-86c4-4b42-a2c3-5bc0da5d6114",
    "prId" : 35900,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35900#pullrequestreview-6454973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1fb1b35-feb3-4cab-8026-9b78e8f2937e",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "any reason to do that in `Complete` and not explicitly where `Config` is created? I would keep `Complete` minimal.\n",
        "createdAt" : "2016-10-31T15:11:30Z",
        "updatedAt" : "2016-11-01T18:46:21Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "912e6741b977703e07cb16608e1725cd12b8278d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +121,125 @@\n\t// this has always been hardcoded true in the past\n\tc.GenericConfig.EnableMetrics = true\n\n\treturn completedConfig{c}"
  },
  {
    "id" : "080ff430-6246-4bef-a8e1-73bff50468b7",
    "prId" : 33842,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33842#pullrequestreview-3696716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f7b8f56-e549-4797-a50d-e5ef6f3b6341",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I don't really like the name of this function. Do you have any better suggestions?\n",
        "createdAt" : "2016-10-11T15:01:45Z",
        "updatedAt" : "2016-10-11T15:04:22Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "83464666-df6e-445d-9b7c-c88d18da8906",
        "parentId" : "4f7b8f56-e549-4797-a50d-e5ef6f3b6341",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I don't really like the name of this function. Do you have any better suggestions?\n\nI see us completely refactoring `healthz` to allow composable checks.  Two weeks and its gone.\n",
        "createdAt" : "2016-10-11T15:13:48Z",
        "updatedAt" : "2016-10-11T15:13:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "406c0a36ae965f136e78154804e6cfe03dfdd15a",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +263,267 @@// TODO this needs to be refactored so we have a way to add general health checks to genericapiserver\n// TODO profiling should be generic\nfunc (m *Master) InstallGeneralEndpoints(c *Config) {\n\t// Run the tunneler.\n\thealthzChecks := []healthz.HealthzChecker{}"
  },
  {
    "id" : "5e7a9ebb-26f5-4f5b-bacd-85d57fb52cf5",
    "prId" : 33575,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33575#pullrequestreview-2011028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab348178-79e8-4100-bf78-7b61358c18a0",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "yay.  \n",
        "createdAt" : "2016-09-28T19:25:51Z",
        "updatedAt" : "2016-09-29T06:09:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f781625db2f25bc9953c22f7b1ed38bc86c3c10",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@\ntype Config struct {\n\tGenericConfig *genericapiserver.Config\n\n\tStorageFactory           genericapiserver.StorageFactory"
  },
  {
    "id" : "df9a3fb1-a54f-4098-b1c0-4afe821bf547",
    "prId" : 33038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33038#pullrequestreview-685039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d187f89c-4d48-4092-ab7d-2f14d7019d5d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Everything else looks generic. Is it this line which breaks the generality?\n",
        "createdAt" : "2016-09-20T06:14:13Z",
        "updatedAt" : "2016-09-22T13:21:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6882e846574998f9dffaa6902d55be060471619",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +216,220 @@\n\tif c.EnableWatchCache {\n\t\tm.restOptionsFactory.storageDecorator = registry.StorageWithCacher\n\t} else {\n\t\tm.restOptionsFactory.storageDecorator = generic.UndecoratedStorage"
  },
  {
    "id" : "b97189f7-91ba-48c2-819f-335d969a0b74",
    "prId" : 29724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ec47fc6-0978-40d0-b5e1-ea1ac18c4ca4",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "shouldnt it be `entry, found :=`?\n",
        "createdAt" : "2016-08-02T05:13:18Z",
        "updatedAt" : "2016-08-13T22:52:17Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "35af80de-a188-4b82-9e9a-28abed4df360",
        "parentId" : "4ec47fc6-0978-40d0-b5e1-ea1ac18c4ca4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "not necessary, it's a pointer in that map, so if it doesn't exist, it will return a `nil` pointer which is checked on the next line.\n",
        "createdAt" : "2016-08-07T04:44:45Z",
        "updatedAt" : "2016-08-13T22:52:17Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3658c7b16cd5b55d29769a79f64e941937d7fbc",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +519,523 @@\tm.thirdPartyResourcesLock.Lock()\n\tdefer m.thirdPartyResourcesLock.Unlock()\n\tentry := m.thirdPartyResources[path]\n\tif entry == nil {\n\t\treturn false, nil"
  },
  {
    "id" : "859561dd-db62-4210-bee9-944f0a28d6e2",
    "prId" : 29674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23016656-a00c-4469-9e17-0a3a983647f1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "kind of strange that a constructor returns a type which is named differently . I know the old function type was called the same, still confusing...\n",
        "createdAt" : "2016-07-28T07:52:45Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "330168c6-409e-44f9-a657-3d2b623ac1dc",
        "parentId" : "23016656-a00c-4469-9e17-0a3a983647f1",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why the bool in the result? If I am not mistaken, that value is true for all implementations.\n",
        "createdAt" : "2016-07-28T10:30:05Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "a44c23aa-96b2-4963-b888-c4f5041fe19b",
        "parentId" : "23016656-a00c-4469-9e17-0a3a983647f1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Why the bool in the result? If I am not mistaken, that value is true for all implementations.\n\nThese implementations don't depend on any conditional information, but as you have endpoints based on things like authenticators and authorizers which are optional, `false` because a valid response.  \"couldn't built it because I'm missing the inputs\".  I could maybe see an argument for an `error` instead, but some \"I failed\" marker must exist.\n",
        "createdAt" : "2016-07-28T11:43:14Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c30690a3bb6eb5783cfb7e452552992e1fcee549",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +161,165 @@\ntype RESTStorageProvider interface {\n\tNewRESTStorage(apiResourceConfigSource genericapiserver.APIResourceConfigSource, restOptionsGetter RESTOptionsGetter) (genericapiserver.APIGroupInfo, bool)\n}\n"
  },
  {
    "id" : "7d32bc8a-8a99-4d25-a591-a3538694d3a0",
    "prId" : 29674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2699c7e-c6f1-4fe7-9e8b-2b35c9d0b1ae",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Can we get rid of `c.RESTStorageProviders` and turn it into a parameter of `InstallAPIs`? I think it's not used anywhere else.\n",
        "createdAt" : "2016-07-28T10:32:55Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b5d80f50-2363-4189-8445-bb46a01cd31f",
        "parentId" : "b2699c7e-c6f1-4fe7-9e8b-2b35c9d0b1ae",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can we get rid of c.RESTStorageProviders and turn it into a parameter of InstallAPIs? I think it's not used anywhere else.\n\nNo.  This will be used downstream to create a server with non-default StorageProviders.  In fact, there's probably a reasonable argument that these belong to a generic API server.\n",
        "createdAt" : "2016-07-28T11:41:48Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c30690a3bb6eb5783cfb7e452552992e1fcee549",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +188,192 @@\n\t// Add some hardcoded storage for now.  Append to the map.\n\tif c.RESTStorageProviders == nil {\n\t\tc.RESTStorageProviders = map[string]RESTStorageProvider{}\n\t}"
  },
  {
    "id" : "3002dde5-fe4c-4f29-9b93-9a9d71042340",
    "prId" : 29674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9eb997de-f6f3-4998-b984-b26adefa0ff6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I think so too.\n",
        "createdAt" : "2016-07-28T10:39:16Z",
        "updatedAt" : "2016-08-01T12:26:22Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "c30690a3bb6eb5783cfb7e452552992e1fcee549",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +268,272 @@\n\t// Install third party resource support if requested\n\t// TODO seems like this bit ought to be unconditional and the REST API is controlled by the config\n\tif c.APIResourceConfigSource.ResourceEnabled(extensionsapiv1beta1.SchemeGroupVersion.WithResource(\"thirdpartyresources\")) {\n\t\tvar err error"
  },
  {
    "id" : "f40b1c45-b3e4-4f90-8a33-7bcf1e6595aa",
    "prId" : 28788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52563e45-2008-40ec-9e2b-206fb38df5a0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "nit: following the convention of the the other scheme groups above and below: `authenticationResources`\n",
        "createdAt" : "2016-07-20T10:56:45Z",
        "updatedAt" : "2016-07-20T19:12:08Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b83099f4-f02c-460c-8457-08c75c0a84ef",
        "parentId" : "52563e45-2008-40ec-9e2b-206fb38df5a0",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> nit: following the convention of the the other scheme groups above and below: authenticationResources\n\nBad convention.  Also, it all goes away in https://github.com/kubernetes/kubernetes/pull/27554\n",
        "createdAt" : "2016-07-20T11:39:47Z",
        "updatedAt" : "2016-07-20T19:12:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "2256c6e619388b59bbd0f113dbc5827d0f2e5d49",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +388,392 @@\n\tif c.APIResourceConfigSource.AnyResourcesForVersionEnabled(authenticationv1beta1.SchemeGroupVersion) {\n\t\tresources := m.getAuthenticationResources(c)\n\t\tgroupMeta := registered.GroupOrDie(authenticationv1beta1.GroupName)\n"
  },
  {
    "id" : "29ef7bfe-8a78-45ff-ad28-54e667b1ceec",
    "prId" : 28025,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99bc6c3b-91b7-4feb-9175-0197b736b6ae",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why not store the config directly instead of storing both components?\n",
        "createdAt" : "2016-06-27T16:40:02Z",
        "updatedAt" : "2016-06-27T16:40:02Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "668a2793-473a-427f-9f16-19f9d0155de8",
        "parentId" : "99bc6c3b-91b7-4feb-9175-0197b736b6ae",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "No reason other than several iterations of the code, and I never got to that one 😄 \n",
        "createdAt" : "2016-06-27T16:43:14Z",
        "updatedAt" : "2016-06-27T16:43:14Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b55cede866aa81bbf726423b64de809c45924979",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +620,624 @@\n\t\tEndpointReconciler: endpointReconcilerConfig.Reconciler,\n\t\tEndpointInterval:   endpointReconcilerConfig.Interval,\n\n\t\tSystemNamespaces:         []string{api.NamespaceSystem},"
  },
  {
    "id" : "90b75f79-e8ea-4a38-8e76-2ab686e151c3",
    "prId" : 28025,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85625c1c-88b5-47a1-8530-03ec5dddb4f5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: stray tab in the middle here\n",
        "createdAt" : "2016-06-27T16:40:22Z",
        "updatedAt" : "2016-06-27T16:40:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b55cede866aa81bbf726423b64de809c45924979",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +610,614 @@\n\tif endpointReconcilerConfig.Reconciler == nil {\n\t\t// use a default endpoint\treconciler if nothing is set\n\t\t// m.endpointRegistry is set via m.InstallAPIs -> m.initV1ResourcesStorage\n\t\tendpointReconcilerConfig.Reconciler = NewMasterCountEndpointReconciler(m.MasterCount, m.endpointRegistry)"
  },
  {
    "id" : "aedba609-c59c-4ecc-9b9c-89242f86be26",
    "prId" : 27554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c3483ee-b807-4e77-9f2a-3c512f8f3139",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I hadn't realized our set actually sorted its list by default, useful ;-)\n",
        "createdAt" : "2016-06-21T21:20:05Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7007afc5b99f7ecceae20d22f794077362c884",
    "line" : null,
    "diffHunk" : "@@ -1,1 +319,323 @@\t}\n\n\t// stabilize order.\n\t// TODO find a better way to configure priority of groups\n\tfor _, group := range sets.StringKeySet(c.RESTStorageProviders).List() {"
  },
  {
    "id" : "9157ed61-c245-4d81-9b82-6fe8e324b0a4",
    "prId" : 27554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5368547c-eb54-4735-b6b7-f5b301568b3e",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Are you using the `enabled` at all. All the functions I've checked always returned `false`, or are you missing some additional code pieces still? \n",
        "createdAt" : "2016-06-27T11:54:29Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "2093527f-b20c-46e6-85da-21161f66630c",
        "parentId" : "5368547c-eb54-4735-b6b7-f5b301568b3e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Are you using the enabled at all. All the functions I've checked always returned false, or are you missing some additional code pieces still?\n\nDownstream components may choose disable if other conditions are met.  Imagine a resource that manages RCs.  If RCs are disabled, that resource should be disabled, but this logic here can't detect it.  If that resource is the only thing in the group, the group is effectively disabled.\n",
        "createdAt" : "2016-06-27T12:26:02Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "374f90ec-e767-48c1-a64c-6efa87d5b5cc",
        "parentId" : "5368547c-eb54-4735-b6b7-f5b301568b3e",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Thanks for the explanation. \n",
        "createdAt" : "2016-06-27T12:33:32Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7007afc5b99f7ecceae20d22f794077362c884",
    "line" : null,
    "diffHunk" : "@@ -1,1 +326,330 @@\t\t}\n\t\trestStorageBuilder := c.RESTStorageProviders[group]\n\t\tapiGroupInfo, enabled := restStorageBuilder(c.APIResourceConfigSource, restOptionsGetter)\n\t\tif !enabled {\n\t\t\tcontinue"
  },
  {
    "id" : "9a46fe2a-4eef-4e04-b67d-433ca49d1a51",
    "prId" : 27554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d24c303-2795-4124-8809-172dbabb5794",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Would this be clearer as an interface? (thinking out loud, not asking for a change)\n",
        "createdAt" : "2016-07-21T23:51:15Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b780734e-2ee9-4409-aa0b-a32def398098",
        "parentId" : "7d24c303-2795-4124-8809-172dbabb5794",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Would this be clearer as an interface? (thinking out loud, not asking for a change)\n\nYes, having written these, I think I agree, but I'd like to do it as a followup along with splitting apart the individual RESTStorage per-group.\n",
        "createdAt" : "2016-07-22T15:48:46Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7007afc5b99f7ecceae20d22f794077362c884",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +189,193 @@\ntype RESTOptionsGetter func(resource unversioned.GroupResource) generic.RESTOptions\ntype RESTStorageProvider func(apiResourceConfigSource genericapiserver.APIResourceConfigSource, restOptionsGetter RESTOptionsGetter) (genericapiserver.APIGroupInfo, bool)\n\n// New returns a new instance of Master from the given config."
  },
  {
    "id" : "3f7b0d98-f866-4173-8ea2-bb5c2942d515",
    "prId" : 27554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d10ed8a-b2fd-45a8-b2e6-9ab3480f6a96",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This whole function looks like word salad on a narrow screen (i.e., github side by side diff). What do you think about naming some parts of this and promoting them to be top level so there's not so much indentation? Would be helpful for the other functions too, but I think this is the most extreme.\n",
        "createdAt" : "2016-07-21T23:55:04Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "36051bb1-658f-4b0b-b0c1-5c90e46513d7",
        "parentId" : "5d10ed8a-b2fd-45a8-b2e6-9ab3480f6a96",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This whole function looks like word salad on a narrow screen (i.e., github side by side diff). What do you think about naming some parts of this and promoting them to be top level so there's not so much indentation? Would be helpful for the other functions too, but I think this is the most extreme.\n\nI agree.  Mind if I do that as a step two with the `RESTStorageProviderFunc` refactor?  I can do it one go, but I think the diff gets even harder.  I'd promise it as a quick followup, less than a week.\n",
        "createdAt" : "2016-07-22T15:51:05Z",
        "updatedAt" : "2016-07-25T12:23:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7007afc5b99f7ecceae20d22f794077362c884",
    "line" : 407,
    "diffHunk" : "@@ -1,1 +945,949 @@\t\t\tnewRuleValidator := func() rbacvalidation.AuthorizationRuleResolver {\n\t\t\t\tonce.Do(func() {\n\t\t\t\t\tauthorizationRuleResolver = rbacvalidation.NewDefaultRuleResolver(\n\t\t\t\t\t\trole.NewRegistry(roleetcd.NewREST(restOptionsGetter(rbac.Resource(\"roles\")))),\n\t\t\t\t\t\trolebinding.NewRegistry(rolebindingetcd.NewREST(restOptionsGetter(rbac.Resource(\"rolebindings\")))),"
  },
  {
    "id" : "be36790b-697d-4dc6-a063-5ae0d8367fab",
    "prId" : 25638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32fd33ff-7d98-4110-b85a-17c61efe16b3",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "rebase debris, perhaps?\n",
        "createdAt" : "2016-05-18T00:17:47Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "73eed533-51c5-48a8-816a-dbd5267c5d01",
        "parentId" : "32fd33ff-7d98-4110-b85a-17c61efe16b3",
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "Just fixed this as I went along - the comment didn't match the method name.\n",
        "createdAt" : "2016-05-18T00:49:03Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      },
      {
        "id" : "93405c41-35d7-470f-b136-48d3f92f8866",
        "parentId" : "32fd33ff-7d98-4110-b85a-17c61efe16b3",
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "To be clear... is this change OK?\n",
        "createdAt" : "2016-05-18T22:43:38Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      }
    ],
    "commit" : "47248f3698d50f163d9b329e697544a84efbc663",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +894,898 @@}\n\n// getAppsResources returns the resources for apps api\nfunc (m *Master) getAppsResources(c *Config) map[string]rest.Storage {\n\t// TODO update when we support more than one version of this group"
  },
  {
    "id" : "4a060967-0627-4121-8a86-1d046d53353a",
    "prId" : 25638,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f585e1a4-efad-4103-bdc0-6a07b438ce11",
        "parentId" : null,
        "authorId" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "body" : "Missing `networkpolicies/status`?\n",
        "createdAt" : "2016-05-19T09:44:58Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "0df1da34-610c-4ce5-b0cf-bbda668bf9c1",
        "tags" : [
        ]
      },
      {
        "id" : "74f8773a-149b-4725-9af8-b5e4cf4df1cf",
        "parentId" : "f585e1a4-efad-4103-bdc0-6a07b438ce11",
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "We've not implemented status yet.  Decided to sit on it until we had a clear use case.\n",
        "createdAt" : "2016-05-19T15:21:13Z",
        "updatedAt" : "2016-05-20T02:03:09Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      }
    ],
    "commit" : "47248f3698d50f163d9b329e697544a84efbc663",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +849,853 @@\tnetworkPolicyStorage := networkpolicyetcd.NewREST(restOptions(\"networkpolicies\"))\n\tif c.APIResourceConfigSource.ResourceEnabled(version.WithResource(\"networkpolicies\")) {\n\t\tstorage[\"networkpolicies\"] = networkPolicyStorage\n\t}\n"
  },
  {
    "id" : "97d3f4a7-0568-4566-8b1f-f59716d38938",
    "prId" : 25374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b7c512-a650-4857-9bcc-780ae6e61101",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "So we're relying on meta.KindToResource's pluralization code working for arbitrary strings? I guess that's an improvement to just appending an 's'. Should we instead allow them to put a pluralized version in the specification? @smarterclayton here's another great reason not to use plurals in our paths...\n",
        "createdAt" : "2016-05-09T22:01:03Z",
        "updatedAt" : "2016-05-09T22:01:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a2e69b4e-b797-44b6-a4ea-a734b7662f5a",
        "parentId" : "37b7c512-a650-4857-9bcc-780ae6e61101",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "KindToResource is what the kubectl client code uses afaik, so at least its consistent?\n",
        "createdAt" : "2016-05-09T22:41:39Z",
        "updatedAt" : "2016-05-09T22:41:39Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2bf960649b6538154489b137c8e3a886ec6b76b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +691,695 @@\n\tstorage := map[string]rest.Storage{\n\t\tpluralResource: resourceStorage,\n\t}\n"
  },
  {
    "id" : "f76cf962-b74a-4c4c-a7ca-487215033d5b",
    "prId" : 25374,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4880a868-cd74-45db-8909-a55fa4a4a569",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Just checking: that second parameter is not an error, correct?\n",
        "createdAt" : "2016-05-09T22:01:35Z",
        "updatedAt" : "2016-05-09T22:01:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0fdba097-b0ac-4801-a3a3-7dfa8aaae202",
        "parentId" : "4880a868-cd74-45db-8909-a55fa4a4a569",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Second parameter is the 'singular' version of the resource.\n",
        "createdAt" : "2016-05-09T22:41:17Z",
        "updatedAt" : "2016-05-09T22:41:17Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2bf960649b6538154489b137c8e3a886ec6b76b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +657,661 @@\t\treturn err\n\t}\n\tplural, _ := meta.KindToResource(unversioned.GroupVersionKind{\n\t\tGroup:   group,\n\t\tVersion: rsrc.Versions[0].Name,"
  },
  {
    "id" : "bf4b9fd8-b6a0-4649-a805-a29abb0a2a97",
    "prId" : 23945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3993fe9-b5a2-4318-9cfb-1e0b9278ffe0",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Does this need to be a public func?\n",
        "createdAt" : "2016-04-06T22:38:39Z",
        "updatedAt" : "2016-04-15T15:44:23Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f95b91f9632b092a87b9754858909d13070f8a6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +179,183 @@\n// MetricsWithReset is a handler that resets metrics when DELETE is passed to the endpoint.\nfunc MetricsWithReset(w http.ResponseWriter, req *http.Request) {\n\tif req.Method == \"DELETE\" {\n\t\tapiservermetrics.Reset()"
  },
  {
    "id" : "a3120116-42c2-41a2-aa34-a1898f8969bd",
    "prId" : 23208,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4140d62-195d-42b8-a8c7-38947909584e",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Dont need this line?\n",
        "createdAt" : "2016-04-11T22:09:01Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "4155cca0-27d4-4d48-bf78-ff3222a134a3",
        "parentId" : "f4140d62-195d-42b8-a8c7-38947909584e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Dont need this line?\n\n`:=` below will fail compilation because `m.thirdPartyStorage` is not new.  Have to pre-declare the error.\n",
        "createdAt" : "2016-04-12T11:54:47Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c41833c5-f308-4325-aab3-ff571e081641",
        "parentId" : "f4140d62-195d-42b8-a8c7-38947909584e",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "I dont think that you will get a compilation error for that. You can use `:=` if at least one of the variables on the left side are new.\nCan you try?\n",
        "createdAt" : "2016-04-12T18:22:21Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "1d057672-6eba-49f9-a8e4-c25fcbcb2279",
        "parentId" : "f4140d62-195d-42b8-a8c7-38947909584e",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I dont think that you will get a compilation error for that. You can use := if at least one of the variables on the left side are new.\n> Can you try?\n\n```\nhack/build-go.sh\nGo version: go version go1.4.2 linux/amd64\n+++ [0414 09:39:36] Building go targets for linux/amd64:\n    cmd/kube-proxy\n    cmd/kube-apiserver\n    cmd/kube-controller-manager\n    cmd/kubelet\n    cmd/kubemark\n    cmd/hyperkube\n    cmd/linkcheck\n    plugin/cmd/kube-scheduler\n    cmd/kubectl\n    cmd/integration\n    cmd/gendocs\n    cmd/genkubedocs\n    cmd/genman\n    cmd/mungedocs\n    cmd/genbashcomp\n    cmd/genconversion\n    cmd/genswaggertypedocs\n    examples/k8petstore/web-server/src\n    github.com/onsi/ginkgo/ginkgo\n    test/e2e/e2e.test\n    test/e2e_node/e2e_node.test\n# k8s.io/kubernetes/pkg/master\n_output/local/go/src/k8s.io/kubernetes/pkg/master/master.go:235: non-name m.thirdPartyStorage on left side of :=\n```\n",
        "createdAt" : "2016-04-14T13:39:49Z",
        "updatedAt" : "2016-04-21T12:18:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6670b73b18e631b57760d1a1800485d05faf39bb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +246,250 @@\t// Install extensions unless disabled.\n\tif c.APIResourceConfigSource.AnyResourcesForVersionEnabled(extensionsapiv1beta1.SchemeGroupVersion) {\n\t\tvar err error\n\t\tm.thirdPartyStorage, err = c.StorageFactory.New(extensions.Resource(\"thirdpartyresources\"))\n\t\tif err != nil {"
  },
  {
    "id" : "9feaeffa-9edf-4f9c-9306-66f28ffdd4cb",
    "prId" : 23067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f3af255-1e70-46f1-92ec-266f22e933b2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "huh, I'm surprised that these weren't already imported.\n",
        "createdAt" : "2016-03-22T20:12:56Z",
        "updatedAt" : "2016-03-28T13:24:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8fb35d4d8eeccd2506f0d0d4f6f2bc7a3cb8f91",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +38,42 @@\tbatchapiv1 \"k8s.io/kubernetes/pkg/apis/batch/v1\"\n\t\"k8s.io/kubernetes/pkg/apis/extensions\"\n\textensionsapiv1beta1 \"k8s.io/kubernetes/pkg/apis/extensions/v1beta1\"\n\t\"k8s.io/kubernetes/pkg/apiserver\"\n\tapiservermetrics \"k8s.io/kubernetes/pkg/apiserver/metrics\""
  },
  {
    "id" : "268888b1-5125-45e9-82e7-3e660ea63160",
    "prId" : 19314,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8b5defc-a06e-4d46-a55c-25b475e4a1b0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why the move below the v1 API setup? does something in the tunneling now depend on the API or storage being available?\n",
        "createdAt" : "2016-02-02T14:58:36Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "26d9c6b5-8cbb-44bb-beaf-7bfe1debc689",
        "parentId" : "e8b5defc-a06e-4d46-a55c-25b475e4a1b0",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "This is fixing an existing bug I noticed.\n\nThe tunneler uses the `m.getNodeAddresses` function, which calls `m.nodeRegistry.ListNodes()`. `m.nodeRegistry` is initialized in `m.initV1ResourcesStorage()`, which isn't called until after the tunneler starts trying to get node addresses. Right now, we panic and recover in a `util.Until` loop until the storage is initialized.\n",
        "createdAt" : "2016-02-02T18:22:49Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      },
      {
        "id" : "f92879bc-e89c-43cd-95f1-378a61462c5a",
        "parentId" : "e8b5defc-a06e-4d46-a55c-25b475e4a1b0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ha, ok\n",
        "createdAt" : "2016-02-02T19:53:48Z",
        "updatedAt" : "2016-02-02T20:00:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "04eb90a5d488de787ebe99fea4d394f1a53c6450",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +179,183 @@\t}\n\n\t// Run the tunneler.\n\thealthzChecks := []healthz.HealthzChecker{}\n\tif m.tunneler != nil {"
  },
  {
    "id" : "755a814b-f9fa-4a11-9452-6a36f3dc4ada",
    "prId" : 19040,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04a43384-d99d-4d12-a885-f55b34942a97",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is it possible to make this function symmetric to `getExtensionResources()`?\n",
        "createdAt" : "2015-12-29T22:21:48Z",
        "updatedAt" : "2015-12-30T22:22:24Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "cd644160-c821-4d8f-8ced-49cd47729c08",
        "parentId" : "04a43384-d99d-4d12-a885-f55b34942a97",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "It does not just return the set of resources. Its different because it sets a lot of fields as well.\n",
        "createdAt" : "2015-12-30T21:50:47Z",
        "updatedAt" : "2015-12-30T22:22:24Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87ce093c7736809899ca05a68decd94cd9eb50ba",
    "line" : null,
    "diffHunk" : "@@ -1,1 +177,181 @@\tif !m.ApiGroupVersionOverrides[\"api/v1\"].Disable {\n\t\t// Install v1 API.\n\t\tm.initV1ResourcesStorage(c)\n\t\tapiGroupInfo := genericapiserver.APIGroupInfo{\n\t\t\tGroupMeta: *latest.GroupOrDie(api.GroupName),"
  },
  {
    "id" : "0c2be78a-ca08-445c-81f4-b94cc5885a06",
    "prId" : 19040,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d410a251-40b3-4f72-93cd-9b7ddfcc323d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is this correct? IIUC, here we are trying to install a specific version of the extensions group, (e.g., apis/extensions/v3alpha2), and version may not be the storage version.\n",
        "createdAt" : "2015-12-29T22:55:18Z",
        "updatedAt" : "2015-12-30T22:22:24Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4b1c9a81-86a3-4c98-b315-2a2f8605e451",
        "parentId" : "d410a251-40b3-4f72-93cd-9b7ddfcc323d",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This is correct as discussed.\nAdded a for loop in genericserver to install all versions in the group.\n",
        "createdAt" : "2015-12-30T21:51:26Z",
        "updatedAt" : "2015-12-30T22:22:24Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87ce093c7736809899ca05a68decd94cd9eb50ba",
    "line" : null,
    "diffHunk" : "@@ -1,1 +209,213 @@\t\t\tglog.Fatalf(\"Error in parsing group version %s: %v\", storageVersion, err)\n\t\t}\n\t\textensionsGroupMeta.GroupVersion = preferedGroupVersion\n\n\t\tapiGroupInfo := genericapiserver.APIGroupInfo{"
  },
  {
    "id" : "ee3b254b-4db4-4724-a86a-ade88ab3458d",
    "prId" : 18484,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d196d1cf-823a-43c8-899b-8d518e329b96",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Can you please add a comment for this?\n",
        "createdAt" : "2015-12-16T22:47:46Z",
        "updatedAt" : "2015-12-18T22:06:13Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "5bc7a390-24fc-4146-b1d0-a660a9b55daa",
        "parentId" : "d196d1cf-823a-43c8-899b-8d518e329b96",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-12-17T03:59:19Z",
        "updatedAt" : "2015-12-18T22:06:13Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "e594407ab53ab78a94e85fd43885f666784eb718",
    "line" : null,
    "diffHunk" : "@@ -1,1 +123,127 @@// thirdPartyEntry combines objects storage and API group into one struct\n// for easy lookup.\ntype thirdPartyEntry struct {\n\tstorage *thirdpartyresourcedataetcd.REST\n\tgroup   unversioned.APIGroup"
  },
  {
    "id" : "7094e0f2-1a9b-41d9-8e67-8934b1f4a3fd",
    "prId" : 17093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3cd0e16-65d9-434b-b127-f5dab859c671",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add a comment explaining why this needs to happen before the auth check.\n",
        "createdAt" : "2015-11-11T16:52:39Z",
        "updatedAt" : "2015-11-12T01:56:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d94dd1a05b72b397458b642186864a033885b49",
    "line" : null,
    "diffHunk" : "@@ -1,1 +732,736 @@\t// Since OPTIONS request cannot carry authn headers (by w3c standards), we are doing CORS check\n\t// before auth check. Otherwise all the CORS request will be rejected.\n\tif len(c.CorsAllowedOriginList) > 0 {\n\t\tallowedOriginRegexps, err := util.CompileRegexps(c.CorsAllowedOriginList)\n\t\tif err != nil {"
  },
  {
    "id" : "f9e72025-702e-4595-a79d-22ca376598c7",
    "prId" : 16690,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal, this seems unrelated to /swaggerapi/...? This should only affect /apis/extensions/ ?\n",
        "createdAt" : "2015-11-02T22:43:28Z",
        "updatedAt" : "2015-11-02T22:43:28Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "299b3902-a273-4001-b8cc-ba6355dc18af",
        "parentId" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "`/swaggerapi` is auto generated.\n`/swaggerapi/apis/extensions/` was returning `ApiDeclaration not found`. This change fixes that\n",
        "createdAt" : "2015-11-02T22:48:15Z",
        "updatedAt" : "2015-11-02T22:48:15Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "7d0445ef-b4fa-4680-957b-d0e5f2ed2d5a",
        "parentId" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I see. Maybe go-restful requires there's no trailing \"/\". Could you double check /apis/extensions/ and /apis/extensions still work? Because that's the paths directly affected by this line. Thanks.\n",
        "createdAt" : "2015-11-02T22:57:35Z",
        "updatedAt" : "2015-11-02T22:57:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8e9ac000-e5dc-446c-b107-cc24fe3e39e7",
        "parentId" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@nikhiljindal, Could you double check /apis/extensions/ and /apis/extensions still work? Because that's the paths directly affected by this line. Thanks.\n",
        "createdAt" : "2015-11-03T19:24:03Z",
        "updatedAt" : "2015-11-03T19:24:03Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "dcc322f1-7d04-4eb5-b6b3-a1c2d710fae6",
        "parentId" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes Verified that both of them work\n",
        "createdAt" : "2015-11-03T20:28:16Z",
        "updatedAt" : "2015-11-03T20:28:16Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "afb25d47-18df-4d63-b7aa-668c36c164ac",
        "parentId" : "d3ba2a02-79ef-4c7c-a0ed-e68ee9650cbe",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks! LGTM.\n",
        "createdAt" : "2015-11-03T20:29:32Z",
        "updatedAt" : "2015-11-03T20:29:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "326d333777c381cd2355df52fc09e1f33409396c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +673,677 @@\t\t\tPreferredVersion: unversioned.GroupVersion{GroupVersion: storageVersion, Version: apiutil.GetVersion(storageVersion)},\n\t\t}\n\t\tapiserver.AddGroupWebService(m.handlerContainer, c.APIGroupPrefix+\"/\"+latest.GroupOrDie(\"extensions\").Group, group)\n\t\tallGroups = append(allGroups, group)\n\t\tapiserver.InstallServiceErrorHandler(m.handlerContainer, m.newRequestInfoResolver(), []string{expVersion.Version})"
  },
  {
    "id" : "982113f4-26af-43cb-9e42-c379fb489350",
    "prId" : 14823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3acaae17-a4d2-4b3d-ba05-68ba76e2a88a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What if group doesn't exist?\n",
        "createdAt" : "2015-10-01T21:11:08Z",
        "updatedAt" : "2015-10-05T08:54:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c6169ad4-0cdd-4b65-9b96-c3f1d904c1e6",
        "parentId" : "3acaae17-a4d2-4b3d-ba05-68ba76e2a88a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You check for overrides being nil in `get` but not here-- should be consistent.\n",
        "createdAt" : "2015-10-01T21:13:15Z",
        "updatedAt" : "2015-10-05T08:54:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f1cbe37a446e9264d40203f40d4cb7b8d3d477a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\ts.APIGroups[group].Overrides = map[string]storage.Interface{}\n\t}\n\ts.APIGroups[group].Overrides[resource] = override\n}\n"
  },
  {
    "id" : "ec8d7d5f-c81a-4d3c-a812-3004457d53e9",
    "prId" : 14672,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70420c72-fb25-4d65-888b-d07a4a7cc1a5",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "didn't we convert everything to all-lowercase?\n",
        "createdAt" : "2015-10-08T04:13:01Z",
        "updatedAt" : "2015-10-08T04:13:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "65bb35cc-c7b4-4532-8d2c-5c2eb63073cb",
        "parentId" : "70420c72-fb25-4d65-888b-d07a4a7cc1a5",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Case conversion happens automatically.  Internally we have camel case in\nmany parts of the code.\n\nOn Thursday, October 8, 2015, Tim Hockin notifications@github.com wrote:\n\n> In pkg/master/master.go\n> https://github.com/kubernetes/kubernetes/pull/14672#discussion_r41474385\n> :\n> \n> > @@ -567,12 +567,13 @@ func (m *Master) init(c *Config) {\n> > \n> > ```\n> >     \"podTemplates\": podTemplateStorage,\n> > ```\n> > -       \"replicationControllers\": controllerStorage,\n> > -       \"services\":               service.NewStorage(m.serviceRegistry, m.endpointRegistry, serviceClusterIPAllocator, serviceNodePortAllocator),\n> > -       \"endpoints\":              endpointsStorage,\n> > -       \"nodes\":                  nodeStorage,\n> > -       \"nodes/status\":           nodeStatusStorage,\n> > -       \"events\":                 eventStorage,\n> > -       \"replicationControllers\":        controllerStorage,\n> > -       \"replicationControllers/status\": controllerStatusStorage,\n> \n> didn't we convert everything to all-lowercase?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/14672/files#r41474385.\n",
        "createdAt" : "2015-10-08T12:15:41Z",
        "updatedAt" : "2015-10-08T12:15:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "a7e8f2bb-beca-458d-8d2b-cc183286f8cb",
        "parentId" : "70420c72-fb25-4d65-888b-d07a4a7cc1a5",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ugly, but true.\n",
        "createdAt" : "2015-10-09T16:16:01Z",
        "updatedAt" : "2015-10-09T16:16:01Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "7d3e1f5e-5207-42c8-8d46-dae92eef9d03",
        "parentId" : "70420c72-fb25-4d65-888b-d07a4a7cc1a5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Now that we have dropped the old name, we can normalize the internal\nconstants.  It would probably reduce confusion for code reviewers.\n\nOn Fri, Oct 9, 2015 at 12:16 PM, Brian Grant notifications@github.com\nwrote:\n\n> In pkg/master/master.go\n> https://github.com/kubernetes/kubernetes/pull/14672#discussion_r41648501\n> :\n> \n> > @@ -567,12 +567,13 @@ func (m *Master) init(c *Config) {\n> > \n> > ```\n> >     \"podTemplates\": podTemplateStorage,\n> > ```\n> > -       \"replicationControllers\": controllerStorage,\n> > -       \"services\":               service.NewStorage(m.serviceRegistry, m.endpointRegistry, serviceClusterIPAllocator, serviceNodePortAllocator),\n> > -       \"endpoints\":              endpointsStorage,\n> > -       \"nodes\":                  nodeStorage,\n> > -       \"nodes/status\":           nodeStatusStorage,\n> > -       \"events\":                 eventStorage,\n> > -       \"replicationControllers\":        controllerStorage,\n> > -       \"replicationControllers/status\": controllerStatusStorage,\n> \n> Ugly, but true.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/14672/files#r41648501.\n",
        "createdAt" : "2015-10-09T18:37:32Z",
        "updatedAt" : "2015-10-09T18:37:32Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "544b453e31d8528fd8d01494fcb5ca7256205644",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +569,573 @@\n\t\t\"replicationControllers\":        controllerStorage,\n\t\t\"replicationControllers/status\": controllerStatusStorage,\n\t\t\"services\":                      service.NewStorage(m.serviceRegistry, m.endpointRegistry, serviceClusterIPAllocator, serviceNodePortAllocator),\n\t\t\"endpoints\":                     endpointsStorage,"
  },
  {
    "id" : "33b6ae8f-a6de-4c75-b90f-8fbe4d6a4c83",
    "prId" : 13955,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c8e4070-9f3b-41a5-a7ec-10ae227ddd94",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'd like to see a loop here that goes through every Group, instead of specifically referencing experimental. But we can fix this when we add additional groups, I guess.\n",
        "createdAt" : "2015-09-15T22:04:39Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "42ab5ec7-11b7-45dd-b83b-61ac0b9f5c5f",
        "parentId" : "2c8e4070-9f3b-41a5-a7ec-10ae227ddd94",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you explain why we need a loop here? This block is enclosed in \"if m.exp\", so we know it's for experimental.\n",
        "createdAt" : "2015-09-15T22:58:12Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "677c5daa-a10d-4386-83d9-a1ae3688dba0",
        "parentId" : "2c8e4070-9f3b-41a5-a7ec-10ae227ddd94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We'll want to do that from Openshift, so we can add that when we get to\nit.  Or you can add a field to MasterConfig now that is a list of external\ngroups.\n\nOn Sep 15, 2015, at 6:04 PM, Daniel Smith notifications@github.com wrote:\n\nIn pkg/master/master.go\nhttps://github.com/kubernetes/kubernetes/pull/13955#discussion_r39571743:\n\n>   if m.exp {\n>       expVersion := m.experimental(c)\n>       if err := expVersion.InstallREST(m.handlerContainer); err != nil {\n>           glog.Fatalf(\"Unable to setup experimental api: %v\", err)\n>       }\n> -     apiserver.AddApiWebService(m.handlerContainer, c.ExpAPIPrefix, []string{expVersion.Version})\n> -     g, err := latest.Group(\"experimental\")\n\nI'd like to see a loop here that goes through every Group, instead of\nspecifically referencing experimental. But we can fix this when we add\nadditional groups, I guess.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/13955/files#r39571743.\n",
        "createdAt" : "2015-09-15T23:56:06Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c5c4fde2-577b-44cc-9b48-b6e371f9c716",
        "parentId" : "2c8e4070-9f3b-41a5-a7ec-10ae227ddd94",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, what Clayton says. We don't want to end up with a bunch of individually named booleans where we check each individually and then use the group of the same name, we want to loop over a single list.\n",
        "createdAt" : "2015-09-16T01:00:42Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a6d2754d-05c8-4c5f-aef8-780644e11f26",
        "parentId" : "2c8e4070-9f3b-41a5-a7ec-10ae227ddd94",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I see. I'll do it when we have multiple groups.\n",
        "createdAt" : "2015-09-16T16:54:44Z",
        "updatedAt" : "2015-09-21T19:20:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278771b340acad9906bb6b3de18365cfc368db5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +580,584 @@\t\t\tglog.Fatalf(\"Unable to setup experimental api: %v\", err)\n\t\t}\n\t\tg, err := latest.Group(\"experimental\")\n\t\tif err != nil {\n\t\t\tglog.Fatalf(\"Unable to setup experimental api: %v\", err)"
  },
  {
    "id" : "6b208e3b-4b17-4dba-a6e2-c6fc44278d7f",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07dfa32a-9e0c-41d3-8f43-06b5a512e8ec",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc\n",
        "createdAt" : "2015-09-17T23:44:51Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6ac7ca11-38b5-4e62-9a77-16d1639a1144",
        "parentId" : "07dfa32a-9e0c-41d3-8f43-06b5a512e8ec",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Done, though what is our policy on Godoc vis a vis interface implementations.  Shouldn't we defer to the comment in the interface specification?\n",
        "createdAt" : "2015-09-18T04:06:08Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "f50b6c02-2078-4d64-9151-546075e18677",
        "parentId" : "07dfa32a-9e0c-41d3-8f43-06b5a512e8ec",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "IMO the interface comment should describe the contract and the\nimplementation comment should describe what that means in specifically, but\nI don't know that we have a rule.\n\nOn Thu, Sep 17, 2015 at 9:06 PM, Brendan Burns notifications@github.com\nwrote:\n\n> In pkg/master/master.go\n> https://github.com/kubernetes/kubernetes/pull/13822#discussion_r39822616\n> :\n> \n> > @@ -774,7 +782,85 @@ func (m *Master) api_v1() *apiserver.APIGroupVersion {\n> >     return version\n> >  }\n> > \n> > -func (m *Master) InstallThirdPartyAPI(rsrc *experimental.ThirdPartyResource) error {\n> > +func (m *Master) HasThirdPartyResource(rsrc *expapi.ThirdPartyResource) (bool, error) {\n> \n> Done, though what is our policy on Godoc vis a vis interface\n> implementations. Shouldn't we defer to the comment in the interface\n> specification?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/13822/files#r39822616.\n",
        "createdAt" : "2015-09-18T18:16:03Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +812,816 @@\n// HasThirdPartyResource returns true if a particular third party resource currently installed.\nfunc (m *Master) HasThirdPartyResource(rsrc *expapi.ThirdPartyResource) (bool, error) {\n\t_, group, err := thirdpartyresourcedata.ExtractApiGroupAndKind(rsrc)\n\tif err != nil {"
  },
  {
    "id" : "8da83887-7602-4044-9a63-c3b24f5c688c",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f85f0522-b9d4-4ce4-9bac-5398099ae4ad",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Godoc\n",
        "createdAt" : "2015-09-17T23:49:16Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "27e62ce7-bc47-4da3-b4b5-fca08fab2358",
        "parentId" : "f85f0522-b9d4-4ce4-9bac-5398099ae4ad",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done, although really, isn't the name of the function sufficient?  (and also as above wrt to interfaces)\n",
        "createdAt" : "2015-09-18T04:06:42Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +841,845 @@\n// RemoveThirdPartyResource removes all resources matching `path`.  Also deletes any stored data\nfunc (m *Master) RemoveThirdPartyResource(path string) error {\n\tif err := m.removeThirdPartyStorage(path); err != nil {\n\t\treturn err"
  },
  {
    "id" : "a38bb6e9-619d-40d4-8375-a26c4927d2ee",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "939fb035-08b7-4778-a3a1-6e529a6b1ebd",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : ":)\n",
        "createdAt" : "2015-09-17T23:49:24Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e522d670-9264-4fd5-9ff6-9485a20e4d3e",
        "parentId" : "939fb035-08b7-4778-a3a1-6e529a6b1ebd",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done. although again, was there confusion about what this method did?  (and it implements an interface)\n",
        "createdAt" : "2015-09-18T04:07:06Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +876,880 @@\n// ListThirdPartyResources lists all currently installed third party resources\nfunc (m *Master) ListThirdPartyResources() []string {\n\tm.thirdPartyResourcesLock.RLock()\n\tdefer m.thirdPartyResourcesLock.RUnlock()"
  },
  {
    "id" : "eb902f53-7d06-40eb-8444-89da6a12b355",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61384f75-5854-489d-bfa6-dbda8f2bef70",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess it's a big change-- but I would prefer if the third party stuff was a separate object (and in a separate file) from the master.\n",
        "createdAt" : "2015-09-17T23:50:19Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d92df124-4457-47fd-ae10-58ae3b8f98be",
        "parentId" : "61384f75-5854-489d-bfa6-dbda8f2bef70",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "If we did that (and I'm open to it, I suppose) you would still need to expose functions for mucking around with the go-restful web services that would look pretty similar to these functions.  I guess the other object could muck with `handlerContainer` directly, but that seems to break encapsulation boundaries.\n",
        "createdAt" : "2015-09-18T04:08:44Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +248,252 @@\tthirdPartyResources map[string]*thirdpartyresourcedataetcd.REST\n\t// protects the map\n\tthirdPartyResourcesLock sync.RWMutex\n}\n"
  },
  {
    "id" : "e5a80810-b44a-4509-9e37-554fe7583ec3",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb0d7f85-0522-45dc-b3bb-4b85bfc0d80e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Deletes from etcd?\n",
        "createdAt" : "2015-09-18T18:18:04Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "25b36702-dc9a-4405-9f99-55a7036a48df",
        "parentId" : "fb0d7f85-0522-45dc-b3bb-4b85bfc0d80e",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Implementation detail, totally irrelevant, it's noted that it deletes stored data, who cares where that data is stored, indeed the master has no idea where it is stored, it only has the storage interface.\n",
        "createdAt" : "2015-09-18T19:20:01Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +840,844 @@}\n\n// RemoveThirdPartyResource removes all resources matching `path`.  Also deletes any stored data\nfunc (m *Master) RemoveThirdPartyResource(path string) error {\n\tif err := m.removeThirdPartyStorage(path); err != nil {"
  },
  {
    "id" : "0a1e9cdf-f2a1-4934-ba4d-f1c717e762e1",
    "prId" : 13822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f107b0-20e1-4f0f-9f91-a1b598a8150b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Installed means currently installed in the local master or installed in etcd?\n",
        "createdAt" : "2015-09-18T18:18:37Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "15c15ed2-5436-4d7b-9ca9-86e4f9e92d2d",
        "parentId" : "42f107b0-20e1-4f0f-9f91-a1b598a8150b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(leaving these comments to illustrate what you can't figure out from the name of the function)\n",
        "createdAt" : "2015-09-18T18:19:47Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0a47ce67-b73a-479c-a35b-40dd20ccaa8b",
        "parentId" : "42f107b0-20e1-4f0f-9f91-a1b598a8150b",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "again, master knows nothing of etcd. so installed clearly means resources that the master/apiserver knows about and exports.\n",
        "createdAt" : "2015-09-18T19:20:35Z",
        "updatedAt" : "2015-09-21T22:57:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9efac68c34a0968255b480898490033250e1a7",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +875,879 @@}\n\n// ListThirdPartyResources lists all currently installed third party resources\nfunc (m *Master) ListThirdPartyResources() []string {\n\tm.thirdPartyResourcesLock.RLock()"
  },
  {
    "id" : "ac8b6d59-a4ec-4993-bfc8-d4772d7d94fb",
    "prId" : 13182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a3c165-d899-412c-a81f-b71e5c6142f1",
        "parentId" : null,
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "Not that you edited this line, but should we change it to scaler instead of controller, since we are creating a scale object?\n",
        "createdAt" : "2015-08-27T04:18:22Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      },
      {
        "id" : "a47ac68b-bedf-4ee5-8b17-9ee3874ff56b",
        "parentId" : "d8a3c165-d899-412c-a81f-b71e5c6142f1",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "We should not address this in this PR as it's out of scope but feel free to send a followup. I agree the name is confusing, but I don't have context on why it was picked.\n",
        "createdAt" : "2015-08-27T05:13:37Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "eb808918-00ca-4ff9-bf2b-45f84dcafd67",
        "parentId" : "d8a3c165-d899-412c-a81f-b71e5c6142f1",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "This doesn't create a scale object I don't think. This creates a scale subpath on certain resources e.g.:\n\n/api/v1/namespace/foo/replicationcontroller/bar/scale\n",
        "createdAt" : "2015-08-27T05:34:54Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9a52d8af1cd194b111ffedfe118fd65123130b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +824,828 @@// experimental returns the resources and codec for the experimental api\nfunc (m *Master) experimental(c *Config) *apiserver.APIGroupVersion {\n\tcontrollerStorage := expcontrolleretcd.NewStorage(c.ExpDatabaseStorage)\n\tautoscalerStorage := horizontalpodautoscaleretcd.NewREST(c.ExpDatabaseStorage)\n\tthirdPartyResourceStorage := thirdpartyresourceetcd.NewREST(c.ExpDatabaseStorage)"
  },
  {
    "id" : "e2e200e7-739b-464a-b094-9689c82bc725",
    "prId" : 13182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3db37b0-82c7-475f-a4ec-83d55b80ab2c",
        "parentId" : null,
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "nit: why do some entries have strings.ToLower while some don't?\n",
        "createdAt" : "2015-08-27T04:20:07Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      },
      {
        "id" : "cfde675f-500c-4f17-9e87-eb08d3879487",
        "parentId" : "c3db37b0-82c7-475f-a4ec-83d55b80ab2c",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "This is part of #13181 and fixed there.\n",
        "createdAt" : "2015-08-27T05:14:49Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9a52d8af1cd194b111ffedfe118fd65123130b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +834,838 @@\t\tstrings.ToLower(\"replicationControllers\"):       controllerStorage.ReplicationController,\n\t\tstrings.ToLower(\"replicationControllers/scale\"): controllerStorage.Scale,\n\t\tstrings.ToLower(\"horizontalpodautoscalers\"):     autoscalerStorage,\n\t\tstrings.ToLower(\"thirdpartyresources\"):          thirdPartyResourceStorage,\n\t\tstrings.ToLower(\"daemonsets\"):                   daemonSetStorage,"
  },
  {
    "id" : "043f2af7-28bd-480d-835e-0e94f931ebc3",
    "prId" : 13000,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df0de57a-2deb-4f6f-96ac-66a417e57dda",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@lavalamp, third party APIs will be registered at /thirdparty/group/version/..., rather than under the same prefix (/apis per our discussion yesterday) of other APIs. Do you think this is ok?\n",
        "createdAt" : "2015-08-27T21:12:58Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f4a52ff9-0cb2-465d-8d12-484311c083fb",
        "parentId" : "df0de57a-2deb-4f6f-96ac-66a417e57dda",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "This is what was already discussed and agreed on in the context of the [design doc](https://github.com/kubernetes/kubernetes/blob/master/docs/design/extending-api.md) I would rather not revisit it.\n",
        "createdAt" : "2015-08-28T03:23:42Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "1c61eb52-4ad7-49b9-acab-0b1908d47551",
        "parentId" : "df0de57a-2deb-4f6f-96ac-66a417e57dda",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ok. Thanks.\n",
        "createdAt" : "2015-08-28T17:00:34Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b5880a81-9d61-4514-a4d3-60c67e4bac3e",
        "parentId" : "df0de57a-2deb-4f6f-96ac-66a417e57dda",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@brendandburns, after in-person discussion with @bgrant0607 and @lavalamp, we think thirdparty APIs should also be registered under prefix apis/, and we should stuff the \"stable\"/\"experimental\" into the group name. \n\nFor the example in the design doc, the ThirdPartyResource config file should be:\n\n``` yaml\nmetadata:\n  name: cron-tab\napiVersion: experimental/v1\nkind: ThirdPartyResource\ndescription: \"A specification of a Pod to run on a cron style schedule\"\nversions:\n  - name: stable.example.com/v1\n  - name: experimental.example.com/v2\n```\n\nThen the API server will program in two new RESTful resource paths:\n- `/apis/stable.example.com/v1/namespaces/<namespace>/crontabs/...`\n- `/apis/experimental.example.com/v2/namespaces/<namespace>/crontabs/...`\n\nDo you think it's reasonable?\n\nSorry for the repeated labor. I can send a PR to patch the design doc if you agree on the new design.\n",
        "createdAt" : "2015-08-29T00:29:59Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "acc44ab7-bd95-463b-aaa3-45be55c1d5bd",
        "parentId" : "df0de57a-2deb-4f6f-96ac-66a417e57dda",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "You could wait to change it until after #12951 settles.\n",
        "createdAt" : "2015-08-29T00:35:28Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa7ce268993bf1fdc8bba502d554431840d7ed0",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +791,795 @@\tresourceStorage := thirdpartyresourcedataetcd.NewREST(m.thirdPartyStorage, group, kind)\n\n\tapiRoot := \"/thirdparty/\" + group + \"/\"\n\n\tstorage := map[string]rest.Storage{"
  },
  {
    "id" : "30bfaece-5d86-4db4-8244-a2e0e331edfd",
    "prId" : 13000,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66559688-2122-48c1-8c6a-0a50fa78317c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The version here is populated from ThirdPartyResource.Versions[0].NAME. I think it should be using ThirdPartyResource.APIVersion instead.\n",
        "createdAt" : "2015-08-27T22:07:45Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "3485df8c-391f-462e-b192-47ab1c2f1a50",
        "parentId" : "66559688-2122-48c1-8c6a-0a50fa78317c",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "That isn't correct, that is the APIVersion of the `ThirdPartyResource` object itself, not the version of the API described by the `ThirdPartyResource` object.\n",
        "createdAt" : "2015-08-28T03:16:53Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "d58d7af2-6f32-4820-822a-f76cf43ba8aa",
        "parentId" : "66559688-2122-48c1-8c6a-0a50fa78317c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "You are right.\nThen we need to modify this line: https://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/api_installer.go#L132, here kind = ThirdPartyResourceData. If ThirdPartyResource.Versions[0].NAME is different from the versions supported by experimental group, this causes error. See https://github.com/kubernetes/kubernetes/pull/13000/files#r38152090.\n",
        "createdAt" : "2015-08-28T17:16:54Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "14c76185-7418-40ad-ac72-27eef787e5bf",
        "parentId" : "66559688-2122-48c1-8c6a-0a50fa78317c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "this line has the same problem:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/apiserver/api_installer.go#L126\n",
        "createdAt" : "2015-08-28T17:47:05Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "c55c7239-836e-414a-aac5-774356f42e7a",
        "parentId" : "66559688-2122-48c1-8c6a-0a50fa78317c",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Ok, update the wrapper files appropriately to handle this.  And switched the test to use both `v1` and `v3` to validate.\n",
        "createdAt" : "2015-09-01T05:40:28Z",
        "updatedAt" : "2015-09-01T19:26:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa7ce268993bf1fdc8bba502d554431840d7ed0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +808,812 @@\t\tLinker:  explatest.SelfLinker,\n\t\tStorage: storage,\n\t\tVersion: version,\n\n\t\tAdmit:   m.admissionControl,"
  },
  {
    "id" : "90f73c81-06c0-4267-b793-52a0191a407c",
    "prId" : 12217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aabd6bf0-5163-47d0-80b8-b9a0c3d509e7",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why use camelCase and then ToLower? Why not just use lowercase?\n",
        "createdAt" : "2015-08-07T00:44:54Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "acf87cb0-2d3a-4381-ab82-9874279be536",
        "parentId" : "aabd6bf0-5163-47d0-80b8-b9a0c3d509e7",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "ToLower - so that the next person who adds something here knows that it should all in lowercase. \nCamelCase - followed the pattern from https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/master/master.go#L477. Can put all in lowercase if you prefer.\n",
        "createdAt" : "2015-08-07T09:17:25Z",
        "updatedAt" : "2015-08-07T10:00:57Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "91584c6b3b971b1bc257b5f91f4138db7122d6b6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +782,786 @@\tcontrollerStorage := expcontrolleretcd.NewStorage(c.DatabaseStorage)\n\tstorage := map[string]rest.Storage{\n\t\tstrings.ToLower(\"replicationControllers\"):        controllerStorage.ReplicationController,\n\t\tstrings.ToLower(\"replicationControllers/scaler\"): controllerStorage.Scale,\n\t}"
  },
  {
    "id" : "f549dc6e-bbfe-4f8c-9ed3-e0f787fff5e2",
    "prId" : 12001,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01d104dc-f477-40fc-a6ed-0530836dac23",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is there a reason why this duplicated code can't be factored out into a helper function?\n",
        "createdAt" : "2015-07-30T03:42:41Z",
        "updatedAt" : "2015-07-31T01:33:01Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "ec5368fc-cbcc-4719-8348-c82645c1d336",
        "parentId" : "01d104dc-f477-40fc-a6ed-0530836dac23",
        "authorId" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "body" : "It would have to be split into two helper functions, one version-specific and one group-specific. That saves 2 lines for the version-specific branch then 2 lines in the group-specific code, but you just add that back somewhere else in the function declarations. Doing it as a single function with some kind of config isn't really any better. It doesn't look like it will bring any benefit.\n",
        "createdAt" : "2015-07-30T21:31:59Z",
        "updatedAt" : "2015-07-31T01:33:01Z",
        "lastEditedBy" : "271eaec2-9b46-49fe-bdc0-d8b872fb4008",
        "tags" : [
        ]
      }
    ],
    "commit" : "58a875ac2c2e5cf1990c0b53cfaff4580f14b4ae",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +573,577 @@\tapiserver.InstallServiceErrorHandler(m.handlerContainer, requestInfoResolver, apiVersions)\n\n\tif m.exp {\n\t\texpVersion := m.expapi(c)\n\t\tif err := expVersion.InstallREST(m.handlerContainer); err != nil {"
  },
  {
    "id" : "937242b9-bc7a-4e7b-87a6-fbde90ba7516",
    "prId" : 9834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "683127e2-0fd3-4ad3-8ac9-81d478e2833e",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "Why not move this sleep into the util.Until call?\n",
        "createdAt" : "2015-06-16T00:23:54Z",
        "updatedAt" : "2015-06-16T00:29:14Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      },
      {
        "id" : "9d8f45f4-e81d-404c-8c1d-b3bbdf98a074",
        "parentId" : "683127e2-0fd3-4ad3-8ac9-81d478e2833e",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "util.Until doesn't allow me to sleep before my func(), which is what I want to do here.\n",
        "createdAt" : "2015-06-16T00:26:37Z",
        "updatedAt" : "2015-06-16T00:29:14Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "66fb8ccb028e9228a57eec3dc4f1d398dc4d48f0",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +860,864 @@\t// TODO: could make this more controller-ish\n\tgo util.Until(func() {\n\t\ttime.Sleep(5 * time.Minute)\n\t\tif err := m.refreshTunnels(user, keyfile); err != nil {\n\t\t\tglog.Errorf(\"Failed to refresh SSH Tunnels: %v\", err)"
  },
  {
    "id" : "260c9c13-18eb-49db-a753-bfaf40239b7d",
    "prId" : 9370,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8288b793-79c1-4924-a499-1e8f3a733461",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "at least on my machines /proc/sys/net/ipv4/ip_local_port_range includes 32768, so I think this was right before.\n",
        "createdAt" : "2015-06-06T21:35:37Z",
        "updatedAt" : "2015-06-08T22:03:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "96fa0c3f-3ac9-456c-aa3d-df4739068df4",
        "parentId" : "8288b793-79c1-4924-a499-1e8f3a733461",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I was actually going off the error message printed in #9318:\n\n```\n Node port range unspecified. Defaulting to 30000-32766.\n```\n\n30000-30000 have size 1, because they're both inclusive.  So I _think_ that Size=2768 includes 32767 but not 32768.\n\nI'll add a unit test or something so we don't have to spend brain cycles thinking about it :-)  (It's too bad golang doesn't have asserts!)\n",
        "createdAt" : "2015-06-06T22:02:41Z",
        "updatedAt" : "2015-06-08T22:03:44Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "85cb85e1-1009-4212-a177-8f1692cb3ebf",
        "parentId" : "8288b793-79c1-4924-a499-1e8f3a733461",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "of course, you are correct.\n",
        "createdAt" : "2015-06-06T22:12:40Z",
        "updatedAt" : "2015-06-08T22:03:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f3879e3bbc4bb279c552f3f50c18d10085e048c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +248,252 @@\t\t// but then that breaks the strict nestedness of ServiceType.\n\t\t// Review post-v1\n\t\tdefaultServiceNodePortRange := util.PortRange{Base: 30000, Size: 2768}\n\t\tc.ServiceNodePortRange = defaultServiceNodePortRange\n\t\tglog.Infof(\"Node port range unspecified. Defaulting to %v.\", c.ServiceNodePortRange)"
  },
  {
    "id" : "a5cf413c-5915-498a-8918-0de1359e0fec",
    "prId" : 8649,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb3e7d49-bd40-43e8-9464-09925fe94ce2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I kinda dislike that ChooseHostInterface() is getting called in multiple places now: the one you added in cmd/kube-apiserver/app/server.go and the existing one in pkg/master/master.go.  Is it safe to get rid of the one in master,go and just say that PublicAddress is required?  I wonder if that will break tests.\n",
        "createdAt" : "2015-05-22T16:06:09Z",
        "updatedAt" : "2015-06-02T22:23:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "bfc7724e-5379-4186-8ab7-45dfb34068d2",
        "parentId" : "eb3e7d49-bd40-43e8-9464-09925fe94ce2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Oopps, I read further and saw you did this and then reverted.\n",
        "createdAt" : "2015-05-22T16:06:43Z",
        "updatedAt" : "2015-06-02T22:23:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "abc64f4e-cd11-4cb4-8992-c221232c1761",
        "parentId" : "eb3e7d49-bd40-43e8-9464-09925fe94ce2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Could we move the verifyAdvertiseAddress() logic into master.go setDefaults() ?  That way it's all in one core place.\n",
        "createdAt" : "2015-05-22T16:07:53Z",
        "updatedAt" : "2015-06-02T22:23:48Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "234ccc13-2937-4c7a-ae33-51cbec4aa276",
        "parentId" : "eb3e7d49-bd40-43e8-9464-09925fe94ce2",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Okay. I changed it back closer to what it was before. The apiserver will set advertise-address = bind-address if advertise-address was unset. Then master.go setDefaults() will do the util.ChooseHostInterface() dance as it does currently if advertise-address is still 0.0.0.0.\n",
        "createdAt" : "2015-05-22T17:55:50Z",
        "updatedAt" : "2015-06-02T22:23:48Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "934c553c0407a1348849918ee3461c17a7aae153",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +128,132 @@\t// PublicAddress is the IP address where members of the cluster (kubelet,\n\t// kube-proxy, services, etc.) can reach the master.\n\t// If nil or 0.0.0.0, the host's default interface will be used.\n\tPublicAddress net.IP\n"
  },
  {
    "id" : "8352eb83-2da1-44cd-81a8-206373dbdc90",
    "prId" : 7969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba85d2f3-8538-4662-9453-1ed32d3e5b66",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is there a general problem to be solved with strings.Contains(k, \"/\")?\n",
        "createdAt" : "2015-05-08T19:07:23Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "884997c6-5d2f-4efd-aeb4-659426f9e075",
        "parentId" : "ba85d2f3-8538-4662-9453-1ed32d3e5b66",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It would probably take a regex - I don't want minions or any of their sub resources.\n\n----- Original Message -----\n\n> > @@ -671,7 +671,7 @@ func (m *Master) api_v1beta2()\n> > *apiserver.APIGroupVersion {\n> >  func (m *Master) api_v1beta3() *apiserver.APIGroupVersion {\n> >     storage := make(map[string]rest.Storage)\n> >     for k, v := range m.storage {\n> > -       if k == \"minions\" {\n> > -       if k == \"minions\" || k == \"minions/status\" {\n> \n> Is there a general problem to be solved with strings.Contains(k, \"/\")?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7969/files#r29967768\n",
        "createdAt" : "2015-05-08T19:40:37Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3a31913f-10bc-46d1-8ab8-a3a22bc99ec1",
        "parentId" : "ba85d2f3-8538-4662-9453-1ed32d3e5b66",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah-- gotcha. nvm then.\n",
        "createdAt" : "2015-05-08T19:41:31Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbca9eb171b9a1f978b9676595db1dac181fa90",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +712,716 @@\tstorage := make(map[string]rest.Storage)\n\tfor k, v := range m.storage {\n\t\tif k == \"minions\" || k == \"minions/status\" {\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "40890df6-147d-48b5-8f9e-de7f998439ac",
    "prId" : 7704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ca3080-55d4-4728-9d93-3af2f712da63",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "What's the benefit of hardcoding the kubernetes/kubernetes-ro service IPs vs just letting them be selected by the normal allocation method?\n\nIf we're concerned enough about them being deleted that we regularly ensure their existence, should we also be mildly concerned about another service being randomly allocated one of these IPs between when the kubernetes service gets deleted and re-created by the reconciler?\n",
        "createdAt" : "2015-05-04T23:52:30Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      },
      {
        "id" : "595ae496-c402-48be-acf7-85dffbe7b4e3",
        "parentId" : "35ca3080-55d4-4728-9d93-3af2f712da63",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On May 4, 2015, at 7:52 PM, Alex Robinson notifications@github.com wrote:\n> \n> In pkg/master/master.go:\n> \n> > ```\n> > if err != nil {\n> >     glog.Fatalf(\"Failed to generate service read-only IP for master service: %v\", err)\n> > }\n> > ```\n> > -   serviceReadWriteIP, err := service.GetIndexedIP(c.PortalNet, 2)\n> > -   serviceReadWriteIP, err := ipallocator.GetIndexedIP(c.PortalNet, 2)\n> >   What's the benefit of hardcoding the kubernetes/kubernetes-ro service IPs vs just letting them be selected by the normal allocation method?\n> \n> Was a @thockin choice, I think it's somewhat arbitrary and random allocation is probably superior.\n> If we're concerned enough about them being deleted that we regularly ensure their existence, should we also be mildly concerned about another service being randomly allocated one of these IPs between when the kubernetes service gets deleted and re-created by the reconciler?\n> \n> We should.\n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-05-05T00:58:55Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "be421bb8-8efd-40fa-9ba5-77c64c6be667",
        "parentId" : "35ca3080-55d4-4728-9d93-3af2f712da63",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "#3618 and #2410 - if we randomly allocate these, we risk (very small but non-zero) using the same IP we need for DNS.\n",
        "createdAt" : "2015-05-06T06:23:46Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bbb64cd8bb225bc725e8577b66264a867280502",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +285,289 @@\t\tglog.Fatalf(\"Failed to generate service read-only IP for master service: %v\", err)\n\t}\n\tserviceReadWriteIP, err := ipallocator.GetIndexedIP(c.PortalNet, 2)\n\tif err != nil {\n\t\tglog.Fatalf(\"Failed to generate service read-write IP for master service: %v\", err)"
  },
  {
    "id" : "2ef27d55-561f-40bd-9e80-29e96b4adcba",
    "prId" : 7704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e752576-1803-4913-8c37-886eccc53957",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "When is this ever not true?  Isn't the more common pattern to have the caller call .Run() or something?\n",
        "createdAt" : "2015-05-07T18:55:11Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e8fc60e8-83c8-4cbd-a209-10bc79703249",
        "parentId" : "7e752576-1803-4913-8c37-886eccc53957",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Didn't want to duplicate the core controller run.start in all of the possible integration tests.  The use case is Openshift, which wants to get the core controllers object and then tweak a couple of things before calling Start.  No other use case beyond that.\n\n> On May 7, 2015, at 2:55 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/master/master.go:\n> \n> > @@ -78,13 +80,15 @@ const (\n> > \n> >  // Config is a structure used to configure a Master.\n> >  type Config struct {\n> > -   EtcdHelper        tools.EtcdHelper\n> > -   EventTTL          time.Duration\n> > -   MinionRegexp      string\n> > -   KubeletClient     client.KubeletClient\n> > -   PortalNet         *net.IPNet\n> > -   EnableLogsSupport bool\n> > -   EnableUISupport   bool\n> > -   EtcdHelper    tools.EtcdHelper\n> > -   EventTTL      time.Duration\n> > -   MinionRegexp  string\n> > -   KubeletClient client.KubeletClient\n> > -   PortalNet     *net.IPNet\n> > -   // allow downstream consumers to disable the core controller loops\n> > -   EnableCoreControllers bool\n> >   When is this ever not true? Isn't the more common pattern to have the caller call .Run() or something?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-05-07T18:59:04Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9654ac9c-199e-45d1-b8e2-4b648dd78b1c",
        "parentId" : "7e752576-1803-4913-8c37-886eccc53957",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I really dislike that we have 5 different patterns around this.  How do we unify this longer term.\n",
        "createdAt" : "2015-05-07T20:18:00Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "105e2129-3b4f-45fb-8b17-7c5b90a59ce8",
        "parentId" : "7e752576-1803-4913-8c37-886eccc53957",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Break the master up instead of making it this monolithic class?\n\n----- Original Message -----\n\n> > @@ -78,13 +80,15 @@ const (\n> > \n> >  // Config is a structure used to configure a Master.\n> >  type Config struct {\n> > -   EtcdHelper        tools.EtcdHelper\n> > -   EventTTL          time.Duration\n> > -   MinionRegexp      string\n> > -   KubeletClient     client.KubeletClient\n> > -   PortalNet         *net.IPNet\n> > -   EnableLogsSupport bool\n> > -   EnableUISupport   bool\n> > -   EtcdHelper    tools.EtcdHelper\n> > -   EventTTL      time.Duration\n> > -   MinionRegexp  string\n> > -   KubeletClient client.KubeletClient\n> > -   PortalNet     *net.IPNet\n> > -   // allow downstream consumers to disable the core controller loops\n> > -   EnableCoreControllers bool\n> \n> I really dislike that we have 5 different patterns around this.  How do we\n> unify this longer term.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7704/files#r29891511\n",
        "createdAt" : "2015-05-07T20:20:16Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5cd0547c-5318-4ea9-9dac-613d1670f290",
        "parentId" : "7e752576-1803-4913-8c37-886eccc53957",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Imeant that through the codebase we have many such \"create object, launch its goroutines\" operations and we are not at all consistent about how we do that.  It just makes code harder to figure out.\n",
        "createdAt" : "2015-05-07T20:52:50Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "afd7dc57-c683-47e6-a596-78158eb89330",
        "parentId" : "7e752576-1803-4913-8c37-886eccc53957",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I agree.\n\n----- Original Message -----\n\n> > @@ -78,13 +80,15 @@ const (\n> > \n> >  // Config is a structure used to configure a Master.\n> >  type Config struct {\n> > -   EtcdHelper        tools.EtcdHelper\n> > -   EventTTL          time.Duration\n> > -   MinionRegexp      string\n> > -   KubeletClient     client.KubeletClient\n> > -   PortalNet         *net.IPNet\n> > -   EnableLogsSupport bool\n> > -   EnableUISupport   bool\n> > -   EtcdHelper    tools.EtcdHelper\n> > -   EventTTL      time.Duration\n> > -   MinionRegexp  string\n> > -   KubeletClient client.KubeletClient\n> > -   PortalNet     *net.IPNet\n> > -   // allow downstream consumers to disable the core controller loops\n> > -   EnableCoreControllers bool\n> \n> Imeant that through the codebase we have many such \"create object, launch its\n> goroutines\" operations and we are not at all consistent about how we do\n> that.  It just makes code harder to figure out.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7704/files#r29894785\n",
        "createdAt" : "2015-05-07T20:55:29Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bbb64cd8bb225bc725e8577b66264a867280502",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +87,91 @@\tPortalNet     *net.IPNet\n\t// allow downstream consumers to disable the core controller loops\n\tEnableCoreControllers bool\n\tEnableLogsSupport     bool\n\tEnableUISupport       bool"
  },
  {
    "id" : "b8c6dbb0-3a65-4f14-aa1f-e140fc617bd9",
    "prId" : 7704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "unexport this?\n",
        "createdAt" : "2015-05-07T19:58:33Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3faee503-1574-40ca-ac27-e53f095809f9",
        "parentId" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's what we would use to get the default implementation to tweak.\n\nI.e. OpenShift says:\n\n```\nm := master.New(config)\nc := m.NewBootstrapController()\nc.<some stuff> = <some other stuff>\nc.Run()\n\n----- Original Message -----\n> > @@ -544,7 +554,34 @@ func (m *Master) init(c *Config) {\n> >     }\n> >  \n> >     // TODO: Attempt clean shutdown?\n> > -   m.masterServices.Start()\n> > +   if m.enableCoreControllers {\n> > +       m.NewBootstrapController().Start()\n> > +   }\n> > +}\n> > +\n> > +// NewBootstrapController returns a controller for watching the core\n> > capabilities of the master.\n> > +func (m *Master) NewBootstrapController() *Controller {\n> \n> unexport this?\n> \n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7704/files#r29889869\n```\n",
        "createdAt" : "2015-05-07T20:01:08Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "86f9f664-26f6-458a-91d7-fab377de2843",
        "parentId" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I see.  I am sympathetic, but I want to be really careful about leaving debris around the kube codebase to accomodate out-of-tree stuff.  This is the sort of thing that is easily broken when some static analysis tool says \"hey this could be private\" and then we change it.\n",
        "createdAt" : "2015-05-07T20:20:23Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e5874722-30e2-4872-a9b1-14987f794df3",
        "parentId" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If the master was inverted (sets of simple overlapping functionality brought together by a common, simple initializer) you wouldn't get the warning.  It's really just that the master is designed as the blackhole that sucks in all other function, which means there is no opportunity to consume it flexibly.  I don't want to make the master a leaky box, I really would just prefer it be composed better (for pure code cleanliness) which also would have the benefit that an opinionated customizer could do a bit more with it without having to carry patches.  I think the Hyperkube consumption use case is almost exactly the openshift use case, with just a slight variation on arguments.\n\n----- Original Message -----\n\n> > @@ -544,7 +554,34 @@ func (m *Master) init(c *Config) {\n> >     }\n> > \n> > ```\n> > // TODO: Attempt clean shutdown?\n> > ```\n> > -   m.masterServices.Start()\n> > -   if m.enableCoreControllers {\n> > -       m.NewBootstrapController().Start()\n> > -   }\n> >   +}\n> >   +\n> >   +// NewBootstrapController returns a controller for watching the core\n> >   capabilities of the master.\n> >   +func (m *Master) NewBootstrapController() *Controller {\n> \n> I see.  I am sympathetic, but I want to be really careful about leaving\n> debris around the kube codebase to accomodate out-of-tree stuff.  This is\n> the sort of thing that is easily broken when some static analysis tool says\n> \"hey this could be private\" and then we change it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7704/files#r29891728\n",
        "createdAt" : "2015-05-07T20:28:43Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "63e3b3d2-50e3-4223-9dc3-e53f32d7a92e",
        "parentId" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Daniel mentioned that this came up before - if you want to ensure these symbols stay exported, you should leave a comment here and should probably have a test that checks it.  tests/openshift/symbols_test.go ?\n",
        "createdAt" : "2015-05-07T20:36:18Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "28a6db0c-35fc-466b-9067-ab3e39168c88",
        "parentId" : "c67b480d-2fa9-452e-bfa1-3bde83612cab",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Sure.\n\n----- Original Message -----\n\n> > @@ -544,7 +554,34 @@ func (m *Master) init(c *Config) {\n> >     }\n> > \n> > ```\n> > // TODO: Attempt clean shutdown?\n> > ```\n> > -   m.masterServices.Start()\n> > -   if m.enableCoreControllers {\n> > -       m.NewBootstrapController().Start()\n> > -   }\n> >   +}\n> >   +\n> >   +// NewBootstrapController returns a controller for watching the core\n> >   capabilities of the master.\n> >   +func (m *Master) NewBootstrapController() *Controller {\n> \n> Daniel mentioned that this came up before - if you want to ensure these\n> symbols stay exported, you should leave a comment here and should probably\n> have a test that checks it.  tests/openshift/symbols_test.go ?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7704/files#r29893214\n",
        "createdAt" : "2015-05-07T20:37:23Z",
        "updatedAt" : "2015-05-08T20:04:16Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bbb64cd8bb225bc725e8577b66264a867280502",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +564,568 @@\n// NewBootstrapController returns a controller for watching the core capabilities of the master.\nfunc (m *Master) NewBootstrapController() *Controller {\n\treturn &Controller{\n\t\tNamespaceRegistry: m.namespaceRegistry,"
  },
  {
    "id" : "dd929eb3-a3d6-46fc-8d12-3347c9df48d2",
    "prId" : 5054,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02ebf310-908c-4494-a2f0-32271bc252d1",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "API and path LGTM.\n",
        "createdAt" : "2015-03-05T20:40:31Z",
        "updatedAt" : "2015-03-09T19:45:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfc19185f5de9325bb2c3cbfc2ffc3ea8f9490f0",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +407,411 @@\t\t\"pods\":         podStorage,\n\t\t\"pods/status\":  podStatusStorage,\n\t\t\"pods/binding\": bindingStorage,\n\t\t\"bindings\":     bindingStorage,\n"
  },
  {
    "id" : "21e6c18e-e773-4fa0-82e7-0c9e7072b407",
    "prId" : 4352,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48a9e04c-b690-435b-bd20-f8d9b6c30e8a",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a comment that this is exposed so that downstream projects can provide their own mappers\n",
        "createdAt" : "2015-02-12T23:49:54Z",
        "updatedAt" : "2015-02-13T01:58:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "58ff49cf-6367-4d25-92f0-e872b32af034",
        "parentId" : "48a9e04c-b690-435b-bd20-f8d9b6c30e8a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "done\n",
        "createdAt" : "2015-02-13T02:01:43Z",
        "updatedAt" : "2015-02-13T02:01:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "083ce268e02a4cf22cbb27fe172d42fef88c2d49",
    "line" : null,
    "diffHunk" : "@@ -1,1 +91,95 @@\n\t// Map requests to contexts. Exported so downstream consumers can provider their own mappers\n\tRequestContextMapper api.RequestContextMapper\n\n\t// If specified, all web services will be registered into this container"
  },
  {
    "id" : "39c5babf-adb7-419a-8125-e8159bf6999c",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40d1e7b5-0d3d-46dc-bb6d-717831ead5a7",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why are these not just in the map?\n",
        "createdAt" : "2015-02-13T23:09:58Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "99859d1c-9762-4ff4-ab44-af777825f2fe",
        "parentId" : "40d1e7b5-0d3d-46dc-bb6d-717831ead5a7",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Hmm. Ok. I see their other uses. I suppose this is better than a map of registries in that it let's us know which are actually used.\n",
        "createdAt" : "2015-02-13T23:23:05Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "028a87ec-df5a-44e1-8d3a-84118da6d072",
        "parentId" : "40d1e7b5-0d3d-46dc-bb6d-717831ead5a7",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Some comments about what they are used for would be awesome.\n",
        "createdAt" : "2015-02-13T23:23:30Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "67430f84-d7bc-42fe-9126-ca82828aabde",
        "parentId" : "40d1e7b5-0d3d-46dc-bb6d-717831ead5a7",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The more they flatten the less interplay there should be (other than reuse by loop code for efficiency)\n\n> On Feb 13, 2015, at 6:23 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/master/master.go:\n> \n> > @@ -157,6 +146,13 @@ type Master struct {\n> >     serviceReadWritePort int\n> >     masterServices       *util.Runner\n> > -   storage map[string]apiserver.RESTStorage\n> >   +\n> > -   nodeRegistry      minion.Registry\n> >   Hmm. Ok. I see their other uses. I suppose this is better than a map of registries in that it let's us know which are actually used.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-13T23:24:57Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da3b44244b2d9ecb5a650334aec7528808ff6f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +153,157 @@\t// TODO: define the internal typed interface in a way that clients can\n\t// also be replaced\n\tnodeRegistry      minion.Registry\n\tnamespaceRegistry generic.Registry\n\tserviceRegistry   service.Registry"
  },
  {
    "id" : "58e00ad0-1009-4ef6-988e-987dbedd2de4",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8a2051b-b4ed-49b0-87ae-47b491b26566",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What disadvantage is there in using a single registry for everything?\n",
        "createdAt" : "2015-02-13T23:12:15Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b3dcf087-4afa-49fb-817e-90f795fd0501",
        "parentId" : "b8a2051b-b4ed-49b0-87ae-47b491b26566",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It was splitting replication controller registry/rest/storage from service.  Advantage is they can be coupled independently.\n\n> On Feb 13, 2015, at 6:12 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/master/master.go:\n> \n> > @@ -376,34 +361,49 @@ func logStackOnRecover(panicReason interface{}, httpWriter http.ResponseWriter)\n> >  // init initializes master.\n> >  func (m *Master) init(c *Config) {\n> > -   nodeRESTStorage := minion.NewREST(m.minionRegistry)\n> > -   boundPodFactory := &pod.BasicBoundPodFactory{}\n> > -   podStorage, bindingStorage := podetcd.NewREST(c.EtcdHelper, boundPodFactory)\n> > -   podRegistry := pod.NewRegistry(podStorage)\n> >   +\n> > -   eventRegistry := event.NewEtcdRegistry(c.EtcdHelper, uint64(c.EventTTL.Seconds()))\n> > -   limitRangeRegistry := limitrange.NewEtcdRegistry(c.EtcdHelper)\n> > -   resourceQuotaRegistry := resourcequota.NewEtcdRegistry(c.EtcdHelper)\n> > -   m.namespaceRegistry = namespace.NewEtcdRegistry(c.EtcdHelper)\n> >   +\n> > -   // TODO: split me up into distinct storage registries\n> >   What disadvantage is there in using a single registry for everything?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-13T23:16:22Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da3b44244b2d9ecb5a650334aec7528808ff6f",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +375,379 @@\tm.namespaceRegistry = namespace.NewEtcdRegistry(c.EtcdHelper)\n\n\t// TODO: split me up into distinct storage registries\n\tregistry := etcd.NewRegistry(c.EtcdHelper, podRegistry)\n"
  },
  {
    "id" : "def24596-1be6-45ce-9825-d593a1e4f915",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e00ec7-e3d2-4403-bc1d-4c2273e42e0a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Actually, my goal is to entirely nuke the current podCache once all components send their status to the apiserver.\n\nI expect we'll eventually need a different kind of cache. I'd like a generic cache in either apiserver or the registry to keep all objects up to date in memory. GET should never hit etcd directly. But I'm not sure whether we need this yet.\n",
        "createdAt" : "2015-02-13T23:20:34Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "020525e3-2199-4349-92c0-37f987f14385",
        "parentId" : "a9e00ec7-e3d2-4403-bc1d-4c2273e42e0a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Right - I can change the todo to \"remove pod cache\"\n\n> On Feb 13, 2015, at 6:20 PM, Brian Grant notifications@github.com wrote:\n> \n> In pkg/master/master.go:\n> \n> > ```\n> > )\n> > go util.Forever(func() { podCache.UpdateAllContainers() }, m.cacheTimeout)\n> > go util.Forever(func() { podCache.GarbageCollectPodStatus() }, time.Minute*30)\n> > ```\n> > -   // TODO: refactor podCache to sit on top of podStorage via status calls\n> >   Actually, my goal is to entirely nuke the current podCache once all components send their status to the apiserver.\n> \n> I expect we'll eventually need a different kind of cache. I'd like a generic cache in either apiserver or the registry to keep all objects up to date in memory. GET should never hit etcd directly. But I'm not sure whether we need this yet.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-02-13T23:24:22Z",
        "updatedAt" : "2015-02-16T15:09:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "72da3b44244b2d9ecb5a650334aec7528808ff6f",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +393,397 @@\tgo util.Forever(func() { podCache.GarbageCollectPodStatus() }, time.Minute*30)\n\n\t// TODO: refactor podCache to sit on top of podStorage via status calls\n\tpodStorage = podStorage.WithPodStatus(podCache)\n"
  },
  {
    "id" : "932e8d58-a410-4bb6-841f-58b32dc75a00",
    "prId" : 3999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a572d0a-2aaa-4fad-b6e7-b0f14dbbe76d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yuck.  There's no glob in the default router?\n",
        "createdAt" : "2015-01-31T00:46:54Z",
        "updatedAt" : "2015-02-03T23:48:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "48886861-7e2b-4ac9-8685-f76a24d93572",
        "parentId" : "2a572d0a-2aaa-4fad-b6e7-b0f14dbbe76d",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Default router does not accept regular expressions. CurlyRouter does.\nFrom go-restful documentation:\n\n<ul>Configurable router:\n<li>Routing algorithm after JSR311 that is implemented using (but doest not accept) regular expressions (See RouterJSR311 which is used by default)\n<li>Fast routing algorithm that allows static elements, regular expressions and dynamic parameters in the URL path (e.g. /meetings/{id} or /static/{subpath:*}, See CurlyRouter)\n</ul>\n",
        "createdAt" : "2015-01-31T00:51:33Z",
        "updatedAt" : "2015-02-03T23:48:15Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "d123aef6-62c1-48aa-9197-13549d80d862",
        "parentId" : "2a572d0a-2aaa-4fad-b6e7-b0f14dbbe76d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Ah, re-reading Curly is fine.\n",
        "createdAt" : "2015-02-02T20:43:43Z",
        "updatedAt" : "2015-02-03T23:48:15Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "18609e17062ad4a56c3533f80014299815bfee76",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +318,322 @@\t\tm.handlerContainer = NewHandlerContainer(mux)\n\t}\n\t// Use CurlyRouter to be able to use regular expressions in paths. Regular expressions are required in paths for example for proxy (where the path is proxy/{kind}/{name}/{*})\n\tm.handlerContainer.Router(restful.CurlyRouter{})\n\tm.muxHelper = &apiserver.MuxHelper{m.mux, []string{}}"
  },
  {
    "id" : "468c59d9-c672-42ba-9502-3a8442ccf20c",
    "prId" : 3997,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c5568f-444a-4ffd-991f-d3b5abac615c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Did gofmt do this?\n",
        "createdAt" : "2015-01-31T01:07:43Z",
        "updatedAt" : "2015-01-31T03:20:11Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1064b5db-1f8c-47e6-9ffe-a32d935557a1",
        "parentId" : "66c5568f-444a-4ffd-991f-d3b5abac615c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, comments reset the margin on the right items.\n\n----- Original Message -----\n\n> > -   EnableUISupport        bool\n> > -   EnableSwaggerSupport   bool\n> > -   EnableV1Beta3          bool\n> > -   Client            *client.Client\n> > -   Cloud             cloudprovider.Interface\n> > -   EtcdHelper        tools.EtcdHelper\n> > -   EventTTL          time.Duration\n> > -   MinionRegexp      string\n> > -   KubeletClient     client.KubeletClient\n> > -   PortalNet         *net.IPNet\n> > -   EnableLogsSupport bool\n> > -   EnableUISupport   bool\n> > -   // allow downstream consumers to disable swagger\n> > -   EnableSwaggerSupport bool\n> > -   // allow v1beta3 to be conditionally enabled\n> > -   EnableV1Beta3 bool\n> \n> Did gofmt do this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3997/files#r23884082\n",
        "createdAt" : "2015-01-31T01:56:28Z",
        "updatedAt" : "2015-01-31T03:20:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "42175b433ab25ee42140b5c6f84cc542bf69ecc7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +78,82 @@\tEnableSwaggerSupport bool\n\t// allow v1beta3 to be conditionally enabled\n\tEnableV1Beta3 bool\n\t// allow downstream consumers to disable the index route\n\tEnableIndex            bool"
  },
  {
    "id" : "f6a72888-c4fd-4dc4-8235-632428c9ff1e",
    "prId" : 2945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f43c37cb-8299-4d81-9773-e27bb4a87781",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Didn't you want to be able to configure the path at which it's exposed, also?\n",
        "createdAt" : "2014-12-15T20:42:35Z",
        "updatedAt" : "2014-12-15T20:42:35Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a4ac7ee5-28b0-4b0e-98fc-ba37b0f0b21c",
        "parentId" : "f43c37cb-8299-4d81-9773-e27bb4a87781",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It actually turned out better to be the same.  If necessary we can tweak the swagger config in our own code - I exposed the method for now though.\n\n----- Original Message -----\n\n> > @@ -69,11 +69,15 @@ type Config struct {\n> >     PortalNet             *net.IPNet\n> >     EnableLogsSupport     bool\n> >     EnableUISupport       bool\n> > -   EnableSwaggerSupport  bool\n> \n> Didn't you want to be able to configure the path at which it's exposed, also?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/2945/files#r21854923\n",
        "createdAt" : "2014-12-15T20:44:47Z",
        "updatedAt" : "2014-12-15T20:44:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd4135666ec39bc04230669eff83c89c490caab8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +70,74 @@\tEnableLogsSupport     bool\n\tEnableUISupport       bool\n\tEnableSwaggerSupport  bool\n\tAPIPrefix             string\n\tCorsAllowedOriginList util.StringList"
  },
  {
    "id" : "b62dd353-e62f-4dcf-b908-d3de497b1a69",
    "prId" : 2878,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5a3a60-cb94-4375-a072-cc3f6bf1430c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Thank you. :-)\n",
        "createdAt" : "2014-12-12T00:30:53Z",
        "updatedAt" : "2015-01-08T18:01:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fd887df61f890e8d39f6f10624074a0b5e8323f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +497,501 @@\tstorage := make(map[string]apiserver.RESTStorage)\n\tfor k, v := range m.storage {\n\t\tif k == \"minions\" {\n\t\t\tcontinue\n\t\t}"
  },
  {
    "id" : "f6f7dc04-17c9-4da1-bf44-bbd1bd9aa45f",
    "prId" : 2855,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d259971a-59a7-4026-9a7c-b31ed67e2ce4",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Will this work on all platforms? What if there is only an IP address? Will that be used as the Name?\n",
        "createdAt" : "2014-12-11T17:02:06Z",
        "updatedAt" : "2014-12-11T17:02:06Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e9187716-08a2-42d9-843e-17114056b5db",
        "parentId" : "d259971a-59a7-4026-9a7c-b31ed67e2ce4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Yeah, we have a general problem here.  We really need to have both an \"internal\" and \"external\" IP address for minions.  Currently HostIP is only populated with external IP, which doesn't work for these health checks.\n",
        "createdAt" : "2014-12-11T17:51:23Z",
        "updatedAt" : "2014-12-11T17:51:23Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b5546b283e8eaccc3bf1d7f754922305881956",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +430,434 @@\t}\n\tfor ix, node := range nodes.Items {\n\t\tserversToValidate[fmt.Sprintf(\"node-%d\", ix)] = apiserver.Server{Addr: node.Name, Port: 10250, Path: \"/healthz\"}\n\t}\n\treturn serversToValidate"
  },
  {
    "id" : "130e9952-784d-45ea-9712-d3d37276495a",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b46df38-baae-46e9-84e0-e1901872981e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Need to think how third party component plugins can expose their own APIs - do they get rolled into the core API report (i.e. it says Kube core, Kube extended auth, OpenShift core, OpenShift auth, Logging core) or kept separate?\n",
        "createdAt" : "2014-11-11T16:29:01Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6895e1f5-9597-4f8f-8a98-13dd73327b70",
        "parentId" : "4b46df38-baae-46e9-84e0-e1901872981e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "If they're served on different API prefixes, they'll show up under those distinct prefixes in the documentation API and UI.\n",
        "createdAt" : "2014-11-12T07:06:31Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +391,395 @@\t// TODO: Make this optional?\n\t// Enable swagger UI and discovery API\n\tswaggerConfig := swagger.Config{\n\t\tWebServices: m.handlerContainer.RegisteredWebServices(),\n\t\t// TODO: Parameterize the path?"
  },
  {
    "id" : "9870ea4f-5861-4865-8e7c-1ebb8de3ef53",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62b60041-4a66-4ea3-9c94-97ffdd8d14f9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "this functionality already exists in pkg/httplog?\n",
        "createdAt" : "2014-11-13T01:34:26Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dbd7b687-a19d-4f8a-925b-5adf733dd49a",
        "parentId" : "62b60041-4a66-4ea3-9c94-97ffdd8d14f9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "wait, nvm, that's just for when we return non-success http codes.\n",
        "createdAt" : "2014-11-13T01:35:45Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +283,287 @@\n//TODO: Unify with RecoverPanics?\nfunc logStackOnRecover(panicReason interface{}, httpWriter http.ResponseWriter) {\n\tvar buffer bytes.Buffer\n\tbuffer.WriteString(fmt.Sprintf(\"recover from panic situation: - %v\\r\\n\", panicReason))"
  },
  {
    "id" : "6b42495a-2f33-4e3e-8ed9-c7b41ee64a18",
    "prId" : 2282,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05685e1e-c40a-4d55-89b7-1a3cc49371dd",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is every deployer of Kubernetes going to want to this exposed (and at this path)?  This seems like something that is not necessarily a choice every deployer will have to expose.  Same goes for the web UI as well.  \n\nI can track that in a follow up - just registering my discontent with the monolithic nature of master for some of these quasi optional components.\n",
        "createdAt" : "2014-11-13T16:28:21Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d86913e5-675d-4cde-bff7-1d431c4ec0fe",
        "parentId" : "05685e1e-c40a-4d55-89b7-1a3cc49371dd",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I share your discontent. Added TODOs.\n",
        "createdAt" : "2014-11-13T17:39:27Z",
        "updatedAt" : "2014-11-14T16:49:37Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7583e1a643d720f0e9781f6f16d8141ffcf5f77f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +391,395 @@\t// TODO: Make this optional?\n\t// Enable swagger UI and discovery API\n\tswaggerConfig := swagger.Config{\n\t\tWebServices: m.handlerContainer.RegisteredWebServices(),\n\t\t// TODO: Parameterize the path?"
  },
  {
    "id" : "86443e20-d1c4-48e3-8c7a-6ca54dca0bf9",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9988582-169e-4bf1-a243-b47584d4d952",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Add a comment that this is trying to find the first non-loopback network interface.\n",
        "createdAt" : "2014-10-29T15:59:47Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +151,155 @@\t\tc.ReadWritePort = 443\n\t}\n\tif c.PublicAddress == \"\" {\n\t\t// Find and use the first non-loopback address.\n\t\t// TODO: potentially it'd be useful to skip the docker interface if it"
  },
  {
    "id" : "dbae6e14-4bde-440e-8f96-6455133df288",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13fa9d23-d79f-464a-a387-5677e0fff08f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The service writing doesn't work right with more than one master, at the moment.  So, either delete this config option or error if user provides other than 1.\n",
        "createdAt" : "2014-10-29T16:11:01Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "51494954-15d7-4e1e-bb6b-43267c156837",
        "parentId" : "13fa9d23-d79f-464a-a387-5677e0fff08f",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Never mind.  I see that you solved it!\n",
        "createdAt" : "2014-10-29T16:17:04Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : null,
    "diffHunk" : "@@ -1,1 +141,145 @@\t\tc.PortalNet = portalNet\n\t}\n\tif c.MasterCount == 0 {\n\t\t// Clearly, there will be at least one master.\n\t\tc.MasterCount = 1"
  }
]