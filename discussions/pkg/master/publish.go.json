[
  {
    "id" : "7954741f-d19a-4e01-9b3b-f2ca99a5cf83",
    "prId" : 7273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab63332-b4b5-499d-9c40-e4bccc2c91d1",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "The first sentence of your comment (\"setEndpoint sets...\") makes this function sound like it is generic, while the Requirements section makes it clear that really this is only for registering the apiserver services. Can you add that caveat to the first paragraph as well, so people who aren't paying close attention don't get confused and think this should be used for other services?\n",
        "createdAt" : "2015-04-28T06:32:52Z",
        "updatedAt" : "2015-05-05T05:56:22Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "82ee56db-8ca0-41f1-83f2-d71fd5fe40eb",
        "parentId" : "cab63332-b4b5-499d-9c40-e4bccc2c91d1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "first line changed.\n",
        "createdAt" : "2015-05-04T22:22:20Z",
        "updatedAt" : "2015-05-05T05:56:22Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a41a57cfe11d160da1a31b476e2247eef3d006a6",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +141,145 @@//      to be running (m.masterCount).\n//  * setEndpoints is called periodically from all apiservers.\n//\nfunc (m *Master) setEndpoints(serviceName string, ip net.IP, port int) error {\n\tctx := api.NewDefaultContext()"
  },
  {
    "id" : "fb70cd26-9210-498b-ba7e-a93cd10df49a",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "How does another process (like a component plugin) emulate this behavior?  I'd like to discuss the direction for this because we are very dependent on being able to work well with this and the transition plan worries me a bit\n",
        "createdAt" : "2014-10-21T15:17:26Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d89b5aa9-f03f-4f60-ab83-7ec4668ecf2f",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Making apiserver master-elected will make it simpler to maintain coherent\nindexes for validation.\n\nI also don't have a picture of how you would to admission control (quota)\nin a stateless fashion.\n\nAlso, what is going to allocate IP addresses for services?  It seems like\nthe apiserver does that, and it needs state for the next available address?\n\nOn Tue, Oct 21, 2014 at 8:17 AM, Clayton Coleman notifications@github.com\nwrote:\n\n> In pkg/master/publish.go:\n> \n> > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package master\n> > +\n> > +import (\n> > -   \"time\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n> >   +\n> > -   \"github.com/golang/glog\"\n> >   +)\n> >   +\n> >   +func (m *Master) serviceWriterLoop(stop chan struct{}) {\n> \n> How does another process (like a component plugin) emulate this behavior?\n> I'd like to discuss the direction for this because we are very dependent on\n> being able to work well with this and the transition plan worries me a bit\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/1920/files#r19154674\n> .\n",
        "createdAt" : "2014-10-21T15:22:52Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "de380b26-4159-4fb3-8d82-d131fb0eddf9",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "To the ip address allocation: I guess your answer would be that the\nnext-ip-address goes in etcd and is accessed using some kind of lock.\n\nOn Tue, Oct 21, 2014 at 8:22 AM, Eric Tune etune@google.com wrote:\n\n> Making apiserver master-elected will make it simpler to maintain coherent\n> indexes for validation.\n> \n> I also don't have a picture of how you would to admission control (quota)\n> in a stateless fashion.\n> \n> Also, what is going to allocate IP addresses for services?  It seems like\n> the apiserver does that, and it needs state for the next available address?\n> \n> On Tue, Oct 21, 2014 at 8:17 AM, Clayton Coleman <notifications@github.com\n> \n> > wrote:\n> > \n> > In pkg/master/publish.go:\n> > \n> > > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > > +See the License for the specific language governing permissions and\n> > > +limitations under the License.\n> > > +*/\n> > > +\n> > > +package master\n> > > +\n> > > +import (\n> > > -  \"time\"\n> > >   +\n> > > -  \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n> > >   +\n> > > -  \"github.com/golang/glog\"\n> > >   +)\n> > >   +\n> > >   +func (m *Master) serviceWriterLoop(stop chan struct{}) {\n> > \n> > How does another process (like a component plugin) emulate this behavior?\n> > I'd like to discuss the direction for this because we are very dependent on\n> > being able to work well with this and the transition plan worries me a bit\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/1920/files#r19154674\n> > .\n",
        "createdAt" : "2014-10-21T15:26:38Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "788a1210-d41e-4bd2-a265-8ae09fdd0f48",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> On Oct 21, 2014, at 11:23 AM, Eric Tune notifications@github.com wrote:\n> \n> In pkg/master/publish.go:\n> \n> > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package master\n> > +\n> > +import (\n> > -   \"time\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n> >   +\n> > -   \"github.com/golang/glog\"\n> >   +)\n> >   +\n> >   +func (m *Master) serviceWriterLoop(stop chan struct{}) {\n> >   Making apiserver master-elected will make it simpler to maintain coherent indexes for validation. I also don't have a picture of how you would to admission control (quota) in a stateless fashion.\n\nI'm not positive, but admission control seems highly customizable such that I was almost assuming it would be its own plugin controller process.  Not sure admission control belongs in direct path of the apiserver.\n\n> Also, what is going to allocate IP addresses for services? It seems like the apiserver does that, and it needs state for the next available address?\n\nI commented on that issue, but I think allocation can be handled in etcd if necessary.\n\nHow many other allocation problems will we solve in the master?  Shouldn't those be external as well?  Why are endpoints an external controller but service ip allocation isn't?  Seems like we don't have a clear description of what should be part of a stateful master and what shouldn't - any maybe the apiserver bits should be split from that bucket of almost master controlled items.  I'm looking for us to draw some clearer boundaries here and explicitly delineate what makes a master, and it seems very important to be deliberate about that.\n\n> …\n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-10-21T15:46:15Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1368a5d2-148f-409b-bbdd-c56bd673578b",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, I'm not totally opposed to these being in a master object that does with a lock, I just don't know that the blanket master / slave distinction is appropriate yet.  For instance, pods and repl controller writes don't need to go through the master.\n\n> On Oct 21, 2014, at 11:27 AM, Eric Tune notifications@github.com wrote:\n> \n> In pkg/master/publish.go:\n> \n> > +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > +See the License for the specific language governing permissions and\n> > +limitations under the License.\n> > +*/\n> > +\n> > +package master\n> > +\n> > +import (\n> > -   \"time\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api\"\n> >   +\n> > -   \"github.com/golang/glog\"\n> >   +)\n> >   +\n> >   +func (m *Master) serviceWriterLoop(stop chan struct{}) {\n> >   To the ip address allocation: I guess your answer would be that the next-ip-address goes in etcd and is accessed using some kind of lock.\n> >   …\n> >   —\n> >   Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-10-21T15:47:46Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "be2c72c7-977b-4f58-8167-07d23b2b1425",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "So I realized after I left that this comment needed more info. Basically, this is a temporary setup until we genuinely get apiserver running in a pod, at which point they can be \"real\" services.\n",
        "createdAt" : "2014-10-21T17:38:39Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c280c83f-85c4-44a1-be81-df64e449d64d",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "IP address allocation can be handled by maintaining an etcd lock on a key whose name is the IP address being allocated. (exactly the same thing @brendandburns' election code does.)\n",
        "createdAt" : "2014-10-21T17:41:16Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a3ddc89a-7a72-437b-a5bd-aac68ea195e9",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This set of code feels more like a separate object than part of master - the coupling between master and the calls to create/remove these services doesn't seem required.\n\nDo you envision these being part of component plugin registration?  If so why not make this a mini controller object to start with that master launches?\n",
        "createdAt" : "2014-10-21T18:00:11Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "43a88f4c-e04f-4c06-8760-f61d3deb70df",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'll think about that over lunch. Not sure if this code will be long-enough lived for that to be a consideration.\n",
        "createdAt" : "2014-10-21T19:33:44Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2cb06638-ac51-4be6-bcf4-556505876f53",
        "parentId" : "7543428f-b3f8-44ab-9c1e-31e4c48de469",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I guess my answer--which is subject to change--is that the same config that starts the component plugin should also start a service. If everyone really loves the way I'm doing things here, though, I'll extract it into a reusable library (controller?). But I expect all the weird code to go away when we start running apiserver in a pod and can allow the normal mechanism to update its service endpoints.\n",
        "createdAt" : "2014-10-22T01:14:08Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@)\n\nfunc (m *Master) serviceWriterLoop(stop chan struct{}) {\n\tfor {\n\t\t// Update service & endpoint records."
  },
  {
    "id" : "38cc24a2-b67e-48e2-a3c8-acae0b561142",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "228d9b5a-3970-4536-bdb1-62df715dc631",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Why isn't the following part of Runner's implementation:\n\n``` go\nfunc (r *Runner) loopUserFunc(stop chan struct{}, int idx) {\nfor {\n  r.userProvidedFuncs[idx]()  // expected to one iteration of work and then return\n  select {\n  case <- stop:\n    return\n  case <- time.After(r.DelayBetweenIterations):\n  }\n}\n```\n",
        "createdAt" : "2014-10-29T16:07:15Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "b0f00d7c-9051-46fe-b941-212d946ab7e0",
        "parentId" : "228d9b5a-3970-4536-bdb1-62df715dc631",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's not clear to me how this is beneficial. We can certainly improve this code later. Runner isn't so useful now that I removed the master stuff, but it works and we can fix later.\n",
        "createdAt" : "2014-10-29T18:36:14Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@\t\t}\n\n\t\tselect {\n\t\tcase <-stop:\n\t\t\treturn"
  },
  {
    "id" : "aff5f0d7-2d6a-4146-9c4c-9b7666a2c8d2",
    "prId" : 1920,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2106eb5-ebe0-40dd-80fb-b8be4af223ed",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Nice fix!\n",
        "createdAt" : "2014-10-29T16:16:37Z",
        "updatedAt" : "2014-10-29T19:27:42Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "070c6c044090229068db43b61257f7ada5d15043",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@\t}\n\tif len(e.Endpoints) > m.masterCount {\n\t\t// We append to the end and remove from the beginning, so this should\n\t\t// converge rapidly with all masters performing this operation.\n\t\te.Endpoints = e.Endpoints[len(e.Endpoints)-m.masterCount:]"
  }
]