[
  {
    "id" : "d73f981c-6aa7-494a-8cfa-8be0441a5feb",
    "prId" : 13058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76fc00fd-fcfe-4f30-b9a2-b022b243604d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: slight preference for moving this line up instead of moving the controller start down here.\n",
        "createdAt" : "2015-08-31T23:29:22Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7eb83d88-abf3-4ad9-8dda-3924168c6ce4",
        "parentId" : "76fc00fd-fcfe-4f30-b9a2-b022b243604d",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "Sure. My intention was to keep `const threads = 3` close to the code that uses it below, but what you suggest would mean fewer line changes so it makes sense.\n",
        "createdAt" : "2015-08-31T23:31:31Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d15de72a92c8841d069b1265e433eb52edc29822",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +369,373 @@\n\tconst threads = 3\n\ttestDoneWG.Add(threads * len(tests))\n\n\t// Run the controller and run it until we close stop."
  },
  {
    "id" : "fb33ac3d-3a9e-41e8-908b-88c89c08a66a",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b7a770-89ef-4cba-82a9-2dd52858a0ae",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I take it that the call to source.Delete() in AddFunc() will trigger DeleteFunc() ?\n",
        "createdAt" : "2015-04-10T01:15:44Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "75cec38e-5e6f-4155-845b-f746ca27ec45",
        "parentId" : "b6b7a770-89ef-4cba-82a9-2dd52858a0ae",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Non-synchronously, yes.\n",
        "createdAt" : "2015-04-10T17:22:00Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +126,130 @@\toutputSet := util.StringSet{}\n\n\t// Make a controller that immediately deletes anything added to it, and\n\t// logs anything deleted.\n\t_, controller := framework.NewInformer("
  },
  {
    "id" : "aaa72fcd-6ba9-4ac6-9607-ecdfb853bf6a",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e1b80a-0002-4332-a989-e4217e1911f7",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : " Can you make it test the result of outputSet.List() for what you expect, rather than just writing it in a comment?\n",
        "createdAt" : "2015-04-10T01:17:32Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "9708fc2a-9bf8-41ec-9269-508cdb52bf8f",
        "parentId" : "71e1b80a-0002-4332-a989-e4217e1911f7",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please read the go doc about how example functions work: http://golang.org/pkg/testing/ (search for \"Examples\")\n",
        "createdAt" : "2015-04-10T17:21:38Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +169,173 @@\t\tfmt.Println(key)\n\t}\n\t// Output:\n\t// a-hello\n\t// b-controller"
  },
  {
    "id" : "6b05e4c0-f3b9-4528-ba8b-90941443a2b8",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39c29789-f198-4f2d-ba36-5afbda81ba87",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "This comment is not correct.\n",
        "createdAt" : "2015-04-10T01:31:25Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +303,307 @@\tvar testDoneWG sync.WaitGroup\n\n\t// Make a controller that immediately deletes anything added to it, and\n\t// logs anything deleted.\n\t_, controller := framework.NewInformer("
  },
  {
    "id" : "b4ca5c7f-bd16-4f17-8533-9661bd0e7891",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab10ae49-1396-49b4-b124-c9593243518d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "What is the purpose of AddDropWatch? IIUC you don't have a ResourceEventHandlerFunc handler for Add anyway.\n",
        "createdAt" : "2015-04-10T01:43:10Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "ea8f7432-701d-4380-8548-da66a8f42640",
        "parentId" : "ab10ae49-1396-49b4-b124-c9593243518d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "That doesn't matter. The Add populates the cache which the thing that calls update compares against. Dropping the watch means that the subsequent Update will be perceived by the client as an add.\n",
        "createdAt" : "2015-04-10T17:23:40Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : null,
    "diffHunk" : "@@ -1,1 +350,354 @@\t\tfunc(name string) {\n\t\t\tname = \"c-\" + name\n\t\t\tsource.AddDropWatch(pod(name, FROM))\n\t\t\tsource.Modify(pod(name, ADD_MISSED))\n\t\t\tsource.Modify(pod(name, TO))"
  },
  {
    "id" : "cda8c013-ec48-45b7-989e-2f49af6c738d",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c467b76-aa62-4974-b699-d932191c097a",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Can you verify my understanding of the intent of the *DropWatch() functions? The corresponding ResourceEventHandlerFuncs function doesn't get called (for example, ModifyDropWatch() won't cause UpdateFunc to be invoked), but because the set is still mutated, the next time a Modify() is invoked, a change made by a previous *DropWatch() function can show up as the source for a transition?\n",
        "createdAt" : "2015-04-10T01:54:22Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "f33b26d5-73b7-44a3-9a5a-06610422cb17",
        "parentId" : "2c467b76-aa62-4974-b699-d932191c097a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "No, there's a layer in the client that compares stuff received over the watch with a local cache and generates a call to add/update/delete. It is this layer that we are withholding the watch notification from. Basically we're purposely causing the client's internal state to become decoupled from the server's state, to demonstrate that the client does expected things if that happens.\n",
        "createdAt" : "2015-04-10T17:26:03Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : null,
    "diffHunk" : "@@ -1,1 +346,350 @@\t\t\tname = \"b-\" + name\n\t\t\tsource.Add(pod(name, FROM))\n\t\t\tsource.ModifyDropWatch(pod(name, TO))\n\t\t},\n\t\tfunc(name string) {"
  },
  {
    "id" : "cdb5ba2d-dafb-4db0-b7a7-61d49581d30d",
    "prId" : 5270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d503332-55e7-41d9-83e2-a92ff46faa11",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "So if I want to use this in kube2sky, for example, do I literally just rip off most of this function?  That still feels like a lot of boilerplate - easy to get wrong.\n\nCan it be reduced to \"call one function, passing a set of function pointers (or an interface), and have my functions called on add/delete/update\" ?\n",
        "createdAt" : "2015-04-06T06:10:58Z",
        "updatedAt" : "2015-04-06T06:10:58Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c3966ae4-1d1f-4420-af25-818b788379d0",
        "parentId" : "3d503332-55e7-41d9-83e2-a92ff46faa11",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, this is a good point -- I can make this even easier for the common case.\n",
        "createdAt" : "2015-04-06T21:09:15Z",
        "updatedAt" : "2015-04-06T21:09:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ef8c5ad033badbe2bc5bff763801d7b60857d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\t\t// Let's implement a simple controller that just deletes\n\t\t// everything that comes in.\n\t\tProcess: func(obj interface{}) error {\n\t\t\t// Obj is from the Pop method of the Queue we make above.\n\t\t\tnewest := obj.(cache.Deltas).Newest()"
  }
]