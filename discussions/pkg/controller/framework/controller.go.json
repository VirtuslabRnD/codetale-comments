[
  {
    "id" : "e0ce9cbf-b370-4f29-8960-688bc13c5c35",
    "prId" : 23575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24c32a2f-53f6-463a-8efe-30e9e1e8bfe6",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I just did some quick scanning of the code, and it seems that Controller itself has just one more additional method \"Requeue\", and it seems it is not used anywhere.\n\nSo can you please add a TODO, to make the \"Controller\" private, and convert all references to use ControllerInterface instead?\n",
        "createdAt" : "2016-04-15T07:38:14Z",
        "updatedAt" : "2016-04-18T12:51:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0c33d65b6fea84d791059d96c93a15e4b3de4ec",
    "line" : null,
    "diffHunk" : "@@ -1,1 +70,74 @@\n// TODO make the \"Controller\" private, and convert all references to use ControllerInterface instead\ntype ControllerInterface interface {\n\tRun(stopCh <-chan struct{})\n\tHasSynced() bool"
  },
  {
    "id" : "6892f60b-16c2-4ea2-8bf0-e2b6822816d2",
    "prId" : 9165,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06ad144a-5a70-4cc4-9528-0e1b70098033",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "minor nit: double check that obj is not already a cache.Deltas (or Delta) object before stuffing it into one.\n",
        "createdAt" : "2015-06-05T00:21:18Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fa5d2f1e-88e3-4fd9-8c19-7b68a09c0814",
        "parentId" : "06ad144a-5a70-4cc4-9528-0e1b70098033",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Will do\n\n> On Jun 4, 2015, at 8:21 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/controller/framework/controller.go:\n> \n> > @@ -106,6 +106,16 @@ func (c *Controller) HasSynced() bool {\n> >     return c.reflector.LastSyncResourceVersion() != \"\"\n> >  }\n> > \n> > +// Requeue adds the provided object back into the queue if it does not already exist.\n> > +func (c *Controller) Requeue(obj interface{}) error {\n> > minor nit: double check that obj is not already a cache.Deltas (or Delta) object before stuffing it into one.\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2015-06-05T00:55:56Z",
        "updatedAt" : "2015-08-18T13:08:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "266e6226e52b55f8a6d5278c1264299d7c713820",
    "line" : null,
    "diffHunk" : "@@ -1,1 +108,112 @@\n// Requeue adds the provided object back into the queue if it does not already exist.\nfunc (c *Controller) Requeue(obj interface{}) error {\n\treturn c.config.Queue.AddIfNotPresent(cache.Deltas{\n\t\tcache.Delta{"
  },
  {
    "id" : "4e3dcbcb-043d-4eec-87e4-c338d8449444",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb9310f8-d514-4a51-9451-292753e76502",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I didn't understand the part about \"as many notification functions as you want.\" It looks to me like you specify at most one Add, one Update, and one Delete function?\n",
        "createdAt" : "2015-04-09T02:22:09Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : null,
    "diffHunk" : "@@ -1,1 +126,130 @@// as few of the notification functions as you want while still implementing\n// ResourceEventHandler.\ntype ResourceEventHandlerFuncs struct {\n\tAddFunc    func(obj interface{})\n\tUpdateFunc func(oldObj, newObj interface{})"
  },
  {
    "id" : "643c2f7b-c629-48cb-9894-04e0049fa660",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe5c91c6-8405-4e09-b175-4275bd2265e9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "This is a great explanation of the return values but can you also explain the arguments?\n",
        "createdAt" : "2015-04-09T02:22:16Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +163,167 @@}\n\n// NewInformer returns a cache.Store and a controller for populating the store\n// while also providing event notifications. You should only used the returned\n// cache.Store for Get/List operations; Add/Modify/Deletes will cause the event"
  },
  {
    "id" : "7b86e3d1-0c27-4d17-8f0a-5689a689c784",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c43eb81-dbeb-442d-85ee-422f585ea28d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I don't understand \"you will get OnUpdate calls, even if nothing changed\" Or more to the point, I guess I understand it but it seems sub-optimal, especially since you don't pass both the old and new object to OnUpdate(), so the function receiving the callback may not know whether it changed (or do you assume the function receiving the callback always has a copy of the old version?).\n",
        "createdAt" : "2015-04-09T22:18:31Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "5e8d5d8e-5e18-4354-8ba8-bea3c9158c6f",
        "parentId" : "6c43eb81-dbeb-442d-85ee-422f585ea28d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I will change OnUpdate to pass the old object as we knew it.\n",
        "createdAt" : "2015-04-09T22:52:51Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9b271280-7f7a-424d-871c-d5e4540358d5",
        "parentId" : "6c43eb81-dbeb-442d-85ee-422f585ea28d",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Great, thanks!\n",
        "createdAt" : "2015-04-10T00:51:36Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +172,176 @@//    be informed of.\n//  * objType is an object of the type that you expect to receieve.\n//  * resyncPeriod: if non-zero, will re-list this often (you will get OnUpdate\n//    calls, even if nothing changed). Otherwise, re-list will be delayed as\n//    long as possible (until the upstream source closes the watch or times out,"
  },
  {
    "id" : "74e6141d-b2d1-4653-8927-cd14f8051df0",
    "prId" : 6546,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6facc0c-2bf3-4960-bc9f-88723ef09d58",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "In a followup PR, it might be good to add some detail to this comment explaining under what circumstances the final state would be known and when it wouldn't. That will help a client know when it can depend on getting this.\n",
        "createdAt" : "2015-04-10T01:01:46Z",
        "updatedAt" : "2015-04-10T23:03:07Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "395d69641ebcbd0fb466629d6aa461a45e57d854",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +115,119 @@//      get called even if nothing changed. This is useful for periodically\n//      evaluating or syncing something.\n//  * OnDelete will get the final state of the item if it is known, otherwise\n//      it will get an object of type cache.DeletedFinalStateUnknown.\ntype ResourceEventHandler interface {"
  },
  {
    "id" : "66d74dd0-95a4-4cc2-a025-c1c8f01a27d6",
    "prId" : 5270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b470496-672d-4b60-8de9-440804630119",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Is there ever a need for a controller to act on two objects instead of just one?\n\nI thought I had use for two until @ironcladlou talked me into making a custom cache.Store and keep the controller processing just one object. \n",
        "createdAt" : "2015-04-06T17:38:36Z",
        "updatedAt" : "2015-04-06T17:38:36Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "bf3e290e-310b-4271-a760-fe72fbbff991",
        "parentId" : "6b470496-672d-4b60-8de9-440804630119",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I had a case for more than one, but it was to build a in-memory cache, and does not need to be solved by this framework.\n",
        "createdAt" : "2015-04-06T18:38:44Z",
        "updatedAt" : "2015-04-06T18:38:44Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "29af97e7-60b0-4d66-a983-ebecddc0285f",
        "parentId" : "6b470496-672d-4b60-8de9-440804630119",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, I think most controllers have one object as a source. Multi-source controllers are out of scope for this framework.\n",
        "createdAt" : "2015-04-06T21:10:25Z",
        "updatedAt" : "2015-04-06T21:10:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d4e5ad62-8fbb-405a-bc4b-b1ceb068ee76",
        "parentId" : "6b470496-672d-4b60-8de9-440804630119",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Endpoint controller.\n\na) currently identified as a big problem\nb) does not watch at all\nc) really needs a local cache of all pods and all services\n",
        "createdAt" : "2015-04-07T20:53:45Z",
        "updatedAt" : "2015-04-07T20:53:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ef8c5ad033badbe2bc5bff763801d7b60857d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@\t// a cache.DeltaFIFO. Your Process() function should accept\n\t// the output of this Oueue's Pop() method.\n\tcache.Queue\n\n\t// Something that can list and watch your objects."
  },
  {
    "id" : "b5c62adf-0027-41bc-a7ed-7eda479212b5",
    "prId" : 5270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aedc266d-6eee-486f-afd9-852021d3441e",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Is it easier to add this interface now before the framework gets more use?\n",
        "createdAt" : "2015-04-06T18:40:57Z",
        "updatedAt" : "2015-04-06T18:40:57Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "a84ce8bd-372d-41d8-b1db-7ada8d14315b",
        "parentId" : "aedc266d-6eee-486f-afd9-852021d3441e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Possibly.\n",
        "createdAt" : "2015-04-06T21:10:38Z",
        "updatedAt" : "2015-04-06T21:10:38Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ef8c5ad033badbe2bc5bff763801d7b60857d",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\t//       the object completely if desired. Pass the object in\n\t//       question to this interface as a parameter.\n\tRetryOnError bool\n}\n"
  }
]