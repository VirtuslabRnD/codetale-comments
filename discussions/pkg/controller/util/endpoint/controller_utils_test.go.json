[
  {
    "id" : "4e9b55c3-f034-4e61-923c-f263aed330ff",
    "prId" : 91399,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91399#pullrequestreview-449191093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b24511c6-2b3d-45e8-8db9-51f295680b39",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "I think this function might be easier to understand and less error prone if it used test cases and a modifier function like https://github.com/kubernetes/kubernetes/pull/93089. I know I ran into some significant bugs in the previous test implementation like this where things were passing for reasons that were not intended.",
        "createdAt" : "2020-07-15T17:51:42Z",
        "updatedAt" : "2020-07-17T19:27:33Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e46572ef4b0f0a6b095c7dcdceb5bbca2ec0e9ff",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +501,505 @@}\n\nfunc Test_podChanged(t *testing.T) {\n\ttestCases := []struct {\n\t\ttestName      string"
  },
  {
    "id" : "fc580233-90da-485c-92fb-16bc8ef45e96",
    "prId" : 84280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84280#pullrequestreview-309139992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20f8a915-6de8-4fb3-a9c3-ce5f5fb1bd50",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "This might also be easier to write with a list of test cases, potentially including the following values:\r\n\r\n- setKey\r\n- setSelector (map[string]string)\r\n- deleteKey\r\n- getKey\r\n- expectedSelector\r\n\r\nThis would allow each test case to go through optional set, delete, get flows or similar to show the functionality of each cache function. That's of course dependent on changing the `Update` function above to use `service.Spec.Selector` as the argument. \r\n\r\nI'm not 100% sold on this specific structure for the test, but I do think something that allowed more, simpler, test cases to cover this function would be helpful.",
        "createdAt" : "2019-10-29T18:57:02Z",
        "updatedAt" : "2019-11-06T02:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "5e44b778-39cf-4e07-9af6-f72daf45d27d",
        "parentId" : "20f8a915-6de8-4fb3-a9c3-ce5f5fb1bd50",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "All addressed, really appreciate for your careful review.",
        "createdAt" : "2019-10-30T11:49:01Z",
        "updatedAt" : "2019-11-06T02:56:20Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2133f9e9ff926ad40aa55b85b6242ca51ae4fe99",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +264,268 @@\t}\n\n\tcache := NewServiceSelectorCache()\n\ttests := []struct {\n\t\tname   string"
  },
  {
    "id" : "77a1fe4c-3fb8-435d-92ff-45f90a25461a",
    "prId" : 84280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84280#pullrequestreview-310754143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "parentId" : null,
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "@robscott I have tested the performance of GetPodServiceMemberships by BenchmarkGetPodServiceMemberships with b.N = 20000\r\nWhen I set service number as 500, 1000 and 5000\r\ntime wastes(nano second):\r\n500 services: 3947460065->2539256764(64%)\r\n1000 services: 7816078517->4944378261(63%)\r\n5000 services: 48047946858->32854451880(68%)\r\neach result is an average of five.",
        "createdAt" : "2019-10-31T15:26:32Z",
        "updatedAt" : "2019-11-06T02:56:20Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "f50003d5-8b78-4ef0-b441-7f8abb619f49",
        "parentId" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Thanks for running these benchmarks! Not completely sure I understand the numbers though. Are the larger numbers the time calling the original function and the newer numbers calling the new function using the cache you've added?",
        "createdAt" : "2019-10-31T17:40:08Z",
        "updatedAt" : "2019-11-06T02:56:20Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "991541e8-b0d2-4b3f-b867-53d0aa2e54d1",
        "parentId" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "yes, larger numbers is the time calling the original GetPodServiceMemberships function and the newer numbers calling the new GetPodServiceMemberships function.",
        "createdAt" : "2019-10-31T21:19:32Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "75dbe852-37b7-4e9b-8324-bc477e843364",
        "parentId" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "large number: just make original GetPodServiceMemberships become a method of ServiceSelectorCache without any change in the function body.",
        "createdAt" : "2019-11-01T02:05:04Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "b28f346a-97b4-46a0-9b32-acba57924972",
        "parentId" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Nice! That's a great improvement.",
        "createdAt" : "2019-11-01T22:55:16Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "dfbde881-c35a-4489-b4ce-bd02300ced3d",
        "parentId" : "30284420-7d32-4a6c-aaa4-c8f78fda1cdd",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "seems get function should also hold the lock, performance will decline 1%~3% after get function hold the read lock.",
        "createdAt" : "2019-11-02T03:34:33Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2133f9e9ff926ad40aa55b85b6242ca51ae4fe99",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +359,363 @@}\n\nfunc BenchmarkGetPodServiceMemberships(b *testing.B) {\n\t// init fake service informer.\n\tfakeInformerFactory := informers.NewSharedInformerFactory(&fake.Clientset{}, 0*time.Second)"
  }
]