[
  {
    "id" : "68cefa8b-d0e0-4a01-93fb-bddfdbe79c42",
    "prId" : 91399,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91399#pullrequestreview-449264088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c261025e-97c4-4d80-8ce9-688e2b767aa6",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "This has the unfortunate consequence of triggering a resync for a IPv4 Service if a Pod's IPv6 address changes. Is there anyway we could avoid that without having access to the Service? I'm thinking this would be a relatively rare occurrence so probably not be a big deal.",
        "createdAt" : "2020-07-15T17:55:40Z",
        "updatedAt" : "2020-07-17T19:27:33Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "ae7f650e-753b-408b-a027-12b043ddfb09",
        "parentId" : "c261025e-97c4-4d80-8ce9-688e2b767aa6",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "indeed it should not be a normal behavior that a pod  changes only one IP, maybe the pod restarts and acquires the same for one family and not for the other? nevertheless it seems safer to resync than trying to optimize ",
        "createdAt" : "2020-07-15T19:26:20Z",
        "updatedAt" : "2020-07-17T19:27:33Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e46572ef4b0f0a6b095c7dcdceb5bbca2ec0e9ff",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +185,189 @@\t\t\treturn true, labelsChanged\n\t\t}\n\t}\n\n\t// Endpoints may also reference a pod's Name, Namespace, UID, and NodeName, but"
  },
  {
    "id" : "d5d1457a-32f1-4eeb-afc9-350ebcd76c5a",
    "prId" : 84280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84280#pullrequestreview-310753476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c6a4cce-555f-4f81-ba9e-257a5b245bd2",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder why there is no lock taken.\r\nWouldn't this introduce race when there is concurrent write (line 61 below) ?",
        "createdAt" : "2019-11-02T02:24:47Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "40535095-6d5c-48d9-a399-7ea5502f6633",
        "parentId" : "5c6a4cce-555f-4f81-ba9e-257a5b245bd2",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "Yes, I think read write lock maybe better.",
        "createdAt" : "2019-11-02T03:14:35Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2133f9e9ff926ad40aa55b85b6242ca51ae4fe99",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +53,57 @@func (sc *ServiceSelectorCache) Get(key string) (labels.Selector, bool) {\n\tsc.lock.RLock()\n\tselector, ok := sc.cache[key]\n\t// fine-grained lock improves GetPodServiceMemberships performance(16.5%) than defer measured by BenchmarkGetPodServiceMemberships\n\tsc.lock.RUnlock()"
  },
  {
    "id" : "0d4b9b0b-aff6-4faa-85e6-61a40555dc88",
    "prId" : 84280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84280#pullrequestreview-312170046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "This seems like something that could be part of a defer block. Something like this:\r\n\r\n```go\r\nsc.lock.Rlock()\r\ndefer sc.lock.RUnlock()\r\nreturn sc.cache[key]\r\n```",
        "createdAt" : "2019-11-04T19:21:50Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "2f2d286f-1b56-4e00-bd1f-b2d522d255ab",
        "parentId" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "defer sentence is consistent with others. But I noticed that sc.lock.RUnlock() executed after selector, ok := sc.cache[key] will improve about 10% performance of BenchmarkGetPodServiceMemberships than defer sc.lock.RUnlock()",
        "createdAt" : "2019-11-05T00:15:18Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      },
      {
        "id" : "421acb8b-f8ff-4888-9c27-62983635d475",
        "parentId" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : ":+1: sounds good, thanks for checking the performance difference!",
        "createdAt" : "2019-11-05T01:14:23Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "401fe7be-264a-42ee-a182-dd67c4c286a2",
        "parentId" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Requires at least a comment...",
        "createdAt" : "2019-11-05T21:00:26Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c9ed141c-083b-4484-84ce-85adba669f1d",
        "parentId" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Also, if you could share the results if benchmark for this - are we sure this isn't a noice?\r\nOr you're saying that the memory allocation that defer is doing is contributing that much in this case?",
        "createdAt" : "2019-11-05T21:02:04Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "adcd777b-cc4c-4612-9e15-c5be08806b1e",
        "parentId" : "a7c78b07-efbe-447d-8a4c-f197347f0d98",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "Addressed, thanks.",
        "createdAt" : "2019-11-06T02:58:15Z",
        "updatedAt" : "2019-11-06T02:58:15Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2133f9e9ff926ad40aa55b85b6242ca51ae4fe99",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +55,59 @@\tselector, ok := sc.cache[key]\n\t// fine-grained lock improves GetPodServiceMemberships performance(16.5%) than defer measured by BenchmarkGetPodServiceMemberships\n\tsc.lock.RUnlock()\n\treturn selector, ok\n}"
  },
  {
    "id" : "9ff58637-c22a-4b02-bedd-9d3f1039b906",
    "prId" : 84280,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84280#pullrequestreview-312169656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e59e76e-d857-486b-87a4-4aa0ca48e859",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: move the lock above the fields it is protecting",
        "createdAt" : "2019-11-05T21:00:41Z",
        "updatedAt" : "2019-11-06T02:56:21Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "0a52388e-3f1f-45e1-8d4a-a0853ddc1cc3",
        "parentId" : "8e59e76e-d857-486b-87a4-4aa0ca48e859",
        "authorId" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "body" : "addressed",
        "createdAt" : "2019-11-06T02:56:40Z",
        "updatedAt" : "2019-11-06T02:56:40Z",
        "lastEditedBy" : "ffdbc0a5-19fd-4509-a56e-a4979ac0c1d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2133f9e9ff926ad40aa55b85b6242ca51ae4fe99",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +39,43 @@// ServiceSelectorCache is a cache of service selectors to avoid high CPU consumption caused by frequent calls to AsSelectorPreValidated (see #73527)\ntype ServiceSelectorCache struct {\n\tlock  sync.RWMutex\n\tcache map[string]labels.Selector\n}"
  },
  {
    "id" : "c527e798-4f1b-42ff-ae3a-6bd897002aa8",
    "prId" : 84207,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84207#pullrequestreview-306779624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6de9333-2a4c-43b8-8ab5-fc0e5a0526be",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "nit: a unit test for this?\r\n\r\nto prevent regression. ",
        "createdAt" : "2019-10-23T17:49:34Z",
        "updatedAt" : "2019-11-07T21:24:03Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "911c316c-55b0-46d1-ada9-74963156fa19",
        "parentId" : "e6de9333-2a4c-43b8-8ab5-fc0e5a0526be",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Good call, added a unit test covering this function now.",
        "createdAt" : "2019-10-24T18:30:43Z",
        "updatedAt" : "2019-11-07T21:24:03Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7548f0204d901ccd0f6a0932a428b75904bde1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +146,150 @@// ShouldSetHostname returns true if the Hostname attribute should be set on an\n// Endpoints Address or EndpointSlice Endpoint.\nfunc ShouldSetHostname(pod *v1.Pod, svc *v1.Service) bool {\n\treturn len(pod.Spec.Hostname) > 0 && pod.Spec.Subdomain == svc.Name && svc.Namespace == pod.Namespace\n}"
  }
]