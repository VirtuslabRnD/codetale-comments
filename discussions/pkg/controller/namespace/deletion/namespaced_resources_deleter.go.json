[
  {
    "id" : "0bc3361a-3c2e-4c46-8268-5740c19d2f4f",
    "prId" : 93790,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93790#pullrequestreview-463895140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6abac93f-aa8c-4d19-97f9-7a1c0fe54dad",
        "parentId" : null,
        "authorId" : "c7947fc2-e508-406b-afd4-e34c19587061",
        "body" : "What got lost when we only updated the status? Do you know why the prior authors thought it could be omitted? I noticed that `finalizeNamespace`, below, follows the same pattern but this time only for the spec, not the status.\r\n\r\nI may come back and add some comments in my own PR.",
        "createdAt" : "2020-08-09T18:29:20Z",
        "updatedAt" : "2020-08-09T18:36:59Z",
        "lastEditedBy" : "c7947fc2-e508-406b-afd4-e34c19587061",
        "tags" : [
        ]
      },
      {
        "id" : "7001cd5e-86ed-4b43-93d7-2c4816d2c072",
        "parentId" : "6abac93f-aa8c-4d19-97f9-7a1c0fe54dad",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "spec fields which are ignored by the server in real status update requests but which got accepted and stored when submitting via the fake client in the unit test I added",
        "createdAt" : "2020-08-09T18:47:38Z",
        "updatedAt" : "2020-08-09T18:58:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "648c591fff986e241aabf32e661a0a95345fa35f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +266,270 @@\t\treturn namespace, nil\n\t}\n\tnewNamespace := namespace.DeepCopy()\n\tnewNamespace.Status.Phase = v1.NamespaceTerminating\n\treturn d.nsClient.UpdateStatus(context.TODO(), newNamespace, metav1.UpdateOptions{})"
  },
  {
    "id" : "363203e3-629a-46b2-a0f7-da932a0c51e0",
    "prId" : 82882,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82882#pullrequestreview-290738420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77fb995-626d-4b6f-804e-e13b27750649",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "For other reviewers: if the namespace is deleted by the previous updateStatus call, updateStatus returns the namespace object with empty finalizers (not a metav1.Status, as a regular Delete call would have returned), so this line is ok.",
        "createdAt" : "2019-09-19T17:50:23Z",
        "updatedAt" : "2019-09-19T17:50:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "000fffd3c70d7adb272c9ca139899d329828269d",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +125,129 @@\n\t// return if it is already finalized.\n\tif finalized(namespace) {\n\t\treturn nil\n\t}"
  },
  {
    "id" : "dc859c8d-489d-40ac-b768-caab16e074ce",
    "prId" : 82189,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82189#pullrequestreview-284965646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f17ddd-740d-4f90-b0b0-cc4a0cb722f4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "returning 0 remaining items seems wrong at this point?",
        "createdAt" : "2019-09-03T19:27:10Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "09525101-69a1-4370-a84e-dd264e85a180",
        "parentId" : "82f17ddd-740d-4f90-b0b0-cc4a0cb722f4",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> returning 0 remaining items seems wrong at this point?\r\n\r\nalongside an error?  I don't necessarily mind doing an entire list, but when returning an error I don't generally think of the return value as necessarily complete and we don't already have the information available.  You'd rather change the logic and fall through to a normal delete?  I can get behind that, but I'd like to do it as a pre-step in an earlier pull if that's your preference.\r\n",
        "createdAt" : "2019-09-06T13:29:50Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "98d1e096-ad88-4522-8fb5-a8e2b3153600",
        "parentId" : "82f17ddd-740d-4f90-b0b0-cc4a0cb722f4",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah, I think I missed the error, as I said elsewhere it's a bit weird to mix errors and useful return information.",
        "createdAt" : "2019-09-06T16:18:45Z",
        "updatedAt" : "2019-09-06T16:18:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ae353f3a513aa10185a6f36cfe88d65398d047",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +451,455 @@\tdeleteCollectionSupported, err := d.deleteCollection(gvr, namespace)\n\tif err != nil {\n\t\treturn gvrDeletionMetadata{finalizerEstimateSeconds: estimate}, err\n\t}\n"
  },
  {
    "id" : "78f147f0-6a33-4a50-ad7b-8ba9765ce837",
    "prId" : 82189,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82189#pullrequestreview-290901333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "036a88c7-f9a9-4d08-84db-05f3c0817c48",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "seems weird to return an error and a useful deletion metadata when early on in the function it only returns an error.",
        "createdAt" : "2019-09-03T19:29:33Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "41c5de02-a9d0-4e30-964a-48ba577d2768",
        "parentId" : "036a88c7-f9a9-4d08-84db-05f3c0817c48",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> seems weird to return an error and a useful deletion metadata when early on in the function it only returns an error.\r\n\r\nIt's about what information is available at each point.  This is leveraging data gathered here.  I can certainly see an argument for always gathering the data, but I'd prefer to do that sort of a behavioral change separate from this.  I'm h happy to do it before if you like.",
        "createdAt" : "2019-09-06T13:31:02Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "dee0a28c-de67-4834-b7c0-b2e2e820f43b",
        "parentId" : "036a88c7-f9a9-4d08-84db-05f3c0817c48",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The issue with returning partial data and an error is that the caller can't know how much of the data to trust...",
        "createdAt" : "2019-09-06T16:20:07Z",
        "updatedAt" : "2019-09-06T16:20:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6c57106b-010b-48fa-b7b6-8e1c82615597",
        "parentId" : "036a88c7-f9a9-4d08-84db-05f3c0817c48",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Given that the function is not exported, I won't block it over this. I think the \"generally correct\" way to do this is to integrate the error with the return type in such a way that you can tell which fields have valid data and which don't; this doesn't cleanly factor into \"result\" and \"error\".",
        "createdAt" : "2019-09-20T00:05:27Z",
        "updatedAt" : "2019-09-20T00:05:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ae353f3a513aa10185a6f36cfe88d65398d047",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +510,514 @@\t\tfinalizerEstimateSeconds: estimate,\n\t\tnumRemaining:             len(unstructuredList.Items),\n\t}, fmt.Errorf(\"unexpected items still remain in namespace: %s for gvr: %v\", namespace, gvr)\n}\n"
  },
  {
    "id" : "133bae03-3067-4d30-a357-b79bca9d4090",
    "prId" : 82189,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82189#pullrequestreview-283212988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb980e8f-3225-4468-9fcd-4364ff9d6e74",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This will be super enlightening, thanks.",
        "createdAt" : "2019-09-03T19:29:58Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ae353f3a513aa10185a6f36cfe88d65398d047",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +483,487 @@\tfor _, item := range unstructuredList.Items {\n\t\tfor _, finalizer := range item.GetFinalizers() {\n\t\t\tfinalizersToNumRemaining[finalizer] = finalizersToNumRemaining[finalizer] + 1\n\t\t}\n\t}"
  },
  {
    "id" : "98597b79-33ba-4785-876d-27b531550785",
    "prId" : 82189,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82189#pullrequestreview-283213672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d6c8861-405d-4294-a0f8-9079e898f22a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "comment: zero means no estimate has been made, not that we're done (or something like this)",
        "createdAt" : "2019-09-03T19:31:28Z",
        "updatedAt" : "2019-09-06T13:58:48Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ae353f3a513aa10185a6f36cfe88d65398d047",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +426,430 @@\t// mean that all content has been removed.\n\tfinalizerEstimateSeconds int64\n\t// numRemaining is how many instances of the gvr remain\n\tnumRemaining int\n\t// finalizersToNumRemaining maps finalizers to how many resources are stuck on them"
  },
  {
    "id" : "3aa5e56c-f79d-41d1-a199-54e2acf5af10",
    "prId" : 35950,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35950#pullrequestreview-18051473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d18d5f09-264f-4aa2-9770-844f537b247f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Godoc now that this is public\n",
        "createdAt" : "2016-11-02T03:53:02Z",
        "updatedAt" : "2017-02-06T18:52:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "828567c8-e036-420e-b992-ffebabad7471",
        "parentId" : "d18d5f09-264f-4aa2-9770-844f537b247f",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Sorry did not understand. Is it not a valid GoDoc comment?",
        "createdAt" : "2017-01-23T23:23:26Z",
        "updatedAt" : "2017-02-06T18:52:30Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca6f821738ee84a84a46f0ed8d4b833b628864d7",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +210,214 @@// ResourcesRemainingError is used to inform the caller that all resources are not yet fully removed from the namespace.\ntype ResourcesRemainingError struct {\n\tEstimate int64\n}\n"
  }
]