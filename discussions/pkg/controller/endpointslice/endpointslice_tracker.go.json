[
  {
    "id" : "c1625238-5c03-4857-aa54-b6a94104c10a",
    "prId" : 99345,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99345#pullrequestreview-596802760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5b38bcd-135c-4bdf-b0de-5e07e0c4463e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why we return true here and false in Sta() method in the corresponding place?\r\n\r\nIf there is no entry for a service it means we aren't aware of staleness of this object, so this false seems fine, but I don't understand why we return true in line 72.\r\n\r\n[I guess I'm missing something subtle, but can you please add a comment there to explain...]",
        "createdAt" : "2021-02-23T08:29:28Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1124ab88-ea37-4d54-ac6c-de830ec4fca2",
        "parentId" : "a5b38bcd-135c-4bdf-b0de-5e07e0c4463e",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Yeah this was very confusing and I think that was mostly due to the naming of the function. I've updated this function to use `HasNewerSlices` as the name and updated the logic a bit too match the name. I think that's more reflective of what I'm trying to accomplish here. Unfortunately it means that we may end up syncing with an informer cache that thinks we have EndpointSlices that the controller has already deleted. \r\n\r\nIf we only synced when the informer cache only had the slices that the tracker was expecting, we could be waiting forever, especially if a user created their own slice and the tracker didn't expect it to exist.",
        "createdAt" : "2021-02-23T18:02:12Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "e9f366da-f6f5-4d15-b941-effe36055a9a",
        "parentId" : "a5b38bcd-135c-4bdf-b0de-5e07e0c4463e",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "I've updated this to also track EndpointSlices that the controller expects to be deleted so the last part of my comment above is no longer true.",
        "createdAt" : "2021-02-23T21:14:49Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1542606c275129ebcb9ffdb67696f8cc9b638d6",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +91,95 @@\tgfs, ok := est.generationsByService[nn]\n\tif !ok {\n\t\treturn false\n\t}\n\tfor _, endpointSlice := range endpointSlices {"
  },
  {
    "id" : "11175d11-c412-4cc9-b5c5-70d53992abce",
    "prId" : 99345,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99345#pullrequestreview-601818303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b3d6016-4ae8-468c-aa91-3efb3465d015",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "just naive question for @wojtek-t , the generation field is not something that can be crafted and modified by a user to set this value and cause possible problems, right?",
        "createdAt" : "2021-02-25T08:45:42Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "cf76d830-4120-4b55-b263-ff95ce6e6468",
        "parentId" : "5b3d6016-4ae8-468c-aa91-3efb3465d015",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It can to some extent - here you have the logic:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/registry/discovery/endpointslice/strategy.go#L57\r\n\r\nIf someone will try to change that without changing the \"real contents\" of EPS, we won't prevent it.\r\nIt's pretty much the logic we use elsewhere though:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/registry/apps/deployment/strategy.go#L106\r\n\r\n\r\nBut we may consider setting it to the same value if the spec didn't change (though if so, let's do that in a separate PR - I would like someone like Jordan to take a quick look at it).",
        "createdAt" : "2021-02-25T15:09:20Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3afc522a-1aee-4e73-a687-cd5fbca4f82a",
        "parentId" : "5b3d6016-4ae8-468c-aa91-3efb3465d015",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "This is a good idea, thanks! I'll follow a separate PR for this. Do you happen to know if changes to strategy can ever be backported? I'm interested in cherrypicking this back to 1.20 or 1.19 if possible, but I realize the scope of this change is already pretty large.",
        "createdAt" : "2021-02-26T01:59:26Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "9b3b7662-c70b-4693-8622-56ec558c1872",
        "parentId" : "5b3d6016-4ae8-468c-aa91-3efb3465d015",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "That's a good question - the fact that they are in strategy doesn't mean they can't be backported, but this would be in fact strenghtening validation, so probably not.",
        "createdAt" : "2021-03-02T13:34:26Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1542606c275129ebcb9ffdb67696f8cc9b638d6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +30,34 @@\n// generationsBySlice tracks expected EndpointSlice generations by EndpointSlice\n// uid. A value of deletionExpected (-1) may be used here to indicate that we\n// expect this EndpointSlice to be deleted.\ntype generationsBySlice map[types.UID]int64"
  },
  {
    "id" : "ecf8cab3-d54b-4921-a17f-516548b2edcd",
    "prId" : 99345,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99345#pullrequestreview-601012618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5800f03-6e14-4413-ba9a-1e9135bc27d7",
        "parentId" : null,
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "this confuse me. Which consideration about it?  In genernal, We delete something like cache, the return value means we delete it successfully or failed.  Since we want to delele it, why not give a judge of whether genration is deletionExpected before delelet it?\r\n",
        "createdAt" : "2021-03-01T07:31:17Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      },
      {
        "id" : "f6354631-db90-4e22-89ee-f52ba148c7f8",
        "parentId" : "b5800f03-6e14-4413-ba9a-1e9135bc27d7",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Yeah this was confusing. I combined the 2 concepts because they were both needed together and having them in a single function was more efficient (less repeated code/checks). I've updated this function to have what I hope is a slightly clearer name: `HandleDeletion`. Essentially I want this function to handle an observed deletion and tell me if I need to requeue the Service due to this event. Hopefully that's a reasonable combination.",
        "createdAt" : "2021-03-01T17:56:33Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1542606c275129ebcb9ffdb67696f8cc9b638d6",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\tg, ok := gfs[endpointSlice.UID]\n\t\tdelete(gfs, endpointSlice.UID)\n\t\tif ok && g != deletionExpected {\n\t\t\treturn false\n\t\t}"
  },
  {
    "id" : "097f531d-40f3-4f40-90e2-8156221bc6a5",
    "prId" : 99345,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99345#pullrequestreview-601009695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17e1c199-0306-4ac6-b417-f0cf8f067b3f",
        "parentId" : null,
        "authorId" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "body" : "is it here need a lock to protect it ?",
        "createdAt" : "2021-03-01T07:34:56Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "5c4757f6-5a7a-438b-b77f-778928cb6979",
        "tags" : [
        ]
      },
      {
        "id" : "a686284d-1641-43a5-a779-45051807f4f5",
        "parentId" : "17e1c199-0306-4ac6-b417-f0cf8f067b3f",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Good catch, thanks! Switch to RWMutex and added more read locks throughout.",
        "createdAt" : "2021-03-01T17:53:22Z",
        "updatedAt" : "2021-03-02T17:44:16Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1542606c275129ebcb9ffdb67696f8cc9b638d6",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +89,93 @@\n\tnn := types.NamespacedName{Name: service.Name, Namespace: service.Namespace}\n\tgfs, ok := est.generationsByService[nn]\n\tif !ok {\n\t\treturn false"
  },
  {
    "id" : "120bcf8f-d4f5-4410-a347-808d06106184",
    "prId" : 92838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92838#pullrequestreview-444377215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f872924d-8e51-4dfb-aff2-46b4c35dc364",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Maybe just return on the line above - `return est.resourceVersionsByService[serviceNN]`",
        "createdAt" : "2020-07-07T18:19:05Z",
        "updatedAt" : "2020-07-07T18:19:05Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "87269263-4b83-4175-a0a6-1aa491c0f0d5",
        "parentId" : "f872924d-8e51-4dfb-aff2-46b4c35dc364",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "It's a single value when returning the map value, would cause compilation error \"not enough arguments to return\".",
        "createdAt" : "2020-07-08T02:41:01Z",
        "updatedAt" : "2020-07-08T02:41:02Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "9c39c70c-4df8-44a1-93c7-306cef904411",
        "parentId" : "f872924d-8e51-4dfb-aff2-46b4c35dc364",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Woops, somehow I hadn't run into that before, thanks for the explanation!",
        "createdAt" : "2020-07-08T02:51:40Z",
        "updatedAt" : "2020-07-08T02:51:41Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "087682584d5e61883853f8eafc3b6339e8606c52",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +115,119 @@\tserviceNN := getServiceNN(endpointSlice)\n\tvers, ok := est.resourceVersionsByService[serviceNN]\n\treturn vers, ok\n}\n"
  },
  {
    "id" : "0d9584b3-ddbb-4ef9-8def-e613aaeed707",
    "prId" : 85703,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85703#pullrequestreview-336065937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d3589db-bb12-4d72-90b9-cc634001123b",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "try to avoid two map lookups?\r\n\r\n```\r\nvar (\r\n  vers endpointSliceResourceVersions\r\n  ok bool\r\n  )\r\n\r\nif vers, ok = est.resourceVersionsByService[serviceNN]; !ok {\r\n  vers = endpointSliceResourceVersions{}\r\n  est.resourceVersionsByService[serviceNN] = vers\r\n}\r\nreturn vers",
        "createdAt" : "2019-12-24T00:53:36Z",
        "updatedAt" : "2019-12-26T20:16:06Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "13ed7edf-8fec-45b4-b594-5b319b2b2c4a",
        "parentId" : "2d3589db-bb12-4d72-90b9-cc634001123b",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Fixed, thanks!",
        "createdAt" : "2019-12-24T02:50:52Z",
        "updatedAt" : "2019-12-26T20:16:06Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c75787bb778d45db1b2ee89cc15bf19306c02eb2",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@// are currently tracked for this service, an empty set is initialized.\nfunc (est *endpointSliceTracker) relatedResourceVersions(endpointSlice *discovery.EndpointSlice) endpointSliceResourceVersions {\n\tserviceNN := getServiceNN(endpointSlice)\n\tvers, ok := est.resourceVersionsByService[serviceNN]\n"
  }
]