[
  {
    "id" : "a02d6596-dcab-4dd8-b8e3-a2fc3af6c647",
    "prId" : 102366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102366#pullrequestreview-673143030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cafd052c-ae9b-4f78-8300-827fe53072e7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "cc @robscott - same question here",
        "createdAt" : "2021-06-01T13:17:23Z",
        "updatedAt" : "2021-06-01T13:17:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c313a270-b2ea-4c46-964e-a37d6ada612d",
        "parentId" : "cafd052c-ae9b-4f78-8300-827fe53072e7",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "cc @wojtek-t here as well",
        "createdAt" : "2021-06-01T14:26:41Z",
        "updatedAt" : "2021-06-01T14:26:41Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51717256f978ad301a0eb236edcb5b41f185517c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +224,228 @@\n\tif !triggerTime.IsZero() {\n\t\tendpointSlice.Annotations[corev1.EndpointsLastChangeTriggerTime] = triggerTime.UTC().Format(time.RFC3339Nano)\n\t} else { // No new trigger time, clear the annotation.\n\t\tdelete(endpointSlice.Annotations, corev1.EndpointsLastChangeTriggerTime)"
  },
  {
    "id" : "36730e97-5024-4485-973c-27a5dd9b2c21",
    "prId" : 99997,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99997#pullrequestreview-657412424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bebfd2af-fb0b-4839-a754-43b664be3856",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "This seems to be reused in at least 2 more places, is not possible to export and consolidate them?",
        "createdAt" : "2021-03-10T09:37:42Z",
        "updatedAt" : "2021-04-19T09:50:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "77d5d31d-bec3-4b54-9220-14a32234a73f",
        "parentId" : "bebfd2af-fb0b-4839-a754-43b664be3856",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "I think this is actually the most straightforward given the reliance on the local `controllerName` var. Although we could extract this in the future, I'm fine with keeping it local for now.",
        "createdAt" : "2021-05-12T02:30:25Z",
        "updatedAt" : "2021-05-12T02:42:05Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c63ef147cc1743c1bc40ac28cd938d868daa356",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +404,408 @@// managedByController returns true if the controller of the provided\n// EndpointSlices is the EndpointSlice controller.\nfunc managedByController(endpointSlice *discovery.EndpointSlice) bool {\n\tmanagedBy, _ := endpointSlice.Labels[discovery.LabelManagedBy]\n\treturn managedBy == controllerName"
  },
  {
    "id" : "4fdd88bc-5abc-4c6f-8986-44c0298c1371",
    "prId" : 96440,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96440#pullrequestreview-528432825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ba22bb8-fd29-4e45-a163-607ee2ae602f",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "If `pod.Spec.NodeName` is empty, should we set `ep.NodeName` to nil instead?",
        "createdAt" : "2020-11-11T15:05:32Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "2aedbbcb-1288-43c1-b8cd-d22cee9a40b7",
        "parentId" : "5ba22bb8-fd29-4e45-a163-607ee2ae602f",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Updated, thanks!",
        "createdAt" : "2020-11-11T18:31:19Z",
        "updatedAt" : "2020-11-12T20:31:19Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e4b30a3e9076312e3bb6953f1000aaaae20056",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@\n\tif pod.Spec.NodeName != \"\" && utilfeature.DefaultFeatureGate.Enabled(features.EndpointSliceNodeName) {\n\t\tep.NodeName = &pod.Spec.NodeName\n\t}\n"
  },
  {
    "id" : "f48c7e8c-e686-4a40-9724-c5ef3a3c5ff1",
    "prId" : 91399,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91399#pullrequestreview-441766270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0907fcdc-057f-49cf-9aaa-a485cdd7342c",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "nit, who should have the helper functions, the endpoint or the endpointslice, the former will be deprecated by the later, right?",
        "createdAt" : "2020-07-01T10:05:16Z",
        "updatedAt" : "2020-07-17T19:27:33Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "5321b0d2-dcaa-4e9b-b74c-a9fe526083f5",
        "parentId" : "0907fcdc-057f-49cf-9aaa-a485cdd7342c",
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "`endpointutil` is shared by both",
        "createdAt" : "2020-07-02T15:03:48Z",
        "updatedAt" : "2020-07-17T19:27:33Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "e46572ef4b0f0a6b095c7dcdceb5bbca2ec0e9ff",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +121,125 @@\tfor _, podIP := range podStatus.PodIPs {\n\t\tisIPv6PodIP := utilnet.IsIPv6String(podIP.IP)\n\t\tif isIPv6PodIP == endpointutil.IsIPv6Service(service) {\n\t\t\taddresses = append(addresses, podIP.IP)\n\t\t}"
  },
  {
    "id" : "41d82486-71a0-4c76-9470-3bf53dc2a85e",
    "prId" : 82289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82289#pullrequestreview-283371813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b08a57d4-35e9-462b-a6be-8c5b8295438e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is still setting owner references... what makes that appropriate here and not elsewhere?",
        "createdAt" : "2019-09-04T04:15:49Z",
        "updatedAt" : "2019-09-04T16:09:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "68814f05-dfb1-4193-a516-ee6211e4a147",
        "parentId" : "b08a57d4-35e9-462b-a6be-8c5b8295438e",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Owner references will still be set by the EndpointSlice controller, they are still valuable for garbage collection here and in normal use cases. The big change in this PR involves not setting them for the special use case that is the apiserver managing resources referring to itself (outside of the scope of the EndpointSlice controller or Endpoints controller).",
        "createdAt" : "2019-09-04T04:35:32Z",
        "updatedAt" : "2019-09-04T16:09:56Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9483d827f0e7f2b605a0bce95e11702f1ff9c7",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +162,166 @@\t\t\tLabels:          map[string]string{discovery.LabelServiceName: service.Name},\n\t\t\tGenerateName:    getEndpointSlicePrefix(service.Name),\n\t\t\tOwnerReferences: []metav1.OwnerReference{*ownerRef},\n\t\t\tNamespace:       service.Namespace,\n\t\t},"
  },
  {
    "id" : "92495d4d-2e8a-4f60-be12-2557691268ff",
    "prId" : 82289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82289#pullrequestreview-283986040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df0eb4c-c16f-45d0-8684-baa3c21d33dd",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "so this is just for aesthetics? nothing tries to parse the service name out of the endpointslice name? glancing at the KEP, it seemed like a client could assume the `<service>.<suffix>` format and parse things from it",
        "createdAt" : "2019-09-05T01:43:48Z",
        "updatedAt" : "2019-09-05T01:43:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f1869817-bbd3-46ba-8f91-f70d635ac9a5",
        "parentId" : "7df0eb4c-c16f-45d0-8684-baa3c21d33dd",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Correct, that's what the label is for. The KEP needs to be updated here, notably to include the `-` naming scheme as opposed to the invalid `.` scheme it originally included. This new logic matches a pattern already commonly used by pods, so hopefully it makes sense.",
        "createdAt" : "2019-09-05T01:53:10Z",
        "updatedAt" : "2019-09-05T01:53:10Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      },
      {
        "id" : "4d8e04ac-a376-48b2-a3dd-287fa0117500",
        "parentId" : "7df0eb4c-c16f-45d0-8684-baa3c21d33dd",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok, probably worth clarifying in the KEP that the name isn't appropriate for reverse-engineering the service and the label is authoritative",
        "createdAt" : "2019-09-05T02:09:45Z",
        "updatedAt" : "2019-09-05T02:09:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9483d827f0e7f2b605a0bce95e11702f1ff9c7",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +173,177 @@// getEndpointSlicePrefix returns a suitable prefix for an EndpointSlice name.\nfunc getEndpointSlicePrefix(serviceName string) string {\n\t// use the dash (if the name isn't too long) to make the pod name a bit prettier\n\tprefix := fmt.Sprintf(\"%s-\", serviceName)\n\tif len(validation.ValidateEndpointSliceName(prefix, true)) != 0 {"
  },
  {
    "id" : "15d1fd17-690c-4b3a-8a03-4ca52f2f9333",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-280578069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b29c487-d81c-4fb7-b8eb-776135f36219",
        "parentId" : null,
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Can we maintain a reverse lookup map of the pod to the associated service or pod to service's topology keys like `map[metav1.UID]*corev1.Service` and `map[metav1.UID]map[string]string` in EndpointSlice Controller ? Then we we can get all the topology keys contained in the service associated with this pod, this makes it possible for user-defined topology keys other than use well-known topology keys only.\r\n\r\nYou can get topology keys from service once my service topology implementation PR https://github.com/kubernetes/kubernetes/pull/72046 been merged.\r\n\r\ncc @khenidak @thockin @freehan ",
        "createdAt" : "2019-08-27T02:10:34Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      },
      {
        "id" : "a84eab47-d424-4272-a7b9-06612e0b3ad2",
        "parentId" : "7b29c487-d81c-4fb7-b8eb-776135f36219",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "If we need to optimize that, we'll need to find a more efficient structure than that, I think.  There'd be a lot of string duplication.",
        "createdAt" : "2019-08-27T15:47:33Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5d8a92dc-f2f7-44c8-968d-882ab3af3319",
        "parentId" : "7b29c487-d81c-4fb7-b8eb-776135f36219",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "Yes, let me think more, see if there is a better way.",
        "createdAt" : "2019-08-28T01:53:06Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      },
      {
        "id" : "52ede4d4-1301-4baa-a5bb-44c52efc9f84",
        "parentId" : "7b29c487-d81c-4fb7-b8eb-776135f36219",
        "authorId" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "body" : "What about just cache a map of pod to a slice of associated services like`map[metav1.UID][]*v1.Service` ?\r\nWe will always call `GetPodServices` under the hook when pod add, update or delete right now:\r\n``` go\r\nservices, err := serviceLister.GetPodServices(pod)\r\n```\r\nSo we can cache this relationship at here, just a little memory cost I think (mostly pointers), and then we can traverse the `toplogyKeys` of all the services of the pod (automatically overwrite the duplicate toplogy key) when construct the `Topology` of `discovery.Endpoint`",
        "createdAt" : "2019-08-28T03:56:58Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "e379cdad-051b-485d-824f-1b14a8cc7dd0",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@\t\tfor _, topologyLabel := range topologyLabels {\n\t\t\tif node.Labels[topologyLabel] != \"\" {\n\t\t\t\ttopology[topologyLabel] = node.Labels[topologyLabel]\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "b1b55952-12ee-49bd-86c7-061896f7b2bd",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-279925307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ae0a9aa-ec15-4446-98b9-e8bcc91b074f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't understand these 2 special labels.  What are they and why?\r\n\r\nThe well-known label for node name is call \"kubernetes.io/hostname\" and pod-hostname isn't really part of tolopogy at all...",
        "createdAt" : "2019-08-27T02:22:38Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@\ttopology := map[string]string{}\n\n\tif pod.Spec.NodeName != \"\" {\n\t\ttopology[\"kubernetes.io/hostname\"] = pod.Spec.NodeName\n\t}"
  },
  {
    "id" : "339f12e5-41a3-4a39-a2cf-b43088e0a692",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-279950886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ff881a7-8f3e-42ee-9a58-57fdf9a942d8",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This needs a much better comment(s) to explain what it is for and why it is doing seemingly-crazy things.",
        "createdAt" : "2019-08-27T02:24:36Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6ef8fa08-2e55-4adc-a5c2-7ee8ac574b34",
        "parentId" : "5ff881a7-8f3e-42ee-9a58-57fdf9a942d8",
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "Reworked this function and added a more detailed comment about topology. Let me know if there are still crazy things that I missed.",
        "createdAt" : "2019-08-27T04:37:11Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@}\n\n// podToEndpoint returns an Endpoint object generated from a Pod and Node.\nfunc podToEndpoint(pod *corev1.Pod, node *corev1.Node) discovery.Endpoint {\n\t// Build out topology information. This is currently limited to hostname,"
  },
  {
    "id" : "c2fa1727-d510-41ba-9c8b-4f6627dc4ffd",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-280289899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23b4cf64-6a51-4091-ba09-515ad78f131b",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm OK with this for alpha, but the argument for including topology in EPS was that we could use the `topologyKeys` from the Service, so we'll have to plumb that through, once #72046 is usable.",
        "createdAt" : "2019-08-27T15:38:58Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@// podToEndpoint returns an Endpoint object generated from a Pod and Node.\nfunc podToEndpoint(pod *corev1.Pod, node *corev1.Node) discovery.Endpoint {\n\t// Build out topology information. This is currently limited to hostname,\n\t// zone, and region, but this will be expanded in the future.\n\ttopology := map[string]string{}"
  },
  {
    "id" : "7ed3f236-aebe-4a57-a03a-04537b0f0bdf",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-280289899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52f60973-1dd7-453f-8ef7-3cedc4b3e072",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I am curious why this is not just another entry in the list of label names below?\r\n\r\ne.g on my (slightly old) cluster, I see:\r\n\r\n```\r\n    labels:\r\n      beta.kubernetes.io/arch: amd64\r\n      beta.kubernetes.io/instance-type: n1-standard-2\r\n      beta.kubernetes.io/os: linux\r\n      failure-domain.beta.kubernetes.io/region: us-central1\r\n      failure-domain.beta.kubernetes.io/zone: us-central1-b\r\n      kubernetes.io/arch: amd64\r\n      kubernetes.io/hostname: kube1-minion-group-tddf\r\n      kubernetes.io/os: linux\r\n```",
        "createdAt" : "2019-08-27T15:41:46Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@\n\tif pod.Spec.NodeName != \"\" {\n\t\ttopology[\"kubernetes.io/hostname\"] = pod.Spec.NodeName\n\t}\n"
  },
  {
    "id" : "a6c6ca0e-0ad8-4f52-aa4a-34951f03ed6c",
    "prId" : 81048,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81048#pullrequestreview-280323986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "164504e9-ef88-4a5a-b875-5d365d5a66db",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We probably should add the \"failure-domain.beta.kubernetes.io\" names, too.   I can't actually see where the new names are being set.  It looks like that hasn't been finished yet - sorry!  I got ahead of myself...",
        "createdAt" : "2019-08-27T15:45:52Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "780e639e-b77c-4a8a-b9c0-fd63405263c8",
        "parentId" : "164504e9-ef88-4a5a-b875-5d365d5a66db",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "https://github.com/kubernetes/kubernetes/pull/81431",
        "createdAt" : "2019-08-27T16:33:45Z",
        "updatedAt" : "2019-08-29T04:13:56Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f6c249235b40b24e9ea1efdb1ff81dd76a8d68",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@\tif node != nil {\n\t\ttopologyLabels := []string{\n\t\t\t\"topology.kubernetes.io/zone\",\n\t\t\t\"topology.kubernetes.io/region\",\n\t\t}"
  }
]