[
  {
    "id" : "f93cb382-03f1-48a6-8fad-5fbebf9edc27",
    "prId" : 32117,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32117#pullrequestreview-121287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fded4f1-1312-452c-92e8-843390632e09",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Can you set log level?\n",
        "createdAt" : "2016-09-13T03:23:16Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "9252a0c8-fc14-4fcc-a724-438b9907dca3",
        "parentId" : "5fded4f1-1312-452c-92e8-843390632e09",
        "authorId" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "body" : "@m1093782566 what log level would be good here?\n",
        "createdAt" : "2016-09-13T07:32:34Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "tags" : [
        ]
      },
      {
        "id" : "fcc16dc6-9031-4777-87e2-292dd8d6279c",
        "parentId" : "5fded4f1-1312-452c-92e8-843390632e09",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "I think level(2) would be fine?\n",
        "createdAt" : "2016-09-13T09:01:39Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "3c56f3b9-c196-4d04-a6ca-13ed9fd60b8b",
        "parentId" : "5fded4f1-1312-452c-92e8-843390632e09",
        "authorId" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "body" : "The issue here is that all other logs in this file don't provide log level. Maybe there should be an issue for that? I think it's out of the scope of this PR to fix this.\n",
        "createdAt" : "2016-09-14T06:33:03Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "tags" : [
        ]
      },
      {
        "id" : "66afb8ed-8736-4265-9bba-5cda5619549f",
        "parentId" : "5fded4f1-1312-452c-92e8-843390632e09",
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "Yes, I think so.\n",
        "createdAt" : "2016-09-15T09:06:50Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bec58820249d2e49d76a1761e6ecd375bbf9297",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +114,118 @@\tif p.blockingPet != nil {\n\t\tmessage := errUnhealthyPet(fmt.Sprintf(\"Create of %v in PetSet %v blocked by unhealthy pet %v\", pet.pod.Name, pet.parent.Name, p.blockingPet.pod.Name))\n\t\tglog.Info(message)\n\t\treturn message\n\t}"
  },
  {
    "id" : "8c2abe6f-4f42-4e93-8be7-a16238d5a166",
    "prId" : 32117,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03aa3458-e4d1-4205-b4e7-d28fe1f4e5fc",
        "parentId" : null,
        "authorId" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "body" : "```\nvar errUnhealthyPet = fmt.Errorf(\"Create of PetSet blocked by unhealthy pet\")\n\nfunc f() error {\n   ...\n   glog.V(2).Infof(\"foo\")\n   return errUnhealthyPet\n}\n\n\nif err == errUnhealthyPet {\n   // do something\n}\n```\n\nlooks more clean. FYI :)\n",
        "createdAt" : "2016-09-13T14:57:57Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f2d7a78e-606f-4060-903e-a21198d7084e",
        "tags" : [
        ]
      },
      {
        "id" : "9c4b04d9-33b6-4ff0-91e7-666b839be312",
        "parentId" : "03aa3458-e4d1-4205-b4e7-d28fe1f4e5fc",
        "authorId" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "body" : "The error doesn't contain the names of objects that caused the error. Also, I prefer to use type switch for error type checking instead of string comparison. Thanks for the suggestion, but I don't think this is something I would  like to implement in this change.\n",
        "createdAt" : "2016-09-14T06:14:54Z",
        "updatedAt" : "2016-09-27T08:58:38Z",
        "lastEditedBy" : "f1b8dbef-1f61-40c9-a116-2e7319f9c36f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bec58820249d2e49d76a1761e6ecd375bbf9297",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +85,89 @@// or don't know its state but assume it is unhealthy. It's used as a signal to the caller for further operations like updating status.replicas.\n// This is not a fatal error.\ntype errUnhealthyPet string\n\nfunc (e errUnhealthyPet) Error() string {"
  },
  {
    "id" : "52cc27ec-dd62-4ce9-9eaa-d73ee12e1a8f",
    "prId" : 28909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c4674eb-6da2-472d-8cea-48ec4453b5dd",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Actually i think event() will check if err is nil internally, so you can probably get away with just:\n\n```\nerr := p.createPVC()\np.event(parent, create, \"pvc: name\", err)\n```\n",
        "createdAt" : "2016-07-20T04:34:17Z",
        "updatedAt" : "2016-07-20T04:34:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "23f0643b-0ffe-4fd4-aa9b-db3d6fabf273",
        "parentId" : "3c4674eb-6da2-472d-8cea-48ec4453b5dd",
        "authorId" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "body" : "I'm not sure I understand. I think if we did that, we would no longer accumulate the \"Failed to create...\" errors into the errMsg variable that we return from the function. \n",
        "createdAt" : "2016-07-21T07:51:13Z",
        "updatedAt" : "2016-07-21T07:51:14Z",
        "lastEditedBy" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "tags" : [
        ]
      },
      {
        "id" : "86d3061a-df90-4085-9e23-744ce6a94d02",
        "parentId" : "3c4674eb-6da2-472d-8cea-48ec4453b5dd",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "got it\n",
        "createdAt" : "2016-07-21T23:16:17Z",
        "updatedAt" : "2016-07-21T23:16:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "467333cc402985f1af9b355cd432d08429d31342",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +256,260 @@\t\t\t\terrMsg += fmt.Sprintf(\"Failed to create %v: %v\", pvc.Name, err)\n\t\t\t}\n\t\t\tp.event(pet.parent, \"Create\", fmt.Sprintf(\"pvc: %v\", pvc.Name), err)\n\t\t} else if err != nil {\n\t\t\terrMsg += fmt.Sprintf(\"Error trying to get pvc %v, %v.\", pvc.Name, err)"
  },
  {
    "id" : "b759369f-23b5-491e-b14a-d61ba72f0b00",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9674153f-0690-45f2-9cea-0657bcf95454",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Return an aggregate error instead - this is multiple failures, not a single one.\n",
        "createdAt" : "2016-04-29T02:59:37Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0a93ee96-8980-4273-bdf9-f6b230bb0f3c",
        "parentId" : "9674153f-0690-45f2-9cea-0657bcf95454",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Clarify? this is an aggregate error string that maps to errors for pvcs of a single pet. I'm doing a list of errors up the stack anway for pets in a petset, and wanted to avoid a list of lists. Having one error for a single pet sync failure is a little easier. \n",
        "createdAt" : "2016-04-30T02:50:14Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +245,249 @@// SyncPVCs syncs pvcs in the given pcb.\nfunc (p *apiServerPetClient) SyncPVCs(pet *pcb) error {\n\terrMsg := \"\"\n\t// Create new claims.\n\tfor i, pvc := range pet.pvcs {"
  },
  {
    "id" : "b7fcc235-695b-4471-8398-ca5ad6baee0c",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa9b6ca3-38dd-44a9-8df7-71421f0435e8",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Are we going to embed quorum logic here?  What's the intent of blocking the pet deletion?\n",
        "createdAt" : "2016-04-29T03:00:34Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cac1441f-685c-4f4c-8a3c-a50a3cbe3a69",
        "parentId" : "fa9b6ca3-38dd-44a9-8df7-71421f0435e8",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "that there shouldn't be more than 1 pet in an unhealthy state at a time. If somethings dying, it should die before another one starts. Because then they have a chance to relect etc in deletionTerminationGrace. \n\nJust not block deletes? or do you mean allow 1 delete and 1 create simultaneously?\n",
        "createdAt" : "2016-04-29T03:13:16Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "0df2e175-97e6-4bbf-8716-2d76d3af5967",
        "parentId" : "fa9b6ca3-38dd-44a9-8df7-71421f0435e8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I can understand the intent - my concern is whether it's this controller that gates membership vs that being pushed elsewhere.  It's fine for now, after all this is an alpha.\n",
        "createdAt" : "2016-05-02T17:44:43Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "68016a83-ac58-4dd3-89b5-f7d37bd40f51",
        "parentId" : "fa9b6ca3-38dd-44a9-8df7-71421f0435e8",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Ah yes, that was the argument for the babysitter, or some external agent aware of such things. because I could totally have a petset that has deletionGrace = 24h to allow rsyncing the entire db, and it won't get replaced for a day. We have the same issue with scale up, that's gated on Running + an \"initialized\" annotation currently.\n",
        "createdAt" : "2016-05-02T17:49:14Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@\t\treturn nil\n\t}\n\tif p.blockingPet != nil {\n\t\tglog.Infof(\"Delete of %v in PetSet %v blocked by unhealthy pet %v\", realPet.pod.Name, pet.parent.Name, p.blockingPet.pod.Name)\n\t\treturn nil"
  },
  {
    "id" : "3c0e0331-7e72-4ab4-97f3-7be8439ddc30",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c65688f-5554-416a-bd06-367daba1e31a",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "What pcb is used for?\n",
        "createdAt" : "2016-04-29T05:31:14Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "8911b233-f360-4d87-98d0-b3f658acdde0",
        "parentId" : "9c65688f-5554-416a-bd06-367daba1e31a",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "various things all over the implementation. It's like a tcb https://en.wikipedia.org/wiki/Thread_control_block\n",
        "createdAt" : "2016-04-29T06:04:10Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "d066ea90-1c9f-4cd8-8647-d8b71d591cf4",
        "parentId" : "9c65688f-5554-416a-bd06-367daba1e31a",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "sorry for being confusing.\nI know what TCB and control blocks are.\nBut I didn't know why you add this control block? Any specific use cases?\n",
        "createdAt" : "2016-04-29T06:15:53Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "914def28-d58a-4e0f-aa83-3468cc9368c7",
        "parentId" : "9c65688f-5554-416a-bd06-367daba1e31a",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Some comments and docs on it would help people to review too\n",
        "createdAt" : "2016-04-29T06:16:12Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "fef6a985-b002-4795-9e34-b75d0122fcbc",
        "parentId" : "9c65688f-5554-416a-bd06-367daba1e31a",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "it's just a datastructure for passing around consolidated information about a pet more than what's in the api object. You might want to either examing the code for its use or wait till I add doc strings and remove the wip in the title.\n",
        "createdAt" : "2016-04-29T06:20:30Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +51,55 @@// It serves as the manifest for a single pet. Users must populate the pod\n// and parent fields to pass it around safely.\ntype pcb struct {\n\t// pod is the desired pet pod.\n\tpod *api.Pod"
  },
  {
    "id" : "ef0f0927-c81a-46aa-b553-44bbf95c3e31",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f049c7ac-624b-445a-87f0-ca5b19039142",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "What does \"sync\" mean here?\nCan you write more docs on this?\n",
        "createdAt" : "2016-04-29T06:26:26Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "200cd8b7-718f-467b-a55e-ce850a8066c0",
        "parentId" : "f049c7ac-624b-445a-87f0-ca5b19039142",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "same as the justification for syncPetSet, intentionally hand wavy because it's a generic controller pattern. it'll get a doc string, but that's about it. It isn't a user facing api.\n",
        "createdAt" : "2016-04-29T06:30:15Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +83,87 @@\n// Sync syncs the given pet.\nfunc (p *petSyncer) Sync(pet *pcb) error {\n\tif pet == nil {\n\t\treturn nil"
  },
  {
    "id" : "3523c02c-ef9f-42dc-bd8c-3153a5caf9de",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "021cf6e4-7f03-487f-88fe-64be1a2b1ab9",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "One questions here. What do you think about decoupling blockingPet from petSyncer?\n\nFrom what I understand, blockingPet is trying to synchronize petSyncer itself and let it do sequential create/delete. The synchronization should be done externally. I have to confess that it doesn't look clean ;P in that creating newSyncer with unhealthy pet, and then blocks internally.\n",
        "createdAt" : "2016-04-30T23:31:59Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "1c3a6f1c-8848-4742-82d0-a32629e4b27b",
        "parentId" : "021cf6e4-7f03-487f-88fe-64be1a2b1ab9",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I started off trying to do something like that but it's non ideal. \n\nThis keeps all the: if this then that logic in a leaf function of the controller (so local complexity) and keeps all higher layers of the stack generic for all pets (global simplicity). \n\nAlso I explicitly don't want anything else doing the \"if exists, update, else create\" logic, that's the job of the syncer, it handles retries and everything related to the api client. Given that, it needs a bool/count/something passed in and out (I created this pet, remember it and only invoke me when you want to create another), which is actually bad for 3 reasons:     \n\n```\n1. passing something back and forth when the caller is not going to understand it makes refactoring more error prone \n2. since we haven't figured out what should/shouldn't block the petset yet, isolating the logic in the following 20 lines of code is much better than teaching the controller about it\n3 just passing blockingPet is strictly better than a bool for events and logging\n```\n",
        "createdAt" : "2016-05-02T16:58:32Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@\t// iteration, either because it is not yet Running, or being Deleted, that\n\t// prevents other creates/deletions.\n\tblockingPet *pcb\n}\n"
  }
]