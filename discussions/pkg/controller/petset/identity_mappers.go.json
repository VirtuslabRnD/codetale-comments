[
  {
    "id" : "12e80e73-0085-40da-9796-69516052b937",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0320058c-20eb-47f4-ba15-598f2fe435ee",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Public methods should return public interfaces by convention\n",
        "createdAt" : "2016-04-29T02:44:33Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +38,42 @@// Note that running a single identity mapper is not guaranteed to give\n// your pet a unique identity. You must run them all. Order doesn't matter.\ntype identityMapper interface {\n\t// SetIdentity takes an id and assigns the given pet an identity based\n\t// on the pet set spec. The is must be unique amongst members of the"
  },
  {
    "id" : "525da2ca-184e-4087-b86f-9047b179e6a4",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73322970-6d51-46f9-8f51-c6d1bdcecc56",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should we be validating on this instead and rejecting the template?\n",
        "createdAt" : "2016-04-29T02:46:07Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f9ba336b-2042-40b4-a930-3945e69dff6c",
        "parentId" : "73322970-6d51-46f9-8f51-c6d1bdcecc56",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "yeah I added a todo, but I'm open to doing it in this pr. I actually need custom volume validation of petset spec in general. I have a todo in validtion.go as well. \n",
        "createdAt" : "2016-04-30T02:49:26Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@\t\tif ok {\n\t\t\t// TODO: Validate and reject this.\n\t\t\tglog.V(4).Infof(\"Overwriting existing volume source %v\", podVol.Name)\n\t\t}\n\t\tnewVol := api.Volume{"
  },
  {
    "id" : "019ab61f-6e8c-4901-a0cf-d6893a4f9185",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab968185-ad51-47d5-b5c9-bb3121faea41",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think the order here should be stable, not random from the map.\n",
        "createdAt" : "2016-04-29T02:47:55Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c9565823-f2fc-44f7-9037-d6f57e01d293",
        "parentId" : "ab968185-ad51-47d5-b5c9-bb3121faea41",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Clarify? It's 2 lists into 2 maps and I'm looking for a key match, so last one should always win? \ni.e if i have 2 templates with the same name, like:\n\n```\n  volumeClaimTemplates:\n  - metadata:\n      name: datadir\n  - metadata:\n      name: datadir\n      annotations:\n        volume.alpha.kubernetes.io/storage-class: anything\n```\n\nthe second one makes it in because we're iterating the list into a map.\nIf we have:\n\n```\n  petSpec:\n      volumes:\n      - name: datadir\n        mountPath: /foo\n      - name: datadir\n         mountPath: /bar\n       - name: datadir\n         hostPath\n\n  volumeClaimTemplates:\n  - metadata:\n      name: datadir\n```\n\nThe last one (host path) will get clobbered. This is what we should validate against. \nOr are you asking for different behavior? \nMaps make the comparison less convoluted, because I'm modifying the claim name to fit the id of the pet, but matching the spec.Volumes on the pre-modified name.\n",
        "createdAt" : "2016-04-30T02:49:30Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@\n\t// Insert claims for the idempotent petSet volumes\n\tfor name, claim := range petClaims {\n\t\t// Volumes on a pet for which there are no associated claims on the\n\t\t// petset are pod local, and die with the pod."
  },
  {
    "id" : "1ccb733d-50c9-4cf5-aa0b-da290f3a66e0",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "021e721b-fc68-4017-a2fa-f56500220912",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "What is this supposed to be doing?  Non-obvious / needs a better name.\n\nAlso, this one seems like it should be the hash, not the one above.\n",
        "createdAt" : "2016-04-29T02:49:01Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "571320fe-0bc5-4d20-bd9c-bcc31fb0c463",
        "parentId" : "021e721b-fc68-4017-a2fa-f56500220912",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "It's like a custom string method for just the volume identity of the given pod. Without looking at ns/name you should be able to concat the String methods of all identity mappers and get something unique for this pet. If 2 pets are somehow using the same pvc, they'll get the same volume id. Simply stringifying it is the simples way to produce a id hash that I can compare in the controller and detect if someone has messed with the volumes and I need to reconcile the pet spec (suggestions?). \n",
        "createdAt" : "2016-04-29T02:55:08Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "89289b2a-37d5-4c98-b71b-26ff94aa2374",
        "parentId" : "021e721b-fc68-4017-a2fa-f56500220912",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That's fine, just wasn't obvious from inspection why this way was cleaner.\nSolvable with Godoc.\n\nOn Thu, Apr 28, 2016 at 10:55 PM, Prashanth B notifications@github.com\nwrote:\n\n> In pkg/controller/petset/identity_mappers.go\n> https://github.com/kubernetes/kubernetes/pull/24912#discussion_r61530451\n> :\n> \n> > -   // Transfer any ephemeral pod volumes\n> > -   for name, vol := range podVolumes {\n> > -       if _, ok := petClaims[name]; !ok {\n> > -           petVolumes = append(petVolumes, vol)\n> > -       }\n> > -   }\n> > -   pet.Spec.Volumes = petVolumes\n> > -   return\n> >   +}\n> >   +\n> >   +func (v *VolumeIdentityMapper) GetIdentity(pet *api.Pod) string {\n> > -   // TODO: Make this a hash?\n> > -   return v.String(pet)\n> >   +}\n> >   +\n> >   +func (v *VolumeIdentityMapper) String(pet *api.Pod) string {\n> \n> It's like a custom string method for just the volume identity of the given\n> pod. Without looking at ns/name you should be able to concat the String\n> methods of all identity mappers and get something unique for this pet. If 2\n> pets are somehow using the same pvc, they'll get the same volume id. Simply\n> stringifying it is the simples way to produce a id hash (suggestions?).\n> \n> â€”\n> You are receiving this because you were assigned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/24912/files/0ecd23c7401b6f2bc0fb35c0101aa8d4d139511f..dfb99f88a2bbf772b26f7e31c4ce4878a04fb937#r61530451\n",
        "createdAt" : "2016-04-29T03:10:42Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4e15d7dd-0f28-4ae2-9f92-5447fe47469b",
        "parentId" : "021e721b-fc68-4017-a2fa-f56500220912",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Will write today/tomorrow, was waiting to see if anyone (i.e you :) would go mad about size of review etc.\n",
        "createdAt" : "2016-04-29T03:14:33Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@\n// String is a string function for the network identity of the pet.\nfunc (v *VolumeIdentityMapper) String(pet *api.Pod) string {\n\tids := []string{}\n\tpetVols := sets.NewString()"
  },
  {
    "id" : "b5e33bdf-dbd4-4162-aee4-bc3f4fec4a59",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dc5da87-2484-46bb-9e68-d8ca1d39096b",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why do we assume that?\n",
        "createdAt" : "2016-04-29T02:49:41Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0c1e3912-002a-4a86-ab92-79c4fe292fb8",
        "parentId" : "2dc5da87-2484-46bb-9e68-d8ca1d39096b",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "It's typically something an admin specifies and it felt wrong for the petset controller to pick a tier. But without it, the pvc controller will ignore it. I _think_ that's a current implementation detail, unsure: https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/persistentvolume/persistentvolume_provisioner_controller.go#L177, i feel like the controller should probably slot to lowest tier or something.  \n",
        "createdAt" : "2016-04-30T02:49:38Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +170,174 @@\t\tclaim.Labels = v.ps.Spec.Selector.MatchLabels\n\n\t\t// TODO: We're assuming that the claim template has a volume QoS key, eg:\n\t\t// volume.alpha.kubernetes.io/storage-class: anything\n\t\tpetClaims[pvc.Name] = claim"
  },
  {
    "id" : "9309ac1d-508a-4acf-b077-d3491048c1c4",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f67af49-28ef-4132-85bd-95196c59cc1f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This seems like it should be something the mapper is doing, not this code (leaky abstraction)\n",
        "createdAt" : "2016-04-29T02:50:13Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8a2429a1-b919-4dc8-9288-97546d8f6b9d",
        "parentId" : "1f67af49-28ef-4132-85bd-95196c59cc1f",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Fair enough, it doesn't fit in the interface (identityMapper only gives/gets identity of single pets and their references, not claim objects) but it could well be a dangling method.\n",
        "createdAt" : "2016-04-30T02:49:42Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +181,185 @@\t// Strip out the \"-(index)\" from the pet name and use it to generate\n\t// claim names.\n\tid := strings.Split(pet.Name, \"-\")\n\tpetID := id[len(id)-1]\n\tpvcs := []api.PersistentVolumeClaim{}"
  },
  {
    "id" : "5f1aa189-4523-487c-ad9a-f4ff6e381558",
    "prId" : 24912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13df101a-b627-4df8-ba89-b5b3b13a3da2",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "Why is it called \"identity mapper\"? It sounds like \"unique name mapper\" or \"unique name manager\"\n",
        "createdAt" : "2016-04-29T04:55:18Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "9a86aa88-8eea-4048-94d4-439ae93cad53",
        "parentId" : "13df101a-b627-4df8-ba89-b5b3b13a3da2",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "that's exactly what it's not. Identity != name or namespace. its a consistent network + storage identity. For convenienc it coincides with \"name\" today.\n",
        "createdAt" : "2016-04-29T05:17:20Z",
        "updatedAt" : "2016-05-05T01:39:30Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bc3052551550aa2bd7306daed44c8b293221ff0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +31,35 @@\n// identityMapper is an interface for assigning identities to a pet.\n// All existing identity mappers just append \"-(index)\" to the petset name to\n// generate a unique identity. This is used in claims/DNS/hostname/petname\n// etc. There's a more elegant way to achieve this mapping, but we're"
  }
]