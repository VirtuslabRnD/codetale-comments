[
  {
    "id" : "5a9faafe-da04-4ea9-a5ab-edfa3bbd05f8",
    "prId" : 82152,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82152#pullrequestreview-283314776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eca9bdd-8a99-44b2-9557-df98aa1eafd3",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This test verifies that it retries on a conflict error, but nowhere is it made clear in the code or comments why this is important. Can you mention the race here and that this is just the simplest way of avoiding it?",
        "createdAt" : "2019-09-03T16:47:22Z",
        "updatedAt" : "2019-09-03T23:52:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8f6a1e11-da5c-4b42-b1fe-85a5b7b9465a",
        "parentId" : "3eca9bdd-8a99-44b2-9557-df98aa1eafd3",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I've drastically revamped the test so that it asserts on the underlying bad behavior rather than how we fix it. PTAL",
        "createdAt" : "2019-09-03T23:42:24Z",
        "updatedAt" : "2019-09-03T23:52:53Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d937c5f101faf48d4ac31ca748037f2e8d8afc",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1054,1058 @@// (C) If the DisruptionController writes PodDisruptionsAllowed=1 despite the\n// resource conflict error, then there is a bug.\nfunc TestUpdatePDBStatusRetries(t *testing.T) {\n\tdc, _ := newFakeDisruptionController()\n\t// Inject the production code over our fake impl"
  },
  {
    "id" : "cf08675f-e16c-4aa7-8e2b-79ce03df900f",
    "prId" : 82152,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82152#pullrequestreview-283766690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "965305c0-9702-4bcd-915d-cb47d2a81beb",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Isn't this wait covered by the wait on line 1084 below ?",
        "createdAt" : "2019-09-04T01:02:09Z",
        "updatedAt" : "2019-09-04T01:02:09Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "595070fa-0b3b-4b42-be12-6e2bddbd3401",
        "parentId" : "965305c0-9702-4bcd-915d-cb47d2a81beb",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I ran the test without this wait and the test passed.",
        "createdAt" : "2019-09-04T01:18:47Z",
        "updatedAt" : "2019-09-04T01:18:47Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "f5feaac4-8de3-4810-a9eb-5852793b578f",
        "parentId" : "965305c0-9702-4bcd-915d-cb47d2a81beb",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "The test is likely to be flaky without these waits.",
        "createdAt" : "2019-09-04T17:12:39Z",
        "updatedAt" : "2019-09-04T17:12:40Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d937c5f101faf48d4ac31ca748037f2e8d8afc",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +1079,1083 @@\t// DisruptionController does most of its logic by reading from informer\n\t// listers, so this guarantee is sufficient.\n\tif err := waitForCacheCount(dc.pdbStore, 1); err != nil {\n\t\tt.Fatalf(\"Failed to verify PDB in informer cache: %v\", err)\n\t}"
  },
  {
    "id" : "d449c595-aade-4e47-be71-3e7872143ddf",
    "prId" : 82152,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82152#pullrequestreview-283969033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b39f5293-33e3-45b8-95d1-18f1f4af362d",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Maybe extract the code till line 1125 in a helper for future code reuse",
        "createdAt" : "2019-09-04T01:28:13Z",
        "updatedAt" : "2019-09-04T01:28:14Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "205d3a86-5d18-4d73-9a36-fe4769280edf",
        "parentId" : "b39f5293-33e3-45b8-95d1-18f1f4af362d",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "Are you referring to the evict function, or just the GVR constants? I would prefer to extract these in the future when we have a second or third call site.\r\n\r\nThe function could be extracted as a generic helper, but the current implementation is tightly coupled to this unit test. It both captures local variables from the surrounding scope and makes assumptions about the fake clientset that will be used.",
        "createdAt" : "2019-09-04T17:16:48Z",
        "updatedAt" : "2019-09-04T17:16:48Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      },
      {
        "id" : "df9e2a49-bb1f-4be4-aaaf-fd82dcf844a2",
        "parentId" : "b39f5293-33e3-45b8-95d1-18f1f4af362d",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "refactoring in the future is fine.",
        "createdAt" : "2019-09-05T00:44:18Z",
        "updatedAt" : "2019-09-05T00:44:18Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8d937c5f101faf48d4ac31ca748037f2e8d8afc",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +1093,1097 @@\t// Evict simulates the visible effects of eviction in our fake client.\n\tevict := func(podNames ...string) {\n\t\t// These GVRs are copied from the generated fake code because they are not exported.\n\t\tvar (\n\t\t\tpodsResource                 = schema.GroupVersionResource{Group: \"\", Version: \"v1\", Resource: \"pods\"}"
  },
  {
    "id" : "af9c43b3-964f-486f-973a-6ac404cb0774",
    "prId" : 70370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70370#pullrequestreview-186724252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5774ccee-313a-4336-92d0-5bdca4df5f10",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Honestly, I'd prefer being explicit in the code with these imports, iow. `appsv1` should be used here. This way it's explicit what you're doing in the code. ",
        "createdAt" : "2018-12-19T19:32:38Z",
        "updatedAt" : "2018-12-19T19:46:36Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "99f5b143-9c50-467b-a975-73560351c3b9",
        "parentId" : "5774ccee-313a-4336-92d0-5bdca4df5f10",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "will make a note for the future, was trying to keep the diff minimal for this PR",
        "createdAt" : "2018-12-19T20:00:43Z",
        "updatedAt" : "2018-12-19T20:00:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff455e340d67f7874d2fa45814804b76abe5885",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +24,28 @@\t\"time\"\n\n\tapps \"k8s.io/api/apps/v1\"\n\t\"k8s.io/api/core/v1\"\n\tpolicy \"k8s.io/api/policy/v1beta1\""
  },
  {
    "id" : "894617a3-23d8-412f-b670-0f6078738f91",
    "prId" : 48231,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48231#pullrequestreview-50673404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f74503b-b60b-4ec9-953d-29cf39d62399",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Is this needed?",
        "createdAt" : "2017-07-17T22:09:36Z",
        "updatedAt" : "2017-07-17T22:09:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "c0e0333c-eecd-4c10-9597-42649a69e44e",
        "parentId" : "4f74503b-b60b-4ec9-953d-29cf39d62399",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think instead we should migrate \"api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String()\" to \"testapi\" in /pkg/controller/disruption/disruption_test.go.",
        "createdAt" : "2017-07-17T22:12:52Z",
        "updatedAt" : "2017-07-17T22:12:52Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "27d6d5a7-ae64-4140-a5e7-2c15485a7937",
        "parentId" : "4f74503b-b60b-4ec9-953d-29cf39d62399",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It's fine to do it in a followup",
        "createdAt" : "2017-07-17T22:19:36Z",
        "updatedAt" : "2017-07-17T22:19:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "716a0e49-8d1d-4109-89b6-029d7798ec4f",
        "parentId" : "4f74503b-b60b-4ec9-953d-29cf39d62399",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@jcbsmpsn could you send a follow up?",
        "createdAt" : "2017-07-18T16:47:37Z",
        "updatedAt" : "2017-07-18T16:47:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b565f538220091aed43308b14d7409c31055f75d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +36,40 @@\t\"k8s.io/client-go/util/workqueue\"\n\t\"k8s.io/kubernetes/pkg/api\"\n\t_ \"k8s.io/kubernetes/pkg/api/install\"\n\t\"k8s.io/kubernetes/pkg/controller\"\n"
  },
  {
    "id" : "05bcac1f-449e-45d6-ba1a-e59f8804d34f",
    "prId" : 45003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45003#pullrequestreview-39926516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "parentId" : null,
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Can this test be split into multiple test cases, so we don't modify pods that were already added to the pod store? In my experience, that can lead to flaky/racy tests because you are changing things you already gave to the pod store, which it is not designed to support.\r\n\r\nIf these need to be in one test case/func, is it possible to add new pods rather than changing existing ones?",
        "createdAt" : "2017-05-18T21:38:52Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "82658db8-1db5-4ff2-ac81-597edce405b9",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "took care of all other comments. will try this and see how it works. Not very familiar with this framework",
        "createdAt" : "2017-05-20T06:51:33Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "bc215ab4-58e2-4ea8-a3a7-126dca4b542a",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "This PR LGTM other than the potential flakiness here. If you want, we can just try to measure whether this is going to be flaky and submit it as is if it passes.\r\n\r\nOne way to do that is something like `go test -count 1000` or `go test -race -count 1000`. You might want to start with a smaller count and work up to what your machine can handle. It seems that Go sometimes runs the tests concurrently and I've locked up my workstation before by putting a count that was too high. :)",
        "createdAt" : "2017-05-22T18:45:53Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "a695e708-a34b-40ff-8c75-1e2397cbea9d",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "go test ./pkg/controller/disruption/... --count 300 --race \r\nrace: limit on 8192 simultaneously alive goroutines is exceeded, dying\r\nFAIL\tk8s.io/kubernetes/pkg/controller/disruption\t16.577s\r\n\r\ngo test ./pkg/controller/disruption/... --count 250 --race \r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t16.575s\r\n\r\nI cant go beyond 250 on my mac.  Is there a way to request this count with the prbot ?",
        "createdAt" : "2017-05-23T07:24:34Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "1c76b6a1-4810-4602-b241-5f139f2d831c",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Try running higher counts, but without `-race`.",
        "createdAt" : "2017-05-23T19:07:45Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "3f142d42-63ae-49c9-bdb8-bf05b41af0ea",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "```\r\ngo test ./pkg/controller/disruption/... --count 300\r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t2.348s\r\ngo test ./pkg/controller/disruption/... --count 400\r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t3.047s\r\ngo test ./pkg/controller/disruption/... --count 600\r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t4.573s\r\ngo test ./pkg/controller/disruption/... --count 900\r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t6.864s\r\ngo test ./pkg/controller/disruption/... --count 1200\r\nok  \tk8s.io/kubernetes/pkg/controller/disruption\t9.862s\r\n```",
        "createdAt" : "2017-05-23T21:40:05Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "a415ad26-582d-48ed-a65e-d19e7ec04514",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Thanks. Let me know when you've resolved the merge conflicts and I will LGTM.",
        "createdAt" : "2017-05-23T22:51:22Z",
        "updatedAt" : "2017-05-24T02:43:47Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "3a5ee659-4c97-4e16-9d2f-edc79fdec1f2",
        "parentId" : "4c1474c3-a745-46b4-adff-e2205c3de550",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@enisoc resolved conflicts.",
        "createdAt" : "2017-05-24T04:50:14Z",
        "updatedAt" : "2017-05-24T04:50:14Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ab60829584dbb16e24fcc78c40dfe6bb53ea96d",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +497,501 @@\trc.Name = \"rc 1\"\n\tfor i := 0; i < podCount; i++ {\n\t\tupdatePodOwnerToRc(t, pods[i], rc)\n\t}\n\tadd(t, dc.rcStore, rc)"
  },
  {
    "id" : "e6a3588f-2476-433e-a258-63e7f0fe992a",
    "prId" : 25921,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6b0ba9-0290-4db2-a59e-0d19f4017768",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "print the err too\n",
        "createdAt" : "2016-07-10T04:50:48Z",
        "updatedAt" : "2016-08-16T22:20:58Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "8dc6d083-b413-4f9b-94d6-36420988276b",
        "parentId" : "ed6b0ba9-0290-4db2-a59e-0d19f4017768",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "ping\n",
        "createdAt" : "2016-08-14T20:21:23Z",
        "updatedAt" : "2016-08-16T22:20:59Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d60ba3c6e2b7d57441405a108fbfe2b8e38495cc",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@\trcName, err := controller.KeyFunc(rc)\n\tif err != nil {\n\t\tt.Fatalf(\"Unexpected error naming RC %q\", rc.Name)\n\t}\n"
  },
  {
    "id" : "6835c452-296e-449c-85fd-70f664488f4b",
    "prId" : 25921,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6cf78c-0bcc-48f7-98e8-952c66ed858b",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Please add a comment at the beginning of each of the other tests as well.\n",
        "createdAt" : "2016-07-10T05:03:14Z",
        "updatedAt" : "2016-08-16T22:20:58Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d60ba3c6e2b7d57441405a108fbfe2b8e38495cc",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@}\n\n// Create one with no selector.  Verify it matches 0 pods.\nfunc TestNoSelector(t *testing.T) {\n\tdc, ps := newFakeDisruptionController()"
  }
]