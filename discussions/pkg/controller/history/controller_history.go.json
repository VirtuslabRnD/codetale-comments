[
  {
    "id" : "be48ed2f-b370-4710-8221-110a007777f5",
    "prId" : 66882,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66882#pullrequestreview-154310094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97657b55-5bb5-4d9f-af16-ef0492a6d902",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "You don't need to sort it twice. In the `Less` function of `byRevision`, use a tie-breaker there when two revisions are equal. I'd prefer using something like `CreationTimestamp` as a tie-breaker. ",
        "createdAt" : "2018-09-11T00:42:33Z",
        "updatedAt" : "2018-11-06T00:02:40Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "09ed0231-6eba-4deb-bda0-8f2bc9258a8c",
        "parentId" : "97657b55-5bb5-4d9f-af16-ef0492a6d902",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We can use `Name` as another tie-breaker if both `Revision` and `CreationTimestamp` are equal. ",
        "createdAt" : "2018-09-11T17:26:40Z",
        "updatedAt" : "2018-11-06T00:02:40Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0aae852a3c1a5542e47fed344e12d1132c54964b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +114,118 @@// SortControllerRevisions sorts revisions by their Revision.\nfunc SortControllerRevisions(revisions []*apps.ControllerRevision) {\n\tsort.Stable(byRevision(revisions))\n}\n"
  },
  {
    "id" : "f859e1fb-d897-4ab0-b315-db025860c954",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41918453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad05135b-c1f3-47b8-a1c8-e15c2b4f33be",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "You also need to set a finalizer, see https://github.com/kubernetes/kubernetes/pull/45764",
        "createdAt" : "2017-06-02T16:42:27Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "fae926f5-b5e2-472f-87c6-25f5710e435c",
        "parentId" : "ad05135b-c1f3-47b8-a1c8-e15c2b4f33be",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "So I'm setting the finalizer during construction and I've added it the path as well, but I'm using a StrategicMergePatch so shouldn't I be able to get away with only setting it on construction? I mean the implementation I'm using works so I'll leave it be, but it seems like we shouldn't have to reset  the finalizers in this case or in the case of Deployments Orphaning ReplicaSets.",
        "createdAt" : "2017-06-02T19:31:57Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "44e3d8de-2c4a-4281-ba12-a6b67eb58374",
        "parentId" : "ad05135b-c1f3-47b8-a1c8-e15c2b4f33be",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Yeah, this is needed in ReplicaSets so the deletion can cascade to Pods but not in ControllerRevisions (at least for now) - disregard.",
        "createdAt" : "2017-06-03T11:18:02Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +309,313 @@\treturn rh.client.Apps().ControllerRevisions(parent.GetNamespace()).Patch(revision.GetName(),\n\t\ttypes.StrategicMergePatchType, []byte(fmt.Sprintf(\n\t\t\t`{\"metadata\":{\"ownerReferences\":[{\"apiVersion\":\"%s\",\"kind\":\"%s\",\"name\":\"%s\",\"uid\":\"%s\",\"controller\":true,\"blockOwnerDeletion\":true}],\"uid\":\"%s\"}}`,\n\t\t\tparentKind.GroupVersion().String(), parentKind.Kind,\n\t\t\tparent.GetName(), parent.GetUID(), revision.UID)))"
  },
  {
    "id" : "8cfda757-d4d2-410e-8fac-23c9512192b3",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41862413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d64e997c-ddad-46c8-b36d-8e2efb52a114",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Since this is implementing an interface, can't it live side-by-side in testing code?",
        "createdAt" : "2017-06-02T16:43:53Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "da6b2b72-65c4-4f44-926d-d6fa469b8a3c",
        "parentId" : "d64e997c-ddad-46c8-b36d-8e2efb52a114",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "I export it into StatefulSet. It seems like most fakes in the source code do not live in testing files. Also, we may want to add methods to aid in testing and export it as a class later. All the code that uses the interface now will still work if we change it to a class that implements the interface.",
        "createdAt" : "2017-06-02T19:19:44Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 336,
    "diffHunk" : "@@ -1,1 +334,338 @@}\n\ntype fakeHistory struct {\n\tindexer cache.Indexer\n\tlister  appslisters.ControllerRevisionLister"
  },
  {
    "id" : "ead65481-4b7a-4355-aeb9-f0073f0bf110",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41931105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7ff2447-fa33-4898-b7d1-0cdd587a85da",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`Apps()` is deprecated, `AppsV1beta1` should be used instead ",
        "createdAt" : "2017-06-02T22:40:36Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e1d23008-ea7c-4845-8586-f011aed5b589",
        "parentId" : "e7ff2447-fa33-4898-b7d1-0cdd587a85da",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "I am planning on updating statefulset and history to use AppsV1beta1 in a follow up PR. I think it is best to update them all, simultaneously, with a PR to do explicitly that, but I'd be willing to update history now if there is a strong reason.",
        "createdAt" : "2017-06-03T16:40:58Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "60985e6b-56dd-423a-877d-52805bf50f87",
        "parentId" : "e7ff2447-fa33-4898-b7d1-0cdd587a85da",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It can be done in a follow up PR.",
        "createdAt" : "2017-06-04T00:59:34Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c86ec454-13e0-41d3-a072-6997128edc4e",
        "parentId" : "e7ff2447-fa33-4898-b7d1-0cdd587a85da",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "I opened #46922, and I think we should do this prior to 1.7 release.",
        "createdAt" : "2017-06-04T01:27:27Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +277,281 @@\t\t}\n\t\tclone.Revision = newRevision\n\t\tupdated, updateErr := rh.client.Apps().ControllerRevisions(clone.Namespace).Update(clone)\n\t\tif updateErr == nil {\n\t\t\treturn nil"
  },
  {
    "id" : "0dd6790c-8601-44ad-b79a-d565d8effa7b",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41930929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98b1bde7-3512-416e-8ab5-475da135de6f",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "if we dont find an owner reference, we shouldnt count that history as owner",
        "createdAt" : "2017-06-04T01:06:19Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "f3b1e375-046b-407b-b705-4b71861351eb",
        "parentId" : "98b1bde7-3512-416e-8ab5-475da135de6f",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "if the reference is nil no controller owns it. It is added to owned. If no controller owns it we attempt to adopt it.",
        "createdAt" : "2017-06-04T01:10:57Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@\tfor i := range history {\n\t\tref := controller.GetControllerOf(history[i])\n\t\tif ref == nil || ref.UID == parent.GetUID() {\n\t\t\towned = append(owned, history[i])\n\t\t}"
  },
  {
    "id" : "4a500b6e-9bfc-4a82-8ea6-6e81dd26287f",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c772cdf8-dd96-45af-ade9-d2c141fbc0ce",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "`hash` is a uint32 which gets widened to an int64 and then converted to its string representation.\r\n\r\n`EqualRevision` tries to parse out a 32-bit signed integer on lines 126 and 133, ignoring errors. If the hash is >= 0x80000000, `strconv.ParseInt` will fail with a \"value out of range\" error and you would fall through to doing the deep semantic equality check.",
        "createdAt" : "2017-06-06T06:16:05Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +90,94 @@\thash := HashControllerRevision(cr, nil)\n\tcr.Name = ControllerRevisionName(parent.GetName(), hash)\n\tcr.Labels[ControllerRevisionHashLabel] = strconv.FormatInt(int64(hash), 10)\n\treturn cr, nil\n}"
  },
  {
    "id" : "82965fe2-626a-44b8-850b-967fcde07d15",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "134edaa9-0fb6-475b-8b24-5896b3078137",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "If both hash labels are found, could you not just do a string comparison of the hash labels instead of trying to parse them out into integers first?",
        "createdAt" : "2017-06-06T06:30:08Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@\t}\n\tif hs, found := lhs.Labels[ControllerRevisionHashLabel]; found {\n\t\thash, err := strconv.ParseInt(hs, 10, 32)\n\t\tif err == nil {\n\t\t\tlhsHash = new(uint32)"
  },
  {
    "id" : "7f096972-3c2f-44ec-b640-468e9c294914",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6ddc94f-782a-4aa6-8a61-7e501ebfb1e1",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "Nit: s/added written/written/",
        "createdAt" : "2017-06-06T06:58:00Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@\n// HashControllerRevision hashes the contents of revision's Data using FNV hashing. If probe is not nil, the byte value\n// of probe is added written to the hash as well.\nfunc HashControllerRevision(revision *apps.ControllerRevision, probe *uint32) uint32 {\n\thf := fnv.New32()"
  },
  {
    "id" : "a40801b0-4e1e-486f-88a9-76300327430c",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eb154bd-22e5-4e12-a41f-699099b2223a",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "Nit: comment says \"the byte value\" is added to the hash, but it's the string representation of `*probe` that gets written.\r\n\r\nDo you want to use `encoding/binary` and do `binary.Write(hf, binary.LittleEndian, *probe)` instead?",
        "createdAt" : "2017-06-06T07:08:54Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@}\n\n// HashControllerRevision hashes the contents of revision's Data using FNV hashing. If probe is not nil, the byte value\n// of probe is added written to the hash as well.\nfunc HashControllerRevision(revision *apps.ControllerRevision, probe *uint32) uint32 {"
  },
  {
    "id" : "5ca80445-8945-43bb-81f4-f66e2319e96d",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b99df6f7-2b6c-42bf-b7bc-017067ab9eb3",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "fakeHistory's CreateControllerRevision sets the clone's namespace to the parent's namespace. Do you need to do that here?",
        "createdAt" : "2017-06-06T07:11:56Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      },
      {
        "id" : "f8f73561-3b82-4e6b-9007-7eaa7cbbdfa3",
        "parentId" : "b99df6f7-2b6c-42bf-b7bc-017067ab9eb3",
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "As an aside, fakeHistory's CreateControllerRevision and ListControllerRevisions are nearly identical to realHistory's implementations. Opportunity for factoring out the common code?",
        "createdAt" : "2017-06-06T07:13:59Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +245,249 @@\t}\n\tclone := any.(*apps.ControllerRevision)\n\n\t// Continue to attempt to create the revision updating the name with a new hash on each iteration\n\tfor {"
  },
  {
    "id" : "ade09156-1956-4e3a-af99-5e9b99865a23",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42192645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "114d2fb8-dd55-4cb9-b454-712be5847dde",
        "parentId" : null,
        "authorId" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "body" : "Nit: s/add/delete/",
        "createdAt" : "2017-06-06T07:22:15Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "ca0c262d-4bb5-48cc-a79a-6c7ce854f22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +315,319 @@\nfunc (rh *realHistory) ReleaseControllerRevision(parent metav1.Object, revision *apps.ControllerRevision) (*apps.ControllerRevision, error) {\n\t// Use strategic merge patch to add an owner reference indicating a controller ref\n\treleased, err := rh.client.Apps().ControllerRevisions(revision.GetNamespace()).Patch(revision.GetName(),\n\t\ttypes.StrategicMergePatchType,"
  }
]