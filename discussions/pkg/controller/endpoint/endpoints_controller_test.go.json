[
  {
    "id" : "b9ebddba-e3e7-4bdb-b75a-72b925831341",
    "prId" : 93030,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93030#pullrequestreview-457854778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1a85e8b-7d4b-4f1a-8dba-9988978dd1a6",
        "parentId" : null,
        "authorId" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "body" : "There's a lot going on in this test, it might help to have a comment above the function explaining what this test is trying to cover and a high level overview of how it accomplishes that.",
        "createdAt" : "2020-07-29T20:07:32Z",
        "updatedAt" : "2020-08-05T18:50:41Z",
        "lastEditedBy" : "399a0f74-29de-4365-9ae5-f743ae5f278c",
        "tags" : [
        ]
      }
    ],
    "commit" : "23a3353a6a05bac29aa25d25baebc7fd83dd9522",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2001,2005 @@// A service will be created. After the endpoints exist, the service will be deleted and the endpoints will not be deleted from the cache immediately.\n// After the service is recreated, the endpoints will be deleted replicating an out of sync cache. Expect that eventually the endpoints will be recreated.\nfunc TestMultipleServiceChanges(t *testing.T) {\n\tns := metav1.NamespaceDefault\n\texpectedSubsets := []v1.EndpointSubset{{"
  },
  {
    "id" : "7187f39e-1620-4e2c-b146-cb674c7b5a64",
    "prId" : 79386,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79386#pullrequestreview-268014552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f767c5d-546d-41b6-ba2c-3eb3626f993e",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "`isDualStack` for consistency?",
        "createdAt" : "2019-07-29T19:41:49Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "2771de71-a786-4b55-a9e8-548f65b9b24f",
        "parentId" : "0f767c5d-546d-41b6-ba2c-3eb3626f993e",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Might actually be cleaner to have a seperate method here `testDualStackPod`",
        "createdAt" : "2019-07-29T19:42:47Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "44c5a220-127a-42c5-ad1b-4ba9e221f0a6",
        "parentId" : "0f767c5d-546d-41b6-ba2c-3eb3626f993e",
        "authorId" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "body" : "the same logic that creates pods for regular tests is used for dualstack pods. In reality they are practically the same pods (readiness/ports/namespaces etc..). The only difference is dualstack pods have dual stack IPs. This ensure that same `shared` input is fed to the both test functions (dualstack and not dualstack)  \r\n\r\nSo i have to disagree on creating a `testPod` function for dualstack :-)",
        "createdAt" : "2019-07-29T20:08:04Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "0c76e20f-41a5-4725-b3c3-d5b6cae89641",
        "tags" : [
        ]
      },
      {
        "id" : "cc499392-7c94-438c-9d29-991c73a9aee0",
        "parentId" : "0f767c5d-546d-41b6-ba2c-3eb3626f993e",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Fair. It was more for readability and reducing changes here. There's a lot of `testPods(endpoints.podStore, ns, 1, 1, 0, false)` changes in this PR when most of the pods are still single stack. ",
        "createdAt" : "2019-07-29T20:14:50Z",
        "updatedAt" : "2019-08-28T18:42:36Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "c27e0b029d328552cc3ef0661f16a5ad3c422fb8",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +53,57 @@var oldTriggerTimeString = triggerTime.Add(-time.Hour).Format(time.RFC3339Nano)\n\nfunc testPod(namespace string, id int, nPorts int, isReady bool, makeDualstack bool) *v1.Pod {\n\tp := &v1.Pod{\n\t\tTypeMeta: metav1.TypeMeta{APIVersion: \"v1\"},"
  },
  {
    "id" : "a085f552-b77b-4fc6-a70e-b175567cefb4",
    "prId" : 47731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47731#pullrequestreview-45061989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a62c1112-68c0-43e6-aef8-b6206a3dcba7",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Please add a test case that proves that we correctly wait for all informers to be synced.",
        "createdAt" : "2017-06-20T08:16:47Z",
        "updatedAt" : "2017-06-27T09:17:15Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fc5a547aeeb552f48a588f59c02eb76fc4d3262",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +101,105 @@\tpodStore       cache.Store\n\tserviceStore   cache.Store\n\tendpointsStore cache.Store\n}\n"
  }
]