[
  {
    "id" : "a0610e80-a4d0-4684-b2d0-8eed906a084a",
    "prId" : 81167,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81167#pullrequestreview-301877805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2700d02b-93fa-4ea6-be73-b81406c86a47",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why did you remove podEvicted = true here?\r\n\r\nIt seems that currently you're always returning false. So simply remove podEvicted var and return false :)",
        "createdAt" : "2019-10-14T13:42:14Z",
        "updatedAt" : "2019-11-07T11:02:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e8945551-90ce-463c-b123-770f469286ca",
        "parentId" : "2700d02b-93fa-4ea6-be73-b81406c86a47",
        "authorId" : "e25d86e1-9b84-46f1-8d7f-a44328cd9bb4",
        "body" : "`podEvicted` removed.",
        "createdAt" : "2019-10-15T12:47:20Z",
        "updatedAt" : "2019-11-07T11:02:55Z",
        "lastEditedBy" : "e25d86e1-9b84-46f1-8d7f-a44328cd9bb4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9406e5bf2aa82b27754ccbadf2048a60030d89ec",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +107,111 @@\tfor _, action := range fakeNodeHandler.Actions() {\n\t\tif action.GetVerb() == \"delete\" && action.GetResource().Resource == \"pods\" {\n\t\t\treturn true\n\t\t}\n\t}"
  },
  {
    "id" : "505f371a-a574-4c57-b105-e168809c0c0b",
    "prId" : 69788,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69788#pullrequestreview-165400039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95fd78e1-8170-4b51-8bc9-5a6a25ea4826",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "can we also make `node0` back to healthy, and check if unreachable taint is taken off also? ",
        "createdAt" : "2018-10-16T22:40:33Z",
        "updatedAt" : "2018-10-16T22:57:14Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "4686883f-230d-4167-925a-b0fe6fcd1abe",
        "parentId" : "95fd78e1-8170-4b51-8bc9-5a6a25ea4826",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "I think, we are exercising the same codepath in both the cases(node0 and node3), so no need to check explicitly.",
        "createdAt" : "2018-10-16T22:53:08Z",
        "updatedAt" : "2018-10-16T22:57:14Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d281d566b319df4032d1c6bfcf47d305d7e56ec7",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +2102,2106 @@\t}\n\n\t// Make node3 healthy again.\n\tnode2.Status = healthyNodeNewStatus\n\t_, err = fakeNodeHandler.UpdateStatus(node2)"
  },
  {
    "id" : "b6e42378-83b5-4e2c-b5e7-8ed83dcd324d",
    "prId" : 69241,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69241#pullrequestreview-162134730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffb64ff0-81ba-4e54-a922-a00c3ab1dabf",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why \"AndPod\" ?",
        "createdAt" : "2018-10-05T10:50:33Z",
        "updatedAt" : "2018-10-11T23:24:49Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "796d6b6f-6a8d-402e-b25d-92c17b916471",
        "parentId" : "ffb64ff0-81ba-4e54-a922-a00c3ab1dabf",
        "authorId" : "4186ed58-9575-4126-b730-073268bc67cb",
        "body" : "Because this test checks both node and pod status updates.",
        "createdAt" : "2018-10-05T17:34:51Z",
        "updatedAt" : "2018-10-11T23:24:49Z",
        "lastEditedBy" : "4186ed58-9575-4126-b730-073268bc67cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e35d808aa2b19782fd16e770617c75dafac87adc",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +1876,1880 @@}\n\nfunc TestMonitorNodeHealthUpdateNodeAndPodStatusWithLease(t *testing.T) {\n\tdefer utilfeaturetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.NodeLease, true)()\n"
  }
]