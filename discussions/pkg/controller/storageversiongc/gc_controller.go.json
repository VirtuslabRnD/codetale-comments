[
  {
    "id" : "b121ac78-a38d-4832-b032-10b6b293f227",
    "prId" : 96825,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96825#pullrequestreview-537996337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd814354-c126-4c30-9df1-442f3025f2d3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is updateOrDeleteStorageVersion operating on an object obtained from an informer or a live lookup version?",
        "createdAt" : "2020-11-24T14:40:45Z",
        "updatedAt" : "2020-12-02T22:33:16Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "619fb818-6b46-49d6-a014-c8d71148f63e",
        "parentId" : "cd814354-c126-4c30-9df1-442f3025f2d3",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "a live lookup version",
        "createdAt" : "2020-11-24T21:52:26Z",
        "updatedAt" : "2020-12-02T22:33:16Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a28ca419e9c3c246937d1a3c1cdc7581ab06060",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +273,277 @@\t}\n\tsv.Status.StorageVersions = serverStorageVersions\n\tstorageversion.SetCommonEncodingVersion(sv)\n\t_, err := c.kubeclientset.InternalV1alpha1().StorageVersions().UpdateStatus(\n\t\tcontext.TODO(), sv, metav1.UpdateOptions{})"
  },
  {
    "id" : "dd421805-069d-4929-af9b-25d8117e4c14",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529413935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4efdc757-785b-4321-aeb6-f6445dd389e4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Personally I like to have Run functions like this block until all of their child goroutines have exited before returning. Not super important yet, can be a followup.",
        "createdAt" : "2020-11-12T19:19:49Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@\tgo wait.Until(c.runStorageVersionWorker, time.Second, stopCh)\n\n\t<-stopCh\n}\n"
  },
  {
    "id" : "b4e7b0d2-d02f-46da-ac14-a96dc793f797",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529466049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8c10c52-26b5-497c-9a0e-9c3c581d09ca",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Might want to add a comment that the frequency of this call won't be too high because we only trigger on lease deletions, not lease changes.",
        "createdAt" : "2020-11-12T19:44:10Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f0b7adfa-8606-4630-8158-2e76f0e045f4",
        "parentId" : "c8c10c52-26b5-497c-9a0e-9c3c581d09ca",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "correct. Will add more comments",
        "createdAt" : "2020-11-12T20:21:26Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +158,162 @@\t}\n\t// the frequency of this call won't be too high because we only trigger on identity lease deletions\n\tstorageVersionList, err := c.kubeclientset.InternalV1alpha1().StorageVersions().List(context.TODO(), metav1.ListOptions{})\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "2f640e26-8fc2-49c4-9917-08f24bfb00ce",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529598287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb34f213-faae-4577-b2eb-ae5425bf6eaf",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Can you add a function comment saying this enqueues the storage version if it has entry for invalid apiserver?",
        "createdAt" : "2020-11-12T23:54:28Z",
        "updatedAt" : "2020-11-13T00:37:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +226,230 @@\n// enqueueStorageVersion enqueues the storage version if it has entry for invalid apiserver\nfunc (c *Controller) enqueueStorageVersion(obj *apiserverinternalv1alpha1.StorageVersion) {\n\tfor _, sv := range obj.Status.StorageVersions {\n\t\tlease, err := c.leaseLister.Leases(metav1.NamespaceSystem).Get(sv.APIServerID)"
  },
  {
    "id" : "2f9b5018-34ec-48be-88b4-6af6f473f0d1",
    "prId" : 95978,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95978#pullrequestreview-529631473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0d61aeb-fa4d-41ac-a42b-c0f3f62cf33b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should probably fix this in a followup to have cached the set of leases we care about, or to list them in this case. It should be rare.",
        "createdAt" : "2020-11-13T00:52:48Z",
        "updatedAt" : "2020-11-13T00:52:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b4be8e16-f21f-4864-a71f-bbce7d3142bf",
        "parentId" : "d0d61aeb-fa4d-41ac-a42b-c0f3f62cf33b",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I need to verify if such a case corrupts the lease informer's cache.\r\n\r\nIf not, the storage version worker will eventually garbage collect any storage version that has non-existing lease when resync kicks in (default 12 hours), regardless if we get the lease delete event or not. \r\n\r\nIt could be a problem if leases that we don't care about are triggering too much tombstones, and causing the GC to spam log where it shouldn't",
        "createdAt" : "2020-11-13T01:12:25Z",
        "updatedAt" : "2020-11-13T01:12:59Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f6959284260ed43401cdb2ee13ed1167c32b19",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\tcastObj, ok = tombstone.Obj.(*coordinationv1.Lease)\n\t\tif !ok {\n\t\t\tutilruntime.HandleError(fmt.Errorf(\"tombstone contained object that is not a Lease %#v\", obj))\n\t\t\treturn\n\t\t}"
  }
]