[
  {
    "id" : "3f10ec4e-8c57-4ee5-94a5-a53a12ebc80e",
    "prId" : 98068,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98068#pullrequestreview-569316216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b0abb06-048c-4b92-893c-d02096e1207f",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Ah, this is like \"cluster-scoped bad child, namespaced good child, missing parent\" except the order the children are observed/processed is swapped. I didn't realize when first reading the test names that ordering was important.",
        "createdAt" : "2021-01-15T14:40:21Z",
        "updatedAt" : "2021-01-15T14:40:21Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e71a28490774ac93e5b57f169017cd767ad9fdf",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +2109,2113 @@\t\t{\n\t\t\t// https://github.com/kubernetes/kubernetes/issues/98040\n\t\t\tname: \"namespaced good child, cluster-scoped bad child, missing parent\",\n\t\t\tsteps: []step{\n\t\t\t\t// setup"
  },
  {
    "id" : "596d7460-3dde-4eda-963b-bb5c4ef8e438",
    "prId" : 98068,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98068#pullrequestreview-569318084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9b47acc-4227-40bf-a960-602f6525a71e",
        "parentId" : null,
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Are these gets informational or are they required for the test? I'm curious because we don't check the response codes.",
        "createdAt" : "2021-01-15T14:42:24Z",
        "updatedAt" : "2021-01-15T14:42:25Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e71a28490774ac93e5b57f169017cd767ad9fdf",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2004,2008 @@\t\t\t\t\tclientActions: []string{\n\t\t\t\t\t\t\"get /v1, Resource=pods ns=ns1 name=podname2\",    // get good child, returns 200\n\t\t\t\t\t\t\"get /v1, Resource=pods ns=ns1 name=podname1\",    // get missing parent, returns 404\n\t\t\t\t\t\t\"delete /v1, Resource=pods ns=ns1 name=podname2\", // delete good child\n\t\t\t\t\t},"
  },
  {
    "id" : "4bf064cb-933e-47b7-b67c-9b93ca568a56",
    "prId" : 72786,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72786#pullrequestreview-196205445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3087ed47-571d-4900-a624-79b7257205ef",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Is this at least 2?",
        "createdAt" : "2019-01-24T18:46:48Z",
        "updatedAt" : "2019-01-24T18:46:49Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "13385389-9da9-4e7a-9401-c894a2e440d7",
        "parentId" : "3087ed47-571d-4900-a624-79b7257205ef",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Unfortunately, this is really a \"roughly 2\" due to the nature of golang `select`.",
        "createdAt" : "2019-01-24T19:19:20Z",
        "updatedAt" : "2019-01-24T19:19:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2812ce31291cc1728686df5cd1ce20e688aa9b2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +866,870 @@\t//\n\t// Setting the period to 200ms allows the WaitForCacheSync() to check\n\t// for cache sync ~2 times in every wait.PollImmediateUntil() loop.\n\t//\n\t// The 1s sleep in the test allows GetDelableResources and"
  },
  {
    "id" : "ff8aca88-cbfd-46cd-bdcd-694b372ce7b9",
    "prId" : 55259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55259#pullrequestreview-74920348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd3c541f-3920-4605-8ec8-1b8759195eb1",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "How about using the fake discovery client: https://github.com/kubernetes/kubernetes/blob/454074d2303424bd71ad340bdbf307aa4196a59d/staging/src/k8s.io/client-go/discovery/fake/discovery.go#L34\r\n\r\nI know the fake client hasn't implemented the `ServerPreferredResources` yet, but shouldn't be hard to implement.",
        "createdAt" : "2017-11-07T21:42:20Z",
        "updatedAt" : "2017-11-07T21:54:58Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bdb3ce59-cc62-4634-a79b-5f029efec7c4",
        "parentId" : "fd3c541f-3920-4605-8ec8-1b8759195eb1",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Saw that, but it also doesn't implement any user-specific error stuff and I didn't want to mess with it at the moment. Okay to just add an error field to the fake struct and return it from the implementation functions?",
        "createdAt" : "2017-11-07T21:45:43Z",
        "updatedAt" : "2017-11-07T21:54:58Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "ffbf5e7c-8c73-4e3e-af84-c6677dd39ffe",
        "parentId" : "fd3c541f-3920-4605-8ec8-1b8759195eb1",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I see. Let's keep it as is then.",
        "createdAt" : "2017-11-07T21:48:34Z",
        "updatedAt" : "2017-11-07T21:54:58Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3dd82c30c8ea89c3125e7b09b0d414a94a55e02",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +760,764 @@}\n\ntype fakeServerResources struct {\n\tPreferredResources []*metav1.APIResourceList\n\tError              error"
  },
  {
    "id" : "c9a9a6b8-6079-45f3-8a43-e85cf5128568",
    "prId" : 31167,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db57693-967e-4316-983a-430f960237d0",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Test added.\n",
        "createdAt" : "2016-08-24T00:25:46Z",
        "updatedAt" : "2016-08-24T00:25:52Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d97e28d2-5693-4f0d-8e6b-e78c8631fd34",
        "parentId" : "9db57693-967e-4316-983a-430f960237d0",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I also cleaned up some existing unit tests.\n",
        "createdAt" : "2016-08-24T00:26:58Z",
        "updatedAt" : "2016-08-24T00:26:58Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2d0f1e3f0daf81d2c2629d3239564849ee2286a",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +376,380 @@}\n\nfunc TestAbsentUIDCache(t *testing.T) {\n\trc1Pod1 := getPod(\"rc1Pod1\", []v1.OwnerReference{\n\t\t{"
  },
  {
    "id" : "24324761-a91e-4710-8f9e-dd18be4cf227",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb36e3a8-07ae-48f6-8c5c-333627e2964b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think a test that stresses the threading code would be good. From multiple goroutines, make RC object & dependent pods, then wait a bit, then delete RC object. Wait for the queue to drain, then verify that everything was deleted.\n",
        "createdAt" : "2016-05-11T23:50:06Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : null,
    "diffHunk" : "@@ -1,1 +285,289 @@\t\t}\n\t}\n}"
  }
]