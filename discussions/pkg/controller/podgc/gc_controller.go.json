[
  {
    "id" : "c509abb0-16f2-4959-acec-008b9efc74ed",
    "prId" : 88708,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88708#pullrequestreview-369974994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76baa059-d27d-473c-b123-9bcafb57f92e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is there a reason to keep the DeleteOption helpers returning pointers? needing to dereference this seems strange now",
        "createdAt" : "2020-03-05T20:59:29Z",
        "updatedAt" : "2020-03-05T23:00:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e239fb04-f682-4c3b-84dd-bf375e818c8a",
        "parentId" : "76baa059-d27d-473c-b123-9bcafb57f92e",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Explained in the commit message https://github.com/kubernetes/kubernetes/pull/88708/commits/853099e709e0864fe345110d97e1d2976e26a423\r\n\r\n> This is gross but because NewDeleteOptions is used by various parts of\r\n> storage that still pass around pointers, the return type can't be\r\n> changed without significant refactoring within the apiserver. I think\r\n> this would be good to cleanup, but I want to minimize apiserver side\r\n> changes as much as possible in the client signature refactor.",
        "createdAt" : "2020-03-05T22:03:51Z",
        "updatedAt" : "2020-03-05T23:00:15Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "c1098685-eccf-441a-aa3e-619f3869cd59",
        "parentId" : "76baa059-d27d-473c-b123-9bcafb57f92e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok",
        "createdAt" : "2020-03-05T23:00:38Z",
        "updatedAt" : "2020-03-05T23:02:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f85943787a5901a34a314a935712177edd2db0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +77,81 @@\t\tdeletePod: func(namespace, name string) error {\n\t\t\tklog.Infof(\"PodGC is force deleting Pod: %v/%v\", namespace, name)\n\t\t\treturn kubeClient.CoreV1().Pods(namespace).Delete(context.TODO(), name, *metav1.NewDeleteOptions(0))\n\t\t},\n\t}"
  },
  {
    "id" : "bf1c836f-e5fd-4eb0-95b2-c4b111ea7906",
    "prId" : 82365,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82365#pullrequestreview-306540312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78765417-d0c3-4f73-8de5-e38a69d07226",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "If this is lifted ahead of line 168, we can iterate over pods once - checking both deletedNodesNames and existingNodeNames",
        "createdAt" : "2019-10-24T12:40:45Z",
        "updatedAt" : "2019-10-24T12:40:56Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "39883f08bf02dd703d161400418d47d7b7ee4c32",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +173,177 @@\t}\n\t// Check if nodes are still missing after quarantine period\n\tdeletedNodesNames, quit := gcc.discoverDeletedNodes(existingNodeNames)\n\tif quit {\n\t\treturn"
  },
  {
    "id" : "60e8db66-1d5b-42d7-8349-272136e31ed1",
    "prId" : 35541,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35541#pullrequestreview-6135673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614e757f-9878-4d2e-9ea4-c51efd3527a7",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "actually I'd rename this to 'forcefullyDeletePod', 'ungracefullyDeletPod' or something along those lines. Not necessarily in this PR:)\n",
        "createdAt" : "2016-10-27T17:57:15Z",
        "updatedAt" : "2016-10-27T20:30:18Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "d95dae1a-360d-49da-8757-e7aae167ea52",
        "parentId" : "614e757f-9878-4d2e-9ea4-c51efd3527a7",
        "authorId" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "body" : "Will do in a follow-up.\n",
        "createdAt" : "2016-10-27T20:07:18Z",
        "updatedAt" : "2016-10-27T20:30:18Z",
        "lastEditedBy" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae1a19e7ba0c2e596632975f85ae69a3fc4aa91",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +200,204 @@\n\t\tglog.V(2).Infof(\"Found unscheduled terminating Pod %v not assigned to any Node. Deleting.\", pod.Name)\n\t\tif err := gcc.deletePod(pod.Namespace, pod.Name); err != nil {\n\t\t\tutilruntime.HandleError(err)\n\t\t} else {"
  }
]