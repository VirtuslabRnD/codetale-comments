[
  {
    "id" : "f8c8b95d-49b6-44dc-be38-d53cccf4d94f",
    "prId" : 29101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73c2e789-bd9b-4a71-a9e0-0ebd77f6f869",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Quick question : when `r.cidrs.allocateNext()` returns an error, we don't call `r.releaseNode(node.Name)`. Is this by design?\n",
        "createdAt" : "2016-07-18T13:16:00Z",
        "updatedAt" : "2016-07-18T15:06:22Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "1c32592a-1d3f-453e-9ff0-324432a9ea1f",
        "parentId" : "73c2e789-bd9b-4a71-a9e0-0ebd77f6f869",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "This is still WIP PR:) - we do.\n",
        "createdAt" : "2016-07-18T13:31:10Z",
        "updatedAt" : "2016-07-18T15:06:22Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "8eef4038-7241-45e2-88e5-805c16df855f",
        "parentId" : "73c2e789-bd9b-4a71-a9e0-0ebd77f6f869",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "haha. i am just learning by reviewing, so feel free to tell me to go away :)\n",
        "createdAt" : "2016-07-18T13:36:42Z",
        "updatedAt" : "2016-07-18T15:06:22Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "56006fac431f129c679ed69dac27e4ea3e8ef4a6",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\treturn r.occupyCIDR(node)\n\t}\n\tpodCIDR, err := r.cidrs.allocateNext()\n\tif err != nil {\n\t\tr.removeNodeFromProcessing(node.Name)"
  },
  {
    "id" : "69a95e39-59f4-4a4f-bf94-4d07ba451591",
    "prId" : 29101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b6a0677-5b85-4be1-82eb-b8770df2ea59",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "s/leek/leak/\n",
        "createdAt" : "2016-07-19T21:00:32Z",
        "updatedAt" : "2016-07-19T21:00:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "56006fac431f129c679ed69dac27e4ea3e8ef4a6",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +253,257 @@\tif err != nil {\n\t\trecordNodeStatusChange(r.recorder, node, \"CIDRAssignmentFailed\")\n\t\t// We accept the fact that we may leek CIDRs here. This is safer than releasing\n\t\t// them in case when we don't know if request went through.\n\t\t// NodeController restart will return all falsely allocated CIDRs to the pool."
  },
  {
    "id" : "3ea3be66-d3be-4a1b-a2a1-88fb937cc495",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a4277d6-e5d5-4046-a2bc-d74d7147f36f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Is there any rationale behind this number? If so, can you please add a comment where does this number come from?\n",
        "createdAt" : "2016-07-11T08:08:40Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "06ba3902-5f00-4508-84bf-dbce1b9faec6",
        "parentId" : "7a4277d6-e5d5-4046-a2bc-d74d7147f36f",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I just moved it here. I didn't change any logic in this PR.\n",
        "createdAt" : "2016-07-11T08:18:07Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@\t// controls how many NodeSpec updates NC can process concurrently.\n\tcidrUpdateWorkers   = 10\n\tcidrUpdateQueueSize = 5000\n\t// podCIDRUpdateRetry controls the number of retries of writing Node.Spec.PodCIDR update.\n\tpodCIDRUpdateRetry = 5"
  },
  {
    "id" : "1599d953-c6ba-445a-82fb-93ac3b8d4d27",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d66c8ef-23d6-4493-bb09-c6cfd3c15a50",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "IIRC, this channel was added because of performance reasons (to avoid blocking processing next nodes, on updates sent to apiserver, right? Can you please add a comment why do we have it (probably at the struct level).\n",
        "createdAt" : "2016-07-11T08:17:57Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "42c716bf-8d9a-4608-95c9-3a471cfb4ddc",
        "parentId" : "2d66c8ef-23d6-4493-bb09-c6cfd3c15a50",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yup. I may not be necessary, but @mqliang wrote it this way.\n",
        "createdAt" : "2016-07-11T08:34:00Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +123,127 @@\n\tglog.V(10).Infof(\"Putting node %s with CIDR %s into the work queue\", node.Name, podCIDR)\n\tr.nodeCIDRUpdateChannel <- nodeAndCIDR{\n\t\tnodeName: node.Name,\n\t\tcidr:     podCIDR,"
  },
  {
    "id" : "83b03c7c-5d27-4814-9769-095c3d4477a2",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37ecff22-6891-4115-ba16-5cb357e6eb2c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please add comment what exactly you are trying to achieve here? [those operations are not trivial].\n",
        "createdAt" : "2016-07-11T08:19:47Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a97cf7af-9638-4db6-bc87-e96e5a4b05d4",
        "parentId" : "37ecff22-6891-4115-ba16-5cb357e6eb2c",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2016-07-11T08:25:24Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : null,
    "diffHunk" : "@@ -1,1 +153,157 @@\t// clusterCIDR contains serviceCIDR with clusterCIDR's Mask applied (this means that clusterCIDR contains serviceCIDR)\n\t// or vice versa (which means that serviceCIDR contains clusterCIDR).\n\tif !r.clusterCIDR.Contains(serviceCIDR.IP.Mask(r.clusterCIDR.Mask)) && !serviceCIDR.Contains(r.clusterCIDR.IP.Mask(serviceCIDR.Mask)) {\n\t\treturn\n\t}"
  },
  {
    "id" : "2dd21589-b600-47a2-b840-fa0618eafd9f",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b93d5c9-c874-41aa-81f3-89920e441e9f",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please add a TODO to migrate to use PATCH.\n",
        "createdAt" : "2016-07-11T08:20:30Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cd4c717b-d533-4c0f-a5bf-76256ca929f0",
        "parentId" : "4b93d5c9-c874-41aa-81f3-89920e441e9f",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2016-07-11T08:23:09Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "18eb5c14-3031-46dc-a579-0b96ac0d4719",
        "parentId" : "4b93d5c9-c874-41aa-81f3-89920e441e9f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please move this TODO here (Patch, doesn't require Get before it).\n",
        "createdAt" : "2016-07-11T11:52:05Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "cc10a950-65b3-4443-beba-64a5a7793f81",
        "parentId" : "4b93d5c9-c874-41aa-81f3-89920e441e9f",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2016-07-11T13:10:25Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : null,
    "diffHunk" : "@@ -1,1 +168,172 @@\tfor rep := 0; rep < podCIDRUpdateRetry; rep++ {\n\t\t// TODO: change it to using PATCH instead of full Node updates.\n\t\tnode, err = r.client.Core().Nodes().Get(data.nodeName)\n\t\tglog.Infof(\"Got Node: %v\", node)\n\t\tif err != nil {"
  },
  {
    "id" : "3262d4d8-7628-4b5a-a54f-9613e3e9818b",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68eb6def-3a6e-497a-967c-7672da87ed45",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Weel - even if you moved it from somewhere, it makes sense to think why this is so. Or at least add a TODO to revisit this number.\n",
        "createdAt" : "2016-07-11T11:47:45Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b3485d35-1c81-428f-8c33-751e7a15b31c",
        "parentId" : "68eb6def-3a6e-497a-967c-7672da87ed45",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Added a TODO\n",
        "createdAt" : "2016-07-11T13:01:12Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@\t// controls how many NodeSpec updates NC can process concurrently.\n\tcidrUpdateWorkers   = 10\n\tcidrUpdateQueueSize = 5000\n\t// podCIDRUpdateRetry controls the number of retries of writing Node.Spec.PodCIDR update.\n\tpodCIDRUpdateRetry = 5"
  },
  {
    "id" : "2c7ffc1c-6788-4b6c-8ee9-7ed1a0875bd4",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1361105c-200c-4097-aa2f-b1520ecb0663",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What this if is supposed to check? Can you please add a comment? {I was looking into it for some time, and still don't really follow it...]\n",
        "createdAt" : "2016-07-11T11:51:36Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "212c21b8-dc70-4314-b088-651eec1adf69",
        "parentId" : "1361105c-200c-4097-aa2f-b1520ecb0663",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done. I hope.\n",
        "createdAt" : "2016-07-11T13:09:52Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : null,
    "diffHunk" : "@@ -1,1 +153,157 @@\t// clusterCIDR contains serviceCIDR with clusterCIDR's Mask applied (this means that clusterCIDR contains serviceCIDR)\n\t// or vice versa (which means that serviceCIDR contains clusterCIDR).\n\tif !r.clusterCIDR.Contains(serviceCIDR.IP.Mask(r.clusterCIDR.Mask)) && !serviceCIDR.Contains(r.clusterCIDR.IP.Mask(serviceCIDR.Mask)) {\n\t\treturn\n\t}"
  },
  {
    "id" : "f703a6d1-6822-4dd2-8cd5-977558313911",
    "prId" : 28604,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008804c8-c47e-4b37-a8f3-6dd859b349c2",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: glog.Info(..)\n\nHaving V(0) doesn't make much sense in my opinion.\n",
        "createdAt" : "2016-07-11T13:37:53Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "773922b6-813e-47f8-b42e-9e6257a78978",
        "parentId" : "008804c8-c47e-4b37-a8f3-6dd859b349c2",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Discussed offline. Let's leave as is.\n",
        "createdAt" : "2016-07-12T07:32:05Z",
        "updatedAt" : "2016-07-12T07:40:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5f9d3a6fedc285cd1623fc8c0ceee2e9b37599",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +81,85 @@\t\tra.filterOutServiceRange(serviceCIDR)\n\t} else {\n\t\tglog.V(0).Info(\"No Service CIDR provided. Skipping filtering out service addresses.\")\n\t}\n\tfor i := 0; i < cidrUpdateWorkers; i++ {"
  },
  {
    "id" : "c061c247-b1bb-46eb-906d-130fc0b2f6be",
    "prId" : 19242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2ecaeac-c125-4f98-a496-b60cad3e3b88",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Godoc please\n",
        "createdAt" : "2016-01-04T16:32:52Z",
        "updatedAt" : "2016-05-20T12:45:16Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "552a247639f2e426c2533ed78bbaacae096269d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +29,33 @@\n// CIDRAllocator is an interface implemented by things that know how to allocate/occupy/recycle CIDR for nodes.\ntype CIDRAllocator interface {\n\tAllocateNext() (*net.IPNet, error)\n\tOccupy(*net.IPNet) error"
  },
  {
    "id" : "7ad9f60b-20ba-4ade-8b52-35ba097492be",
    "prId" : 19242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "251825c2-a924-48fa-8b9e-1ba55cef6d46",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: Godoc\n",
        "createdAt" : "2016-01-04T16:34:04Z",
        "updatedAt" : "2016-05-20T12:45:16Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "552a247639f2e426c2533ed78bbaacae096269d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +47,51 @@// NewCIDRRangeAllocator returns a CIDRAllocator to allocate CIDR for node\n// Caller must ensure subNetMaskSize is not less than cluster CIDR mask size.\nfunc NewCIDRRangeAllocator(clusterCIDR *net.IPNet, subNetMaskSize int) CIDRAllocator {\n\tclusterMask := clusterCIDR.Mask\n\tclusterMaskSize, _ := clusterMask.Size()"
  },
  {
    "id" : "d7cf061d-2af3-4bf1-8ac4-0c1016fe3015",
    "prId" : 19242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22bc5a3b-1d81-4efa-93f2-ba44d8889e66",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "break?\n",
        "createdAt" : "2016-05-05T12:51:39Z",
        "updatedAt" : "2016-05-20T12:45:16Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "552a247639f2e426c2533ed78bbaacae096269d2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@\tfor i := 0; i < r.maxCIDRs; i++ {\n\t\tif r.used.Bit(i) == 0 {\n\t\t\tnextUnused = i\n\t\t\tbreak\n\t\t}"
  },
  {
    "id" : "c2367072-5335-46a3-96cc-525d814d9a2c",
    "prId" : 19242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1493abb-6ae8-4076-b0bb-e13c1591ec8d",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Can you add a few more boundary tests for Occupy? In particular, things like the cases where `cidr` exceeds the entire range, or where `cidr` is smaller than a node CIDR. (They can return errors, that's fine.)\n",
        "createdAt" : "2016-05-10T22:12:02Z",
        "updatedAt" : "2016-05-20T12:45:16Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "0713bdad-69fd-4e6f-8059-ca2175e566a2",
        "parentId" : "d1493abb-6ae8-4076-b0bb-e13c1591ec8d",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "+1 Please add tests cases that @zmerlynn suggested. Also please add comments to this part of code, as it's by far nontrivial.\n",
        "createdAt" : "2016-05-12T14:15:41Z",
        "updatedAt" : "2016-05-20T12:45:16Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "552a247639f2e426c2533ed78bbaacae096269d2",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@}\n\nfunc (r *rangeAllocator) Occupy(cidr *net.IPNet) (err error) {\n\tbegin, end := 0, r.maxCIDRs\n\tcidrMask := cidr.Mask"
  }
]