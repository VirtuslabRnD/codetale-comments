[
  {
    "id" : "6a4c2877-9e2e-46ac-80c5-632d15a3906e",
    "prId" : 92684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92684#pullrequestreview-440597815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "812ce7e7-8c48-4168-abbe-4ef68f94e216",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "we don't need this indexer, this can save memory I guess",
        "createdAt" : "2020-07-01T07:04:47Z",
        "updatedAt" : "2020-07-01T07:04:47Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cdc63aeaab603c61b48e95c044f1e4bb2f32548",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +427,431 @@// NewPVCAssumeCache creates a PVC assume cache.\nfunc NewPVCAssumeCache(informer cache.SharedIndexInformer) PVCAssumeCache {\n\treturn &pvcAssumeCache{NewAssumeCache(informer, \"v1.PersistentVolumeClaim\", \"\", nil)}\n}\n"
  },
  {
    "id" : "ef5d6637-0120-414a-8b27-9945af7f3497",
    "prId" : 77442,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77442#pullrequestreview-233739913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91fb9af6-a326-487d-b28a-43287be2ac21",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`exported func NewAssumeCache returns unexported type *scheduling.assumeCache, which can be annoying to use`\r\nI guess it's better to expose interface instead struct, so I changed the function to return interface",
        "createdAt" : "2019-05-04T15:12:31Z",
        "updatedAt" : "2019-05-07T02:57:24Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "4abd73048c35604a620a3cb6f68ffad6c42e3fe6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +129,133 @@\n// NewAssumeCache creates an assume cache for genernal objects.\nfunc NewAssumeCache(informer cache.SharedIndexInformer, description, indexName string, indexFunc cache.IndexFunc) AssumeCache {\n\tc := &assumeCache{\n\t\tdescription: description,"
  }
]