[
  {
    "id" : "ccba2fdc-f942-4d43-a973-9949795a799a",
    "prId" : 94692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94692#pullrequestreview-486238210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be4e7afc-5485-4d04-94ff-85a6e6635f2b",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "keep podName as a part of the message? or does having that as a part of the string cause unwrapping issues?",
        "createdAt" : "2020-09-10T18:48:21Z",
        "updatedAt" : "2020-09-10T20:22:34Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "fc9afba6-dea1-4e28-847c-5372309e067c",
        "parentId" : "be4e7afc-5485-4d04-94ff-85a6e6635f2b",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "the error from the API already includes the pod name. Other than that, we should add the metadata to the error when we are logging it. See #94697",
        "createdAt" : "2020-09-10T19:16:09Z",
        "updatedAt" : "2020-09-10T20:22:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb40fc03cd18dc5f39e7eb5f13b9c71c8527661",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +560,564 @@\tif err != nil {\n\t\tif apierrors.IsNotFound(err) {\n\t\t\treturn false, fmt.Errorf(\"pod does not exist any more: %w\", err)\n\t\t}\n\t\tklog.Errorf(\"failed to get pod %s/%s from the lister: %v\", pod.Namespace, pod.Name, err)"
  },
  {
    "id" : "7300a746-c600-418a-b1af-48d80cde35a5",
    "prId" : 94692,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94692#pullrequestreview-486278553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a04bf362-7b78-4e57-b228-3f25fd9d1e26",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "(comment not related with this line)\r\n\r\nDo you want to cleanup all `%v.*err` occurrences?\r\n\r\n```\r\nâ‡’  ag \"%v.*err\" pkg/controller/volume/scheduling/scheduler_binder.go\r\n367:\t\tklog.V(5).Infof(\"AssumePodVolumes: GetBindVolumeToClaim for pod %q, PV %q, PVC %q.  newPV %p, dirty %v, err: %v\",\r\n496:\t\t\tklog.V(4).Infof(\"updating PersistentVolume[%s]: binding to %q failed: %v\", binding.pv.Name, claimKey, err)\r\n552:\t\tklog.V(4).Infof(\"Could not get a CSINode object for the node %q: %v\", node.Name, err)\r\n564:\t\tklog.Errorf(\"failed to get pod %s/%s from the lister: %v\", pod.Namespace, pod.Name, err)\r\n698:\t\treturn false, nil, fmt.Errorf(\"error getting PVC %q: %v\", pvcKey, err)\r\n769:\t\tklog.V(4).Infof(\"Could not get a CSINode object for the node %q: %v\", node.Name, err)\r\n786:\t\t\tklog.V(4).Infof(\"PersistentVolume %q, Node %q mismatch for Pod %q: %v\", pvName, node.Name, podName, err)\r\n964:\t\tklog.Errorf(\"unexpected error converting %+v to a label selector: %v\", capacity.NodeTopology, err)\r\n1037:\t\treturn nil, fmt.Errorf(\"could not get plugin name from pv: %v\", err)\r\n1050:\t\treturn nil, fmt.Errorf(\"could not translate pv: %v\", err)\r\n```",
        "createdAt" : "2020-09-10T19:22:33Z",
        "updatedAt" : "2020-09-10T20:22:34Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "8090acda-9e16-40b3-b3fe-8abd012dbc39",
        "parentId" : "a04bf362-7b78-4e57-b228-3f25fd9d1e26",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "I want to keep this PR as small as possible (although I couldn't contain myself from doing some cleanups) just in case we need to cherry pick. I opened #94695 for the rest.",
        "createdAt" : "2020-09-10T20:17:25Z",
        "updatedAt" : "2020-09-10T20:22:34Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb40fc03cd18dc5f39e7eb5f13b9c71c8527661",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +650,654 @@\t\t\t}\n\t\t}\n\n\t\t// Check if pvc is fully bound\n\t\tif !b.isPVCFullyBound(pvc) {"
  },
  {
    "id" : "0e7f38c2-69dd-4a7e-9eee-2912b285b005",
    "prId" : 92684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92684#pullrequestreview-440616967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c469968d-3262-4536-9904-a5cfefac9d96",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "we should hold the lister b/c the shared informer will not be initialized if the `Lister()/Informer()` is not called,\r\notherwise, the informer will not be started by `SharedInformerFactory.Start`.\r\n\r\nthough these informers normally will be initialized in other components, this can fix the potential bug",
        "createdAt" : "2020-07-01T07:34:36Z",
        "updatedAt" : "2020-07-01T07:41:12Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cdc63aeaab603c61b48e95c044f1e4bb2f32548",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +192,196 @@\t\tclassLister:   storageClassInformer.Lister(),\n\t\tnodeLister:    nodeInformer.Lister(),\n\t\tcsiNodeLister: csiNodeInformer.Lister(),\n\t\tpvcCache:      NewPVCAssumeCache(pvcInformer.Informer()),\n\t\tpvCache:       NewPVAssumeCache(pvInformer.Informer()),"
  },
  {
    "id" : "601de15f-0a51-4a02-8197-e8e8f65849a1",
    "prId" : 92684,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92684#pullrequestreview-440616967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e5a7640-3818-4399-bd6e-e493caf651c0",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "renaming these local variables to improve readability",
        "createdAt" : "2020-07-01T07:41:03Z",
        "updatedAt" : "2020-07-01T07:41:12Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cdc63aeaab603c61b48e95c044f1e4bb2f32548",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +237,241 @@\tvar (\n\t\tstaticBindings    []*BindingInfo\n\t\tdynamicProvisions []*v1.PersistentVolumeClaim\n\t)\n\tdefer func() {"
  },
  {
    "id" : "cbd097f3-c51b-464b-b06a-b9439005a809",
    "prId" : 92387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92387#pullrequestreview-442158943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "819c0c93-490e-4bc2-9175-3df799149a37",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "it's not practical to log considered but rejected pools. the filter function is called frequently\r\nLike the scheduler does not print logs explaining why some nodes do not fit the pod, I think it's fine.\r\nHowever, we may print a summary log or emit an event about the number of pools that do not match and for what reason (right now I think it's not necessary).",
        "createdAt" : "2020-07-02T13:48:55Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "dbf254f3-0d4d-4c90-9cbe-fbf46d5fe564",
        "parentId" : "819c0c93-490e-4bc2-9175-3df799149a37",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "So shall I remove the TODO?\r\n",
        "createdAt" : "2020-07-02T17:01:47Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "a7ed6cca-83c4-4a63-90a6-aa13fbf0afb1",
        "parentId" : "819c0c93-490e-4bc2-9175-3df799149a37",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "it's fine to keep this.",
        "createdAt" : "2020-07-03T05:46:04Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f93802a70f988bee901a6d272883e20eafad57",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +932,936 @@\n\t// TODO (?): this doesn't give any information about which pools where considered and why\n\t// they had to be rejected. Log that above? But that might be a lot of log output...\n\tklog.V(4).Infof(\"Node %q has no accessible CSIStorageCapacity with enough capacity for PVC %s/%s of size %d and storage class %q\",\n\t\tnode.Name, claim.Namespace, claim.Name, sizeInBytes, storageClass.Name)"
  },
  {
    "id" : "1e2cf908-a959-4a32-b8f0-76c8208299e1",
    "prId" : 92387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92387#pullrequestreview-443253945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d350636c-6314-41ea-8a03-5d234306f012",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why returning true here, but false in line 836?",
        "createdAt" : "2020-07-06T14:37:43Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "04fdc289-240e-47ab-a882-b06e1819858a",
        "parentId" : "d350636c-6314-41ea-8a03-5d234306f012",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "`false` means \"we know that this particular criteria is violated\", which then gets translated into an error string. Here we don't know anything about \"insufficient storage\" and cannot even check it, therefore `true` is returned as result of the check.\r\n\r\nIn line 836, the booleans are irrelevant because the check failed and has to abort early with an error. https://github.com/kubernetes/kubernetes/blob/99896e4225202e25ba1924458fb104a14dfb9d27/pkg/controller/volume/scheduling/scheduler_binder.go#L243-L262 then returns that error without doing anything with the booleans.\r\n\r\n\r\n",
        "createdAt" : "2020-07-06T16:56:57Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f93802a70f988bee901a6d272883e20eafad57",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +844,848 @@\t\tif provisioner == \"\" || provisioner == pvutil.NotSupportedProvisioner {\n\t\t\tklog.V(4).Infof(\"storage class %q of claim %q does not support dynamic provisioning\", className, pvcName)\n\t\t\treturn false, true, nil, nil\n\t\t}\n"
  },
  {
    "id" : "d4abf0b2-ff4a-439c-a65a-91b432850fb0",
    "prId" : 92387,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92387#pullrequestreview-443292513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6a8beab-4c19-48bb-be4e-42704b2958a4",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "creating this selector everytime is expensive. In addition to creating the data structure for faster look of capacity objects, we should create those selectors once. lets create an issue to track all those optimizations which I think should be done for Beta.",
        "createdAt" : "2020-07-06T14:48:32Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "5206801a-8850-413e-9dc7-5b683352c2d1",
        "parentId" : "b6a8beab-4c19-48bb-be4e-42704b2958a4",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Added to https://github.com/kubernetes/enhancements/issues/1698#issuecomment-654356718\r\n\r\nIndexing objects by node should address this (https://github.com/kubernetes/kubernetes/pull/92387/files/99896e4225202e25ba1924458fb104a14dfb9d27#r449032580).\r\n\r\n",
        "createdAt" : "2020-07-06T17:07:18Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "ad0b11f7-d6d1-4067-9ab3-fa1bcdfc7aed",
        "parentId" : "b6a8beab-4c19-48bb-be4e-42704b2958a4",
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "sg, thanks",
        "createdAt" : "2020-07-06T17:55:31Z",
        "updatedAt" : "2020-07-08T06:02:58Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      }
    ],
    "commit" : "30f93802a70f988bee901a6d272883e20eafad57",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +944,948 @@\t}\n\t// Only matching by label is supported.\n\tselector, err := metav1.LabelSelectorAsSelector(capacity.NodeTopology)\n\tif err != nil {\n\t\t// This should never happen because NodeTopology must be valid."
  },
  {
    "id" : "69dc69b7-aafa-46e5-b44b-707fd6157fdd",
    "prId" : 92222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92222#pullrequestreview-432377274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9945844d-ceed-4068-a26d-33f2dd07f6d8",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`s/return nil, err/return` for simplicity",
        "createdAt" : "2020-06-17T13:03:15Z",
        "updatedAt" : "2020-06-24T06:15:34Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "f899976b41b12d83759ef166f0c6b8e167b563f0",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +255,259 @@\t\tboundVolumesSatisfied, err = b.checkBoundClaims(boundClaims, node, podName)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}"
  },
  {
    "id" : "d37c0775-8e2b-4be6-aa96-3a170eb94977",
    "prId" : 92222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92222#pullrequestreview-432377274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c23026-ec00-46ec-9ba3-0b170b5b26ff",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "ditto",
        "createdAt" : "2020-06-17T13:03:27Z",
        "updatedAt" : "2020-06-24T06:15:34Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "f899976b41b12d83759ef166f0c6b8e167b563f0",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +285,289 @@\t\t\tunboundVolumesSatisfied, matchedBindings, unboundClaims, err = b.findMatchingVolumes(pod, claimsToFindMatching, node)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclaimsToProvision = append(claimsToProvision, unboundClaims...)"
  },
  {
    "id" : "084385b7-3227-4b9b-b96f-14c48641a89a",
    "prId" : 92222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92222#pullrequestreview-432377274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95b7ce09-1bb2-4871-80a6-21f676a521f1",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "ditto",
        "createdAt" : "2020-06-17T13:03:33Z",
        "updatedAt" : "2020-06-24T06:15:34Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "f899976b41b12d83759ef166f0c6b8e167b563f0",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +294,298 @@\t\t\tunboundVolumesSatisfied, provisionedClaims, err = b.checkVolumeProvisions(pod, claimsToProvision, node)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "62837fad-2eeb-42d3-9d9d-727132e384ea",
    "prId" : 92222,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92222#pullrequestreview-432377274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1614487-0851-4e89-869b-1d1490fdded7",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "the pod is removed from scheduling queue if 1) deleted 2) scheduled, so we can check if the pod is deleted here ",
        "createdAt" : "2020-06-17T13:05:21Z",
        "updatedAt" : "2020-06-24T06:15:34Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "f899976b41b12d83759ef166f0c6b8e167b563f0",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +524,528 @@\t\tif apierrors.IsNotFound(err) {\n\t\t\treturn false, fmt.Errorf(\"pod %q does not exist any more\", podName)\n\t\t}\n\t\tklog.Errorf(\"failed to get pod %s/%s from the lister: %v\", pod.Namespace, pod.Name, err)\n\t}"
  },
  {
    "id" : "a8e70b28-5390-435a-9eda-d3e23efa4558",
    "prId" : 91705,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91705#pullrequestreview-430099839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97270a7d-9c08-4675-977e-ad5b13b98775",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "nit: `s/will revert assumed PV and assumed PVC in cache/reverts assumed PV and PVC cache`",
        "createdAt" : "2020-06-13T01:04:45Z",
        "updatedAt" : "2020-06-19T08:39:54Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ab958996f4a1d1ebcd20b695624a73d664883f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +392,396 @@\n// RevertAssumedPodVolumes will revert assumed PV and PVC cache.\nfunc (b *volumeBinder) RevertAssumedPodVolumes(assumedPod *v1.Pod, nodeName string) {\n\tb.revertAssumedPVs(b.podBindingCache.GetBindings(assumedPod, nodeName))\n\tb.revertAssumedPVCs(b.podBindingCache.GetProvisionedPVCs(assumedPod, nodeName))"
  },
  {
    "id" : "67d5638f-e96b-4944-b3d2-ed87d6d50305",
    "prId" : 91296,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91296#pullrequestreview-415394667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a5a711c-e441-4b83-bda0-1d3951eeb464",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`default scheduler` is misleading now, because we can configure multiple profiles for scheduler now (except the `default-scheduler` profile). all profiles share the same workflow except each one can disable/enable different plugins and args.",
        "createdAt" : "2020-05-20T14:27:38Z",
        "updatedAt" : "2020-05-20T14:27:39Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "36d1365af5ad3c2958988c72912679ee72732e49",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +77,81 @@// also considered along with the pod's other scheduling requirements.\n//\n// This integrates into the existing scheduler workflow as follows:\n// 1. The scheduler takes a Pod off the scheduler queue and processes it serially:\n//    a. Invokes all filter plugins, parallelized across nodes.  FindPodVolumes() is invoked here."
  },
  {
    "id" : "a1306f6b-b238-4428-9fd1-3d90efe6d267",
    "prId" : 91296,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91296#pullrequestreview-415397836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a77c3f64-2b0d-40f6-901a-40827abc3b74",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "include more information in the log. this is useful to know how many claims to provision for this pod.",
        "createdAt" : "2020-05-20T14:30:46Z",
        "updatedAt" : "2020-05-20T14:30:47Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "36d1365af5ad3c2958988c72912679ee72732e49",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +833,837 @@\n\t}\n\tklog.V(4).Infof(\"Provisioning for %d claims of pod %q that has no matching volumes on node %q ...\", len(claimsToProvision), podName, node.Name)\n\n\treturn true, provisionedClaims, nil"
  },
  {
    "id" : "d0f495c7-c569-47da-a4e1-58aae787f259",
    "prId" : 83394,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83394#pullrequestreview-309018070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcecca8b-b44a-473c-840a-1bbe91fb65a7",
        "parentId" : null,
        "authorId" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "body" : "Since the `features.CSIMigration` enablement check is done in the only caller of `isCSIMigrationOnForPlugin`, it's okay to skip the check for `features.CSIMigration` here. A comment calling this out explicitly would be nice. We will need to have this call into something like [this](https://github.com/kubernetes/kubernetes/pull/83098/files#diff-23d6020bc9cdbf469af5eeebbe2821f6R55) once that PR lands. ",
        "createdAt" : "2019-10-22T23:31:54Z",
        "updatedAt" : "2019-11-13T13:01:14Z",
        "lastEditedBy" : "98986d5f-c846-4478-8363-8a016e3d6b89",
        "tags" : [
        ]
      },
      {
        "id" : "11f052e9-dd92-4070-a159-b30055885fed",
        "parentId" : "dcecca8b-b44a-473c-840a-1bbe91fb65a7",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "Perhaps I'm missing something, but I'm not doing any check for `features.CSIMigration` alone here. The check is done in `tryTranslatePVToCSI()`, before this function is called.",
        "createdAt" : "2019-10-30T09:18:16Z",
        "updatedAt" : "2019-11-13T13:01:14Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbfc6ef4506e2144a9abdfb038386c2bac1fba08",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +836,840 @@// isCSIMigrationOnForPlugin checks if CSI migrartion is enabled for a given plugin.\nfunc isCSIMigrationOnForPlugin(pluginName string) bool {\n\tswitch pluginName {\n\tcase csiplugins.AWSEBSInTreePluginName:\n\t\treturn utilfeature.DefaultFeatureGate.Enabled(features.CSIMigrationAWS)"
  },
  {
    "id" : "c8716774-ad60-4f51-8c3e-d9e6a6e2da02",
    "prId" : 83394,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83394#pullrequestreview-309018070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e111a638-fcd6-405f-9146-51551c865eba",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Since we're not doing the translation inside CheckNodeAffinity, then that means we also need to add something to the kubelet path, which also validates node affinity.",
        "createdAt" : "2019-10-24T00:07:05Z",
        "updatedAt" : "2019-11-13T13:01:14Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "f1e58989-c20a-46aa-ae5e-dbae33fc8aa2",
        "parentId" : "e111a638-fcd6-405f-9146-51551c865eba",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "The volume is already translated to CSI by the time it validates node affinity. Example:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/a2ea4bbdde2eb7eb7bf374092e9df8a4851bd58d/pkg/volume/util/operationexecutor/operation_generator.go#L989-L1010\r\n",
        "createdAt" : "2019-10-30T09:09:10Z",
        "updatedAt" : "2019-11-13T13:01:14Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbfc6ef4506e2144a9abdfb038386c2bac1fba08",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +519,523 @@\n\t\t// Check PV's node affinity (the node might not have the proper label)\n\t\tif err := volumeutil.CheckNodeAffinity(pv, node.Labels); err != nil {\n\t\t\treturn false, fmt.Errorf(\"pv %q node affinity doesn't match node %q: %v\", pv.Name, node.Name, err)\n\t\t}"
  },
  {
    "id" : "d05027c0-7ec6-4e03-b36e-ac9c56c31aae",
    "prId" : 83394,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83394#pullrequestreview-316685256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3360a5c2-954b-4b9d-a35a-9165b08ebd45",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "It seems we can directly return false here.",
        "createdAt" : "2019-11-14T02:50:18Z",
        "updatedAt" : "2019-11-14T02:50:18Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbfc6ef4506e2144a9abdfb038386c2bac1fba08",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +863,867 @@\tmpa := csiNodeAnn[v1.MigratedPluginsAnnotationKey]\n\tif len(mpa) == 0 {\n\t\tmpaSet = sets.NewString()\n\t} else {\n\t\ttok := strings.Split(mpa, \",\")"
  },
  {
    "id" : "f1c596d3-e906-4221-a447-8b2e7f825138",
    "prId" : 83394,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83394#pullrequestreview-316685642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21fc17e3-1fdc-47b8-8343-c093be1fcb6b",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I wonder if 'pv, nil' can be returned here.",
        "createdAt" : "2019-11-14T02:51:55Z",
        "updatedAt" : "2019-11-14T02:51:55Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbfc6ef4506e2144a9abdfb038386c2bac1fba08",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +884,888 @@\tpluginName, err := b.translator.GetInTreePluginNameFromSpec(pv, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not get plugin name from pv: %v\", err)\n\t}\n"
  },
  {
    "id" : "0f10ea90-acf3-4647-96ba-bbca29391ebb",
    "prId" : 80460,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80460#pullrequestreview-265773779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7735501c-ddc0-4525-9ad8-2a5a715e3592",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think https://github.com/kubernetes/kubernetes/blob/c5635753ea5b148b6f416d5692beeb221f29a76e/pkg/scheduler/algorithm/predicates/csi_volume_predicate.go also has to be updated",
        "createdAt" : "2019-07-23T18:46:26Z",
        "updatedAt" : "2019-07-24T01:35:27Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "edfe7122-c559-4409-bd53-06084cd04d37",
        "parentId" : "7735501c-ddc0-4525-9ad8-2a5a715e3592",
        "authorId" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "body" : "Thank you for your review. I fixed it.",
        "createdAt" : "2019-07-24T03:14:49Z",
        "updatedAt" : "2019-07-24T03:14:49Z",
        "lastEditedBy" : "e1ba72c9-3be8-432b-b345-ac2d180a8eab",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94e800008391d96338a07ec53181be93ace0175",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +666,670 @@\tfor _, pvc := range claimsToBind {\n\t\t// Get storage class name from each PVC\n\t\tstorageClassName := v1helper.GetPersistentVolumeClaimClass(pvc)\n\t\tallPVs := b.pvCache.ListPVs(storageClassName)\n\t\tpvcName := getPVCName(pvc)"
  }
]