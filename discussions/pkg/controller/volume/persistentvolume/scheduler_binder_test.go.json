[
  {
    "id" : "a7b90932-507a-42a3-9eaf-94a287594615",
    "prId" : 72953,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72953#pullrequestreview-193009932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9db4bf3-266a-40a3-b393-62131d187964",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "do we need to add UT for UpdateBindings with provisionings param nil or few different values of it ?",
        "createdAt" : "2019-01-16T07:36:06Z",
        "updatedAt" : "2019-01-16T13:22:40Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "322a6539-2cd0-45ed-8406-df66e0319697",
        "parentId" : "c9db4bf3-266a-40a3-b393-62131d187964",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Sure, UpdateBindings/UpdateProvisionedPVCs has been tested in  [scheduler_binder_cache_test.go](https://github.com/kubernetes/kubernetes/blob/f4e4a69aefe53ca8cd4d3fc954beba7700c83d1a/pkg/controller/volume/persistentvolume/scheduler_binder_cache_test.go#L63), we can add more cases.",
        "createdAt" : "2019-01-16T08:02:46Z",
        "updatedAt" : "2019-01-16T13:22:40Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd80460de04fd1097065dee646b667c0468f2fd",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +341,345 @@func (env *testEnv) initPodCache(pod *v1.Pod, node string, bindings []*bindingInfo, provisionings []*v1.PersistentVolumeClaim) {\n\tcache := env.internalBinder.podBindingCache\n\tcache.UpdateBindings(pod, node, bindings, provisionings)\n}\n"
  },
  {
    "id" : "e31fb8e7-83b8-4d04-aa8f-af2d8678ddb5",
    "prId" : 72045,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72045#pullrequestreview-190074446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c62cf3ba-f38d-42bc-95f7-f8ee3d74b1b0",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "does this need to be a copy of the pvc object?",
        "createdAt" : "2019-01-07T23:52:40Z",
        "updatedAt" : "2019-01-09T02:50:28Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "00550f1d-6044-4a9c-bfe6-9184728ebc4b",
        "parentId" : "c62cf3ba-f38d-42bc-95f7-f8ee3d74b1b0",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "No, it is already, `newPVC` is returned by `client.CoreV1().PersistentVolumeClaims(pvc.Namespace).Get` which retrieves objects from apiserver. I've updated volumeReactor to return a copy of stored object.",
        "createdAt" : "2019-01-08T02:07:22Z",
        "updatedAt" : "2019-01-09T02:50:28Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "c5686301-7ae9-45f2-bef2-952bdd4b5514",
        "parentId" : "c62cf3ba-f38d-42bc-95f7-f8ee3d74b1b0",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "For dynamic provisioning, PVC was updated in bindAPIUpdate, this is why I need to fetch PVC from apiserver again. ",
        "createdAt" : "2019-01-08T02:42:06Z",
        "updatedAt" : "2019-01-09T02:50:28Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a62f53d3fc915a1c99156c8de049fedd2219a41",
    "line" : 690,
    "diffHunk" : "@@ -1,1 +1510,1514 @@\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tnewPVC.Spec.VolumeName = dynamicPV.Name\n\t\t\t\tmetav1.SetMetaDataAnnotation(&newPVC.ObjectMeta, annBindCompleted, \"yes\")\n\t\t\t\tif _, err := testEnv.client.CoreV1().PersistentVolumeClaims(newPVC.Namespace).Update(newPVC); err != nil {"
  },
  {
    "id" : "65d8f248-0d4a-415c-b0b8-483522f0074d",
    "prId" : 72045,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72045#pullrequestreview-190072593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc98b246-2b5e-49a3-ba0b-5b4201b9496f",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "What is the purpose of having a separate call to update the api objects instead of passing them through initVolumes/initClaims?",
        "createdAt" : "2019-01-07T23:56:46Z",
        "updatedAt" : "2019-01-09T02:50:28Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "0d9b7d1b-6016-4da9-a3fb-1bdccddead8f",
        "parentId" : "dc98b246-2b5e-49a3-ba0b-5b4201b9496f",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "resourceVersion is different, it helps to test API conflicts",
        "createdAt" : "2019-01-08T02:29:38Z",
        "updatedAt" : "2019-01-09T02:50:28Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a62f53d3fc915a1c99156c8de049fedd2219a41",
    "line" : 853,
    "diffHunk" : "@@ -1,1 +1624,1628 @@\n\t\t// Before Execute\n\t\tif scenario.apiPV != nil {\n\t\t\t_, err := testEnv.client.CoreV1().PersistentVolumes().Update(scenario.apiPV)\n\t\t\tif err != nil {"
  },
  {
    "id" : "c445aeb5-a9a7-44b1-b2d6-cab55e3e4234",
    "prId" : 70026,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70026#pullrequestreview-188420093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa7e1ac7-265b-48d5-a89c-6c29c323f0a3",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I would add a new field to the test case for provisioned pvcs.  Then for the call to `assumeVolumes`, the bindings argument is determined by `scenario.binding`, and the provisioned pvcs argument is determined by `scenario.provisionedPVCs`.  That way, the arguments can be independent.\r\n\r\nThere can even be two test cases to test wrong binding.  One for static binding, and one for dynamic provisioning.",
        "createdAt" : "2018-12-28T18:30:40Z",
        "updatedAt" : "2019-01-04T11:59:53Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "6784ef83-58ce-4551-959d-0c4bdd398bd2",
        "parentId" : "fa7e1ac7-265b-48d5-a89c-6c29c323f0a3",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "Done.\r\n\r\n> There can even be two test cases to test wrong binding. One for static binding, and one for dynamic provisioning.\r\n\r\nDo you mean something like this?\r\n",
        "createdAt" : "2018-12-29T19:46:25Z",
        "updatedAt" : "2019-01-04T11:59:53Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4fcddd1b76ed628412b0cb0daabc5a05f87790",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +1463,1467 @@\t\tif !scenario.bindingsNil {\n\t\t\tbindings := []*bindingInfo{}\n\t\t\tif scenario.binding != nil {\n\t\t\t\tbindings = []*bindingInfo{scenario.binding}\n\t\t\t}"
  },
  {
    "id" : "7dca8d21-95e8-41c5-92a1-9d3b54777367",
    "prId" : 63232,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63232#pullrequestreview-118627115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "195d7b2f-737d-4b6c-b58e-cedb6aa9c370",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you also add a test case with immediate-bound and delayed-provision",
        "createdAt" : "2018-05-08T21:35:10Z",
        "updatedAt" : "2018-05-24T09:13:24Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "5e0db2cb-dd6a-4687-8306-a582c437934b",
        "parentId" : "195d7b2f-737d-4b6c-b58e-cedb6aa9c370",
        "authorId" : "1a75d411-1ce5-48f2-9967-25f88794c451",
        "body" : "Done",
        "createdAt" : "2018-05-09T07:07:36Z",
        "updatedAt" : "2018-05-24T09:13:24Z",
        "lastEditedBy" : "1a75d411-1ce5-48f2-9967-25f88794c451",
        "tags" : [
        ]
      }
    ],
    "commit" : "446f36559e933d3eeea666bd2165db21b7bb419e",
    "line" : 377,
    "diffHunk" : "@@ -1,1 +723,727 @@\t\t\texpectedBound:      true,\n\t\t},\n\t\t\"immediate-unbound-pvc\": {\n\t\t\tpodPVCs:         []*v1.PersistentVolumeClaim{immediateUnboundPVC},\n\t\t\texpectedUnbound: false,"
  }
]