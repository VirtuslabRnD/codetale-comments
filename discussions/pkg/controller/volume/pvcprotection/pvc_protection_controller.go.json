[
  {
    "id" : "69bcc925-358f-478a-9687-d33aafed8572",
    "prId" : 92784,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92784#pullrequestreview-445038741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ab77691-8ba9-477d-9fb4-f6e2bf110cee",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "This is not accurate. deleteGracePeriodSeconds tells kubelet when it can start force terminating the containers. Volume teardown only starts after containers are termianted. So there is an additional time period after the grace period where volume teardown is happening.\r\n\r\nAnd the main signal we have today that volume teardown has finished is the deletion of the Pod object.\r\n\r\nAdding this check to removing the finalizer early will introduce races where the volume gets deleted before unmount is complete, potentially causing unmount to hang/fail forever.\r\n\r\nWe need to think of a different way to get the signal that unmount is finished. And potentially we may still have a race for plugins that support unstage because the logic that kubelet uses to check if the pod resources are cleaned up only checks for pod volume directories, not plugin directories. cc @jsafrane ",
        "createdAt" : "2020-07-08T18:03:07Z",
        "updatedAt" : "2020-07-09T21:29:56Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "6d8031c1-4bf5-4a10-99f6-713c53ae5375",
        "parentId" : "6ab77691-8ba9-477d-9fb4-f6e2bf110cee",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "I have pushed an updated version where the PVC protection controller change is under a feature gate check. Without the feature, it should behave as before.\r\n\r\nI also added a TODO about this questionable check to the code and my tracking list: https://github.com/kubernetes/enhancements/issues/1698#issuecomment-655344680",
        "createdAt" : "2020-07-08T18:19:56Z",
        "updatedAt" : "2020-07-09T21:29:56Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "e7d22e9b-684e-4243-8f4f-1ebaecded7ff",
        "parentId" : "6ab77691-8ba9-477d-9fb4-f6e2bf110cee",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "I also placed the extension of the PodPVCIndexer under the feature check because `askInformer` is expecting the traditional behavior when the feature is off.\r\n",
        "createdAt" : "2020-07-08T18:47:04Z",
        "updatedAt" : "2020-07-09T21:29:56Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1178bd925b54898e66cace37d35bf551380a75b",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +328,332 @@\t// A pod that has a deletionTimestamp and a zero\n\t// deletionGracePeriodSeconds\n\t// a) has been processed by kubelet and is ready for deletion or\n\t// b) was force-deleted.\n\t//"
  },
  {
    "id" : "ea12f1ee-404a-4138-8238-8ad51f0418cc",
    "prId" : 91574,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91574#pullrequestreview-423269445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9796141d-730f-40ba-94d8-c53837bcca46",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "`podUsesPVC` is not removed because it's used in `askAPIServer` too",
        "createdAt" : "2020-06-03T07:01:40Z",
        "updatedAt" : "2020-06-03T07:01:40Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "8422044f1746354393ea5b617e2bde5c24c0f829",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +250,254 @@\t\t}\n\t\t// found a pod using this PVC\n\t\treturn true, nil\n\t}\n"
  },
  {
    "id" : "1d8bdaea-0784-4596-ab61-75fd170693e8",
    "prId" : 80492,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80492#pullrequestreview-267432884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "002c3fb2-ef8f-44f9-b498-c1d2e69f10ab",
        "parentId" : null,
        "authorId" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "body" : "IMO keep old code style may be better \r\n```\r\nif volume.PersistentVolumeClaim == nil {\r\n    continue\r\n}\r\nif volume.PersistentVolumeClaim.ClaimName == pvc.Name{\r\n    ...\r\n}\r\n```",
        "createdAt" : "2019-07-24T10:32:05Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "tags" : [
        ]
      },
      {
        "id" : "9f8bf974-27c4-4bfc-81c7-0ee43024e08e",
        "parentId" : "002c3fb2-ef8f-44f9-b498-c1d2e69f10ab",
        "authorId" : "86faee3e-ddad-4fa9-a307-ebd2c6c9bf84",
        "body" : "I'd rather leave it unchanged, unless your opinion has consensus among the reviewers or you can provide a Code style doc that suggests the old style is preferred.",
        "createdAt" : "2019-07-26T22:55:41Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "86faee3e-ddad-4fa9-a307-ebd2c6c9bf84",
        "tags" : [
        ]
      }
    ],
    "commit" : "1371490bd687503bf9332eaf125692972b2c3132",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +272,276 @@\t\tfor _, volume := range pod.Spec.Volumes {\n\t\t\tif volume.PersistentVolumeClaim != nil && volume.PersistentVolumeClaim.ClaimName == pvc {\n\t\t\t\tklog.V(2).Infof(\"Pod %s/%s uses PVC %s\", pod.Namespace, pod.Name, pvc)\n\t\t\t\treturn true\n\t\t\t}"
  },
  {
    "id" : "c4a23a76-9b32-4094-b679-9cd64131e908",
    "prId" : 80492,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80492#pullrequestreview-274638354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08eaabcd-7ffa-4848-80f3-84ab72198781",
        "parentId" : null,
        "authorId" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "body" : "We may need evaluate the load increase since this func may be frequently called when we delete pvcs.",
        "createdAt" : "2019-07-24T10:38:12Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "c36d7654-ffec-4c9c-964e-b4b2e70085d0",
        "tags" : [
        ]
      },
      {
        "id" : "1f6cbc12-692a-4500-b6a5-29f5c07eeae9",
        "parentId" : "08eaabcd-7ffa-4848-80f3-84ab72198781",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "There is a correct way to reduce that load.  See the \"A correct optimization\" section in https://www.ibm.com/cloud/blog/new-builders/preserve-kubernetes-api-objects-while-they-are-in-use?mhsrc=ibmsearch_a&mhq=preserve%20kubernetes%20api%20object",
        "createdAt" : "2019-07-26T05:29:20Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "156aae3b-e7a2-468b-bb67-9f273a44a18a",
        "parentId" : "08eaabcd-7ffa-4848-80f3-84ab72198781",
        "authorId" : "86faee3e-ddad-4fa9-a307-ebd2c6c9bf84",
        "body" : "That optimization is already part of this PR, see https://github.com/matte21/kubernetes/blob/pvc-protection-controller-fix-issue-75980/pkg/controller/volume/pvcprotection/pvc_protection_controller.go#L217 . ",
        "createdAt" : "2019-07-26T22:51:06Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "86faee3e-ddad-4fa9-a307-ebd2c6c9bf84",
        "tags" : [
        ]
      },
      {
        "id" : "33033db0-3d39-4e1a-bed8-f3ab154815d8",
        "parentId" : "08eaabcd-7ffa-4848-80f3-84ab72198781",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Sorry, did not read enough.",
        "createdAt" : "2019-08-14T02:04:05Z",
        "updatedAt" : "2019-08-14T23:02:21Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1371490bd687503bf9332eaf125692972b2c3132",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +226,230 @@\t// be 100% confident that it is safe to delete pvc make sure no Pod is using\n\t// it among those returned by a live list.\n\treturn c.askAPIServer(pvc)\n}\n"
  },
  {
    "id" : "de6c5a34-2d96-4aeb-8416-2e385cdff17b",
    "prId" : 55824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55824#pullrequestreview-77510393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a96df0fe-1ba6-4e5f-89f7-d09685fcaa24",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "return early on error, if you get a parse error on the key, there's no point requeuing ",
        "createdAt" : "2017-11-17T14:33:06Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e8212013-8cf7-444c-824b-3e088a26ca2c",
        "parentId" : "a96df0fe-1ba6-4e5f-89f7-d09685fcaa24",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "fixed",
        "createdAt" : "2017-11-17T17:50:17Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1b1d312474bf0dbf73d69053a1fc9c9f4f842f1",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@\tdefer c.queue.Done(pvcKey)\n\n\tpvcNamespace, pvcName, err := cache.SplitMetaNamespaceKey(pvcKey.(string))\n\tif err != nil {\n\t\tutilruntime.HandleError(fmt.Errorf(\"Error parsing PVC key %q: %v\", pvcKey, err))"
  },
  {
    "id" : "3972df33-f8dc-4bc3-9d58-5e1205e4b7b1",
    "prId" : 55824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55824#pullrequestreview-78866667",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "110a2b08-2a2e-4d17-afd6-5f874ddc9807",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "return in this case",
        "createdAt" : "2017-11-17T15:44:39Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7164dd83-3db2-4e9b-be3d-e26613bcb601",
        "parentId" : "110a2b08-2a2e-4d17-afd6-5f874ddc9807",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "fixed",
        "createdAt" : "2017-11-17T18:53:20Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "eafb215f-da74-4c2c-8604-50c2c7c7e7dc",
        "parentId" : "110a2b08-2a2e-4d17-afd6-5f874ddc9807",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "not related to this PR but this is the primary gotcha of every informer driven controller.  We need to do better because oversights on this always return in failures in production.",
        "createdAt" : "2017-11-18T18:11:56Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2811a8fc-30db-4820-ba27-fc4356fe5af7",
        "parentId" : "110a2b08-2a2e-4d17-afd6-5f874ddc9807",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "For the less informed - what is the failure mode that leads to this?",
        "createdAt" : "2017-11-22T23:04:40Z",
        "updatedAt" : "2017-11-23T11:26:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4e6d4e82-3501-45b8-b557-01603fb7d075",
        "parentId" : "110a2b08-2a2e-4d17-afd6-5f874ddc9807",
        "authorId" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "body" : "I copied the code from [service account controller](https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/serviceaccount/serviceaccounts_controller.go#L133) so @liggitt or @deads2k may know better.\r\nI've found [this explanation](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/cache/controller.go#L173-L176).",
        "createdAt" : "2017-11-24T09:42:07Z",
        "updatedAt" : "2017-11-24T09:42:08Z",
        "lastEditedBy" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1b1d312474bf0dbf73d69053a1fc9c9f4f842f1",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +259,263 @@\t\ttombstone, ok := obj.(cache.DeletedFinalStateUnknown)\n\t\tif !ok {\n\t\t\tutilruntime.HandleError(fmt.Errorf(\"Couldn't get object from tombstone %#v\", obj))\n\t\t\treturn\n\t\t}"
  }
]