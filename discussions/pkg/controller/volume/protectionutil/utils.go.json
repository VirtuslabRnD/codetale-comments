[
  {
    "id" : "2ad00434-a72a-4969-9730-d6b7fb2027fa",
    "prId" : 75021,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75021#pullrequestreview-214393187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d973be9e-dcbc-47bf-8381-1507254c3497",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "instead of passing the finializer, is that possible to use the type of the object to determine what is the finalizer?",
        "createdAt" : "2019-03-13T18:16:30Z",
        "updatedAt" : "2019-03-17T14:25:01Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "2f447f46-fd22-4966-b305-4f83b0c0755d",
        "parentId" : "d973be9e-dcbc-47bf-8381-1507254c3497",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "As is it designed in this PR, caller needs to know the finalizer anyway, because it's the caller who adds it to the object. IMO passing it here as argument is OK.\r\n\r\nUnless you want to dig deeper and create single struct / interface that implements generic protection of X when Y exists, instantiated only with different configuration in PV / PVC protection controllers. That would be awesome.\r\n\r\n",
        "createdAt" : "2019-03-14T09:22:27Z",
        "updatedAt" : "2019-03-17T14:25:01Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9c13409a88014c788493d7e435239e1646008a5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@\n// IsDeletionCandidate checks if object is candidate to be deleted\nfunc IsDeletionCandidate(obj metav1.Object, finalizer string) bool {\n\treturn obj.GetDeletionTimestamp() != nil && slice.ContainsString(obj.GetFinalizers(),\n\t\tfinalizer, nil)"
  }
]