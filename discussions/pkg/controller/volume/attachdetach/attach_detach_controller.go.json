[
  {
    "id" : "337fe50d-8ab2-47bf-a336-d918ac12d2f2",
    "prId" : 102176,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102176#pullrequestreview-670955956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07548286-dce6-4756-9ac8-8cdfcda02664",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "nit: lets use '%s` for `inTreePluginName` . ",
        "createdAt" : "2021-05-27T16:25:32Z",
        "updatedAt" : "2021-05-27T16:25:32Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "77e819c4-67fc-4c63-b148-9b4e0e2eb9a3",
        "parentId" : "07548286-dce6-4756-9ac8-8cdfcda02664",
        "authorId" : "1edf944b-b70d-4fc3-9a7a-4b6b2daa9547",
        "body" : "Done, PTAL.",
        "createdAt" : "2021-05-28T06:04:55Z",
        "updatedAt" : "2021-05-28T06:04:55Z",
        "lastEditedBy" : "1edf944b-b70d-4fc3-9a7a-4b6b2daa9547",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd3709232f83e3ab5333b7a3bfb6184075f5895a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +737,741 @@\t\t\t\t\t\tinTreePluginName,\n\t\t\t\t\t\terr)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}"
  },
  {
    "id" : "2dd50d5d-1956-4a04-bb02-d621f8b24a91",
    "prId" : 81187,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81187#pullrequestreview-272810887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e732dfa0-5b9d-40c3-a008-67aad035129b",
        "parentId" : null,
        "authorId" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "body" : "I didn't even notice that changed at first, because it was done automatically by my editor. `goimports` does this. Looking through the repo, it is used like this all over, so I didn't go make and remove these changes.",
        "createdAt" : "2019-08-08T20:12:02Z",
        "updatedAt" : "2019-08-09T18:31:15Z",
        "lastEditedBy" : "56b792dc-dc04-4881-bdb0-21266a20a436",
        "tags" : [
        ]
      }
    ],
    "commit" : "4574473753d0f56d54ea91ecaff91548536d9402",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +25,29 @@\n\tauthenticationv1 \"k8s.io/api/authentication/v1\"\n\tv1 \"k8s.io/api/core/v1\"\n\tapierrors \"k8s.io/apimachinery/pkg/api/errors\"\n\t\"k8s.io/apimachinery/pkg/labels\""
  },
  {
    "id" : "f2075ed3-47a1-416b-ae5b-98fc9ff7df70",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-151573614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ba2504-e301-47bd-b698-62ddd5e6f694",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How does this get uninstalled on a rollback?",
        "createdAt" : "2018-08-31T20:55:05Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "23e59409-c08e-43bb-8166-4972a2bb4474",
        "parentId" : "d8ba2504-e301-47bd-b698-62ddd5e6f694",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "We thought about downgrade and decided not to have an automated mechanism to uninstall on downgrade. Even if the CRD (and any CRs) exist, the older versions will simply ignore it.",
        "createdAt" : "2018-08-31T23:41:25Z",
        "updatedAt" : "2018-08-31T23:41:26Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +149,153 @@\n\t// Install required CSI CRDs on API server\n\tif utilfeature.DefaultFeatureGate.Enabled(features.CSICrdAutoInstall) {\n\t\tadc.installCRDs()\n\t}"
  },
  {
    "id" : "c6f48ae3-280d-475b-8578-fd0abccee463",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-151574302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e0108d-a19a-4762-9b70-ac4b0cbc5e00",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "is it safe to pass a nil error to this function?",
        "createdAt" : "2018-08-31T20:59:50Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9d270b99-5ee8-4f84-9c7e-216340b1a29b",
        "parentId" : "23e0108d-a19a-4762-9b70-ac4b0cbc5e00",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Good point. Cleaned up the block to prevent that.",
        "createdAt" : "2018-08-31T23:48:40Z",
        "updatedAt" : "2018-08-31T23:48:40Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +689,693 @@\t\tglog.Errorf(\"failed to create CSIDrivers CRD: %#v, err: %#v\",\n\t\t\tres, err)\n\t} else if apierrors.IsAlreadyExists(err) {\n\t\tglog.Warningf(\"CSIDrivers CRD already exists: %#v, err: %#v\",\n\t\t\tres, err)"
  },
  {
    "id" : "18ecb993-b8c5-425a-a867-d31d5fb31313",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-151574898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9ce259b-7994-4b8d-bb04-5c48eca8296a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How well will the rest of the system cope if only one of these is installed (say the other one has a transient error)?",
        "createdAt" : "2018-08-31T21:02:28Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "eac2dd66-adae-46f7-ab50-2b3f0d3eafef",
        "parentId" : "c9ce259b-7994-4b8d-bb04-5c48eca8296a",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Different parts of the volume plugin provisioning/attach/mount process look at CRs for one of these CRDs. If one of the CRDs fails to create, it would just change where in the provision/attach/mount process subsequent failure will happen.\r\n\r\nSince it is better to fail fast, I changed the errors here to return error instead of silently log.",
        "createdAt" : "2018-08-31T23:55:28Z",
        "updatedAt" : "2018-08-31T23:55:28Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +724,728 @@\t}\n\n\treturn nil\n}\n"
  },
  {
    "id" : "dc8703de-fb12-4ecc-8caa-319589bdeca3",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-153168901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7fac32e-0298-49de-828b-6fc628bfb709",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am a little concerned about the implications of controller-manager doing schema changes when it starts up. Not claiming it's definitely problematic, just still thinking about it.",
        "createdAt" : "2018-08-31T21:04:09Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c6d56670-7fd3-4f84-bdc5-b0e9ce946588",
        "parentId" : "a7fac32e-0298-49de-828b-6fc628bfb709",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Ya, we're doing this for alpha because it's the path of least resistance. For beta, I was talking to @timstclair and we were thinking about having a new/dedicated controller that is responsible for installing CRDs (and reinstalling them if they are uninstalled, e.g. like add on manager). Can revisit that for beta.",
        "createdAt" : "2018-08-31T23:59:45Z",
        "updatedAt" : "2018-08-31T23:59:46Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "f208bc74-3ea1-411e-8bac-43dc2425d7a6",
        "parentId" : "a7fac32e-0298-49de-828b-6fc628bfb709",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Should we just use addons for alpha? I drafted those changes here: https://github.com/tallclair/kubernetes/commit/a58008ee42b01b7185e1335d2b804dc2df384998",
        "createdAt" : "2018-09-01T00:03:08Z",
        "updatedAt" : "2018-09-01T00:03:08Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "d663431d-6cab-42af-9a09-a8bd328bb967",
        "parentId" : "a7fac32e-0298-49de-828b-6fc628bfb709",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> we're doing this for alpha because it's the path of least resistance\r\n\r\nThat attitude is concerning. Constructing APIs via CRD should not lower our standards for design or make us more willing to ship things we haven't considered the implications of. ",
        "createdAt" : "2018-09-07T00:31:15Z",
        "updatedAt" : "2018-09-07T00:43:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +669,673 @@\n// installCRDs creates the specified CustomResourceDefinition for the CSIDrivers object.\nfunc (adc *attachDetachController) installCRDs() error {\n\tcrd := &apiextensionsv1beta1.CustomResourceDefinition{\n\t\tObjectMeta: metav1.ObjectMeta{"
  },
  {
    "id" : "f2ceba81-debc-4d89-8ae6-b5eb258c6d6a",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-153168901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1baa40-67a5-4a3c-bc21-387c852f6c68",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think the definition files should be stored in yaml format in a file. I don't think it's a good idea to construct them at runtime, it's too easy to make a change to the code and not realize you're introducing a compatibility problem.",
        "createdAt" : "2018-08-31T21:05:37Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "088de0cc-c4c4-4b81-9e53-ceb5e0f93797",
        "parentId" : "3e1baa40-67a5-4a3c-bc21-387c852f6c68",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Noted. When we move this to a more permanent solution in beta (see https://github.com/kubernetes/kubernetes/pull/67803#discussion_r214497103), will consider this as well.",
        "createdAt" : "2018-09-01T00:02:02Z",
        "updatedAt" : "2018-09-01T00:02:02Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "83dd6644-4183-4e0b-aee7-3c79aded1815",
        "parentId" : "3e1baa40-67a5-4a3c-bc21-387c852f6c68",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> I think the definition files should be stored in yaml format in a file. I don't think it's a good idea to construct them at runtime, it's too easy to make a change to the code and not realize you're introducing a compatibility problem.\r\n\r\nWhy was this comment not considered necessary to address? I am somewhat dismayed by the attitude (echoed in the follow up PR) that the issues raised here don't matter for alpha.",
        "createdAt" : "2018-09-07T00:34:09Z",
        "updatedAt" : "2018-09-07T00:43:32Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +670,674 @@// installCRDs creates the specified CustomResourceDefinition for the CSIDrivers object.\nfunc (adc *attachDetachController) installCRDs() error {\n\tcrd := &apiextensionsv1beta1.CustomResourceDefinition{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: csiapiv1alpha1.CsiDriverResourcePlural + \".\" + csiapiv1alpha1.GroupName,"
  },
  {
    "id" : "130758c6-96c9-47b7-93c1-15166d696e0f",
    "prId" : 67803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67803#pullrequestreview-151576283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1abce95-1706-4492-84c8-947967d6fa9f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why not use the `validation` property? I think you should. I think there is a way to construct it from the types.go file you have.",
        "createdAt" : "2018-08-31T21:06:33Z",
        "updatedAt" : "2018-08-31T21:07:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4e57ac7b-7ae8-46c2-94f8-1cd08835b60b",
        "parentId" : "e1abce95-1706-4492-84c8-947967d6fa9f",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Oh nice, I didn't realize validation was already supported. Looks like auto generation of OpenAPIV3Schema  from types.go is still in the works https://github.com/kubernetes/kube-openapi/pull/37. Before we move to beta, hopefully that is ready and we can use it. If not, we'll just construct the Validation schema manually then.",
        "createdAt" : "2018-09-01T00:13:44Z",
        "updatedAt" : "2018-09-01T00:13:44Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdeb895d25f21ad67ed4db488879532d40aae16e",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +682,686 @@\t\t\t\tKind:   reflect.TypeOf(csiapiv1alpha1.CSIDriver{}).Name(),\n\t\t\t},\n\t\t},\n\t}\n\tres, err := adc.crdClient.ApiextensionsV1beta1().CustomResourceDefinitions().Create(crd)"
  },
  {
    "id" : "d74f10ec-64b4-4948-ab0f-5b6741b872ed",
    "prId" : 66863,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66863#pullrequestreview-145435052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c81e72-cbdb-4379-8f2d-a02790f918d2",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Just curious: Why `runtime.HandleError`? Why not just `glog.Errorf`?",
        "createdAt" : "2018-08-10T23:41:04Z",
        "updatedAt" : "2018-08-13T17:04:25Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "7586ab4b-f389-4ea2-81c2-903f558aa70b",
        "parentId" : "46c81e72-cbdb-4379-8f2d-a02790f918d2",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "I followed https://github.com/kubernetes/kubernetes/blob/v1.12.0-alpha.1/pkg/controller/daemon/daemon_controller.go#L316, and found [sample-controller](https://github.com/kubernetes/sample-controller/blob/master/controller.go#L341) uses `runtime.HandleError` to log errors too. Perhaps because `runtime.HandleError` is dedicated to log non-user facing ignored errors and can be extended by adding error handlers.",
        "createdAt" : "2018-08-11T03:39:15Z",
        "updatedAt" : "2018-08-13T17:04:25Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "17ab4c36ce0c012e0447f338315307d6db5b3ac8",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +540,544 @@\tkey, err := kcache.DeletionHandlingMetaNamespaceKeyFunc(obj)\n\tif err != nil {\n\t\truntime.HandleError(fmt.Errorf(\"Couldn't get key for object %+v: %v\", obj, err))\n\t\treturn\n\t}"
  },
  {
    "id" : "75a373d0-a392-4607-bebc-0e100f3b9527",
    "prId" : 66863,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66863#pullrequestreview-145435790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64bde6e3-f46c-4eea-929a-f28084322226",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Just to verify, if there are multiple pods using the same PVC, this will return all pods? If so make sure there is a test case for that.",
        "createdAt" : "2018-08-10T23:47:10Z",
        "updatedAt" : "2018-08-13T17:04:25Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "361265cd-ec0f-4fff-b56e-16b2fc927c98",
        "parentId" : "64bde6e3-f46c-4eea-929a-f28084322226",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "Yes, test has been updated. Created more pvc notbound pods for testing in  https://github.com/kubernetes/kubernetes/pull/66863/commits/74cfffca2e82ed9e6cd35a3f86222b0828fef326.",
        "createdAt" : "2018-08-11T04:14:06Z",
        "updatedAt" : "2018-08-13T17:04:25Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "17ab4c36ce0c012e0447f338315307d6db5b3ac8",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +594,598 @@\t}\n\n\tobjs, err := adc.podIndexer.ByIndex(pvcKeyIndex, key)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "e30fdb8c-6216-4f7a-bcb8-d5c769167d47",
    "prId" : 45286,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45286#pullrequestreview-36056087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc2fe1fe-cbcc-4630-8905-6115b504ebee",
        "parentId" : null,
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "podUpdate still only happens once every 12 hours though right?\r\n\r\nI think we have to do it in one of the reconciler loops",
        "createdAt" : "2017-05-03T14:44:50Z",
        "updatedAt" : "2017-05-12T02:33:47Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      },
      {
        "id" : "58c0e8b3-a471-47a8-9626-f277ec11118b",
        "parentId" : "bc2fe1fe-cbcc-4630-8905-6115b504ebee",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I would assume that, `podUpdate` should get called when pod's status for example, changes from `Running` to `Complete` - not every 12 hours. ",
        "createdAt" : "2017-05-03T15:30:53Z",
        "updatedAt" : "2017-05-12T02:33:47Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "86bfe5cc-1ebb-4a65-a3a4-4ba632ab5d7e",
        "parentId" : "bc2fe1fe-cbcc-4630-8905-6115b504ebee",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Also, regardless of this event though - I have also updated DSWP to remove the pod from DSW if pod is terminated. ",
        "createdAt" : "2017-05-03T15:31:50Z",
        "updatedAt" : "2017-05-12T02:33:47Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "4bfffb98-0ab6-4cc4-bb38-0f4c54c78c40",
        "parentId" : "bc2fe1fe-cbcc-4630-8905-6115b504ebee",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "oh yeah...brain fart my b 🥇 ",
        "createdAt" : "2017-05-03T15:35:33Z",
        "updatedAt" : "2017-05-12T02:33:47Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      }
    ],
    "commit" : "951a36aac77338aaebe614b4b8d47962fb77c3a4",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +396,400 @@}\n\nfunc (adc *attachDetachController) podUpdate(oldObj, newObj interface{}) {\n\tpod, ok := newObj.(*v1.Pod)\n\tif pod == nil || !ok {"
  },
  {
    "id" : "c01d7753-50b0-4e2c-b373-f6a077e2170b",
    "prId" : 39732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39732#pullrequestreview-33676059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8545a53c-0faf-4aa1-ae98-c702d4a8ca9f",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Update comment to describe new boolean.",
        "createdAt" : "2017-04-20T05:57:45Z",
        "updatedAt" : "2017-04-20T11:05:10Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "852c44ae598e5d9f0dd936d8f8b3c7a2d41827d5",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +461,465 @@// mounted.\nfunc (adc *attachDetachController) processVolumesInUse(\n\tnodeName types.NodeName, volumesInUse []v1.UniqueVolumeName, forceUnmount bool) {\n\tglog.V(4).Infof(\"processVolumesInUse for node %q\", nodeName)\n\tfor _, attachedVolume := range adc.actualStateOfWorld.GetAttachedVolumesForNode(nodeName) {"
  },
  {
    "id" : "5e77e30d-e993-4b69-a8b7-ca949c334000",
    "prId" : 39732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39732#pullrequestreview-33757194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aee54753-e914-4209-a467-f10115dd708a",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "There is `controller.WaitForCacheSync()` just few lines above. Does it mean that all the existing objects were already synced through podAdd() and nodeAdd() callbacks from the shared informers? They may be synced in a wrong order (podAdd before nodeAdd) and these `populateActualStateOfWorld()` and `populateDesiredStateOfWorld()` will just fix it, right?\r\n",
        "createdAt" : "2017-04-20T11:56:12Z",
        "updatedAt" : "2017-04-20T11:56:12Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "62be6e1f-f9ff-486a-a6be-b0d0103db9b7",
        "parentId" : "aee54753-e914-4209-a467-f10115dd708a",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I talked to @tsmetana and yes, these new world populators will fix states of worlds that could be inconsistent due to bad event ordering.",
        "createdAt" : "2017-04-20T12:15:07Z",
        "updatedAt" : "2017-04-20T12:15:07Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "2e94d5d1-701e-4ba2-8204-fd9fcebaa915",
        "parentId" : "aee54753-e914-4209-a467-f10115dd708a",
        "authorId" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "body" : "The main issue is that we need to find volumes attached for the pods that were deleted during the controller downtime: this would not be solved by the WaitForCacheSync() -- we still would be missing the pod deletion event. And yes, in the case the events come in wrong order the ASW/DSW populators should help too.",
        "createdAt" : "2017-04-20T12:44:45Z",
        "updatedAt" : "2017-04-20T12:44:45Z",
        "lastEditedBy" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "tags" : [
        ]
      }
    ],
    "commit" : "852c44ae598e5d9f0dd936d8f8b3c7a2d41827d5",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +246,250 @@\t}\n\n\terr := adc.populateActualStateOfWorld()\n\tif err != nil {\n\t\tglog.Errorf(\"Error populating the actual state of world: %v\", err)"
  },
  {
    "id" : "c8779bbd-d872-4c7a-813c-37a236f7f18d",
    "prId" : 37727,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37727#pullrequestreview-10902876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6daa1dee-4a03-40c9-9d0e-cd00d9912bd0",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: add a comment why we are doing this since it is not obvious",
        "createdAt" : "2016-12-01T04:44:51Z",
        "updatedAt" : "2016-12-01T05:12:42Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "5eec4027-a560-4092-82b3-2b1cb5cd0496",
        "parentId" : "6daa1dee-4a03-40c9-9d0e-cd00d9912bd0",
        "authorId" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "body" : "Ack",
        "createdAt" : "2016-12-01T05:13:36Z",
        "updatedAt" : "2016-12-01T05:13:36Z",
        "lastEditedBy" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "tags" : [
        ]
      }
    ],
    "commit" : "638ef1b97703407505d22ef510118faad67260fd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +252,256 @@\t// the attached volumes field. This function ensures that we sync with\n\t// the actual status.\n\tadc.actualStateOfWorld.SetNodeStatusUpdateNeeded(nodeName)\n}\n"
  },
  {
    "id" : "d051481f-2f32-47b2-8dec-778698aa369b",
    "prId" : 37032,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37032#pullrequestreview-9316897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e861fd9-6ffd-4cf0-a7a9-467a635b426f",
        "parentId" : null,
        "authorId" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "body" : "A comment describing the function here (in the interface) would be nice.\n",
        "createdAt" : "2016-11-18T19:18:07Z",
        "updatedAt" : "2016-12-06T11:53:15Z",
        "lastEditedBy" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "tags" : [
        ]
      },
      {
        "id" : "226d1dbf-25c5-4a79-a70c-4da7906ed1d4",
        "parentId" : "7e861fd9-6ffd-4cf0-a7a9-467a635b426f",
        "authorId" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "body" : "nit: I'm not fully convinced that you need to add the function `GetDesiredStateOfWorld()` to the interface if all it does is return the desiredStateOfTheWorld held by the struct. It definitely has to be a function of `adc` but does it really have to be in the interface ?\nI may be wrong and I'm not aware of what the best practice here is, but I feel there might be a better way of doing this.\n",
        "createdAt" : "2016-11-18T20:51:59Z",
        "updatedAt" : "2016-12-06T11:53:15Z",
        "lastEditedBy" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "tags" : [
        ]
      },
      {
        "id" : "8d8b73bd-e9be-447b-9968-8d5a3aa3541b",
        "parentId" : "7e861fd9-6ffd-4cf0-a7a9-467a635b426f",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "`adc` is not exposed from the package and hence can't be read from the test directly. :( \nThat is why we are left with only option of having this function in the interface.  Overall, though I think it should be okay. \n",
        "createdAt" : "2016-11-18T22:10:10Z",
        "updatedAt" : "2016-12-06T11:53:15Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcf5d79be7ae40eb178e5d865ff16ff7f0b42c3d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +68,72 @@type AttachDetachController interface {\n\tRun(stopCh <-chan struct{})\n\tGetDesiredStateOfWorld() cache.DesiredStateOfWorld\n}\n"
  }
]