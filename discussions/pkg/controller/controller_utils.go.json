[
  {
    "id" : "30a1c4a8-1442-4a01-8357-19da7e9b1fcf",
    "prId" : 102189,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102189#pullrequestreview-666702137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "434214ea-62db-4958-ab39-49d3cbedb0c6",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "nit: I'd have split this change into another commit for the sake of readability.",
        "createdAt" : "2021-05-24T12:47:48Z",
        "updatedAt" : "2021-05-24T12:49:44Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8aad7944cc71314913fc0b43d6731e2c36f4928",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +449,453 @@\tCreatePods(namespace string, template *v1.PodTemplateSpec, object runtime.Object, controllerRef *metav1.OwnerReference) error\n\t// CreatePodsWithGenerateName creates new pods according to the spec, sets object as the pod's controller and sets pod's generateName.\n\tCreatePodsWithGenerateName(namespace string, template *v1.PodTemplateSpec, object runtime.Object, controllerRef *metav1.OwnerReference, generateName string) error\n\t// DeletePod deletes the pod identified by podID.\n\tDeletePod(namespace string, podID string, object runtime.Object) error"
  },
  {
    "id" : "1772930f-0bde-4888-a5f4-b52591368436",
    "prId" : 101601,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101601#pullrequestreview-659195422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7c290e7-3d0d-415d-b3c8-3f21de3cc5b3",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "wait a second.... nothing is using this function. I'll get rid of it in a follow up.\r\n\r\nBut since `CreatePods` is going away, it makes sense to rename `CreatePodsWithControllerRef` to simply `CreatePods`. Then, `CreatePodsWithControllerRefAndPrefix` can simply be `CreatePodsWithPrefix`. But I can do that in the follow up too.",
        "createdAt" : "2021-05-13T18:44:47Z",
        "updatedAt" : "2021-05-13T18:49:50Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "e64e34e0298d27d4099b632f5b7c1ba38fc66561",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +516,520 @@}\n\nfunc (r RealPodControl) CreatePods(namespace string, template *v1.PodTemplateSpec, object runtime.Object) error {\n\tpod, err := GetPodFromTemplate(template, object, nil)\n\tif err != nil {"
  },
  {
    "id" : "1d00a053-5bf2-4847-9ae2-1055ad97b06e",
    "prId" : 99212,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99212#pullrequestreview-593731060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d90c63b-67b2-4f20-84db-0d721fe2e58d",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "What about the UUID comparison that was suggested in the KEP?",
        "createdAt" : "2021-02-18T23:13:59Z",
        "updatedAt" : "2021-03-05T20:58:35Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d105ab724ccdb45b4ff380d84fd356e833991e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +813,817 @@// logarithmic rank, they are sorted by UUID to provide a pseudorandom order.\n//\n// If none of these rules matches, the second pod comes before the first pod.\n//\n// The intention of this ordering is to put pods that should be preferred for"
  },
  {
    "id" : "69aa784c-9c98-471e-978e-a053d78ed8f9",
    "prId" : 99212,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99212#pullrequestreview-605530329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab771c67-50a6-4f3c-b7d4-a16099171542",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "```golang\r\nr1 := int64(-1)\r\nr2 := int64(-1)\r\nif d1 > 0 {\r\n\tr1 = int64(math.Log2(float64(d1)))\r\n}\r\nif d2 > 0 {\r\n\tr2 = int64(math.Log2(float64(d2)))\r\n}\r\n```\r\nSeems simpler, no?",
        "createdAt" : "2021-03-05T18:36:52Z",
        "updatedAt" : "2021-03-05T20:58:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "ec579c30-726a-46d9-906c-1c2487c078cf",
        "parentId" : "ab771c67-50a6-4f3c-b7d4-a16099171542",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "+1",
        "createdAt" : "2021-03-05T19:21:39Z",
        "updatedAt" : "2021-03-05T20:58:35Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d105ab724ccdb45b4ff380d84fd356e833991e",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +939,943 @@\tif d2 > 0 {\n\t\tr2 = int64(math.Log2(float64(d2)))\n\t}\n\treturn r1 - r2\n}"
  },
  {
    "id" : "0bf2a8a1-997f-4b6f-a541-5a722f33bef2",
    "prId" : 91576,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91576#pullrequestreview-422144776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2054a69a-7e99-4bd3-8bb8-2bbddbeeae62",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This re-factoring, although seems to make the code more readable actually is not. Since it requires the arguments to always be even, to properly create kev - value pairs. The change to `klog.KRef` is fine, but I'd prefer to stay away from using `InfoS`. ",
        "createdAt" : "2020-06-01T19:55:20Z",
        "updatedAt" : "2020-06-05T05:23:48Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "f9ceed00-cc66-45c7-b7d5-153ecfb88b0a",
        "parentId" : "2054a69a-7e99-4bd3-8bb8-2bbddbeeae62",
        "authorId" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "body" : "Hey Maciek,\r\nThis interface was selected and approved by SIG instrumentation and SIG architecture in this KEP https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/1602-structured-logging\r\n`InfoS` is meant to replace `Infof` within k8s codebase. If you don't agree that we should use this keyValue interface then let's discuss it in dedicated issue. \r\n\r\nWe should not block structured logging migration to discuss interface that was already approved.",
        "createdAt" : "2020-06-01T20:08:01Z",
        "updatedAt" : "2020-06-05T05:23:48Z",
        "lastEditedBy" : "6ea93d56-a0ec-4969-ac42-11a78c2085e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "78318c7a26928bdabe2491cf022cf9e61be32188",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +602,606 @@\t\treturn fmt.Errorf(\"object does not have ObjectMeta, %v\", err)\n\t}\n\tklog.V(2).InfoS(\"Deleting pod\", \"controller\", accessor.GetName(), \"pod\", klog.KRef(namespace, podID))\n\tif err := r.KubeClient.CoreV1().Pods(namespace).Delete(context.TODO(), podID, metav1.DeleteOptions{}); err != nil {\n\t\tif apierrors.IsNotFound(err) {"
  },
  {
    "id" : "5ea0f4c4-6167-43e2-8663-9d680cfb849d",
    "prId" : 91008,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91008#pullrequestreview-409785718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53558074-69c1-4f44-b7bb-b5642f7301d6",
        "parentId" : null,
        "authorId" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "body" : "it will lost the event of \"Deleted pod: \". Suggest to add it.",
        "createdAt" : "2020-05-12T07:52:24Z",
        "updatedAt" : "2020-06-04T08:45:34Z",
        "lastEditedBy" : "61a9a744-a5c3-4fab-b291-e721679fb5fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "884f94ad92e5710c1f2384c3e1fd7d431e24175f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +606,610 @@\t\tif apierrors.IsNotFound(err) {\n\t\t\tklog.V(4).Infof(\"pod %v/%v has already been deleted.\", namespace, podID)\n\t\t\treturn err\n\t\t}\n\t\tr.Recorder.Eventf(object, v1.EventTypeWarning, FailedDeletePodReason, \"Error deleting: %v\", err)"
  },
  {
    "id" : "91bd7aab-adb0-4185-8aed-48bac35e3d0b",
    "prId" : 91008,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91008#pullrequestreview-421745578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d8602d8-767a-477d-a27f-17505e999adf",
        "parentId" : null,
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "The not found initially comes from https://github.com/kubernetes/kubernetes/pull/67826 to prevent repeating failure events based on stale caches. We shouldn't swallow the error, but we should avoid the event I think.",
        "createdAt" : "2020-06-01T11:22:35Z",
        "updatedAt" : "2020-06-04T08:45:34Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "884f94ad92e5710c1f2384c3e1fd7d431e24175f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +603,607 @@\t}\n\tklog.V(2).Infof(\"Controller %v deleting pod %v/%v\", accessor.GetName(), namespace, podID)\n\tif err := r.KubeClient.CoreV1().Pods(namespace).Delete(context.TODO(), podID, metav1.DeleteOptions{}); err != nil {\n\t\tif apierrors.IsNotFound(err) {\n\t\t\tklog.V(4).Infof(\"pod %v/%v has already been deleted.\", namespace, podID)"
  },
  {
    "id" : "ad6a06cc-cf1b-4750-bd80-c744e235f460",
    "prId" : 84075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84075#pullrequestreview-305376404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "725fe0de-4169-45c6-b891-d7ef7b69fca9",
        "parentId" : null,
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "If using `s[i].Status.Phase != s[j].Status.Phase` is valid in `(s ByLogging) Less`, it should be valid here as well.",
        "createdAt" : "2019-10-22T17:22:11Z",
        "updatedAt" : "2019-10-22T17:22:56Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a4b98b8967150e4754904a687a8d70415e45bfa",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +749,753 @@\t}\n\t// 2. PodPending < PodUnknown < PodRunning\n\tif podPhaseToOrdinal[s[i].Status.Phase] != podPhaseToOrdinal[s[j].Status.Phase] {\n\t\treturn podPhaseToOrdinal[s[i].Status.Phase] < podPhaseToOrdinal[s[j].Status.Phase]\n\t}"
  },
  {
    "id" : "17f28f24-c0a1-4d3a-b43b-010cb2cd9ece",
    "prId" : 84075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84075#pullrequestreview-305376404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "349789a6-7fab-419f-938e-b4016ff82fa6",
        "parentId" : null,
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "Again, if `s[i].Status.Phase != s[j].Status.Phase` is valid above, it should be fine here too.",
        "createdAt" : "2019-10-22T17:22:52Z",
        "updatedAt" : "2019-10-22T17:22:56Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a4b98b8967150e4754904a687a8d70415e45bfa",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +833,837 @@\t}\n\t// 2. PodPending < PodUnknown < PodRunning\n\tif podPhaseToOrdinal[s.Pods[i].Status.Phase] != podPhaseToOrdinal[s.Pods[j].Status.Phase] {\n\t\treturn podPhaseToOrdinal[s.Pods[i].Status.Phase] < podPhaseToOrdinal[s.Pods[j].Status.Phase]\n\t}"
  },
  {
    "id" : "0d2f8a3f-f9f9-4fe8-ae4f-5fd4f4701903",
    "prId" : 80004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80004#pullrequestreview-288986221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c02236a3-4a7c-48a1-b088-ef8c3e1c7257",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you do a unit test for this with a few of the edge cases covered",
        "createdAt" : "2019-09-16T21:24:56Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4d574bb2-ca29-4785-85aa-a0548f3b5833",
        "parentId" : "c02236a3-4a7c-48a1-b088-ef8c3e1c7257",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "Added `TestSortingActivePodsWithRanks`.",
        "createdAt" : "2019-09-17T02:08:30Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "980b6406b24b41bc0ef061624385f1f420708819",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +819,823 @@// Less compares two pods with corresponding ranks and returns true if the first\n// one should be preferred for deletion.\nfunc (s ActivePodsWithRanks) Less(i, j int) bool {\n\t// 1. Unassigned < assigned\n\t// If only one of the pods is unassigned, the unassigned one is smaller"
  },
  {
    "id" : "12c30809-2af2-4a0f-9490-e09280267ff8",
    "prId" : 80004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80004#pullrequestreview-288986913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcc4e6b0-394f-4aff-8346-72c89eadaa52",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You need to describe the basic ordering in Godoc here for Less, and also add a godoc comment on Less",
        "createdAt" : "2019-09-16T21:29:20Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d537bfa0-7aa8-49bd-8fbf-00e9a1d7e56e",
        "parentId" : "bcc4e6b0-394f-4aff-8346-72c89eadaa52",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "Done.",
        "createdAt" : "2019-09-17T02:11:55Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "980b6406b24b41bc0ef061624385f1f420708819",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +772,776 @@}\n\n// ActivePodsWithRanks is a sortable list of pods and a list of corresponding\n// ranks which will be considered during sorting.  The two lists must have equal\n// length.  After sorting, the pods will be ordered as follows, applying each"
  },
  {
    "id" : "5b9383d6-27e1-4985-9a84-d82211bbd925",
    "prId" : 80004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80004#pullrequestreview-297745082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9f9f26c-35d2-4113-a1de-117003f23e1b",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "nit: Say \"less\" rather than \"smaller\"",
        "createdAt" : "2019-09-25T18:48:27Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "ef5f02e5-96af-4957-b3c7-2870b227127e",
        "parentId" : "d9f9f26c-35d2-4113-a1de-117003f23e1b",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "Fixed.",
        "createdAt" : "2019-10-04T22:32:07Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "980b6406b24b41bc0ef061624385f1f420708819",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +840,844 @@\t// colocated ready pods is less\n\tif s.Rank[i] != s.Rank[j] {\n\t\treturn s.Rank[i] > s.Rank[j]\n\t}\n\t// TODO: take availability into account when we push minReadySeconds information from deployment into pods,"
  },
  {
    "id" : "915ff246-bfb6-4bb3-82f1-b6d9ed2829bc",
    "prId" : 80004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80004#pullrequestreview-303581133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e3bd7bd-c76f-4c6c-b006-09def92358c6",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "you can store podReadyTime() for s.Pods[i] and s.Pods[j] in two variables so that we don't calculate ready time more than once.",
        "createdAt" : "2019-10-13T02:50:10Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "0c729f5c-72c5-45c1-a708-071221ea2f81",
        "parentId" : "2e3bd7bd-c76f-4c6c-b006-09def92358c6",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "This code is copied from `(s ActivePods) Less`; should I make the same change there?",
        "createdAt" : "2019-10-13T04:06:43Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      },
      {
        "id" : "36bf7e9f-9b41-40f7-b26b-146c07807b3f",
        "parentId" : "2e3bd7bd-c76f-4c6c-b006-09def92358c6",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "You can keep it for now.",
        "createdAt" : "2019-10-13T04:41:07Z",
        "updatedAt" : "2019-10-17T15:53:09Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "9ec508d4-2bf5-4b3e-bdec-f729e909a27c",
        "parentId" : "2e3bd7bd-c76f-4c6c-b006-09def92358c6",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "@smarterclayton \r\nShould I send a PR by storing podReadyTime() for ActivePodsWithRanks#Less and ActivePods#Less (to reduce the number of calls) ?\r\n\r\nthansk",
        "createdAt" : "2019-10-17T22:26:05Z",
        "updatedAt" : "2019-10-17T22:28:18Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "980b6406b24b41bc0ef061624385f1f420708819",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +846,850 @@\t// 5. Been ready for empty time < less time < more time\n\t// If both pods are ready, the latest ready one is smaller\n\tif podutil.IsPodReady(s.Pods[i]) && podutil.IsPodReady(s.Pods[j]) && !podReadyTime(s.Pods[i]).Equal(podReadyTime(s.Pods[j])) {\n\t\treturn afterOrZero(podReadyTime(s.Pods[i]), podReadyTime(s.Pods[j]))\n\t}"
  },
  {
    "id" : "5c2dee6a-09f0-4279-86ce-209b29ccb5e5",
    "prId" : 80004,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80004#pullrequestreview-303652732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d1e58c5-ea17-4a64-8e26-44016376ba05",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "It seems this map can be defined outside the func.",
        "createdAt" : "2019-10-17T22:48:24Z",
        "updatedAt" : "2019-10-17T22:48:24Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "c8fd337c-f9fb-4312-8d55-68a7c3490dcc",
        "parentId" : "7d1e58c5-ea17-4a64-8e26-44016376ba05",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "I believe you are correct, and moreover, `(s ByLogging) Less` has the same code, so it would be a nice refactoring to use the same map for both functions.  That would be good for a follow-up, along with the change described in https://github.com/kubernetes/kubernetes/pull/80004#discussion_r336253553.",
        "createdAt" : "2019-10-18T00:40:27Z",
        "updatedAt" : "2019-10-18T00:40:28Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      },
      {
        "id" : "e6f093b7-6d9a-4b7e-9044-ef1a89ad964f",
        "parentId" : "7d1e58c5-ea17-4a64-8e26-44016376ba05",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The map in ByLogging actually has reverse ordering (in terms of PodPhase) of the map above.\r\nIs that intentional ?\r\nIf not, I will use the ordering defined in the above map.",
        "createdAt" : "2019-10-18T01:24:25Z",
        "updatedAt" : "2019-10-18T01:24:25Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "7b5d0073-487b-433e-a485-8063d0eecee4",
        "parentId" : "7d1e58c5-ea17-4a64-8e26-44016376ba05",
        "authorId" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "body" : "Sorry, I got confused by the copypasta.  `(s ByLogging) Less` is unrelated.  `(s ActivePodsWithRanks) Less` is based on `(s ActivePods) Less`, so these latter two functions could share a map.",
        "createdAt" : "2019-10-18T03:48:57Z",
        "updatedAt" : "2019-10-18T03:48:57Z",
        "lastEditedBy" : "b3da6e51-33c0-47c8-b02f-5822b5139f82",
        "tags" : [
        ]
      }
    ],
    "commit" : "980b6406b24b41bc0ef061624385f1f420708819",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +826,830 @@\t}\n\t// 2. PodPending < PodUnknown < PodRunning\n\tm := map[v1.PodPhase]int{v1.PodPending: 0, v1.PodUnknown: 1, v1.PodRunning: 2}\n\tif m[s.Pods[i].Status.Phase] != m[s.Pods[j].Status.Phase] {\n\t\treturn m[s.Pods[i].Status.Phase] < m[s.Pods[j].Status.Phase]"
  },
  {
    "id" : "e0d30616-e59c-41e7-a3ff-287d00c9a2a0",
    "prId" : 74442,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74442#pullrequestreview-210852277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e5e188-a310-40a6-959a-ed14d5f75dbf",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Is it possible to combine \"the update call to API server\" with `TaintByCondition` ? If we want to it later because of 1.14 schedule, please help to add a TODO or open an issue for that :)",
        "createdAt" : "2019-03-03T04:16:41Z",
        "updatedAt" : "2019-03-07T01:27:28Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "2f6dbaef-7f1b-45fb-9a76-383c12556767",
        "parentId" : "34e5e188-a310-40a6-959a-ed14d5f75dbf",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "The `TaintByCondition` mechanism is more complex (i.e., swapping taints) and is still gated. I think merging them may simply cause unnecessary bugs. Label reconciling happens rarely (e.g., node upgrade/downgrade with mismatching OS/arch) , and having a separate apiserver update seems okay to me.",
        "createdAt" : "2019-03-05T02:43:11Z",
        "updatedAt" : "2019-03-07T01:27:28Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "4626866c-5fb9-4061-9d8f-a9dc97264e3d",
        "parentId" : "34e5e188-a310-40a6-959a-ed14d5f75dbf",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "I'm ok to keep it as is.\r\n\r\nwe can have seperate PR for that; as prefer to have such logic : get node info, reconcile it (e,g. labels, conditions), update it back to api server. If we want to add other reconcile logic, we only need to enhance the seconds phase.",
        "createdAt" : "2019-03-05T09:58:22Z",
        "updatedAt" : "2019-03-07T01:27:28Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "a719f01f-c213-496b-9a8b-e4f2e1082077",
        "parentId" : "34e5e188-a310-40a6-959a-ed14d5f75dbf",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Sounds good. ",
        "createdAt" : "2019-03-05T18:39:14Z",
        "updatedAt" : "2019-03-07T01:27:28Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd2301a62890cbf894f4231e616af3858d205ed3",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1053,1057 @@}\n\nfunc AddOrUpdateLabelsOnNode(kubeClient clientset.Interface, nodeName string, labelsToUpdate map[string]string) error {\n\tfirstTry := true\n\treturn clientretry.RetryOnConflict(UpdateLabelBackoff, func() error {"
  },
  {
    "id" : "37382349-570d-4f63-908f-cccd968c54b7",
    "prId" : 61419,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61419#pullrequestreview-122334946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78070eb3-effc-4a3f-87aa-c2e5eb125b7c",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Use `appsv1` to clearly show we're working with v1 version. It's a pattern used through the entire code base. ",
        "createdAt" : "2018-05-22T11:33:35Z",
        "updatedAt" : "2018-05-22T20:43:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "8ac4d6c7-41c4-4141-86c2-215acbef0573",
        "parentId" : "78070eb3-effc-4a3f-87aa-c2e5eb125b7c",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "In this PR, I only wanted to do mechanical translations from `extensions` to `apps`. That makes it easy to see that the transform is the one we intended. If we want to fix the style, I think it should be a separate PR.",
        "createdAt" : "2018-05-22T20:16:15Z",
        "updatedAt" : "2018-05-22T20:43:25Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "046ae81e35cce52860d66d2cf9720fe1a2aaaef4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +26,30 @@\t\"time\"\n\n\tapps \"k8s.io/api/apps/v1\"\n\t\"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/meta\""
  },
  {
    "id" : "8c012299-67ef-4d8d-a747-681be1d8de52",
    "prId" : 60009,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60009#pullrequestreview-114186083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53a9545f-b4f1-473f-8286-2519e66e227c",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "should be in `pkg/controller/nodelifecycle/node_lifecycle_controller.go`",
        "createdAt" : "2018-04-21T10:13:59Z",
        "updatedAt" : "2018-04-22T17:33:40Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "8170698f-70c6-479f-8e6b-22f10e9fc5ca",
        "parentId" : "53a9545f-b4f1-473f-8286-2519e66e227c",
        "authorId" : "0cf405a8-951c-46f8-bbaf-cf214ebb52dd",
        "body" : "I do not fully agree with this, because then we need import nodelifecycle package to https://github.com/zetaab/kubernetes/blob/b900bf3ed391efd774237d491bdf50780057941e/pkg/controller/cloud/node_controller.go or then make same variable there? Which one is better 1) import nodelifecycle package to cloudcontroller (the worst option imo) 2) make twice same variable 3) keep it as is (in controller_utils)",
        "createdAt" : "2018-04-21T14:13:36Z",
        "updatedAt" : "2018-04-22T17:33:40Z",
        "lastEditedBy" : "0cf405a8-951c-46f8-bbaf-cf214ebb52dd",
        "tags" : [
        ]
      },
      {
        "id" : "3a5a5dec-6ac3-4ee9-a32b-a30339d42ff6",
        "parentId" : "53a9545f-b4f1-473f-8286-2519e66e227c",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "@k82cn - I’d prefer keeping this here for now, I’ll open a dedicated PR to move all the taints to the same place.",
        "createdAt" : "2018-04-21T16:12:06Z",
        "updatedAt" : "2018-04-22T17:33:40Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "c60b59e3-6143-4f6c-8272-00b63b46cd2a",
        "parentId" : "53a9545f-b4f1-473f-8286-2519e66e227c",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "that's ok to me :)",
        "createdAt" : "2018-04-21T23:54:03Z",
        "updatedAt" : "2018-04-22T17:33:40Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "de967b717d0a31353c2e1e64960773cfdd7a9001",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +88,92 @@}\n\nvar ShutdownTaint = &v1.Taint{\n\tKey:    algorithm.TaintNodeShutdown,\n\tEffect: v1.TaintEffectNoSchedule,"
  },
  {
    "id" : "34549dde-ce68-4606-beda-163b765b3423",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41522564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "663922c0-fe18-4798-9387-5dc1b7183161",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "The 64bit collision count gets hashed down to 32 bits. 🤷‍♂️ ",
        "createdAt" : "2017-06-01T14:26:56Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +995,999 @@\t}\n\n\treturn podTemplateSpecHasher.Sum32()\n}"
  },
  {
    "id" : "0ef39488-dd2b-427a-afb9-d4cc8fad1da6",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-24817739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "645888bc-bf50-4ac6-84e6-e84986eb89e1",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Could you also verify that controllerRef.BlockOwnerDeletion is true, and set it to true in all controllee's creation/adoption? See the [comments](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/apis/meta/v1/types.go#L259-L266) here.",
        "createdAt" : "2017-03-02T00:38:15Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "514191b1-b444-494a-ba7a-4c3a2028a6fe",
        "parentId" : "645888bc-bf50-4ac6-84e6-e84986eb89e1",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "I will do this in a separate PR since the change will apply to all controllers.",
        "createdAt" : "2017-03-02T19:06:40Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "5ccc4be0-8b80-40de-94bf-3b5391131101",
        "parentId" : "645888bc-bf50-4ac6-84e6-e84986eb89e1",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "After looking more closely, it makes more sense to fix it here. I just needed to move the BlockOwnerDeletion check up into validateControllerRef().",
        "createdAt" : "2017-03-02T19:17:11Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +478,482 @@\t\treturn fmt.Errorf(\"controllerRef has empty Kind\")\n\t}\n\tif controllerRef.Controller == nil || *controllerRef.Controller != true {\n\t\treturn fmt.Errorf(\"controllerRef.Controller is not set to true\")\n\t}"
  },
  {
    "id" : "55bd8a58-69f2-4690-b2bc-4bfcdeb0e336",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25039985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aac12a23-d03e-45ce-968e-79ef708f09d7",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Is this validation running in the api server or only in controllers? ",
        "createdAt" : "2017-03-03T09:16:11Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "80a65a7f-4272-4a8a-8ff3-563b165030be",
        "parentId" : "aac12a23-d03e-45ce-968e-79ef708f09d7",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Only in controllers.",
        "createdAt" : "2017-03-03T18:26:02Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f1f65082-a91b-46c7-87a0-59d08fdfe42b",
        "parentId" : "aac12a23-d03e-45ce-968e-79ef708f09d7",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This validation is only required for controllers. API server doesn't know if a request is sent by a controller thus cannot do the validation.\r\n\r\nIf a TPR creates dependents, then its custom controller could do a similar check. ",
        "createdAt" : "2017-03-03T18:34:53Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +468,472 @@}\n\nfunc validateControllerRef(controllerRef *metav1.OwnerReference) error {\n\tif controllerRef == nil {\n\t\treturn fmt.Errorf(\"controllerRef is nil\")"
  },
  {
    "id" : "5e629423-6709-4b67-afdb-db5113c7f325",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25638311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a3c168b-8484-4781-8c25-6791a7969875",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should we also validate that controllerRef's Name and UID isn't empty (i.e. `len` > 0)?",
        "createdAt" : "2017-03-07T00:44:00Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "ddd9b139-f328-49e4-b1e7-58e1cc5e4cc6",
        "parentId" : "8a3c168b-8484-4781-8c25-6791a7969875",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "I'll make a note to address that in a future PR. It will affect multiple controllers and may require updates to their unit tests, since not all tests bother to fill those in. In this PR, I am just moving this validation code to a common function so I can use it in two places without duplicating.",
        "createdAt" : "2017-03-07T19:13:39Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "d2613378-901b-45ef-b079-deb7316320e8",
        "parentId" : "8a3c168b-8484-4781-8c25-6791a7969875",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "sounds good ",
        "createdAt" : "2017-03-07T21:39:54Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +478,482 @@\t\treturn fmt.Errorf(\"controllerRef has empty Kind\")\n\t}\n\tif controllerRef.Controller == nil || *controllerRef.Controller != true {\n\t\treturn fmt.Errorf(\"controllerRef.Controller is not set to true\")\n\t}"
  },
  {
    "id" : "4313ff02-812c-401a-9503-e3718e7b519b",
    "prId" : 41014,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41014#pullrequestreview-20981620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7adfc994-bbc5-4b39-8587-c85a3b9ab2ee",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Should we centralize consts around taints?  Right now it's sprinkled",
        "createdAt" : "2017-02-08T23:24:12Z",
        "updatedAt" : "2017-02-16T08:25:33Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "5c4359b2-78f9-424c-a903-86abd6524d6c",
        "parentId" : "7adfc994-bbc5-4b39-8587-c85a3b9ab2ee",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yes we should (as it's really, really bad right now), but it's better to wait until move to field is done, so we won't need to duplicate the work.\r\n\r\n@aveshagarwal ",
        "createdAt" : "2017-02-09T11:00:14Z",
        "updatedAt" : "2017-02-16T08:25:33Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b20bb790f05ef5a53ae1de8f711fe0b31d50078",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +63,67 @@)\n\nvar UpdateTaintBackoff = wait.Backoff{\n\tSteps:    5,\n\tDuration: 100 * time.Millisecond,"
  },
  {
    "id" : "83b93eb6-bb96-4c0f-bdc2-08442b638754",
    "prId" : 41014,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41014#pullrequestreview-21509470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01fba82d-43fc-41a2-b9e9-14eb93f8ae3b",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Why do you patch here vs. direct update?  b/c isn't that way more expensive?",
        "createdAt" : "2017-02-09T16:47:14Z",
        "updatedAt" : "2017-02-16T08:25:33Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "f7a13817-4379-4c9d-b492-59bc06fa7b75",
        "parentId" : "01fba82d-43fc-41a2-b9e9-14eb93f8ae3b",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It's more expensive on client side, but lighter on server side. Originally I did simple updates, but @deads2k wanted a patch:)",
        "createdAt" : "2017-02-13T09:05:09Z",
        "updatedAt" : "2017-02-16T08:25:33Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "8d68eed9-a39c-44cd-9945-7ef1948f00c6",
        "parentId" : "01fba82d-43fc-41a2-b9e9-14eb93f8ae3b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It's more expensive on client side, but lighter on server side. Originally I did simple updates, but @deads2k wanted a patch:)\r\n\r\nPatches only cause retry conflict loops if the patch itself conflicts with fields updated concurrently as opposed to an update which will conflict on any change.",
        "createdAt" : "2017-02-13T13:43:28Z",
        "updatedAt" : "2017-02-16T08:25:33Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b20bb790f05ef5a53ae1de8f711fe0b31d50078",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +889,893 @@\t\t\treturn nil\n\t\t}\n\t\treturn PatchNodeTaints(c, nodeName, oldNode, newNode)\n\t})\n}"
  },
  {
    "id" : "63f60345-9962-440c-adc2-e9f09c347eab",
    "prId" : 38676,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38676#pullrequestreview-23626614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c737e3b-c6dd-4a7a-b364-c13c67fa96a0",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I am confused about why we have this function, it looks like stuff that ought to be handled by unit tests...\r\n\r\nI am also confused about why it's so important that controllers set the block owner deletion field.",
        "createdAt" : "2017-02-23T22:40:33Z",
        "updatedAt" : "2017-03-01T07:05:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "350fb1a3-46eb-4952-949a-2f09db3e9400",
        "parentId" : "3c737e3b-c6dd-4a7a-b364-c13c67fa96a0",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> I am confused about why we have this function\r\n\r\nIt's a util function shared by multiple controllers. We can't guarantee every author of controllers will test the controllerRef, so we make a check here.\r\n\r\n> I am also confused about why it's so important that controllers set the block owner deletion field.\r\n\r\nUser will expect controllees to block controller's deletion during foreground deletion, so a controller should set the blockOwnerDeletion field.\r\n\r\n\r\n\r\n",
        "createdAt" : "2017-02-24T00:44:57Z",
        "updatedAt" : "2017-03-01T07:05:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "31cb266340ac5d702a650ea30c730bb909cd99b5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +484,488 @@\t\treturn fmt.Errorf(\"controllerRef.Controller is not set\")\n\t}\n\tif controllerRef.BlockOwnerDeletion == nil || *controllerRef.BlockOwnerDeletion != true {\n\t\treturn fmt.Errorf(\"controllerRef.BlockOwnerDeletion is not set\")\n\t}"
  },
  {
    "id" : "aa08ff0b-c9f2-477e-88e9-06ac4ce8db93",
    "prId" : 27600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2517392b-70cf-417a-8715-6494412f57bb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "do we need this change both here and in CreatePodsWithControllerRef?\n",
        "createdAt" : "2016-07-13T21:45:41Z",
        "updatedAt" : "2016-07-15T02:59:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8dfed4d5-d2c9-414e-89b2-9f41e045ba46",
        "parentId" : "2517392b-70cf-417a-8715-6494412f57bb",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I'm not sure I follow you. CreatePodsWithControllerRef doesn't create the pod, it passes the controllerRef to here to create a pod with controllerRef.\n",
        "createdAt" : "2016-07-14T21:21:55Z",
        "updatedAt" : "2016-07-15T02:59:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a341de67012fb2ac544e0dca59a5c3e08e0029",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +457,461 @@\t}\n\tif controllerRef != nil {\n\t\tpod.OwnerReferences = append(pod.OwnerReferences, *controllerRef)\n\t}\n\tif err := api.Scheme.Convert(&template.Spec, &pod.Spec); err != nil {"
  },
  {
    "id" : "567d5445-8ebb-4b8b-92dc-87e2cc1f7e39",
    "prId" : 27600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf1d2c8f-2dee-4f74-9d13-b37c356c9a69",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "seems like this isn't a very good fake if it doesn't actually add the controller ref to the pod...\n",
        "createdAt" : "2016-07-13T21:46:37Z",
        "updatedAt" : "2016-07-15T02:59:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7b9e70f7-fae0-44e2-a3c1-e6792ac4a651",
        "parentId" : "cf1d2c8f-2dee-4f74-9d13-b37c356c9a69",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I made the FakePodControl to record the controller ref now.\n",
        "createdAt" : "2016-07-14T21:22:31Z",
        "updatedAt" : "2016-07-15T02:59:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a341de67012fb2ac544e0dca59a5c3e08e0029",
    "line" : null,
    "diffHunk" : "@@ -1,1 +540,544 @@\tf.Lock()\n\tdefer f.Unlock()\n\tf.Templates = append(f.Templates, *spec)\n\tf.ControllerRefs = append(f.ControllerRefs, *controllerRef)\n\tif f.Err != nil {"
  },
  {
    "id" : "909d4835-ce46-4621-a3c9-837515b1b511",
    "prId" : 26771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dcf3452-f3fa-4b67-8c1c-c7fc865a195a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I want this one to vary.  If I specified `-p` for \"previous container\", then I probably want to prioritize a failed or not-ready pod.\n",
        "createdAt" : "2016-06-03T15:00:39Z",
        "updatedAt" : "2016-06-07T08:52:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ca50ad51-2d1c-40ad-94d2-0dd38b1236f0",
        "parentId" : "5dcf3452-f3fa-4b67-8c1c-c7fc865a195a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "In the pod level this is \"previous container\"\nIn the deployment level, this is \"previous deployment\" (or at least that's what we have now in Origin)\n\nI am not sure it would be clear to have -p do what you want. Once pods are scheduled, I guess we can have unready pods be prioritized over ready.\n",
        "createdAt" : "2016-06-06T14:44:02Z",
        "updatedAt" : "2016-06-07T08:52:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "05f5ae54-d629-4d1a-b96c-c84121b3f808",
        "parentId" : "5dcf3452-f3fa-4b67-8c1c-c7fc865a195a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I am not sure it would be clear to have -p do what you want. Once pods are scheduled, I guess we can have unready pods be prioritized over ready.\n\nI think you updated this, but didn't gate it.  I think you have proper direction here for the general case.  If we can't make a choice based on `-p`, ready pods probably meet expectations, right?\n",
        "createdAt" : "2016-06-06T19:32:36Z",
        "updatedAt" : "2016-06-07T08:52:51Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "08370362-677e-43c3-8bad-e5e18e8f3d7e",
        "parentId" : "5dcf3452-f3fa-4b67-8c1c-c7fc865a195a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I thought we were more interested in non-ready or ready crashlooping pods. For example, for a rc with a ready and a unready pod, wouldn't we prefer to see the logs of the latter?\n",
        "createdAt" : "2016-06-07T08:49:26Z",
        "updatedAt" : "2016-06-07T08:52:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "95647cc2-0a1e-4441-a37c-200d7d96d1d1",
        "parentId" : "5dcf3452-f3fa-4b67-8c1c-c7fc865a195a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Hm, if we prioritize unready over ready then we also prioritize unready over crashlooping. I think we want the latter first so I am going to switch to ready first.\n",
        "createdAt" : "2016-06-07T08:51:22Z",
        "updatedAt" : "2016-06-07T08:52:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "886014b1a35c1bdf0fca26fe4da0ba84dc3d5c39",
    "line" : null,
    "diffHunk" : "@@ -1,1 +542,546 @@\t\treturn m[s[i].Status.Phase] < m[s[j].Status.Phase]\n\t}\n\t// 3. ready < not ready\n\tif api.IsPodReady(s[i]) != api.IsPodReady(s[j]) {\n\t\treturn api.IsPodReady(s[i])"
  },
  {
    "id" : "90773d21-24b3-4781-ae42-2d530954d93f",
    "prId" : 22579,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50423393-891a-415d-9da7-f42f2c2c11f0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Calling this UID\\* is confusing, since we don't actually populate it using metadata.uid. How about just IDSet?\n",
        "createdAt" : "2016-03-06T06:33:34Z",
        "updatedAt" : "2016-03-06T06:33:34Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f5c9bd676de75f113faf39b1a865a4716cfa474",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +261,265 @@// UIDTrackingControllerExpectations to remember which UID it has seen/still\n// waiting for.\ntype UIDSet struct {\n\tsets.String\n\tkey string"
  },
  {
    "id" : "004e59c1-0b54-4e21-aab6-e8c68a30d208",
    "prId" : 22078,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fa283b1-823c-48ac-b249-877f799ebb88",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is empty time 0 or infinity with respect to After/Before comparisons?\n",
        "createdAt" : "2016-02-26T22:31:45Z",
        "updatedAt" : "2016-02-26T23:35:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "367febab-9351-4274-87f9-a861008e4496",
        "parentId" : "6fa283b1-823c-48ac-b249-877f799ebb88",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Empty time 0 is always before non-empty time (and vise versa). Should check if the time is empty in step 4. \n",
        "createdAt" : "2016-02-26T22:43:14Z",
        "updatedAt" : "2016-02-26T23:35:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "81d04414-5610-4146-8918-d23709a8f386",
        "parentId" : "6fa283b1-823c-48ac-b249-877f799ebb88",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@bgrant0607 Done in the 2nd commit. PTAL\n",
        "createdAt" : "2016-02-26T23:36:38Z",
        "updatedAt" : "2016-02-26T23:36:38Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9185c05a919106be011308e488a2088ad449a8ce",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +462,466 @@\t\t}\n\t}\n\treturn unversioned.Time{}\n}\n"
  },
  {
    "id" : "9476ce6f-eaa5-4b98-a3b1-b1d15d9d6301",
    "prId" : 21963,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e64318e-9938-4449-a1cd-803ac8b2e26c",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "This is much more readable and easier to comprehend than the `Seen()` language. Thanks!\n",
        "createdAt" : "2016-02-26T09:07:46Z",
        "updatedAt" : "2016-02-26T09:07:46Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "39f0edca75bf6499b2909d35911f99787eebb379",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +213,217 @@}\n\n// Add increments the add and del counters.\nfunc (e *ControlleeExpectations) Add(add, del int64) {\n\tatomic.AddInt64(&e.add, add)"
  },
  {
    "id" : "9430bfa9-8a53-4386-be28-f3464e81c2de",
    "prId" : 21152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c556808f-25f9-4333-9829-71d043a84a80",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Or Status.Replicas > 0.\n",
        "createdAt" : "2016-02-12T19:40:41Z",
        "updatedAt" : "2016-02-12T19:40:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e49f4a35-40cd-47e3-bfed-016ae488ee7d",
        "parentId" : "c556808f-25f9-4333-9829-71d043a84a80",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nevermind, now that I see how you're using it.\n",
        "createdAt" : "2016-02-12T19:50:06Z",
        "updatedAt" : "2016-02-12T19:50:06Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9839d0677b3b4d058d230f325c5f9304e55709f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +437,441 @@\tactive := []*extensions.ReplicaSet{}\n\tfor i := range replicaSets {\n\t\tif replicaSets[i].Spec.Replicas > 0 {\n\t\t\tactive = append(active, replicaSets[i])\n\t\t}"
  },
  {
    "id" : "1c67538e-304b-4d0c-baa7-310f97b18a58",
    "prId" : 20273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7584629-a696-480b-be53-4dc9803aea4a",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Update comment\n",
        "createdAt" : "2016-06-01T18:34:52Z",
        "updatedAt" : "2016-06-20T10:13:43Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "a15e9df7-43a1-4a39-a458-f617a8bd247b",
        "parentId" : "e7584629-a696-480b-be53-4dc9803aea4a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Seems correct. The only difference with `ReplicaSetsBySizeOlder` is in the second line of the comment.\n",
        "createdAt" : "2016-06-06T09:42:28Z",
        "updatedAt" : "2016-06-20T10:13:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3d2e3ff2203da20053f9a104f3cce6571dbe293",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +674,678 @@}\n\n// ReplicaSetsBySizeNewer sorts a list of ReplicaSet by size in descending order, using their creation timestamp or name as a tie breaker.\n// By using the creation timestamp, this sorts from new to old replica sets.\ntype ReplicaSetsBySizeNewer []*extensions.ReplicaSet"
  },
  {
    "id" : "64df3ab5-ce29-4ea9-9c96-71a3901ab130",
    "prId" : 19973,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e146080d-99cd-4926-96a0-6c3f071396d1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Isn't it better to just wait for the store to get synced? There's a member function on store you can call to see if it's gotten a complete sync or not.\n",
        "createdAt" : "2016-01-22T19:37:17Z",
        "updatedAt" : "2016-01-23T00:42:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3c0817ec-38bc-45c9-83e2-d7c186200426",
        "parentId" : "e146080d-99cd-4926-96a0-6c3f071396d1",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "That was the problem actually (https://github.com/kubernetes/kubernetes/issues/17829#issuecomment-161411965). That function (https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/framework/controller.go#L100) tells you if the reflector has relisted or not, but the informer still needs to take from reflector store and ADD/UPDATE/DELETE to this store via its process loop.\n\nI want the client state to be in sync. Or is there another HasSynced function I've missed?\n",
        "createdAt" : "2016-01-22T20:02:52Z",
        "updatedAt" : "2016-01-23T00:42:20Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "bf51ab5f-36fd-4729-8165-f687bda77ca4",
        "parentId" : "e146080d-99cd-4926-96a0-6c3f071396d1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The controller has one, too (https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/framework/controller.go#L100) but it doesn't tell you what you want, either.\n\nI think what you're doing may actually be appropriate. It does affect the initial batch of events you get from the informer; instead of a bunch of OnAdd you'll get a bunch of OnUpdates. Can you add this to the function comment? Actually if you could make the function comment tell you why you would want to call it instead of (or in addition to) what it does, that would be helpful.\n\nIf we kept local state, it would make sense to load here the last set of pods we knew about.\n",
        "createdAt" : "2016-01-22T22:24:40Z",
        "updatedAt" : "2016-01-23T00:42:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffd34311c69b67df007af813476f80faca2aa53b",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +444,448 @@\tlistOptions := api.ListOptions{LabelSelector: labels.Everything(), FieldSelector: fields.Everything()}\n\tfor {\n\t\tif allPods, err = kubeClient.Pods(api.NamespaceAll).List(listOptions); err != nil {\n\t\t\tglog.Warningf(\"Retrying pod list: %v\", err)\n\t\t\tcontinue"
  },
  {
    "id" : "37ff753e-919a-44a1-bb5b-ab5833a7311e",
    "prId" : 15153,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bab9f01-6ef0-45d5-956f-4477f36fa07d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I can't understand why you're injecting a function, but all the functions you use just return a constant. If you're doing it for the type protection from the compiler, why not just `type ResyncPeriod time.Duration`?\n",
        "createdAt" : "2015-10-06T18:13:15Z",
        "updatedAt" : "2015-10-08T07:10:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2ed68991-6f9d-42f1-93b8-41ba8be3af44",
        "parentId" : "1bab9f01-6ef0-45d5-956f-4477f36fa07d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "No - it's not for type protection.\nThe reason I'm doing it is that in some controllers we need more than one resyncPeriod and I want to avoid situation of having many periods to be the same to spread the load over time. That' why I'm injecting the function that is generating random values in production code - the constant values are only in unit tests.\n",
        "createdAt" : "2015-10-07T06:22:25Z",
        "updatedAt" : "2015-10-08T07:10:24Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "60bdd8d7-6943-478c-ba39-4c659c12aceb",
        "parentId" : "1bab9f01-6ef0-45d5-956f-4477f36fa07d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It makes sense that you want a different value for every controller, but since each controller only calls the function once (when it makes the informer) it still doesn't make sense to me that you need to inject a function.\n",
        "createdAt" : "2015-10-07T20:05:45Z",
        "updatedAt" : "2015-10-08T07:10:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "23282a3b-44ef-4272-b9b2-6974fa3632a1",
        "parentId" : "1bab9f01-6ef0-45d5-956f-4477f36fa07d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It can call the function more than once, because it can have more than one Informer (one informer per resource). I wanted those also to not collide (e.g. daemon controller is using this function for both pods and nodes).\n",
        "createdAt" : "2015-10-07T20:08:08Z",
        "updatedAt" : "2015-10-08T07:10:24Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "0604befd-e7f5-4e55-9dc8-c909ee8b5a0b",
        "parentId" : "1bab9f01-6ef0-45d5-956f-4477f36fa07d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see, now it makes sense, thank you.\n\nOn Wed, Oct 7, 2015 at 1:08 PM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In pkg/controller/controller_utils.go\n> https://github.com/kubernetes/kubernetes/pull/15153#discussion_r41439676\n> :\n> \n> > @@ -54,6 +54,13 @@ var (\n> >     KeyFunc = framework.DeletionHandlingMetaNamespaceKeyFunc\n> >  )\n> > \n> > +type ResyncPeriodFunc func() time.Duration\n> \n> It can call the function more than once, because it can have more than one\n> Informer (one informer per resource). I wanted those also to not collide\n> (e.g. daemon controller is using this function for both pods and nodes).\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15153/files#r41439676.\n",
        "createdAt" : "2015-10-07T20:20:50Z",
        "updatedAt" : "2015-10-08T07:10:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "df79026b7968a3fd68a31194c68e1e48d14c7c69",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +55,59 @@)\n\ntype ResyncPeriodFunc func() time.Duration\n\n// Returns 0 for resyncPeriod in case resyncing is not needed."
  },
  {
    "id" : "05e11eb2-bacb-41fb-bfbc-5dd0276c98af",
    "prId" : 14550,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6593a7bc-c7b8-4970-9a31-aa27c1b41de9",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "What was convert doing here? Was it writing an empty nodeName?\n",
        "createdAt" : "2015-09-25T16:30:15Z",
        "updatedAt" : "2015-09-28T17:22:06Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "cbffc84d-465d-465d-92e7-c137b0547a1d",
        "parentId" : "6593a7bc-c7b8-4970-9a31-aa27c1b41de9",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Yes. Pods had to be scheduled by the scheduler. Your \"does daemon pod exist for node\" check returned false until the scheduler was done => many new daemon pods are created meanwhile.\n",
        "createdAt" : "2015-09-25T16:37:00Z",
        "updatedAt" : "2015-09-28T17:22:06Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4d1b298a-c1f0-4c6b-8e22-d370e279cb2d",
        "parentId" : "6593a7bc-c7b8-4970-9a31-aa27c1b41de9",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "But node controller should not have created a pod without NodeName set.  \n",
        "createdAt" : "2015-09-30T22:31:23Z",
        "updatedAt" : "2015-09-30T22:31:23Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "5cdad5ca-1a7f-46b6-8401-04cc231b7f74",
        "parentId" : "6593a7bc-c7b8-4970-9a31-aa27c1b41de9",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@erictune not sure I understand your comment. Why the node controller? The daemon controller calls this.\n",
        "createdAt" : "2015-10-01T04:17:12Z",
        "updatedAt" : "2015-10-01T04:17:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d8b0049e1295d584d9ae56eb81688983d454fad",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +297,301 @@\tif len(nodeName) != 0 {\n\t\tpod.Spec.NodeName = nodeName\n\t}\n\tif labels.Set(pod.Labels).AsSelector().Empty() {\n\t\treturn fmt.Errorf(\"unable to create pods, no labels\")"
  },
  {
    "id" : "300a25c0-da53-4b0c-88f6-dae6da4861e4",
    "prId" : 14316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5eb1d13-ab9a-4a95-a25d-26d8a17fd6c5",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "How about an assertion that this implements `PodControlInterface` here?\n",
        "createdAt" : "2015-09-22T00:17:34Z",
        "updatedAt" : "2015-09-25T06:21:28Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2126d3d2-4326-46fb-bc07-62c0a62b6479",
        "parentId" : "a5eb1d13-ab9a-4a95-a25d-26d8a17fd6c5",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Done https://github.com/kubernetes/kubernetes/pull/14316/files#diff-4287daff8f8d21b4cd2d0786fbf1c956R41\n",
        "createdAt" : "2015-09-22T02:22:30Z",
        "updatedAt" : "2015-09-25T06:21:28Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "824768d6042038463356e06aacd5de9c8f510164",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +320,324 @@\tDeletePodName []string\n\tErr           error\n}\n\nvar _ PodControlInterface = &FakePodControl{}"
  },
  {
    "id" : "555ea6c4-b3cb-475d-bdfc-e1cd11ecf315",
    "prId" : 13182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64941e61-a604-4a7b-9ea4-9ea2e6ad0911",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "add a comment why you don't want to create a pod with no labels?\n",
        "createdAt" : "2015-09-07T22:13:52Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "058d27eb-ffbc-49e9-b053-715b0dc7c5ff",
        "parentId" : "64941e61-a604-4a7b-9ea4-9ea2e6ad0911",
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "Cool, maybe we can add a comment \"If pod does not have labels then it cannot be controlled by any daemon controller\"\n",
        "createdAt" : "2015-09-07T22:52:25Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9a52d8af1cd194b111ffedfe118fd65123130b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +314,318 @@\t}\n\t// if a pod does not have labels then it cannot be controlled by any controller\n\tif labels.Set(pod.Labels).AsSelector().Empty() {\n\t\treturn fmt.Errorf(\"unable to create pod replica, no labels\")\n\t}"
  },
  {
    "id" : "deeeb292-ad4b-47bb-a45d-2f7d0931e7e0",
    "prId" : 11915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d20139e-ce78-4fe0-bf7b-a49126b27115",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I see that you didn't write this but this comment is confusing... \n\n> watching happens with ~10-30s latency/pod at the scale of 3000 pods over 100 nodes\n\nDoes that mean max 30s latency per pod? So max latency on are largest clusters could be 3000*30 seconds = 25 hours? Is it supposed to read s/\\/pod//? Does \"watching\" here mean the time it takes from an RC to create a pod before the rc observes it and updates it's expectations? Don't change it I think. I'm just noting.\n",
        "createdAt" : "2015-07-28T03:40:35Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "51b34a3d-8f1e-419e-b684-0aa8acc43264",
        "parentId" : "0d20139e-ce78-4fe0-bf7b-a49126b27115",
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "I can try to revise the comment, with input from @bprashanth \n\nI don't think the max latency is 25 hours. If we have 3000 pods, then we can process 10-20 of them per second, so it should take about 200 seconds (roughly 3 minutes) to process all the pods. The pods aren't processed sequentially.\n\nSo because processing an rc's creates could take up to 3 minutes, we don't clear expectations for 3 minutes. I'm not sure what the last line means.\n",
        "createdAt" : "2015-07-28T05:13:14Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      },
      {
        "id" : "19997ecd-0a9d-4a68-8069-4ec5a967acb3",
        "parentId" : "0d20139e-ce78-4fe0-bf7b-a49126b27115",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "> watching happens with ~10-30s latency/pod at the scale of 3000 pods over 100 nodes\n\nFrom the time you submit a create for a pod to when the same pod comes back down the watch channel is 10-30s. So if you create 3000 pods, all of them will come down the watch channel sometime between the 0->3m mark, depending on when in the 0->2.5m mark they were created. If you're asking why there's so much latency, that a different story alltogether. Generally if the watch latencies start going above 30s, something else breaks and you no longer care about the replica count.\n",
        "createdAt" : "2015-07-28T18:11:33Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "47dd0bc6f9a82af3e968091115e757ca6908e7ba",
    "line" : null,
    "diffHunk" : "@@ -1,1 +46,50 @@\t// creation) about 10-20 pods a second, so it takes about 1 min to service\n\t// 500 pods. Just creation is limited to 20qps, and watching happens with ~10-30s\n\t// latency/pod at the scale of 3000 pods over 100 nodes.\n\tExpectationsTimeout = 3 * time.Minute\n)"
  },
  {
    "id" : "3d4b8219-673f-421d-ad06-a4fa24f4af99",
    "prId" : 11915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f5d4a76-f654-455f-ae5c-2a36ddaf9d92",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "It is not safe to use a single ControllerExpectationsInterface with different types of controllers because `framework.DeletionHandlingMetaNamespaceKey` may conflict across types. Might be worth adding a comment now that this is a potential missuse.\n",
        "createdAt" : "2015-07-28T04:04:58Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "9eb43a7a-278b-4345-9afb-94dd3b41c9e3",
        "parentId" : "9f5d4a76-f654-455f-ae5c-2a36ddaf9d92",
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "I'll add a comment.\n",
        "createdAt" : "2015-07-28T05:10:13Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "47dd0bc6f9a82af3e968091115e757ca6908e7ba",
    "line" : null,
    "diffHunk" : "@@ -1,1 +81,85 @@// Warning: if using KeyFunc it is not safe to use a single ControllerExpectationsInterface with different\n// types of controllers, because the keys might conflict across types.\ntype ControllerExpectationsInterface interface {\n\tGetExpectations(controllerKey string) (*PodExpectations, bool, error)\n\tSatisfiedExpectations(controllerKey string) bool"
  },
  {
    "id" : "57033d0e-eb62-4886-82f0-b3209070d2ca",
    "prId" : 11915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c856b9a3-e70c-41a7-afeb-3d39a1c19a16",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I count 7 instances of \"replication\" in this file still.\n",
        "createdAt" : "2015-07-28T16:07:18Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "984f9598-45f8-45e0-ae9b-78c2dbf5aa6e",
        "parentId" : "c856b9a3-e70c-41a7-afeb-3d39a1c19a16",
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "Fixed. There are 2 instances of replication left (podControl.CreateReplica takes a replication controller as input) . However, I think podControl belongs outside of controller/replication, because it can be used by other controllers (in fact I'll be using podControl in daemon).\n",
        "createdAt" : "2015-07-28T18:57:17Z",
        "updatedAt" : "2015-07-29T16:55:25Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      }
    ],
    "commit" : "47dd0bc6f9a82af3e968091115e757ca6908e7ba",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +16,20 @@\npackage controller\n\nimport (\n\t\"fmt\""
  },
  {
    "id" : "4c1beff9-86df-4ea0-9196-ec220d476178",
    "prId" : 9739,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14bdbba7-b687-4674-b027-1bcc007f90b4",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: extra blank line\n",
        "createdAt" : "2015-06-15T23:05:44Z",
        "updatedAt" : "2015-06-19T21:32:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed9bd1c4ffe766acb6720326671feb33af4ef3b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +321,325 @@\t\tglog.V(4).Infof(\"Updating replica count for rc: %v, %d->%d (need %d), sequence No: %v->%v\",\n\t\t\tcontroller.Name, controller.Status.Replicas, numReplicas, controller.Spec.Replicas, controller.Status.ObservedGeneration, generation)\n\n\t\trc.Status = api.ReplicationControllerStatus{Replicas: numReplicas, ObservedGeneration: generation}\n\t\t_, updateErr = rcClient.Update(rc)"
  },
  {
    "id" : "655cab49-1840-4f18-87f6-ae500122f209",
    "prId" : 9739,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8de29466-d2f2-408e-8619-f4bff620dbec",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "change to // TODO: ensure no one but us writes RC status.\n",
        "createdAt" : "2015-06-15T23:06:13Z",
        "updatedAt" : "2015-06-19T21:32:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "97f5e9c8-be4d-44da-8627-c1be7944916a",
        "parentId" : "8de29466-d2f2-408e-8619-f4bff620dbec",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Do we have a subresource for replication controller status yet? We really should do that. \n",
        "createdAt" : "2015-06-18T03:14:08Z",
        "updatedAt" : "2015-06-19T21:32:21Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed9bd1c4ffe766acb6720326671feb33af4ef3b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +314,318 @@\t// that we've seen a spec update when we retry.\n\t// TODO: This can clobber an update if we allow multiple agents to write to the\n\t// same status.\n\tgeneration := controller.Generation\n"
  },
  {
    "id" : "eec1bb50-620c-4a6a-b552-d0aad8937a1a",
    "prId" : 7643,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5df7fc17-c6f5-4b02-bb68-b4f330afdd2d",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "This will result in an extra get if the update fails twice but I prefer the loop since it gives me room to increase retries and is clearer than the unrolled version. I also want to allow the first update to happen naturally since there's a good chance it'll pass. Thoughts?\n",
        "createdAt" : "2015-05-01T19:39:54Z",
        "updatedAt" : "2015-05-02T01:11:19Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "52d7e1c4-a002-4fb4-8079-a001cf8756a4",
        "parentId" : "5df7fc17-c6f5-4b02-bb68-b4f330afdd2d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Just check the loop exit condition between the update and the get.\n",
        "createdAt" : "2015-05-01T23:56:01Z",
        "updatedAt" : "2015-05-02T01:11:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4d49e684-b504-4005-b516-f6bf997b4a1a",
        "parentId" : "5df7fc17-c6f5-4b02-bb68-b4f330afdd2d",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "oh alright :)\n",
        "createdAt" : "2015-05-01T23:58:41Z",
        "updatedAt" : "2015-05-02T01:11:19Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "864e12d99581c152db0066125d70343808271966",
    "line" : null,
    "diffHunk" : "@@ -1,1 +294,298 @@\t\t}\n\t\t// Update the controller with the latest resource version for the next poll\n\t\tif rc, getErr = rcClient.Get(controller.Name); getErr != nil {\n\t\t\t// If the GET fails we can't trust status.Replicas anymore. This error\n\t\t\t// is bound to be more interesting than the update failure."
  },
  {
    "id" : "e8816e5a-033a-4989-be20-1f17b6ae42c0",
    "prId" : 6866,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29b4cdac-b414-4a26-a4f3-8750feb3c302",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "suggestion: delete the expectation in this case? I'm concerned that an expectation that gets a -1 in one of its fields will have 5 added to it and then trigger early, if that makes sense. Probably not a big deal.\n",
        "createdAt" : "2015-04-27T20:50:47Z",
        "updatedAt" : "2015-04-28T20:45:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5737c0e0-9de2-46b3-838f-0151d95c5929",
        "parentId" : "29b4cdac-b414-4a26-a4f3-8750feb3c302",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Judging from your next commend you don't want me to do this right? Since we initialize it to the expected value before creating pods, and only decrement them from pods events or if a create/delete fails. Or did you have another race condition? \n",
        "createdAt" : "2015-04-27T21:28:42Z",
        "updatedAt" : "2015-04-28T20:45:49Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "c4459b8d-06cb-45db-9869-4570b9522e4e",
        "parentId" : "29b4cdac-b414-4a26-a4f3-8750feb3c302",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, sorry :) I figured out what your plan was. \n",
        "createdAt" : "2015-04-27T21:32:24Z",
        "updatedAt" : "2015-04-28T20:45:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7592dabeba854da7b3b4045dbb9b19e848f17271",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@func (r *RCExpectations) SatisfiedExpectations(rc *api.ReplicationController) bool {\n\tif podExp, exists, err := r.GetExpectations(rc); exists {\n\t\tif podExp.Fulfilled() {\n\t\t\treturn true\n\t\t} else {"
  },
  {
    "id" : "42dbab72-5a8c-41db-b89c-22f769f864d2",
    "prId" : 6866,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "679cf63f-3a9c-4938-a79a-42d095e4fd83",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, I see, every set blows away whatever was in there previously. I guess that makes sense.\n",
        "createdAt" : "2015-04-27T20:51:53Z",
        "updatedAt" : "2015-04-28T20:45:49Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7592dabeba854da7b3b4045dbb9b19e848f17271",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@\t\treturn err\n\t}\n\treturn r.Add(&PodExpectations{add: int64(add), del: int64(del), key: rcKey})\n}\n"
  },
  {
    "id" : "23749b53-4f93-4ffe-ba20-fa16e6aa296b",
    "prId" : 6866,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9180eb6-9077-4770-ad98-210fde209444",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think a single api call takes on the order of 100ms... :)\n",
        "createdAt" : "2015-04-28T23:19:56Z",
        "updatedAt" : "2015-04-28T23:19:56Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e4f99fdd-c49f-4d76-a830-77a8be788143",
        "parentId" : "c9180eb6-9077-4770-ad98-210fde209444",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Hrm, you're right. does half a second make sense? different rcs will do so in parallel upto the limit \n",
        "createdAt" : "2015-04-28T23:22:50Z",
        "updatedAt" : "2015-04-28T23:22:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "88e1a1bc-a01a-43dd-ac33-3fd804f079e8",
        "parentId" : "c9180eb6-9077-4770-ad98-210fde209444",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "How about try twice, and if it doesn't work the second time then re-queue? I'm just thinking that stuff will change--the RC might already be dirty again--so we shouldn't try to update it for too long.\n\nThis can come in a follow-up PR I think...\n",
        "createdAt" : "2015-04-29T00:38:12Z",
        "updatedAt" : "2015-04-29T00:38:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7592dabeba854da7b3b4045dbb9b19e848f17271",
    "line" : 277,
    "diffHunk" : "@@ -1,1 +275,279 @@// Note that the controller pointer might contain a more recent version of the same controller passed into the function.\nfunc updateReplicaCount(rcClient client.ReplicationControllerInterface, controller *api.ReplicationController, numReplicas int) error {\n\treturn wait.Poll(10*time.Millisecond, 100*time.Millisecond, func() (bool, error) {\n\t\tif controller.Status.Replicas != numReplicas {\n\t\t\tglog.V(4).Infof(\"Updating replica count for rc: %v, %d->%d\", controller.Name, controller.Status.Replicas, numReplicas)"
  }
]