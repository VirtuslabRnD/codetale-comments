[
  {
    "id" : "d48814de-db24-4196-bd0c-226bb5c8d0af",
    "prId" : 25960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec196cef-2785-410d-ad83-389bd7335e70",
        "parentId" : null,
        "authorId" : "766f642e-1622-4803-803b-05ce306fc30e",
        "body" : "Is there some early termination you can do here if `volumeSize == requestedSize`\n",
        "createdAt" : "2016-05-20T13:01:38Z",
        "updatedAt" : "2016-05-23T16:39:30Z",
        "lastEditedBy" : "766f642e-1622-4803-803b-05ce306fc30e",
        "tags" : [
        ]
      },
      {
        "id" : "4d1240ea-41ff-452b-bdc3-eb2913d7af7a",
        "parentId" : "ec196cef-2785-410d-ad83-389bd7335e70",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "+1\nThere could be 20 pvs with a capacity exactly matching the requested capacity and it doesn't matter which of those 20 we return, so why not stop on when there's an exact match?\n",
        "createdAt" : "2016-05-20T16:29:23Z",
        "updatedAt" : "2016-05-23T16:39:30Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "f7e28d88-8397-4dbe-8a84-18c70d63cd79",
        "parentId" : "ec196cef-2785-410d-ad83-389bd7335e70",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I also agree with this.  We should short-circuit if we find a 'perfect' match.\n",
        "createdAt" : "2016-05-21T02:20:31Z",
        "updatedAt" : "2016-05-23T16:39:30Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "9794963e-98dd-4a94-9a9d-1e54cc67d1d8",
        "parentId" : "ec196cef-2785-410d-ad83-389bd7335e70",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I do not agree here. We **must** loop through all volumes to make sure there is none that is \"bound-by-user\" or dynamically provisioned to the claim, these have precedence. See `Exact match! No search required.` few lines above. Volumes dynamically provisioned by the controller are matched there.\n\nI added some comments around these parts.\n",
        "createdAt" : "2016-05-23T08:32:59Z",
        "updatedAt" : "2016-05-23T16:39:30Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7da3abd5b35c4615d1b18f2ad38afa2dfa8712d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +107,111 @@\t\t\tvolumeQty := volume.Spec.Capacity[api.ResourceStorage]\n\t\t\tvolumeSize := volumeQty.Value()\n\t\t\tif volumeSize >= requestedSize {\n\t\t\t\tif smallestVolume == nil || smallestVolumeSize > volumeSize {\n\t\t\t\t\tsmallestVolume = volume"
  },
  {
    "id" : "d0520b78-5c85-4629-958e-3fe271d8bc47",
    "prId" : 25960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9f9e0c8-60fa-4d2b-944d-d0da7304d790",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I have absolutely no doubt that **this** will speed things up significantly.  I was in this code today and was wondering if perhaps where along the line an if statement like this was lost, because the code says it's getting unbound volumes, when in fact it makes no check for binding except for the case where a volume is pre-bound, so we're essentially scanning the **entire** set of volumes right now and **then** applying a sort.\n",
        "createdAt" : "2016-05-21T02:18:15Z",
        "updatedAt" : "2016-05-23T16:39:30Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7da3abd5b35c4615d1b18f2ad38afa2dfa8712d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +100,104 @@\t\t\t}\n\n\t\t\tif volume.Spec.ClaimRef != nil {\n\t\t\t\t// This volume waits for exact claim or is alredy bound.\n\t\t\t\tcontinue"
  },
  {
    "id" : "4e3fb300-9b14-4710-9dbc-defafe96a358",
    "prId" : 25917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "So... if the volume is bound by user, we don't check labels. I am not against this, however it should be probably explicitly documented in types.go for PersistentVolume/PersistentVolumeClaim. How does pod.Spec.NodeSelector work when pod.Spec.NodeName is set?\n",
        "createdAt" : "2016-05-20T11:56:29Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "1ce87575-b6fd-462b-b8dc-2571d59ccec3",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Also, an unit test would be nice for this behavior, so we don't break it accidentally in future.\n",
        "createdAt" : "2016-05-20T11:58:58Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "28410cc1-72ee-4f89-b6a7-18b7f5f83dcd",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Very good point.  Thanks, I will check for precedent and update.\n",
        "createdAt" : "2016-05-20T17:46:50Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "03bfa1bd-c6f0-4d2d-83ed-34973fb7d166",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@jsafrane `nodeName` overrides other scheduler behavior.\n",
        "createdAt" : "2016-05-20T17:53:26Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "71e2cf91-fea4-44c1-b3fc-8203894cc055",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@jsafrane Interestingly, the only thing that will break this loop is if you find a volume which is alreay bound from the volume to the claim.  Specifying `volumeName` doesn't affect anything.  Seems like we have run into some ambiguity here.\n\nI think the ambiguity is handled in an outer level.  The calling code only attempts to find the right match if `volumeName` isn't set, so we don't need to handle it in this code.  I'll add a comment explaining it in the code, and we should definitely clarify it in the API.  I am going to punt on that for a bit while I get the code right and think about how much detail to go into.  Since the semantics aren't really plumbed through to the API, I'm not sure exactly the right way to explain this bit without explaining the whole thing together.  That being the case, I'd like to clarify the semantics in a follow-up.\n",
        "createdAt" : "2016-05-20T18:57:16Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "073895ad-eef8-4ae5-934f-1d34f6f75a23",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I can't add a unit test in index_test for this because it assumes that the volume name isn't set.  I'll look for the right place in the controller to get coverage for this.\n",
        "createdAt" : "2016-05-20T18:57:52Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "3e0cab39-8569-41d3-ba7d-d26876781d4b",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "c5f20c61-0898-4aec-9fa5-7052af346962",
        "body" : "@jsafrane does volumeName get ignored then? A warning should be thrown. What if the user specifies a different volumeName that the one is pre-bound? Which operation takes precedence?\n",
        "createdAt" : "2016-05-25T14:23:53Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "c5f20c61-0898-4aec-9fa5-7052af346962",
        "tags" : [
        ]
      },
      {
        "id" : "42379973-503d-4c2d-be98-eda570144962",
        "parentId" : "1181af83-ef99-4d66-95b5-3aabdd838668",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "@erinboyd, no, if `claim.Spec.VolumeName` is set by user, binder won't enter this function at all - it will bind the claim only to the specified PV and it does not need to go through all the other ones.\n",
        "createdAt" : "2016-05-25T15:27:06Z",
        "updatedAt" : "2016-05-31T13:32:39Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "acfcb735339cc60da903524fe5c7032798aca09c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\t//   the claim.\n\t\tfor _, volume := range volumes {\n\t\t\tif isVolumeBoundToClaim(volume, claim) {\n\t\t\t\t// this claim and volume are bound; return it,\n\t\t\t\t// whether the claim is prebound or for volumes"
  }
]