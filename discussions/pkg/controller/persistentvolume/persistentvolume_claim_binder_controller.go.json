[
  {
    "id" : "afd343c6-4b5e-42c8-9cb8-d9c9bb0baa06",
    "prId" : 23078,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c4785e0-2edd-4704-9e7e-83783893cc23",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: log this for debugging.\n",
        "createdAt" : "2016-03-18T22:18:10Z",
        "updatedAt" : "2016-03-18T22:18:10Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b0921d2a-b270-4394-969d-b19ce2e017de",
        "parentId" : "6c4785e0-2edd-4704-9e7e-83783893cc23",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Can add in a follow up PR (I'm not going to remove LGTM).\n",
        "createdAt" : "2016-03-18T22:19:07Z",
        "updatedAt" : "2016-03-18T22:19:07Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "b77abe56a2c8ebfc5930f7ad651ac6ca791f8263",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +239,243 @@\t\tif volume.Spec.ClaimRef != nil {\n\t\t\tclaim, err := binderClient.GetPersistentVolumeClaim(volume.Spec.ClaimRef.Namespace, volume.Spec.ClaimRef.Name)\n\t\t\tif errors.IsNotFound(err) || (claim != nil && claim.UID != volume.Spec.ClaimRef.UID) {\n\t\t\t\tif volume.Spec.PersistentVolumeReclaimPolicy == api.PersistentVolumeReclaimRecycle {\n\t\t\t\t\t// Pending volumes that have a ClaimRef where the claim is missing were recently recycled."
  },
  {
    "id" : "070038fc-4cd6-4140-ba80-e8f90a2433c7",
    "prId" : 21268,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe90b54e-6ca4-48b7-86f5-14298032bfbf",
        "parentId" : null,
        "authorId" : null,
        "body" : "Should the claimRef be set to nil ? Where do released volumes get deleted ?\n",
        "createdAt" : "2016-02-16T14:44:27Z",
        "updatedAt" : "2016-02-16T14:44:27Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e3688d46-3a13-4e91-b2c5-d3b937017924",
        "parentId" : "fe90b54e-6ca4-48b7-86f5-14298032bfbf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Jan is advancing the state here to Released so that the recycler kicks in and does its thing.  The recycler would delete the newly released volume.\n",
        "createdAt" : "2016-02-16T14:47:57Z",
        "updatedAt" : "2016-02-16T14:47:57Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "5c75b0f6-7340-4a36-b154-c417471d7e62",
        "parentId" : "fe90b54e-6ca4-48b7-86f5-14298032bfbf",
        "authorId" : null,
        "body" : "I see... LGTM then\n",
        "createdAt" : "2016-02-16T15:06:25Z",
        "updatedAt" : "2016-02-16T15:06:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "6088369227d4a35041c1e6fdc6e4322811988379",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +263,267 @@\t\t\t\t\t// Pending volumes that has a ClaimRef and the claim is missing and is was not recycled.\n\t\t\t\t\t// It must have been freshly provisioned and the claim was deleted during the provisioning.\n\t\t\t\t\t// Mark the volume as Released, it will be deleted.\n\t\t\t\t\tnextPhase = api.VolumeReleased\n\t\t\t\t}"
  },
  {
    "id" : "5ba27d8b-9a01-4a68-8b02-9f8c1d648c39",
    "prId" : 20213,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29158695-68a1-4e01-a2e5-1f5c6c028e96",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "per our IRC discussion, please update the local cache with the latest and greatest version.\n",
        "createdAt" : "2016-01-29T16:27:03Z",
        "updatedAt" : "2016-02-01T09:50:09Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "c4b42610-f8f9-4fda-b187-8ee33d50bafa",
        "parentId" : "29158695-68a1-4e01-a2e5-1f5c6c028e96",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Added (few lines below).\n",
        "createdAt" : "2016-02-01T09:50:30Z",
        "updatedAt" : "2016-02-01T09:50:30Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "98b9da70-6cdb-4aec-9fcb-46388e1309aa",
        "parentId" : "29158695-68a1-4e01-a2e5-1f5c6c028e96",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "We use the volumeIndex custom Store impl because we needed fancy indexing and sorting.  The watch still has its own store.\n\nWe would need to add the PV to both.  \n\nIdeally, we allow the Controller framework to take a store argument it uses for watch data.  It does not currently, so I couldn't pass our volumeIndex to it.  This controller doesn't need a 2nd store. We need to be able to specify the one we want to use in the watch.\n",
        "createdAt" : "2016-02-11T14:30:14Z",
        "updatedAt" : "2016-02-11T14:30:14Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "9012cb48-d863-4a52-92ad-895cae122264",
        "parentId" : "29158695-68a1-4e01-a2e5-1f5c6c028e96",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Nevermind, I am confusing my controllers. There is no local store use in this one. We use the volumeIndex custom store only.\n",
        "createdAt" : "2016-02-11T15:29:43Z",
        "updatedAt" : "2016-02-11T15:29:43Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2826626b1e2e846aab0fc36946d92727491c710",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +200,204 @@\t\treturn fmt.Errorf(\"Cannot reload volume %s: %v\", volume.Name, err)\n\t}\n\tvolume = newPv\n\n\t// volumes can be in one of the following states:"
  },
  {
    "id" : "a78f2992-fc4e-4008-b225-c64f80752cff",
    "prId" : 16432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ec545e-3455-4b2f-8522-3bb8560d0da7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "a likely error would be a conflict if we attempt to persist the same newly claimed volume twice. what happens to the claim in that case? does it sit unfulfilled until the next time this controller does a full sync?\n",
        "createdAt" : "2015-10-29T20:14:40Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9e3301ff-f8aa-4983-a7f9-3c0452a17f63",
        "parentId" : "83ec545e-3455-4b2f-8522-3bb8560d0da7",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "It would sit until the next sync, yes, and then match to the volume that was bound a few lines earlier.  It will always match the volume that has it as a claimRef.\n",
        "createdAt" : "2015-10-29T20:33:45Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9b8cf7fff297df724d9236240e84ba1fd97537e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +296,300 @@\t\t// make a binding reference to the claim and ensure to update the local index to prevent dupe bindings\n\t\tclone, err := conversion.NewCloner().DeepCopy(volume)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"Error cloning pv: %v\", err)\n\t\t}"
  },
  {
    "id" : "a07031d9-ee33-48fa-84e7-bc9e12d5c398",
    "prId" : 16432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "615a50fc-ae22-4e10-b197-2de3ea36eb0a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Check err\n",
        "createdAt" : "2015-10-30T00:57:10Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8eef948a-29a1-451a-acb5-fe72098c5776",
        "parentId" : "615a50fc-ae22-4e10-b197-2de3ea36eb0a",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "checked\n",
        "createdAt" : "2015-10-30T01:52:28Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "c19f9932-85f4-463c-8920-18d0a36adfe4",
        "parentId" : "615a50fc-ae22-4e10-b197-2de3ea36eb0a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You use this in three places.  You mind making something like https://github.com/kubernetes/kubernetes/pull/16751/files#diff-97a1ffdd78274d54ba9dc28656ceca2dR149 ?\n",
        "createdAt" : "2015-11-04T13:46:29Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9b8cf7fff297df724d9236240e84ba1fd97537e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +295,299 @@\n\t\t// make a binding reference to the claim and ensure to update the local index to prevent dupe bindings\n\t\tclone, err := conversion.NewCloner().DeepCopy(volume)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"Error cloning pv: %v\", err)"
  },
  {
    "id" : "dd757e87-22eb-4201-bbbe-dd21f73fceb0",
    "prId" : 16432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee22dc5a-25de-4d91-a19f-528b99bf5687",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should you handle the case where volume.Spec.ClaimRef exists but does not point at the currently syncing claim?\n",
        "createdAt" : "2015-10-30T01:56:17Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "8efcc6e9-83e2-464b-95ec-cf4477e9bb4a",
        "parentId" : "ee22dc5a-25de-4d91-a19f-528b99bf5687",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I thought about that while leaving the TODO.  There is no api.ClaimError phase.  \n\nI set phase back to Pending and returned an error.\n",
        "createdAt" : "2015-10-30T03:24:40Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9b8cf7fff297df724d9236240e84ba1fd97537e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +333,337 @@\t\t// no-op.  Claim is bound, values from PV are set.  PVCs are technically mutable in the API server\n\t\t// and we don't want to handle those changes at this time.\n\n\tdefault:\n\t\treturn fmt.Errorf(\"Unknown state for PVC: %#v\", claim)"
  },
  {
    "id" : "60962312-900c-4f07-b0b3-2da523961c17",
    "prId" : 16432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d45d0c7-df78-4331-998c-9249c09b4dcb",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If I'm reading correctly, this is only valid because the `binder.lock` associated with the `binder.volumeIndex` is held when this is called.  That's worthy of the comment on the method.\n",
        "createdAt" : "2015-11-03T18:55:48Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a80ba2d3-3041-44b4-8f50-b4fac2ccc097",
        "parentId" : "0d45d0c7-df78-4331-998c-9249c09b4dcb",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Does this line have the side-effect of changing the values in `volume`?  I think I'd like to see an explicit re-setting of `volume` to make it easier to follow.\n",
        "createdAt" : "2015-11-03T18:59:44Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e13889ed-ae93-4cbb-a2b2-ab65e611ffeb",
        "parentId" : "0d45d0c7-df78-4331-998c-9249c09b4dcb",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Does this line have the side-effect of changing the values in volume? I think I'd like to see an explicit re-setting of volume to make it easier to follow.\n\nnm, bad hide on github made it look like it mattered.\n",
        "createdAt" : "2015-11-03T19:01:24Z",
        "updatedAt" : "2015-11-12T19:12:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9b8cf7fff297df724d9236240e84ba1fd97537e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +308,312 @@\t\t} else {\n\t\t\tvolume = updatedVolume\n\t\t\tvolumeIndex.Update(updatedVolume)\n\t\t}\n"
  },
  {
    "id" : "634e8f87-9062-4057-bc18-1f3facc469d5",
    "prId" : 14537,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a38a425-93ff-41b4-813b-dea8ca265534",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This is supposed to hit this case, correct? https://github.com/kubernetes/kubernetes/pull/14537/files#diff-97a1ffdd78274d54ba9dc28656ceca2dL174\n",
        "createdAt" : "2015-12-09T20:37:11Z",
        "updatedAt" : "2015-12-11T15:33:59Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "d60fa10a-bbd7-4748-80bc-8b1a3a4331cd",
        "parentId" : "9a38a425-93ff-41b4-813b-dea8ca265534",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I'm not sure what case this refers to.\n\nI hope the comment is clear, though.  Without any explicit update to the PV, it will have to wait until the next sync period for it's next state change.  This processes it immediately and in the same thread.\n",
        "createdAt" : "2015-12-10T15:27:59Z",
        "updatedAt" : "2015-12-11T15:33:59Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "1a05a99c-e5bd-4be2-bf9a-96921b362026",
        "parentId" : "9a38a425-93ff-41b4-813b-dea8ca265534",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I was referring to the case in the syncVolume described this way:\n\n> VolumeReleased -- volume.Spec.ClaimRef != nil but the claim has been deleted by the user.\n",
        "createdAt" : "2015-12-10T16:14:57Z",
        "updatedAt" : "2015-12-11T15:33:59Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fc1bf1f2314b213af2f540ebe86d169ccfadd9c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +165,169 @@\t// claim deletion prevents the volume from waiting until the next sync period for its Release.\n\tif volume != nil {\n\t\terr := syncVolume(binder.volumeIndex, binder.client, volume)\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"PVClaimBinder could not update volume %s from deleteClaim handler: %+v\", volume.Name, err)"
  },
  {
    "id" : "93e15051-2b94-4f41-8f20-f124bf8c0286",
    "prId" : 14537,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a4540a-106a-4c72-8a78-d97894f88473",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Is this fixing an existing bug or material to this PR?\n",
        "createdAt" : "2015-12-09T20:37:40Z",
        "updatedAt" : "2015-12-11T15:33:59Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fc1bf1f2314b213af2f540ebe86d169ccfadd9c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +331,335 @@\t\t// The local cache must be updated with the new bind to prevent subsequent\n\t\t// claims from binding to the volume.\n\t\tif volume.Spec.ClaimRef == nil {\n\t\t\tclone, err := conversion.NewCloner().DeepCopy(volume)\n\t\t\tif err != nil {"
  }
]