[
  {
    "id" : "d0b7cb4f-aa81-4de9-9305-dc06c02529f2",
    "prId" : 101316,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101316#pullrequestreview-673399037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a904dd4-0461-4190-8172-2dc69eac733e",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Since this is statefulset helper, I'd just pass statefulset object and let the `minReadySeconds` extraction be handled inside this method. ",
        "createdAt" : "2021-06-01T16:08:02Z",
        "updatedAt" : "2021-06-01T16:16:07Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "db17f38a-4e71-47a6-a1fb-3beb8a14566a",
        "parentId" : "6a904dd4-0461-4190-8172-2dc69eac733e",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "I am just using the existing pattern. We can perhaps combine the functions we have here with other controllers like replicaset as the utility is pretty much sam. But can we do it in a separate PR",
        "createdAt" : "2021-06-01T17:40:24Z",
        "updatedAt" : "2021-06-02T13:17:31Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceb1dbd2f1f38df16eb5e15452ea35c04e7f9105",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +205,209 @@}\n\nfunc isRunningAndAvailable(pod *v1.Pod, minReadySeconds int32) bool {\n\treturn podutil.IsPodAvailable(pod, minReadySeconds, metav1.Now())\n}"
  },
  {
    "id" : "b7eaa4d8-5c7d-4807-b6e8-bde3b3ad0335",
    "prId" : 59365,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59365#pullrequestreview-100266910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b80d0dbf-989e-4791-9b86-8726d470326f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What happens if the selector doesn't match these labels?",
        "createdAt" : "2018-02-27T23:18:06Z",
        "updatedAt" : "2018-02-27T23:18:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "80b48e70-d4e9-4e3c-8bd0-a5fe8fd20b13",
        "parentId" : "b80d0dbf-989e-4791-9b86-8726d470326f",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Validation prevents a StatefulSet with a selector that doesn't match its own template labels from being created. apps/v1 StatefulSet's selector cannot be changed after creation. ",
        "createdAt" : "2018-02-27T23:30:53Z",
        "updatedAt" : "2018-02-27T23:30:53Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "fb3b3026-aa54-477f-93b0-957282ea8666",
        "parentId" : "b80d0dbf-989e-4791-9b86-8726d470326f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Thanks!",
        "createdAt" : "2018-02-28T23:14:30Z",
        "updatedAt" : "2018-02-28T23:14:30Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a269491f1853f8e81c6bdeac254d4e2b3c369847",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +315,319 @@\tcr, err := history.NewControllerRevision(set,\n\t\tcontrollerKind,\n\t\tset.Spec.Template.Labels,\n\t\truntime.RawExtension{Raw: patch},\n\t\trevision,"
  },
  {
    "id" : "5c5ce33d-c9ec-45d6-8d35-6104eff8ad4e",
    "prId" : 51199,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51199#pullrequestreview-60184232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8a3b9b-7ca1-44b7-a2ae-0e50f56f5af0",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why isn't this reading the annotation as well?",
        "createdAt" : "2017-09-01T16:21:25Z",
        "updatedAt" : "2017-09-25T22:36:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bb90e39f-3530-4048-a941-619596b0ecab",
        "parentId" : "8d8a3b9b-7ca1-44b7-a2ae-0e50f56f5af0",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "The annotations and the fields are both constructed from the name and serviceName as below. What information would I want from the existing annotations?",
        "createdAt" : "2017-09-01T16:33:28Z",
        "updatedAt" : "2017-09-25T22:36:28Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "4373f33c0ef53dc259fe4d5ff07858825527038c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +199,203 @@\tpod.Namespace = set.Namespace\n\tif pod.Spec.Hostname == \"\" {\n\t\tpod.Spec.Hostname = pod.Name\n\t}\n\tif pod.Spec.Subdomain == \"\" {"
  },
  {
    "id" : "a8e86d52-471e-4071-81a3-fab88744d9c8",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-54772488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97b4c3f4-a19c-46f5-b5a0-3c8ceb38a75f",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "@crimsonfaith91 looks like you need it in kubectl/rollback.go, so i don't see another way. perhaps someone else has an idea",
        "createdAt" : "2017-08-07T20:58:00Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +332,336 @@// ApplyRevision returns a new StatefulSet constructed by restoring the state in revision to set. If the returned error\n// is nil, the returned StatefulSet is valid.\nfunc ApplyRevision(set *apps.StatefulSet, revision *apps.ControllerRevision) (*apps.StatefulSet, error) {\n\tobj, err := scheme.Scheme.DeepCopy(set)\n\tif err != nil {"
  },
  {
    "id" : "10084bc6-8689-417d-a84f-a1fcc56cd27d",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41290526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feaffef0-0004-4eb4-acc6-ad660a5f0079",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "check if revision is empty ?",
        "createdAt" : "2017-05-31T04:20:18Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "a90e4044-f37c-4c9a-b1ca-e3c72923ea14",
        "parentId" : "feaffef0-0004-4eb4-acc6-ad660a5f0079",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "It can't be empty based on the call path. I don't see a need for a check.",
        "createdAt" : "2017-05-31T17:10:39Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\tpod.Labels = make(map[string]string)\n\t}\n\tpod.Labels[apps.StatefulSetRevisionLabel] = revision\n}\n"
  },
  {
    "id" : "eebbb1b6-e6cb-4f02-83fd-24287796dd44",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41665458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad3e3e93-cbf3-4c95-b6b5-cd6a7f8b1bd4",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "this is confusing and at the same time interesting to me as a concept :-) I have not seen this pattern before, but it seems like what you are doing is keeping a strategic merge patch in each revision history , so that any time we want to restore the StatefulSet to that revision, you just use the ready to apply patch from the Raw field to restore it. I think this is worth some more comment",
        "createdAt" : "2017-05-31T04:33:33Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "ec20e121-13fd-46db-be8c-09922391654d",
        "parentId" : "ad3e3e93-cbf3-4c95-b6b5-cd6a7f8b1bd4",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "I added commentary to that effect above the getPatch and newRevision methods.",
        "createdAt" : "2017-06-01T23:49:11Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +338,342 @@\t\tcontrollerKind,\n\t\tselector,\n\t\truntime.RawExtension{Raw: patch},\n\t\trevision)\n}"
  },
  {
    "id" : "92f9ae98-3695-486a-bd7c-e4f21bba86a9",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41334634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "516ff2b1-6a70-4cf6-a089-311d9cc2ef0b",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "check for err here ?",
        "createdAt" : "2017-05-31T04:34:36Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "19173f97-9964-4a71-9ea3-e1fc5b55beaf",
        "parentId" : "516ff2b1-6a70-4cf6-a089-311d9cc2ef0b",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "I added a check under strategicpatch\r\nIf you mean check that the clone casts correctly, we generally do not do that when deep copying from using Scheme.",
        "createdAt" : "2017-05-31T19:37:51Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +350,354 @@\t}\n\tclone := obj.(*apps.StatefulSet)\n\tpatched, err := strategicpatch.StrategicMergePatch([]byte(runtime.EncodeOrDie(patchCodec, clone)), revision.Data.Raw, clone)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "f5546c22-0d15-4796-b415-165a6bb2cbb1",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41406805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98a9b893-2bbe-4f7f-bdca-ff515a6c731a",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "may be i am missing something, but how can you be compatible with previously recorded patches. If previous revision recorded only podtemplate and later revisions record with pod and volume template,i dont see how we will be compatible ?",
        "createdAt" : "2017-06-01T02:20:46Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "88c99bfb-e69a-405e-b3ff-62346f57b172",
        "parentId" : "98a9b893-2bbe-4f7f-bdca-ff515a6c731a",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "If a patch semantically means that you will roll back only the template at the time the revision is recorded it can still be applied to a statefulset where volume claims are also recorded. Rolling back will apply the prior revision without breaking versioning.",
        "createdAt" : "2017-06-01T03:08:21Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +303,307 @@// previous version. If the returned error is nil the patch is valid. The current state that we save is just the\n// PodSpecTemplate. We can modify this later to encompass more state (or less) and remain compatible with previously\n// recorded patches.\nfunc getPatch(set *apps.StatefulSet) ([]byte, error) {\n\tstr, err := runtime.Encode(patchCodec, set)"
  },
  {
    "id" : "e5ac5e24-14a9-4fb9-a5dd-5cffa626d404",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42071119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8417758-0a4e-44ae-99c2-f34c43f4882b",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "what about partitioned rolling update ?",
        "createdAt" : "2017-06-01T02:51:41Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "4cada447-b0c1-43bb-b26e-51f23f6b1eae",
        "parentId" : "a8417758-0a4e-44ae-99c2-f34c43f4882b",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "It doesn't complete as per the design document.",
        "createdAt" : "2017-06-01T03:06:26Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "fd8320d1-e010-4fa2-98c4-ca5424078c9a",
        "parentId" : "a8417758-0a4e-44ae-99c2-f34c43f4882b",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@krmayankk you should be able to estimate if a partial rollout is complete with \r\n```\r\nfoo.spec.replicas-foo.spec.updateStrategy.partition.ordinal == foo.status.updatedReplicas &&\r\nfoo.spec.replicas == foo.status.readyReplicas\r\n```\r\nThere is definitely value in communicating that via a Condition in the future.",
        "createdAt" : "2017-06-05T15:20:51Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +389,393 @@// is set to the empty string. status's currentReplicas is set to updateReplicas and its updateReplicas\n// are set to 0.\nfunc completeRollingUpdate(set *apps.StatefulSet, status *apps.StatefulSetStatus) {\n\tif set.Spec.UpdateStrategy.Type == apps.RollingUpdateStatefulSetStrategyType &&\n\t\tstatus.UpdatedReplicas == status.Replicas &&"
  },
  {
    "id" : "e867b606-b5f0-427e-9c6a-bedf7a79c3a0",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41945889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c133d5f3-c7d6-4e78-845f-d79cb37e3137",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "set.Generation > *status.ObservedGeneration seems to be missing",
        "createdAt" : "2017-06-02T17:15:14Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "60c5f810-af0c-4b89-8971-ec43dbbda429",
        "parentId" : "c133d5f3-c7d6-4e78-845f-d79cb37e3137",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "The Generation of the set is stored in status prior to invocation. That is, status carries the Generation of the StatefulSet as its ObservedGeneration.",
        "createdAt" : "2017-06-02T17:23:50Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "d1542d58-4990-4e75-afac-532a406b2cde",
        "parentId" : "c133d5f3-c7d6-4e78-845f-d79cb37e3137",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Still, I think it's better to add it here, too. It makes the helper not depend on the generation being set prior to its invocation. ",
        "createdAt" : "2017-06-04T16:55:24Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +376,380 @@func inconsistentStatus(set *apps.StatefulSet, status *apps.StatefulSetStatus) bool {\n\treturn set.Status.ObservedGeneration == nil ||\n\t\t*status.ObservedGeneration > *set.Status.ObservedGeneration ||\n\t\tstatus.Replicas != set.Status.Replicas ||\n\t\tstatus.CurrentReplicas != set.Status.CurrentReplicas ||"
  },
  {
    "id" : "be076ec5-f271-45e8-9fca-028c8201c70b",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42456198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b08ac15-29bd-4e1e-8650-0d204e93c578",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Would you want to check the returned error?",
        "createdAt" : "2017-06-06T21:42:30Z",
        "updatedAt" : "2017-06-06T21:46:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +310,314 @@\t}\n\tvar raw map[string]interface{}\n\tjson.Unmarshal([]byte(str), &raw)\n\tobjCopy := make(map[string]interface{})\n\tspecCopy := make(map[string]interface{})"
  },
  {
    "id" : "96a8a8f1-ce01-40df-8c1e-d9232fad8bcd",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-42456198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8feb59f9-ca6f-4063-bf2e-aceda62e2b3f",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Remove `patchCodec` and use `json.Marshal` here instead, csi team wants to avoid using api.Codecs as much as possible, see https://github.com/kubernetes/kubernetes/pull/47075#discussion_r120467218",
        "createdAt" : "2017-06-06T21:46:08Z",
        "updatedAt" : "2017-06-06T21:47:16Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +305,309 @@// recorded patches.\nfunc getPatch(set *apps.StatefulSet) ([]byte, error) {\n\tstr, err := runtime.Encode(patchCodec, set)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "884c090a-5e42-4f7e-9852-c35355f06228",
    "prId" : 40838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40838#pullrequestreview-20986161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ca20489-5455-433c-8339-35e6f01570a2",
        "parentId" : null,
        "authorId" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "body" : "Is this a reliable way to check that a pod has been created? ",
        "createdAt" : "2017-02-08T08:40:20Z",
        "updatedAt" : "2017-02-09T16:45:02Z",
        "lastEditedBy" : "e535b047-00fc-4269-992a-b8d65bd7c57b",
        "tags" : [
        ]
      },
      {
        "id" : "dfaf9d3e-2a8e-4721-b1f0-cbafb883af53",
        "parentId" : "1ca20489-5455-433c-8339-35e6f01570a2",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Note that we need to stop using Phase as much as possible: https://github.com/kubernetes/kubernetes/issues/7856",
        "createdAt" : "2017-02-09T11:25:11Z",
        "updatedAt" : "2017-02-09T16:45:02Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d99b4d825a74f7f22f1709e580574b70fe796d9",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +212,216 @@// isCreated returns true if pod has been created and is maintained by the API server\nfunc isCreated(pod *v1.Pod) bool {\n\treturn pod.Status.Phase != \"\"\n}\n"
  }
]