[
  {
    "id" : "f6f661aa-5fad-4e65-8b19-1c2b40c0a284",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-524276233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a30218f-ba17-4287-9504-95da95a54eda",
        "parentId" : null,
        "authorId" : "da08428a-7a79-4f6f-8f27-373f0802426a",
        "body" : "Can we please get rid of this 'feature'?\r\n\r\nhttps://github.com/kubernetes/kubernetes/pull/81557 is still open to fix this in v1 controller, but I think it would be best to fix this in the v2 controller right from the start.",
        "createdAt" : "2020-11-05T12:51:00Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "da08428a-7a79-4f6f-8f27-373f0802426a",
        "tags" : [
        ]
      },
      {
        "id" : "5f63fe2e-f2a4-4ee6-b329-89624af20ff7",
        "parentId" : "6a30218f-ba17-4287-9504-95da95a54eda",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yeah I was talking about it with @alaypatel07 it should not matter for the v2 controller, though. ",
        "createdAt" : "2020-11-05T13:48:57Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +192,196 @@\t\tstarts = append(starts, t)\n\t}\n\tif len(starts) > 100 {\n\t\t// An object might miss several starts. For example, if\n\t\t// controller gets wedged on friday at 5:01pm when everyone has"
  },
  {
    "id" : "5e01cc13-2a51-49c9-82e3-f144d8db788e",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-524542068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "033a2071-64be-4fe8-8dd4-d48ce1e6dd9f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Once you get to 101, break out of this list and separately set a \"missed this many\" count using division.",
        "createdAt" : "2020-11-05T13:10:23Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "196bae0a-7829-4b99-8a0f-42f162f8a1e3",
        "parentId" : "033a2071-64be-4fe8-8dd4-d48ce1e6dd9f",
        "authorId" : "0c5a8fe3-d7c6-4fc1-9a85-a0a659bef1d4",
        "body" : "That'd feed in to a counter metric with some suitable labels / lay the groundwork for adding that metric?",
        "createdAt" : "2020-11-05T18:19:37Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "0c5a8fe3-d7c6-4fc1-9a85-a0a659bef1d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +190,194 @@\t// TODO: @alpatel, convert the following for loop into above logic and add test cases\n\tfor t := schedule.Next(earliestTime); !t.After(now); t = schedule.Next(t) {\n\t\tstarts = append(starts, t)\n\t}\n\tif len(starts) > 100 {"
  },
  {
    "id" : "12dfb09b-c109-4998-91c9-dcf7d225adeb",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527574640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2524d89f-4447-4758-93d0-01ad894d8c2a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Do you even use the individual times?  If not, just return a count and determine that count with division, not a for loop.",
        "createdAt" : "2020-11-05T13:11:18Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "77aea748-2d9e-4f0e-82c9-4c943e907930",
        "parentId" : "2524d89f-4447-4758-93d0-01ad894d8c2a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Is this method used anywhere other than unit tests?",
        "createdAt" : "2020-11-10T20:16:35Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fdac7519-78c5-4758-a226-e61820d42f4f",
        "parentId" : "2524d89f-4447-4758-93d0-01ad894d8c2a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Is this method used anywhere other than unit tests?\r\n\r\nGitHub didn't load the diff.  I see it, but I'd still prefer you return only the count and the latest time to create for.  Keep your surface here small.",
        "createdAt" : "2020-11-10T20:18:31Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +156,160 @@// If there are too many (>100) unstarted times, it will raise a warning and but still return\n// the list of missed times.\nfunc getUnmetScheduleTimes(cj batchv1beta1.CronJob, now time.Time, schedule cron.Schedule, recorder record.EventRecorder) []time.Time {\n\tstarts := []time.Time{}\n"
  },
  {
    "id" : "36a6a9e5-529d-479d-898e-54ed792e096d",
    "prId" : 39608,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39608#pullrequestreview-16798884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "939063e3-ee58-4106-95a4-1871fec75b66",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Can you prepare test cases covering this new flow?",
        "createdAt" : "2017-01-12T11:40:23Z",
        "updatedAt" : "2017-01-16T12:52:47Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "c9493544-c5e3-4d3c-bb70-367ca7354be3",
        "parentId" : "939063e3-ee58-4106-95a4-1871fec75b66",
        "authorId" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "body" : "Yes, will do",
        "createdAt" : "2017-01-12T13:35:05Z",
        "updatedAt" : "2017-01-16T12:52:47Z",
        "lastEditedBy" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "tags" : [
        ]
      },
      {
        "id" : "3879bfb4-d9c5-4b8b-94d9-c5db417f7fd7",
        "parentId" : "939063e3-ee58-4106-95a4-1871fec75b66",
        "authorId" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "body" : "I have updated the PR with tests.",
        "createdAt" : "2017-01-16T12:53:28Z",
        "updatedAt" : "2017-01-16T12:53:28Z",
        "lastEditedBy" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "tags" : [
        ]
      }
    ],
    "commit" : "d141a43d86745fe807dc4f07dde3f7209c3e77e1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t\tearliestTime = schedulingDeadline\n\t\t}\n\t}\n\tif earliestTime.After(now) {\n\t\treturn []time.Time{}, nil"
  },
  {
    "id" : "f4a332d0-a7dc-4e08-8980-37849d0d7407",
    "prId" : 36812,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36812#pullrequestreview-8691724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70e9a997-c664-44ec-a477-f1584e5f976e",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Is using seconds will give us enough protection against non-unique identifier? When I have many different scheduled jobs, is it possible that two of them will be scheduled at the same second? What if time was changed to 1 hour back (winter time), I think it adding more chances for the collision.\n",
        "createdAt" : "2016-11-15T13:57:59Z",
        "updatedAt" : "2016-11-15T16:27:52Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "ac05c9cd-52a7-4088-9ae2-4c01ad22391f",
        "parentId" : "70e9a997-c664-44ec-a477-f1584e5f976e",
        "authorId" : "13dc6094-a74f-4ec1-aa42-557625591b18",
        "body" : "It's the epoch time - the daylight saving time should not affect it.\n",
        "createdAt" : "2016-11-15T14:02:28Z",
        "updatedAt" : "2016-11-15T16:27:52Z",
        "lastEditedBy" : "13dc6094-a74f-4ec1-aa42-557625591b18",
        "tags" : [
        ]
      },
      {
        "id" : "c4c45520-c5c6-4fdc-803a-a2851950c38f",
        "parentId" : "70e9a997-c664-44ec-a477-f1584e5f976e",
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Indeed, you're right. What's about the first case?\n",
        "createdAt" : "2016-11-15T14:20:07Z",
        "updatedAt" : "2016-11-15T16:27:52Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "ca3ad104-f94c-4741-9ccb-30b90fa45029",
        "parentId" : "70e9a997-c664-44ec-a477-f1584e5f976e",
        "authorId" : "13dc6094-a74f-4ec1-aa42-557625591b18",
        "body" : "The granularity of scheduled jobs is one second (because it's a cron like schedule).\nThe change is about replacing PODs suffix hash with the epoch time. So if you have many jobs, their prefixes will differ. I am not changing the prefixes.\nInstead of:\n\n```\netcd-backup-4175643772-g57gv\netcd-backup-4209853567-nlipe\n```\n\nyou will have:\n\n```\netcd-backup-1479081600-g57gv\netcd-backup-1479081900-nlipe\n```\n",
        "createdAt" : "2016-11-15T19:32:20Z",
        "updatedAt" : "2016-11-15T19:32:20Z",
        "lastEditedBy" : "13dc6094-a74f-4ec1-aa42-557625591b18",
        "tags" : [
        ]
      },
      {
        "id" : "d02ca59e-6403-44f3-ba30-4cd95022cd8a",
        "parentId" : "70e9a997-c664-44ec-a477-f1584e5f976e",
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Ok, thanks!\n",
        "createdAt" : "2016-11-15T20:42:18Z",
        "updatedAt" : "2016-11-15T20:42:18Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1896a695f5eb87569f35209b18b25d5c1bfa95f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +201,205 @@// Return Unix Epoch Time\nfunc getTimeHash(scheduledTime time.Time) int64 {\n\treturn scheduledTime.Unix()\n}\n"
  }
]