[
  {
    "id" : "999788f1-ca3f-4f20-bd6b-8855fca0dfa8",
    "prId" : 102366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102366#pullrequestreview-681790279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ee24703-dd5d-4237-b06f-11df6510ece0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "where does the timezone in `scheduledTime` come from? is it the controller time zone?",
        "createdAt" : "2021-06-01T13:12:50Z",
        "updatedAt" : "2021-06-01T13:12:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5750af68-fa37-4b24-9f8a-5a24b012b033",
        "parentId" : "4ee24703-dd5d-4237-b06f-11df6510ece0",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "https://github.com/kubernetes/kubernetes/blob/ea0764452222146c47ec826977f49d7001b0ea8c/pkg/controller/cronjob/cronjob_controller.go#L137\r\n\r\nYes, its timezone comes from the controller, and when we don't use the timezone explicitly, the timezone of `time.Now()` will be set to nil, which will make `time.Format()` use the controller's timezone",
        "createdAt" : "2021-06-03T05:57:47Z",
        "updatedAt" : "2021-06-03T05:57:47Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "6b7bb1a3-8f84-4427-b646-adccc0c89296",
        "parentId" : "4ee24703-dd5d-4237-b06f-11df6510ece0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would like an ack from a sig-apps review\r\n/assign @soltysh ",
        "createdAt" : "2021-06-03T15:30:23Z",
        "updatedAt" : "2021-06-03T15:30:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d374195c-9d22-48ac-8f20-32a9c8e546e5",
        "parentId" : "4ee24703-dd5d-4237-b06f-11df6510ece0",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yeah, this should be fine. ",
        "createdAt" : "2021-06-11T12:46:49Z",
        "updatedAt" : "2021-06-11T12:46:59Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "51717256f978ad301a0eb236edcb5b41f185517c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +286,290 @@\tif tooLate {\n\t\tklog.V(4).Infof(\"Missed starting window for %s\", nameForLog)\n\t\trecorder.Eventf(cj, v1.EventTypeWarning, \"MissSchedule\", \"Missed scheduled time to start a job: %s\", scheduledTime.UTC().Format(time.RFC1123Z))\n\t\t// TODO: Since we don't set LastScheduleTime when not scheduling, we are going to keep noticing\n\t\t// the miss every cycle.  In order to avoid sending multiple events, and to avoid processing"
  },
  {
    "id" : "5279549e-38f0-4ef8-889c-46c4d84db6bf",
    "prId" : 77475,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77475#pullrequestreview-234286314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45cafb1c-05be-4c2f-abd8-5448a1011cb0",
        "parentId" : null,
        "authorId" : "24ab4292-a16f-4d8f-b5cb-bf0e1ea4f6ff",
        "body" : "maybe use `make([]batchv1.Job, 0, len(jlTmp)` to avoid re-allocating and copying when append happens?",
        "createdAt" : "2019-05-06T19:47:00Z",
        "updatedAt" : "2019-05-07T02:37:35Z",
        "lastEditedBy" : "24ab4292-a16f-4d8f-b5cb-bf0e1ea4f6ff",
        "tags" : [
        ]
      },
      {
        "id" : "990d3a56-9fcf-4178-81c3-e871606011dc",
        "parentId" : "45cafb1c-05be-4c2f-abd8-5448a1011cb0",
        "authorId" : "98076226-0c0c-4e1a-a21a-c84792a1b19d",
        "body" : "Because of the comment from jpbetz , i use the pager.New(...).EachListItem().\r\nSo i could not get the length of the jobs before EachListItem.",
        "createdAt" : "2019-05-07T02:39:58Z",
        "updatedAt" : "2019-05-07T02:39:58Z",
        "lastEditedBy" : "98076226-0c0c-4e1a-a21a-c84792a1b19d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f68b12e4ecdf4af3cb6e2a3f0eed5540a1319d3c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +111,115 @@\t}\n\n\tjs := make([]batchv1.Job, 0)\n\terr := pager.New(pager.SimplePageFunc(jobListFunc)).EachListItem(context.Background(), metav1.ListOptions{}, func(object runtime.Object) error {\n\t\tjobTmp, ok := object.(*batchv1.Job)"
  },
  {
    "id" : "d0807aba-ca4f-4912-906e-2a5f5ba56899",
    "prId" : 77475,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77475#pullrequestreview-243991299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13e7c26c-326c-4fd6-b4b8-bb741552cf7c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This should be “CronJobs”",
        "createdAt" : "2019-05-30T19:43:45Z",
        "updatedAt" : "2019-05-30T19:44:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f68b12e4ecdf4af3cb6e2a3f0eed5540a1319d3c",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +144,148 @@\n\tif err != nil {\n\t\tutilruntime.HandleError(fmt.Errorf(\"Failed to extract cronJobs list: %v\", err))\n\t\treturn\n\t}"
  },
  {
    "id" : "f7234c32-9d3a-48c5-a2c1-19be2a850427",
    "prId" : 70265,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70265#pullrequestreview-211543301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "becd1fac-cf73-496b-8aad-bd8bd88f86ce",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Don't we need to use reflect to get the type of jlTmp ?",
        "createdAt" : "2019-03-06T17:15:48Z",
        "updatedAt" : "2019-03-06T17:16:18Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "1ab33f49-8ef2-4013-b27c-9413490cd6af",
        "parentId" : "becd1fac-cf73-496b-8aad-bd8bd88f86ce",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Shouldn't need to, `%T` is documented as \"a Go-syntax representation of the type of the value\".",
        "createdAt" : "2019-03-07T00:12:40Z",
        "updatedAt" : "2019-03-07T00:12:40Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bdbc35994c02b534e3e5c08ffa957ec31a58b1d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +115,119 @@\tjl, ok := jlTmp.(*batchv1.JobList)\n\tif !ok {\n\t\tutilruntime.HandleError(fmt.Errorf(\"expected type *batchv1.JobList, got type %T\", jlTmp))\n\t\treturn\n\t}"
  },
  {
    "id" : "9158e54e-788e-44c8-adb1-6fa1ce2d6c70",
    "prId" : 51519,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51519#pullrequestreview-59796083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3dda3f1-a509-4126-bfa5-84891ebd2061",
        "parentId" : null,
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "I think here is a bug if list failed, but job is deleted. May result in pod leak.",
        "createdAt" : "2017-08-29T12:30:01Z",
        "updatedAt" : "2017-08-31T06:18:31Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "993eb5fc-30e2-4dab-9310-a4985f9cafe0",
        "parentId" : "c3dda3f1-a509-4126-bfa5-84891ebd2061",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Good catch, thx!",
        "createdAt" : "2017-08-31T09:03:45Z",
        "updatedAt" : "2017-08-31T09:03:45Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b80a8db6d3791f29cd6ad42eff94b728349f6024",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +380,384 @@\tif err != nil {\n\t\trecorder.Eventf(sj, v1.EventTypeWarning, \"FailedList\", \"List job-pods: %v\", err)\n\t\treturn false\n\t}\n\terrList := []error{}"
  },
  {
    "id" : "0ae0c6a8-53df-4c77-be49-1e39492d6496",
    "prId" : 51465,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51465#pullrequestreview-59319787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8078c34-e425-4313-8854-319e21ded32b",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Will this break HA clusters during upgrades? Not all masters are updated simultaneously: https://github.com/kubernetes/kubernetes/issues/51049#issuecomment-324784202",
        "createdAt" : "2017-08-28T21:17:54Z",
        "updatedAt" : "2017-08-29T10:25:16Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "47dc861a-eed9-4b29-b9aa-6b3eee00e3a9",
        "parentId" : "c8078c34-e425-4313-8854-319e21ded32b",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I think this is slightly different usecase than what you're pointing to. There, the issue is about upgrading from beta1 to beta2, where both are enabled by default. Here, we are migrating from alpha to beta, iow. from non-default to a default enabled API. \r\nIf I don't change controller to use the beta (enabled by default) cronjobs will not be working. Because you'll have the beta API available, but controller will rely on non-default API to be turned on. \r\nThis will break HA clusters, but only those that explicitly enable the alpha version. I'll defer to @bgrant0607 or @smarterclayton for the decision but imho this should get in. ",
        "createdAt" : "2017-08-29T10:33:32Z",
        "updatedAt" : "2017-08-29T10:33:32Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "951d8bbf-4060-4542-865e-3fe110e12b6c",
        "parentId" : "c8078c34-e425-4313-8854-319e21ded32b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We don't support HA alpha upgrading to beta without interruption.  So someone on a cluster like that has already broken the glass.",
        "createdAt" : "2017-08-29T17:29:05Z",
        "updatedAt" : "2017-08-29T17:29:05Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de214b044832e4149ca5a7f6a3d59e67e82af4e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +117,121 @@\tglog.V(4).Infof(\"Found %d jobs\", len(js))\n\n\tsjl, err := jm.kubeClient.BatchV1beta1().CronJobs(metav1.NamespaceAll).List(metav1.ListOptions{})\n\tif err != nil {\n\t\tutilruntime.HandleError(fmt.Errorf(\"can't list CronJobs: %v\", err))"
  },
  {
    "id" : "9ccfa5d2-47d2-4000-88da-b4e894828dbd",
    "prId" : 42177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42177#pullrequestreview-32874883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41571038-f576-450f-a1f9-5533385a17fa",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "There is no status update.",
        "createdAt" : "2017-04-14T18:27:42Z",
        "updatedAt" : "2017-04-19T22:42:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6db80ae3-272e-4786-a952-b7ca7eabddba",
        "parentId" : "41571038-f576-450f-a1f9-5533385a17fa",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Oh well it seems it has already happened above",
        "createdAt" : "2017-04-14T18:28:46Z",
        "updatedAt" : "2017-04-19T22:42:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "be1fe95534638cbfdf352981842473d25e5c97d4",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +248,252 @@\tif sj.DeletionTimestamp != nil {\n\t\t// The CronJob is being deleted.\n\t\t// Don't do anything other than updating status.\n\t\treturn\n\t}"
  },
  {
    "id" : "bb0ebb9d-aad1-4f3c-ae8b-1a524e331995",
    "prId" : 42177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42177#pullrequestreview-34328262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed1ee1e4-e6ad-4dda-b8fa-90449ee9d142",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@soltysh we'll need to take care of this when we change cronjob controller to use informer ",
        "createdAt" : "2017-04-18T22:43:30Z",
        "updatedAt" : "2017-04-19T22:42:43Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "dec8286d-84f2-4d28-a620-9e89e9d29fa0",
        "parentId" : "ed1ee1e4-e6ad-4dda-b8fa-90449ee9d142",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yes, we've talked about it during KubeCon. If I have a reasonable solution in place in openshift I'll make sure to fix cronjob controller.",
        "createdAt" : "2017-04-24T15:16:31Z",
        "updatedAt" : "2017-04-24T15:16:31Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "be1fe95534638cbfdf352981842473d25e5c97d4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +109,113 @@\t// This guarantees that if we see any Job that got orphaned by the GC orphan finalizer,\n\t// we must also see that the parent CronJob has non-nil DeletionTimestamp (see #42639).\n\t// Note that this only works because we are NOT using any caches here.\n\tjl, err := jm.kubeClient.BatchV1().Jobs(metav1.NamespaceAll).List(metav1.ListOptions{})\n\tif err != nil {"
  },
  {
    "id" : "1b1d1a23-5d7d-481e-b199-36480614514b",
    "prId" : 39204,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39204#pullrequestreview-15037883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3214bb1-a605-484d-bd24-f213c3f79e6b",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "I think you could move this to the above loop which already goes through `js` and calls `inActiveList` which does exactly what you need. You should split the `if !found && !IsJobFinished(&j)` condition into two, one dealing with the current situation and the other with what you want, iow:\r\n```go\r\nif !found {\r\n    if !IsJobFinished(&j) {\r\n        recorder.Eventf(&sj, v1.EventTypeWarning, \"UnexpectedJob\", \"Saw a job that the controller did not create or forgot: %v\", j.Name)\r\n    } else {\r\n        recorder.Eventf(&sj, v1.EventTypeNormal, \"MissingJob\", \"Active job went missing: %v\", j.Name)\r\n        deleteFromActiveList(&sj, j.UID)\r\n    }\r\n}\r\n```\r\n",
        "createdAt" : "2017-01-02T16:41:38Z",
        "updatedAt" : "2017-01-03T23:15:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "33ec5741-ce13-476b-a7a5-f3d94f7ddc88",
        "parentId" : "d3214bb1-a605-484d-bd24-f213c3f79e6b",
        "authorId" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "body" : "I am a bit confused as to what you mean -- when a job is deleted manually as in this issue, it will not be in `js` at all, so we will never actually hit it in the above loop? \r\n\r\nThis is why I instead iterate over the active list directly, and look for jobs that are missing in `js`.",
        "createdAt" : "2017-01-02T17:16:15Z",
        "updatedAt" : "2017-01-03T23:15:35Z",
        "lastEditedBy" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "tags" : [
        ]
      },
      {
        "id" : "9ed17ef9-4343-4200-90d4-372be8425d6e",
        "parentId" : "d3214bb1-a605-484d-bd24-f213c3f79e6b",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Right, sorry my bad. Anyway, can you tweak the code a bit so that it reads nicer. Iow. move the first loop to be part of the previous one. We are already iterating through `js` there so just create `childrenJobs` map inside it. Secondly, shorten the `if` inside the second loop into:\r\n```go\r\nif found := childrenJobs[j.UID]; !found {\r\n    fmt.Println(\"not found\")\r\n}\r\n```",
        "createdAt" : "2017-01-03T09:49:35Z",
        "updatedAt" : "2017-01-03T23:15:35Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "980319b7-1510-41c9-bfc9-a699313c6eee",
        "parentId" : "d3214bb1-a605-484d-bd24-f213c3f79e6b",
        "authorId" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "body" : "Good points, thanks, this is done.",
        "createdAt" : "2017-01-04T00:05:36Z",
        "updatedAt" : "2017-01-04T00:05:36Z",
        "lastEditedBy" : "a2be6725-9a43-447c-b338-28c1fbd785da",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8d69d1a3633af9f8b45efabed600e31154a98e2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +162,166 @@\t\t}\n\t}\n\n\tupdatedSJ, err := sjc.UpdateStatus(&sj)\n\tif err != nil {"
  }
]