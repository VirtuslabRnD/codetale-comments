[
  {
    "id" : "2d68c8e5-218c-4915-95b6-0f66f31302fc",
    "prId" : 102366,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102366#pullrequestreview-675417867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "517e675d-3982-4304-8934-1bf388193e55",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same question about the source of the timezone in scheduledTime",
        "createdAt" : "2021-06-01T13:13:07Z",
        "updatedAt" : "2021-06-01T13:13:07Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a7093298-4a9d-40b1-87d1-56dcd1aa77e9",
        "parentId" : "517e675d-3982-4304-8934-1bf388193e55",
        "authorId" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "body" : "here as well",
        "createdAt" : "2021-06-03T05:59:23Z",
        "updatedAt" : "2021-06-03T05:59:24Z",
        "lastEditedBy" : "2d068038-5593-4ffc-a2d6-46dbdee326c0",
        "tags" : [
        ]
      },
      {
        "id" : "a2dc2b17-5420-450b-994d-4026530230a3",
        "parentId" : "517e675d-3982-4304-8934-1bf388193e55",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would like an ack from a sig-apps review\r\n/assign @soltysh ",
        "createdAt" : "2021-06-03T15:30:31Z",
        "updatedAt" : "2021-06-03T15:30:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "51717256f978ad301a0eb236edcb5b41f185517c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +502,506 @@\tif tooLate {\n\t\tklog.V(4).InfoS(\"Missed starting window\", \"cronjob\", klog.KRef(cj.GetNamespace(), cj.GetName()))\n\t\tjm.recorder.Eventf(cj, corev1.EventTypeWarning, \"MissSchedule\", \"Missed scheduled time to start a job: %s\", scheduledTime.UTC().Format(time.RFC1123Z))\n\n\t\t// TODO: Since we don't set LastScheduleTime when not scheduling, we are going to keep noticing"
  },
  {
    "id" : "cc0a50b2-0f60-4660-9496-b320b91f12ee",
    "prId" : 96443,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96443#pullrequestreview-529099197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2107e608-7e7e-4aae-804b-a0cb01d54a3c",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "There's no need for duplicating this method, identical already exists in utils.go",
        "createdAt" : "2020-11-11T09:30:53Z",
        "updatedAt" : "2020-11-12T00:47:41Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "a4e8ac3e-ff54-41d5-bfb9-26eb3e166633",
        "parentId" : "2107e608-7e7e-4aae-804b-a0cb01d54a3c",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "@soltysh I needed to send an instance of jm so I could call the other method [here](https://github.com/kubernetes/kubernetes/pull/96443/files#diff-3ac32b4c4bbfd547f2224dda02e1b422629791f723459a6cfb6a1a0670519975R619)\r\n\r\ngiven that, I wonder if I keep this as is?",
        "createdAt" : "2020-11-11T23:53:49Z",
        "updatedAt" : "2020-11-12T00:47:41Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      },
      {
        "id" : "5fe438fc-185c-4c2e-8a7b-90a8cecf3295",
        "parentId" : "2107e608-7e7e-4aae-804b-a0cb01d54a3c",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "That should not be related, but I'm fine with this as is for now. ",
        "createdAt" : "2020-11-12T13:46:04Z",
        "updatedAt" : "2020-11-12T13:46:05Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "15089aab94f3e95ede8741bc6c38267cb43687ba",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +642,646 @@}\n\nfunc (jm *ControllerV2) getFinishedStatus(j *batchv1.Job) (bool, batchv1.JobConditionType) {\n\tfor _, c := range j.Status.Conditions {\n\t\tif (c.Type == batchv1.JobComplete || c.Type == batchv1.JobFailed) && c.Status == corev1.ConditionTrue {"
  },
  {
    "id" : "fa3d1cfa-a19f-454c-b733-a07d97b5cdc0",
    "prId" : 96443,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96443#pullrequestreview-528004237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7666d1a2-688f-439f-9a1b-bbd77eb88ba6",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yeah, that one has to be duplicated since you have different arguments, namely `[]*batchv1.Job` here vs `[]batchv1.Job` in the other controller file. ",
        "createdAt" : "2020-11-11T09:32:29Z",
        "updatedAt" : "2020-11-12T00:47:41Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "15089aab94f3e95ede8741bc6c38267cb43687ba",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +652,656 @@\n// removeOldestJobs removes the oldest jobs from a list of jobs\nfunc (jm *ControllerV2) removeOldestJobs(cj *batchv1beta1.CronJob, js []*batchv1.Job, maxJobs int32) {\n\tnumToDelete := len(js) - int(maxJobs)\n\tif numToDelete <= 0 {"
  },
  {
    "id" : "cd26be66-455f-4382-8db7-5ffdda418d86",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-516980878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bf02c54-f925-4c64-97eb-2ecad07f7caf",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Theoretically this should not happen, b/c we parse the schedule in the validation, but if something like that happens, maybe even worth adding an event about it. ",
        "createdAt" : "2020-10-26T15:56:30Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "e04f0897-2e8d-4844-b2ad-3025d083f356",
        "parentId" : "7bf02c54-f925-4c64-97eb-2ecad07f7caf",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "added a warning event",
        "createdAt" : "2020-10-26T16:50:51Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 374,
    "diffHunk" : "@@ -1,1 +372,376 @@\t\t\t// this is likely a user error in defining the spec value\n\t\t\t// we should log the error and not reconcile this cronjob until an update to spec\n\t\t\tklog.V(2).InfoS(\"unparseable schedule for cronjob\", \"cronjob\", klog.KRef(newCJ.GetNamespace(), newCJ.GetName()), \"schedule\", newCJ.Spec.Schedule, \"err\", err)\n\t\t\tjm.recorder.Eventf(newCJ, corev1.EventTypeWarning, \"UnParseableCronJobSchedule\", \"unparseable schedule for cronjob: %s\", newCJ.Spec.Schedule)\n\t\t\treturn"
  },
  {
    "id" : "1719ed82-35b4-41a3-97df-91e06e855c7e",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-516981125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5b80b2-584c-4402-b878-098bdef3b823",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Given that we generate job name randomly this should not happen.",
        "createdAt" : "2020-10-26T16:03:04Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "bbee667c-a160-4a70-be85-408448d34ccf",
        "parentId" : "9c5b80b2-584c-4402-b878-098bdef3b823",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "going forward in order to handle time skews, I could see an enhancement where we determine the name of a job for a particular schedule and keep it the same for the schedule. With that thought, I think keeping the TODO there makes sense, worse case we'll remove the TODO in the future?",
        "createdAt" : "2020-10-26T16:27:56Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      },
      {
        "id" : "0cecb880-846d-403d-a017-104e7a276919",
        "parentId" : "9c5b80b2-584c-4402-b878-098bdef3b823",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "The problem is the name of a job is non-deterministic currently. But I'm ok with a TODO. ",
        "createdAt" : "2020-10-26T16:33:21Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "cddca3ea-aa7e-4426-a392-8dcb5167b7eb",
        "parentId" : "9c5b80b2-584c-4402-b878-098bdef3b823",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "refactored the todo to capture this better",
        "createdAt" : "2020-10-26T16:51:08Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 548,
    "diffHunk" : "@@ -1,1 +546,550 @@\tswitch {\n\tcase errors.HasStatusCause(err, corev1.NamespaceTerminatingCause):\n\tcase errors.IsAlreadyExists(err):\n\t\tklog.InfoS(\"Job already exists\", \"cronjob\", klog.KRef(cj.GetNamespace(), cj.GetName()), \"job\", klog.KRef(jobReq.GetNamespace(), jobReq.GetName()))\n\tcase err != nil:"
  },
  {
    "id" : "10c6cd15-8b87-4f38-8464-392d513c8814",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-605973341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb4639a-f239-4262-b35b-1364a0a4c602",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It seems that Forget is missing in a success call.",
        "createdAt" : "2020-10-30T10:14:20Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7ec01195-2a0c-48eb-8344-3f9cc53f360e",
        "parentId" : "0bb4639a-f239-4262-b35b-1364a0a4c602",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "We don't want to forget, b/c the queue will now contain the next schedule time. So this is different the other controllers where upon success you remove from the queue. Here the queue is the core scheduling, by delaying we're setting when the next run is happening. ",
        "createdAt" : "2020-10-30T12:32:18Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "5a993933-7d2a-4f44-bdb4-71a6c4ef41ae",
        "parentId" : "0bb4639a-f239-4262-b35b-1364a0a4c602",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> We don't want to forget, b/c the queue will now contain the next schedule time. So this is different the other controllers where upon success you remove from the queue. Here the queue is the core scheduling, by delaying we're setting when the next run is happening.\r\n\r\nThat's not what `Forget` does.  `Forget` only removes memory of rate limiting a particular item, it does not impact whether it is in the queue or not.  I think you should have the standard block.",
        "createdAt" : "2020-11-05T12:49:05Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1e5d8729-8545-4b9b-b10a-9fd4dfc27aff",
        "parentId" : "0bb4639a-f239-4262-b35b-1364a0a4c602",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "added the `Forget` call",
        "createdAt" : "2020-11-10T18:30:46Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      },
      {
        "id" : "fae4ddad-ff18-46d5-9449-ff8316fcc034",
        "parentId" : "0bb4639a-f239-4262-b35b-1364a0a4c602",
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@deads2k would it make sense to rename Forget function call to something like ForgetRateLimiting or anything more obvious ?",
        "createdAt" : "2021-03-08T05:27:27Z",
        "updatedAt" : "2021-03-08T05:27:27Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +155,159 @@\tcase requeueAfter != nil:\n\t\tjm.queue.Forget(key)\n\t\tjm.queue.AddAfter(key, *requeueAfter)\n\t}\n\treturn true"
  },
  {
    "id" : "7ed8920e-2283-4c51-b823-dcb9797c9383",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527575423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a759d91-73eb-4c8a-9270-08720cf7d160",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think I know what it's for, but a comment would be appreciated.",
        "createdAt" : "2020-11-05T12:39:09Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "1f1fea96-0049-49eb-b610-2326dff7b460",
        "parentId" : "6a759d91-73eb-4c8a-9270-08720cf7d160",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I think I know what it's for, but a comment would be appreciated.\r\n\r\neither move it closer or add the comment or both please.",
        "createdAt" : "2020-11-10T20:19:41Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\nvar (\n\tnextScheduleDelta = 100 * time.Millisecond\n)\n"
  },
  {
    "id" : "81545b33-c983-4b0a-8aff-c44e4f1522ab",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527499600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5092fe9d-bd6e-4784-97fc-2d85cdfbbd88",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If I'm reading this correctly, this call dirties the global cache because I don't see a copy anywhere.\r\n\r\nSince you don't know ahead of time whether you're going to mutate, I see two possible choices\r\n1. pay for a copy every time you start work on something\r\n2. create a copy and return it from this method when needed.\r\n\r\nI don't know ahead of time whether your load will require 2, but I suggest updating this method to return `*batchv1beta1.CronJob` as well and then just always copy the value at the top of this method.  It gives you flexibility to fix it later.",
        "createdAt" : "2020-11-05T13:01:42Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9d675cb3-624c-4d0a-8ec4-f737a6ccf920",
        "parentId" : "5092fe9d-bd6e-4784-97fc-2d85cdfbbd88",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This still holds, I'd go with option 2 as advised by David. ",
        "createdAt" : "2020-11-10T11:58:00Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "92eeaaf2-b7ba-46f5-8ff3-6efce8999281",
        "parentId" : "5092fe9d-bd6e-4784-97fc-2d85cdfbbd88",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This will cover this invocation and `cleanupFinishedJobs2` which is called after `syncCronJob` in `sync`",
        "createdAt" : "2020-11-10T11:59:55Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "dc29407b-24ee-4d5a-a30d-154ffe91e9b5",
        "parentId" : "5092fe9d-bd6e-4784-97fc-2d85cdfbbd88",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "You did copy, but you're not returning it, which means `cleanupFinishedJobs2` can still modify cache copy. ",
        "createdAt" : "2020-11-10T12:05:14Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "77a61a75-d9da-4813-bc15-0ab42a7944d2",
        "parentId" : "5092fe9d-bd6e-4784-97fc-2d85cdfbbd88",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "+1 updated",
        "createdAt" : "2020-11-10T18:39:34Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 417,
    "diffHunk" : "@@ -1,1 +415,419 @@\t\t} else if found && IsJobFinished(&j) {\n\t\t\t_, status := getFinishedStatus(&j)\n\t\t\tdeleteFromActiveList(cj, j.ObjectMeta.UID)\n\t\t\tjm.recorder.Eventf(cj, corev1.EventTypeNormal, \"SawCompletedJob\", \"Saw completed job: %s, status: %v\", j.Name, status)\n\t\t}"
  },
  {
    "id" : "72a5d575-5983-45d0-b5df-109cc86cb9f4",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-524246927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37214987-c44c-462c-a32b-ec216d2d1516",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The lists aren't synchronized, right? They're both cached.  This means that when you update status of the cronjob for instance, if you haven't created the job (or even if you have and that watch is against a slower server), you won't have a full list of jobs, right?",
        "createdAt" : "2020-11-05T13:15:07Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 406,
    "diffHunk" : "@@ -1,1 +404,408 @@\n\tchildrenJobs := make(map[types.UID]bool)\n\tfor _, j := range js {\n\t\tchildrenJobs[j.ObjectMeta.UID] = true\n\t\tfound := inActiveList(*cj, j.ObjectMeta.UID)"
  },
  {
    "id" : "9224b228-5af5-4fe2-ac04-111566bc7c7c",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527488185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6870b973-d7d7-4e1b-a54d-8b172228aaaf",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Move this before sync invocation. ",
        "createdAt" : "2020-11-10T14:53:21Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "36969f6b-f474-45c2-98f4-a52ba1d9945b",
        "parentId" : "6870b973-d7d7-4e1b-a54d-8b172228aaaf",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "done",
        "createdAt" : "2020-11-10T18:29:18Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\treturn false\n\t}\n\tdefer jm.queue.Done(key)\n\n\trequeueAfter, err := jm.sync(key.(string))"
  },
  {
    "id" : "487a48eb-7338-4aac-b112-741d70075aca",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527850475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05a41a82-fb0d-46be-97d6-f6e3f1a7f6c3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The lister standard users `[]*` to avoid copies.",
        "createdAt" : "2020-11-10T20:22:43Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "80bc3d33-63d7-4bfd-99cf-6d72336f5c4f",
        "parentId" : "05a41a82-fb0d-46be-97d6-f6e3f1a7f6c3",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "do you mind if I take this as a follow on? \r\n\r\nThis list is used by code in the old controller which would need refactoring as well or copy-pasting",
        "createdAt" : "2020-11-10T21:32:29Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      },
      {
        "id" : "3aeba72a-7729-4007-82bc-171f2f6b7094",
        "parentId" : "05a41a82-fb0d-46be-97d6-f6e3f1a7f6c3",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "addressed in the follow-on PR ",
        "createdAt" : "2020-11-11T04:17:03Z",
        "updatedAt" : "2020-11-11T04:17:03Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@\t}\n\n\tjobsToBeReconciled := []batchv1.Job{}\n\n\tfor _, job := range jobList {"
  },
  {
    "id" : "19ec969e-b393-4e38-bfe3-70d3a4eb7778",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527850374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c9653c9-bfcb-4315-b496-90ce9ef4c3b1",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "this would be a spot to do a live check on a cronjob to see you got a job before a cronjob, right?",
        "createdAt" : "2020-11-10T20:39:56Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a1d5ebb8-3437-4b71-a9fa-fa46f4c9f680",
        "parentId" : "9c9653c9-bfcb-4315-b496-90ce9ef4c3b1",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> this would be a spot to do a live check on a cronjob to see you got a job before a cronjob, right?\r\n\r\nI guess I'm ok with this, it's just an event.  If you get a lot of them and they're wrong, you should look at that as a way to prevent bad eventing.",
        "createdAt" : "2020-11-10T20:40:45Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "dfffafc6-3b73-4587-80b5-275a971daa89",
        "parentId" : "9c9653c9-bfcb-4315-b496-90ce9ef4c3b1",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "addressed in follow-on #96443",
        "createdAt" : "2020-11-11T04:16:39Z",
        "updatedAt" : "2020-11-11T04:16:39Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 410,
    "diffHunk" : "@@ -1,1 +408,412 @@\t\tfound := inActiveList(*cj, j.ObjectMeta.UID)\n\t\tif !found && !IsJobFinished(&j) {\n\t\t\tjm.recorder.Eventf(cj, corev1.EventTypeWarning, \"UnexpectedJob\", \"Saw a job that the controller did not create or forgot: %s\", j.Name)\n\t\t\t// We found an unfinished job that has us as the parent, but it is not in our Active list.\n\t\t\t// This could happen if we crashed right after creating the Job and before updating the status,"
  },
  {
    "id" : "454792e8-597b-4f41-9f57-ae784aee72bb",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527850107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81cc5f0f-a31f-4fd4-bc1e-8e215acd0e7d",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think this is event worthy.",
        "createdAt" : "2020-11-10T20:59:31Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "077f0a56-25a8-4f0f-b356-3e0810c6eb0e",
        "parentId" : "81cc5f0f-a31f-4fd4-bc1e-8e215acd0e7d",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "added",
        "createdAt" : "2020-11-11T04:15:46Z",
        "updatedAt" : "2020-11-11T04:15:46Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 520,
    "diffHunk" : "@@ -1,1 +518,522 @@\t\t// With replace, we could use a name that is deterministic per execution time.\n\t\t// But that would mean that you could not inspect prior successes or failures of Forbid jobs.\n\t\tklog.V(4).InfoS(\"Not starting job because prior execution is still running and concurrency policy is Forbid\", \"cronjob\", klog.KRef(cj.GetNamespace(), cj.GetName()))\n\t\tjm.recorder.Eventf(cj, corev1.EventTypeNormal, \"JobAlreadyActive\", \"Not starting job because prior execution is running and concurrency policy is Forbid\")\n\t\tt := nextScheduledTimeDuration(sched, now)"
  },
  {
    "id" : "35ef3290-7a8a-425c-bb2f-e4d9dd9c922a",
    "prId" : 93370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93370#pullrequestreview-527644603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36e5d6ac-c7e3-4173-9874-da7b844c114b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "definitely event worthy.",
        "createdAt" : "2020-11-10T20:59:48Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "951f74c6-4e1d-4915-b4d3-ddffa297ad99",
        "parentId" : "36e5d6ac-c7e3-4173-9874-da7b844c114b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> definitely event worthy.\r\n\r\nmaybe the delete helper already events?",
        "createdAt" : "2020-11-10T21:00:42Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2e43e2f2-cf4b-4e4c-81d8-a66132d851fe",
        "parentId" : "36e5d6ac-c7e3-4173-9874-da7b844c114b",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "yes, the deleteJob has an event",
        "createdAt" : "2020-11-10T22:02:36Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      },
      {
        "id" : "6eef4e01-c90b-4cdb-9271-979ed86e1264",
        "parentId" : "36e5d6ac-c7e3-4173-9874-da7b844c114b",
        "authorId" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "body" : "https://github.com/kubernetes/kubernetes/blob/d91a1f7e92a0016e2394a73fd9602b8ae08a2a57/pkg/controller/cronjob/cronjob_controller.go#L381",
        "createdAt" : "2020-11-10T22:03:50Z",
        "updatedAt" : "2020-11-10T22:32:43Z",
        "lastEditedBy" : "08f15620-693a-4298-ac66-9441e4e32ea3",
        "tags" : [
        ]
      }
    ],
    "commit" : "38bb53555e8b48ffa70d3dd84c00eb7eac35e77a",
    "line" : 527,
    "diffHunk" : "@@ -1,1 +525,529 @@\tif cj.Spec.ConcurrencyPolicy == batchv1beta1.ReplaceConcurrent {\n\t\tfor _, j := range cj.Status.Active {\n\t\t\tklog.V(4).InfoS(\"Deleting job that was still running at next scheduled start time\", \"job\", klog.KRef(j.Namespace, j.Name))\n\n\t\t\tjob, err := jm.jobControl.GetJob(j.Namespace, j.Name)"
  }
]