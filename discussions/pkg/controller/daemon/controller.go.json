[
  {
    "id" : "e3d5d8ac-fbf7-49c1-9b08-bc5ef105a083",
    "prId" : 26931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75d71909-c9bc-4d2d-a53c-a341026dc432",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Isn't it simpler to have a helper that will construct the desired status and do a DeepEqual instead of comparing every field?\n",
        "createdAt" : "2016-06-26T01:28:00Z",
        "updatedAt" : "2016-07-05T19:34:29Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "71ae3711-7800-4c84-87ae-249724ec0f41",
        "parentId" : "75d71909-c9bc-4d2d-a53c-a341026dc432",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "i do not feel so. if there are only three explicit fields, direct comparison is simpler and faster.\n",
        "createdAt" : "2016-06-26T02:42:15Z",
        "updatedAt" : "2016-07-05T19:34:29Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "210aa65e-c0df-4a0a-8709-b016e4a1c15f",
        "parentId" : "75d71909-c9bc-4d2d-a53c-a341026dc432",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am fine with what is here and not requiring DeepEqual since that would require reflection.\n",
        "createdAt" : "2016-07-05T19:26:15Z",
        "updatedAt" : "2016-07-05T19:34:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e4966da823b2274a74caf58915cb64d12839985",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +568,572 @@\nfunc storeDaemonSetStatus(dsClient unversionedextensions.DaemonSetInterface, ds *extensions.DaemonSet, desiredNumberScheduled, currentNumberScheduled, numberMisscheduled int) error {\n\tif int(ds.Status.DesiredNumberScheduled) == desiredNumberScheduled &&\n\t\tint(ds.Status.CurrentNumberScheduled) == currentNumberScheduled &&\n\t\tint(ds.Status.NumberMisscheduled) == numberMisscheduled {"
  },
  {
    "id" : "ee1ad642-7d9f-4bc2-9900-d783e0f7effa",
    "prId" : 26867,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35841b60-7b90-4a2c-8d91-b107a636eabf",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "What happens when syncHandler panics? Done is not called. Isn't that needed?\n",
        "createdAt" : "2016-06-26T01:24:43Z",
        "updatedAt" : "2016-06-26T01:25:25Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1779110caa85101718787f221950b71a3532af",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +259,263 @@\t\t\tcontinue\n\t\t}\n\t\terr := dsc.syncHandler(dsKey.(string))\n\t\tif err != nil {\n\t\t\tglog.Errorf(\"Error syncing daemon set with key %s: %v\", dsKey.(string), err)"
  },
  {
    "id" : "4e45be64-731c-43c9-a989-ec253c997faa",
    "prId" : 23223,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c9d95b0-8852-4bd0-b860-54f688ed4ee3",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "As I mentioned on the Deployment PR, I think we need to improve this message.\n",
        "createdAt" : "2016-03-25T22:12:53Z",
        "updatedAt" : "2016-03-25T22:12:53Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "932112cb-7e53-4243-9d05-53073544ed5d",
        "parentId" : "3c9d95b0-8852-4bd0-b860-54f688ed4ee3",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ok, I will fix both\n",
        "createdAt" : "2016-03-25T22:35:23Z",
        "updatedAt" : "2016-03-25T22:35:23Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "625ce91d54bbdd573ed512e53036f8235b50631d",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +628,632 @@\teverything := unversioned.LabelSelector{}\n\tif reflect.DeepEqual(ds.Spec.Selector, &everything) {\n\t\tdsc.eventRecorder.Eventf(ds, api.EventTypeWarning, \"SelectingAll\", \"This controller is selecting all pods. Skipping sync.\")\n\t\treturn nil\n\t}"
  },
  {
    "id" : "fccd51e7-f398-4047-bd5c-e8152190307c",
    "prId" : 22416,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49d5208e-fe7a-439a-8400-8a22d3f94519",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "typo: wheter\n",
        "createdAt" : "2016-03-03T14:38:53Z",
        "updatedAt" : "2016-03-03T14:38:53Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd6c288d45b130d93de5339d647cc7ab2aad7d4f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +602,606 @@\t\t\tcontinue\n\t\t}\n\t\t// ignore pods that belong to the daemonset when taking into account wheter\n\t\t// a daemonset should bind to a node.\n\t\tif pds := dsc.getPodDaemonSet(pod); pds != nil && ds.Name == pds.Name {"
  },
  {
    "id" : "76261114-1e17-4306-811c-eb5330f3e005",
    "prId" : 22030,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d63116cc-a274-4657-82f5-e582c53bc346",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This could still be nil if you got a tombstone, right?\n",
        "createdAt" : "2016-03-01T20:58:44Z",
        "updatedAt" : "2016-03-01T20:58:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f796d089-7d79-466e-bed7-70b195d76e71",
        "parentId" : "d63116cc-a274-4657-82f5-e582c53bc346",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "That should hit one of the code paths above, and retrieve the tombstone.obj, which if it isn't a pod should return\n",
        "createdAt" : "2016-03-01T21:31:40Z",
        "updatedAt" : "2016-03-01T21:31:40Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "5221fc77-7c15-4dd2-a277-0bab8dba74bd",
        "parentId" : "d63116cc-a274-4657-82f5-e582c53bc346",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Yup :) should be set by this point\n",
        "createdAt" : "2016-03-01T21:49:22Z",
        "updatedAt" : "2016-03-01T21:49:29Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "7f14d97d-f192-45ec-a650-f06e2e092474",
        "parentId" : "d63116cc-a274-4657-82f5-e582c53bc346",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "It's either set on line 309 or the function returns before we hit this.\n",
        "createdAt" : "2016-03-01T21:51:21Z",
        "updatedAt" : "2016-03-01T21:51:21Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "c190fd00-8b67-4fa8-a752-e94112be0c13",
        "parentId" : "d63116cc-a274-4657-82f5-e582c53bc346",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, sorry, somehow I didn't notice that github omitted the line.\n",
        "createdAt" : "2016-03-01T22:53:12Z",
        "updatedAt" : "2016-03-01T22:53:12Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7a7f87eeefd8abbe55c8c01ecf327653a2432d1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +313,317 @@\t\t}\n\t}\n\tglog.V(4).Infof(\"Pod %s deleted.\", pod.Name)\n\tif ds := dsc.getPodDaemonSet(pod); ds != nil {\n\t\tdsKey, err := controller.KeyFunc(ds)"
  },
  {
    "id" : "d135fddc-380c-4599-988d-9524730e2eb8",
    "prId" : 20312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "700ecdc6-bd36-4f0a-bc90-f54b2253f361",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This unversioned means the internal types, right?\n",
        "createdAt" : "2016-01-29T22:32:40Z",
        "updatedAt" : "2016-01-31T23:42:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "26ea21a2-d14d-44e8-96d2-243033a439bf",
        "parentId" : "700ecdc6-bd36-4f0a-bc90-f54b2253f361",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Yes. Do you want a rename?\n",
        "createdAt" : "2016-01-29T23:00:10Z",
        "updatedAt" : "2016-01-31T23:42:10Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2a8f5b0f-c2e6-4763-84a1-445b0bea1b76",
        "parentId" : "700ecdc6-bd36-4f0a-bc90-f54b2253f361",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I would, except the package name \"internal\" means something to the go compiler. So just leave it until we can think of a better one. :)\n",
        "createdAt" : "2016-01-29T23:26:06Z",
        "updatedAt" : "2016-01-31T23:42:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7722a50647e4285d607ccdd0c9be2038fee5371d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +30,34 @@\tclientset \"k8s.io/kubernetes/pkg/client/clientset_generated/release_1_1\"\n\t\"k8s.io/kubernetes/pkg/client/record\"\n\tunversioned_extensions \"k8s.io/kubernetes/pkg/client/typed/generated/extensions/unversioned\"\n\tunversioned_legacy \"k8s.io/kubernetes/pkg/client/typed/generated/legacy/unversioned\"\n\t\"k8s.io/kubernetes/pkg/controller\""
  },
  {
    "id" : "958dcb42-03ee-470e-82a4-7cf586fd66a2",
    "prId" : 17442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4895a41c-4f23-4e8a-828b-0ea26071b2cd",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "This should be moved back into the nodeShouldRunDaemonPod function\n",
        "createdAt" : "2015-11-23T19:30:36Z",
        "updatedAt" : "2015-11-30T19:52:11Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "167e1874-c96b-402e-889b-48eb063e1de9",
        "parentId" : "4895a41c-4f23-4e8a-828b-0ea26071b2cd",
        "authorId" : "541d4cba-fc4b-4592-b84c-2ecac3de1e07",
        "body" : "@mikedanese , The nodeShouldRunDaemonPod function is also used by other functions such as addNode, UpdateNode and updateDaemonSetStatus, in those functions, they don't need to check node.Spec.Unschedulable and api.IsNodeReady(&node). This is the reason I remove this two lines from nodeShouldRunDaemonPod function. Thanks\n",
        "createdAt" : "2015-11-23T19:41:47Z",
        "updatedAt" : "2015-11-30T19:52:11Z",
        "lastEditedBy" : "541d4cba-fc4b-4592-b84c-2ecac3de1e07",
        "tags" : [
        ]
      },
      {
        "id" : "07b6698d-6a92-4e31-855b-d05d77d1a2be",
        "parentId" : "4895a41c-4f23-4e8a-828b-0ea26071b2cd",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why do they not need to check node.Spec.Unschedulable and api.IsNodeReady(&node)? This breaks the other usages of updateDaemonSetStatus\n",
        "createdAt" : "2015-11-29T02:05:00Z",
        "updatedAt" : "2015-11-30T19:52:11Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7756ce8d5e8c5c908f79cf038c94eebf22f785f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +379,383 @@\tfor _, node := range nodeList.Items {\n\t\tshouldRun := nodeShouldRunDaemonPod(&node, ds)\n\n\t\tdaemonPods, isRunning := nodeToDaemonPods[node.Name]\n"
  },
  {
    "id" : "2a0f90f1-ed0f-4f6f-ba98-f2e4f98b6ffb",
    "prId" : 15939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "parentId" : null,
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "`ix` does seem to be used internally. However, `i` is referenced and is what is passed in as the value to `ix`. Is `ix` maybe supposed to be used internally?\n",
        "createdAt" : "2015-10-21T18:32:03Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      },
      {
        "id" : "d319381e-b7be-42b8-85f8-af3f9258c785",
        "parentId" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This needs to be bounded - we shouldn't be able to open an unbounded number of go-routines.\n",
        "createdAt" : "2015-10-21T20:18:09Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "93116bf1-526d-45ba-91f9-35f33bea2137",
        "parentId" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "@ashcrow @smarterclayton Great thanks for your review, I have fixed it and repushed.\n",
        "createdAt" : "2015-10-22T02:43:07Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      },
      {
        "id" : "1a76afa8-c312-4e43-b9ff-40db05665f36",
        "parentId" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "@mqliang looking better!! I agree with @smarterclayton though and there should be a limiting factor on the amount of goroutines that are started so that there is not a chance of bursting a massive amount (not likely but possible).\n",
        "createdAt" : "2015-10-22T14:05:01Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      },
      {
        "id" : "0a3df416-bf92-4268-969d-f281c96fde92",
        "parentId" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@mqliang look at how BurstReplicas is used in the replication controller\n\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/controller/replication/replication_controller.go#L369-L371\n",
        "createdAt" : "2015-10-22T15:15:50Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "7671c195-5f5e-41c7-9d2b-3240ddda952e",
        "parentId" : "5483a357-8361-4b6a-b98e-fc76f0f053ee",
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "@ashcrow @mikedanese @smarterclayton \nGreat thanks for your review and help!  I benefit a lot!\n",
        "createdAt" : "2015-10-22T15:37:45Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d87a1de99de5ac4bb2cef48781f63f46b91f075",
    "line" : null,
    "diffHunk" : "@@ -1,1 +431,435 @@\tcreateWait.Add(createDiff)\n\tfor i := 0; i < createDiff; i++ {\n\t\tgo func(ix int) {\n\t\t\tdefer createWait.Done()\n\t\t\tif err := dsc.podControl.CreatePodsOnNode(nodesNeedingDaemonPods[ix], ds.Namespace, ds.Spec.Template, ds); err != nil {"
  },
  {
    "id" : "66c58591-b92e-404b-89a6-ad6f341e8ad2",
    "prId" : 15939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "138e5f3d-d39a-4df1-9c12-9be7c2ce0a57",
        "parentId" : null,
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "Same note as above.\n",
        "createdAt" : "2015-10-21T18:32:24Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d87a1de99de5ac4bb2cef48781f63f46b91f075",
    "line" : null,
    "diffHunk" : "@@ -1,1 +446,450 @@\tdeleteWait.Add(deleteDiff)\n\tfor i := 0; i < deleteDiff; i++ {\n\t\tgo func(ix int) {\n\t\t\tdefer deleteWait.Done()\n\t\t\tif err := dsc.podControl.DeletePod(ds.Namespace, podsToDelete[ix], ds); err != nil {"
  },
  {
    "id" : "df33d18a-f14e-490f-8aaa-0ad7c7579302",
    "prId" : 15939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d19ca4bf-2afb-45a7-b115-dc1cc792d3e8",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "shouldn't we createWait at the bottom of the func (where we deleteWait)? why can't we create and delete in parallel?\n",
        "createdAt" : "2015-10-29T17:52:19Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "d3218d5c-e307-427c-973a-003cac38161d",
        "parentId" : "d19ca4bf-2afb-45a7-b115-dc1cc792d3e8",
        "authorId" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "body" : "@mikedanese  `dsc.burstReplicas` is set as 500(assuming it is a reasonable value), just as ReplicationController do, which mean there are at most 500 parallel requests. However, ReplicationController could create **_or**_ delete pods  in one sync, but DaemonSetController could create **_and**_ delete  pods in one sync, 1000 parallel requests seems too high. We need set  `dsc.burstReplicas` as 250, or begin delete until all creation finished.\n",
        "createdAt" : "2015-10-30T02:07:45Z",
        "updatedAt" : "2015-12-26T13:30:48Z",
        "lastEditedBy" : "fa03ed6a-9d2a-44b6-8438-e21ee4a2ce4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d87a1de99de5ac4bb2cef48781f63f46b91f075",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +440,444 @@\t\t}(i)\n\t}\n\tcreateWait.Wait()\n\n\tglog.V(4).Infof(\"Pods to delete for daemon set %s: %+v, deleting %d\", ds.Name, podsToDelete, deleteDiff)"
  },
  {
    "id" : "2d9cea5b-cdee-4ace-a100-6cfa701e39d8",
    "prId" : 14896,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9fc5538-e99b-4afa-8c78-5b7fc9a0b9f9",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "The reason I did this was so unittesting is easier. Please either add a similar unittest, or just invoke the function directly\n",
        "createdAt" : "2015-10-01T21:02:54Z",
        "updatedAt" : "2015-10-04T06:31:17Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "2e4cda11-f27d-4cb6-af68-3d5a9c2c40d8",
        "parentId" : "c9fc5538-e99b-4afa-8c78-5b7fc9a0b9f9",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Added a similar unittest.\n",
        "createdAt" : "2015-10-04T06:27:48Z",
        "updatedAt" : "2015-10-04T06:31:17Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "723cb73057bd1fee301acb296c2fd467f5375197",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +167,171 @@\t)\n\tdsc.syncHandler = dsc.syncDaemonSet\n\tdsc.podStoreSynced = dsc.podController.HasSynced\n\treturn dsc\n}"
  },
  {
    "id" : "74846ecc-b6da-4cd1-a5d8-b0f697efaa0c",
    "prId" : 13182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5334aaaa-ad4f-4996-9140-3c6954edde8d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Probably you should glog.Errorf() (or at least Infof) this condition?\n",
        "createdAt" : "2015-09-11T07:08:09Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9a52d8af1cd194b111ffedfe118fd65123130b",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +215,219 @@\t\treturn nil\n\t}\n\t// More than two items in this list indicates user error. If two daemon\n\t// sets overlap, sort by creation timestamp, subsort by name, then pick\n\t// the first."
  }
]