[
  {
    "id" : "f96389b6-acd7-4888-b32a-10346d528f94",
    "prId" : 46577,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46577#pullrequestreview-42082941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f589f23c-b101-4a9c-a837-4cf5fe923cf7",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "I will try to move the `event number` check to `syncAndValidateDaemonSets` in https://github.com/kubernetes/kubernetes/issues/46629 and then if the `event number` is greater than 0, check `event reason` after `syncAndValidateDaemonSets`, will post a PR once this get merged.",
        "createdAt" : "2017-06-05T14:15:53Z",
        "updatedAt" : "2017-06-05T22:46:57Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "9f53404d-d246-4ae2-879b-1dee5ec75cae",
        "parentId" : "f589f23c-b101-4a9c-a837-4cf5fe923cf7",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "+1",
        "createdAt" : "2017-06-05T16:05:46Z",
        "updatedAt" : "2017-06-05T22:46:57Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b311fefba9cc106ed1a8cebc6c61e32814fd9e5",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +564,568 @@\tsyncAndValidateDaemonSets(t, manager, ds, podControl, 1, 0)\n\t// we do not expect any event for insufficient free resource\n\tif len(manager.fakeRecorder.Events) != 0 {\n\t\tt.Fatalf(\"unexpected events, got %v, expected %v: %+v\", len(manager.fakeRecorder.Events), 0, manager.fakeRecorder.Events)\n\t}"
  },
  {
    "id" : "f260045d-60c3-4f4c-a376-86b1028906d9",
    "prId" : 45649,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45649#pullrequestreview-37998311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a26b8c22-ac4f-4773-a3f5-7cc3de0da07b",
        "parentId" : null,
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "Please add tests for all use cases.",
        "createdAt" : "2017-05-14T10:02:35Z",
        "updatedAt" : "2017-06-01T00:47:37Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "813d6817-c8ba-4faa-a833-50a41a0ff461",
        "parentId" : "a26b8c22-ac4f-4773-a3f5-7cc3de0da07b",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Added a test when some conditions are false; in this PR, user's case is about out of disk but our logic does not tight to it.\r\n\r\nI'll open another PR for resources changed, not solution for that case now.",
        "createdAt" : "2017-05-14T11:59:34Z",
        "updatedAt" : "2017-06-01T00:47:37Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "75eb9b4434b57d0560ad96c973a430df8f9f8ef5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1220,1224 @@\t\t\tshouldEnqueue: true,\n\t\t},\n\t\t{\n\t\t\ttest: \"Node conditions changed\",\n\t\t\toldNode: func() *v1.Node {"
  },
  {
    "id" : "add56409-bb19-41cc-9838-2ba7fdfa0a96",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25639924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056e4f63-f028-493b-8b10-c411f3b72f56",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`controllerKind` instead of `\"DaemonSet\"`?",
        "createdAt" : "2017-03-07T18:59:20Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c097bc4b-6199-4de6-a749-b70a6b1b3b4b",
        "parentId" : "056e4f63-f028-493b-8b10-c411f3b72f56",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "In general, it's good practice to make unit test expected values hard-coded whenever possible. This helps to avoid problems being hidden due to tests that are actually tautologies: \"check that A == B but actually both come from C, so the test passes even if C is wrong.\"\r\n\r\nIn particular, having hard-coded values in this test saved me in the CronJob PR when I rebased and someone had renamed a package on import. That actually made `controllerKind` use the wrong `SchemeGroupVersion`, but this test caught it.",
        "createdAt" : "2017-03-07T19:39:16Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "b25c02c1-18c3-407d-82e5-2e70bb54b6ff",
        "parentId" : "056e4f63-f028-493b-8b10-c411f3b72f56",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Thanks for the explanation ",
        "createdAt" : "2017-03-07T21:46:55Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +287,291 @@\t\t\tt.Errorf(\"controllerRef.APIVersion = %q, want %q\", got, want)\n\t\t}\n\t\tif got, want := controllerRef.Kind, \"DaemonSet\"; got != want {\n\t\t\tt.Errorf(\"controllerRef.Kind = %q, want %q\", got, want)\n\t\t}"
  },
  {
    "id" : "aae77c0f-eeae-4950-8ad8-c8a062a7360e",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25603493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab439f4-73b5-46fb-ba1b-09b404051af6",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "also check the items in the queue ",
        "createdAt" : "2017-03-07T19:16:49Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "7d533957-5ef7-4c34-9795-60dcb63f3fec",
        "parentId" : "cab439f4-73b5-46fb-ba1b-09b404051af6",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Fixed in upcoming push to the PR.",
        "createdAt" : "2017-03-07T19:53:30Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +1326,1330 @@\tmanager.addPod(pod)\n\tif got, want := manager.queue.Len(), 2; got != want {\n\t\tt.Fatalf(\"queue.Len() = %v, want %v\", got, want)\n\t}\n\tif got, want := getQueuedKeys(manager.queue), []string{\"default/foo1\", \"default/foo2\"}; !reflect.DeepEqual(got, want) {"
  },
  {
    "id" : "78b0a692-3ccc-4a9d-804a-e1a46568b2de",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25603493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab944fef-0538-48ab-8744-58d862fa162e",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "ditto",
        "createdAt" : "2017-03-07T19:19:47Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e65eca3d-bdf9-4e2f-b0f7-af5858a85dcf",
        "parentId" : "ab944fef-0538-48ab-8744-58d862fa162e",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Fixed in upcoming push to the PR.",
        "createdAt" : "2017-03-07T19:53:35Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 508,
    "diffHunk" : "@@ -1,1 +1402,1406 @@\tmanager.updatePod(&prev, pod)\n\tif got, want := manager.queue.Len(), 2; got != want {\n\t\tt.Fatalf(\"queue.Len() = %v, want %v\", got, want)\n\t}\n\tif got, want := getQueuedKeys(manager.queue), []string{\"default/foo1\", \"default/foo2\"}; !reflect.DeepEqual(got, want) {"
  },
  {
    "id" : "281b6acc-8524-48d9-a2c7-99d9e7641462",
    "prId" : 42173,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42173#pullrequestreview-25642356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a36863-9d88-421a-80a7-6836d4707ff6",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Isn't this adopt rather than release?",
        "createdAt" : "2017-03-07T19:26:20Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "358993bc-8041-420a-9d87-6bd7616f9f35",
        "parentId" : "e9a36863-9d88-421a-80a7-6836d4707ff6",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "The name might be confusing. It is testing the case that a pod *was* released and we are observing the update event. You're right that we are expecting the reaction to be \"queue for potential adoption\".",
        "createdAt" : "2017-03-07T19:52:17Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      },
      {
        "id" : "7788ebfa-6df7-40a1-8749-7eb3ec1f8dfe",
        "parentId" : "e9a36863-9d88-421a-80a7-6836d4707ff6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "The new name looks good",
        "createdAt" : "2017-03-07T21:56:51Z",
        "updatedAt" : "2017-03-08T00:42:35Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "fac372d0905defdd32e25da1bdeb446dce15bf9c",
    "line" : 543,
    "diffHunk" : "@@ -1,1 +1437,1441 @@\tpod.OwnerReferences = nil\n\tbumpResourceVersion(pod)\n\tmanager.updatePod(&prev, pod)\n\tif got, want := manager.queue.Len(), 2; got != want {\n\t\tt.Fatalf(\"queue.Len() = %v, want %v\", got, want)"
  },
  {
    "id" : "ecd631a7-01e9-419e-ad31-2f916b4f2a9d",
    "prId" : 28803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4da9a110-d66a-4825-a176-a8b38f030a6c",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@davidopp should the daemonset controller take into account \"requirdDuringSchedulingIgnoredDuringExecution\" node affinity? Or should it only take into account \"requirdDuringSchedulingRequiredDuringExecution\"?\n",
        "createdAt" : "2016-07-12T23:00:41Z",
        "updatedAt" : "2016-07-13T12:51:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "994c33ad-af85-465f-9939-d644e9238b3e",
        "parentId" : "4da9a110-d66a-4825-a176-a8b38f030a6c",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "It should take both into account. requiredDuringScheduling means the condition is required in order for the pod to be scheduled onto the node. \n",
        "createdAt" : "2016-07-13T07:10:05Z",
        "updatedAt" : "2016-07-13T12:51:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "296ee4b2-91a2-47ff-b503-bc55535093d2",
        "parentId" : "4da9a110-d66a-4825-a176-a8b38f030a6c",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "Do you want me to add a test for second option?\n",
        "createdAt" : "2016-07-13T12:11:29Z",
        "updatedAt" : "2016-07-13T12:51:50Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "17958b2f-d959-4761-bfe3-f76653c95add",
        "parentId" : "4da9a110-d66a-4825-a176-a8b38f030a6c",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@davidopp I'm asking because we have so far avoided allowing DaemonSet placement to be affected by things with the works \"schedule\" in them (e.g. node unschedulable). Why is this different?\n",
        "createdAt" : "2016-07-13T15:02:47Z",
        "updatedAt" : "2016-07-13T15:02:47Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "55729829-c134-4b79-b8c2-be21d05d54d6",
        "parentId" : "4da9a110-d66a-4825-a176-a8b38f030a6c",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I think node unschedulable is different because that's a property of the node that isn't really under the control of the person who creates the DaemonSet. Node affinity is something the person who creates the DaemonSet would have to set explicitly as a property of the DaemonSet, so it seems we should obey what they request there. Does that sound reasonable? \n",
        "createdAt" : "2016-07-13T19:32:20Z",
        "updatedAt" : "2016-07-13T19:32:20Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "528bf7af3a454e5210a72ac8e021bb77927a7f8d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +570,574 @@\taffinity := map[string]string{\n\t\tapi.AffinityAnnotationKey: fmt.Sprintf(`\n\t\t\t{\"nodeAffinity\": { \"requiredDuringSchedulingIgnoredDuringExecution\": {\n\t\t\t\t\"nodeSelectorTerms\": [{\n\t\t\t\t\t\"matchExpressions\": [{"
  }
]