[
  {
    "id" : "5a9575c0-95bd-494c-bbab-4c08f6e1e37d",
    "prId" : 66476,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66476#pullrequestreview-139889751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9475017c-542e-4dd2-812d-21f63af6888f",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I feel like this is bound to happen again. Can you do something like\r\n```go\r\nif outerErr := err; errors.IsAlreadExists(outerErr) {\r\n  ...\r\n  return outerErr\r\n}\r\n```",
        "createdAt" : "2018-07-24T13:30:35Z",
        "updatedAt" : "2018-08-08T20:54:52Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a93ea43e15bb44b8eccde3a8380dd1761b382bb2",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +338,342 @@\t\t}\n\t\t// Check if we already created it\n\t\tdone, matchErr := Match(ds, existedHistory)\n\t\tif matchErr != nil {\n\t\t\treturn nil, matchErr"
  },
  {
    "id" : "72defc9e-0e9d-4a41-938f-5d3ea54d9a13",
    "prId" : 59883,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59883#pullrequestreview-99010088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f889857-4b94-40de-9985-75019f1e100b",
        "parentId" : null,
        "authorId" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "body" : "log",
        "createdAt" : "2018-02-23T18:44:08Z",
        "updatedAt" : "2018-02-23T18:51:05Z",
        "lastEditedBy" : "443f9b92-20b0-45c2-a13f-20c6f64f89eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8ec4f9e953c4898005f1827ead07ae1806a572",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +376,380 @@\t\t\t// The controller handles this via the hash.\n\t\t\tgeneration, err := util.GetTemplateGeneration(ds)\n\t\t\tif err != nil {\n\t\t\t\tgeneration = nil\n\t\t\t}"
  },
  {
    "id" : "c15baffe-855c-402a-bc2e-29e490555bc9",
    "prId" : 47075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47075#pullrequestreview-43316526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edef5d73-db60-48f9-997a-7c6f487e3639",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Perhaps you can call [CreateTwoWayMergePatch](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/strategicpatch/patch.go#L94) to create the patch.",
        "createdAt" : "2017-06-06T20:27:23Z",
        "updatedAt" : "2017-06-10T17:52:43Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6e19e8a9-6d54-4264-8cc6-7c05297b834e",
        "parentId" : "edef5d73-db60-48f9-997a-7c6f487e3639",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This needs to be a replace patch, not a merge patch (we don't want to merge two revisions of DaemonSet when rolling back). We can get a merge patch and manually insert a `$patch: replace` to it, but that's manual too, and doesn't look better than current implementation. ",
        "createdAt" : "2017-06-06T21:38:03Z",
        "updatedAt" : "2017-06-10T17:52:43Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "86ddf88c-6eae-47b1-9fa6-a0b4b05436e6",
        "parentId" : "edef5d73-db60-48f9-997a-7c6f487e3639",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "+1 CreateTwoWayMergePatch would require us to apply all patches in the history to get to a particular revision.",
        "createdAt" : "2017-06-06T23:02:10Z",
        "updatedAt" : "2017-06-10T17:52:43Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "dccf7e86-6b16-4e00-95c2-d9e8d6c044ed",
        "parentId" : "edef5d73-db60-48f9-997a-7c6f487e3639",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Needs a unit test.",
        "createdAt" : "2017-06-11T10:34:24Z",
        "updatedAt" : "2017-06-11T10:34:24Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b8f91e549f73bef04ea3f76335fd94b40596a10",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +309,313 @@// PodSpecTemplate. We can modify this later to encompass more state (or less) and remain compatible with previously\n// recorded patches.\nfunc getPatch(ds *extensions.DaemonSet) ([]byte, error) {\n\tdsBytes, err := json.Marshal(ds)\n\tif err != nil {"
  },
  {
    "id" : "a6cae3df-ede9-4308-9c6b-57d159a89e59",
    "prId" : 47075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47075#pullrequestreview-43500381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43f37ca9-59f2-4a99-9096-6dc0735a2e1b",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "What else does spec has at this point except template?",
        "createdAt" : "2017-06-11T10:34:02Z",
        "updatedAt" : "2017-06-11T10:34:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "69013ced-ab12-4f2f-890b-ba56f5f8fad9",
        "parentId" : "43f37ca9-59f2-4a99-9096-6dc0735a2e1b",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "For DaemonSet history we only care about template changes, and when rolling back, we only roll back templates",
        "createdAt" : "2017-06-12T17:03:21Z",
        "updatedAt" : "2017-06-12T17:03:21Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b8f91e549f73bef04ea3f76335fd94b40596a10",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +327,331 @@\tspecCopy[\"template\"] = template\n\ttemplate[\"$patch\"] = \"replace\"\n\tobjCopy[\"spec\"] = specCopy\n\tpatch, err := json.Marshal(objCopy)\n\treturn patch, err"
  },
  {
    "id" : "fc8a6170-b52c-4fe1-9499-1326dd9561b1",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41018715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Why do we need to update these with an extra label?",
        "createdAt" : "2017-05-20T15:58:36Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "2a2ff539-06da-4ca7-a1a9-cf583038845a",
        "parentId" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "For adoption of manually created controller history. Can remove this if we don't want to support it. ",
        "createdAt" : "2017-05-23T22:52:51Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "a45d65a3-01c7-4771-9c3b-67a0f8b7feca",
        "parentId" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "The DS should already be able to adopt any existing history based on the selector set by the user. Do you want to avoid being adopted by a StatefulSet once you orphan?",
        "createdAt" : "2017-05-23T23:06:35Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "bd5dd4fd-4afb-4b5f-8589-bf1ee19e7b18",
        "parentId" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "The `history` here are only those which are selected and controlled (owner ref) by the DS. Adding the label to the history here because current (new) history needs the unique label so that DS can label its pods.",
        "createdAt" : "2017-05-24T06:16:27Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "7a39bbee-5872-4eda-ae40-15d1530a8573",
        "parentId" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "These are metadata labels, do you mean to add them in .data instead? ",
        "createdAt" : "2017-05-26T14:55:30Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "ab19f783-7c97-4ddb-bddb-1ba0714b95f2",
        "parentId" : "a4f9352d-5133-481f-9c87-f670de324a40",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "No, we can't update `.data`. ",
        "createdAt" : "2017-05-30T17:27:21Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +90,94 @@\t\t// Add the unique label if it's not already added to the history\n\t\t// We use history name instead of computing hash, so that we don't need to worry about hash collision\n\t\tif _, ok := history.Labels[extensions.DefaultDaemonSetUniqueLabelKey]; !ok {\n\t\t\tvar clone interface{}\n\t\t\tclone, err = api.Scheme.DeepCopy(history)"
  },
  {
    "id" : "bb62b598-0fbe-4c98-aa67-7fa793d169e7",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41763739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "090153f1-24a0-4678-8be3-5229d0391453",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Yes, it is. If you can't find it, you return the error and retry later?",
        "createdAt" : "2017-05-20T16:01:46Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6b7c02ac-44ed-4f9a-a7db-825ace8cc151",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "But you won't find it in cache when you hit this case, right?",
        "createdAt" : "2017-05-23T22:53:28Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "764bbd23-e0a6-4ee5-b715-a13e2ad2f10f",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Why not?",
        "createdAt" : "2017-05-23T23:12:11Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "bbb8ea90-0fe0-4bff-b8c7-a54425fbc2a7",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "And if you don't find it, you already retry.",
        "createdAt" : "2017-05-23T23:12:39Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "70cef4eb-740f-4b4c-874e-64d818b6cb8d",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> Why not?\r\n\r\nBecause we only create new history (call `snapshot`) when an existing one isn't found.",
        "createdAt" : "2017-05-24T06:17:42Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "efdc85e4-8ebb-4019-a2f1-0a8acee76f8a",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "You just got a AlreadyExists error - I haven't looked closely, what am i missing? ",
        "createdAt" : "2017-05-26T15:01:05Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e1e5323c-cdbe-4823-8292-ce1b90f473b3",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "AlreadyExists is from API server. If we already saw this in cache (when trying to find current history of a DaemonSet) we wouldn't try to create it and would just reuse the existing one instead. ",
        "createdAt" : "2017-05-30T17:15:24Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d23d1968-9432-44f2-a45a-2989b7c92fac",
        "parentId" : "090153f1-24a0-4678-8be3-5229d0391453",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Note that even the API server is using its own cache so this may still be a stale read.",
        "createdAt" : "2017-06-02T12:41:15Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +338,342 @@\thistory, err = dsc.kubeClient.AppsV1beta1().ControllerRevisions(ds.Namespace).Create(history)\n\tif errors.IsAlreadyExists(err) {\n\t\t// TODO: Is it okay to get from historyLister?\n\t\texistedHistory, getErr := dsc.kubeClient.AppsV1beta1().ControllerRevisions(ds.Namespace).Get(name, metav1.GetOptions{})\n\t\tif getErr != nil {"
  },
  {
    "id" : "70bc9552-5c62-4408-b226-3c447a1fb240",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-39889054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2da17ff2-2f44-405e-878b-20d2e828cd34",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "You need to validate decrementing, then doing this should be fine.",
        "createdAt" : "2017-05-20T16:03:59Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "7c07af0b-65f3-47fd-a9d1-3fad6c229b26",
        "parentId" : "2da17ff2-2f44-405e-878b-20d2e828cd34",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I feel it's safer to get from API server, and we only do this call upon name collisions so the performance impact will be low ",
        "createdAt" : "2017-05-23T22:53:30Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 346,
    "diffHunk" : "@@ -1,1 +353,357 @@\n\t\t// Handle name collisions between different history\n\t\t// TODO: Is it okay to get from dsLister?\n\t\tcurrDS, getErr := dsc.kubeClient.ExtensionsV1beta1().DaemonSets(ds.Namespace).Get(ds.Name, metav1.GetOptions{})\n\t\tif getErr != nil {"
  },
  {
    "id" : "ed795ada-3289-4e07-8835-33b70cadd3f4",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41835896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6806f3a-c953-407e-befa-97e9b922ec24",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "We are going to invalidate label updates during status updates at some point in the future and this will break.",
        "createdAt" : "2017-06-02T12:34:19Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "14e5333a-189f-4a51-9098-931170c913c4",
        "parentId" : "a6806f3a-c953-407e-befa-97e9b922ec24",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "https://github.com/kubernetes/kubernetes/issues/20978",
        "createdAt" : "2017-06-02T12:35:03Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "030604d4-b657-471a-9b0a-14291297ab50",
        "parentId" : "a6806f3a-c953-407e-befa-97e9b922ec24",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Will follow up",
        "createdAt" : "2017-06-02T17:26:59Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +156,160 @@\t\t}\n\t\ttoUpdate.Labels[extensions.DefaultDaemonSetUniqueLabelKey] = cur.Labels[extensions.DefaultDaemonSetUniqueLabelKey]\n\t\t_, err = dsc.kubeClient.ExtensionsV1beta1().DaemonSets(ds.Namespace).UpdateStatus(toUpdate)\n\t}\n\treturn cur, old, err"
  },
  {
    "id" : "b40789bb-50cb-4e29-9406-7bbae3fbe192",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41837212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ca4c9a2-6873-42bb-99cf-31cb62068874",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I am wondering if it's going to be cleaner to construct the history once and then pass the references in `manage` and `cleanupHistory`, instead of reconstructing it for each one of them.",
        "createdAt" : "2017-06-02T12:59:36Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6ad3c14f-05e4-4c26-b7d5-af0b1229c02a",
        "parentId" : "9ca4c9a2-6873-42bb-99cf-31cb62068874",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Sounds good, will follow up ",
        "createdAt" : "2017-06-02T17:32:41Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\treturn fmt.Errorf(\"couldn't get node to daemon pod mapping for daemon set %q: %v\", ds.Name, err)\n\t}\n\t_, old, err := dsc.constructHistory(ds)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to construct revisions of DaemonSet: %v\", err)"
  },
  {
    "id" : "5a19bc60-c697-4fe2-8406-3442b08d31a9",
    "prId" : 45924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45924#pullrequestreview-41836270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a962fb1-70bc-4685-b13d-9a80d37bbbfb",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Why do we need this actually?",
        "createdAt" : "2017-06-02T13:00:53Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "d00b1fa4-e504-4cc1-a7b6-bac2f234ba95",
        "parentId" : "1a962fb1-70bc-4685-b13d-9a80d37bbbfb",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It's easier for us to check if pods are up-to-date without looking though all history again when calculating DS status ",
        "createdAt" : "2017-06-02T17:28:43Z",
        "updatedAt" : "2017-06-03T07:53:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "85ec49c9bb655cb2f2a7d33598780db4f2500b0c",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\t}\n\t}\n\t// Label ds with current history's unique label as well\n\tif ds.Labels[extensions.DefaultDaemonSetUniqueLabelKey] != cur.Labels[extensions.DefaultDaemonSetUniqueLabelKey] {\n\t\tvar clone interface{}"
  },
  {
    "id" : "9ce910a5-47a4-4fe6-804d-c4cb6607f927",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-21375588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "858a3936-f197-4bcf-93ea-6c42a8f6f724",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Won't you end up deleting pods before they actually get a chance to become available? For example, a DaemonSet with MinReadySeconds=60 will spin up a new Pod, the DS will be resynced and in the next iteration which most likely will be sooner than 60s, the new Pod will be deleted.",
        "createdAt" : "2017-02-10T10:12:31Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "622c6ea6-c7d4-460d-b30d-6348fc144026",
        "parentId" : "858a3936-f197-4bcf-93ea-6c42a8f6f724",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "I'm deleting only old pods. When new pod is created(with new hash) I will not touch it.",
        "createdAt" : "2017-02-10T10:35:17Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "a35810a8-7920-4790-ad59-9febc6d41697",
        "parentId" : "858a3936-f197-4bcf-93ea-6c42a8f6f724",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Yes, only _old_ unavailable pods are deleted here. @kargakis are you suggesting it's safer to just kill old pods that are not running (i.e. don't kill the running but unavailable old pods)? Or we don't care since it's old?",
        "createdAt" : "2017-02-10T22:13:39Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "766bb70a-ec11-4406-80f6-d337b8218488",
        "parentId" : "858a3936-f197-4bcf-93ea-6c42a8f6f724",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "If we can kill it either because it's allowed by our budget or is a duplicate, we won't care. ",
        "createdAt" : "2017-02-11T02:00:58Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@\tvar podsToDelete []string\n\tglog.V(4).Infof(\"Marking all unavailable old pods for deletion\")\n\tfor _, pod := range oldUnavailablePods {\n\t\t// Skip terminating pods. We won't delete them again\n\t\tif pod.DeletionTimestamp != nil {"
  },
  {
    "id" : "d1c2df76-ae4e-4287-92af-cfc98a6ee8b8",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-23934609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a181e50-422e-421c-ad52-bea19b878e83",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "getNodesToDaemonPods does not filter out terminating pods and I don't think IsPodAvailable filter them out either. You should consider them as unavailable so before this check you probably want to continue on deletiontimestamp != nil.",
        "createdAt" : "2017-02-27T08:50:22Z",
        "updatedAt" : "2017-02-27T08:50:22Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +121,125 @@\t\tavailable := false\n\t\tfor _, pod := range daemonPods {\n\t\t\tif v1.IsPodAvailable(pod, ds.Spec.MinReadySeconds, metav1.Now()) {\n\t\t\t\tavailable = true\n\t\t\t\tbreak"
  }
]