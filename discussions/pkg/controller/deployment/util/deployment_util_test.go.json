[
  {
    "id" : "52cd7fe3-2a4c-4594-a50a-2d643b717024",
    "prId" : 44672,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44672#pullrequestreview-33623649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7afb99c-a594-4330-abb9-84219174527f",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> hence both rollout status and ProgressDeadlineSeconds will not be successful in cases where a 1-pod Deployment never becomes successful because its Pod is never run\r\n\r\nAdd a test case for this",
        "createdAt" : "2017-04-19T21:38:10Z",
        "updatedAt" : "2017-04-22T15:18:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1e8356265186a2a8c1cef184e74bb75d1058fa9",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +960,964 @@\t\texpected bool\n\t}{\n\t\t{\n\t\t\tname: \"not complete: min but not all pods become available\",\n"
  },
  {
    "id" : "15b2646f-08e9-487a-bb01-8998448a9202",
    "prId" : 43732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43732#pullrequestreview-31415980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d3b4158-c326-4bf8-8586-d3b8c537c6ae",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "...and move these test cases to `TestResolveFenceposts` after moving the check to `ResolveFenceposts`",
        "createdAt" : "2017-04-06T21:01:58Z",
        "updatedAt" : "2017-04-28T05:32:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6aadd2b7e5d3db03535dddf2ba92a566098bd8b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1152,1156 @@}\n\nfunc TestMaxUnavailable(t *testing.T) {\n\tdeployment := func(replicas int32, maxUnavailable intstr.IntOrString) extensions.Deployment {\n\t\treturn extensions.Deployment{"
  },
  {
    "id" : "b2c5ca11-3512-4949-b793-218f1149ab23",
    "prId" : 43732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43732#pullrequestreview-32598663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3e16e66-f545-49f7-95a5-3b246e535a19",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Thanks for adding a test here. Would you also add test cases for when max unavailable is specified with `%`, since this tests `MaxUnavailable`? ",
        "createdAt" : "2017-04-07T18:53:00Z",
        "updatedAt" : "2017-04-28T05:32:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d9619937-6f42-4c8f-a5c8-a7093e2df289",
        "parentId" : "d3e16e66-f545-49f7-95a5-3b246e535a19",
        "authorId" : "8f672b1e-0513-4363-b383-ad8d8de0cdb9",
        "body" : "@janetkuo I think the \"%\" case covered in the ResolveFenceposts tests",
        "createdAt" : "2017-04-13T10:39:13Z",
        "updatedAt" : "2017-04-28T05:32:47Z",
        "lastEditedBy" : "8f672b1e-0513-4363-b383-ad8d8de0cdb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6aadd2b7e5d3db03535dddf2ba92a566098bd8b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1222,1226 @@\tfor _, test := range tests {\n\t\tt.Log(test.name)\n\t\tmaxUnavailable := MaxUnavailable(test.deployment)\n\t\tif test.expected != maxUnavailable {\n\t\t\tt.Fatalf(\"expected:%v, got:%v\", test.expected, maxUnavailable)"
  },
  {
    "id" : "17135d75-2d4f-4b90-85b0-b35f3a8983c7",
    "prId" : 43508,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43508#pullrequestreview-29226303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51ce57c3-d49c-4eaf-a05e-0d8644bbb771",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Rename this test to `TestGetOldRSs`",
        "createdAt" : "2017-03-27T16:01:09Z",
        "updatedAt" : "2017-03-29T16:13:42Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "49161d1b18646b2916ec32ceb3f5107bd5033778",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +299,303 @@\nfunc TestGetOldRSs(t *testing.T) {\n\tnewDeployment := generateDeployment(\"nginx\")\n\tnewRS := generateRS(newDeployment)\n\tnewRS.Status.FullyLabeledReplicas = *(newRS.Spec.Replicas)"
  },
  {
    "id" : "d2858e94-e5df-4835-94bf-293ffa12ffbe",
    "prId" : 43508,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43508#pullrequestreview-29770545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e867a4-ea44-49b5-a8e0-54a1de186e13",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "While here can you also rename this test from `TestGetNewRC` to `TestGetNewRS`? Thanks",
        "createdAt" : "2017-03-29T16:06:45Z",
        "updatedAt" : "2017-03-29T16:13:42Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "dce66e89-d406-4aa2-8215-4ec17fee8f1b",
        "parentId" : "20e867a4-ea44-49b5-a8e0-54a1de186e13",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "renamed,  thanks",
        "createdAt" : "2017-03-29T16:16:48Z",
        "updatedAt" : "2017-03-29T16:16:48Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "49161d1b18646b2916ec32ceb3f5107bd5033778",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +295,299 @@\t\t\tt.Errorf(\"In test case %s, expected %#v, got %#v\", test.test, test.expected, rs)\n\t\t}\n\t}\n}\n"
  },
  {
    "id" : "4fc5b95c-bc0e-48fb-a647-5538a9926d5f",
    "prId" : 30011,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc2dffd8-9556-4847-a5b8-4043cc25095a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add a test that does a deep copy of the input, then compares against the input again after calling equalIgnoreHash, to ensure that equalIgnoreHash doesn't modify its inputs?\n",
        "createdAt" : "2016-08-03T20:16:20Z",
        "updatedAt" : "2016-08-03T23:54:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7fbc1081-6e76-480c-ba51-24895144306c",
        "parentId" : "bc2dffd8-9556-4847-a5b8-4043cc25095a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2016-08-03T21:05:58Z",
        "updatedAt" : "2016-08-03T23:54:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d1490a024f9f9c22379bb02b33697f876826897",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +498,502 @@\t\t// Test the same case in reverse order\n\t\trunTest(test.latter, test.former, true)\n\t}\n}\n"
  }
]