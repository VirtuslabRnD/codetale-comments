[
  {
    "id" : "1491d823-6cdc-4146-a874-e3e3646b4331",
    "prId" : 97407,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97407#pullrequestreview-566347375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15cccb30-98f0-4307-8f31-4fba2f1e5ca9",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "nit: I don't see name being used as a tie breaker ",
        "createdAt" : "2021-01-12T03:57:30Z",
        "updatedAt" : "2021-01-16T14:26:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e9045dce-c546-4815-ad7a-0b5b45ad497f",
        "parentId" : "15cccb30-98f0-4307-8f31-4fba2f1e5ca9",
        "authorId" : "7f2930b0-e2ed-4518-bcb0-0063fbf96429",
        "body" : "> nit: I don't see name being used as a tie breaker\r\n\r\nwhile, actually \"controller.ReplicaSetsByCreationTimestamp\" itself implements the log of using name as a tie breaker\r\nhttps://github.com/kubernetes/kubernetes/blob/c8f98589208e8c5a0d9262ebd90985acc55d2d5a/pkg/controller/controller_utils.go#L970-L980",
        "createdAt" : "2021-01-12T14:50:29Z",
        "updatedAt" : "2021-01-16T14:26:30Z",
        "lastEditedBy" : "7f2930b0-e2ed-4518-bcb0-0063fbf96429",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2de3507d0f3793031efc0e42aeb57b995b84d96",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +951,955 @@}\n\n// ReplicaSetsByRevision sorts a list of ReplicaSet by revision, using their creation timestamp or name as a tie breaker.\n// By using the creation timestamp, this sorts from old to new replica sets.\ntype ReplicaSetsByRevision []*apps.ReplicaSet"
  },
  {
    "id" : "ba0e0855-9571-4047-b119-6f1945928b1b",
    "prId" : 73096,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73096#pullrequestreview-195816885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2b01086-fa02-4ee3-bb68-6c1c7351a465",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "hello, any particular reason for these changes in comment formatting?\r\n",
        "createdAt" : "2019-01-20T15:25:11Z",
        "updatedAt" : "2019-01-28T19:01:30Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "2a169aa5-54cf-48d6-bad1-5572614b478a",
        "parentId" : "d2b01086-fa02-4ee3-bb68-6c1c7351a465",
        "authorId" : "1d64c6d6-d80c-410e-ad32-a43967da03cf",
        "body" : "Not really. This is just to highlight the different \"reasons\" and fix the golint which requires the first word of a comment matching the variable/func name.\r\nI don't find good examples about adding large comments (for the purpose of explaining variable structure, definitions, background, etc). Do you have any suggestions?   ",
        "createdAt" : "2019-01-22T23:12:56Z",
        "updatedAt" : "2019-01-28T19:01:30Z",
        "lastEditedBy" : "1d64c6d6-d80c-410e-ad32-a43967da03cf",
        "tags" : [
        ]
      },
      {
        "id" : "dce4dd84-1af1-47b9-b5a8-afb6d0f31d51",
        "parentId" : "d2b01086-fa02-4ee3-bb68-6c1c7351a465",
        "authorId" : "1d64c6d6-d80c-410e-ad32-a43967da03cf",
        "body" : "Discussed offline with some other k8s contributers, I reverted this change. Thanks for pointing it out. :smile: ",
        "createdAt" : "2019-01-24T01:01:26Z",
        "updatedAt" : "2019-01-28T19:01:30Z",
        "lastEditedBy" : "1d64c6d6-d80c-410e-ad32-a43967da03cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "14a1e27ddd59ade500fd7d633107ff0ae1c3f214",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +66,70 @@\t//\n\t// Progressing:\n\n\t// ReplicaSetUpdatedReason is added in a deployment when one of its replica sets is updated as part\n\t// of the rollout process."
  },
  {
    "id" : "cdc9c2f5-154b-4656-a9d4-fa2416998b26",
    "prId" : 52951,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52951#pullrequestreview-64793054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8149214-7dfb-4c1c-a022-e5090dfbad11",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "do we need to check if deployment is nil ?",
        "createdAt" : "2017-09-25T04:24:52Z",
        "updatedAt" : "2017-09-25T04:25:03Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "086ab4291aa9e594a54bbab29b04c1d7e7c84193",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +666,670 @@\tsort.Sort(controller.ReplicaSetsByCreationTimestamp(rsList))\n\tfor i := range rsList {\n\t\tif EqualIgnoreHash(&rsList[i].Spec.Template, &deployment.Spec.Template) {\n\t\t\t// In rare cases, such as after cluster upgrades, Deployment may end up with\n\t\t\t// having more than one new ReplicaSets that have the same template as its template,"
  },
  {
    "id" : "5b1e51f6-4f97-431c-8743-d8b66965d0a1",
    "prId" : 49355,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49355#pullrequestreview-51408405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a6a5fdc-8032-4e8d-99a5-bbc5764bf373",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "why do we not have a similar check for newRevision to see if its not empty ?",
        "createdAt" : "2017-07-21T07:49:22Z",
        "updatedAt" : "2017-07-21T08:11:27Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "67bd086e-37ae-4ff3-a2be-d805fd220072",
        "parentId" : "2a6a5fdc-8032-4e8d-99a5-bbc5764bf373",
        "authorId" : "2a56203a-2cc6-4a3a-8366-4fc0a297e568",
        "body" : "@krmayankk there is a possibility when we extract annotations from the RS that it could be empty, we default to \"0\" and move on, but newRevision cannot be nil or non-number so we errorout. ",
        "createdAt" : "2017-07-21T07:56:15Z",
        "updatedAt" : "2017-07-21T08:11:27Z",
        "lastEditedBy" : "2a56203a-2cc6-4a3a-8366-4fc0a297e568",
        "tags" : [
        ]
      }
    ],
    "commit" : "4967bb73421fe57c92ea9ab2f62136288bad1fc6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +266,270 @@\tnewRevisionInt, err := strconv.ParseInt(newRevision, 10, 64)\n\tif err != nil {\n\t\tglog.Warningf(\"Updating replica set revision NewRevision not int %s\", err)\n\t\treturn false\n\t}"
  },
  {
    "id" : "3f407a1a-0690-4ae6-858e-65843f122960",
    "prId" : 43239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43239#pullrequestreview-27682251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d25732d1-4d43-441e-bf45-dd489a6266e3",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "In 1.7, we should probably check deployments with this annotation and clean it up, then remove it from our codebase in 1.8.",
        "createdAt" : "2017-03-16T20:04:18Z",
        "updatedAt" : "2017-03-16T21:52:52Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6155baaf-5c86-49c6-a89c-c06c798af283",
        "parentId" : "d25732d1-4d43-441e-bf45-dd489a6266e3",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Cleanup is being done in this PR so it will begin in 1.6. Filed #43322 for later removal.",
        "createdAt" : "2017-03-17T20:34:40Z",
        "updatedAt" : "2017-03-17T20:50:29Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92f90f12dbc17c8ecdc1b54121d976e17dcd15",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +69,73 @@\tRollbackDone = \"DeploymentRollback\"\n\t// OverlapAnnotation marks deployments with overlapping selector with other deployments\n\t// TODO: Delete this annotation when we no longer need to support a client\n\t//       talking to a server older than v1.6.\n\tOverlapAnnotation = \"deployment.kubernetes.io/error-selector-overlapping-with\""
  },
  {
    "id" : "fe11a010-acf9-48f5-8986-67f624d4c753",
    "prId" : 43239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43239#pullrequestreview-27682251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3a6c991-ab56-4ff7-8ead-0cf1397277a6",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Add when this should be deleted",
        "createdAt" : "2017-03-17T18:44:47Z",
        "updatedAt" : "2017-03-17T18:59:38Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "92ad0ad5-2341-44c5-95fa-490734b3c77f",
        "parentId" : "b3a6c991-ab56-4ff7-8ead-0cf1397277a6",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Filed #43323. Added comment in another commit, which I'll send as a separate PR unless this one requires fixup before merging.",
        "createdAt" : "2017-03-17T20:35:13Z",
        "updatedAt" : "2017-03-17T20:50:29Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92f90f12dbc17c8ecdc1b54121d976e17dcd15",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +661,665 @@\n// ListReplicaSetsInternalV15 is ListReplicaSetsV15 for internalextensions.\n// TODO: Remove the duplicate when call sites are updated to ListReplicaSetsV15.\nfunc ListReplicaSetsInternalV15(deployment *internalextensions.Deployment, getRSList func(string, metav1.ListOptions) ([]*internalextensions.ReplicaSet, error)) ([]*internalextensions.ReplicaSet, error) {\n\tnamespace := deployment.Namespace"
  },
  {
    "id" : "2d82acd7-abc1-46f8-a0c8-f221cab18b71",
    "prId" : 43239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43239#pullrequestreview-27682251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba821fc2-41e6-408a-8a5b-0f4ac8c03630",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Lets add an issue to make sure there is a version skew test that will catch reaping issues in the future.",
        "createdAt" : "2017-03-17T18:51:47Z",
        "updatedAt" : "2017-03-17T18:59:38Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "2999b3d1-ebd0-473b-8806-43fbfba0ad03",
        "parentId" : "ba821fc2-41e6-408a-8a5b-0f4ac8c03630",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Filed #43324.",
        "createdAt" : "2017-03-17T20:43:24Z",
        "updatedAt" : "2017-03-17T20:50:29Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92f90f12dbc17c8ecdc1b54121d976e17dcd15",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +725,729 @@// from v1.5.x (list matching objects by selector) except that it leaves out\n// objects that are explicitly marked as being controlled by something else.\nfunc ListPodsV15(deployment *extensions.Deployment, rsList []*extensions.ReplicaSet, getPodList podListFunc) (*v1.PodList, error) {\n\tnamespace := deployment.Namespace\n\tselector, err := metav1.LabelSelectorAsSelector(deployment.Spec.Selector)"
  },
  {
    "id" : "641c6702-98fd-4636-a62c-ea78a8eeeb51",
    "prId" : 42175,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42175#pullrequestreview-26325359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a0bb20b-7a9d-49db-b08d-1908a382827e",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@enisoc @janetkuo this is going to return empty results for some Deployments after a cluster upgrade (the Deployment controller has yet to adopt all RSs) so it will end up creating duplicate ReplicaSets [again](https://github.com/kubernetes/kubernetes/issues/40415), right? :/ We should probably relax these checks for 1.6. It would also fix the upgrade test issue in https://github.com/kubernetes/kubernetes/issues/42738",
        "createdAt" : "2017-03-10T14:50:31Z",
        "updatedAt" : "2017-03-10T14:50:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "d018f09f-a083-46d0-8741-714c1b4d89e3",
        "parentId" : "3a0bb20b-7a9d-49db-b08d-1908a382827e",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Hm, seems like the controller is making sure to adopt all replica sets first before proceeding to handle them which is good. ",
        "createdAt" : "2017-03-10T14:56:37Z",
        "updatedAt" : "2017-03-10T14:56:37Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8a7686e2-dfac-47ca-b387-4f86a9454586",
        "parentId" : "3a0bb20b-7a9d-49db-b08d-1908a382827e",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "Right, the controller itself now uses a separate code path (ControllerRefManager). This one is only used from outside the controller.",
        "createdAt" : "2017-03-10T17:03:10Z",
        "updatedAt" : "2017-03-10T17:03:10Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c4bcb38fbfd0bfe6d8694d07dc144ce795c2985",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +585,589 @@\t// Only include those whose ControllerRef matches the Deployment.\n\towned := make([]*extensions.ReplicaSet, 0, len(all))\n\tfor _, rs := range all {\n\t\tcontrollerRef := controller.GetControllerOf(rs)\n\t\tif controllerRef != nil && controllerRef.UID == deployment.UID {"
  },
  {
    "id" : "aec3ef7e-e34a-4653-84cc-47378c05f3bb",
    "prId" : 41851,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41851#pullrequestreview-23338940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c70e02-aad0-4095-a511-f75bb7359f13",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@smarterclayton @mfojtik we are going to choose the oldest replica set out of two identical replica sets for now - seems like the sanest thing to do when we end up in such a state (seems possible after cluster upgrades: https://github.com/kubernetes/kubernetes/issues/40415).",
        "createdAt" : "2017-02-22T12:35:58Z",
        "updatedAt" : "2017-02-22T21:29:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "2ce9b676-3143-4e3e-b5e4-f591649c57d3",
        "parentId" : "72c70e02-aad0-4095-a511-f75bb7359f13",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@janetkuo can you add a comment explaining this here?",
        "createdAt" : "2017-02-22T12:37:38Z",
        "updatedAt" : "2017-02-22T21:29:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8ba350a4-78cd-4070-8e9c-6eb3040f6f99",
        "parentId" : "72c70e02-aad0-4095-a511-f75bb7359f13",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "done",
        "createdAt" : "2017-02-22T21:31:10Z",
        "updatedAt" : "2017-02-22T21:31:10Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8506813dcf88d957bcec7cf2d9905b366332b1f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +613,617 @@func FindNewReplicaSet(deployment *extensions.Deployment, rsList []*extensions.ReplicaSet) (*extensions.ReplicaSet, error) {\n\tnewRSTemplate := GetNewReplicaSetTemplate(deployment)\n\tsort.Sort(controller.ReplicaSetsByCreationTimestamp(rsList))\n\tfor i := range rsList {\n\t\tif EqualIgnoreHash(rsList[i].Spec.Template, newRSTemplate) {"
  },
  {
    "id" : "ab7c26b8-ce81-48e2-ba4f-b61ecd2ab35a",
    "prId" : 41851,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41851#pullrequestreview-23206978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33860c01-b8d3-456e-8b35-68d69438b7c4",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I have PR that reworks `FindOldReplicaSets` - the podList is not needed at all. We should simply look at rs.spec.replicas for filtering RSs with and without pods.",
        "createdAt" : "2017-02-22T12:40:46Z",
        "updatedAt" : "2017-02-22T21:29:43Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8506813dcf88d957bcec7cf2d9905b366332b1f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +640,644 @@\t\treturn requiredRSs, allRSs, err\n\t}\n\tfor _, pod := range podList.Items {\n\t\tpodLabelsSelector := labels.Set(pod.ObjectMeta.Labels)\n\t\tfor _, rs := range rsList {"
  },
  {
    "id" : "aacbed10-ad10-4072-8a72-9e937aca61a5",
    "prId" : 41809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41809#pullrequestreview-24390901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6be20e-51eb-4164-b4b1-9e0cd4c56fea",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What if deployment's replicas is greater than 0 but smaller than maxUnavailable? Should we return `*(deployment.Spec.Replicas)` if it's smaller?",
        "createdAt" : "2017-02-24T22:45:54Z",
        "updatedAt" : "2017-03-03T13:13:11Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "08c3790a-8e32-4158-831b-65cbb5b8f929",
        "parentId" : "bb6be20e-51eb-4164-b4b1-9e0cd4c56fea",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Actually, maybe we should handle this in `MinAvailable` and uses `MinAvailable` instead of `*(deployment.Spec.Replicas)-MaxUnavailable(*deployment)` in those status checks?",
        "createdAt" : "2017-02-24T22:49:42Z",
        "updatedAt" : "2017-03-03T13:13:11Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "8faae388-3080-4ebb-8bd9-a83643a03d34",
        "parentId" : "bb6be20e-51eb-4164-b4b1-9e0cd4c56fea",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "MinAvailable is already calling MaxUnavailable so we should better fix it here.",
        "createdAt" : "2017-02-26T15:38:57Z",
        "updatedAt" : "2017-03-03T13:13:11Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "b1abc752-ff3a-4b81-bde9-734c687cbdad",
        "parentId" : "bb6be20e-51eb-4164-b4b1-9e0cd4c56fea",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "IMHO the logic should exist in `func MinAvailable` rather than `func MaxUnavailable`. We have `MaxUnavailable` field in the spec, and `func MaxUnavailable` should return its callers the `int32` value of that field, regardless of the number of replicas; otherwise the returned value is surprising to the callers. OTOH, `func MinAvailable` should return a reasonable min number of replicas that should be available, taking the number of replicas into consideration. ",
        "createdAt" : "2017-03-01T02:38:36Z",
        "updatedAt" : "2017-03-03T13:13:11Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d20ac8766eddde3fdb814aadf7338b0209c66436",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +417,421 @@// MaxUnavailable returns the maximum unavailable pods a rolling deployment can take.\nfunc MaxUnavailable(deployment extensions.Deployment) int32 {\n\tif !IsRollingUpdate(&deployment) || *(deployment.Spec.Replicas) == 0 {\n\t\treturn int32(0)\n\t}"
  },
  {
    "id" : "a640f706-1d43-4d6a-90db-95332cac2784",
    "prId" : 40261,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40261#pullrequestreview-18474922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d366cf7a-951f-4407-9247-5bd3c520eee6",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Would you add a sentence that summarizes what \"complete\" means? Something like:\r\n```go\r\n// DeploymentComplete checks if a deployment is complete, i.e. the deployment has been\r\n// rolled out successfully. A deployment is complete if:\r\n// 1. its desired replicas..., and \r\n// 2. ..\r\n```",
        "createdAt" : "2017-01-25T01:42:13Z",
        "updatedAt" : "2017-01-25T01:44:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "ddf53c23-be1c-4093-a817-5cceefe23a21",
        "parentId" : "d366cf7a-951f-4407-9247-5bd3c520eee6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We'll need to modify docs https://kubernetes.io/docs/user-guide/deployments/#complete-deployment",
        "createdAt" : "2017-01-25T01:42:37Z",
        "updatedAt" : "2017-01-25T01:44:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "58066e0a-4079-4f74-8083-8f305508a08f",
        "parentId" : "d366cf7a-951f-4407-9247-5bd3c520eee6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Do we expose `Complete` state to the users?",
        "createdAt" : "2017-01-25T01:44:03Z",
        "updatedAt" : "2017-01-25T01:44:15Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "836008dd-8ded-42a7-bd71-083cdfb08fbc",
        "parentId" : "d366cf7a-951f-4407-9247-5bd3c520eee6",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "> Would you add a sentence that summarizes what \"complete\" means? Something like:\r\n\r\nThat's what the comment is about already, isn't it clear?\r\n\r\n> We'll need to modify docs https://kubernetes.io/docs/user-guide/deployments/#complete-deployment\r\n\r\nYes, I will open a PR there.\r\n\r\n> Do we expose Complete state to the users?\r\n\r\nNot sure what you mean. We expose a Progressing=True condition with NewReplicaSetAvailable as a reason once a deployment completes.",
        "createdAt" : "2017-01-25T09:12:34Z",
        "updatedAt" : "2017-01-25T09:12:34Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "85641ad8-c0c5-42fb-9875-802927c9b975",
        "parentId" : "d366cf7a-951f-4407-9247-5bd3c520eee6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> We expose a Progressing=True condition with NewReplicaSetAvailable as a reason once a deployment completes.\r\n\r\nI meant that we should also mention this in https://kubernetes.io/docs/user-guide/deployments/#complete-deployment (right now it's documented under failed deployment which makes it less obvious)",
        "createdAt" : "2017-01-25T18:57:42Z",
        "updatedAt" : "2017-01-25T18:57:42Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "506e71485f81988c94acad65d2c88a3cfdccfe7c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +816,820 @@}\n\n// DeploymentComplete considers a deployment to be complete once its desired replicas equals its\n// updatedReplicas, no old pods are running, and it doesn't violate minimum availability.\nfunc DeploymentComplete(deployment *extensions.Deployment, newStatus *extensions.DeploymentStatus) bool {"
  },
  {
    "id" : "c6fb7be1-4d62-4c8e-a0be-1ff9c2253e1a",
    "prId" : 37959,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37959#pullrequestreview-11554499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85fd3a5e-b36d-4ddb-9951-ef004c1ca83d",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "does this have to deal with duplicate replica sets?",
        "createdAt" : "2016-12-06T09:50:51Z",
        "updatedAt" : "2017-01-02T11:27:50Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      },
      {
        "id" : "171a4267-c7e6-46f8-8a7b-66a9da5e7bae",
        "parentId" : "85fd3a5e-b36d-4ddb-9951-ef004c1ca83d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "No, none of the deployment utils handles duplicate replica sets (cache Lists should already return deduped results).",
        "createdAt" : "2016-12-06T10:00:34Z",
        "updatedAt" : "2017-01-02T11:27:50Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cb946eab9c2b554fdad0481f40b387f1022b75b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +784,788 @@\n// GetReadyReplicaCountForReplicaSets returns the number of ready pods corresponding to the given replica sets.\nfunc GetReadyReplicaCountForReplicaSets(replicaSets []*extensions.ReplicaSet) int32 {\n\ttotalReadyReplicas := int32(0)\n\tfor _, rs := range replicaSets {"
  },
  {
    "id" : "d1236bb7-b1b1-440b-9edb-db61bb78bd60",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-9533669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I thought the intention with respect to utilities used by clients was that we are going to have utilities use internal types and clients should run conversions if they wanted to use our utilities, is that correct? If so, why don't you remove the utilities with the external types here and make kubectl convert the object before using the utility?",
        "createdAt" : "2016-11-21T10:04:10Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8fa4e160-1ecf-40f6-9a6c-10db8ee7591f",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We can do that in a follow up I think.",
        "createdAt" : "2016-11-21T16:21:56Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b8409c9a-8bc4-46f6-a110-5f3d9c707273",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> I thought the intention with respect to utilities used by clients was that we are going to have utilities use internal types and clients should run conversions if they wanted to use our utilities, is that correct?\r\n\r\nIt's the other way around. Because and all controllers are refactored to use versioned API, and they are performance-sensitive, so I converted the utilities to versioned. Kubectl still uses internal version, so kubectl needs to convert deployment to versioned before passing it to the utilities.\r\n\r\nRegarding this `GetDeploymentConditionInternal`. Given that\r\n* its caller pkg/kubectl/rollout_status.go doesn't call any other deployment utility function\r\n* this function is small\r\n\r\nI think it's more maintainable and readable to just duplicate the function, instead of calling conversion in rollout_status.go.",
        "createdAt" : "2016-11-21T19:23:00Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "22c3d008-33dd-4f56-96df-1946356906ff",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "cc @mfojtik ",
        "createdAt" : "2016-11-21T20:08:13Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "36705cce-299e-4e08-9f4d-3f2c4ec38101",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Is kubectl going to switch to versioned too?",
        "createdAt" : "2016-11-21T20:08:55Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "f6f2ef6d-9cee-420c-8d1f-cc996c909d06",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "If kubectl switch to versioned clientset, it will not be able to talk to api servers supporting different API versions at the same time. Not sure how much we value the version compatibility of kubectl. I can open an issue to discuss.",
        "createdAt" : "2016-11-21T20:15:55Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f6109a34-6099-4f40-88f0-106570a3a119",
        "parentId" : "3e3907d4-1ea5-4c18-88f1-79d41bb1395a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think it's a priority for now.",
        "createdAt" : "2016-11-21T20:18:17Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +135,139 @@// TODO: remove the duplicate\n// GetDeploymentConditionInternal returns the condition with the provided type.\nfunc GetDeploymentConditionInternal(status internalextensions.DeploymentStatus, condType internalextensions.DeploymentConditionType) *internalextensions.DeploymentCondition {\n\tfor i := range status.Conditions {\n\t\tc := status.Conditions[i]"
  },
  {
    "id" : "082a1526-013a-46bf-9d3a-78ce29a1738d",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-9420231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74d56006-56b0-4ccc-b6db-04fcaa498631",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Can you specify that we need to remove the versioned utility?",
        "createdAt" : "2016-11-21T10:04:30Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +133,137 @@}\n\n// TODO: remove the duplicate\n// GetDeploymentConditionInternal returns the condition with the provided type.\nfunc GetDeploymentConditionInternal(status internalextensions.DeploymentStatus, condType internalextensions.DeploymentConditionType) *internalextensions.DeploymentCondition {"
  },
  {
    "id" : "5cd06ac3-10d5-4804-9df0-af26a5d54ae3",
    "prId" : 36648,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36648#pullrequestreview-11618606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "739dcfc8-ab6a-40cf-8527-1c13df0138df",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@mfojtik @smarterclayton note this change, I am also counting newly available replicas as progress.",
        "createdAt" : "2016-12-06T15:37:09Z",
        "updatedAt" : "2016-12-06T17:08:47Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e6252085-1a43-497b-beaa-19848ca8fdf6",
        "parentId" : "739dcfc8-ab6a-40cf-8527-1c13df0138df",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Makes sense.",
        "createdAt" : "2016-12-06T16:02:46Z",
        "updatedAt" : "2016-12-06T17:08:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8a7ca28f055431afc4976773ee0099b17b33f19",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +850,854 @@\treturn (newStatus.UpdatedReplicas > oldStatus.UpdatedReplicas) ||\n\t\t(newStatusOldReplicas < oldStatusOldReplicas) ||\n\t\tnewStatus.AvailableReplicas > deployment.Status.AvailableReplicas\n}\n"
  },
  {
    "id" : "368cc0cf-9d25-461f-ba4d-68de569f65c8",
    "prId" : 35691,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35691#pullrequestreview-7055683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1923e17a-05d8-49aa-974b-19cebb698d9d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a TODO here that this is clock dependent and should be based on observed time from this controller, not stored time.\n",
        "createdAt" : "2016-11-03T00:32:54Z",
        "updatedAt" : "2016-11-04T15:29:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "97f3ef9c-2818-4510-a9d5-472ed2870b4f",
        "parentId" : "1923e17a-05d8-49aa-974b-19cebb698d9d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "What's the difference between stored time that has been set based on observation by this controller (what we currently have) and observed time that is not stored?\n",
        "createdAt" : "2016-11-03T10:34:11Z",
        "updatedAt" : "2016-11-04T15:29:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "ff5cd4ba-b536-4d7a-9b81-bcda7d3d3e3b",
        "parentId" : "1923e17a-05d8-49aa-974b-19cebb698d9d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The time stored on the object may have been set by a different controller with a different current time, rate of time change, or transient problem. In a distributed system any sort of \"store time, then read it later from a different process\" action is fundamentally broken.  Instead, each component in the cluster needs to maintain its own clock (based on when it sees something happen) and then act only according to the time the local process keeps.  That's not 100% safe (the admin on the machine could adjust the time forward or backwards), but it prevents clock skew from having an impact.\n\nHere's an example:\n1. Controller process 1 observes a new deployment update, sets a condition\n2. Node that controller process 1 is on dies, controller fails over to node 2 with controller process 2\n3. Node 2's clock is 30s in the future\n4. Controller process 2 compares stored time from etcd (recorded by node 1's clock) against now, sees that the progress deadline window has passed, and records \"failure\", even though the wall clock measurement is ~1-2s from when process 1 actually saw the deployment update.\n\nThe correct way to track time is for each controller to maintain its own clock, and it can only act when it observes a change.  I.e.:\n1. Controller process 2 observes progress deadline is set AND condition is set, starts its own clock at now (t0)\n2. Controller process 2 waits to update condition until at least progressDeadlineSeconds have elapsed since t0.\n",
        "createdAt" : "2016-11-03T16:45:33Z",
        "updatedAt" : "2016-11-04T15:29:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "5b79bf1d-da3b-4dac-a5b5-a2571a3255b0",
        "parentId" : "1923e17a-05d8-49aa-974b-19cebb698d9d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Thanks for the explanation. This is not a problem with the main controller running on a single master since it's the only component that updates conditions. I guess the master going down in a HA setup would break this. In the future when we will support custom controllers that run on nodes, this problem will become more apparent. Dropping a reference in https://github.com/kubernetes/kubernetes/issues/29229.\n",
        "createdAt" : "2016-11-03T17:06:05Z",
        "updatedAt" : "2016-11-04T15:29:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f52ea8fc6788c606352eb133df0e771f583b2cee",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +846,850 @@\t// compare against progressDeadlineSeconds.\n\tfrom := condition.LastTransitionTime\n\tdelta := time.Duration(*deployment.Spec.ProgressDeadlineSeconds) * time.Second\n\treturn from.Add(delta).Before(nowFn())\n}"
  },
  {
    "id" : "220c104c-59c1-462d-b8dc-406034597c57",
    "prId" : 30730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ff4c81b-6709-4925-95e2-790c76c4cc3c",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This feels more like a Deployment Condition for a permanently failed deployment ... apart from the fact that we still don't have perm-failed deployments:)\n",
        "createdAt" : "2016-08-19T20:30:11Z",
        "updatedAt" : "2016-08-23T21:33:47Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5cef18735c96eb2dda98609cafd96a505958f78",
    "line" : null,
    "diffHunk" : "@@ -1,1 +61,65 @@\t// OverlapAnnotation marks deployments with overlapping selector with other deployments\n\t// TODO: Delete this annotation when we gracefully handle overlapping selectors. See https://github.com/kubernetes/kubernetes/issues/2210\n\tOverlapAnnotation = \"deployment.kubernetes.io/error-selector-overlapping-with\"\n\t// SelectorUpdateAnnotation marks the last time deployment selector update\n\t// TODO: Delete this annotation when we gracefully handle overlapping selectors. See https://github.com/kubernetes/kubernetes/issues/2210"
  },
  {
    "id" : "53689f5b-cd00-4a94-9dbc-35acf7a83db7",
    "prId" : 29808,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bc9b0cf-13ff-4f37-8c74-c0e7248af053",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Won't this be the case sometimes when a replica set is scaled down?\n",
        "createdAt" : "2016-08-03T09:02:03Z",
        "updatedAt" : "2016-08-03T09:02:03Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "da0c39bb-fe4e-4413-bfbf-4b13af9f9bb6",
        "parentId" : "0bc9b0cf-13ff-4f37-8c74-c0e7248af053",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@janetkuo I agree with @kargakis. \n",
        "createdAt" : "2016-08-10T02:18:48Z",
        "updatedAt" : "2016-08-10T02:18:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "32ababbe1b0bf9ee6786aa555cc3cd7f54f2014a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +651,655 @@\t\trsPods := podutil.Filter(podList, matchingFunc)\n\t\tavaPodsCount := countAvailablePods(rsPods, minReadySeconds)\n\t\tif avaPodsCount > rs.Spec.Replicas {\n\t\t\tmsg := fmt.Sprintf(\"Found %s/%s with %d available pods, more than its spec replicas %d\", rs.Namespace, rs.Name, avaPodsCount, rs.Spec.Replicas)\n\t\t\tglog.Errorf(\"ERROR: %s\", msg)"
  },
  {
    "id" : "4ae66ad4-83c5-4785-9a6d-f0217cd7d688",
    "prId" : 19343,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515d20a9-c94b-449b-a0a5-18b1a7ab9ac8",
        "parentId" : null,
        "authorId" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "body" : "godoc\n",
        "createdAt" : "2016-08-25T09:13:38Z",
        "updatedAt" : "2016-10-27T10:57:54Z",
        "lastEditedBy" : "ec801d33-3a38-47a2-a267-f72db1de574b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf9fd31d00c4f01a10cac490226bbd0659d6b483",
    "line" : null,
    "diffHunk" : "@@ -1,1 +74,78 @@\n// SetDeploymentRevision updates the revision for a deployment.\nfunc SetDeploymentRevision(deployment *extensions.Deployment, revision string) bool {\n\tupdated := false\n"
  }
]