[
  {
    "id" : "feb72578-7ddc-4ef9-8975-f83ae25d8bbc",
    "prId" : 90731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90731#pullrequestreview-405821388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff8dd6d5-026f-447d-98c9-93d94dc85453",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I would expect the signer to log an error if the signer name matches (and deny once https://github.com/kubernetes/enhancements/pull/1691 is implement), not ignore the CSR altogether.",
        "createdAt" : "2020-05-04T23:52:57Z",
        "updatedAt" : "2020-05-05T14:18:16Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "55e1d40e-c111-45ee-867d-e7271df530b8",
        "parentId" : "ff8dd6d5-026f-447d-98c9-93d94dc85453",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I see now that this matches the existing behavior...",
        "createdAt" : "2020-05-04T23:55:23Z",
        "updatedAt" : "2020-05-05T14:18:16Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "4dc87a3d-7fb5-4534-a106-728c993080fd",
        "parentId" : "ff8dd6d5-026f-447d-98c9-93d94dc85453",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I see now that this matches the existing behavior...\r\n\r\nYes.  I'd be happy to see changes here once we can represent these failures (jordan's kep).  but I'd prefer to change behavior in another PR to make these easy to review.",
        "createdAt" : "2020-05-05T14:05:09Z",
        "updatedAt" : "2020-05-05T14:18:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "83035890ad604bf1ee141b632178faeda0c59077",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +210,214 @@\t\treturn false\n\t}\n\treturn capihelper.IsKubeletServingCSR(req, usages)\n}\n"
  },
  {
    "id" : "5c9763d3-4242-4f41-bf51-adf8e8d76edc",
    "prId" : 90731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90731#pullrequestreview-405834953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd49ffa-8d17-4cd4-a261-fec9366886ee",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "Should this just return `(isRequestForSignerFunc, bool)`?  Either we have a function for the `signerName` or not?",
        "createdAt" : "2020-05-05T05:04:00Z",
        "updatedAt" : "2020-05-05T14:18:16Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "83c6108f-a133-4cf9-bb31-0c7bedfdc53d",
        "parentId" : "1cd49ffa-8d17-4cd4-a261-fec9366886ee",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Should this just return `(isRequestForSignerFunc, bool)`? Either we have a function for the `signerName` or not?\r\n\r\nI'd prefer to keep the error because it is an error to pass something that doesn't match and execution should stop.  there shouldn't really be compensation for for this case.",
        "createdAt" : "2020-05-05T14:18:56Z",
        "updatedAt" : "2020-05-05T14:18:56Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "83035890ad604bf1ee141b632178faeda0c59077",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\t//  CSRs with unknown kube signers as terminal if we wish.  This largely depends on how tightly we want to control\n\t\t//  our signerNames.\n\t\treturn nil, fmt.Errorf(\"unrecongized signerName: %q\", signerName)\n\t}\n}"
  },
  {
    "id" : "42c9dffe-338e-484d-aaf2-c0acb963de2b",
    "prId" : 90731,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90731#pullrequestreview-405890681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "524f4173-4a18-4a24-bebf-37b0d3de98a6",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "It's not particularly significant, and to be honest I quite like the duplication as it makes things very explicit/clear, but this case _should_ never be hit due to https://github.com/kubernetes/kubernetes/pull/90731/files#diff-cf196a19c29acb8bf257b0976e409cd2R147-R150",
        "createdAt" : "2020-05-05T14:56:31Z",
        "updatedAt" : "2020-05-05T15:00:22Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "6c7d7d8e-25b0-422f-9e72-c87648f537f7",
        "parentId" : "524f4173-4a18-4a24-bebf-37b0d3de98a6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It's not particularly significant, and to be honest I quite like the duplication as it makes things very explicit/clear, but this case _should_ never be hit due to https://github.com/kubernetes/kubernetes/pull/90731/files#diff-cf196a19c29acb8bf257b0976e409cd2R147-R150\r\n\r\nI'd like to keep this.  Is it \"belt and braces\" in england?",
        "createdAt" : "2020-05-05T15:04:18Z",
        "updatedAt" : "2020-05-05T15:04:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7b5b1149-dd54-40a2-8f10-b975e0b36fbc",
        "parentId" : "524f4173-4a18-4a24-bebf-37b0d3de98a6",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "\"covering all bases\" in american âš¾",
        "createdAt" : "2020-05-05T15:16:13Z",
        "updatedAt" : "2020-05-05T15:16:13Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      }
    ],
    "commit" : "83035890ad604bf1ee141b632178faeda0c59077",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +216,220 @@\tif signerName != capi.KubeAPIServerClientKubeletSignerName {\n\t\treturn false\n\t}\n\treturn capihelper.IsKubeletClientCSR(req, usages)\n}"
  },
  {
    "id" : "56808a83-fdc2-421e-b80d-adf02bb55441",
    "prId" : 90191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90191#pullrequestreview-422212192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49cc1244-16fc-425a-8ae1-3e9f70fe7307",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Under the assumption that another controller might be implementing those right now, but we don't need to know about it?",
        "createdAt" : "2020-06-01T21:59:02Z",
        "updatedAt" : "2020-06-01T21:59:02Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e9f7060c-298a-4fee-97d7-32d893d3434c",
        "parentId" : "49cc1244-16fc-425a-8ae1-3e9f70fe7307",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "right",
        "createdAt" : "2020-06-01T22:00:49Z",
        "updatedAt" : "2020-06-01T22:00:49Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7049149181189eae304246cc49de78d08eef4f80",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +168,172 @@\t\t}\n\t\treturn nil\n\t} else if !recognized {\n\t\t// Ignore requests for kubernetes.io signerNames we don't recognize\n\t\treturn nil"
  },
  {
    "id" : "02a0053b-5703-4a61-bcb7-524ed519a537",
    "prId" : 90191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90191#pullrequestreview-422212284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "454701c4-748f-4e33-bd22-f0404309c648",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Is there a new unit test for this case?",
        "createdAt" : "2020-06-01T21:59:22Z",
        "updatedAt" : "2020-06-01T21:59:22Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "32a9e6dd-bbf2-44e3-8391-ecd7baf56251",
        "parentId" : "454701c4-748f-4e33-bd22-f0404309c648",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "there was an existing test covering this case (`kubernetes.io/not-a-real-signer`)... I added a unit test exercising the \"recognized with error\" case",
        "createdAt" : "2020-06-01T22:01:00Z",
        "updatedAt" : "2020-06-01T22:01:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7049149181189eae304246cc49de78d08eef4f80",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +169,173 @@\t\treturn nil\n\t} else if !recognized {\n\t\t// Ignore requests for kubernetes.io signerNames we don't recognize\n\t\treturn nil\n\t}"
  },
  {
    "id" : "59522ae8-3c06-441d-b9ef-61df049b4294",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-359879243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c8f1660-6932-4caa-8e76-96c9d0823d10",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "For nil, signerNames, I expected the same defaulting as in the apiserver, per the KEP\r\n\r\n```go\r\ncsr, err := parse\r\nswitch {\r\n  case err:\r\n    legacy\r\n  case iskubeletclient(csr):\r\n    kubelet client\r\n  case isclient(csr):\r\n    client\r\n  default:\r\n    legacy\r\n}\r\n```",
        "createdAt" : "2020-02-17T17:10:05Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +94,98 @@\t// Ignore unapproved requests\n\tif !certificates.IsCertificateRequestApproved(csr) {\n\t\treturn nil\n\t}\n"
  },
  {
    "id" : "f5ae4f25-2867-4009-9b43-569c0606b6a6",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-360010550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18dc80e0-0dc8-4c4a-9251-afd6422cd958",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Should we check here that the CommonName == the `spec.username`, similar to in the approval plugin?",
        "createdAt" : "2020-02-17T23:11:05Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "cdb7cdec-f7db-40a2-9b35-44f8178444e0",
        "parentId" : "18dc80e0-0dc8-4c4a-9251-afd6422cd958",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "No, the nature of the certificate and signerName is distinct from authorization.",
        "createdAt" : "2020-02-18T00:12:42Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +142,146 @@\t// Only handle CSRs with the specific known signerNames.\n\tswitch signerName {\n\tcase capi.KubeletServingSignerName:\n\t\treturn capihelper.IsKubeletServingCSR(req, usages)\n\tcase capi.KubeAPIServerClientKubeletSignerName:"
  },
  {
    "id" : "2befca22-21f8-422e-8b2f-3b22de6c5e09",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-361198123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12787146-76df-43ef-94d6-57fcf221d68c",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "I do not understand how this signing action makes sense with the actual signer name validation.  For example, in the case of `KubeAPIServerClientSignerName`, how do we make the API server honor the signed cert?  I would think we would need multiple `signer` controllers (one for each signer name) with (possibly) distinct private keys/CAs.",
        "createdAt" : "2020-02-18T19:16:33Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "717cd3b5-5347-4103-ae40-fd4282e175f2",
        "parentId" : "12787146-76df-43ef-94d6-57fcf221d68c",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "The signing controller is configured to sign certificates using the apiserver's CA - I don't think options are exposed currently in the apiserver to allow this level of segmentation?\r\n\r\nDoes the apiserver support specifying multiple roots of trust for verifying clients? If so, a user could configure a 'node CA' vs a 'user CA' if they wanted to revoke a certain subset of clients.\r\n\r\nI think it does make sense to support specifying a CA to use per `kubernetes.io/*` signerName and @deads2k mentioned interest in this feature a little while ago too, but I'm uncertain whether it needs to be a pre-requisite for adding the `signerName` feature - if we add additional options to control this in future this can be handled via defaulting and it's not something outlined in the KEP currently.",
        "createdAt" : "2020-02-18T19:43:50Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "ba01dcbd-f90b-4bcd-a5c5-2844cdac6d18",
        "parentId" : "12787146-76df-43ef-94d6-57fcf221d68c",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "The `kubernetes.io/kubelet-serving` signer maps to `--kubelet-certificate-authority` (because this CA is a distinct flag, we can have a distinct private key for it).  We expect this signer to only be valid for serving certificates, but if we only use a single private key, then we are relying solely on cert usage checks.  We have no cryptographic isolation.\r\n\r\n`kubernetes.io/kube-apiserver-client` and `kubernetes.io/kube-apiserver-client-kubelet` are a bit harder to separate since all we have is `--client-ca-file`.  @deads2k I might be misremembering but I seem to recall you doing something fancy with `--tls-sni-cert-key` and kubelets connecting over a particular network via IPs - but maybe that was for serving certs only.\r\n\r\nIn general I think we lack a way today to say \"honor this CA for client certs but only if they match this particular shape (i.e. kubelet client cert vs. regular user client cert).\"\r\n\r\n`kubernetes.io/legacy-unknown` we can basically ignore.",
        "createdAt" : "2020-02-19T01:13:20Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "43e4fb21-ebd5-4236-abfe-3b32692b394c",
        "parentId" : "12787146-76df-43ef-94d6-57fcf221d68c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> For example, in the case of KubeAPIServerClientSignerName, how do we make the API server honor the signed cert?\r\n\r\nThat's the responsibility of the cluster administrator giving this controller the CA to use to sign and the apiserver the CA to use to verify.\r\n\r\n> I would think we would need multiple signer controllers (one for each signer name) with (possibly) distinct private keys/CAs.\r\n\r\nFor this release, I think letting this signer continue to sign all the `kubernetes.io/*` names it understands with a single CA is reasonable. In a future release, if needed, we could allow multiple CAs, or allow subdivision of signernames similar to how we allow enabling/disabling specific controller loops. For example:\r\n* `--cluster-signing-signer-names=*,-kubernetes.io/legacy-unknown`\r\n* `--cluster-signing-signer-names=kubernetes.io/kube-apiserver-client-kubelet,kubernetes.io/kube-apiserver-client`",
        "createdAt" : "2020-02-19T14:15:57Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "78fd78c1-30d7-4a07-b988-fe84b49b6c78",
        "parentId" : "12787146-76df-43ef-94d6-57fcf221d68c",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "> For this release, I think letting this signer continue to sign all the `kubernetes.io/*` names it understands with a single CA is reasonable.\r\n\r\nYeah I think it is probably the best we can do for now.",
        "createdAt" : "2020-02-19T15:20:43Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\treturn nil\n\t}\n\tcert, err := s.sign(x509cr, csr.Spec.Usages)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error auto signing csr: %v\", err)"
  },
  {
    "id" : "b5588d1c-0865-40a7-acbf-a6582110ce92",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-364138378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2883e399-f7e3-4ff6-a183-ebd9fd773a21",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "@liggitt should we also be checking if the username on the CSR matches the commonName of the request here? We currently check it in the approval plugin (but not in defaulting).",
        "createdAt" : "2020-02-25T13:26:05Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "8a2a90e5-35cd-4d9a-99d3-89ecad51299d",
        "parentId" : "2883e399-f7e3-4ff6-a183-ebd9fd773a21",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, the defaulted signerName is based only on the csr/usages, not on the submitter",
        "createdAt" : "2020-02-25T13:28:50Z",
        "updatedAt" : "2020-02-27T15:54:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +145,149 @@\t\treturn capihelper.IsKubeletServingCSR(req, usages)\n\tcase capi.KubeAPIServerClientKubeletSignerName:\n\t\treturn capihelper.IsKubeletClientCSR(req, usages)\n\tcase capi.KubeAPIServerClientSignerName:\n\t\treturn validAPIServerClientUsages(usages)"
  },
  {
    "id" : "ca923cae-4640-4b50-a6c2-f3a93538500b",
    "prId" : 88246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88246#pullrequestreview-366810167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "917c5bd1-a345-41aa-82a2-44345cd5e77c",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "Is an error return suitable for conveying that the CertificateRequest is in terminal state ?\r\n",
        "createdAt" : "2020-02-29T15:51:29Z",
        "updatedAt" : "2020-02-29T15:51:30Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "d3bdacf5-b51f-4950-8c6c-0b3ae6c16a21",
        "parentId" : "917c5bd1-a345-41aa-82a2-44345cd5e77c",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "We need a place to record it on the API object for that to be effective. I'm working on a well-defined condition to communicate that.",
        "createdAt" : "2020-02-29T17:42:43Z",
        "updatedAt" : "2020-02-29T17:42:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5dae048983cd299cdce9d2703f564bf4bd246ee",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +109,113 @@\tif !requestValidForSignerName(x509cr, csr.Spec.Usages, *csr.Spec.SignerName) {\n\t\t// TODO: mark the CertificateRequest as being in a terminal state and\n\t\t//  communicate to the user why the request has been refused.\n\t\treturn nil\n\t}"
  }
]