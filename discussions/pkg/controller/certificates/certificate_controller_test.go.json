[
  {
    "id" : "3334123e-e155-4c5d-8c2c-1e930da88a1a",
    "prId" : 46383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46383#pullrequestreview-40201417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : " Just because the cache has synced, does that necessarily mean all the notifications have made it to the handler function that adds an item to the work queue? I thought those were called in go routines as well ",
        "createdAt" : "2017-05-24T21:13:51Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "df310b2b-d175-40df-a3d0-870ffbfdd54b",
        "parentId" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "controller.processNextWorkItem() is called synchronously in this test. Are you talking about interactions within the informer? I have separated the controller and the informer client so that I can only assert the interaction the processNextWorkItem should take.",
        "createdAt" : "2017-05-24T21:20:00Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "1149a425-8976-411e-9b51-20f7b360a996",
        "parentId" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "We never even start the certificates controller in this test.",
        "createdAt" : "2017-05-24T21:20:21Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "ef583129-8ddd-4f14-9e87-70ed4ea45154",
        "parentId" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ahh, I see what you are saying. ",
        "createdAt" : "2017-05-24T21:27:26Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "ae6b93b5-6f87-43ff-8c9a-bfc342f706b5",
        "parentId" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Actually I don't think we should return from this until Add Update or Delete is called on the DeltaFIFO, so pretty sure this waits for work in the queue. Since we only have one item of work. That should be sufficient.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/v1.6.4/staging/src/k8s.io/client-go/tools/cache/delta_fifo.go#L169",
        "createdAt" : "2017-05-24T21:35:00Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "90d414df-bdb6-494a-b43a-a38ce981a212",
        "parentId" : "27395d2e-1f25-452c-8050-ba977d13ac2b",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the call to the eventhandler registered with the shared informer (which is what puts the item in the queue processed by `processNextWorkItem()`) is not synchronous. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/tools/cache/shared_informer.go#L547\r\n\r\ninstead, I'd wait until `controller.queue.Len() > 1`",
        "createdAt" : "2017-05-25T03:34:47Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe1e9caa40af6cc0a7fcb183344998ff5968369",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +68,72 @@\tdefer close(stopCh)\n\tinformerFactory.Start(stopCh)\n\tinformerFactory.WaitForCacheSync(stopCh)\n\twait.PollUntil(10*time.Millisecond, func() (bool, error) {\n\t\treturn controller.queue.Len() >= 1, nil"
  },
  {
    "id" : "03be20d8-db77-4c68-8e2e-ffbb5be07d37",
    "prId" : 46383,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46383#pullrequestreview-40200240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b5c017a-863e-4e7e-83c5-a82db9b2dc5a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm confused why we're creating a second fake client here",
        "createdAt" : "2017-05-25T03:18:22Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d988f5cb-cce5-4e43-bbe6-4d9c6c83ff92",
        "parentId" : "7b5c017a-863e-4e7e-83c5-a82db9b2dc5a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nevermind, to get the informer actions out of the set we care about",
        "createdAt" : "2017-05-25T03:19:58Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b1dfe4a3-9b4e-4ddc-8fd6-7d83c56ccb84",
        "parentId" : "7b5c017a-863e-4e7e-83c5-a82db9b2dc5a",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Because we don't care about interactions that the informer makes against the client. We only want to make assertions against the interactions taken by the handle.",
        "createdAt" : "2017-05-25T03:20:28Z",
        "updatedAt" : "2017-05-26T18:03:58Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe1e9caa40af6cc0a7fcb183344998ff5968369",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +40,44 @@\n\tclient := fake.NewSimpleClientset(csr)\n\tinformerFactory := informers.NewSharedInformerFactory(fake.NewSimpleClientset(csr), controller.NoResyncPeriodFunc())\n\n\thandler := func(csr *certificates.CertificateSigningRequest) error {"
  }
]