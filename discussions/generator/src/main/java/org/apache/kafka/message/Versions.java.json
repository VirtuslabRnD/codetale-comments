[
  {
    "id" : "054f63cc-f795-4cbb-baaf-e2499cefc27c",
    "prId" : 7340,
    "prUrl" : "https://github.com/apache/kafka/pull/7340#pullrequestreview-291392095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0c16a67-f981-469b-9412-f53b668e56cb",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Right. I was reading the code to see where this condition is checked. So that it is easier to verify should we change the documentation to `other.highest() >= highest would be true`.?",
        "createdAt" : "2019-09-20T14:54:31Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "a767bdd6-9e8c-42fd-a1ef-0f3b89d767f0",
        "parentId" : "a0c16a67-f981-469b-9412-f53b668e56cb",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "changed",
        "createdAt" : "2019-09-20T20:54:24Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0ee56804b975a3c65ba167382a86afee3109c5",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +151,155 @@                // Note: it is safe to assume that other.highest() + 1 will not overflow.\n                // The reason is because if other.highest() were Short.MAX_VALUE,\n                // other.highest() < highest could not be true.\n                return new Versions((short) (other.highest() + 1), highest);\n            }"
  },
  {
    "id" : "146b3e27-05e6-48ef-8064-5da8d7b717e5",
    "prId" : 7340,
    "prUrl" : "https://github.com/apache/kafka/pull/7340#pullrequestreview-291393500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c4789b0-de28-45c9-8b2b-e1a39859a6ae",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Why is this true? I don't think this will ever execute since we know that `other.lowest > lowest` and `lowest >= 0`, right? If you agree that this will never execute should we just remove this block?",
        "createdAt" : "2019-09-20T16:27:40Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "4d319fa6-2a28-494e-8933-252aa8d23ee1",
        "parentId" : "5c4789b0-de28-45c9-8b2b-e1a39859a6ae",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "agreed.  I'll remove it.",
        "createdAt" : "2019-09-20T20:57:41Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0ee56804b975a3c65ba167382a86afee3109c5",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +158,162 @@            if (newHighest < 0) {\n                // Case 4: other was NONE.  Trim nothing.\n                return this;\n            } else if (newHighest < highest) {\n                // Case 5: trim some values from the end of this range."
  },
  {
    "id" : "edda9f69-c812-4a07-b834-2727c2858a5b",
    "prId" : 7340,
    "prUrl" : "https://github.com/apache/kafka/pull/7340#pullrequestreview-291216483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f1f3565-8255-4398-bc1b-759674882f88",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Replace `trim` with `subtract` in this examples?",
        "createdAt" : "2019-09-20T16:29:38Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0ee56804b975a3c65ba167382a86afee3109c5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +133,137 @@     * 3+.trim(4+) = 3\n     * 4+.trim(3+) = none\n     * 1-5.trim(2-4) = null\n     *\n     * @param other                 The other version range."
  },
  {
    "id" : "1f6c64dc-d268-402c-9f30-4e5cd2c30f21",
    "prId" : 7340,
    "prUrl" : "https://github.com/apache/kafka/pull/7340#pullrequestreview-293185061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d4005c-642c-452a-b2c2-c5cda0822c4c",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Why `null`? Should we just throw illegal argument or something?",
        "createdAt" : "2019-09-20T16:31:09Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "74fdb1b3-d524-408f-a6ad-4ab452dc6444",
        "parentId" : "c0d4005c-642c-452a-b2c2-c5cda0822c4c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It's not necessarily illegal -- we sometimes want to handle this case.  I could create a special exception for this, but returning null seemed simpler.",
        "createdAt" : "2019-09-20T20:58:44Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "21e02722-4dcb-490a-86b7-af4e1f02e568",
        "parentId" : "c0d4005c-642c-452a-b2c2-c5cda0822c4c",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "I think I'd prefer something other than `null` here. It looks like Versions are copied around to a few places where we would need to worry about NPEs. `Optional` feels overkill, so maybe just another special Versions instance like `INVALID` or something?",
        "createdAt" : "2019-09-24T19:49:24Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "efbb3c3e-4eab-4e34-a7f9-fa71075e093a",
        "parentId" : "c0d4005c-642c-452a-b2c2-c5cda0822c4c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "There isn't a `Versions#INVALID` and I don't think we should create one.  All Versions objects currently represent a version range conceptually, and I think that's a good property to keep.  There is a `Versions#NONE`, but that isn't what we want here (it is the empty range).\r\n\r\nI think the choices are basically returning `null`, returning `None`, or throwing an exception.  \r\n\r\nIf we do choose `null`, we don't actually have to check for it since Java already does everywhere.  I can see the argument for returning `Some / None`, though, since it makes it clearer that this function may return nothing.  In practice, most of the time when we call `subtract`, we know that it will return a valid result, so I don't bother checking.  Java will throw an NPE if a precondition was violated somewhere.\r\n\r\nI did consider implementing collections of ranges so that this function could be defined over all inputs.  But in practice, this massively increased the complexity of the Versions code for no benefit in practice.",
        "createdAt" : "2019-09-24T21:38:45Z",
        "updatedAt" : "2019-09-24T22:02:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "750c2143-292f-4745-8c9d-33299ceb8fd2",
        "parentId" : "c0d4005c-642c-452a-b2c2-c5cda0822c4c",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Understood. Thanks for the clarification  ",
        "createdAt" : "2019-09-25T15:51:53Z",
        "updatedAt" : "2019-09-25T15:51:54Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0ee56804b975a3c65ba167382a86afee3109c5",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +168,172 @@        } else {\n            // Case 7: the difference between this and other would be two ranges, not one.\n            return null;\n        }\n    }"
  }
]