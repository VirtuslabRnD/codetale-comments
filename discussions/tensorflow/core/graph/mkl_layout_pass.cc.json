[
  {
    "id" : "8e33850f-b7c5-48e2-9136-cd7ccbe43169",
    "prId" : 32648,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/32648#pullrequestreview-315751737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543283ac-f3ff-4644-bc9e-dbef006c9057",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Isn't `data_format` uninitialized here?",
        "createdAt" : "2019-09-23T23:29:27Z",
        "updatedAt" : "2019-10-16T08:52:58Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "c548afdd-7903-46e8-bab6-010cdbaadff4",
        "parentId" : "543283ac-f3ff-4644-bc9e-dbef006c9057",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "Yes, it was uninitialized. The `DCHECK` is disabled without debug option so we missed it. I'll correct it.",
        "createdAt" : "2019-10-16T05:26:57Z",
        "updatedAt" : "2019-10-16T08:52:58Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      },
      {
        "id" : "24842860-557a-4d4a-a074-a7da058c4b14",
        "parentId" : "543283ac-f3ff-4644-bc9e-dbef006c9057",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thank you!",
        "createdAt" : "2019-11-12T18:33:16Z",
        "updatedAt" : "2019-11-12T18:36:29Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e5c3d78cbd15fda78662711faeaeb74b895b34",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2775,2779 @@    std::vector<int32> new_ksize;\n    if (strides.size() == 5) {\n      DCHECK(data_format == \"NCDHW\");\n      // `strides` and `ksize` also need to be changed according to\n      // `data_format`. In this case, from `NDHWC` to `NCDHW`."
  },
  {
    "id" : "e4ba7e61-a3a2-4809-ab56-1c8fc9c3d626",
    "prId" : 32648,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/32648#pullrequestreview-315751737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c604e97-b871-4ba0-84a2-5ffc876ff676",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The new node's `data_format` attribute hasn't been set yet.",
        "createdAt" : "2019-09-23T23:30:38Z",
        "updatedAt" : "2019-10-16T08:52:58Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "8b589616-e130-4358-9fb1-2d64b29cfd21",
        "parentId" : "9c604e97-b871-4ba0-84a2-5ffc876ff676",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "`data_format` was set out of the copy fn:\r\n1. bind the format and copy fn to `FuseTransposeMklOpTranspose`: https://github.com/Intel-tensorflow/tensorflow/blob/pr/wenxizhu/fuse-transpose-maxpool3d/tensorflow/core/graph/mkl_layout_pass.cc#L779\r\n2. set the format in `FuseTransposeMklOpTranspose` after copy fn was called: https://github.com/Intel-tensorflow/tensorflow/blob/pr/wenxizhu/fuse-transpose-maxpool3d/tensorflow/core/graph/mkl_layout_pass.cc#L3670\r\n\r\nWe do this because we assigned the format from a initial list instead of copying from the original node.",
        "createdAt" : "2019-10-16T05:42:17Z",
        "updatedAt" : "2019-10-16T08:52:58Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      },
      {
        "id" : "1b4694fd-c281-4c23-b321-be6042c7f730",
        "parentId" : "9c604e97-b871-4ba0-84a2-5ffc876ff676",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thanks for the detailed explanation!",
        "createdAt" : "2019-11-12T18:34:51Z",
        "updatedAt" : "2019-11-12T18:36:29Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e5c3d78cbd15fda78662711faeaeb74b895b34",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +2798,2802 @@    nb->Attr(\"strides\", new_strides);\n    nb->Attr(\"ksize\", new_ksize);\n  }\n}\n"
  },
  {
    "id" : "68f4e59f-ca19-4d37-b1d8-351fd160e60a",
    "prId" : 31782,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/31782#pullrequestreview-286470622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96f7031b-635f-4d03-8770-aacac41237df",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "What about transposing B? Are we assuming B is small and would be cheap to reorder?",
        "createdAt" : "2019-09-03T22:52:01Z",
        "updatedAt" : "2019-09-23T03:40:36Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "4ae6625f-0a95-4fec-8249-5b690a321d95",
        "parentId" : "96f7031b-635f-4d03-8770-aacac41237df",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "Input B(weight) can be easily pass to MKL-DNN with different memory desc(io/oi) to represent the transpose attribute. It doesn't need reorder here.",
        "createdAt" : "2019-09-05T03:49:36Z",
        "updatedAt" : "2019-09-23T03:40:36Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      },
      {
        "id" : "e874288b-f763-4e8b-9dfa-8430e9612d4d",
        "parentId" : "96f7031b-635f-4d03-8770-aacac41237df",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. Thank you for the explanation!",
        "createdAt" : "2019-09-10T22:31:06Z",
        "updatedAt" : "2019-09-23T03:40:36Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc0b2346aae9e2ea49d6a772ab6f0e6bb3faff7b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1470,1474 @@    // Do not rewrite with transpose attribute because reorder has performance\n    // impact.\n    TF_CHECK_OK(GetNodeAttr(n->def(), \"transpose_a\", &trans_a));\n    // Do not rewrite with more than 1 post op because MKL-DNN doesn't support.\n    TF_CHECK_OK(GetNodeAttr(n->def(), \"fused_ops\", &fused_ops));"
  },
  {
    "id" : "5c37ec1a-bdfb-4947-a4bf-ff8f956866cd",
    "prId" : 30549,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/30549#pullrequestreview-268032890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc6fee7-77d4-4256-aa60-aa69c5ba573a",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I think the original indentation was right?",
        "createdAt" : "2019-07-11T21:53:45Z",
        "updatedAt" : "2019-07-29T23:04:23Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "645db63a-b297-440b-8076-caf68dae1e90",
        "parentId" : "fcc6fee7-77d4-4256-aa60-aa69c5ba573a",
        "authorId" : "dbb6c5a9-c881-4e6a-9f6f-53ac3c753ffc",
        "body" : "@penpornk I made this change after running the clang format tool. Looks like the tool asks us to change the comment indentation if there is an `#ifdef` below it.",
        "createdAt" : "2019-07-29T20:23:21Z",
        "updatedAt" : "2019-07-29T23:04:23Z",
        "lastEditedBy" : "dbb6c5a9-c881-4e6a-9f6f-53ac3c753ffc",
        "tags" : [
        ]
      },
      {
        "id" : "3d3333f0-e680-41b3-af1b-0006bee1a0a2",
        "parentId" : "fcc6fee7-77d4-4256-aa60-aa69c5ba573a",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. Thank you for your clarification!",
        "createdAt" : "2019-07-29T20:50:44Z",
        "updatedAt" : "2019-07-29T23:04:23Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4af31785b014036516708c879a2d4ef60d1364",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +354,358 @@    csinfo_.squared_difference = \"SquaredDifference\";\n    csinfo_.sub = \"Sub\";\n// End - element-wise ops. See note above.\n\n// NOTE: names are alphabetically sorted."
  },
  {
    "id" : "ad1cc83c-8b02-4e40-870c-bbbfbf8bcf91",
    "prId" : 29021,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/29021#pullrequestreview-245178475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86452f4b-5776-453b-a874-39af7f95eb82",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Could you please add the reason (as a comment in the code) why this block of code is commented? If it's just a TODO, please add a TODO.",
        "createdAt" : "2019-05-31T17:54:34Z",
        "updatedAt" : "2019-06-25T19:18:33Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "5abfdc87-55f2-4fab-9484-7ee36a8be617",
        "parentId" : "86452f4b-5776-453b-a874-39af7f95eb82",
        "authorId" : "0713c471-eedd-428f-a49d-0dd0d38ea8e2",
        "body" : "added.",
        "createdAt" : "2019-06-03T23:54:46Z",
        "updatedAt" : "2019-06-25T19:18:33Z",
        "lastEditedBy" : "0713c471-eedd-428f-a49d-0dd0d38ea8e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8883b4bffa1033c1ce4a66b1913c767d41f2f588",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +657,661 @@    // Disable these two MKL operators for now due to some test failures caused\n    // by these two ops\n    /*\n    rinfo_.push_back({csinfo_.tanh,\n                      mkl_op_registry::GetMklOpName(csinfo_.tanh),"
  },
  {
    "id" : "f77254a5-7630-4f1c-abcf-70cd6ae75996",
    "prId" : 24952,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24952#pullrequestreview-195830426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a32428db-dba1-40d1-ae7e-86b5eb4c9518",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "```suggestion\r\n    csinfo_.depthwise_conv2d_grad_input = \"DepthwiseConv2DNativeBackpropInput\";\r\n```\r\n^ For consistency, since the rest of this file uses `D` in the node name.\r\n \r\nPlease change this in the node name everywhere in this PR. Same for `DepthwiseConv2DNativeBackpropFilter`.",
        "createdAt" : "2019-01-23T00:33:23Z",
        "updatedAt" : "2019-01-25T00:22:20Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "74b8ece3-c95d-4960-bd47-94374e1f95c5",
        "parentId" : "a32428db-dba1-40d1-ae7e-86b5eb4c9518",
        "authorId" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "body" : "@penpornk This name is consistent with the original Eigen OP name, so we leave the 'd' not 'D'.\r\nthe Eigen OP register in https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/nn_ops.cc#L495",
        "createdAt" : "2019-01-24T01:01:55Z",
        "updatedAt" : "2019-01-25T00:22:20Z",
        "lastEditedBy" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "tags" : [
        ]
      },
      {
        "id" : "21a3b563-3052-4220-a44b-7c498d6fd3d2",
        "parentId" : "a32428db-dba1-40d1-ae7e-86b5eb4c9518",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. Let's leave it this way then. Sorry for not checking before!",
        "createdAt" : "2019-01-24T02:07:54Z",
        "updatedAt" : "2019-01-25T00:22:20Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aed47e715c55c23d31fbe4aedc22c9b1e7b322f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +260,264 @@    csinfo_.conv3d_grad_filter = \"Conv3DBackpropFilterV2\";\n    csinfo_.depthwise_conv2d = \"DepthwiseConv2dNative\";\n    csinfo_.depthwise_conv2d_grad_input = \"DepthwiseConv2dNativeBackpropInput\";\n    csinfo_.depthwise_conv2d_grad_filter =\n        \"DepthwiseConv2dNativeBackpropFilter\";"
  },
  {
    "id" : "befbf834-aeef-43ef-8ab8-cd6f8874e0c8",
    "prId" : 24538,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24538#pullrequestreview-189526923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc09c79f-4d43-4a35-a413-ba41cc6b2121",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Could you please move the comment to be over the code it is commenting on? Thank you!",
        "createdAt" : "2019-01-04T21:00:42Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b64c2b48875e29842e0e60ad9df80e82d1f6a399",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +539,543 @@                      csinfo_.conv2d_grad_filter_with_bias,\n                      GetConv2DBackpropFilterOrBiasAddGrad});\n    // Merge Pad and Conv2d, only if the pad op is \"Pad\"\n    // Doesn't merge if pad op is \"PadV2\" or \"MirrorPad\"\n    minfo_.push_back("
  },
  {
    "id" : "cf505124-fa26-4722-847d-abba6386a847",
    "prId" : 24538,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24538#pullrequestreview-190133054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8a68cfb-beac-45e2-9d70-d9618b7e761c",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "If `m` is `Pad`, can it have more than one `_FusedConv2D` nodes to merge with? If that's the case, then this `\"VALID\"` check should be in the loop that traverses the edges. (`Pad` could have two `_FusedConv2D`s, the first one without `\"VALID\"` padding, and the second one with `\"VALID\"`.)",
        "createdAt" : "2019-01-04T21:16:33Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "cb04994b-94df-4248-8dba-d4edfedb1f80",
        "parentId" : "f8a68cfb-beac-45e2-9d70-d9618b7e761c",
        "authorId" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "body" : "@penpornk we only merge the case that pad only have one output node _FusedConv2D.\r\nbelow code did this check.\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/graph/mkl_layout_pass.cc#L2644",
        "createdAt" : "2019-01-08T02:45:38Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "tags" : [
        ]
      },
      {
        "id" : "a09c3cfa-b246-4f77-933a-12c0d458df5b",
        "parentId" : "f8a68cfb-beac-45e2-9d70-d9618b7e761c",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "@guizili0 Got it. Sorry I always forgot about this!",
        "createdAt" : "2019-01-08T07:48:58Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "06a2a533-ef83-4491-bdb5-9de4afc1c0f8",
        "parentId" : "f8a68cfb-beac-45e2-9d70-d9618b7e761c",
        "authorId" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "body" : "@penpornk that's fine.",
        "createdAt" : "2019-01-08T08:32:03Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b64c2b48875e29842e0e60ad9df80e82d1f6a399",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +976,980 @@      string padding;\n      TF_CHECK_OK(GetNodeAttr(conv_node->def(), \"padding\", &padding));\n      if (padding != \"VALID\") {\n        // Then do not merge.\n        n = nullptr;"
  },
  {
    "id" : "5c9b91dd-8a8e-4d19-aef8-9f32d7ec3233",
    "prId" : 24538,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24538#pullrequestreview-189526923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "328ecbca-eaff-4d5b-b41c-8415022c0d1a",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Could you please put the code in this `if` in the next `if` (that copies attributes) instead? ",
        "createdAt" : "2019-01-04T23:07:11Z",
        "updatedAt" : "2019-01-23T02:38:24Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b64c2b48875e29842e0e60ad9df80e82d1f6a399",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +2813,2817 @@  if (is_fused_conv2d) {\n    // FusedConv2D has one additional input, args\n    std::vector<NodeBuilder::NodeOut> args;\n    args.emplace_back(succ_in[2].first, succ_in[2].second);\n    nb.Input(gtl::ArraySlice<NodeBuilder::NodeOut>{"
  },
  {
    "id" : "17c27f5c-86c9-4764-8635-a83773808957",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-169888557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "461a9dd9-a718-4627-8cbf-413f7f51db5e",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "This check is redundant since the function would have returned in the loop above if any in edge is a control edge. I think you can skip it for slightly better performance. But up to you. If you delete this check, please add a comment that this loop assumes there is not control edge.",
        "createdAt" : "2018-10-25T20:29:50Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "d2b724db-fa15-4dae-a754-4d57cca0647a",
        "parentId" : "461a9dd9-a718-4627-8cbf-413f7f51db5e",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk I prefer to preserve this check. The assumption \"no input control edges\" is merely a temporary safe guard to stop this PR work on a training graph, and we will eventually remove this constraint when we find its safe to do this fusion in training. At that time, this check will be necessary because the \"no input control edges\" constraint has been removed. ",
        "createdAt" : "2018-10-26T05:20:03Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "52260f5e-f812-4266-9c53-0f77cd62d89c",
        "parentId" : "461a9dd9-a718-4627-8cbf-413f7f51db5e",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thanks for your explanation!",
        "createdAt" : "2018-10-30T16:59:41Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +942,946 @@    // succeed and returns true.\n    for (const Edge* e : node->in_edges()) {\n      if (!e->IsControlEdge()) {\n        const Node* perm_node = e->src();\n"
  },
  {
    "id" : "d9962bad-affa-4057-a2f8-ca24bca1b170",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-169888557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76171e57-3707-4987-857c-60df5cdfa9de",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "(Not related to this PR)\r\nUnder what circumstances? Is it an expected behavior? If not, please file a bug and we'll look into it.",
        "createdAt" : "2018-10-25T20:55:58Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "bb491a3e-2e6f-4295-9708-0d99957e366a",
        "parentId" : "76171e57-3707-4987-857c-60df5cdfa9de",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk according to my observation, in keras-based models, all \"transpose\" ops' int_val/int64_val/float_val... are not set entirely (all zero), so I have to parse the raw tensor data from \"tensor_context\" here myself. This is what I called \"some circumstance\" above. I don't think it's a desired behavior, and I will fire a bug to discuss about it.",
        "createdAt" : "2018-10-26T05:44:57Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "1c1da34b-519e-4bdb-a399-e2b8dff8e9a8",
        "parentId" : "76171e57-3707-4987-857c-60df5cdfa9de",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. Thank you very much!",
        "createdAt" : "2018-10-30T17:07:04Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +957,961 @@          // Here we directly access to the \"tensor_content\", rather than\n          // \"int_val\". This is because we find \"int_val\" is\n          // not set properly under some circumstances.\n          if (type == DT_INT32) {\n            const int type_size = 4;"
  },
  {
    "id" : "4147e7f4-23b7-4b5e-b332-85c2b0a9b536",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-168679795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0379a6ad-d788-484e-9da3-1bf236cf628c",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Please also check if node is not null.",
        "createdAt" : "2018-10-25T21:51:49Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "9976bb01-7ad7-41df-bb64-2dc3a3ed5d6d",
        "parentId" : "0379a6ad-d788-484e-9da3-1bf236cf628c",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk done.",
        "createdAt" : "2018-10-26T05:56:53Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +992,996 @@    if (node == nullptr) return false;\n\n    if (!name.empty() && node->type_string() != name) {\n      return false;\n    }"
  },
  {
    "id" : "742d5a56-a046-4588-8719-141f2d0a5e08",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-168680750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f7ae7a4-9d6b-49f7-abfe-7f769e91b64e",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Please add a function description. ",
        "createdAt" : "2018-10-25T21:54:07Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "33515e04-688e-4b15-822b-cb286b9f9787",
        "parentId" : "9f7ae7a4-9d6b-49f7-abfe-7f769e91b64e",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "> Please add a function description.\r\n\r\nDone.",
        "createdAt" : "2018-10-26T06:01:24Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +908,912 @@  // mklop(\"NCHW\").\n  // Here \"mklop\" can be any MKL-DNN supported op, such as Conv2D.\n  static Status FuseTransposeMklOpTranspose(\n      std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n      std::function<void(const Node*, NodeBuilder* nb, bool)> copy_attrs,"
  },
  {
    "id" : "14a48e2f-e958-4b32-a043-cfa9d55c7e64",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-168682561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3585bf28-b41f-41ed-a895-825bd1438cc7",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Should we also set the new `data_format` in `else`? Someone might forget to set it if we leave it to the programmer to set it manually after `copy_attr`.",
        "createdAt" : "2018-10-25T22:21:02Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "e475fdca-8f04-4b2c-8296-2ec2964cedbf",
        "parentId" : "3585bf28-b41f-41ed-a895-825bd1438cc7",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk I'm afraid not. `nb->Attr(\"data_format\", ...)` is only allowed to be called exactly once for a single nodebuilder. If we set `data_format` here, the next time we call `nb->Attr(\"data_format\", ...)` will throw an error.",
        "createdAt" : "2018-10-26T06:11:51Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 337,
    "diffHunk" : "@@ -1,1 +1818,1822 @@    TF_CHECK_OK(GetNodeAttr(orig_node->def(), \"data_format\", &data_format));\n    nb->Attr(\"data_format\", data_format);\n  } else {\n    std::vector<int32> new_strides;\n    std::vector<int32> new_dilations;"
  },
  {
    "id" : "dde8b701-d7d7-4e80-a8ae-5134634304ff",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-170498126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a533c068-42d8-4cf7-b9a0-9ff6455441c6",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Shouldn't the third parameter be about data format change? Why do you name it `kPartialCopyAttrs`?",
        "createdAt" : "2018-10-25T22:25:37Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "fe173fbd-82a9-472f-82b4-554c0f9c57a6",
        "parentId" : "a533c068-42d8-4cf7-b9a0-9ff6455441c6",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk Yes, it is. With this `kPartialCopyAttrs` set to `true`, only those attributes NOT related to `data_format` will be copied. `data_format`, `strides` and `dilations` will be set in \"FuseNode()\", so no need to copy them. That's why I call it `kPartialCopyAttrs`.",
        "createdAt" : "2018-10-26T06:15:03Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "8ad74261-6d8d-4a30-851e-5177a499c1de",
        "parentId" : "a533c068-42d8-4cf7-b9a0-9ff6455441c6",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. I still think `data_format` should also be set in `copy_attrs` though, since you can imply it in there. But up to you.",
        "createdAt" : "2018-11-01T17:17:22Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 509,
    "diffHunk" : "@@ -1,1 +2481,2485 @@\n  const bool kPartialCopyAttrs = false;\n  ri->copy_attrs(const_cast<const Node*>(orig_node), &nb, kPartialCopyAttrs);\n\n  // Set the Mkl layer label for this op."
  },
  {
    "id" : "7be14910-5978-4584-b339-9d12d47c4148",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-170498126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e601804-85fa-4177-a2a4-58b93418ce13",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Should `transpose_nhwc_in[0].second` be `mklop_in[i].second` instead?\r\n```suggestion\r\n      nb.Input(transpose_nhwc_in[0].first, mklop_in[0].second);\r\n```",
        "createdAt" : "2018-10-25T23:15:50Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "16298ab0-0059-4c8d-b7bc-830e74fd132a",
        "parentId" : "4e601804-85fa-4177-a2a4-58b93418ce13",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk why? `transpose_nhwc_in[0].first` is input node of `transpose_nhwc` (`e->src()`), and `transpose_nhwc_in[0].second` is its corresponding slot number (`e->src_output()`). \r\n\r\nWhile `mklop_in[0]` is exactly the node `transpose_nhwc`, which will be deleted in following steps. Why we need its output slot number?",
        "createdAt" : "2018-10-26T06:25:20Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "673269de-a4d9-4c3d-8250-2a8be5c2a91d",
        "parentId" : "4e601804-85fa-4177-a2a4-58b93418ce13",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "My bad. I confused what `.second` is storing for a second. Could you please add a comment that this loop is storing the output slots of the input nodes? Thank you!",
        "createdAt" : "2018-11-01T17:15:43Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 555,
    "diffHunk" : "@@ -1,1 +2679,2683 @@    if (mklop_in[i].first == transpose_to_nhwc) {\n      // Fill \"x\":\n      nb.Input(transpose_nhwc_in[0].first, transpose_nhwc_in[0].second);\n    } else {\n      // Fill inputs other than \"x\":"
  },
  {
    "id" : "b238980d-ae73-4a64-afa9-16b3d07600d6",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-169888557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ce56373-1786-48dd-a119-e4a516ee8535",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "What about control edges?",
        "createdAt" : "2018-10-25T23:25:46Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "6ea7c747-a01e-489a-8dce-72a912573abb",
        "parentId" : "3ce56373-1786-48dd-a119-e4a516ee8535",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk I did a check in \"CheckForTranspose()\" to make sure transpose ops have no control edges, so this won't be a problem.",
        "createdAt" : "2018-10-26T06:28:25Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "8c031e29-a447-46e5-94a0-9451ff6f15a4",
        "parentId" : "3ce56373-1786-48dd-a119-e4a516ee8535",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "True. Please add a comment saying so in the code.",
        "createdAt" : "2018-10-30T17:19:15Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 575,
    "diffHunk" : "@@ -1,1 +2699,2703 @@  // Fill outputs.\n  for (const Edge* e : transpose_to_nchw->out_edges()) {\n    if (!e->IsControlEdge()) {\n      const int kTransposeWithMklOpOutputSlot = 0;\n      DCHECK((*g)->AddEdge(new_node, kTransposeWithMklOpOutputSlot, e->dst(),"
  },
  {
    "id" : "84522ac4-6da3-4719-a53e-2bdb0e366b13",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-169888557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f132f891-345e-4ae5-8758-d0651be244f8",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I think this is redundant with `nb.Device(mklop->def().device());` above? If so, please delete the `nb.Device(mklop->def().device());` line.\r\nFor completeness, coud you please copy `requested_device` and `assigned_device_name_index` too?",
        "createdAt" : "2018-10-25T23:30:27Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "d46cb5d6-939e-41b7-8e20-d6d7b9db18fd",
        "parentId" : "f132f891-345e-4ae5-8758-d0651be244f8",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk why `nb.Device(mklop->def().device())` is redundant? It didn't set device name of `mklop`.",
        "createdAt" : "2018-10-26T06:52:47Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "cfbf1d9f-44df-44a1-afb3-20b7a251ab46",
        "parentId" : "f132f891-345e-4ae5-8758-d0651be244f8",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk `requested_device` and `assigned_device_name_index` copied.",
        "createdAt" : "2018-10-26T06:59:29Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "10610bb3-045b-482d-91b3-27338b8f620f",
        "parentId" : "f132f891-345e-4ae5-8758-d0651be244f8",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Oh, my bad. Sorry!",
        "createdAt" : "2018-10-30T17:41:14Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 583,
    "diffHunk" : "@@ -1,1 +2707,2711 @@\n  // Copy device assigned to old node to new node.\n  new_node->set_assigned_device_name(mklop->assigned_device_name());\n\n  // Copy requested_device and assigned_device_name_index"
  },
  {
    "id" : "44f89558-7046-4772-bbaa-2eb2d4fbc818",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-168697723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255a84c0-4e22-49b7-a0ab-9a85e3f19f36",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "This pass happening after node merging means it could miss an opportunity for a long fusion. For example, for a graph A->B->C->D->E and merge rules {A->B to AB, D->E to DE} and fusion rule {A->B->C->D->E to ABCDE}, the result will be AB->C->DE instead of ABCDE.\r\n\r\nIf you plan to do a long fusion chain only through merge rules, i.e., {A->B to AB, AB->C to ABC, ...} and only use fusion rules that doesn't contain any patterns already occurred in merge rules, please add a comment clarifying this.",
        "createdAt" : "2018-10-26T03:11:33Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "f303eb31-348c-42d3-befa-8f7d1dd56b1b",
        "parentId" : "255a84c0-4e22-49b7-a0ab-9a85e3f19f36",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk Yes. And actually I've already add a comment to explain that fusion is to handle \"3+ ops\" cases, while merge is for '2 ops'.",
        "createdAt" : "2018-10-26T07:22:07Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 663,
    "diffHunk" : "@@ -1,1 +2905,2909 @@  order.clear();\n  GetReversePostOrder(**g, &order);  // This will give us topological sort.\n  for (Node* n : order) {\n    // If node is not an op or it cannot run on CPU device, then skip.\n    if (!n->IsOp() || !CanOpRunOnCPUDevice(n)) {"
  },
  {
    "id" : "786bb2c1-224a-4f28-9ca7-98191e81c6bf",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-170094012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e69b219-11b8-4a4d-ae3a-7d1f1d3b8dd0",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "`fi` that shows up first will get applied first. This could result in a suboptimal fusion. For example, for a graph A->B->C->D and fusion rules {A->B->C to ABC, A->B->C->D to ABCD}, since the first rule gets applied first, the final graph will be ABC->D.",
        "createdAt" : "2018-10-26T03:14:53Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "4e34b9e2-873d-4b2f-a2df-c25b313f5ac6",
        "parentId" : "1e69b219-11b8-4a4d-ae3a-7d1f1d3b8dd0",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk yes, and it is also true for \"merge\". Optimal fusion can be achieved by carefully arrange the order of `fi`, put \"important\" fusion patterns at front of the list.",
        "createdAt" : "2018-10-26T07:20:09Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "4f276a08-b831-4648-a0a5-79a30ed6a6ca",
        "parentId" : "1e69b219-11b8-4a4d-ae3a-7d1f1d3b8dd0",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Please add  a comment saying so.",
        "createdAt" : "2018-10-30T17:41:42Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "6cb6fc98-525d-4373-a8cd-52d04d181d2c",
        "parentId" : "1e69b219-11b8-4a4d-ae3a-7d1f1d3b8dd0",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "A comment added in the \"finfo_.push_back(...\" stage to clarify the behavior of this fusion pattern match process.",
        "createdAt" : "2018-10-31T05:05:38Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 607,
    "diffHunk" : "@@ -1,1 +2731,2735 @@  std::vector<Node*> nodes;\n\n  for (auto fi = finfo_.begin(); fi != finfo_.end(); ++fi) {\n    //\n    // Make sure node \"a\" and its succeding nodes (b, c ...), match the pattern"
  },
  {
    "id" : "79437f47-4267-4c2c-a3cc-d0010fcc0a12",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-172313606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6ed52df-af59-4ac1-af4e-87a8a72ffefa",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "How is the op name changed? We are still using `mklop->type_string()`.",
        "createdAt" : "2018-10-26T03:37:08Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "081fea6b-aff9-4fee-917f-8b27e9d3b548",
        "parentId" : "e6ed52df-af59-4ac1-af4e-87a8a72ffefa",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "@penpornk we won't change the op name, for example, \"Conv2D\" will still be \"Conv2D\", the only change is its `data_format`, from NHWC to NCHW.",
        "createdAt" : "2018-10-26T07:13:43Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      },
      {
        "id" : "3b6fae0a-86f2-4efe-9e21-529e344c8a22",
        "parentId" : "e6ed52df-af59-4ac1-af4e-87a8a72ffefa",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "This doesn't match with the comment saying `but change the op name`. Change the comment?",
        "createdAt" : "2018-10-31T22:28:28Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "1cd37974-cc2d-4d88-9e03-adc98cd4dc67",
        "parentId" : "e6ed52df-af59-4ac1-af4e-87a8a72ffefa",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "Yes, fixed.",
        "createdAt" : "2018-11-07T01:53:18Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 549,
    "diffHunk" : "@@ -1,1 +2673,2677 @@  // We use same name as original node, but change the op\n  // type.\n  NodeBuilder nb(mklop->name(), mklop->type_string());\n\n  // Storing the output slots of the input nodes."
  },
  {
    "id" : "64a55579-c64b-4f37-b1ed-5a37a98694f6",
    "prId" : 23152,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23152#pullrequestreview-170076921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e1d7504-34db-4760-b4f5-9c7928380efb",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Please add a comment that this restriction will eventually be removed.",
        "createdAt" : "2018-10-30T17:00:23Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "7cc6a217-4b97-449f-bd68-74bfbb278b8f",
        "parentId" : "1e1d7504-34db-4760-b4f5-9c7928380efb",
        "authorId" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "body" : "Comments added.",
        "createdAt" : "2018-10-31T02:56:21Z",
        "updatedAt" : "2018-11-30T01:24:44Z",
        "lastEditedBy" : "088e7b61-2a32-44a5-a5ae-a4e4ae2305a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "814a6c24e4dfcf220a3b9ea429ad88b07fa81818",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +925,929 @@    // fusion for training\n    // in the future.\n    for (const Edge* e : node->out_edges()) {\n      if (e->IsControlEdge()) {\n        return false;"
  },
  {
    "id" : "883829d7-dd52-452b-92bb-16a942fe2a4d",
    "prId" : 21318,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21318#pullrequestreview-145762239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9dd1f49-80ee-4868-9bd3-f4a569a1ab2d",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Any reason you're using just `csinfo_.mkl_pad_with_conv2d` instead of `mkl_op_registry::GetMklOpName(csinfo_.mkl_pad_with_conv2d)`?",
        "createdAt" : "2018-08-04T00:27:59Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "69a89dfc-ba30-46ec-a624-4f1e643d9621",
        "parentId" : "b9dd1f49-80ee-4868-9bd3-f4a569a1ab2d",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "Actually I used csinfo._pad_with_conv2d for __MklDummyPadWithConv2D, and csinfo._mkl_pad_with_conv2d for _MklPadWithConv2D. Here, we have a dummy Mkl node (__MklDummyPadWithConv2D) when we merge pad and conv2d nodes. Then this dummy Mkl node is replaced by actual Mkl merged node _MklPadWithConv2D. This dummy node is needed only for merged node. Unmerged node does not need dummy node. If we try to use mkl_op_registry::GetMklOpName(csinfo_.mkl_pad_with_conv2d), then it will produce node name as _Mkl__MklPadWithConv2D, which is not intended. We here follow the same convention as the merging of conv2d+Bias as seen: https://github.com/Intel-tensorflow/tensorflow/blob/dd63093a599081accfe2a2d2ca8c029d413a15d7/tensorflow/core/graph/mkl_layout_pass.cc#L2475 ",
        "createdAt" : "2018-08-10T22:26:58Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "af5cf5d4-140d-4303-ab95-7a2725f0580b",
        "parentId" : "b9dd1f49-80ee-4868-9bd3-f4a569a1ab2d",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Got it. Thank you for the explanation!",
        "createdAt" : "2018-08-13T17:45:18Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d194c00783646820d8a2d5e9be2edf42518dafbf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +406,410 @@    rinfo_.push_back({csinfo_.mul, mkl_op_registry::GetMklOpName(csinfo_.mul),\n                      CopyAttrsDataType, AlwaysRewrite});\n    rinfo_.push_back({csinfo_.pad_with_conv2d, csinfo_.mkl_pad_with_conv2d,\n                      CopyAttrsPadWithConv2D, AlwaysRewrite});\n#ifdef INTEL_MKL_QUANTIZED"
  },
  {
    "id" : "a6e6d871-8470-4c85-bc50-7029d35f5f66",
    "prId" : 21318,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21318#pullrequestreview-145770414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bc8599f-e746-4c30-9055-0f61549fe53e",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "High-level question please. If the nodes are sorted topologically, shouldn't we always see Pad before Conv2D (for any mergeable pair) and already merged the nodes by the time we get to Conv2D?",
        "createdAt" : "2018-08-06T19:04:30Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "69a470a2-4e1d-4adc-b7ac-c9cb749c8b70",
        "parentId" : "7bc8599f-e746-4c30-9055-0f61549fe53e",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "You are correct, if they are sorted topologically, then we always see Pad before Conv2D. But, in case, the graph is not sorted topologically, and, conv2D is visited before pad, then, the merge will be completed, given that the patterns of the nodes, Pad and Conv2D are mergeable. So, the implementation here is a bit general. ",
        "createdAt" : "2018-08-11T00:54:15Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "92395fbe-d980-46da-b304-5b1f45f13e16",
        "parentId" : "7bc8599f-e746-4c30-9055-0f61549fe53e",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "Yes, you are right. If nodes are strictly sorted topoligically, then we dont need to check \"if m is conv2d find if pad is the source\". Here, we have a bit general implementation. This implementation also covers  the case if the graph is not sorted topologically, and conv2d is first visited before pad. But, I understand, this case is rare currently. Please let me know, if this is acceptable. I tried to follow similar convention as https://github.com/NervanaSystems/private-tensorflow/blob/3e2e407c49aa14b525ff6c37538ea4506a152798/tensorflow/core/graph/mkl_layout_pass.cc#L2744",
        "createdAt" : "2018-08-11T02:31:49Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "5195342a-2e51-4188-b654-cd6f20607a8b",
        "parentId" : "7bc8599f-e746-4c30-9055-0f61549fe53e",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thank you for clarifying. Since `GetConv2DOrBiasAdd` and `GetConv2DBackpropFilterOrBiasAdd` also do something like this, I think it's fine to leave it like this for now. (And maybe revisit this for all merge ops in a future PR.)\r\n\r\nDoes this mean MKL has an option to not sort the graph topologically? Is there any situation where we don't want to sort it?",
        "createdAt" : "2018-08-13T18:06:20Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d194c00783646820d8a2d5e9be2edf42518dafbf",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +853,857 @@  // merged with 'm'. If input 'm' is Conv2D, then check if there exists Pad\n  // node that can be merged with 'm'.\n  static Node* GetPadOrConv2D(const Node* m) {\n    DCHECK(m);\n    Node* n = nullptr;"
  },
  {
    "id" : "dee38b2c-3c7e-4501-9548-652a125d36c1",
    "prId" : 21318,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21318#pullrequestreview-145770414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a27c26e-eab9-483d-abce-1bdc55cf82c4",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Is it possible to have redundant incoming control edges (some ops pointing to both Pad and Conv2D)? Do you eliminate the duplicates somewhere?",
        "createdAt" : "2018-08-07T18:20:05Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "6867c865-8cd2-4f2e-a52a-22c701429ae2",
        "parentId" : "8a27c26e-eab9-483d-abce-1bdc55cf82c4",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "it is very unlikely to have one op pointing to both pad and conv2d. However, even it happens, then we allow duplicate edge to be created, by setting the third argument of AddControlEdge as \"true\". Otherwise the merge would fail. We also allow duplicate control edge to handle the case if circular control edge is present.",
        "createdAt" : "2018-08-11T00:48:11Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "73bb962a-4019-4f98-8027-63a5c7413a04",
        "parentId" : "8a27c26e-eab9-483d-abce-1bdc55cf82c4",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "This also similar to a previous merge node case : https://github.com/tensorflow/tensorflow/blob/937ae7fc1852a9396393130c232b1a8231648345/tensorflow/core/graph/mkl_layout_pass.cc#L3920",
        "createdAt" : "2018-08-11T02:35:42Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "b5dac527-d880-4445-9d39-7e9850a7f315",
        "parentId" : "8a27c26e-eab9-483d-abce-1bdc55cf82c4",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I understand that the-allow-redundant-edge flag is set to true because the new merged node has the same name as Conv2D's, and that if any node happen to point to both Pad and Conv2D we won't have a problem adding the edge twice. \r\n\r\nAny (not-truly) redundant edges that happen because the new node and the old Conv2D node have the same name will be eliminated when the old Conv2D node is removed. But there doesn't seem to be a logic to eliminate/handle redundant edges from one node pointing to both Pad and Conv2D yet. Even if it is rare, it could still happen, and it might introduce an unwanted behavior in addition to just inefficiency. So, let's fix this now. (We should fix this for other ops that have a similar issue as well -- in a different PR).\r\n\r\nI can think of two ways to do this:\r\n1. In the loop adding the edges from `succ`, check if a control edge (that started from the same node) is already added. Only add a new edge if it isn't already in there; or\r\n2. Check for redundancies and eliminate them after removing `succ` and `pred`.\r\n\r\nWe should check for redundancy in outgoing control edges, i.e., when `Pad` and `Conv2D` point to the same node, as well.",
        "createdAt" : "2018-08-13T18:37:46Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d194c00783646820d8a2d5e9be2edf42518dafbf",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +2550,2554 @@      (*g)->AddControlEdge(e->src(), new_node, false);\n    }\n  }\n\n  // Incoming edges are fixed, we will fix the outgoing edges now."
  },
  {
    "id" : "3836b49b-10d8-474b-b31f-be3ccc2db0ac",
    "prId" : 21318,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21318#pullrequestreview-145432874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c698914-c4e5-43ae-8e8b-27a4ccf2c3e7",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Should we copy `dilations` as well? (And if we should, we should do that in `CopyAttrsPadWithConv2D` as well.)",
        "createdAt" : "2018-08-07T18:41:37Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "c35bd61a-a9f4-4fd0-bd49-11448f9d6a99",
        "parentId" : "6c698914-c4e5-43ae-8e8b-27a4ccf2c3e7",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "Yes, fixed it.",
        "createdAt" : "2018-08-11T01:58:05Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d194c00783646820d8a2d5e9be2edf42518dafbf",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +1969,1973 @@      GetNodeAttr(orig_node1->def(), \"use_cudnn_on_gpu\", &use_cudnn_on_gpu));\n  // Get all attributes from old node 2.\n  TF_CHECK_OK(GetNodeAttr(orig_node2->def(), \"Tpaddings\", &Tpaddings));\n\n  // Add attributes to new node."
  },
  {
    "id" : "ce9a9d26-92e3-483a-bda2-65ec49455599",
    "prId" : 21318,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21318#pullrequestreview-180936462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b46f1a60-0087-48c2-a20a-20cc7cdfb594",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Just curious, why did you remove the check?",
        "createdAt" : "2018-12-03T18:18:50Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "352b65f8-3242-4885-bee0-96a2c5f6bed0",
        "parentId" : "b46f1a60-0087-48c2-a20a-20cc7cdfb594",
        "authorId" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "body" : "Actually, if we replace CHECK with DCHECK here, since DCHECK is a no op, that will not work, since this code has to be active during runtime. I also find that in the \"if\" part does not have CHECK so I just removed the CHECK from the \"else\". If you think, it is necessary, then I can  assign a variable to it and DCHECK to that variable.",
        "createdAt" : "2018-12-03T18:53:49Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "70fce712-0ea3-4668-9cd2-bb6886871f3d",
        "tags" : [
        ]
      },
      {
        "id" : "f9c51892-be16-41e5-8ee5-5776faa1c7c1",
        "parentId" : "b46f1a60-0087-48c2-a20a-20cc7cdfb594",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "It's okay. I don't think it's necessary. Thank you for the explanation! :)",
        "createdAt" : "2018-12-03T19:22:11Z",
        "updatedAt" : "2018-12-04T18:22:11Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d194c00783646820d8a2d5e9be2edf42518dafbf",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +2571,2575 @@      // output (at slot 0).\n      const int kPadWithConv2DOutputSlot = 0;\n      (*g)->AddEdge(new_node, kPadWithConv2DOutputSlot, e->dst(),\n                    e->dst_input());\n    }"
  },
  {
    "id" : "ec048133-84db-4e64-8f7a-54f5ed584425",
    "prId" : 12661,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/12661#pullrequestreview-59645900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ebaec9-db4d-41ef-80b1-dd7ea1736442",
        "parentId" : null,
        "authorId" : "711b9ad2-1118-41b4-bbcb-e363bd57c690",
        "body" : "Please add a TODO to add your own implementation in the future so we can avoid inter-library dependencies.",
        "createdAt" : "2017-08-30T17:38:47Z",
        "updatedAt" : "2017-08-30T18:08:48Z",
        "lastEditedBy" : "711b9ad2-1118-41b4-bbcb-e363bd57c690",
        "tags" : [
        ]
      },
      {
        "id" : "71344128-1616-4574-a4f4-d8386fc9bbcf",
        "parentId" : "c4ebaec9-db4d-41ef-80b1-dd7ea1736442",
        "authorId" : "b810f942-5f09-4971-91c8-b1fd643b001d",
        "body" : "Done.",
        "createdAt" : "2017-08-30T18:09:12Z",
        "updatedAt" : "2017-08-30T18:09:12Z",
        "lastEditedBy" : "b810f942-5f09-4971-91c8-b1fd643b001d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0cf9811746aec93d37a73a67dafba7b57819c53",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +1990,1994 @@  }\n\n  // For elementwise node, we reuse the Eigen implementation and pass the MKL\n  // metadata tensor through so we can avoid conversions. However, if all\n  // incoming edges are in TF format, we don't need all this overhead, so"
  },
  {
    "id" : "69f5ad59-8fc8-4793-b093-b638167250fe",
    "prId" : 12044,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/12044#pullrequestreview-54719742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890a30f4-4cfa-4e0d-adaa-2975e77f9619",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Is there a potential performance hit here? Was the hash table there to compensate for IsMklOp being slow? If not, this is obviously fine.",
        "createdAt" : "2017-08-07T17:17:43Z",
        "updatedAt" : "2017-08-07T17:17:51Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "7e1e2708-e120-48bb-a94b-80efc86c287c",
        "parentId" : "890a30f4-4cfa-4e0d-adaa-2975e77f9619",
        "authorId" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "body" : "No, there is no performance penalty. IsMklOk function is just a simple predicate, so it is not at all slow.",
        "createdAt" : "2017-08-07T17:21:37Z",
        "updatedAt" : "2017-08-07T17:21:37Z",
        "lastEditedBy" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "tags" : [
        ]
      }
    ],
    "commit" : "b35b3d1c5b234426d7b830a7137c20bf0ac5ce69",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1072,1076 @@  DataType T;\n  if (GetNodeAttr(n->def(), \"T\", &T).ok() &&\n      mkl_op_registry::IsMklOp(n->type_string(), T)) {\n    // If this is an MKL op, then it will generate an edge that will receive\n    // Mkl tensor from a node."
  },
  {
    "id" : "ee2db78c-f457-46eb-9aae-f7b40212af9d",
    "prId" : 8968,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8968#pullrequestreview-31607823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d80c43cc-fe0b-4fec-9c1a-c3de8d2bb5ec",
        "parentId" : null,
        "authorId" : "6bc97f28-dad4-4ccf-a190-5a69645348d5",
        "body" : "Line 231, \"transformation of MaxPool will be exactly same\", not clear what is the same to what?",
        "createdAt" : "2017-04-06T18:18:26Z",
        "updatedAt" : "2017-04-13T23:37:54Z",
        "lastEditedBy" : "6bc97f28-dad4-4ccf-a190-5a69645348d5",
        "tags" : [
        ]
      },
      {
        "id" : "79679af0-365b-411b-b22b-1a31c59f0818",
        "parentId" : "d80c43cc-fe0b-4fec-9c1a-c3de8d2bb5ec",
        "authorId" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "body" : "Fixed",
        "createdAt" : "2017-04-07T16:40:06Z",
        "updatedAt" : "2017-04-13T23:37:54Z",
        "lastEditedBy" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5ef5bfcb39a0ba0cef4e1f7e9d766344f918ab2",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +239,243 @@// -------------------------------------------\n// Consider BiasAddGrad op as:\n//\n//           O = MklConv2D(A, B, C, A_m, B_m, C_m)\n//           P = BiasAddGrad(O)"
  },
  {
    "id" : "33f1d21d-6931-456b-8e44-71a89b52479d",
    "prId" : 8968,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8968#pullrequestreview-32280177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7223ffad-9543-4ba8-bdcc-aeb4e5ac6ca7",
        "parentId" : null,
        "authorId" : "6bc97f28-dad4-4ccf-a190-5a69645348d5",
        "body" : "Sorry, I misread it as Predict ... I think removing it is still fine.",
        "createdAt" : "2017-04-12T05:33:24Z",
        "updatedAt" : "2017-04-13T23:37:54Z",
        "lastEditedBy" : "6bc97f28-dad4-4ccf-a190-5a69645348d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5ef5bfcb39a0ba0cef4e1f7e9d766344f918ab2",
    "line" : 544,
    "diffHunk" : "@@ -1,1 +452,456 @@\n private:\n  // Check if we rewrote node 'n'\n  //\n  // If we rewrote the node, then the rewritten node will produce"
  }
]