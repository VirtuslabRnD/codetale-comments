[
  {
    "id" : "8566d879-3553-4de0-98d6-f9260b53cef5",
    "prId" : 3718,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1ad534e-eb20-4cdc-8914-17bfe59a337a",
        "parentId" : null,
        "authorId" : "c88af626-95c4-44a1-a457-e22900d07eda",
        "body" : " The code would be simpler if you used partial specialization instead: you could for example write this to implement the casting from complex to real.\ntemplate <typename From, typename To>\nstruct scalar_cast_opstd::complex<From, To> {\n EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const std::complex<From>& a) const {\n  return static_cast<To>(a.real());\n  }\n};\n",
        "createdAt" : "2016-08-10T19:09:13Z",
        "updatedAt" : "2016-08-10T20:22:30Z",
        "lastEditedBy" : "c88af626-95c4-44a1-a457-e22900d07eda",
        "tags" : [
        ]
      },
      {
        "id" : "7c0bc72b-c4af-4a5b-9b8a-07d0ebc12740",
        "parentId" : "a1ad534e-eb20-4cdc-8914-17bfe59a337a",
        "authorId" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "body" : "Ah, I spent a lot of time trying to make a partial specialization approach work.\nBut I was trying to use SFINAE to specialize for both `complex64` and `complex128` at once, which isn't really possible here.\nI should have realized that I can do\n\n``` c++\ntemplate<typename From, typename To>\nstruct scalar_cast_op<std::complex<From>, To> {\n  To operator()(const std::complex<From>& a) const {\n     ...\n   }\n};\n```\n\nas you've suggested.\nThis works really well, and should make the code a lot more elegant.\nI'll update the PR.\n",
        "createdAt" : "2016-08-10T19:31:05Z",
        "updatedAt" : "2016-08-10T20:22:30Z",
        "lastEditedBy" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce8d866ff0ab3f1bb665af4575e5ff41b1c28850",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +56,60 @@};\n\ntemplate<typename From, typename To>\nstruct scalar_cast_op<From, std::complex<To>> {\n  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"
  }
]