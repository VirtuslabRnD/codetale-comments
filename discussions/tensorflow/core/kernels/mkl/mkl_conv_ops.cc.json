[
  {
    "id" : "80f418a9-89e2-49a0-b807-35ac6fea9743",
    "prId" : 47828,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47828#pullrequestreview-620320826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd88d2f6-5bf4-459f-8704-b741ec125a48",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Why is this a virtual function?",
        "createdAt" : "2021-03-23T02:41:55Z",
        "updatedAt" : "2021-03-23T21:47:47Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "fdb1a510-6c14-41c7-863d-68c81fbefc99",
        "parentId" : "cd88d2f6-5bf4-459f-8704-b741ec125a48",
        "authorId" : "807f262f-04de-47a1-a059-0eca431127a7",
        "body" : "Good question. The ComputBNScale is only applicable to the MklFusedConvOp, but with the current design of mkl_conv_ops, the calling of ComputeBNScale is common to all the subclasses. I need to make this function virtual, so the computation is only invoked for MklFusedConvOp, and for the rest, no computation is invoked. ",
        "createdAt" : "2021-03-23T17:30:33Z",
        "updatedAt" : "2021-03-23T21:47:47Z",
        "lastEditedBy" : "807f262f-04de-47a1-a059-0eca431127a7",
        "tags" : [
        ]
      },
      {
        "id" : "cf52ee5a-7867-4d3d-b19f-3f54d4ec286d",
        "parentId" : "cd88d2f6-5bf4-459f-8704-b741ec125a48",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thank you for the clarification! Then I think the signature of this function should be\r\n```c++\r\nvoid ComputeBNScale(...) override {...}\r\n```\r\ninstead, since it's in a derived class. I'll fix this internally.",
        "createdAt" : "2021-03-24T04:46:13Z",
        "updatedAt" : "2021-03-24T04:46:13Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "e451892a-27f4-484a-b8f7-09b98665307c",
        "parentId" : "cd88d2f6-5bf4-459f-8704-b741ec125a48",
        "authorId" : "807f262f-04de-47a1-a059-0eca431127a7",
        "body" : "thanks!",
        "createdAt" : "2021-03-24T23:53:56Z",
        "updatedAt" : "2021-03-24T23:53:56Z",
        "lastEditedBy" : "807f262f-04de-47a1-a059-0eca431127a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b09fc1693618e1ce127ca681dd60e4a844a74b",
    "line" : 471,
    "diffHunk" : "@@ -1,1 +1506,1510 @@  }\n\n  virtual void ComputeBNScale(OpKernelContext* context, float epsilon,\n                              int bn_variance_index, Tinput* scale_buf_ptr) {\n    const Tensor& bn_var_tensor = MklGetInput(context, bn_variance_index);"
  },
  {
    "id" : "20255ecd-ca45-4830-b36b-b70413802bb7",
    "prId" : 47775,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47775#pullrequestreview-618083080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba0300f6-b934-4fa0-a50a-2947e92d9b61",
        "parentId" : null,
        "authorId" : "9defd1ed-4e77-44a0-804d-edbf7b5d037c",
        "body" : "What is the rationale for adding the filter address to the key? If the filter is not a constant, the address could change from iteration to iteration. ",
        "createdAt" : "2021-03-19T22:38:02Z",
        "updatedAt" : "2021-03-24T19:59:25Z",
        "lastEditedBy" : "9defd1ed-4e77-44a0-804d-edbf7b5d037c",
        "tags" : [
        ]
      },
      {
        "id" : "75573f8d-5fa9-4603-a801-21bf6d169a9a",
        "parentId" : "ba0300f6-b934-4fa0-a50a-2947e92d9b61",
        "authorId" : "5a8329aa-95e3-47a3-9af8-1712c35acf20",
        "body" : "@agramesh1, this is due to Compute Library programming model, it creates a primitive per filter tensor, not per shape. And during the inference there is usually a set of constant addresses for the weights.",
        "createdAt" : "2021-03-22T11:42:13Z",
        "updatedAt" : "2021-03-24T19:59:25Z",
        "lastEditedBy" : "5a8329aa-95e3-47a3-9af8-1712c35acf20",
        "tags" : [
        ]
      },
      {
        "id" : "fad5b9a8-2c6a-4309-8fee-834b2e3fd65a",
        "parentId" : "ba0300f6-b934-4fa0-a50a-2947e92d9b61",
        "authorId" : "9defd1ed-4e77-44a0-804d-edbf7b5d037c",
        "body" : "ok. then it should be fine. ",
        "createdAt" : "2021-03-23T00:24:55Z",
        "updatedAt" : "2021-03-24T19:59:25Z",
        "lastEditedBy" : "9defd1ed-4e77-44a0-804d-edbf7b5d037c",
        "tags" : [
        ]
      }
    ],
    "commit" : "10f7d23b9c8cfa4362df05028317d8bae59f9d3a",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +669,673 @@                                   static_cast<const void*>(\n                                   filter_tensor.flat<Tfilter>().data()));\n#endif\n\n      conv_fwd ="
  },
  {
    "id" : "117d97ea-4a08-43cf-a839-a59fc8c77da3",
    "prId" : 44064,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44064#pullrequestreview-510743286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3660215-1b30-4544-8d5e-325af419833f",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Nit: I think we can just use `add_md` and `dst_md` here since the macros for v0.x has ready been deleted anyway. But if you'd rather keep `ADD_MD` and `DST_MD` to be consistent (for a later clean-up), I'm fine with that too.\r\n```suggestion\r\n          add_md = dst_md =\r\n```",
        "createdAt" : "2020-10-16T05:03:18Z",
        "updatedAt" : "2020-10-16T18:49:27Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "006c83d2-967f-4d8f-aaf7-e36c0c06ecfd",
        "parentId" : "d3660215-1b30-4544-8d5e-325af419833f",
        "authorId" : "25745d2d-fe01-49de-975c-879c043e0b34",
        "body" : "Let's keep it like that since my colleague is preparing another PR to cleanup the whole file.",
        "createdAt" : "2020-10-16T18:54:52Z",
        "updatedAt" : "2020-10-16T18:54:52Z",
        "lastEditedBy" : "25745d2d-fe01-49de-975c-879c043e0b34",
        "tags" : [
        ]
      },
      {
        "id" : "f6b83b23-8a7e-403b-91f2-417005db801a",
        "parentId" : "d3660215-1b30-4544-8d5e-325af419833f",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Sounds good!",
        "createdAt" : "2020-10-16T19:24:24Z",
        "updatedAt" : "2020-10-16T19:24:33Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d7af9628186a7f22dc3fee60469dd3570e3435",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +983,987 @@          // We are simply deep copying the add_tensor to output_tensor without\n          // changing memory layout, hence using same memory descriptor.\n          ADD_MD = DST_MD =\n              memory::desc({add_tensor.NumElements()}, MklDnnType<Toutput>(),\n                           mkldnn::memory::format_tag::x);"
  },
  {
    "id" : "116049a2-b955-44ba-a5e3-6b2885374ed8",
    "prId" : 43213,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43213#pullrequestreview-490040174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c83e5ff-c1f3-4e36-870b-324cd61a64b3",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Nit:\r\n```suggestion\r\n      Name(\"_MklNativeDepthwiseConv2DNative\")                                 \\\r\n```",
        "createdAt" : "2020-09-15T18:12:59Z",
        "updatedAt" : "2020-09-16T21:33:53Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "4945b23a-e0aa-4e65-8654-3e15ee0534d7",
        "parentId" : "9c83e5ff-c1f3-4e36-870b-324cd61a64b3",
        "authorId" : "25745d2d-fe01-49de-975c-879c043e0b34",
        "body" : "Same as above.",
        "createdAt" : "2020-09-16T21:40:31Z",
        "updatedAt" : "2020-09-16T21:40:31Z",
        "lastEditedBy" : "25745d2d-fe01-49de-975c-879c043e0b34",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae61cc91e748dd1b38aa99019de77d93d91016a9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2447,2451 @@                              true>);                                         \\\n  REGISTER_KERNEL_BUILDER(                                                    \\\n      Name(\"_MklNativeDepthwiseConv2dNative\")                                 \\\n          .Device(DEVICE_CPU)                                                 \\\n          .TypeConstraint<T>(\"T\")                                             \\"
  }
]