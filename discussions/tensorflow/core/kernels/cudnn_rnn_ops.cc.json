[
  {
    "id" : "c0a34fa9-ff10-4a8d-91e9-9a747bf7fac6",
    "prId" : 41832,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41832#pullrequestreview-457920159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Let's add a `static_assert` on the size of the struct here so that we're reminded to update this method if we ever add new fields.",
        "createdAt" : "2020-07-28T19:28:49Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "6d549207-46d1-407a-90bf-927ae1926b28",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "@sanjoy Sure, something like `static_assert(sizeof(*this) == x);` ?",
        "createdAt" : "2020-07-28T20:11:05Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "b87e6bcd-878e-4f90-b882-2cf3644ad150",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "That might sound a bit stupid, but I'm unsure whether you refer to `sizeof()` or something else more tensorflow specific: to the best of my knowledge sizeof(struct) has no guarantee that the side of the structure is equal to the sum of its members size, so I'm unsure exactly what you have in mind here when you refer to \"the size of the struct\" :/ ",
        "createdAt" : "2020-07-28T20:19:44Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "c651f8e6-4123-4f36-a76b-6f1f03387d01",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I was talking about `sizeof`.  It is true that adding a new field will not necessarily increase the `sizeof` value, but it usually will and can be a good \"quick and dirty\" way to ensure that someone adding a new field remembers to update `IsCompatibleWith` and `CudnnRnnConfigHasher`.",
        "createdAt" : "2020-07-28T22:10:38Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "342e3f51-214e-425a-97d2-03673315c63b",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "Hm, basic strict equality does not work for me at all :[\r\n```\r\ndiff --git a/tensorflow/core/kernels/cudnn_rnn_ops.cc b/tensorflow/core/kernels/cudnn_rnn_ops.cc\r\nindex a7a80e25f4..503cc9cd6d 100644\r\n--- a/tensorflow/core/kernels/cudnn_rnn_ops.cc\r\n+++ b/tensorflow/core/kernels/cudnn_rnn_ops.cc\r\n@@ -506,6 +506,20 @@ struct CudnnRnnModelShapes {\r\n   TensorShape cell_state_shape;\r\n   // At present only fields related to cached RnnDescriptor are concerned.\r\n   bool IsCompatibleWith(const CudnnRnnModelShapes& rhs) const {\r\n+    // Ensure the size of structure does not change, this will help\r\n+    // people adding new field not forgetting about adding those fields to\r\n+    // IsCompatibleWith()\r\n+    static_assert(sizeof(struct CudnnRnnModelShapes) == sizeof(int /* num_layers */)\r\n+                                 + sizeof(int /* input_size */)\r\n+                                + sizeof(int /* num_units */)\r\n+                                + sizeof(int /* dir_count */)\r\n+                                + sizeof(int /* max_seq_length */)\r\n+                                + sizeof(int /* batch_size */)\r\n+                                + sizeof(int /* cell_num_units */)\r\n+                                + sizeof(TensorShape /* input_shape */)\r\n+                                + sizeof(TensorShape /* output_shape */)\r\n+                                + sizeof(TensorShape /* hidden_state_shape */)\r\n+                                + sizeof(TensorShape /* cell_state_shape */), \"check struct CudnnRnnModelShapes members\");\r\n     return num_layers == rhs.num_layers && input_size == rhs.input_size &&\r\n            num_units == rhs.num_units && dir_count == rhs.dir_count &&\r\n            cell_num_units == rhs.cell_num_units && max_seq_length == rhs.max_seq_length;\r\n```",
        "createdAt" : "2020-07-29T07:46:26Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "ccb8f344-18b4-43b9-963c-8e645f2fd02c",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "Greater or equal works, but I don't think it's really a useful check here :/",
        "createdAt" : "2020-07-29T08:03:14Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "8ccd3074-49d7-4cba-87db-617ab3e66332",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "FTR:\r\n```\r\nsizeof(struct CudnnRnnModelShapes) == 128\r\nsizeof(int) * 7 == 28\r\nsizeof(TensorShape) * 4 == 96\r\n```\r\n\r\nWe could test for `sizeof(struct CudnnRnnModelShapes) >= 124 && sizeof(struct CudnnRnnModelShapes) <= 128`, but I feel it might blow easily :/",
        "createdAt" : "2020-07-29T08:17:17Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "afa02d1b-5198-4051-a38a-6fd22a44d4b9",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "Like, the static assert still works if I add a `char` or even an `int`, since the compiler can fit in the new entry within the padding it seems to have added. If you have a better idea, I'd be happy to implement it.",
        "createdAt" : "2020-07-29T08:23:06Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      },
      {
        "id" : "ee0c6c24-322a-4003-ac79-9fbe3b661a5d",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Ok, probably then just a comment under `int cell_num_units = 0;` stating that if someone adds a new field they should also update the equality and hash functions?",
        "createdAt" : "2020-07-29T21:26:27Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "09826476-1f3a-48a4-90a8-03f5241c7b15",
        "parentId" : "171d17f0-12e5-4ac7-9b7a-e2ea68a0f746",
        "authorId" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "body" : "Done :)",
        "createdAt" : "2020-07-29T21:44:22Z",
        "updatedAt" : "2020-07-31T12:31:37Z",
        "lastEditedBy" : "e0336e73-6508-4faa-90aa-3332aa8431d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9442cbb955147567792c37ace0090f7ae9df8360",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +512,516 @@    return num_layers == rhs.num_layers && input_size == rhs.input_size &&\n           num_units == rhs.num_units && dir_count == rhs.dir_count &&\n           cell_num_units == rhs.cell_num_units && max_seq_length == rhs.max_seq_length;\n  }\n  string DebugString() const {"
  },
  {
    "id" : "ad937cbc-c99d-4cfb-81b7-7e3fec6f02a0",
    "prId" : 27756,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/27756#pullrequestreview-242958570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22ace8ca-e60c-4e6c-bbe6-36f7e93c5914",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "(Sorry I'm not familiar with the details of cudnnrnn) What is dir_count? Will this new check about dir_count break any existing model?",
        "createdAt" : "2019-05-28T23:18:16Z",
        "updatedAt" : "2019-06-07T17:16:15Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0ea11b15886b62ce7184bf9ab4a5e2502afe985",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +511,515 @@  bool IsCompatibleWith(const CudnnRnnModelShapes& rhs) const {\n    return num_layers == rhs.num_layers && input_size == rhs.input_size &&\n           num_units == rhs.num_units && dir_count == rhs.dir_count &&\n           cell_num_units == rhs.cell_num_units;\n  }"
  },
  {
    "id" : "834ad549-2ca9-4068-98fc-272ddae8a7a4",
    "prId" : 27756,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/27756#pullrequestreview-242958570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9157fbf9-8622-421b-a56d-52f8e196b2f7",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Please avoid acronyms.",
        "createdAt" : "2019-05-28T23:20:17Z",
        "updatedAt" : "2019-06-07T17:16:15Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0ea11b15886b62ce7184bf9ab4a5e2502afe985",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +691,695 @@    OpKernelContext* context, const CudnnRnnModelShapes& model_shapes,\n    std::unique_ptr<RnnSequenceTensorDescriptor>* input_desc,\n    std::unique_ptr<RnnStateTensorDescriptor>* h_state_desc,\n    std::unique_ptr<RnnStateTensorDescriptor>* c_state_desc,\n    std::unique_ptr<RnnSequenceTensorDescriptor>* output_desc,"
  },
  {
    "id" : "53e2fc54-e81e-4f28-9564-782936e806c4",
    "prId" : 27756,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/27756#pullrequestreview-244090140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c899c2e-f657-4b31-bbf1-9bbdddd9c8ca",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Since it used to enforce that attribute num_params exists, should we ensure that one and only one set of attributes {num_params} and {num_params_weights, num_params_biases} is set?",
        "createdAt" : "2019-05-28T23:32:44Z",
        "updatedAt" : "2019-06-07T17:16:15Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "69dfdf4f-22de-4c06-88d2-b19174d3af5a",
        "parentId" : "7c899c2e-f657-4b31-bbf1-9bbdddd9c8ca",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "I tried to only use {num_params_weights, num_params_biases}. I use the existence of `num_params` to correctly set num_params_weights and num_params_biases (at the end of this constructor). In the following `Compute()`, only num_params_weights and num_params_biases are used.",
        "createdAt" : "2019-05-31T00:31:34Z",
        "updatedAt" : "2019-06-07T17:16:15Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0ea11b15886b62ce7184bf9ab4a5e2502afe985",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +1149,1153 @@  explicit CudnnRNNParamsToCanonical(OpKernelConstruction* context)\n      : CudnnRNNKernelCommon(context) {\n    if (context->HasAttr(\"num_params\")) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"num_params\", &num_params_));\n    } else {"
  },
  {
    "id" : "24174acc-f164-404b-9986-c0b6a433ab48",
    "prId" : 24812,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24812#pullrequestreview-200889128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df200d78-6be3-40c7-940c-4620fc72d55d",
        "parentId" : null,
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "I suggest merging the 2 callsites of `ExtractForwardInput` with one unified `ExtractForwardInput(..., sequence_lengths)`.\r\n\r\nHow about adding a `context->HasInput()` function in `tensorflow/core/framework/op_kernel.cc`, to check if `sequence_length` is an input of the op in `ExtractForwardInput`",
        "createdAt" : "2019-02-07T01:56:34Z",
        "updatedAt" : "2019-03-07T04:46:22Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      }
    ],
    "commit" : "40df70df7450a0d83645455d9db7d5d332ea192b",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +1284,1288 @@    CudnnRnnModelShapes model_shapes;\n    if (var_seq_lengths) {\n      OP_REQUIRES_OK(\n          context, ExtractForwardInput(context, model_types(), time_major,\n                                       &input, &input_h, &input_c, &params,"
  },
  {
    "id" : "e185a158-199f-441f-aaa6-5ce5a8082b86",
    "prId" : 23588,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23588#pullrequestreview-181007038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "880bc414-f522-477e-a9ed-ce95acc3dfe3",
        "parentId" : null,
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "How about trying `absl::Span`? There's one `MakeSpan(T* ptr, size_t size)`\r\nhttps://github.com/abseil/abseil-cpp/blob/master/absl/types/span.h#L176\r\n\r\nLet's pass a `absl::Span` to the sequence descriptor constructor? ",
        "createdAt" : "2018-11-23T06:30:04Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      },
      {
        "id" : "a552e6fe-632b-4143-b55d-5a6fb0d606cb",
        "parentId" : "880bc414-f522-477e-a9ed-ce95acc3dfe3",
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "Ping.",
        "createdAt" : "2018-12-03T23:52:48Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf46fa4c5225e853e602b0e18951884b08729163",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +695,699 @@\n  absl::Span<const int> seq_lengths;\n  if (sequence_lengths != nullptr) {\n    seq_lengths = absl::Span<const int>(\n        sequence_lengths->template flat<int>().data(),"
  },
  {
    "id" : "07e8ad53-67a1-4b77-a0e8-2c7641002d98",
    "prId" : 23588,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23588#pullrequestreview-181557720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27c92721-fb55-4e46-a536-18580e13d3a2",
        "parentId" : null,
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "This should share most code with the existing `ExtractForwardInput()`",
        "createdAt" : "2018-12-03T23:52:39Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      },
      {
        "id" : "b60c22dc-df81-4d8e-b559-789d3c3e33ca",
        "parentId" : "27c92721-fb55-4e46-a536-18580e13d3a2",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "I copied from original `ExtractForwardInput()` and added a line to set the `sequence_lengths`. So, I think it already share most code with the existing `ExtractForwardInput()`. Do you mean something else? ",
        "createdAt" : "2018-12-05T00:12:42Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      },
      {
        "id" : "e44fff77-0993-42a6-911e-9f9895e541dd",
        "parentId" : "27c92721-fb55-4e46-a536-18580e13d3a2",
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "I mean let's not duplicate code.",
        "createdAt" : "2018-12-05T01:08:41Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      },
      {
        "id" : "95f6313e-2b3f-4406-9c68-47aa700395b4",
        "parentId" : "27c92721-fb55-4e46-a536-18580e13d3a2",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Oh I see. You mean I need to define a new func to only process the sequence_lengths.",
        "createdAt" : "2018-12-05T01:26:15Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      },
      {
        "id" : "d9505cdb-80df-4ff1-a053-66d3f054e84d",
        "parentId" : "27c92721-fb55-4e46-a536-18580e13d3a2",
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "Yes, which calls the original function.",
        "createdAt" : "2018-12-05T01:28:11Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf46fa4c5225e853e602b0e18951884b08729163",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +611,615 @@// Extract and checks the sequence_lengths, forward input tensors,\n// parameters, and shapes from the OpKernelContext.\nStatus ExtractForwardInput(OpKernelContext* context,\n                           const CudnnModelTypes& model_types,\n                           const Tensor** input, const Tensor** input_h,"
  },
  {
    "id" : "3870a99e-8c8a-4b56-ba2f-bb3ebd09cf64",
    "prId" : 23588,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23588#pullrequestreview-181007038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "765bcab8-f523-456a-a848-664f15257a82",
        "parentId" : null,
        "authorId" : "ed1418d4-e022-4541-929d-990e12851735",
        "body" : "Please don't copy-and-paste.\r\nV3 calls v1's `ComputeAndREturnAlgorithm()`, and just allocate dummy `output_host_reserved` output here. Remove all comments (sort of inaccurate), instead explain how v3 doesn't support autotune now and this field isn't used at present.",
        "createdAt" : "2018-12-04T00:01:16Z",
        "updatedAt" : "2018-12-18T03:44:04Z",
        "lastEditedBy" : "ed1418d4-e022-4541-929d-990e12851735",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf46fa4c5225e853e602b0e18951884b08729163",
    "line" : 338,
    "diffHunk" : "@@ -1,1 +1577,1581 @@    }\n\n    Tensor* output_host_reserved = nullptr;\n    // TODO: Current V3 only uses the default standard algorithm to process \n    // batches with variable sequences and the inputs should be padded. "
  }
]