[
  {
    "id" : "a9851409-241b-44d2-98c7-4912535fc240",
    "prId" : 41645,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41645#pullrequestreview-454370900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be3ce1db-dd93-42e8-adcc-3914bc9ae5a8",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thank you for the detailed documentation!",
        "createdAt" : "2020-07-27T23:05:53Z",
        "updatedAt" : "2020-07-31T18:48:23Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d33a66af84b6e47b22f6509e6558eed89ee949f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +26,30 @@// if INTEL_MKL_DNN_ONLY is not defined, both oneDNN and MKL CBLAS\n// implementations are used. This is only temporary, once we are able handle all\n// cases with oneDNN, CBLAS calls will be removed.\n\n#define EIGEN_USE_THREADS"
  },
  {
    "id" : "a8c06bc1-146e-4961-ab18-7bf751c11524",
    "prId" : 40128,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40128#pullrequestreview-425772641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c9094b-5beb-4a9d-8140-3b9a655ad64e",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Nit: Would you mind putting this line before the v2 registration (`TF_CALL_float(REGISTER_BATCH_MATMUL_MKL_V2);`)?",
        "createdAt" : "2020-06-07T23:05:33Z",
        "updatedAt" : "2020-06-08T16:28:37Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "28ce8a1c9aaf95baf278406c645d204197b0a831",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +291,295 @@\n#ifdef ENABLE_MKL\nTF_CALL_float(REGISTER_BATCH_MATMUL_MKL);\nTF_CALL_float(REGISTER_BATCH_MATMUL_MKL_V2);\n#if defined(ENABLE_MKLDNN_V1) && defined(ENABLE_INTEL_MKL_BFLOAT16)"
  },
  {
    "id" : "2ca819b3-3c94-474b-bb97-4c730e42c82e",
    "prId" : 37954,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/37954#pullrequestreview-386025104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb1059f-43db-4a7f-a18f-791ceb39e4e1",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "`a_array`, `b_array`, and `c_array` are only used here. Please put lines 151-174 in `else` too.",
        "createdAt" : "2020-04-01T21:20:14Z",
        "updatedAt" : "2020-04-01T23:51:15Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "e062e2df-2df3-45c5-9a83-ff3bea573553",
        "parentId" : "bdb1059f-43db-4a7f-a18f-791ceb39e4e1",
        "authorId" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "body" : "Done. Thanks.",
        "createdAt" : "2020-04-01T23:51:35Z",
        "updatedAt" : "2020-04-01T23:51:36Z",
        "lastEditedBy" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "tags" : [
        ]
      }
    ],
    "commit" : "0403fccb310509fa10c06ebe85f98720401219bb",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +193,197 @@      }\n\n      // MKL CBLAS API requires a, b, and c as array of pointers, where each\n      // pointer is to 2D matrix.\n      MklCblasGemmBatch(CblasRowMajor, adj_x_, adj_y_, m_array, n_array,"
  },
  {
    "id" : "89a84bbd-1aa7-4c78-82cf-f1135399083e",
    "prId" : 36738,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36738#pullrequestreview-360656169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f51e586-84d1-49c8-92fa-86682dd98645",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Can we just use `T` for type to avoid the if-else here?\r\n```c++\r\n      std::vector<T> alpha_Array(group_size[0], 1.0);\r\n      std::vector<T> beta_Array(group_size[0], 0.0);\r\n      cblas_sgemm_batch(Layout, &TransA_Array[0], &TransB_Array[0], &M_Array[0],\r\n                        &N_Array[0], &K_Array[0], &alpha_Array[0],\r\n                        reinterpret_cast<const T**>(A_Array), &lda_Array[0],\r\n                        reinterpret_cast<const T**>(B_Array), &ldb_Array[0],\r\n                        &beta_Array[0], reinterpret_cast<T**>(C_Array),\r\n                        &ldc_Array[0], group_count, &group_size[0]);\r\n```",
        "createdAt" : "2020-02-18T18:58:47Z",
        "updatedAt" : "2020-02-20T04:03:21Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "a041d2b8-3578-4605-ad1e-6ee1e7a4fd0c",
        "parentId" : "4f51e586-84d1-49c8-92fa-86682dd98645",
        "authorId" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "body" : "Yes, I thought about using T for all the MklBlasBatchGemm functions. The problems though are 1) each type is using different gemm call and input transpose params (that means using runtime check which would introduce unnecessary slowdown) , and 2) implementation for complex types is slightly different than float and double -- input tensors to actual gemm call are void** type for complex while they are T** for float and double.",
        "createdAt" : "2020-02-18T19:44:16Z",
        "updatedAt" : "2020-02-20T04:03:21Z",
        "lastEditedBy" : "f1b3c014-4b6e-43e3-b9bc-45605cfc1356",
        "tags" : [
        ]
      },
      {
        "id" : "59f63e15-9724-45ca-bc85-89993a70d273",
        "parentId" : "4f51e586-84d1-49c8-92fa-86682dd98645",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I see. I forgot about `sgemm` vs `dgemm` calls here. Thank you for the explanation!",
        "createdAt" : "2020-02-18T20:39:58Z",
        "updatedAt" : "2020-02-20T04:03:21Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ccb60efd6a17af9f270460836d6d4679b7201c",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +221,225 @@          &beta_Array[0], reinterpret_cast<double**>(C_Array), &ldc_Array[0],\n          group_count, &group_size[0]);\n    }\n  }\n"
  },
  {
    "id" : "fa31b3d0-c227-488e-be72-f5be26ed124d",
    "prId" : 14335,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14335#pullrequestreview-76957269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0bd235c-8f0b-46cd-af5f-cc870db54cc6",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Please add support for complex as well.",
        "createdAt" : "2017-11-15T22:59:20Z",
        "updatedAt" : "2017-11-17T22:14:29Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      }
    ],
    "commit" : "582822d5596985b4b6497acec2850a71b5e4239f",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@\nTF_CALL_float(REGISTER_BATCH_MATMUL_MKL);\nTF_CALL_double(REGISTER_BATCH_MATMUL_MKL);\nTF_CALL_complex64(REGISTER_BATCH_MATMUL_MKL);\nTF_CALL_complex128(REGISTER_BATCH_MATMUL_MKL);"
  }
]