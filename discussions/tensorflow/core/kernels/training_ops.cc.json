[
  {
    "id" : "7dae7753-ec12-4404-9c06-d21c60a4bceb",
    "prId" : 44919,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44919#pullrequestreview-536266720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d6ce15-a390-4884-aa2c-390000b28eca",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Stray newline?",
        "createdAt" : "2020-11-21T03:42:16Z",
        "updatedAt" : "2020-11-23T07:19:14Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "3a428af4-f84c-479b-ac6b-cfe784a3d2b2",
        "parentId" : "c7d6ce15-a390-4884-aa2c-390000b28eca",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Fixed.",
        "createdAt" : "2020-11-23T08:50:45Z",
        "updatedAt" : "2020-11-23T08:50:46Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c90b9e60d7ed4a54db6af4ccaf4a69c4b37d603",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +219,223 @@        }\n      }\n\n      const auto shard = [&](Tindex start_idx, Tindex end_idx) -> void {\n        for (Tindex i = start_idx; i < end_idx; ++i) {"
  },
  {
    "id" : "b20fbb95-3f51-4041-8b0a-9b6f1051995e",
    "prId" : 44540,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44540#pullrequestreview-525796116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a8bd246-d67e-4f33-b420-077811a51c98",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "On GPU what happens if these constraints are violated?  Do we produce a bogus answer?  Or do crash in the CUDA kernel?\r\n\r\n(Please also add the answer as a comment.)",
        "createdAt" : "2020-11-03T21:19:36Z",
        "updatedAt" : "2020-12-08T01:46:27Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "1763145f-16a3-4adc-8ee7-b80815044da7",
        "parentId" : "7a8bd246-d67e-4f33-b420-077811a51c98",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "The kernel won't crash, just give bogus results. Comment added.",
        "createdAt" : "2020-11-05T06:06:22Z",
        "updatedAt" : "2020-12-08T01:46:27Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      },
      {
        "id" : "3395debc-18b7-47f0-a411-e73f6232d0b4",
        "parentId" : "7a8bd246-d67e-4f33-b420-077811a51c98",
        "authorId" : "0fba4ae7-f5e3-46ef-9588-de4df010e071",
        "body" : "The kernel won't crash, just give bogus results.",
        "createdAt" : "2020-11-08T10:55:02Z",
        "updatedAt" : "2020-12-08T01:46:27Z",
        "lastEditedBy" : "0fba4ae7-f5e3-46ef-9588-de4df010e071",
        "tags" : [
        ]
      }
    ],
    "commit" : "e34b6cef3757684650539a601877f37541868e0f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2766,2770 @@        TensorShapeUtils::IsScalar(lr.shape()) &&\n            (!std::is_same<Device, CPUDevice>::value ||\n             lr.scalar<T>()() > static_cast<T>(0) ||\n             (multiply_linear_by_lr_ && lr.scalar<T>()() >= static_cast<T>(0))),\n        errors::InvalidArgument(\"lr is not a positive scalar (or zero if \""
  },
  {
    "id" : "42935942-659b-46e7-b820-f457b66e6436",
    "prId" : 26424,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/26424#pullrequestreview-214639541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19177408-0cc7-4871-a05f-ad93573fb786",
        "parentId" : null,
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "I think both of these loops could be vectorized/simplified with Eigen (see example from redux_functor.h: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/redux_functor.h#L72-L95)\r\n\r\n```\r\n    using Input = Eigen::TensorMap<\r\n        Eigen::Tensor<const T, 1, Eigen::RowMajor, Eigen::Index>,\r\n        Eigen::Unaligned>;\r\n\r\n    Input m(m_ptr, (begin-end)), v(..), g(..);\r\n\r\n    if (use_nesterov) {\r\n      m += (grad - m) * (T(1) - beta1());\r\n      v += (grad.square() - v) * (T(1) - beta2());\r\n      var -= ((grad * (T(1) - beta1()) + beta1() * m) * alpha) / (v.sqrt() + epsilon());\r\n    } else {\r\n       ...\r\n    }\r\n}\r\n```\r\n\r\njust remove `.device()` from tensor expressions to evaluate them with default single threaded device",
        "createdAt" : "2019-03-12T00:04:16Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      },
      {
        "id" : "4c8d9885-7bbd-4c03-ae39-0e7623820647",
        "parentId" : "19177408-0cc7-4871-a05f-ad93573fb786",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "> I think both of these loops could be vectorized/simplified with Eigen (see example from redux_functor.h: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/redux_functor.h#L72-L95)\r\n> \r\n> ```\r\n>     using Input = Eigen::TensorMap<\r\n>         Eigen::Tensor<const T, 1, Eigen::RowMajor, Eigen::Index>,\r\n>         Eigen::Unaligned>;\r\n> \r\n>     Input m(m_ptr, (begin-end)), v(..), g(..);\r\n> \r\n>     if (use_nesterov) {\r\n>       m += (grad - m) * (T(1) - beta1());\r\n>       v += (grad.square() - v) * (T(1) - beta2());\r\n>       var -= ((grad * (T(1) - beta1()) + beta1() * m) * alpha) / (v.sqrt() + epsilon());\r\n>     } else {\r\n>        ...\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> just remove `.device()` from tensor expressions to evaluate them with default single threaded device\r\n\r\nGood idea. I also find if use \"device.parallelFor\" instead of \"Shard\", the function parameter can keep unchanged.",
        "createdAt" : "2019-03-13T07:00:52Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      },
      {
        "id" : "a5aff1d6-1346-4121-a6ef-ccae02c246ee",
        "parentId" : "19177408-0cc7-4871-a05f-ad93573fb786",
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "I realized that memory access pattern might be not as good as in a manual loop, but I'd love to see proofs in micro benchmarks. If there is no performance penalty I'd prefer smaller/simpler to read code.",
        "createdAt" : "2019-03-13T20:57:25Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      },
      {
        "id" : "c116de89-43f3-4534-8cd7-c9b78c314397",
        "parentId" : "19177408-0cc7-4871-a05f-ad93573fb786",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "OK, after I refine this code I'll try to make a micro benchmark, please wait 1~2 days, thanks.",
        "createdAt" : "2019-03-14T01:42:57Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      },
      {
        "id" : "a090b71e-372b-4e36-afb9-1ffb22331e88",
        "parentId" : "19177408-0cc7-4871-a05f-ad93573fb786",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "Done. Please check the new code, thanks!",
        "createdAt" : "2019-03-14T16:55:44Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2160c848dc74a674aab6fdb6daa7d20ea2e38788",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +341,345 @@      auto g = typename TTypes<T>::UnalignedConstTensor(g_ptr + begin, t_size);\n\n      if (use_nesterov) {\n        m += (g - m) * (T(1) - beta1());\n        v += (g.square() - v) * (T(1) - beta2());"
  },
  {
    "id" : "8ad2ffd1-2021-4853-a8a5-1cb0b3f3a4ee",
    "prId" : 26424,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/26424#pullrequestreview-215151819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adbc95a2-8f1c-4c84-9589-52ab5367bf02",
        "parentId" : null,
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "There is no need to divide the input size by the packet size, and do \"manual vectorization\". If it's desirable to have shard size `(end-begin)` to be a multiple of a packet size, you can pass `block_align` to `parallelFor` (see https://bitbucket.org/eigen/eigen/src/4b28c8008901c6d760f48f26ee2e3423fd8a2b40/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h#lines-185). \\\r\n\r\nI think this should work:\r\n```\r\n[](Index index) -> Index { return Eigen::divup(index, packet_size); }\r\n```",
        "createdAt" : "2019-03-14T17:10:23Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      },
      {
        "id" : "50017f65-9229-4458-b0cb-af874ff92450",
        "parentId" : "adbc95a2-8f1c-4c84-9589-52ab5367bf02",
        "authorId" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "body" : "I got some question when try to use this function, please see my comment below.",
        "createdAt" : "2019-03-15T17:08:49Z",
        "updatedAt" : "2019-03-19T16:31:21Z",
        "lastEditedBy" : "e8354fab-5d0f-42e9-8505-c920c048702a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2160c848dc74a674aab6fdb6daa7d20ea2e38788",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +319,323 @@    } else {\n      packet_size = 1;\n    }\n\n    T* var_ptr = var.data();"
  },
  {
    "id" : "7f2440b1-ae01-4677-9466-5c97b29a050b",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cefc7ad-e8c2-4dac-af10-d8f15c3bdaff",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Here and below: static_cast<T>(1) conforms to the style guide. Since you're using that a lot, you might want to define a static function for that.",
        "createdAt" : "2017-04-11T17:50:34Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +271,275 @@                  typename TTypes<T>::ConstFlat grad) {\n    const T alpha = lr() * Eigen::numext::sqrt(T(1) - beta2_power()) /\n                    (T(1) - beta1_power());\n    var.device(d) -= (((T(1) - gamma()) * m + gamma() * grad) * alpha)\n                     / (v.sqrt() + epsilon());"
  },
  {
    "id" : "69fddbb3-8396-4540-abf2-64f62ee1d23b",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c51e4a43-f6bd-4ce7-8951-a7fa448a6d66",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Re-order the arguments so that the output appears last: var, m, v. (Same below)",
        "createdAt" : "2017-04-11T17:51:53Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +260,264 @@template <typename Device, typename T>\nstruct ApplyRadamNonCuda {\n  void operator()(const Device& d, typename TTypes<T>::Flat var,\n                  typename TTypes<T>::Flat m, typename TTypes<T>::Flat v,\n                  typename TTypes<T>::ConstScalar beta1_power,"
  },
  {
    "id" : "de54d44e-33fa-4116-9b4e-bbf21c95bf0c",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "536e6d3d-098e-440d-8036-b47a30156dcc",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "const",
        "createdAt" : "2017-04-11T17:53:03Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2972,2976 @@\n  void Compute(OpKernelContext* ctx) override {\n    auto locks = MaybeLockMutexesInOrder(ctx, use_exclusive_lock_, {0, 1, 2});\n\n    Tensor var;"
  },
  {
    "id" : "fd56c5f2-9c8a-4f39-800b-eb33f0a9a71d",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ade3ead0-b3de-46da-a87a-6ceae2b3824b",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "remove extra space",
        "createdAt" : "2017-04-11T17:54:09Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +3000,3004 @@    const Tensor& epsilon = ctx->input(8);\n    const Tensor& gamma = ctx->input(9);\n\n\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(beta1_power.shape()),"
  },
  {
    "id" : "91e1eb32-7737-4406-8d78-c94f4a69cdb3",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40ca5929-49c1-4578-b2ec-a351609ba8de",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "FYI, the numeric indexing (rather than by name) is somewhat deprecated. You have a lot of arguments here.",
        "createdAt" : "2017-04-11T17:54:43Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +3024,3028 @@                                        gamma.shape().DebugString()));\n    \n    const Tensor& grad = ctx->input(10);\n    OP_REQUIRES(ctx, var.shape().IsSameSize(m.shape()),\n                errors::InvalidArgument(\"var and m do not have the same shape\","
  },
  {
    "id" : "e8309d76-fdba-4c37-a691-2a9e379fae13",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d2f9258-57ff-4675-8a60-f0c91e4b9eee",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "\" vs \" for readability. Here and below",
        "createdAt" : "2017-04-11T17:55:06Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +3027,3031 @@    OP_REQUIRES(ctx, var.shape().IsSameSize(m.shape()),\n                errors::InvalidArgument(\"var and m do not have the same shape\",\n                                        var.shape().DebugString(), \" \",\n                                        m.shape().DebugString()));\n    OP_REQUIRES(ctx, var.shape().IsSameSize(v.shape()),"
  },
  {
    "id" : "45754fd5-02fb-4aa8-b8c7-49ba4765d29d",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cc2c3a9-00b7-4347-9419-f9347ed7ff41",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "// GOOGLE_CUDA\r\n(remember to put two spaces before)",
        "createdAt" : "2017-04-11T17:57:19Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +3102,3106 @@REGISTER_KERNELS(GPU, float);\nREGISTER_KERNELS(GPU, double);\n#endif\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS"
  },
  {
    "id" : "3090f950-29dd-45b3-ae76-8b6bdd43cd01",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "679f9fb5-1f44-436a-a118-644bdda4abc6",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Could we refactor so that we have less duplicated code? OP_REQUIRES(ctx, CheckScalarShape(\"beta1_power\", beta1_power));",
        "createdAt" : "2017-04-11T17:59:00Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +3142,3146 @@    const Tensor& epsilon = ctx->input(8);\n\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(beta1_power.shape()),\n                errors::InvalidArgument(\"beta1_power is not a scalar: \",\n                                        beta1_power.shape().DebugString()));"
  },
  {
    "id" : "50a14bf6-1971-417a-b7cb-6ec6fc245600",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76374a47-b9f6-49bb-a260-abb560ac0fb5",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Same here, and marshal into the same validation function as RAdam",
        "createdAt" : "2017-04-11T17:59:34Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 277,
    "diffHunk" : "@@ -1,1 +3162,3166 @@\n    const Tensor& grad = ctx->input(9);\n    OP_REQUIRES(ctx, var.shape().IsSameSize(m.shape()),\n                errors::InvalidArgument(\"var and m do not have the same shape\",\n                                        var.shape().DebugString(), \" \","
  },
  {
    "id" : "3f94a754-3a5d-470b-9ace-b18fe98848b0",
    "prId" : 8405,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8405#pullrequestreview-32178857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f81e7610-a779-4adc-ad4b-5c963cf1d137",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "remove this and move the first declaration all the way up",
        "createdAt" : "2017-04-11T18:00:18Z",
        "updatedAt" : "2017-04-12T18:37:13Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebd35938768ba8b483ed82c2f7233c7b5a608340",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +3190,3194 @@};\n\nusing CPUDevice = Eigen::ThreadPoolDevice;\nusing GPUDevice = Eigen::GpuDevice;\n"
  }
]