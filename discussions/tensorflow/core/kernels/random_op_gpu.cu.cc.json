[
  {
    "id" : "cc5c47c1-801f-4eae-b1bb-2ad0031f1b2a",
    "prId" : 10298,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/10298#pullrequestreview-41118159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "parentId" : null,
        "authorId" : "e0c73848-497b-4162-afc3-88791d085557",
        "body" : "I think you also want to skip total_thread_count as well.",
        "createdAt" : "2017-05-30T20:27:45Z",
        "updatedAt" : "2017-05-31T00:10:31Z",
        "lastEditedBy" : "e0c73848-497b-4162-afc3-88791d085557",
        "tags" : [
        ]
      },
      {
        "id" : "3f9fb4ab-b5bd-4d7d-b2fd-5caffe3bf4d7",
        "parentId" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "authorId" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "body" : "I thought so too, but when I changed this, it gave different results than the CPU version of the initializer. Somehow, the generator does not generate repeated values even though this code appears to only skip `total_thread_count - 1` indices in the randomized sequence (i.e. seems like we should expect that the 0th and `total_thread_count - 1`st threads would produce the same results in successive steps). Perhaps there is an off-by-one issue inside the generator code that is consistent between CPU and GPU versions?\r\n\r\nDo you have thoughts/recommendations for how to proceed here?",
        "createdAt" : "2017-05-30T22:16:27Z",
        "updatedAt" : "2017-05-31T00:10:31Z",
        "lastEditedBy" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "tags" : [
        ]
      },
      {
        "id" : "ec0d987e-d057-48d9-9b28-580dc9e357d6",
        "parentId" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "authorId" : "e0c73848-497b-4162-afc3-88791d085557",
        "body" : "Hmm...you've verified that the 0th thread on the 2nd pass through the loop doesn't generate the same result as the last thread on the first pass?  It seems like that must be the case.  I'd like to understand how that's possible.",
        "createdAt" : "2017-05-30T22:37:35Z",
        "updatedAt" : "2017-05-31T00:10:31Z",
        "lastEditedBy" : "e0c73848-497b-4162-afc3-88791d085557",
        "tags" : [
        ]
      },
      {
        "id" : "0a51d26a-794a-47d9-88e2-9e9b408afb73",
        "parentId" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "authorId" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "body" : "Yes, I verified that. The PhiloxRandom::Skip function appears correct, so I'm also not sure how there can be an off-by-one in there.",
        "createdAt" : "2017-05-30T22:58:08Z",
        "updatedAt" : "2017-05-31T00:10:31Z",
        "lastEditedBy" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "tags" : [
        ]
      },
      {
        "id" : "3d625290-f17f-4695-a616-5242a23f695d",
        "parentId" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "authorId" : "e0c73848-497b-4162-afc3-88791d085557",
        "body" : "Can you examine the state of the kernel for those two threads using cuda-gdb or printfs?  I'd like to make sure we understand what is actually going on - there's probably something we're missing.",
        "createdAt" : "2017-05-30T23:50:32Z",
        "updatedAt" : "2017-05-31T00:10:31Z",
        "lastEditedBy" : "e0c73848-497b-4162-afc3-88791d085557",
        "tags" : [
        ]
      },
      {
        "id" : "9f737b80-8006-4778-af48-27d642e2fe02",
        "parentId" : "a4eb0a0f-7917-4c55-befa-18fb5cbc380c",
        "authorId" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "body" : "Hah! Silly: The generator automatically advances one position when it is read. Thus, when you skip after that, you only need to skip `total_thread_count - 1`",
        "createdAt" : "2017-05-31T01:59:46Z",
        "updatedAt" : "2017-05-31T01:59:46Z",
        "lastEditedBy" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b10b763d8b5ac52cb4f4e289a99c97d6a9a1fcd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +143,147 @@\n      offset += total_thread_count * kGroupSize;\n      gen.Skip(total_thread_count - 1);\n    }\n"
  }
]