[
  {
    "id" : "7f8dfede-5172-4c15-8d35-a32748b9f352",
    "prId" : 46172,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46172#pullrequestreview-601488305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ad15d1d-6d25-4d92-a5a9-53ea769eee60",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can you please split out `ScratchSpace` into its own header, either before or after landing this PR?",
        "createdAt" : "2021-02-25T06:41:11Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "71b21fcf-3d5c-4d59-b62d-30cfb381843a",
        "parentId" : "3ad15d1d-6d25-4d92-a5a9-53ea769eee60",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Good idea, I'll do this after landing this PR.",
        "createdAt" : "2021-03-02T07:15:33Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "78353b59aa7f0b2bc88ad50f642a8044c1201468",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\n#if GOOGLE_CUDA\n#include \"tensorflow/core/util/cuda_solvers.h\"  // For ScratchSpace\n#include \"tensorflow/stream_executor/cuda/cuda_activation.h\"\nusing stream_executor::cuda::ScopedActivateExecutorContext;"
  },
  {
    "id" : "54863ac4-a1c2-439c-bd2a-172929d5f81f",
    "prId" : 46172,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46172#pullrequestreview-613946549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can we throw an error if the rows are not ordered like we do in some other cases?\r\n\r\nCC @penpornk in case she has suggestions here as well.",
        "createdAt" : "2021-02-25T06:52:40Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "0af2fe57-1693-4450-b0e0-cc9b99d33a21",
        "parentId" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "The doc says `The output SparseTensor will be in row-major order` and I believe this behavior is relied-upon by some higher-level APIs.",
        "createdAt" : "2021-03-02T07:15:37Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      },
      {
        "id" : "4b643b9a-e442-4fb3-88c2-c5c1ad0267e5",
        "parentId" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I believe \"row major\" in that context means that if the logical shape of the output is (say) `[A, B, C]` then the first element of an index corresponds to `A`, second one corresponds to `B` etc.",
        "createdAt" : "2021-03-16T04:31:24Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "0f55aff5-ed9f-4ab0-ac36-6b528fee41d3",
        "parentId" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "My understanding is that it is supposed to behave like tf.sparse.reorder, which is documented as \"Reorders a SparseTensor into the canonical, row-major ordering.\"\r\n\r\nThere is a test for it: https://github.com/tensorflow/tensorflow/blob/4f80ad3/tensorflow/python/kernel_tests/sparse_ops_test.py#L588\r\n\r\nThe CPU implementation also explicitly checks if the rows are ordered, and only early-exits if they are: https://github.com/tensorflow/tensorflow/blob/69967c0/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L129-L136",
        "createdAt" : "2021-03-16T06:00:30Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      },
      {
        "id" : "04d253a9-6045-430d-8104-4e81abda5c38",
        "parentId" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I agree with @benbarsdell. The behavior here is consistent with the CPU kernel:\r\n* Can take 2D SparseTensors with unordered tuples.\r\n* Returns a 2D SparseTensor with nonzeroes stored in row-major order.",
        "createdAt" : "2021-03-16T07:35:16Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "4dd49a71-a7e5-423f-89af-a15979d41735",
        "parentId" : "a42c809b-9cab-49b5-bfc2-f73e0c0c1ac4",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "SG, I'll proceed with the rest of the review.",
        "createdAt" : "2021-03-17T06:06:03Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      }
    ],
    "commit" : "78353b59aa7f0b2bc88ad50f642a8044c1201468",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +192,196 @@    //    enqueueing the remainder of the computation onto the stream as a host\n    //    callback).\n    // 6) If rows are not ordered:\n    //      Compute input_index_map by argsorting row indices.\n    // 7) Scatter input elements into output_indices and output_values using"
  },
  {
    "id" : "a2072721-32b6-4786-b08f-97728baa4b1d",
    "prId" : 46172,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46172#pullrequestreview-614209434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77eb7a6-ab6e-4163-b90d-ec9aa587ffaa",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "So you don't need to compare columns because that's the \"row major\" invariant?  If so, please add a comment.",
        "createdAt" : "2021-03-17T06:25:20Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "76353c8f-8910-499c-ab20-5223f0f40d96",
        "parentId" : "d77eb7a6-ab6e-4163-b90d-ec9aa587ffaa",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "That's correct, comment added.",
        "createdAt" : "2021-03-17T11:47:04Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "78353b59aa7f0b2bc88ad50f642a8044c1201468",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@    // Note that this only needs to compare rows, not columns, to satisfy the\n    // row-major order invariant.\n    if (i > 0 && row < indices[(i - 1) * rank]) {\n      // TODO(benbarsdell): Replace this with atomic_ref::store when available.\n      GpuAtomicMax(rows_are_not_ordered, 1);"
  },
  {
    "id" : "11854194-817b-4bd7-a77c-7bdad449f058",
    "prId" : 46172,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46172#pullrequestreview-614209501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cfb6340-2163-4f00-97a9-2b544b8b2e09",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Is `rank` always `2`?",
        "createdAt" : "2021-03-17T06:30:01Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "37c45812-d4bf-4cdd-91d4-34b1092ef1d8",
        "parentId" : "5cfb6340-2163-4f00-97a9-2b544b8b2e09",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "No, it can be higher for higher-rank sparse tensors.",
        "createdAt" : "2021-03-17T11:47:10Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "78353b59aa7f0b2bc88ad50f642a8044c1201468",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@template <typename Tindex>\n__global__ __launch_bounds__(1024) void CountElementsPerRowKernel(\n    GpuLaunchConfig cfg, Tindex dense_rows, int rank, const Tindex* indices,\n    Tindex* elements_per_row, int* rows_are_not_ordered,\n    int* first_invalid_index) {"
  },
  {
    "id" : "47171c57-9649-4ada-922e-53ad7d36c1dc",
    "prId" : 46172,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46172#pullrequestreview-614210096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff05a809-edcb-46bc-ba78-157f74b8b749",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can some of this logic be split into separate named functions?  I think that would make the flow more readable.",
        "createdAt" : "2021-03-17T06:48:03Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "ae832285-2069-493b-b1da-3e0ca9354843",
        "parentId" : "ff05a809-edcb-46bc-ba78-157f74b8b749",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "I've pulled the output allocations and sorting logic out into helper methods so the lambda is a lot shorter now.",
        "createdAt" : "2021-03-17T11:47:52Z",
        "updatedAt" : "2021-03-22T01:24:16Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "78353b59aa7f0b2bc88ad50f642a8044c1201468",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +357,361 @@      Tensor input_index_map_t;\n      int rows_are_not_ordered = *rows_are_not_ordered_host.data();\n      if (rows_are_not_ordered) {\n        OP_REQUIRES_OK_ASYNC(context,\n                             ArgSortByRows(context, device, N, rank, dense_rows,"
  }
]