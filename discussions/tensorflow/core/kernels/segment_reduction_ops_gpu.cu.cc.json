[
  {
    "id" : "7c837fe5-b84f-40ea-82c7-783ec3c630c1",
    "prId" : 47974,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47974#pullrequestreview-644591463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "336257e1-bb00-4a8a-80d5-8694800624a2",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can you please add a comment here when `Tvec` is different from `Treducevec`?  Is it just when reduce precision is high?",
        "createdAt" : "2021-04-23T19:06:49Z",
        "updatedAt" : "2021-04-26T12:07:23Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "20c85b66-5640-492a-ace6-44651765f3cc",
        "parentId" : "336257e1-bb00-4a8a-80d5-8694800624a2",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Done",
        "createdAt" : "2021-04-26T12:07:17Z",
        "updatedAt" : "2021-04-26T12:07:23Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ca19ec18f0320d395e289b596046d8aaa708a55",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +375,379 @@}\n\n// Normalizes output_raw based on segment size and casts from Treducevec to\n// Tvec. If Tvec == Treducevec, this is safe to call with output_raw == output.\n// Note that Treducevec is the type that was used for the reduction, which may"
  },
  {
    "id" : "c8ae1916-1467-49b8-9e8a-6983999fdad6",
    "prId" : 47974,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47974#pullrequestreview-644591871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d848c35-1396-4e31-9f0f-3ec8fdf88a24",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "What do you mean by \"or any\"?",
        "createdAt" : "2021-04-25T15:10:11Z",
        "updatedAt" : "2021-04-26T12:07:23Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "6c93e4f4-faf6-4979-88f5-2948766cf85c",
        "parentId" : "7d848c35-1396-4e31-9f0f-3ec8fdf88a24",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Added comment explaining. When `indices` is provided, the first dim of `input_vec` is indexed indirectly and has no specific size requirement (as long as it covers the values in `indices`).",
        "createdAt" : "2021-04-26T12:07:46Z",
        "updatedAt" : "2021-04-26T12:07:46Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ca19ec18f0320d395e289b596046d8aaa708a55",
    "line" : 338,
    "diffHunk" : "@@ -1,1 +475,479 @@    Tsegmentids nsegments, ReduceOp reduce_op, Tinit initial_value,\n    Tinit empty_segment_value, bool is_mean, bool is_sqrtn,\n    const Tvec* input_vec,           // [nouter or any, ninner_vec]\n    const Tsegmentids* segment_ids,  // [nouter]\n    const Tindex* indices,           // [nouter] (optional)"
  },
  {
    "id" : "c2459e06-6cae-4557-8912-8297f41ceb0f",
    "prId" : 47974,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47974#pullrequestreview-644591933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06ee0103-9791-4399-910f-5438a306efbe",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Isn't this also handled in `SegmentReduceGPU`?",
        "createdAt" : "2021-04-25T15:12:10Z",
        "updatedAt" : "2021-04-26T12:07:23Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "4782e550-18c3-4d12-8e32-828fd7f314a7",
        "parentId" : "06ee0103-9791-4399-910f-5438a306efbe",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Good catch. I've removed the one in `SegmentReduceGPU` because the vectorized version should be faster.",
        "createdAt" : "2021-04-26T12:07:50Z",
        "updatedAt" : "2021-04-26T12:07:50Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ca19ec18f0320d395e289b596046d8aaa708a55",
    "line" : 344,
    "diffHunk" : "@@ -1,1 +481,485 @@  const GPUDevice& device = ctx->eigen_gpu_device();\n\n  if (nouter == 0) {\n    // Just set output to empty_segment_value.\n    GPUDevice d = ctx->template eigen_device<GPUDevice>();"
  },
  {
    "id" : "db2b28f0-1dce-4554-b5d3-36a1d59e5d09",
    "prId" : 47772,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47772#pullrequestreview-613944116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "313467db-854c-49f7-9812-164dbecc974c",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Should this live in a single utility somewhere?",
        "createdAt" : "2021-03-16T04:08:10Z",
        "updatedAt" : "2021-03-17T20:12:03Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "477a334f-85ed-4574-8da1-1c483e20e6f3",
        "parentId" : "313467db-854c-49f7-9812-164dbecc974c",
        "authorId" : "39e3aa8c-a3d1-45a2-8300-9bf553814b31",
        "body" : "Probably. I've tried moving it up into a utility in a previous PR but I believe it wasn't accepted because we didn't want to institutionalize something that was not intended to be the long-term correct way of doing it (i.e. we'll eventually move to config). I can (re-)scout for a location, move it up, and share it with other code.",
        "createdAt" : "2021-03-16T17:43:30Z",
        "updatedAt" : "2021-03-17T20:12:03Z",
        "lastEditedBy" : "39e3aa8c-a3d1-45a2-8300-9bf553814b31",
        "tags" : [
        ]
      },
      {
        "id" : "f6ecc502-9114-4f4f-a94b-ae9cc4df2168",
        "parentId" : "313467db-854c-49f7-9812-164dbecc974c",
        "authorId" : "39e3aa8c-a3d1-45a2-8300-9bf553814b31",
        "body" : "I added a TODO comment to this. How about I do this (lower-priority) factoring later and in a separate PR? It's going to potentially have a wide span in the TensorFlow source code; this function is currently replicated in several places.",
        "createdAt" : "2021-03-17T00:10:29Z",
        "updatedAt" : "2021-03-17T20:12:03Z",
        "lastEditedBy" : "39e3aa8c-a3d1-45a2-8300-9bf553814b31",
        "tags" : [
        ]
      },
      {
        "id" : "77232206-dc62-4f95-beb2-fbcc0933b6d8",
        "parentId" : "313467db-854c-49f7-9812-164dbecc974c",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "> I added a TODO comment to this. How about I do this (lower-priority) factoring later and in a separate PR? It's going to potentially have a wide span in the TensorFlow source code; this function is currently replicated in several places.\r\n\r\nSGTM",
        "createdAt" : "2021-03-17T05:59:42Z",
        "updatedAt" : "2021-03-17T20:12:03Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      }
    ],
    "commit" : "71d777c36edd89a600203542762a4fa61211be85",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +138,142 @@  }();\n  return require_determinism;\n}\n\nbool DisableSegmentReductionOpDeterminismExceptions() {"
  },
  {
    "id" : "a13adfc8-2137-448e-b2bc-2cf32798a197",
    "prId" : 11630,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11630#pullrequestreview-52240625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "186b350d-0789-44ef-aaf8-2bd9a3c16de0",
        "parentId" : null,
        "authorId" : "17de39de-cc9c-45a3-95c0-7f6d00026c06",
        "body" : "I took a closer look at this code. I think we should definitely add more tests to make sure there is no hidden race condition. Also adding a benchmark showing there is no performance regression against unsorted_segment_sum is good. \r\n\r\nPlease make sure try a few different tensor shape aspect ratio in the benchmarks.\r\n",
        "createdAt" : "2017-07-26T01:38:14Z",
        "updatedAt" : "2017-08-29T00:31:24Z",
        "lastEditedBy" : "17de39de-cc9c-45a3-95c0-7f6d00026c06",
        "tags" : [
        ]
      }
    ],
    "commit" : "50517c902261289b8163ded0979d5ac28bfe9c6d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +109,113 @@          AccumulateInto<T>(output + output_index, sum);\n        } else {\n          *(output + output_index) = sum;\n        }\n        sum = T(0);"
  }
]