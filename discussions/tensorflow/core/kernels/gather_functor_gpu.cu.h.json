[
  {
    "id" : "9a6a3738-2923-4b16-ac03-2154e7f82e80",
    "prId" : 46842,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46842#pullrequestreview-598447216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7472f9b-653e-42c3-8dcc-1c17c9c46d5c",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "This can be a bit confusing since the user will get vectorized operations or not depending on memory allocation patterns.  Do you have future plans to make this more robust around memory alignment (for instance by using non-vector loads/stores for the unaligned prefix)?  Or do you think it doesn't matter in practice?\r\n",
        "createdAt" : "2021-02-25T06:08:08Z",
        "updatedAt" : "2021-02-25T09:18:29Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "fe83cd76-1713-4977-bea5-a011ee005250",
        "parentId" : "d7472f9b-653e-42c3-8dcc-1c17c9c46d5c",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "I believe the allocator always returns aligned pointers, so I don't expect the alignment to vary.\r\nIn addition, doing non-vectorized ld/st for the prefix is not practical for multi-dimensional operations with a non-aligned stride because each row has a different alignment.",
        "createdAt" : "2021-02-25T07:30:04Z",
        "updatedAt" : "2021-02-25T09:18:29Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      },
      {
        "id" : "66105b61-0dd9-4e1e-942f-b8e876ebf1ef",
        "parentId" : "d7472f9b-653e-42c3-8dcc-1c17c9c46d5c",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Great, can you please add a comment that states this?",
        "createdAt" : "2021-02-25T08:01:59Z",
        "updatedAt" : "2021-02-25T09:18:29Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "9bbf5d0e-ae4b-446d-b6e4-885f532b8d57",
        "parentId" : "d7472f9b-653e-42c3-8dcc-1c17c9c46d5c",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "Added.",
        "createdAt" : "2021-02-25T11:06:21Z",
        "updatedAt" : "2021-02-25T11:06:21Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b4efe8fcad446436405383f76ee970ceb82cb5b",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +119,123 @@  return DispatchToVectorized<\n      T, detail::LaunchGatherKernelVectorized<is_axis_zero>::template Impl>(\n      MinAlignmentOf(params, out, slice_size), d, params, indices, out,\n      gather_dim_size, indices_size, slice_size, out_size);\n}"
  }
]