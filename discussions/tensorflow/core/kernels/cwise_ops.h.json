[
  {
    "id" : "c88b0b72-c3a1-4173-93cf-970992d73923",
    "prId" : 33278,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33278#pullrequestreview-301077996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0480ef0f-8964-43d5-a7ba-29c8f7205408",
        "parentId" : null,
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "I think this one is still required though (if T is a class or a pointer)",
        "createdAt" : "2019-10-13T14:20:41Z",
        "updatedAt" : "2019-10-13T14:23:41Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      },
      {
        "id" : "a78b61c7-de49-4e69-8697-5f5cc50676c0",
        "parentId" : "0480ef0f-8964-43d5-a7ba-29c8f7205408",
        "authorId" : "194c6d08-c511-4e08-99ed-65ee0a79b0a8",
        "body" : "If `T` is type `U *`, `const T` will be type `U * const`, not `const U *`. So it is still meaningless.",
        "createdAt" : "2019-10-14T00:29:51Z",
        "updatedAt" : "2019-10-14T07:12:39Z",
        "lastEditedBy" : "194c6d08-c511-4e08-99ed-65ee0a79b0a8",
        "tags" : [
        ]
      }
    ],
    "commit" : "be620ea2792f6ca480329b65f5e8f821b73a5503",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +56,60 @@struct scalar_asinh_op {\n  EIGEN_EMPTY_STRUCT_CTOR(scalar_asinh_op)\n  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T operator()(const T& a) const {\n    return std::asinh(a);\n  }"
  },
  {
    "id" : "423ddacb-e819-47b6-b3ee-adfd299360f5",
    "prId" : 33278,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33278#pullrequestreview-301050464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1442fc-5158-41ba-9faf-d3fe847eb84f",
        "parentId" : null,
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "Same here",
        "createdAt" : "2019-10-13T14:20:49Z",
        "updatedAt" : "2019-10-13T14:23:41Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "be620ea2792f6ca480329b65f5e8f821b73a5503",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +68,72 @@struct scalar_acosh_op {\n  EIGEN_EMPTY_STRUCT_CTOR(scalar_acosh_op)\n  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T operator()(const T& a) const {\n    return std::acosh(a);\n  }"
  },
  {
    "id" : "76683fab-117c-4193-bd0e-a9ce35adaf95",
    "prId" : 29372,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/29372#pullrequestreview-247005530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c41f5402-864e-4e5a-95de-d288ffb4b891",
        "parentId" : null,
        "authorId" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "body" : "Would it make sense to add 'IsRocm()', 'IsCuda()' functions somewhere?\r\nSeparate PR, if feasible at all. ",
        "createdAt" : "2019-06-04T11:33:40Z",
        "updatedAt" : "2019-06-04T17:41:46Z",
        "lastEditedBy" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "tags" : [
        ]
      },
      {
        "id" : "3b576c74-e66e-49a8-86f2-52b41e73b781",
        "parentId" : "c41f5402-864e-4e5a-95de-d288ffb4b891",
        "authorId" : "052747e5-8e1e-434d-8de6-011c023d9024",
        "body" : "Are you wanting sometthing like 'IsRocm()' to resolve at run-time or compile-time?",
        "createdAt" : "2019-06-04T22:10:46Z",
        "updatedAt" : "2019-06-04T22:10:46Z",
        "lastEditedBy" : "052747e5-8e1e-434d-8de6-011c023d9024",
        "tags" : [
        ]
      },
      {
        "id" : "ce20ba0b-fa10-4243-9ae1-67f99f3e5d6a",
        "parentId" : "c41f5402-864e-4e5a-95de-d288ffb4b891",
        "authorId" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "body" : "Something like: \r\n\r\n```\r\nconstexpr bool isRocm() {\r\n#if TENSORFLOW_USE_ROCM\r\n  return true;\r\n#endif\r\n  return false;\r\n}\r\n```",
        "createdAt" : "2019-06-07T09:46:55Z",
        "updatedAt" : "2019-06-07T09:47:33Z",
        "lastEditedBy" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ae2d4c463ef534316fa0ba7b4276e690ad0c0a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +177,181 @@  enum {\n    Cost = functor_traits<scalar_quotient_op<T>>::Cost + NumTraits<T>::AddCost,\n#if TENSORFLOW_USE_ROCM\n    PacketAccess = false,\n#else"
  },
  {
    "id" : "c85b02b1-6d28-459f-837a-6d1223a22c89",
    "prId" : 29372,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/29372#pullrequestreview-245387299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c59dfa0-d491-4137-ba76-61339e30eb61",
        "parentId" : null,
        "authorId" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "body" : "Could you add a comment why we need this special handling?",
        "createdAt" : "2019-06-04T11:34:53Z",
        "updatedAt" : "2019-06-04T17:41:46Z",
        "lastEditedBy" : "1223b96d-efd5-4254-9e4f-f359308f8df2",
        "tags" : [
        ]
      }
    ],
    "commit" : "56ae2d4c463ef534316fa0ba7b4276e690ad0c0a",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +369,373 @@// HIP does not have the device version of the abs routine defined\n// for all datatypes that T can resolve to\n#if defined(__HIP_DEVICE_COMPILE__)\n      T abs_x = (x < T(0)) ? -x : x;\n      T abs_y = (y < T(0)) ? -y : y;"
  },
  {
    "id" : "1effcf26-6de1-4933-8e3c-94b2dc978320",
    "prId" : 15421,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/15421#pullrequestreview-182059045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e8600ee-42ef-4881-82f8-b290786557f6",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "This should really be fixed in Eigen instead, e.g. here: \r\n\r\nhttps://bitbucket.org/eigen/eigen/src/729d33d11c81fd023834a2d61f0f280ba9da48c8/Eigen/src/Core/MathFunctions.h#lines-438",
        "createdAt" : "2018-12-06T02:13:20Z",
        "updatedAt" : "2018-12-06T02:13:20Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fea0332bb3c49f70ea42b4d0ecdfe16092ef7fe",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +30,34 @@namespace internal {\n\n#if GOOGLE_CUDA\ntemplate <>\nstruct scalar_arg_op<std::complex<float>> {"
  },
  {
    "id" : "2bad8527-ef20-47a7-ab8c-3642cfc35b0f",
    "prId" : 10598,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/10598#pullrequestreview-47540984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e0687c-8584-4a58-859e-84fd22914f44",
        "parentId" : null,
        "authorId" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "body" : "It's surprising that everything works fine on Linux and fails on Windows. It is extremely unlikely  but could it have something to do with the standard library implementation of acosh, since that is what is used in the background for computation.",
        "createdAt" : "2017-07-02T04:05:47Z",
        "updatedAt" : "2017-07-02T10:49:44Z",
        "lastEditedBy" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "tags" : [
        ]
      }
    ],
    "commit" : "76de4d3e3a24c53687204f45272dbf91032d721c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +58,62 @@  EIGEN_EMPTY_STRUCT_CTOR(scalar_acosh_op)\n  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const T operator()(const T& a) const {\n    return std::acosh(a);\n  }\n};"
  },
  {
    "id" : "9d2781e2-f386-454b-af45-1473bc39d5d4",
    "prId" : 4113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943ffddc-db8d-433a-aa3b-0e72818aeb79",
        "parentId" : null,
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "Only one blank line.\n",
        "createdAt" : "2016-09-02T03:29:38Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9696341a6a1779eb2888917909cfeab8ddf32644",
    "line" : null,
    "diffHunk" : "@@ -1,1 +541,545 @@template <typename T>\nstruct rint : base<T, scalar_rint_op<T>> {};\n\n////////////////////////////////////////////////////////////////////////////////\n// Binary functors"
  },
  {
    "id" : "52cc3a85-dd89-4576-8049-1b29513314f9",
    "prId" : 1834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cff5252-fc18-4382-a9f0-b0016e6212df",
        "parentId" : null,
        "authorId" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "body" : "I think this is where you'll need to extend the functors a bit.\n",
        "createdAt" : "2016-04-14T22:48:07Z",
        "updatedAt" : "2016-05-08T17:53:59Z",
        "lastEditedBy" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd3e861c1050ba1a6ad1ac4af2216e2cd7e72f3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +457,461 @@\ntemplate <typename T>\nstruct zeta : base<T, Eigen::internal::scalar_zeta_op<T>> {};\n\ntemplate <typename T>"
  }
]