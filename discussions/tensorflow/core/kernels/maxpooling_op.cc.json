[
  {
    "id" : "997c4324-5fea-4ce3-832d-b481d5f49d86",
    "prId" : 25241,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25241#pullrequestreview-197133106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86dc7c68-f8f9-493b-82e9-6f99c0ab12f4",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "We can add a check for this attr at kernel registration time (just like how we restrict kernels for certain dtypes)",
        "createdAt" : "2019-01-28T16:31:38Z",
        "updatedAt" : "2019-02-22T02:50:36Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      }
    ],
    "commit" : "be7970f3b4d729e618ea95265da3a7427153e19c",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +1353,1357 @@                     Tensor* grad_out, const bool include_batch_in_index) {\n    // TODO: support include_batch_in_index=true for gpu kernel.\n    OP_REQUIRES(context, include_batch_in_index == false,\n                errors::Unimplemented(\n                    \"include_batch_in_index=true is not yet supported \""
  },
  {
    "id" : "93e881cb-f4ea-4557-b786-7c0e3f0233bc",
    "prId" : 25241,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25241#pullrequestreview-197191606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84ea72f-86a0-466b-999f-9b061f738361",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "In the `input_backprop != nullptr` block below, add a CHECK/assertion that `include_batch_in_index` is True, and maybe a comment stating the logic only works when `include_batch_in_index` is True.",
        "createdAt" : "2019-01-28T19:46:23Z",
        "updatedAt" : "2019-02-22T02:50:36Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      }
    ],
    "commit" : "be7970f3b4d729e618ea95265da3a7427153e19c",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +159,163 @@                }\n              }\n            }\n          }\n        }"
  },
  {
    "id" : "ead0e690-f181-461c-8e41-d12b0940a25e",
    "prId" : 25241,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25241#pullrequestreview-198200670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34fc42f3-8129-454a-8ca7-32f39952e18b",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "Fail a `CHECK` or raise NotImplemented if `include_batch_in_index` is True. And same for `LaunchMaxPoolingGradWithArgmax` and `LaunchMaxPoolingGradGradWithArgmax`",
        "createdAt" : "2019-02-01T01:15:51Z",
        "updatedAt" : "2019-02-22T02:50:36Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      }
    ],
    "commit" : "be7970f3b4d729e618ea95265da3a7427153e19c",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +1332,1336 @@                    \"include_batch_in_index=true is not yet supported \"\n                    \"on the GPU kernel.\"));\n    bool status = functor::MaxPoolForwardWithOptionalArgmax<T>()(\n        input.flat<T>().data(), params.tensor_in_batch, params.tensor_in_rows,\n        params.tensor_in_cols, params.depth, params.out_height,"
  },
  {
    "id" : "6ec1b816-3aa9-4081-85e1-dea7169e6e1c",
    "prId" : 18145,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18145#pullrequestreview-109963945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57072cdf-47f6-415b-9733-03cec58e7f44",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Please use FastBoundsCheck here.",
        "createdAt" : "2018-04-02T15:30:52Z",
        "updatedAt" : "2018-04-06T07:11:48Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "b52bc939-02db-4c53-b729-52a2a5383f74",
        "parentId" : "57072cdf-47f6-415b-9733-03cec58e7f44",
        "authorId" : "8fa5aa57-1503-4812-879a-bbc77251e43a",
        "body" : "Ok. I'm assuming since the bounds are `output_start <= grad_out_index < output_end` that it's ok to call FastBoundsCheck with `FastBoundsCheck(grad_out_index - output_start, output_end - output_start);`.",
        "createdAt" : "2018-04-06T07:06:27Z",
        "updatedAt" : "2018-04-06T07:11:48Z",
        "lastEditedBy" : "8fa5aa57-1503-4812-879a-bbc77251e43a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0a5c70f0448c4378da3e7a8879be8cbe4689ae",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +965,969 @@        for (int64 index = input_start; index < input_end; index++) {\n          const int64 grad_out_index = argmax_flat(index);\n          CHECK(grad_out_index >= output_start && grad_out_index < output_end)\n              << \"Invalid output gradient index: \" << grad_out_index << \", \"\n              << output_start << \", \" << output_end;"
  }
]