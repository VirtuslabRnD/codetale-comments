[
  {
    "id" : "99cb843d-eaca-4cd0-b224-4ad04aabcc6f",
    "prId" : 44523,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44523#pullrequestreview-522729099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6038799b-cebc-4c5d-9b3e-350a982c2050",
        "parentId" : null,
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "Could you apply a similar change to `RunWithBorrowedArgs`? Don't worry about `RunInstantiated` (as that one is only invoked in one place during iterator destruction). Thanks.",
        "createdAt" : "2020-11-03T00:30:34Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      },
      {
        "id" : "ac816609-a4e0-4f4c-b3a4-9cecf8cb4096",
        "parentId" : "6038799b-cebc-4c5d-9b3e-350a982c2050",
        "authorId" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "body" : "Done",
        "createdAt" : "2020-11-03T17:33:31Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ddda9cf6022925450aab703f12a86f5e85b4e5",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +825,829 @@      is_multi_device_(is_multi_device) {}\n\nStatus InstantiatedCapturedFunction::Run(\n    IteratorContext* ctx, std::vector<Tensor>&& args,\n    std::vector<Tensor>* rets) const {"
  },
  {
    "id" : "de460868-f824-4d3a-91c4-e739203ed97d",
    "prId" : 44523,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44523#pullrequestreview-522124424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b14818e-7e97-4fd7-bb1e-77e17089242d",
        "parentId" : null,
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "For consistency with `RunAsync`, this part should be taken out of the `if (collect_usage)` body.\r\n\r\nI think it should be:\r\n\r\n```\r\nif (node) {\r\n  if (collect_usage) node->record_stop(...);\r\n  TF_RETURN_IF_ERROR(lib_->RunSync(std::move(f_opts), f_handle_, &frame));\r\n  if (ctx->stats_aggregator()) {\r\n    ...\r\n  }\r\n  node->add_processing_time(stats_collector->processing_time());\r\n  if (collect_usage) node->record_start(...);\r\n}\r\n```",
        "createdAt" : "2020-11-03T00:30:48Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ddda9cf6022925450aab703f12a86f5e85b4e5",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +880,884 @@          {static_cast<float>(stats_collector->processing_time())},\n          node->num_elements());\n    }\n    node->add_processing_time(stats_collector->processing_time());\n    if (collect_usage) node->record_start(EnvTime::NowNanos());"
  },
  {
    "id" : "838ac9cf-9b76-41c3-bef0-79a24467d498",
    "prId" : 44523,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44523#pullrequestreview-522907917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc830626-d885-47e5-8791-a391d2cdd22d",
        "parentId" : null,
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "It would be preferable if we pipe a `Node` through `MakeIteratorFromInputElement` (to correctly account for processing time of transformations such as `flat_map` and `interleave`.",
        "createdAt" : "2020-11-03T17:03:06Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      },
      {
        "id" : "5b81aa74-195a-432b-b596-7bb33a67be06",
        "parentId" : "fc830626-d885-47e5-8791-a391d2cdd22d",
        "authorId" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "body" : "Sounds good. By the way, the current implementation intentionally ignores functions outside the iterator's GetNext() path (e.g., Initialize code for Snapshot). Those are typically one-off operations and therefore I believe should not fall into processing time but let me know if you think otherwise.",
        "createdAt" : "2020-11-03T17:41:39Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "tags" : [
        ]
      },
      {
        "id" : "28820fa0-336f-4186-9062-0adccbe6f96f",
        "parentId" : "fc830626-d885-47e5-8791-a391d2cdd22d",
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "Using non-null Node only within GetNext makes sense. interleave and flat_map kernels end up calling the method within GetNext.",
        "createdAt" : "2020-11-03T18:09:29Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      },
      {
        "id" : "33393178-3833-4d3d-9d1e-fab2b8c24cb3",
        "parentId" : "fc830626-d885-47e5-8791-a391d2cdd22d",
        "authorId" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "body" : "Does this also require function overloading for internal API purposes?",
        "createdAt" : "2020-11-03T19:18:58Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "3faf377a-e40c-42c5-b176-82884f436e04",
        "tags" : [
        ]
      },
      {
        "id" : "2306ac20-c064-4276-b83c-8cf7068a9f21",
        "parentId" : "fc830626-d885-47e5-8791-a391d2cdd22d",
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "Yes, I was able to find internal calls to this API.",
        "createdAt" : "2020-11-03T22:04:28Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ddda9cf6022925450aab703f12a86f5e85b4e5",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +462,466 @@  std::vector<Tensor> return_values;\n\n  TF_RETURN_IF_ERROR(inst_captured_func.RunWithBorrowedArgs(\n        ctx, input_element, &return_values, node));\n"
  },
  {
    "id" : "2ee9b5a5-6621-4e76-b8fe-1ecfa6ad3c0c",
    "prId" : 44523,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44523#pullrequestreview-522704010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4659211f-ef27-4a2a-9b76-9818d89fcee3",
        "parentId" : null,
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "Add a `TODO(jsimsa)` for factoring out the common code between `RunAsync`, `Run`, and `RunWithBorrowedArguments` to a function.",
        "createdAt" : "2020-11-03T17:04:03Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ddda9cf6022925450aab703f12a86f5e85b4e5",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +931,935 @@      },\n      profiler::TraceMeLevel::kInfo);\n  if (node) {\n    // Resource usage for function execution is gathered from the executor.\n    if (collect_usage) node->record_stop(EnvTime::NowNanos());"
  },
  {
    "id" : "beec0077-dd87-43bf-a1fd-190655b03644",
    "prId" : 44523,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44523#pullrequestreview-524503602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2591d99d-7114-4d35-b6e0-acc95d2fbec0",
        "parentId" : null,
        "authorId" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "body" : "Here are the internal errors , can you please check \r\n\r\n```\r\n/tensorflow/core/kernels/data/captured_function.cc:450:50: error: all paths through this function will call itself\r\n    std::unique_ptr<IteratorBase>* out_iterator) {\r\n                                                 ^\r\n1 error generated.\r\n/tensorflow/core/kernels/data/captured_function.cc:450:50: error: all paths through this function will call itself \r\n    std::unique_ptr<IteratorBase>* out_iterator) {\r\n```",
        "createdAt" : "2020-11-05T17:30:03Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "tags" : [
        ]
      },
      {
        "id" : "0b84e5e4-e061-4de1-a164-33d226143e38",
        "parentId" : "2591d99d-7114-4d35-b6e0-acc95d2fbec0",
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "Michael, you forgot to pass through the `out_iterator` argument.",
        "createdAt" : "2020-11-05T17:35:38Z",
        "updatedAt" : "2020-11-05T18:08:43Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "68ddda9cf6022925450aab703f12a86f5e85b4e5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +449,453 @@    const InstantiatedCapturedFunction& inst_captured_func, StringPiece prefix,\n    std::unique_ptr<IteratorBase>* out_iterator) {\n  return MakeIteratorFromInputElement(\n      ctx, parent, input_element, thread_index, inst_captured_func, prefix,\n      out_iterator, /*node=*/nullptr);"
  }
]