[
  {
    "id" : "dfeffcf7-bec3-4934-b09d-0a69c16a80b6",
    "prId" : 25203,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25203#pullrequestreview-200684474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e1fea79-15c8-4ac4-8563-59419cc82732",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The registration of `RequantizePerChannel` and `RequantizationRangePerChannel` ops must be inside the `#ifdef INTEL_MKL` guard, because their kernel builders are only defined with config=mkl.",
        "createdAt" : "2019-02-06T00:07:06Z",
        "updatedAt" : "2019-02-09T00:28:34Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "7e08a8b2-e0c9-4e00-83ef-b67f60b19920",
        "parentId" : "8e1fea79-15c8-4ac4-8563-59419cc82732",
        "authorId" : "3cbb7033-4fd4-4c54-9671-d4408e7451f4",
        "body" : "The Op needs to be available outside of MKL also, as there is no TF(Eigen) Op available with the same name. This is required for pbtxt , else API tests will fail. let me know if this is not clear. Tomorrow in the meeting with Intel and Google AG Ramesh might add more or else I can explain in detail.",
        "createdAt" : "2019-02-06T03:34:38Z",
        "updatedAt" : "2019-02-09T00:28:34Z",
        "lastEditedBy" : "3cbb7033-4fd4-4c54-9671-d4408e7451f4",
        "tags" : [
        ]
      },
      {
        "id" : "fbdeee32-3a6e-4653-9e99-a3879fde8967",
        "parentId" : "8e1fea79-15c8-4ac4-8563-59419cc82732",
        "authorId" : "3cbb7033-4fd4-4c54-9671-d4408e7451f4",
        "body" : "these 2 tests will pass only the way I have it now for both Eigen and MKL\r\n1.//tensorflow/core/kernels:mkl_requantize_ops_test\r\n2.tensorflow/core/api_def/api_test",
        "createdAt" : "2019-02-06T04:05:33Z",
        "updatedAt" : "2019-02-09T00:28:34Z",
        "lastEditedBy" : "3cbb7033-4fd4-4c54-9671-d4408e7451f4",
        "tags" : [
        ]
      },
      {
        "id" : "1ee9170b-14dd-4501-bc9f-809a156250ad",
        "parentId" : "8e1fea79-15c8-4ac4-8563-59419cc82732",
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Thank you for the explanation! I was under the impression that registering the op without having a kernel builder (in the non-MKL case) would have a problem. I agree that it works fine. Saw that a lot of other MKL code does it this way too. :)",
        "createdAt" : "2019-02-06T16:48:51Z",
        "updatedAt" : "2019-02-09T00:28:34Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "16106ddfd2bdce83f89525577a2999f9d38063cb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1748,1752 @@)doc\");\n\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"RequantizePerChannel\")"
  },
  {
    "id" : "6eae9dcf-8d4d-420e-a27d-dcfbb1ddaf8b",
    "prId" : 20853,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/20853#pullrequestreview-137591764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbc60bf5-0c5c-43eb-8f15-a9133d7f7d2d",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Can you add a unit test for the shape function here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops_test.cc",
        "createdAt" : "2018-07-16T20:50:33Z",
        "updatedAt" : "2018-07-16T22:30:27Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      }
    ],
    "commit" : "700e045dec81eb84f778b14a6e57abb3fa65ca70",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1381,1385 @@    .Attr(\"dtype: {int32, int64} = DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      // value_range should be a vector.\n      ShapeHandle value_range_shape;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &value_range_shape));"
  },
  {
    "id" : "987f601e-e974-46d4-bb22-de1b9e9c82c2",
    "prId" : 10643,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/10643#pullrequestreview-55633122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Could you please the @compatibility decorator here, as requested?",
        "createdAt" : "2017-08-10T17:46:28Z",
        "updatedAt" : "2017-08-10T17:53:17Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "ba5c5b97-69f5-4c84-b7a3-7ee3774fd773",
        "parentId" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "authorId" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "body" : "done!",
        "createdAt" : "2017-08-10T17:53:38Z",
        "updatedAt" : "2017-08-10T17:53:38Z",
        "lastEditedBy" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "tags" : [
        ]
      },
      {
        "id" : "e5837626-cfdf-4b1d-b136-46ca0becebcb",
        "parentId" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Thanks!",
        "createdAt" : "2017-08-10T18:02:13Z",
        "updatedAt" : "2017-08-10T18:02:14Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "be03055c-2cc3-4719-8cc0-b6816e8217a8",
        "parentId" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "@lakshayg Hmm I don't see it. Did you forget to merge it?",
        "createdAt" : "2017-08-10T18:03:05Z",
        "updatedAt" : "2017-08-10T18:03:35Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "edf7f6c2-bf56-48c7-afcd-51758e0b6797",
        "parentId" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "authorId" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "body" : "Here: [a7c7907](https://github.com/tensorflow/tensorflow/pull/10643/commits/a7c7907b9d0b539ec5cf9bdc3c98a387b84f8935)",
        "createdAt" : "2017-08-10T18:06:50Z",
        "updatedAt" : "2017-08-10T18:10:12Z",
        "lastEditedBy" : "d6269140-fc60-4cd0-9330-75e12d55f632",
        "tags" : [
        ]
      },
      {
        "id" : "d82d9649-32bc-40d8-939e-8c882de2c3de",
        "parentId" : "b5e465e7-c00e-48e1-9a66-11bb8bff5335",
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "Thanks.",
        "createdAt" : "2017-08-10T19:01:23Z",
        "updatedAt" : "2017-08-10T19:01:29Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7c7907b9d0b539ec5cf9bdc3c98a387b84f8935",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +2087,2091 @@# tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]\ntf.angle(input) ==> [2.0132, 1.056]\n```\n\n@compatibility(numpy)"
  },
  {
    "id" : "621d9680-de99-4dcc-b4fd-81db0d91544b",
    "prId" : 9276,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/9276#pullrequestreview-33141986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "130708d0-12f4-47ec-9afd-566a3017ca63",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "numpy uses x1, x2. It's ugly but we probably want to stay consistent.",
        "createdAt" : "2017-04-18T04:51:25Z",
        "updatedAt" : "2017-04-25T14:32:49Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f2bde9f6c8950cf1836202e883e4cb3e33d5d02",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +734,738 @@\nREGISTER_OP(\"Atan2\")\n    .Input(\"y: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")"
  },
  {
    "id" : "9f76dee3-3216-44e3-8231-c2e9a0b566be",
    "prId" : 4113,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "parentId" : null,
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "This probably needs more documentation and examples, given how confusing rounding is :)\n",
        "createdAt" : "2016-08-31T16:31:04Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      },
      {
        "id" : "3e7d28f0-d24a-4621-a315-f0ac03df4b0a",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "body" : "Interesting the underyling `std::rint` operator behaves differently based on the current rounding mode: [std::fesetround](http://en.cppreference.com/w/cpp/numeric/fenv/FE_round). Seems TF does not set this explicitly in the code base neither does Eigen (checked this doing an ack fsetround). Should we set the mode explicitly ?\n",
        "createdAt" : "2016-08-31T17:39:44Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "tags" : [
        ]
      },
      {
        "id" : "2c0dcb8a-e491-47d1-bd90-93d8cb466463",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "3517ca44-bbf1-44f4-bada-c2b75e1ecd1e",
        "body" : "@girving would have useful knowledge here.\n\nOn Wed, Aug 31, 2016 at 10:41 AM, Fabrizio Milo notifications@github.com\nwrote:\n\n> In tensorflow/core/ops/math_ops.cc\n> https://github.com/tensorflow/tensorflow/pull/4113#discussion_r77035381:\n> \n> > @@ -478,6 +478,14 @@ REGISTER_OP(\"Ceil\")\n> >  Returns element-wise smallest integer in not less than x.\n> >  )doc\");\n> > \n> > +REGISTER_OP(\"Rint\")\n> > -    .Input(\"x: T\")\n> > -    .Output(\"y: T\")\n> > -    .Attr(\"T: {float, double}\")\n> > -    .Doc(R\"doc(\n> >   +Returns element-wise integer closest to x.\n> \n> Interesting the underyling std::rint operator behaves differently based\n> on the current rounding mode: std::fesetround\n> http://en.cppreference.com/w/cpp/numeric/fenv/FE_round. Seems TF does\n> not set this explicitly in the code base neither does Eigen (checked this\n> doing an ack fsetround). Should we set the mode explicitly ?\n> \n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tensorflow/tensorflow/pull/4113/files/0bfab954645d0a2c02f3e2f54382bdd84f950024#r77035381,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAjO_QKStgVDqNctouxhPggzc7BXFyKoks5qlbzZgaJpZM4JxJ4z\n> .\n",
        "createdAt" : "2016-08-31T17:53:40Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "3517ca44-bbf1-44f4-bada-c2b75e1ecd1e",
        "tags" : [
        ]
      },
      {
        "id" : "47433215-ae40-41aa-b5c4-7079b512ae27",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "body" : "I guess you meant @girving  ?\n",
        "createdAt" : "2016-08-31T18:22:57Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "tags" : [
        ]
      },
      {
        "id" : "cacc288f-b056-411f-8fd6-66ba5665da54",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "I'm on the fence about whether setting the flags is worth the trouble.  If someone sets the processor flags I'm okay making them suffer the consequences.\n",
        "createdAt" : "2016-08-31T22:02:21Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      },
      {
        "id" : "7e33120d-fcaa-41c4-928c-178040299d1a",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "body" : "The result of the operation depends on the underlying C++ implementation and default setting.\n\nTo be certain at all the times what is our rounding, we can explicitly set the `std::fesetround(FE_TONEAREST);` when entering the C++ context and restore the previous mode if is not set to FE_TONEAREST.\n\n```\nsave_rint_setting = std::fegetround();\nstd::fesetround(FE_TONEAREST);\nstd::rint(value);\nstd::fesetround(save_rint_setting);\n```\n\n### Default settings\n- The gnu library is set to `FE_TONEAREST` by default.\n  http://www.gnu.org/software/libc/manual/html_node/Rounding.html\n- The cudnn library _seems_ to use a logic like TONEAREST http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions but is not something explicitly set.\n  I can just just ignore this entire issue and say in the description that does rounding 'to nearest'.\n",
        "createdAt" : "2016-08-31T23:52:14Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "d3c7478f-38f7-4a9e-bbb7-cba056444e38",
        "tags" : [
        ]
      },
      {
        "id" : "1b3bcaaf-5e76-4877-a043-652b9ec1013f",
        "parentId" : "6c10203e-5060-4e36-b997-e1cf2bebc5b5",
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "If we do adjust the flags, it should happen right here:\n\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/lib/core/threadpool.cc#L52\n\nThere is no need to save and reset the flags, since it will be thread local.  You'll need to do something similar to ScopedFlushDenormal.\n",
        "createdAt" : "2016-08-31T23:57:26Z",
        "updatedAt" : "2016-11-16T01:53:35Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9696341a6a1779eb2888917909cfeab8ddf32644",
    "line" : null,
    "diffHunk" : "@@ -1,1 +461,465 @@    .SetShapeFn(shape_inference::UnchangedShape)\n    .Doc(R\"doc(\nReturns element-wise integer closest to x.\n\nIf the result is midway between two representable values,"
  },
  {
    "id" : "2246d23b-ca0a-4422-a90a-46dfcdc513a4",
    "prId" : 2711,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f87f4e00-b58f-4010-9687-9ef0d706a266",
        "parentId" : null,
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "Despite numpy convention, typically when I do a scan I want the exclusive version with `output[0] = identity`.  In particular, that's the kind of scan necessary to do safe gradients of `reduce_prod`.\n\nHow difficult would a possibly optional exclusive scan be to arrange?\n",
        "createdAt" : "2016-06-13T20:11:36Z",
        "updatedAt" : "2016-07-12T23:22:15Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      },
      {
        "id" : "2afd0e45-506a-495e-b628-fd0bcfb1e702",
        "parentId" : "f87f4e00-b58f-4010-9687-9ef0d706a266",
        "authorId" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "body" : "I've though about this when writing the op.\nI'm not sure how to neatly make the exclusive version accessible in Eigen, except by creating a new `cumsum_exclusive(...)` method.\nMaybe it's enough to only add this on the TensorFlow side by optionally padding the tensor with the value that we get from `Reducer::initialize()` ?\n",
        "createdAt" : "2016-06-13T20:45:41Z",
        "updatedAt" : "2016-07-12T23:22:15Z",
        "lastEditedBy" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "tags" : [
        ]
      },
      {
        "id" : "4adc3dbd-1ab6-4d2d-807f-f2d6f95914ee",
        "parentId" : "f87f4e00-b58f-4010-9687-9ef0d706a266",
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "Let's get this one in and worry about the exclusive version later if necessary.\n",
        "createdAt" : "2016-06-13T20:55:21Z",
        "updatedAt" : "2016-07-12T23:22:15Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      },
      {
        "id" : "9c5e055e-c02e-4484-b339-a52bdf3279f6",
        "parentId" : "f87f4e00-b58f-4010-9687-9ef0d706a266",
        "authorId" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "body" : "We won't be able to compile this PR right now, as Eigen hasn't been updated to the latest version yet :(\nI'll have a look at implementing the `exclusive=True/False` kwarg\n",
        "createdAt" : "2016-06-13T21:17:31Z",
        "updatedAt" : "2016-07-12T23:22:15Z",
        "lastEditedBy" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "83fe4f73c4e704c8eb3715a8ce0c8332d81510ee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1829,1833 @@By setting the `reverse` operation to `True`, the sum is performed in the\nreverse order. In contrast to using `tf.reverse`, this avoids copying the\ntensor.\n\nFor example:"
  },
  {
    "id" : "4d362aa6-51c9-4871-b2ae-c144f0ad65f8",
    "prId" : 2417,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "226ee439-55a9-4060-9ed7-a6225756f3b9",
        "parentId" : null,
        "authorId" : "67b21abc-7e24-45f0-abf3-1f4707abed87",
        "body" : "complex64, complex128?\n",
        "createdAt" : "2016-05-18T15:10:48Z",
        "updatedAt" : "2016-05-18T20:59:44Z",
        "lastEditedBy" : "67b21abc-7e24-45f0-abf3-1f4707abed87",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6797ea36d304d2419a3f07f529132509e7ef09d",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +505,509 @@  Input(\"x: T\").Input(\"y: T\").Output(\"z: bool\").SetIsCommutative().Attr(       \\\n      \"T: {half, float, double, uint8, int8, int16, int32, int64, complex64, \" \\\n      \"quint8, qint8, qint32, string, bool, complex128}\")\n\nREGISTER_OP(\"Equal\")"
  },
  {
    "id" : "9f4943c7-56f4-48ec-b784-299ed75650ff",
    "prId" : 1834,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f379a5b3-b855-42ab-b593-86181a60a9ce",
        "parentId" : null,
        "authorId" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "body" : "ditto here; and elsewhere.\n",
        "createdAt" : "2016-04-14T22:44:07Z",
        "updatedAt" : "2016-05-08T17:53:59Z",
        "lastEditedBy" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd3e861c1050ba1a6ad1ac4af2216e2cd7e72f3",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +445,449 @@\n```\n\\zeta(x, q) = \\sum_{n=0}^{\\infty} (q + n)^{-x}\n```\n)doc\");"
  }
]