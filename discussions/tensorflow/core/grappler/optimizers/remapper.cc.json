[
  {
    "id" : "28e2075f-e451-433a-b880-e3c24a714e73",
    "prId" : 49277,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/49277#pullrequestreview-680277085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912e80ff-5abc-48ed-b589-f224a0d4d9ce",
        "parentId" : null,
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "This is not enough though: there are other ways to enable XLA. Additionally, we would be to dig to the bottom of the issue and figure out why the convolution configuration was marked as unsupported and whether it's specific to XLA.",
        "createdAt" : "2021-05-20T19:08:33Z",
        "updatedAt" : "2021-05-20T19:08:37Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      },
      {
        "id" : "f001066c-e4f9-4434-865e-ea8566ab3a6e",
        "parentId" : "912e80ff-5abc-48ed-b589-f224a0d4d9ce",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "I agree. The reason I put a line here is that I heard the XLA might not be able to correctly process the new fused op. So, I tried to avoid remapping this pattern when XLA is on. For the \"unsupported cudnn conv\" issue, if you can share with more details on how to repro the failed model benchmark, I can look into it.",
        "createdAt" : "2021-05-20T19:42:01Z",
        "updatedAt" : "2021-05-20T19:42:02Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      },
      {
        "id" : "4442e112-cdc3-4a76-ac5c-26db06ae74dd",
        "parentId" : "912e80ff-5abc-48ed-b589-f224a0d4d9ce",
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "Right, but still action item here is to have a more robust check. In Python, you could check whether you are inside XLA context, I'm not 100% sure what is the best analogue in Grappler.",
        "createdAt" : "2021-06-10T02:05:45Z",
        "updatedAt" : "2021-06-10T02:06:26Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      }
    ],
    "commit" : "290070fba0521d1cf8aad2cf491d7f5a58390f79",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1013,1017 @@  };\n\n  if (ctx.xla_auto_clustering_on) return false;\n\n  if (!valid_batch_norm_grad(*node_view)) return false;"
  },
  {
    "id" : "65f853d9-38d8-4b11-b759-d120132a1fae",
    "prId" : 48063,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/48063#pullrequestreview-643514641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35abeca8-6a68-44fe-85fa-966cd7e8199b",
        "parentId" : null,
        "authorId" : "68fac570-a499-4a66-bf20-f8f2cbebf597",
        "body" : "This seems to be an unused variable. This blocks merging, because internally we treat unused variables as an error.",
        "createdAt" : "2021-04-23T08:27:32Z",
        "updatedAt" : "2021-04-23T08:28:20Z",
        "lastEditedBy" : "68fac570-a499-4a66-bf20-f8f2cbebf597",
        "tags" : [
        ]
      },
      {
        "id" : "746b0495-6089-4add-b629-3b3126e5856a",
        "parentId" : "35abeca8-6a68-44fe-85fa-966cd7e8199b",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I'll try to fix it internally, so no need to update the PR right now.",
        "createdAt" : "2021-04-23T17:21:28Z",
        "updatedAt" : "2021-04-23T17:21:29Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebb570a34bc2bcae50e4a004450c945ede0256ff",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1041,1045 @@  const auto& fanin_1 = relugrad_node_view->GetRegularFanin(1);\n  const auto* fwd_node_view = fanin_1.node_view();\n  const auto* fwd_node_def = fwd_node_view->node();\n  FusedBatchNormEx fwd_matched;\n  FindFusedBatchNormEx(ctx, fwd_node_view->node_index(), &fwd_matched);"
  },
  {
    "id" : "dc6075e1-cc63-4541-adfa-0bef7e574cbf",
    "prId" : 42856,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42856#pullrequestreview-486556797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb86a3e8-4b36-4973-b55f-ee3d76234660",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "(No action required until #42173 is merged.)\r\nThis (and probably some other parts of this PR) will have merge conflict with #42173. Sorry I couldn't get to #42173 sooner!",
        "createdAt" : "2020-09-11T02:40:09Z",
        "updatedAt" : "2020-09-14T01:27:06Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "776d1cd6-8545-4b8c-aeeb-953c84542bd1",
        "parentId" : "eb86a3e8-4b36-4973-b55f-ee3d76234660",
        "authorId" : "8b9d04fa-24a9-4bdb-ac5d-326f8349a2d5",
        "body" : "Yeah, I will fix the conflicts after https://github.com/tensorflow/tensorflow/pull/42173 is merged",
        "createdAt" : "2020-09-11T07:57:22Z",
        "updatedAt" : "2020-09-14T01:27:06Z",
        "lastEditedBy" : "8b9d04fa-24a9-4bdb-ac5d-326f8349a2d5",
        "tags" : [
        ]
      }
    ],
    "commit" : "611cc3652383a9fbbec277acf361f86e50189c0c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +369,373 @@  return IsRelu(node) || IsRelu6(node) || IsElu(node) || IsLeakyRelu(node) || IsTanh(node);\n#else\n  return IsRelu(node) || IsRelu6(node) || IsElu(node) || IsLeakyRelu(node);\n#endif\n}"
  },
  {
    "id" : "e6e7d75e-682a-47ff-bb04-087380ed6bec",
    "prId" : 41047,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41047#pullrequestreview-448635429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6642911a-2fd7-4fbb-bf07-c4d3ba631b46",
        "parentId" : null,
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "Can you please document what pattern this function is looking for, it's a bit hard to parse it from the code.",
        "createdAt" : "2020-07-14T17:56:25Z",
        "updatedAt" : "2020-08-05T01:51:24Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      },
      {
        "id" : "e28d89f6-2e93-4a15-8bff-ace21f05a757",
        "parentId" : "6642911a-2fd7-4fbb-bf07-c4d3ba631b46",
        "authorId" : "b290c238-d054-4554-ad7a-c1f31856dbbc",
        "body" : "Some comments added in line 90. \r\n```// Comparison op followed by a cast, e.g., GreaterEqual + Cast.```",
        "createdAt" : "2020-07-15T05:18:29Z",
        "updatedAt" : "2020-08-05T01:51:24Z",
        "lastEditedBy" : "b290c238-d054-4554-ad7a-c1f31856dbbc",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d021c1ae9bbcd500d13f24cd7c3c399ab82e6f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +924,928 @@}\n\nbool FindComparisonWithCast(const RemapperContext& ctx, int node_index,\n                            ComparisonWithCast* matched) {\n  const auto* node_view = ctx.graph_view.GetNode(node_index);"
  },
  {
    "id" : "cae97e8e-1f89-441b-b3c7-f124d4117fc7",
    "prId" : 38016,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/38016#pullrequestreview-411423191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41638d51-f95e-41cc-a459-37daa96072bc",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Can we set the value the same way as in line 965 to make them look consistent?\r\n```suggestion\r\n    (*attr)[\"U\"] = DT_FLOAT;\r\n```",
        "createdAt" : "2020-05-13T19:56:15Z",
        "updatedAt" : "2020-05-14T02:50:45Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "67f9acbe-0959-4586-854c-d455231d5eb5",
        "parentId" : "41638d51-f95e-41cc-a459-37daa96072bc",
        "authorId" : "b290c238-d054-4554-ad7a-c1f31856dbbc",
        "body" : "I have changed all of them to use `SetAttrValue`",
        "createdAt" : "2020-05-14T02:26:50Z",
        "updatedAt" : "2020-05-14T02:50:45Z",
        "lastEditedBy" : "b290c238-d054-4554-ad7a-c1f31856dbbc",
        "tags" : [
        ]
      }
    ],
    "commit" : "cde93f014c5b42800d3a43ffea53001ccc635e29",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +966,970 @@    SetAttrValue(src_attr.at(\"T\"), &(*attr)[\"U\"]);\n#else\n    SetAttrValue(DT_FLOAT, &(*attr)[\"U\"]);\n#endif\n  }"
  },
  {
    "id" : "4504de3c-0a8b-44cc-be1b-62ad7be0fec7",
    "prId" : 33703,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33703#pullrequestreview-312949070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04524b38-a9cb-4f9a-becc-bd3e8025b17a",
        "parentId" : null,
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "Did this happen in practice? It's probably a bug somewhere if node def in null.",
        "createdAt" : "2019-11-06T17:23:04Z",
        "updatedAt" : "2019-11-06T17:23:08Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      },
      {
        "id" : "df78462b-1472-41d0-91ae-1238d7b1dde8",
        "parentId" : "04524b38-a9cb-4f9a-becc-bd3e8025b17a",
        "authorId" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "body" : "@ezhulenev No, this just pass some tools check.",
        "createdAt" : "2019-11-07T00:40:09Z",
        "updatedAt" : "2019-11-07T00:40:09Z",
        "lastEditedBy" : "d0453c6a-6b64-4afc-a593-32455acfcf5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e2b602dd7b29ede8e69a78b7efb2cfbe1a3880c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +639,643 @@  // Root of the pattern must be an activation node.\n  const auto* node_def = node_view->node();\n  if (node_def == nullptr) return false;\n  if (!IsSupportedActivation(*node_def)) return false;\n"
  },
  {
    "id" : "91c69a16-eca0-4fa3-8efe-f4059ef23248",
    "prId" : 28098,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28098#pullrequestreview-231389966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2371afd-5744-41da-828b-9692066f38bf",
        "parentId" : null,
        "authorId" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "body" : "1. Can you add a disclaimer here, that though these patterns will be rewritten into the `_FusedConv2D` node, it does not really have a kernel implementation outside of MKL. That it's just a trick to trigger \"real\" rewrite rule in MKL layout pass.\r\n\r\n2. Wouldn't it be easier to directly rewrite it into the MKL ops in remapper optimizer? My guess that MklLayoutPass takes care of required layout conversions.",
        "createdAt" : "2019-04-26T23:08:15Z",
        "updatedAt" : "2019-05-21T07:43:18Z",
        "lastEditedBy" : "cc3a9462-2410-463b-a9e3-7b2b39d1f5bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a988b70392dc0759bca45b2e325b096d37c33808",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +151,155 @@\n#ifdef INTEL_MKL\n// Contraction node followed by a BiasAdd and Add.\nstruct ContractionWithBiasAddAndAdd {\n  ContractionWithBiasAddAndAdd() = default;"
  }
]