[
  {
    "id" : "0c5b96f0-fadb-459a-93af-539afddbc686",
    "prId" : 44270,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44270#pullrequestreview-517339216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb0ac16-f08b-4486-926e-ea9fc0f60116",
        "parentId" : null,
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "Does this support a mixture of say 4D and 5D tensors? I assume after changing the layout, only 5D tensors will be detected due to IsAfterDstToSrcTransform? And can a test case be added for this (ShapeN and IdentityN taking in ranked 4 and ranked 5 tensors)?",
        "createdAt" : "2020-10-26T20:23:18Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "36557e35-92aa-4863-9171-a99cbd723701",
        "parentId" : "7fb0ac16-f08b-4486-926e-ea9fc0f60116",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Can ShapeN take in tensors with different dims? I tried to give shape_n two different tensors but got `tensorflow.python.framework.errors_impl.InvalidArgumentError: Dimensions must be equal, but are 5 and 4 for '{{node Add_2}} = Add[T=DT_INT32](ShapeN, ShapeN:1)' with input shapes: [5], [4].`",
        "createdAt" : "2020-10-26T21:14:22Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      },
      {
        "id" : "7d8072de-1c65-4cd3-ba59-5fd5d25e4245",
        "parentId" : "7fb0ac16-f08b-4486-926e-ea9fc0f60116",
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "It looks like ShapeN requires same ranks for all arguments. I don't believe IdentityN has that restriction though.",
        "createdAt" : "2020-10-26T23:24:43Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "2cf8852e-93d8-4bb5-a812-7f506c6da9db",
        "parentId" : "7fb0ac16-f08b-4486-926e-ea9fc0f60116",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Done. Please check the new commit.",
        "createdAt" : "2020-10-27T04:24:57Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "165c053acc7c1dc9c5c51f5a3f00212ddfc2f6a1",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +1141,1145 @@    int regular_fanin_port = regular_fanin.index();\n    if ((IsFanoutPortRankN(*regular_fanin_node, regular_fanin_port, rank)) &&\n        ((IsAfterDstToSrcTransform(context, *regular_fanin_node) &&\n          IsLayoutAgnosticOp(*regular_fanin_node->node())) ||\n         IsLayoutOptimizerAddedDstToSrcTranspose(context,"
  },
  {
    "id" : "b6d2a009-05de-4057-8c8d-cce0abb796c6",
    "prId" : 44270,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44270#pullrequestreview-517339228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17fc6355-3d19-4993-b059-292da7b6252e",
        "parentId" : null,
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "Can you add some comments explaining why data formats are updated after rewriting the node? Same with BiasAddGradTransposer.",
        "createdAt" : "2020-10-26T20:27:17Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "dd92c631-f62d-4874-8f51-92031e09d797",
        "parentId" : "17fc6355-3d19-4993-b059-292da7b6252e",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Done. Please check the new commit.",
        "createdAt" : "2020-10-27T04:25:00Z",
        "updatedAt" : "2020-10-29T05:56:20Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "165c053acc7c1dc9c5c51f5a3f00212ddfc2f6a1",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +785,789 @@  // the context to update the node. For the input/output tensor, the\n  // corresponding 4D or 5D data format is needed.\n  TF_RETURN_IF_ERROR(UpdateNode(context, node));\n  ScopedDataFormatUpgrader data_format_upgrader(context, rank);\n  TF_RETURN_IF_ERROR(UpdateFaninEdgesWithOp(context, {0}, node, kOpTranspose));"
  },
  {
    "id" : "a8a5aeff-f6a1-4068-bb81-a05a1adc011e",
    "prId" : 43226,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43226#pullrequestreview-492873874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b02d6da-f3a8-4346-8933-949c482654e7",
        "parentId" : null,
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "This seems very specific to CPU to GPU in regards to data formats. Can we check if the original src_formats and dst_formats are NHWC and NCHW only before applying this?",
        "createdAt" : "2020-09-18T22:17:50Z",
        "updatedAt" : "2020-09-23T19:04:48Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "3562a6b8-074b-4ce3-ab15-3ae162d4eacd",
        "parentId" : "2b02d6da-f3a8-4346-8933-949c482654e7",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "I think that is correct. The layout opt only does the NHWC<->NCHW transpose. You can find that here that the src/dst formats are predefined: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/optimizers/generic_layout_optimizer.cc#L38",
        "createdAt" : "2020-09-18T22:41:18Z",
        "updatedAt" : "2020-09-23T19:04:48Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      },
      {
        "id" : "48d9ce0b-98e5-4c75-a140-954bb3f0212b",
        "parentId" : "2b02d6da-f3a8-4346-8933-949c482654e7",
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "If I remembered correctly the actual transposers can support other layouts. The optimizer though restricts the layouts, along with some GPU specific bits. I think it is a bit safer to only allow the 5d upgrade in the transposers if the layouts are of NHWC and NCHW for now (if the optimizer is updated to support other layouts).",
        "createdAt" : "2020-09-18T22:47:08Z",
        "updatedAt" : "2020-09-23T19:04:48Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "61232bc2-84b4-4c57-af68-da3b70900fec",
        "parentId" : "2b02d6da-f3a8-4346-8933-949c482654e7",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Sure. I added one more barrier to restrict the optimizer only for NHWC/NCHW when 5d tensors are there.",
        "createdAt" : "2020-09-21T18:26:57Z",
        "updatedAt" : "2020-09-23T19:04:48Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b947dd6377c022091c8aa005cdcff52c53ff5f0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1383,1387 @@                  (dst_format == \"NHWC\" || dst_format == \"NCHW\");\n  if (allow_5d) {\n    std::string src_format_3d = src_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    std::string dst_format_3d = dst_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    context->AssignDeviceAndDataFormats(context->target_device, src_format_3d,"
  },
  {
    "id" : "70a906a2-f829-425e-a764-0eff1a9849fd",
    "prId" : 42970,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42970#pullrequestreview-493778919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52c8ce3c-668f-462d-a875-680d879455aa",
        "parentId" : null,
        "authorId" : "28ebc303-4bb6-4527-84df-315503829bce",
        "body" : "Can this and the change below related to checking 4D data formats and upgrading to 5D data formats be updated to match https://github.com/tensorflow/tensorflow/pull/43226?",
        "createdAt" : "2020-09-22T19:14:21Z",
        "updatedAt" : "2020-09-30T19:36:52Z",
        "lastEditedBy" : "28ebc303-4bb6-4527-84df-315503829bce",
        "tags" : [
        ]
      },
      {
        "id" : "ae130d31-ed18-4878-b28b-f976a4562647",
        "parentId" : "52c8ce3c-668f-462d-a875-680d879455aa",
        "authorId" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "body" : "Yes, they are related. Changed this PR by adding the same restriction on format checking.",
        "createdAt" : "2020-09-22T19:26:55Z",
        "updatedAt" : "2020-09-30T19:36:52Z",
        "lastEditedBy" : "8df6b2a7-a5b8-4771-8241-49fd7ff5a2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "e22989dc2c95e63fadfae1a6ac968f4887e47da5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +679,683 @@  bool allow_5d = rank == 5 && (src_format == \"NHWC\" || src_format == \"NCHW\");\n  if (allow_5d) {\n    std::string src_format_3d = src_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    std::string dst_format_3d = dst_format == \"NHWC\" ? \"NDHWC\" : \"NCDHW\";\n    context->AssignDeviceAndDataFormats(context->target_device, src_format_3d,"
  }
]