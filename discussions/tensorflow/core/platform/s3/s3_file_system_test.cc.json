[
  {
    "id" : "049bd7c7-eefd-4655-8ae8-9975622282b5",
    "prId" : 16232,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/16232#pullrequestreview-90605570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7ca61f4-b04f-4253-b0c8-bb6035ad062f",
        "parentId" : null,
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Isn't DeleteFile of a file that doesn't exist supposed to return an error?",
        "createdAt" : "2018-01-20T18:51:55Z",
        "updatedAt" : "2018-01-23T20:11:22Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      },
      {
        "id" : "829ba008-003b-42c1-9322-dffa74ef3c51",
        "parentId" : "a7ca61f4-b04f-4253-b0c8-bb6035ad062f",
        "authorId" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "body" : "Good question! [The API docs](https://github.com/tensorflow/tensorflow/blob/04b5c75aae4bdbdac7c713714a369f9b360daf70/tensorflow/core/platform/file_system.h#L150-L151) don't specify.\r\n\r\nThe posix filesystem looks like it will return ENOENT if the file doesn't exist, but the S3 filesystem currently treats this as success. I'd rather not change the S3 behavior, but I could future-proof this by removing the `TF_ASSERT_OK` - what do you think?",
        "createdAt" : "2018-01-22T19:10:09Z",
        "updatedAt" : "2018-01-23T20:11:22Z",
        "lastEditedBy" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "tags" : [
        ]
      },
      {
        "id" : "3c4da0bc-d98e-456b-ae5e-e8d533ca8f8b",
        "parentId" : "a7ca61f4-b04f-4253-b0c8-bb6035ad062f",
        "authorId" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "body" : "Actually, I think we should return an error if the file doesn't exist. That's the expectation, and if we have different behavior for filesystems, then it will lead to workarounds at the call site.",
        "createdAt" : "2018-01-22T19:39:40Z",
        "updatedAt" : "2018-01-23T20:11:22Z",
        "lastEditedBy" : "c8f2b008-60f4-4709-b654-47bc9a7795a2",
        "tags" : [
        ]
      },
      {
        "id" : "3179aaa6-e5a2-4d45-9c5e-05947479a9da",
        "parentId" : "a7ca61f4-b04f-4253-b0c8-bb6035ad062f",
        "authorId" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "body" : "I'm worried about making a breaking change to the API here; it also worries me that it's out-of-scope for the main fix.\r\n\r\nI can make it if you like, but it feels like it should be tracked separately.",
        "createdAt" : "2018-01-22T19:48:55Z",
        "updatedAt" : "2018-01-23T20:11:22Z",
        "lastEditedBy" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "tags" : [
        ]
      },
      {
        "id" : "bbad74ce-57b1-4f5d-ad86-1446da108ea5",
        "parentId" : "a7ca61f4-b04f-4253-b0c8-bb6035ad062f",
        "authorId" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "body" : "Also, from what I can tell, S3 doesn't communicate the delete status back from a delete. We would need to add a check for the object existing prior to deleting (fine, but not ideal).",
        "createdAt" : "2018-01-22T19:56:25Z",
        "updatedAt" : "2018-01-23T20:11:22Z",
        "lastEditedBy" : "eb061a7e-e3cf-4cf7-ba3c-989ecd54a3e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b3ecbc3a7374082487a38dcf81f9c329a52e414",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +132,136 @@  const string fname = TmpDir(\"FileExists\");\n  // Ensure the file doesn't yet exist.\n  TF_ASSERT_OK(s3fs.DeleteFile(fname));\n  EXPECT_EQ(error::Code::NOT_FOUND, s3fs.FileExists(fname).code());\n  TF_ASSERT_OK(WriteString(fname, \"test\"));"
  }
]