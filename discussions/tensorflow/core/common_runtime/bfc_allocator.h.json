[
  {
    "id" : "5af7cef2-059e-4ead-8883-4ae89ed00617",
    "prId" : 27358,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/27358#pullrequestreview-222840245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f759e8-ac7c-484b-b4da-5368431fcdfb",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "I don't see this can overflow: to make the result larger than `2^31-1`, `(p_int - base_int)` has to be at least `2^(31+8)=512GB`. Or do you have an example to reproduce the error?",
        "createdAt" : "2019-04-03T05:16:55Z",
        "updatedAt" : "2019-04-03T05:16:56Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "68562ee4-7f68-4cda-86c8-08cd786aa08c",
        "parentId" : "a3f759e8-ac7c-484b-b4da-5368431fcdfb",
        "authorId" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "body" : "That's right. But since base_int is the starting address of the memory pool and p_int could be anywhere, the offset of base_int and p_int could overflow when the size of the memory pool exceeds 512 GB. The overflow happens when we conduct large-image (10000x10000) DNN training that requires much amount of memory. ",
        "createdAt" : "2019-04-03T06:15:04Z",
        "updatedAt" : "2019-04-03T06:15:04Z",
        "lastEditedBy" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "tags" : [
        ]
      },
      {
        "id" : "44059c11-0722-40a7-a3a7-b28136b5ccd5",
        "parentId" : "a3f759e8-ac7c-484b-b4da-5368431fcdfb",
        "authorId" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "body" : "Here is the example to reproduce the error:\r\nhttps://gist.github.com/chenchc/71cc4772d45873ee71b04d13276da3ba",
        "createdAt" : "2019-04-03T09:13:00Z",
        "updatedAt" : "2019-04-03T09:13:00Z",
        "lastEditedBy" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "tags" : [
        ]
      },
      {
        "id" : "e09d9358-808b-42e3-8ca5-0297d162e4d5",
        "parentId" : "a3f759e8-ac7c-484b-b4da-5368431fcdfb",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "I see, so you're using unified memory, that makes sense. Thanks for the repo.",
        "createdAt" : "2019-04-04T14:59:15Z",
        "updatedAt" : "2019-04-04T14:59:16Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "8ee1fc9d-cdc9-4eaf-a912-71a969e60a31",
        "parentId" : "a3f759e8-ac7c-484b-b4da-5368431fcdfb",
        "authorId" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "body" : "Yeah, that's the point. Thanks for the review.",
        "createdAt" : "2019-04-04T15:32:11Z",
        "updatedAt" : "2019-04-04T15:32:11Z",
        "lastEditedBy" : "f3939cd6-02de-4413-a885-81a155653ad2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0136d4affebd14fee59ba1865d5f1c8fa64251a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +252,256 @@      DCHECK_GE(p_int, base_int);\n      DCHECK_LT(p_int, base_int + memory_size_);\n      return static_cast<size_t>(((p_int - base_int) >> kMinAllocationBits));\n    }\n"
  },
  {
    "id" : "d953d865-bcb3-4b59-a5e0-5fbc195c713b",
    "prId" : 18295,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18295#pullrequestreview-110235744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4455cc40-bcd4-442d-a6c5-7209a4485daf",
        "parentId" : null,
        "authorId" : "ee86cf21-26cd-4cf8-9b7e-753aadc54b71",
        "body" : "Just change this line to `#elif defined(_WIN64)` since it only applies to Windows 64-bit.",
        "createdAt" : "2018-04-06T23:45:10Z",
        "updatedAt" : "2018-04-16T02:17:26Z",
        "lastEditedBy" : "ee86cf21-26cd-4cf8-9b7e-753aadc54b71",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b495bf6212a95f655d732e40af134e8b8b70374",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +379,383 @@#if defined(__GNUC__)\n    return 63 ^ __builtin_clzll(n);\n#elif defined(PLATFORM_WINDOWS) && (_WIN64)\n    unsigned long index;\n    _BitScanReverse64(&index, n);"
  }
]