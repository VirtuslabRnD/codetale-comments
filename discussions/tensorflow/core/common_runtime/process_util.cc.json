[
  {
    "id" : "0e28a3e4-fae9-49a4-9762-55ff184a3fb1",
    "prId" : 33728,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33728#pullrequestreview-307448438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "801ed0d5-6ef4-4cbf-8b1c-02120740a48d",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Please add a comment saying that \r\n1) `std::getenv` is thread-safe (as long as no other function modifies the host environment) from C++11 onward.\r\n2) Most of TF code (except tests and experimental code) doesn't call `setenv` and `unsetenv`. \r\n",
        "createdAt" : "2019-10-25T22:31:24Z",
        "updatedAt" : "2019-10-28T16:27:03Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2c2e8538ca3c172dc5b921acd300d4fb1d7e3f8",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +103,107 @@  // 2) Most of TF code (except tests and experimental code) doesn't call setenv and unsetenv\n  int32 num;\n  const char* val = std::getenv(\"OMP_NUM_THREADS\");\n  return (val && strings::safe_strto32(val, &num)) ? num : 0;\n}"
  },
  {
    "id" : "a2008ccf-c6f3-44a9-bd24-8f7f9437411f",
    "prId" : 33728,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33728#pullrequestreview-307978475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8342555-17b5-49b3-aa1f-33a7925b2918",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Just curious. Are the extra spaces the formatter's doing?",
        "createdAt" : "2019-10-25T22:38:00Z",
        "updatedAt" : "2019-10-28T16:27:03Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "ce6b6084-676e-498b-8999-ffc45b9100f0",
        "parentId" : "f8342555-17b5-49b3-aa1f-33a7925b2918",
        "authorId" : "dc01c536-f8d1-421c-86af-6ae72825c430",
        "body" : "yes.",
        "createdAt" : "2019-10-28T16:24:47Z",
        "updatedAt" : "2019-10-28T16:27:03Z",
        "lastEditedBy" : "dc01c536-f8d1-421c-86af-6ae72825c430",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2c2e8538ca3c172dc5b921acd300d4fb1d7e3f8",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +163,167 @@  tracing::RecordEvent(tracing::EventCategory::kScheduleClosure, id);\n\n  Env::Default()->SchedClosure([ id, closure = std::move(closure) ]() {\n    tracing::ScopedRegion region(tracing::EventCategory::kRunClosure, id);\n    closure();"
  }
]