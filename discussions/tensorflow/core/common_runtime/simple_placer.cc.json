[
  {
    "id" : "25bbcd24-cbf4-46ec-80a9-1ea47c68ed72",
    "prId" : 6615,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/6615#pullrequestreview-15302392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c662d83a-fefd-4172-942e-f42bd5aacbaa",
        "parentId" : null,
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "You might be able to replace this entire block of code with:\r\n\r\n```\r\n    bool same_device = std::all_of(node->edges().begin(), node->edges().end(), \r\n                                   [output_device_name](const Edge& e) { \r\n                                       return e->dst()->assigned_device_name() == output_device_name;\r\n                                   }) \r\n```\r\n\r\nIf it turns out to be more complicated than this, let me know.",
        "createdAt" : "2017-01-04T17:08:56Z",
        "updatedAt" : "2017-01-12T09:57:37Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      },
      {
        "id" : "3bbfbcad-c0b8-4770-9367-fb2dfbee76a2",
        "parentId" : "c662d83a-fefd-4172-942e-f42bd5aacbaa",
        "authorId" : "8b6d0937-a9aa-4efc-8d2e-f3224f679760",
        "body" : "My code pulls the name from the 1st iterator value, then tests it against all of the others.  Your code captures 'output_device_name', which is the name from the 1st iterator value.  This would need to be read in your version of the code too.\r\n\r\nWhat we need is a:\r\n\r\nstd::when_calling_with_elements_from_a_collection_every_return_value_of_a_functor_is_the_same()\r\n\r\nIt might exist.  My in-depth knowledge of the std c++ library is limited to pre 2004.\r\n\r\nnevertheless - i will replace the while(.....) part of my code with the std::all_of(), since I can still start with the second element.\r\n\r\n```\r\nbool same_device = std::all_of(it, node->out_edges().end(), \r\n                                   [output_device_name](const Edge* e) { \r\n                                       return e->dst()->assigned_device_name() == output_device_name;\r\n                                   }) \r\n```",
        "createdAt" : "2017-01-05T13:26:24Z",
        "updatedAt" : "2017-01-12T09:57:37Z",
        "lastEditedBy" : "8b6d0937-a9aa-4efc-8d2e-f3224f679760",
        "tags" : [
        ]
      }
    ],
    "commit" : "414b29ae71d241a9074b18f1f6b4ad14c998a5eb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +801,805 @@            return e->dst()->assigned_device_name() == output_device_name;\n          });\n\n      if (consumers_on_same_device && \n          CanAssignToDevice(output_device_name, devices)) {"
  },
  {
    "id" : "65f7cb14-f242-46d1-9201-8038e276c92c",
    "prId" : 5278,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/5278#pullrequestreview-6559702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c34ddcf1-df3a-4f0b-a355-6604d15e666f",
        "parentId" : null,
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "Maybe add this same info to the LOG message too?\n",
        "createdAt" : "2016-10-30T21:20:03Z",
        "updatedAt" : "2016-11-02T15:24:19Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      },
      {
        "id" : "91bf9317-12e8-44a3-9d1b-2c804a5342b1",
        "parentId" : "c34ddcf1-df3a-4f0b-a355-6604d15e666f",
        "authorId" : "8009b783-6cc8-4a61-b115-74ba42eb4841",
        "body" : "@vrv , Yeahï¼ŒThanks,  I will do it \n",
        "createdAt" : "2016-11-01T03:33:17Z",
        "updatedAt" : "2016-11-02T15:24:19Z",
        "lastEditedBy" : "8009b783-6cc8-4a61-b115-74ba42eb4841",
        "tags" : [
        ]
      }
    ],
    "commit" : "39200ce9ff7bf688896158723609c10e9d7faa98",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +817,821 @@  if (options_ && options_->config.log_device_placement()) {\n    printf(\"%s: (%s): %s\\n\", node->name().c_str(),\n           node->type_string().c_str(),\n           node->assigned_device_name().c_str());\n    LOG(INFO) << node->name() << \": \" << \"(\" << node->type_string() << \")\" "
  }
]