[
  {
    "id" : "8990edba-fa93-4a11-8660-e8a2fa9e9a70",
    "prId" : 42413,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42413#pullrequestreview-468342913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0df4751-318b-413c-af82-f0351fc2f11b",
        "parentId" : null,
        "authorId" : "fa21cf91-4361-4622-b388-ce76c5f7f37e",
        "body" : "Any reason why you are renaming `typeOf` to `TypeOf`?",
        "createdAt" : "2020-08-17T05:16:41Z",
        "updatedAt" : "2020-08-21T11:27:10Z",
        "lastEditedBy" : "fa21cf91-4361-4622-b388-ce76c5f7f37e",
        "tags" : [
        ]
      },
      {
        "id" : "5536a04e-368e-42c7-ab19-d264226b8884",
        "parentId" : "b0df4751-318b-413c-af82-f0351fc2f11b",
        "authorId" : "15202e29-85be-4a34-80f4-beaeee18ff1c",
        "body" : "When exported it allows to detect underlying type size and preallocate correct space for tensor this way:\r\n```\r\nvar size int64 = int64(tf.TypeOf(dtype, nil).Size())\r\nfor _, e := range input_shape {\r\n\tsize *= e\r\n}\r\n\r\ntensor, err = tf.ReadTensor(dtype, input_shape, bytes.NewReader(make([]byte, size, size)))\r\n```",
        "createdAt" : "2020-08-17T10:25:06Z",
        "updatedAt" : "2020-08-21T11:27:10Z",
        "lastEditedBy" : "15202e29-85be-4a34-80f4-beaeee18ff1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "51caa173eeee32ae6346320d6ff479df0d020ece",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +431,435 @@\n// TypeOf converts from a DataType and Shape to the equivalent Go type.\nfunc TypeOf(dt DataType, shape []int64) reflect.Type {\n\tret := typeForDataType(dt)\n\tfor range shape {"
  },
  {
    "id" : "feb27242-63b8-442e-bf07-cfc0ebee5913",
    "prId" : 36578,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36578#pullrequestreview-359346357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cc3b83-67e9-4f20-b22b-0bd1778fc09b",
        "parentId" : null,
        "authorId" : "784e2bdb-22d6-4dea-bf2c-308dd99be260",
        "body" : "I'm not seeing where scalars are handled in this code. (Am I missing something?)",
        "createdAt" : "2020-02-14T20:30:01Z",
        "updatedAt" : "2020-02-14T20:30:56Z",
        "lastEditedBy" : "784e2bdb-22d6-4dea-bf2c-308dd99be260",
        "tags" : [
        ]
      },
      {
        "id" : "f82c961b-5ae5-4c79-bd92-24146cb69d99",
        "parentId" : "03cc3b83-67e9-4f20-b22b-0bd1778fc09b",
        "authorId" : "8ad724cb-c67f-4ffb-bd8d-e085f7111914",
        "body" : "Scalars are handled like a length 1 array. The data pointer in the interface type will point to the memory containing the scalar value just like it would point to the first element of a multi-element array.",
        "createdAt" : "2020-02-15T13:50:20Z",
        "updatedAt" : "2020-02-15T13:50:21Z",
        "lastEditedBy" : "8ad724cb-c67f-4ffb-bd8d-e085f7111914",
        "tags" : [
        ]
      },
      {
        "id" : "744df133-b8bb-40ff-8f68-e4a37d5752f1",
        "parentId" : "03cc3b83-67e9-4f20-b22b-0bd1778fc09b",
        "authorId" : "8ad724cb-c67f-4ffb-bd8d-e085f7111914",
        "body" : "And more importantly the scalar tests pass!",
        "createdAt" : "2020-02-15T13:51:11Z",
        "updatedAt" : "2020-02-15T13:51:11Z",
        "lastEditedBy" : "8ad724cb-c67f-4ffb-bd8d-e085f7111914",
        "tags" : [
        ]
      }
    ],
    "commit" : "147f27254118b7614a667b02e56378654fbda213",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +95,99 @@\tbuf := bytes.NewBuffer(raw[:0:len(raw)])\n\tif dataType != String {\n\t\tif isAllArray(val.Type()) {\n\t\t\t// We have arrays all the way down, or just primitive types. We can\n\t\t\t// just copy the memory in as it is all contiguous."
  },
  {
    "id" : "fa99b165-f717-4e94-920c-aea299dacac1",
    "prId" : 13151,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/13151#pullrequestreview-63794048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c666c215-ec78-4587-b4db-6d3ba7c8a06b",
        "parentId" : null,
        "authorId" : "784e2bdb-22d6-4dea-bf2c-308dd99be260",
        "body" : "This means that we no longer do the check on string types, right?",
        "createdAt" : "2017-09-19T20:18:19Z",
        "updatedAt" : "2017-09-19T20:32:51Z",
        "lastEditedBy" : "784e2bdb-22d6-4dea-bf2c-308dd99be260",
        "tags" : [
        ]
      },
      {
        "id" : "454a5c03-d74b-4466-ad6c-8c88ae9056bf",
        "parentId" : "c666c215-ec78-4587-b4db-6d3ba7c8a06b",
        "authorId" : "d0548fbe-a88a-464d-a39a-b50996564654",
        "body" : "You are absolutely right, I missed this point.\r\nHere is a fix for strings as well",
        "createdAt" : "2017-09-19T20:33:36Z",
        "updatedAt" : "2017-09-19T20:33:36Z",
        "lastEditedBy" : "d0548fbe-a88a-464d-a39a-b50996564654",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1389099f3944125288ec7bd4744f942ed38964b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +93,97 @@\tbuf := bytes.NewBuffer(raw[:0:len(raw)])\n\tif dataType != String {\n\t\tif err := encodeTensor(buf, val, shape); err != nil {\n\t\t\treturn nil, err\n\t\t}"
  }
]