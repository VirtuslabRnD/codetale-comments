[
  {
    "id" : "d7c25b0a-efcc-44e2-8538-b6934729839f",
    "prId" : 41065,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41065#pullrequestreview-454455272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c606f5e-1050-4742-930a-d2b604026954",
        "parentId" : null,
        "authorId" : "d05af51f-2cbd-45e0-9a46-17ee7174aaa6",
        "body" : "Replace this section with\r\n\r\n```\r\nelif quant_mode.is_post_training_integer_quantize_16x8():\r\n      all_types = default_types + [constants.INT16]\r\n      if self.inference_input_type not in all_types or \\\r\n          self.inference_output_type not in all_types:\r\n        all_types_names = [\"tf.\" + t.name for t in all_types]\r\n        raise ValueError(\"The inference_input_type and inference_output_type \"\r\n                         \"must be in {}.\".format(all_types_names))\r\n```",
        "createdAt" : "2020-07-23T20:03:37Z",
        "updatedAt" : "2020-07-24T10:03:12Z",
        "lastEditedBy" : "d05af51f-2cbd-45e0-9a46-17ee7174aaa6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3702f63515d46b2a5631500a0560a32cf9ed6a99",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +569,573 @@        raise ValueError(\"The inference_input_type and inference_output_type \"\n                         \"must be in {}.\".format(all_types_names))\n    elif quant_mode.is_post_training_integer_quantize_16x8():\n      all_types = default_types + [constants.INT16]\n      if self.inference_input_type not in all_types or \\"
  },
  {
    "id" : "59e12ed5-4775-431b-82c3-d4c09e1b7452",
    "prId" : 37798,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/37798#pullrequestreview-379151027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712b9c0b-c85c-4464-ab19-e463a9528a2b",
        "parentId" : null,
        "authorId" : "a9dbfdf6-2a00-45cb-b16f-cf79b1e97722",
        "body" : "I would also suggest to add descriptions here about when it will raise `No concrete func` and when it will raise `multiple concrete func`.",
        "createdAt" : "2020-03-23T06:05:06Z",
        "updatedAt" : "2020-04-22T16:30:25Z",
        "lastEditedBy" : "a9dbfdf6-2a00-45cb-b16f-cf79b1e97722",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f00953b6d3aad46e686743e4ab951b87d524b59",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +517,521 @@    Raises:\n      ValueError:\n        No concrete functions is specified.\n        Multiple concrete functions are specified.\n        Input shape is not specified."
  },
  {
    "id" : "093d0e1f-3c28-49d7-bdcb-f8a81ad033d7",
    "prId" : 36251,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36251#pullrequestreview-423237622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293b4669-1590-4eea-96d6-3bcc32e12bbc",
        "parentId" : null,
        "authorId" : "155f35ce-79aa-4b33-8dc9-776496a43ed3",
        "body" : "replace the `INT8` in line 261 by this method.",
        "createdAt" : "2020-06-03T05:55:49Z",
        "updatedAt" : "2020-06-17T11:26:26Z",
        "lastEditedBy" : "155f35ce-79aa-4b33-8dc9-776496a43ed3",
        "tags" : [
        ]
      }
    ],
    "commit" : "286cd7fc6839bb2fc999fd16fb1801f6b30656b8",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +251,255 @@                self.post_training_fp16())\n\n  def activations_type(self):\n    return constants.INT16 if self._is_int16x8_target_required() \\\n      else constants.INT8"
  },
  {
    "id" : "c3e59426-8c3a-4bf7-9cf8-b3edba729eb5",
    "prId" : 35237,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/35237#pullrequestreview-340896245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6435e17-ac2b-48e9-9043-08c27ba2a030",
        "parentId" : null,
        "authorId" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "body" : "can you please check below error reported internally.\r\n` File \"<embedded stdlib>/unittest/case.py\", line 59, in testPartExecutor\r\n   yield\r\n File \"<embedded stdlib>/unittest/case.py\", line 605, in run\r\n   testMethod()\r\n File \"/google3/runfiles/google3/third_party/tensorflow/python/framework/test_util.py\", line 1343, in decorated\r\n   return f(self, *args, **kwargs)\r\n File \"/google3/runfiles/google3/third_party/tensorflow/lite/python/lite_v2_test.py\", line 119, in testTypeInvalid\r\n   self.assertIn('call from_concrete_function', str(error.exception))\r\n File \"<embedded stdlib>/unittest/case.py\", line 1089, in assertIn\r\n   self.fail(self._formatMessage(msg, standardMsg))\r\n File \"/google3/runfiles/google3/third_party/py/absl/testing/absltest.py\", line 1767, in fail\r\n   return super(TestCase, self).fail(self._formatMessage(prefix, msg))\r\n File \"<embedded stdlib>/unittest/case.py\", line 670, in fail\r\n   raise self.failureException(msg)\r\nAssertionError: 'call from_concrete_function' not found in 'This function takes in a list of ConcreteFunction. To get the ConcreteFunction from a Function, call get_concrete_function.\r\n`",
        "createdAt" : "2020-01-09T22:20:42Z",
        "updatedAt" : "2020-01-10T00:25:49Z",
        "lastEditedBy" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "tags" : [
        ]
      },
      {
        "id" : "f83873a4-bfee-464f-9e25-28db986d0379",
        "parentId" : "e6435e17-ac2b-48e9-9043-08c27ba2a030",
        "authorId" : "c0e6af67-982a-4e5a-980e-4580b05253a0",
        "body" : "@rthadur I fixed the failing internal unittest in 359f22eef2e6c6e0adc804f88b1a94b91f7e2372\r\n\r\nIt was directly asserting on the content of the error message.",
        "createdAt" : "2020-01-10T00:27:13Z",
        "updatedAt" : "2020-01-10T00:27:13Z",
        "lastEditedBy" : "c0e6af67-982a-4e5a-980e-4580b05253a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "359f22eef2e6c6e0adc804f88b1a94b91f7e2372",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +345,349 @@        if isinstance(func, _def_function.Function):\n          message += (\" To get the ConcreteFunction from a Function,\"\n                      \" call get_concrete_function.\")\n        raise ValueError(message)\n    return cls(funcs)"
  }
]