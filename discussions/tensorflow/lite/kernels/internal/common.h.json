[
  {
    "id" : "8e5fb035-0553-4d25-ae2d-c3301ab8d007",
    "prId" : 45486,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45486#pullrequestreview-547778747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5de10b28-703a-4e44-941f-803c6bf266d0",
        "parentId" : null,
        "authorId" : "dc2d2e0c-b690-4812-96e8-4d9e58f7d2e1",
        "body" : "std::max\\<double\\>(TfLiteRound",
        "createdAt" : "2020-12-08T23:45:18Z",
        "updatedAt" : "2020-12-09T02:00:36Z",
        "lastEditedBy" : "dc2d2e0c-b690-4812-96e8-4d9e58f7d2e1",
        "tags" : [
        ]
      },
      {
        "id" : "9e4b3b43-360a-4b5f-b971-dca17a361c6b",
        "parentId" : "5de10b28-703a-4e44-941f-803c6bf266d0",
        "authorId" : "6ec28ffc-fe1a-406e-850c-d83d75e30ff7",
        "body" : "@abattery Whoops! fixing now",
        "createdAt" : "2020-12-09T01:59:06Z",
        "updatedAt" : "2020-12-09T02:00:36Z",
        "lastEditedBy" : "6ec28ffc-fe1a-406e-850c-d83d75e30ff7",
        "tags" : [
        ]
      }
    ],
    "commit" : "36e125eaa2128d0b545a0c3051c8aa062b1aa71f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +302,306 @@  table[num - 1] =\n      std::min<double>(std::max<double>(TfLiteRound(func(max) * 32768.0), -32768.0), 32767.0);\n}\n\n// generate INT16 LUT for function(), e.g., table exp(x) and 1/(1+x) used in"
  },
  {
    "id" : "876a8c0f-2aa0-4f8c-b56a-4c543a71eb40",
    "prId" : 43320,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43320#pullrequestreview-493686437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cde89860-115b-454a-ba3e-6cb3d655e29e",
        "parentId" : null,
        "authorId" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "body" : "Is this really what clang-format wants?",
        "createdAt" : "2020-09-22T17:00:42Z",
        "updatedAt" : "2020-09-22T17:01:25Z",
        "lastEditedBy" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "tags" : [
        ]
      },
      {
        "id" : "0927e68f-7b63-4c39-a9f5-a5c11b8b9605",
        "parentId" : "cde89860-115b-454a-ba3e-6cb3d655e29e",
        "authorId" : "33840d2d-3a94-4b70-9a76-3b7bb521d4fe",
        "body" : "Not something I've touched. Surprisingly this is what clang-format likes ðŸ¤”",
        "createdAt" : "2020-09-22T17:22:27Z",
        "updatedAt" : "2020-09-22T17:22:27Z",
        "lastEditedBy" : "33840d2d-3a94-4b70-9a76-3b7bb521d4fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "5affea736f2184a58afaacee80f7e433bb415089",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +472,476 @@//  ceil(log(abs( log(2.^(0:127))+1 ))/log(2))]\nconstexpr int min_log_x_output_bits(int input_bits) {\n  return input_bits > 90\n             ? 7\n             : input_bits > 44"
  },
  {
    "id" : "22811e85-bd5a-4616-99ca-066e63a690b4",
    "prId" : 35946,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/35946#pullrequestreview-364675271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12e19720-343f-4b29-afbe-13bc7c58d85b",
        "parentId" : null,
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Just for my understanding, what's the interaction between this range and the shift?\r\n\r\ny = x * multiplier * 2 ^ (-31 + shift) and multiplier is [2^30, 2^31). If shift is as high as 7, multiplier * 2 ^ (-31 + shift) is within [2^6, 2^7). Multiplied to x, where -(1<<47) <= x < (1<<47), it seems possible to overflow the int32 output.\r\n\r\nDid I miss anything? Very likely it works for real use cases (as shown in the test cases) but just want to double check. Thanks.\r\n\r\n",
        "createdAt" : "2020-02-07T04:13:25Z",
        "updatedAt" : "2020-04-07T21:13:15Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      },
      {
        "id" : "24b5d01d-48ec-4b55-9107-2512bb5e7bfb",
        "parentId" : "12e19720-343f-4b29-afbe-13bc7c58d85b",
        "authorId" : "20688b87-01cf-4e2a-8a57-8f28918caa5a",
        "body" : "Hi. Yes, you are quite correct that if a high shift value is chosen then this could overflow the 32-bit result. There is an assumption that quantize_multiplier and shift values are chosen by the caller so that the result cannot overflow (listed in the assumptions comment).\r\n\r\nIn practical use, the quantize_multipler and shift will be chosen to rescale to the scaling value of the output tensor. Therefore the expected range of values after the scaling is 16-bits. To overflow the 32-bit result, I think the model quantization would have had to produce a scale for the output tensor which is too small for the tensor contents by a factor of (1<<16). Such a scale would seem to cause the model to be unusable in any event. So, we don't think this is an issue in practice.\r\n\r\nI think there is a similar assumption in the version of MultiplyByQuantizedMultiplier() with 32-bit input 'x' on line 154 above where the intermediate value (x * (1 << left_shift)) could overflow if a large left_shift is used.\r\n",
        "createdAt" : "2020-02-12T15:07:39Z",
        "updatedAt" : "2020-04-07T21:13:15Z",
        "lastEditedBy" : "20688b87-01cf-4e2a-8a57-8f28918caa5a",
        "tags" : [
        ]
      },
      {
        "id" : "3e07a861-be68-4055-9862-d1c011afd8ce",
        "parentId" : "12e19720-343f-4b29-afbe-13bc7c58d85b",
        "authorId" : "c36a9143-1de9-4b5c-829b-f1b3708b5df0",
        "body" : "@jianlijianli, can you please check Dominic's explanation and let us know how we can move this PR forward. Thanks!",
        "createdAt" : "2020-02-13T10:39:28Z",
        "updatedAt" : "2020-04-07T21:13:15Z",
        "lastEditedBy" : "c36a9143-1de9-4b5c-829b-f1b3708b5df0",
        "tags" : [
        ]
      },
      {
        "id" : "e07e7029-41f0-443c-935f-e4a2e739e81e",
        "parentId" : "12e19720-343f-4b29-afbe-13bc7c58d85b",
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Thanks for the reply. Yes, that is my understanding as well. Just wanted to make sure.",
        "createdAt" : "2020-02-26T07:42:04Z",
        "updatedAt" : "2020-04-07T21:13:15Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      }
    ],
    "commit" : "811a9ef9974d61bf1a351aaeb3895e95909aece1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +167,171 @@  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)\n  // - scaling is chosen so final scaled result fits in int32\n  // - input x is in the range -(1<<47) <= x < (1<<47)\n  assert(quantized_multiplier >= 0);\n  assert(shift >= -31 && shift < 8);"
  },
  {
    "id" : "e95f681f-3bcf-4f59-8457-e74de8c212ca",
    "prId" : 45342,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45342#pullrequestreview-666512062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1b2e048-77ae-41b3-9d31-48298c210b7c",
        "parentId" : null,
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Is there a way to perform some check to ensure that \"LUT must have 513 values\"?",
        "createdAt" : "2021-05-14T17:58:43Z",
        "updatedAt" : "2021-05-14T18:09:45Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      },
      {
        "id" : "9747bf1c-c987-4ce2-b68d-922eb73d664e",
        "parentId" : "a1b2e048-77ae-41b3-9d31-48298c210b7c",
        "authorId" : "5449a69d-7f99-4886-9908-47affbac272a",
        "body" : "The structures in [types.h](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/kernels/internal/types.h) use simple pointers for tables, we can't deduce the size from these . We could either use something similar to to `std::span`/`absl::Span` but the first requires C++20 and the second Abseil (which from my understanding isn't part of the TFLite dependencies).\r\n\r\nNote that `generic_int16_table_lookup` didn't check either (neither does any other accesses on pointer types in [types.h](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/kernels/internal/types.h)) but we can eventually check to improve that.",
        "createdAt" : "2021-05-17T16:09:45Z",
        "updatedAt" : "2021-05-17T16:09:46Z",
        "lastEditedBy" : "5449a69d-7f99-4886-9908-47affbac272a",
        "tags" : [
        ]
      },
      {
        "id" : "f141e5fd-337d-41ce-8ab5-69f4718e343c",
        "parentId" : "a1b2e048-77ae-41b3-9d31-48298c210b7c",
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Thanks. Understand we cannot check size on a pointer. I was thinking if there is any method to check the size in the caller but the current logic should be fine.",
        "createdAt" : "2021-05-20T16:46:51Z",
        "updatedAt" : "2021-05-20T16:46:51Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      },
      {
        "id" : "7bd5dec3-6859-4aa8-a7ef-075ee86bdd27",
        "parentId" : "a1b2e048-77ae-41b3-9d31-48298c210b7c",
        "authorId" : "5449a69d-7f99-4886-9908-47affbac272a",
        "body" : "We check the size of the table tensor in Table::Prepare. We can eventually double-check again in Table::Eval though it may be a bit overzealous.",
        "createdAt" : "2021-05-24T08:27:24Z",
        "updatedAt" : "2021-05-24T08:27:25Z",
        "lastEditedBy" : "5449a69d-7f99-4886-9908-47affbac272a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cef2d16bf119cd491865dd54d5004345fc5d5e3",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +381,385 @@\n// int16_t -> int16_t table lookup with interpolation\n// LUT must have 513 values\ninline int16_t lut_lookup(int16_t value, const int16_t* lut) {\n  return lut_lookup_with_interpolation(value, lut);"
  },
  {
    "id" : "33abd574-00d2-46c9-855f-6cef22825455",
    "prId" : 45342,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45342#pullrequestreview-664616798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "837a992c-9913-43ce-8544-d5f14b707d9e",
        "parentId" : null,
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Nit: maybe LutOutT should just be LutT? Usually when we see a \"output\" type, we expect something on the \"input\".",
        "createdAt" : "2021-05-14T18:02:15Z",
        "updatedAt" : "2021-05-14T18:09:45Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      },
      {
        "id" : "6631857a-2413-42c7-b5b0-5f566d63bdf6",
        "parentId" : "837a992c-9913-43ce-8544-d5f14b707d9e",
        "authorId" : "5449a69d-7f99-4886-9908-47affbac272a",
        "body" : "The `LutOutT` in `lut_lookup_with_interpolation` and `LutInT` in `lut_size` are related to the ones used in `gen_lut`. I used these instead of just `LutT` to avoid any confusion on which one should be used for these functions.\r\n\r\nI can eventually extend the comment in `gen_lut` to better explain the `LutInT`/`LutOutT` concept.",
        "createdAt" : "2021-05-17T16:15:31Z",
        "updatedAt" : "2021-05-17T16:15:31Z",
        "lastEditedBy" : "5449a69d-7f99-4886-9908-47affbac272a",
        "tags" : [
        ]
      },
      {
        "id" : "e4ccdc9e-07a7-454a-ac21-4233dcf477ec",
        "parentId" : "837a992c-9913-43ce-8544-d5f14b707d9e",
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Thanks. Make sense.",
        "createdAt" : "2021-05-20T16:39:02Z",
        "updatedAt" : "2021-05-20T16:39:03Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cef2d16bf119cd491865dd54d5004345fc5d5e3",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +357,361 @@\n// LUT must have 513 values\ntemplate <typename LutOutT>\ninline LutOutT lut_lookup_with_interpolation(int16_t value,\n                                             const LutOutT* lut) {"
  },
  {
    "id" : "1949f114-3e23-4082-8998-42944d95275f",
    "prId" : 45342,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45342#pullrequestreview-664616529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "178872f2-897e-4ec1-85c8-b02ce2bd8b48",
        "parentId" : null,
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Nit: can we rename the LutInT to just LutT? I feel the concept of input and output for a LUT is a bit blury.",
        "createdAt" : "2021-05-14T18:05:24Z",
        "updatedAt" : "2021-05-14T18:09:45Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      },
      {
        "id" : "7cd02785-39ad-417f-9a2f-a0fa3f1b6e2a",
        "parentId" : "178872f2-897e-4ec1-85c8-b02ce2bd8b48",
        "authorId" : "5449a69d-7f99-4886-9908-47affbac272a",
        "body" : "See comment on `lut_lookup_with_interpolation`.",
        "createdAt" : "2021-05-17T16:20:24Z",
        "updatedAt" : "2021-05-17T16:20:24Z",
        "lastEditedBy" : "5449a69d-7f99-4886-9908-47affbac272a",
        "tags" : [
        ]
      },
      {
        "id" : "317a3bf4-f0fe-429f-8fb2-a3e1d54084a6",
        "parentId" : "178872f2-897e-4ec1-85c8-b02ce2bd8b48",
        "authorId" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "body" : "Thanks.",
        "createdAt" : "2021-05-20T16:38:44Z",
        "updatedAt" : "2021-05-20T16:38:44Z",
        "lastEditedBy" : "c14be44a-1748-4d93-a075-2bb17587c151",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cef2d16bf119cd491865dd54d5004345fc5d5e3",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +287,291 @@// 513-entries LUT for int16 cases, 512 for the 9-bit indexing and 1 extra entry\n// to interpolate the last value.\ntemplate <typename LutInT>\nconstexpr int lut_size() {\n  static_assert(std::is_same<LutInT, int8_t>::value ||"
  }
]