[
  {
    "id" : "16d2dfcc-c661-4d42-b039-ef2f6e86a14a",
    "prId" : 40274,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40274#pullrequestreview-449107684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96966838-472a-46d5-9b54-fc11cd1f5865",
        "parentId" : null,
        "authorId" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "body" : "`third_party/tensorflow/lite/micro/kernels/detection_postprocess.cc:18:10: error: module //third_party/tensorflow/lite/micro/kernels:micro_ops does not depend on a module exporting 'third_party/flatbuffers/include/flatbuffers/flexbuffers.h'\r\nsee http://go/cpp-features#layering_check; to fix run:\r\nbuild_cleaner //third_party/tensorflow/lite/micro/kernels:micro_ops\r\n#include \"third_party/flatbuffers/include/flatbuffers/flexbuffers.h\"`",
        "createdAt" : "2020-07-15T16:14:14Z",
        "updatedAt" : "2020-08-11T07:55:41Z",
        "lastEditedBy" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "10cfb4a14bdc1d2145fe50cdddd94819e4226bdd",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@\n#define FLATBUFFERS_LOCALE_INDEPENDENT 0\n#include \"flatbuffers/flexbuffers.h\"  // from @flatbuffers\n\n#include \"tensorflow/lite/c/builtin_op_data.h\""
  },
  {
    "id" : "118f145e-cba1-4a0a-82a2-f69735db993c",
    "prId" : 40274,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40274#pullrequestreview-464397554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e78ffe4c-0a0c-4f29-8646-53dc4d66bc87",
        "parentId" : null,
        "authorId" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "body" : "RequestScratchBufferInArena will request a temporary buffer which will be gone at the end of the given stage. This means requesting scratch buffers in prepare and referencing them from OpData is invalid, since they will have been deallocated before calls to invoke. Please use\r\nbuffer = context->AllocatePersistentBuffer(\r\n          context, size_in_bytes). See an example here https://github.com/tensorflow/tensorflow/blob/7ca0373ad3bfeec067c9c604c0973f8455473fdc/tensorflow/lite/micro/kernels/conv.cc#L142",
        "createdAt" : "2020-08-06T18:49:16Z",
        "updatedAt" : "2020-08-11T07:55:41Z",
        "lastEditedBy" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "tags" : [
        ]
      },
      {
        "id" : "cc7bcb62-6b62-470a-87cd-1202421eb8cd",
        "parentId" : "e78ffe4c-0a0c-4f29-8646-53dc4d66bc87",
        "authorId" : "6d042354-7ccf-45bf-9ecc-ef107262dfd2",
        "body" : "I think it is only scratch tensors and temporary buffers (to get rid of std::vector) that are using RequestScratchBufferInArena. And I don't think they need to be preserved at the end of given stage. I have added scratch indexes (*_idx) in OpData as is needed when using RequestScratchBufferInArena. \r\nI have also added pointers in OpData for these buffers that are set in Eval. The only reason for this is to reduce the number of parameters. Apart from that it is not really needed. It will also look more similar to the TFLite version. However they could be removed. I added some comments to clarify this. Please let me know what you think.",
        "createdAt" : "2020-08-07T15:21:21Z",
        "updatedAt" : "2020-08-11T07:55:41Z",
        "lastEditedBy" : "6d042354-7ccf-45bf-9ecc-ef107262dfd2",
        "tags" : [
        ]
      },
      {
        "id" : "d020a231-cacf-4b4e-9ca8-0fc81fe78496",
        "parentId" : "e78ffe4c-0a0c-4f29-8646-53dc4d66bc87",
        "authorId" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "body" : "Good call on the scope.  I incorrectly thought they needed to be persistent.",
        "createdAt" : "2020-08-10T16:41:29Z",
        "updatedAt" : "2020-08-11T07:55:41Z",
        "lastEditedBy" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "tags" : [
        ]
      }
    ],
    "commit" : "10cfb4a14bdc1d2145fe50cdddd94819e4226bdd",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@\n  // Scratch tensors\n  context->RequestScratchBufferInArena(context, num_boxes,\n                                       &op_data->active_candidate_idx);\n  context->RequestScratchBufferInArena(context, num_boxes * kNumCoordBox * sizeof(float),"
  }
]