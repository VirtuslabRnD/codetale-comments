[
  {
    "id" : "d616f2dd-f229-4101-b086-b3c4a7a391d7",
    "prId" : 40943,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40943#pullrequestreview-452642482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd5d44aa-6109-4cec-af88-035b4f1fd1c2",
        "parentId" : null,
        "authorId" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "body" : "Prefer to avoid defining this and only using once. Please inline it.",
        "createdAt" : "2020-07-14T19:17:37Z",
        "updatedAt" : "2020-07-15T11:52:52Z",
        "lastEditedBy" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "tags" : [
        ]
      },
      {
        "id" : "abdbe1e2-ca7f-4e38-af19-50b2c2159eb6",
        "parentId" : "bd5d44aa-6109-4cec-af88-035b4f1fd1c2",
        "authorId" : "9eb70629-c9ec-4247-97de-8f2fed53eb30",
        "body" : "Here we need the macro at couple of places, so keeping it. When the vector floating point unit (VFPU) hardware is not available, we need to fall back to the reference implementation.",
        "createdAt" : "2020-07-15T11:55:23Z",
        "updatedAt" : "2020-07-15T11:55:23Z",
        "lastEditedBy" : "9eb70629-c9ec-4247-97de-8f2fed53eb30",
        "tags" : [
        ]
      },
      {
        "id" : "afcfd356-2bca-4c47-a877-60b53241ffa4",
        "parentId" : "bd5d44aa-6109-4cec-af88-035b4f1fd1c2",
        "authorId" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "body" : "Looks like I missed some of the uses below.  Looks good.",
        "createdAt" : "2020-07-21T16:43:44Z",
        "updatedAt" : "2020-07-21T16:44:34Z",
        "lastEditedBy" : "9855e0af-32ec-4df0-92a4-bbedfc1f274c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b0642fbcd761649c9a30fe3a28e784a3f105d83",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@  tflite::ArithmeticParams op_params;\n  SetActivationParams(output_activation_min, output_activation_max, &op_params);\n#define TF_LITE_ADD(opname)                                                   \\\n  reference_ops::opname(op_params, GetTensorShape(input1),                    \\\n                        GetTensorData<float>(input1), GetTensorShape(input2), \\"
  }
]