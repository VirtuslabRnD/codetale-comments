[
  {
    "id" : "6185e02e-37d7-473d-8418-00a212ea5617",
    "prId" : 15534,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/15534#pullrequestreview-85199052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29fca22b-c59c-4827-8ee5-b039ab27429d",
        "parentId" : null,
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "Not necessarily something that needs to be changed, but more of a clarification.\r\n\r\nThese @@ s aren't doing anything, right? I think the tensorflow.org documentation excludes them because the documentation generation isn't configured with MPI (and the contrib inclusion is conditioned on that ./configure option). The other reason lots of contrib packages have them is interface sealing (i.e. delete all but these symbols), but there's no `remove_undocumented` (so `tf.contrib.mpi_collectives.tf` presumably exists along with a whole bunch of other symbols).",
        "createdAt" : "2017-12-21T21:20:20Z",
        "updatedAt" : "2017-12-21T22:24:19Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      },
      {
        "id" : "128c4abc-207e-4f69-94ea-87b9731b3959",
        "parentId" : "29fca22b-c59c-4827-8ee5-b039ab27429d",
        "authorId" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "body" : "I don't think they're doing anything. I added these to make sure the API was fully specified in the comment.",
        "createdAt" : "2017-12-21T22:24:25Z",
        "updatedAt" : "2017-12-21T22:24:26Z",
        "lastEditedBy" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b339eab14fcc6fbb99721b0e55bbf7dc683226ae",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +52,56 @@@@size\n@@rank\n@@local_rank\n\n### Ring Allreduce and Allgather"
  },
  {
    "id" : "6667b183-30e3-417c-9c43-9b7e15ab30ae",
    "prId" : 12299,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/12299#pullrequestreview-59914844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79100ecc-0aab-42f9-a638-380d01093555",
        "parentId" : null,
        "authorId" : "c58d0887-9ab4-4777-b96b-33561a3bb573",
        "body" : "If the IndexedSlices are index-disjoint, this looks correct, but what happens in case of a common index?",
        "createdAt" : "2017-08-29T16:46:56Z",
        "updatedAt" : "2017-09-17T19:12:07Z",
        "lastEditedBy" : "c58d0887-9ab4-4777-b96b-33561a3bb573",
        "tags" : [
        ]
      },
      {
        "id" : "b14fb9c8-5735-434f-b6c1-d931c1bf5edb",
        "parentId" : "79100ecc-0aab-42f9-a638-380d01093555",
        "authorId" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "body" : "IndexedSlices tensors are allowed to have repeated indices, so gathering and concatting IndexedSlices together without any reduction or index merging still creates a valid IndexedSlices tensor. For weight updates during backprop, a gradient tensor can be IndexedSlices with repeated indices, so we can call `apply_gradients` with such a tensor.\r\n\r\nThere is a question about whether this organization is an appropriate design for the interface. A user might (reasonably) assume that the returned IndexedSlices tensor should have unique indices.\r\n\r\nI'm happy to discuss appropriate organization, and as necessary, adjust the code or add comments.",
        "createdAt" : "2017-08-31T00:35:43Z",
        "updatedAt" : "2017-09-17T19:12:07Z",
        "lastEditedBy" : "fb3865e3-8ce3-4ca2-8763-51421591a09e",
        "tags" : [
        ]
      },
      {
        "id" : "79345ae9-130f-4983-8849-d9b14d7dfc50",
        "parentId" : "79100ecc-0aab-42f9-a638-380d01093555",
        "authorId" : "c58d0887-9ab4-4777-b96b-33561a3bb573",
        "body" : "I wasn't familiar with IndexedSlices; if repeated indices are ok, then this is fine.",
        "createdAt" : "2017-08-31T16:24:02Z",
        "updatedAt" : "2017-09-17T19:12:07Z",
        "lastEditedBy" : "c58d0887-9ab4-4777-b96b-33561a3bb573",
        "tags" : [
        ]
      }
    ],
    "commit" : "5518005998c073c27bb6389b4108fed063b344c9",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +149,153 @@    # For IndexedSlices, do two allgathers intead of an allreduce.\n    mpi_size = tf.cast(size(), tensor.values.dtype)\n    values = allgather(tensor.values)\n    indices = allgather(tensor.indices)\n"
  }
]