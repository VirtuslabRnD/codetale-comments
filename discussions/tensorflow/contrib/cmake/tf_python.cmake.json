[
  {
    "id" : "7606dcb0-29f9-49b0-9898-77d9b0564986",
    "prId" : 24247,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24247#pullrequestreview-183464752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4713a5d9-6481-458f-b83a-d8869f7927cc",
        "parentId" : null,
        "authorId" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "body" : "why is this change needed?",
        "createdAt" : "2018-12-10T20:28:59Z",
        "updatedAt" : "2018-12-10T20:29:14Z",
        "lastEditedBy" : "b4c739be-8aba-4687-9314-60b582f3b6d6",
        "tags" : [
        ]
      },
      {
        "id" : "5f90db1f-42fb-4055-b358-3225cb00bffc",
        "parentId" : "4713a5d9-6481-458f-b83a-d8869f7927cc",
        "authorId" : "d5199cc7-acac-45c0-b800-395910218f42",
        "body" : "If top root dir lack `__init__.py`, can't import package in python 2.",
        "createdAt" : "2018-12-11T00:32:00Z",
        "updatedAt" : "2018-12-11T00:32:00Z",
        "lastEditedBy" : "d5199cc7-acac-45c0-b800-395910218f42",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a4871af05392c2e5744515a4c67bc6f0f420943",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +803,807 @@      # this step is running since the files aren't there yet.\n      COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_CURRENT_BINARY_DIR}/tf_python/tensorflow/__init__.py\n      COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_BINARY_DIR}/tf_python/tensorflow/__init__.py\n\n      # Run create_python_api.py to generate API init files."
  },
  {
    "id" : "22bd5c75-e41c-43f7-b01e-dfe4cd9bf8b8",
    "prId" : 19715,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/19715#pullrequestreview-126929947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20f4edb1-59a7-4de1-a81d-160fe560fe79",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "Why is this code moved inside the `if(tensorflow_ENABLE_MKL_SUPPORT)` block and replicated in the `else()` block?\r\n\r\nAs far as I can tell it is identical in both branches, so please revert it to the top level if possible.",
        "createdAt" : "2018-06-06T22:06:12Z",
        "updatedAt" : "2018-06-13T08:40:26Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "3c991ab1-22fe-419b-a713-27ce3fed8cc0",
        "parentId" : "20f4edb1-59a7-4de1-a81d-160fe560fe79",
        "authorId" : "c556f901-4423-40e8-901f-55474b2047a1",
        "body" : "@mrry It's a work-around \r\n```cmake\r\nadd_custom_command(\r\n...\r\n  COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}/tf_python PATH=${PY_RUNTIME_ENV} \r\n...\r\n)\r\n```\r\nwhere `PATH=${PY_RUNTIME_ENV}` can only pass one path as argument successfully. If wrap more than one paths, separated by `;`, cmake somehow parse the variable and remove `;`, hence causing this sentence failed on executing.\r\n\r\nSo I only set MKL library path to it, which however will overwrite CUDA path. AFAIK, MKL doesn't compile with CUDA, and vice versa. So if CUDA enabled, `tensorflow_ENABLE_MKL_SUPPORT` must be disabled, and I don't want to overwrite CUDA path.\r\n\r\n**P.S**\r\nin the `else()` block, there's no `PATH=...`, so path in system is kept.",
        "createdAt" : "2018-06-07T06:25:29Z",
        "updatedAt" : "2018-06-13T08:40:26Z",
        "lastEditedBy" : "c556f901-4423-40e8-901f-55474b2047a1",
        "tags" : [
        ]
      },
      {
        "id" : "70be3eaa-8715-4bc5-85a5-b4d5878db8cf",
        "parentId" : "20f4edb1-59a7-4de1-a81d-160fe560fe79",
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "In that case, can you add a comment to explain this? The difference is easy to miss, and it's possible that someone with more CMake experience will come along later and simplify it.",
        "createdAt" : "2018-06-07T19:44:54Z",
        "updatedAt" : "2018-06-13T08:40:26Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eaef273d91f149cae8a0a45893a4af32735bdee",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +760,764 @@    # to protect overwriting CUDA environments\n    set(PY_RUNTIME_ENV ${mkl_BIN_DIRS})\n    add_custom_command(\n          OUTPUT ${api_init_files}\n          DEPENDS tf_python_ops tf_python_copy_scripts_to_destination pywrap_tensorflow_internal tf_python_touchup_modules tf_extension_ops"
  },
  {
    "id" : "06611f52-49d0-43db-a759-ce14a1de598e",
    "prId" : 14016,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14016#pullrequestreview-74112220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8217e85d-f146-4b6e-8f11-9c6f57e4bd65",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "I'm unsure why this particular target is WIN32 only. Can you please add a comment indicating why this is platform-dependent?",
        "createdAt" : "2017-11-01T16:21:08Z",
        "updatedAt" : "2017-11-07T11:14:14Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "e9b12ee2-4db8-41bd-b240-795d5af19cee",
        "parentId" : "8217e85d-f146-4b6e-8f11-9c6f57e4bd65",
        "authorId" : "4aac6b37-b72f-4038-aab7-2c15d7d955bb",
        "body" : "That ```tf_core_kernels_cpu_only``` is for Windows only, which has sort of \"workaround\" for Windows that does not support GPU in specific features. In Linux, this ```tf_core_kernel_cpu_only``` is not necessary.",
        "createdAt" : "2017-11-03T15:12:10Z",
        "updatedAt" : "2017-11-07T11:14:14Z",
        "lastEditedBy" : "4aac6b37-b72f-4038-aab7-2c15d7d955bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "486ad315f70d1a17769fdc4cf89634e7db9a4ebd",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +961,965 @@    $<$<BOOL:${tensorflow_ENABLE_GRPC_SUPPORT}>:$<TARGET_OBJECTS:tf_core_distributed_runtime>>\n    $<TARGET_OBJECTS:tf_core_kernels>\n    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<$<BOOL:${BOOL_WIN32}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>>\n    $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>\n    ${pywrap_tensorflow_deffile}"
  },
  {
    "id" : "d1696228-f328-4334-8e21-d0d91875486f",
    "prId" : 8217,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8217#pullrequestreview-26166966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d02d3707-55f0-4436-87b9-0676aaabd7fe",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "Suggestion: since we use this list again in the definition of `pywrap_tensorflow_internal`, should (can?) we extract this list of dependencies into a separate variable and use it in both places?",
        "createdAt" : "2017-03-08T22:17:25Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "e8d181ab-278d-4cea-af69-c82def750d7d",
        "parentId" : "d02d3707-55f0-4436-87b9-0676aaabd7fe",
        "authorId" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "body" : "yes, can do",
        "createdAt" : "2017-03-08T22:36:54Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "tags" : [
        ]
      },
      {
        "id" : "ca5dbb82-4e47-4b33-b237-34dccdd282ce",
        "parentId" : "d02d3707-55f0-4436-87b9-0676aaabd7fe",
        "authorId" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "body" : "Sorry, TARGET_OBJECTS doesn't let me do it.",
        "createdAt" : "2017-03-09T18:10:24Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "tags" : [
        ]
      },
      {
        "id" : "6ca3b625-2060-481b-9af7-c6084840eb63",
        "parentId" : "d02d3707-55f0-4436-87b9-0676aaabd7fe",
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "Thanks for trying!",
        "createdAt" : "2017-03-09T22:57:48Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      }
    ],
    "commit" : "166bdf1cd00f06c9f3e6ec0aff756e6bb7d4d841",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +616,620 @@        $<TARGET_OBJECTS:tf_core_kernels>\n        $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_core_kernels_cpu_only>>\n        $<$<BOOL:${tensorflow_ENABLE_GPU}>:$<TARGET_OBJECTS:tf_stream_executor>>\n    )\n    target_include_directories(pywrap_tensorflow_internal_static PUBLIC"
  },
  {
    "id" : "8b509b2a-48f8-4e70-8003-5f26069f4ed0",
    "prId" : 8217,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/8217#pullrequestreview-25903877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99e0eec0-55cb-41a9-88ee-a501a1f5167b",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "Just so I've got the process correct in my head: we're building a static `.lib` in order to get something that we can feed to `dumpbin` and then a custom Python script, ultimately to get a `.def` file. Then we throw away the `.lib` and pass the `.def` to a second `link` command, along with all the same objects, and we get a `.dll` with the appropriate exports?",
        "createdAt" : "2017-03-08T22:19:05Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "486118ad-7ff9-4024-84bd-9f116915cce0",
        "parentId" : "99e0eec0-55cb-41a9-88ee-a501a1f5167b",
        "authorId" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "body" : "yes. I kept the static lib around - might be handy for building standalone apps.\r\nI use dumpbin /linkermemer to get the symbols - decorated sysbols, hard to read. I run them though undname.exe to get the undecorated names so one can use a readable regex",
        "createdAt" : "2017-03-08T22:35:59Z",
        "updatedAt" : "2017-03-10T01:12:40Z",
        "lastEditedBy" : "59b8a32a-2445-44cc-abca-8ceefb5e647f",
        "tags" : [
        ]
      }
    ],
    "commit" : "166bdf1cd00f06c9f3e6ec0aff756e6bb7d4d841",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +604,608 @@    # that can be exported, we filter the symbols with a python script to the namespaces\n    # we need.\n    #\n    add_library(pywrap_tensorflow_internal_static STATIC\n        ${pywrap_tensorflow_internal_src}"
  },
  {
    "id" : "b1c06419-5e76-4c43-bba2-5ad3e74e8e4d",
    "prId" : 5795,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/5795#pullrequestreview-9794706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f32336e-ec56-475a-8c42-e5504f99d62b",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "I'm not sure, but I think it might be necessary to add the following lines as well:\r\n\r\n```\r\nadd_python_module(\"tensorflow/examples\")\r\nadd_python_module(\"tensorflow/examples/tutorials\")\r\n```\r\n\r\n...or else the appropriate `__init__.py` files won't be touched. Can you check if that's the case?",
        "createdAt" : "2016-11-23T01:05:22Z",
        "updatedAt" : "2016-11-23T02:07:46Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "73052b2f-bae1-4c46-a0a6-1fe43adfb56a",
        "parentId" : "2f32336e-ec56-475a-8c42-e5504f99d62b",
        "authorId" : "1850499e-580a-46c0-a151-04294576a58b",
        "body" : "Fixed as suggested.",
        "createdAt" : "2016-11-23T02:06:34Z",
        "updatedAt" : "2016-11-23T02:07:46Z",
        "lastEditedBy" : "1850499e-580a-46c0-a151-04294576a58b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39d4e8ed6ce4f80319c6560ff5fe31ffa5a280af",
    "line" : null,
    "diffHunk" : "@@ -1,1 +175,179 @@add_python_module(\"tensorflow/examples\")\nadd_python_module(\"tensorflow/examples/tutorials\")\nadd_python_module(\"tensorflow/examples/tutorials/mnist\")\nadd_python_module(\"tensorflow/python\")\nadd_python_module(\"tensorflow/python/client\")"
  }
]