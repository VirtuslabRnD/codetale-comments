[
  {
    "id" : "9c5e40ee-4bc7-4ca9-82de-4c569a8f0eb2",
    "prId" : 24327,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/24327#pullrequestreview-191025192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43336945-8676-4fdd-8def-923600628d22",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Thanks for adding the test!!\r\nI think you'll need to remove this extra blank line, as I believe buildifier only allow one blank line between rules and will fail the test before merge.",
        "createdAt" : "2019-01-10T02:09:02Z",
        "updatedAt" : "2019-01-15T23:46:53Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bea8a4a3a1fb0282b0c59a687d25c6ae160316fc",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +280,284 @@    ],\n)\n\n# Library for the node-level conversion portion of TensorRT operation creation\ntf_cuda_library("
  },
  {
    "id" : "1db2dc9a-bf42-41e2-94f9-a89d0684a460",
    "prId" : 18509,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18509#pullrequestreview-113031312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f79981a-0b60-4024-a95a-3e59e82e8ff5",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "The test result suggested to add `load(\"//tensorflow:tensorflow.bzl\", \"py_test\")` between line 21 and 22.",
        "createdAt" : "2018-04-17T21:52:40Z",
        "updatedAt" : "2018-04-17T23:34:33Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "4119791b-1180-412c-b830-f0290462bc74",
        "parentId" : "7f79981a-0b60-4024-a95a-3e59e82e8ff5",
        "authorId" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "body" : "@aaroey  It is done but somehow github can't see it",
        "createdAt" : "2018-04-17T23:05:41Z",
        "updatedAt" : "2018-04-17T23:34:33Z",
        "lastEditedBy" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e1198ffcaf1724da7f8cad545edaa4cd02b4ae",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +277,281 @@)\n\npy_test(\n    name = \"tf_trt_integration_test\",\n    srcs = [\"test/tf_trt_integration_test.py\"],"
  },
  {
    "id" : "72b45588-343d-4c0b-bc46-10fbd209c50e",
    "prId" : 18509,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18509#pullrequestreview-113031357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8814119a-ca9e-4c47-a0a8-e201db842d99",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Please add\r\n```\r\ntags = [                                                                     \r\n    \"manual\",                                                                \r\n    \"notap\",                                                                 \r\n],\r\n```\r\nbelow this line.",
        "createdAt" : "2018-04-17T22:10:18Z",
        "updatedAt" : "2018-04-17T23:34:33Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "8bfd1018-3e8c-474f-8234-4c598e0aaacc",
        "parentId" : "8814119a-ca9e-4c47-a0a8-e201db842d99",
        "authorId" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "body" : "@aaroey  Same here",
        "createdAt" : "2018-04-17T23:05:53Z",
        "updatedAt" : "2018-04-17T23:34:33Z",
        "lastEditedBy" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e1198ffcaf1724da7f8cad545edaa4cd02b4ae",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +281,285 @@    srcs = [\"test/tf_trt_integration_test.py\"],\n    main = \"test/tf_trt_integration_test.py\",\n    srcs_version = \"PY2AND3\",\n    tags = [\n        \"manual\","
  },
  {
    "id" : "1d8bf33f-c76d-43a4-9163-a45cad1aeb9a",
    "prId" : 18433,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18433#pullrequestreview-117123009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "I think there will be double import problems here: the plugin library has a singleton, but will be imported twice by two different python library (trt_convert_py and trt_ops_py), so at the end there will be two different singletons. @samikama to confirm.",
        "createdAt" : "2018-04-13T21:35:36Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "399e1093-bcfc-4bdd-9a4f-b6155a3d9145",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "After some analysis, I'm pretty sure this will cause problem:\r\n\r\n1. the plugin factory is a global instance\r\n2. it is linked here by trt_shape_function, which will eventually be linked into python/ops/_trt_engine_op.so which will be loaded by the python library\r\n3. it is also linked into trt_engine_op_kernel and trt_conversion, which will eventually linked into _wrap_conversion.so which will be loaded by the python library\r\n4. so there will be two copies of the factory, which is dangerous and will cause problems\r\n\r\nI would suggest to make a header-only library and let trt_shape_function depend on it instead. The Logger class in the trt_logging rule also has this problem, but since it doesn't contain any data, it should be fine (but I still want to fix it later).",
        "createdAt" : "2018-05-01T23:01:45Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "befa2de3-569e-42a3-8353-590d66f9a6b4",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "body" : "I thought linux dynamic linking would be able to resolve duplicate libraries at runtime, not sure how it would perform on other os neither.\r\nBut I'm not very good with these stuff and the solution sounds straightforward. Will update and ping you.\r\n\r\n",
        "createdAt" : "2018-05-01T23:36:34Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "tags" : [
        ]
      },
      {
        "id" : "5ba2d910-7898-4704-91f2-ce911f0ae4bc",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "body" : "So currently trt_shape_function requires plugin factory to deserialize the engine; so does trt_conversion.\r\nIt does not seem clear to me how I can turn plugin factory into a header-only library to break the potential double import. It would be great if you could provide more details :)\r\n\r\nTechnically speaking, I can change trt_shape_function to use attributes to store output tensor shapes (required through TF static shape inference during segmentation) and avoid engine deserialization. \r\nThis would work better with our optimization pass & last minute conversion during execution.",
        "createdAt" : "2018-05-02T08:41:43Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "tags" : [
        ]
      },
      {
        "id" : "9a795e14-4ced-4d55-80f6-6e52b945fa4a",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "body" : "Quick update:\r\nWe should remove the deserialization in trt_shape_function. Sami is also doing the same thing in his current PR where he's modifying the trt_engine_op. To avoid conflict I'll wait for his PR to be merged into master and then merge it back into this one --> so we will no longer need dependency on plugin factory",
        "createdAt" : "2018-05-02T20:48:47Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "tags" : [
        ]
      },
      {
        "id" : "156cbd32-8dea-4bbd-bd42-5085da0bfc5b",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "My understanding is that linker will load the first copy of the factory instance and ignore the second, regardless which .so is loaded first. Then, if the one who is not linked against the plugin registration is loaded first (maybe _trt_engine_op.so), then later when it tried to find the plugin it will fail. I could be wrong though.\r\n\r\nWe can see that both .so file has GetInstance() defined as a unique global symbol.",
        "createdAt" : "2018-05-02T21:01:11Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "b75f61b2-cadb-4481-9cde-7302e253f1f2",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Thanks J, just saw your updates, that works for me. Meanwhile I'm fixing the formatting issues.",
        "createdAt" : "2018-05-02T21:03:46Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "20d28539-c38d-4452-8026-50a4e8925953",
        "parentId" : "2793eefd-1b40-4a32-9381-765ab0894cd8",
        "authorId" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "body" : "Was digging a bit more into this. Since we will remove the code, so it's not related anymore.\r\n\r\nI start to think this might not be an issue. Member function from an ordinary class has external linkage and could be accessed in other translation units. http://en.cppreference.com/w/cpp/language/storage_duration \r\nI tested it locally on with gcc. \r\nI have two shared libraries (lib1.so, lib2.so) all linked against a singleton library (libstg.so) . My client application could access the singleton through interfaces exposed in lib1.so & lib2.so. I think dynamic linker takes the first encounter of the getInstance and uses it for both (Windows might behave differently tho).\r\n\r\nOne side thing I caught is that I didn't guard my singleton initialization between threads. Will update that.",
        "createdAt" : "2018-05-03T02:05:16Z",
        "updatedAt" : "2018-05-15T17:09:29Z",
        "lastEditedBy" : "e07b7c87-7b3c-46ad-8dba-53305318d8d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "82a0695ccf59b6903ba36875f9f335bac710322d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +68,72 @@    deps = [\n        \":trt_logging\",\n        \":trt_plugins\",\n    ] + if_tensorrt([\n        \"@local_config_tensorrt//:nv_infer\","
  },
  {
    "id" : "5756dfec-a8b5-4486-aa99-13c1764923f6",
    "prId" : 16253,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/16253#pullrequestreview-93113472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c4b25ca-943d-4dae-bec9-1bf8bef68e92",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "On my machine it runs into error like:\r\n```\r\n>>> import tensorflow.contrib.tensorrt\r\n...\r\nImportError: dynamic module does not define module export function (PyInit__wrap_conversion)\r\n```\r\nHave you encountered similar problem?",
        "createdAt" : "2018-01-31T18:35:15Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "21bfc838-b0bb-4cc8-8236-7ed25146fe64",
        "parentId" : "1c4b25ca-943d-4dae-bec9-1bf8bef68e92",
        "authorId" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "body" : "@aaroey,\r\ndo you have the lines https://github.com/samikama/tensorflow/blob/3e0396be541f185acbfeaf170ff46bccda0c21eb/tensorflow/tensorflow.bzl#L1299 \r\nin your tensorflow.bzl \r\nOriginal rule added ld script that filtered out all init functions if module name doesn't contain tensorflow. Lines above add init_<module_name> function to that list.\r\nNevertheless I am checking it now with a clean checkout and build",
        "createdAt" : "2018-01-31T19:00:43Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "8f9cf5d6-8597-4d0e-8a0a-4fec1fb0f577",
        "tags" : [
        ]
      },
      {
        "id" : "eb247b12-8834-4d44-ae52-29269808e18b",
        "parentId" : "1c4b25ca-943d-4dae-bec9-1bf8bef68e92",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "I actually have that but there is still import error.",
        "createdAt" : "2018-01-31T22:48:39Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +164,168 @@    srcs = [\"trt_conversion.i\"],\n    copts = tf_copts(),\n    deps = [\n        \":trt_conversion\",\n        \"//tensorflow/core:framework_lite\","
  }
]