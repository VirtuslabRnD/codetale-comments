[
  {
    "id" : "4658c38e-6945-481c-add5-b2893d5c2fe7",
    "prId" : 23866,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/23866#pullrequestreview-176999017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5b9836d-c14a-4134-a36f-495a8d755bcb",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "This may make people confused, since some of those op types are not really unsupported, but may be excluded by the segment options, or some other reasons (e.g. Reshape op is supported but only for the ones that doesn't change the batch dimension). What do you think?",
        "createdAt" : "2018-11-20T16:20:48Z",
        "updatedAt" : "2018-11-21T16:05:07Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "43cbe007-3a60-4840-a3ca-d9bc5638f8f2",
        "parentId" : "a5b9836d-c14a-4134-a36f-495a8d755bcb",
        "authorId" : "d8ccd123-f416-49e8-8333-df30e2a1eb20",
        "body" : "You are right. We need to change the wording a bit. How about this: \r\n\r\n\"There are 6 ops of 5 different types in the graph that are not converted to TRT: ArgMax, NoOp, Placeholder, Squeeze, Identity, (For more information see https://docs.nvidia.com/deeplearning/dgx/integrate-tf-trt/index.html#support-ops).\"",
        "createdAt" : "2018-11-20T18:15:11Z",
        "updatedAt" : "2018-11-21T16:05:07Z",
        "lastEditedBy" : "d8ccd123-f416-49e8-8333-df30e2a1eb20",
        "tags" : [
        ]
      },
      {
        "id" : "7eeca733-ed18-471c-b6e5-b0f042b1afe7",
        "parentId" : "a5b9836d-c14a-4134-a36f-495a8d755bcb",
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "That sounds better, thanks!",
        "createdAt" : "2018-11-20T18:26:33Z",
        "updatedAt" : "2018-11-21T16:05:07Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "5dcfec5b-c077-49dd-bcbf-49defafe846a",
        "parentId" : "a5b9836d-c14a-4134-a36f-495a8d755bcb",
        "authorId" : "d8ccd123-f416-49e8-8333-df30e2a1eb20",
        "body" : "Done",
        "createdAt" : "2018-11-20T22:14:01Z",
        "updatedAt" : "2018-11-21T16:05:07Z",
        "lastEditedBy" : "d8ccd123-f416-49e8-8333-df30e2a1eb20",
        "tags" : [
        ]
      }
    ],
    "commit" : "09b97212ff568282aa07af48eb3ae908946de4c7",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +441,445 @@    StrAppend(&msg, elem, \", \");\n  }\n  LOG(INFO) << msg << \"(For more information see \"\n            << \"https://docs.nvidia.com/deeplearning\"\n            << \"/dgx/integrate-tf-trt/index.html#support-ops).\";"
  },
  {
    "id" : "bf646112-6781-4de4-9f3b-ada7723bce90",
    "prId" : 16253,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/16253#pullrequestreview-92317475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "116f6c7b-d06c-4030-8f86-04bcd413273a",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "For graph with 4 nodes A, B, C, D where A, B, D are trt compatible but C is not, and edges set {A->B, A->C, B->D, C->D}, the current solution seems to prefer contracting C->D comparing to A->C. Can we document this behavior? Is there an easy way to use some heuristics to determine which option is better?",
        "createdAt" : "2018-01-24T18:59:50Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "f7a5ccb8-f588-4864-8f8b-60ebd382a334",
        "parentId" : "116f6c7b-d06c-4030-8f86-04bcd413273a",
        "authorId" : "289284fd-9ecc-4da0-8095-7a1d223364f3",
        "body" : "The current segmenter doesn't make any attempt to optimize globally. In the future if we have some measure of which nodes would benefit the most from tensorrt then we could implement such an algorithm. I will add a comment.",
        "createdAt" : "2018-01-24T23:46:12Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "289284fd-9ecc-4da0-8095-7a1d223364f3",
        "tags" : [
        ]
      },
      {
        "id" : "22fc18b2-fbce-4f4c-89b1-db4387726e69",
        "parentId" : "116f6c7b-d06c-4030-8f86-04bcd413273a",
        "authorId" : "c88af626-95c4-44a1-a457-e22900d07eda",
        "body" : "We have an internal effort to try to figure out how to globally segment the graph into fused clusters. It's not ready yet, but once it is it would be interesting to interface it with TensorRT.",
        "createdAt" : "2018-01-29T19:01:57Z",
        "updatedAt" : "2018-02-12T23:36:57Z",
        "lastEditedBy" : "c88af626-95c4-44a1-a457-e22900d07eda",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984",
    "line" : 182,
    "diffHunk" : "@@ -1,1 +180,184 @@        if (CanContractEdge(out_edge, graph)) {\n          VLOG(2) << \"... ... can contract\";\n          contract_edges.insert(out_edge);\n        } else {\n          VLOG(2) << \"... ... cannot contract, would form cycle\";"
  }
]