[
  {
    "id" : "6a745f2f-481b-480f-b4fe-2301496bc075",
    "prId" : 14330,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14330#pullrequestreview-78292896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a641c68-786c-40bf-8a7b-2ee30e875ea4",
        "parentId" : null,
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "Also check that `feature_index >= 0`. Technically they must also be in ascending order, but I suppose we don't need to enforce that here.",
        "createdAt" : "2017-11-15T23:58:38Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "c6a8a7ce-88e9-443b-a029-5caaf836eb28",
        "parentId" : "9a641c68-786c-40bf-8a7b-2ee30e875ea4",
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "I agree that ascending order is too strict.",
        "createdAt" : "2017-11-18T09:37:02Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      },
      {
        "id" : "0335934a-e623-4a95-90db-3cc2131b79e9",
        "parentId" : "9a641c68-786c-40bf-8a7b-2ee30e875ea4",
        "authorId" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "body" : "Thank. `feature_index >= 0` check has been added.",
        "createdAt" : "2017-11-21T23:25:51Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de6cfd86fe521fd63d48eea7f25ed32f1f55309",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@        OP_REQUIRES(\n            ctx, strings::safe_strto64(pair[0].c_str(), &feature_index),\n            errors::InvalidArgument(\"Feature format incorrect: \", entries[j]));\n        OP_REQUIRES(ctx, (feature_index >= 0),\n                    errors::InvalidArgument("
  },
  {
    "id" : "8d2cc758-adfa-41dd-a4a4-5faa8929c56c",
    "prId" : 14330,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14330#pullrequestreview-79940295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f77fb062-328e-48ed-b514-8027a7c6978f",
        "parentId" : null,
        "authorId" : "ac4ba617-3da6-492f-90df-649a00b5f1ac",
        "body" : "Here has a performance problem:  For each mini-batch, how many memory allocations occurred at here?",
        "createdAt" : "2017-11-29T07:58:59Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "ac4ba617-3da6-492f-90df-649a00b5f1ac",
        "tags" : [
        ]
      },
      {
        "id" : "80e02a0f-7344-4b82-9c3e-78abaccc01d0",
        "parentId" : "f77fb062-328e-48ed-b514-8027a7c6978f",
        "authorId" : "5f311952-9020-4294-a943-21cbd17dde41",
        "body" : "+1. It would probably be more efficient to loop over `input_flat(i)` to identify the start and end positions for each label/feature, then use `StringPiece` instead of `string` as the argument to `ConvertHelper<T>()`.\r\n\r\n(It would also be fine to iterate on this in a future PR.)",
        "createdAt" : "2017-11-29T15:09:03Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "5f311952-9020-4294-a943-21cbd17dde41",
        "tags" : [
        ]
      },
      {
        "id" : "f192f59a-b886-4ed2-bf07-fd6f609d49be",
        "parentId" : "f77fb062-328e-48ed-b514-8027a7c6978f",
        "authorId" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "body" : "Thanks @mrry @snnn, I will have a follow up PR for that after this PR is merged.",
        "createdAt" : "2017-11-29T17:56:41Z",
        "updatedAt" : "2017-12-15T18:46:40Z",
        "lastEditedBy" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de6cfd86fe521fd63d48eea7f25ed32f1f55309",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@    for (int i = 0; i < input_flat.size(); ++i) {\n      std::vector<string> entries =\n          str_util::Split(input_flat(i), \" \", str_util::SkipEmpty());\n      OP_REQUIRES(ctx, (entries.size() > 0),\n                  errors::InvalidArgument(\"No entries found for input[\", i,"
  }
]