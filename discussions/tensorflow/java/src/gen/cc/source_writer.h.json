[
  {
    "id" : "0e4ef1f7-5d88-4c5e-8d8d-ae21cd07a1e9",
    "prId" : 16120,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/16120#pullrequestreview-100954273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50ec1256-d9fd-412f-ada7-e003e248a724",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "I didn't quite follow why we need to maintain a stack of generic namespaces. I may have missed something, but it seems that the `GenericNamespace` object is never used beyond the function that pushes it on to the stack, so why bother with a stack?",
        "createdAt" : "2018-02-26T19:59:44Z",
        "updatedAt" : "2018-03-27T03:00:59Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "3bd3d488-28e5-472c-bf61-886142f1f415",
        "parentId" : "50ec1256-d9fd-412f-ada7-e003e248a724",
        "authorId" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "body" : "It depends on what is being written after pushing a new namespace to the stack. For example, if you write a parameterized class, then a parameterized inner class, then a parameterized method, each block declares its own generics and inherits from those declared in their parent. \r\n\r\nThere is such cases in the generated ops, itâ€™s the simplest way I found to handle them, I suggest we keep the stack for now and we might review it in the next PR with real use cases if you want, what do you think?",
        "createdAt" : "2018-02-28T04:57:40Z",
        "updatedAt" : "2018-03-27T03:00:59Z",
        "lastEditedBy" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "tags" : [
        ]
      },
      {
        "id" : "c789d5e3-b455-4596-89de-0c15086e20cf",
        "parentId" : "50ec1256-d9fd-412f-ada7-e003e248a724",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Doh, sorry, you're right. This is fine.",
        "createdAt" : "2018-03-03T00:44:27Z",
        "updatedAt" : "2018-03-27T03:00:59Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b780d74444e89375e49e45b184f182db354fdc72",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +204,208 @@  string line_prefix_;\n  bool newline_ = true;\n  std::stack<GenericNamespace*> generic_namespaces_;\n\n  SourceWriter& WriteModifiers(int modifiers);"
  },
  {
    "id" : "12728c77-2ff8-47da-b25d-efd6a32c7158",
    "prId" : 15928,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/15928#pullrequestreview-87412269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64496329-024f-4d76-af54-e30f890ec793",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Do we need a separate `Write` method? Would it be simpler if the callers invoked `SourceWriter` in a way that they always use `EndLine()` when they need to add a new line (and maintain the prefix/indentation)?",
        "createdAt" : "2018-01-08T21:44:34Z",
        "updatedAt" : "2018-01-09T04:28:55Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "16cbf25b-fa1b-4686-b901-4678fc87b43d",
        "parentId" : "64496329-024f-4d76-af54-e30f890ec793",
        "authorId" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "body" : "The `Write` method is useful to copy a block of text already formatted to the generated source code. For example, the documentation found in the ops definitions, or Java code snippets. If you prefer, it could be renamed to something more like `Copy`, `Inline`, or `Insert` for instance.\r\n  ",
        "createdAt" : "2018-01-09T04:36:43Z",
        "updatedAt" : "2018-01-09T04:37:05Z",
        "lastEditedBy" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "tags" : [
        ]
      },
      {
        "id" : "1a497734-bf62-4990-8451-a10a3a7b94d8",
        "parentId" : "64496329-024f-4d76-af54-e30f890ec793",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Ah, I see. Makes sense (I hadn't thought of the documentation in the `OpDef` or `ApiDef` messages).\r\n\r\n`Write` vs `Append` does seem confusing though. How about `AppendLine` and `Append` or something? Where `AppendLine` is intended for a single line?",
        "createdAt" : "2018-01-09T04:41:53Z",
        "updatedAt" : "2018-01-09T04:41:53Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e019a4d6f0b3de23befe9690e3a50aee3cfdf4bc",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@  // be scanned to ensure that each line is indented and prefixed properly,\n  // making it a bit slower than Append().\n  SourceWriter& Write(const string& text);\n\n  // Appends a newline character and start writing on a new line."
  }
]