[
  {
    "id" : "78387604-d204-4af0-a1d1-929a2b899745",
    "prId" : 18192,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/18192#pullrequestreview-117256308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35c96448-a885-4ffa-b0f7-e8258720ce6b",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "I apologize, but I'm now confused about what `OpSpec` is offering over the `ApiDef` returned by [`ApiDefMap::GetApiDef`](https://github.com/tensorflow/tensorflow/blob/90033a0c87bb3d289144cbd429a9067a4a4881d6/tensorflow/core/framework/op_gen_lib.h#L92)\r\n\r\nIt seems that the main purpose here is to encapsulate the `OpDef` and `ApiDef` into one structure? But it does lead to a lot of indirection/duplication. Would it make sense for `GeneratedOp` to operate directly on an `OpDef` and `ApiDef` structures instead of indirecting via this as is done by the [Go](https://github.com/tensorflow/tensorflow/blob/d0f5bc17560fc97bcc7de9164aa3b237a8d5221d/tensorflow/go/genop/internal/genop.go#L132) and [C++](https://github.com/tensorflow/tensorflow/blob/e4ea3b0c5cfd17bdeffcbad14eea7a07f1b2649d/tensorflow/cc/framework/cc_op_gen.cc#L1112) generators?\r\n\r\nI feel doing so will make the code both simpler and easier to extend in the future (for example, let's say we add some other field to `ApiDef`, then we don't have to thread it through a corresponding C++ class in this file)",
        "createdAt" : "2018-05-01T07:58:51Z",
        "updatedAt" : "2018-05-06T14:11:56Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "7f9c687c-a8d7-40a3-8193-e2e30e0ccde0",
        "parentId" : "35c96448-a885-4ffa-b0f7-e8258720ce6b",
        "authorId" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "body" : "There are a few reasons why it is better to do the ops generation in two phases (i.e. the parsing and the rendering). The main one is generics.\r\n\r\nIn order to know which attribute of an op is being used as a generic type for an argument, and which are gonna be inferred by inputs while others needs to be explicitly provided by the user, we need to go through all arguments/attributes of the ops before rendering the class.\r\n\r\nAlso, for each attributes identified to be generic, we need to keep track of its parameter name (e.g. the letter `U`) we assigned to it for other references, so there is a need to save parsed values in a stateful object like `*Spec`.\r\n\r\nThis is just an example, we also benefit from resolving only once arg/attr Java types and their Javadoc, since they are reused multiple times in the rendering phase. ",
        "createdAt" : "2018-05-02T03:12:01Z",
        "updatedAt" : "2018-05-06T14:11:56Z",
        "lastEditedBy" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "tags" : [
        ]
      },
      {
        "id" : "b99019b8-eaaf-4704-9851-f5fe085ed4db",
        "parentId" : "35c96448-a885-4ffa-b0f7-e8258720ce6b",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Hmm...I'm a little worried about the overall complexity here, but I admit I don't have a concrete suggestion on making this better. I guess keeping this `OpSpec` is fine for now.",
        "createdAt" : "2018-05-03T05:07:00Z",
        "updatedAt" : "2018-05-06T14:11:56Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "55a04d58-102f-467f-9344-44dfb87fc338",
        "parentId" : "35c96448-a885-4ffa-b0f7-e8258720ce6b",
        "authorId" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "body" : "Please hold on to your chair, but one possibility is to revisit all those details when migrating this generator code to Java. With the new api defs, I don’t see why we need to do it in C++ anymore and *that* would remove a lot of complexity!\r\n\r\nBut that’s for another time, don’t worry ;)",
        "createdAt" : "2018-05-03T13:24:16Z",
        "updatedAt" : "2018-05-06T14:11:56Z",
        "lastEditedBy" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c799b44b841dc8c4e83fb3fbb61ad4146464f60",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@  // op_def: Op definition\n  // api_def: Op API definition\n  static OpSpec Create(const OpDef& op_def, const ApiDef& api_def);\n\n  const string& graph_op_name() const { return graph_op_name_; }"
  }
]