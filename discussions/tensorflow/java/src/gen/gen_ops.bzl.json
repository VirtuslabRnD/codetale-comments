[
  {
    "id" : "f5d78396-d8ed-4e06-a266-6665bb0a5fb4",
    "prId" : 11973,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11973#pullrequestreview-57853710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56e29e8b-310f-4a6f-ab1a-360da1677315",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Why do we need to combine these into a `.srcjar`? Can't we leave the generated files as-is and include those as sources in the `java_op_sources` BUILD rule? Is this because the `outs` in the `genrule` isn't \"static\" otherwise (i.e., depends on the execution of the binary?)",
        "createdAt" : "2017-08-22T02:59:59Z",
        "updatedAt" : "2017-09-01T18:01:03Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "863cde0d-f7b9-4e3e-af2f-e4117b26ada9",
        "parentId" : "56e29e8b-310f-4a6f-ab1a-360da1677315",
        "authorId" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "body" : "Exactly. It is not allowed to use wildcards (e.g. `ops/array/*.java`) in the `outs` argument of a `genrule` and since we don't know at the Bazel level which files are to be generated, we cannot list them statically neither.\r\n\r\nAlso, reading at the Java rules documentation site, it seems to be the right way doing it: \r\n\r\n> Source files of type .srcjar are unpacked and compiled. (This is useful if you need to generate a set of .java files with a genrule.) ",
        "createdAt" : "2017-08-22T17:31:11Z",
        "updatedAt" : "2017-09-01T18:01:03Z",
        "lastEditedBy" : "44bac885-95e2-45aa-ac3f-da1e724327a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "daabbf01e8ae2075d472f332411b03f4d5bc6992",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@# without their .cc extensions), generate Java wrapper code for all operations\n# found in the ops files.\n# Then, combine all those source files into a single archive (.srcjar).\n#\n# For example:"
  }
]