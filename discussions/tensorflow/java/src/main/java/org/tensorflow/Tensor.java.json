[
  {
    "id" : "2b6f8cc7-d90f-442d-8574-b0ae7ccdae27",
    "prId" : 11535,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11535#pullrequestreview-54274140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bbf95bd-fb25-4ba2-b7ab-9657a1aacc2c",
        "parentId" : null,
        "authorId" : "8f909f33-dd79-45c3-bf79-0e33b2c97aca",
        "body" : "I think `2x3` may be better than `2×3`, Or can we use `2*3` here.",
        "createdAt" : "2017-08-04T03:26:07Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8f909f33-dd79-45c3-bf79-0e33b2c97aca",
        "tags" : [
        ]
      },
      {
        "id" : "158bcd88-f012-48af-bb3b-2e64d063e526",
        "parentId" : "0bbf95bd-fb25-4ba2-b7ab-9657a1aacc2c",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "Sure, I'll change to 2x3.",
        "createdAt" : "2017-08-04T03:42:36Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +175,179 @@   * <p>Creates a Tensor with the given shape by copying elements from the buffer (starting from its\n   * current position) into the tensor. For example, if {@code shape = {2,3} } (which represents a\n   * 2×3 matrix) then the buffer must have 6 elements remaining, which will be consumed by this\n   * method.\n   *"
  },
  {
    "id" : "8eafe191-0269-4576-ba09-1ad26d7d5922",
    "prId" : 11535,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11535#pullrequestreview-54274216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b5dcb34-aee5-4bcd-887f-cd66b6df850d",
        "parentId" : null,
        "authorId" : "8f909f33-dd79-45c3-bf79-0e33b2c97aca",
        "body" : "Why change the `T` to `U`?",
        "createdAt" : "2017-08-04T03:36:58Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8f909f33-dd79-45c3-bf79-0e33b2c97aca",
        "tags" : [
        ]
      },
      {
        "id" : "1029f676-0809-44e1-b6ed-a08e7f8f4e77",
        "parentId" : "7b5dcb34-aee5-4bcd-887f-cd66b6df850d",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "The type parameter U here is not the type parameter of the `Tensor` type itself, but rather a parameter of the method `copyTo`. A different name is used to avoid confusing these two types. ",
        "createdAt" : "2017-08-04T03:43:53Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d",
    "line" : 380,
    "diffHunk" : "@@ -1,1 +444,448 @@   *     with the tensor (for example, mismatched data types or shapes).\n   */\n  public <U> U copyTo(U dst) {\n    throwExceptionIfTypeIsIncompatible(dst);\n    readNDArray(nativeHandle, dst);"
  },
  {
    "id" : "7395c01e-8291-468a-bfeb-d9336ae4310a",
    "prId" : 11535,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11535#pullrequestreview-65750886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "As I see this, I think it can be confusing - that `Tensor<String>` doesn't take a `String` as the argument to `create()` (and it's really the only type where there is such a mismatch). What do you think about adding an `org.tensorflow.types.Bytes` class and using that?\r\n\r\nSo it would be:\r\n\r\n```\r\nTensor<Bytes> s = Tensor.create(new byte[]{1, 2, 3}, Bytes.class);\r\n```\r\n",
        "createdAt" : "2017-09-25T00:26:37Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "bd8f82c8-d781-4106-8f53-8d980bcf7512",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "I see what you mean about potential confusion, but I think programmers will be more comfortable with using String than a new Bytes class. I think programmers will be mostly creating string Tensors using the Tensors class, which for reasons of both convenience and efficiency ought to allow creating tensors from (arrays of) Java Strings with a specified encoding.",
        "createdAt" : "2017-09-26T19:41:29Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "049a2b3c-9520-4de7-8de2-c52c83e121c9",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "Also, calling it a Tensor&lt;String&gt; is actually more compatible with the way tensors are presented in the other language APIs.",
        "createdAt" : "2017-09-26T21:28:44Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "9c8bf74c-1d50-4640-9ba1-10943d1826ce",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "I agree that it's \"really\" a bunch of bytes, but programmers will think of it as containing strings. The fact that there is an encoding to and from bytes will be largely a detail, since people are mostly not going to write code manipulating these strings at the byte level anyway. I would even suggest picking a default encoding -- UTF-8 seems to have become\r\n dominant -- and allowing alternate encodings to be provided.",
        "createdAt" : "2017-09-27T23:16:03Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "354b1496-8a8a-4541-9461-4bfd2e66b208",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Many of the TensorFlow operations that accept TF_STRING tensors truly expect a sequence of bytes, such as an encoded protocol buffer.  A popular one is [`tf.parse_example`](https://www.tensorflow.org/api_docs/python/tf/parse_example). The serialized protocol buffers cannot be represented as a Java string.\r\n\r\nSo I guess I'm disputing the claim that \"mostly not going to write code manipulating these strings at the byte level anyway\"  :).  \r\n\r\nHence, I'm tempted to introduce a `Bytes` type. If later, we decide to add a `String` which implies UTF-8 encoding to `Bytes` as a convenience, maybe that will be okay. But I feel we should be true to what the type really represents?",
        "createdAt" : "2017-09-27T23:26:37Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "d433f4ff-6b3b-426d-bac7-0e33b7dfc3a8",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "I guess I'm looking at the Python API code and seeing that it's really nice to be able to write things like `tf.constant(\"filename.txt\")` rather than some awkward thing that explicitly encodes the string into an array of bytes. The Python programmer gets to treat Python strings as being the things in tensors, so it seems like a shame to give the Java programmer something clunkier and more foreign when Java strings are arguably more capable than Python strings.\r\n\r\nNot to pick nits, but it seems to me that serialized protocol buffers actually can be represented as a Java string, precisely because Java characters are bigger than 8 bits. If encoded or decoded using ISO-8859-1, there will be a one-to-one correspondence between the Java characters and the bytes in the serialized protobuf. Yes, Java strings can have characters that can't be represented as bytes, but I guess I'm not seeing the harm that comes from nevertheless saying these are tensors of String.",
        "createdAt" : "2017-09-28T00:14:26Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "0a7c5ce2-e268-4b2e-9b46-9c2bee88cb55",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "Of course, there is no real requirement that the type parameter actually correspond to what is stored in the tensor. But the thrust of the recent set of changes was to move away from inventing new types like TFString/Bytes and try to use existing, familiar Java types. I thought you had a good idea there!",
        "createdAt" : "2017-09-28T00:35:16Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "45ef4234-99e3-4009-a2c4-f4f9eec97288",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Taking a step back, I think we agree on wanting to make it convenient to convert Java `String`s into `Tensor`s. Mostly via methods in the (yet to come) `Tensors` class with factory functions.\r\n\r\nThe point of debate here is what these functions should return, i.e.:\r\n\r\n```java\r\npublic class Tensors {\r\n  public static Tensor<String> create(String value);  // UTF-8 encoded\r\n  public static Tensor<String> create(String value, Charset charset);\r\n  public static Tensor<String> create(byte[] value);\r\n}\r\n```\r\n\r\n*or*\r\n\r\n```java\r\npublic class Tensors {\r\n  public static Tensor<Bytes> create(String value);  // UTF-8 encoded\r\n  public static Tensor<Bytes> create(String value, Charset charset);\r\n  public static Tensor<Bytes> create(byte[] value);\r\n}\r\n```\r\n\r\nMy contention was that the latter is preferable. It makes it clear that the element type of the tensor is a sequence of bytes, not a `String`. I feel that this is more accurate and if the developer blinks, it's because this is a distinction worth knowing about.  For example, [`tf.equal`](https://www.tensorflow.org/api_docs/python/tf/equal) on two scalar `Tensor<String>` objects will return `false` even if they are the same \"strings\" because the encoding use to create the `Tensor<String>` might have been different.\r\n\r\nPoint taken about the serialized protocol buffers and ISO-8859-1 encoding. But it seems to be more natural to represent the serialized buffer as a `byte[]` rather than a `String`, which is why presumably the [protocol buffer APIs use them](https://developers.google.com/protocol-buffers/docs/javatutorial#parsing-and-serialization).\r\n\r\nYou example on `tf.constant(\"filename.txt\")` remains equally convenient in both, no? It's just whether the returned value is a `Tensor<Bytes>` or a `Tensor<String>`.\r\n\r\nThoughts? :)",
        "createdAt" : "2017-09-28T00:36:57Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "0d9b6868-2f3f-4e79-bc35-3a5fca80c032",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "You're absolutely right, we can offer exactly the same API whether we call it `Tensor<String>` or `Tensor<Bytes>`. And I think we agree about what that API should look like modulo this choice. If we go the second route, I would prefer to call it `Tensor<TFString>` rather than `Tensor<Bytes>` because 1) that makes the correspondence to the other language APIs (e.g., `tf.string`) more direct and obvious, 2) it communicates that this is the way you solve the common problem of putting strings into tensors, and 3) still adds the developer eye-blink you're after.\r\n\r\nPersonally, I think that people will, in the odd case that it matters, still make the same silly encoding/decoding mistakes regardless of what we call the type parameter, so I feel the familiarity of `String` is more valuable than the warning conveyed by the unexpected names `Bytes`/`TFString`.",
        "createdAt" : "2017-09-28T00:49:52Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "2119f3ac-0b4c-4d31-a714-0d1b0f28a86c",
        "parentId" : "ad654d12-946a-43e8-82e7-33d4675f1912",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Let's agree to disagree here (regarding familiarity with `String`) :). My fear is that developers will _think_ they're comfortable with `String` and 95% of the time it will work out fine, but those 5% where it will differ from the other types (e.g., `Integer.equals()` and `tf.equals(Tensor<Integer>, Tensor<Integer>)` will be consistent, while `String.equals()` and `tf.equals(Tensor<String>, Tensor<String>)` will not) will be annoying.\r\n\r\nThat said, other than this `String` business we do agree and there is much to this PR and I'd like to get this in before 1.4 is cut, so let's proceed with the PR as is and we can consider changing `String` to `Bytes` or `TFString` in a follow up (I'll try to find some time to gather more opinions).\r\n\r\n",
        "createdAt" : "2017-09-28T04:50:55Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +79,83 @@   * <pre>{@code\n   * // Valid: A String tensor.\n   * Tensor<String> s = Tensor.create(new byte[]{1, 2, 3}, String.class);\n   *\n   * // Java Strings will need to be encoded into a byte-sequence."
  },
  {
    "id" : "93959612-86c3-40ef-bbfa-7116977d9d01",
    "prId" : 11535,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/11535#pullrequestreview-65337695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b1f00ab-5d7c-4f4b-91ba-f14b9e3d26b7",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Can this whole implementation be replaced with:\r\n\r\n```\r\nreturn create(obj, dtype).expect(type);\r\n``` \r\n?\r\n\r\n(And if so, the `@SuppressWarnings` can be removed?)",
        "createdAt" : "2017-09-25T18:51:08Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "c136d190-d1c1-4b05-8935-1b9bb1c6f5e9",
        "parentId" : "8b1f00ab-5d7c-4f4b-91ba-f14b9e3d26b7",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "That would introduce inefficiency because the type gets checked twice. This is the one place where I think we really want to suppress the warning.",
        "createdAt" : "2017-09-25T19:24:18Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      },
      {
        "id" : "38e66afd-880b-40ad-b338-74a554600931",
        "parentId" : "8b1f00ab-5d7c-4f4b-91ba-f14b9e3d26b7",
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "I might be missing something, but it is already being checked twice right now - once in line 108 and then again in line 143. So there would be no added inefficiency?",
        "createdAt" : "2017-09-25T19:51:25Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      },
      {
        "id" : "07bae25c-85bf-4f23-bf13-0098d04d7277",
        "parentId" : "8b1f00ab-5d7c-4f4b-91ba-f14b9e3d26b7",
        "authorId" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "body" : "Actually, the check on 143 is superfluous now. Thanks for catching that; I've removed it. The call to expect() would add an unnecessary run-time check either way.",
        "createdAt" : "2017-09-26T19:44:24Z",
        "updatedAt" : "2017-09-28T14:09:48Z",
        "lastEditedBy" : "8bbe6504-29e1-4018-993f-7ca0e4ee5955",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +112,116 @@              + \")\");\n    }\n    return (Tensor<T>) create(obj, dtype);\n  }\n"
  },
  {
    "id" : "5e731c8d-7a6f-4acd-9fc8-773a9f882cb2",
    "prId" : 6577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/6577#pullrequestreview-16722212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7714436-5f13-4706-baa0-46577b1dacb7",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Nit: Can you place all these specialized `create()` methods after the one that creates from an `Object` so that all the `create()` methods are grouped together.",
        "createdAt" : "2017-01-16T15:18:08Z",
        "updatedAt" : "2017-01-29T23:34:08Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +43,47 @@ */\npublic final class Tensor implements AutoCloseable {\n\n  /**\n   * Gets the size (in bytes) of the tensor data."
  },
  {
    "id" : "cefe03bf-c5cd-42eb-bad4-93a97f7fb076",
    "prId" : 6577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/6577#pullrequestreview-16722212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca752897-b763-44d6-a973-ad61e4939116",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "Nit: Remove this line.",
        "createdAt" : "2017-01-16T15:29:42Z",
        "updatedAt" : "2017-01-29T23:34:08Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +76,80 @@   * <p>This method copies {@code numElements()} elements to the buffer.\n   *\n   * <p>This method may be used to read tensor data of type {@link DataType#INT32}.\n   *\n   * @param dst the destination buffer"
  },
  {
    "id" : "1d0632e6-cb40-4d17-89e5-2cf894662cf2",
    "prId" : 6577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/6577#pullrequestreview-16722212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fde57fc-ddb2-43a3-b31e-d94dd88516f0",
        "parentId" : null,
        "authorId" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "body" : "In all the `writeTo` methods, maybe check consistency before calling `buffer()`?",
        "createdAt" : "2017-01-16T16:00:00Z",
        "updatedAt" : "2017-01-29T23:34:08Z",
        "lastEditedBy" : "ff531721-78ce-45aa-b6a0-b9f2e664f0c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894",
    "line" : null,
    "diffHunk" : "@@ -1,1 +87,91 @@   */\n  public void writeTo(IntBuffer dst) {\n    if(dtype != DataType.INT32) {\n      throw incompatibleBuffer(dst, dtype);\n    }"
  }
]