[
  {
    "id" : "180c6d79-3c0f-43e3-93f5-e78bb159f7b9",
    "prId" : 42472,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42472#pullrequestreview-469826437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c4fbdf5-61d7-442c-9eaa-308c0646e6c8",
        "parentId" : null,
        "authorId" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "body" : "I think if we do return the value of hash, it could be faster. \r\n\r\ntry:\r\n    v = hash(elem)\r\n  except TypeError:\r\n    return _make_input_signature_hashable_helper(elem)\r\nreturn v",
        "createdAt" : "2020-08-18T20:50:06Z",
        "updatedAt" : "2020-08-18T20:50:46Z",
        "lastEditedBy" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "tags" : [
        ]
      },
      {
        "id" : "91756bb7-5b89-4f60-bb47-77f1d9eec368",
        "parentId" : "9c4fbdf5-61d7-442c-9eaa-308c0646e6c8",
        "authorId" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "body" : "To clarify, if a tuple is input then the output would be a tuple of the hashes of the elements right? So later when the cache key is computed, it would be hashing some hashes\r\n\r\nMaking this modification without trying to modify the Exception case so that hashes of those return values are also returned breaks some test cases. Should I look into returning the hashes in the Exception case too?",
        "createdAt" : "2020-08-18T20:59:01Z",
        "updatedAt" : "2020-08-18T20:59:01Z",
        "lastEditedBy" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd09b57f7a5b2c0a3cda745414a1ae356da9ce0c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +107,111 @@  \"\"\"\n  try:\n    hash(elem)\n  except TypeError:\n    # TODO(slebedev): consider using nest."
  },
  {
    "id" : "2caecb57-9e95-4cd4-8eaa-843de2f87e83",
    "prId" : 42241,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42241#pullrequestreview-467046843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "620bd33a-e103-4c7b-beac-0d9a9f6a7f6f",
        "parentId" : null,
        "authorId" : "2561fcb0-e706-401c-9b70-ae56e2e5c0f7",
        "body" : "do we have a benchmark to measure function calls with kwargs?  If not, probably it's good to add one.  Maybe before landing this CL to measure the impact.",
        "createdAt" : "2020-08-13T07:25:26Z",
        "updatedAt" : "2020-08-18T01:36:53Z",
        "lastEditedBy" : "2561fcb0-e706-401c-9b70-ae56e2e5c0f7",
        "tags" : [
        ]
      },
      {
        "id" : "2e597f6e-53a1-49a4-97a7-c84451acfa2c",
        "parentId" : "620bd33a-e103-4c7b-beac-0d9a9f6a7f6f",
        "authorId" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "body" : "I believe the defun_matmul_2_by_2 series calls with the `transpose_b` named arg",
        "createdAt" : "2020-08-13T18:57:08Z",
        "updatedAt" : "2020-08-18T01:36:53Z",
        "lastEditedBy" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "b84e92b6df46520239c5c5606a158c5aeeeaf39c",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +2655,2659 @@      if self._fullargspec.kwonlydefaults:\n        kwargs.update(self._fullargspec.kwonlydefaults)\n    else:\n      # Fill in any remaining positional arguments which were not called as\n      # pure positional arguments by the user, using values provided by the"
  },
  {
    "id" : "f15edbf3-d7f6-48f9-8795-9635f412cc2c",
    "prId" : 42241,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42241#pullrequestreview-467045382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0efb532a-18a8-4302-a209-e765360f2d32",
        "parentId" : null,
        "authorId" : "2561fcb0-e706-401c-9b70-ae56e2e5c0f7",
        "body" : "Good error handling!\r\n\r\nLet's comment this  if block, just briefly what it's doing.",
        "createdAt" : "2020-08-13T07:47:20Z",
        "updatedAt" : "2020-08-18T01:36:53Z",
        "lastEditedBy" : "2561fcb0-e706-401c-9b70-ae56e2e5c0f7",
        "tags" : [
        ]
      },
      {
        "id" : "69ee51c4-047f-4362-a84c-db13a6e7dcf2",
        "parentId" : "0efb532a-18a8-4302-a209-e765360f2d32",
        "authorId" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "body" : "Done",
        "createdAt" : "2020-08-13T18:54:55Z",
        "updatedAt" : "2020-08-18T01:36:53Z",
        "lastEditedBy" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "b84e92b6df46520239c5c5606a158c5aeeeaf39c",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +2671,2675 @@        else:\n          # Use default value\n          if i < self._num_req_args:\n            # Default value does not exist\n            missing_args = [arg_name]"
  },
  {
    "id" : "ec5ecae6-6e05-416d-aa36-056bf34612c8",
    "prId" : 41942,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41942#pullrequestreview-463557587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "624ec681-d740-4030-b1b9-578ef38041f2",
        "parentId" : null,
        "authorId" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "body" : "is this still needed?",
        "createdAt" : "2020-08-06T21:14:29Z",
        "updatedAt" : "2020-08-07T19:20:51Z",
        "lastEditedBy" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "tags" : [
        ]
      },
      {
        "id" : "10118223-4392-45fd-abec-7f42a30912be",
        "parentId" : "624ec681-d740-4030-b1b9-578ef38041f2",
        "authorId" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "body" : "It's not absolutely required, but there is still a call to `nest.flatten` with expanded composites in L3247/3261 that it replaces",
        "createdAt" : "2020-08-07T19:21:51Z",
        "updatedAt" : "2020-08-07T19:21:52Z",
        "lastEditedBy" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eacf1a9cc97055a050fb73707a5cece1030c448",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +3201,3205 @@                                             kwargs,\n                                             flat_args,\n                                             flat_kwargs):\n    \"\"\"Define a function, relaxing arg shapes to avoid unnecessary retracing.\"\"\"\n    flat_args_all = nest.flatten((args, kwargs), expand_composites=False)"
  },
  {
    "id" : "4dae15c4-dad1-4a8c-a8af-292a55304dca",
    "prId" : 41942,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41942#pullrequestreview-463705642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b511db-dacd-4de7-9eb5-cc0058a05f94",
        "parentId" : null,
        "authorId" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "body" : "this is same as flat_args, right? ",
        "createdAt" : "2020-08-07T23:49:33Z",
        "updatedAt" : "2020-08-07T23:49:59Z",
        "lastEditedBy" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "tags" : [
        ]
      },
      {
        "id" : "b6968872-c71e-4c52-9d88-951c7e565272",
        "parentId" : "37b511db-dacd-4de7-9eb5-cc0058a05f94",
        "authorId" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "body" : "It seems that args and kwargs can be modified/repacked in the `if any_composite_args` case (L3242/3256). Will check if they end up flattening to the same thing though",
        "createdAt" : "2020-08-08T01:21:57Z",
        "updatedAt" : "2020-08-08T01:21:58Z",
        "lastEditedBy" : "c2a54e89-f173-4d8e-b679-466646b5a8bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eacf1a9cc97055a050fb73707a5cece1030c448",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +3265,3269 @@    return (graph_function,\n            nest.flatten(args, expand_composites=True),\n            nest.flatten(kwargs, expand_composites=True))\n\n  def _maybe_define_function(self, args, kwargs):"
  },
  {
    "id" : "5c52bf0f-308a-4c58-8b56-c60f8030d4ea",
    "prId" : 41942,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41942#pullrequestreview-463691614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df215bf2-c398-4506-b767-cae8cd1bdb32",
        "parentId" : null,
        "authorId" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "body" : "same as flat_kwargs, right? ",
        "createdAt" : "2020-08-07T23:49:55Z",
        "updatedAt" : "2020-08-07T23:49:59Z",
        "lastEditedBy" : "159ca2d6-396b-4a69-9027-88b2fa56a1a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eacf1a9cc97055a050fb73707a5cece1030c448",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +3265,3269 @@    return (graph_function,\n            nest.flatten(args, expand_composites=True),\n            nest.flatten(kwargs, expand_composites=True))\n\n  def _maybe_define_function(self, args, kwargs):"
  },
  {
    "id" : "b36c7eff-e22e-44e9-8883-7b0c7b29349c",
    "prId" : 40901,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40901#pullrequestreview-440446932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85122138-9a98-458e-b899-f815c5baf1dd",
        "parentId" : null,
        "authorId" : "6d710ed1-8ddd-4cc0-acf7-45a1b4f8ceba",
        "body" : "This isn't immediately obvious - please add a note explaining it (or alink to the docs of inspect.getfullargspec if it's available.",
        "createdAt" : "2020-06-30T12:27:48Z",
        "updatedAt" : "2020-07-09T18:03:21Z",
        "lastEditedBy" : "6d710ed1-8ddd-4cc0-acf7-45a1b4f8ceba",
        "tags" : [
        ]
      },
      {
        "id" : "13c33700-1f71-43c5-b819-1390465efd91",
        "parentId" : "85122138-9a98-458e-b899-f815c5baf1dd",
        "authorId" : "e39b2ff9-dae6-497c-aeae-57f2b8dec9b2",
        "body" : "The docs are available so I'll link it.",
        "createdAt" : "2020-06-30T23:13:31Z",
        "updatedAt" : "2020-07-09T18:03:21Z",
        "lastEditedBy" : "e39b2ff9-dae6-497c-aeae-57f2b8dec9b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bed05f4d45face787ee8a0dc97ae5eb7f5b67318",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +2550,2554 @@        if arg_annotation == ops.Tensor:\n          args[i] = ops.convert_to_tensor(arg)\n      else:\n        varargs_annotation = self._fullargspec.annotations.get(\n            self._fullargspec.varargs)"
  },
  {
    "id" : "b54809da-6108-49e5-b604-f83929f48364",
    "prId" : 40901,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40901#pullrequestreview-442557516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58ffe09e-b1ee-482f-ae0d-1c0444f07e15",
        "parentId" : null,
        "authorId" : "6d710ed1-8ddd-4cc0-acf7-45a1b4f8ceba",
        "body" : "Optional, if you get the chance: it would be ideal to disentangle these blocks, and separate them into stages:\r\n 1. one set of loops to find type annotations, if any, resulting in an arg_annos, and kwarg_annos\r\n 2. another set of loops to convert arguments as necessary\r\n\r\nThat way the logic is easier to follow an verify, and you avoid the duplication of the \"if annotation == ops.Tensor: convert\" logic, which is expected to become more complex in time.",
        "createdAt" : "2020-07-03T20:52:37Z",
        "updatedAt" : "2020-07-09T18:03:21Z",
        "lastEditedBy" : "6d710ed1-8ddd-4cc0-acf7-45a1b4f8ceba",
        "tags" : [
        ]
      }
    ],
    "commit" : "bed05f4d45face787ee8a0dc97ae5eb7f5b67318",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2541,2545 @@\n    args = list(args)\n    for i, arg in enumerate(args):\n      # See https://docs.python.org/3/library/inspect.html#inspect.getfullargspec for details on fullargspec\n      if i < len(self._fullargspec.args):"
  },
  {
    "id" : "aff96128-9fb4-4cfa-8cdd-b2b9089b53dd",
    "prId" : 31955,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/31955#pullrequestreview-279680273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74d85b60-d0f4-4f8e-bd3f-902804e8cbb1",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "same here",
        "createdAt" : "2019-08-26T16:01:13Z",
        "updatedAt" : "2019-08-26T16:01:20Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      }
    ],
    "commit" : "a18d5eed67adb6782dafd6a743bcf186e2fe66ab",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +34,38 @@from tensorflow.core.framework import function_pb2\nfrom tensorflow.python import pywrap_tensorflow\nfrom tensorflow.python import _pywrap_utils\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.eager import execute"
  }
]