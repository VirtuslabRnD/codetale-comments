[
  {
    "id" : "f39ae8c6-aaf7-46ef-a9c6-f98777bb4415",
    "prId" : 39711,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39711#pullrequestreview-418472491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2406bc34-baf4-4cc6-9511-76d886260f3f",
        "parentId" : null,
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "You may want to note that this traces `f` and the rest of the computation every time it runs. I think the result is what we'll eventually want, but we'll want `f` to run eagerly.",
        "createdAt" : "2020-05-20T16:25:59Z",
        "updatedAt" : "2020-05-25T17:14:37Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      },
      {
        "id" : "4d405f83-2fc6-472f-9879-ad9ce0bc5825",
        "parentId" : "2406bc34-baf4-4cc6-9511-76d886260f3f",
        "authorId" : "760b7287-a98f-4942-8b6e-834fd5ef426a",
        "body" : "Fixed that. But I'm not sure if retracing in `_jacfwd` needs to be handled and if yes then how. I'm using `_jvp_batch_matmul` just to check correctness for now.  ",
        "createdAt" : "2020-05-23T21:14:47Z",
        "updatedAt" : "2020-05-25T17:14:37Z",
        "lastEditedBy" : "760b7287-a98f-4942-8b6e-834fd5ef426a",
        "tags" : [
        ]
      },
      {
        "id" : "d8ac98d0-6461-4a15-b6e0-95497d32c9ef",
        "parentId" : "2406bc34-baf4-4cc6-9511-76d886260f3f",
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "Every time _jvp_batch runs, it creates a new def_function.function object, which will start with no traces and have to build one the first time it's called. That's what vectorized_map was doing itself I think. But it's self-documenting now, so maybe that works instead of a note/comment.\r\n\r\nI don't think we should try fixing retracing for this PR. Fine to just add the tests. This API issue (no vectorized tangents executing eagerly) is one of the main reasons we need your summer project.",
        "createdAt" : "2020-05-26T16:29:04Z",
        "updatedAt" : "2020-05-26T16:31:25Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "86db9c0581616666df559ce10afa13d40fca7693",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +94,98 @@  tf_function = def_function.function(f)\n\n  return control_flow_ops.vectorized_map(\n      functools.partial(_jvp, tf_function, primal), \n      tangents"
  },
  {
    "id" : "9da28d73-75e8-4325-a3d5-983fb0d75c16",
    "prId" : 39042,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39042#pullrequestreview-410453351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d7709f3-1b9e-405f-9e0d-d4deb8cbe360",
        "parentId" : null,
        "authorId" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "body" : "This test seems to fail for me locally because of the decorator - @test_util.assert_no_new_pyobjects_executing_eagerly. I am currently investigating it.",
        "createdAt" : "2020-05-12T20:02:11Z",
        "updatedAt" : "2020-05-20T22:59:30Z",
        "lastEditedBy" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "tags" : [
        ]
      },
      {
        "id" : "80e63163-323e-43fa-9cd3-d1eea0a98ae4",
        "parentId" : "1d7709f3-1b9e-405f-9e0d-d4deb8cbe360",
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "I vaguely remember having problems with assertRaises and some of the memory decorators. Which objects does it say are leaked?",
        "createdAt" : "2020-05-12T20:06:59Z",
        "updatedAt" : "2020-05-20T22:59:30Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      },
      {
        "id" : "d437b35d-3b79-4dce-8ec0-387189d1d2de",
        "parentId" : "1d7709f3-1b9e-405f-9e0d-d4deb8cbe360",
        "authorId" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "body" : "AssertionError: The following objects were newly created: Counter({'cell': 30, 'function': 21, 'tuple': 18, 'list': 9})",
        "createdAt" : "2020-05-12T20:27:31Z",
        "updatedAt" : "2020-05-20T22:59:30Z",
        "lastEditedBy" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "tags" : [
        ]
      },
      {
        "id" : "a8a0a70a-a0b1-49cd-9c8f-57127f5beb45",
        "parentId" : "1d7709f3-1b9e-405f-9e0d-d4deb8cbe360",
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "Yeah I wouldn't worry about it for this change. You can convert the test to checking for the error and then remove the memory decorator.\r\n\r\nIt's possible there's a failure to free references when returning an exception through the forward accumulator or through the tape. My first thought was that assertRaisesRegexp causes an issue, but we do have tests that use it with the memory checking decorator. Can you leave a `TODO(allenl): investigate why assert_no_new_pyobjects_executing_eagerly fails around this test`?",
        "createdAt" : "2020-05-12T21:47:17Z",
        "updatedAt" : "2020-05-20T22:59:30Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      },
      {
        "id" : "e0631244-3ef6-48bb-b0c3-700b898fa8e8",
        "parentId" : "1d7709f3-1b9e-405f-9e0d-d4deb8cbe360",
        "authorId" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "body" : "Sounds good. Thanks for looking into it. It was troubling me quite a bit :). Will put the todo in my upcoming commit.",
        "createdAt" : "2020-05-12T21:59:34Z",
        "updatedAt" : "2020-05-20T22:59:30Z",
        "lastEditedBy" : "4d44e2f5-e1e2-473e-9b67-ac8e4667f6c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f2bc445e2dbb0b4dd9870fcaa5a4036a55af336",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +354,358 @@\n    @custom_gradient.recompute_grad\n    def f(x):\n      return math_ops.reduce_prod(math_ops.tanh(x)**2)\n"
  }
]