[
  {
    "id" : "cbe53a10-83cf-4799-a669-e04af0dc1369",
    "prId" : 25422,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25422#pullrequestreview-201645849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "I was showing your operation to some other core TF devs and someone asked for a unit test that says that you can use any sequence, including a string, to validate shapes. So something like\r\n\r\ntf.assert_shapes({\r\n image: \"NCHW\",\r\n kernel: \"Cc\",\r\n})\r\n\r\nwould validate a conv kernel. How do you feel about this?",
        "createdAt" : "2019-02-05T16:53:59Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "789b8ca3-0fb7-49fe-ae27-0ab138457ae0",
        "parentId" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "authorId" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "body" : "I like that idea a lot. \r\n\r\nTo enable the same capabilities using e.g. strings we would need a character symbol for `...` and None (*any* size). In the code just pushed it is currently `#` for `...` and  `*` for *any*.\r\n\r\nIn the code I made it an arbitrary iterable, then not needing the attribute `__len__` but only the `__iter__` and then use the tuple(iterable) constructor to guarantee having `__len__` for the specified shape rank checks.\r\n\r\nAs certain iterable/sequence types have their own element types, as e.g. `str` having `str` elements, we need to be cast/parse elements to integers for the explicit size check case. To handle it for general/unknown element types the pythonic way I know is a try-catch int parsing attempt. If you prefer another approach I'd be happy to do it differently.\r\n\r\nWhat do you think? ",
        "createdAt" : "2019-02-06T22:29:35Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "tags" : [
        ]
      },
      {
        "id" : "e3750658-861e-4626-92d7-6e9553752ea6",
        "parentId" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "I think the string case is good even if it's more limited (no None, number, or ellipsis).",
        "createdAt" : "2019-02-06T22:36:08Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "e7e31b3e-0314-4a9c-b58f-83b1c9841edf",
        "parentId" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "authorId" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "body" : "I definitely think too the string case is good either way.\r\n\r\nAlthough I think that it would still be neat to have all functionality in the string/general iterable case as well, as it would allow for a compact syntax as a complete alternative. \r\n\r\nIf alternative symbols were to be included, perhaps they could instead by the following to have similar meaning as in regular expressions:\r\n*any*: '.'\r\nellipsis: '*'\r\n\r\nExamples:\r\n```python\r\ndef matmul(x, y):\r\n  tf.assert_shapes({\r\n      x: (..., 'A', 'B'),\r\n      y: (..., 'B', 'C')\r\n  })\r\n  ...\r\n```\r\nand as there is no need to declare 'A' and 'C' it could be written:\t\r\n```python\r\ntf.assert_shapes({\r\n    x: (..., '.', 'B'),\r\n    y: (..., 'B', '.')\r\n})\r\n```\r\nor using strings:\r\n```python\r\ntf.assert_shapes({\r\n    x: \"*.B\",\r\n    y: \"*B.\"\r\n})\r\n```",
        "createdAt" : "2019-02-07T15:19:39Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "tags" : [
        ]
      },
      {
        "id" : "1ac1a420-c830-4d56-8efe-2326972fa066",
        "parentId" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "This looks good to me; go ahead.",
        "createdAt" : "2019-02-07T21:50:52Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "704d7f9b-bd98-41b0-95ab-b448c132ef0b",
        "parentId" : "f56a7a94-1998-4c65-b8df-9766eee8facb",
        "authorId" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "body" : "Great. Pushed the symbol changes",
        "createdAt" : "2019-02-08T15:48:09Z",
        "updatedAt" : "2019-04-27T16:27:55Z",
        "lastEditedBy" : "ce224980-aed2-4af1-b130-fe1c4eb2badb",
        "tags" : [
        ]
      }
    ],
    "commit" : "52705be88b8ad36b02fba18a0a026e963334ee86",
    "line" : 384,
    "diffHunk" : "@@ -1,1 +1838,1842 @@        sess.run(out, feed_dict=feed_dict)\n\n\nclass IsStrictlyIncreasingTest(test.TestCase):\n"
  },
  {
    "id" : "681c45eb-de6e-4a1e-8b03-e115ffd39b38",
    "prId" : 22787,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/22787#pullrequestreview-164055931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2a5ef30-9db5-4547-95a6-5c34fe30c70a",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "Can you make the test less strict? I foresee many many changes to this test as small details of the error messasge might change in the future.\r\n\r\nHow about just checking for the presence of the tensor contents?",
        "createdAt" : "2018-10-08T16:49:13Z",
        "updatedAt" : "2018-10-09T22:43:52Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "663e5b02-1ebd-4745-8dab-d7d3a1250f6f",
        "parentId" : "c2a5ef30-9db5-4547-95a6-5c34fe30c70a",
        "authorId" : "c4e6fae0-2e1a-478a-96bd-743fc5c75802",
        "body" : "Sure, I'd be happy to. Will push another commit tomorrow.",
        "createdAt" : "2018-10-09T01:05:49Z",
        "updatedAt" : "2018-10-09T22:43:52Z",
        "lastEditedBy" : "c4e6fae0-2e1a-478a-96bd-743fc5c75802",
        "tags" : [
        ]
      },
      {
        "id" : "88cc038e-4979-4e4f-8b1c-6eaafcc24079",
        "parentId" : "c2a5ef30-9db5-4547-95a6-5c34fe30c70a",
        "authorId" : "c4e6fae0-2e1a-478a-96bd-743fc5c75802",
        "body" : "Changes pushed. Regression tests pass on my test machine.",
        "createdAt" : "2018-10-11T23:45:35Z",
        "updatedAt" : "2018-10-11T23:45:35Z",
        "lastEditedBy" : "c4e6fae0-2e1a-478a-96bd-743fc5c75802",
        "tags" : [
        ]
      }
    ],
    "commit" : "496626332a95865af39c209b588eb7fa13caba51",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +303,307 @@      assert x is None\n\n  def test_error_message_eager(self):\n    # Note that the following three strings are regexes\n    expected_error_msg_full = r\"\"\"0.0, 1.0, 2.0, 3.0, 4.0, 5.0\"\"\""
  }
]