[
  {
    "id" : "2139e278-0275-45ce-b8eb-8012d803dab8",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88a930c2-8617-44b9-98fd-0b548ff7c420",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "I think we can use `np.prod(shape)` for `total_size`.",
        "createdAt" : "2020-10-07T21:52:41Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "138db977-7bf0-41b0-989e-eba9b48a84e9",
        "parentId" : "88a930c2-8617-44b9-98fd-0b548ff7c420",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:17:07Z",
        "updatedAt" : "2020-10-09T00:17:08Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3272,3276 @@  def _CreateNumpyTensor(self, shape):\n    total_size = np.prod(shape)\n    return np.arange(1, total_size + 1, dtype=np.float32).reshape(shape)\n\n  def _CreateConv2D(self, input_values, filters,"
  },
  {
    "id" : "0abc4fcd-386e-40c8-80f9-3a321bcbceeb",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d6087b1-360b-40af-81dc-09ad9581ea6b",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "Could you please add a comment saying that this test case tests tensor forwarding? Same for other cases. (I feel it wouldn't be clear out of the context of this PR.) For example,\r\n```\r\n# Tests tensor forwarding of a fused Conv2D+BiasAdd+Add op when the input to Add\r\n# has refcount 1.\r\n```",
        "createdAt" : "2020-10-07T23:52:50Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "f10f861c-2b93-47d2-ad6c-61673e90e93a",
        "parentId" : "7d6087b1-360b-40af-81dc-09ad9581ea6b",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:17:33Z",
        "updatedAt" : "2020-10-09T00:17:33Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +3286,3290 @@  @test_util.run_in_graph_and_eager_modes(use_gpu=False)\n  def testAddWithRefCountOne(self):\n    expected_output = [\n        113377, 125570, 77305, 86738, 19433, 22226, 60681,\n        70722, 36291, 43718, 7143, 9206, 9785, 12098,"
  },
  {
    "id" : "6ec2b74f-fb68-421e-b2ff-2410dafa60ad",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2484784-3808-401c-9c1b-76942d7adb7d",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The comment here could be:\r\n```\r\n# Tests tensor forwarding of a fused Conv2D+BiasAdd+Add op when the input to Add\r\n# has a total refcount of 2, and Add is its last consumer.\r\n```",
        "createdAt" : "2020-10-08T00:12:19Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "ae561c7b-5029-4c4f-a801-11dfd9e45126",
        "parentId" : "f2484784-3808-401c-9c1b-76942d7adb7d",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:17:41Z",
        "updatedAt" : "2020-10-09T00:17:41Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +3314,3318 @@  # Add has a total refcount of 2, and Add is its last consumer.\n  @test_util.run_in_graph_and_eager_modes(use_gpu=False)\n  def testAddWithRefCountTwoAndRunAddLast(self):\n    expected_output = [\n        1.907175e+06, 2.253505e+06, 7.809210e+05, 9.537180e+05,"
  },
  {
    "id" : "a7709595-da08-41b9-a431-10c47595937b",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab46de8-2018-4f10-a461-4dbeb4b8fd62",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The comment here could be:\r\n```\r\n# Tests tensor forwarding of a fused Conv2D+BiasAdd+Add op when the input to Add\r\n# has refcount 2 and Add (in the fused Conv2D op) is its first consumer.\r\n```\r\nOr we could use other op than Add in `output = math_ops.add_n([relu, conv2])` and remove the `(in the fused Conv2D op)` part in the comment.",
        "createdAt" : "2020-10-08T00:15:52Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "44ee74a6-49d3-4fb0-b356-8a11f5a25483",
        "parentId" : "cab46de8-2018-4f10-a461-4dbeb4b8fd62",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:17:48Z",
        "updatedAt" : "2020-10-09T00:17:48Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +3345,3349 @@  # Add has refcount 2 and Add (in the fused Conv2D op) is its first consumer.\n  @test_util.run_in_graph_and_eager_modes(use_gpu=False)\n  def testAddWithRefCountTwoAndRunAddFirst(self):\n    expected_output = [\n        176161, 194450, 120673, 134822, 30545, 34734, 96041,"
  },
  {
    "id" : "880f365c-723e-4274-af08-3a156c54584a",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78590861-9b64-4854-a806-947e451e6681",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The comment here could be:\r\n```\r\n# Tests tensor forwarding of a fused Conv2D+BiasAdd+Add op when the input to Add\r\n# has refcount 2, and there is no dependency between its two consumers.\r\n```",
        "createdAt" : "2020-10-08T00:17:18Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "7fff5ea2-2889-42dc-a17b-9bb8f47653be",
        "parentId" : "78590861-9b64-4854-a806-947e451e6681",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:17:58Z",
        "updatedAt" : "2020-10-09T00:17:58Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +3377,3381 @@  # Add has refcount 2, and there is no dependency between its two consumers.\n  @test_util.run_in_graph_and_eager_modes(use_gpu=False)\n  def testAddWithRefCountTwoAndNoDependence(self):\n    expected_output = [\n        176161, 194450, 120673, 134822, 30545, 34734, 96041,"
  },
  {
    "id" : "f2aaf2cf-f1b5-4928-b5fe-cdf76f3dd28b",
    "prId" : 43577,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43577#pullrequestreview-505259672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45bbfaa6-10c7-44f1-b85d-407a01d00615",
        "parentId" : null,
        "authorId" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "body" : "The comment here could be:\r\n```\r\n# Tests tensor forwarding of a fused Conv2D+BiasAdd+Add op when the input to Add\r\n# is the same as the input to the fused Conv2D op and needs a tensor buffer.\r\n```",
        "createdAt" : "2020-10-08T00:20:29Z",
        "updatedAt" : "2020-10-09T00:15:59Z",
        "lastEditedBy" : "72acf7f0-6473-4b57-a71f-2a44410818c5",
        "tags" : [
        ]
      },
      {
        "id" : "b49bd491-ba99-4e41-86d2-aac6eb773a68",
        "parentId" : "45bbfaa6-10c7-44f1-b85d-407a01d00615",
        "authorId" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "body" : "Done",
        "createdAt" : "2020-10-09T00:18:07Z",
        "updatedAt" : "2020-10-09T00:18:07Z",
        "lastEditedBy" : "2f37d57c-3887-4235-87c2-9c3d11e0c22b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c53f7a7b1b386b4031d27dcd198c203921e9eda8",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +3411,3415 @@  # buffer.\n  @test_util.run_in_graph_and_eager_modes(use_gpu=False)\n  def testAddWithSameSrcAndAddTensorBuffer(self):\n    expected_output = [\n        57157, 63298, 39249, 44026, 9971, 11402, 31193, 36306,"
  },
  {
    "id" : "2b27ce63-8138-4b97-9283-c3482ab05dbe",
    "prId" : 1991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "953bef1c-70bd-41cc-a8ea-9a02fa217a02",
        "parentId" : null,
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "We should check what other frameworks do for this case.  I could imagine padding by 1 on both sides so:\n\n[ 1 2 3 4 5 6 7 8 ]\n[ 1 2 3 4 5 6 7 8 ]  \n...\n\nYour patches for the first row would be:\n [0 0    [0 0   [0 0\n  0 1]    4 5]    8 0]\n\nSo the output size could be 3x3, rather than 2x2.\n",
        "createdAt" : "2016-04-17T04:06:17Z",
        "updatedAt" : "2016-04-19T00:24:17Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      },
      {
        "id" : "473ab800-c0e5-424a-a922-36b1e9399be3",
        "parentId" : "953bef1c-70bd-41cc-a8ea-9a02fa217a02",
        "authorId" : "8f5453b9-7f5e-4993-93b1-33f9bc2fdc36",
        "body" : "sorry your formatting didn't turn out and not sure what you mean - can you revise the comment? \n",
        "createdAt" : "2016-04-17T21:41:56Z",
        "updatedAt" : "2016-04-19T00:24:17Z",
        "lastEditedBy" : "8f5453b9-7f5e-4993-93b1-33f9bc2fdc36",
        "tags" : [
        ]
      },
      {
        "id" : "e65953d7-8bbd-4c79-9027-bfd08294fa80",
        "parentId" : "953bef1c-70bd-41cc-a8ea-9a02fa217a02",
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "Perhaps ignore that comment.  I'm just thinking about what's the right thing to do here, and I think instead of the change to use std::max(filter_size, stride_size), I think it might just be better to do real_padding = std::max(0, calculated_padding).\n\nWhy: the equations I usually go back to, from @Yangqing, master of understanding padding, is (for SAME):\n\nR' = ceil(float(R) / float(S))\nC' = ceil(float(C) / float(S))\nPr = ((R' - 1) \\* S + K - R) / 2\nPc = ((C' - 1) \\* S + K - C) / 2\n\n(R = num input rows, C = num input columns,  S = stride, K = filter size -- the latter two I'm assuming square filter and equal stride, but you can generalize).\n\nIn one case above (R=C=3, S=2, K=1), we have:  R' = C' = 2, Pr = Pc = 1 \\* 2 + 1 - 3 = 0, so it feels like the padding calculation is wrong for that case, since it's now calculated as '1' even though it's unneeded.\n\nIn the case that failed for you: R=C=4, S=2, K=1 we have R'=C'=2,  Pr = Pc = 1 \\* 2 + 1 - 4 = -1, so we have negative padding.  My guess is that you changed the code to avoid tripping the check failure -- if you use std::max(0, calculated_padding), I'm thinking the math will generally work out.  What do you think?\n",
        "createdAt" : "2016-04-18T06:37:44Z",
        "updatedAt" : "2016-04-19T00:24:17Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c158a47a4c2dc888c9620f7df766c20e2eb1350",
    "line" : null,
    "diffHunk" : "@@ -1,1 +344,348 @@\n    # TODO this currently fails.\n    #self._VerifyValues(tensor_in_sizes=[1, 8, 8, 1],\n    #                   filter_in_sizes=[2, 2, 1, 1],\n    #                   strides=[4, 4], padding=\"SAME\","
  },
  {
    "id" : "ce51abf8-2226-452d-9ff5-4cfa1283e9ac",
    "prId" : 1868,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd26b5aa-bb88-4b1c-9d45-6cbd9dfa9e0c",
        "parentId" : null,
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "Might also be nice to have a test with unequal strides > filter sizes, just to make sure the arguments are correctly propagated consistently.  Optional.\n",
        "createdAt" : "2016-04-12T06:00:15Z",
        "updatedAt" : "2016-04-14T18:16:46Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      },
      {
        "id" : "01621ac0-f245-41bd-9498-eae3620bd820",
        "parentId" : "fd26b5aa-bb88-4b1c-9d45-6cbd9dfa9e0c",
        "authorId" : "8f5453b9-7f5e-4993-93b1-33f9bc2fdc36",
        "body" : "Oh forgot to do that... but maybe i'll pass on that for now if you don't mind. I'm curious to see if the build bots pass the tests, as my GPU/CUDA setup is a bit wacky.\n",
        "createdAt" : "2016-04-12T22:34:34Z",
        "updatedAt" : "2016-04-14T18:16:46Z",
        "lastEditedBy" : "8f5453b9-7f5e-4993-93b1-33f9bc2fdc36",
        "tags" : [
        ]
      },
      {
        "id" : "ba400245-4b1b-46df-b476-38bce1c4cffd",
        "parentId" : "fd26b5aa-bb88-4b1c-9d45-6cbd9dfa9e0c",
        "authorId" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "body" : "That's fine, now that I think about it, this isn't really taking any new code paths and we should have coverage for the non-equal stride case already.\n",
        "createdAt" : "2016-04-12T22:36:26Z",
        "updatedAt" : "2016-04-14T18:16:46Z",
        "lastEditedBy" : "1836b116-1c54-4d2e-8c7f-d83e825237ef",
        "tags" : [
        ]
      }
    ],
    "commit" : "2884635faebfc60b702b16b351e58965590f0540",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +333,337 @@                       strides=[2, 2], padding=\"SAME\",\n                       expected=expected_output)\n\n  # Testing for backprops\n  def _RunAndVerifyBackpropInput(self, input_sizes, filter_sizes, output_sizes,"
  }
]