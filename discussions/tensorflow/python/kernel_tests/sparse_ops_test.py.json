[
  {
    "id" : "b50e6832-781c-4891-a541-f1a49d749e1f",
    "prId" : 3031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5502ad14-e532-4cbf-841a-c3fdf0f83ed3",
        "parentId" : null,
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "We'd definitely want tests for tensors of rank 0, 1, 2, and 3, and various value datatypes. I'd suggest just generating random tensors and write a generic test that is called or each, instead of hard-coded tests. Move to/merge with https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/kernel_tests/transpose_op_test.py.\n",
        "createdAt" : "2016-08-10T21:50:36Z",
        "updatedAt" : "2016-08-26T06:11:15Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      },
      {
        "id" : "8ed28151-5487-47ec-81c0-17ca9ae98136",
        "parentId" : "5502ad14-e532-4cbf-841a-c3fdf0f83ed3",
        "authorId" : "d09a4fdb-5c41-4fa8-b3a3-771a8d191bf1",
        "body" : "Okay sure, just wanted to have a basic test to see if I was doing it correct. Will move the tests to the `transpose_op_test.py`.\n",
        "createdAt" : "2016-08-16T18:22:55Z",
        "updatedAt" : "2016-08-26T06:11:15Z",
        "lastEditedBy" : "d09a4fdb-5c41-4fa8-b3a3-771a8d191bf1",
        "tags" : [
        ]
      },
      {
        "id" : "9c26cfc7-cbae-44c7-b37a-e6ded4ede98d",
        "parentId" : "5502ad14-e532-4cbf-841a-c3fdf0f83ed3",
        "authorId" : "d09a4fdb-5c41-4fa8-b3a3-771a8d191bf1",
        "body" : "I have changed this test now. Now that it is in `sparse_ops`,  shall I still move it to `transpose_op_test.py` now ?\n",
        "createdAt" : "2016-08-26T06:36:50Z",
        "updatedAt" : "2016-08-26T06:36:50Z",
        "lastEditedBy" : "d09a4fdb-5c41-4fa8-b3a3-771a8d191bf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "226d459c3fa53807263bf66cf848b7225184e6e2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +744,748 @@\n\nclass SparseTransposeTest(tf.test.TestCase):\n\n  def _SparseTensorPlaceholder(self):"
  },
  {
    "id" : "68e1fbac-c884-4f42-ada1-bd840b4953f2",
    "prId" : 3031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7295e601-5303-4b89-84ab-78995a916e41",
        "parentId" : null,
        "authorId" : "ee2af531-7125-47f4-8d81-dfb9211dc054",
        "body" : "Nit: you can replace this with `array_ops.sparse_placeholder()`.\n",
        "createdAt" : "2016-08-26T18:21:37Z",
        "updatedAt" : "2016-08-26T18:21:37Z",
        "lastEditedBy" : "ee2af531-7125-47f4-8d81-dfb9211dc054",
        "tags" : [
        ]
      }
    ],
    "commit" : "226d459c3fa53807263bf66cf848b7225184e6e2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +746,750 @@class SparseTransposeTest(tf.test.TestCase):\n\n  def _SparseTensorPlaceholder(self):\n    return tf.SparseTensor(\n        tf.placeholder(tf.int64),"
  },
  {
    "id" : "14b306cb-254d-4680-a56a-5c41f83b93af",
    "prId" : 3031,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a69b63a-ca61-494b-905e-40bc4836fbf6",
        "parentId" : null,
        "authorId" : "ee2af531-7125-47f4-8d81-dfb9211dc054",
        "body" : "Thanks for using my favorite seed.\n",
        "createdAt" : "2016-08-26T18:22:09Z",
        "updatedAt" : "2016-08-26T18:22:09Z",
        "lastEditedBy" : "ee2af531-7125-47f4-8d81-dfb9211dc054",
        "tags" : [
        ]
      },
      {
        "id" : "72f044da-19dc-4772-94be-dd9a91fc203d",
        "parentId" : "1a69b63a-ca61-494b-905e-40bc4836fbf6",
        "authorId" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "body" : "It's not as good as 42.\n",
        "createdAt" : "2016-08-26T18:28:02Z",
        "updatedAt" : "2016-08-26T18:28:02Z",
        "lastEditedBy" : "0ba8fb18-637a-4ab3-a7c8-cd971823fe45",
        "tags" : [
        ]
      }
    ],
    "commit" : "226d459c3fa53807263bf66cf848b7225184e6e2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +754,758 @@  def testTranspose(self):\n    with self.test_session(use_gpu=False) as sess:\n      np.random.seed(1618)\n      shapes = [np.random.randint(1, 10, size=rank) for rank in range(1, 6)]\n      for shape in shapes:"
  }
]