[
  {
    "id" : "abcaf07c-0de7-43ec-b558-0a78cc44ad17",
    "prId" : 21509,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21509#pullrequestreview-149478561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "parentId" : null,
        "authorId" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "body" : "it seems this function needs unit testing. \r\nwe're planning to expand support of feature columns. it will be quite easy to miss this function. Either we should support all feature columns in this function, or error for not supported cases. ",
        "createdAt" : "2018-08-22T20:29:51Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "tags" : [
        ]
      },
      {
        "id" : "a1862b2c-d58a-4722-a489-8a7215038150",
        "parentId" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "I think `testFeatureImportancesNamesForCategoricalColumn` verifies the method in part. Do we need to add unit tests for this private method?",
        "createdAt" : "2018-08-23T10:28:34Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      },
      {
        "id" : "df3ad80b-b050-443b-9e90-275cc41ab673",
        "parentId" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "authorId" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "body" : "let's say we added a support for multi dimensional numeric_column. and we forget to update this function. what will happen?",
        "createdAt" : "2018-08-23T21:18:27Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "tags" : [
        ]
      },
      {
        "id" : "1b312f7d-d9eb-48c7-8700-ad4e8c0bfb84",
        "parentId" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "Yes, it's a problem if we forget to update this function. \r\n\r\n1. I'm afraid that `_calculate_num_feature` will meet the same problem: if we add new subclass, and we forget to update it. Because we use external function to calculate num_feature and featuer_name, it's easy to forget it when adding new subclass. Perhaps we'd better to make them become the property of FeatureColumn base class, and force every subclass to handle the details. I think the question has beyond the scope of this PR.\r\n\r\n2. I think unit tests can only assure old behaviors unchanged. Say, we have supported numeric_column class here, and we use tests to track its behavior. If we add new class, multiple dimensional numeric_column, but we forget to add the corresponding tests. I'm afraid that unit test can do nothing for this case.",
        "createdAt" : "2018-08-24T06:26:12Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      },
      {
        "id" : "d7fd23c3-39c2-4a20-8bb4-90f60b924804",
        "parentId" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "authorId" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "body" : "Hi Yan,\r\nProposal is erroring out if an unexpected feature column is given. And have unit tests related to do that. So that whenever this method is not updated, we will have a clear error message. \r\n\r\nThe other functions you mentioned will cause learning will behave unexpected. So it's likely that we'll caught error in them since there will be unit tests for new columns. But feature importance is not part of learning tests. that's why it's likely to miss. If you assume that it may not be one of you or I or Natalia who will add new features, these kind of errors help new developers. \r\n\r\nplease let me know does it make sense or not\r\n",
        "createdAt" : "2018-08-24T16:20:51Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "f5982009-3c94-43a6-9cb6-ff5840d81d70",
        "tags" : [
        ]
      },
      {
        "id" : "34bea886-6667-4ee9-9d5a-8391a82f618c",
        "parentId" : "77304312-e713-45c3-a75a-6fa7fb3cd50e",
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "Oh, my mistake. You're right! The function doesn't support all feature columns, say, multiple dimension numeric_column. \r\n\r\n> Either we should support all feature columns in this function, or error for not supported cases.\r\n\r\nI'll add the check like `_get_transformed_features`: we only support _BucketizedColumn and _IndicatorColumn by far.",
        "createdAt" : "2018-08-24T22:33:58Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "046c74c8e7c68aaa726977dd6e8a2523f854f9cc",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +198,202 @@\n\ndef _generate_feature_name_mapping(sorted_feature_columns):\n  \"\"\"Return a list of feature name for feature ids.\n"
  },
  {
    "id" : "249194ba-90be-4b3f-9b13-0a91521d171d",
    "prId" : 21509,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/21509#pullrequestreview-156031162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc46f0de-74d3-4703-870f-4ccdaffdff21",
        "parentId" : null,
        "authorId" : "9a148c2a-91ac-4721-9fab-01f08ed322f8",
        "body" : "or when attempting to normalize and feature importances have negative values",
        "createdAt" : "2018-09-17T17:18:47Z",
        "updatedAt" : "2018-09-19T22:45:29Z",
        "lastEditedBy" : "9a148c2a-91ac-4721-9fab-01f08ed322f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "046c74c8e7c68aaa726977dd6e8a2523f854f9cc",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +1168,1172 @@\n    Raises:\n      ValueError: When attempting to normalize on an empty ensemble\n        or an ensemble of trees which have no splits. Or when attempting\n        to normalize and feature importances have negative values."
  }
]