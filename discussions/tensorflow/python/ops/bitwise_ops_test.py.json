[
  {
    "id" : "e5c64f17-1054-4c4b-9880-de9021cf36eb",
    "prId" : 14678,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14678#pullrequestreview-85618786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84734f9f-421e-4447-9735-b42fea6fea6f",
        "parentId" : null,
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "I think `[3, 3]` might be better than `and_result.shape` ",
        "createdAt" : "2017-11-18T06:51:11Z",
        "updatedAt" : "2017-12-27T08:53:09Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      },
      {
        "id" : "99535932-4def-4800-8ec3-0e453196d8f5",
        "parentId" : "84734f9f-421e-4447-9735-b42fea6fea6f",
        "authorId" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "body" : "@facaiy `and_result.shape` is to make sure the shape inference beforethe  `session.run` is the same as the final shape after evaluated. This is to maintain consistency before and after eval.",
        "createdAt" : "2017-12-14T01:01:38Z",
        "updatedAt" : "2017-12-27T08:53:09Z",
        "lastEditedBy" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "tags" : [
        ]
      },
      {
        "id" : "b3bab3e5-f247-4e76-82a1-98b809cac2df",
        "parentId" : "84734f9f-421e-4447-9735-b42fea6fea6f",
        "authorId" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "body" : "I shouldn't nitpick, however `and_result.shape` might not be the result we expected, say, there exits a bug in the route.  Anyway, I think both are accepted.",
        "createdAt" : "2017-12-27T05:50:04Z",
        "updatedAt" : "2017-12-27T08:53:09Z",
        "lastEditedBy" : "576d94d0-8049-4273-a3d0-f373713532c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4f62447ad87a8a5f7c834eaf6b11fd78f70af5d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +155,159 @@\n        # Compare shape inference with result\n        self.assertAllEqual(and_tensor.get_shape().as_list(), and_result.shape)\n        self.assertAllEqual(and_tensor.get_shape().as_list(), [3, 3])\n        self.assertAllEqual(or_tensor.get_shape().as_list(), or_result.shape)"
  }
]