[
  {
    "id" : "fd436be3-9e10-4269-b5c9-c12b58e8b841",
    "prId" : 41775,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41775#pullrequestreview-468557666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1749bd2b-c811-45fd-9a62-7b53935fddf6",
        "parentId" : null,
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "Can you also add the output please? This would make this a real test. Same on the sequence below.\r\n\r\nAlso, let's make `y` a `tf.constant` tensor, fixing its type to (let's say) `tf.float32`",
        "createdAt" : "2020-08-13T16:03:31Z",
        "updatedAt" : "2020-08-18T19:05:36Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      },
      {
        "id" : "e29301df-02e8-4060-94cc-8238a2f42d70",
        "parentId" : "1749bd2b-c811-45fd-9a62-7b53935fddf6",
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "We now have 2 examples saying the same thing. Why not just one example?\r\n\r\n```python\r\n\r\nThat is, instead of this:\r\n\r\n>>> y = tf.constant(01, dtype=tf.float32)\r\n>>> tf.where(y > 0, tf.sqrt(y), y)\r\nINSERT OUTPUT HERE\r\n\r\nUse this:\r\n\r\n>>> tf.where(y > 0, tf.sqrt...\r\n<tf.Tensor...\r\n```",
        "createdAt" : "2020-08-17T15:17:56Z",
        "updatedAt" : "2020-08-18T19:05:36Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ec26f69d2a5ceed59d5a06f40543154b6aded4b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4497,4501 @@\n  >>> y = tf.constant(-1, dtype=tf.float32)\n  >>> tf.where(y > 0, tf.sqrt(y), y)\n  <tf.Tensor: shape=(), dtype=float32, numpy=-1.0>\n"
  },
  {
    "id" : "2feb8c45-9da2-44ba-b271-f98da90584ee",
    "prId" : 32747,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/32747#pullrequestreview-294500001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19409e34-2f39-4b4d-8f9c-1a184f4f12e0",
        "parentId" : null,
        "authorId" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "body" : "I think you need a print(output) here right?",
        "createdAt" : "2019-09-26T23:44:11Z",
        "updatedAt" : "2019-09-30T21:08:29Z",
        "lastEditedBy" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "tags" : [
        ]
      },
      {
        "id" : "03898692-21d2-476d-aa03-9372a9a9d30e",
        "parentId" : "19409e34-2f39-4b4d-8f9c-1a184f4f12e0",
        "authorId" : "7691c4c9-f973-4d43-87d2-cd7a6d360077",
        "body" : "Yes, thanks @yashk2810. Updated. ",
        "createdAt" : "2019-09-27T18:41:16Z",
        "updatedAt" : "2019-09-30T21:08:29Z",
        "lastEditedBy" : "7691c4c9-f973-4d43-87d2-cd7a6d360077",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ac50c83cafe5a1682938ccf9f9538d48488304",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3946,3950 @@  >>> input = [[1, 2, 3, 4, 5, 0, 0, 0], [1, 2, 0, 0, 0, 0, 0, 0],\n  ...          [1, 2, 3, 4, 0, 0, 0, 0], [1, 2, 3, 4, 5, 6, 7, 8]]\n  >>> output = reverse_sequence(input, seq_lens, seq_dim=1, batch_dim=0)\n  >>> print(output)\n  <tf.Tensor: id=5, shape=(4, 8), dtype=int32, numpy="
  },
  {
    "id" : "aa11530d-e70c-43fc-961d-29a98cbaf772",
    "prId" : 32747,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/32747#pullrequestreview-295271771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f24643e-890e-4f99-a131-21aa5722db24",
        "parentId" : null,
        "authorId" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "body" : "Can you please test this locally. I added the link to the guide in another comment before.",
        "createdAt" : "2019-09-26T23:45:34Z",
        "updatedAt" : "2019-09-30T21:08:29Z",
        "lastEditedBy" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "tags" : [
        ]
      },
      {
        "id" : "a552e977-7268-4b92-8c3a-f633970defcd",
        "parentId" : "2f24643e-890e-4f99-a131-21aa5722db24",
        "authorId" : "7691c4c9-f973-4d43-87d2-cd7a6d360077",
        "body" : "Yes, I've tested it locally. \r\n> There is way to locally test the changes now: https://github.com/tensorflow/docs/blob/master/site/en/community/contribute/docs_ref.md#test-on-your-local-machine\r\n\r\nBut, when testing it on master (not my branch), it shows error message, `ValueError: line 5010 of the docstring for tensorflow.python.ops.array_ops has inconsistent leading whitespace: '  \"\"\"'`; I am trying to fix, but can't make it yet (will keep doing...). May I have your suggestions? ",
        "createdAt" : "2019-09-27T18:52:11Z",
        "updatedAt" : "2019-09-30T21:08:29Z",
        "lastEditedBy" : "7691c4c9-f973-4d43-87d2-cd7a6d360077",
        "tags" : [
        ]
      },
      {
        "id" : "b60e5737-a61c-464b-a9c7-1749163b4de0",
        "parentId" : "2f24643e-890e-4f99-a131-21aa5722db24",
        "authorId" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "body" : "I'll fix that issue, but this looks fine to me.",
        "createdAt" : "2019-09-30T21:50:43Z",
        "updatedAt" : "2019-09-30T21:50:43Z",
        "lastEditedBy" : "af7f6620-5090-4aa8-89df-341e746603ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ac50c83cafe5a1682938ccf9f9538d48488304",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3948,3952 @@  >>> output = reverse_sequence(input, seq_lens, seq_dim=1, batch_dim=0)\n  >>> print(output)\n  <tf.Tensor: id=5, shape=(4, 8), dtype=int32, numpy=\n  array([[0, 0, 5, 4, 3, 2, 1, 0],\n         [2, 1, 0, 0, 0, 0, 0, 0],"
  },
  {
    "id" : "1f3168ac-e8f8-4cbb-9ee9-38c67d64c97f",
    "prId" : 31700,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/31700#pullrequestreview-337770376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8bb08dc-dc09-4764-bc8a-53f4cf681466",
        "parentId" : null,
        "authorId" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "body" : "I think as-is this will hide the tf.zeros docstring/args (and use the decorator's docstring instead). Can you use tf_decorator.make_decorator to make sure it gets copied over? https://github.com/tensorflow/tensorflow/blob/94adea511f3f8fcc64ab89569fce0ddbc0c1c82c/tensorflow/python/util/tf_decorator.py#L67\r\n\r\nExample usage: https://github.com/tensorflow/tensorflow/blob/94adea511f3f8fcc64ab89569fce0ddbc0c1c82c/tensorflow/python/eager/function.py#L3184",
        "createdAt" : "2020-01-02T17:36:59Z",
        "updatedAt" : "2020-02-07T23:10:25Z",
        "lastEditedBy" : "e08938af-f8a8-460f-881b-a60c1ee311f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "24418e0d53f499611f2f7e1fa69ee79235755e03",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +2672,2676 @@\n@tf_export(\"zeros\")\n@_tag_zeros_tensor\ndef zeros(shape, dtype=dtypes.float32, name=None):\n  \"\"\"Creates a tensor with all elements set to zero."
  },
  {
    "id" : "392ea1ea-48fc-44fb-ad64-92c3c2e310ad",
    "prId" : 15982,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/15982#pullrequestreview-233700254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd1ae674-5443-42b9-9250-a1c1ac987cdb",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "Is there ever a set of input shapes for which where and where_v2 both give answers but the answers are different?\r\n\r\nI assume not, unless you're doing broadcast wrong.\r\n\r\nIn this case instead of a new API function you should go through forward compatibility, using the [compat.forward_compatible](https://github.com/tensorflow/tensorflow/blob/bd92ce08f8d5ae2dfa5cf47f39d86710215b7185/tensorflow/python/compat/compat.py#L34) function set to about a month in the future from now.\r\n\r\nSearch the tensorflow/python/ops directory for other uses of compat to see how to do this.",
        "createdAt" : "2019-03-29T22:11:37Z",
        "updatedAt" : "2019-05-03T02:13:09Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "6295ffe4-378c-4c1c-be4d-92463f2cc689",
        "parentId" : "cd1ae674-5443-42b9-9250-a1c1ac987cdb",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "Ah I see.\r\n\r\nThen you also need to add a rule to [tf_upgrade_v2](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/compatibility/tf_upgrade_v2.py) to convert tf.where_v2 to tf.compat.v2.where as otherwise there can be a confusion when someone runs the upgrade script and tries to use their code in both v1 and v2.",
        "createdAt" : "2019-03-29T23:01:48Z",
        "updatedAt" : "2019-05-03T02:13:09Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "60426630-42b2-4774-a1b4-3e8a3a43ba7a",
        "parentId" : "cd1ae674-5443-42b9-9250-a1c1ac987cdb",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "Since I wrote this message the tf v2 API has been frozen for the 1.14 release. This means we'll need to export this symbol as where_v2 both in tf1 and in tf2 :-/",
        "createdAt" : "2019-05-03T22:54:57Z",
        "updatedAt" : "2019-05-03T22:54:58Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      }
    ],
    "commit" : "33cd7b88acefb737e45634b38c26c55783deafdf",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3239,3243 @@\n@tf_export(\"where\", v1=[\"where_v2\"])\ndef where_v2(condition, x=None, y=None, name=None):\n  \"\"\"Return the elements, either from `x` or `y`, depending on the `condition`.\n  If both `x` and `y` are None, then this operation returns the coordinates of"
  },
  {
    "id" : "d99a145f-1e5f-46ff-8ba6-7feb6923173b",
    "prId" : 2541,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "070341f5-23ab-403b-9363-9db9fb3852f3",
        "parentId" : null,
        "authorId" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "body" : "What do those mean?  We should probably document that above.\n",
        "createdAt" : "2016-05-30T22:32:32Z",
        "updatedAt" : "2016-06-06T08:44:14Z",
        "lastEditedBy" : "f7beb1db-3bff-4489-9df0-c170cb1132d1",
        "tags" : [
        ]
      },
      {
        "id" : "591d05bc-3144-404d-9c44-7bef65f75a3a",
        "parentId" : "070341f5-23ab-403b-9363-9db9fb3852f3",
        "authorId" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "body" : "I ported these from the numpy function.\nThe `'xy'` stands for cartesian indexing, where the first two indices are swapped.\nI'll add this to the docstring.\n",
        "createdAt" : "2016-05-30T22:42:27Z",
        "updatedAt" : "2016-06-06T08:44:14Z",
        "lastEditedBy" : "9c1a0450-2056-462a-89a5-c29494e380dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9f997e55500e6b20d5481e50a4fe8e68100e32e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1033,1037 @@\n  if indexing not in (\"xy\", \"ij\"):\n    raise ValueError(\"indexing parameter must be either 'xy' or 'ij'\")\n\n  with ops.op_scope(args, name, \"meshgrid\") as name:"
  },
  {
    "id" : "d1fc4f99-1962-4615-831b-a42c9e46bb5f",
    "prId" : 1869,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f135aee-0c18-4e18-bb09-11bc2a3c7fec",
        "parentId" : null,
        "authorId" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "body" : "on_value and off_value and dtype should be None by default.\n\nif on_value and off_value are provided; then use their dtype.  otherwise if dtype is provided, use on_value 1 and off_value 0 for that dtype.  if dtype is tf.string, raise an error because it's not clear what the on_value should be.  if all 3 are provided, make sure the dtype of on_value and off_value match dtype.\n\nupdate the Args: section below to reflect the changes.\n\nupdate the Args: section below to reflect this.\n",
        "createdAt" : "2016-04-22T18:37:15Z",
        "updatedAt" : "2016-04-25T21:47:09Z",
        "lastEditedBy" : "47966c70-ca9e-4f42-9f8b-165f9cd3ebaa",
        "tags" : [
        ]
      }
    ],
    "commit" : "19bca790350ac7f0d1b1d29f5d56581b883e8c3a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1759,1763 @@\ndef one_hot(indices, depth, on_value=1, off_value=0,\n            axis=None, dtype=dtypes.float32, name=None):\n  \"\"\"Returns a one-hot tensor.\n"
  }
]