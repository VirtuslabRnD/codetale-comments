[
  {
    "id" : "fa5c37c4-a6b6-4d3c-bd4c-ff3ef8027b78",
    "prId" : 42031,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42031#pullrequestreview-461242628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fceec29-d2de-4a3a-abd7-1d7f0baffb89",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "You should skip this test for now until we upgrade to cudnn 8. Alternatively, use tf.sysconfig.get_build_info to conditionally skip if the cudnn version is below 8.",
        "createdAt" : "2020-08-04T23:28:24Z",
        "updatedAt" : "2020-08-10T07:36:11Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      }
    ],
    "commit" : "c25b9687614443c27a6425a25276133bbf4ac06d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +577,581 @@  @test_util.run_deprecated_v1\n  @test_util.disable_xla('This test does not pass with XLA')\n  def test_depthwise_conv2d(self, mode):\n    \"\"\"Test grad ops with depthwise convolution2d graph.\"\"\"\n    self._maybe_skip(mode)"
  },
  {
    "id" : "9381207b-db65-4049-8905-1608d2b7365f",
    "prId" : 36838,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36838#pullrequestreview-382348872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57b48ea2-a142-48a3-9d68-f2be4052f9fe",
        "parentId" : null,
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "Can we just bump it up for all platforms?",
        "createdAt" : "2020-03-26T19:33:33Z",
        "updatedAt" : "2020-03-26T19:33:33Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      }
    ],
    "commit" : "d84be19aa4b476babf3396a37c1c743293f510d4",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +414,418 @@      # The default tolerance (1e-3) results in a tiny fraction (<1%) of\n      # miscompares on ROCm platform, and hence the tolerance bump\n      tol = 2e-3 if test.is_built_with_rocm else 1e-3\n      self.assertAllClose(output_val_ref, output_val, atol=tol, rtol=tol)\n"
  },
  {
    "id" : "f72f8169-7cd7-4114-a913-912fd92a6b0a",
    "prId" : 32850,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/32850#pullrequestreview-296607019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8bd31d1-805f-4cf4-9cd1-a9439004d315",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "This test will fail in the GitHub tests, as they don't yet run with cuDNN 7.6.2.\r\n\r\nYou can delete them or disable them with [`@unittest.skip`](https://docs.python.org/2/library/unittest.html#skipping-tests-and-expected-failures). Or you can wait until we start running with cuDNN >= 7.6.2.",
        "createdAt" : "2019-10-03T01:47:36Z",
        "updatedAt" : "2019-10-14T23:49:52Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      }
    ],
    "commit" : "f314fe80e755f709011d3d6ae66f415e61abd6e3",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +417,421 @@  @test_util.run_deprecated_v1\n  @test_util.disable_xla('This test does not pass with XLA')\n  def test_conv3d_bn(self):\n    \"\"\"Test graph with convolution followed by batch norm.\"\"\"\n    if test.is_gpu_available(cuda_only=True):"
  },
  {
    "id" : "b2bfc7b4-0a6d-42ff-9970-3f2fc63e9ceb",
    "prId" : 26342,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/26342#pullrequestreview-218673991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdf91bff-8db7-4453-8a08-9346b05d4a3f",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "Add a TODO to add eager tests with a tf.function.\r\n\r\nOne potential issue is that with V2 tf.cond (and i think tf.while_loop), they use tf.functions for the predicate and bodies instead of Switch and Merge ops. I think in eager, V2 cond is done by default. This will force the boundaries of tf.conds and tf.while_loops to be in float32.",
        "createdAt" : "2019-03-16T19:15:01Z",
        "updatedAt" : "2019-04-09T01:59:39Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      },
      {
        "id" : "a0baecde-45d0-420c-bf54-059e42f85548",
        "parentId" : "cdf91bff-8db7-4453-8a08-9346b05d4a3f",
        "authorId" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "body" : "I've added a TODO.",
        "createdAt" : "2019-03-26T03:00:38Z",
        "updatedAt" : "2019-04-09T01:59:39Z",
        "lastEditedBy" : "fe150b7b-80e3-40ce-88bd-077c51873903",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdb7db55568626e215700bb365065d53d1d7fff8",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +272,276 @@      del os.environ[self.IGNORE_PERF_VAR]\n    super(AutoMixedPrecisionTest, self).tearDown()\n\n  def _assert_output_fp16(self, node_map, node_name, output_port=0):\n    self.assertEqual(node_map[node_name].output_info[output_port].dtype,"
  },
  {
    "id" : "6bb7683a-74b3-4f47-8a65-53b44cb26d98",
    "prId" : 26342,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/26342#pullrequestreview-220375429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4764eee-6d54-4475-8a5b-3871708ef0a4",
        "parentId" : null,
        "authorId" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "body" : "Is the gray node made fp16 because it is \"between\" two whites nodes, where both white nodes are the same due to the loop? That sounds sensible, I am just checking.",
        "createdAt" : "2019-03-28T03:34:53Z",
        "updatedAt" : "2019-04-09T01:59:39Z",
        "lastEditedBy" : "05c2b6c1-8a55-4dc9-ae76-02172416ea90",
        "tags" : [
        ]
      },
      {
        "id" : "be33e5da-4a97-4bed-a5f4-d0639cc4dc71",
        "parentId" : "a4764eee-6d54-4475-8a5b-3871708ef0a4",
        "authorId" : "53c3ad32-5f8d-4187-bb81-3faeb47b61f3",
        "body" : "That's correct; the black does not propagate into the loop because the clear nodes after the blacklisted node are not upstream of any blacklisted/greylisted nodes.  Then the traversal tags the grey node (and clear nodes) within the loop as both upstream and downstream of a whitelisted node (in this case the only one).",
        "createdAt" : "2019-03-29T05:00:09Z",
        "updatedAt" : "2019-04-09T01:59:39Z",
        "lastEditedBy" : "53c3ad32-5f8d-4187-bb81-3faeb47b61f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdb7db55568626e215700bb365065d53d1d7fff8",
    "line" : 518,
    "diffHunk" : "@@ -1,1 +516,520 @@\n  def test_propagation_through_simple_loop_6(self):\n    self._run_simple_loop_test('b', 'CWCG', 'C')\n\n  def test_propagation_through_simple_loop_7(self):"
  }
]