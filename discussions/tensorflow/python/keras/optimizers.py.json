[
  {
    "id" : "75703bb3-5e1c-48e6-9274-b375457f1b61",
    "prId" : 33097,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/33097#pullrequestreview-441120421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68fcf5ae-f5de-4cd1-b442-76d96b955861",
        "parentId" : null,
        "authorId" : "c7f24ec4-1ffb-4938-8b78-516f3c919384",
        "body" : "@OverLordGoldDragon \r\nThis is very interesting. Thank you for the fix. \r\nThough I cannot yet see how these two lines lead to different outcomes. \r\nSo an iterable may contain a `None` while none of its members are `None`? \r\nCan you shed a light or point me in the right direction to understand what's going on or to create a simple example? \r\nThanks in advance. \r\n",
        "createdAt" : "2020-07-01T16:53:48Z",
        "updatedAt" : "2020-07-01T17:04:01Z",
        "lastEditedBy" : "c7f24ec4-1ffb-4938-8b78-516f3c919384",
        "tags" : [
        ]
      },
      {
        "id" : "54fc2358-c6f2-406f-bbeb-733efa2bf565",
        "parentId" : "68fcf5ae-f5de-4cd1-b442-76d96b955861",
        "authorId" : "c5fdc8dc-5642-4b49-9fda-8d8e68e1766f",
        "body" : "@engheta `None in grads` is same as `any([g == None for g in grads])`; problem is, `g` may be a tf.Tensor/tf.Variable which doesn't have [`.__eq__`](https://docs.python.org/3/reference/datamodel.html#object.__eq__) defined, so `is None` must be used instead.",
        "createdAt" : "2020-07-01T17:02:42Z",
        "updatedAt" : "2020-07-01T17:02:42Z",
        "lastEditedBy" : "c5fdc8dc-5642-4b49-9fda-8d8e68e1766f",
        "tags" : [
        ]
      },
      {
        "id" : "b9983e83-c804-4d24-b9c4-5ed7b62b0cf4",
        "parentId" : "68fcf5ae-f5de-4cd1-b442-76d96b955861",
        "authorId" : "c5fdc8dc-5642-4b49-9fda-8d8e68e1766f",
        "body" : "@engheta [Updated](https://stackoverflow.com/a/58279661/10133797); to note, I'm not certain whether some TF objects actually don't have `.__eq__` defined at all, or are simply redefined. If former, `==` won't work at all, because it *is* `.__eq__` (Python exception will be raised, or [unexpected behavior](https://stackoverflow.com/q/3588776/10133797) may result).",
        "createdAt" : "2020-07-01T18:24:11Z",
        "updatedAt" : "2020-07-01T18:25:09Z",
        "lastEditedBy" : "c5fdc8dc-5642-4b49-9fda-8d8e68e1766f",
        "tags" : [
        ]
      },
      {
        "id" : "ef40e79f-3972-4983-a59d-3be74172cee2",
        "parentId" : "68fcf5ae-f5de-4cd1-b442-76d96b955861",
        "authorId" : "c7f24ec4-1ffb-4938-8b78-516f3c919384",
        "body" : "Yes, makes sense. After looking more closely, I realized that the error is caused by TF's attempt to convert the `None` to a tensor for the comparison. \r\n\r\nI like (and upvoted) the Stack Overflow entry and your simple and effective fix here. \r\n\r\nThe banes and pleasures of using open-source software...",
        "createdAt" : "2020-07-01T18:54:32Z",
        "updatedAt" : "2020-07-01T18:54:32Z",
        "lastEditedBy" : "c7f24ec4-1ffb-4938-8b78-516f3c919384",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7f7f8b572bb83a6cfd1ffaf6f4a42a3c8b0416",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +90,94 @@    \"\"\"\n    grads = K.gradients(loss, params)\n    if any([g is None for g in grads]):\n      raise ValueError('An operation has `None` for gradient. '\n                       'Please make sure that all of your ops have a '"
  }
]