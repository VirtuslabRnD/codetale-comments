[
  {
    "id" : "a747c4f8-3162-4d61-bbc8-58646fd03a38",
    "prId" : 41341,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41341#pullrequestreview-549659079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bcdae06-b449-46e5-8dd0-41e2fa5557a4",
        "parentId" : null,
        "authorId" : "d9857ae4-1f12-46ba-8f0b-0bc35ebb4bfa",
        "body" : "Just curious about the issue here. The deepcopy will create all new instances for any nested param in the self.sk_params, whereas the self.sk_params.copy() could return same instance for nested param here. Isn't the deepcopy the intended behavior (isolated the original instance and copied version)? ",
        "createdAt" : "2020-12-09T18:42:08Z",
        "updatedAt" : "2020-12-09T18:42:14Z",
        "lastEditedBy" : "d9857ae4-1f12-46ba-8f0b-0bc35ebb4bfa",
        "tags" : [
        ]
      },
      {
        "id" : "a539a427-0804-46d2-9fc6-39d3447e8cfd",
        "parentId" : "9bcdae06-b449-46e5-8dd0-41e2fa5557a4",
        "authorId" : "b18f62f5-6493-4bd3-b1f0-a4b723fa4528",
        "body" : "The original issue was filed in the keras repo, so it got lost in the switch of development over to the tensorflow repo.\r\n\r\nThe summary is:  we actually want a reference here, not a copy.  So `deep copy` is wrong.\r\n\r\nMore detail here: https://github.com/keras-team/keras/issues/13586",
        "createdAt" : "2020-12-09T18:49:48Z",
        "updatedAt" : "2020-12-09T18:50:59Z",
        "lastEditedBy" : "b18f62f5-6493-4bd3-b1f0-a4b723fa4528",
        "tags" : [
        ]
      },
      {
        "id" : "0b730861-c79b-4e53-8b3d-7569e804cf99",
        "parentId" : "9bcdae06-b449-46e5-8dd0-41e2fa5557a4",
        "authorId" : "d9857ae4-1f12-46ba-8f0b-0bc35ebb4bfa",
        "body" : "I see. It seems that more like a sklearn problem since it uses \"is\" to compare, rather than \"==\". I guess this PR is just to walkaround that issue (otherwise the deepcopy should be the intended behavior). Could u please add a comment above this line, and put the reference issue here?",
        "createdAt" : "2020-12-10T21:56:17Z",
        "updatedAt" : "2020-12-10T21:56:17Z",
        "lastEditedBy" : "d9857ae4-1f12-46ba-8f0b-0bc35ebb4bfa",
        "tags" : [
        ]
      },
      {
        "id" : "48bad41f-76bb-4f05-ac8f-ac9062b63ed2",
        "parentId" : "9bcdae06-b449-46e5-8dd0-41e2fa5557a4",
        "authorId" : "e3314a92-20da-4d90-ac19-60f8d22e3fec",
        "body" : "The usage of ``is`` instead of ``==`` is intentional, we want to guarantee that parameters are not modified in ``__init__``. Constructor parameters can be arbitrarily complex and so checking for equality might be not feasible or appropriate.",
        "createdAt" : "2020-12-10T22:33:47Z",
        "updatedAt" : "2020-12-10T22:35:51Z",
        "lastEditedBy" : "e3314a92-20da-4d90-ac19-60f8d22e3fec",
        "tags" : [
        ]
      }
    ],
    "commit" : "61b04864d3340434f52e6991939f4574ba3a6a36",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +115,119 @@        Dictionary of parameter names mapped to their values.\n    \"\"\"\n    res = self.sk_params.copy()\n    res.update({'build_fn': self.build_fn})\n    return res"
  }
]