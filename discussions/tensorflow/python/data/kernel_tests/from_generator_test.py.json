[
  {
    "id" : "51985fb3-e636-49d5-917e-c98ec76d9a35",
    "prId" : 41981,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41981#pullrequestreview-461714095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce70894b-1693-4a2f-8dbf-c58fb6cd5494",
        "parentId" : null,
        "authorId" : "25d9ca1a-eec3-4905-a140-d1d6a3a2fde2",
        "body" : "Did the error message change?  If so, what did it change to.  If not, why change this test to not check the error message?  (Similar question for errors below)",
        "createdAt" : "2020-08-03T18:30:06Z",
        "updatedAt" : "2020-08-19T17:51:28Z",
        "lastEditedBy" : "25d9ca1a-eec3-4905-a140-d1d6a3a2fde2",
        "tags" : [
        ]
      },
      {
        "id" : "08c618b1-adb2-4eaf-8d1e-9bf0c400ae63",
        "parentId" : "ce70894b-1693-4a2f-8dbf-c58fb6cd5494",
        "authorId" : "988dcfa4-5015-495b-bf9d-ba30b9f4365f",
        "body" : "This was [changed by request](https://github.com/tensorflow/tensorflow/pull/37400#issuecomment-598952789) of other reviewer. It looks less informative to me too, yet I don't think we should be changing it back. It doesn't look to me that parsing the error string is the right way to communicate the exact error here. It increases the fragility of tests (with immediate example: your proposition below to slightly change the format of exception string. Could break tests if they relied on parsing the error string). The better way to communicate error here IMHO would be to derive the custom exception class from InvalidArgumentError with something like `expected_signature` and `argument_signature` that hold the incompatible signatures in question (or something like that). Could be done as a standalone refactoring PR (could be also useful throughout the code in situations like this).",
        "createdAt" : "2020-08-05T14:22:24Z",
        "updatedAt" : "2020-08-19T17:51:28Z",
        "lastEditedBy" : "988dcfa4-5015-495b-bf9d-ba30b9f4365f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4cf37a02a0fb23f52920acac5ba55186d19cb1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +265,269 @@    self.assertAllEqual([1, 2, 3], self.evaluate(get_next()))\n    self.assertAllEqual([4, 5, 6], self.evaluate(get_next()))\n    with self.assertRaises(errors.InvalidArgumentError):\n      self.evaluate(get_next())\n    self.assertAllEqual([7, 8, 9], self.evaluate(get_next()))"
  }
]