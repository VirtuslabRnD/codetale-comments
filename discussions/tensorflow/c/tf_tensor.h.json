[
  {
    "id" : "42627128-9c0f-4c88-8607-e469b98aec2a",
    "prId" : 41713,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41713#pullrequestreview-461216853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caee3466-071b-4a6e-adf0-0ad173a6cf98",
        "parentId" : null,
        "authorId" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "body" : "Out of curiosity, what is the design choice behind exposing the ABI of allocator attributes, rather than having an opaque pointer and setters (https://github.com/tensorflow/tensorflow/blob/7a4b89dbaf78503882dfeefa634c5bbff303d563/tensorflow/c/eager/c_api.h#L79-L85)? \r\n\r\nIt looks like the original structure has an optimized bitmasking representation (https://github.com/tensorflow/tensorflow/blob/7a4b89dbaf78503882dfeefa634c5bbff303d563/tensorflow/core/framework/allocator.h#L386-L393); do we have any thoughts on re-using this instead of forking the C APi representation?",
        "createdAt" : "2020-08-03T19:02:41Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "tags" : [
        ]
      },
      {
        "id" : "59d97022-f332-41bb-8188-cfe19f00a62b",
        "parentId" : "caee3466-071b-4a6e-adf0-0ad173a6cf98",
        "authorId" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "body" : "There is a good way to check if a struct has certain functionality or not (using `OFFSET`). \r\nSuppose instead we have a subset of functions and an opaque pointer. How can user check if a certain function is available in TF API? I guess we could keep incrementing a version. May be +@yisitu knows if there is a trade off compared to using struct size. One issue I can think of is that version needs to be updated manually but struct size is calculated with a macro.\r\n\r\n@bmzhao do you think an opaque pointer and a set of functions are better here and if so why?\r\n\r\nJust passing a bitmask seems not extendable. What if we want to add another parameter which is not part of the bitmask? However, we could make `value` a member of the struct instead of `on_host`.\r\n\r\n```cpp\r\ntypedef struct TF_AllocatorAttributes {\r\n  size_t struct_size; \r\n  // NOTE: The upper 8 bits of the value are reserved for \r\n // device-specific uses.  Implementors of a device can interpret these \r\n // upper 8 bits in device-specific ways, and ops implemented for those \r\n // devices are responsible for setting those 8 bits appropriately.\r\n  uint32_t value;\r\n} TF_AllocatorAttributes;\r\n\r\n",
        "createdAt" : "2020-08-04T07:37:03Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "tags" : [
        ]
      },
      {
        "id" : "82495fbb-8815-4e32-8439-e9265aea4b2d",
        "parentId" : "caee3466-071b-4a6e-adf0-0ad173a6cf98",
        "authorId" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "body" : "We discussed offline; the advantage of the struct size approach is forward compatibility (i.e. compiling against a newer libtensorflow.so's headers while linking against an older version), and the advantage of the opaque pointer approach is it allows us to keep a single representation for the AllocatorAttributes struct. \r\n\r\nEither approach SGTM :)",
        "createdAt" : "2020-08-04T18:22:08Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "tags" : [
        ]
      },
      {
        "id" : "f1b5d30a-8f7c-493b-926c-6f4491b68275",
        "parentId" : "caee3466-071b-4a6e-adf0-0ad173a6cf98",
        "authorId" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "body" : "Hi! Good question, I've listed the design considerations below. The thing to note is that these are trade-offs and not one approach is always better than the other.\r\n* it is be cheaper to extend structure parameters than it would be to add another API or entry point. \r\n* legacy setter/getters have to remain behind and become maintenance and documentation overhead.\r\n* given a dynamic library, to access the getters/setters (i.e. GetProcAddress/dlsym) you'll need a matching header file that exposes the exact function declarations.  With struct params you can use a non-matching header and support best effort functionality by inspection with offsetof.\r\n\r\nRegarding bit masks, they are generally reserved to low-level close to hardware data structures. I suppose you can use enum flags as long as there are 62 values or less (reserve 0 value for unknown and max value for count).\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-08-04T18:24:33Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "tags" : [
        ]
      },
      {
        "id" : "4e57974f-4d6e-4a97-a3f3-a8b708b5e053",
        "parentId" : "caee3466-071b-4a6e-adf0-0ad173a6cf98",
        "authorId" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "body" : "Thank you for the insights @yisitu ! After discussing with Brian, we decided to make it opaque pointer to match general structure of existing API.",
        "createdAt" : "2020-08-04T22:21:35Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e4df924652a151677b3e0b95609db27cb04631",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +48,52 @@\n// Allocator Attributes used for tensor allocation. \ntypedef struct TF_AllocatorAttributes { \n  size_t struct_size; \n  // Set boolean to 1 for CPU allocation, else 0. "
  },
  {
    "id" : "61cd0bf8-6826-4d53-881c-2107731fc5c4",
    "prId" : 41713,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41713#pullrequestreview-464409021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af38e22-540d-4ffc-a477-f2430ed80aed",
        "parentId" : null,
        "authorId" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "body" : "Also, would it make sense to have a separate header for this type?",
        "createdAt" : "2020-08-03T19:14:24Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "e05a34a4-5059-4545-84f5-08c8527a6ca1",
        "tags" : [
        ]
      },
      {
        "id" : "4459a6fe-31d1-43a5-8fda-e2a07df64686",
        "parentId" : "5af38e22-540d-4ffc-a477-f2430ed80aed",
        "authorId" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "body" : "We can make it a separate header. @alextp, Alex, as API owner, do you think it is better to have a different header for TF_AllocatorAttributes?",
        "createdAt" : "2020-08-03T19:57:03Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "tags" : [
        ]
      },
      {
        "id" : "6b18b3a1-312b-4518-95fa-9df1e631def4",
        "parentId" : "5af38e22-540d-4ffc-a477-f2430ed80aed",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "I don't think we need a new header now.",
        "createdAt" : "2020-08-10T16:56:59Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e4df924652a151677b3e0b95609db27cb04631",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +52,56 @@  // Set boolean to 1 for CPU allocation, else 0. \n  TF_Bool on_host; \n} TF_AllocatorAttributes; \n\n"
  },
  {
    "id" : "430a8849-ba1b-4d3d-aa2c-24834168340c",
    "prId" : 41713,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41713#pullrequestreview-464703926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06eb3845-39c3-4dff-a107-1222e7c9d03a",
        "parentId" : null,
        "authorId" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "body" : "`./tensorflow/c/tf_tensor.h:22:10: error: module //tensorflow/c:c_api_internal does not depend on a module exporting /tensorflow/c/c_api_macros.h'`\r\n\r\n",
        "createdAt" : "2020-08-11T02:17:34Z",
        "updatedAt" : "2020-08-11T23:11:53Z",
        "lastEditedBy" : "6e8ad4b7-c555-40e6-905f-0d6de4a870cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e4df924652a151677b3e0b95609db27cb04631",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +20,24 @@#include <stdint.h>\n\n#include \"tensorflow/c/c_api_macros.h\"\n#include \"tensorflow/c/tf_datatype.h\"\n#include \"tensorflow/c/tf_status.h\""
  },
  {
    "id" : "450b77d3-9c90-49f5-855b-597b749b8d18",
    "prId" : 41349,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41349#pullrequestreview-447613910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c42f1f95-679a-4072-bf00-b039ad0d505d",
        "parentId" : null,
        "authorId" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "body" : "Where is `TF_OFFSET_OF_END` defined, and does tensorflow/c/tf_tensor.h pull in that dependency?",
        "createdAt" : "2020-07-13T20:27:02Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "tags" : [
        ]
      },
      {
        "id" : "e57fea2c-77ac-4fa1-8550-18ebc1116ee0",
        "parentId" : "c42f1f95-679a-4072-bf00-b039ad0d505d",
        "authorId" : "6b39775d-b835-4ce2-a7df-9e9f29a6ef14",
        "body" : "Thanks for pointing it out. Just added it to the file! ",
        "createdAt" : "2020-07-13T21:27:01Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "6b39775d-b835-4ce2-a7df-9e9f29a6ef14",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6a4be39803420128c01ff881682cab0d3934428",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +62,66 @@\n#define TF_ALLOCATOR_ATTRIBUTES_STRUCT_SIZE \\\n    TF_OFFSET_OF_END(TF_AllocatorAttributes, on_host) \n\n// --------------------------------------------------------------------------"
  },
  {
    "id" : "180b63bb-e81d-4579-8c92-ea6b5b580f6f",
    "prId" : 41349,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41349#pullrequestreview-447723186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a0cb7a6-0c9f-44b6-afc5-b51410d1fe71",
        "parentId" : null,
        "authorId" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "body" : "Will be great if you can comment what `on_host` is for.",
        "createdAt" : "2020-07-14T01:32:03Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6a4be39803420128c01ff881682cab0d3934428",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +57,61 @@  size_t struct_size; \n  // Set boolean to 0 for CPU allocation, else 1. \n  unsigned char on_host; \n} TF_AllocatorAttributes; \n"
  },
  {
    "id" : "76bb3428-441b-46f8-bc79-393f39cbdf2a",
    "prId" : 41349,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/41349#pullrequestreview-451946714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea3bea61-a061-4752-9468-efbd32d1668d",
        "parentId" : null,
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "What's the value of exposing this struct here instead of accessor methods? Do we expect users will need to create and modify many instances of it (so the allocations will become expensive)?",
        "createdAt" : "2020-07-15T18:37:01Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "0fe5e45c-f8f5-45a1-bf6a-82332eeb3456",
        "parentId" : "ea3bea61-a061-4752-9468-efbd32d1668d",
        "authorId" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "body" : "This struct will be filled by user and passed to TF_AllocateTemp (to be added).\r\nAs I understand, accessors would only work if user gets data from TF but its the opposite here.",
        "createdAt" : "2020-07-15T18:41:23Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "tags" : [
        ]
      },
      {
        "id" : "5e0c4105-f038-4d8f-a8c2-beeec0b305e3",
        "parentId" : "ea3bea61-a061-4752-9468-efbd32d1668d",
        "authorId" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "body" : "So should this have one of the ABI extensions or will we just v2 it when we need to change it?",
        "createdAt" : "2020-07-20T20:26:01Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "0184dacc-e36e-4f02-9c48-fb3acedd41da",
        "tags" : [
        ]
      },
      {
        "id" : "52d32242-052a-4e79-a652-441b3cc6fec9",
        "parentId" : "ea3bea61-a061-4752-9468-efbd32d1668d",
        "authorId" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "body" : "We can add `void* ext`.\r\nIt does have a `struct_size` attribute and we can start checking its value once we add more fields. That way we don't need to add a v2 version of the struct.",
        "createdAt" : "2020-07-20T20:44:54Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "348d02e7-fb87-40d6-9079-97142b662dc4",
        "tags" : [
        ]
      },
      {
        "id" : "95cdb2e9-46f4-4d4e-9c79-9690c5004bcb",
        "parentId" : "ea3bea61-a061-4752-9468-efbd32d1668d",
        "authorId" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "body" : "Hi Alex, looks like this has `struct_size`. So I think it can be extended in an ABI safe manner by appending members to the end of the struct. \r\n",
        "createdAt" : "2020-07-20T20:46:12Z",
        "updatedAt" : "2020-07-23T18:15:00Z",
        "lastEditedBy" : "f59e487c-3347-4ce2-a76a-108be3478d82",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6a4be39803420128c01ff881682cab0d3934428",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +54,58 @@\n// Allocator Attributes used for tensor allocation. \ntypedef struct TF_AllocatorAttributes { \n  size_t struct_size; \n  // Set boolean to 0 for CPU allocation, else 1. "
  }
]