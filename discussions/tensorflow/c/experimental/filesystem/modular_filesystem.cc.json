[
  {
    "id" : "42d234ad-c973-4c22-8115-872f5fc34cb3",
    "prId" : 49951,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/49951#pullrequestreview-680051666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26d11d74-172d-41d8-aa27-ddfbd3487859",
        "parentId" : null,
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "Why allocate a new `std::vector`? We can use `new TF_Filesystem_Option_Value_Union[values.size()]`;",
        "createdAt" : "2021-06-08T22:26:19Z",
        "updatedAt" : "2021-06-08T22:29:50Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      },
      {
        "id" : "5f01865b-745c-4fa8-893b-d9eef9f596fb",
        "parentId" : "26d11d74-172d-41d8-aa27-ddfbd3487859",
        "authorId" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "body" : "@mihaimaruseac Since the function will call into the plugin's `ops_->set_filesystem_configuration()` and return within the same scope, I think it might make sense to use vector (stack) instead of creating memory in heap. That will avoid freeing the created array later.",
        "createdAt" : "2021-06-09T19:16:44Z",
        "updatedAt" : "2021-06-09T19:16:44Z",
        "lastEditedBy" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb98d3909765ec5ecc323fff6604b669ed908818",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +409,413 @@  option_value.type_tag = TF_Filesystem_Option_Type_Buffer;\n  option_value.num_values = values.size();\n  std::vector<TF_Filesystem_Option_Value_Union> option_values(values.size());\n  for (size_t i = 0; i < values.size(); i++) {\n    memset(&option_values[i], 0, sizeof(option_values[i]));"
  },
  {
    "id" : "1615428d-3df3-460b-88f8-f960f73a4f3a",
    "prId" : 49951,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/49951#pullrequestreview-680052088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6136c1fd-266e-4f6b-930a-f6d440875ca4",
        "parentId" : null,
        "authorId" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "body" : "Given the ownership of `.values`, this should use `strdup`, I think",
        "createdAt" : "2021-06-08T22:28:11Z",
        "updatedAt" : "2021-06-08T22:29:50Z",
        "lastEditedBy" : "9f15379f-126a-430d-93cb-7cc21488adf2",
        "tags" : [
        ]
      },
      {
        "id" : "d137aee6-6221-4402-8b97-1847d2ecb066",
        "parentId" : "6136c1fd-266e-4f6b-930a-f6d440875ca4",
        "authorId" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "body" : "@mihaimaruseac I think strdup may not be need as the function will call into the plugin's `ops_->set_filesystem_configuration()`.",
        "createdAt" : "2021-06-09T19:17:14Z",
        "updatedAt" : "2021-06-09T19:17:14Z",
        "lastEditedBy" : "04d6768a-662f-42f5-9152-0bb9c7d64855",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb98d3909765ec5ecc323fff6604b669ed908818",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +412,416 @@  for (size_t i = 0; i < values.size(); i++) {\n    memset(&option_values[i], 0, sizeof(option_values[i]));\n    option_values[i].buffer_val.buf = const_cast<char*>(values[i].c_str());\n    option_values[i].buffer_val.buf_length = values[i].size();\n  }"
  }
]