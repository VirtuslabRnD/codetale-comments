[
  {
    "id" : "815cb240-ac61-4e69-b05f-6c69b4cced10",
    "prId" : 50420,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/50420#pullrequestreview-697344311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceb2e54e-ca9f-48a6-a2b9-7183737a7021",
        "parentId" : null,
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "That seems to duplicate the macro defined in SE below?",
        "createdAt" : "2021-06-23T19:09:05Z",
        "updatedAt" : "2021-06-23T19:09:33Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      },
      {
        "id" : "f043f29b-3b6e-4289-9bc3-d739f1340de3",
        "parentId" : "ceb2e54e-ca9f-48a6-a2b9-7183737a7021",
        "authorId" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "body" : "it is a duplicate and unfortunately that is by design....see the commit message for the 4th commit in the PR for the details why.\r\n\r\nhttps://github.com/tensorflow/tensorflow/pull/50420/commits/ec71a56e3af33a7c80d41b7fa8112a0ac0d8fc58",
        "createdAt" : "2021-06-23T21:31:37Z",
        "updatedAt" : "2021-06-23T21:31:37Z",
        "lastEditedBy" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "tags" : [
        ]
      },
      {
        "id" : "91c5f044-ebe7-4079-8852-cd7d24ea8ac6",
        "parentId" : "ceb2e54e-ca9f-48a6-a2b9-7183737a7021",
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "could we avoid duplication without creating duplicate symbols? maybe define once in stream executor?",
        "createdAt" : "2021-06-24T19:55:44Z",
        "updatedAt" : "2021-06-24T19:55:45Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      },
      {
        "id" : "3193b0ca-e8f9-40fe-9a62-d8bfddd24fd3",
        "parentId" : "ceb2e54e-ca9f-48a6-a2b9-7183737a7021",
        "authorId" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "body" : "@cheshire  \r\n\r\nI am unable to come up with a way to avoid the duplication :(\r\n\r\nThe problem is that the functor  (`struct DynLoadShim__##__name `)  instance (with instance name == rocblas api name) needs to be in the header file, so that it can be shared. And because it is in the header file, it runs into the dupilcate declaration issue.\r\n\r\nposting linker error here for easy reference\r\n```\r\n/usr/bin/ld.gold: error: bazel-out/k8-opt/bin/tensorflow/stream_executor/rocm/_objs/rocblas_plugin/rocm_blas.o: multiple definition of 'tensorflow::wrap::DynLoadShim__rocblas_create_handle::kName'\r\n/usr/bin/ld.gold: bazel-out/k8-opt/bin/tensorflow/compiler/xla/service/gpu/_objs/cusolver_context/cusolver_context.o: previous definition here\r\n/usr/bin/ld.gold: error: bazel-out/k8-opt/bin/tensorflow/stream_executor/rocm/_objs/rocblas_plugin/rocm_blas.o: multiple definition of 'tensorflow::wrap::DynLoadShim__rocblas_destroy_handle::kName'\r\n/usr/bin/ld.gold: bazel-out/k8-opt/bin/tensorflow/compiler/xla/service/gpu/_objs/cusolver_context/cusolver_context.o: previous definition here\r\n/usr/bin/ld.gold: error: bazel-out/k8-opt/bin/tensorflow/stream_executor/rocm/_objs/rocblas_plugin/rocm_blas.o: multiple definition of 'tensorflow::wrap::DynLoadShim__rocblas_set_stream::kName'\r\n...\r\n...\r\n/usr/bin/ld.gold: bazel-out/k8-opt/bin/tensorflow/compiler/xla/service/gpu/_objs/cusolver_context/cusolver_context.o: previous definition here\r\n/usr/bin/ld.gold: error: bazel-out/k8-opt/bin/tensorflow/stream_executor/rocm/_objs/rocblas_plugin/rocm_blas.o: multiple definition of 'tensorflow::wrap::rocblas_snrm2'\r\n/usr/bin/ld.gold: bazel-out/k8-opt/bin/tensorflow/compiler/xla/service/gpu/_objs/cusolver_context/cusolver_context.o: previous definition here\r\ncollect2: error: ld returned 1 exit status\r\n...\r\n```\r\n\r\nThe surprising thing is that we do not run into this link error when building the python whl package. We only hit it when running the unit tests. Given the nature of the error, I would have expected this error to show up when linking any library that pulls in both the `cusolver_context.o`  and `rocblas_wrapper.o` (which I would expect to happen when building the TF python whl). \r\n\r\n",
        "createdAt" : "2021-06-25T01:54:29Z",
        "updatedAt" : "2021-06-25T01:54:54Z",
        "lastEditedBy" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "tags" : [
        ]
      },
      {
        "id" : "9d68d9eb-9d65-4e28-a175-9921faaa14e6",
        "parentId" : "ceb2e54e-ca9f-48a6-a2b9-7183737a7021",
        "authorId" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "body" : "@cheshire gentle ping",
        "createdAt" : "2021-07-01T14:52:41Z",
        "updatedAt" : "2021-07-01T14:52:41Z",
        "lastEditedBy" : "80b3505d-f76d-48ab-b8fe-fe7925204b98",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9f9db6c1b5f3a6ac81d4492f980febb26c74953",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +38,42 @@#else\n\n#define ROCBLAS_API_WRAPPER(__name)                                        \\\n  struct DynLoadShim__##__name {                                           \\\n    static const char* kName;                                              \\"
  }
]