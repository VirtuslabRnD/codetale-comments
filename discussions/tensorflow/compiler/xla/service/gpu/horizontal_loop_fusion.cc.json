[
  {
    "id" : "197db183-b677-4048-a14b-24c186399553",
    "prId" : 48706,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/48706#pullrequestreview-642567340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef592184-83ec-4fbc-b0c6-ae34953423f1",
        "parentId" : null,
        "authorId" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "body" : "If we are running this in a fixed point, could we remove this while/true loop then?",
        "createdAt" : "2021-04-22T18:34:01Z",
        "updatedAt" : "2021-04-23T04:23:00Z",
        "lastEditedBy" : "46fa9a61-9f6f-4ecb-a276-f19713d630df",
        "tags" : [
        ]
      },
      {
        "id" : "182a5011-6912-4bf1-8347-6fa1d9e21eae",
        "parentId" : "ef592184-83ec-4fbc-b0c6-ae34953423f1",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Theoretically we could, but having it in this way is better in practice.\r\n\r\nNote that the granularity of this while loop processes is very fine, i.e., just the instructions that share the same immediate consumer. We write this while loop here is because we don't want to fuse all of these instructions into a kernel (;instead, fuse them into multiple kernels), as a kernel too large can be problematic. Theoretically, we could rely on the fixed point to run this pass many times to get these instructions fused but it is not efficient.\r\n\r\nOn the other hand, the fixed point is used to process the fusions newly generated by this pass. For example, in the unittest `IterativeHorizontalFusion`, the fusion created by fusing `fusion.0` and `fusion.1` won't be traversed until next iteration.\r\n",
        "createdAt" : "2021-04-22T19:13:03Z",
        "updatedAt" : "2021-04-23T04:23:00Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e0604868fcb74cda63333a6af1adfa3a38b03fb",
    "line" : 442,
    "diffHunk" : "@@ -1,1 +488,492 @@    HloInstruction* consumer = def_to_use_order[i];\n    HorizontalLoopFusionImpl::FusionCandidates fusion_candidates(consumer);\n    while (true) {\n      auto fusibles = fusion_candidates.GetNextSpanOfFusions();\n      if (fusibles.empty()) {"
  }
]