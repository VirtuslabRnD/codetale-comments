[
  {
    "id" : "761e1b6e-f9e7-4eb1-be0b-6f824a4c92af",
    "prId" : 14893,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/14893#pullrequestreview-81619002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be0cc1e5-1019-4aba-8334-56de57273b4a",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I thought the existing code would work as:\r\n\r\n - The definition would not be compiled in since it is guarded by `__AVX__`\r\n - This symbol would resolve to null (since we're weak linking)\r\n - We'd do the right thing based on what `GetAvailableIntrinsics` returned\r\n\r\nIs any of the steps above not working as intended?",
        "createdAt" : "2017-12-06T02:20:17Z",
        "updatedAt" : "2017-12-07T01:30:50Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "8a0542cf-05d1-4a8a-a56c-dd5d73d1d09b",
        "parentId" : "be0cc1e5-1019-4aba-8334-56de57273b4a",
        "authorId" : "fab1d6b1-803f-4e1b-8bde-942d25647fd5",
        "body" : "Yeah weak links are weird with clang on OSX. \r\n\r\nHere is a reduced test case:\r\n```\r\n/* weaklink.c */\r\n#include <stdio.h>\r\nint weakfn() __attribute__((weak));\r\n\r\n// Uncomment next line to test a strong link\r\n//int weakfn() { return 0xCAFE; }\r\n\r\nint main()\r\n{\r\n    if (weakfn) {\r\n        printf (\"Weak link found.. 0x%x\\n\", weakfn());\r\n        return weakfn();\r\n    } else {\r\n        printf (\"No Weak link found..\");\r\n        return 0;\r\n    }\r\n}\r\n```\r\nThe above will work well with gcc or clang on linux but will fail with clang on OSX (both Apple's and clang upstream) with the following error:\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"_weakfn\", referenced from:\r\n      _main in weaklink-4baf7d.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation).\r\n```\r\nOur compile currently also fails with the same kind of message:\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"__xla_cpu_runtime_ExpV8F32AVX(float vector[8])\", referenced from:\r\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"__xla_cpu_runtime_LogV8F32AVX(float vector[8])\", referenced from:\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"___xla_cpu_runtime_ExpV4F32NEON\", referenced from:\r\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"___xla_cpu_runtime_LogV4F32NEON\", referenced from:\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //tensorflow/compiler/aot:tfcompile failed to build\r\n```\r\n\r\nSo I wrapped the registrations in the header file with \\_\\_AVX\\_\\_ and friends. Open to any other way to solve it. \r\n\r\n",
        "createdAt" : "2017-12-06T07:02:48Z",
        "updatedAt" : "2017-12-07T01:30:50Z",
        "lastEditedBy" : "fab1d6b1-803f-4e1b-8bde-942d25647fd5",
        "tags" : [
        ]
      },
      {
        "id" : "f7320f79-c281-4a19-9703-49b45dc528e9",
        "parentId" : "be0cc1e5-1019-4aba-8334-56de57273b4a",
        "authorId" : "fab1d6b1-803f-4e1b-8bde-942d25647fd5",
        "body" : "On a related note the extern C also causes heartburn \r\n```\r\n./tensorflow/compiler/xla/service/cpu/cpu_runtime_neon.h:55:30: warning: '__xla_cpu_runtime_ExpV4F32NEON' has C-linkage specified, but returns incomplete type 'xla::cpu::runtime::V4F32NEON' which could be incompatible with C [-Wreturn-type-c-linkage]\r\nxla::cpu::runtime::V4F32NEON __xla_cpu_runtime_ExpV4F32NEON(\r\n```",
        "createdAt" : "2017-12-06T07:06:52Z",
        "updatedAt" : "2017-12-07T01:30:50Z",
        "lastEditedBy" : "fab1d6b1-803f-4e1b-8bde-942d25647fd5",
        "tags" : [
        ]
      },
      {
        "id" : "24141a6a-294c-4d36-ba72-a91525a5d6e6",
        "parentId" : "be0cc1e5-1019-4aba-8334-56de57273b4a",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Ok, please mention this discrepancy in weak linkage in the commit message.",
        "createdAt" : "2017-12-06T18:21:06Z",
        "updatedAt" : "2017-12-07T01:30:50Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd7431b6d0f4681941860b6b20c3edfd618035b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +39,43 @@extern \"C\" {\n\n#ifdef __AVX__\n// The following functions are vectorized versions of a selection of libm\n// library functions."
  }
]