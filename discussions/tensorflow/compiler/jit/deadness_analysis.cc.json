[
  {
    "id" : "a9ad588a-cb99-4c9e-a502-872782947edc",
    "prId" : 28806,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28806#pullrequestreview-239776561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5b8d21-9581-4dc0-ac32-8827df08b372",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Up to you, but this can also be `TF_RET_CHECK(depth++ < 5000)`.",
        "createdAt" : "2019-05-17T22:42:51Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "633e61a0-bcea-468b-a7dc-9932c3fbf938",
        "parentId" : "ad5b8d21-9581-4dc0-ac32-8827df08b372",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "I prefer the old way as it is also used in `GetFrameName` and it is more informative.",
        "createdAt" : "2019-05-21T00:20:47Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a710a59e704d84b9d9cbbbf5eeeea07af02c75",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +968,972 @@    cfi_iter = &cfi_infos[n->id()];\n\n    if (depth++ > 5000) {\n      return errors::Internal(\n          \"Frame of depth > 5000:  Probably malformed graph or a bug in \""
  },
  {
    "id" : "32be2ce1-26ee-40fc-abd4-8f96aa5fdf6b",
    "prId" : 28806,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28806#pullrequestreview-239776561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "841b14ce-1887-4c07-85fb-00376f08c8dd",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Might be worth defining \"root\" here, especially since the obvious interpretation is that the root frame is the trivial empty frame.",
        "createdAt" : "2019-05-17T23:11:54Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "a6ee8c31-b9de-4e7e-8835-a8e08b49bb24",
        "parentId" : "841b14ce-1887-4c07-85fb-00376f08c8dd",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Comments added.",
        "createdAt" : "2019-05-21T00:19:56Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a710a59e704d84b9d9cbbbf5eeeea07af02c75",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +960,964 @@// If the node is inside some frames, get the name of the outermost non-empty\n// frame.  Otherwise, get an empty frame name.\nStatus GetRootFrame(const Node* n, absl::Span<const ControlFlowInfo> cfi_infos,\n                    absl::string_view* frame) {\n  int depth = 0;"
  },
  {
    "id" : "336c4c9d-aafe-4e5a-a5a4-73c39675e51d",
    "prId" : 28806,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28806#pullrequestreview-240839490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "335678ff-4004-43c4-a4d9-a2bf9bab6b87",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "We should add a `DCHECK` that every op in `simplified_ops` was eventually seen in `simplified_ops`.",
        "createdAt" : "2019-05-21T18:22:03Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "2003a1f8-5bec-4648-924d-54983aaffbbc",
        "parentId" : "335678ff-4004-43c4-a4d9-a2bf9bab6b87",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "I don't get this. `simplified_ops` seen in `simplified_ops`?",
        "createdAt" : "2019-05-22T18:19:50Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "65c4f56d-0581-4d4b-9b19-a018c503c082",
        "parentId" : "335678ff-4004-43c4-a4d9-a2bf9bab6b87",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "If you meant to check the op seen in `negation_ops` has the correspondents in `simplified_ops`, it should not be necessary because it is logically correct the op is not in `simplified_ops` (after it is cancelled out.)",
        "createdAt" : "2019-05-22T19:11:21Z",
        "updatedAt" : "2019-05-22T19:11:21Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "a86a28d4-be97-4d74-bdb6-abd55a8aeddb",
        "parentId" : "335678ff-4004-43c4-a4d9-a2bf9bab6b87",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Argh, sorry for the weird comment.  I meant we should `DCHECK` that all elements in `to_remove` were seen in `simplified_ops`.",
        "createdAt" : "2019-05-22T19:28:55Z",
        "updatedAt" : "2019-05-22T19:28:55Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "5194f6dc-f7f6-42d9-92d7-c6d30e18d9ff",
        "parentId" : "335678ff-4004-43c4-a4d9-a2bf9bab6b87",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I'll send in a PR once this is checked in to implement this.",
        "createdAt" : "2019-05-22T19:44:53Z",
        "updatedAt" : "2019-05-22T19:44:53Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a710a59e704d84b9d9cbbbf5eeeea07af02c75",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +664,668 @@    auto it = simplified_ops.begin();\n    while (it != simplified_ops.end()) {\n      if (to_remove.contains(*it)) {\n        it = simplified_ops.erase(it);\n      } else {"
  },
  {
    "id" : "f560adba-197b-45dc-a271-be9fd8539d9f",
    "prId" : 28806,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28806#pullrequestreview-240796226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f65f2fb-9172-4fbc-8a3e-5662089e0a5f",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I think this will be slightly more robust / obviously correct if in `HandleMerge` we keep track of the nodes we assigned optimistic predicates to (in some `std::vector<Node*>` field in the class) and check that those specific nodes converged to the same predicate here.\r\n\r\nAlso, maybe we can move this to a helper function?",
        "createdAt" : "2019-05-21T20:27:11Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "efb74fbb-113e-4c5d-9ca6-038c8c68c89b",
        "parentId" : "8f65f2fb-9172-4fbc-8a3e-5662089e0a5f",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "I'd argue that the robustness is the same but the current implementation is more clear, because we explicitly check all the merges are the same for each frame. Note that in the case of nested while loops, each while can have different predicates while merges on the same level of while must have the same predicate (I added some comments to make this more explicit.) This can complicate the track and compare approach. ",
        "createdAt" : "2019-05-22T18:17:33Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a710a59e704d84b9d9cbbbf5eeeea07af02c75",
    "line" : 469,
    "diffHunk" : "@@ -1,1 +1361,1365 @@  // yes, report success.  If not, report failure and clear the assigned\n  // predicates.\n  if (use_optimistic_mode) {\n    bool is_converged = true;\n    absl::flat_hash_map<absl::string_view, Predicate*> frame_to_pred;"
  },
  {
    "id" : "5afafd2d-6544-4332-995f-984450efebff",
    "prId" : 28806,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28806#pullrequestreview-240873130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e583f122-de70-4d94-8903-576734eadf06",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Let's `CHECK` that `success` is not null if and only if `use_optimistic_mode` is true.  Alternately (I think this is slightly better) if the code guarded under `use_optimistic_mode` is extracted out into a function then we can have the caller do the \"was optimism successful\" check, letting us remove the `bool *success` out parameter altogether.",
        "createdAt" : "2019-05-21T20:31:01Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "e34d5ede-e89e-4b85-8ece-1cc9fb751ad8",
        "parentId" : "e583f122-de70-4d94-8903-576734eadf06",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "I chose the former suggestion, i.e., adding a `CHECK`.\r\n\r\nI don't see a clear way to implement the later suggestion, as `success` is needed by `Populate()`. I thought about another way to remove `success` by moving the logic about running optimistic and then pessimistic modes from `Populate()` into `PopulateFrame()`. But this makes the `PopulateFrame` more complicated. So, I chose to just implement the `CHECK`.",
        "createdAt" : "2019-05-22T18:12:27Z",
        "updatedAt" : "2019-05-22T19:06:16Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "30bab9d2-f587-4978-b885-b382d38a16d8",
        "parentId" : "e583f122-de70-4d94-8903-576734eadf06",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "It is probably easier to show what I had in mind (if it works!) by sending a subsequent PR after this is checked in, so I'll do that. :)",
        "createdAt" : "2019-05-22T19:44:03Z",
        "updatedAt" : "2019-05-22T19:44:03Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "f6915b97-4aab-4b72-a6a1-a331cbed2a94",
        "parentId" : "e583f122-de70-4d94-8903-576734eadf06",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Sounds fair. :)",
        "createdAt" : "2019-05-22T20:52:02Z",
        "updatedAt" : "2019-05-22T20:52:02Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a710a59e704d84b9d9cbbbf5eeeea07af02c75",
    "line" : 413,
    "diffHunk" : "@@ -1,1 +1306,1310 @@\nStatus DeadnessAnalysisImpl::PopulateFrame(absl::Span<Node* const> topo,\n                                           bool use_optimistic_mode,\n                                           bool* success) {\n  CHECK(use_optimistic_mode && success != nullptr ||"
  }
]