[
  {
    "id" : "4695b422-ae55-4e8e-8d51-c0cdfcfee559",
    "prId" : 43034,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43034#pullrequestreview-573963597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d720f4d5-9111-4832-9674-5d8a45e1b614",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Can you please add a `// TODO(sanjoy): Refactor this code into helper functions.` (or send a PR :) ).  The flow has here has become quite difficult to follow.",
        "createdAt" : "2021-01-13T23:20:35Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "cf9feca7-220b-4729-976e-a7b0b1f99e3e",
        "parentId" : "d720f4d5-9111-4832-9674-5d8a45e1b614",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Not addressed?",
        "createdAt" : "2021-01-18T22:05:17Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "d0f1a36f-0976-49b5-956e-44f528303ca3",
        "parentId" : "d720f4d5-9111-4832-9674-5d8a45e1b614",
        "authorId" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "body" : "done",
        "createdAt" : "2021-01-22T05:36:25Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "tags" : [
        ]
      }
    ],
    "commit" : "597499a8fef673b413b9ceb5610a0c65f8a1440e",
    "line" : 243,
    "diffHunk" : "@@ -1,1 +532,536 @@  bool return_null = false;\n  CompileState state = entry->compile_state;\n  if (state == CompileState::kUncompiled) {\n    XLA_SCOPED_LOGGING_TIMER(\"Compilation of XLA executable\");\n    const bool should_compile = [&] {"
  },
  {
    "id" : "ebc7c1c3-4e51-48f9-baf1-fab2ea98e198",
    "prId" : 43034,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43034#pullrequestreview-573828747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69abcd83-da02-460a-8572-a7d2b03a6a13",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "I don't remember if I asked this earlier, but why did you move to using `std::vector` instead of `absl::Span`?",
        "createdAt" : "2021-01-13T23:21:46Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "c44bb975-d1ca-4176-b58a-2bbcb28f935f",
        "parentId" : "69abcd83-da02-460a-8572-a7d2b03a6a13",
        "authorId" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "body" : "You did ask earlier. args starts out as a vector. it was then converted to a span, but those can't be copied by value.\r\nThis needs to be copied by value to be passed to the asynchronous compilation.\r\nIf it's a span, it has be turned into a vector first, and then captured by value to the lambda: two copies!!",
        "createdAt" : "2021-01-14T05:10:14Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "tags" : [
        ]
      },
      {
        "id" : "bf82607f-600a-40a6-a116-e9229bc3362e",
        "parentId" : "69abcd83-da02-460a-8572-a7d2b03a6a13",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "> and then captured by value to the lambda: two copies!!\r\n\r\nIf you use a `struct` functor then you could `std::move` into the member.  But we've gone around in circles for a while, let's get this checked in and then I'll separately try to refactor if it makes sense.",
        "createdAt" : "2021-01-18T22:04:59Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "08a9da10-dd96-450c-a048-0f017592c145",
        "parentId" : "69abcd83-da02-460a-8572-a7d2b03a6a13",
        "authorId" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "body" : "that is dangerous, as that would leave a dangling reference to the caller after the function returns.",
        "createdAt" : "2021-01-21T23:49:11Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "tags" : [
        ]
      }
    ],
    "commit" : "597499a8fef673b413b9ceb5610a0c65f8a1440e",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +439,443 @@Status XlaCompilationCache::CompileImpl(\n    const XlaCompiler::Options& options, const NameAttrList& function,\n    const std::vector<XlaCompiler::Argument>& args,\n    const std::function<Status(XlaCompiler* compiler,\n                               const std::vector<XlaCompiler::Argument>& args,"
  },
  {
    "id" : "d3da02a5-892e-4ec4-8fde-1231555f8849",
    "prId" : 43034,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/43034#pullrequestreview-573961590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15d4b614-59d2-4a87-ade5-aef7b237f93d",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Add a note here why we can't just rely on the `std::unique_ptr` auto-destructing.  Otherwise I'm pretty sure we'll get a helpful \"cleanup fix NFC\" few months down that road that will reintroduce the bug by deleting the \"unnecessary\" `.reset()`. :) ",
        "createdAt" : "2021-01-18T22:02:34Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "d3706a21-7e8b-4e60-84e4-a14690cfdc03",
        "parentId" : "15d4b614-59d2-4a87-ade5-aef7b237f93d",
        "authorId" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "body" : "done",
        "createdAt" : "2021-01-22T05:30:09Z",
        "updatedAt" : "2021-02-27T00:51:15Z",
        "lastEditedBy" : "ce170c1c-de15-4dea-9405-50e61baf5684",
        "tags" : [
        ]
      }
    ],
    "commit" : "597499a8fef673b413b9ceb5610a0c65f8a1440e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +71,75 @@    }\n  }\n  // Wait for all outstanding compilations to finish.\n  // Resetting the pointer explicitly in the top level destructor.\n  // Without this, the pointer would be reset when the AsyncCompilationState"
  }
]