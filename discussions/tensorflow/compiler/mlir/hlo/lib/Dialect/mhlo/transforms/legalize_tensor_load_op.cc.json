[
  {
    "id" : "2f9013f5-b365-46f4-a283-e930071edf50",
    "prId" : 49598,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/49598#pullrequestreview-668563850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "422f48aa-e58e-4deb-be94-b7045fc94c63",
        "parentId" : null,
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "Should this be a canonicalization upstream?",
        "createdAt" : "2021-05-25T16:35:30Z",
        "updatedAt" : "2021-05-25T17:05:21Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      },
      {
        "id" : "62dae283-0ed3-47b9-adbd-f750eb7499c8",
        "parentId" : "422f48aa-e58e-4deb-be94-b7045fc94c63",
        "authorId" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "body" : "Thanks! These patterns are relative specific to hlo-to-lhlo conversion pass. I am not sure if there are other places needing these patterns. I think we can leave it here for now and upstream them if necessary in the future (I'd like to help). ",
        "createdAt" : "2021-05-26T01:53:38Z",
        "updatedAt" : "2021-05-26T01:53:38Z",
        "lastEditedBy" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "tags" : [
        ]
      },
      {
        "id" : "2ee40937-3a48-46bf-8114-edb936d4aa95",
        "parentId" : "422f48aa-e58e-4deb-be94-b7045fc94c63",
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "Can you elaborate what's specific to HLO here?",
        "createdAt" : "2021-05-26T02:36:52Z",
        "updatedAt" : "2021-05-26T02:36:52Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      },
      {
        "id" : "21ccb40d-d5ed-451f-9f44-725a88b876e0",
        "parentId" : "422f48aa-e58e-4deb-be94-b7045fc94c63",
        "authorId" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "body" : "Interface `InferReturnTypeShapes` of mhlo ops are implemented on tensor level. During mhlo-to-lmhlo conversion,  the operands of a hlo op are legalized to memref type first before the op is legalized,  making it invalid to call `InferReturnTypeShapes` directly.  To solve this problem, we need to insert tensor_load op to make sure the operands passed in to the interface are valid.\r\n\r\nThis pr tries to remove these tensor_load ops after conversion in some cases. I'm not sure if these patterns are likely to be used in other places since it's highly related to the implementation of tensor-to-buffer conversion. However I agree that the implementation of these patterns has nothing to do with hlo.",
        "createdAt" : "2021-05-26T03:19:16Z",
        "updatedAt" : "2021-05-26T03:19:17Z",
        "lastEditedBy" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "tags" : [
        ]
      }
    ],
    "commit" : "8873b9b6d9315c1199ca9f7c133ecf377ecd2fa6",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@    return success();\n  }\n};\n\n// Converting:"
  },
  {
    "id" : "0bb3e4dc-7cf0-4586-a8c8-65a365764296",
    "prId" : 49598,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/49598#pullrequestreview-669679074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9ddbd50-eae6-4c86-b85e-85122b2b1a78",
        "parentId" : null,
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "This may fail the pipeline silently, can you emit an error? (I think the only source of failure here is a non-convergence of the greedy driver)",
        "createdAt" : "2021-05-26T16:24:04Z",
        "updatedAt" : "2021-05-26T16:24:09Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      },
      {
        "id" : "694dfb93-b0e4-4758-a623-a9e69f55d08d",
        "parentId" : "e9ddbd50-eae6-4c86-b85e-85122b2b1a78",
        "authorId" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "body" : "Done!",
        "createdAt" : "2021-05-27T01:56:46Z",
        "updatedAt" : "2021-05-27T01:56:46Z",
        "lastEditedBy" : "b4bcfac1-e2f9-43bc-ad99-b3b766a1a316",
        "tags" : [
        ]
      }
    ],
    "commit" : "8873b9b6d9315c1199ca9f7c133ecf377ecd2fa6",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@  if (failed(applyPatternsAndFoldGreedily(func, std::move(patterns)))) {\n    func.emitError(\"applyPatternsAndFoldGreedily does not converge\");\n    signalPassFailure();\n  }\n}"
  }
]