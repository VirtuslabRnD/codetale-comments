[
  {
    "id" : "3095ff13-5e38-4aaa-8ca0-2856d903877a",
    "prId" : 48193,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/48193#pullrequestreview-633825517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "667afa8d-11cc-4ad0-8f78-6077dfa872e8",
        "parentId" : null,
        "authorId" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "body" : "I'm a bit concerned about the implicit assumption of f32 here (which is not an invariant of the tf op). What is the story for other data types (I believe if it happened, it would fail tosa verification, which is better than a crash, but still not great to be applying a pattern that produces a broken op).",
        "createdAt" : "2021-04-01T04:24:06Z",
        "updatedAt" : "2021-04-12T22:09:56Z",
        "lastEditedBy" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "tags" : [
        ]
      },
      {
        "id" : "e6500dc7-a468-4d22-b566-dcc1c632ae54",
        "parentId" : "667afa8d-11cc-4ad0-8f78-6077dfa872e8",
        "authorId" : "f31d0583-2480-4fc3-9503-1351afc6cb97",
        "body" : "Maybe I should check if data type is f32 and return failure() is it's not now. Does that sound okay for now?",
        "createdAt" : "2021-04-06T17:07:11Z",
        "updatedAt" : "2021-04-12T22:09:56Z",
        "lastEditedBy" : "f31d0583-2480-4fc3-9503-1351afc6cb97",
        "tags" : [
        ]
      },
      {
        "id" : "201625af-c344-41db-8f68-ae0647bf88e1",
        "parentId" : "667afa8d-11cc-4ad0-8f78-6077dfa872e8",
        "authorId" : "2b360356-8486-433a-8b78-303484004dfe",
        "body" : "Sounds fine.",
        "createdAt" : "2021-04-12T18:07:41Z",
        "updatedAt" : "2021-04-12T22:09:56Z",
        "lastEditedBy" : "2b360356-8486-433a-8b78-303484004dfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c29763e8b9790e117049595f61c71d61b20117c",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +1956,1960 @@  }\n\n  Value const_zero = getTosaConstTensorSingleF32(rewriter, op, 0.0);\n\n  auto a1_mul = rewriter.create<tosa::MulOp>("
  },
  {
    "id" : "99d3cb2d-4839-4057-a49f-5acfac2baad8",
    "prId" : 45496,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45496#pullrequestreview-549410042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd738aba-405c-42b6-b141-37821b566299",
        "parentId" : null,
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "Please avoid formatting changes in unrelated part of the code, this makes the diff unreadable.",
        "createdAt" : "2020-12-09T01:54:41Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      },
      {
        "id" : "42bd0ea9-5c07-43a3-ab8f-542ad32ddff4",
        "parentId" : "fd738aba-405c-42b6-b141-37821b566299",
        "authorId" : "ec3eb1a7-1d26-451a-afe0-c7fde96c3ff9",
        "body" : "@joker-eph, @stellaraccident:\r\n\r\nUgh.   Looking back to the initial patch from Suraj which had similar formatting issues which were fixed for us and this patch, I think there is some disagreement between how our editors (emacs 25.2.2 on Ubuntu18.04 w/clang-6, I believe) are interpreting clang-format -style=Google and what the Google clang-format environment _actually_ is.   \r\n\r\nThis is the formatting that was chosen by the default clang-format picked up from tensorflow/.clang-format in our environment.  Interestingly, if I remove that file and put in my own clang-format -style=Google -dump-config, I get yet another interpretation. \r\n\r\nObviously, this will be an irritating problem going forward if we don't get to the bottom of what's causing it.  Does this sort of issue ring any bells?",
        "createdAt" : "2020-12-09T17:55:29Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "ec3eb1a7-1d26-451a-afe0-c7fde96c3ff9",
        "tags" : [
        ]
      },
      {
        "id" : "92570180-5c92-4ffc-943f-009f01e4d9c8",
        "parentId" : "fd738aba-405c-42b6-b141-37821b566299",
        "authorId" : "ec3eb1a7-1d26-451a-afe0-c7fde96c3ff9",
        "body" : "I think I roughly figured out what's happening here.   Could I kindly ask for a pass on this, just this one time?  \r\n\r\nTL;DR; the original clang-formatting does is wrong on legalize_tf.cc\r\n\r\nThe initial TOSA commit was formatted using -style=Google, which uses the clang-format parameter DerivePointerAlignment: true.  It should have used the default .clang-format in tensorflow/.clang-format, which sets that parameter to false.  DerivePointerAlignment is one of those mind-boggling parameters that chooses the setting for PointerAlignment based on the dominant usage already in the file.  For most of the files, it chose PointerAlignment: left, but for legalize_tf.cc, it chose PointerAlignment: right instead.    \r\n\r\nThe only thing the default TensorFlow clang-format file does is disable this per-file behavior and format PointerAlignment: left unconditionally.  \r\n\r\nSo we're left with a few choices:\r\n1. Commit this file with some unrelated, but correct clang reformatting (what we have now, modulo the other todos)\r\n2. Commit this file while emulating the incorrect clang reformatting with a manual override on clang-format (and possible validation failures later on?)\r\n3. Insert and merge a separate commit before this one that corrects the issue, merge, rebase.\r\n\r\nMy preference is for (1) because it's simpler mechanically, although it does have the ugly reformatting + code changes.\r\nWe should definitely scrub the files that weren't touched in this commit to see if there are any other affected files.",
        "createdAt" : "2020-12-09T23:09:08Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "ec3eb1a7-1d26-451a-afe0-c7fde96c3ff9",
        "tags" : [
        ]
      },
      {
        "id" : "8cf4a72a-a6e8-4406-8a4e-34506b73eddb",
        "parentId" : "fd738aba-405c-42b6-b141-37821b566299",
        "authorId" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "body" : "I'm fine with the first option. Dueling tools are not worth the trouble to diagnose in flight at this level. When you're ready, I can commit this and apply any formatting fixups as part of that.",
        "createdAt" : "2020-12-10T08:14:17Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "tags" : [
        ]
      },
      {
        "id" : "dd31bf23-7855-49fb-baec-0a2175f5fe27",
        "parentId" : "fd738aba-405c-42b6-b141-37821b566299",
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "In general we use *git clang-format* and never format the entire file (so don't use editor full-file formatting): so it does not matter much that you have some local discrepancies with the clang-format version. The point is more about not exploding the size of the diff.\r\n",
        "createdAt" : "2020-12-10T17:00:02Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc5ec2bd459858f89598155f8b5026cd7e6167d",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +330,334 @@\nLogicalResult ConvertTFMulOp::matchAndRewrite(Operation* op,\n                                              PatternRewriter& rewriter) const {\n  auto tf_mul_op = cast<TF::MulOp>(op);\n"
  },
  {
    "id" : "5ff95010-3e78-48b9-951b-da05074d7d4a",
    "prId" : 45496,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45496#pullrequestreview-547861453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca694e9-7064-42b7-95dd-abdca9bb711c",
        "parentId" : null,
        "authorId" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "body" : "Nit: through all of these: I think it is fine to collapse these blank lines. If you decide to do it, do it to all of them.",
        "createdAt" : "2020-12-09T05:55:36Z",
        "updatedAt" : "2020-12-10T22:13:34Z",
        "lastEditedBy" : "b534dd2f-ff29-4848-b22b-6d156debdac0",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc5ec2bd459858f89598155f8b5026cd7e6167d",
    "line" : 544,
    "diffHunk" : "@@ -1,1 +757,761 @@\n  if (!result) return failure();\n\n  rewriter.replaceOp(op, {result.getValue()});\n"
  },
  {
    "id" : "31268e0e-f4c5-4fce-9ad4-396f2b020f19",
    "prId" : 45496,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/45496#pullrequestreview-549683371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0968fb87-ce28-45a5-aa0d-13cf0bdd838c",
        "parentId" : null,
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "For future reference: `auto` is perfectly fine when the type is obvious from the context, like when it appears in the \"cast\" template parameter on the RHS like here.\r\n\r\nIn general the guideline is to use `auto` when it makes the code more readable though (like iterator and other hard to write types).",
        "createdAt" : "2020-12-10T23:06:47Z",
        "updatedAt" : "2020-12-10T23:08:43Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc5ec2bd459858f89598155f8b5026cd7e6167d",
    "line" : 1506,
    "diffHunk" : "@@ -1,1 +2021,2025 @@\n  RankedTensorType output_type =\n      tf_fakequant_op.getResult().getType().dyn_cast<RankedTensorType>();\n  // Not a ranked tensor output\n  if (!output_type) return failure();"
  }
]