[
  {
    "id" : "06247bd1-14e1-421a-b273-55bc20aee454",
    "prId" : 36335,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36335#pullrequestreview-350832824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "114e0de3-e4de-4e20-b8f1-aea67242ba0b",
        "parentId" : null,
        "authorId" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "body" : "You can capture the arguments of the converted function with smth like\r\n```\r\n// CHECK: ([%[LHS:.*]]: memref<4xf32>, %[[RHS:.*]]: memref<4xf32>, %[[RESULT:.*]]: memref<4xf32>)\r\n```",
        "createdAt" : "2020-01-30T13:47:25Z",
        "updatedAt" : "2020-02-11T12:56:17Z",
        "lastEditedBy" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa2d06d55f6d81cdbe721aa5938b4d815bced015",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +22,26 @@\n// CHECK-LABEL: func @func_op_long\nfunc @func_op_long(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>) -> tensor<4xf32> {\n  // CHECK: (%[[NEW_ARG0:.*]]: memref<4xf32>, %[[NEW_ARG1:.*]]: memref<4xf32>, %[[RESULT:.*]]: memref<4xf32>)\n  // CHECK-NEXT: %[[SUB_RESULT:.*]] = alloc() {temp = true} : memref<4xf32>"
  },
  {
    "id" : "4438ae45-69c3-46ef-803a-e6237bad53b7",
    "prId" : 36335,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36335#pullrequestreview-350832824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4d4b927-0bf3-4ccf-9f4f-9683ccdab52e",
        "parentId" : null,
        "authorId" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "body" : "s/arg2/[[RESULT]]",
        "createdAt" : "2020-01-30T13:47:43Z",
        "updatedAt" : "2020-02-11T12:56:17Z",
        "lastEditedBy" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa2d06d55f6d81cdbe721aa5938b4d815bced015",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +38,42 @@  %5 = xla_hlo.mul %2, %4 {name = \"maximum.47\"} : tensor<4xf32>\n  // CHECK-NEXT: \"xla_lhlo.mul\"(%[[ADD_RESULT]], %[[SUB_RESULT]], %[[RESULT]])\n  // CHECK-NEXT: dealloc %[[MAX_RESULT]] : memref<4xf32>\n  // CHECK-NEXT: dealloc %[[ADD_RESULT]] : memref<4xf32>\n  // CHECK-NEXT: dealloc %[[MIN_RESULT]] : memref<4xf32>"
  },
  {
    "id" : "9d61c1ab-11ef-4e9f-b437-e129026e2116",
    "prId" : 36335,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36335#pullrequestreview-360937988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92a5cab0-97f3-455f-b14a-9fdd1c10ca05",
        "parentId" : null,
        "authorId" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "body" : "(transmitting @joker-eph): Why isn't the copy removal tested independently of the legalization? Isn't this an optimization?\r\n\r\nIn general we try to keep testing a minimal granularity: I would rather see `-lhlo-redundant-copies-removal ` being tested independently on a LHLO input test file.",
        "createdAt" : "2020-02-19T09:03:10Z",
        "updatedAt" : "2020-02-19T09:16:22Z",
        "lastEditedBy" : "45da85e7-c0a9-47f8-a110-526ee93f4528",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa2d06d55f6d81cdbe721aa5938b4d815bced015",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +12,16 @@}\n\n// CHECK-LABEL: func @func_op\nfunc @func_op(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>) -> tensor<4xf32> {\n  // CHECK: (%[[NEW_ARG0:.*]]: memref<4xf32>, %[[NEW_ARG1:.*]]: memref<4xf32>, %[[RESULT:.*]]: memref<4xf32>)"
  },
  {
    "id" : "d8e4b5ff-cf4d-4599-9f4c-9035a6f75a70",
    "prId" : 36242,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/36242#pullrequestreview-349352564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08786339-a8ef-4447-b51d-c64ab18c9ef9",
        "parentId" : null,
        "authorId" : "23268ae6-07df-4999-9478-4a39951fd87f",
        "body" : "Could you add a test with multiple operations? And also one where a value is used in multiple places, for instance in a further op and return?",
        "createdAt" : "2020-01-28T13:05:36Z",
        "updatedAt" : "2020-01-29T12:58:17Z",
        "lastEditedBy" : "23268ae6-07df-4999-9478-4a39951fd87f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a97d62e64274d492460e7c863e74cb7aee2fcdc2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@}\n\n// CHECK-LABEL: func @func_op\nfunc @func_op(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>) -> tensor<4xf32> {\n  // CHECK-NEXT: %[[MAX_RESULT:.*]] = alloc() {temp = true} : memref<4xf32>"
  }
]