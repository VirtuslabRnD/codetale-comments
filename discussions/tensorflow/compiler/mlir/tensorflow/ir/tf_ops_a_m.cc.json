[
  {
    "id" : "0f3c17a0-5c6b-473d-8ce0-af6aaef35f89",
    "prId" : 50851,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/50851#pullrequestreview-713103300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57cff2ae-edd7-45ce-a91f-72e8421b96bc",
        "parentId" : null,
        "authorId" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "body" : "Looking at the usage, you don't really need the number of zeros: you only need to know if we either:\r\n- have a splat of a 0.0 (I don't think you need to iterate for this, but even if you do, you only need to stop on the first non 0).\r\n- have no zero: you need to iterate but you don't need to count, you can stop on the first zero.\r\n",
        "createdAt" : "2021-07-21T21:06:05Z",
        "updatedAt" : "2021-07-21T21:07:11Z",
        "lastEditedBy" : "79b78984-b8e9-4fc7-aa98-92198b35ecca",
        "tags" : [
        ]
      },
      {
        "id" : "5327a7a9-1212-495f-9330-5048ef24a856",
        "parentId" : "57cff2ae-edd7-45ce-a91f-72e8421b96bc",
        "authorId" : "20f72ec7-eea1-4343-a8a7-eac9a32f8e49",
        "body" : "> Looking at the usage, you don't really need the number of zeros: you only need to know if we either:\r\n> \r\n> * have a splat of a 0.0 (I don't think you need to iterate for this, but even if you do, you only need to stop on the first non 0).\r\n> * have no zero: you need to iterate but you don't need to count, you can stop on the first zero.\r\n\r\nThat's right! Thanks for this suggestion. I will modify the code accordingly.",
        "createdAt" : "2021-07-22T05:00:41Z",
        "updatedAt" : "2021-07-22T05:00:41Z",
        "lastEditedBy" : "20f72ec7-eea1-4343-a8a7-eac9a32f8e49",
        "tags" : [
        ]
      },
      {
        "id" : "3aa5858d-31b9-46dd-b583-7c512fa93b4c",
        "parentId" : "57cff2ae-edd7-45ce-a91f-72e8421b96bc",
        "authorId" : "20f72ec7-eea1-4343-a8a7-eac9a32f8e49",
        "body" : "> Looking at the usage, you don't really need the number of zeros: you only need to know if we either:\r\n> \r\n> * have a splat of a 0.0 (I don't think you need to iterate for this, but even if you do, you only need to stop on the first non 0).\r\n> * have no zero: you need to iterate but you don't need to count, you can stop on the first zero.\r\n\r\n@joker-eph , I have made the required changes! Let me know if they seem fine!",
        "createdAt" : "2021-07-22T18:19:03Z",
        "updatedAt" : "2021-07-22T18:19:03Z",
        "lastEditedBy" : "20f72ec7-eea1-4343-a8a7-eac9a32f8e49",
        "tags" : [
        ]
      }
    ],
    "commit" : "f633cb5f5cc657149ae0b524163dd2d2b4b58b64",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1987,1991 @@      else\n        return false;\n    };\n\n    // Returns true iff `attr` has both zero and non-zero elements"
  },
  {
    "id" : "a126b11f-6fd7-40d2-a6ee-3d68812f462e",
    "prId" : 48848,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/48848#pullrequestreview-682179071",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ebd506-a13a-49ce-8bdb-d084f106228a",
        "parentId" : null,
        "authorId" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "body" : "why can't we simply forward operands[0].getType() after checking that there is at least one operand?",
        "createdAt" : "2021-06-11T20:13:04Z",
        "updatedAt" : "2021-06-11T20:18:56Z",
        "lastEditedBy" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "tags" : [
        ]
      }
    ],
    "commit" : "5901a56527971820332879775c8412d43ab49723",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2237,2241 @@  }\n  inferredReturnTypes.assign({input_ty});\n  return success();\n}\n"
  },
  {
    "id" : "cbecc8d8-502f-4a57-a99e-0d19b71c9d95",
    "prId" : 44022,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/44022#pullrequestreview-520371690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77f4747d-54fe-4ab3-a678-294d01bbe4ff",
        "parentId" : null,
        "authorId" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "body" : "nit: keep this near the first use",
        "createdAt" : "2020-10-24T02:51:56Z",
        "updatedAt" : "2020-12-14T07:23:29Z",
        "lastEditedBy" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "tags" : [
        ]
      },
      {
        "id" : "001df7d8-458d-4d3f-8823-3ef735f24503",
        "parentId" : "77f4747d-54fe-4ab3-a678-294d01bbe4ff",
        "authorId" : "7fe1c94f-7028-4b3e-a161-e35ffa0e1a9e",
        "body" : "Done. Thanks",
        "createdAt" : "2020-10-30T04:36:19Z",
        "updatedAt" : "2020-12-14T07:23:29Z",
        "lastEditedBy" : "7fe1c94f-7028-4b3e-a161-e35ffa0e1a9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6df0071c32203a1c20a2ae4104b6db0a1976a410",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1379,1383 @@    return emitOptionalError(\n        location, \"requires strides attribute length to be \", num_dims);\n  auto is_not_positive = [](Attribute val) {\n    return val.cast<IntegerAttr>().getValue().getSExtValue() <= 0;\n  };"
  },
  {
    "id" : "cf2fc16b-c7e1-4806-a946-739a3da0baa3",
    "prId" : 42102,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/42102#pullrequestreview-462842044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38351930-06b3-462d-81d5-d3bff6e6bb7c",
        "parentId" : null,
        "authorId" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "body" : "optional nit: To avoid materializing the string here for FormatFromString, let's change input type of the function to be string_view. Then, we can convert from StringRef to string_view directly.",
        "createdAt" : "2020-08-06T20:11:44Z",
        "updatedAt" : "2020-08-06T20:11:57Z",
        "lastEditedBy" : "d5b52da7-e430-40b5-acaf-5ed00acf4442",
        "tags" : [
        ]
      }
    ],
    "commit" : "e29b09b91c5b7d8585b6c26fc02205eb70cb816b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +340,344 @@//\nstatic LogicalResult Verify(BiasAddOp op) {\n  std::string data_format = op.data_format().str();\n  tensorflow::TensorFormat format;\n  bool is_valid = FormatFromString(data_format, &format);"
  }
]