[
  {
    "id" : "30516a30-9696-47a3-a950-0b1661b0c5bd",
    "prId" : 28092,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/28092#pullrequestreview-231938231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "parentId" : null,
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "How do we know that this is true:\r\n\r\n```\r\n        // This is correct as long as the input and output resources\r\n        // are in the same order.\r\n```\r\n?",
        "createdAt" : "2019-04-23T23:09:40Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "5bf40d86-5303-4fd7-8d95-d4dc12d16acf",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Because:\r\n1. outputs for resources are always created when return_updated_values_for_all_resources is set to true.\r\n2. the resource output retvals are sorted according to the input argument position ([here](https://github.com/tensorflow/tensorflow/blob/408cea8c638a9873c8a23887fadf74314bd2a0b9/tensorflow/compiler/tf2xla/xla_compiler.cc#L258))\r\n3. So, as long as the outputs are in the same order as the inputs, they will be pushed into elems in the correct order ([here](https://github.com/tensorflow/tensorflow/blob/408cea8c638a9873c8a23887fadf74314bd2a0b9/tensorflow/compiler/tf2xla/xla_compiler.cc#L304)).",
        "createdAt" : "2019-04-24T00:06:57Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "a29602db-5632-4f19-8840-2e897a2ec39e",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "> So, as long as the outputs are in the same order as the inputs\r\n\r\nI meant what guarantees that the `DT_RESOURCE` outputs are in the same order as the inputs?",
        "createdAt" : "2019-04-24T01:02:26Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "38a3b9b7-fa50-4f3b-8ab4-a7b08f4019cb",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Ah. Got it. It is guaranteed by the functionalization while pass, since it always adds a corresponding output to a DT_RESOURCE input.",
        "createdAt" : "2019-04-24T02:03:39Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "af009464-868d-4ac9-a23e-a37e7ba6e97f",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Ok, great, can you add this to the comment?",
        "createdAt" : "2019-04-24T02:18:58Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "7be38142-347f-4fc4-8770-bcdd8c9395ae",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "BTW, I guess you may also ask in terms of cases other than tf.while (although this commit changes nothing about them). My understanding is as follows--functions other than the while loop body do not have DT_RESOURCE as outputs when they are generated by TF. So, this case may never be hit by them. I, however, wonder why the original author of the codes does not choose to bail out in this case. Do you have any insight?",
        "createdAt" : "2019-04-24T02:20:20Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "ab56469e-7c5e-4080-bb9e-bb8985069284",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Added.",
        "createdAt" : "2019-04-24T05:41:09Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "d2225042-baa3-400c-92b9-3bc3a3dbffe8",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "> Ah. Got it. It is guaranteed by the functionalization while pass, since it always adds a corresponding output to a DT_RESOURCE input.\r\n\r\nBut it isn't guaranteed for `While` loops generated directly by TF.  Right now we have this `RearrangeFunctionArgumentPass` that (I think unsoundly, but I'm double checking with the author) rewrites TF `While` loop bodies to *not* return `DT_RESOURCE`s (so making it look like what the old functionalization pass would have generated).  But we'll have to disable that pass when we check this in since otherwise we won't do the right thing for TF generated while loops.\r\n\r\n> My understanding is as follows--functions other than the while loop body do not have DT_RESOURCE as outputs when they are generated by TF. So, this case may never be hit by them.\r\n\r\nI agree -- we've just been getting lucky because TF happens not to generate such functions.  But IMO we should at least return an `UnimplementedError` instead of silently miscompiling if such odd functions do show up.",
        "createdAt" : "2019-04-25T07:02:01Z",
        "updatedAt" : "2019-04-25T21:56:01Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "7a224f62-4677-424b-b797-3c2ca8c1827c",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "Thank your for bringing up the potential issue related to `RearrangeFunctionArgumentPass` for discussions. I read the code in the pass and summarize my current understanding as follows. Let's see if they are aligned to your understanding.\r\n\r\n1. `xla_compiler` supports the following two forms of TF functions.\r\n  a. `DT_RESOURCE` are only inputs and placed in the last.\r\n  b. `DT_RESOURCE` are both inputs and outputs. They still need to be placed in the last and the input/output order needs to be aligned.\r\n2. TF can generate functions that do not conform to the two forms listed in item 1, but `RearrangeFunctionArgumentPass` will fix them by rewriting the functions to form 1.a. However, note that it rewrites the while loop body **only if** DT_RESOURCE arguments are not placed in the last.\r\n3. Based on 2, `RearrangeFunctionArgumentPass` will _not_ rewrite the functionalized while, as its DT_RESOURCE arguments are always placed in the last.\r\n4. We should not turn off `RearrangeFunctionArgumentPass`, as it is needed to fix functions generated from TF. Also, it does not affect the functionalized while.\r\n",
        "createdAt" : "2019-04-25T22:16:21Z",
        "updatedAt" : "2019-04-29T16:33:09Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      },
      {
        "id" : "a624bd80-18e7-4ee4-aa95-6b5b5c1cc50a",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "\r\n> Thank your for bringing up the potential issue related to `RearrangeFunctionArgumentPass` for discussions. I read the code in the pass and summarize my current understanding as follows. Let's see if they are aligned to your understanding.\r\n> \r\n> 1. `xla_compiler` supports the following two forms of TF functions.\r\n>    a. `DT_RESOURCE` are only inputs and placed in the last.\r\n>    b. `DT_RESOURCE` are both inputs and outputs. They still need to be placed in the last and the input/output order needs to be aligned.\r\n> 2. TF can generate functions that do not conform to the two forms listed in item 1, but `RearrangeFunctionArgumentPass` will fix them by rewriting the functions to form 1.a. However, note that it rewrites the while loop body **only if** DT_RESOURCE arguments are not placed in the last.\r\n\r\nMoreover, 1a. for while loops is not correct.\r\n\r\nThe behavior of a while loop is, roughly, `while (cond(state)) { state = body(state); }` which means the input and output state from the while loop body needs to have the same shape.  So the while loop body cannot be edited to remove the `DT_RESOURCE` outputs -- if they're present in the inputs, the need to be present in the outputs.  In that sense `RearrangeFunctionArgumentPass` is unsound because it will convert a correct While loop generated by TF into an incorrect while loop.  Now these incorrect while loops with \"work\" when run through the XLA compiler because the XLA compiler always places `DT_RESOURCE` outputs at the end of the output tuple from a function call, even if the function did not have those `DT_RESOURCE` outputs.\r\n\r\n> 3. Based on 2, `RearrangeFunctionArgumentPass` will _not_ rewrite the functionalized while, as its DT_RESOURCE arguments are always placed in the last.\r\n\r\nI agree.\r\n\r\n> 4. We should not turn off `RearrangeFunctionArgumentPass`, as it is needed to fix functions generated from TF. Also, it does not affect the functionalized while.\r\n\r\nWe will still need the \"rearrange\" aspect of `RearrangeFunctionArgumentPass`.  However, once your change is checked in, we can change the XLA compiler to be stricter about the While loops it accepts (possibly as an explicit `TF_RET_CHECK` or something) by ensuring that the output shape of the TF body computation matches its input shape (*you* don't have to do this, but that would be a logical change to make).  Then the XLA compiler would start failing with while nodes generated by TF and mangled by the `RearrangeFunctionArgumentPass` pass.  So `RearrangeFunctionArgumentPass` needs to be fixed in the same change that makes the XLA compiler stricter.\r\n\r\n> But we'll have to disable that pass when we check this in\r\n\r\nI was wrong here.  I don't think we need to disable `RearrangeFunctionArgumentPass` when we check *this* in, but we'll need to disable it when we make XLA compiler stricter as I suggested above.",
        "createdAt" : "2019-04-29T20:22:01Z",
        "updatedAt" : "2019-04-29T20:22:03Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "e39c6e6e-e8ae-4258-acea-fb62ae6dd72f",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "body" : "Just to close this off, I think the current code is fine, but it would be nice to have future CLs that:\r\n\r\n - Add a `TF_RET_CHECK(retval.resource()->arg_num() == i)` or equivalent here.\r\n - Checks that resources, if returned from the TF function, are in the correct order.\r\n - Makes the `XlaOpKernel` for `While` stricter around mismatching input/output shapes for the body computation.  `RearrangeFunctionArgumentPass` will have to be fixed in this CL.\r\n\r\nThe first two invariants should always hold because of `RearrangeFunctionArgumentPass` and how we functionalize while loops, but having an explicit check will make the code easier to understand and debug.\r\n\r\nIf you want to take these on then that's great, otherwise please let me know and I or someone else from my team can figure these out.",
        "createdAt" : "2019-04-29T20:30:26Z",
        "updatedAt" : "2019-04-29T20:34:01Z",
        "lastEditedBy" : "2861a495-42d5-4ac3-b543-23cf14c0a980",
        "tags" : [
        ]
      },
      {
        "id" : "39eddc4e-e570-4a04-ba61-eaef6acd3fe6",
        "parentId" : "6fe25e05-caa3-4dd9-ad8d-7dd294124880",
        "authorId" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "body" : "No problem. I will be happy to submit a CL fixing them.",
        "createdAt" : "2019-04-29T22:51:33Z",
        "updatedAt" : "2019-04-29T22:51:34Z",
        "lastEditedBy" : "04e5d7bd-a136-4f0a-9cb0-0e56fd16cec3",
        "tags" : [
        ]
      }
    ],
    "commit" : "153e747ecbd7dd258cb43422b5e961382755ff54",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +236,240 @@      case XlaExpression::Kind::kResource:\n        // Resources are pushed into elems later when processing resource\n        // arguments. This is correct as long as the input and output resources\n        // are in the same order. In the case of functionalized while body,\n        // this property is guaranteed since a corresponding output is always"
  }
]