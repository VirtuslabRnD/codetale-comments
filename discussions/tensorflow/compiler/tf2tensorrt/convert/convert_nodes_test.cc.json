[
  {
    "id" : "04efeef3-7cc2-46b7-8ad7-a6e98e4547e5",
    "prId" : 48061,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/48061#pullrequestreview-621375253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0506e1bc-a2b4-495a-8d2a-e3b0f2085d26",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Need to protect this.\r\nAlso need to fix these two lines:\r\nhttps://github.com/tensorflow/tensorflow/blob/9e26f3b56acbff18f01da8afce6b571739f59ef3/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L684\r\nhttps://github.com/tensorflow/tensorflow/blob/9e26f3b56acbff18f01da8afce6b571739f59ef3/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L719",
        "createdAt" : "2021-03-25T16:07:26Z",
        "updatedAt" : "2021-03-25T18:48:01Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "ac491afc-03ee-4836-926b-3bbbf6c3a741",
        "parentId" : "0506e1bc-a2b4-495a-8d2a-e3b0f2085d26",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "It should not be necessary to protect this. The ops that are tested are [looked up](https://github.com/tfeher/tensorflow/blob/08c1685acaa84704b61f6960d538538741e36791/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L6005-L6011) from [UnaryOperationMap](https://github.com/tfeher/tensorflow/blob/08c1685acaa84704b61f6960d538538741e36791/tensorflow/compiler/tf2tensorrt/convert/convert_nodes.cc#L4699-L4726) which has  the TRT version checks. \r\n\r\nI have fixed the two lines.",
        "createdAt" : "2021-03-25T17:09:26Z",
        "updatedAt" : "2021-03-25T18:49:04Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cb0941f7c0cd0955fbcf80907bec5a7f88a4768",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +5991,5995 @@  ADD_OP(\"Cosh\", ops::Cosh, std::cosh);\n  ADD_OP(\"Exp\", ops::Exp, std::exp);\n  ADD_OP(\"Erf\", ops::Erf, std::erf);\n  ADD_OP(\"Floor\", ops::Floor, std::floor);\n  ADD_OP(\"Log\", ops::Log, std::log);"
  },
  {
    "id" : "155ca63c-e0d2-4c14-87d1-0059753589fb",
    "prId" : 47039,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/47039#pullrequestreview-611749761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15a61a64-42a2-4a01-88fe-949fe2ea4007",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Sorry I don't see how are the values for \"conversion_status\" and \"runtime_status\" set?\r\n\r\nAlso, do we want to test different values for [the \"axis\" of the op ](https://github.com/tensorflow/tensorflow/blob/dcce8453cf036c668a41d8435a3c087d6012faa5/tensorflow/compiler/tf2tensorrt/convert/convert_nodes.cc#L5632) ?",
        "createdAt" : "2021-02-09T22:45:36Z",
        "updatedAt" : "2021-03-14T23:38:05Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "13e2984f-d3cb-4504-8047-e873a26c2c3a",
        "parentId" : "15a61a64-42a2-4a01-88fe-949fe2ea4007",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "conversion_status and runtime_status are value initialized according to c++ aggregate initialization rules. But they are not used, so I have removed them.\r\n\r\nI do not see any axis parameter for the [TF softmax op](https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/softmax), only the TRT layer has that param. The TF op assumes 2D input, first dim is the batch dim, second is the softmax dim.",
        "createdAt" : "2021-03-14T23:16:48Z",
        "updatedAt" : "2021-03-14T23:38:13Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "cec6088adf6cece4fda79e8c98d7ea3054b48831",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3649,3653 @@      TestParams{{1, 6},  // this works with arange(1,7) input\n                 {0.00426978, 0.01160646, 0.03154963, 0.08576079, 0.23312202,\n                  0.6336913}},\n  };\n  std::vector<float> input_values{1, 2, 3, 4, 5, 6};"
  },
  {
    "id" : "5a581962-7940-4929-a5b9-5b0d8ca5cdb9",
    "prId" : 46940,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46940#pullrequestreview-584513791",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d6371a8-d3b7-4f2c-b650-98a7802ffdf0",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "s/Get the/Gets a/",
        "createdAt" : "2021-02-05T16:42:39Z",
        "updatedAt" : "2021-02-23T18:52:44Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      }
    ],
    "commit" : "033135a0cb804a6e2232604af4ec6e1a86a02ac1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4683,4687 @@\n#if IS_TRT_VERSION_GE(6, 0, 0, 0)\n// Get the NodeDef for Pack.\nNodeDef GetConv3DNodeDef(std::vector<int> strides = {1, 1, 1, 1, 1},\n                         string padding = \"SAME\", string data_format = \"NCDHW\","
  },
  {
    "id" : "0ad4b4a4-ab1b-48c9-8cca-6942418058fa",
    "prId" : 46675,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46675#pullrequestreview-578782793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a05fdf4-1065-4cf0-9606-5fe480eb4d7a",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "In what situation dims.empty()? What shall we do in that case?",
        "createdAt" : "2021-01-26T17:34:09Z",
        "updatedAt" : "2021-02-02T07:46:35Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "f7b59f0e-48fc-490a-9083-e74ca907f348",
        "parentId" : "1a05fdf4-1065-4cf0-9606-5fe480eb4d7a",
        "authorId" : "7a011a45-bec1-4f51-b4ca-ba0fca447df9",
        "body" : "If you provide `partial_input_shape_dims` dims can be empty. This code is just here to add extra debug code. So we could print the `partial_input_shape_dims` if you want.",
        "createdAt" : "2021-01-27T22:16:04Z",
        "updatedAt" : "2021-02-02T07:46:35Z",
        "lastEditedBy" : "7a011a45-bec1-4f51-b4ca-ba0fca447df9",
        "tags" : [
        ]
      },
      {
        "id" : "98dac7e7-98e3-44a4-81fe-0b58bf421538",
        "parentId" : "1a05fdf4-1065-4cf0-9606-5fe480eb4d7a",
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Is this true that our test should always take some inputs and we can actuall ASSERT_TRUE(!dims.empty()) here?",
        "createdAt" : "2021-01-28T20:53:54Z",
        "updatedAt" : "2021-02-02T07:46:35Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "078db114-5c07-4c8c-b49f-ee7c106cc704",
        "parentId" : "1a05fdf4-1065-4cf0-9606-5fe480eb4d7a",
        "authorId" : "7a011a45-bec1-4f51-b4ca-ba0fca447df9",
        "body" : "@tfeher what do you think ?\r\n\r\nThe usecase I had in mind was the following: \r\n```cpp\r\ntest->AddTestTensor(\"input\", p.input_dims, test->get_tf_type(), p.input_value, partial_input_shape);\r\n```",
        "createdAt" : "2021-01-28T22:08:50Z",
        "updatedAt" : "2021-02-02T07:46:35Z",
        "lastEditedBy" : "7a011a45-bec1-4f51-b4ca-ba0fca447df9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0048c816d03a87ef764cc978728546a67bf5902a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1811,1815 @@                     const std::vector<int32>& partial_input_shape_dims = {},\n                     Status add_input_status = Status::OK()) {\n    if (!dims.empty()) {\n      const auto num_elements = std::accumulate(std::begin(dims),\n                                                std::end(dims),"
  },
  {
    "id" : "b9510e31-2ea1-49c8-b526-bee5109a9d03",
    "prId" : 46376,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/46376#pullrequestreview-572864997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac7bd13e-1164-488a-92eb-034f52b3f1ac",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Similar to the above, need a space.",
        "createdAt" : "2021-01-21T01:27:33Z",
        "updatedAt" : "2021-01-22T19:16:11Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      }
    ],
    "commit" : "278eca3e3ae46f64ffc5b7115aec13583a7be0f7",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +91,95 @@\nstring DebugString(const TrtTestMode mode) {\n  switch (mode){\n      case TrtTestMode::kImplicitBatch:\n      return \"kImplicitBatch\";"
  },
  {
    "id" : "38ecddf8-1127-42be-8043-e4c1988253af",
    "prId" : 40545,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40545#pullrequestreview-542931716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d04a70b6-a663-4fc7-8588-52ceb681a28b",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "-1 in the reshaped shape is a wildcard. Shall we test that we reject  the case where we have two wildcards in the reshaped shape?\r\nhttps://docs.nvidia.com/deeplearning/tensorrt/developer-guide/#ishuffle-tensors",
        "createdAt" : "2020-11-14T02:08:05Z",
        "updatedAt" : "2021-03-09T22:29:02Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "c4634927-56c1-4323-94b9-ff019949868a",
        "parentId" : "d04a70b6-a663-4fc7-8588-52ceb681a28b",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "According to the TF doc: \" At most one component of shape can be -1.\", so having more than one wildcard would be an invalid TF graph. I believe it is a reasonable assumption that we convert a valid graph. Therefore I would skip the extra test.",
        "createdAt" : "2020-12-02T17:22:13Z",
        "updatedAt" : "2021-03-09T22:29:02Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ef8f0dc44b84032bb2cc5401c84a3afe3dd6f2",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +2425,2429 @@      TestParams{{2, 1, 2, 3}, {-1, 1, 4}, {3, 1, 4}, reshape_batch_status},\n      // Tests that should succeed in every trt_mode.\n      TestParams{{1, 1, 2, 3}, {-1, 1, 3, 2}, {1, 1, 3, 2}},\n      TestParams{{1, 1, 2, 3}, {1, 1, -1}, {1, 1, 6}},\n      TestParams{{1, 1, 2, 3}, {1, 1, 3, 2}},"
  },
  {
    "id" : "2bb40fab-7a7c-46c4-91dc-b9f32a77c037",
    "prId" : 40201,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40201#pullrequestreview-453487645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63e6dc8f-27d2-4ea1-8124-902551f646a5",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Let's swap the order for these two lines of comments.",
        "createdAt" : "2020-07-21T00:41:01Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "cfc7576e-93bd-4381-9ad0-2b0ccdc3f1f6",
        "parentId" : "63e6dc8f-27d2-4ea1-8124-902551f646a5",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "I have added the missing test, so the second comment is removed now. ",
        "createdAt" : "2020-08-03T15:12:18Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b6172f744fca952af09113eee709d1bed0db4de",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +5081,5085 @@TEST_P(OpConverterTest1, ConvertReduce) {\n  {\n    // Input is weights, should fail.\n    Reset();\n    const NodeDef node_def = CreateReduceOp<ops::Sum>(tf_type, false);"
  },
  {
    "id" : "3b5aaeab-a5af-483c-acd1-693b2f45944d",
    "prId" : 40201,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40201#pullrequestreview-453487645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d173faa-f879-42a9-8770-49a5cee3dc6c",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Why you need \"erase\" here? Can you explain? I think you only need to keep std::remove(...) without changing the functionality here.",
        "createdAt" : "2020-07-21T01:00:03Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "420d7aa1-0206-4b47-8b5f-839b2cb03340",
        "parentId" : "7d173faa-f879-42a9-8770-49a5cee3dc6c",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "\"A call to remove is typically followed by a call to a container's erase method, which erases the unspecified values and reduces the physical size of the container to match its new logical size.\" [std::remove](https://en.cppreference.com/w/cpp/algorithm/remove)\r\n\r\nAssume we have input shape [2,3,1] and we do a TF reduction over axis=1. When keep_dims==False, then the expected output shape should be [2,1]. To get this shape:\r\n1. The for loop marks with zero the axis to be removed: [2,0,1].\r\n2. std::remove rearranges the container as [2,1,1], where only the first two elements are valid.\r\n3. std::erase removes the invalid element (last element) leading to [2,1]. ",
        "createdAt" : "2020-08-04T14:12:10Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b6172f744fca952af09113eee709d1bed0db4de",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +5181,5185 @@          }\n        }\n        expected_output_dims.erase(std::remove(expected_output_dims.begin(),\n                                               expected_output_dims.end(), 0),\n                                   expected_output_dims.end());"
  },
  {
    "id" : "025f1128-d3b5-426d-9075-3c506a27e334",
    "prId" : 40201,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40201#pullrequestreview-453487645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9495614-97cf-4259-b5b7-e305ec9075f6",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Again, I don't understand \"keep_dims\" and this code here. The output dimensions should be related to the input dimensions and the axis being reduced.",
        "createdAt" : "2020-07-21T01:09:15Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "9ac9aeb8-0b28-467b-af82-e8eea90767e2",
        "parentId" : "b9495614-97cf-4259-b5b7-e305ec9075f6",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "When keep_dims is true, then we keep a singleton dimension, otherwise with zero we mark that the corresponding axis should be removed. ",
        "createdAt" : "2020-08-04T14:06:03Z",
        "updatedAt" : "2020-08-04T14:54:10Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b6172f744fca952af09113eee709d1bed0db4de",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +5172,5176 @@            int ax_positive = ax >= 0 ? ax : ax + rank;\n            // Zero marks elements that we will remove later.\n            expected_output_dims[ax_positive] = keep_dims ? 1 : 0;\n            if (trt_mode == TrtTestMode::kImplicitBatch &&\n                (ax == 0 || ax == -rank)) {"
  },
  {
    "id" : "6590253e-8896-4c12-ba3b-bdd22761eadd",
    "prId" : 40184,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40184#pullrequestreview-443406716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7007e9fb-fdd7-4e71-b48b-d552769c2cda",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Is it possible to test strides values beyond 1?",
        "createdAt" : "2020-06-26T00:39:20Z",
        "updatedAt" : "2020-07-06T21:53:09Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "e885fcc0-2a05-4f14-8b43-ec36483393c9",
        "parentId" : "7007e9fb-fdd7-4e71-b48b-d552769c2cda",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "Stride 2 tests are defined [here](https://github.com/tfeher/tensorflow/blob/b3ff87be5cf90f977050abe5fbfaa699db0920b8/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L4736).",
        "createdAt" : "2020-07-06T21:45:50Z",
        "updatedAt" : "2020-07-06T21:53:09Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4661a4fa34205aad469e5197ac145ab9e272d386",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +4725,4729 @@                 /*expected_outputs=*/{{88}, {14.444445}, {105}, {17}}},\n      // 3x3 pooling, NDHWC\n      TestParams{/*input_dims=*/{1, 3, 3, 3, 1},\n                 /*input=*/common_input,\n                 /*ksize=*/{1, 3, 3, 3, 1},"
  },
  {
    "id" : "91956723-1da0-4db9-8346-e5e1dffc8622",
    "prId" : 40179,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40179#pullrequestreview-444536720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7dcbe93-2c26-42d8-ac46-08d14be57342",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Shall we add this?\r\nelse {\r\nEXPECT_GE(epsilon, 0);\r\n}",
        "createdAt" : "2020-07-07T18:23:15Z",
        "updatedAt" : "2020-07-20T14:58:19Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "426e0731-d0d6-44d2-a59c-9a2f3d86e676",
        "parentId" : "a7dcbe93-2c26-42d8-ac46-08d14be57342",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "Yes, why not.",
        "createdAt" : "2020-07-08T08:51:48Z",
        "updatedAt" : "2020-07-20T14:58:19Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "45591fac1d5a9042e205832e60c2fc4bfaeadfdc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2028,2032 @@  } else {\n    EXPECT_GE(epsilon, 0);\n  }\n  return T(s.WithOpName(\"my_batchnorm\"), x, scale, offset, mean, variance,\n           attrs)"
  },
  {
    "id" : "093778e3-61ee-4b94-bf56-1ff2dc3afdfa",
    "prId" : 39155,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39155#pullrequestreview-412963933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "060d2575-7cea-48ab-aa15-29126a92d05d",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Can we use  set_shape(const TensorShape& shape) to avoid the copy here?",
        "createdAt" : "2020-05-15T01:46:36Z",
        "updatedAt" : "2020-05-19T21:31:07Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "f0356d82-5d21-4c61-bb00-9b7ab5ffea75",
        "parentId" : "060d2575-7cea-48ab-aa15-29126a92d05d",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "We could, but the comments at [set_shape](https://github.com/tensorflow/tensorflow/blob/340ac1aedb082dbf3092608354c8f5a1d2d276d9/tensorflow/core/framework/tensor.h#L685) make me wonder whether it is a good idea to rely on that function.\r\n\r\nActially there is [no copy involved](https://github.com/tensorflow/tensorflow/blob/340ac1aedb082dbf3092608354c8f5a1d2d276d9/tensorflow/core/framework/tensor.cc#L685) because the source and the destination tensors are the same. Therefore I would keep this form. ",
        "createdAt" : "2020-05-15T21:11:41Z",
        "updatedAt" : "2020-05-19T21:31:07Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0149adb93c612f2c1f7fb6fc294ebcfee8e36a",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1381,1385 @@    TensorShape shape;\n    TF_EXPECT_OK(TensorShapeUtils::MakeShape(input_dims, &shape));\n    CHECK(ret.CopyFrom(ret, shape));\n    return ret;\n  }"
  },
  {
    "id" : "26d2c069-8c28-4ab8-9611-dde26481dd4b",
    "prId" : 39155,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39155#pullrequestreview-412963933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e817f6d8-3acd-4f68-a791-b08fa619bf60",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Remove \"else\" to be consistent with the rest of the code in the routine.",
        "createdAt" : "2020-05-15T01:57:24Z",
        "updatedAt" : "2020-05-19T21:31:07Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "577f150e-361f-4fd2-969a-35c283b53cc4",
        "parentId" : "e817f6d8-3acd-4f68-a791-b08fa619bf60",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "I have added two more else instead to be both consistent and correct (otherwise we fail unconditionally). This error was not yet observed because this routine is not yet used, but upcoming op converter modifications will make use of it.",
        "createdAt" : "2020-05-15T22:15:55Z",
        "updatedAt" : "2020-05-19T21:31:07Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc0149adb93c612f2c1f7fb6fc294ebcfee8e36a",
    "line" : 278,
    "diffHunk" : "@@ -1,1 +1557,1561 @@    if (tf_dtype == DT_FLOAT) {\n      AddTestWeights(name, dims, CastTestVector<T, float>(values));\n    } else if (tf_dtype == DT_HALF) {\n      AddTestWeights(name, dims, CastTestVector<T, Eigen::half>(values));\n    } else if (tf_dtype == DT_INT32) {"
  },
  {
    "id" : "1873dbfa-f781-4c86-8dbb-34f885a455db",
    "prId" : 39151,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39151#pullrequestreview-405400644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd17c996-2857-44d3-a468-d19151565b7c",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "The branches for HALF AND INT32 are not dead code because we only test DT_FLOAT. Do you actually mean DT_INT8 not DT_INT32?",
        "createdAt" : "2020-05-04T20:50:48Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "1d5cad04-0b15-425b-aea0-69f79e226e30",
        "parentId" : "fd17c996-2857-44d3-a468-d19151565b7c",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "The transpose and squeeze op converters are only tested in DT_FLOAT mode. But the [BiasAdd](https://github.com/tfeher/tensorflow/blob/c8fb78c641f4c40ffa1fde60cd2613e31a0c78e5/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L1712-L1721) converter is tested for both DT_FLOAT and DT_HALF. \r\n\r\nNo, I did not mean DT_INT8. DT_INT32 is the only other valid input type that we currently support:\r\nhttps://github.com/tensorflow/tensorflow/blob/c0c50682f5f77b0aab79797a1bbdb968efc00f5f/tensorflow/compiler/tf2tensorrt/convert/convert_nodes.cc#L96-L113\r\n\r\nThe [gather op will be tested](https://github.com/tensorflow/tensorflow/blob/c0c50682f5f77b0aab79797a1bbdb968efc00f5f/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L5096) with DT_INT32 input types too, therefore I have added an instantiation for that too.\r\n\r\nHaving said that INT8 is also a possible input [data type](https://docs.nvidia.com/deeplearning/sdk/tensorrt-api/c_api/namespacenvinfer1.html#afec8200293dc7ed40aca48a763592217) for TensorRT, and we should add TF-TRT support in the future for that. ",
        "createdAt" : "2020-05-04T23:19:40Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d7bc67748c26121d821916e5d32cce63daeb83e",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +1739,1743 @@  if (tf_dtype == DT_FLOAT) {\n    BuildAndRunConvertedNetwork<DT_FLOAT>(name, test, p, input_vec, matcher);\n  } else if (tf_dtype == DT_HALF) {\n    BuildAndRunConvertedNetwork<DT_HALF>(name, test, p, input_vec, matcher);\n  } else if (tf_dtype == DT_INT32) {"
  },
  {
    "id" : "c31fba38-0b44-4d81-a23b-fd616912849c",
    "prId" : 39151,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/39151#pullrequestreview-406003044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0538e2a3-235f-484d-9d60-080ddaad00bb",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "It would be nice if we can find a way to test all the combination for one op.",
        "createdAt" : "2020-05-04T20:51:55Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "b588d8e8-ae7e-44bd-96f7-fd816f5a55c2",
        "parentId" : "0538e2a3-235f-484d-9d60-080ddaad00bb",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "It is possible to test FP32 and FP16 for any input type combination. Testing in INT8 mode, is currently only supported with INT32 input. \r\n\r\nI am not sure what do you mean by your comment. One could have different base classes instantiated for different parameter combinations. For example in PR #39156, I defined another base class to test the BiasAdd converter both in FP32 and FP16 precision. https://github.com/tfeher/tensorflow/blob/c8fb78c641f4c40ffa1fde60cd2613e31a0c78e5/tensorflow/compiler/tf2tensorrt/convert/convert_nodes_test.cc#L1712-L1721\r\n\r\nSimilarily one could have another base class with all the possible test param combinations. We can use this a base class of those ops that we want to test in all combinations.  Every other op would be derived from the current `ParameterizedOpConverterTest`\r\n```c++\r\n// Parameterized version of OpConverterTest. This test is instantiated for all possible combinations of test parameters.\r\nclass ParameterizedOpConverterTestWithAllCombination\r\n    : public OpConverterTest,\r\n      public ::testing::WithParamInterface<\r\n          std::tuple<TrtTestMode, DataType, TrtPrecisionMode>> {};\r\n\r\nINSTANTIATE_TEST_CASE_P(\r\n    OpConvTestAll, ParameterizedOpConverterTestWithAllCombinations,\r\n    ::testing::Combine(::testing::ValuesIn(ValidTrtModes),\r\n                       ::testing::Values(DT_FLOAT, DT_HALF, DT_INT32),\r\n                       ::testing::Values(TrtPrecisionMode::FP32, TrtPrecisionMode::FP16, TrtPrecisionMode::INT8)));\r\n   // actually this instantiation should be changed in a way that INT8 mode is only added in combination with DT_INT32 input.\r\n```\r\n\r\nShall I add this, or did you mean to ask something else?",
        "createdAt" : "2020-05-04T23:09:12Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      },
      {
        "id" : "08b9495d-120d-48ff-bab9-fcb415930ee2",
        "parentId" : "0538e2a3-235f-484d-9d60-080ddaad00bb",
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Can we change the description for this class to explicit stay that it is for testing ops with combination of (implicit, explicit, dynamic shape) x (DT_FLOAT) X (TrtPrecisionMode::FP32)?",
        "createdAt" : "2020-05-05T16:17:04Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "20027524-1761-4f23-bafd-b23578e0ed20",
        "parentId" : "0538e2a3-235f-484d-9d60-080ddaad00bb",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "Yes, I have changed the description. ",
        "createdAt" : "2020-05-05T17:27:05Z",
        "updatedAt" : "2020-05-05T17:27:15Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d7bc67748c26121d821916e5d32cce63daeb83e",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +1687,1691 @@//   how TRT handles the precision inside the TRT network, but should not matter\n//   for the TF -> TRT conversion. Therefore it should be sufficient to test\n//   for FP32.\nINSTANTIATE_TEST_CASE_P(\n    OpConvTestInstantiation, ParameterizedOpConverterTest,"
  },
  {
    "id" : "efa72c8f-4fb5-44df-bbdc-9ad21428b71d",
    "prId" : 27439,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/27439#pullrequestreview-225062243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd1df9df-3d8e-4475-a7da-eee703f6873e",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Can we have a test case where non of the input/output dims are 1? E.g. for depth_to_space input shape is (2, 2, 8) output shape is (4,4,2) with NHWC, and similar for space_to_depth?",
        "createdAt" : "2019-04-10T20:33:54Z",
        "updatedAt" : "2019-04-10T23:11:05Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d25b48775a1e136142c8939802d49d6e886e37f",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +4990,4994 @@      },\n      {\n          /*input_shape=*/{2, 2, 4},\n          /*input_value=*/common_input,\n          /*block_size=*/2,"
  },
  {
    "id" : "7335acfe-0284-41ae-bc9f-05671a1206ca",
    "prId" : 25531,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25531#pullrequestreview-202338516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "642adc4b-dbb9-414b-a54a-7173ffd5db96",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Why removing the `Beging out of bounds` and `End out of bounds` test cases?",
        "createdAt" : "2019-02-10T06:44:35Z",
        "updatedAt" : "2019-02-14T16:59:00Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      },
      {
        "id" : "589e4b75-dd42-4b53-b7ef-be569b281cba",
        "parentId" : "642adc4b-dbb9-414b-a54a-7173ffd5db96",
        "authorId" : "7604040f-899b-4297-b5a5-c102eff4447a",
        "body" : "StridedSlice implicitly clamps begin/end to be in bounds. Previously we just failed the conversion if the begin or end was out of bounds but now we duplicate that behavior in the converter. I will add some tests to make sure the clamping is working. ",
        "createdAt" : "2019-02-11T21:09:43Z",
        "updatedAt" : "2019-02-14T16:59:00Z",
        "lastEditedBy" : "7604040f-899b-4297-b5a5-c102eff4447a",
        "tags" : [
        ]
      }
    ],
    "commit" : "63edb33a3a7b9d262b9beae650e36fc0d96ce9ec",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +2634,2638 @@    RunValidationAndConversion(node_def);\n  }\n// TRT 5.1+ supports strides\n#if NV_TENSORRT_MAJOR > 5 || (NV_TENSORRT_MAJOR == 5 && NV_TENSORRT_MINOR >= 1)\n  {"
  },
  {
    "id" : "b286a780-e10b-44f8-8416-2269e89fe978",
    "prId" : 25531,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/25531#pullrequestreview-201889170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64722df-255f-474a-b177-1432b220b5fb",
        "parentId" : null,
        "authorId" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "body" : "Can we move the definition of `input_data` in line 2863 before these params, so we can check the expected output easier?",
        "createdAt" : "2019-02-10T06:53:04Z",
        "updatedAt" : "2019-02-14T16:59:00Z",
        "lastEditedBy" : "1c0d3996-f30e-4521-a42e-7a5cdc08f5b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "63edb33a3a7b9d262b9beae650e36fc0d96ce9ec",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +2710,2714 @@               /*begin_mask=*/get_mask({0, 0, 0, 0}),\n               /*end_mask=*/get_mask({1, 1, 0, 0}),\n               /*expected_output_dims=*/{1, 1, 2}, /*expected_output=*/{1, 2}},\n    TestParams{\n        /*input_dims=*/{1, 2, 3},"
  }
]