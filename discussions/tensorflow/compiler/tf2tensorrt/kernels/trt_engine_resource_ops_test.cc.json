[
  {
    "id" : "d853ad2e-e286-41a3-bef3-74cd5de575de",
    "prId" : 40545,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40545#pullrequestreview-605827721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6c62433-1223-4200-84c8-dd162474f362",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "I think \"1\" here is not correct. The \"shape\" is 1D but has 2 elements. We should\r\ns/1/param_.dims.nbDims/",
        "createdAt" : "2021-03-04T22:07:53Z",
        "updatedAt" : "2021-03-09T22:29:02Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "a43c91a1-fe36-4a4a-b749-bb8818d6b365",
        "parentId" : "d6c62433-1223-4200-84c8-dd162474f362",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "You are right that shape has to have 2 elements, the test would fail otherwise. I use here an initializer_list to define the two elements to be 1 and i. I have added a comment to clarify that.",
        "createdAt" : "2021-03-07T10:29:02Z",
        "updatedAt" : "2021-03-09T22:29:03Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ef8f0dc44b84032bb2cc5401c84a3afe3dd6f2",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +184,188 @@          // Define shape values {1, i}, where 1 is the value of the first dim,\n          // and i is the value of the second dimension.\n          std::vector<int32> vals{1, i};\n          std::copy_n(vals.data(), vals.size(),\n                      shape_tensor.flat<int32_t>().data());"
  },
  {
    "id" : "7dcf5eb0-3c67-4c83-b3f0-0b4389f02c0d",
    "prId" : 40545,
    "prUrl" : "https://github.com/tensorflow/tensorflow/pull/40545#pullrequestreview-605827721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d53501a-3460-4aee-a38c-6fa6aee28ce3",
        "parentId" : null,
        "authorId" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "body" : "Let's add a brief comment to describe the loop.",
        "createdAt" : "2021-03-04T22:20:17Z",
        "updatedAt" : "2021-03-09T22:29:02Z",
        "lastEditedBy" : "90c49754-7917-45e3-8dd2-8e09527f3d4c",
        "tags" : [
        ]
      },
      {
        "id" : "4543b1a3-cc46-456b-8b45-49a3a3efb7bd",
        "parentId" : "8d53501a-3460-4aee-a38c-6fa6aee28ce3",
        "authorId" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "body" : "Added.",
        "createdAt" : "2021-03-07T10:20:06Z",
        "updatedAt" : "2021-03-09T22:29:03Z",
        "lastEditedBy" : "c5cb8841-0e3d-4435-b088-7d6beb78afd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "47ef8f0dc44b84032bb2cc5401c84a3afe3dd6f2",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +162,166 @@      profile.SetShapeTensorMask(network.get());\n      // The for loop defines three optimization profiles for the network.\n      for (int i = 1; i <= 3; i++) {\n        const int n_input = param_.n_inputs;\n        std::vector<TensorShape> shape_vec(n_input);"
  }
]