[
  {
    "id" : "c7118e8d-79a0-42cc-870c-7ef0ede913e9",
    "prId" : 1652,
    "prUrl" : "https://github.com/scalameta/metals/pull/1652#pullrequestreview-397908482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed984cf3-7ee2-46de-a1c6-7ab7872d6cc9",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "I'm curious if showing the `unambiguous` is a bit verbose to the user.\r\n```suggestion\r\n    s\"Import all possible missing symbols\"\r\n```\r\nWhat do you think?",
        "createdAt" : "2020-04-22T07:35:08Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +98,102 @@\n  def allSymbolsTitle: String =\n    s\"Import all missing symbols that are unambiguous\"\n}"
  },
  {
    "id" : "40cc9625-e1f2-4f7a-a654-25691e15a14a",
    "prId" : 1652,
    "prUrl" : "https://github.com/scalameta/metals/pull/1652#pullrequestreview-398813152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bb15bb8-a7d3-4093-9fb1-ba5eb4d70a59",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I think we could just join all the textEdits into a single text edit, which might help with the tests and the additional newline. ",
        "createdAt" : "2020-04-22T14:27:30Z",
        "updatedAt" : "2020-04-23T06:23:45Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "3dd7e9a4-3154-44ef-b375-b5122763ed73",
        "parentId" : "9bb15bb8-a7d3-4093-9fb1-ba5eb4d70a59",
        "authorId" : "d65ae60c-f64a-455b-9921-2dd97f42fac9",
        "body" : "I managed to fix everything that way without changing anything to the TextEdits.scala file. I don't know if this is the right way but it seems that imports are always coming in different order so maybe it is.",
        "createdAt" : "2020-04-23T07:04:40Z",
        "updatedAt" : "2020-04-23T07:04:40Z",
        "lastEditedBy" : "d65ae60c-f64a-455b-9921-2dd97f42fac9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6210392e5ab0214ee811acda5622269e560acfec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +73,77 @@        allSymbols.setKind(l.CodeActionKind.QuickFix)\n        allSymbols.setDiagnostics(diags.asJava)\n        allSymbols.setEdit(new l.WorkspaceEdit(Map(uri -> edits.asJava).asJava))\n\n        allSymbols +: codeActions"
  },
  {
    "id" : "614dbac7-2bc4-471c-b021-77fb6b543e8b",
    "prId" : 1286,
    "prUrl" : "https://github.com/scalameta/metals/pull/1286#pullrequestreview-341529431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b355096-e4c6-4d29-8996-c58a31bce1da",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "we cannot use `encloses` because sometimes the code action range is smaller than the diagnostic range, for example:\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//       <-->   code action range\r\n```\r\n\r\nor even partially overlapping\r\n\r\n```scala\r\nval x = Future.successful(2)\r\n//      ^^^^^^  diagnostic range\r\n//         <------->   code action range\r\n```",
        "createdAt" : "2020-01-11T16:13:19Z",
        "updatedAt" : "2020-01-11T17:12:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e6135a896a913f6ec9a1ae82ca098806ffdfea3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +47,51 @@      .sequence(params.getContext().getDiagnostics().asScala.collect {\n        case d @ ScalacDiagnostic.SymbolNotFound(name)\n            if params.getRange().overlapsWith(d.getRange()) =>\n          importMissingSymbol(d, name)\n      })"
  }
]