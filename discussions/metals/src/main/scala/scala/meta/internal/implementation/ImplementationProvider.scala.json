[
  {
    "id" : "0d0874d0-d7d0-4fe4-8426-eac8242a6ef1",
    "prId" : 1679,
    "prUrl" : "https://github.com/scalameta/metals/pull/1679#pullrequestreview-403435059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c5a4d7e-130f-4d37-8391-472b5b71e213",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This will duplicate the GlobalClassTable and use twice as much memory for workspace, it should only have one instance in the workspace.",
        "createdAt" : "2020-04-30T10:52:12Z",
        "updatedAt" : "2020-04-30T11:31:56Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "c59bb7b1-6d86-472d-92a1-c71d90118fa3",
        "parentId" : "5c5a4d7e-130f-4d37-8391-472b5b71e213",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "good catch! as globalTable is available in ImplementationProvider I changed this to:\r\n`globalTable.globalSymbolTableFor(anyWorkspacePath)`",
        "createdAt" : "2020-04-30T11:33:07Z",
        "updatedAt" : "2020-04-30T11:33:07Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef497ba77ea264fe4a0d730a77c5fc2bbf3dbb8e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +93,97 @@      textDocument: TextDocument\n  ): String => Option[SymbolInformation] = {\n    lazy val global =\n      globalTable.globalSymbolTableFor(anyWorkspacePath)\n    val textSymbolsMap = textDocument.symbols.map(s => s.symbol -> s).toMap"
  },
  {
    "id" : "93060103-99e6-4b16-86db-986ace0c04ff",
    "prId" : 1487,
    "prUrl" : "https://github.com/scalameta/metals/pull/1487#pullrequestreview-373444383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2d0658c-5f33-47ae-b466-4432abdc05d9",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "the path can already be resolved via `workspace.resolve(document.uri)` - not sure if we need the additional case class.",
        "createdAt" : "2020-03-12T11:32:05Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +373,377 @@      symbolDefinition <- findSymbolDefinition(symbol)\n      document <- findSemanticdb(symbolDefinition.path)\n    } yield TextDocumentWithPath(document, symbolDefinition.path)\n  }\n"
  },
  {
    "id" : "d42b228a-614a-42be-b4dc-60e5fd8f79a7",
    "prId" : 962,
    "prUrl" : "https://github.com/scalameta/metals/pull/962#pullrequestreview-297808365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Later when we look for the implementation we load semanticDB for the file and find occurence in `textDocument.occurences`, can the same situation happen there? If the annotation is on the implementing class? ",
        "createdAt" : "2019-10-05T17:15:52Z",
        "updatedAt" : "2019-10-05T19:47:45Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "c3279d52-307c-4af6-a1df-ebb0adba58aa",
        "parentId" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "ah, I think so. The occurrence of the sealed trait is not a \"definition\" anymore in that case (it's a \"reference\" IIRC). Can you think of a test case for stressing it?",
        "createdAt" : "2019-10-05T17:28:27Z",
        "updatedAt" : "2019-10-05T19:47:45Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "b704922f-bd48-4ac6-a7cc-34b8686df65c",
        "parentId" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "That could be a modified test case in this PR I think:\r\n```\r\n    \"\"\"|/a/src/main/scala/a/Main.scala\r\n       |package a\r\n       |import io.circe.generic.JsonCodec\r\n       |trait Be@@ing\r\n       |@JsonCodec sealed trait <<Animal>> extends Being\r\n       |object Animal {\r\n       |  case object <<Dog>> extends Animal\r\n       |  case object <<Cat>> extends Animal\r\n       |}\r\n       |\"\"\".stripMargin\r\n```\r\n\r\nthis most likely will not find `Animal`",
        "createdAt" : "2019-10-05T18:04:56Z",
        "updatedAt" : "2019-10-05T19:47:45Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "6378f2fb-0b29-4f6e-8a09-6c4645aeebc8",
        "parentId" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "you're right, I've added the (now failed) test, so that we can work on this tomorrow.",
        "createdAt" : "2019-10-05T18:12:17Z",
        "updatedAt" : "2019-10-05T19:47:45Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "b813078a-2c2b-4187-8914-c3a37736a3fb",
        "parentId" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "ok, I've pushed a fix for that case too. There's indeed a lot of repetion and I hope we can come up with a more harmonized strategy for finding a definition of a symbol in the next days.",
        "createdAt" : "2019-10-05T19:48:59Z",
        "updatedAt" : "2019-10-05T19:48:59Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "6f2afe24-7d22-4d8a-9060-194a1f237da6",
        "parentId" : "5037fb94-41b0-4b70-bc66-f6fa600c318c",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Thanks @gabro !",
        "createdAt" : "2019-10-05T20:56:59Z",
        "updatedAt" : "2019-10-05T20:56:59Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "995c18d3e0d073e1c66f1accaf5efc94a5889a07",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +92,96 @@        currentDocument\n      )\n      symbolOccurrence <- {\n        lazy val mtagsOccurrence = Mtags\n          .allToplevels(source.toInput)"
  },
  {
    "id" : "4349c5cf-b3c1-4d05-9c8e-e3b67b7c8215",
    "prId" : 962,
    "prUrl" : "https://github.com/scalameta/metals/pull/962#pullrequestreview-297822231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3769b6e7-d1bc-471c-9c01-f930b43517f4",
        "parentId" : null,
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "```suggestion\r\n        def mtagsOccurrence = Mtags\r\n```",
        "createdAt" : "2019-10-06T06:57:17Z",
        "updatedAt" : "2019-10-06T06:59:05Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "995c18d3e0d073e1c66f1accaf5efc94a5889a07",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +93,97 @@      )\n      symbolOccurrence <- {\n        lazy val mtagsOccurrence = Mtags\n          .allToplevels(source.toInput)\n          .occurrences"
  }
]