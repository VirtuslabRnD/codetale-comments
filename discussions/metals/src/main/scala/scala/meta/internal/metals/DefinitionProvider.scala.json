[
  {
    "id" : "1520b0d3-0c21-4005-8825-a151ed37d5fa",
    "prId" : 2668,
    "prUrl" : "https://github.com/scalameta/metals/pull/2668#pullrequestreview-640321575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf4934a0-e433-4d21-8732-bf1e985501a3",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Couldn't this be simplified to just `List`? Whenever I see `Option[List]` I always think that unless there is a real difference between `None` and `Some(List.empty)`.",
        "createdAt" : "2021-04-17T14:31:34Z",
        "updatedAt" : "2021-04-23T16:07:36Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "568ecd04-b9bb-4668-84f9-aeb87d68603e",
        "parentId" : "bf4934a0-e433-4d21-8732-bf1e985501a3",
        "authorId" : "2df071f3-6c0f-4323-b87d-c872a042f228",
        "body" : "Yep, I agree that in most cases `Option[List[A]]` should be reduced to `List[A]`.\r\n\r\nHowever, here it's used only in inner functions just to take benefits from `orElse` combinator in usage below - https://github.com/scalameta/metals/blob/a82a14240bd55284ba220650fe5a70c4198b5cde/metals/src/main/scala/scala/meta/internal/metals/DefinitionProvider.scala#L305-L308\r\nOtherwise, I had to introduce smth like `orElseIfNil` for `List` for this small part of code.",
        "createdAt" : "2021-04-20T16:40:40Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "2df071f3-6c0f-4323-b87d-c872a042f228",
        "tags" : [
        ]
      },
      {
        "id" : "fe9e9825-af8b-442e-8fa9-d315fb25fe4e",
        "parentId" : "bf4934a0-e433-4d21-8732-bf1e985501a3",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Alright sounds good 👍🏼 ",
        "createdAt" : "2021-04-20T18:55:30Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3fcc251f9126b13a9372df15273d675aff8f745",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +310,314 @@  ): List[BuildTargetIdentifier] = {\n    def trivialSource: Option[List[BuildTargetIdentifier]] =\n      Option(buildTargets.sourceBuildTargets(source).toList).filter(_.nonEmpty)\n\n    def dependencySource: Option[List[BuildTargetIdentifier]] = {"
  },
  {
    "id" : "67628175-5af6-4057-baf5-938747c81bfb",
    "prId" : 2668,
    "prUrl" : "https://github.com/scalameta/metals/pull/2668#pullrequestreview-638229121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdfa0624-3cca-4e86-a054-7e06c71cfc92",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Same question as above, is the `Option[List` necessary?",
        "createdAt" : "2021-04-17T14:32:06Z",
        "updatedAt" : "2021-04-23T16:07:37Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3fcc251f9126b13a9372df15273d675aff8f745",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +312,316 @@      Option(buildTargets.sourceBuildTargets(source).toList).filter(_.nonEmpty)\n\n    def dependencySource: Option[List[BuildTargetIdentifier]] = {\n      source.jarPath\n        .map(path => buildTargets.inverseDependencySource(path).toList)"
  },
  {
    "id" : "473d19f4-b884-4a7c-951e-47cdd83a57b2",
    "prId" : 1953,
    "prUrl" : "https://github.com/scalameta/metals/pull/1953#pullrequestreview-456811465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7098754e-f747-46ea-8115-a20325f5a9fd",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This is essencialy the same code.",
        "createdAt" : "2020-07-28T16:34:12Z",
        "updatedAt" : "2020-07-29T09:58:03Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ae4deec700724213f99d4fbeee5535331d1873",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +255,259 @@      destinationDoc = bestTextDocument(symbolDefinition)\n      destinationPath = symbolDefinition.path.toFileOnDisk(workspace)\n      destinationDistance =\n        buffers.tokenEditDistance(destinationPath, destinationDoc.text)\n    } yield {"
  },
  {
    "id" : "06eb3bae-ebd4-4ff4-9505-20c6ad5d1f95",
    "prId" : 1547,
    "prUrl" : "https://github.com/scalameta/metals/pull/1547#pullrequestreview-382982067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6309015a-c98f-48fe-91dd-79b082897047",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Maybe `Option[RemoteLanguageServer]` ? It will be more clear that it might not be available.",
        "createdAt" : "2020-03-27T15:43:13Z",
        "updatedAt" : "2020-03-27T19:26:28Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "78fdef6d-e056-49fd-828c-aa1316fa6ba2",
        "parentId" : "6309015a-c98f-48fe-91dd-79b082897047",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "The remote language server can be configured at runtime based on the `remoteLanguageServer` user option. The `isEnabledForPath` method is the way to determine if it's enabled or not.",
        "createdAt" : "2020-03-27T15:50:06Z",
        "updatedAt" : "2020-03-27T19:26:42Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "922329228964c110122b6e35a403b21a3c4d3f3e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +47,51 @@    warnings: Warnings,\n    compilers: () => Compilers,\n    remote: RemoteLanguageServer\n)(implicit ec: ExecutionContext) {\n"
  },
  {
    "id" : "8057dacd-2b62-4553-b3da-8af01e1bf346",
    "prId" : 1547,
    "prUrl" : "https://github.com/scalameta/metals/pull/1547#pullrequestreview-383222838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d2ebbb9-d389-4f20-bc94-17747e278c99",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Is ` fromSemanticdb.isEmpty` needed?  If the `result.isEmpty` is true then ` fromSemanticdb.isEmpty` must also be true.",
        "createdAt" : "2020-03-27T19:42:49Z",
        "updatedAt" : "2020-03-27T19:45:33Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "349d7cc1-b70b-4fce-88b5-6ab89287aa42",
        "parentId" : "6d2ebbb9-d389-4f20-bc94-17747e278c99",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "We can get an empty result when the cursor is over a non-symbol position even if there’s a SemanticDB file. My goal was to try and isolate the “SemanticDB world” from the “remote language server world”",
        "createdAt" : "2020-03-27T21:57:20Z",
        "updatedAt" : "2020-03-27T21:57:20Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "922329228964c110122b6e35a403b21a3c4d3f3e",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +81,85 @@        compilers().definition(params, token)\n      } else {\n        if (result.isEmpty && fromSemanticdb.isEmpty) {\n          warnings.noSemanticdb(path)\n        }"
  },
  {
    "id" : "ad5a0c96-516a-47eb-9bbb-e628a25dfa06",
    "prId" : 1523,
    "prUrl" : "https://github.com/scalameta/metals/pull/1523#pullrequestreview-387678179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3191ee7f-2902-4653-b80c-95f299e452e9",
        "parentId" : null,
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "Nice improvement to readability 👍 ",
        "createdAt" : "2020-04-04T08:00:30Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +131,135 @@  ): ResolvedSymbolOccurrence = {\n    // Convert dirty buffer position to snapshot position in \"source\"\n    val sourceDistance = buffers.tokenEditDistance(source, snapshot.text)\n    val snapshotPosition = sourceDistance.toOriginal(\n      dirtyPosition.getLine,"
  },
  {
    "id" : "85ce9032-cbca-433a-baf5-c31029f89194",
    "prId" : 1487,
    "prUrl" : "https://github.com/scalameta/metals/pull/1487#pullrequestreview-373444383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b061d70f-bebe-488d-bbf9-5e4db9426dfe",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Maybe we could do it the other way, switch the parameters in the rest to Position, and just add methods that extract position from TextDocumentParams",
        "createdAt" : "2020-03-12T11:37:39Z",
        "updatedAt" : "2020-03-24T16:45:28Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "55838e6c9f4127bc8d06a8d31a6df496a0b729a8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +93,97 @@      .map(symDef => symDef.path.toInputFromBuffers(buffers))\n\n  def symbolOccurrence(\n      source: AbsolutePath,\n      dirtyPosition: Position"
  },
  {
    "id" : "94bc022e-e217-423b-90c4-c0aa008242ea",
    "prId" : 651,
    "prUrl" : "https://github.com/scalameta/metals/pull/651#pullrequestreview-225940654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "does it make sense to warn even in cases in which there's a fallback available?\r\nMaybe the warning could include info about whether Metals has found the fallback or not ",
        "createdAt" : "2019-04-12T07:48:56Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "1c0250b5-6857-4117-84ab-ac2a4e888626",
        "parentId" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I decided to keep the warning and leave it to a separate PR to overall improve the UX (reduce warnings/noise) when semanticdb-scalac is not enabled.",
        "createdAt" : "2019-04-12T07:50:32Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "86868439-97f0-4f72-b150-cfd177935408",
        "parentId" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "This warning only happens when using \"rambo mode\" (editing a source file outside a build target).",
        "createdAt" : "2019-04-12T07:51:01Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "ab6e4fa4-7e5c-401b-a901-3fe11db09680",
        "parentId" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "We don't have the classpath for those source files so I suspect definition/completions won't work very reliably.",
        "createdAt" : "2019-04-12T07:51:47Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "2b27dc9d-6978-4497-9de8-340563b147fd",
        "parentId" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "Got it, makes sense.\r\nIncidentally local completions now work in project/*.scala files, which was an unexpected treat 😅",
        "createdAt" : "2019-04-12T07:52:54Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "0d1e0623-275b-4001-84d0-80703667da49",
        "parentId" : "d8b849aa-d8b4-4473-934f-1d3b45952197",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "After this PR goto definition will also work there for local variables :)",
        "createdAt" : "2019-04-12T07:54:01Z",
        "updatedAt" : "2019-04-12T09:54:09Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2dbd8ce82a5565161c5e2376068dbc4b1651817",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +55,59 @@          definitionFromSnapshot(path, params, doc)\n        case _ =>\n          warnings.noSemanticdb(path)\n          DefinitionResult.empty\n      }"
  },
  {
    "id" : "9f632558-1c83-4e45-a943-41d6f9b8310c",
    "prId" : 337,
    "prUrl" : "https://github.com/scalameta/metals/pull/337#pullrequestreview-178077784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "081a857b-0417-4dc6-88c6-9767be5d6b5e",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "mutability hurts my head, I would prefer to bind a new `location` as `revisedLocation` to make the intent clear.",
        "createdAt" : "2018-11-24T19:56:12Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "bed06680-4804-4fc6-9022-2eb2c8a43eb0",
        "parentId" : "081a857b-0417-4dc6-88c6-9767be5d6b5e",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I agree, it hurt my head too when writing this. Good catch, it is 100x better without setters",
        "createdAt" : "2018-11-25T11:17:14Z",
        "updatedAt" : "2018-11-27T10:23:41Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ab78d5883e2e77a843cca1ea641084e6e4a2875",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@              )\n          ),\n          () => Some(location),\n          () => None\n        )"
  }
]