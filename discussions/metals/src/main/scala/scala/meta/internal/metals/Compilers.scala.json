[
  {
    "id" : "60317426-56f9-43e0-b8c3-79a295333234",
    "prId" : 2412,
    "prUrl" : "https://github.com/scalameta/metals/pull/2412#pullrequestreview-576359124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ee8db46-bf30-4410-a625-6246fb806547",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "`interactiveSemanticdbs` parameter is no longer needed.",
        "createdAt" : "2021-01-26T13:45:06Z",
        "updatedAt" : "2021-01-26T16:36:10Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "65917e67c7a40c22e3e50becfb28cb3aafcad030",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +265,269 @@      params: TextDocumentPositionParams,\n      token: CancelToken,\n      interactiveSemanticdbs: InteractiveSemanticdbs\n  ): Future[Option[Hover]] =\n    withPCAndAdjustLsp(params) { (pc, pos, adjust) =>"
  },
  {
    "id" : "41cb1886-fa6b-495a-9544-c643bb1a8324",
    "prId" : 2345,
    "prUrl" : "https://github.com/scalameta/metals/pull/2345#pullrequestreview-559586457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21702e63-f28d-4b02-b4cd-561bba9a9dd0",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Previously, if a dependency source file would be open from worksheets this would cause the source not to be linked to any build target or worksheet.",
        "createdAt" : "2020-12-29T15:39:25Z",
        "updatedAt" : "2020-12-31T10:33:41Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9cd2ac8f7fbab36622dcb13d1c272c4f968a361",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +350,354 @@            c.locations(),\n            c.symbol(),\n            definitionPath,\n            None\n          )"
  },
  {
    "id" : "fb58fee8-5fbe-4f76-86a4-1621e8626f12",
    "prId" : 2215,
    "prUrl" : "https://github.com/scalameta/metals/pull/2215#pullrequestreview-529361838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df27d5a-9617-42e3-b1c6-40b8f17ce9bd",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I also added a small change to not publish syntax errors in library sources. It seems to happen sporadically for Scala 3 sources.",
        "createdAt" : "2020-11-12T18:15:05Z",
        "updatedAt" : "2020-11-12T18:15:06Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f14596c3ce5e06112391f788cfa50634bb174be6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +227,231 @@        case None =>\n          diagnostics.onNoSyntaxError(path)\n        case Some(diagnostic) if !path.isInReadonlyDirectory(workspace) =>\n          diagnostics.onSyntaxError(path, adjust.adjustDiagnostic(diagnostic))\n      }"
  },
  {
    "id" : "b6b625c2-d135-478a-8bc8-d936e6f1cac1",
    "prId" : 1856,
    "prUrl" : "https://github.com/scalameta/metals/pull/1856#pullrequestreview-438132602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22c2f62c-54c5-4a96-8986-8cb0a2506fa6",
        "parentId" : null,
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "This code path didn't exist before, why is that? Would it be possible to somehow move the management of compilers to `Compilers.scala`? There seems to be some overlap, maybe we can generate `BuildTargetIdentifier` for worksheets?",
        "createdAt" : "2020-06-25T17:17:02Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "fa8c64c9-0362-4c93-b41d-e40eac776bd6",
        "parentId" : "22c2f62c-54c5-4a96-8986-8cb0a2506fa6",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Not sure what you mean? It's invoked after evaluating the worksheet in case of changed dependencies, which in essence is a build target change. I am not sure how otherwise to trigger on that particular event. \r\n\r\nAlternatively, we could have worksheets as a different target and update the build target if dependencies change, which will be effectively the same with more indirection. We do need to somehow restart the presentation compiler.\r\n\r\n> There seems to be some overlap, maybe we can generate BuildTargetIdentifier for worksheets?\r\n\r\nI was thinking about having a separate build target for each worksheet, but since the worksheets can be a part of another build target I decided against. It also seemed like it might cause more work really and I planned to have this for the release tomorrow.\r\n",
        "createdAt" : "2020-06-25T18:47:36Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "efc073e6-a575-4ca9-99d6-de826ecc4544",
        "parentId" : "22c2f62c-54c5-4a96-8986-8cb0a2506fa6",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "Sounds good. I agree with your conclusion to keep this as is ",
        "createdAt" : "2020-06-26T09:02:33Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +380,384 @@      _ = {\n        if (!isSupported) {\n          scribe.warn(s\"unsupported Scala ${info.scalaVersion}\")\n        }\n      }"
  },
  {
    "id" : "0d01fd6e-6f54-4bec-a453-79cb60f67fa7",
    "prId" : 1856,
    "prUrl" : "https://github.com/scalameta/metals/pull/1856#pullrequestreview-437883280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e43f386d-d216-485b-b7e4-923deb7ff91a",
        "parentId" : null,
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "why are you updating `jworksheetsCache` twice?",
        "createdAt" : "2020-06-25T21:48:54Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "5e2014d1-bb5d-4c4d-a5a1-fb4cb3eda46a",
        "parentId" : "e43f386d-d216-485b-b7e4-923deb7ff91a",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "okay this is actually foreach if not present :D scala should add method like forempty {} :P",
        "createdAt" : "2020-06-25T22:01:34Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "d6410b2e-45ef-43b2-a512-1afe804840e7",
        "parentId" : "e43f386d-d216-485b-b7e4-923deb7ff91a",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "< resolved >",
        "createdAt" : "2020-06-25T22:01:44Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +404,408 @@\n    created.getOrElse {\n      jworksheetsCache.put(\n        path,\n        createStandaloneCompiler(classpath, path.toString())"
  },
  {
    "id" : "a8664dac-7790-46fa-a4ec-9d01fefae6e7",
    "prId" : 1856,
    "prUrl" : "https://github.com/scalameta/metals/pull/1856#pullrequestreview-438346165",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6c921c5-e219-483a-99dc-a454b6566d75",
        "parentId" : null,
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "put returns previous value, `created` ends up being:\r\n```\r\nscala> val created = for {\r\n     |   x <- Option(3)\r\n     | } yield {\r\n     |   null\r\n     | }\r\nval created: Option[Null] = Some(null)\r\n```",
        "createdAt" : "2020-06-25T21:55:23Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "60925957-6e5c-498b-8410-75d53ea68dd6",
        "parentId" : "e6c921c5-e219-483a-99dc-a454b6566d75",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Added `()`, but this should not be an issue anyway, since that value is never used.",
        "createdAt" : "2020-06-26T12:59:28Z",
        "updatedAt" : "2020-06-26T14:08:31Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "d1890811-7270-474d-93fb-25cb584df32a",
        "parentId" : "e6c921c5-e219-483a-99dc-a454b6566d75",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Changed to explicit: Option[Unit], which looks better. ",
        "createdAt" : "2020-06-26T14:32:42Z",
        "updatedAt" : "2020-06-26T14:32:42Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f17edfb786b6f5af2def3bdb1d0b49714512fb2",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +386,390 @@      scalac <- buildTargets.scalacOptions(targetId)\n    } yield {\n      jworksheetsCache.put(\n        path,\n        statusBar.trackBlockingTask("
  },
  {
    "id" : "23d96e71-6556-4f7c-83ea-562d60c31777",
    "prId" : 1523,
    "prUrl" : "https://github.com/scalameta/metals/pull/1523#pullrequestreview-393784130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65bb99dd-4b50-4b74-b6ae-abbd5a28ea17",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Moved the configuration for `foldOnlyLines` here",
        "createdAt" : "2020-04-15T13:41:36Z",
        "updatedAt" : "2020-04-15T13:50:25Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1142490703f832961ac0df1debd14b4f3b12ce7d",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +362,366 @@          isCompletionSnippetsEnabled =\n            initializeParams.supportsCompletionSnippets,\n          isFoldOnlyLines = initializeParams.foldOnlyLines\n        )\n      )"
  },
  {
    "id" : "4d53426e-41aa-42f8-bf7d-2906ccdbc937",
    "prId" : 736,
    "prUrl" : "https://github.com/scalameta/metals/pull/736#pullrequestreview-244201245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "631bbc91-2c2a-4e8f-8696-24f943afbf9b",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "Can we not mix the future/options? Other methods here have option/future. Is there a reason for breaking this consistency?",
        "createdAt" : "2019-05-29T13:24:31Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "0874f304-c7f5-4e4f-b280-fc03bfd85bed",
        "parentId" : "631bbc91-2c2a-4e8f-8696-24f943afbf9b",
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "Or as @tgodzik suggested - the other way around :)",
        "createdAt" : "2019-05-29T15:17:19Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "7fa1dcd7-1e59-474e-a2be-80466b45ddda",
        "parentId" : "631bbc91-2c2a-4e8f-8696-24f943afbf9b",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I have changed all the signatures to return `Future[T]` for consistency, I agree this makes the code easier to reason about.",
        "createdAt" : "2019-05-31T09:05:43Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +155,159 @@      token: CancelToken,\n      interactiveSemanticdbs: InteractiveSemanticdbs\n  ): Future[Option[Hover]] =\n    withPC(params, Some(interactiveSemanticdbs)) { (pc, pos) =>\n      pc.hover("
  },
  {
    "id" : "8138533f-6bcb-403a-a01c-8dd71c65f3a9",
    "prId" : 527,
    "prUrl" : "https://github.com/scalameta/metals/pull/527#pullrequestreview-206183528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf49f10-b6e6-4b51-8236-baca314c7b58",
        "parentId" : null,
        "authorId" : "ea3bdd9b-d684-4ae3-877b-2da5629a08a1",
        "body" : "But why a synchronized version vs `java.util.concurrent.ConcurrentHashMap`?",
        "createdAt" : "2019-02-20T23:19:24Z",
        "updatedAt" : "2019-03-10T09:44:08Z",
        "lastEditedBy" : "ea3bdd9b-d684-4ae3-877b-2da5629a08a1",
        "tags" : [
        ]
      },
      {
        "id" : "430f09b6-32d7-4f0c-8747-2c46b1560424",
        "parentId" : "8cf49f10-b6e6-4b51-8236-baca314c7b58",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "`j.u.c.ConcurrentHashMap` can deadlock in `computeIfAbsent` when the compute function is expensive",
        "createdAt" : "2019-02-21T08:53:30Z",
        "updatedAt" : "2019-03-10T09:44:08Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7621ebcf6232d37856b167824069496131bae13",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@  // Not a `j.u.c.ConcurrentHashMap` because it can deadlock in `computeIfAbsent` when the absent\n  // function is expensive, which is the case here.\n  val jcache = Collections.synchronizedMap(\n    new java.util.HashMap[BuildTargetIdentifier, PresentationCompiler]\n  )"
  }
]