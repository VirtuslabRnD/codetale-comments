[
  {
    "id" : "3fcbf548-33b1-4b12-bc49-6128ae085298",
    "prId" : 2749,
    "prUrl" : "https://github.com/scalameta/metals/pull/2749#pullrequestreview-649573090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d7c75a5-0c2d-4f20-97c2-61830c8c6ca1",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "The reason might be that targetroot seems to be a fallback now:\r\nhttps://github.com/scalacenter/scalafix/blob/bf0df227c9b72fd6a9466f3a6fe11a8ce5f14efd/scalafix-cli/src/main/scala/scalafix/internal/v1/Args.scala#L365",
        "createdAt" : "2021-04-30T14:00:35Z",
        "updatedAt" : "2021-04-30T14:00:36Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "c93e5a95-f9cd-4567-ba76-1c9a2bc96308",
        "parentId" : "2d7c75a5-0c2d-4f20-97c2-61830c8c6ca1",
        "authorId" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "body" : "I wouldn't say it's a fallback, it's just what this method does`getResourceAsStream` \r\n```\r\nprivate[scalafix] def fromPath(....) = {\r\n\r\nOption(classLoader.getResourceAsStream(semanticdbRelPath))\r\n...\r\n\r\n}\r\n```",
        "createdAt" : "2021-04-30T14:53:42Z",
        "updatedAt" : "2021-04-30T14:54:04Z",
        "lastEditedBy" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "tags" : [
        ]
      },
      {
        "id" : "f2a9334b-8eab-4f3b-a74d-5ec9ed0cb791",
        "parentId" : "2d7c75a5-0c2d-4f20-97c2-61830c8c6ca1",
        "authorId" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "body" : "We always look for semanticdb files in the classpath provided.\r\n",
        "createdAt" : "2021-04-30T14:55:56Z",
        "updatedAt" : "2021-04-30T14:55:57Z",
        "lastEditedBy" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "tags" : [
        ]
      },
      {
        "id" : "eedce4e5-82e5-4d8c-a9da-44aaf4b2f46a",
        "parentId" : "2d7c75a5-0c2d-4f20-97c2-61830c8c6ca1",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "huh interesting. I've seen an increased number of Vim users report seeing this lately:\r\n```\r\nLSP[metals] Stale SemanticDB\r\n--- /Users/REDACTED/Developer/REDACTED/package.scala-ondisk-md5-fingerprint\r\n+++ /Users/REDACTED/Developer/REDACTED/package.scala-semanticdb-md5-fingerprint\r\n@@ -1,1 +1,1 @@\r\n-91644521E64C92BC49FE92CF9078677E\r\n```\r\nThis should potentially help with this change right?",
        "createdAt" : "2021-04-30T19:46:55Z",
        "updatedAt" : "2021-04-30T19:47:23Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "26cb8c96-a06a-4564-a393-ac8462d1c634",
        "parentId" : "2d7c75a5-0c2d-4f20-97c2-61830c8c6ca1",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I think so, we always looked on the classpath first, which meant we could pick up old semanticdb artifacts in case of any config changes,",
        "createdAt" : "2021-04-30T19:52:23Z",
        "updatedAt" : "2021-04-30T19:52:23Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "65eabc83bcf2a01571553acde612dc2116c8a6d3",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +158,162 @@    // It seems that Scalafix ignores the targetroot parameter and searches the classpath\n    // Prepend targetroot to make sure that it's picked up first always\n    val classpath =\n      (targetRoot.toList ++ scalaTarget.fullClasspath.asScala).asJava\n"
  },
  {
    "id" : "fd1690b0-3075-466b-859b-1d36f7eb9a35",
    "prId" : 2119,
    "prUrl" : "https://github.com/scalameta/metals/pull/2119#pullrequestreview-502256504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a612ae-833e-4fca-8f89-c4769f8f1e0b",
        "parentId" : null,
        "authorId" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "body" : "I would change this for comprehension from option to Try to get errors when failing downloading scalafix or the rule. It will also be easier to add error message on other part.\r\n```\r\n  private def getScalafix(\r\n      scalaBinaryVersion: ScalaBinaryVersion\r\n  ): Try[Scalafix] = {\r\n    scalafixCache\r\n      .get(scalaBinaryVersion)\r\n      .toTry\r\n      .orElse(\r\n        statusBar.trackBlockingTask(\"Downloading scalafix\") {\r\n          Try(Scalafix.fetchAndClassloadInstance(scalaBinaryVersion))\r\n            .map { api =>\r\n              scalafixCache.update(scalaBinaryVersion, api)\r\n              api\r\n            }\r\n        }\r\n      )\r\n  }\r\n\r\n  private def getRuleClassLoader(\r\n      scalaBinaryVersion: ScalaBinaryVersion,\r\n      scalafixClassLoader: ClassLoader\r\n  ): Try[URLClassLoader] = {\r\n    val pathsOpt = organizeImportRuleCache\r\n      .get(scalaBinaryVersion)\r\n      .toTry\r\n      .orElse(\r\n        statusBar.trackBlockingTask(\"Downloading organize import rule\") {\r\n          Try(Embedded.organizeImportRule(scalaBinaryVersion))\r\n            .map { paths =>\r\n              organizeImportRuleCache.update(scalaBinaryVersion, paths)\r\n              paths\r\n            }\r\n        }\r\n      )\r\n    pathsOpt.map(paths =>\r\n      Embedded.toClassLoader(\r\n        Classpath(paths.map(AbsolutePath(_))),\r\n        scalafixClassLoader\r\n      )\r\n    )\r\n  }\r\n// to add with the rest of extension methods we have on Option.\r\n  implicit class OptionExtension[A](val in: Option[A]) extends AnyVal {\r\n    def toTry(e: => Throwable): Try[A] = in match {\r\n      case Some(v) => Success(v)\r\n      case None => Failure(e)\r\n    }\r\n\r\n    def toTry = toTry(new Exception(\"None.get \"))\r\n  \r\n```\r\n\r\nThis way we will cover this error. ",
        "createdAt" : "2020-10-05T11:07:33Z",
        "updatedAt" : "2020-10-05T17:36:58Z",
        "lastEditedBy" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "tags" : [
        ]
      },
      {
        "id" : "35e77d15-25b1-4c9c-8f86-89434bc9f052",
        "parentId" : "60a612ae-833e-4fca-8f89-c4769f8f1e0b",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Thanks, I changed it a bit, but stayed why Try as you suggested.",
        "createdAt" : "2020-10-05T17:09:09Z",
        "updatedAt" : "2020-10-05T17:36:58Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b271a278ae2c881051a18b72dc1b1f97da8cb4cb",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +57,61 @@        val scalaBinaryVersion = scalaTarget.scalaBinaryVersion\n        val scalafixEvaluation = for {\n          api <- getScalafix(scalaBinaryVersion)\n          urlClassLoaderWithExternalRule <- getRuleClassLoader(\n            scalaBinaryVersion,"
  },
  {
    "id" : "13e2a66c-eb15-45e6-be63-56ab0b9de29d",
    "prId" : 2119,
    "prUrl" : "https://github.com/scalameta/metals/pull/2119#pullrequestreview-502805077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e761808b-b832-4a65-86ce-cef8e9d34fb5",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Changed it to Classlaoder, since otherwise we create a new classlaoder on each run, which can really grow the memory.",
        "createdAt" : "2020-10-06T10:39:28Z",
        "updatedAt" : "2020-10-06T10:39:28Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b271a278ae2c881051a18b72dc1b1f97da8cb4cb",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +34,38 @@  private val scalafixCache = TrieMap.empty[ScalaBinaryVersion, Scalafix]\n  private val organizeImportRuleCache =\n    TrieMap.empty[ScalaBinaryVersion, URLClassLoader]\n\n  def organizeImports("
  },
  {
    "id" : "3eb02da1-e998-4e2c-aaf4-99f96423d688",
    "prId" : 1971,
    "prUrl" : "https://github.com/scalameta/metals/pull/1971#pullrequestreview-496315481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e49c0c2-c7f7-4a88-b46d-c9747653eb6a",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Should we not use concurrent map here? What if someone quickly runs optimize imports a couple of times? We should wait and not run additional times",
        "createdAt" : "2020-09-14T18:40:52Z",
        "updatedAt" : "2020-09-25T12:46:58Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "5890e441-4e38-44cf-a5fe-74f6f62a6e87",
        "parentId" : "5e49c0c2-c7f7-4a88-b46d-c9747653eb6a",
        "authorId" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "body" : "We decided to keep TrieMap after discussing it.",
        "createdAt" : "2020-09-25T12:43:10Z",
        "updatedAt" : "2020-09-25T12:46:58Z",
        "lastEditedBy" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f623f507d61ccbcd02d982594a8b0d46c292509",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@          Try(Scalafix.fetchAndClassloadInstance(scalaBinaryVersion)).toOption\n            .map { api =>\n              scalafixCache.update(scalaBinaryVersion, api)\n              api\n            }"
  }
]