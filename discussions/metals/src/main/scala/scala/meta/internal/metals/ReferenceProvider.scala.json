[
  {
    "id" : "5eef0df0-36b2-4725-810d-e29ff8342eb4",
    "prId" : 2601,
    "prUrl" : "https://github.com/scalameta/metals/pull/2601#pullrequestreview-611004525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2802568-e568-48a7-9050-39fa9498bec4",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "So previously, we would check any document that the cursor currently points to. This would cause us not to find synthetic objects, since their definition only exists in the file where the case class was also defined.",
        "createdAt" : "2021-03-12T17:26:06Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41604dd38d384c46037636f95cea33529f6d87b",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +127,131 @@    }\n\n    definitionDoc match {\n      case Some(definitionDoc) =>\n        val name = symbol.desc.name.value"
  },
  {
    "id" : "ac4addf7-d8a8-4078-817a-1118bd72941c",
    "prId" : 2601,
    "prUrl" : "https://github.com/scalameta/metals/pull/2601#pullrequestreview-611004525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2155a587-20d6-4686-9901-255e25a82a5d",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Here we search for any synthetic symbols that we might be also interested in.",
        "createdAt" : "2021-03-12T17:26:47Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41604dd38d384c46037636f95cea33529f6d87b",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +132,136 @@        val alternatives = new SymbolAlternatives(symbol, name)\n\n        val candidates = for {\n          info <- definitionDoc.symbols\n          if info.symbol != name"
  },
  {
    "id" : "f0b81a46-7fb0-4b86-aaa9-394d274999d5",
    "prId" : 2601,
    "prUrl" : "https://github.com/scalameta/metals/pull/2601#pullrequestreview-611004525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f323a8a3-5406-4fed-bb70-33399a10c4b1",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This is an additional section that I actually added. We sometimes want to find non-synthetic symbols for synthetic symbols such as:\r\n- case class for a synthetic object\r\n- class field for a synthetic constructor param (they always synthetic when in `new A(param = \"\")`)",
        "createdAt" : "2021-03-12T17:28:47Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41604dd38d384c46037636f95cea33529f6d87b",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +153,157 @@        def isSyntheticSymbol = !nonSyntheticSymbols.contains(symbol)\n\n        def additionalAlternativesForSynthetic = for {\n          info <- definitionDoc.symbols\n          if info.symbol != name"
  },
  {
    "id" : "109dd977-0b40-4fc0-bf45-098b68f5259b",
    "prId" : 2601,
    "prUrl" : "https://github.com/scalameta/metals/pull/2601#pullrequestreview-611972201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1dd5039-b829-47d3-8184-291d6d9494d7",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Almost everything is moved except for isCompanionClass and isFieldParam",
        "createdAt" : "2021-03-12T17:29:17Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "b5245886-a7ef-477a-be96-e40925ad7960",
        "parentId" : "b1dd5039-b829-47d3-8184-291d6d9494d7",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "This could just be a case class no?",
        "createdAt" : "2021-03-15T09:13:13Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      },
      {
        "id" : "f7ac6cd7-da39-426c-8077-a2e8f52ceaa3",
        "parentId" : "b1dd5039-b829-47d3-8184-291d6d9494d7",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Sure, but honestly I think it doesn't really fit the use case of a case class. We don't need to pretty print it, compareit, it's not really passed around, so I decided on a normal class here.",
        "createdAt" : "2021-03-15T09:18:37Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "51c05e05-6641-405b-91e1-b7e440384d26",
        "parentId" : "b1dd5039-b829-47d3-8184-291d6d9494d7",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "That's fine 👍🏼 ",
        "createdAt" : "2021-03-15T09:19:19Z",
        "updatedAt" : "2021-03-15T11:19:22Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "f41604dd38d384c46037636f95cea33529f6d87b",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +323,327 @@}\n\nclass SymbolAlternatives(symbol: String, name: String) {\n\n  // Returns true if `info` is the companion object matching the occurrence class symbol."
  },
  {
    "id" : "aa2aeefa-595f-4f7d-a89e-e7c160c0e8ef",
    "prId" : 2467,
    "prUrl" : "https://github.com/scalameta/metals/pull/2467#pullrequestreview-580574320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37a5a3b1-d8c3-45a2-b57d-80527f30f7e2",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This will make sure that when searching for references in dependency sources it will search the current file despite those sources not being indexed.",
        "createdAt" : "2021-02-01T17:53:02Z",
        "updatedAt" : "2021-02-02T12:16:15Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8e340827464a5e7151fb6e1a653072cb791a959",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +196,200 @@  ): Seq[Location] = {\n    val isSymbol = alternatives + occ.symbol\n    if (occ.symbol.isLocal || source.isDependencySource(workspace)) {\n      referenceLocations(\n        snapshot,"
  },
  {
    "id" : "ce1dd677-eb46-4147-83cc-f2440f98faf6",
    "prId" : 1976,
    "prUrl" : "https://github.com/scalameta/metals/pull/1976#pullrequestreview-462450372",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4efb8d53-5b51-4ed9-a394-f3b681e87566",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This is because I figured contains is not good enough here. And this is only used in case of rename, which doesn't make references slower and we are fine with some flaky results there, but we do not want to break the code when renaming.",
        "createdAt" : "2020-08-06T11:59:13Z",
        "updatedAt" : "2020-08-06T11:59:14Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "efa61fdab4c9b2e83dbf8d9aaa9322adf48ec193",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +315,319 @@      if (isBackticked) name.substring(1, name.length() - 1)\n      else name\n    if (symbol.isLocal || symbol.desc.name.toString == realName) {\n      val realRange = if (isBackticked) {\n        range"
  },
  {
    "id" : "620a5ba7-b411-4b9e-b463-defc71291d3e",
    "prId" : 1435,
    "prUrl" : "https://github.com/scalameta/metals/pull/1435#pullrequestreview-359770720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8252e496-d1ee-4a54-b6ff-101227296ed5",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "If we removed some files, we would still be looking for references inside them, since the semanticDB files will not be deleted.",
        "createdAt" : "2020-02-15T21:19:43Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "264ba65d-fcf8-40ad-885b-526813240064",
        "parentId" : "8252e496-d1ee-4a54-b6ff-101227296ed5",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "Can we simply delete this file?",
        "createdAt" : "2020-02-17T13:03:36Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "13de3e6c-e57e-4d18-a6dd-c100518748cc",
        "parentId" : "8252e496-d1ee-4a54-b6ff-101227296ed5",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "That file is managed by Bloop and we shouldn't remove it ourselves.",
        "createdAt" : "2020-02-17T14:24:24Z",
        "updatedAt" : "2020-02-17T16:18:06Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb025d5358f8296b853bbb7ede33b89e75356b35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +203,207 @@          .toScala(workspace, AbsolutePath(path))\n          .iterator\n        if scalaPath.exists\n        semanticdb <- semanticdbs\n          .textDocument(scalaPath)"
  },
  {
    "id" : "1fb7a1c4-6013-4137-a9a2-38faaf17da79",
    "prId" : 1430,
    "prUrl" : "https://github.com/scalameta/metals/pull/1430#pullrequestreview-360629067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd3b84f0-fa2a-4962-b3b0-4279daaedfcc",
        "parentId" : null,
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "you could extract `removeBackticks` function that would do the check and substring if needed.\r\nit would be:\r\n`val realName = removeBackticks(name)`\r\nIt could also be used in RenameProvider as removing backticks is the same there",
        "createdAt" : "2020-02-18T12:39:28Z",
        "updatedAt" : "2020-02-18T12:39:55Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "068a32a0-5d0f-48b1-a79e-fc7895dae4a6",
        "parentId" : "fd3b84f0-fa2a-4962-b3b0-4279daaedfcc",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I tried it, but I still need to check for backticks and change the range, so I would check it double. This is on the critical path, so I'd rather leave it as is.",
        "createdAt" : "2020-02-18T18:48:33Z",
        "updatedAt" : "2020-02-18T18:48:33Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "71b9eb3c-2d73-4751-bd71-c33db620a338",
        "parentId" : "fd3b84f0-fa2a-4962-b3b0-4279daaedfcc",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "ahh right isBackticked is needed later for another check, good as it is then :+1:",
        "createdAt" : "2020-02-18T19:54:59Z",
        "updatedAt" : "2020-02-18T19:54:59Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "449f77053dddb24263c8a82a150393da6812f615",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +291,295 @@  ): Option[s.Range] = {\n    val name = findName(range, text)\n    val isBackticked = name.charAt(0) == '`'\n    val realName =\n      if (isBackticked) name.substring(1, name.length() - 1)"
  }
]