[
  {
    "id" : "be98f5aa-7d51-4993-8ed8-868fbae976d6",
    "prId" : 1846,
    "prUrl" : "https://github.com/scalameta/metals/pull/1846#pullrequestreview-434312009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4862676-30f2-4ece-b334-d14c0c22ec1a",
        "parentId" : null,
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "Ah, good call adding this in 👍 ",
        "createdAt" : "2020-06-19T19:58:10Z",
        "updatedAt" : "2020-06-21T18:57:33Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "10223975ce00488d39a58765d57e434b217aeb21",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +35,39 @@  private val worksheetPick =\n    MetalsQuickPickItem(id = \"worksheet\", label = \"Worksheet\")\n  private val ammonitePick =\n    MetalsQuickPickItem(id = \"ammonite\", label = \"Ammonite script\")\n"
  },
  {
    "id" : "09e3a3c9-f388-4415-a413-899af14b6ed1",
    "prId" : 1528,
    "prUrl" : "https://github.com/scalameta/metals/pull/1528#pullrequestreview-379296250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "545748ea-1d90-4861-94e6-68094395a51f",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "I've changed this to also accept a `name`, so that we can skip the name-picking dialog and just ask for a file kind.\r\n\r\nThis allows the code action to fully re-use the existing provider's flow, which I think is really nice",
        "createdAt" : "2020-03-23T10:23:00Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +35,39 @@  def createNewFileDialog(\n      directoryUri: Option[URI],\n      name: Option[String]\n  ): Future[Unit] = {\n    val directory = directoryUri"
  },
  {
    "id" : "91e7135c-4f7b-442f-a71a-e8bf7fd4266c",
    "prId" : 1528,
    "prUrl" : "https://github.com/scalameta/metals/pull/1528#pullrequestreview-379383162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83d2beb1-3698-46e9-ad5c-6c532644ca48",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "My editor is set to strip out whitespaces on save, so I've been struggling with this.\r\n\r\nI think it's much clearer this way, anyway.",
        "createdAt" : "2020-03-23T11:41:18Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "6e51b682-ed8d-489e-b897-ba531715dd4c",
        "parentId" : "83d2beb1-3698-46e9-ad5c-6c532644ca48",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I agree this is clearer. I also have my editor remove trailing whitespace on save, intellij has this enabled by default, so we should not rely on it in our tests",
        "createdAt" : "2020-03-23T12:23:16Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "00d74f34-eb4e-4ee1-9cb5-306b0975d6fa",
        "parentId" : "83d2beb1-3698-46e9-ad5c-6c532644ca48",
        "authorId" : "84490516-a7af-4f7f-9947-360c279c4400",
        "body" : "I also like this as I get a warning in vim about trailing whitespaces all the time ha.",
        "createdAt" : "2020-03-23T12:30:24Z",
        "updatedAt" : "2020-03-23T15:05:32Z",
        "lastEditedBy" : "84490516-a7af-4f7f-9947-360c279c4400",
        "tags" : [
        ]
      }
    ],
    "commit" : "29e8820c0560d7d7e678b124344d3884ba5c2bda",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +199,203 @@    val indent = \"  \"\n    s\"\"\"|$kind $name {\n        |$indent\n        |}\n        |\"\"\".stripMargin"
  },
  {
    "id" : "87d75cf1-297f-448e-93d2-49a8014d2e80",
    "prId" : 1447,
    "prUrl" : "https://github.com/scalameta/metals/pull/1447#pullrequestreview-359924424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d400a56-771b-40dd-bf78-cbcd58a0dc34",
        "parentId" : null,
        "authorId" : "3c233382-62bf-4d89-9f62-2e9d82c7c7a0",
        "body" : "I've made some kind of DSL here, to cover `Future[Option[_]]` handling (making this method more or readable). `Future` is for about remote requests, and `Option` reflect that the request can be cancelled (thus, nothing should be returned eventually).\r\nNot sure, if it's good here.",
        "createdAt" : "2020-02-17T19:04:26Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : "3c233382-62bf-4d89-9f62-2e9d82c7c7a0",
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +37,41 @@\n    val newlyCreatedFile =\n      askForKind\n        .flatMapOption {\n          case kind @ (classPick.id | objectPick.id | traitPick.id) =>"
  },
  {
    "id" : "5758fbad-7cb6-4887-90ac-d53124967073",
    "prId" : 1447,
    "prUrl" : "https://github.com/scalameta/metals/pull/1447#pullrequestreview-362614744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d523863-a0b7-4f27-a90e-c30f50d65d5d",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "What happens if the name is `a/b/c/A` - I think we should create the directories there. Most likely `createFile` should also create directories? Package will then be added automatically which is neat.",
        "createdAt" : "2020-02-19T18:36:55Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "bcee9ddb-82e1-41ea-b70c-9fd962f0b632",
        "parentId" : "4d523863-a0b7-4f27-a90e-c30f50d65d5d",
        "authorId" : "3c233382-62bf-4d89-9f62-2e9d82c7c7a0",
        "body" : "it fails. Not really sure, it looks neat to ask for the name for the new class `foo/Bar` to create `class Bar`at `foo/Bar.scala`",
        "createdAt" : "2020-02-20T15:41:14Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : "3c233382-62bf-4d89-9f62-2e9d82c7c7a0",
        "tags" : [
        ]
      },
      {
        "id" : "40a696b1-217a-46a9-a591-2ed648265589",
        "parentId" : "4d523863-a0b7-4f27-a90e-c30f50d65d5d",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Could we implement it here? I think we just need to do `getParent.mkdirs`",
        "createdAt" : "2020-02-21T13:09:48Z",
        "updatedAt" : "2020-02-21T16:40:07Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "948961c16a2b407e9b6be832f69458537ee4bc93",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +100,104 @@      kind: String\n  ): Future[AbsolutePath] = {\n    val path = directory.getOrElse(workspace).resolve(name + \".scala\")\n    //name can be actually be \"foo/Name\", where \"foo\" is a folder to create\n    val className = directory.getOrElse(workspace).resolve(name).filename"
  }
]