[
  {
    "id" : "92bb03d7-0ffc-4b58-a6ce-3527ff6c499e",
    "prId" : 2605,
    "prUrl" : "https://github.com/scalameta/metals/pull/2605#pullrequestreview-612192086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac34d774-1239-4519-bf63-108e07191fad",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "If new name is checked to have backticks then this is not needed.",
        "createdAt" : "2021-03-15T13:31:34Z",
        "updatedAt" : "2021-03-15T15:32:17Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f1a4c3242bb93ce1e872665b12ff3b7319d1c6b",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +245,249 @@      if occ.symbol == occurence.symbol &&\n        withoutBacktick(realName) == withoutBacktick(renameName)\n    } yield new Location(uri, rng.toLSP)\n\n    val result = for {"
  },
  {
    "id" : "9a4c08b5-7100-46bf-a6b1-70798dd115eb",
    "prId" : 1754,
    "prUrl" : "https://github.com/scalameta/metals/pull/1754#pullrequestreview-425162249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df8a90bb-9f84-4ccd-b012-57697ebf79f7",
        "parentId" : null,
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "This should also be added to the `prepareRename` method, which is normally run before rename itself.",
        "createdAt" : "2020-05-22T17:17:03Z",
        "updatedAt" : "2020-06-05T10:53:32Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "9c4ff436-e9b9-42f7-b286-d0d28552e372",
        "parentId" : "df8a90bb-9f84-4ccd-b012-57697ebf79f7",
        "authorId" : "888c7596-690b-4510-8c6d-7a358228cfd9",
        "body" : "fixed",
        "createdAt" : "2020-06-05T09:57:48Z",
        "updatedAt" : "2020-06-05T10:53:32Z",
        "lastEditedBy" : "888c7596-690b-4510-8c6d-7a358228cfd9",
        "tags" : [
        ]
      }
    ],
    "commit" : "358d0bb5dfeb1e5bd52553e256f53c9f76a3d670",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +86,90 @@  ): Future[WorkspaceEdit] = {\n    val source = params.getTextDocument.getUri.toAbsolutePath\n    compilationFinished(source).flatMap { _ =>\n      definitionProvider.definition(source, params, token).map { definition =>\n        val textParams = new TextDocumentPositionParams("
  },
  {
    "id" : "4062be7f-7a2c-4b08-8b45-8343c8c243c5",
    "prId" : 1637,
    "prUrl" : "https://github.com/scalameta/metals/pull/1637#pullrequestreview-400762869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a20ccdd-a4d3-4e73-80f4-19ba8c169799",
        "parentId" : null,
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "I think you try to bind symbol with AbsolutePath and propagate them together through multiple functions, maybe it is worth making case class containing those 2 things and just pass one thing. Also it will be easier to see this path is related to this symbol",
        "createdAt" : "2020-04-23T17:16:19Z",
        "updatedAt" : "2020-04-27T09:08:00Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "e1fdc836-389c-4d8e-801c-17ce597bd7e3",
        "parentId" : "4a20ccdd-a4d3-4e73-80f4-19ba8c169799",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "Okay actually I would go with symbol <-> List[AbsolutePath] as it looks like there can be multiple definitions of a symbol. This would fix a problem with `<-` above ",
        "createdAt" : "2020-04-23T17:36:53Z",
        "updatedAt" : "2020-04-27T09:08:00Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "804aba15-f480-4843-a96d-334bfc807ad6",
        "parentId" : "4a20ccdd-a4d3-4e73-80f4-19ba8c169799",
        "authorId" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "body" : "And then you can decide in `symbolIsLocal` if given symbol with all definition locations is local or not. \r\nPreviously we did `.exists` which means at least one location must be in workspace, but maybe `.all` would make more sense here?\r\nI don't know many multi def locations examples, is it only class/trait + object scenario?",
        "createdAt" : "2020-04-23T17:43:17Z",
        "updatedAt" : "2020-04-27T09:08:00Z",
        "lastEditedBy" : "a9556b50-da77-420c-9fe7-08817ae53bff",
        "tags" : [
        ]
      },
      {
        "id" : "4b96e8d5-77e9-4600-8aa4-f96a01da2749",
        "parentId" : "4a20ccdd-a4d3-4e73-80f4-19ba8c169799",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "I don't think we have multiple definitions anywhere currently really. And even if we get one, I can't imagine one being inside workspace and the other outside.\r\n\r\nI can rework it a bit, but I don't think we need to add a case class just for 2 methods.",
        "createdAt" : "2020-04-24T07:44:06Z",
        "updatedAt" : "2020-04-27T09:08:00Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      },
      {
        "id" : "70a78660-2b9f-4fff-9eac-e5ea56bb9c73",
        "parentId" : "4a20ccdd-a4d3-4e73-80f4-19ba8c169799",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Moved `isWorkspaceSymbol` up, so that we don't propagate the path now.",
        "createdAt" : "2020-04-27T09:06:35Z",
        "updatedAt" : "2020-04-27T09:08:00Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc20da6a0b4a0d2f5db919a1ac7119940549f1f3",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +283,287 @@\n  private def canRenameSymbol(\n      symbol: String,\n      newName: Option[String]\n  ) = {"
  },
  {
    "id" : "c459b0b3-e5ab-47f4-b7ce-2e53d0d0d7b4",
    "prId" : 1637,
    "prUrl" : "https://github.com/scalameta/metals/pull/1637#pullrequestreview-400853832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c7b0faa-a7a9-4552-8cba-5656a0a18319",
        "parentId" : null,
        "authorId" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "body" : "OPT: same than Some(newName)",
        "createdAt" : "2020-04-27T09:13:36Z",
        "updatedAt" : "2020-04-27T10:40:36Z",
        "lastEditedBy" : "506802e6-3dfb-4c6d-84be-1b8a5d08fbe4",
        "tags" : [
        ]
      },
      {
        "id" : "c8891c39-401f-4f06-af01-7919474624f1",
        "parentId" : "6c7b0faa-a7a9-4552-8cba-5656a0a18319",
        "authorId" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "body" : "Will fix it maybe next time, shouldn't be a big issue.",
        "createdAt" : "2020-04-27T11:15:28Z",
        "updatedAt" : "2020-04-27T11:15:28Z",
        "lastEditedBy" : "f252b48f-54a9-478d-8bbb-85f01e5c28e7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc20da6a0b4a0d2f5db919a1ac7119940549f1f3",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +112,116 @@          definitionLoc <- definition.locations.asScala.headOption.toIterable\n          definitionPath = definitionLoc.getUri().toAbsolutePath\n          if canRenameSymbol(occurence.symbol, Option(newName)) &&\n            isWorkspaceSymbol(occurence.symbol, definitionPath)\n          parentSymbols = implementationProvider"
  },
  {
    "id" : "d99d131d-ba25-40b1-a393-a65442e40d26",
    "prId" : 1382,
    "prUrl" : "https://github.com/scalameta/metals/pull/1382#pullrequestreview-352557230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caa741a5-123c-4369-ba58-d4a9deac0609",
        "parentId" : null,
        "authorId" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "body" : "what happens if the file has no package definition?",
        "createdAt" : "2020-02-03T20:40:47Z",
        "updatedAt" : "2020-02-03T20:55:49Z",
        "lastEditedBy" : "d66a6438-cedf-4b6c-bfdf-ceff0a38786d",
        "tags" : [
        ]
      },
      {
        "id" : "cb6f8062-c9ac-4fde-856e-d920ae407ca3",
        "parentId" : "caa741a5-123c-4369-ba58-d4a9deac0609",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I believe it returns “empty/“",
        "createdAt" : "2020-02-03T20:46:40Z",
        "updatedAt" : "2020-02-03T20:55:49Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      },
      {
        "id" : "be675a03-e97c-40e3-836c-404c515301fa",
        "parentId" : "caa741a5-123c-4369-ba58-d4a9deac0609",
        "authorId" : "20c6b497-b124-47b9-ab3f-8cf5c3ab7dfa",
        "body" : "I can see it's `_empty_/` :)",
        "createdAt" : "2020-02-03T20:57:39Z",
        "updatedAt" : "2020-02-03T20:57:40Z",
        "lastEditedBy" : "20c6b497-b124-47b9-ab3f-8cf5c3ab7dfa",
        "tags" : [
        ]
      }
    ],
    "commit" : "90ddb580583ac5d22a8f5d2a64a3dd57717061db",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +178,182 @@      .find { file =>\n        isOccurence { str =>\n          str.owner.isPackage &&\n          (str.desc.isType || str.desc.isTerm) &&\n          file.endsWith(s\"/${str.desc.name.value}.scala\")"
  }
]