[
  {
    "id" : "ec9be623-80e8-4e14-a7bb-6e579e3af0c3",
    "prId" : 709,
    "prUrl" : "https://github.com/scalameta/metals/pull/709#pullrequestreview-244351331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b8d2ecb-d8a3-4be8-9fd6-070ec9c0ab28",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "`Pauseable` or `Pausable`? (I honestly don't know) ;)",
        "createdAt" : "2019-05-31T14:05:07Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "fece7769-1f1c-447e-83bd-aae25b77772d",
        "parentId" : "9b8d2ecb-d8a3-4be8-9fd6-070ec9c0ab28",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I googled myself, seems pauseable is OK, similar to `Cancelable`.",
        "createdAt" : "2019-05-31T14:49:53Z",
        "updatedAt" : "2019-05-31T14:49:54Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@ * Interface for something that can be paused and unpaused, for example a stream of compile requests.\n */\ntrait Pauseable {\n  final val isPaused = new AtomicBoolean(false)\n"
  },
  {
    "id" : "8ba9b1e8-38e1-48fb-8cab-bfb6e3ca3afe",
    "prId" : 709,
    "prUrl" : "https://github.com/scalameta/metals/pull/709#pullrequestreview-244351499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ddb35b-131f-4cde-8372-35952e9b7fa7",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "or maybe `resume`?",
        "createdAt" : "2019-05-31T14:05:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "a445b07f-50db-4251-8741-1214090dcc46",
        "parentId" : "87ddb35b-131f-4cde-8372-35952e9b7fa7",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "I prefer `unpause` for consistency with `pause`",
        "createdAt" : "2019-05-31T14:50:11Z",
        "updatedAt" : "2019-05-31T14:50:11Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@    doPause()\n  }\n  final def unpause(): Unit = {\n    isPaused.set(false)\n    doUnpause()"
  },
  {
    "id" : "f85b5359-e609-4831-8f8f-564615945773",
    "prId" : 709,
    "prUrl" : "https://github.com/scalameta/metals/pull/709#pullrequestreview-244352321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14a97901-5a58-49e3-94d8-5700e867d3bd",
        "parentId" : null,
        "authorId" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "body" : "why not `from` - the fact that it is from `Pauseables` is already expressed in the type. Unless it is to circumvent the generics?",
        "createdAt" : "2019-05-31T14:06:41Z",
        "updatedAt" : "2019-05-31T14:07:10Z",
        "lastEditedBy" : "a1d420d1-83d4-48b5-b245-772065f6633b",
        "tags" : [
        ]
      },
      {
        "id" : "af526d1d-80c7-4c23-9659-b7bdc8b432c3",
        "parentId" : "14a97901-5a58-49e3-94d8-5700e867d3bd",
        "authorId" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "body" : "No issue with generics, just `fromX` feels consistent with similar APIs like `Json.fromString`. `Pauseable.fromPauseables` can be read as \"create a single pauseable from this list of pauseables\"",
        "createdAt" : "2019-05-31T14:51:40Z",
        "updatedAt" : "2019-05-31T14:51:41Z",
        "lastEditedBy" : "cea3c370-4fa4-4787-a40c-c406eb22d8b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e996d0d719a59efbb86d5727fb306a454ea1623b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@\n  /** Merges a list of Pausables into a single Pauseable. */\n  def fromPausables(all: Iterable[Pauseable]): Pauseable = new Pauseable {\n    override def doPause(): Unit = Cancelable.cancelEach(all)(_.pause())\n    override def doUnpause(): Unit = Cancelable.cancelEach(all)(_.unpause())"
  }
]