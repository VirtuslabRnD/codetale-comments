[
  {
    "id" : "465a58bc-3ff7-42fd-882f-52a3b8e108e1",
    "prId" : 2548,
    "prUrl" : "https://github.com/akka/alpakka/pull/2548#pullrequestreview-601085946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a676030c-88b6-417b-bde4-50c7c2e68dcc",
        "parentId" : null,
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "Does `FLOAT` and `INTEGER` map to `DOUBLE` and `LONG` respectively?  I noticed in the [docs](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#floating_point_types) there are data types `INT64` and `FLOAT64`, but not their 32 bit counterparts.",
        "createdAt" : "2021-03-01T16:41:20Z",
        "updatedAt" : "2021-03-11T20:37:28Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "5d53bf18-9503-49ef-9f04-e41c0cb9ec02",
        "parentId" : "a676030c-88b6-417b-bde4-50c7c2e68dcc",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "Hmm, the aliases are not mentioned in that part of the docs. In the [TableFieldSchema schema](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#TableFieldSchema) they indicate\r\n\r\n> INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT)\r\n\r\nwhich led me to think `INTEGER` and `FLOAT` are the primary names and `INT64` and `FLOAT64` are aliases, hence why I named these `IntegerType` and `FloatType`. But maybe in JVM world we should prefer `INT64` and `FLOAT64` to emphasize the precision.",
        "createdAt" : "2021-03-01T19:24:05Z",
        "updatedAt" : "2021-03-11T20:37:28Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2c4285a6e5eb0829498243b53ee404e8d498124",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@      TableFieldSchema(\"long\", IntegerType, Some(RequiredMode), None),\n      TableFieldSchema(\"float\", FloatType, Some(RequiredMode), None),\n      TableFieldSchema(\"double\", FloatType, Some(RequiredMode), None),\n      TableFieldSchema(\"string\", StringType, Some(RequiredMode), None),\n      TableFieldSchema(\"boolean\", BooleanType, Some(RequiredMode), None),"
  }
]