[
  {
    "id" : "442eebf1-13b9-43d0-9282-9d4cc20f1925",
    "prId" : 2613,
    "prUrl" : "https://github.com/akka/alpakka/pull/2613#pullrequestreview-620238520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "parentId" : null,
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "I guess we should add some Scala accessors since this is public.",
        "createdAt" : "2021-03-23T18:26:59Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "4b190524-9b28-4eb5-b056-395cfd47352e",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "Sorry, I'm confused, which accessors are missing?",
        "createdAt" : "2021-03-23T23:05:06Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      },
      {
        "id" : "e0c5bfcd-7ba3-4b3c-9a65-4d49995066e6",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "The `with` methods all accept `java.util.Optional`. We should have overloads that take `Option` as well.",
        "createdAt" : "2021-03-23T23:13:08Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "6186310a-9419-43a0-a005-5f79599a0c6f",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "I see, I thought that `with` methods are Java-only APIs since Scala case classes have `copy` available, is this not the case? If so, I need to fix this in many many places ...",
        "createdAt" : "2021-03-24T00:52:52Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      },
      {
        "id" : "78993ddc-b882-47bd-8249-2a93cd638ef3",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "In Akka core as well as other Akka projects, types that have Scala and Java APIs are not usually defined as case classes, because the extra methods they generate will break bin compatibility whenever fields are changed (though perhaps not code compatibility for Scala users who recompile against new deps). It's safer to have a class where the accessors are controlled by us so that we can make additive changes easily and control deprecations more explicitly. We don't allow bin compat breaking changes in patch versions, but we also try to make a best effort across all upgrades to avoid it as well.\r\n\r\nA common scenario is when users depend on multiple Alpakka connectors in the same project. We want to have some overlap of compatibility across versions to give users a chance to upgrade and deprecating old APIs. Since there have been no releases that have deprecated the google config across the connectors this common library will replace we have to be careful not to break the upgrade experience since there was no deprecation forewarning.",
        "createdAt" : "2021-03-24T13:59:31Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "bb0ade32-5a60-4f8e-83f4-a38196624828",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "Thank you for the detailed explanation! This was very helpful and would be a great addition to the contributing guide.",
        "createdAt" : "2021-03-24T21:12:21Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      },
      {
        "id" : "af401fa2-a9d8-41ca-9b59-3067b42c5abd",
        "parentId" : "ee074d90-a7f0-4c1b-b7f1-c1c0bd0c9792",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "BTW I added Scala overrides for `with` methods for the `GoogleSettings` class and family.",
        "createdAt" : "2021-03-24T21:16:36Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8e150b07e46dc8d18a992207b502febbd12d59",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +41,45 @@      copy(location = location.asScala)\n    def withMessage(message: util.Optional[String]) =\n      copy(message = message.asScala)\n  }\n"
  },
  {
    "id" : "68934a86-7970-4e8b-ad52-9a9dcf73459f",
    "prId" : 2613,
    "prUrl" : "https://github.com/akka/alpakka/pull/2613#pullrequestreview-620140704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1545292d-a3e0-451b-9eff-6193fd28e59e",
        "parentId" : null,
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "Java API scaladoc; just `create` ?",
        "createdAt" : "2021-03-23T18:28:36Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "43bfe695-9a8b-4efe-b0ae-f672bb9fce13",
        "parentId" : "1545292d-a3e0-451b-9eff-6193fd28e59e",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "Well usually it would be `ErrorProto.create` but in this case it is `ErrorJsonProtocol.createErrorProto`. Actually, I've been having doubts about keeping all the model classes inside `JsonProtocol` objects. It's ok for Scala but it is much more difficult to use from Java. I can fix this in a quick BigQuery-specific followup PR?",
        "createdAt" : "2021-03-23T23:11:27Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      },
      {
        "id" : "3ae8d818-7df5-44ee-81c5-3c7ae6c586f1",
        "parentId" : "1545292d-a3e0-451b-9eff-6193fd28e59e",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "Follow up PR is fine :+1: \r\n\r\nCan you create an issue to track it?",
        "createdAt" : "2021-03-24T14:20:45Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      },
      {
        "id" : "607bfb27-ed65-4975-94cc-28721b067960",
        "parentId" : "1545292d-a3e0-451b-9eff-6193fd28e59e",
        "authorId" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "body" : "Tracking in #2625",
        "createdAt" : "2021-03-24T19:09:37Z",
        "updatedAt" : "2021-03-24T23:41:41Z",
        "lastEditedBy" : "0f602f47-e8d3-4bc5-b20c-220fb24fc52f",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8e150b07e46dc8d18a992207b502febbd12d59",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +53,57 @@   * @return an [[ErrorProto]]\n   */\n  def createErrorProto(reason: util.Optional[String], location: util.Optional[String], message: util.Optional[String]) =\n    ErrorProto(reason.asScala, location.asScala, message.asScala)\n"
  }
]