[
  {
    "id" : "ef69b6da-0e2d-4bd6-97b2-05a2b6ecf18d",
    "prId" : 9984,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9984#pullrequestreview-583628823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "810bb387-572e-45b0-af2a-529d2189028d",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Does the issue have a number?",
        "createdAt" : "2021-02-04T15:53:05Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "bd90b8a1-99c1-437c-bcaa-419c80a97dbf",
        "parentId" : "810bb387-572e-45b0-af2a-529d2189028d",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Question about CB. Why did you change `import.{given, _}` to `import._`? I guess it's good to already put `import given` to prepare for future  migration.\r\n",
        "createdAt" : "2021-02-04T15:56:31Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "c0cc54fb-8b27-465c-b569-54782ec171fa",
        "parentId" : "810bb387-572e-45b0-af2a-529d2189028d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Those are imports of extension methods that are in the correct path to not require the given imports. We needed those a long time ago, but users have kept copying the old version anyway.",
        "createdAt" : "2021-02-04T17:08:36Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "ca23ac71-9065-4712-b80f-d32793e5fec5",
        "parentId" : "810bb387-572e-45b0-af2a-529d2189028d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I will open an issue for it. It looks like it is something related to #11247.\r\n\r\n<details>\r\n\r\n```scala\r\n53 |      val (tuple1, tuple2) = tuple.splitAt(tuple.size / 2)\r\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |Found:    (scala.Tuple.Take[Tuple, (?1 : Int)], scala.Tuple.Drop[Tuple, (?1 : Int)])\r\n   |Required: (\r\n   |  Int match {\r\n   |    case (0 : Int) => EmptyTuple\r\n   |    case \r\n   |      [n1 <: Int] =>> \r\n   |        scala.runtime.MatchCase[compiletime.S[n1], \r\n   |          Tuple match {\r\n   |            case EmptyTuple => EmptyTuple\r\n   |            case \r\n   |              [x, xs <: Tuple] =>> \r\n   |                scala.runtime.MatchCase[x *: xs, x *: scala.Tuple.Take[xs, n1]]\r\n   |          } <: Tuple\r\n   |        ]\r\n   |  } <: Tuple\r\n   |, \r\n   |  Int match {\r\n   |    case (0 : Int) => Tuple\r\n   |    case \r\n   |      [n1 <: Int] =>> \r\n   |        scala.runtime.MatchCase[compiletime.S[n1²], \r\n   |          Tuple match {\r\n   |            case EmptyTuple => EmptyTuple\r\n   |            case \r\n   |              [x, xs <: Tuple] =>> \r\n   |                scala.runtime.MatchCase[x² *: xs², scala.Tuple.Drop[xs², n1²]]\r\n   |          } <: Tuple\r\n   |        ]\r\n   |  } <: Tuple\r\n   |)\r\n   |\r\n   |where:    ?1  is an unknown value of type Int\r\n   |          n1  is a type variable with constraint <: Int\r\n   |          n1² is a type variable with constraint <: Int\r\n   |          x   is a type variable with constraint \r\n   |          xs  is a type variable with constraint <: Tuple\r\n   |          xs² is a type variable with constraint <: Tuple\r\n   |          x²  is a type variable with constraint \r\n```\r\n\r\n</details>",
        "createdAt" : "2021-02-04T17:16:40Z",
        "updatedAt" : "2021-02-08T10:26:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf24824be9e0f1360dc26521e3cacf95367ef1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +51,55 @@    if (tuple.size <= 1) tuple\n    else {\n      val (tuple1, tuple2) = tuple.splitAt(tuple.size / 2): (Tuple, Tuple)// TODO remove ascriptions (issue with type variable constraints)\n      val (sorted1, sorted2) = (tupleMergeSort(tuple1), tupleMergeSort(tuple2))\n      tupleMerge(sorted1, sorted2)"
  }
]