[
  {
    "id" : "4f30d34c-4680-43cd-9b42-55e34357e26a",
    "prId" : 567,
    "prUrl" : "https://github.com/root-project/root/pull/567#pullrequestreview-37974682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c11e178-ca0c-4d90-8c64-81806038bf8b",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "const_cast-ing usually means that we are missing an abstraction or there is an implementation bug.",
        "createdAt" : "2017-05-13T08:05:36Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "7feac35c8036123d7313a42466110b1fc7eca312",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +383,387 @@\n      assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );\n      f1->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));\n      if ( int( fitResult.Errors().size()) >= f1->GetNpar() )\n         f1->SetParErrors( &(fitResult.Errors().front()) );"
  },
  {
    "id" : "e86d0485-cdad-4934-accd-fa0db3a38a59",
    "prId" : 567,
    "prUrl" : "https://github.com/root-project/root/pull/567#pullrequestreview-37975335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddbaf584-3805-4a2c-9cad-557891e447a9",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This comment could go away.",
        "createdAt" : "2017-05-13T08:06:03Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "bc665ca7-1c55-4b93-9fcf-20bf4c5a0175",
        "parentId" : "ddbaf584-3805-4a2c-9cad-557891e447a9",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "It's there for the multiprocessing (Next PR, commented here for coherence)",
        "createdAt" : "2017-05-13T08:45:55Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "7feac35c8036123d7313a42466110b1fc7eca312",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +704,708 @@      }\n\n      // if (opt.Contains(\"MULTIPROC\")) {\n      //    fitOption.ExecPolicy = ROOT::Fit::kMultiprocess;\n      //    opt.ReplaceAll(\"MULTIPROC\",\"\");"
  },
  {
    "id" : "b1196bae-b176-44bf-a675-70ee66ecc271",
    "prId" : 567,
    "prUrl" : "https://github.com/root-project/root/pull/567#pullrequestreview-37974682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d251356-3ca2-4c0f-a250-d270168b46b4",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This is a very odd way to convert `size_t` to int. Can't we change `GenNpar` to return `size_t` type?",
        "createdAt" : "2017-05-13T08:08:02Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "7feac35c8036123d7313a42466110b1fc7eca312",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +908,912 @@      assert(  (Int_t)fitResult.Parameters().size() >= fitfunc->GetNpar() );\n      fitfunc->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));\n      if ( int( fitResult.Errors().size()) >= fitfunc->GetNpar() )\n         fitfunc->SetParErrors( &(fitResult.Errors().front()) );\n"
  }
]