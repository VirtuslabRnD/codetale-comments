[
  {
    "id" : "23b2ccfb-3a92-4b8b-a10a-977d34d62715",
    "prId" : 6218,
    "prUrl" : "https://github.com/root-project/root/pull/6218#pullrequestreview-471643287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39254bb0-33b8-419a-9fde-fc05251308dc",
        "parentId" : null,
        "authorId" : "a1f51663-8978-4ce2-af58-def5da7af333",
        "body" : "Should fClingInitialized be atomic?",
        "createdAt" : "2020-08-20T12:53:15Z",
        "updatedAt" : "2020-08-25T15:52:29Z",
        "lastEditedBy" : "a1f51663-8978-4ce2-af58-def5da7af333",
        "tags" : [
        ]
      },
      {
        "id" : "82160043-8d5e-4428-8063-e454de382d68",
        "parentId" : "39254bb0-33b8-419a-9fde-fc05251308dc",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "I think fClingInitialized should be  protected by the gROOTMutex above. \r\nIt would be great if you can try of this fixes the problem",
        "createdAt" : "2020-08-20T13:51:22Z",
        "updatedAt" : "2020-08-25T15:52:29Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "81df92f0-31fc-4bd2-8ed5-e1c3ce741d9c",
        "parentId" : "39254bb0-33b8-419a-9fde-fc05251308dc",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "It looks like the update of `fClingInitialized` is protected by the mutex by not the reads (and they probably should not).  \r\nIf this is the case, then indeed `fClingInitialized` should be an atomic.\r\n\r\nAlso with this pattern (atomic read and behind-a-lock write), one need might need to check after entering the critical section whether another thread updated it in the mean time. (because 2 threads may have concurrently check the value and found it false and both try to initialize, the lock will (as wanted) serialize the initialize but the check-after-taking the lock should be done unless doing the initialization twice is both harmless and cheap.\r\n\r\n",
        "createdAt" : "2020-08-20T13:59:27Z",
        "updatedAt" : "2020-08-25T15:52:29Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "69dce03350f501949b94c2c0ccb4fd47ba638f8b",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +3349,3353 @@      // try recompiling the formula. We need to lock because this is not anymore thread safe\n      R__LOCKGUARD(gROOTMutex);\n      // check again in case another thread has initialized the formula (see ROOT-10994)\n      if (!fClingInitialized) {\n         auto thisFormula = const_cast<TFormula*>(this);"
  },
  {
    "id" : "d053ebb3-b9af-47f1-9885-d2253f5a745c",
    "prId" : 8801,
    "prUrl" : "https://github.com/root-project/root/pull/8801#pullrequestreview-723681011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2fb4a7d-4d62-4dfd-b2a6-8b42dcfae91b",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I agree, this should totally go into `core/foundation/inc/ROOT/`. Should this return `vector<string>` or `vector<string_view>`? The latter is dangerous if people do `tokenize(\"abc cde\",...)` but I find that unlikely to happen.\r\n\r\n",
        "createdAt" : "2021-08-05T13:11:03Z",
        "updatedAt" : "2021-08-05T13:12:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "71cde66c-300d-4875-a68e-84edbb800d99",
        "parentId" : "a2fb4a7d-4d62-4dfd-b2a6-8b42dcfae91b",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay! I don't have time to do this now, but I'll open a GitHub issue about it. Maybe we should have two versions: one returning `vector<string>` and one returning `vector<string_view>`.",
        "createdAt" : "2021-08-05T18:38:21Z",
        "updatedAt" : "2021-08-05T18:38:21Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "66e00e7e4f78fc492d9c7aa3cf55a92d82810042",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1675,1679 @@namespace {\n\n// Borrowed from RooHelpers.h, should this go to a central place?\nstd::vector<std::string> tokenise(const std::string &str, const std::string &delims, bool returnEmptyToken) {\n  if (str.empty())"
  },
  {
    "id" : "fdc6a5dd-64a2-4284-b9be-02b28cf69a06",
    "prId" : 8801,
    "prUrl" : "https://github.com/root-project/root/pull/8801#pullrequestreview-723680220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e74e94-305b-4f09-be64-4f126b4ef53d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "We generally use US spelling, e.g. `TString::Tokenize`",
        "createdAt" : "2021-08-05T13:11:18Z",
        "updatedAt" : "2021-08-05T13:12:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f7cd5e41-6dfc-4c02-b0c9-409d712a7ce5",
        "parentId" : "f7e74e94-305b-4f09-be64-4f126b4ef53d",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay, this should be changed then when the function is moved to `core/foundation`.",
        "createdAt" : "2021-08-05T18:37:21Z",
        "updatedAt" : "2021-08-05T18:37:21Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "66e00e7e4f78fc492d9c7aa3cf55a92d82810042",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1676,1680 @@\n// Borrowed from RooHelpers.h, should this go to a central place?\nstd::vector<std::string> tokenise(const std::string &str, const std::string &delims, bool returnEmptyToken) {\n  if (str.empty())\n    return std::vector<std::string>(returnEmptyToken ? 1 : 0);"
  }
]