[
  {
    "id" : "d32e92db-a858-40f3-bacf-a82ca46da242",
    "prId" : 793,
    "prUrl" : "https://github.com/root-project/root/pull/793#pullrequestreview-51405571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41d48d3c-987d-4f65-910e-039aed50107f",
        "parentId" : null,
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "Is there a better way to resolve this one, @amadio ?",
        "createdAt" : "2017-07-20T18:47:19Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "f0983e21-bcd5-42c3-9653-1b2aad2ae6c2",
        "parentId" : "41d48d3c-987d-4f65-910e-039aed50107f",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Not if you want to be able to use ROOT without VecCore, unfortunately. That's why we need to do this in a generic way in TMath, as discussed yesterday. Then the code using the math functions can just call the ROOT math function and the right version will be used for both scalar and simd code.",
        "createdAt" : "2017-07-21T07:40:13Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "33229b3e25a9e6c4fab92f90b1905773ac361413",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +305,309 @@            if (ipar == 0) return 1.0;\n#ifdef R__HAS_VECCORE\n            return vecCore::math::Pow(x[0], static_cast<T>(ipar));\n#else\n            return std::pow(x[0], static_cast<int>(ipar));"
  }
]