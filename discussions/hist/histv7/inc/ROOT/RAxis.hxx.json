[
  {
    "id" : "dda409e3-b8bb-4309-b993-72d38cb6d4b3",
    "prId" : 5190,
    "prUrl" : "https://github.com/root-project/root/pull/5190#pullrequestreview-398022993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8996a0f9-0945-4f5e-adeb-d2968635b5f8",
        "parentId" : null,
        "authorId" : "7c164ac9-b625-4880-85f4-7389c0783002",
        "body" : "I was going to suggest `rawbin > GetLastBin()`, and then I realized this isn't an integer and the two logics aren't equivalent. Good job avoiding this trap. Leaving this note around in case Alex wants to review the PR as well. :+1: ",
        "createdAt" : "2020-04-21T14:18:44Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "7c164ac9-b625-4880-85f4-7389c0783002",
        "tags" : [
        ]
      },
      {
        "id" : "c3dddb35-3102-410e-abd8-1b2e22076987",
        "parentId" : "8996a0f9-0945-4f5e-adeb-d2968635b5f8",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "```suggestion\r\n      // `rawbin` is not an integer, cannot compare `rawbin > GetLastBin()`\r\n      if (rawbin >= GetLastBin() + 1)\r\n```",
        "createdAt" : "2020-04-22T09:46:24Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d5fa3a3d1ee0c05de9bbfa8af3793c7d09da24",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +83,87 @@      // Overflow: Put in overflow bin if any, otherwise ignore\n      // `rawbin` is not an integer, cannot compare `rawbin > GetLastBin()`.\n      if (rawbin >= GetLastBin() + 1)\n         return CanGrow() ? kInvalidBin : GetOverflowBin();\n"
  },
  {
    "id" : "089d3a54-f2d1-4688-812b-87de297b4678",
    "prId" : 5190,
    "prUrl" : "https://github.com/root-project/root/pull/5190#pullrequestreview-397367273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f676ec3-7fdf-4ed5-89d5-01d50c6ecd6d",
        "parentId" : null,
        "authorId" : "7c164ac9-b625-4880-85f4-7389c0783002",
        "body" : "It could be a good idea to point out that growable axes don't have underflow and overflow bin here (because they don't need them).",
        "createdAt" : "2020-04-21T14:37:14Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "7c164ac9-b625-4880-85f4-7389c0783002",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d5fa3a3d1ee0c05de9bbfa8af3793c7d09da24",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +39,43 @@ Index -1 is for the underflow bin, representing values that are lower than\n the axis range. Index -2 is the overflow bin for values larger than the axis\n range.\n Growable axes do not have underflow or overflow bins, as they don't need them.\n */"
  },
  {
    "id" : "344fde1d-fc57-478e-8c53-898dbbb5f322",
    "prId" : 5190,
    "prUrl" : "https://github.com/root-project/root/pull/5190#pullrequestreview-398849856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f81661a3-4e90-4b17-8101-5357d32d71b5",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "\"Unspecified\" is not too helpful for users. We could:\r\n- option1: return invalid numbers or crash\r\n- option2: throw\r\n- option3: return `numeric_limits`\r\n- option4: assert\r\n- option5: `R__ERROR_HERE`.\r\n\r\nThe current code does option 1. I expect that this will cause trouble in the future... Is option 3 really too expensive?",
        "createdAt" : "2020-04-22T09:56:39Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0e3fee65-e2aa-47fe-b971-fbb7fa3ba774",
        "parentId" : "f81661a3-4e90-4b17-8101-5357d32d71b5",
        "authorId" : "3df28d96-a205-4719-b340-8cee17a01629",
        "body" : "I actually removed option 3 in this case because it wasn't consistent with the behavior of the other types of axes. I however agree that we could implement one of these options to avoid undefined behavior.",
        "createdAt" : "2020-04-23T07:58:10Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "3df28d96-a205-4719-b340-8cee17a01629",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d5fa3a3d1ee0c05de9bbfa8af3793c7d09da24",
    "line" : 381,
    "diffHunk" : "@@ -1,1 +684,688 @@\n   /// Get the bin center of the bin with the given index.\n   /// The result of this method on an overflow or underflow bin is unspecified.\n   double GetBinCenter(int bin) const final override { return 0.5 * (fBinBorders[bin - 1] + fBinBorders[bin]); }\n"
  },
  {
    "id" : "7fa7f34e-ae4d-4426-8dca-4ea0e687baa8",
    "prId" : 5190,
    "prUrl" : "https://github.com/root-project/root/pull/5190#pullrequestreview-398031437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97024811-97a2-42a9-b03e-f08f25d6fa87",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "See comment for `GetBinCenter`",
        "createdAt" : "2020-04-22T09:57:04Z",
        "updatedAt" : "2020-04-23T15:16:48Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "92d5fa3a3d1ee0c05de9bbfa8af3793c7d09da24",
    "line" : 392,
    "diffHunk" : "@@ -1,1 +688,692 @@\n   /// Get the lower bin border for a given bin index.\n   /// The result of this method on an underflow bin is unspecified.\n   double GetBinFrom(int bin) const final override\n   {"
  }
]