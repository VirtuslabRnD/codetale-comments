[
  {
    "id" : "f21ebde6-e271-413f-99bc-5d4166654566",
    "prId" : 388,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/388#pullrequestreview-221137630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204f857e-c54b-442c-94c1-cdc265fed1e7",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "Please have a look at the implementation of `CircuitBreaker.decorateCompletionStage`.\r\nWe can copy it to CircuitBreakerAspect or we have to support a `CheckedFunction0<CompletionStage<?>>` \r\nBut I don't like the signature :(\r\n\r\n```\r\nCheckedFunction0<CompletionStage<?>> stageSupplier = () -> (CompletionStage<?>) proceedingJoinPoint.proceed();\r\nreturn circuitBreaker.executeCompletionStage(stageSupplier);\r\n```\r\n",
        "createdAt" : "2019-04-01T14:15:07Z",
        "updatedAt" : "2019-04-02T21:43:53Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "fffe6bffdbd34c27f35d8b99a0a2c691a13401b2",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +108,112 @@\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Object defaultCompletionStage(ProceedingJoinPoint proceedingJoinPoint, io.github.resilience4j.circuitbreaker.CircuitBreaker circuitBreaker, String methodName) throws Throwable {\n\n\t\tfinal CompletableFuture promise = new CompletableFuture<>();"
  },
  {
    "id" : "f5296652-bd81-416a-8bea-05b9bd31b39d",
    "prId" : 303,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/303#pullrequestreview-194095936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea2000d-6d9f-4356-9ca1-4d017e2f2d89",
        "parentId" : null,
        "authorId" : "431d9a75-24c0-4318-9cce-04614ceb1422",
        "body" : "Why only do this when there is a failure?",
        "createdAt" : "2019-01-15T16:03:32Z",
        "updatedAt" : "2019-03-07T12:14:18Z",
        "lastEditedBy" : "431d9a75-24c0-4318-9cce-04614ceb1422",
        "tags" : [
        ]
      },
      {
        "id" : "f068ae12-d481-42d9-b49c-ecc8101b6d77",
        "parentId" : "1ea2000d-6d9f-4356-9ca1-4d017e2f2d89",
        "authorId" : "dbb24844-d7bc-47b7-a5ba-c189ef4c9f95",
        "body" : "This is only for any exception may be thrown during the operator invocation , meanwhile the whole logic of success case and other possible failure cases are covered into the operator logic itself : CircuitBreakerOperator.java",
        "createdAt" : "2019-01-18T13:34:09Z",
        "updatedAt" : "2019-03-07T12:14:18Z",
        "lastEditedBy" : "dbb24844-d7bc-47b7-a5ba-c189ef4c9f95",
        "tags" : [
        ]
      }
    ],
    "commit" : "268730e101df5f71340400e54059aaba9b19163c",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t\t}\n\t\t} catch (Throwable throwable) {\n\t\t\tlong durationInNanos = System.nanoTime() - start;\n\t\t\tcircuitBreaker.onError(durationInNanos, throwable);\n\t\t\tif (logger.isDebugEnabled()) {"
  }
]