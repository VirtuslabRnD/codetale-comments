[
  {
    "id" : "d7ef35e2-aba4-4f09-982a-939c83846ae3",
    "prId" : 1303,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1303#pullrequestreview-506675119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4af5d848-28d0-4791-a6c8-588503322e50",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "neat trick, we're basically trading the structural equality of `case class` in return for referential equality! i think it's worth a more detailed comment",
        "createdAt" : "2020-10-12T04:44:18Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "710396b7-f98d-4f99-94a9-a2c1a0a517b4",
        "parentId" : "4af5d848-28d0-4791-a6c8-588503322e50",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah I think it does deserve more of an explanation than I gave it. :-D",
        "createdAt" : "2020-10-12T14:34:21Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "65103ae20fd0b4605b5109e77e369f1922f5eea2",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@       * equals/hashCode implementation to use pointer equality.\n       */\n      override def equals(that: Any) = this eq that.asInstanceOf[AnyRef]\n      override def hashCode = System.identityHashCode(this)\n    }"
  },
  {
    "id" : "9712f642-0d7c-4f8a-ba4c-e665bdd71d5f",
    "prId" : 1303,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1303#pullrequestreview-509134418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a55224-812e-41e5-be01-aa3a8e1f6154",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "I believe we need to return the _new_ committed state here, otherwise we will continuously spawn all the effects we've ever queued up over and over again ",
        "createdAt" : "2020-10-15T07:23:41Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "26c82939-977d-44df-aa84-7b2149999ed5",
        "parentId" : "e9a55224-812e-41e5-be01-aa3a8e1f6154",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Just kidding! If we did that we would never run anything",
        "createdAt" : "2020-10-15T08:23:59Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "65103ae20fd0b4605b5109e77e369f1922f5eea2",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@              loop()\n            else\n              s\n          }\n"
  },
  {
    "id" : "9a2b0c89-add4-46ad-b4f0-58f538109991",
    "prId" : 1303,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1303#pullrequestreview-510628127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b4fcb9-7cfe-44a5-98b8-94e2704fa790",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "My only gripe with this is that it can turn into a very slight memory leak. Basically, `completed` won't be garbage collected until the _last_ fiber in a batch terminates.  I may be splitting hairs over this though, so feel free to rightfully ignore this :D ",
        "createdAt" : "2020-10-15T07:49:25Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "993cfc11-853e-4bc2-8de8-9eac369b63ad",
        "parentId" : "e3b4fcb9-7cfe-44a5-98b8-94e2704fa790",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I think this is okay. It's a relatively small amount of state, and the only way to avoid this is to do `Ref[Ref[LongMap[Unit]]`, but the outer `Ref` still wouldn't be collected.",
        "createdAt" : "2020-10-16T16:32:20Z",
        "updatedAt" : "2020-10-18T19:38:53Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "65103ae20fd0b4605b5109e77e369f1922f5eea2",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@              for {\n                // for catching race conditions where we finished before we were in the map\n                completed <- F.ref(LongMap[Unit]())\n\n                identifiedFibers <- registry.toList traverse {"
  }
]