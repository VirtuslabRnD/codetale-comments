[
  {
    "id" : "292acc8e-7ab2-432e-b21c-d17c7a2cefce",
    "prId" : 1316,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1316#pullrequestreview-510754364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d9a20b2-7d7a-46fa-82d7-a58bebd7de98",
        "parentId" : null,
        "authorId" : "3764809f-6ca4-4c5d-877f-8c00b82ef419",
        "body" : "It seems this diff is horribly mangled ðŸ˜© nothing has changed in the method definitions apart from making this change a bunch of times.",
        "createdAt" : "2020-10-16T19:44:01Z",
        "updatedAt" : "2020-10-21T08:24:38Z",
        "lastEditedBy" : "3764809f-6ca4-4c5d-877f-8c00b82ef419",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8caaa26a5c02ae384826089603b32b659ee581f",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +159,163 @@\n    def acquireNInternal(n: Long): F[Permit[F]] = {\n      requireNonNegative(n)\n      if (n == 0) F.pure(Permit(F.unit, F.unit))\n      else {"
  },
  {
    "id" : "67ddbf33-81db-4146-873b-18add21a6bf4",
    "prId" : 1281,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1281#pullrequestreview-506122473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Doesn't this have the cancelation issue? (i.e. isn't acquisition here uncancelable?)",
        "createdAt" : "2020-10-10T15:06:37Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "4112c958-9a7e-4f29-8c26-5be0cf77877f",
        "parentId" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "`acquireNInternal` is Mike's idea of using `F[(F[A], F[Unit])]`, which solves the issue by splitting the state manipulation, which needs restoring but not interruption, from the waiting (which needs interruption but no restoring). It's so general than ZIO actually went with that `F[(F[A], F[Unit])]` for their Resource encoding, but it comes at the cost of having to complicate Semaphore's implementation.",
        "createdAt" : "2020-10-10T15:10:27Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "7b12aead-027e-4cfc-899a-dc20db95ed4e",
        "parentId" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Ahhh! Okay then, so `permit` works correctly, which makes me suspect that we simply don't need `withPermit` anymore, right?",
        "createdAt" : "2020-10-10T15:18:13Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "e7f97251-8548-482c-944d-3b4ebabd2d45",
        "parentId" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "`withPermit` can be replaced with `permit.use`, yes. The argument now is fully about weighting the `mapK` point in another discussion, with breaking code for users (there is precedent for this type of change in http4s client, which I have an argument for)",
        "createdAt" : "2020-10-10T15:19:58Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "f5cc6c3a-0497-4245-ab8c-7bc308303139",
        "parentId" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "authorId" : "3764809f-6ca4-4c5d-877f-8c00b82ef419",
        "body" : "We can also keep `withPermit` as a derived method defined in terms of `permit.use` - so it will only break user code if a `Resource.Bracket` instance isn't available. ",
        "createdAt" : "2020-10-10T19:12:48Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "3764809f-6ca4-4c5d-877f-8c00b82ef419",
        "tags" : [
        ]
      },
      {
        "id" : "92926363-ef25-40ad-bdce-3818ce3e1741",
        "parentId" : "734f9a3c-c925-47ef-8091-177b12e0a590",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I'm in favor of just removing `withPermit` entirely and going with `mapK` instead of `imapK`. Now is the time to clean stuff up. :-D",
        "createdAt" : "2020-10-10T19:53:12Z",
        "updatedAt" : "2020-10-11T07:36:36Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "461fc9d4667fbf4034ba3aa8ae09af68e5b76f6d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +252,256 @@\n    val permit: Resource[F, Unit] =\n      Resource.make(acquireNInternal(1))(_.release).evalMap(_.await)\n  }\n"
  }
]