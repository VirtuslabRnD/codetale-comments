[
  {
    "id" : "9985e52d-8400-407c-b8ce-a7ac58a06a5d",
    "prId" : 1361,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1361#pullrequestreview-526081222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a41d57e-2761-42d5-9696-d74332a3e1f5",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "I think we should define `rank` precisely here",
        "createdAt" : "2020-11-08T14:10:42Z",
        "updatedAt" : "2020-11-08T14:29:47Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "90bec3b9-eccf-40b8-b1fb-5c0fcdb908de",
        "parentId" : "6a41d57e-2761-42d5-9696-d74332a3e1f5",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Yes, good point. Will raise a quick PR for this 👍 ",
        "createdAt" : "2020-11-09T09:47:17Z",
        "updatedAt" : "2020-11-09T09:47:17Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3848fe20f16b13e692210095d66b28e7bda5392",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@/**\n * A binomial heap is a list of trees maintaining the following invariants:\n * - The list is strictly monotonically increasing in the rank of the trees\n *   In fact, a binomial heap built from n elements has is a tree of rank i\n *   iff there is a 1 in the ith digit of the binary representation of n"
  },
  {
    "id" : "a530c9da-dd7b-4358-a86e-b7e44a70f626",
    "prId" : 1361,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1361#pullrequestreview-526084541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "351a1b40-ff7a-408f-894a-216f21e99a49",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "When I wrote [this](https://github.com/SystemFw/upperbound/blob/master/src/main/scala/queues.scala) priority queue, I used `cats-collections` [Heap](https://github.com/typelevel/cats-collections/blob/master/core/src/main/scala/cats/collections/Heap.scala), which in turn is based on [this paper](https://arxiv.org/pdf/1312.4666.pdf%20Vladimir%20Kostyukov's%20paper)\r\n\r\nThe paper says:\r\n> There are several purely functional implementations of heaps such as Leftist Heap, Binomial Heap (Okasaki, 1999) and Braun Tree (Braun and Rem, 1983), which are definitely the best choice as priority queues in a functional setting. However, there are other heaps around without proper functional implementa- tions. The simplest of them are standard binary heaps, which do not fit well into a functional environment since their reference implementation is based on mutable arrays.\r\n\r\nBut doesn't actually offer much in terms of evaluation. Any thoughts?",
        "createdAt" : "2020-11-08T14:15:54Z",
        "updatedAt" : "2020-11-08T14:29:47Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "a5baf31f-b1f5-44c3-9856-521a029289d7",
        "parentId" : "351a1b40-ff7a-408f-894a-216f21e99a49",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Oh I actually didn't know about `cats-collections`. I did vaguely look into leftist heaps as well but Okasaki had a nice implementation of binomial heaps so I just went with that to be honest as the asymptotics were the same. I probably should have investigated a bit more whether the other options have lower constant factors",
        "createdAt" : "2020-11-09T09:51:15Z",
        "updatedAt" : "2020-11-09T09:51:16Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3848fe20f16b13e692210095d66b28e7bda5392",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@ *   (in fact the rank of the ith child is r - i)\n */\nprivate[std] abstract case class BinomialHeap[A](trees: List[BinomialTree[A]]) { self =>\n\n  //Allows us to fix this on construction, ensuring some safety from"
  }
]