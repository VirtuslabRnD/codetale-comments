[
  {
    "id" : "443746d3-5702-4a43-bd5a-c355db13c52c",
    "prId" : 1361,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1361#pullrequestreview-525835254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b712c8a7-70b4-492e-a869-85d8ab89910c",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "I think writing:\r\n```scala\r\nif (capacity < 0) throw new IllegalArgumentException(...)\r\nelse ()\r\n```\r\nis slightly better since you avoid any allocation except in the error case.",
        "createdAt" : "2020-10-29T18:42:05Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "4fe3264c-b42e-40af-8b50-0b93fb542b2e",
        "parentId" : "b712c8a7-70b4-492e-a869-85d8ab89910c",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "I just took this from `Queue` but yes, probably",
        "createdAt" : "2020-10-30T09:23:54Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      },
      {
        "id" : "a3f4f0c4-b7af-4ee0-b85b-5d162dd48b3d",
        "parentId" : "b712c8a7-70b4-492e-a869-85d8ab89910c",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Actually, this is precisely what `require` does I think - it is lazy in the second argument.",
        "createdAt" : "2020-10-30T11:40:10Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      },
      {
        "id" : "0a9d5213-cc8a-43c8-aea2-a1cc19579783",
        "parentId" : "b712c8a7-70b4-492e-a869-85d8ab89910c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`require` still allocates though, because it has to allocate the thunk itself!",
        "createdAt" : "2020-11-08T17:47:28Z",
        "updatedAt" : "2020-11-08T17:47:29Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "466e447e-6510-4bcb-b8f4-0951e541ade8",
        "parentId" : "b712c8a7-70b4-492e-a869-85d8ab89910c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "#1395",
        "createdAt" : "2020-11-08T18:57:56Z",
        "updatedAt" : "2020-11-08T18:57:56Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3848fe20f16b13e692210095d66b28e7bda5392",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +218,222 @@\n  private def assertNonNegative(capacity: Int): Unit =\n    require(capacity >= 0, s\"Bounded queue capacity must be non-negative, was: $capacity\")\n\n}"
  },
  {
    "id" : "cfd5f089-898c-4b33-9750-276ec0717b05",
    "prId" : 1361,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1361#pullrequestreview-525835316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d10d392e-db29-4f9d-9b4b-d00cd09c7ed4",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "Side note: If we remove the `try` variants l *think* that if `F[_]: Semigroupal` then `PQueue[F, _]: Semigroupal` which could motivate separating this into two classes: one without try, and a subclass with try.\r\n\r\nIt is kind of interesting to imagine composing these queues as a kind of decompose and fan-out operation.\r\n\r\nAlso, I wonder if it makes sense to have two separate traits: Offer and Take. Take is covariant, Offer is contravariant. PQueue would extend both to become invariant, but very often you only need one side or the other in some code, so the variance could be useful for those applications: e.g. a consumer that loops reading from one Take and writing to a different Offer.",
        "createdAt" : "2020-10-29T18:49:49Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "8caf08e5-b99f-47ef-9eec-0d100dbeaaff",
        "parentId" : "d10d392e-db29-4f9d-9b4b-d00cd09c7ed4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Ref can play the same trick with variance actually. I completely forgot about this trick; I used to use this everywhere years ago. It's very useful in many cases.",
        "createdAt" : "2020-10-30T01:08:32Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "af812182-7a25-454f-8cee-27c6a88d1fbc",
        "parentId" : "d10d392e-db29-4f9d-9b4b-d00cd09c7ed4",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Oh that's an interesting idea! I'll definitely have a go at it. Is it worth doing as a separate PR? The existing `Queue` would benefit from the same treatment and then this PR will then be quite big",
        "createdAt" : "2020-10-30T09:24:39Z",
        "updatedAt" : "2020-11-02T11:59:49Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      },
      {
        "id" : "1d871c2b-8144-4a76-80cd-be1e91b7c1dd",
        "parentId" : "d10d392e-db29-4f9d-9b4b-d00cd09c7ed4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Definitely separate PR it. Let's keep it granular. Also ðŸ’¯ that the existing queue can also benefit from this.",
        "createdAt" : "2020-11-08T17:47:56Z",
        "updatedAt" : "2020-11-08T17:47:56Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "47545328-39fb-4e5a-9e34-441be4478d2c",
        "parentId" : "d10d392e-db29-4f9d-9b4b-d00cd09c7ed4",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "#1396",
        "createdAt" : "2020-11-08T18:58:50Z",
        "updatedAt" : "2020-11-08T18:58:51Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3848fe20f16b13e692210095d66b28e7bda5392",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@ */\n\nabstract class PQueue[F[_], A] { self =>\n\n  /**"
  },
  {
    "id" : "0d9ee90a-dbbb-4046-9af6-61bdc6496921",
    "prId" : 1361,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1361#pullrequestreview-526081023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c516da55-ff82-4361-bfc5-4bbff3f1c2ac",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "I'm not sure about basing this interface on `Order`, vs just taking a priority on `offer`. It seems limiting in cases where you want a dynamic priority",
        "createdAt" : "2020-11-08T14:10:03Z",
        "updatedAt" : "2020-11-08T14:29:47Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "90c78e7f-6743-405a-91d2-9c4a8c44f0f1",
        "parentId" : "c516da55-ff82-4361-bfc5-4bbff3f1c2ac",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Is there a scenario where you want a dynamic priority and can't represent it by `Order`? I definitely don't think we want to allow for an effectful priority, since that would mean the structure of the heap would be unstable",
        "createdAt" : "2020-11-08T17:49:31Z",
        "updatedAt" : "2020-11-08T17:49:32Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "670e1974-0bd7-4071-b24b-6223e7e014fc",
        "parentId" : "c516da55-ff82-4361-bfc5-4bbff3f1c2ac",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "I was thinking simply `offer(a: A, priority: Int)` tbh, in cases where e.g you want to re-enqueue at higher priority. It can still be done with a newtype though, so maybe this is moot",
        "createdAt" : "2020-11-08T17:51:31Z",
        "updatedAt" : "2020-11-08T17:51:32Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "394ba740-fe2d-4a58-9225-98ef8643755a",
        "parentId" : "c516da55-ff82-4361-bfc5-4bbff3f1c2ac",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Yeah this seemed more general as you can always recover `priority: Int` with `(Int, A)` and `Order.by(_._1)`",
        "createdAt" : "2020-11-09T09:47:01Z",
        "updatedAt" : "2020-11-09T09:47:01Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3848fe20f16b13e692210095d66b28e7bda5392",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@ * on a binomial heap (Okasaki)\n *\n * Assumes an `Order` instance is in scope for `A`\n */\n"
  }
]