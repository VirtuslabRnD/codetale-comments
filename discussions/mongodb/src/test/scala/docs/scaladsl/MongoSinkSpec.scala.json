[
  {
    "id" : "0cc6e394-6ed6-4f55-aab9-7d6992d2724d",
    "prId" : 2187,
    "prUrl" : "https://github.com/akka/alpakka/pull/2187#pullrequestreview-373068060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6e1f9b7-ab5a-43e6-b2b3-0857286e3053",
        "parentId" : null,
        "authorId" : "2a5efe0d-0005-4541-b69d-be2ac90af001",
        "body" : "In case of `replaceOne` such filter is probably the only one filter that makes sense, so it would be nice to have some predefined filter which wraps this expression. It would be something like:\r\n```\r\nobject FilterId {\r\n  def apply[T](id: T): Bson = Filters.eq(\"_id\", id)\r\n}\r\n```\r\nWhat do you think?",
        "createdAt" : "2020-03-10T21:48:51Z",
        "updatedAt" : "2020-03-12T20:56:52Z",
        "lastEditedBy" : "2a5efe0d-0005-4541-b69d-be2ac90af001",
        "tags" : [
        ]
      },
      {
        "id" : "c37208b2-0ff6-49ff-a3d5-267f2ecb1900",
        "parentId" : "b6e1f9b7-ab5a-43e6-b2b3-0857286e3053",
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "I would guess that's the usual use case as well, but the current `updateOne` or `replaceOne` APIs still expect a generic filter.  This API should be consistent.",
        "createdAt" : "2020-03-11T19:40:16Z",
        "updatedAt" : "2020-03-12T20:56:52Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "24ba61e24825182618e57e98a5662d5170d6766a",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +231,235 @@        i =>\n          DocumentReplace[DomainObject](\n            filter = Filters.eq(\"_id\", i),\n            replacement = DomainObject(i, s\"updated-first-property-$i\", s\"updated-second-property-$i\")\n          )"
  }
]