[
  {
    "id" : "36bde3f3-752a-4b1d-8362-66c2b025c005",
    "prId" : 1423,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1423#pullrequestreview-198998113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "979471d0-65ea-4b82-88d0-d8e91dcb641a",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Most of the code in `Heap_Collect` belongs to either the `Marker` or phase management module. The heap part of the code should be something along the lines of:\r\n1. Stats boilerplate\r\n2. Call phases to start marking phase.\r\n2. Call marker entry point method to do actual marking on the mutator thread until it's done.\r\n3. Call phases to trigger sweeping phase.\r\n3. Call sweeper entry point.",
        "createdAt" : "2019-02-01T10:15:28Z",
        "updatedAt" : "2019-07-17T09:53:34Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "9349177c2456e08c91598c5a158c63a30876a4e0",
    "line" : 226,
    "diffHunk" : "@@ -1,1 +224,228 @@                      heap->mark.currentEnd_ns);\n    Phase_StartSweep(heap);\n}\n\nbool Heap_shouldGrow(Heap *heap) {"
  },
  {
    "id" : "5318a287-520b-4e68-892b-06e79354359c",
    "prId" : 1423,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1423#pullrequestreview-198998113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e857ae8-5239-45bd-9b04-b26ca06ef70c",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Similarly to `Heap_Collect` most of the code either belongs in sweeper or phase management modules.",
        "createdAt" : "2019-02-01T10:16:31Z",
        "updatedAt" : "2019-07-17T09:53:34Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "9349177c2456e08c91598c5a158c63a30876a4e0",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@           freeBlockCount < heap->minFreeRatio * blockCount ||\n           unavailableBlockCount > blockCount * MAX_UNAVAILABLE_RATIO;\n}\n\nvoid Heap_GrowIfNeeded(Heap *heap) {"
  }
]