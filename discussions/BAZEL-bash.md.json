[
  {
    "id" : "b9fa2f31-d2bc-4235-962a-4d0217d9ec00",
    "prId" : 2223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "937d4b81-cd98-4c2a-b9b1-747e4dfcd2e2",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "At least on Linux the sandbox also watches file access and complains if undeclared dependencies where accessed. There are generally whitelisted directories though. ",
        "createdAt" : "2019-07-18T15:46:49Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "17ac8f81-8980-4000-85a2-31ec003ebd00",
        "parentId" : null,
        "authorId" : "929ca968-138c-46b2-ae13-cf94da589311",
        "body" : "@f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd comments",
        "createdAt" : "2021-07-21T12:09:00.312Z",
        "updatedAt" : "2021-07-21T12:09:00.312Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@As far as I can tell they are not run in any kind of chroot or container (at\nleast on macOS), although they are run with a restricted PATH (on Linux) and in\na specially set-up folder.\n\nAs such, in order to get all of your dependencies available, you need to"
  },
  {
    "id" : "568d2d00-3efa-4ea9-8925-573bf8c81265",
    "prId" : 2223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aec248f0-df67-47d7-b639-03bbabc9d599",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "[`select`](https://docs.bazel.build/versions/master/be/functions.html#select) is another way to put conditionals into BUILD files. More complex expressions can to be extracted into `.bzl` files and loaded as macros.",
        "createdAt" : "2019-07-18T16:08:24Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +71,75 @@alias(\n    name = \"yarn\",\n    actual = \"@nodejs//:bin/yarn.cmd\" if is_windows else \"@nodejs//:bin/yarn\",\n)\n```"
  },
  {
    "id" : "c6e30da0-c5b9-4625-b630-bf2eeed8c45f",
    "prId" : 2223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9f2a279-8f81-4631-a5ef-cdeaaf6e287c",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "filenames are valid targets. They may need appropriate visibility using [`exports_files`](https://docs.bazel.build/versions/master/be/functions.html#exports_files) though.",
        "createdAt" : "2019-07-18T16:21:14Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@access those files directly by their expected path, as you can do in\n`genrule`s, will not work with `sh_test` on Windows. You may have to wrap your\nlocal files in a `filegroup` to have a valid target for the `$(location ...)`\ncall you should pass as an `args` to the `sh_test`."
  },
  {
    "id" : "5b20fb87-207a-4cd7-890a-c9bb895cb2ad",
    "prId" : 2223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91cbccb8-94a7-4165-9feb-7ca0508b0b72",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "By string substitution you mean `$(location)` expansion? It's syntax is fairly limited. The details are documented [here](https://docs.bazel.build/versions/master/be/make-variables.html#predefined_label_variables).",
        "createdAt" : "2019-07-19T07:24:51Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "4ff22bec-0c45-4b82-a659-a055012db139",
        "parentId" : "91cbccb8-94a7-4165-9feb-7ca0508b0b72",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "TIL:\r\n\r\n> `location`: A synonym for either `execpath` or `rootpath`, depending on the attribute being expanded. This is legacy pre-Starlark behavior and **not recommended** unless you really know what it does for a particular rule. See #2475 for details.\r\n\r\nI'm not going to go back to fix it now, but this is definitely something I'll dig into next time I have to touch Bazel.",
        "createdAt" : "2019-07-19T14:04:32Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@\nBazel supports simple conditionals in its rules, though I have not found a way\nto use them in string substitutions. As some rules have different names under\nWindows, this creates a bit of a problem. Aliases provide a way around that;\nfor example:"
  },
  {
    "id" : "ad9cbd7d-bfe0-4265-8de4-84a26404b87f",
    "prId" : 2223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f2b3854-8911-4a4b-87fa-e0a80eb377fa",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\na specially set up folder.\r\n```",
        "createdAt" : "2019-07-19T07:50:46Z",
        "updatedAt" : "2019-07-19T14:08:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89bfbad4ef7c0169b2a8a068c81bc9b631bc270",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@As far as I can tell they are not run in any kind of chroot or container (at\nleast on macOS), although they are run with a restricted PATH (on Linux) and in\na specially set-up folder.\n\nAs such, in order to get all of your dependencies available, you need to"
  },
  {
    "id" : "17ac8edb-2ca0-4000-8e38-587c994e8c00",
    "prId" : null,
    "prUrl" : null,
    "prSource" : null,
    "comments" : [
      {
        "id" : "17ac8edb-2ca0-4000-822f-50ceebab4d00",
        "parentId" : null,
        "authorId" : "929ca968-138c-46b2-ae13-cf94da589311",
        "body" : "New comment @58ab78bf-4a83-4c8a-8865-3baa64edd5ea @f2bb5ae8-6c47-4c83-85c6-1e82ecd89dfd @5f6b922a-83eb-4419-97b1-13c757c1e583 ",
        "createdAt" : "2021-07-21T11:57:38.89Z",
        "updatedAt" : "2021-07-21T11:57:38.89Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "scala-sql-codegen-before-deletion-5453-gbc7f918",
    "line" : null,
    "diffHunk" : "@@ -1,1 +94,103 @@## `sh_test`: \"runfiles\"\n\nWhereas `genrule` takes an inline Bash script as its `cmd` attribute, the\n`sh_test` script will run a Bash script defined in a separate file and\nspecified as the single entry in the `srcs` attribute. This adds the\ncomplication that `location` substitution is not available.\n\nA partial workaround for that is to pass the relevant paths to the script as\nthe `args` attribute of the `sh_rule`; those will be available as traditional\narguments in Bash (`$@`, `$#`, `$1`, etc.)."
  }
]