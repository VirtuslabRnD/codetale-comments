[
  {
    "id" : "32b2a6e0-d8a8-4995-8a25-bdc861007d37",
    "prId" : 28281,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d547ee5-5f43-4be1-b1a0-5764c4723e55",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I actually think the 401 and 403 response codes are getting handled here... otherwise I don't see how the unit test that expects an error in 401/403 cases could be passing. Can you verify that, and remove the 401/403 handling below?\n",
        "createdAt" : "2016-07-07T15:18:59Z",
        "updatedAt" : "2016-07-18T10:50:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa0dd46ab7369dbca900273587a49268fb7dbaf0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\t\treturn w.RestClient.Post().Body(r).Do()\n\t\t})\n\t\tif err := result.Error(); err != nil {\n\t\t\t// An error here indicates bad configuration or an outage. Log for debugging.\n\t\t\tglog.Errorf(\"Failed to make webhook authorizer request: %v\", err)"
  },
  {
    "id" : "67f1b080-2a3b-4119-98d1-54d7d704709d",
    "prId" : 20347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da174e89-b124-4399-a0bd-6cf1ad6e3b10",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm not used to seeing versioned types built directly, but I'm sort of unsure what I'd expect sending an API type to something that isn't exactly an API server\n",
        "createdAt" : "2016-02-13T05:53:36Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d271699a-2fc2-451f-aeee-12e40d848b43",
        "parentId" : "da174e89-b124-4399-a0bd-6cf1ad6e3b10",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Going to use the group version in `\"k8s.io/kubernetes/pkg/apis/authorization/v1beta1\"`\n\n```\ntypeMeta = unversioned.TypeMeta{\n    APIVersion: v1beta1.SchemeGroupVersion.String(),\n}\n```\n\nYes there is very little code I can find that sets it explicitly. Don't know what the `Kind` field should be.\n",
        "createdAt" : "2016-02-13T06:54:38Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "df06b2f6-a07c-4c6e-8943-8ec11f3f4fe8",
        "parentId" : "da174e89-b124-4399-a0bd-6cf1ad6e3b10",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The encoder should take care of putting the group and version onto  the object based on the encoder and the scheme.  You should be sure that your encoding explicitly uses the version that you want or you may end up converting by accident.\n",
        "createdAt" : "2016-02-15T13:46:35Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ede606f640cd5db9a4be09e436a2648f330d9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +144,148 @@//\nfunc (w *WebhookAuthorizer) Authorize(attr authorizer.Attributes) (err error) {\n\tr := &v1beta1.SubjectAccessReview{\n\t\tSpec: v1beta1.SubjectAccessReviewSpec{\n\t\t\tUser:   attr.GetUserName(),"
  },
  {
    "id" : "b719bc1b-9288-4825-8c5a-ff3a34ca3c68",
    "prId" : 20347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5eab0e6-2f44-4fe1-a649-9fd6ff1f8b87",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I would expect a kind/apiVersion field here\n",
        "createdAt" : "2016-02-13T05:54:28Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ede606f640cd5db9a4be09e436a2648f330d9",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@// provided bellow.\n//\n//     {\n//       \"apiVersion\": \"authorization.k8s.io/v1beta1\",\n//       \"kind\": \"SubjectAccessReview\","
  },
  {
    "id" : "e1be594e-17fa-44b8-bf32-897f4d10d21f",
    "prId" : 20347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2695f54b-b52a-4550-bb64-31ac0b17e14e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "kind/apiVersion here as well\n",
        "createdAt" : "2016-02-13T05:54:44Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ede606f640cd5db9a4be09e436a2648f330d9",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +124,128 @@// disallow access. A permissive response would return:\n//\n//     {\n//       \"apiVersion\": \"authorization.k8s.io/v1beta1\",\n//       \"kind\": \"SubjectAccessReview\","
  },
  {
    "id" : "65bb074e-abe9-4633-996e-4765c8f591e0",
    "prId" : 20347,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7758b762-4834-409c-bb98-28bf7edf1cd5",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This is different than the typical path of working with an internal version and letting the `Body(r)` and `result.Into(r)` functions convert to and from wire-format. I think doing it this way means we don't pick up defaulting or conversion, and it means this can only deal with a single version. I'm not sure how this _should_ behave since we don't have the normal version negotiation bits in place on the other end... just observing this is an unusual path\n",
        "createdAt" : "2016-02-16T20:34:42Z",
        "updatedAt" : "2016-02-22T19:49:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ede606f640cd5db9a4be09e436a2648f330d9",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +143,147 @@//     }\n//\nfunc (w *WebhookAuthorizer) Authorize(attr authorizer.Attributes) (err error) {\n\tr := &v1beta1.SubjectAccessReview{\n\t\tSpec: v1beta1.SubjectAccessReviewSpec{"
  }
]