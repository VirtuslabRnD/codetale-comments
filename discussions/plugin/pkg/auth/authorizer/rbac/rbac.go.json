[
  {
    "id" : "aaea94d8-dd30-474b-8f24-f6799e18b5d7",
    "prId" : 65906,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65906#pullrequestreview-135098634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfb60dca-0c55-4419-819a-a41659322d97",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "nit: `reason := \"no RBAC policy matched\"` instead of the `else`",
        "createdAt" : "2018-07-06T17:29:49Z",
        "updatedAt" : "2018-07-06T17:29:49Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "e16ab61e-0721-483b-a06b-eb7c4a7edab8",
        "parentId" : "dfb60dca-0c55-4419-819a-a41659322d97",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't like setting and then overwriting :)",
        "createdAt" : "2018-07-06T17:35:48Z",
        "updatedAt" : "2018-07-06T17:35:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c012f1c4966dfe6124192abafeba892ae9510a0",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +119,123 @@\t}\n\n\treason := \"\"\n\tif len(ruleCheckingVisitor.errors) > 0 {\n\t\treason = fmt.Sprintf(\"RBAC: %v\", utilerrors.NewAggregate(ruleCheckingVisitor.errors))"
  },
  {
    "id" : "5065d2f2-2e48-471e-a36f-5114b848d35c",
    "prId" : 65906,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65906#pullrequestreview-146215104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82a33f9a-ac11-4e3e-8068-0b090f40726e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think is correct.  This changed a very clear message into a less clear message:\r\n\r\n```\r\nUser “smarterclayton” cannot update namespaces in the namespace “ci-op-r5wf6x70”\r\n```\r\n\r\nbecomes\r\n\r\n```\r\nUser “smarterclayton” cannot update namespaces in the namespace “ci-op-r5wf6x70”: no RBAC policy matched\r\n```\r\n\r\nI'm a human.  I don't need to know that no RBAC policy matched.  That's actually confusing, because now I think I might be missing a policy.  I don't need a reason when the reason is that I don't have permission.",
        "createdAt" : "2018-08-14T18:02:26Z",
        "updatedAt" : "2018-08-14T18:02:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "539c7527-8140-4e86-adc3-e6447986b949",
        "parentId" : "82a33f9a-ac11-4e3e-8068-0b090f40726e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The addition of this clause makes the problem look like an actual bug in the product, not \"you lack permission\".",
        "createdAt" : "2018-08-14T18:03:06Z",
        "updatedAt" : "2018-08-14T18:03:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3b413f94-283c-4299-a99a-df2195ee1f49",
        "parentId" : "82a33f9a-ac11-4e3e-8068-0b090f40726e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> This changed a very clear message into a less clear message:\r\n> `User “smarterclayton” cannot update namespaces in the namespace “ci-op-r5wf6x70”`\r\n> becomes\r\n> `User “smarterclayton” cannot update namespaces in the namespace “ci-op-r5wf6x70”: no RBAC policy matched`\r\n\r\nthe message wasn't clear if any authorizers returned denial reasons. an alternative to this could be to stop returning detailed reasons from authorizers altogether in denial cases. I'm not sure if that's better or not.",
        "createdAt" : "2018-08-14T18:53:51Z",
        "updatedAt" : "2018-08-14T18:54:23Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f93abc7b-8660-4bb7-a611-1865540544ce",
        "parentId" : "82a33f9a-ac11-4e3e-8068-0b090f40726e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, I'm just looking at this a regular user.  What is clearer to a regular user.\r\n\r\n1. You don't have permission to do X to Y\r\n2. You don't have permission to do X to Y: no RBAC policy\r\n\r\nI don't understand how 2 improves 1.  I have to understand RBAC, policy, and then the fact that there is none.\r\n\r\nIsn't a special denial special, and the RBAC denial normal?",
        "createdAt" : "2018-08-14T19:23:14Z",
        "updatedAt" : "2018-08-14T19:23:14Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c012f1c4966dfe6124192abafeba892ae9510a0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +122,126 @@\tif len(ruleCheckingVisitor.errors) > 0 {\n\t\treason = fmt.Sprintf(\"RBAC: %v\", utilerrors.NewAggregate(ruleCheckingVisitor.errors))\n\t} else {\n\t\treason = \"no RBAC policy matched\"\n\t}"
  },
  {
    "id" : "642dadf3-3345-4673-9326-892cec4e47a0",
    "prId" : 58807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58807#pullrequestreview-97342777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19a81e02-99bd-4256-8756-611b6bd1a6a6",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "I'd like to be able to tell which authorizer allowed a request. This approach is not reliable, and would require updating every reason message.\r\n\r\nInstead, I suggest:\r\n1) Add a `Name()` function to the Authorizer interface\r\n2) Update the union authorizer to annotate the audit log with the decider's name",
        "createdAt" : "2018-02-16T21:14:09Z",
        "updatedAt" : "2018-03-19T00:56:56Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "5ba936e4-ea57-44bb-bc15-1c4e7a924eac",
        "parentId" : "19a81e02-99bd-4256-8756-611b6bd1a6a6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not sure about this approach\r\n\r\n> Add a Name() function to the Authorizer interface\r\n\r\nIt's unclear what `Name()` would be for the union authorizer\r\n\r\n> Update the union authorizer to annotate the audit log with the decider's name\r\n\r\nI didn't think we wanted to plumb audit events down into all the authorizers\r\n\r\nthat also means you lose visibility to what authorizer made the decision if it was on the other side of a webhook boundary",
        "createdAt" : "2018-02-16T22:38:22Z",
        "updatedAt" : "2018-03-19T00:56:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "af636c08-d6a6-4367-ba0f-677374397d13",
        "parentId" : "19a81e02-99bd-4256-8756-611b6bd1a6a6",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "> It's unclear what Name() would be for the union authorizer\r\n\r\n`union`? Or just name the authorizers when they're passed to the union authorizer.\r\n\r\n> I didn't think we wanted to plumb audit events down into all the authorizers\r\n\r\ngood point. maybe include it in the reason then? Or is that potentially leaking too much information to the requester?\r\n\r\n> that also means you lose visibility to what authorizer made the decision if it was on the other side of a webhook boundary\r\n\r\nThe name doesn't need to be a constant. The webhook could derive its name from the config (although that means you can't have multiplexed authorizers on the other side).",
        "createdAt" : "2018-02-16T23:02:24Z",
        "updatedAt" : "2018-03-19T00:56:56Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "440aab5b8661b63aa41cbdeb8f969f7725ea9a74",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +63,67 @@\tif rule != nil && RuleAllows(v.requestAttributes, rule) {\n\t\tv.allowed = true\n\t\tv.reason = fmt.Sprintf(\"RBAC: allowed by %s\", source.String())\n\t\treturn false\n\t}"
  },
  {
    "id" : "95209825-9efe-4302-815a-473ced2f6df1",
    "prId" : 58807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58807#pullrequestreview-104835419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe49a72c-bac4-482a-a549-fd0d55890818",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Reason is also set on [line 123](https://github.com/CaoShuFeng/kubernetes/blob/062f8130fd83e49b0b677b35a9f815ede85d68be/plugin/pkg/auth/authorizer/rbac/rbac.go#L123). \r\n\r\nI'd prefer to just tack on the `RBAC:` label in the authorize method.",
        "createdAt" : "2018-03-14T23:26:59Z",
        "updatedAt" : "2018-03-19T00:56:56Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a722d395-ba06-4bec-9824-7c4d371256a0",
        "parentId" : "fe49a72c-bac4-482a-a549-fd0d55890818",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "> Reason is also set on line 123.\r\n\r\nDone.",
        "createdAt" : "2018-03-19T03:54:47Z",
        "updatedAt" : "2018-03-19T03:54:47Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "7be53244-00a8-4289-8da5-a7342a4a8c35",
        "parentId" : "fe49a72c-bac4-482a-a549-fd0d55890818",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "> I'd prefer to just tack on the RBAC: label in the authorize method.\r\n\r\nThis requires checking \"len(reason) == 0\"?\r\nIt makes the code a little bit more complex...",
        "createdAt" : "2018-03-19T03:58:30Z",
        "updatedAt" : "2018-03-19T03:58:30Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      }
    ],
    "commit" : "440aab5b8661b63aa41cbdeb8f969f7725ea9a74",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +63,67 @@\tif rule != nil && RuleAllows(v.requestAttributes, rule) {\n\t\tv.allowed = true\n\t\tv.reason = fmt.Sprintf(\"RBAC: allowed by %s\", source.String())\n\t\treturn false\n\t}"
  },
  {
    "id" : "40d122eb-e110-4e00-b9a1-d33fed46e9f7",
    "prId" : 44449,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44449#pullrequestreview-33314855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ceab7a-7af0-4664-8f63-c5737699aba0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "correct grammar?!",
        "createdAt" : "2017-04-18T07:39:39Z",
        "updatedAt" : "2017-04-20T14:53:00Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f351ee43-dc0c-4708-9e35-54c431856934",
        "parentId" : "87ceab7a-7af0-4664-8f63-c5737699aba0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not seeing the mistake...",
        "createdAt" : "2017-04-18T18:34:23Z",
        "updatedAt" : "2017-04-20T14:53:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "67360883bc801b0f1334b146e8dce6f282e50e7e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +49,53 @@}\n\n// authorizingVisitor short-circuits once allowed, and collects any resolution errors encountered\ntype authorizingVisitor struct {\n\trequestAttributes authorizer.Attributes"
  },
  {
    "id" : "73a5db26-0143-49bd-8427-79c047d85aa6",
    "prId" : 25634,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "811e6388-6432-4863-b83a-98d8fb9d51cc",
        "parentId" : null,
        "authorId" : "d3a698cd-821e-4a0c-81a8-a1e3713a6871",
        "body" : "This looks backwards to me? Shouldn't a rule with `Verbs`, `Resources`, etc. be constructed for resource requests?\n",
        "createdAt" : "2016-05-19T01:05:11Z",
        "updatedAt" : "2016-05-25T21:26:24Z",
        "lastEditedBy" : "d3a698cd-821e-4a0c-81a8-a1e3713a6871",
        "tags" : [
        ]
      },
      {
        "id" : "3b92d2c0-30a6-4bd9-9a41-89c83c42f78d",
        "parentId" : "811e6388-6432-4863-b83a-98d8fb9d51cc",
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "Yeah you're right. Writing tests for this now.\n",
        "createdAt" : "2016-05-19T01:14:38Z",
        "updatedAt" : "2016-05-25T21:26:24Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "36ecec58f002a55a0ddc3a1fb592d1c9e19f22f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +50,54 @@\t// Frame the authorization request as a privilege escalation check.\n\tvar requestedRule rbac.PolicyRule\n\tif attr.IsResourceRequest() {\n\t\trequestedRule = rbac.PolicyRule{\n\t\t\tVerbs:         []string{attr.GetVerb()},"
  }
]