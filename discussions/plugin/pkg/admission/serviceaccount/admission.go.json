[
  {
    "id" : "ae420aa2-97fa-4e4e-879a-07bf5d601ad9",
    "prId" : 89696,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89696#pullrequestreview-385950247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29eb13fc-9c87-491d-95f5-58b72d48bfda",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "are token secrets whose name is > 63 chars also an issue?",
        "createdAt" : "2020-04-01T03:00:14Z",
        "updatedAt" : "2020-04-01T03:00:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "98d7d7d8-c2f7-4d85-b412-6ed2be93d1dd",
        "parentId" : "29eb13fc-9c87-491d-95f5-58b72d48bfda",
        "authorId" : "bd0ae45c-a12f-413e-93e4-58a3c3623a4f",
        "body" : "No, there is no problem with the token name length. For example:\r\n\r\nToken for that service account\r\n```yaml\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  namespace: default\r\n  name: this-is-longest-service-account-name-in-the-world-to-test-that-names-longer-than-sixty-three-characters-dont-work-for-volume-mount\r\n```\r\nis `this-is-longest-service-account-name-in-the-world-to-test-v5lcp` (63 chars)\r\n\r\nAnd so the volume looks like:\r\n```yaml\r\n  volumes:\r\n  - name: this-is-longest-service-account-name-in-the-world-to-test-v5lcp\r\n    secret:\r\n      defaultMode: 420\r\n      secretName: this-is-longest-service-account-name-in-the-world-to-test-v5lcp\r\n```\r\n\r\nEven if volume with that name already exists, `generateName` function do the job:\r\n```yaml\r\n  volumes:\r\n  - emptyDir: {}\r\n    name: this-is-longest-service-account-name-in-the-world-to-test-v5lcp\r\n  - name: this-is-longest-service-account-name-in-the-world-to-test-fk56m\r\n    secret:\r\n      defaultMode: 420\r\n      secretName: this-is-longest-service-account-name-in-the-world-to-test-v5lcp\r\n```",
        "createdAt" : "2020-04-01T04:53:48Z",
        "updatedAt" : "2020-04-01T06:23:48Z",
        "lastEditedBy" : "bd0ae45c-a12f-413e-93e4-58a3c3623a4f",
        "tags" : [
        ]
      },
      {
        "id" : "99c43ae0-90e3-43ac-8ec3-0047246a5d00",
        "parentId" : "29eb13fc-9c87-491d-95f5-58b72d48bfda",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "thanks for checking",
        "createdAt" : "2020-04-01T21:08:13Z",
        "updatedAt" : "2020-04-01T21:08:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea32811cbdac352834002828b283ca154836e889",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +469,473 @@\t\t\t// Try naming the volume the same as the serviceAccountToken, and uniquify if needed\n\t\t\t// Replace dots because volumeMountName can't contain it\n\t\t\ttokenVolumeName = strings.Replace(serviceAccountToken, \".\", \"-\", -1)\n\t\t\tif allVolumeNames.Has(tokenVolumeName) {\n\t\t\t\ttokenVolumeName = s.generateName(fmt.Sprintf(\"%s-\", tokenVolumeName))"
  },
  {
    "id" : "7f31f146-3e10-4876-8f0b-62889e02b49c",
    "prId" : 50399,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50399#pullrequestreview-57003715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0312bea8-5060-4c63-8943-29a9601e6c9c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Shouldn't this be `!updateInitialized`?",
        "createdAt" : "2017-08-15T21:07:27Z",
        "updatedAt" : "2017-08-17T19:51:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f7801565-9bcc-4c8f-a728-eaf5d08a7f45",
        "parentId" : "0312bea8-5060-4c63-8943-29a9601e6c9c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "After the pod is initialized, `pod.spec.serviceaccountname/imagepullsecrets/volumes` are immutable, so the serviceaccount admission controller doesn't need to take any action if the request is updating an already initialized pod.",
        "createdAt" : "2017-08-15T21:40:35Z",
        "updatedAt" : "2017-08-17T19:51:46Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "137ed3ae-b263-4077-a228-b6994edd9508",
        "parentId" : "0312bea8-5060-4c63-8943-29a9601e6c9c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "updateInitialized is true before the pod is initialized.",
        "createdAt" : "2017-08-17T05:27:01Z",
        "updatedAt" : "2017-08-17T19:51:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4c2faea9-7a14-41cc-be02-2620c929518c",
        "parentId" : "0312bea8-5060-4c63-8943-29a9601e6c9c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "`IsUpdatingInitializedObject` returns true only if `oldObj.initializers==nil`, i.e., false if the pod is already initialized before the update.\r\n\r\nI'll correct the comment of the function.",
        "createdAt" : "2017-08-17T06:59:06Z",
        "updatedAt" : "2017-08-17T19:51:46Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "855cf89c-cb8a-4577-987f-06d70430ee33",
        "parentId" : "0312bea8-5060-4c63-8943-29a9601e6c9c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "ok, wording was not easy to reason about.",
        "createdAt" : "2017-08-17T17:51:25Z",
        "updatedAt" : "2017-08-17T19:51:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf6155b08c9b17c905c3da3915b149a647918f91",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +149,153 @@\t\treturn err\n\t}\n\tif updateInitialized {\n\t\t// related pod spec fields are immutable after the pod is initialized\n\t\treturn nil"
  },
  {
    "id" : "788bc9b2-df4b-4600-8eee-8d80f991f875",
    "prId" : 25830,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19c0a1d0-ec8d-48b5-a064-2c59bc76569c",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "extract method?\n",
        "createdAt" : "2016-05-20T15:59:24Z",
        "updatedAt" : "2016-05-20T15:59:24Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "bbb21398-a3fc-4b4c-9a2e-87698105d20a",
        "parentId" : "19c0a1d0-ec8d-48b5-a064-2c59bc76569c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Message would be different\n",
        "createdAt" : "2016-05-20T16:42:04Z",
        "updatedAt" : "2016-05-20T16:42:04Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7bcbe02e-e3a9-472a-9e82-cc98e5d42702",
        "parentId" : "19c0a1d0-ec8d-48b5-a064-2c59bc76569c",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "ok, agree it's not worth it here.\n",
        "createdAt" : "2016-05-20T18:08:39Z",
        "updatedAt" : "2016-05-20T18:08:39Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "588f15844b50ce038d0a582cd020cb057c0497ef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +326,330 @@\n\tfor _, container := range pod.Spec.InitContainers {\n\t\tfor _, env := range container.Env {\n\t\t\tif env.ValueFrom != nil && env.ValueFrom.SecretKeyRef != nil {\n\t\t\t\tif !mountableSecrets.Has(env.ValueFrom.SecretKeyRef.Name) {"
  },
  {
    "id" : "8d867530-bd3a-4fbe-9b18-1f8b0ceb92e9",
    "prId" : 10523,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does this need to be flag-controlled if there's no way to get it to be false?\n",
        "createdAt" : "2015-06-30T16:45:09Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "584ac1ee-8d16-490b-b28e-2635447f17e2",
        "parentId" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not sure... we don't have any config around admission plugins currently... this was more for testing and downstream consumption/customization\n",
        "createdAt" : "2015-06-30T16:47:05Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b4a3be2-aee7-40d3-a456-9f2b1c0d1ef6",
        "parentId" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't think we really want to flag this.\n",
        "createdAt" : "2015-06-30T17:40:12Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "9a455eba-489b-4288-a124-dd1a67b154c8",
        "parentId" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If it's for testing, can we lowercase it? Or remove entirely works for me too. :)\n",
        "createdAt" : "2015-06-30T18:20:50Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "51909bfb-3d6a-4d8a-9755-25f9b2be1f84",
        "parentId" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> and downstream consumption/customization\n",
        "createdAt" : "2015-06-30T18:28:42Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fb70c8b0-6d3d-43ad-a231-8291891b923c",
        "parentId" : "fcea2ebf-e76c-4caf-b01e-c35adc42304f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Agree with Q - an HTTP retry error sounds right, but I don't know the\ncode-level mechanisms we have for that at this point :)\n\nOn Tue, Jun 30, 2015 at 11:29 AM, Jordan Liggitt notifications@github.com\nwrote:\n\n> In plugin/pkg/admission/serviceaccount/admission.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/10523#discussion_r33606695\n> :\n> \n> > @@ -57,6 +57,8 @@ type serviceAccount struct {\n> > \n> > ```\n> > // LimitSecretReferences rejects pods that reference secrets their service accounts do not reference\n> > LimitSecretReferences bool\n> > ```\n> > -   // RequireAPIToken determines whether pod creation attempts are rejected if no API token exists for the pod's service account\n> > -   RequireAPIToken bool\n> \n>  and downstream consumption/customization\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/10523/files#r33606695\n> .\n",
        "createdAt" : "2015-06-30T18:33:43Z",
        "updatedAt" : "2015-06-30T20:14:46Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecebac93951d6ec83593ca90dff27f9b78faa259",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +59,63 @@\tLimitSecretReferences bool\n\t// RequireAPIToken determines whether pod creation attempts are rejected if no API token exists for the pod's service account\n\tRequireAPIToken bool\n\t// MountServiceAccountToken creates Volume and VolumeMounts for the first referenced ServiceAccountToken for the pod's service account\n\tMountServiceAccountToken bool"
  },
  {
    "id" : "fbb56e09-a0a1-4be4-93ea-7d0949265202",
    "prId" : 8582,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hrm, you mean I can't add a secret manually and then use it? I have to add it, add a ref to the service account, and _then_ use it?\n",
        "createdAt" : "2015-05-21T23:10:06Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fdc0e724-d9d0-412c-9c46-a5450bfeef7d",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Hrm, you mean I can't add a secret manually and then use it? I have to add it, add a ref to the service account, and then use it?\n\nIt depends on whether you're set the service account admission controller to enforce the restriction.  Used in this manner, service accounts can help control access to secrets in a namespace.  I've extended it to apply similar rules to `ImagePullSecrets`.\n",
        "createdAt" : "2015-05-22T01:10:26Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ba8bd588-c8ab-4be0-ad39-927734a4a095",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@lavalamp You don't have to make a service account in order to use a secret.  You can reference a pull secret directly from a pod or via service account.\n",
        "createdAt" : "2015-05-22T15:12:52Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "dcba2848-c248-4b55-81db-360ee4f9a816",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Service accounts are a likely way to gate access to secrets eventually. The admission controller has a \"limitSecrets\" option (false by default for now) that only lets the pod use secrets that are referenced by its service account. \n",
        "createdAt" : "2015-05-22T15:15:28Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "d28d41c4-2446-4020-9f47-1e1414969ad2",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see. So if you don't specify a service account, you can use any secret in the namespace, but if you do, you're confined to the service account's secrets. Right?\n",
        "createdAt" : "2015-05-22T17:12:07Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9def1cf1-e515-492c-b702-e83a9350f3b4",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Is there a use case where you have a service account which has pull secrets, but you want to use a specific pod with a pull secret which doesn't belong to the service account?\n",
        "createdAt" : "2015-05-22T18:10:23Z",
        "updatedAt" : "2015-05-22T18:10:23Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "d80d872e-e632-4386-9c2a-d8c60d6bbc5f",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm not sure-- it seems weird to me that I can make secret A, assign it to service account B, make my pod _not_ use any service account, and then still use secret A.\n\nAlso considering that all pods get the default service account, doesn't this mean you have to put refs to your secrets into the default service account before you can use them?\n",
        "createdAt" : "2015-05-22T18:16:35Z",
        "updatedAt" : "2015-05-22T18:16:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bd5d7ce7-bcba-47ce-a867-68bcbb2ca76f",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Is there a use case where you have a service account which has pull secrets, but you want to use a specific pod with a pull secret which doesn't belong to the service account?\n\nThat's a more general question about secret protection.  Our current statement is that if you're going to use a secret and you have service accounts enabled, the service account should list that secret as allowed.\n\nLoosening that statement to consider the union of the requestor _and_ the service account make some bit easier, but makes it more dangerous to allow any privileged agent to create pods.  I think I'd like to keep the current statement for the near term and perhaps reconsider once we have a more complete impersonation story.\n",
        "createdAt" : "2015-05-22T18:18:36Z",
        "updatedAt" : "2015-05-22T18:18:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "cd960bd6-72fe-4d66-8644-74a11f24bb55",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Also considering that all pods get the default service account, doesn't this mean you have to put refs to your secrets into the default service account before you can use them?\n\nIf you have service accounts enabled, I think it should.\n\n> Our current statement is that if you're going to use a secret and you have service accounts enabled, the service account should list that secret as allowed.\n\nCorrect. That is not yet enforced by default admission, but it should be as soon as possible. I didn't have the nerve to set LimitSecrets to true by default in the initial pull.\n",
        "createdAt" : "2015-05-22T18:28:16Z",
        "updatedAt" : "2015-05-22T18:29:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e9b026e9-ad67-475d-8103-863e93b90d97",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "In https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/design/security.md#description-of-roles I would say @lavalamp's role is \"developer\", and it's up to the project admin to decide whether the developer can use any secret, or just those isolated by service accounts.  In the future, that may mean that LimitSecrets is managed per namespace.  Right now, it seems like that the only issue is the use of the secrets (not the design of service accounts or secrets), so the choice of LimitSecrets encourages a style.  If your project admin allows you to change service accounts, it's not an issue.  If a project admin doesn't want you to change service accounts, then it's because they don't want you managing secrets directly and they likely don't let you change secrets (just read them).\n",
        "createdAt" : "2015-05-22T18:40:39Z",
        "updatedAt" : "2015-05-22T18:40:39Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "094ec42b-2420-4ef3-8d57-b027c14fb86c",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@smarterclayton @deads2k Is there a piece we missed -- ability to reference a service account's secrets in a volume?\n",
        "createdAt" : "2015-05-22T19:08:05Z",
        "updatedAt" : "2015-05-22T19:08:05Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "9be2eb7f-1349-4c2f-9c3b-d273f5e5f08a",
        "parentId" : "37dabe52-2884-4b95-addc-9e8ea9b34b7f",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Nevermind, I'm sorted.\n",
        "createdAt" : "2015-05-22T19:13:59Z",
        "updatedAt" : "2015-05-22T19:13:59Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "590bd048a5f8913d014aab1e7dcbddbf5f446f6c",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +299,303 @@\t\t}\n\t\tsecretName := source.Secret.SecretName\n\t\tif !mountableSecrets.Has(secretName) {\n\t\t\treturn fmt.Errorf(\"Volume with secret.secretName=\\\"%s\\\" is not allowed because service account %s does not reference that secret\", secretName, serviceAccount.Name)\n\t\t}"
  },
  {
    "id" : "4a06f063-4070-484b-b30b-2c6119a9edb0",
    "prId" : 8582,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4bafdbe-9367-4fa1-8a45-82bf27ec5db9",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "why not use the `%q` format instead of `\"%s\"`\n",
        "createdAt" : "2015-05-22T17:47:04Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "6fbe0076-e310-4e7d-bce8-b2692133f362",
        "parentId" : "b4bafdbe-9367-4fa1-8a45-82bf27ec5db9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> why not use the %q format instead of \"%s\"\n\nIs it our preference to have `\"the\\\"string\"` over `\"the\"string\"`?  Also, `\"%s\"` is what is used above in this admission controller.\n",
        "createdAt" : "2015-05-22T17:57:36Z",
        "updatedAt" : "2015-05-22T18:05:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "cd51c8b2-72e6-4ebf-b244-c372378b91ad",
        "parentId" : "b4bafdbe-9367-4fa1-8a45-82bf27ec5db9",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "a secret name has to be a dns subdomain so you shouldn't ever see escaped quotations in `%q` when used to format a secret name\n",
        "createdAt" : "2015-05-22T19:04:04Z",
        "updatedAt" : "2015-05-22T19:04:04Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "de9e1ec7-0bbd-4335-a990-1db07b539244",
        "parentId" : "b4bafdbe-9367-4fa1-8a45-82bf27ec5db9",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "not a big deal for now, can be done in a follow up\n",
        "createdAt" : "2015-05-22T19:05:00Z",
        "updatedAt" : "2015-05-22T19:05:00Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "590bd048a5f8913d014aab1e7dcbddbf5f446f6c",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +311,315 @@\tfor i, pullSecretRef := range pod.Spec.ImagePullSecrets {\n\t\tif !pullSecrets.Has(pullSecretRef.Name) {\n\t\t\treturn fmt.Errorf(`imagePullSecrets[%d].name=\"%s\" is not allowed because service account %s does not reference that imagePullSecret`, i, pullSecretRef.Name, serviceAccount.Name)\n\t\t}\n\t}"
  }
]