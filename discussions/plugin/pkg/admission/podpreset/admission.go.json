[
  {
    "id" : "eed01819-7571-487e-9061-9bc512f31a7d",
    "prId" : 79176,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79176#pullrequestreview-252506565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31bec02f-5e23-4876-b780-b4a11cf94bdf",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Related to my earlier comment, how would a reviewer tell this case apart from the \"get error out of the closure\" case?  Structurally if the only difference is a single `:` I worry that it's not obvious.",
        "createdAt" : "2019-06-20T18:36:08Z",
        "updatedAt" : "2019-06-21T08:39:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "60d9d7d4-974d-4aa3-aad8-081a79dc2b73",
        "parentId" : "31bec02f-5e23-4876-b780-b4a11cf94bdf",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "Good point. Maybe using something that looks like `err` across the boundary of a closure is an anti-pattern. Perhaps `err` should be reserved for local scope since that's how it's used 95% of the time.\r\n\r\nRequiring a more verbose `retErr` or `allErrs` could signal the reviewer to the difference.\r\n\r\nI've updated all instances of this in this PR.",
        "createdAt" : "2019-06-20T21:00:22Z",
        "updatedAt" : "2019-06-21T08:39:47Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      },
      {
        "id" : "fd32a091-eceb-4139-8542-a7cb0e695dcb",
        "parentId" : "31bec02f-5e23-4876-b780-b4a11cf94bdf",
        "authorId" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "body" : "reflecting on it a bit further, an even more defensive method would be to use both:\r\n```\r\nvar retErr error\r\npodutil.VisitContainers(&pod.Spec, func(c *v1.Container) bool {\r\n  if err := checkContainer(c); err != nil {\r\n    retErr = err\r\n    return false\r\n  }\r\n  return true\r\n})\r\n```\r\nI don't think this is really necessary, though, so I didn't include it in my update.",
        "createdAt" : "2019-06-21T08:38:07Z",
        "updatedAt" : "2019-06-21T08:39:48Z",
        "lastEditedBy" : "a82a6b5c-7a5e-4ea3-bc82-c4f922ea88b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0b57ad3db7d20319e3eaa84ec461aea2047d9cf",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +187,191 @@\t}\n\tpods.VisitContainersWithPath(&pod.Spec, func(c *api.Container, _ *field.Path) {\n\t\tif err := safeToApplyPodPresetsOnContainer(c, podPresets); err != nil {\n\t\t\terrs = append(errs, err)\n\t\t}"
  },
  {
    "id" : "73c53642-1571-451d-af0c-359e0da9f1e0",
    "prId" : 67810,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67810#pullrequestreview-158958213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8711a515-4fea-4df0-9d3d-07db2a6cbd10",
        "parentId" : null,
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "we're converting `Env`, `EnvFrom`, `Volume`, `VolumeMount` via the generated functions. can we possibly avoid this? ",
        "createdAt" : "2018-08-24T09:35:37Z",
        "updatedAt" : "2018-08-24T09:35:37Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "e3350a2d-5f9e-4db7-ba17-3d69d79aa781",
        "parentId" : "8711a515-4fea-4df0-9d3d-07db2a6cbd10",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> we're converting `Env`, `EnvFrom`, `Volume`, `VolumeMount` via the generated functions. can we possibly avoid this?\r\n\r\nIt's like the quota evaluation.  Not really and even though you didn't see the conversion when it was internal, you still had it when we read the data.",
        "createdAt" : "2018-09-26T11:58:20Z",
        "updatedAt" : "2018-09-26T11:58:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3571b425c160a5a6e3cf8a68af4b0488a22811",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +254,258 @@\t\tfor _, envFromSource := range pp.Spec.EnvFrom {\n\t\t\tinternalEnvFrom := api.EnvFromSource{}\n\t\t\tif err := apiscorev1.Convert_v1_EnvFromSource_To_core_EnvFromSource(&envFromSource, &internalEnvFrom, nil); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}"
  },
  {
    "id" : "f030a0d8-15aa-421b-98ea-82f469852577",
    "prId" : 45958,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45958#pullrequestreview-38800931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f163695f-41e0-449f-b175-d9f390cdef95",
        "parentId" : null,
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "the logic looks good",
        "createdAt" : "2017-05-17T22:06:36Z",
        "updatedAt" : "2017-05-17T22:06:36Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "9862cdb4c580387efd433ac7e6bf31e422ebb42c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +98,102 @@\t\treturn errors.NewBadRequest(\"Resource was marked with kind Pod but was unable to be converted\")\n\t}\n\n\tif _, isMirrorPod := pod.Annotations[api.MirrorPodAnnotationKey]; isMirrorPod {\n\t\treturn nil"
  }
]