[
  {
    "id" : "7e283b14-7373-4e70-a54c-f2dc6e501e7e",
    "prId" : 91683,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91683#pullrequestreview-491110915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e735fc8-1f54-4697-99a0-93d2ba4d8865",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "nit: else if",
        "createdAt" : "2020-09-17T22:51:47Z",
        "updatedAt" : "2020-09-17T22:52:19Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "b6f770b9-040c-452a-a819-9d89f5783b64",
        "parentId" : "2e735fc8-1f54-4697-99a0-93d2ba4d8865",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "The previous if block has return statement. So is this if block.\r\n\r\nIt seems else is not needed.",
        "createdAt" : "2020-09-18T02:36:48Z",
        "updatedAt" : "2020-09-18T02:36:48Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f95fdd3cd793e61333432e042c5db640f288d87",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\treturn admission.NewForbidden(a, fmt.Errorf(\"node %q can only create pods with a single owner reference set to itself\", nodeName))\n\t}\n\tif len(pod.OwnerReferences) == 0 {\n\t\treturn admission.NewForbidden(a, fmt.Errorf(\"node %q can only create pods with an owner reference set to itself\", nodeName))\n\t}"
  },
  {
    "id" : "8207cecb-498f-459b-928c-b1cda2de2d27",
    "prId" : 90307,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90307#pullrequestreview-480017786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fde8ba3-776c-4a8e-a86c-cff14ce568fe",
        "parentId" : null,
        "authorId" : "6a9593a8-1223-45eb-9008-0d2359296bc6",
        "body" : "With this change, kubelets can no longer set labels prefixed with `k8s.io` or `kubernetes.io`. Prior to kubernetes 1.19, this was considered acceptable behaviour, as `getForbiddenCreateLabels` did not set this restriction.\r\n\r\nIs this an intentional change? If so, what is the recommended path forward for those using these prefixes? This appears to be a breaking change to the Node API.\r\n\r\nFor context, our team is working on [krustlet](https://github.com/deislabs/krustlet), and we've been running with the assumption that certain labels are set by the kubelet (krustlet) once it comes online and registers with the Node API. With this restriction, labels like `kubernetes.io/role` can no longer be set, as it is not part of the \"allow list\".\r\n\r\nhttps://github.com/deislabs/krustlet/blob/57604c635a3dab22fa4b0ac257868e7890634b85/crates/kubelet/src/node/mod.rs#L446",
        "createdAt" : "2020-09-01T18:17:32Z",
        "updatedAt" : "2020-09-01T18:34:46Z",
        "lastEditedBy" : "6a9593a8-1223-45eb-9008-0d2359296bc6",
        "tags" : [
        ]
      },
      {
        "id" : "0d4c6f1e-5233-4a25-92fb-b7a32dd75b98",
        "parentId" : "9fde8ba3-776c-4a8e-a86c-cff14ce568fe",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Yes, it was an intentional change, proposed [here](https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/0000-20170814-bounding-self-labeling-kubelets.md#proposal) and rolled out from 1.13-1.19. The kubelet has not accepted the problematic labels since 1.16, so kube-apiserver started limiting labels on creation in 1.19, since the oldest supported kubelet that can register against a 1.19 API server is 1.17.\r\n\r\nChangelogs:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.13.md#deprecations\r\n\r\n> Use of the --node-labels flag to set labels under the kubernetes.io/ and k8s.io/ prefix will be subject to restriction by the NodeRestriction admission plugin in future releases. See [admission plugin documentation](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction) for allowed labels.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.16.md#deprecations-and-removals\r\n\r\n> kubelet removed the ability to set kubernetes.io- or k8s.io-prefixed labels via --node-labels, other than the [specifically allowed labels/prefixes.](https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/0000-20170814-bounding-self-labeling-kubelets.md#proposal)\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.19.md\r\n\r\n> Kube-apiserver: The NodeRestriction admission plugin now restricts Node labels kubelets are permitted to set when creating a new Node to the --node-labels parameters accepted by kubelets in 1.16+.\r\n\r\nAlternatives include:\r\n* change to use `k8s.io/...` labels nodes are permitted to control - https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction\r\n* change to use non-k8s.io labels\r\n* disable the `NodeRestriction` admission plugin (not recommended, since this is what prevents nodes from modifying objects belonging to other nodes)",
        "createdAt" : "2020-09-01T18:41:06Z",
        "updatedAt" : "2020-09-01T18:41:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4d2aa076cd925f6659885d77f5bc2016ad57f6",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +483,487 @@\n// getForbiddenLabels returns the set of labels that may not be added, removed, or modified by the node on create or update.\nfunc (p *Plugin) getForbiddenLabels(modifiedLabels sets.String) sets.String {\n\tif len(modifiedLabels) == 0 {\n\t\treturn nil"
  },
  {
    "id" : "384f2251-c06d-4e39-baf9-5242122abdec",
    "prId" : 84657,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84657#pullrequestreview-316615753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "366dd840-7d3d-4aa7-97b8-7791760d1903",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ensure UID matches the node's uid?",
        "createdAt" : "2019-11-13T16:16:50Z",
        "updatedAt" : "2019-11-14T00:26:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "13779856-d945-4a0f-9fc4-f61ab9ed1dde",
        "parentId" : "366dd840-7d3d-4aa7-97b8-7791760d1903",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also ensure BlockOwnerDeletion is nil or false",
        "createdAt" : "2019-11-13T16:18:01Z",
        "updatedAt" : "2019-11-14T00:26:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "9c1a5d30-dc6f-4a8a-a666-b35c7497e0a9",
        "parentId" : "366dd840-7d3d-4aa7-97b8-7791760d1903",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Added BlockOwnerDeletion check.\r\n\r\nFor UID, that means we need to add a node informer. Do we care enough about the UID being correct that it's worth adding that logic here? What would the consequences be of an attacker using a different UID?",
        "createdAt" : "2019-11-13T22:13:26Z",
        "updatedAt" : "2019-11-14T00:26:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "ff09e375-5593-45af-abe1-23eaeb3a7c54",
        "parentId" : "366dd840-7d3d-4aa7-97b8-7791760d1903",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, it's worth it to avoid gc uid cache injection issues. it should be ~5 lines to plumb and ~5 lines to use (and we're already running a node informer to populate the node authorizer graph):\r\n\r\n```diff\r\ndiff --git a/plugin/pkg/admission/noderestriction/admission.go b/plugin/pkg/admission/noderestriction/admission.go\r\nindex c38b644ae9b..2e655541351 100644\r\n--- a/plugin/pkg/admission/noderestriction/admission.go\r\n+++ b/plugin/pkg/admission/noderestriction/admission.go\r\n@@ -72,6 +72,7 @@ type Plugin struct {\r\n        *admission.Handler\r\n        nodeIdentifier nodeidentifier.NodeIdentifier\r\n        podsGetter     corev1lister.PodLister\r\n+       nodesGetter    corev1lister.NodeLister\r\n        // allows overriding for testing\r\n        features featuregate.FeatureGate\r\n }\r\n@@ -84,6 +85,7 @@ var (\r\n // SetExternalKubeInformerFactory registers an informer factory into Plugin\r\n func (p *Plugin) SetExternalKubeInformerFactory(f informers.SharedInformerFactory) {\r\n        p.podsGetter = f.Core().V1().Pods().Lister()\r\n+       p.nodesGetter = f.Core().V1().Nodes().Lister()\r\n }\r\n \r\n // ValidateInitialization validates the Plugin was initialized properly\r\n@@ -94,6 +96,9 @@ func (p *Plugin) ValidateInitialization() error {\r\n        if p.podsGetter == nil {\r\n                return fmt.Errorf(\"%s requires a pod getter\", PluginName)\r\n        }\r\n+       if p.nodesGetter == nil {\r\n+               return fmt.Errorf(\"%s requires a node getter\", PluginName)\r\n+       }\r\n        return nil\r\n }\r\n\r\n...\r\n\r\n+               // get the existing node\r\n+               existingNode, err := p.nodesGetter.Get(nodeName)\r\n+               if errors.IsNotFound(err) {\r\n+                       return fmt.Errorf(\"error looking up node %s to verify uid: %v\", nodeName, err)\r\n+               }\r\n+               if err != nil {\r\n+                       return admission.NewForbidden(a, fmt.Errorf(\"error looking up node %s to verify uid: %v\", nodeName, err))\r\n+               }\r\n+\r\n...\r\n```",
        "createdAt" : "2019-11-13T22:58:23Z",
        "updatedAt" : "2019-11-14T00:26:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f623ec62ba117929c5436035228171b474488ab3",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +230,234 @@\t\tif owner.APIVersion != v1.SchemeGroupVersion.String() ||\n\t\t\towner.Kind != \"Node\" ||\n\t\t\towner.Name != nodeName {\n\t\t\treturn admission.NewForbidden(a, fmt.Errorf(\"node %q can only create pods with an owner reference set to itself\", nodeName))\n\t\t}"
  },
  {
    "id" : "05ad4b9a-e4bd-446b-bcc6-c78eb035fc5d",
    "prId" : 84260,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84260#pullrequestreview-307412401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3060de5e-bc10-42d4-9357-be9af6643d2f",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "It seems reflect.DeepEqual should be used here",
        "createdAt" : "2019-10-24T23:37:48Z",
        "updatedAt" : "2019-10-24T23:37:48Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "402dc5cc-0658-4600-b1d7-e02befb5b1b9",
        "parentId" : "3060de5e-bc10-42d4-9357-be9af6643d2f",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Why? `labels.Equals` is checking semantic equality and is much faster.",
        "createdAt" : "2019-10-25T17:32:53Z",
        "updatedAt" : "2019-10-25T17:32:54Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "31fc8cbc-1d67-4cbf-a8e0-92461bda6c24",
        "parentId" : "3060de5e-bc10-42d4-9357-be9af6643d2f",
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "I was looking at existing code.\r\ne.g. in pkg/controller/daemon/daemon_controller.go , line 579:\r\n```\r\n\tlabelChanged := !reflect.DeepEqual(curPod.Labels, oldPod.Labels)\r\n```\r\nIt seems the two calls should be equivalent for this case.",
        "createdAt" : "2019-10-25T17:44:43Z",
        "updatedAt" : "2019-10-25T18:09:39Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      },
      {
        "id" : "b74d0baa-fe6c-45b4-aa07-b9b8de8815ef",
        "parentId" : "3060de5e-bc10-42d4-9357-be9af6643d2f",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Yeah, I think it's better to change the existing code to use `labels.Equals`, but it doesn't matter that much - both are logically equivalent.",
        "createdAt" : "2019-10-25T19:37:34Z",
        "updatedAt" : "2019-10-25T19:37:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac2b300ed98f17b97e85532541cc46ad997b4502",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\t\treturn admission.NewForbidden(a, fmt.Errorf(\"unexpected type %T\", a.GetObject()))\n\t\t}\n\t\tif !labels.Equals(oldPod.Labels, newPod.Labels) {\n\t\t\treturn admission.NewForbidden(a, fmt.Errorf(\"node %q cannot update labels through pod status\", nodeName))\n\t\t}"
  },
  {
    "id" : "b61fab45-cb2e-43e0-a112-2e8b5de31cc7",
    "prId" : 75064,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75064#pullrequestreview-211507941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7300e300-1d47-4d56-b7ea-9c73e50489c9",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you add this to the list of things to look at for beta?",
        "createdAt" : "2019-03-06T22:21:01Z",
        "updatedAt" : "2019-03-06T22:21:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "babcb4bf-5165-4b05-a432-0c48a2ec8559",
        "parentId" : "7300e300-1d47-4d56-b7ea-9c73e50489c9",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Yeah, good idea",
        "createdAt" : "2019-03-06T22:22:01Z",
        "updatedAt" : "2019-03-06T22:22:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "aaf17337-9174-4f58-af43-842b908151e3",
        "parentId" : "7300e300-1d47-4d56-b7ea-9c73e50489c9",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "done",
        "createdAt" : "2019-03-06T22:23:07Z",
        "updatedAt" : "2019-03-06T22:23:07Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "55f9eeed6cd656d481bd67c12a176aeacb8eb79e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +310,314 @@\t\tnewPVC.Status.Conditions = nil\n\n\t\t// TODO(apelisse): We don't have a good mechanism to\n\t\t// verify that only the things that should have changed\n\t\t// have changed. Ignore it for now."
  },
  {
    "id" : "62ea860c-a0c6-4b42-aa43-e8a2099b8f18",
    "prId" : 69941,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69941#pullrequestreview-197906476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1cb030d-c349-4184-82c5-eda3b7b23701",
        "parentId" : null,
        "authorId" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "body" : "Can we add golint comment  for the admitpod() also?",
        "createdAt" : "2019-01-27T09:37:03Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "tags" : [
        ]
      },
      {
        "id" : "03d13e52-aab1-4f3e-be24-5d010ab41bb9",
        "parentId" : "b1cb030d-c349-4184-82c5-eda3b7b23701",
        "authorId" : "4ceea50b-3212-43ae-a2da-e95e4eefa88b",
        "body" : "I can add it, but private functions are usually not required to have one.",
        "createdAt" : "2019-01-28T14:53:12Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "4ceea50b-3212-43ae-a2da-e95e4eefa88b",
        "tags" : [
        ]
      },
      {
        "id" : "a91a6c03-c09f-4ecd-942b-9b736aacca93",
        "parentId" : "b1cb030d-c349-4184-82c5-eda3b7b23701",
        "authorId" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "body" : "yeah, right but I guess doing same on the private function under the same file is not a big issue. What do you think?",
        "createdAt" : "2019-01-30T05:12:29Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f47da8a75d13590322a4e1df502cf6629b2c36fa",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +168,172 @@// admitPod allows creating or deleting a pod if it is assigned to the\n// current node and fulfills related criteria.\nfunc (p *Plugin) admitPod(nodeName string, a admission.Attributes) error {\n\tswitch a.GetOperation() {\n\tcase admission.Create:"
  },
  {
    "id" : "a4a31071-2505-443f-8d88-0783a57a6ab0",
    "prId" : 69941,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69941#pullrequestreview-196819330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "447f29b5-6854-4e05-8996-1d2d89ef311c",
        "parentId" : null,
        "authorId" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "body" : "Ditto",
        "createdAt" : "2019-01-27T09:37:21Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f47da8a75d13590322a4e1df502cf6629b2c36fa",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +231,235 @@// admitPodStatus allows to update the status of a pod if it is\n// assigned to the current node.\nfunc (p *Plugin) admitPodStatus(nodeName string, a admission.Attributes) error {\n\tswitch a.GetOperation() {\n\tcase admission.Update:"
  },
  {
    "id" : "11efc7b6-783b-4ea0-984b-03aba739003d",
    "prId" : 69941,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69941#pullrequestreview-196819336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f16f7f5a-7c80-426d-ac52-79de1147bc8b",
        "parentId" : null,
        "authorId" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "body" : "here too.",
        "createdAt" : "2019-01-27T09:37:37Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f47da8a75d13590322a4e1df502cf6629b2c36fa",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +251,255 @@\n// admitPodEviction allows to evict a pod if it is assigned to the current node.\nfunc (p *Plugin) admitPodEviction(nodeName string, a admission.Attributes) error {\n\tswitch a.GetOperation() {\n\tcase admission.Create:"
  },
  {
    "id" : "740bafb3-9102-48ba-9f48-7fac6ce2df04",
    "prId" : 69941,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69941#pullrequestreview-198228833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2310161-d991-4038-bc86-84f10a8e7176",
        "parentId" : null,
        "authorId" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "body" : "getForbiddenUpdateLabels ?",
        "createdAt" : "2019-01-30T05:13:36Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "1c129c56-3102-4f2b-9811-3cdbb8ceb2d6",
        "tags" : [
        ]
      },
      {
        "id" : "c8492dd7-2675-49a7-bc97-824541225902",
        "parentId" : "a2310161-d991-4038-bc86-84f10a8e7176",
        "authorId" : "4ceea50b-3212-43ae-a2da-e95e4eefa88b",
        "body" : "I'll update this comment. Can you confirm the descriptions are correct?",
        "createdAt" : "2019-01-30T18:13:37Z",
        "updatedAt" : "2019-05-23T18:00:31Z",
        "lastEditedBy" : "4ceea50b-3212-43ae-a2da-e95e4eefa88b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f47da8a75d13590322a4e1df502cf6629b2c36fa",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +457,461 @@}\n\n// getForbiddenLabels returns the set of labels that may not be set by the node on update.\nfunc (p *Plugin) getForbiddenUpdateLabels(modifiedLabels sets.String) sets.String {\n\tif len(modifiedLabels) == 0 {"
  },
  {
    "id" : "deb5c4fc-7ff0-4e9c-a5d8-30d9d4c7fe2d",
    "prId" : 55815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55815#pullrequestreview-77913993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ff0c3b-f1b5-478d-a49b-114e46ad7d67",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should forbid unless ExpandPersistentVolumes feature is enabled, right?",
        "createdAt" : "2017-11-20T18:53:48Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "bd586a39-63d8-48f0-994e-7cbd152eee75",
        "parentId" : "b7ff0c3b-f1b5-478d-a49b-114e46ad7d67",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "fixed",
        "createdAt" : "2017-11-20T20:34:07Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee4d2bbf5b61d5d8fc71b57f68955effc96e2d7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +256,260 @@func (c *nodePlugin) admitPVCStatus(nodeName string, a admission.Attributes) error {\n\tswitch a.GetOperation() {\n\tcase admission.Update:\n\t\tif !utilfeature.DefaultFeatureGate.Enabled(features.ExpandPersistentVolumes) {\n\t\t\treturn admission.NewForbidden(a, fmt.Errorf(\"node %q may not update persistentvolumeclaim metadata\", nodeName))"
  },
  {
    "id" : "54cf5779-cd69-49ce-a08c-81b22d3659e2",
    "prId" : 55815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55815#pullrequestreview-78495338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6c5d5d7-1068-47ba-bc9d-659b4e06a783",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "can you update this to where the POC ended up (whitelisting specific status fields for nodes to update) - https://github.com/kubernetes/kubernetes/pull/51202/commits/daf8bcef691a5495b1b10192e4f8ff8ff13b08fb#diff-cbf05e22a4f412de387669881892d46bR273",
        "createdAt" : "2017-11-21T17:27:42Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c9335340-1f75-4750-a913-89e01313e32d",
        "parentId" : "c6c5d5d7-1068-47ba-bc9d-659b4e06a783",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "sure. ",
        "createdAt" : "2017-11-21T17:42:19Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "dc67caf8-9658-40fe-a9bb-04d69f12abc0",
        "parentId" : "c6c5d5d7-1068-47ba-bc9d-659b4e06a783",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "fixed",
        "createdAt" : "2017-11-22T16:01:18Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee4d2bbf5b61d5d8fc71b57f68955effc96e2d7",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +271,275 @@\t\t}\n\n\t\t// make copies for comparison\n\t\toldPVC = oldPVC.DeepCopy()\n\t\tnewPVC = newPVC.DeepCopy()"
  },
  {
    "id" : "ed25dc51-94d9-4c23-b1b1-a0b4a96d41df",
    "prId" : 55815,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55815#pullrequestreview-78495295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7395bd0e-f0d8-4425-9db6-85f326a3f9d7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I expected to see tests added to test/integration/auth/node_test.go exercising the authorizer/admission bits, in combination with the feature flag\r\n\r\n* feature flag off, node gets forbidden for get/update/patch of unrelated pvc/status\r\n* feature flag off, node gets forbidden for get/update/patch of related pvc/status\r\n* feature flag on, node gets forbidden for get/update/patch of unrelated pvc/status\r\n* feature flag on, node gets forbidden for get/update/patch of related pvc/status that changes non-whitelisted field\r\n* feature flag on, node gets ok for get/update/patch of related pvc/status that changes whitelisted field",
        "createdAt" : "2017-11-21T17:32:19Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "dae11333-cfaa-4472-8906-f3cdb0432206",
        "parentId" : "7395bd0e-f0d8-4425-9db6-85f326a3f9d7",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Added integration tests",
        "createdAt" : "2017-11-22T16:01:10Z",
        "updatedAt" : "2017-11-22T21:25:11Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee4d2bbf5b61d5d8fc71b57f68955effc96e2d7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +118,122 @@\t\treturn c.admitNode(nodeName, a)\n\n\tcase pvcResource:\n\t\tswitch a.GetSubresource() {\n\t\tcase \"status\":"
  },
  {
    "id" : "f7dd99f0-960f-4866-ada8-a0ea39ad2e53",
    "prId" : 55019,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55019#pullrequestreview-99438818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4be4ccd2-7a9c-4f55-bfd0-a24bdf201f1a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd actually deny altogether if the feature was disabled ",
        "createdAt" : "2018-02-24T02:16:15Z",
        "updatedAt" : "2018-02-26T21:46:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6b9b1abf-95db-462a-9ebf-94e5e7aeeae8",
        "parentId" : "4be4ccd2-7a9c-4f55-bfd0-a24bdf201f1a",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why not leave the current behavior if the feature is turned off? At this point we haven't even checked that the request was to the '/token' subresource. It's a bit weird to be doing denys in an admission controller on the resource attribute alone. Where there is enough information available to the authorizer to deny a request, we should prefer to deny the request there. All the information we would be making this deny decision on is available to the Node authorizer. ",
        "createdAt" : "2018-02-24T03:10:34Z",
        "updatedAt" : "2018-02-26T21:46:28Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "6306bc83-62b7-44e7-a5e0-1d5cc8be0035",
        "parentId" : "4be4ccd2-7a9c-4f55-bfd0-a24bdf201f1a",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "> Why not leave the current behavior if the feature is turned off?\r\n\r\nAgreed. Feature gates should maintain the current behavior when disabled.",
        "createdAt" : "2018-02-24T21:38:40Z",
        "updatedAt" : "2018-02-26T21:46:28Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "e4e2f9dc-9d8f-4f13-8ea0-9d57a006597a",
        "parentId" : "4be4ccd2-7a9c-4f55-bfd0-a24bdf201f1a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ok",
        "createdAt" : "2018-02-26T19:40:38Z",
        "updatedAt" : "2018-02-26T21:46:28Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "363e861aeb19b362e0ef0fa7fcd8f034d0dce17c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +132,136 @@\n\tcase svcacctResource:\n\t\tif c.features.Enabled(features.TokenRequest) {\n\t\t\treturn c.admitServiceAccount(nodeName, a)\n\t\t}"
  },
  {
    "id" : "4945c019-a3fe-41b8-8230-b2731ad940a3",
    "prId" : 46972,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46972#pullrequestreview-42077711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "262fb391-9f34-4ce6-9cc5-7796b210e92e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If you missed in the cache, other weird things are likely to be happening with requests for secrets and the like.  I'm ok doing this here, but it seems like a bandaid on a bullet hole.",
        "createdAt" : "2017-06-05T15:42:36Z",
        "updatedAt" : "2017-06-05T16:09:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fa95e53e-a246-45da-b8f7-a99058ceef6a",
        "parentId" : "262fb391-9f34-4ce6-9cc5-7796b210e92e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "create-followed-by-delete of a pod really seems like it should work, and this fixes that. lag on access to related objects because of the pod create doesn't bother me.",
        "createdAt" : "2017-06-05T15:45:55Z",
        "updatedAt" : "2017-06-05T16:09:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2106a2bbe5da7c57e0f2e7a002aa545016070a29",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +157,161 @@\n\tcase admission.Delete:\n\t\t// get the existing pod from the server cache\n\t\texistingPod, err := c.podsGetter.Pods(a.GetNamespace()).Get(a.GetName(), v1.GetOptions{ResourceVersion: \"0\"})\n\t\tif errors.IsNotFound(err) {"
  },
  {
    "id" : "c0f05710-69d8-4ce0-a980-85f5de1aec22",
    "prId" : 46254,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46254#pullrequestreview-41793189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ee906fa-7047-4c57-a815-5405047a7929",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Would like unit tests ensuring nil->nil, x->x, and x->nil is allowed, and x->y is disallowed",
        "createdAt" : "2017-06-02T00:07:04Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "73718f4e-95ec-46d0-abf7-b1121e947a92",
        "parentId" : "5ee906fa-7047-4c57-a815-5405047a7929",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Ok, I can add these right now.",
        "createdAt" : "2017-06-02T00:12:45Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "c18324b0-ea67-498c-bba3-52f4f9c9df87",
        "parentId" : "5ee906fa-7047-4c57-a815-5405047a7929",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "nil->nil is currently covered by `allow update of my node`, I added:\r\n- `forbid create of my node with non-nil configSource`\r\n- `forbid update of my node: nil configSource to new non-nil configSource`\r\n- `forbid update of my node: non-nil configSource to new non-nil configSource`\r\n- `allow update of my node: non-nil configSource unchanged`\r\n- `allow update of my node: non-nil configSource to nil configSource`\r\n\r\n\r\n",
        "createdAt" : "2017-06-02T14:36:52Z",
        "updatedAt" : "2017-08-08T19:21:50Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "378544362cd4fb1b35a940c400ce7c31d9ad1b76",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +278,282 @@\t\t// We scope node access to things listed in the Node.Spec, so allowing this would allow a view escalation.\n\t\t// We only do the check if the new node's configSource is non-nil; old kubelets might drop the field during a status update.\n\t\tif node.Spec.ConfigSource != nil && !apiequality.Semantic.DeepEqual(node.Spec.ConfigSource, oldNode.Spec.ConfigSource) {\n\t\t\treturn admission.NewForbidden(a, fmt.Errorf(\"cannot update configSource to a new non-nil configSource\"))\n\t\t}"
  },
  {
    "id" : "a97d2881-68c8-4358-8ec2-25781ae31760",
    "prId" : 45929,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45929#pullrequestreview-38847728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de593470-8548-48cd-960a-58049e349281",
        "parentId" : null,
        "authorId" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "body" : "nit: This could be an internal error like \"doesn't exist\". By including the error in the response, couldn't we be leaking information about what other nodes exist?",
        "createdAt" : "2017-05-17T17:54:46Z",
        "updatedAt" : "2017-05-18T20:43:48Z",
        "lastEditedBy" : "0af48e59-4be9-46ce-9275-aa218813b6fd",
        "tags" : [
        ]
      },
      {
        "id" : "0d17c2a5-20ec-4790-8497-34f7f0bc2881",
        "parentId" : "de593470-8548-48cd-960a-58049e349281",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this is actually an error about looking up the pod... for now, I'd rather surface the error (remember nodes can still list/watch all pods, and even if they couldn't, they could see if a specific pod already existed by trying to create a mirror pod with the same name and seeing if they get an AlreadyExists error)",
        "createdAt" : "2017-05-18T05:57:09Z",
        "updatedAt" : "2017-05-18T20:43:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd36792f185a2f846d08ff5547460b25435b413",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@\t\texistingPod, err := c.podsGetter.Pods(a.GetNamespace()).Get(a.GetName(), v1.GetOptions{ResourceVersion: \"0\"})\n\t\tif err != nil {\n\t\t\treturn admission.NewForbidden(a, err)\n\t\t}\n\t\t// only allow a node to delete a pod bound to itself"
  }
]