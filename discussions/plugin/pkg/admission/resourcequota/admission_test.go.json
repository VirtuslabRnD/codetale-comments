[
  {
    "id" : "39efaf47-dae0-4547-8c9f-5e6b8a20876f",
    "prId" : 93537,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93537#pullrequestreview-461380794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "635a9f5c-7e7b-4480-b25a-7989e10a40bc",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "why replacing controller.NoResyncPeriodFunc() with 0?",
        "createdAt" : "2020-08-03T23:53:40Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "3770b0e3-9456-484e-9ca9-ddd1d2f127d0",
        "parentId" : "635a9f5c-7e7b-4480-b25a-7989e10a40bc",
        "authorId" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "body" : "`controller.NoResyncPeriodFunc()` is part of `k8s.io/kubernetes` and having a dependency from `k8s.io/apiserver` to `k8s.io/kubernetes` isn't desired, right? Therefore, I followed other existing [examples](https://github.com/kubernetes/kubernetes/blob/3edbc6afff17ea8dfe5c10b2677dcdc8767f67e2/staging/src/k8s.io/apiserver/pkg/admission/configuration/validating_webhook_manager_test.go#L32).",
        "createdAt" : "2020-08-04T12:51:55Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "tags" : [
        ]
      },
      {
        "id" : "b56fc96e-c528-4d3f-b1cd-98dc82014717",
        "parentId" : "635a9f5c-7e7b-4480-b25a-7989e10a40bc",
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "that's right, it's not desired to have a dependency from k8s.io/apiserver to k8s.io/kubernetes. however, i think this test is in k8s.io/kubernetes, so there is not such dependency.  it is fine to use '0' though.",
        "createdAt" : "2020-08-04T19:36:43Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "1fe7dfa0-75d6-4c87-ae99-5aa258829637",
        "parentId" : "635a9f5c-7e7b-4480-b25a-7989e10a40bc",
        "authorId" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "body" : "Sorry, my bad.",
        "createdAt" : "2020-08-05T06:42:40Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc0b86fa3c5d83ab8023f9403feee3928794f85a",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +120,124 @@\n\tkubeClient := fake.NewSimpleClientset()\n\tinformerFactory := informers.NewSharedInformerFactory(kubeClient, 0)\n\n\thandler, err := createHandler(kubeClient, informerFactory, stopCh)"
  },
  {
    "id" : "802e9778-3892-4598-a782-0b938e33fce0",
    "prId" : 93537,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93537#pullrequestreview-460778604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4abe14f-10ae-4144-a566-cdc4de9e43d9",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "so is the newPod allowed or not-allowed?",
        "createdAt" : "2020-08-04T00:28:09Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "fa54b2dd-e71c-492f-ad87-8511cfe5accf",
        "parentId" : "f4abe14f-10ae-4144-a566-cdc4de9e43d9",
        "authorId" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "body" : "It's allowed, since the test is called `TestAdmitPodInNamespaceWithoutQuota` and that's what the implementation looks like. Imo, it was a copy paste issue previously.",
        "createdAt" : "2020-08-04T12:48:00Z",
        "updatedAt" : "2020-09-04T13:33:41Z",
        "lastEditedBy" : "6f10fefa-7ffe-4568-982c-bf515c36400c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc0b86fa3c5d83ab8023f9403feee3928794f85a",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +741,745 @@\tnewPod := validPod(\"allowed-pod\", 1, getResourceRequirements(getResourceList(\"100m\", \"2Gi\"), getResourceList(\"200m\", \"\")))\n\terr = handler.Validate(context.TODO(), admission.NewAttributesRecord(newPod, nil, api.Kind(\"Pod\").WithVersion(\"version\"), newPod.Namespace, newPod.Name, corev1.Resource(\"pods\").WithVersion(\"version\"), \"\", admission.Create, &metav1.CreateOptions{}, false, nil), nil)\n\tif err != nil {\n\t\tt.Errorf(\"Did not expect an error because the pod is in a different namespace than the quota: %v\", err)\n\t}"
  },
  {
    "id" : "7c357e09-3fe3-4ce1-8667-419e9375e7a3",
    "prId" : 57963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57963#pullrequestreview-125349640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Could you please add a test to limit a priority class globally and allow it only in one namespace and verify that admission works correctly?",
        "createdAt" : "2018-05-29T22:10:48Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "b3fa9a3b-c03c-4838-a168-b0baa0f87aa5",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "Hi @bsalamat, following tests do this testing:\r\nhttps://github.com/vikaschoudhary16/kubernetes/blob/f382229ccabd6b8b137778b674b8960a322e3718/plugin/pkg/admission/resourcequota/admission_test.go#L1705-#L1771",
        "createdAt" : "2018-05-30T18:53:09Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "64177157-68ea-4a36-8a9c-52ab547e9ef4",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "The scenario that I described is not covered by those tests. The test at line 1755 is the closest one. The quota in that test has no priority class name though. It would be great if you could add a test very similar to the one at line 1705 (not 1755) and just change the pod's priority class to \"another-priorityclass-name\" and verify that there is no error. Thanks!",
        "createdAt" : "2018-05-30T21:12:18Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "572ed75c-4c97-4205-a439-56ad8f4e7001",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can we add a test case that validates the same resource \"pods\" being limited multiple times by varying scopes?\r\n\r\nfor example:\r\n- \"pods\" with matching scope \"Terminating\"\r\n- \"pods\" with matching scope \"PriorityClass In Bar\"\r\n\r\nensure that a pod that matches neither scope is allowed as expected, but a pod that matches either is?  it looks like each test tests a single LimitedResource but having multiple input LimitedResource that varies on scope would help.",
        "createdAt" : "2018-05-31T05:01:52Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "d2013dec-7201-4645-b782-b5b7a83e5595",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "@derekwaynecarr Added the following test cases:\r\n```\r\n1595:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Neither matches pod. Pod allowed\",\r\n1624:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Only BestEffort scope matches pod. Pod admit fails because covering quota is missing for BestEffort scope\",\r\n1653:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Only PriorityClass scope matches pod. Pod admit fails because covering quota is missing for PriorityClass scope\",\r\n1682:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Both the scopes matches pod. Pod admit fails because covering quota is missing for PriorityClass scope and BestEffort scope\",\r\n1711:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Both the scopes matches pod. Quota available only for BestEffort scope. Pod admit fails because covering quota is missing for PriorityClass scope\",\r\n1753:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Both the scopes matches pod. Quota available only for PriorityClass scope. Pod admit fails because covering quota is missing for BestEffort scope\",\r\n1795:\t\t\tdescription: \"Two scopes,BestEffort and PriorityClassIN, in two LimitedResources. Both the scopes matches pod. Quota available only for both the scopes. Pod admit success. No Error\",\r\n```",
        "createdAt" : "2018-05-31T11:49:53Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "da406ed7-0ac8-4cef-b4c4-1e20e482848f",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "@bsalamat Added following test case as per your suggestion:\r\n```\r\n1995:                         description: \"From the above test case, just changing pod priority from cluster-services to another-priorityclass-name. expecting no error\"\r\n```",
        "createdAt" : "2018-05-31T11:55:39Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "bcee4185-a008-49b0-88d6-85d0c4023b2d",
        "parentId" : "52475355-53eb-4bfe-be9a-8046470fb60e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Thanks! Looks good.",
        "createdAt" : "2018-06-02T01:01:24Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe6412c70ad1c658cb37013d2300f1707fd290",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1457,1461 @@\n// TestAdmitLimitedScopeWithQuota verifies if a limited scope is configured the quota must cover the resource.\nfunc TestAdmitLimitedScopeWithCoverQuota(t *testing.T) {\n\ttestCases := []struct {\n\t\tdescription  string"
  },
  {
    "id" : "85e7178e-1cf9-4b20-b9b6-73fe1270f542",
    "prId" : 26355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12b4f02-bfbd-4f07-a964-9bc8cc74fa07",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "move this above the go func call?\n",
        "createdAt" : "2016-06-03T17:54:09Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a28cf3963bd1b985f82ee9651b5fb8291afb40d5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +153,157 @@\tevaluator := NewQuotaEvaluator(quotaAccessor, install.NewRegistry(kubeClient), 5, stopCh)\n\n\tdefer utilruntime.HandleCrash()\n\thandler := &quotaAdmission{\n\t\tHandler:   admission.NewHandler(admission.Create, admission.Update),"
  },
  {
    "id" : "d0bae3c9-d563-46e8-ae6a-58906211180e",
    "prId" : 26355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f783306-3983-4a07-8c9e-a363762feb02",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "handle crash?\n",
        "createdAt" : "2016-06-03T17:54:40Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a28cf3963bd1b985f82ee9651b5fb8291afb40d5",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +194,198 @@\tquotaAccessor, _ := newQuotaAccessor(kubeClient)\n\tquotaAccessor.indexer = indexer\n\tgo quotaAccessor.Run(stopCh)\n\tevaluator := NewQuotaEvaluator(quotaAccessor, install.NewRegistry(kubeClient), 5, stopCh)\n"
  }
]