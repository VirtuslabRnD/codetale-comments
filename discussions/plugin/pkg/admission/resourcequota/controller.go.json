[
  {
    "id" : "a4d47754-a676-4459-84c9-953d69e0c69f",
    "prId" : 74747,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74747#pullrequestreview-214586681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1618622e-afcd-485c-bb33-5333fb19b690",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "ugh I can't believe we got away without this for so long",
        "createdAt" : "2019-03-14T15:30:54Z",
        "updatedAt" : "2019-03-27T03:16:17Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "bef996d0a4e7a8ca887f1a6aa8165daf200fa016",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +704,708 @@\n// hasUsageStats returns true if for each hard constraint in interestingResources there is a value for its current usage\nfunc hasUsageStats(resourceQuota *corev1.ResourceQuota, interestingResources []corev1.ResourceName) bool {\n\tinterestingSet := quota.ToSet(interestingResources)\n\tfor resourceName := range resourceQuota.Status.Hard {"
  },
  {
    "id" : "3f08faca-4621-4c05-8411-940fde0680aa",
    "prId" : 64249,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64249#pullrequestreview-123228849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "407e56af-0c91-462a-933f-3609c6ef324b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand this error message. Is it trying to say `resource quota evaluation took too long`?",
        "createdAt" : "2018-05-24T20:22:41Z",
        "updatedAt" : "2018-05-24T20:22:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b3c465c6-081d-4a90-8258-1d187e274984",
        "parentId" : "407e56af-0c91-462a-933f-3609c6ef324b",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "yes",
        "createdAt" : "2018-05-25T01:21:05Z",
        "updatedAt" : "2018-05-25T01:21:05Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "2784885a-11bc-4b58-ba38-6bef3cf245b7",
        "parentId" : "407e56af-0c91-462a-933f-3609c6ef324b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I like \"resource quota evaluation took too long\" better.",
        "createdAt" : "2018-05-25T02:29:58Z",
        "updatedAt" : "2018-05-25T02:29:58Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5caf141650dd6aa9e146aca92226f5a526415d30",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +551,555 @@\tcase <-waiter.finished:\n\tcase <-time.After(10 * time.Second):\n\t\treturn apierrors.NewInternalError(fmt.Errorf(\"resource quota evaluates timeout\"))\n\t}\n"
  },
  {
    "id" : "39f4fb23-086a-442a-819b-7516f1fb096a",
    "prId" : 57963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57963#pullrequestreview-112353359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8ba47b4-8d5b-40a5-bbb1-5353dbb01549",
        "parentId" : null,
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "Why the MatchScopes and MatchContains are managed separately?\r\nI think they can be managed together.\r\n",
        "createdAt" : "2018-04-10T11:12:33Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "02c18dcc-2c47-48d9-b4da-23a8170eb1b3",
        "parentId" : "b8ba47b4-8d5b-40a5-bbb1-5353dbb01549",
        "authorId" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "body" : "Since Scopes and resources are conceptually different and required different logic at evaluators as well, it is prefered to keep seperate APIs for each. Both may be managed together but that might make implementation complex.\r\n",
        "createdAt" : "2018-04-16T10:07:10Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "51f59c69-efc0-451a-bd8f-d9fa2c281fd3",
        "tags" : [
        ]
      },
      {
        "id" : "81d4974e-5922-4339-932b-83e8df139dbb",
        "parentId" : "b8ba47b4-8d5b-40a5-bbb1-5353dbb01549",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "OK :+1: ",
        "createdAt" : "2018-04-16T10:10:57Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe6412c70ad1c658cb37013d2300f1707fd290",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +401,405 @@\n\t// Check if object matches AdmissionConfiguration matchScopes\n\tlimitedScopes, err := getMatchedLimitedScopes(evaluator, inputObject, e.config.LimitedResources)\n\tif err != nil {\n\t\treturn quotas, nil"
  },
  {
    "id" : "f5f9c104-f97c-469f-9f39-a117e7cea5dd",
    "prId" : 57963,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57963#pullrequestreview-124204232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c25d4b7c-f75e-4c9e-9293-a5bce1fe336c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "ah ok. operator defaults to existence.  so this provides backwards compatibility with old syntax.",
        "createdAt" : "2018-05-29T23:26:43Z",
        "updatedAt" : "2018-06-04T20:15:28Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cfe6412c70ad1c658cb37013d2300f1707fd290",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +566,570 @@\t\tselectors = append(selectors, api.ScopedResourceSelectorRequirement{\n\t\t\tScopeName: scope,\n\t\t\tOperator:  api.ScopeSelectorOpExists})\n\t}\n\tif quota.Spec.ScopeSelector != nil {"
  },
  {
    "id" : "c1fb7384-6a74-4cde-a06b-1bcdccc30f0b",
    "prId" : 54320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54320#pullrequestreview-71669449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "527ca123-9f55-48f1-8871-128ca6f93b5e",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think this logic should be backed into the `Get` function for the registry.",
        "createdAt" : "2017-10-24T15:47:43Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d134e28f-6f7f-4b33-85cd-41b405389e89",
        "parentId" : "527ca123-9f55-48f1-8871-128ca6f93b5e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i had it like that in an earlier iteration, but i prefer we actually keep the registry dumb.\r\n\r\nif your objection is not too strong, prefer to keep it as is.",
        "createdAt" : "2017-10-24T20:55:32Z",
        "updatedAt" : "2017-10-27T15:08:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9765bcebe77ce4e62dcbdacaa5bb0910220cef0",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +531,535 @@\t// if we do not know how to evaluate use for this resource, create an evaluator\n\tevaluator := e.registry.Get(gr)\n\tif evaluator == nil {\n\t\t// create an object count evaluator if no evaluator previously registered\n\t\t// note, we do not need aggregate usage here, so we pass a nil infomer func"
  },
  {
    "id" : "f13aa06e-c461-46a1-812c-f0d7d274615d",
    "prId" : 36765,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36765#pullrequestreview-22641778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1640350-8ecf-42ca-b385-0186f5321f3f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "if `e.config` must be non-nil, why do you allow a nil to be passed through the `New` function?",
        "createdAt" : "2017-02-16T19:56:57Z",
        "updatedAt" : "2017-02-18T17:10:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "43170db8-450b-4aac-830c-6958e0fb9b16",
        "parentId" : "b1640350-8ecf-42ca-b385-0186f5321f3f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i modified new to allow nil, but default to empty config.",
        "createdAt" : "2017-02-18T17:12:03Z",
        "updatedAt" : "2017-02-18T17:12:03Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fad0cb52a0521e4094789ebbb69bcd5126c451c",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +179,183 @@\t}\n\t// if limited resources are disabled, we can just return safely when there are no quotas.\n\tlimitedResourcesDisabled := len(e.config.LimitedResources) == 0\n\tif len(quotas) == 0 && limitedResourcesDisabled {\n\t\tfor _, admissionAttribute := range admissionAttributes {"
  },
  {
    "id" : "e34a2d51-d07d-4309-a655-057a3e3c4571",
    "prId" : 31141,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b589ba63-3ae1-4d25-9e19-ec3e386d70c9",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I realize this is pkg/admission and not pkg/controller, but would you want to do admission_controller_resourcequota?\n",
        "createdAt" : "2016-08-25T17:14:03Z",
        "updatedAt" : "2016-08-30T13:51:58Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "a192c83f-23fb-42dd-88a4-792e56faa02e",
        "parentId" : "b589ba63-3ae1-4d25-9e19-ec3e386d70c9",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "or controller_admission_resourcequota?\n",
        "createdAt" : "2016-08-25T17:14:34Z",
        "updatedAt" : "2016-08-30T13:51:58Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "94e997ec-e5b1-48cc-8eb2-7694c6c893dc",
        "parentId" : "b589ba63-3ae1-4d25-9e19-ec3e386d70c9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I realize this is pkg/admission and not pkg/controller, but would you want to do admission_controller_resourcequota?\n\nThis drives the quota admission plugin.  If we have more like this, I think we'd want the top level partitioning to be `<area>_<name in that area>_<component of that name>`, so that all quota admission bits sort together instead of having all admission plugins that also have a controller sorting together.\n",
        "createdAt" : "2016-08-25T19:21:26Z",
        "updatedAt" : "2016-08-30T13:51:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d0e7a667-5f4e-416d-b9b6-6e14bdf465ff",
        "parentId" : "b589ba63-3ae1-4d25-9e19-ec3e386d70c9",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Ok. I think what is throwing me off is `controller_serviceaccount_tokens_service` and `controller_serviceaccount_tokens_secret` which both start with `controller`, but I guess that's the \"area\", whereas in `admission_quota_controller`, the \"area\" is \"admission\".\n",
        "createdAt" : "2016-08-25T20:21:37Z",
        "updatedAt" : "2016-08-30T13:51:58Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4317173d3f5bbb58b06a3825fe1e0dc7bd58490f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@\t\tregistry: registry,\n\n\t\tqueue:      workqueue.NewNamed(\"admission_quota_controller\"),\n\t\twork:       map[string][]*admissionWaiter{},\n\t\tdirtyWork:  map[string][]*admissionWaiter{},"
  },
  {
    "id" : "f7b2455b-69f7-44c0-a90d-09536c92bee5",
    "prId" : 28504,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "523b3f6c-1633-44d5-ba17-5d727106deaa",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "we should get a test in the future to ensure that this is respected and not lost in future refactors.\n",
        "createdAt" : "2016-07-08T18:47:40Z",
        "updatedAt" : "2016-07-08T18:47:40Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "ada37c21638b8adc2301d0dd95d2af9a5fd4da26",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +173,177 @@\t}\n\n\tif e.lockAquisitionFunc != nil {\n\t\treleaseLocks := e.lockAquisitionFunc(quotas)\n\t\tdefer releaseLocks()"
  },
  {
    "id" : "cecd45f8-00f5-478c-90e3-d579174e86ce",
    "prId" : 26355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "498bc995-129d-4d9d-a8a2-1e3cfbedd413",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "just curious, but has anyone else adopted this pattern?\n",
        "createdAt" : "2016-05-31T21:02:04Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "f8f22bf9-c616-499a-bab2-2f0718232ceb",
        "parentId" : "498bc995-129d-4d9d-a8a2-1e3cfbedd413",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> just curious, but has anyone else adopted this pattern?\n\nDidn't think to look.  This just let's me keep a clean API and callers don't have to know they need to start the thing once its passed to them.  I think this one is a little different since it doesn't have a cache to prime.\n",
        "createdAt" : "2016-06-01T12:40:47Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c081d7a2-1478-4f9f-accb-77f9595bc8f2",
        "parentId" : "498bc995-129d-4d9d-a8a2-1e3cfbedd413",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "apologies david, i ran out of time today to review this, will put it on top\nof my agenda tomorrow.\n\nOn Wed, Jun 1, 2016 at 8:41 AM, David Eads notifications@github.com wrote:\n\n> In plugin/pkg/admission/resourcequota/controller.go\n> https://github.com/kubernetes/kubernetes/pull/26355#discussion_r65352110\n> :\n> \n> > @@ -418,7 +388,25 @@ func (e *quotaEvaluator) checkRequest(quotas []api.ResourceQuota, a admission.At\n> >     return quotas, nil\n> >  }\n> > \n> > -func (e *quotaEvaluator) evaluate(a admission.Attributes) error {\n> > +func (e *quotaEvaluator) Evaluate(a admission.Attributes) error {\n> > -   e.init.Do(func() {\n> \n> just curious, but has anyone else adopted this pattern?\n> \n> Didn't think to look. This just let's me keep a clean API and callers\n> don't have to know they need to start the thing once its passed to them. I\n> think this one is a little different since it doesn't have a cache to prime.\n> \n> —\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/26355/files/b232d25a8620d4122a0ed2e95026dff6d72e874c#r65352110,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AF8dbCumSULiWkTDJNXKQ3EH_96LeVeKks5qHX33gaJpZM4Inkrq\n> .\n",
        "createdAt" : "2016-06-01T21:50:29Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a28cf3963bd1b985f82ee9651b5fb8291afb40d5",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +389,393 @@\nfunc (e *quotaEvaluator) Evaluate(a admission.Attributes) error {\n\te.init.Do(func() {\n\t\tgo e.run()\n\t})"
  },
  {
    "id" : "4b857f9e-caf6-406b-b0cc-5a0ed823102a",
    "prId" : 26355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fc8cc48-4e2c-43ea-9575-b86523c97bed",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: some godoc here.\n",
        "createdAt" : "2016-06-03T17:55:22Z",
        "updatedAt" : "2016-06-28T15:38:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a28cf3963bd1b985f82ee9651b5fb8291afb40d5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +37,41 @@\n// Evaluator is used to see if quota constraints are satisfied.\ntype Evaluator interface {\n\t// Evaluate takes an operation and checks to see if quota constraints are satisfied.  It returns an error if they are not.\n\t// The default implementation process related operations in chunks when possible."
  },
  {
    "id" : "336f196f-eba5-4c66-999f-c25540d71f79",
    "prId" : 25091,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5a6e677-00fa-4484-92c4-76ba5850cd4d",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "so this has been frowned against in the project.  i am aware of no other place where we compare resource version with this assumption.  is there an alternate option we could follow to do the compare?\n",
        "createdAt" : "2016-05-03T20:05:48Z",
        "updatedAt" : "2016-05-23T17:37:32Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "465c54cb-e4c1-4648-9e82-c0a2a941e73b",
        "parentId" : "c5a6e677-00fa-4484-92c4-76ba5850cd4d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> so this has been frowned against in the project. i am aware of no other place where we compare resource version with this assumption. is there an alternate option we could follow to do the compare?\n\nIts done in the watch cache layer.  I'm not aware of another way to determine: \"newer\".\n",
        "createdAt" : "2016-05-03T20:08:54Z",
        "updatedAt" : "2016-05-23T17:37:32Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "02c0181f26bd08a66b0619490e8453c8658ca02f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +498,502 @@// if the cache is out of date, it deletes the stale entry.  This only works because of etcd resourceVersions\n// being monotonically increasing integers\nfunc (e *quotaEvaluator) checkCache(quota *api.ResourceQuota) *api.ResourceQuota {\n\tkey := quota.Namespace + \"/\" + quota.Name\n\tuncastCachedQuota, ok := e.updatedQuotas.Get(key)"
  },
  {
    "id" : "868255bb-8c41-410b-89a5-ef46fab50bff",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ff9f7a7-84dc-4c8d-8d62-1d7caf63290c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can we do more checkers before we add the work to the waiter?\n\nfor example, it seems like we could check the following safely before paying the cost of the work queue:\n1. is this an operation quota even cares about, if not return now\n2. are there quotas in the namespace?, if not, return now\n3. are the quotas matching on the resource? if not, return now\n\nThis would ensure that all requests are not paying the cost of the queue waking every 1s.\n",
        "createdAt" : "2016-04-15T15:28:34Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "72fd9f8f-6b09-41e7-bcf1-ce780cb76be5",
        "parentId" : "8ff9f7a7-84dc-4c8d-8d62-1d7caf63290c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> can we do more checkers before we add the work to the waiter?\n\nFollowup?  I'd like to see the concept in and then refinement from there.  I agree in principle, but I think that this is so much faster than the current implementation that I'd like to get here and then iterate.\n",
        "createdAt" : "2016-04-15T19:30:31Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "3fcd568f-41f9-430e-a75b-2d93228da4ab",
        "parentId" : "8ff9f7a7-84dc-4c8d-8d62-1d7caf63290c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am fine with a follow-up to do that.  My earlier concern noted was when I was confused on the waking every 1s bit.\n",
        "createdAt" : "2016-04-15T19:34:23Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "8347c3a4-d53b-44d2-9016-9be26d73a955",
        "parentId" : "8ff9f7a7-84dc-4c8d-8d62-1d7caf63290c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "in fact, I am not sure if a follow-up will even be needed.\n",
        "createdAt" : "2016-04-15T19:34:37Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : 396,
    "diffHunk" : "@@ -1,1 +394,398 @@\nfunc (e *quotaEvaluator) evaluate(a admission.Attributes) error {\n\twaiter := newAdmissionWaiter(a)\n\n\te.addWork(waiter)"
  },
  {
    "id" : "f3574e6e-8121-4c5d-a03d-60f8d8a04e34",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dbcfed4-e4a5-463a-bf6d-4dd05b0912ff",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "this seems like a general pattern, maybe a todo to move this to pkg/admission?\n",
        "createdAt" : "2016-04-15T19:44:39Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@}\n\ntype admissionWaiter struct {\n\tattributes admission.Attributes\n\tfinished   chan struct{}"
  },
  {
    "id" : "7a83de05-05fd-4f60-966d-340b220073c8",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "033d3c72-ec10-4693-85f8-a96d8c89d17e",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "these 5 things feel like they could be collapsed into a common object that provides a pattern that other admission controllers that have a need for shared locking on a resource could follow?  maybe a todo just think about how to structure that?\n",
        "createdAt" : "2016-04-15T19:45:46Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +56,60 @@\t// The technique is valuable for rollup activities to avoid fanout and reduce resource contention.\n\t// We could move this into a library if another component needed it.\n\t// queue is indexed by namespace, so that we bundle up on a per-namespace basis\n\tqueue      *workqueue.Type\n\tworkLock   sync.Mutex"
  },
  {
    "id" : "678a46f9-5937-45ac-b6d3-866735657717",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "425c2f8a-2f60-45a5-8dbb-06f2fb22ec7d",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can you add a godoc just so its not forgotten what this is doing?\n",
        "createdAt" : "2016-04-20T21:29:53Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +151,155 @@// checkAttributes iterates evaluates all the waiting admissionAttributes.  It will always notify all waiters\n// before returning.  The default is to deny.\nfunc (e *quotaEvaluator) checkAttributes(ns string, admissionAttributes []*admissionWaiter) {\n\t// notify all on exit\n\tdefer func() {"
  },
  {
    "id" : "7527d65e-8f63-4020-8993-b9b04210fa6d",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "920b1deb-d107-41ff-a9c6-43a93222c411",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "same here, checkQuotas will verify that the request does not violate any of the input quotas etc.\n",
        "createdAt" : "2016-04-20T21:31:19Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +188,192 @@//    and recurse into this method with the subset.  It's safe for us to evaluate ONLY the subset, because the other quota\n//    documents for these waiters have already been evaluated.  Step 1, will mark all the ones that should already have succeeded.\nfunc (e *quotaEvaluator) checkQuotas(quotas []api.ResourceQuota, admissionAttributes []*admissionWaiter, remainingRetries int) {\n\t// yet another copy to compare against originals to see if we actually have deltas\n\toriginalQuotas := make([]api.ResourceQuota, len(quotas), len(quotas))"
  },
  {
    "id" : "c836ac15-c0f1-45ab-81cd-6cfe566fd531",
    "prId" : 24280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa4ae92-1714-4b72-bf0a-fe4e09870bfc",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "checkRequest verifies that the request does not exceed any quota constraint.  it returns back a copy of quotas not yet persisted that capture what the usage would be if the request succeeded.\n",
        "createdAt" : "2016-04-20T21:32:33Z",
        "updatedAt" : "2016-04-25T14:42:29Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3c636309306f5929fc387655c3610304bdc8aa5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +295,299 @@// checkRequest verifies that the request does not exceed any quota constraint. it returns back a copy of quotas not yet persisted\n// that capture what the usage would be if the request succeeded.  It return an error if the is insufficient quota to satisfy the request\nfunc (e *quotaEvaluator) checkRequest(quotas []api.ResourceQuota, a admission.Attributes) ([]api.ResourceQuota, error) {\n\tnamespace := a.GetNamespace()\n\tname := a.GetName()"
  }
]