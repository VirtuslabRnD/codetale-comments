[
  {
    "id" : "04c2ddd6-9155-4ef0-93bc-a9503df5f39c",
    "prId" : 36765,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36765#pullrequestreview-21052595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5641d9f-e5ac-4be7-9dce-a599177623ad",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Have you considered how this affects clusterresourcequota and opened an issue for you to fix post-rebase?",
        "createdAt" : "2017-01-23T14:03:25Z",
        "updatedAt" : "2017-02-18T17:10:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e361c01e-df70-4d1d-a4d1-681690df95e8",
        "parentId" : "f5641d9f-e5ac-4be7-9dce-a599177623ad",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i created a card to track.  ideally, the CRQ is a valid covering quota.",
        "createdAt" : "2017-02-09T16:29:16Z",
        "updatedAt" : "2017-02-18T17:10:45Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fad0cb52a0521e4094789ebbb69bcd5126c451c",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +79,83 @@\t\tregistry:      registry,\n\t\tnumEvaluators: numEvaluators,\n\t\tconfig:        config,\n\t}, nil\n}"
  },
  {
    "id" : "6db8bac2-55fb-4a4f-890c-14b7b0828a43",
    "prId" : 36673,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36673#pullrequestreview-9549649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03110cf2-4962-45e3-b584-37c5f692bb00",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I assume this is because these aren't called (Get / List on the registry) - @derekwaynecarr can you sign off on this change if you haven't already?",
        "createdAt" : "2016-11-21T02:39:53Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1800cbd5-7e3a-4792-b84b-e4282c64d5da",
        "parentId" : "03110cf2-4962-45e3-b584-37c5f692bb00",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> I assume this is because these aren't called (Get / List on the registry)\r\n\r\nRight.",
        "createdAt" : "2016-11-21T03:35:13Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6c33a9ba-fe62-41e5-a751-1457288ef4bc",
        "parentId" : "03110cf2-4962-45e3-b584-37c5f692bb00",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@smarterclayton - we have experimented in openshift with having a registry for admission versus replenishment.  i think this is calling out the need to continue that split upstream more formally.  \r\n\r\n* For the `Evaluator.Get()` function call, I think we only now use it in a unit test downstream, as its usage is no longer needed that the prevObject is passed into admission control.  I can remove `Evaluator.Get` when 1.6 opens up.\r\n* For the `Evaluator.List()` function call, that is basically what becomes unique about a registry when running in admission versus the controller that requires the client.  I can think about a better factoring there, but just haivng a NewRegistryForAdmission() versus NewRegistryForReplenishment(client) would work for me.",
        "createdAt" : "2016-11-21T23:21:49Z",
        "updatedAt" : "2016-11-23T23:56:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ca2985774befd33fcbaaa0e29335769f063eeb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +34,38 @@\t\t\t// NOTE: we do not provide informers to the registry because admission level decisions\n\t\t\t// does not require us to open watches for all items tracked by quota.\n\t\t\tregistry := install.NewRegistry(nil, nil)\n\t\t\treturn NewResourceQuota(client, registry, 5, make(chan struct{}))\n\t\t})"
  },
  {
    "id" : "88215971-5f1f-4054-9a10-3b9eb10e9062",
    "prId" : 25414,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0296dab4-7ae1-4efd-a6e2-31caffadab1c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Is there an issue for the `Wants` pattern?  We need it for other bits and this is a bit hacky.\n",
        "createdAt" : "2016-05-10T17:29:56Z",
        "updatedAt" : "2016-05-10T23:51:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "af5c5eae-a46b-4a4e-85d1-ae0f67e00e3f",
        "parentId" : "0296dab4-7ae1-4efd-a6e2-31caffadab1c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "no issue for `Wants` pattern, but I think either @aveshagarwal @sjenning will be working on it soon.\n",
        "createdAt" : "2016-05-10T17:57:37Z",
        "updatedAt" : "2016-05-10T23:51:18Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc3e71894dde85fc64c099286f84efaf388cd1a5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +37,41 @@\t\t\tregistry := install.NewRegistry(client)\n\t\t\t// TODO: expose a stop channel in admission factory\n\t\t\treturn NewResourceQuota(client, registry, 5, make(chan struct{}))\n\t\t})\n}"
  },
  {
    "id" : "88893709-37c3-4d42-8bef-c31549a3a8ac",
    "prId" : 22852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00e4f746-7952-4ef1-b78d-345ec4de1cc2",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "can you add a comment in the code that explains why this is needed?\n\nthe use case as discussed is the following:\n\na namespace scoped resource may reference non-namespaced resources\nthe quota is measuring the number of unique references to those objects\nin order to calculate the uniqueness constraint, usage for one object is only knowable by knowing all other object's usage.  to know the other object's usage, we need to know the namespace.\n",
        "createdAt" : "2016-03-15T15:09:12Z",
        "updatedAt" : "2016-03-15T16:03:59Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2601ee56abcc0aa2929b19ed9e20822cf46fea79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +187,191 @@\t// resource. In such a case an evaluator needs to process other objects in\n\t// the same namespace which needs to be known.\n\tif om, err := api.ObjectMetaFor(inputObject); namespace != \"\" && err == nil {\n\t\tif om.Namespace == \"\" {\n\t\t\tom.Namespace = namespace"
  },
  {
    "id" : "30c631f4-0c50-4f2a-a4c9-cea71b7a65c5",
    "prId" : 20446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d37e07-a011-4802-ba48-db991dbeff02",
        "parentId" : null,
        "authorId" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "body" : "How can downstream extend the registry for its own types while using this plugin?\n",
        "createdAt" : "2016-02-08T08:26:18Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "tags" : [
        ]
      },
      {
        "id" : "cbfab9c0-8ef7-47af-b868-7b4d267b008d",
        "parentId" : "11d37e07-a011-4802-ba48-db991dbeff02",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@miminar - downstream should instantiate the plug-in with its own registry.  see similar pattern here for how downstream is injecting values into admission handlers: https://github.com/openshift/origin/blob/master/pkg/cmd/server/origin/master_config.go#L181\n",
        "createdAt" : "2016-02-08T16:03:10Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "95df07aa9d4b36dc67458be7416f46cb2f3f72d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@\tadmission.RegisterPlugin(\"ResourceQuota\",\n\t\tfunc(client clientset.Interface, config io.Reader) (admission.Interface, error) {\n\t\t\tregistry := install.NewRegistry(client)\n\t\t\treturn NewResourceQuota(client, registry)\n\t\t})"
  },
  {
    "id" : "1e4cc249-9c72-443f-9e05-b40b17954d02",
    "prId" : 20446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "225fcdc1-21bc-40dc-8493-20d8973105ad",
        "parentId" : null,
        "authorId" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "body" : "_Nitpick request._ Can we make values more readable? See this example:\n\n```\nExceeded quota: image-quota,\nrequested: openshift.io/projectimagessize=305001452,\nused: openshift.io/projectimagessize=1287882859,\nlimited: openshift.io/projectimagessize=1500Mi\n```\n\nWhat I'd like to see is:\n\n```\nExceeded quota: image-quota,\nrequested: openshift.io/projectimagessize=~305.0Mi,\nused: openshift.io/projectimagessize=~128.8Mi,\nlimited: openshift.io/projectimagessize=1.5Gi\n```\n\nI don't think the user cares about exact values. They can be retrieved by parsing qouta object if needed.\n\nNo need to solve it here. This PR is already big enough. I can make a follow-up PR if needed.\n",
        "createdAt" : "2016-02-12T16:43:08Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "tags" : [
        ]
      },
      {
        "id" : "e85c3fe1-8579-49d6-8ba3-a8393e3368bf",
        "parentId" : "225fcdc1-21bc-40dc-8493-20d8973105ad",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@miminar - so you want to take the highest format option without losing fidelity?  I can see the point in `1500Mi` versus `1.5 Gi`, but I am not sure I agree on the ~ syntax...\n",
        "createdAt" : "2016-02-15T15:53:01Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "e4aa8a4f-d6df-430c-aef6-c2fb2c7f3bf9",
        "parentId" : "225fcdc1-21bc-40dc-8493-20d8973105ad",
        "authorId" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "body" : "Taking back. Let's keep the precision. We can re-render the values during event generation if needed.\n",
        "createdAt" : "2016-02-15T17:13:52Z",
        "updatedAt" : "2016-02-27T01:48:30Z",
        "lastEditedBy" : "5de7a1ed-c1fb-4e4e-b01c-149ca3578c83",
        "tags" : [
        ]
      }
    ],
    "commit" : "95df07aa9d4b36dc67458be7416f46cb2f3f72d8",
    "line" : 438,
    "diffHunk" : "@@ -1,1 +283,287 @@\n// prettyPrint formats a resource list for usage in errors\nfunc prettyPrint(item api.ResourceList) string {\n\tparts := []string{}\n\tfor key, value := range item {"
  },
  {
    "id" : "42b42d6a-a025-4d28-8e65-b544713d92c6",
    "prId" : 12600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0aab244-f1ee-4f00-9b7f-a3361877b727",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "With `:=`, delta and err won't escape this scope, right? Is that what you want? delta is used outside.\n",
        "createdAt" : "2015-09-03T04:49:22Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "eaf045ed-8188-4e4a-bd6a-dbf9c129e5ef",
        "parentId" : "d0aab244-f1ee-4f00-9b7f-a3361877b727",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Wow, it's weird that this compiles.\n",
        "createdAt" : "2015-09-03T04:52:20Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d962bf24-c035-401f-a086-45565a1b8853",
        "parentId" : "d0aab244-f1ee-4f00-9b7f-a3361877b727",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Where do you see `delta` used outside this scope? I assume you're referring to L239, but that's in the same scope.\n\n(FWIW I found it impossible to review this file using side-by-side mode and had to click \"View\" to view the actual file)\n",
        "createdAt" : "2015-09-03T06:09:19Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "74a64296-36b9-4419-ba66-15cd574406de",
        "parentId" : "d0aab244-f1ee-4f00-9b7f-a3361877b727",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am sorry github tools caused confusion, it is in the same block.\n",
        "createdAt" : "2015-09-03T18:03:02Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e76842eb7baa5382058e7b11a8f314552af58f8",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +213,217 @@\t\t\t// the amount of resource being requested, or an error if it does not make a request that is tracked\n\t\t\tpod := obj.(*api.Pod)\n\t\t\tdelta, err := resourcequotacontroller.PodRequests(pod, resourceName)\n\n\t\t\tif err != nil {"
  },
  {
    "id" : "69d33cf1-e804-4b26-9b7c-28d2f36e8660",
    "prId" : 12600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17dd267f-110c-466c-83c6-165d2977f1e7",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What is delta supposed to be here?\n",
        "createdAt" : "2015-09-03T04:53:31Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f50d2e34-aad8-4bac-888e-b948e453e4a9",
        "parentId" : "17dd267f-110c-466c-83c6-165d2977f1e7",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I may be missing something, but this code looks correct to me. `delta` is the request if this is a create, and request - old pod's request if this is an update.\n",
        "createdAt" : "2015-09-03T06:10:53Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "e332c4d6-d4f7-45a2-9333-0c62e7be61f2",
        "parentId" : "17dd267f-110c-466c-83c6-165d2977f1e7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@davidopp - correct.\n\ndelta is the incremental change to the quota with the incoming pod.\n\non a pod create, delta is the newPod.request\non a pod update, delta is the newPod.request - oldPod.request (if oldPod.request was not nil)\n\nwhile we do not yet support dynamic resizing of the pod resources on an update, the quota piece will account for it if/when we add it.\n",
        "createdAt" : "2015-09-03T18:15:08Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e76842eb7baa5382058e7b11a8f314552af58f8",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +240,244 @@\n\t\t\tnewUsage := used.Copy()\n\t\t\tnewUsage.Add(*delta)\n\n\t\t\t// make the most precise comparison possible"
  },
  {
    "id" : "b64b512a-3dc9-43c4-8c9c-d8b953692379",
    "prId" : 12600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b24e9f90-9c9c-4627-8d7a-e5f8d7528b35",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I think we've been using the convention of putting comments above the line they comment, so this comment should be moved up one line.\n",
        "createdAt" : "2015-09-03T05:37:24Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "db6eb7eb-e46d-4385-bf75-c739e890cb8c",
        "parentId" : "b24e9f90-9c9c-4627-8d7a-e5f8d7528b35",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "the comment is in the right spot, if the resource is not in the set, we ignore tracking it.  added a new line as maybe that would improve the clarity.\n",
        "createdAt" : "2015-09-03T18:00:07Z",
        "updatedAt" : "2015-09-03T19:46:24Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e76842eb7baa5382058e7b11a8f314552af58f8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +195,199 @@\t\tfor _, resourceName := range []api.ResourceName{api.ResourceMemory, api.ResourceCPU} {\n\n\t\t\t// ignore tracking the resource if its not in the quota document\n\t\t\tif !set[resourceName] {\n\t\t\t\tcontinue"
  },
  {
    "id" : "651b8908-57a6-4599-96a5-09b4aa03e642",
    "prId" : 3796,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a3ec6f-7a36-4139-a80a-f86989daca11",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I predict you are going to have to put a retry loop in here that ups the resourceVersion and tries again.  Or else clients are going to be annoyed with frquency of errors.   But happy to let you solve that as it comes up.\n",
        "createdAt" : "2015-01-27T16:56:17Z",
        "updatedAt" : "2015-01-28T20:09:48Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "c39fddaa-41b0-4537-b092-c586c2d90f66",
        "parentId" : "d0a3ec6f-7a36-4139-a80a-f86989daca11",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I anticipate the same.  I plan on drastically reducing this loops frequency, and also support watching on DELETE of pod in the next couple of weeks.\n",
        "createdAt" : "2015-01-28T20:11:01Z",
        "updatedAt" : "2015-01-28T20:11:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff20c84dd5bd078b308f92a5e27c03e58bb2212",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\t\t\t}\n\t\t\tusage.Status = quota.Status\n\t\t\terr = q.client.ResourceQuotaUsages(usage.Namespace).Create(&usage)\n\t\t\tif err != nil {\n\t\t\t\treturn apierrors.NewForbidden(a.GetKind(), name, fmt.Errorf(\"Unable to %s %s at this time because there was an error enforcing quota\", a.GetOperation(), a.GetKind()))"
  }
]