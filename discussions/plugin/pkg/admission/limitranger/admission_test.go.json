[
  {
    "id" : "212c8725-0cda-4fcc-be76-46f76e302944",
    "prId" : 30145,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bfea8e0-dc99-4f86-865a-05afeadeabf1",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "@derekwaynecarr regarding your comment about using `api.LimitTypePersistentVolumeClaim` in  a test, doesn't this do it? The `LimitRange` is created w/ this type and then `PersistentVolumeClaimLimitFunc` looks specifically for this type.\n",
        "createdAt" : "2016-08-16T17:01:44Z",
        "updatedAt" : "2016-10-05T21:38:08Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "90d76042-e882-469f-a636-f22b804fe7e9",
        "parentId" : "5bfea8e0-dc99-4f86-865a-05afeadeabf1",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i meant a validation_test.\n\nbtw, i suspect our QA team will potentially open bz reports if we do not validate against setting fields not yet supported by the admission plugin.  for example, they may question if we should error when a user sets a default or defaultRequest value for a pvc in limit range, and want a validation error.  i am not sure how concerned i am to check for that.\n\nwhats your opinion?\n",
        "createdAt" : "2016-08-18T21:24:01Z",
        "updatedAt" : "2016-10-05T21:38:08Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "6a02d9df-a6b0-4b90-9d30-e2822cb38778",
        "parentId" : "5bfea8e0-dc99-4f86-865a-05afeadeabf1",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "What is the established pattern for unsupported fields?  Silently ignored (docs discuss them) or fail?\n\nI'd like to go with whatever standard is in place. If no standard, I am happy with silent ignoring. I suppose one could argue failure is explicit while silently ignoring is implicit and therefore not obvious.\n",
        "createdAt" : "2016-08-18T21:28:24Z",
        "updatedAt" : "2016-10-05T21:38:08Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "18c4cf36-fc80-4f67-970f-fcaa90d17b0c",
        "parentId" : "5bfea8e0-dc99-4f86-865a-05afeadeabf1",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "We ignore for our downstream uses today that limit our OpenShift resources... I am fine continuing that now for here as well.\n",
        "createdAt" : "2016-08-31T18:10:30Z",
        "updatedAt" : "2016-10-05T21:38:08Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d40104c1dfba97a8472feea44e83768c29ce0b4",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +663,667 @@\t\t{\n\t\t\tpvc:        validPersistentVolumeClaim(\"pvc-is-min-storage-request\", getResourceRequirements(getStorageResourceList(\"1Gi\"), getStorageResourceList(\"\"))),\n\t\t\tlimitRange: createLimitRange(api.LimitTypePersistentVolumeClaim, getStorageResourceList(\"1Gi\"), api.ResourceList{}, api.ResourceList{}, api.ResourceList{}, api.ResourceList{}),\n\t\t},\n\t\t{"
  }
]