[
  {
    "id" : "2b2cadc3-923a-4643-ab60-9f65b5c33700",
    "prId" : 55487,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55487#pullrequestreview-76135344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0c5309d-3a64-46eb-9cfd-6cb59da15904",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "They are really the same with the exception `l.actions.ValidateLimit` vs.  `l.actions.MutateLimit`? Maybe make that explicit?",
        "createdAt" : "2017-11-13T14:06:45Z",
        "updatedAt" : "2017-11-13T14:21:34Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "132c1162-463b-40c0-8bdf-1fd4f92edfd4",
        "parentId" : "b0c5309d-3a64-46eb-9cfd-6cb59da15904",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Much better now.",
        "createdAt" : "2017-11-13T15:19:54Z",
        "updatedAt" : "2017-11-13T15:19:54Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "032e136e381c05a1f6d702c1d69c33b6ac04434d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +132,136 @@\t\t}\n\t}\n\treturn nil\n}\n"
  },
  {
    "id" : "20cc69c9-2d73-4025-a13e-d21e29ef0b79",
    "prId" : 55487,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55487#pullrequestreview-76111163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "062e6061-c01e-4385-963e-b060698a12c0",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "validates storage limits ....",
        "createdAt" : "2017-11-13T14:10:14Z",
        "updatedAt" : "2017-11-13T14:21:34Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "032e136e381c05a1f6d702c1d69c33b6ac04434d",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +458,462 @@}\n\n// PersistentVolumeClaimValidateLimitFunc enforces storage limits for PVCs.\n// Users request storage via pvc.Spec.Resources.Requests.  Min/Max is enforced by an admin with LimitRange.\n// Claims will not be modified with default values because storage is a required part of pvc.Spec."
  },
  {
    "id" : "46d6c623-eab2-421c-9965-92f539e577a6",
    "prId" : 29567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "398b7fc1-5833-4a39-adee-02572b5f40d6",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I'm curious why you need to alias this?\n",
        "createdAt" : "2016-07-26T15:03:56Z",
        "updatedAt" : "2016-08-08T14:32:12Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "4166db55-1035-44f3-973f-f550ece4f460",
        "parentId" : "398b7fc1-5833-4a39-adee-02572b5f40d6",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "because goimports gets confused.\n",
        "createdAt" : "2016-07-27T19:57:36Z",
        "updatedAt" : "2016-08-08T14:32:12Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a672a986e3b5b6177344c0b78633119a48dab048",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +24,28 @@\t\"time\"\n\n\tlru \"github.com/hashicorp/golang-lru\"\n\n\tclientset \"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset\""
  },
  {
    "id" : "39688064-9fc2-4f7a-9247-b07bba5d8a1a",
    "prId" : 23280,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d3792c4-69de-46b5-b1e6-1ed00f85b525",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "are we confident in our downstream use cases that we will not forget to include this line?\n",
        "createdAt" : "2016-03-21T19:07:53Z",
        "updatedAt" : "2016-03-21T19:07:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "20a4f368-4c82-4e0c-a401-d070e07289c7",
        "parentId" : "6d3792c4-69de-46b5-b1e6-1ed00f85b525",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "I can certainly move it back into the main admit method if you think it's worth it.  \n\nHere were the two downstream cases I found:\nhttps://github.com/openshift/origin/pull/7989/files#diff-5fd1547857aea1ef0cdb18cb293f88faR210\nhttps://github.com/openshift/origin/pull/7989/files#diff-c0324af3f9610f91b1fde15a63e35bf5R106\n",
        "createdAt" : "2016-03-21T19:13:42Z",
        "updatedAt" : "2016-03-21T19:13:42Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "14620447c1559f99337884fd0e2a3b46196f42f8",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +396,400 @@// all this supports now.  Also ignores any call that has a subresource defined.\nfunc (d *DefaultLimitRangerActions) SupportsAttributes(a admission.Attributes) bool {\n\tif a.GetSubresource() != \"\" {\n\t\treturn false\n\t}"
  },
  {
    "id" : "9c2c596d-d53d-4a7a-b33b-9faa40a220cf",
    "prId" : 21470,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97d32ff7-f807-4c29-9af3-11f441652145",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "isn't this prone to being wrong if the LRU cache is never cleared?  for example, if you add a limit range to a namespace, and later remove it, the LRU cache could have the wrong data?  also what happens if i delete and readd the same namespace, but the new namespace has no limit range?  this looks like it could return wrong data in that scenario?\n",
        "createdAt" : "2016-02-18T15:33:19Z",
        "updatedAt" : "2016-02-19T18:47:48Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "78c49e8a-5d51-4780-9630-b40c0bc6163c",
        "parentId" : "97d32ff7-f807-4c29-9af3-11f441652145",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'll add a ttl to the cache entry to timebound the wrongness.  One minute ought to do for the majority of cases. Once you're beyond that the locality doesn't help.\n",
        "createdAt" : "2016-02-18T15:41:40Z",
        "updatedAt" : "2016-02-19T18:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "24d5329130e8a5be4760db7156798235d6cbbb20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +99,103 @@\t\tlruItemObj, ok := l.liveLookupCache.Get(a.GetNamespace())\n\t\tif !ok || lruItemObj.(liveLookupEntry).expiry.Before(time.Now()) {\n\t\t\tliveList, err := l.client.Core().LimitRanges(a.GetNamespace()).List(api.ListOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn admission.NewForbidden(a, err)"
  },
  {
    "id" : "e64caa83-1bb6-43b3-87db-e15b5a206693",
    "prId" : 4749,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec13da4-14f0-4216-863c-2fbbe23d63d3",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "No need to return reflector?\n",
        "createdAt" : "2015-03-06T22:09:10Z",
        "updatedAt" : "2015-03-06T22:09:10Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed8eed00448498a2180a454dfe89d53539046a3",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +95,99 @@\t\t},\n\t}\n\tindexer, reflector := cache.NewNamespaceKeyedIndexerAndReflector(lw, &api.LimitRange{}, 0)\n\treflector.Run()\n\treturn &limitRanger{client: client, limitFunc: limitFunc, indexer: indexer}"
  },
  {
    "id" : "0317c461-185f-44e7-8c5d-9b18d35b79e8",
    "prId" : 3751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00bc76aa-90fc-496f-ab67-42869997e1e3",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Should this use a Reflector or other caching?\n",
        "createdAt" : "2015-01-26T20:32:32Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "6e6dd141-8ae8-46ac-9914-ce7f487e1c4e",
        "parentId" : "00bc76aa-90fc-496f-ab67-42869997e1e3",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It should use a cache.  I will add it to my TODO list.\n",
        "createdAt" : "2015-01-26T21:01:18Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "4c6f1985-6ebb-4aa3-b3d0-9344238daa03",
        "parentId" : "00bc76aa-90fc-496f-ab67-42869997e1e3",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Okay.\n",
        "createdAt" : "2015-01-27T00:27:51Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "825cabe8-4109-4f40-b704-a91d2f870342",
        "parentId" : "00bc76aa-90fc-496f-ab67-42869997e1e3",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I want to move to a cache once #2294 issue is resolved.\n\nWill update code and leave a // TODO\n",
        "createdAt" : "2015-01-27T21:41:04Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b19a8a61a86e0ffefb9d94fb39a54d92e134bfbf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +51,55 @@\t// look for a limit range in current namespace that requires enforcement\n\t// TODO: Move to cache when issue is resolved: https://github.com/GoogleCloudPlatform/kubernetes/issues/2294\n\titems, err := l.client.LimitRanges(a.GetNamespace()).List(labels.Everything())\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "cffd95bd-459d-4223-bf6a-b1406f818586",
    "prId" : 3751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be38247c-2de4-4a44-b58e-bfb752048a86",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Min and Max don't need to be upper-case.\n",
        "createdAt" : "2015-01-26T20:45:25Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "8a7b0d95-b893-42b2-bde9-9a0791f5bc28",
        "parentId" : "be38247c-2de4-4a44-b58e-bfb752048a86",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I wanted to reuse Min and Max in OpenShift, could not find a good Min/Max function in standard go utils for int64 type.  If you are aware of one, would happily move to it.\n",
        "createdAt" : "2015-01-26T21:03:26Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b19a8a61a86e0ffefb9d94fb39a54d92e134bfbf",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@}\n\nfunc Min(a int64, b int64) int64 {\n\tif a < b {\n\t\treturn a"
  },
  {
    "id" : "c12c217e-2517-4425-859d-569aba6efff4",
    "prId" : 3751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eed38263-9f7a-4b1d-b650-30747fb3633c",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Store in map? e.g.\n\n```\nvar lrmap map[string]*api.LimitRange\n...\nlimitRange := lrmap[a.GetNamespace()]  \nerr = l.limitFunc(limitRange, a.GetKind(), a.GetObject())\nif err != nil {\n    return err\n}\n```\n",
        "createdAt" : "2015-01-26T20:49:22Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "2226bff2-47e5-4acc-86ff-592a960942cd",
        "parentId" : "eed38263-9f7a-4b1d-b650-30747fb3633c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Agreed, would need to make this type of change if we used a local cache.\n",
        "createdAt" : "2015-01-26T21:04:21Z",
        "updatedAt" : "2015-01-27T21:55:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b19a8a61a86e0ffefb9d94fb39a54d92e134bfbf",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\t}\n\n\t// ensure it meets each prescribed min/max\n\tfor i := range items.Items {\n\t\tlimitRange := &items.Items[i]"
  }
]