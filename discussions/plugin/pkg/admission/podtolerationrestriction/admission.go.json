[
  {
    "id" : "c0bd84fb-4377-4010-96d5-810b1c685255",
    "prId" : 50180,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50180#pullrequestreview-56098962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88841366-eec0-4db2-bb09-8b78e145aba7",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "we need to ensure that this admission controller is run after all resource defaulting controllers.",
        "createdAt" : "2017-08-09T05:41:31Z",
        "updatedAt" : "2017-08-09T14:25:22Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "535c3104-3b8a-4add-b4a1-091e4574a948",
        "parentId" : "88841366-eec0-4db2-bb09-8b78e145aba7",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1. ",
        "createdAt" : "2017-08-10T02:56:52Z",
        "updatedAt" : "2017-08-10T02:59:24Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "9d61dec6-3d6a-45de-929f-d9fe37a94252",
        "parentId" : "88841366-eec0-4db2-bb09-8b78e145aba7",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "hm... , do you means this admission controller need to be the latest one in apiserver's args?",
        "createdAt" : "2017-08-10T03:51:47Z",
        "updatedAt" : "2017-08-10T03:51:47Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "cb7a5f01-7204-4ef3-b7f0-733983f5aa78",
        "parentId" : "88841366-eec0-4db2-bb09-8b78e145aba7",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "its a doc issue.  you basically will want this controller to be the one that appears right before `ResourceQuota`",
        "createdAt" : "2017-08-14T14:42:07Z",
        "updatedAt" : "2017-08-14T14:42:07Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "03e439493830abc0c27e1cef0c5b26ab927bf367",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +165,169 @@\t}\n\n\tif qoshelper.GetPodQOS(pod) != api.PodQOSBestEffort {\n\t\tfinalTolerations = tolerations.MergeTolerations(finalTolerations, []api.Toleration{\n\t\t\t{"
  },
  {
    "id" : "6c3f13cc-9667-4add-af5c-87d6ebc40b2f",
    "prId" : 30302,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/30302#pullrequestreview-24490759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a34c6ea2-9398-457b-a7cb-32b3005ad3aa",
        "parentId" : null,
        "authorId" : "8f672b1e-0513-4363-b383-ad8d8de0cdb9",
        "body" : "Is it better like this?\r\n```\r\n\tif err != nil {\r\n\t\tif errors.IsNotFound(err) {\r\n\t\t\t// in case of latency in our caches, make a call direct to storage to verify that it truly exists or not\r\n\t\t\tnamespace, err = p.client.Core().Namespaces().Get(nsName, metav1.GetOptions{})\r\n\t\t\tif err != nil {\r\n\t\t\t\tif errors.IsNotFound(err) {\r\n\t\t\t\t\treturn err\r\n\t\t\t\t}\r\n\t\t\t\treturn errors.NewInternalError(err)\r\n\t\t\t}\r\n\t\t}else {\r\n\t\t  return errors.NewInternalError(err)\r\n               }\r\n\t}\r\n```",
        "createdAt" : "2017-03-01T05:17:22Z",
        "updatedAt" : "2017-04-06T20:16:26Z",
        "lastEditedBy" : "8f672b1e-0513-4363-b383-ad8d8de0cdb9",
        "tags" : [
        ]
      },
      {
        "id" : "65528535-7c6c-4cb9-8d75-bf3b94e78040",
        "parentId" : "a34c6ea2-9398-457b-a7cb-32b3005ad3aa",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "I dont think it adds any extra benefit to the code in question. ",
        "createdAt" : "2017-03-01T14:35:01Z",
        "updatedAt" : "2017-04-06T20:16:26Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f309eec9ac079866444dc7c8d40ab26dd6bbf56",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@\tnsName := a.GetNamespace()\n\tnamespace, err := p.namespaceLister.Get(nsName)\n\tif errors.IsNotFound(err) {\n\t\t// in case of latency in our caches, make a call direct to storage to verify that it truly exists or not\n\t\tnamespace, err = p.client.Core().Namespaces().Get(nsName, metav1.GetOptions{})"
  }
]