[
  {
    "id" : "caff540d-2a44-4713-95e7-98d36778adc2",
    "prId" : 54414,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54414#pullrequestreview-71221855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "377e9e1b-a822-463d-aa9a-6ed555ac9c18",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this try `*.svc`? that's a little weird",
        "createdAt" : "2017-10-23T15:14:03Z",
        "updatedAt" : "2017-10-23T16:33:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "963dc6b1-4a40-4b90-b239-cd6d196571ea",
        "parentId" : "377e9e1b-a822-463d-aa9a-6ed555ac9c18",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> does this try *.svc? that's a little weird\r\n\r\nIt does, but it doesn't make anyone use it.  Doing it like this makes the matching rules consistent and predictable for users.  The requirement to be a `.svc` is artificial and I'd rather not have a file format that precludes supporting other possible use-cases.\r\n\r\nI don't think that ever makes it behave incorrectly.",
        "createdAt" : "2017-10-23T15:16:07Z",
        "updatedAt" : "2017-10-23T16:33:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd4ab3e061ff44515d5107e1ae3e9d6469d956aa",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@\tserverSteps := strings.Split(server, \".\")\n\tfor i := 1; i < len(serverSteps); i++ {\n\t\tnickName := \"*.\" + strings.Join(serverSteps[i:], \".\")\n\t\tif authConfig, ok := c.kubeconfig.AuthInfos[nickName]; ok {\n\t\t\treturn restConfigFromKubeconfig(authConfig)"
  },
  {
    "id" : "708a51f5-787d-4b1f-ad1c-cb134cacaab7",
    "prId" : 54414,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54414#pullrequestreview-71222025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1337edd3-a837-4b01-8a3d-8e693a4ea452",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "fall back to `current-context.user` if present before anonymous",
        "createdAt" : "2017-10-23T15:14:57Z",
        "updatedAt" : "2017-10-23T16:33:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "24f18675-3d0c-43cd-874c-2b8dcac8dcfb",
        "parentId" : "1337edd3-a837-4b01-8a3d-8e693a4ea452",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> fall back to current-context.user if present before anonymous\r\n\r\nok.",
        "createdAt" : "2017-10-23T15:16:35Z",
        "updatedAt" : "2017-10-23T16:33:59Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd4ab3e061ff44515d5107e1ae3e9d6469d956aa",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@\t\treturn restConfigFromKubeconfig(authConfig)\n\t}\n\n\t// use the current context from the kubeconfig if possible\n\tif len(c.kubeconfig.CurrentContext) > 0 {"
  },
  {
    "id" : "2e40e67e-0236-4b72-adea-2a21f4c83e9f",
    "prId" : 54414,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54414#pullrequestreview-77301174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e1413dc-b07d-45c0-a2e1-a588d678d46b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand the part that turns a kubeconfig file into this structure; it needs examples & at least a comment explaining it? Maybe this already exists or is coming in another PR? Maybe an example in a test?",
        "createdAt" : "2017-10-24T20:48:58Z",
        "updatedAt" : "2017-10-24T21:09:38Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fb415b6e-04cd-4f12-8000-4f9c912a5e12",
        "parentId" : "9e1413dc-b07d-45c0-a2e1-a588d678d46b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I don't understand the part that turns a kubeconfig file into this structure; it needs examples & at least a comment explaining it? Maybe this already exists or is coming in another PR? Maybe an example in a test?\r\n\r\nIt's the normal decoding path.  The types were written long ago when the hub version was optimized for code (with maps) and the external was optimized for serialization.",
        "createdAt" : "2017-10-24T22:07:27Z",
        "updatedAt" : "2017-10-24T22:07:27Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6c4b350c-517f-4530-a29c-7eb53c13978d",
        "parentId" : "9e1413dc-b07d-45c0-a2e1-a588d678d46b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think we still need examples specifically for this feature. They don't have to be in this PR. The field names in kubeconfig files aren't intuitive.",
        "createdAt" : "2017-10-25T22:20:07Z",
        "updatedAt" : "2017-10-25T22:20:07Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1a5eb824-a6c0-4ced-84a7-4d095efcc2b7",
        "parentId" : "9e1413dc-b07d-45c0-a2e1-a588d678d46b",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "I think it will look like, (@deads2k correct me if I'm wrong)\r\n```\r\nusers:\r\n- name: \"*.svc\"\r\n  user:\r\n    token-file: \".../token\"\r\n- name: \"*.namespace.svc\"\r\n  user:\r\n    client-certificate-file: \".../client.crt\"\r\n    client-key-file: \".../client.key\"\r\n```",
        "createdAt" : "2017-11-16T23:41:58Z",
        "updatedAt" : "2017-11-16T23:42:40Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd4ab3e061ff44515d5107e1ae3e9d6469d956aa",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@func (c *defaultAuthenticationInfoResolver) ClientConfigFor(server string) (*rest.Config, error) {\n\t// exact match\n\tif authConfig, ok := c.kubeconfig.AuthInfos[server]; ok {\n\t\treturn restConfigFromKubeconfig(authConfig)\n\t}"
  }
]