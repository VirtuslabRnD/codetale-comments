[
  {
    "id" : "74badb9d-37a5-450a-accd-68d72a0633a8",
    "prId" : 60145,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60145#pullrequestreview-146583727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9dae4fb-cc1d-420e-bb77-7ff3c77eda1e",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "@liggitt @tallclair For how long we need to support PSP in extenstions API group?",
        "createdAt" : "2018-08-14T23:17:03Z",
        "updatedAt" : "2018-08-14T23:17:03Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "746ce067-29bd-46da-b5aa-c364b381b188",
        "parentId" : "c9dae4fb-cc1d-420e-bb77-7ff3c77eda1e",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "I think as long as the API is still there. I'm not sure what the policy is for removing resources from extensions.",
        "createdAt" : "2018-08-15T19:24:31Z",
        "updatedAt" : "2018-08-15T19:24:31Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "88ae9479d9605061ec7282fa7b4859083ddf0261",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +356,360 @@\n// authorizedForPolicy returns true if info is authorized to perform the \"use\" verb on the policy resource.\n// TODO: check against only the policy group when PSP will be completely moved out of the extensions\nfunc authorizedForPolicy(info user.Info, namespace string, policyName string, authz authorizer.Authorizer) bool {\n\t// Check against extensions API group for backward compatibility"
  },
  {
    "id" : "17fd3c7e-3b5e-4666-81bc-6d9f016a841d",
    "prId" : 55643,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55643#pullrequestreview-77956534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e639342-746f-4c20-abf7-5f6d216ce5db",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the call to logProviders above is not useful now since the list is never filtered",
        "createdAt" : "2017-11-20T19:39:04Z",
        "updatedAt" : "2017-11-22T19:13:27Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "56cef8fa-abe9-4c0e-839e-d47eb550f260",
        "parentId" : "2e639342-746f-4c20-abf7-5f6d216ce5db",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "removed (kept the error logging)",
        "createdAt" : "2017-11-20T23:22:44Z",
        "updatedAt" : "2017-11-22T19:13:27Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "967323558387e88bf3df532610511ed06d9dbfa7",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +226,230 @@\n\tif len(providers) == 0 {\n\t\treturn nil, \"\", nil, fmt.Errorf(\"no providers available to validate pod request\")\n\t}\n"
  },
  {
    "id" : "def0b2dd-1a37-4bfe-8286-69edde856fdb",
    "prId" : 54689,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54689#pullrequestreview-75558455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@deads2k We could skip the mutation phase for non-create operations. But this annotation forces us to keep it for the update case. It's essential for the tests right now to expose the selected policy. If we change the tests, we might get rid of this and simplify the mutation phase to be create-only. wdyt?",
        "createdAt" : "2017-11-03T18:06:20Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "976a0f88-8f1e-453f-9133-7240a638d40c",
        "parentId" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k We could skip the mutation phase for non-create operations. But this annotation forces us to keep it for the update case. It's essential for the tests right now to expose the selected policy. If we change the tests, we might get rid of this and simplify the mutation phase to be create-only. wdyt?\r\n\r\nThat sounds good as a future improvement.  I'd like to keep this initial pull tight.",
        "createdAt" : "2017-11-06T13:52:30Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "f32430b5-21b1-45a3-8d3e-30a84bad2541",
        "parentId" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Hmm, I would say that this annotation is broken by this split. For it to be accurate, you would need to require that the subsequent validate step validates using the PSP named here.\r\n\r\nIt would actually simplify the model (and speed it up) if we could require that updates to the pod be valid under the original PSP, but I guess that's a significant breaking API change.",
        "createdAt" : "2017-11-07T21:01:51Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "1295a2a4-4251-4c09-b486-aa3c0eafb32a",
        "parentId" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The annotation is for testing and for information only, or in other words: it's broken by design. You cannot trust its value in any subsequent non-mutating request. Actually, given the semantics of PSPs to be highly implicit (via an existantial quantifier), I would prefer to have this annotation go away. Then we can restrict the mutation phase to CREATE requests only and do just validation after that for any other request.",
        "createdAt" : "2017-11-08T09:34:59Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "c3a16aaf-51b3-4dd7-847e-60c5db9f7f2a",
        "parentId" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "SGTM. Follow up?",
        "createdAt" : "2017-11-09T18:43:05Z",
        "updatedAt" : "2017-11-09T18:43:05Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "919a8004-eea3-4866-8623-2a7eeba1044a",
        "parentId" : "2d62282b-c596-4851-83cc-2023720a0e7d",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> SGTM. Follow up?\r\n\r\nYeah.  I see some value in the annotation to allow an ordering during the validation that will probably let us finish faster.  Not mutating at all during update seems like a great change though.",
        "createdAt" : "2017-11-09T19:29:26Z",
        "updatedAt" : "2017-11-09T19:29:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9efab0eb28564e44b77fd06b59b5da426d82d05",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +139,143 @@\t\t// if failOnNoPolicies is false.\n\t\t// TODO: if failOnNoPolicies is toggled from false to true, we will never update the annotation anymore. Is this desired?\n\t\tpod.ObjectMeta.Annotations[psputil.ValidatedPSPAnnotation] = pspName\n\t\treturn nil\n\t}"
  },
  {
    "id" : "afbf0e2d-869b-4320-b88c-fc2a3bffbcac",
    "prId" : 54689,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54689#pullrequestreview-75034073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "040a2a09-4b89-4f5b-ba8e-35fae5048e07",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "nit: `&& len(validationErrs) == 0`",
        "createdAt" : "2017-11-07T21:16:05Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "27e57092-7162-4b63-8e30-2f55340bab2e",
        "parentId" : "040a2a09-4b89-4f5b-ba8e-35fae5048e07",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "No. validationErrs will be the errors of not-matching policies. If we get an allowedPod, we can ignore those. Otherwise, we print them.",
        "createdAt" : "2017-11-08T09:29:12Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9efab0eb28564e44b77fd06b59b5da426d82d05",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +128,132 @@\t\treturn admission.NewForbidden(a, err)\n\t}\n\tif allowedPod != nil {\n\t\t*pod = *allowedPod\n\t\t// annotate and accept the pod"
  },
  {
    "id" : "62838897-61cc-43f3-a30d-b11316b33856",
    "prId" : 54689,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54689#pullrequestreview-75029693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9b7471d-b8fe-472e-9125-82faa15981d9",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Why change this?",
        "createdAt" : "2017-11-07T21:26:13Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "4033684e-e316-4618-81a6-930c637e4bd5",
        "parentId" : "d9b7471d-b8fe-472e-9125-82faa15981d9",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Because we cannot return one admission interface in the constructor anymore. This was largely discussed within https://github.com/kubernetes/kubernetes/pull/54485. Golang doesn't give us better tools than this.",
        "createdAt" : "2017-11-08T09:13:30Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9efab0eb28564e44b77fd06b59b5da426d82d05",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +59,63 @@\n// PodSecurityPolicyPlugin holds state for and implements the admission plugin.\ntype PodSecurityPolicyPlugin struct {\n\t*admission.Handler\n\tstrategyFactory  psp.StrategyFactory"
  },
  {
    "id" : "baa62b87-1727-4621-bf1c-522cac63a20c",
    "prId" : 54689,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54689#pullrequestreview-75045628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f116a57-997d-4c7a-93bd-7ed101c2c8b2",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Why does this need to be exported now?",
        "createdAt" : "2017-11-07T21:52:14Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "140088e0-19d2-48fc-b5af-2bce6588c0da",
        "parentId" : "5f116a57-997d-4c7a-93bd-7ed101c2c8b2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Compare https://github.com/kubernetes/kubernetes/pull/54689#discussion_r149610738. In short: we implement multiple interface, but can only return one by interface in the constructor. Returning a private type is weird, super interface are broken in Golang. Broadly discussed in https://github.com/kubernetes/kubernetes/pull/54485.",
        "createdAt" : "2017-11-08T10:10:42Z",
        "updatedAt" : "2017-11-09T14:41:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9efab0eb28564e44b77fd06b59b5da426d82d05",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +59,63 @@\n// PodSecurityPolicyPlugin holds state for and implements the admission plugin.\ntype PodSecurityPolicyPlugin struct {\n\t*admission.Handler\n\tstrategyFactory  psp.StrategyFactory"
  },
  {
    "id" : "ab3202f5-397f-47e1-a558-0d6924cd05ba",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-64315751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6d71e19-1a97-449d-8255-94558b26311e",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Do we really need to hold an entire provider if we need only its name?",
        "createdAt" : "2017-09-21T14:57:37Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "a76cdb47-a050-4a5a-ad65-54f777ea6cf3",
        "parentId" : "d6d71e19-1a97-449d-8255-94558b26311e",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the goal was to keep the existing code intact and move it out of the loop",
        "createdAt" : "2017-09-21T15:01:09Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +174,178 @@\tvar (\n\t\tallowedPod       *api.Pod\n\t\tallowingProvider psp.Provider\n\t)\n"
  },
  {
    "id" : "28f7cdab-9a7b-4a25-ad36-44bf01d9952a",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-65013596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d23ab1c3-d600-4dec-bcef-d94653c72c0f",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "It should be possible to tell whether a PSP is mutating without applying it. Maybe add a TODO here to optimize that in the future? I would prefer it NOT to go into this PR though.",
        "createdAt" : "2017-09-25T19:40:47Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "3af25443-b2f8-468c-b48b-625e9ff633ed",
        "parentId" : "d23ab1c3-d600-4dec-bcef-d94653c72c0f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "definitely agree... started down that road with https://github.com/kubernetes/kubernetes/pull/50169 and it got... large. The preemptive copy here is less than ideal, but this was focused on the minimal change to get the external behavior we want",
        "createdAt" : "2017-09-25T19:47:11Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +194,198 @@\t\t\tallowingProvider = provider\n\t\t\tbreak loop\n\t\tcase specMutationAllowed && allowedPod == nil:\n\t\t\t// if mutation is allowed and this is the first PSP to allow the pod, remember it,\n\t\t\t// but continue to see if another PSP allows without mutating"
  },
  {
    "id" : "1d4a3728-a33b-484f-ab73-be4a535c3559",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-67526020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b29c5173-b677-4f44-ba6f-82f3eb18c498",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "/cc @caesarxuchao ",
        "createdAt" : "2017-10-05T21:55:39Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +167,171 @@\t}\n\n\t// TODO(liggitt): allow spec mutation during initializing updates?\n\tspecMutationAllowed := a.GetOperation() == admission.Create\n"
  },
  {
    "id" : "8a3010f3-d64e-4e40-9147-74437815211e",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-67820810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c02f5e7c-cc02-4ef8-837d-83c39e2c9e37",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "As long as you're doing the copying here, you might as well remove the copying logic from `assignSecurityContext` (it does a bunch of stuff to make sure it doesn't modify the pod if it's invalid).",
        "createdAt" : "2017-10-05T22:06:53Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a571e10a-86a9-44cf-935c-3d99f5886acc",
        "parentId" : "c02f5e7c-cc02-4ef8-837d-83c39e2c9e37",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "done (which greatly simplified that function), and added *lots* of tests to make sure pods that pass validation as-is are not mutated by the top-level Admit() call",
        "createdAt" : "2017-10-07T01:08:25Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +179,183 @@loop:\n\tfor _, provider := range providers {\n\t\tpodCopy := pod.DeepCopy()\n\n\t\tif errs := assignSecurityContext(provider, podCopy, field.NewPath(fmt.Sprintf(\"provider %s: \", provider.GetPSPName()))); len(errs) > 0 {"
  },
  {
    "id" : "ba2e7515-1342-43ca-8c80-b7319225cfee",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-67820865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e305000-fc21-4ea7-b1cb-ddfda90c1c52",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This might be a premature optimization, but you can skip this check if `len(providers) == 1`",
        "createdAt" : "2017-10-05T22:08:32Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "aeaf3076-92a3-45cd-a07f-8f974ce14820",
        "parentId" : "9e305000-fc21-4ea7-b1cb-ddfda90c1c52",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "only if `specMutationAllowed` is true... I'd rather keep this straightforward and deal with optimizations when we profile where the hotspots are",
        "createdAt" : "2017-10-07T01:09:48Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +189,193 @@\n\t\tswitch {\n\t\tcase apiequality.Semantic.DeepEqual(pod, podCopy):\n\t\t\t// if it validated without mutating anything, use this result\n\t\t\tallowedPod = podCopy"
  },
  {
    "id" : "f3b1d434-bbf3-4abc-a587-a9349cfe6554",
    "prId" : 52849,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52849#pullrequestreview-69355625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35ef60fd-83ed-49c6-8e20-a55f51626078",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "(aside) What is the purpose of this annotation? Specifically, what is the desired behavior on updates?",
        "createdAt" : "2017-10-13T19:30:44Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "a84a2f59-d1c7-435d-8509-dd87cd7d1cc0",
        "parentId" : "35ef60fd-83ed-49c6-8e20-a55f51626078",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "purely informational, to surface which PSP the most recent mutation was allowed under",
        "createdAt" : "2017-10-13T20:15:59Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce99acc1-fb68-4dd2-b38c-7ebd40625d1a",
        "parentId" : "35ef60fd-83ed-49c6-8e20-a55f51626078",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "> ... most recent mutation was allowed under\r\n\r\nIn that case, should we not set this if `!specMutationAllowed`?",
        "createdAt" : "2017-10-13T20:32:30Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "5be87a75-815b-4b81-ae84-7ca6146196a2",
        "parentId" : "35ef60fd-83ed-49c6-8e20-a55f51626078",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`specMutationAllowed` just means the *PSP* is not allowed to change the spec (other things can, changing `image`, for example). It's still processing a pod Update, so I'd expect it to record which PSP allowed the update.",
        "createdAt" : "2017-10-13T21:31:34Z",
        "updatedAt" : "2017-10-16T06:22:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c5b01376a4967dcda3650517bfa058fd26db8f5",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +212,216 @@\t\t\tpod.ObjectMeta.Annotations = map[string]string{}\n\t\t}\n\t\tpod.ObjectMeta.Annotations[psputil.ValidatedPSPAnnotation] = allowingProvider.GetPSPName()\n\t\treturn nil\n\t}"
  },
  {
    "id" : "a403f8fc-e284-4859-bc05-3d2bdadf0f99",
    "prId" : 33080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33080#pullrequestreview-6883718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bba0342-06ec-492f-9f60-1d1083ef9450",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "user info is nil when you hit the API via the unsecured port (no auth filter populates user info). would you expect that to return unauthorized for everything or authorized for everything?\n",
        "createdAt" : "2016-10-19T19:21:59Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6e136b63-109b-49fb-be33-975472a0ee96",
        "parentId" : "1bba0342-06ec-492f-9f60-1d1083ef9450",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "I would expect it to return unauthorized if the PSP plugin was enabled.  Other opinions?\n",
        "createdAt" : "2016-10-20T12:43:56Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "d8c81c23-854f-42b3-a69d-97e8766b9115",
        "parentId" : "1bba0342-06ec-492f-9f60-1d1083ef9450",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that means that if there were PSPs present, no one could create pods against the unsecured port, which seems wrong\n",
        "createdAt" : "2016-10-20T13:12:28Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3e383415-5cd7-4328-9657-d47f6c8d10b2",
        "parentId" : "1bba0342-06ec-492f-9f60-1d1083ef9450",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "changed to return true\n",
        "createdAt" : "2016-11-02T18:43:38Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe9c8f96da790441c6969eabb256492e482ec57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +329,333 @@\t// if no info exists then the API is being hit via the unsecured port.  In this case\n\t// authorize the request.\n\tif info == nil {\n\t\treturn true\n\t}"
  },
  {
    "id" : "cc3cfa9d-db02-4037-bdf2-1d8e1284767e",
    "prId" : 33080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33080#pullrequestreview-7052923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8421bb-fa8c-46e2-a470-31a1dec27411",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "now that user factors into which policies are allowed, a different set could be selected on update than on create. on update, PSPs cannot mutate the pod spec, they simply need to pass/fail the pod as-is. that means splitting the selection/defaulting/validation steps, and skipping the defaulting step on update. can be a follow up, but needs to be done.\n",
        "createdAt" : "2016-10-19T19:31:29Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "237b7377-d54b-4d16-a5a2-4fdb94973e88",
        "parentId" : "fe8421bb-fa8c-46e2-a470-31a1dec27411",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "be sure to open the follow-up issue to track\n",
        "createdAt" : "2016-11-03T16:53:45Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe9c8f96da790441c6969eabb256492e482ec57",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +317,321 @@\t\t}\n\n\t\tif authorizedForPolicy(user, constraint, authz) || authorizedForPolicy(sa, constraint, authz) {\n\t\t\tmatchedPolicies = append(matchedPolicies, constraint)\n\t\t}"
  },
  {
    "id" : "f98ea1df-e865-412b-bd57-06a28fcdfc69",
    "prId" : 33080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33080#pullrequestreview-7076584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cadfe2d-3cf8-439c-a199-ebebbc092a7e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "TODO or follow-up issue to consider check against the namespace where the pod is being created/updated\n",
        "createdAt" : "2016-11-03T16:55:43Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f178b62b-af6f-4824-bf81-f0bff384b29b",
        "parentId" : "6cadfe2d-3cf8-439c-a199-ebebbc092a7e",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "Added in TODO above the struct here (341)\n",
        "createdAt" : "2016-11-03T18:42:20Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe9c8f96da790441c6969eabb256492e482ec57",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +345,349 @@\t\tVerb:            \"use\",\n\t\tName:            policy.Name,\n\t\tAPIGroup:        extensions.GroupName,\n\t\tResource:        \"podsecuritypolicies\",\n\t\tResourceRequest: true,"
  },
  {
    "id" : "6ec28f9f-0570-452a-9e7c-ace230f24cc5",
    "prId" : 33080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33080#pullrequestreview-7053763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddc95989-7fdc-4871-b1e3-2d4dc40e9dff",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this seems likely to be a hot spot if there are more than a few PSPs. We'll want to scale test here before this feature can graduate\n",
        "createdAt" : "2016-11-03T16:57:31Z",
        "updatedAt" : "2016-11-08T13:36:44Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbe9c8f96da790441c6969eabb256492e482ec57",
    "line" : null,
    "diffHunk" : "@@ -1,1 +311,315 @@\tmatchedPolicies := make([]*extensions.PodSecurityPolicy, 0)\n\n\tfor _, c := range store.List() {\n\t\tconstraint, ok := c.(*extensions.PodSecurityPolicy)\n\t\tif !ok {"
  },
  {
    "id" : "55621b57-fb9e-41e5-866a-58fa506ad0ee",
    "prId" : 24600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "454f2f4e-35b0-4ec4-a203-219692fd10ff",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "How do we bootstrap a cluster if there are no PSPs initially?  Does that mean all pods are rejected?  Or does an admin need a hardcoded override?  Or should lack of any PSP be interpreted as no PSP required.  How does this work on OS and how do you see it working here?  \n",
        "createdAt" : "2016-05-02T15:01:44Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "f360a162-510d-4c17-93dd-5b7d580982db",
        "parentId" : "454f2f4e-35b0-4ec4-a203-219692fd10ff",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "In OpenShift we bootstrap infrastructure policies on cluster start and also provide reconciliation commands that can be used during the upgrade process.  This is how our default policies and grants are created.  \n\nHere, we can either choose to add a bootstrapping process or make the assumption that if no policies exist that none will be enforced which is backwards compatible. @smarterclayton WDYT?\n",
        "createdAt" : "2016-05-02T15:07:42Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "ce0ac76e-bbf2-4747-b090-e42708cccc46",
        "parentId" : "454f2f4e-35b0-4ec4-a203-219692fd10ff",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "I went ahead and made this a configuration option for the plugin since there was no decision.\n",
        "createdAt" : "2016-05-06T00:19:08Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      },
      {
        "id" : "59722235-a7a6-41ff-b3e0-3eb884fc34e9",
        "parentId" : "454f2f4e-35b0-4ec4-a203-219692fd10ff",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "That seems fine.\n",
        "createdAt" : "2016-05-06T20:01:42Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c8a1f66c14a2cb2223d5ab12340fa4b2d88f95",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +119,123 @@// 3.  Try to generate and validate a PSP with providers.  If we find one then admit the pod\n//     with the validated PSP.  If we don't find any reject the pod and give all errors from the\n//     failed attempts.\nfunc (c *podSecurityPolicyPlugin) Admit(a admission.Attributes) error {\n\tif a.GetResource().GroupResource() != api.Resource(\"pods\") {"
  },
  {
    "id" : "1d1e3b78-9339-4679-b857-ccc45545f47b",
    "prId" : 24600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ea4b81e-9ffe-4de3-89f3-172f5e3df960",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is this annotation purely informative?  Or does the security model in OS rely on is particular annotation not being modifiable by normal users?\n",
        "createdAt" : "2016-05-02T15:04:03Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "4438e4ed-218c-45d9-b256-e310f1f2f525",
        "parentId" : "9ea4b81e-9ffe-4de3-89f3-172f5e3df960",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "purely informative so that you can tell at runtime which PSP allowed the pod\n",
        "createdAt" : "2016-05-02T15:04:33Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c8a1f66c14a2cb2223d5ab12340fa4b2d88f95",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +173,177 @@\t\t\tpod.ObjectMeta.Annotations = map[string]string{}\n\t\t}\n\t\tpod.ObjectMeta.Annotations[psputil.ValidatedPSPAnnotation] = provider.GetPSPName()\n\t\treturn nil\n\t}"
  },
  {
    "id" : "0c536234-11a3-4d28-bb6d-8204fcc462fa",
    "prId" : 24600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba31782e-a2e6-48fa-b4b2-81fee37aa3e1",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I take it there would be more state in here in OS, for example if you are allocating uids or gids from a pool?\n",
        "createdAt" : "2016-05-02T15:25:37Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "5b276851-c3db-44e9-888c-273c3caf2801",
        "parentId" : "ba31782e-a2e6-48fa-b4b2-81fee37aa3e1",
        "authorId" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "body" : "No, we don't have more state here.  We have an allocation controller that allocates uids and guids from a pool and annotates the namespace with the values.  At runtime we look for special strategy conditions that indicate it needs pre-allocated values (\"RunAsRange\" but has no values set in the options).  If we find this we check the namespace for pre-allocated values and populate the strategy.  If we don't have pre-allocated values the strategy is invalid and will fail create.\n",
        "createdAt" : "2016-05-02T15:37:52Z",
        "updatedAt" : "2016-05-11T22:07:47Z",
        "lastEditedBy" : "fb0525d4-54d0-4bfa-8b41-17f8b31b43fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "65c8a1f66c14a2cb2223d5ab12340fa4b2d88f95",
    "line" : null,
    "diffHunk" : "@@ -1,1 +65,69 @@\treflector *cache.Reflector\n\tstopChan  chan struct{}\n\tstore     cache.Store\n}\n"
  }
]