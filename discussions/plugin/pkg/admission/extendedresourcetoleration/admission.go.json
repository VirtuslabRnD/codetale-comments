[
  {
    "id" : "8a7a2521-c0aa-414b-98b7-848e8a6f9b23",
    "prId" : 55839,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55839#pullrequestreview-77892567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa03cbd0-b20a-45a9-ac31-330d019dcad5",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The result is that such pods can be scheduled to nodes with the \"example.com/device\" taint, right? Consider adding that in the comment and please also add this plugin to the [doc](https://github.com/kubernetes/website/blob/master/docs/admin/admission-controllers.md#what-does-each-plug-in-do).",
        "createdAt" : "2017-11-20T18:46:36Z",
        "updatedAt" : "2017-11-20T18:50:10Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "760e4ed8-3410-45a7-9fb5-0a46f937af6c",
        "parentId" : "aa03cbd0-b20a-45a9-ac31-330d019dcad5",
        "authorId" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "body" : "Yes. I will send another PR with the comment fix. And another one to update the public documentation. ",
        "createdAt" : "2017-11-20T18:54:49Z",
        "updatedAt" : "2017-11-20T18:54:49Z",
        "lastEditedBy" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "tags" : [
        ]
      },
      {
        "id" : "e48a269b-01af-4b50-a984-d785fb62b8a4",
        "parentId" : "aa03cbd0-b20a-45a9-ac31-330d019dcad5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "are arbitrary resources allowed? does this give pod authors a way to cause arbitrary taints to be added? I expected a specific prefix/namespace to ensure resource-specific taints were tolerated, not arbitrary taints",
        "createdAt" : "2017-11-20T18:56:22Z",
        "updatedAt" : "2017-11-20T18:56:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c20982d8-688b-4d04-80a3-937e261ea75e",
        "parentId" : "aa03cbd0-b20a-45a9-ac31-330d019dcad5",
        "authorId" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "body" : "It only adds tolerations for the resource you requested and that resource cannot be in `kubernetes.io` namespace.\r\n\r\nNow you can request an arbitrary string as the resource (and then this will add that arbitrary string as the toleration) but then your pod will not get scheduled because that arbitrary string doesn't exist as a resource. And if the arbitrary string exists as a resource, we do want this admission controller to add that as a toleration.",
        "createdAt" : "2017-11-20T19:12:43Z",
        "updatedAt" : "2017-11-20T19:12:43Z",
        "lastEditedBy" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "tags" : [
        ]
      },
      {
        "id" : "b0e3b291-309d-42cd-8210-e4c9c0289180",
        "parentId" : "aa03cbd0-b20a-45a9-ac31-330d019dcad5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Now you can request an arbitrary string as the resource (and then this will add that arbitrary string as the toleration) but then your pod will not get scheduled because that arbitrary string doesn't exist as a resource.\r\n\r\nThinking through this some more:\r\n1. by default, users can already add arbitrary tolerations to their pod specs\r\n2. any cluster using taints/tolerations as a security measure to keep user pods off specific nodes already has to use something like PodTolerationRestriction to whitelist the tolerations a pod is allowed to have\r\n3. that whitelist would give control over allowing custom-resource tolerations while disallowing arbitrary security-related tolerations\r\n\r\nSo I think this still works as is",
        "createdAt" : "2017-11-20T19:18:25Z",
        "updatedAt" : "2017-11-20T19:18:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c4c85f2125144bf8a20677afee1e14ed528b26c",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@// Admit updates the toleration of a pod based on the resources requested by it.\n// If an extended resource of name \"example.com/device\" is requested, it adds\n// a toleration with key \"example.com/device\", operator \"Exists\" and effect \"NoSchedule\".\n// The rationale for this is described in:\n// https://github.com/kubernetes/kubernetes/issues/55080"
  },
  {
    "id" : "9cd0bde2-db4e-462b-afef-09a40aa07743",
    "prId" : 55839,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55839#pullrequestreview-77891771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fd4b02f-e8c0-44fb-af75-25ec96d74c1c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@mindprince, regarding @liggitt's question, this line ensures that the `resourceName` (and the toleration key) has a `\"kubernetes.io/\"` or a `\"pod.alpha.kubernetes.io/opaque-int-resource-\"` prefix. The `\"pod.alpha.kubernetes.io/opaque-int-resource-\"` prefix seems strong enough. But the `\"kubernetes.io/\"` seems very generic, will it collide with other taint key name?",
        "createdAt" : "2017-11-20T19:05:40Z",
        "updatedAt" : "2017-11-20T19:05:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "53f54c6f-0e9e-4db9-92d9-a36a97f6ed70",
        "parentId" : "9fd4b02f-e8c0-44fb-af75-25ec96d74c1c",
        "authorId" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "body" : "It ensures the opposite. It ensures that the resource name doesn't have `kubernetes.io` as the prefix.",
        "createdAt" : "2017-11-20T19:13:46Z",
        "updatedAt" : "2017-11-20T19:13:46Z",
        "lastEditedBy" : "87a378b9-1941-4a57-a346-cf12dbb73416",
        "tags" : [
        ]
      },
      {
        "id" : "bd69ec4f-bc10-4ce7-a449-870322278fc7",
        "parentId" : "9fd4b02f-e8c0-44fb-af75-25ec96d74c1c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Right. I missed the `!`.",
        "createdAt" : "2017-11-20T19:15:35Z",
        "updatedAt" : "2017-11-20T19:15:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c4c85f2125144bf8a20677afee1e14ed528b26c",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\tfor _, container := range pod.Spec.Containers {\n\t\tfor resourceName := range container.Resources.Requests {\n\t\t\tif helper.IsExtendedResourceName(resourceName) {\n\t\t\t\tresources.Insert(string(resourceName))\n\t\t\t}"
  }
]