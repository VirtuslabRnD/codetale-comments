[
  {
    "id" : "3f9fcd46-4b41-4a34-bc90-482883b3f0ec",
    "prId" : 42245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42245#pullrequestreview-24392703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97da92e8-d392-4749-8290-39cce248dae6",
        "parentId" : null,
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "Would creating a `SelfSubjectAccessReview` for random namespaces leak information?",
        "createdAt" : "2017-02-28T23:07:04Z",
        "updatedAt" : "2017-02-28T23:07:04Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      },
      {
        "id" : "134459da-2914-4928-a5a4-b319c22ea5cb",
        "parentId" : "97da92e8-d392-4749-8290-39cce248dae6",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Would creating a SelfSubjectAccessReview for random namespaces leak information?\r\n\r\nThat's a cluster scoped resource.",
        "createdAt" : "2017-03-01T03:00:04Z",
        "updatedAt" : "2017-03-01T03:00:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bde5f800ad475dcd446f50d4760fed3b48e34c98",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +217,221 @@// resources because returning \"not found\" errors allows someone to search for the \"people I'm going to fire in 2017\" namespace.\nvar accessReviewResources = map[schema.GroupResource]bool{\n\tschema.GroupResource{Group: \"authorization.k8s.io\", Resource: \"localsubjectaccessreviews\"}: true,\n}\n"
  },
  {
    "id" : "92fb4d97-081b-4cb5-a577-2f29142dab79",
    "prId" : 41645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41645#pullrequestreview-23064154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d90fa17-2332-496f-98a8-9244d61ef400",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "nit: I personally prefer a switch, but if we wouldn't touch the pull otherwise I don't care enough to stop it.",
        "createdAt" : "2017-02-21T20:36:13Z",
        "updatedAt" : "2017-02-23T16:16:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "022bff7fbe08f65247da242834af5d899fc68011",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +115,119 @@\n\tnamespace, err := l.namespaceLister.Get(a.GetNamespace())\n\tif err != nil {\n\t\tif !errors.IsNotFound(err) {\n\t\t\treturn errors.NewInternalError(err)"
  },
  {
    "id" : "8bcaad52-76e4-4cd5-94bd-81dee04a1655",
    "prId" : 41645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41645#pullrequestreview-23064434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8dd564a-8123-4e1f-a832-ff7c0cc6b6db",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "interesting, you used a switch here.  Who commented, clayton?",
        "createdAt" : "2017-02-21T20:37:07Z",
        "updatedAt" : "2017-02-23T16:16:16Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "cd9150ad-ebf2-45aa-9fcf-62f674a2e655",
        "parentId" : "c8dd564a-8123-4e1f-a832-ff7c0cc6b6db",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yes",
        "createdAt" : "2017-02-21T20:37:18Z",
        "updatedAt" : "2017-02-23T16:16:16Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "022bff7fbe08f65247da242834af5d899fc68011",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +152,156 @@\t\t// as a last resort, make a call directly to storage\n\t\tnamespace, err = l.client.Core().Namespaces().Get(a.GetNamespace(), metav1.GetOptions{})\n\t\tswitch {\n\t\tcase errors.IsNotFound(err):\n\t\t\treturn err"
  },
  {
    "id" : "a73b03b5-fb61-4d30-91fb-dc4d7e7d629f",
    "prId" : 32719,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32719#pullrequestreview-565827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "108069eb-2072-430b-9004-3dc683bf704f",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nit: there is a case 3 which is non-HA, namespace is marked for deletion, and the admission controller local cache is purged.  the next attempt to create a resource in that namespace will wait as well and reduce our flakiness in e2e tests.\n",
        "createdAt" : "2016-09-19T14:52:10Z",
        "updatedAt" : "2016-09-21T04:27:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b569eeea041e279a337eb91625e5d5dea362608",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +43,47 @@\t// this accomplishes two things:\n\t// 1. It allows a watch-fed cache time to observe a namespace creation event\n\t// 2. It allows time for a namespace creation to distribute to members of a storage cluster,\n\t//    so the live lookup has a better chance of succeeding even if it isn't performed against the leader.\n\tmissingNamespaceWait = 50 * time.Millisecond"
  },
  {
    "id" : "078a9888-ce7e-4cd5-b8e5-458d73a85455",
    "prId" : 29926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You sure you want to use an LRU instead of a layer that marks the deletion alongside a resourceversion and uses a versionercomparator to know when it expires?  This is vulnerable to mass deletion paging you out against a stale cache.\n",
        "createdAt" : "2016-08-02T17:45:20Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5dcd3343-e096-4cf2-a209-72f545195fa8",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Ideally, I would like a layer, but thought that was a good follow-up with what @hodovska is doing.\n\nIn this case, I was less concerned about resource version comparison since all I really care about is that the version in my local cache is now in terminating phase which is the check we have later in this file.  Good point on the mass deletion paging out the LRU.  Not sure how concerned I am on that scenario if we will swap out with the layered store.\n",
        "createdAt" : "2016-08-02T18:06:58Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "42fa4d2d-940a-4720-bd9c-1a2f2771ede8",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "https://github.com/kubernetes/kubernetes/pull/22951\n\nthe history of the original behavior to modify the underlying store was done in the earlier PR to address flakes with single API server.  It's understood that absent this change, in HA environments, there is still a race potential where API server 1 rejects a request (updated cache), and API server 2 accepts a request (stale cache), and the current background controller will hopefully observe and delete the late added resources as part of namespace clean-up. \n\nso given the original scope of the intended fix, I think a limited size LRU is hopefully sufficient.\n",
        "createdAt" : "2016-08-03T17:43:23Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "445d694d-a0ea-42ee-9ca7-eac86a17af4a",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This is a `deletedNamespaceCache` that you're using to make a livelookup choice.  Perhaps a rename?\n",
        "createdAt" : "2016-08-03T20:11:03Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "470fa195-beef-4c08-b867-c2d3e8402f6f",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It's not necessary deleted.  It could either be terminating or deleted.  I think I will just keep force live lookups for now.\n",
        "createdAt" : "2016-08-04T14:25:40Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "04177d78-facd-42da-a1cd-afe68b0af5d1",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It's not necessary deleted. It could either be terminating or deleted. I think I will just keep force live lookups for now.\n\nSomehow I've missed that.  It looked like you only called `.Add` during a Delete.  can you link me to where else you're adding it?\n",
        "createdAt" : "2016-08-04T14:28:15Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "aab2e290-8d9a-4548-b5ac-970fd427aed9",
        "parentId" : "c386a6b9-ecf3-4d4b-9bbd-955213feb2f8",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "it takes two calls to delete a namespace.  delete 1 -> active to terminating, delete 2 -> gone from store.  my point being that after the first delete, its not gone, just terminating.\n",
        "createdAt" : "2016-08-04T14:36:06Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37a813dff84aaca32414e42e538ee085527c57",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +56,60 @@\t// forceLiveLookupCache holds a list of entries for namespaces that we have a strong reason to believe are stale in our local cache.\n\t// if a namespace is in this cache, then we will ignore our local state and always fetch latest from api server.\n\tforceLiveLookupCache *lru.Cache\n}\n"
  },
  {
    "id" : "c84ed3d5-0ae5-4c61-92ed-e1063e4d3508",
    "prId" : 29926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19e9182e-b7f0-4550-8344-77636e72079f",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "the error only happens if you pass a value less than 1.  You can safely panic on the err instead.\n",
        "createdAt" : "2016-08-03T20:07:24Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "fa8f03bd-59f2-4223-a937-9a416432c3c6",
        "parentId" : "19e9182e-b7f0-4550-8344-77636e72079f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "done\n",
        "createdAt" : "2016-08-04T14:25:54Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37a813dff84aaca32414e42e538ee085527c57",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +150,154 @@// NewLifecycle creates a new namespace lifecycle admission control handler\nfunc NewLifecycle(c clientset.Interface, immortalNamespaces sets.String) (admission.Interface, error) {\n\tforceLiveLookupCache, err := lru.New(100)\n\tif err != nil {\n\t\tpanic(err)"
  },
  {
    "id" : "485cd339-e38f-42ae-a20f-98fae637244e",
    "prId" : 29926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c2592c4-805a-4a33-8fd1-508c8e701a9a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You should be able to get this more cleanly from the `Lister()` available in the `InformerFactory`.\n",
        "createdAt" : "2016-08-03T20:10:12Z",
        "updatedAt" : "2016-08-04T15:01:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37a813dff84aaca32414e42e538ee085527c57",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +109,113 @@\n\tkey := makeNamespaceKey(a.GetNamespace())\n\tnamespaceObj, exists, err = l.namespaceInformer.GetStore().Get(key)\n\tif err != nil {\n\t\treturn errors.NewInternalError(err)"
  },
  {
    "id" : "cfbe08e4-44f3-4561-ab38-5e54fd7a10b1",
    "prId" : 29926,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b92adc98-2e7f-447a-a105-10742e92ef3c",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This function never returns an error.\n",
        "createdAt" : "2016-08-04T15:03:38Z",
        "updatedAt" : "2016-08-04T15:03:38Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c37a813dff84aaca32414e42e538ee085527c57",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +149,153 @@\n// NewLifecycle creates a new namespace lifecycle admission control handler\nfunc NewLifecycle(c clientset.Interface, immortalNamespaces sets.String) (admission.Interface, error) {\n\tforceLiveLookupCache, err := lru.New(100)\n\tif err != nil {"
  },
  {
    "id" : "e08c887d-68de-4dd6-81da-d571388fb8f9",
    "prId" : 14353,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42816475-4635-43a4-9dea-8bddd93a9acc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think we should do this, actually:\n\n```\n        namespaceObj, err = l.client.Namespaces().Get(a.GetNamespace())\n        if err != nil {\n            return admission.NewForbidden(a, err)\n        }\n```\n",
        "createdAt" : "2015-09-23T13:06:54Z",
        "updatedAt" : "2015-09-24T01:58:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f09e5b14-8ef4-4a6a-a1a2-a366a65f15ed",
        "parentId" : "42816475-4635-43a4-9dea-8bddd93a9acc",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that includes the details about what is being forbidden, but includes the error from the namespace\n",
        "createdAt" : "2015-09-23T13:07:17Z",
        "updatedAt" : "2015-09-24T01:58:01Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6faa591b-b2e2-40ef-80dd-ddbd82e0fa6d",
        "parentId" : "42816475-4635-43a4-9dea-8bddd93a9acc",
        "authorId" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "body" : "Do we need to change \"https://github.com/kubernetes/kubernetes/blob/master/plugin/pkg/admission/namespace/exists/admission.go#L79\" too?\n",
        "createdAt" : "2015-09-23T14:29:18Z",
        "updatedAt" : "2015-09-24T01:58:01Z",
        "lastEditedBy" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "tags" : [
        ]
      },
      {
        "id" : "1a977a6c-0c8c-4ca5-acbf-1168e0559276",
        "parentId" : "42816475-4635-43a4-9dea-8bddd93a9acc",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@brendandburns recently made a change to return a 404 when attempting to put something in a Namespace that does not exist.  I don't want to change that behavior to now return a Forbidden again.  I think the current code here is an improvement in that it tells you that the Namespace itself is not present.  The `NamespaceExists` plugin is deprecated but the same change should be made there.\n",
        "createdAt" : "2015-09-23T17:46:19Z",
        "updatedAt" : "2015-09-24T01:58:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "74ba88cb078594605163c59b84ec011e688c26c3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\tnamespaceObj, err = l.client.Namespaces().Get(a.GetNamespace())\n\t\tif err != nil {\n\t\t\tif errors.IsNotFound(err) {\n\t\t\t\treturn err\n\t\t\t}"
  },
  {
    "id" : "268be976-bd6e-4d82-8e25-f4dc644e3560",
    "prId" : 5288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dabea792-85d9-4099-bde7-560650016a0f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Forbidden seems reasonable.\n",
        "createdAt" : "2015-03-17T20:20:12Z",
        "updatedAt" : "2015-03-20T17:24:15Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "8aa807bc33352d8152e89a05f5877afdc6bbec6f",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@\t\tname, _ = meta.NewAccessor().Name(obj)\n\t}\n\treturn apierrors.NewForbidden(kind, name, fmt.Errorf(\"Namespace %s is terminating\", a.GetNamespace()))\n}\n"
  }
]