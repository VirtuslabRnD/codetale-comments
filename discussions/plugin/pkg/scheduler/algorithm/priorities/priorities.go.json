[
  {
    "id" : "3c3d27f7-487b-40fc-a417-a595ca10625e",
    "prId" : 30274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b081774-6bf7-4ecd-9173-28a962860e36",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Unless I'm missing something, this function is currently identical to calculateUnusedScore(). Shouldn't this function just be \"return 10-calculateUnusedScore())\" ?\n",
        "createdAt" : "2016-08-14T06:24:09Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "80acde68-e57b-41db-9882-c30cee53f946",
        "parentId" : "1b081774-6bf7-4ecd-9173-28a962860e36",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Rounding (as everything is in int) is slightly different. Thats why i added a separate function.\n",
        "createdAt" : "2016-08-16T09:42:02Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "bba497f2-752c-4aab-873f-9cfe1a3abb6b",
        "parentId" : "1b081774-6bf7-4ecd-9173-28a962860e36",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I don't understand. This function appears to be exactly identical, character for character, to calculateUnusedScore(), except for the function name.. Am I missing something? I don't understand why you needed this change.\n",
        "createdAt" : "2016-08-17T09:27:30Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "ce03e33b-e071-428f-9691-d250c522e531",
        "parentId" : "1b081774-6bf7-4ecd-9173-28a962860e36",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Agree with David - the only difference is name of the function.\n",
        "createdAt" : "2016-08-17T11:48:39Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f896fa43-f22a-4bf4-af30-6f205e79f67f",
        "parentId" : "1b081774-6bf7-4ecd-9173-28a962860e36",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "I must have not saved the files and pushed some half-baked vesion. The corresponding test by accident didn't have Test in the function name so everything went fine. Sorry for confusion.\n",
        "createdAt" : "2016-08-17T17:49:25Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "de2fea95ca6923f70973ba65e76f12ad86b8b72c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@// final formula clean and not to modify the widely used (by users\n// in their default scheduling policies) calculateUSedScore.\nfunc calculateUsedScore(requested int64, capacity int64, node string) int64 {\n\tif capacity == 0 {\n\t\treturn 0"
  },
  {
    "id" : "72096d19-04b3-423f-8324-1743cfa9137a",
    "prId" : 30274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Could this function just call calculateUnusedPriority(), and then replace each priority score X with 10-X and re-sort (so they end up in the opposite order as returned from calculateUnusedPriority())? (And then you don't even need calculateUsedScore())\n",
        "createdAt" : "2016-08-14T06:24:35Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "32ed8a83-44d9-4d96-9be3-f73ef64d79bc",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Yes, if we agree for for different rounding.\n",
        "createdAt" : "2016-08-16T09:42:45Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "302b1f3b-fb9f-4024-8e8e-d28dcfa301e6",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Can you give a simple example where the approach you're using here would give a different final sort order for the nodes, compared to just reversing the order given by calculateUnusedPriority()?\n",
        "createdAt" : "2016-08-16T22:32:52Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "918e2165-7aee-4cda-8dd6-0338aaa79b81",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : " 2 nodes with 16 cores. One is empty, the other one has 1 cpu requested.\n\nVersion A: 10-floor(10 \\* (16-0)/16) = 0 , 10-floor(10 \\* (16 - 1)/16) = 1\nVersion B: floor(10 \\* 0/16) = 0, floor(10 \\* 1/16) = 0\n\nSo the final ordering may be different. Sure we can reverse the least formula but the resulting formula would be unnecessary complicated.\n",
        "createdAt" : "2016-08-17T08:35:40Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "6bd98de9-4640-4f45-8fc2-ba6466f9ceaf",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Personally, I think I would prefer having as is now (i.e. having an explicit function instead of using the other one). Then the behavior of those two are symetric.\n",
        "createdAt" : "2016-08-17T11:52:06Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e2fbcb7c-c23e-4df4-ba3a-27aeba3da29a",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "That's fine, but @mwielgus can you please add a comment to this function (calculateUsedPriority()), or to the place where you call this function from MostRequestedPriority() explaining why you do not just used LeastRequestedPriority/calculateUnusedPriority and reverse the sort order.\n",
        "createdAt" : "2016-08-17T19:32:22Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1e2e3248-13be-43fe-a41a-73fd2f015cf2",
        "parentId" : "8bc50c3d-6ce7-4e8c-8f71-aa325831bc93",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Done.\n",
        "createdAt" : "2016-08-18T05:40:54Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "de2fea95ca6923f70973ba65e76f12ad86b8b72c",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +107,111 @@// 'pods' is a list of pods currently scheduled on the node.\n// TODO: Use Node() from nodeInfo instead of passing it.\nfunc calculateUsedPriority(pod *api.Pod, podRequests *schedulercache.Resource, node *api.Node, nodeInfo *schedulercache.NodeInfo) schedulerapi.HostPriority {\n\tallocatableResources := nodeInfo.AllocatableResource()\n\ttotalResources := *podRequests"
  },
  {
    "id" : "a0b2fa49-cdbf-453f-a241-6584442cdca3",
    "prId" : 29261,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ef7c2bf-e2af-45bd-ba51-7d24d873c2d3",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "why ignore the error?\n",
        "createdAt" : "2016-07-20T21:06:44Z",
        "updatedAt" : "2016-07-21T06:21:20Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "c1aaade5-02bb-457d-bcc3-7a0f955d5134",
        "parentId" : "8ef7c2bf-e2af-45bd-ba51-7d24d873c2d3",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This was also ignored before (but not explicitly).\n\nAnyway - error from GetPodControllers() in most cases mean that there is no controller for a give pod (which basically is not even a real error). The interface of ReplicationControllerToStoreLister is misleading in my opinion and once OwnerRef is finished we will be able to get rid of that hopefullly. (I already have a different PR in my local branch that is changing it, so that's mostly temporary anyway).\n",
        "createdAt" : "2016-07-21T05:57:09Z",
        "updatedAt" : "2016-07-21T06:21:20Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc6d38baa2a0739f43af1d4284bfd31c430dc44c",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +276,280 @@func (npa *NodePreferAvoidPod) CalculateNodePreferAvoidPodsPriority(pod *api.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo, nodes []*api.Node) (schedulerapi.HostPriorityList, error) {\n\t// TODO: Once we have ownerReference fully implemented, use it to find controller for the pod.\n\trcs, _ := npa.controllerLister.GetPodControllers(pod)\n\trss, _ := npa.replicaSetLister.GetPodReplicaSets(pod)\n\tif len(rcs) == 0 && len(rss) == 0 {"
  },
  {
    "id" : "703bfbb8-7156-4119-9aaa-b5ab162a13ee",
    "prId" : 28836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57b05c0e-2b17-4ac6-8026-fa07220bdfe8",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "just out of curiosity, how much perf gain we can get from this?\n",
        "createdAt" : "2016-07-12T13:38:17Z",
        "updatedAt" : "2016-07-13T09:02:36Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "543d42ec-bb9e-4bf0-a699-98935b7f1726",
        "parentId" : "57b05c0e-2b17-4ac6-8026-fa07220bdfe8",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It depends on logs. In this particular case not much, but if e.g. glog contains a conversion, or e.g. is calling podName() in predicates, the it could eat even 1-2% of the whole cpu profile (if those are logged frequently).\n",
        "createdAt" : "2016-07-12T13:40:39Z",
        "updatedAt" : "2016-07-13T09:02:36Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea1d797f9813f2c5fa8103a6a9804627d41189df",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +72,76 @@\tcpuScore := calculateScore(totalResources.millicpu, capacityMilliCPU, node.Name)\n\tmemoryScore := calculateScore(totalResources.memory, capacityMemory, node.Name)\n\tif glog.V(10) {\n\t\t// We explicitly don't do glog.V(10).Infof() to avoid computing all the parameters if this is\n\t\t// not logged. There is visible performance gain from it."
  },
  {
    "id" : "33e663d4-7bd5-4446-9875-78a0c6ff11ff",
    "prId" : 20699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0d7a4a-47f0-4770-befe-3fc968dfe580",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "GetPodControllers() only gives you ReplicationControllers. You should also do GetPodReplicaSets() (see how this is done in CalculateSpreadPriority() in plugin/pkg/scheduler/algorithm/priorities/selector_spreading.go). Once we have controllerRef we can just use that, to find the pod's controller, so please also add\n\n// TODO: Once we have controllerRef, use it to find controller for the pod.\n",
        "createdAt" : "2016-04-24T21:22:55Z",
        "updatedAt" : "2016-07-13T09:13:25Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e91166bc62f2b346eaf394345503caeb62a1fc0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +302,306 @@\n\t// TODO: Once we have ownerReference fully implemented, use it to find controller for the pod.\n\trcs, err := npa.controllerLister.GetPodControllers(pod)\n\trss, err := npa.replicaSetLister.GetPodReplicaSets(pod)\n\tif len(rcs) == 0 && len(rss) == 0 {"
  },
  {
    "id" : "27ff5aa4-007e-4eab-8e1f-a19b8ac7b54f",
    "prId" : 20699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11fb76b8-658d-4054-996a-7af86683b57e",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "this only breaks from the \"range rcs\" loop but you also want to break from the \"range avoid.PreferAvoidPods\" loop\n",
        "createdAt" : "2016-04-24T21:23:43Z",
        "updatedAt" : "2016-07-13T09:13:25Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e91166bc62f2b346eaf394345503caeb62a1fc0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +324,328 @@\t\t\t\tif avoid.PodSignature.PodController.Kind == \"ReplicationController\" && avoid.PodSignature.PodController.UID == rc.UID {\n\t\t\t\t\tavoidNodes[node.Name] = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}"
  },
  {
    "id" : "2770bad0-a016-4567-b888-3c878aff5ac6",
    "prId" : 20699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cad756d1-51a0-4a18-9f2b-7bb21a1dad47",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "score is supposed to be 1 to 10 but in this case I think 0 is fine. I'll add to #24720 that we should make score be an abstract datatype so we can make sure it is used correctly. \n",
        "createdAt" : "2016-04-24T21:24:28Z",
        "updatedAt" : "2016-07-13T09:13:25Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e91166bc62f2b346eaf394345503caeb62a1fc0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +342,346 @@\t}\n\n\t//score int - scale of 0-10\n\t// 0 being the lowest priority and 10 being the highest\n\tfor nodeName, shouldAvoid := range avoidNodes {"
  },
  {
    "id" : "7b71c82d-28fe-426d-b737-b0c9905df876",
    "prId" : 20699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b254200-11f8-4203-8306-ea0c75843a3a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@davidopp @jiangyaoguo - do we know the preformance impact of it? Since you are switching it on by default, it would be good to know...\n",
        "createdAt" : "2016-07-13T11:36:30Z",
        "updatedAt" : "2016-07-13T11:36:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e7eab25c-9dcb-4859-ab6b-cba64d8bcef5",
        "parentId" : "3b254200-11f8-4203-8306-ea0c75843a3a",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "No, we haven't tested performance impact. What would you think of the following:\n\n1) for now, at the beginning of the function put a loop over all nodes, that checks to see if\n\n```\napi.GetAvoidPodsFromNodeAnnotations(node.Annotations)\n```\n\nhas a value for any of the nodes. If it is not set for any nodes, the function immediately returns a HostPiorityList with all nodes having same priority. This way the significant performance impact only happens if you actually use the feature, and we can warn users about it.\n\n2) hopefully ownerReference will be implemented for ReplicaSet and ReplicationController by the time of code freeze for 1.4 (RC is already in the final stages of review, will merge very soon), and then we can use it instead of using `rcs, err := npa.controllerLister.GetPodControllers(pod)` (and similar one for ReplicaSets).\n\nDoes that sound reasonable?\n",
        "createdAt" : "2016-07-13T22:26:44Z",
        "updatedAt" : "2016-07-13T22:26:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "59e6342e-3dab-463d-9a37-f75adc6b40ff",
        "parentId" : "3b254200-11f8-4203-8306-ea0c75843a3a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So let's do this way:\n1) let's merge as it is now (basically in selector spreading we are still calling all the functions that we have here, so it shouldn't be worse)\n2) Once this is merged, I will do a pass over it and fix some issues that I already fixed for other priorities/predicates\n3) once ControllerRef is ready, I will switch to that (together with selector_spreading)\n\n[Generally, the asymptotical complexity of it is the same as selector spreading, We should probably solve both of them in the same way in the future.]\n",
        "createdAt" : "2016-07-14T06:44:12Z",
        "updatedAt" : "2016-07-14T06:44:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "1ec278d4-a9ad-4033-8cad-1f3e297ac992",
        "parentId" : "3b254200-11f8-4203-8306-ea0c75843a3a",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "SGTM. Thanks!\n",
        "createdAt" : "2016-07-14T06:47:44Z",
        "updatedAt" : "2016-07-14T06:47:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e91166bc62f2b346eaf394345503caeb62a1fc0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +292,296 @@}\n\nfunc (npa *NodePreferAvoidPod) CalculateNodePreferAvoidPodsPriority(pod *api.Pod, nodeNameToInfo map[string]*schedulercache.NodeInfo, nodeLister algorithm.NodeLister) (schedulerapi.HostPriorityList, error) {\n\tvar score int\n\tnodes, err := nodeLister.List()"
  },
  {
    "id" : "473a3b00-9a0e-478c-8f39-a79fb586aac8",
    "prId" : 20140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bccf0659-9bd2-4927-b066-3a781e33deae",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Should this return value be uint64? It can't be negative anyway.\n",
        "createdAt" : "2016-01-27T21:39:47Z",
        "updatedAt" : "2016-02-03T13:01:48Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "233a601130b4916e8febba147f622e49648718ee",
    "line" : null,
    "diffHunk" : "@@ -1,1 +211,215 @@\n// checkContainerImageOnNode checks if a container image is present on a node and returns its size.\nfunc checkContainerImageOnNode(node api.Node, container api.Container) int64 {\n\tfor _, image := range node.Status.Images {\n\t\tfor _, repoTag := range image.RepoTags {"
  },
  {
    "id" : "bd18a497-9fc7-443d-99aa-0f2436cf5c47",
    "prId" : 10857,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e33b7fb-1578-4ce0-b102-3e651c5771f2",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "nit: suggest a comment about how we set these defaults\n",
        "createdAt" : "2015-07-07T20:34:31Z",
        "updatedAt" : "2015-07-07T20:49:15Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "51989d0a-abdd-4d83-a9a8-f09606ed8227",
        "parentId" : "2e33b7fb-1578-4ce0-b102-3e651c5771f2",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Done.\n",
        "createdAt" : "2015-07-07T20:41:51Z",
        "updatedAt" : "2015-07-07T20:49:15Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bdf22e31211ceb80e4cef2ac02849e5ad03197aa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +50,54 @@// resources that we give to cluster addon pods (#10653). But they are pretty arbitrary.\nconst defaultMilliCpuLimit int64 = 100             // 0.1 core\nconst defaultMemoryLimit int64 = 200 * 1024 * 1024 // 200 MB\n\n// TODO: Consider setting default as a fixed fraction of machine capacity (take \"capacity api.ResourceList\""
  },
  {
    "id" : "0c1938a3-dcd5-4a53-a26a-8135c80a6f9b",
    "prId" : 10661,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e683ab45-efee-4560-9648-5faf070ec5de",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Optional nit:\n\nI'm not sure why these 2 loops are duplicated in this way, across both priority functions. A cleaner way to write this might be:\n\n``` go\nfunc getResourceRequest(pod *api.Pod) ResourceRequest {\n    totalMilliCPU := int64(0)\n    totalMemory := int64(0)\n    for _, container := range pod.Spec.Containers {\n        cpu, memory := toNonzeroLimits(&container.Resources.Limits)\n        totalMilliCPU += cpu\n        totalMemory += memory\n    }\n    return resourceRequest{totalMilliCPU, totalMemory}\n}\n\nAnd in each priority function:\n\n    totalMilliCPU := int64(0)\n    totalMemory := int64(0)\n    for _, p := range append([]*api.Pod{newPod}, pods...) {\n        request := getPodResourceRequest(p)\n        totalMilliCPU += request.CPU\n        totalMemory += request.Memory\n    }\n```\n\nEventually I'd like to use a single request manager submodule between the fitness predicates and priority functions such that they never need to dig into a pod and it's containers directly.\n",
        "createdAt" : "2015-07-05T21:53:30Z",
        "updatedAt" : "2015-07-06T04:32:38Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "85654ebc-2563-4d0d-9b43-5d8d6aad11c1",
        "parentId" : "e683ab45-efee-4560-9648-5faf070ec5de",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I agree but I'm a bit reluctant to make small changes like this when we really need to make larger changes after 1.0.\n",
        "createdAt" : "2015-07-05T22:42:12Z",
        "updatedAt" : "2015-07-06T04:32:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e3f2ea20bcca76cb37c95363aa597d6757aa543",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +78,82 @@\tcapacityMemory := node.Status.Capacity.Memory().Value()\n\n\tfor _, existingPod := range pods {\n\t\tfor _, container := range existingPod.Spec.Containers {\n\t\t\tcpu, memory := getNonzeroLimits(&container.Resources.Limits)"
  },
  {
    "id" : "b31e83f0-5292-41ee-993d-90b067a55141",
    "prId" : 10661,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cb6b7dd-85f0-401c-a0df-af8699fbd091",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'm not really sure how helpful this additional data info will be, as one will need to guess what resource it's about. In addition I'm not sure if plain Info won't spam normal logs - we'll probably get over capacity pretty often in case of 0-limit Pods.\n",
        "createdAt" : "2015-07-06T07:42:12Z",
        "updatedAt" : "2015-07-06T07:42:12Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e3f2ea20bcca76cb37c95363aa597d6757aa543",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +35,39 @@\t}\n\tif requested > capacity {\n\t\tglog.Infof(\"Combined requested resources %d from existing pods exceeds capacity %d on node %s\",\n\t\t\trequested, capacity, node)\n\t\treturn 0"
  }
]