[
  {
    "id" : "b4dcea7b-1c99-414d-ac9b-9ce850fffb29",
    "prId" : 57168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57168#pullrequestreview-84641123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edf6074b-fae2-40ff-817f-8919572fa240",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "TODO: We may need to work out some sorting mechanism in the future. So developers only need to register their predicate and it will be placed to right position. Then we don't need to maintain this hard coding list.",
        "createdAt" : "2017-12-20T00:42:47Z",
        "updatedAt" : "2017-12-20T13:21:52Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "ef051337-ed2b-4b42-8a7b-e169bea78c8f",
        "parentId" : "edf6074b-fae2-40ff-817f-8919572fa240",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I doubt if we can have an intelligent mechanism that orders predicates for us. We try to run faster, more restrictive predicates first, so that the overall execution time of the predicates drop.",
        "createdAt" : "2017-12-20T01:07:53Z",
        "updatedAt" : "2017-12-20T13:21:52Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "a4f9d201-b1c2-4eb5-a093-e5fff3843a1b",
        "parentId" : "edf6074b-fae2-40ff-817f-8919572fa240",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "I see, it's reasonable.",
        "createdAt" : "2017-12-20T01:19:19Z",
        "updatedAt" : "2017-12-20T13:21:52Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e62952d02ba115a31b215dcb29752310bec1fa5d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\tMaxAzureDiskVolumeCountPred, CheckVolumeBindingPred, NoVolumeZoneConflictPred,\n\t\tCheckNodeMemoryPressurePred, CheckNodeDiskPressurePred, MatchInterPodAffinityPred}\n)\n\n// NodeInfo: Other types for predicate functions..."
  },
  {
    "id" : "e1a1cdb1-45fc-4882-a01d-ff4e004feb47",
    "prId" : 53135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53135#pullrequestreview-68938221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7fd02b9-75ab-4193-b50a-31b631468e26",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Why not use an incrementing 64 bit counter here",
        "createdAt" : "2017-10-12T14:12:54Z",
        "updatedAt" : "2017-10-12T14:13:06Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2caae38d323720a96be34606589f41488ba82b87",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +219,223 @@\t\t\t// Until we know real ID of the volume use namespace/pvcName as substitute\n\t\t\t// With a random prefix so it can't conflict with existing volume ID.\n\t\t\tpvId := fmt.Sprintf(\"%s-%s/%s\", randomPrefix, namespace, pvcName)\n\n\t\t\tpvc, err := c.pvcInfo.GetPersistentVolumeClaimInfo(namespace, pvcName)"
  },
  {
    "id" : "dad52513-56e6-4d2e-a474-12797516bbc8",
    "prId" : 53135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53135#pullrequestreview-68942908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c1fe52-5f5a-4e3c-82d0-6191051b2a77",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also, this makes an expensive call even when it is not needed, right?",
        "createdAt" : "2017-10-12T14:25:53Z",
        "updatedAt" : "2017-10-12T14:25:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2caae38d323720a96be34606589f41488ba82b87",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +270,274 @@\t// stable in whole predicate() call so a deleted PVC used by two pods is\n\t// counted as one volume and not as two.\n\trandomPrefix := rand.String(32)\n\n\tnewVolumes := make(map[string]bool)"
  },
  {
    "id" : "46cc25f0-29a9-4772-93dc-e8458a078a39",
    "prId" : 52421,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52421#pullrequestreview-73044337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "I can not remember why we can not just delete the port from map, can you help to check it?",
        "createdAt" : "2017-10-16T08:42:52Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "bdaa7a9d-d53f-4e0d-8cdb-ffbe08f3cab5",
        "parentId" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "authorId" : "b208abb9-a197-491b-8925-71987861491b",
        "body" : "I don't quite sure about it either, you wrote it in https://github.com/kubernetes/kubernetes/pull/42524",
        "createdAt" : "2017-10-16T09:00:56Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "b208abb9-a197-491b-8925-71987861491b",
        "tags" : [
        ]
      },
      {
        "id" : "040add39-a479-4d29-95aa-dfa47d64fe19",
        "parentId" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "authorId" : "b208abb9-a197-491b-8925-71987861491b",
        "body" : "@k82cn I can open another pr to change the logic, I think delete the port from map is better",
        "createdAt" : "2017-10-17T04:21:19Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "b208abb9-a197-491b-8925-71987861491b",
        "tags" : [
        ]
      },
      {
        "id" : "176a7c02-fed3-46b3-8965-7b7665f62fc4",
        "parentId" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "that's ok to me.",
        "createdAt" : "2017-10-17T11:56:16Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "10a8e6a3-d3f7-4d27-b6ba-0c83259ed201",
        "parentId" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "authorId" : "b208abb9-a197-491b-8925-71987861491b",
        "body" : "ok",
        "createdAt" : "2017-10-18T01:44:00Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "b208abb9-a197-491b-8925-71987861491b",
        "tags" : [
        ]
      },
      {
        "id" : "718d2e9a-3387-4372-9bd9-d22a12adbb90",
        "parentId" : "8a4f7377-8e58-423f-9c78-aececf1b77af",
        "authorId" : "b208abb9-a197-491b-8925-71987861491b",
        "body" : "I think this problem is fixed by https://github.com/kubernetes/kubernetes/pull/54538, so no longer a problem",
        "createdAt" : "2017-10-31T03:05:09Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "b208abb9-a197-491b-8925-71987861491b",
        "tags" : [
        ]
      }
    ],
    "commit" : "954c97fe6dbbd786dd1e662758087dafe0103f68",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +902,906 @@\t}\n\n\texistingPorts := nodeInfo.UsedPorts()\n\n\t// try to see whether existingPorts and  wantPorts will conflict or not"
  },
  {
    "id" : "4d116b0f-85d6-449d-9320-db0457253a11",
    "prId" : 51783,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51783#pullrequestreview-60480260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adbe30b9-6fbd-4ac9-9d55-28cce39b617a",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Are you sure to remove parameter `maxVolumes int`? ",
        "createdAt" : "2017-09-05T01:31:11Z",
        "updatedAt" : "2017-10-26T04:11:54Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "968df828a00f76c5c8e77912b5a3a52dabc9ccca",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +220,224 @@// types, counts the number of unique volumes, and rejects the new pod if it would place the total count over\n// the maximum.\nfunc NewMaxPDVolumeCountPredicate(filterName string, pvInfo PersistentVolumeInfo, pvcInfo PersistentVolumeClaimInfo) algorithm.FitPredicate {\n\n\tvar filter VolumeFilter"
  },
  {
    "id" : "d5ce1be4-5511-41da-a41a-dfaebffeb5df",
    "prId" : 51783,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51783#pullrequestreview-60689049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e0afa46-8d38-4e10-842b-bb90e1509f4e",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "This may not what we expected. The maximum volumes here can only be set by `os.env`. This is not the k8s way. I think we'd keep the old configurable way. @bsalamat WDYT?",
        "createdAt" : "2017-09-05T01:34:41Z",
        "updatedAt" : "2017-10-26T04:11:54Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "a641c882-adab-4468-97f3-b1821ae07f67",
        "parentId" : "0e0afa46-8d38-4e10-842b-bb90e1509f4e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "@dixudx My understanding is that this function is moved from a different file, but it is still the same as it was before.",
        "createdAt" : "2017-09-05T17:54:12Z",
        "updatedAt" : "2017-10-26T04:11:54Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "968df828a00f76c5c8e77912b5a3a52dabc9ccca",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +254,258 @@\n// getMaxVols checks the max PD volumes environment variable, otherwise returning a default value\nfunc getMaxVols(defaultVal int) int {\n\tif rawMaxVols := os.Getenv(KubeMaxPDVols); rawMaxVols != \"\" {\n\t\tif parsedMaxVols, err := strconv.Atoi(rawMaxVols); err != nil {"
  },
  {
    "id" : "657e0d14-1006-49c4-ad71-7f6f712fd474",
    "prId" : 50949,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50949#pullrequestreview-60393312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5488e7da-985a-4380-9b96-a3f2ed960348",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think that this change should be moved to a separate PR.\r\nIf the preemption will contain serious bugs and we will have to revert it, we shouldn't be forced to also revert this cleanup.\r\nPlease move it to a separate PR.",
        "createdAt" : "2017-08-31T11:37:11Z",
        "updatedAt" : "2017-09-07T22:32:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "f70c6c43-5372-402a-8344-794f65b48fd3",
        "parentId" : "5488e7da-985a-4380-9b96-a3f2ed960348",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I agree, but given that this PR needs the change and we are one day away from the code freeze, I think I will have to keep it here. Besides, it is small and won't be hard to redo in case of a revert.",
        "createdAt" : "2017-08-31T18:36:21Z",
        "updatedAt" : "2017-09-07T22:32:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "15e87207-1a7d-42ef-9b9a-604ca2a38a2b",
        "parentId" : "5488e7da-985a-4380-9b96-a3f2ed960348",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It isn't small - it's almost 200 lines. I still think we should separate it.",
        "createdAt" : "2017-09-01T12:25:26Z",
        "updatedAt" : "2017-09-07T22:32:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "4207fe2e-6695-4132-acd6-de806e2e942c",
        "parentId" : "5488e7da-985a-4380-9b96-a3f2ed960348",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "At this point and given the extension we got for 1.8, a single PR will be easier to manage.",
        "createdAt" : "2017-09-01T22:48:11Z",
        "updatedAt" : "2017-09-07T22:32:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "bc883e38-8f7b-4091-acda-b9c3c39ce0fe",
        "parentId" : "5488e7da-985a-4380-9b96-a3f2ed960348",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I still don't agree with that :)",
        "createdAt" : "2017-09-04T11:47:53Z",
        "updatedAt" : "2017-09-07T22:32:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0b718373befb2168befc0c4579fd9a02155d5bc",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +157,161 @@// - ISCSI forbids if any two pods share at least same IQN, LUN and Target\n// TODO: migrate this into some per-volume specific code?\nfunc NoDiskConflict(pod *v1.Pod, meta algorithm.PredicateMetadata, nodeInfo *schedulercache.NodeInfo) (bool, []algorithm.PredicateFailureReason, error) {\n\tfor _, v := range pod.Spec.Volumes {\n\t\tfor _, ev := range nodeInfo.Pods() {"
  },
  {
    "id" : "affca498-5870-4c14-839a-34c618c162a4",
    "prId" : 50859,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50859#pullrequestreview-59935527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a93541cf-ac48-48ff-a2cf-df1eacdde295",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "It looks to me that all the changes to the scheduler code could have been implemented with ExtendedResources instead of a new HugePageResource type. Why is it necessary to have this new resource type?",
        "createdAt" : "2017-08-31T00:12:11Z",
        "updatedAt" : "2017-09-05T14:34:41Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "d931e5c7-4213-458e-8aeb-a522231ba172",
        "parentId" : "a93541cf-ac48-48ff-a2cf-df1eacdde295",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@bsalamat my understanding is that extended resources are not in the default kubernetes resource namespace.\r\n\r\nsee: https://github.com/kubernetes/kubernetes/blob/master/pkg/api/helper/helpers.go#L121\r\n\r\nthe intention is that hugepages are a natively understood resource upon graduation and are in the kubernetes resource namespace.",
        "createdAt" : "2017-08-31T01:45:08Z",
        "updatedAt" : "2017-09-05T14:34:41Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "9a008467-6ff7-421c-aa83-f1c1d75e7a4c",
        "parentId" : "a93541cf-ac48-48ff-a2cf-df1eacdde295",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "From scheduler's point of view Extended Resources, OIR, or HugePages are very similar and the logic to handle them should be the same. That's why I am not happy with duplicating the code for HugePages in scheduler.\r\nGiven that we are very close to the code freeze for 1.8, I am fine with the changes if we coalesce the code for these resources in a follow-on.",
        "createdAt" : "2017-08-31T17:39:14Z",
        "updatedAt" : "2017-09-05T14:34:41Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "38d5dee67776733045463a8a35fb2058db49eb3b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +510,514 @@\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif v1helper.IsHugePageResourceName(rName) {\n\t\t\t\t\tvalue := rQuantity.Value()\n\t\t\t\t\tif value > result.HugePages[rName] {"
  },
  {
    "id" : "d88d06b3-703c-42f2-a376-60275aa190b6",
    "prId" : 50362,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50362#pullrequestreview-55181046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34f048fe-be6d-46db-aa03-429cec505894",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "~I find  `cond.Type == v1.NodeReady && cond.Status == v1.ConditionFalse` easier to read WDYT @k82cn ? (same goes for the checks below)~",
        "createdAt" : "2017-08-09T09:23:36Z",
        "updatedAt" : "2017-08-11T23:28:57Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "c3dcf390-5e51-42d5-aaf2-708b86b6ea3f",
        "parentId" : "34f048fe-be6d-46db-aa03-429cec505894",
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "we can only schedule pod to ready node, neither `False` nor `Unknown`.",
        "createdAt" : "2017-08-09T09:28:45Z",
        "updatedAt" : "2017-08-11T23:28:57Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "05b56f06-a801-4e62-9406-8b68e3af2132",
        "parentId" : "34f048fe-be6d-46db-aa03-429cec505894",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "yup indeed forgot the `unknown` one",
        "createdAt" : "2017-08-09T09:32:20Z",
        "updatedAt" : "2017-08-11T23:28:57Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "78e078390f7d64377d88a4d3c061a8f5904b384a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1317,1321 @@\t\t// - NodeOutOfDisk condition status is ConditionFalse,\n\t\t// - NodeNetworkUnavailable condition status is ConditionFalse.\n\t\tif cond.Type == v1.NodeReady && cond.Status != v1.ConditionTrue {\n\t\t\treasons = append(reasons, ErrNodeNotReady)\n\t\t} else if cond.Type == v1.NodeOutOfDisk && cond.Status != v1.ConditionFalse {"
  },
  {
    "id" : "29f9c6c1-843e-414a-8f1d-e4f9dc059a2c",
    "prId" : 48226,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48226#pullrequestreview-62229409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "839924ac-fe6f-4c1f-9aac-10089178e0cb",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "HandleError has rate limiting of max one error per mili-sec. It also shows call-stack. I am not so sure how all those will be useful, but at least converting an error log to an info log does not seem right to me.",
        "createdAt" : "2017-07-21T18:26:15Z",
        "updatedAt" : "2017-07-21T18:26:15Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "c00fb933-9146-4afd-83da-efe7231851d6",
        "parentId" : "839924ac-fe6f-4c1f-9aac-10089178e0cb",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "IMO it is not an error, it is basically useless to the reader. It's misleading because error implies something has broken but the error is ignored by the code. All this code does is it counts the # of gce PVs/PVCs used on a given node, the reader doesn't care if there was an error getting just one of those PVs/PVCs, the count will continue regardless, so this quickly becomes spam",
        "createdAt" : "2017-07-24T14:55:52Z",
        "updatedAt" : "2017-07-24T14:55:52Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      },
      {
        "id" : "21620dcb-7183-4c3d-b0b1-979c9fc30742",
        "parentId" : "839924ac-fe6f-4c1f-9aac-10089178e0cb",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I see your point. It may still deserve a warning log. More importantly we are going to completely remove this in productions logs, as it is reported only at V(4).\r\n@davidopp What do you think?",
        "createdAt" : "2017-07-24T17:21:46Z",
        "updatedAt" : "2017-07-24T17:21:46Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "6f51b7b4-fe21-4572-a82b-9c4f503f8fb6",
        "parentId" : "839924ac-fe6f-4c1f-9aac-10089178e0cb",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I don't see why you would warn in this case, it looks like spam for the control flow. ",
        "createdAt" : "2017-09-12T18:47:43Z",
        "updatedAt" : "2017-09-12T18:47:43Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fbb705e6498cba9502aeac76205437306ca0936",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +237,241 @@\t\t\t\t// if the PVC is not found, log the error and count the PV towards the PV limit\n\t\t\t\t// generate a random volume ID since its required for de-dup\n\t\t\t\tglog.V(4).Infof(\"Unable to look up PVC info for %s/%s, assuming PVC matches predicate when counting limits: %v\", namespace, pvcName, err)\n\t\t\t\tsource := rand.NewSource(time.Now().UnixNano())\n\t\t\t\tgeneratedID := \"missingPVC\" + strconv.Itoa(rand.New(source).Intn(1000000))"
  },
  {
    "id" : "b9c70be8-c949-489a-ba33-5d81c34789dd",
    "prId" : 47566,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47566#pullrequestreview-44459355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "parentId" : null,
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "There are a few other functions in the file that do not follow the go style. Could you please fix those as well?",
        "createdAt" : "2017-06-15T19:50:44Z",
        "updatedAt" : "2017-06-15T19:50:44Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "f8ec0b29-d8c4-49e2-af93-baf52a6df56c",
        "parentId" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Do we need update here? Seems the godoc will not show those functions. @bsalamat ",
        "createdAt" : "2017-06-16T00:49:04Z",
        "updatedAt" : "2017-06-16T01:36:52Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "8217ccac-a798-48f9-bcd7-3e838d6e2ed5",
        "parentId" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "![image](https://user-images.githubusercontent.com/5154334/27208205-ee586538-5276-11e7-944d-19cfe5d41a31.png)\r\n@jayunit100 thinks it is necessary, so do I. Thanks.",
        "createdAt" : "2017-06-16T01:34:50Z",
        "updatedAt" : "2017-06-16T01:34:50Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      },
      {
        "id" : "607d95c2-5901-49ed-8d06-1d90c7d14b6b",
        "parentId" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "@gyliu513 even if this is not a public api, we'd better still follow the go style.",
        "createdAt" : "2017-06-16T01:37:29Z",
        "updatedAt" : "2017-06-16T01:37:29Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "5e29f01d-f44f-4e82-b6ca-3910b1659a07",
        "parentId" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Please note there is a PR covering the godoc for all of the public api here https://github.com/kubernetes/kubernetes/pull/47052",
        "createdAt" : "2017-06-16T01:45:20Z",
        "updatedAt" : "2017-06-16T01:45:20Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      },
      {
        "id" : "1b532fa1-d1a3-44ae-9c8c-1b1257ebabe2",
        "parentId" : "50f1d387-79c2-4de7-b092-4d233691a5c4",
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "OK, good job. I will avoid conflicts. =)",
        "createdAt" : "2017-06-16T01:53:22Z",
        "updatedAt" : "2017-06-16T01:53:22Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "423b7b2c17f649e8a203394e2064548fb24f68a9",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1248,1252 @@}\n\n// isPodBestEffort checks if pod is scheduled with best-effort QoS\nfunc isPodBestEffort(pod *v1.Pod) bool {\n\treturn v1qos.GetPodQOS(pod) == v1.PodQOSBestEffort"
  },
  {
    "id" : "b16252db-2b4b-4043-9544-7056951e84bb",
    "prId" : 47515,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47515#pullrequestreview-47843170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea409230-e3e6-400f-bcf4-0fae9e691d2c",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This has a slightly different semantics in case of duplicates in slices.\r\nWe should check if it really works and document clearly the semantics about duplicates.",
        "createdAt" : "2017-07-03T13:28:22Z",
        "updatedAt" : "2017-07-03T13:28:22Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "283a55b1-6e1e-467c-9c62-da12bf6bd6a6",
        "parentId" : "ea409230-e3e6-400f-bcf4-0fae9e691d2c",
        "authorId" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "body" : "Thanks for review, I expect the good result.=)",
        "createdAt" : "2017-07-04T02:18:23Z",
        "updatedAt" : "2017-07-04T02:18:23Z",
        "lastEditedBy" : "93df2e83-0c3f-4aca-8f83-bac5bb8543ff",
        "tags" : [
        ]
      },
      {
        "id" : "0e39d752-7141-4082-8d84-8f404e3d6867",
        "parentId" : "ea409230-e3e6-400f-bcf4-0fae9e691d2c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "oops, I misunderstood this function - it already has comment that is pretty clear. And with your change it's still correct.",
        "createdAt" : "2017-07-04T11:42:34Z",
        "updatedAt" : "2017-07-04T11:42:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "22e4abafaec6408675eb0832aa95a0586090518e",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +887,891 @@// search two arrays and return true if they have at least one common element; return false otherwise\nfunc haveSame(a1, a2 []string) bool {\n\tm := map[string]int{}\n\n\tfor _, val := range a1 {"
  },
  {
    "id" : "348ac35e-5687-446f-99e3-92baf47a6c16",
    "prId" : 46621,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46621#pullrequestreview-41913423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd3f4bd-a790-44d3-bdf0-22e6c803f041",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Could you add a godoc comment to this exported function seeing how you're cleaning it up?",
        "createdAt" : "2017-06-03T04:54:29Z",
        "updatedAt" : "2017-06-03T04:54:46Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "19f895a5-6a6b-4410-82ad-a9cc6590113f",
        "parentId" : "cdd3f4bd-a790-44d3-bdf0-22e6c803f041",
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "Sure, I will make a follow up PR for this.\r\n\r\n@timothysc can you please add milestone 1.7 for this so that it can be in the submit queue?",
        "createdAt" : "2017-06-03T05:08:26Z",
        "updatedAt" : "2017-06-03T05:08:26Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae3107aab522b349d4caa759d0b68448a07a486",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +655,659 @@}\n\nfunc PodMatchNodeSelector(pod *v1.Pod, meta interface{}, nodeInfo *schedulercache.NodeInfo) (bool, []algorithm.PredicateFailureReason, error) {\n\tnode := nodeInfo.Node()\n\tif node == nil {"
  },
  {
    "id" : "23884416-8024-4993-bb21-9265e3068664",
    "prId" : 45352,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45352#pullrequestreview-36305331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8685fdb-0125-4479-b8f7-507455ce9211",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Why do we use a different pod here?",
        "createdAt" : "2017-05-04T15:33:12Z",
        "updatedAt" : "2017-05-04T15:33:12Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "679ce1d2-c19a-4fe1-a231-5b33a1617237",
        "parentId" : "b8685fdb-0125-4479-b8f7-507455ce9211",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "this was a bug fix\r\nA separate PR with test for it was added in https://github.com/kubernetes/kubernetes/pull/45152",
        "createdAt" : "2017-05-04T15:35:26Z",
        "updatedAt" : "2017-05-04T15:35:26Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8dd3a4bbf6b5c316fe6e15bf85417a1130f2d2f9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1075,1079 @@\t\t\t}\n\t\t\tfor _, term := range getPodAntiAffinityTerms(affinity.PodAntiAffinity) {\n\t\t\t\tnamespaces := priorityutil.GetNamespacesFromPodAffinityTerm(existingPod, &term)\n\t\t\t\tselector, err := metav1.LabelSelectorAsSelector(term.LabelSelector)\n\t\t\t\tif err != nil {"
  },
  {
    "id" : "307ed193-a896-443c-ade3-2f3470c4be81",
    "prId" : 42028,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42028#pullrequestreview-23634280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcf15788-0c11-45f2-ab4d-0290f19dc979",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "`PodFitsHost` is essential and `PodFitsHostPorts` might be essential too for now. The former is a basic requirement to admit pods and preemptions will not work around that.\r\nThe latter is a resource that kubelet does not support. I see it as a bug since Kubelet should ideally be prempting  pods to free up host ports too. cc @dashpole ",
        "createdAt" : "2017-02-24T01:28:39Z",
        "updatedAt" : "2017-02-27T18:01:08Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "19d6356c-522b-4a67-ac86-2b4204049ee6",
        "parentId" : "fcf15788-0c11-45f2-ab4d-0290f19dc979",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Moved them to essential and added TODO for `PodFitsHostPorts`",
        "createdAt" : "2017-02-24T01:52:28Z",
        "updatedAt" : "2017-02-27T18:01:08Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c882477e93591ecbe0638c2ff55b7b7b7535186",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +877,881 @@\n// noncriticalPredicates are the predicates that only non-critical pods need\nfunc noncriticalPredicates(pod *v1.Pod, meta interface{}, nodeInfo *schedulercache.NodeInfo) (bool, []algorithm.PredicateFailureReason, error) {\n\tvar predicateFails []algorithm.PredicateFailureReason\n\tfit, reasons, err := PodFitsResources(pod, meta, nodeInfo)"
  },
  {
    "id" : "656e86b2-fb51-4c25-ac2a-59a60f12c48e",
    "prId" : 41918,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41918#pullrequestreview-23528882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abb899f5-b0ad-43b7-8469-596c426b7591",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The ID here is actually a name?",
        "createdAt" : "2017-02-23T16:52:14Z",
        "updatedAt" : "2017-02-23T16:52:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "952ab558-0f46-4e0e-82b9-7c9c794d6c3d",
        "parentId" : "abb899f5-b0ad-43b7-8469-596c426b7591",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I'm assuming you're conforming to some interface here?",
        "createdAt" : "2017-02-23T16:52:39Z",
        "updatedAt" : "2017-02-23T16:52:39Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "54fe46b9-3bb2-4e9c-8bdf-42e96862ea5b",
        "parentId" : "abb899f5-b0ad-43b7-8469-596c426b7591",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yes, ID is a name.\r\n\r\nSee comment on line 62 re interface.",
        "createdAt" : "2017-02-23T16:58:31Z",
        "updatedAt" : "2017-02-23T16:58:31Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d8d6ad16cba1e0dea9e195f4a212acc8f7d8470",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +65,69 @@}\n\nfunc (c *CachedPersistentVolumeInfo) GetPersistentVolumeInfo(pvID string) (*v1.PersistentVolume, error) {\n\treturn c.Get(pvID)\n}"
  },
  {
    "id" : "e2d799bb-db94-41bc-a3ad-fcc952a3a3f0",
    "prId" : 41870,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41870#pullrequestreview-24331381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2fda5c5-bab8-4b03-958b-1f9648e8bd51",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "feels like this method needs a header comment `// GetResourceRequest calculates maximal individual init containers (since they're serial) and sum of standard pod containers (since theyre running together), and takes the max of the entire set.`",
        "createdAt" : "2017-02-28T17:47:02Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "f08c25aa-6260-4d6b-b687-9dbdc8db120c",
        "parentId" : "d2fda5c5-bab8-4b03-958b-1f9648e8bd51",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Agree, will add this _en passent_.",
        "createdAt" : "2017-02-28T18:20:23Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "4092c4d7-089d-4037-b479-63d66cb9b466",
        "parentId" : "d2fda5c5-bab8-4b03-958b-1f9648e8bd51",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Added a banner comment.",
        "createdAt" : "2017-02-28T20:11:02Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a4218969090c1eebafc1dd6befe071f6defbb86",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +527,531 @@\t\t\t\t\tresult.NvidiaGPU = gpu\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tif v1.IsOpaqueIntResourceName(rName) {\n\t\t\t\t\tvalue := rQuantity.Value()"
  },
  {
    "id" : "3cfbc237-b325-4c49-a5f1-b4ab227c1a04",
    "prId" : 41870,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41870#pullrequestreview-24394263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f320f452-ddf0-4417-9c82-e4c6e32c47fa",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "should we update unit test for the fix to ?",
        "createdAt" : "2017-02-28T18:06:50Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "54590332-c375-4d08-bbfe-1e6905c504ec",
        "parentId" : "f320f452-ddf0-4417-9c82-e4c6e32c47fa",
        "authorId" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "body" : "Which unit tests do you have in mind? We could add something for SetOpaque.",
        "createdAt" : "2017-02-28T18:22:05Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "8b309230-89cb-4a04-bf89-29a323dad0d8",
        "tags" : [
        ]
      },
      {
        "id" : "2ef42401-6494-4c21-8217-f3031b0d5d7a",
        "parentId" : "f320f452-ddf0-4417-9c82-e4c6e32c47fa",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Yup; ",
        "createdAt" : "2017-03-01T03:19:31Z",
        "updatedAt" : "2017-03-04T17:26:34Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a4218969090c1eebafc1dd6befe071f6defbb86",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +531,535 @@\t\t\t\t\tvalue := rQuantity.Value()\n\t\t\t\t\tif value > result.OpaqueIntResources[rName] {\n\t\t\t\t\t\tresult.SetOpaque(rName, value)\n\t\t\t\t\t}\n\t\t\t\t}"
  },
  {
    "id" : "45f70a3d-4a67-4d25-9de1-c9c8862b04a7",
    "prId" : 41068,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41068#pullrequestreview-20516981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea6d822-5efb-45a9-b29a-e092464b1c7c",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "s/and/or",
        "createdAt" : "2017-02-07T14:17:36Z",
        "updatedAt" : "2017-02-07T14:17:41Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "37585b06e0dad95da1a47845e2728133d5f01153",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1160,1164 @@\n\tif v1.TolerationsTolerateTaintsWithFilter(tolerations, taints, func(t *v1.Taint) bool {\n\t\t// PodToleratesNodeTaints is only interested in NoSchedule and NoExecute taints.\n\t\treturn t.Effect == v1.TaintEffectNoSchedule || t.Effect == v1.TaintEffectNoExecute\n\t}) {"
  },
  {
    "id" : "fe8346ec-ff13-42f3-af06-8878a978d700",
    "prId" : 37691,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37691#pullrequestreview-11328973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55520045-4065-452d-917f-fb426533a00e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please handle err next to the place where you got it (i.e. move this one line above)",
        "createdAt" : "2016-12-08T10:10:35Z",
        "updatedAt" : "2016-12-08T11:04:53Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b413f504338a028262d5989c992c7b8ee6c696",
    "line" : null,
    "diffHunk" : "@@ -1,1 +912,916 @@\tnamespaces := priorityutil.GetNamespacesFromPodAffinityTerm(pod, term)\n\tselector, err := metav1.LabelSelectorAsSelector(term.LabelSelector)\n\tif err != nil {\n\t\treturn false, false, err\n\t}"
  },
  {
    "id" : "b61f85ad-329b-498f-8d47-32e50848db2b",
    "prId" : 37090,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37090#pullrequestreview-9341757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e21866a-f60d-4c94-a6d0-637d0e596047",
        "parentId" : null,
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "allow readonly\n",
        "createdAt" : "2016-11-18T15:19:45Z",
        "updatedAt" : "2016-12-13T04:37:36Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "27f9a4b3-afe0-47f7-b159-bc43cd65d730",
        "parentId" : "8e21866a-f60d-4c94-a6d0-637d0e596047",
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "Done, if I didnt miss anything :)\n",
        "createdAt" : "2016-11-18T15:45:34Z",
        "updatedAt" : "2016-12-13T04:37:36Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      },
      {
        "id" : "afd45b1a-62e4-4345-82d3-2094de30c849",
        "parentId" : "8e21866a-f60d-4c94-a6d0-637d0e596047",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "you did, TargetPortal :)\n",
        "createdAt" : "2016-11-18T18:26:48Z",
        "updatedAt" : "2016-12-13T04:37:36Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "6b7a2fdb-3d11-46e4-835e-56c8440ba05f",
        "parentId" : "8e21866a-f60d-4c94-a6d0-637d0e596047",
        "authorId" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "body" : "Ah.. Hopefully with latestpatchset I didnt :)\n",
        "createdAt" : "2016-11-19T08:26:26Z",
        "updatedAt" : "2016-12-13T04:37:36Z",
        "lastEditedBy" : "3eb39df2-c27a-40ed-9fab-cabae1c6353d",
        "tags" : [
        ]
      }
    ],
    "commit" : "28088159c32437ea33a9c21445acc46f6dff5e8a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t}\n\n\t\tif volume.ISCSI != nil && existingVolume.ISCSI != nil {\n\t\t\tiqn, lun, target := volume.ISCSI.IQN, volume.ISCSI.Lun, volume.ISCSI.TargetPortal\n\t\t\teiqn, elun, etarget := existingVolume.ISCSI.IQN, existingVolume.ISCSI.Lun, existingVolume.ISCSI.TargetPortal"
  },
  {
    "id" : "5c3295e8-44f2-46d4-9139-21c8f539376c",
    "prId" : 34845,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34845#pullrequestreview-4726376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a3bc12c-3693-4315-af67-c57f752f47b2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "you know I'm going to complain about this shim next, right?  It's only got two call sites, right?\n",
        "createdAt" : "2016-10-18T17:58:32Z",
        "updatedAt" : "2016-10-18T18:37:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "dd5450ac-dce4-4d18-8907-cc6a698e479a",
        "parentId" : "2a3bc12c-3693-4315-af67-c57f752f47b2",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "i dont want to rewrite the scheduler in this pr.\n",
        "createdAt" : "2016-10-18T18:01:53Z",
        "updatedAt" : "2016-10-18T18:37:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "62f5e81e-54ff-4728-b725-7d94513400db",
        "parentId" : "2a3bc12c-3693-4315-af67-c57f752f47b2",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "note, we have a similar shim for CachedNodeInfo just below...\n",
        "createdAt" : "2016-10-18T18:02:29Z",
        "updatedAt" : "2016-10-18T18:37:01Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "555231fad7dd5577d9847388bd9849459fae90a7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +55,59 @@\n// GetPersistentVolumeClaimInfo fetches the claim in specified namespace with specified name\nfunc (c *CachedPersistentVolumeClaimInfo) GetPersistentVolumeClaimInfo(namespace string, name string) (*api.PersistentVolumeClaim, error) {\n\treturn c.PersistentVolumeClaims(namespace).Get(name)\n}"
  },
  {
    "id" : "158a158f-6f9a-464c-9fef-f12e4a3edb3a",
    "prId" : 33763,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33763#pullrequestreview-4664096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff99483b-2e86-4589-9fab-55690308ff60",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: can you please move it above predicatePrecomputations? For me it's always easier to see the lock before the variable it's locking.\n",
        "createdAt" : "2016-10-18T13:09:18Z",
        "updatedAt" : "2016-10-20T12:27:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08cff0157da92133fa25bfcd3faf0b2a96cc76c5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +40,44 @@type PredicateMetadataModifier func(pm *predicateMetadata)\n\nvar predicatePrecomputeRegisterLock sync.Mutex\nvar predicatePrecomputations map[string]PredicateMetadataModifier = make(map[string]PredicateMetadataModifier)\n"
  },
  {
    "id" : "b32343b2-f439-4193-848a-391a39b435c5",
    "prId" : 33763,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33763#pullrequestreview-4822713",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2b644a-9c84-4dea-aa9c-80d10c2b8eec",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: remove empty line\n",
        "createdAt" : "2016-10-19T08:27:03Z",
        "updatedAt" : "2016-10-20T12:27:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "08cff0157da92133fa25bfcd3faf0b2a96cc76c5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +642,646 @@\t// consider only the pods that belong to the same namespace\n\tallMatches, errList := s.podLister.List(selector)\n\n\t// In the future maybe we will return them as part of the function.\n\tif errSvc != nil || errList != nil {"
  },
  {
    "id" : "3dc4243d-fcb8-4c6b-92fb-69a700b80d2b",
    "prId" : 32888,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32888#pullrequestreview-1134643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20483516-54a7-43ee-9f91-f9269fb2b04f",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why this additional check? Err should be non-nil in that case.\n",
        "createdAt" : "2016-09-22T12:56:32Z",
        "updatedAt" : "2016-09-22T12:56:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "16fbb47189a2f957178d1971b88a071807289db0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +671,675 @@\tif !labelsExist {\n\t\tservices, err := s.serviceLister.GetPodServices(pod)\n\t\tif err == nil && len(services) > 0 {\n\t\t\t// just use the first service and get the other pods within the service\n\t\t\t// TODO: a separate predicate can be created that tries to handle all services for the pod"
  },
  {
    "id" : "fee2747f-9475-4492-bb9e-5cf7619a5162",
    "prId" : 29622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bda229cb-f745-422c-8c39-d4e44e68cceb",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "so the other checks don't matter for read only? if so, can we just check the rw mode on the RDB instead? or please add a comment about why the same mon/emon/pool won't work for read write and why it isn't an issue for read only (I'm pretty new to ceph). \n",
        "createdAt" : "2016-08-04T16:16:28Z",
        "updatedAt" : "2016-08-07T14:32:33Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "730db45eab02457c524a4576c578b3436187c162",
    "line" : null,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\t\t// only one read-write mount is permitted for the same RBD image.\n\t\t\t// same RBD image mounted by multiple Pods conflicts unless all Pods mount the image read-only\n\t\t\tif haveSame(mon, emon) && pool == epool && image == eimage && !(volume.RBD.ReadOnly && existingVolume.RBD.ReadOnly) {\n\t\t\t\treturn true\n\t\t\t}"
  },
  {
    "id" : "1f88004e-9f30-44de-a50f-ddbfd53461dd",
    "prId" : 29622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67eaca75-ae01-4dbe-91d6-42c5a62fb4bc",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "what about one mount as r/w and everything else as r/o? that feels useful for data pipelines. Just ack/nack and I'm ready to lgmt. \n",
        "createdAt" : "2016-08-07T21:19:16Z",
        "updatedAt" : "2016-08-07T21:19:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "006800b0-67cc-44e1-b7cd-d2ae921c43a2",
        "parentId" : "67eaca75-ae01-4dbe-91d6-42c5a62fb4bc",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "It is possible to have one r/w and multiple r/o but it is tricky to get data sync on multiple mounts. IMO, we should solve this use case by introducing snapshot (to be implemented).\n",
        "createdAt" : "2016-08-07T23:18:13Z",
        "updatedAt" : "2016-08-07T23:18:13Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "730db45eab02457c524a4576c578b3436187c162",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +111,115 @@\t\t\t// two RBDs images are the same if they share the same Ceph monitor, are in the same RADOS Pool, and have the same image name\n\t\t\t// only one read-write mount is permitted for the same RBD image.\n\t\t\t// same RBD image mounted by multiple Pods conflicts unless all Pods mount the image read-only\n\t\t\tif haveSame(mon, emon) && pool == epool && image == eimage && !(volume.RBD.ReadOnly && existingVolume.RBD.ReadOnly) {\n\t\t\t\treturn true"
  },
  {
    "id" : "369f39f3-8a27-4cec-9763-8e038c77d3e3",
    "prId" : 29539,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ad5b7bc-3b11-49e8-ac71-1b933c8c57db",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I think the code from here to the end of the function would be more compact as\n\nI think this would be more compact like\n\n```\nif affinity != nil {\n  if affinity.PodAffinity != nil && !check.NodeMatchesHardPodAffinity(...) {\n         return false, ErrPodAffinityNotMatch\n   }\n   if affinity.PodAntiAffinity != nil && !check.NodeMatchesHardPodAffinityAntiAffinity(...) {\n        return false, ErrPodAffinityNotMatch\n   }\n}\nreturn true, nil\n}\n\n```\n",
        "createdAt" : "2016-07-28T05:51:16Z",
        "updatedAt" : "2016-07-28T14:57:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "febfb9f7-d4ad-46cf-b40f-38deb84381b0",
        "parentId" : "2ad5b7bc-3b11-49e8-ac71-1b933c8c57db",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "That's not the same. We want to call PodAntiAffinity always (potentially with antiAffinity = nil) not only when AntiAffinity != nil\n",
        "createdAt" : "2016-07-28T05:53:59Z",
        "updatedAt" : "2016-07-28T14:57:41Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "81fe0e56-0fa5-4a11-b63f-a610395b0ae3",
        "parentId" : "2ad5b7bc-3b11-49e8-ac71-1b933c8c57db",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Ah yes, of course. Can you please add a comment to remind people of this?\n",
        "createdAt" : "2016-07-28T06:07:50Z",
        "updatedAt" : "2016-07-28T14:57:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1062ea59-e514-4743-a6da-173e6ae99b43",
        "parentId" : "2ad5b7bc-3b11-49e8-ac71-1b933c8c57db",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-07-28T14:57:46Z",
        "updatedAt" : "2016-07-28T14:57:46Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3b9d583a2f7b03f409592169a2066219b25795f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +810,814 @@\t// Check if the current node match the inter-pod affinity scheduling constraints.\n\t// Hard inter-pod affinity is not symmetric, check only when affinity.PodAffinity exists.\n\tif affinity != nil && affinity.PodAffinity != nil {\n\t\tif !checker.NodeMatchesHardPodAffinity(pod, allPods, node, affinity.PodAffinity) {\n\t\t\treturn false, ErrPodAffinityNotMatch"
  },
  {
    "id" : "46e4188a-5834-4dc2-a394-92b9c4cd10d8",
    "prId" : 29272,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d76a19b-0bc7-4dab-80aa-434078b212e7",
        "parentId" : null,
        "authorId" : "3c629542-c5a2-4812-9ac7-1afd6beacae5",
        "body" : "@wojtek-t was there no error for a reason here? Is the reason ok?\nsame above\n",
        "createdAt" : "2016-08-03T13:44:06Z",
        "updatedAt" : "2016-08-09T12:03:09Z",
        "lastEditedBy" : "3c629542-c5a2-4812-9ac7-1afd6beacae5",
        "tags" : [
        ]
      },
      {
        "id" : "5aa50071-e766-4276-b7b1-5e7e54b43e2b",
        "parentId" : "8d76a19b-0bc7-4dab-80aa-434078b212e7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The fix for it is already in-flight for some time:\nhttps://github.com/kubernetes/kubernetes/pull/29912\n",
        "createdAt" : "2016-08-04T07:48:09Z",
        "updatedAt" : "2016-08-09T12:03:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c0a9e133-f9e8-4e60-a46e-50c584636b3b",
        "parentId" : "8d76a19b-0bc7-4dab-80aa-434078b212e7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So yes - what you have is ok (though you will probably need to rebase one more time).\n",
        "createdAt" : "2016-08-04T07:48:27Z",
        "updatedAt" : "2016-08-09T12:03:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2749ec75551fdad53e2951919600f472ca8eade1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +841,845 @@\t}\n\tif !c.satisfiesPodsAffinityAntiAffinity(pod, node, affinity) {\n\t\treturn false, []algorithm.PredicateFailureReason{ErrPodAffinityNotMatch}, nil\n\t}\n"
  },
  {
    "id" : "f1ee65bb-cef9-4eb9-a595-8e59fd947672",
    "prId" : 29109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea80cb27-ffc9-4350-8794-2fa69ffa1555",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This additionally returns number of pods that match the given term, to avoid checking it again in the next function.\n",
        "createdAt" : "2016-07-20T11:55:31Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "5d5851a7-d2e8-400a-aee4-e275192e4479",
        "parentId" : "ea80cb27-ffc9-4350-8794-2fa69ffa1555",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "(Deleted earlier comment.) Ah, I think I understand. matchingPodExists means \"matching pod exists anywhere\" while the first return value means \"matching pod exists on a node that matches the topology key\" ?\n\nIf so, please add a comment like\n\n```\n// First return value indicates whether a matching pod exists on a node that matches the topology key,\n// while the second return value indicates whether a matching pod exists anywhere.\n```\n",
        "createdAt" : "2016-07-21T22:41:40Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "d16db657-bab6-46f7-a490-a5470921e62a",
        "parentId" : "ea80cb27-ffc9-4350-8794-2fa69ffa1555",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes exactly - will extend the comment as you suggested.\n",
        "createdAt" : "2016-07-22T05:54:39Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad876b6f904b474403052a1da0305b957547f8c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +828,832 @@// while the second return value indicates whether a matching pod exists anywhere.\n// TODO: Do we really need any pod matching, or all pods matching? I think the latter.\nfunc (checker *PodAffinityChecker) AnyPodMatchesPodAffinityTerm(pod *api.Pod, allPods []*api.Pod, node *api.Node, podAffinityTerm api.PodAffinityTerm) (bool, bool, error) {\n\tmatchingPodExists := false\n\tfor _, ep := range allPods {"
  },
  {
    "id" : "ee87ebc5-b501-4764-85f3-f5f344c20487",
    "prId" : 29109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e64c7d50-c2fd-4451-9e6a-7dfd8867344d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Why do you think it should be all pods matching? \n\nWhen called from NodeMatchesHardPodAffinity() it is enforcing a rule like \"only put the new pod on a node that is already running a pod from the storage service, since the new pod needs very low-latency communication with the storage service.\" You don't need all the pods on the node to match, just one, for the node to be accepted.\n\nWhen called from NodeMatchesHardPodAntiAffinity() it is enforcing a rule like like \"do not put the new pod on a node that is already running (some pod that the new pod would conflict with).\" You don't need all the pods on the node to match, just one, for the node to be rejected.\n",
        "createdAt" : "2016-07-21T21:57:52Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "abb72b37-e435-480d-bb11-cdc195dec740",
        "parentId" : "e64c7d50-c2fd-4451-9e6a-7dfd8867344d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I definitely agree for the \"Anti-Affinity\" that it should be \"some pod\".\n\nHowever, for \"Affinity\", I'm not that convinced. If this is the case for the service (that you described above), a request to a service may be redirected to any pod from it. So my feeling is that it should be \"close to all pods\".\n",
        "createdAt" : "2016-07-22T05:58:40Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "14544e16-d0e8-4e02-9f5e-70d656217853",
        "parentId" : "e64c7d50-c2fd-4451-9e6a-7dfd8867344d",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "OK, that's a valid point, let me refine my example.\n1) \"Run on the same node\" but where the two pods communicate via a hard-coded host port or have some out-of-band way to find each other and use localhost to communicate when they discover they share a node\n2) \"Run in same zone\" where we assume service affinity (#15675) has been implemented (service routes you to instance in your same zone, if one exists)\n\nI don't understand the \"close to all pods\" use case. Can you give an example?\n",
        "createdAt" : "2016-07-22T06:41:03Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "2c036db5-ee8a-4ffc-8697-f27aedf66379",
        "parentId" : "e64c7d50-c2fd-4451-9e6a-7dfd8867344d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK, so what I had in mind is:\n- assume that we have a service and it has 2 underlying pods: 1 in zone A and 1 in zone B\n- then if the pod we are scheduling is going to talk to this service, its connections will be forwarded to random from those 2 pods (we don't have service affinity, right?)\n- then ideally, we would like to be close to both pods, because we don't know which one we will be talking to\n\nHowever, in the example above, this is impossible, so maybe it is enough to actually be close to \"any of those\"?\n",
        "createdAt" : "2016-07-22T06:47:10Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad876b6f904b474403052a1da0305b957547f8c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +827,831 @@// First return value indicates whether a matching pod exists on a node that matches the topology key,\n// while the second return value indicates whether a matching pod exists anywhere.\n// TODO: Do we really need any pod matching, or all pods matching? I think the latter.\nfunc (checker *PodAffinityChecker) AnyPodMatchesPodAffinityTerm(pod *api.Pod, allPods []*api.Pod, node *api.Node, podAffinityTerm api.PodAffinityTerm) (bool, bool, error) {\n\tmatchingPodExists := false"
  },
  {
    "id" : "92b3bdca-d0a4-4a2e-95f1-2fc132e4682e",
    "prId" : 29109,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59f9e933-689b-448d-ac73-10377a087f1c",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I'm 99% sure this should be !matchingPodExists -- I'm not sure how the tests are passing.\n",
        "createdAt" : "2016-07-21T22:47:41Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "9f17dd89-d4ed-4659-9b9c-80e8f7273b05",
        "parentId" : "59f9e933-689b-448d-ac73-10377a087f1c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Actually, I think it should be \"matchingPodExists\" as it is.\nLet me clarify. So basically, if there is no existing matching pod, that means that we are the first pod. So we need to schedule it somewhere, even though any existing pod is not satisfying its affinity - because there are no such pods satisfying its selector.\n\nHowever, if some matchingPodExists, then there has to be some that satisfies its conditions, so if there is a pod that satisifies rules, but non of these are satisfying topology key, then it is bad.\n",
        "createdAt" : "2016-07-22T06:04:11Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a7e64dae-b45e-41a1-b661-ee900f973873",
        "parentId" : "59f9e933-689b-448d-ac73-10377a087f1c",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Sorry, I got confused, you're right.\n",
        "createdAt" : "2016-07-22T06:17:09Z",
        "updatedAt" : "2016-07-22T06:49:38Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fad876b6f904b474403052a1da0305b957547f8c",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +893,897 @@\t\t\t// because the first pod of the collection can't be scheduled.\n\t\t\tmatch, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, pod, &podAffinityTerm)\n\t\t\tif err != nil || !match || matchingPodExists {\n\t\t\t\tglog.V(10).Infof(\"Cannot schedule pod %+v onto node %v, because none of the existing pods on this node satisfy the PodAffinityTerm %v, err: %+v\",\n\t\t\t\t\tpodName(pod), node.Name, podAffinityTerm, err)"
  },
  {
    "id" : "8146bd7e-c223-4239-b428-e231d4159c09",
    "prId" : 28670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ee40d64-d2eb-4279-91de-7a82f0d44a58",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "you could just say \"podMetadata is a type that is passed as metadata for predicate functions\"\n",
        "createdAt" : "2016-07-09T07:07:43Z",
        "updatedAt" : "2016-07-09T07:07:43Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e6dc8a932d6ba43e172cd1675bdcd6ad8e45208",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +66,70 @@}\n\n// podMetadata defines a type, that is an expected type that is passed\n// as metadata for predicate functions\ntype predicateMetadata struct {"
  },
  {
    "id" : "0452731a-5418-4d1e-8fa0-0dc67f87eab2",
    "prId" : 27227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "This will also fail at mount time and Kubelet will have nothing to attach.\n",
        "createdAt" : "2016-06-11T02:27:28Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "4fd610c0-3bb7-4e37-a342-a94ca7b4fc1a",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "And we don't expect the pod to land in this situation after creation since users cannot delete/modify PVs? If this is the case, I can revert my changes for this condition and let it just return an error.\n",
        "createdAt" : "2016-06-11T02:42:47Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "5b68a3e9-6454-4528-9e9a-2fdfaaefc2f7",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "I suppose this condition can happen if the admin deletes the PV but the user still has their PVC.  \n\nThe referential integrity cuts both ways.  Either side (admin or user) can delete their object.\n",
        "createdAt" : "2016-06-11T03:11:51Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "75f22b1a-cb06-476a-bad4-30251754d108",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "But in that case, it will never work for the user and never resolve itself.  Nothing will ever attach.\n",
        "createdAt" : "2016-06-11T03:12:12Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "fe5e8151-5e15-43cd-ac5d-81efea4ddda9",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Although, the PV could be _currently_ attached and the admin deletes the PV.  \n",
        "createdAt" : "2016-06-11T03:13:24Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "7a410fc2-4e94-492a-a89e-807e8edb2c37",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "This is a possible scenario and, when it manifests, all subsequent pod scheduling will be blocked. So, I am inclined to keep this change.\n",
        "createdAt" : "2016-06-11T03:53:49Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "ca168877-6d36-479f-b436-11e1638c6efe",
        "parentId" : "34185326-0ba3-46d2-a701-db7aa3aabebf",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Agreed. This is the same as the scenario we encountered with the PVC, except this is the PV side.\n",
        "createdAt" : "2016-06-11T05:27:35Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ce8b71ab41ef223a787068e80242838a719faa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +184,188 @@\t\t\t\tgeneratedID := \"missingPV\" + strconv.Itoa(rand.New(source).Intn(1000000))\n\t\t\t\tfilteredVolumes[generatedID] = true\n\t\t\t\treturn nil\n\t\t\t}\n"
  },
  {
    "id" : "b72d56fd-ffa4-4b7c-9aec-a739b727d2eb",
    "prId" : 27227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c791ee6-ae90-4b1a-9582-8e5af6fcc030",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "This is the only scenario, I believe, that is valid -- the PV is currently attached but the PVC has been deleted.\n",
        "createdAt" : "2016-06-11T02:28:26Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ce8b71ab41ef223a787068e80242838a719faa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t\t\tgeneratedID := \"missingPVC\" + strconv.Itoa(rand.New(source).Intn(1000000))\n\t\t\t\tfilteredVolumes[generatedID] = true\n\t\t\t\treturn nil\n\t\t\t}\n"
  },
  {
    "id" : "6e108b6a-160f-4216-ae84-2703723985af",
    "prId" : 24836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "347e00ac-b774-465e-8696-1c43b86a5d18",
        "parentId" : null,
        "authorId" : "b9cd3bbd-5e27-418d-850f-9875159d4e01",
        "body" : "Should we also add `&& podRequest.nvidiaGPU > 1`? So far we only support /dev/nvidia0\n",
        "createdAt" : "2016-05-11T07:52:03Z",
        "updatedAt" : "2016-05-11T07:52:03Z",
        "lastEditedBy" : "b9cd3bbd-5e27-418d-850f-9875159d4e01",
        "tags" : [
        ]
      },
      {
        "id" : "618968b7-807e-4b95-93a5-96ba89688a88",
        "parentId" : "347e00ac-b774-465e-8696-1c43b86a5d18",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I don't see how `podRequest.nvidiaGPU == 0` and `podRequest.nvidiaGPU > 1` could both be true.  did you mean `||`?  If so, I don't think that is necessary.\n",
        "createdAt" : "2016-05-11T22:52:18Z",
        "updatedAt" : "2016-05-11T22:52:18Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "daf8daaf-4544-449b-8f0a-547ee3d05c55",
        "parentId" : "347e00ac-b774-465e-8696-1c43b86a5d18",
        "authorId" : "b9cd3bbd-5e27-418d-850f-9875159d4e01",
        "body" : "Sorry, ignore this, my fault.\n",
        "createdAt" : "2016-05-11T23:00:16Z",
        "updatedAt" : "2016-05-11T23:00:17Z",
        "lastEditedBy" : "b9cd3bbd-5e27-418d-850f-9875159d4e01",
        "tags" : [
        ]
      }
    ],
    "commit" : "362c763fca4c7c6c148532c6f4e68422899b5297",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +415,419 @@\t}\n\tpodRequest := getResourceRequest(pod)\n\tif podRequest.milliCPU == 0 && podRequest.memory == 0 && podRequest.nvidiaGPU == 0 {\n\t\treturn true, nil\n\t}"
  },
  {
    "id" : "b0f2b1ef-1984-4a96-92a3-6ef857d68526",
    "prId" : 24674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcdf996d-df7f-4e2f-ad6a-b94015d8eabb",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I do't like it.\n\nWhat we should do is to insted of calling podFitsResourcesInternal above, call just PodFitsResources and remove it from here.\nThen we can even remove podFitsResourcesInternal completely since it will not be used.\n",
        "createdAt" : "2016-04-22T17:53:15Z",
        "updatedAt" : "2016-04-22T20:50:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "382a1af0-6c31-4c4d-8bfa-1d6ea096d2d8",
        "parentId" : "dcdf996d-df7f-4e2f-ad6a-b94015d8eabb",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It's not that easy. PodFitsResources is a NodeStatus method, which needs predicates.NodeInfo. I can _probably_ create one from the things I have here, but it'd be as ugly as this.\n",
        "createdAt" : "2016-04-22T18:02:13Z",
        "updatedAt" : "2016-04-22T20:50:03Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "e33af911-266c-453a-9855-cd93a25a602d",
        "parentId" : "dcdf996d-df7f-4e2f-ad6a-b94015d8eabb",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "aah - ok. let's leave as it - I will fix that in my PR where I'm changing it :)\nWith https://github.com/kubernetes/kubernetes/pull/24598 - it should be easy to do :)\n",
        "createdAt" : "2016-04-22T18:19:57Z",
        "updatedAt" : "2016-04-22T20:50:03Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0712f7e572699661371e16253f2679c67916133",
    "line" : null,
    "diffHunk" : "@@ -1,1 +773,777 @@\t\treturn fit, err\n\t}\n\n\tfit, err = PodFitsHost(pod, nodeName, nodeInfo)\n\tif !fit {"
  },
  {
    "id" : "1386704a-b24c-4b77-8c79-ba4d5c8f7f72",
    "prId" : 24598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16549766-89dc-47fb-8645-8c9d78515220",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "We should be able to aggregate this in NodeInfo.\nWhat do you think?\n",
        "createdAt" : "2016-04-21T14:26:21Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "ec37dc82-7b47-40a2-884c-98b4790acfca",
        "parentId" : "16549766-89dc-47fb-8645-8c9d78515220",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Agree - just didn't get to it yet. Adding a TODO for it.\n",
        "createdAt" : "2016-04-22T07:36:43Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1835c8528d784816b9555931392831840082d333",
    "line" : null,
    "diffHunk" : "@@ -1,1 +683,687 @@\t\t\t\t// \"0\" is explicitly ignored in PodFitsHostPorts,\n\t\t\t\t// which is the only function that uses this value.\n\t\t\t\tif podPort.HostPort != 0 {\n\t\t\t\t\tports[podPort.HostPort] = true\n\t\t\t\t}"
  },
  {
    "id" : "70ec7a88-2ae2-4382-9dd3-16709a8c8fe7",
    "prId" : 24598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e84045-cbb2-4a7e-ae30-c1a1c740e789",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "Nit: I am not sure about the k8s policy here. But it is not a good idea to return a very general but private defined error in a public function.\n",
        "createdAt" : "2016-04-21T14:32:45Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "6e5c9eff-ab9a-4bec-ae9e-5d203a3480ca",
        "parentId" : "f7e84045-cbb2-4a7e-ae30-c1a1c740e789",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We definitely shouldn't return such errors to the outside world (users). But this is more like internal scheduling function, and there are a bunch of other such examples in the code (even in this file). So I think it's ok.\n",
        "createdAt" : "2016-04-22T07:41:38Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a9baf1fd-94d6-4093-a5e0-1fd99246458c",
        "parentId" : "f7e84045-cbb2-4a7e-ae30-c1a1c740e789",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "I would like to see a FitError (the name exists somehow in generic_scheduler) or PredicateError to encapsulate those.\n\nNot arguing here. We can add it later to separate smaller commits.\n",
        "createdAt" : "2016-04-22T14:45:08Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "1835c8528d784816b9555931392831840082d333",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +500,504 @@\tnode := nodeInfo.Node()\n\tif node == nil {\n\t\treturn false, fmt.Errorf(\"node not found: %q\", nodeName)\n\t}\n\tif PodMatchesNodeLabels(pod, node) {"
  },
  {
    "id" : "43b1d607-8306-4ac2-ae2e-b41bc2688d3a",
    "prId" : 24598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7087d1ca-3c4a-4f05-80e4-7d0bbc86886f",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Why did you add this?\n",
        "createdAt" : "2016-04-25T05:23:28Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "6fe2d0de-c52d-42d8-8fef-7b8ab29c413e",
        "parentId" : "7087d1ca-3c4a-4f05-80e4-7d0bbc86886f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This gives us significant performance gains.\nTo clarify, currently for every container.Ports in each container, we are adding a HostPort to the \"ports\" result. However, if you don't have HostPort defined, it is 0 and \"0\" is explicitly ignored in PodFitsHostPorts which is the only function using this one.\n\nHowever, since we were returning \"0\" in the result previously, we didn't hit an optimization of:\nif len(wantPorts) == 0 {\n  return true, nil\n}\nso we were computing ports from all pods on that node.\nWhich made it significantly more expensive. \n\nNow we simply don't do it.\n",
        "createdAt" : "2016-04-25T07:21:54Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "60d61c0a-18c4-44f1-b1cb-da01094857ce",
        "parentId" : "7087d1ca-3c4a-4f05-80e4-7d0bbc86886f",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I see. Can you add a comment \"0 is explicitly ignored in PodFitsHostPorts, which is the only function that uses this value\" ?\n",
        "createdAt" : "2016-04-25T08:01:41Z",
        "updatedAt" : "2016-04-25T08:08:12Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "2acaab84-97eb-486d-96e0-75dc70847b6f",
        "parentId" : "7087d1ca-3c4a-4f05-80e4-7d0bbc86886f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-04-25T08:08:51Z",
        "updatedAt" : "2016-04-25T08:08:51Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1835c8528d784816b9555931392831840082d333",
    "line" : null,
    "diffHunk" : "@@ -1,1 +683,687 @@\t\t\t\t// \"0\" is explicitly ignored in PodFitsHostPorts,\n\t\t\t\t// which is the only function that uses this value.\n\t\t\t\tif podPort.HostPort != 0 {\n\t\t\t\t\tports[podPort.HostPort] = true\n\t\t\t\t}"
  },
  {
    "id" : "d5ecb483-378a-4536-b312-091ab012479a",
    "prId" : 23567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19684f75-94bb-44dd-9af9-ea5890d1eb79",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "use Cmp() on quantity\n",
        "createdAt" : "2016-05-06T16:25:09Z",
        "updatedAt" : "2016-05-17T04:30:20Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "6eb74351-9087-41ce-b555-00fe05b6c893",
        "parentId" : "19684f75-94bb-44dd-9af9-ea5890d1eb79",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nm, I see that this is diff object\n",
        "createdAt" : "2016-05-06T16:26:15Z",
        "updatedAt" : "2016-05-17T04:30:20Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "daa1fe5d-0a78-4f5d-915f-a44e73518725",
        "parentId" : "19684f75-94bb-44dd-9af9-ea5890d1eb79",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We get no benefit from that because result.Memory is int64\n\nOn Fri, May 6, 2016 at 12:25 PM, Derek Carr notifications@github.com\nwrote:\n\n> In plugin/pkg/scheduler/algorithm/predicates/predicates.go\n> https://github.com/kubernetes/kubernetes/pull/23567#discussion_r62353465\n> :\n> \n> > @@ -357,6 +357,16 @@ func getResourceRequest(pod *api.Pod) resourceRequest {\n> >         result.memory += requests.Memory().Value()\n> >         result.milliCPU += requests.Cpu().MilliValue()\n> >     }\n> > -   // take max_resource(sum_pod, any_init_container)\n> > -   for _, container := range pod.Spec.InitContainers {\n> > -       requests := container.Resources.Requests\n> > -       if mem := requests.Memory().Value(); mem > result.memory {\n> \n> use Cmp() on quantity\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23567/files/34568050edacec76ed78e1b16c3248f5cbdc81b3..805cb1e4b870ef2f22562afd5ecd559c82909659#r62353465\n",
        "createdAt" : "2016-05-06T16:33:36Z",
        "updatedAt" : "2016-05-17T04:30:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a53330700ac39ee61109c748fe665cf38581a5d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +363,367 @@\tfor _, container := range pod.Spec.InitContainers {\n\t\trequests := container.Resources.Requests\n\t\tif mem := requests.Memory().Value(); mem > result.memory {\n\t\t\tresult.memory = mem\n\t\t}"
  },
  {
    "id" : "a0cfa532-4872-4094-82fc-09855eb72f1f",
    "prId" : 23567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f486e0d4-1425-4549-b9e6-fff9d1bb752c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "same here\n",
        "createdAt" : "2016-05-06T16:25:21Z",
        "updatedAt" : "2016-05-17T04:30:20Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "2772ea16-fb09-4951-94f0-752d3a6b0ed9",
        "parentId" : "f486e0d4-1425-4549-b9e6-fff9d1bb752c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "nm\n",
        "createdAt" : "2016-05-06T16:26:20Z",
        "updatedAt" : "2016-05-17T04:30:20Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a53330700ac39ee61109c748fe665cf38581a5d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +366,370 @@\t\t\tresult.memory = mem\n\t\t}\n\t\tif cpu := requests.Cpu().MilliValue(); cpu > result.milliCPU {\n\t\t\tresult.milliCPU = cpu\n\t\t}"
  },
  {
    "id" : "ee08e6b3-03f1-4efe-8b8c-d8a471fbd97b",
    "prId" : 22985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f70192b-a48f-4844-bcfb-ae83f3ed790c",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "The code from here to the end of the function is correct, but seems a little overly-verbose. One slightly more concise way to write it is\n\n```\nif affinity.PodAffinity != nil {\n   if !checkNodeMatchesHardPodAffinity(pod, existingPods, node, allPods, affinity.PodAffinity) {\n       return false\n   }\n}\nif affinity.PodAntiAffinity != nil {\n   if !checkNodeMatchesHardPodAntiAffinity(pod, existingPods, node, affinity.PodAntiAffinity) {\n      return false\n   }\n}\nreturn true\n```\n",
        "createdAt" : "2016-04-03T20:56:56Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ba4f077e01bf5be20cfd9cbe74949f8eea611d",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +905,909 @@\n\t// check if the current node match the inter-pod affinity scheduling rules.\n\tif affinity.PodAffinity != nil {\n\t\tif !checker.NodeMatchesHardPodAffinity(pod, allPods, node, affinity.PodAffinity) {\n\t\t\treturn false"
  },
  {
    "id" : "f0ad9743-a0a1-492d-b9c4-bc94f57199a5",
    "prId" : 22985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12b2bb23-12b2-4199-a913-a48b3711bc05",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Thanks for remembering this. :) Can you add\n\n```\nTODO: Think about whether this can be simplified once we have controllerRef\n```\n",
        "createdAt" : "2016-04-03T21:10:29Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ba4f077e01bf5be20cfd9cbe74949f8eea611d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +791,795 @@\t\tif !podAffinityTermMatches {\n\t\t\t// TODO: Think about whether this can be simplified once we have controllerRef\n\t\t\t// Check if it is in special case that the requiredDuringScheduling affinity requirement can be disregarded.\n\t\t\t// If the requiredDuringScheduling affinity requirement matches a pod's own labels and namespace, and there are no other such pods\n\t\t\t// anywhere, then disregard the requirement."
  },
  {
    "id" : "eaeda326-9f37-433c-a6bf-2334463441d3",
    "prId" : 22985,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac8862c3-a454-4e53-b576-c0ddd3c4aaf3",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add to the end of the comment: \"This allows rules like \"schedule all of the pods of this collection to the same zone\" to not block forever because the first pod of the collection can't be scheduled.\"\n",
        "createdAt" : "2016-04-17T06:58:27Z",
        "updatedAt" : "2016-05-06T07:34:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "82ba4f077e01bf5be20cfd9cbe74949f8eea611d",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +793,797 @@\t\t\t// Check if it is in special case that the requiredDuringScheduling affinity requirement can be disregarded.\n\t\t\t// If the requiredDuringScheduling affinity requirement matches a pod's own labels and namespace, and there are no other such pods\n\t\t\t// anywhere, then disregard the requirement.\n\t\t\t// This allows rules like \"schedule all of the pods of this collection to the same zone\" to not block forever\n\t\t\t// because the first pod of the collection can't be scheduled."
  },
  {
    "id" : "3cd469bc-2eef-449f-82e0-c5eadce21e0d",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39b6b66e-bfe3-48e3-af7e-4dc59b723d5c",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "Not sure if I am missing something or misunderstood, but why to return here and not continue with other remaining vols? Similarly for other errors below. \n",
        "createdAt" : "2016-01-20T21:58:38Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "d42d65a7-9881-42b2-890a-d55bb9faabe2",
        "parentId" : "39b6b66e-bfe3-48e3-af7e-4dc59b723d5c",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "AFAIK, that's a bad state -- you shouldn't have a PVC-based volume that has no target PVC.\n",
        "createdAt" : "2016-01-20T22:06:42Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "c475448e-3b59-4cd4-a3ab-575149994c3b",
        "parentId" : "39b6b66e-bfe3-48e3-af7e-4dc59b723d5c",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "For my understanding, does that mean if there are n vols (as vol in volumes), if there is an issue with one of the vols, ignore all?\n",
        "createdAt" : "2016-01-20T22:09:45Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "dd777cf0-1e69-4aa6-aa5d-8154ec02c740",
        "parentId" : "39b6b66e-bfe3-48e3-af7e-4dc59b723d5c",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "The logic here is: If the pod is incorrectly specified, abort.\n\nHowever, I could see the argument either way -- I'm mostly ambivalent on the matter.\n",
        "createdAt" : "2016-01-20T22:14:59Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "3e471563-a516-481b-afcf-31334e642933",
        "parentId" : "39b6b66e-bfe3-48e3-af7e-4dc59b723d5c",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "A pod cannot use the persistentVolumeClaim volume without a ClaimName.  It would fail validation.  It is certainly an error here if there is no claimName.\n\nAs I wrote elsewhere in this thread, you need to use claim's pvc.Spec.VolumeName to get the backing PV and inspect its PersistentVolumeSource for a non-nil EBS volume (or GCE, if this PR covers that volume, too).\n",
        "createdAt" : "2016-01-21T02:35:51Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +185,189 @@\t\t\tpvcName := vol.PersistentVolumeClaim.ClaimName\n\t\t\tif pvcName == \"\" {\n\t\t\t\treturn fmt.Errorf(\"PersistentVolumeClaim had no name: %q\", pvcName)\n\t\t\t}\n\t\t\tpvc, err := c.pvcInfo.GetPersistentVolumeClaimInfo(namespace, pvcName)"
  },
  {
    "id" : "031b87d6-7451-4dc5-83e1-ba70f30cf5b6",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ca76d6c-6d16-4ca2-a5db-99da207cbf82",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This api logic should probably be looked over by @markturansky.. looks ok to me, but I'm not a PV expert. \n",
        "createdAt" : "2016-01-20T21:59:55Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1bce1386-9200-4a2d-b6a8-6e27669c6a52",
        "parentId" : "2ca76d6c-6d16-4ca2-a5db-99da207cbf82",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "Ok.  The logic is more or less copied from one of the other predicates below, so it should be fine, however.\n",
        "createdAt" : "2016-01-20T22:03:57Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "7eab7eac-f0b0-4d54-a872-1e7483e8164a",
        "parentId" : "2ca76d6c-6d16-4ca2-a5db-99da207cbf82",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "To really know what the PVClaim is backed by, you'd need to query for the PV and inspect its PersistentVolumeSource just like is happening with the VolumeSource in the code above.\n",
        "createdAt" : "2016-01-20T23:22:40Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +182,186 @@\t\tif id, ok := c.filter.FilterVolume(&vol); ok {\n\t\t\tfilteredVolumes[id] = true\n\t\t} else if vol.PersistentVolumeClaim != nil {\n\t\t\tpvcName := vol.PersistentVolumeClaim.ClaimName\n\t\t\tif pvcName == \"\" {"
  },
  {
    "id" : "9e92db64-28f0-4332-baf2-0ba7e0332f08",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30e6c284-8034-459c-83cc-701f36743fec",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "given the number of checks, consider collapsing the statements with ; \n",
        "createdAt" : "2016-01-20T22:00:54Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +188,192 @@\t\t\t}\n\t\t\tpvc, err := c.pvcInfo.GetPersistentVolumeClaimInfo(namespace, pvcName)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}"
  },
  {
    "id" : "a5aef74f-443f-4a6d-b74d-654ef91c0666",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ae5a1d9-6433-47d2-8440-df80cd938a81",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "You could do\n\n```\nif (!nodeSelectorMatches)\n     return false\n```\n\nhere since you know the function can never return true in that case.\n",
        "createdAt" : "2016-01-17T02:49:03Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +377,381 @@\t\treturn false\n\t}\n\n\t// 1. nil NodeSelector matches all nodes (i.e. does not filter out any nodes)\n\t// 2. nil []NodeSelectorTerm (equivalent to non-nil empty NodeSelector) matches no nodes"
  },
  {
    "id" : "4ea8d7b1-8e02-4eb6-a5d9-5d7ebb9ef1c7",
    "prId" : 15956,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a7117da-df62-46ee-a4d8-57e8643e297f",
        "parentId" : null,
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "Is this func supposed to test the equality (contain the same elements) of the string arrays?\n\nThis implementation will return true on the first matching pair of values and ignore the rest of the elements of the array.\n",
        "createdAt" : "2015-10-20T17:57:17Z",
        "updatedAt" : "2015-11-02T15:18:42Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "d70e0dd5-e6e7-4665-9be2-41401267570b",
        "parentId" : "5a7117da-df62-46ee-a4d8-57e8643e297f",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "this func test if two arrays have at least one common element. It returns true once the first one is encountered, and false if no common element is found.\n",
        "createdAt" : "2015-10-20T18:04:27Z",
        "updatedAt" : "2015-11-02T15:18:42Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      },
      {
        "id" : "a9421479-a820-4e06-a27d-50d9bf145d62",
        "parentId" : "5a7117da-df62-46ee-a4d8-57e8643e297f",
        "authorId" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "body" : "right, that's what I read in the code.  Maybe a comment to clarify that this is the intent and why it's ok to return true after 1 common value?  Can the rest of the values differ and that's ok?\n",
        "createdAt" : "2015-10-20T18:21:00Z",
        "updatedAt" : "2015-11-02T15:18:42Z",
        "lastEditedBy" : "727fc82d-d969-41a4-a614-7fefce94f9a6",
        "tags" : [
        ]
      },
      {
        "id" : "4fb4c542-9d94-495e-b4fa-c12c665e8342",
        "parentId" : "5a7117da-df62-46ee-a4d8-57e8643e297f",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "Sure, added comments.\n\nOn Tue, Oct 20, 2015 at 2:21 PM, Mark Turansky notifications@github.com\nwrote:\n\n> In plugin/pkg/scheduler/algorithm/predicates/predicates.go\n> https://github.com/kubernetes/kubernetes/pull/15956#discussion_r42533484\n> :\n> \n> > @@ -412,3 +429,14 @@ func MapPodsToMachines(lister algorithm.PodLister) (map[string][]*api.Pod, error\n> >     }\n> >     return machineToPods, nil\n> >  }\n> > +\n> > +func haveSame(a1, a2 []string) bool {\n> \n> right, that's what I read in the code. Maybe a comment to clarify that\n> this is the intent and why it's ok to return true after 1 common value? Can\n> the rest of the values differ and that's ok?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15956/files#r42533484.\n",
        "createdAt" : "2015-10-20T18:34:39Z",
        "updatedAt" : "2015-11-02T15:18:42Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbdd442675b07df9625b3e64da44042b5c5d057",
    "line" : null,
    "diffHunk" : "@@ -1,1 +435,439 @@\n// search two arrays and return true if they have at least one common element; return false otherwise\nfunc haveSame(a1, a2 []string) bool {\n\tfor _, val1 := range a1 {\n\t\tfor _, val2 := range a2 {"
  },
  {
    "id" : "ed6ecdbb-3397-4459-b672-910a2120dcc0",
    "prId" : 15956,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008cffff-d7e9-49a1-bbb2-1effb03776ef",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Not the most efficient implementation of disjoint set check. But, since the arrays are tiny, nbd.\n",
        "createdAt" : "2015-10-22T05:17:45Z",
        "updatedAt" : "2015-11-02T15:18:42Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbdd442675b07df9625b3e64da44042b5c5d057",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +435,439 @@\n// search two arrays and return true if they have at least one common element; return false otherwise\nfunc haveSame(a1, a2 []string) bool {\n\tfor _, val1 := range a1 {\n\t\tfor _, val2 := range a2 {"
  },
  {
    "id" : "4fc05baf-f436-4fb6-9d9a-13fc1c2feb1f",
    "prId" : 9613,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3584e18a-1917-4c15-8c96-f92a6d86d9fb",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should this be pushed down into the lister? the lister already ignores some things, IIRC.\n",
        "createdAt" : "2015-06-10T21:45:46Z",
        "updatedAt" : "2015-06-10T21:45:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "97634c7fbf32c8d5b564c0ed13eded90561db9b5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +384,388 @@\t\treturn map[string][]*api.Pod{}, err\n\t}\n\tpods = filterNonRunningPods(pods)\n\tfor _, scheduledPod := range pods {\n\t\thost := scheduledPod.Spec.NodeName"
  },
  {
    "id" : "158cfbcc-b15f-490a-a0bd-1649b2e91b21",
    "prId" : 9056,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a407df3-970d-4921-96c7-37225688851f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Medium-to-long term, anything related to specific volume implementations should move to pkg/volume and be part of the plugin interface.\n",
        "createdAt" : "2015-06-01T15:45:14Z",
        "updatedAt" : "2015-06-01T15:45:14Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "882462ad870de1ce5547f75e95f5ac9ca1ab990c",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +51,55 @@}\n\nfunc isVolumeConflict(volume api.Volume, pod *api.Pod) bool {\n\tif volume.GCEPersistentDisk != nil {\n\t\tdisk := volume.GCEPersistentDisk"
  }
]