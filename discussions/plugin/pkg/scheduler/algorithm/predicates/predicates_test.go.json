[
  {
    "id" : "55df64b9-7554-4fa3-9eae-ddc904c63c79",
    "prId" : 53135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53135#pullrequestreview-66720792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ae5ba2-a1b1-4911-9f27-a4901b5becb4",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "what about a test case if pvc doesn't exist?",
        "createdAt" : "2017-09-28T23:19:44Z",
        "updatedAt" : "2017-10-03T11:00:22Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "1d50a5c9-0a57-4e79-b083-f3d01508d79d",
        "parentId" : "f7ae5ba2-a1b1-4911-9f27-a4901b5becb4",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "there already is a test for that, look for \"pod with missing PVC is counted towards the PV limit\" above.",
        "createdAt" : "2017-10-02T13:50:42Z",
        "updatedAt" : "2017-10-03T11:00:22Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "f68c0456-9619-4715-9b3e-5e9772541bfc",
        "parentId" : "f7ae5ba2-a1b1-4911-9f27-a4901b5becb4",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "How about multiple PV objects not existing in the same pod and different pods?",
        "createdAt" : "2017-10-02T17:19:45Z",
        "updatedAt" : "2017-10-03T11:00:22Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "3eb12ae2-d6a4-4b0a-aee4-3ca11bbb9fa1",
        "parentId" : "f7ae5ba2-a1b1-4911-9f27-a4901b5becb4",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Added a test with two pods using the same deleted PV (=counted once) and two pods using a different deleted PV (=counted twice).",
        "createdAt" : "2017-10-03T11:02:33Z",
        "updatedAt" : "2017-10-03T11:02:33Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "2caae38d323720a96be34606589f41488ba82b87",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +1947,1951 @@\t\t\tmaxVols:      3,\n\t\t\tfits:         true,\n\t\t\ttest:         \"pod with unbound PVC is counted towards the PV limit\",\n\t\t},\n\t\t{"
  },
  {
    "id" : "35b76aba-7f87-46fc-b6b5-c65a5f2bc6e2",
    "prId" : 52421,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52421#pullrequestreview-69489540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69c827eb-b0a6-41d8-8957-d92327017e33",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "please also use `encode` in test.",
        "createdAt" : "2017-10-16T08:43:27Z",
        "updatedAt" : "2017-11-10T07:44:44Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "954c97fe6dbbd786dd1e662758087dafe0103f68",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +593,597 @@\t\t},\n\t\t{\n\t\t\tpod: newPod(\"m1\", \"UDP/127.0.0.1/8080\"),\n\t\t\tnodeInfo: schedulercache.NewNodeInfo(\n\t\t\t\tnewPod(\"m1\", \"UDP/127.0.0.1/9090\")),"
  },
  {
    "id" : "237637e1-11c8-4190-8ffa-f359a4119834",
    "prId" : 47179,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47179#pullrequestreview-43287758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60a6b204-7fc1-48ea-aac8-1b0abc272e92",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "add a description for this case.",
        "createdAt" : "2017-06-09T05:52:21Z",
        "updatedAt" : "2017-06-10T01:53:00Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "14b95884-9735-4068-9600-1898856db8ed",
        "parentId" : "60a6b204-7fc1-48ea-aac8-1b0abc272e92",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "done.   it's just a one line change, so I force update the second commit.",
        "createdAt" : "2017-06-10T01:53:27Z",
        "updatedAt" : "2017-06-10T01:53:27Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cecb070ca9da60b1cd006682ab1c8e6584d4361",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +498,502 @@\t\t\tstorageMedium: v1.StorageMediumMemory,\n\t\t\tnodeInfo: schedulercache.NewNodeInfo(\n\t\t\t\tnewResourcePod(schedulercache.Resource{MilliCPU: 2, Memory: 2, StorageOverlay: 5})),\n\t\t\tfits: true,\n\t\t\ttest: \"pod fit with memory medium\","
  },
  {
    "id" : "ba96493e-d629-4d50-845e-16714016e85c",
    "prId" : 27227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0efe119d-a121-4bd4-8608-1bf742c26ba0",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I was confused about the test. Both deletedPVCPod and deletedPVPod seem to be basically the same (pod with a volume with a volume source with a PVC with a name that doesn't resolve), so how are you testing both the\n\n`c.pvcInfo.GetPersistentVolumeClaimInfo(namespace, pvcName) != nil`\nand\n`c.pvInfo.GetPersistentVolumeInfo(pvName) != nil`\npaths?\n",
        "createdAt" : "2016-06-11T19:38:14Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "e4a35a76-feea-4390-a19d-1eda4f1c997c",
        "parentId" : "0efe119d-a121-4bd4-8608-1bf742c26ba0",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "The pod `deletedPVCPod` refers to a PVC that is missing and exercises the condition below.\n`c.pvcInfo.GetPersistentVolumeClaimInfo(namespace, pvcName) != nil`\n\nThe pod `deletedPVPod` refers to a PVC that exists but references a PV that is missing and hence exercises the condition below.\n`c.pvInfo.GetPersistentVolumeInfo(pvName) != nil`\n\nI have added test cases/scenarios to verify that having existing pods with missing PV or missing PVC result in these PVs being counted towards the node limit. I have verified the that the test cases execute both code paths by manually modifying the predicate to return error vs nil for both these conditions - this caused the valid test cases to fail, thereby confirming the code path execution. \n",
        "createdAt" : "2016-06-11T20:22:45Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "c9414989-b27d-4093-9657-f367c78060d2",
        "parentId" : "0efe119d-a121-4bd4-8608-1bf742c26ba0",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "if, for some reason, you end up doing another revision, it might make sense to rename \"deletedPV\" to \"pvcWithDeletedPV\" (or something similar), which I think would make it a bit clearer.\n",
        "createdAt" : "2016-06-13T14:53:29Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "06643874-d95b-4703-8ed4-5121d009b3e9",
        "parentId" : "0efe119d-a121-4bd4-8608-1bf742c26ba0",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "> if, for some reason, you end up doing another revision, it might make sense to rename \"deletedPV\" to \"pvcWithDeletedPV\" (or something similar), which I think would make it a bit clearer.\n\n+10\n",
        "createdAt" : "2016-06-13T14:59:25Z",
        "updatedAt" : "2016-06-13T22:23:24Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ce8b71ab41ef223a787068e80242838a719faa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1393,1397 @@\t\t},\n\t}\n\tdeletedPVCPod := &api.Pod{\n\t\tSpec: api.PodSpec{\n\t\t\tVolumes: []api.Volume{"
  },
  {
    "id" : "6993360c-1f3b-4bd1-89e7-42432a156b1e",
    "prId" : 24134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc4577f-298b-4d72-bc68-1f6badcc7470",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Please add tests for the following scenarios\n- toleration uses operator: Exists\n- multiple taints on the node and multiple tolerations on the pod\n- keys and values of taint and toleration match, but (non-empty) effect doesn't match, so fits == false\n- keys and values of taint and toleration match, effect of toleration is empty, effect of taint is NoSchedule, so fits == true\n- toleration does not match taint, but taint effect is PreferNoSchedule, so fits == true\n",
        "createdAt" : "2016-05-15T02:46:13Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52fb89ff7326b3570e9c42a435081dab559f610b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2629,2633 @@\t}\n\n\tfor _, test := range podTolerateTaintsTests {\n\t\ttolerationMatch := TolerationMatch{FakeNodeInfo(test.node)}\n\t\tnodeInfo := schedulercache.NewNodeInfo()"
  },
  {
    "id" : "2c753c43-9910-4253-bf1d-7d40393bb56a",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7affe63f-b121-41f7-b1cd-affd5f57927a",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "nit: in almost every other test like this, the field in this struct you call `test` is called `name`\n",
        "createdAt" : "2016-01-26T17:53:43Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2dbcdd19-aeca-4955-a3d5-7e2021783780",
        "parentId" : "7affe63f-b121-41f7-b1cd-affd5f57927a",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "The rest of the tests in this file use `test`, and mixing and matching in a single file seems like it would be more confusing...\n",
        "createdAt" : "2016-02-01T16:44:42Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +892,896 @@\t\tmaxVols      int\n\t\tfits         bool\n\t\ttest         string\n\t}{\n\t\t{"
  },
  {
    "id" : "d36e31b9-c9bc-43fc-9334-2fb7ef3b46f5",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4949c5ef-c923-43ea-9a53-505edda53edd",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "nit, put test names at top of these anonymous struct declarations\n",
        "createdAt" : "2016-01-26T17:53:59Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "20d5efc6-88d5-4b44-a723-84abc7e179ec",
        "parentId" : "4949c5ef-c923-43ea-9a53-505edda53edd",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "[see above]\n",
        "createdAt" : "2016-02-01T16:45:10Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +899,903 @@\t\t\tmaxVols:      4,\n\t\t\tfits:         true,\n\t\t\ttest:         \"fits when node capacity >= new pod's EBS volumes\",\n\t\t},\n\t\t{"
  },
  {
    "id" : "a171f6b2-62ef-4d24-944b-c9f8996639a2",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10b1e184-2693-4a66-9b8e-2ac67017212b",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "This doesn't sound right. Because it should matches all objects.\n\n```\n// An empty node selector term matches all objects. A null node selector term\n// matches no objects.\ntype NodeSelectorTerm struct {\n```\n\n@davidopp @kevin-wangzefeng  This is serious problem..\n",
        "createdAt" : "2016-01-20T04:28:02Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      },
      {
        "id" : "af393657-f37e-4e00-9d91-e0f4fb3b61b3",
        "parentId" : "10b1e184-2693-4a66-9b8e-2ac67017212b",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "No, currently we changed the semantic, but not description in the document and the code are not updated yet. We working on refreshing them.\n",
        "createdAt" : "2016-01-20T04:41:54Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "60c1aee6-24c3-494c-8911-cd33877f50d4",
        "parentId" : "10b1e184-2693-4a66-9b8e-2ac67017212b",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "This is the comments of NodeSelectorTerm in api/types.go in this PR.\nIf it's changed, please change that as well.\n",
        "createdAt" : "2016-01-20T04:52:07Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +836,840 @@\t\t\t\t\"GPU\": \"NVIDIA-GRID-K1\",\n\t\t\t},\n\t\t\tfits: false,\n\t\t\ttest: \"Pod with multiple matchExpressions ANDed that doesn't match the existing node\",\n\t\t},"
  },
  {
    "id" : "6fba2474-7d89-495e-87f0-5fedc3cbef13",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43001385-0d6d-4133-9dc2-e446670fe3ee",
        "parentId" : null,
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "This isn't defined in #18261..\n",
        "createdAt" : "2016-01-20T04:30:35Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +902,906 @@\t\t\t\t\"foo\": \"bar\",\n\t\t\t},\n\t\t\tfits: false,\n\t\t\ttest: \"Pod with an Affinity both requiredDuringSchedulingRequiredDuringExecution and \" +\n\t\t\t\t\"requiredDuringSchedulingIgnoredDuringExecution indicated that don't match node's labels and won't schedule onto the node\","
  },
  {
    "id" : "ea816261-43e9-4969-b4ee-29e4821012f1",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d389576e-8011-4b2b-b642-8a7cf7f6a3ed",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "this should be false; see my earlier comment about how to handle the situation where both are set\n",
        "createdAt" : "2016-01-28T07:22:59Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +641,645 @@\t\t\t\t\"mem-type\": \"DDR3\",\n\t\t\t},\n\t\t\tfits: true,\n\t\t\ttest: \"Pod with matchExpressions using NotIn operator that matches the existing node\",\n\t\t},"
  },
  {
    "id" : "05e3f2dd-d5e1-4d3a-b931-1894b47e39d8",
    "prId" : 19083,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c610971-265e-4b74-ad1d-2fe43f30cfd5",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Aren't you essentially changing the node-status updates here?  Why would you breakout the Allocatable, separate from Capacity?  IMHO we should create structure under capacity.  I must admit I didn't fully review this until now.  /cc @davidopp \n\nIs capacity used in other areas differently?\n\nIs this to allow for backwards compatibility? \n",
        "createdAt" : "2016-01-18T15:20:14Z",
        "updatedAt" : "2016-01-20T07:36:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "43f197f7-154e-4269-bb48-93711e49c174",
        "parentId" : "2c610971-265e-4b74-ad1d-2fe43f30cfd5",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "@timothysc are you asking about the test or about the feature? API is here\nhttps://github.com/kubernetes/kubernetes/pull/18189/files\n\nIIUC the scheduler only needs to work with allocatable because we are guaranteed to either be using Kuebelets that publish allocatable, or the API server will default allocatable from capacity if Kubelet is not publishing allocatable.\n",
        "createdAt" : "2016-01-18T22:09:43Z",
        "updatedAt" : "2016-01-20T07:36:37Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0202a206b81ccc579feff77ea4593bfb8ed2c6e4",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +139,143 @@\n\tfor _, test := range enoughPodsTests {\n\t\tnode := api.Node{Status: api.NodeStatus{Capacity: makeResources(10, 20, 32).Capacity, Allocatable: makeAllocatableResources(10, 20, 32)}}\n\n\t\tfit := ResourceFit{FakeNodeInfo(node)}"
  }
]