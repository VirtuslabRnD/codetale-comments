[
  {
    "id" : "056279eb-c9aa-417e-92ba-ba97de88aab9",
    "prId" : 38503,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38503#pullrequestreview-14911335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f666ca60-169a-4f02-b902-c596f780c097",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Wjat is the purpose of this second testcase? What does it give us?",
        "createdAt" : "2017-01-03T10:16:46Z",
        "updatedAt" : "2017-01-03T10:45:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e180903f-7e16-4188-9ead-3da12365f509",
        "parentId" : "f666ca60-169a-4f02-b902-c596f780c097",
        "authorId" : "7ab0c2e3-7a16-47e0-9ccf-0e1bbb697d37",
        "body" : "i was using it to confirm that binding works as expected when ttl > binding time, basically it was useful during debugging",
        "createdAt" : "2017-01-03T10:44:44Z",
        "updatedAt" : "2017-01-03T10:45:30Z",
        "lastEditedBy" : "7ab0c2e3-7a16-47e0-9ccf-0e1bbb697d37",
        "tags" : [
        ]
      }
    ],
    "commit" : "530ee716e33c9b918d4efd999c799faef9dd9c62",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +319,323 @@\t\t{\n\t\t\tExpected:        map[string]bool{firstPod.Name: true},\n\t\t\tCacheTTL:        10 * time.Second,\n\t\t\tBindingDuration: 300 * time.Millisecond,\n\t\t},"
  },
  {
    "id" : "20027b97-411f-4fc0-ad12-44d461c338e9",
    "prId" : 35932,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35932#pullrequestreview-6882704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98c33ef2-01fa-44a0-a85b-8f7b94bc8cc2",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Shouldn't we could lines vs. len()?\n",
        "createdAt" : "2016-11-02T15:35:02Z",
        "updatedAt" : "2016-11-03T17:53:52Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "b77630b7-ec6a-4db2-a990-97535cc007e1",
        "parentId" : "98c33ef2-01fa-44a0-a85b-8f7b94bc8cc2",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "hmmm, yup considered that to, but this is more precise, missing `\\n`-> miss large non delimited values.  ?  \n",
        "createdAt" : "2016-11-02T15:58:49Z",
        "updatedAt" : "2016-11-03T17:53:52Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "e721f687-2f96-458d-81f8-a0a73a82a159",
        "parentId" : "98c33ef2-01fa-44a0-a85b-8f7b94bc8cc2",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "+0 either way is ok.  i think `\\n` is more coupled .... \n",
        "createdAt" : "2016-11-02T16:09:41Z",
        "updatedAt" : "2016-11-03T17:53:52Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "0d481fa0-a711-459a-aed4-20729f762720",
        "parentId" : "98c33ef2-01fa-44a0-a85b-8f7b94bc8cc2",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I only ask b/c 150 is arbitrary vs. looking for > 1 line.. which is what the rollup should produce. \n",
        "createdAt" : "2016-11-02T16:11:38Z",
        "updatedAt" : "2016-11-03T17:53:52Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "19989eaa-ecfd-4ddb-bbda-baa40754ca87",
        "parentId" : "98c33ef2-01fa-44a0-a85b-8f7b94bc8cc2",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "thats true, 150 seemed a little magic to me, 1 line more precise.  Maybe we should say 32K max string size or something?\n",
        "createdAt" : "2016-11-02T18:38:52Z",
        "updatedAt" : "2016-11-03T17:53:52Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d5bc6759e4751f941a348a1f990ebb7e828673d",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +388,392 @@\t\t\tFailedPredicates: failedPredicatesMap,\n\t\t}\n\t\tif len(fmt.Sprint(expectErr)) > 150 {\n\t\t\tt.Errorf(\"message is too spammy ! %v \", len(fmt.Sprint(expectErr)))\n\t\t}"
  },
  {
    "id" : "c6ad2985-23cf-4919-aec5-abae039e3809",
    "prId" : 26016,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "730c9105-5fda-42f5-9cf1-05bf99c2079e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We rely on the fact the schedulercache is long here and it won't expire. Can you please add explicit comment about it?\n",
        "createdAt" : "2016-06-22T09:25:44Z",
        "updatedAt" : "2016-06-24T23:12:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6a0f4585-4f5a-4469-9659-5185ac0499ac",
        "parentId" : "730c9105-5fda-42f5-9cf1-05bf99c2079e",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "That's not true. We don't rely on any kind of expiration here.. That's why it _Add_ (confirm) first..\nOf course, I will add a comment on it.\n",
        "createdAt" : "2016-06-22T20:28:11Z",
        "updatedAt" : "2016-06-24T23:12:09Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cd55e8e5288ad11509e76c98bb5025d244a7f59",
    "line" : null,
    "diffHunk" : "@@ -1,1 +256,260 @@\t// explicitly AddPod will as well correct the behavior.\n\tfirstPod.Spec.NodeName = \"machine1\"\n\tif err := scache.AddPod(firstPod); err != nil {\n\t\tt.Fatalf(\"err: %v\", err)\n\t}"
  },
  {
    "id" : "eeb39993-76e2-4af7-b5dd-5fbbd6a956ef",
    "prId" : 6179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b6efb1e-0dfe-4ff1-bf26-a31f8fd27632",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Perhaps verify that my fix from the other day isn't plumbed in by asserting that the pod still exists in the assumedPods store.\n",
        "createdAt" : "2015-03-31T20:41:58Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "48a8796e-a796-4047-b859-02af435da8a4",
        "parentId" : "2b6efb1e-0dfe-4ff1-bf26-a31f8fd27632",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I don't expect it to interfere since I'm directly hitting the store, but the assertion will make the test clearer so done\n",
        "createdAt" : "2015-04-03T19:06:08Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7864aa230183d830b810ef3128b176d2f732ad9",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +258,262 @@\tevents.Stop()\n\n\tscheduledPodStore.Delete(pod)\n\t_, exists, _ = assumedPodsStore.Get(pod)\n\tif !exists {"
  },
  {
    "id" : "2f44822c-46cf-472a-bfc3-ca68c95ae811",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47053d45-68a7-42ba-b80b-7a795f87bf70",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "We don't tend to test logging in our code.  And, until something actually consumes this, it's just glorified logging.  So, my take is that you don't test event generation during scheduler unit test, but once you add code that closes the control loop and actuates based on events, then you need an e2e test of that behavior.  \n",
        "createdAt" : "2014-10-15T17:32:29Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "2245b66b-b166-4ad4-9bb7-070bef857fe7",
        "parentId" : "47053d45-68a7-42ba-b80b-7a795f87bf70",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's easy to unit test and it's already done, so I'm not going to take it out. But I agree that an e2e test is also appropriate.\n",
        "createdAt" : "2014-10-15T18:21:48Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +105,109 @@\t\t}\n\t\ts := New(c)\n\t\tcalled := make(chan struct{})\n\t\tevents := record.GetEvents(func(e *api.Event) {\n\t\t\tif e, a := item.eventReason, e.Reason; e != a {"
  }
]