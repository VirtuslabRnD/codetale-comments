[
  {
    "id" : "8881c47e-030e-42e8-aefa-b30cb6fa8dff",
    "prId" : 51783,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51783#pullrequestreview-61955986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "859772d0-137f-4e07-9d18-e527962b2fea",
        "parentId" : null,
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "Remove this new line.",
        "createdAt" : "2017-09-05T01:35:54Z",
        "updatedAt" : "2017-10-26T04:11:54Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "260bfbcf-37f5-4a7e-a1b1-877c184535dc",
        "parentId" : "859772d0-137f-4e07-9d18-e527962b2fea",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "Please remove this line. The rest LGTM.",
        "createdAt" : "2017-09-11T21:05:16Z",
        "updatedAt" : "2017-10-26T04:11:54Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "968df828a00f76c5c8e77912b5a3a52dabc9ccca",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +32,36 @@\nconst (\n\n\t// ClusterAutoscalerProvider defines the default autoscaler provider\n\tClusterAutoscalerProvider = \"ClusterAutoscalerProvider\""
  },
  {
    "id" : "efa6ba10-8ad5-44bb-aff6-785a023400ec",
    "prId" : 32862,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32862#pullrequestreview-2274993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e8ca688-7558-4052-a9c4-2fbaca680df7",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "why does this take factory.PluginFactoryArgs as an argument if it doesn't use it?\n",
        "createdAt" : "2016-09-30T00:52:51Z",
        "updatedAt" : "2016-09-30T06:20:15Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "4af27114-c160-4d0a-aeb2-3c877f174952",
        "parentId" : "9e8ca688-7558-4052-a9c4-2fbaca680df7",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "oh yeah - I should have decribed it.\nBasically, this is preparation to migrate SelectorSpreading to map-reduce-like framework:\nhttps://github.com/kubernetes/kubernetes/blob/master/plugin/pkg/scheduler/algorithm/priorities/selector_spreading.go#L41\n\nThe problem is that for this priority, to avoid computing the same time multiple times, we need to precompute services of a given pod (for now also RCs and RSs, but this will change after migration to ownerref, but services still be there).\nSo we need some kind of ServiceLister to be available to the fuction computing metadata.\n\nThe most cleaner way I came up with (which is also consistent with priorities and predicates) is to take this lister from PluginFactoryArgs at the registration moment.\n\nSo as soon as this PR is merged (I wanted to avoid making it significantly larger), the returned MetadataProducer here will be PriorityMetadata which will be taking \"serviceLister\" (from PluginFactoryArgs) as an argument.\n\nSo it will be used in the next PR.\n",
        "createdAt" : "2016-09-30T06:25:30Z",
        "updatedAt" : "2016-09-30T06:25:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3bbbbdcd-157d-40b2-9bff-a3362aeaac83",
        "parentId" : "9e8ca688-7558-4052-a9c4-2fbaca680df7",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "That makes sense.\n",
        "createdAt" : "2016-09-30T06:34:45Z",
        "updatedAt" : "2016-09-30T06:34:45Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6598c181f7519cc9c8909edd56f78ab01b99bf20",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +61,65 @@\n\tfactory.RegisterPriorityMetadataProducerFactory(\n\t\tfunc(args factory.PluginFactoryArgs) algorithm.MetadataProducer {\n\t\t\treturn priorities.PriorityMetadata\n\t\t})"
  },
  {
    "id" : "9aa97dd3-b8b3-47b3-8b68-6fb75058a011",
    "prId" : 31605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7230d6c-577e-410e-af0f-e2c2b8a5777a",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "As I wrote in the previous PR - this is not enough for the pod to actually be equivalent to the other one.\nWe should probably open an issue for this particular problem and discuss it there.\n",
        "createdAt" : "2016-08-31T14:07:04Z",
        "updatedAt" : "2016-10-10T08:25:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8feb0214-a3c8-4301-aaff-62579fdf667a",
        "parentId" : "d7230d6c-577e-410e-af0f-e2c2b8a5777a",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "A quick note:\n\nnamespace\nlabels\nsome annotations (PodAffinity, and others?)\n\nHow to enforce that when someone will add a new predicate/priority this will be mirrored here...\n",
        "createdAt" : "2016-09-01T08:06:55Z",
        "updatedAt" : "2016-10-10T08:25:30Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "577ad5b4-41c2-4cc8-8b7c-fd037862cf70",
        "parentId" : "d7230d6c-577e-410e-af0f-e2c2b8a5777a",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "@wojtek-t Issue fired: https://github.com/kubernetes/kubernetes/issues/32024\n",
        "createdAt" : "2016-09-03T04:02:18Z",
        "updatedAt" : "2016-10-10T08:25:30Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "204dbe7fdd3bcc88916b359a71baf59f2c3807a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +243,247 @@\n// EquivalencePod is a group of pod attributes which can be reused as equivalence to schedule other pods.\ntype EquivalencePod struct {\n\tControllerRef api.OwnerReference\n}"
  },
  {
    "id" : "f0a65ef6-901c-45dd-b116-8330dda169a1",
    "prId" : 30274,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "It seems like this will fight with LeastRequestedPriority.\n\nThis would probably be a good time for us to re-think the mechanism we use to configure the scheduler policies Today we have a scheduler config file if the user wants to override the defaults, but really we should be using ConfigMap (see #25497). We need some mechanism that works when the user can't access the machine where the scheduler is running, like on GKE.\n",
        "createdAt" : "2016-08-14T06:25:17Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "07a75c1c-b08e-42c4-9795-5dc549e07127",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Why? If yes, what would be the purpose of `DefaultPriorities()` func declared below? \n",
        "createdAt" : "2016-08-16T09:44:17Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "b0755213-8bbb-4030-814e-9eb4368a7c13",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Do you agree with me that your new function will fight LeastRequestPriority? How do you expect users to disable LeastRequestPriority and enable your function?\n",
        "createdAt" : "2016-08-16T10:02:39Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "cf20481e-427a-4e32-9db7-02071f5997a4",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@davidopp - this function is not used by default - by default we are using what is defined in \"defaultPriorities\", and the new function is not there.\nI agree that it's possible to manually configure scheduler to use both, but is it a problem?\n",
        "createdAt" : "2016-08-17T08:03:41Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b974843-7772-4c8f-91d6-6886f48a4051",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Right, I understand that this function is not used by default. The thing I don't understand is how we intend to use this function. We can enable it using scheduler config file, but we cannot disable LeastRequestedPriority, because LeastRequestedPriority is a default priority function.\n\nIt's not clear to me that this PR is useful without some mechanism to disable LeastRequestedPriority when you enable MostRequestedPriority.\n",
        "createdAt" : "2016-08-17T08:25:29Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "688d0a74-f6d8-4f86-96f9-504e30483276",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - so basically this PR in the current shape is a no-op (and it's intended to be).\nThe next PR will do the real work, once we already have the new function registered.\n\n> We can enable it using scheduler config file, but we cannot disable LeastRequestedPriority,\n\nWhy? I looked into the code and it seems that when you define the policy-config, then it doesn't use any default predicates/priorities - it only uses the ones defined in you policy config.\n\nAnyway - I think that the desired solution is slightly different. Currently we have something called \"DefaultAlgorithmProvider\" which is using default predicates and priorities.\nHow I would see the solution is to create a new algorithm provider (ClusterAutoscalerAlgorithmProvider (probably we need a better name) that would differ from DefaultAlgorithmProvider.\n\nThen, (when cluster autoscaler is switched on) we will set \"--algorithm-provider=ClusterAutoscalerAlgorithmProvider\" flag on the scheduler, and it will just be working.\n\nAm I missing something?\n",
        "createdAt" : "2016-08-17T08:58:13Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a53ae243-45a4-4b82-bf54-efb33d4940bd",
        "parentId" : "c2fcc945-dedd-44a7-9310-3cc08cd33c85",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "> Why? I looked into the code and it seems that when you define the policy-config, then it doesn't use any default predicates/priorities - it only uses the ones defined in you policy config.\n\nOh sorry, you're right.\n\nAnd the idea about using --algorithm-provider sounds good -- I had forgotten about that.\n",
        "createdAt" : "2016-08-17T09:24:29Z",
        "updatedAt" : "2016-08-18T06:34:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "de2fea95ca6923f70973ba65e76f12ad86b8b72c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +95,99 @@\tfactory.RegisterFitPredicate(\"MatchNodeSelector\", predicates.PodSelectorMatches)\n\t// Optional, cluster-autoscaler friendly priority function - give used nodes higher priority.\n\tfactory.RegisterPriorityFunction(\"MostRequestedPriority\", priorities.MostRequestedPriority, 1)\n}\n"
  },
  {
    "id" : "0f51239b-e5ed-47cc-8fd3-208808c62342",
    "prId" : 24134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f597ff4-df6f-45ab-bbc2-80a4ef41426d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "This should be one of the GeneralPredicates\n",
        "createdAt" : "2016-05-15T00:47:33Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "66cb30ee-f4ad-4b00-a1e6-d44a3c7a142d",
        "parentId" : "7f597ff4-df6f-45ab-bbc2-80a4ef41426d",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "But if that breaks some of the kubelet tests for some reason, then leave this the way you have it, and we can move this to GeneralPredicates in the next release. (Though hopefully it wouldn't break any kubelet tests...)\n",
        "createdAt" : "2016-05-15T02:57:37Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "9a117329-ea60-4111-89f0-956ca4b8e3f2",
        "parentId" : "7f597ff4-df6f-45ab-bbc2-80a4ef41426d",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "Yes, moving this to GeneralPredicates in the next release looks better.\n",
        "createdAt" : "2016-05-15T04:27:07Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      }
    ],
    "commit" : "52fb89ff7326b3570e9c42a435081dab559f610b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +147,151 @@\t\tfactory.RegisterFitPredicate(\"GeneralPredicates\", predicates.GeneralPredicates),\n\n\t\t// Fit is determined based on whether a pod can tolerate all of the node's taints\n\t\tfactory.RegisterFitPredicateFactory(\n\t\t\t\"PodToleratesNodeTaints\","
  },
  {
    "id" : "764d251f-dbea-4faf-8832-d573acd38dc5",
    "prId" : 20204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc7db711-1bf8-443a-b337-d99a1b78341d",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add to the comment: \"This predicate is actually a default predicate, because it is invoked from predicates.GeneralPredicates()\"\n\n(otherwise people might assume all of the predicate functions mentioned in init() are not default predicates)\n",
        "createdAt" : "2016-02-18T07:43:47Z",
        "updatedAt" : "2016-04-10T17:31:11Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ed85479a73924a69f915e68dfaf005020a4e45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +78,82 @@\t// packages required by the pod or a small total size of already-installed packages required by the pod.\n\tfactory.RegisterPriorityFunction(\"ImageLocalityPriority\", priorities.ImageLocalityPriority, 1)\n\t// Fit is defined based on the absence of port conflicts.\n\t// This predicate is actually a default predicate, because it is invoked from\n\t// predicates.GeneralPredicates()"
  },
  {
    "id" : "33a1ea83-7727-48a6-8815-98d01b2598bd",
    "prId" : 20204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b8b66f2-b41b-4dff-9443-e703789101db",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add to the comment: \"This predicate is actually a default predicate, because it is invoked from predicates.GeneralPredicates()\"\n",
        "createdAt" : "2016-02-18T07:43:50Z",
        "updatedAt" : "2016-04-10T17:31:11Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ed85479a73924a69f915e68dfaf005020a4e45",
    "line" : null,
    "diffHunk" : "@@ -1,1 +82,86 @@\t// predicates.GeneralPredicates()\n\tfactory.RegisterFitPredicate(\"PodFitsHostPorts\", predicates.PodFitsHostPorts)\n\t// Fit is determined by resource availability.\n\t// This predicate is actually a default predicate, because it is invoked from\n\t// predicates.GeneralPredicates()"
  },
  {
    "id" : "81861592-d4e3-4175-b132-3cfbcc719009",
    "prId" : 20204,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ddce980-fc6b-409d-892c-4714a130a531",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add to the comment: \"This predicate is actually a default predicate, because it is invoked from predicates.GeneralPredicates()\"\n",
        "createdAt" : "2016-02-18T07:43:53Z",
        "updatedAt" : "2016-04-10T17:31:11Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ed85479a73924a69f915e68dfaf005020a4e45",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +91,95 @@\t\t},\n\t)\n\t// Fit is determined by the presence of the Host parameter and a string match\n\t// This predicate is actually a default predicate, because it is invoked from\n\t// predicates.GeneralPredicates()"
  },
  {
    "id" : "fc97405d-b068-40f3-a9c1-716ee1bb8b0e",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "901d8525-b8c6-45cc-8b1b-97b4f758f9b6",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "What's missing here is selective provider defaults.  /cc @davidopp   \n",
        "createdAt" : "2016-01-20T22:48:16Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "0ddfd69a-268d-40fa-84cc-fce5b3c5daed",
        "parentId" : "901d8525-b8c6-45cc-8b1b-97b4f758f9b6",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "Agreed.  I was thinking about that while I was writing this.\n",
        "createdAt" : "2016-01-21T16:48:35Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +110,114 @@\n\t\t// Fit is determined by whether or not there would be too many AWS EBS volumes attached to the node\n\t\tfactory.RegisterFitPredicateFactory(\n\t\t\t\"MaxEBSVolumeCount\",\n\t\t\tfunc(args factory.PluginFactoryArgs) algorithm.FitPredicate {"
  },
  {
    "id" : "31e2cee7-19f8-42ca-ab5a-1971007869e2",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f3461e8-7b3f-4e93-9387-1c40988d3791",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I would inject this name, it is not an invariant that there will always be only one PD type.\n",
        "createdAt" : "2016-01-22T03:29:12Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@// getMaxVols checks the max PD volumes environment variable, otherwise returning a default value\nfunc getMaxVols(defaultVal int) int {\n\tif rawMaxVols := os.Getenv(\"KUBE_MAX_PD_VOLS\"); rawMaxVols != \"\" {\n\t\tif parsedMaxVols, err := strconv.Atoi(rawMaxVols); err != nil {\n\t\t\tglog.Errorf(\"Unable to parse maxiumum PD volumes value, using default of %v: %v\", defaultVal, err)"
  },
  {
    "id" : "230a4918-9cfe-4898-a1c5-67d3e1afb751",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce1e64c4-3f78-43a2-b187-5fc72bf21779",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Nit: famous last words before all the flesh is melted off of your skull by the ugliness required to make something generic\n",
        "createdAt" : "2016-01-22T03:30:33Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "0b2d05de-54de-4378-b19c-5a2b7a712298",
        "parentId" : "ce1e64c4-3f78-43a2-b187-5fc72bf21779",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : ":fire:  :skull: \n",
        "createdAt" : "2016-01-22T15:38:59Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +123,127 @@\t\t\t\"MaxGCEPDVolumeCount\",\n\t\t\tfunc(args factory.PluginFactoryArgs) algorithm.FitPredicate {\n\t\t\t\t// TODO: allow for generically parameterized scheduler predicates, because this is a bit ugly\n\t\t\t\tmaxVols := getMaxVols(DefaultMaxGCEPDVolumes)\n\t\t\t\treturn predicates.NewMaxPDVolumeCountPredicate(predicates.GCEPDVolumeFilter, maxVols, args.PVInfo, args.PVCInfo)"
  },
  {
    "id" : "f90fbcc0-718f-4481-b31f-15209b150f17",
    "prId" : 19880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b30d2f5-2177-41a6-808f-5cfb1325dbb9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add comment like you did for the other one: \"// Fit is determined by whether or not there would be too many GCE PD volumes attached to the node\"\n",
        "createdAt" : "2016-02-01T23:41:57Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "c6b06a8c-e956-4028-b076-3ec562b17c53",
        "parentId" : "2b30d2f5-2177-41a6-808f-5cfb1325dbb9",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "ack, done\n",
        "createdAt" : "2016-02-02T15:21:53Z",
        "updatedAt" : "2016-02-02T21:23:12Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d436ff0808d39bb6b8539a13fd4e602cfaade42",
    "line" : null,
    "diffHunk" : "@@ -1,1 +120,124 @@\n\t\t// Fit is determined by whether or not there would be too many GCE PD volumes attached to the node\n\t\tfactory.RegisterFitPredicateFactory(\n\t\t\t\"MaxGCEPDVolumeCount\",\n\t\t\tfunc(args factory.PluginFactoryArgs) algorithm.FitPredicate {"
  },
  {
    "id" : "efecf1fa-3ef2-486f-8e87-9565b97e394b",
    "prId" : 14724,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31491339-77ba-4c7f-b567-d1e13b60de59",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "need to continue registering under the old name for backwards compatibility\n",
        "createdAt" : "2015-09-29T17:55:37Z",
        "updatedAt" : "2015-09-30T07:15:58Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e11cd6028368c1720c2ea08d39b3e173b13c27c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +55,59 @@\treturn sets.NewString(\n\t\t// Fit is defined based on the absence of port conflicts.\n\t\tfactory.RegisterFitPredicate(\"PodFitsHostPorts\", predicates.PodFitsHostPorts),\n\t\t// Fit is determined by resource availability.\n\t\tfactory.RegisterFitPredicateFactory("
  },
  {
    "id" : "f8e33adb-d8bf-42dd-91dc-4f28fd5e39aa",
    "prId" : 10667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e656e7-42fc-4d31-9fd4-2c1d14681bf5",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "On line 70 you should change ServiceSpreadingPriority -> SelectorSpreadingPriority\n",
        "createdAt" : "2015-07-25T06:23:30Z",
        "updatedAt" : "2015-07-31T14:29:15Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "8269098b-0dd3-4b54-b35c-a90964df5722",
        "parentId" : "f7e656e7-42fc-4d31-9fd4-2c1d14681bf5",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2015-07-27T14:23:42Z",
        "updatedAt" : "2015-07-31T14:29:15Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "94eb52de33d513958bcdb70cc7595d71ecfa1fe3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +71,75 @@\t\t\tfactory.PriorityConfigFactory{\n\t\t\t\tFunction: func(args factory.PluginFactoryArgs) algorithm.PriorityFunction {\n\t\t\t\t\treturn priorities.NewSelectorSpreadPriority(args.ServiceLister, args.ControllerLister)\n\t\t\t\t},\n\t\t\t\tWeight: 1,"
  },
  {
    "id" : "df31409d-f317-45ed-b308-e7c512e15c9a",
    "prId" : 10667,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "045ac979-df24-49b0-9389-c4bae98e6461",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "1.0.0 shipped with `ServiceSpreadingPriority` (https://github.com/GoogleCloudPlatform/kubernetes/blob/release-1.0/plugin/pkg/scheduler/algorithmprovider/defaults/defaults.go#L70). This rename breaks backwards compatibility with serialized scheduler config files. I'll open an issue to revert the name (or alias the old name)\n",
        "createdAt" : "2015-08-11T17:58:55Z",
        "updatedAt" : "2015-08-11T17:59:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "5c69bf64-ab7f-41e6-9206-aa11416d18d0",
        "parentId" : "045ac979-df24-49b0-9389-c4bae98e6461",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Good catch @liggitt. Thanks.\n",
        "createdAt" : "2015-08-11T18:02:49Z",
        "updatedAt" : "2015-08-11T18:02:49Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "94eb52de33d513958bcdb70cc7595d71ecfa1fe3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +68,72 @@\t\t// spreads pods by minimizing the number of pods (belonging to the same service) on the same minion.\n\t\tfactory.RegisterPriorityConfigFactory(\n\t\t\t\"SelectorSpreadPriority\",\n\t\t\tfactory.PriorityConfigFactory{\n\t\t\t\tFunction: func(args factory.PluginFactoryArgs) algorithm.PriorityFunction {"
  }
]