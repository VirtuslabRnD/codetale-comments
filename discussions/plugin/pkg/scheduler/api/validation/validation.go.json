[
  {
    "id" : "3645caa4-d645-420b-89b7-c91e952fcf40",
    "prId" : 45122,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45122#pullrequestreview-36679783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df8d5c1d-4603-444d-b5a4-090d9d3f4845",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "prefer to `priority.Weight > schedulerapi.MaxWeight`, it'll align with checking against `MaxTotalPriority`.",
        "createdAt" : "2017-05-08T01:14:30Z",
        "updatedAt" : "2017-05-08T01:14:30Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ae3136f5df2982c6eae2184734c7708c9fa26cb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\tfor _, priority := range policy.Priorities {\n\t\tif priority.Weight <= 0 || priority.Weight >= schedulerapi.MaxWeight {\n\t\t\tvalidationErrors = append(validationErrors, fmt.Errorf(\"Priority %s should have a positive weight applied to it or it has overflown\", priority.Name))\n\t\t}"
  },
  {
    "id" : "96d6841c-ecfa-46c2-83ea-f8d1d328c90b",
    "prId" : 44883,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44883#pullrequestreview-41133246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fca01f5f-0c9c-4941-87a5-42d38660848d",
        "parentId" : null,
        "authorId" : "72156db3-c40b-4455-9838-c12c0c606019",
        "body" : "Can we reuse `IsBinder`?",
        "createdAt" : "2017-05-31T02:11:02Z",
        "updatedAt" : "2017-06-05T20:24:10Z",
        "lastEditedBy" : "72156db3-c40b-4455-9838-c12c0c606019",
        "tags" : [
        ]
      },
      {
        "id" : "a85d4a88-e876-46ec-9a1a-97b4eddd5cd0",
        "parentId" : "fca01f5f-0c9c-4941-87a5-42d38660848d",
        "authorId" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "body" : "This is actually the config, not the extender implementation. The config doesn't have an equivalent method.",
        "createdAt" : "2017-05-31T04:58:23Z",
        "updatedAt" : "2017-06-05T20:24:10Z",
        "lastEditedBy" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f179bf9364e8fafda7164698d3ee9b8360dcfb8",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +40,44 @@\t\t\tvalidationErrors = append(validationErrors, fmt.Errorf(\"Priority for extender %s should have a positive weight applied to it\", extender.URLPrefix))\n\t\t}\n\t\tif extender.BindVerb != \"\" {\n\t\t\tbinders++\n\t\t}"
  },
  {
    "id" : "53c1c28e-acb9-47ac-b01f-b5df034d05cb",
    "prId" : 40404,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40404#pullrequestreview-20670060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a0293e4-6eab-4216-9964-9aa46db829e4",
        "parentId" : null,
        "authorId" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "body" : "How about add another test cases as https://github.com/kubernetes/kubernetes/blob/master/plugin/pkg/scheduler/api/validation/validation_test.go#L39-L45\r\n\r\n```\r\nTestValidateExtenderWithNonZeroWeight\r\n```",
        "createdAt" : "2017-02-08T02:17:39Z",
        "updatedAt" : "2017-03-10T02:17:45Z",
        "lastEditedBy" : "6d4deb17-efc4-4037-a2a9-162659c11ad7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fd76dc13947c07f8d1c76b5c3fb54daa42d874c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +26,30 @@// ValidatePolicy checks for errors in the Config\n// It does not return early so that it can find as many errors as possible\nfunc ValidatePolicy(policy schedulerapi.Policy) error {\n\tvar validationErrors []error\n"
  },
  {
    "id" : "2f7f9559-e08d-45aa-a9bc-4ebfa02a2a4f",
    "prId" : 13580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df7c653-fdbc-4979-b054-3d0caccfc708",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Is it an error if you enable https but have a nil TLS config? cc @liggitt \n",
        "createdAt" : "2015-11-14T04:16:53Z",
        "updatedAt" : "2015-11-25T16:19:55Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "94fc3a7f-2193-4c94-a621-7301d0c0e8c6",
        "parentId" : "7df7c653-fdbc-4979-b054-3d0caccfc708",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not positive on the context, but presumably a nil TLSConfig means use the defaults (system roots, hostname verification on)\n",
        "createdAt" : "2015-11-14T05:32:14Z",
        "updatedAt" : "2015-11-25T16:19:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "41285a39-d1a9-4e74-9f5c-78abf3ae798a",
        "parentId" : "7df7c653-fdbc-4979-b054-3d0caccfc708",
        "authorId" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "body" : "Insecure mode is set which skips verification. Look at TLSConfigFor in client package.\n",
        "createdAt" : "2015-11-16T22:24:04Z",
        "updatedAt" : "2015-11-25T16:19:55Z",
        "lastEditedBy" : "367dd7b1-86fa-48f7-aa20-489e5d4b6a8d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cadc24e9fd7f2bccc972df4d67985aa33a4cd823",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +35,39 @@\t}\n\n\tfor _, extender := range policy.ExtenderConfigs {\n\t\tif extender.Weight < 0 {\n\t\t\tvalidationErrors = append(validationErrors, fmt.Errorf(\"Priority for extender %s should have a non negative weight applied to it\", extender.URLPrefix))"
  },
  {
    "id" : "0d2a9c0a-af57-436c-b3dc-445ade4aafc9",
    "prId" : 6202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "parentId" : null,
        "authorId" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "body" : "nit: We should probably add a comment to policy definition about valid values.\n",
        "createdAt" : "2015-03-31T05:33:30Z",
        "updatedAt" : "2015-03-31T17:54:54Z",
        "lastEditedBy" : "88a0ee93-4188-47b5-8881-3624e4a411f2",
        "tags" : [
        ]
      },
      {
        "id" : "d721773f-2ca2-456c-aca1-db3685cb3126",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why is 0 invalid and not negative numbers?\n",
        "createdAt" : "2015-03-31T18:27:38Z",
        "updatedAt" : "2015-03-31T18:27:38Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "029121f0-c048-49b3-86dd-ab47b75aff06",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "A weight of 0 indicates that the priority is to be ignored and is better handled by just removing the priority function from the configuration. Also, if all priority functions have a zero weight, then it creates an issue.\n\nNegative weights can be used to de-prioritize a particular priority function just as a higher/positive weights can be used to increase the importance of a priority function.\n",
        "createdAt" : "2015-03-31T18:47:34Z",
        "updatedAt" : "2015-03-31T18:47:34Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "3b55a28d-036e-4759-9c09-fb6d352d721e",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think a note somewhere about how the weights are aggregated would be good. IMO that's an extremely hard problem in general-- what approximation system do we use? Maybe this can go in the types.go file? Or if it already exists somewhere, ignore this request.\n",
        "createdAt" : "2015-03-31T19:41:28Z",
        "updatedAt" : "2015-03-31T19:41:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "606f47e7-b2d4-47e1-bc47-5cbb2fe9775b",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "I had recently created a scheduler documentation --> https://github.com/openshift/openshift-docs/blob/master/using_openshift/scheduler.adoc\n\nIt has a description of the score aggregation method as well as the predicate/priority types.\n",
        "createdAt" : "2015-03-31T20:05:42Z",
        "updatedAt" : "2015-03-31T20:06:43Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "a5a3f638-43bc-4de5-8df9-1ec70c10ddc4",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "I have been meaning to submit a docs PR (for Kubernetes) for the same - just haven't gotten around to it.\n",
        "createdAt" : "2015-03-31T20:11:01Z",
        "updatedAt" : "2015-03-31T20:11:01Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      },
      {
        "id" : "1a1602a2-15cd-470c-9c15-8a634347ed2c",
        "parentId" : "78b8452b-3ed6-4af0-88dc-b0bf9d763177",
        "authorId" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "body" : "On second thought, I feel that negative weights add more confusion than any real benefit. One particular issue that I was thinking about was that a minion with a higher score would get converted into a lower score if directly multiplied with a negative weight. Any relative prioritization of the priority functions can be sufficiently achieved using positive scores and weights.\n\nI am going to submit a PR to add a validation against negative weights.\n",
        "createdAt" : "2015-04-01T23:04:56Z",
        "updatedAt" : "2015-04-01T23:04:56Z",
        "lastEditedBy" : "4ae12efd-7e98-4c8b-9218-1ed35d1a2df1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a01aed83fd26b40d6957a3915569c1c19876ad7",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@\n\tfor _, priority := range policy.Priorities {\n\t\tif priority.Weight == 0 {\n\t\t\tvalidationErrors = append(validationErrors, fmt.Errorf(\"Priority %s should have a non-zero weight applied to it\", priority.Name))\n\t\t}"
  }
]