[
  {
    "id" : "9e4e0e12-1c43-4e75-9431-24ac6854d8b2",
    "prId" : 2104,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2104#pullrequestreview-565825649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c6f2d62-8d9c-460d-9a87-0e5a5bf684a3",
        "parentId" : null,
        "authorId" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "body" : "I was wondering should this part be included in try-catch block. It can directly throw exceptions in 3 places:\r\n * `Serializer` - throws only if format does not match, we should consider it as fatal error and bubble exception further. \r\n * `RPCCore` - throws on unknown OpCode or when run out of call id - also should be considered as fatal. \r\n * `RunMuxRPC` - throws if there is no endpoint for OpCode or RunId is unknown -  again both should be fatal.\r\n \r\nBasically exceptions in each of this classes suggests that there are problems with testing interface, instead of runtime. Based on this I guess this part is fine. \r\n\r\nWhat's left is transitive exceptions, eg.  `EOFException` when reading message. But again, at this point it should fail whole test I guess.\r\n",
        "createdAt" : "2021-01-11T23:45:22Z",
        "updatedAt" : "2021-01-13T13:36:31Z",
        "lastEditedBy" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "tags" : [
        ]
      }
    ],
    "commit" : "331186b266cebebd9eef4d44f9b435416a1adfcd",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +33,37 @@    } else {\n      val msg = Array.fill(msgLength)(inStream.readChar).mkString\n      handleMessage(msg)\n      scalanative.runtime.loop()\n      loop()"
  },
  {
    "id" : "bb5674ed-5a23-43a6-8a4a-fdc0df4f9313",
    "prId" : 1898,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1898#pullrequestreview-500421195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12bae8a7-1078-4945-91b6-d765608e9c4b",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "This seems like a good change, but it should probably not be in this PR.",
        "createdAt" : "2020-10-01T14:28:38Z",
        "updatedAt" : "2020-10-02T10:16:29Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "f9d304cf-bf57-47ae-ad27-6dbb9c377ace",
        "parentId" : "12bae8a7-1078-4945-91b6-d765608e9c4b",
        "authorId" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "body" : "Actually without this tests would not start. Test interface expects BigEndian encoding, we can either skip first two bytes in Native side or enforce BE in JVM side. This one seams to be safer. \r\nBefore this fix UTF_16 encoding did not begin with BOM so UTF_16 was equal to UTF_16BE",
        "createdAt" : "2020-10-01T14:39:40Z",
        "updatedAt" : "2020-10-02T10:16:29Z",
        "lastEditedBy" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "tags" : [
        ]
      },
      {
        "id" : "978648be-9823-49a2-a656-bd818ebb9e4b",
        "parentId" : "12bae8a7-1078-4945-91b6-d765608e9c4b",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Ah OK, that makes sense.",
        "createdAt" : "2020-10-01T14:41:41Z",
        "updatedAt" : "2020-10-02T10:16:29Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd69bcd6580dbb2b10448abd5880e1498d8d20d8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@  override def send(msg: String): Unit = {\n    outStream.writeInt(msg.length)\n    outStream.write(msg.getBytes(StandardCharsets.UTF_16BE))\n  }\n"
  }
]