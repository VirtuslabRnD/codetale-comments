[
  {
    "id" : "c46fbf3e-7172-4943-95e1-27668dafbb82",
    "prId" : 7632,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8c833b1-7ae3-4a8e-be48-16a5c7c56e85",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we want or need the indirection between `implQuery` and `query`?",
        "createdAt" : "2020-10-13T07:18:29Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7901a122-c3a1-4f09-b5c9-a9f639201d33",
        "parentId" : "c8c833b1-7ae3-4a8e-be48-16a5c7c56e85",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "As comment mentions, the type parameters to `implQuery` start with `m`; `query` fixes this.",
        "createdAt" : "2020-10-13T12:47:31Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "bb53e47e-d9ab-4a30-a709-2fce41cb49b1",
        "parentId" : "c8c833b1-7ae3-4a8e-be48-16a5c7c56e85",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "duh, thanks for the explanation.",
        "createdAt" : "2020-10-13T12:50:10Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +97,101 @@  -- | Extract the contracts of a given template from the ACS.  (However, the\n  -- type parameters are in the 'm a' order, so it is not exported.)\n  implQuery : forall a. Template a => m [(ContractId a, a)]\n\n-- Internal API"
  },
  {
    "id" : "0dfa5f1d-4348-4189-82d0-6ec78e17e849",
    "prId" : 7632,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56c9c456-80db-40c9-9276-cd199f3619ba",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We probably also want `queryContractId` and maybe (less sure about that one) `queryContractKey` in here at some point but letâ€™s leave this out of this PR.",
        "createdAt" : "2020-10-13T07:19:16Z",
        "updatedAt" : "2020-10-13T16:38:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9c6cdb061569d69928ce65252f33699b9f793b",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +95,99 @@-- | Features possible in `initialize`, `updateState`, and `rule`.\nclass ActionTriggerAny m where\n  -- | Extract the contracts of a given template from the ACS.  (However, the\n  -- type parameters are in the 'm a' order, so it is not exported.)\n  implQuery : forall a. Template a => m [(ContractId a, a)]"
  },
  {
    "id" : "ee9093b5-4656-44d3-8c23-2ae4271b1968",
    "prId" : 7365,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72cbab1b-7770-47d9-a1c7-a5ace9165673",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not for this PR but we could consider changing the list in the values to `Map AnyContractId AnyTemplate`. Then we can provide a fast lookup by contract id which is something you need fairly often.",
        "createdAt" : "2020-09-15T06:44:06Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b9ae9dc9-3105-4695-9f98-9a60412bbe54",
        "parentId" : "72cbab1b-7770-47d9-a1c7-a5ace9165673",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#7425 ",
        "createdAt" : "2020-09-16T18:32:12Z",
        "updatedAt" : "2020-09-16T18:32:12Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3a96e389dfc2eede6162b56592858ea743a21",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +36,40 @@\n-- This will change to a Map once we have proper maps in DAML-LF\ndata ACS = ACS\n  { activeContracts :\n#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON"
  },
  {
    "id" : "9d544771-5f9e-4313-bf20-1c5af03c1190",
    "prId" : 7365,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6373b2af-7c5e-4e48-a3ef-83c6b0472522",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@sofiafaro-da perhaps something worth adding to `DA.Map`? What do you think? (not in this PR)",
        "createdAt" : "2020-09-15T06:45:04Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fd0fa64d-67be-4931-961f-c53563f8e5b3",
        "parentId" : "6373b2af-7c5e-4e48-a3ef-83c6b0472522",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "yeah, that looks like a good function to have in DA.Map :) ",
        "createdAt" : "2020-09-15T09:57:13Z",
        "updatedAt" : "2020-09-15T16:16:18Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "9c15076c-1ae8-4d51-a748-415a5d4cad70",
        "parentId" : "6373b2af-7c5e-4e48-a3ef-83c6b0472522",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#7427",
        "createdAt" : "2020-09-16T23:15:09Z",
        "updatedAt" : "2020-09-16T23:15:09Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3a96e389dfc2eede6162b56592858ea743a21",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +57,61 @@\n#ifdef DAML_GENMAP && DAML_GENERIC_COMPARISON\nadjust : forall k v. Ord k => k -> (Optional v -> Optional v) -> GMap.Map k v -> GMap.Map k v\nadjust k f m =\n  let orig = GMap.lookup k m"
  }
]