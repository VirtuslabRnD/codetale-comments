[
  {
    "id" : "787707d8-2852-4ffb-aeef-06c353fe6f99",
    "prId" : 7787,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bd1c73b-1327-4fbc-95cc-107f589b3177",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This choice of ACS preserves the behavior prior to #7632. With respect to the commands-in-flight, which is new, it seems that it should be the choice that is consistent with the ACS. However, that implies that\r\n\r\n```haskell\r\n  updateState = \\message -> do\r\n    let commandId = case message of\r\n          MTransaction tx -> tx.commandId\r\n          MCompletion cmp -> Some cmp.commandId\r\n          MHeartbeat -> None\r\n    cif <- getCommandsInFlight\r\n    pure $ any (\\cid -> Map.member cid cif) commandId\r\n    -- ^ may yield True\r\n```\r\n\r\nAs such we may want slightly different expected behavior for updateState's commands-in-flight and pendingContracts.",
        "createdAt" : "2020-10-22T19:40:12Z",
        "updatedAt" : "2020-10-22T21:24:15Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "f4d5ba34-68d5-42dc-b68b-7729a7db6000",
        "parentId" : "2bd1c73b-1327-4fbc-95cc-107f589b3177",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fully agree on keeping commands in flight and the ACS in sync. How do you feel about running `updateState` after updating the ACS and commands in flight instead of the behavior we have now? I don’t have a strong preference either way and it’s definitely something for another PR.",
        "createdAt" : "2020-10-23T08:23:39Z",
        "updatedAt" : "2020-10-23T08:23:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "37825c47-5f68-4c37-8ee0-81646c990325",
        "parentId" : "2bd1c73b-1327-4fbc-95cc-107f589b3177",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#7799 ",
        "createdAt" : "2020-10-23T14:48:54Z",
        "updatedAt" : "2020-10-23T14:48:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cbb09991aa2c34876e8626cefef5d8a6c452363",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +277,281 @@          let acs = applyTransaction transaction state.acs\n              -- again, we use the commands-in-flight and ACS before the update below\n              userState = utUpdateState state.commandsInFlight acs (MTransaction transaction) state.userState\n              -- See the comment above for why we delete this here instead of when we receive the completion.\n              (acs', commandsInFlight) = case transaction.commandId of"
  },
  {
    "id" : "1764e950-7a18-4c32-ac39-281e53789980",
    "prId" : 7674,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "343d0c7d-d3bd-4553-973d-f2cd6674fda4",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "We should note that `initialize` is once again the odd one out, as there is nothing to `get` at first.",
        "createdAt" : "2020-10-13T18:42:48Z",
        "updatedAt" : "2020-10-14T14:32:14Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "9afc54ea51fa2221dd79f3cb4c39d92731d4a7d0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +90,94 @@  -- completion message.  It can manipulate the state with `get`, `put`,\n  -- and `modify`, or query the ACS with `query`.\n  , rule : Party -> TriggerA s ()\n  -- ^ The rule defines the main logic of your trigger. It can send commands\n  -- to the ledger using `emitCommands` to change the ACS."
  },
  {
    "id" : "a70cdb64-74ad-4f50-8372-531d0ec37f28",
    "prId" : 7456,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33d6f52e-a4a5-4f6e-8be6-18f45529a312",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not part of this PR (I might have already mentioned this in #7392 not quite sure) but we could consider deprecating the name `emitCommands` in favor of `submitCommands`. `emit` isn’t really terminology that we use anywhere else and just seems confusing. I don’t quite want to use just `submit` since we use that for the synchronous submissions in scenarios and daml script.",
        "createdAt" : "2020-10-02T07:06:58Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3af0f712-c385-4407-9e50-a0d0886e9b52",
        "parentId" : "33d6f52e-a4a5-4f6e-8be6-18f45529a312",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`submitCommands` is the low-level primitive corresponding to \"add an element to the returned `[Commands]`\". As far as I can tell, the distinction with `emitCommands` needs to be preserved. The names can be anything.",
        "createdAt" : "2020-10-02T15:08:56Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "115bcb67-6cc4-4ecf-8ca0-675e1ad1be7b",
        "parentId" : "33d6f52e-a4a5-4f6e-8be6-18f45529a312",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Right I wasn’t suggesting to remove the distinction, just cleaning up names for the high-level API. But definitely not something for this PR and maybe sticking to `emit` is also sensible. I didn’t spend too much time thinking about this.",
        "createdAt" : "2020-10-02T15:10:53Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "27c8c9b1e1674688c7b1e08c329341d8e4615ef4",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +104,108 @@    , nextCommandId = s.nextCommandId + 1\n    }\n  submitCommands commands\n  pure id\n"
  },
  {
    "id" : "c623b92f-b1f9-4bd6-9efa-432eae5beed5",
    "prId" : 7456,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2119db03-3b4d-4e6a-80a1-cdbd08cb3f58",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Nice cleanup. The StateT looks much nicer here.",
        "createdAt" : "2020-10-02T07:07:46Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "27c8c9b1e1674688c7b1e08c329341d8e4615ef4",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +189,193 @@          userState = userTrigger.initialize acs\n          state = TriggerState acs party userState Map.empty 0\n      in TriggerSetup $ execStateT (runTriggerRule $ runRule userTrigger.rule) state\n    update msg = do\n      time <- getTime"
  },
  {
    "id" : "7d830f0f-e312-4322-8911-61e19ea6a1f0",
    "prId" : 5990,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2877345-7ff3-4acc-bb7e-15b8bf67365c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "fwiw I’m considering removing the `dedupX` functions completely in favor of the pending commands in `emitCommands`. While they seem convenient on simple examples, I think they also make it easy to get the condition you want to deduplicate on wrong and they don’t scale to multi-command transactions.\r\n\r\nLet’s add it for now so we are consistent. If you have an opinion on this, I’d be interested in hearing it (probably not on this PR though, it’s completely unrelated :))",
        "createdAt" : "2020-05-14T16:41:45Z",
        "updatedAt" : "2020-05-14T16:54:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7614430a9f7cd3897734e26a06d0bb44eca2c6d7",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +120,124 @@-- in one transaction, use `emitCommands` with `createAndExerciseCmd`\n-- and handle filtering yourself.\ndedupCreateAndExercise : (Eq t, Eq c, Template t, Choice t c r) => t -> c -> TriggerA ()\ndedupCreateAndExercise t c = do\n  aState <- TriggerA get"
  },
  {
    "id" : "3e1f1b44-9b4a-41ef-8509-c1a6494cf313",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcd11881-a18e-4fe0-80a9-632914bcfd99",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Let’s leave it here for this PR but I wonder if it might make sense to move the testing functions to something like `Daml.Trigger.Test` or `Daml.Trigger.Assert` to match `DA.Assert`.",
        "createdAt" : "2020-01-28T08:21:52Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fa232ead-ae95-49bd-bfcb-f91518d66d3e",
        "parentId" : "bcd11881-a18e-4fe0-80a9-632914bcfd99",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yeah, that sounds like a good idea. In the specific case of `ACSBuilder`, we'd either have to also export `ACS (..)` from `Daml.Trigger`, or keep `ACSBuilder` and `buildACS` in `Daml.Trigger`.",
        "createdAt" : "2020-01-28T09:40:14Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "018d31e1-05f6-4637-a0b5-8ae02d5e440d",
        "parentId" : "bcd11881-a18e-4fe0-80a9-632914bcfd99",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We could have a separate `Daml.Trigger.Internal` module that exports `ACS(..)` and import it from both `Daml.Trigger` which then only needs to reexport `ACS` and `Daml.Trigger.Assert`.",
        "createdAt" : "2020-01-28T09:41:43Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "074964ce-34d3-44e3-a412-dc1e6df924df",
        "parentId" : "bcd11881-a18e-4fe0-80a9-632914bcfd99",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yeah, that sounds good.",
        "createdAt" : "2020-01-28T09:43:00Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +30,34 @@ , RelTime(..)\n , ACSBuilder\n , toACS\n , testRule\n , flattenCommands"
  },
  {
    "id" : "7f55ccb9-6057-4b21-9432-716c94661432",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28324be0-9a5d-4a9f-a5b8-a6444ac2c70c",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we export the `ACSBuilder` _type_ as well?",
        "createdAt" : "2020-01-28T08:35:36Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "47b9463b-5a84-4bb6-84ba-1c5faef7a076",
        "parentId" : "28324be0-9a5d-4a9f-a5b8-a6444ac2c70c",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Indeed, done.",
        "createdAt" : "2020-01-28T08:46:53Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +30,34 @@ , RelTime(..)\n , ACSBuilder\n , toACS\n , testRule\n , flattenCommands"
  },
  {
    "id" : "4f2165d4-6f6a-498c-8c30-4edf3f1f560e",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92656224-628d-43ec-af08-d6b558ebee01",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "`GeneralizedNewtypeDeriving` should allows us to write\r\n```suggestion\r\nnewtype ACSBuilder = ACSBuilder [Update (AnyContractId, AnyTemplate)]\r\n  deriving (Semigroup, Monoid)\r\n```",
        "createdAt" : "2020-01-28T08:36:50Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "bc07eb04-2edf-4535-9446-9e8bbd71505e",
        "parentId" : "92656224-628d-43ec-af08-d6b558ebee01",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I tried that, but it fails with\r\n```\r\nSeverity: DsError\r\nMessage:\r\n  Failure to process DAML program, this feature is not currently supported.\r\n  Coercion with tyconappco.\r\n  ([Sym (N:ACSBuilder[0])])_R\r\n```",
        "createdAt" : "2020-01-28T09:32:47Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "873160c0-408b-4b65-868c-c896a27deba9",
        "parentId" : "92656224-628d-43ec-af08-d6b558ebee01",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Opened https://github.com/digital-asset/daml/issues/4237 to track this",
        "createdAt" : "2020-01-28T09:38:25Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "52bdbf8e-7dc5-40f3-a6e6-d67e5693843d",
        "parentId" : "92656224-628d-43ec-af08-d6b558ebee01",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Thanks!",
        "createdAt" : "2020-01-28T09:42:19Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +272,276 @@\n-- | Used to construct an 'ACS' for 'testRule'.\nnewtype ACSBuilder = ACSBuilder [Update (AnyContractId, AnyTemplate)]\n\ninstance Semigroup ACSBuilder where"
  },
  {
    "id" : "5d1f486d-9b00-4031-8504-1f3ba3f40ca7",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a85e4a6f-8106-4f67-b8c9-593ab71c7d4c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should probably export this type but without the constructor. We leak it anyway since we expose `toACS`.",
        "createdAt" : "2020-01-28T08:41:46Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d7ab7189-6973-48ed-814e-2b3825511f51",
        "parentId" : "a85e4a6f-8106-4f67-b8c9-593ab71c7d4c",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, done.",
        "createdAt" : "2020-01-28T09:40:30Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +271,275 @@  }\n\n-- | Used to construct an 'ACS' for 'testRule'.\nnewtype ACSBuilder = ACSBuilder [Update (AnyContractId, AnyTemplate)]\n"
  },
  {
    "id" : "b63f4638-62ad-4c7e-a035-60f367d76603",
    "prId" : 4233,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17020aa6-25ed-483b-a217-203f6cf639a8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "With these assertion helpers it is easy to check that a given command was emitted but it is tricky to assert that a command was not emitted or that a given command was emitted multiple times (although I don’t really see a good usecase for the latter). Not sure how important this is so let’s definitely leave it for a separate PR but worth keeping in mind.",
        "createdAt" : "2020-01-28T08:47:01Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8b060bfb-8c64-42ac-bdf6-1029c92784d8",
        "parentId" : "17020aa6-25ed-483b-a217-203f6cf639a8",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, agreed. I'd say this is a first draft at the assertion API. We'll have to see what API is demanded as use-cases come up. ",
        "createdAt" : "2020-01-28T09:41:47Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +334,338 @@\n-- | Check that at least one command is a create command whose payload fulfills the given assertions.\nassertCreateCmd\n  : (Template t, CanAbort m)\n  => [Command]  -- ^ Check these commands."
  },
  {
    "id" : "ef934ec9-464a-4cc1-b40a-99fc89511625",
    "prId" : 3502,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7efa58-7e77-41b4-9dea-0604d074dc82",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Why does `dedupExerciseByKey` behave differently from `dedupExercise` w.r.t. pending-set?",
        "createdAt" : "2019-11-18T13:16:48Z",
        "updatedAt" : "2019-11-18T13:55:27Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "d5289bae-1973-425d-9942-3c9063263f06",
        "parentId" : "5e7efa58-7e77-41b4-9dea-0604d074dc82",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "See comment below, they now both behave the same.",
        "createdAt" : "2019-11-18T13:22:03Z",
        "updatedAt" : "2019-11-18T13:55:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d13162377f09d4f1d1de46bdfa825680c1a0e0e",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +146,150 @@  let cmds = concat $ map snd (Map.toList aState.commandsInFlight) <> map commands aState.emittedCommands\n  unless (any ((Some (k, c) ==) . fromExerciseByKey @t) cmds) $\n    void $ emitCommands [exerciseByKeyCmd @t k c] []\n\n-- | Transform the high-level trigger type into the one from `Daml.Trigger.LowLevel`."
  },
  {
    "id" : "de7bbbc5-56c7-4595-83d3-0a20480db86d",
    "prId" : 3127,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144b1972-9167-4d31-bc0b-5ca822eee04e",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Trying to understand these two functions. `updateState` is run on any `Message`, both `MCompletion` and `MTransaction`, but it can only determine the new state and not issue any new commands. `rule` is only run on `MTransaction`, and it has the ability to issue new commands. Is that correct? Why can't the user issue new commands after an `MCompletion`?",
        "createdAt" : "2019-10-08T12:31:25Z",
        "updatedAt" : "2019-10-08T12:31:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "e2ce4199-f637-4f7d-b3b1-2c9fb2ab3d4d",
        "parentId" : "144b1972-9167-4d31-bc0b-5ca822eee04e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "In general, the idea is that `rule` is idempotent can basically be run at any point and should only depend on the ACS and the user state (the user state is often not even required, see the copy example in this PR). As mentioned in a comment, we do want to run the rule on failed completions but I’m leaving that for a separate PR. Running it on successful completions doesn’t make that much sense since in that case you will also get a transaction event and running the rule before the ACS has been updated can be a bit confusing.\r\n\r\nWe might want to change how and when exactly these events are triggered but I’d like to see some more examples before we finalize on something.",
        "createdAt" : "2019-10-08T12:35:22Z",
        "updatedAt" : "2019-10-08T12:35:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9681d7a0-2904-4e9d-a15c-a8e142798e00",
        "parentId" : "144b1972-9167-4d31-bc0b-5ca822eee04e",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Okay, thanks for explaining. Didn't see that comment.",
        "createdAt" : "2019-10-08T12:39:11Z",
        "updatedAt" : "2019-10-08T12:39:11Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "117caf652530168bef4bc08c0f9db3b4b69f0877",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +35,39 @@  -- The ACS already includes the updates from the Message\n  , updateState : ACS -> Message -> s -> s\n  , rule : Party -> ACS -> Map CommandId [Command] -> s -> TriggerA ()\n  }\n"
  },
  {
    "id" : "642343b1-b11c-40fc-a7c9-dd24b7887f0b",
    "prId" : 2945,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18267cae-b5e4-489e-89c1-046c534599d2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Shouldn’t we expose this type (but not the constructors). I also wonder if we might just want to keep calling this `ContractId` for now until we have a variant with a phantom type parameter but I guess changing it now is better for backwards compatibility.",
        "createdAt" : "2019-09-18T07:57:08Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e2e044ae-2037-4c8c-9e5f-ac8aab37001c",
        "parentId" : "18267cae-b5e4-489e-89c1-046c534599d2",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Indeed, we should expose it. I overlooked that, good catch!\r\n\r\nEven if we introduce a `ContractId t` with a phantom type parameter, we'd still need something like `AnyContractId` for the `Created` and `Archived` events. I figured once we introduce `ContractId t` we need to change `exerciseCmd` anyway, but we can keep `Created` and `Archived` untouched.\r\n\r\nI have no strong opinion on the name, though, so happy to rename it if you prefer.",
        "createdAt" : "2019-09-18T08:13:28Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "bb290391-c638-47c8-9da3-381402f10d55",
        "parentId" : "18267cae-b5e4-489e-89c1-046c534599d2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Let’s keep `AnyContractId` for now.",
        "createdAt" : "2019-09-18T08:16:09Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9b769ee3-40af-43d7-a17d-1c34309a9421",
        "parentId" : "18267cae-b5e4-489e-89c1-046c534599d2",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "> Shouldn’t we expose this type **(but not the constructors)**\r\n\r\nFor now we need access to the `templateId` field in `ACS.daml` `updateEvent`.",
        "createdAt" : "2019-09-18T08:19:48Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "eb53a84b-95c4-4ce2-a887-3b89012e5e2f",
        "parentId" : "18267cae-b5e4-489e-89c1-046c534599d2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems reasonable :+1:",
        "createdAt" : "2019-09-18T08:22:07Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "833cab6997bcd9eadf1ccd597c9c4eb33d76d128",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +26,30 @@  } deriving (Show, Eq)\n\ndata AnyContractId = AnyContractId\n  { templateId : Identifier\n  , contractId : Text"
  },
  {
    "id" : "3fedd775-5ee8-4e98-ac72-35006706effa",
    "prId" : 2945,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14530b04-a7fe-40ea-be31-da1ae305f706",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Very nice, this is starting to look very usable!",
        "createdAt" : "2019-09-18T07:57:51Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "833cab6997bcd9eadf1ccd597c9c4eb33d76d128",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +92,96 @@      }\n\ncreateCmd : Template t => t -> Command\ncreateCmd templateArg =\n  CreateCommand (toLedgerValue templateArg)"
  },
  {
    "id" : "c0a41ac5-0d71-49ef-a98a-3a3bb58a296f",
    "prId" : 2945,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ea0e4e9-81cb-4be0-b181-9368ada02067",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can we use something like `ContractId ()` here? There as a DAML-LF function `coerce_contract_id : ContractId a -> ContractId b` which we could use then.",
        "createdAt" : "2019-09-19T06:38:30Z",
        "updatedAt" : "2019-09-19T06:39:21Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c6327fdd-5aec-4b69-8005-d21a480cc457",
        "parentId" : "1ea0e4e9-81cb-4be0-b181-9368ada02067",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We could but I think it makes more sense to keep this consistent with `AnyTemplate`. I also deliberately don’t want to use the DAML-LF `ContractId` type to avoid annoyances around the absence of things like `Ord` instances.",
        "createdAt" : "2019-09-19T06:48:27Z",
        "updatedAt" : "2019-09-19T06:48:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "833cab6997bcd9eadf1ccd597c9c4eb33d76d128",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +28,32 @@data AnyContractId = AnyContractId\n  { templateId : Identifier\n  , contractId : Text\n  } deriving (Show, Eq)\n"
  },
  {
    "id" : "4494a03a-5935-4464-8387-c87e9e021d26",
    "prId" : 2762,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb3fc152-3642-4fd7-ac09-310f45d84b9d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nmodule DA.Trigger\r\n```",
        "createdAt" : "2019-09-05T09:52:37Z",
        "updatedAt" : "2019-09-05T10:51:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "97642b0e-4c51-40a0-95bd-8844557eff75",
        "parentId" : "eb3fc152-3642-4fd7-ac09-310f45d84b9d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Leaving it at `Daml.Trigger` for now since that matches the fact that we call them DAML triggers and we might want to change other module names. We can make a decision on what we go with when we are closer to exposing users to this.",
        "createdAt" : "2019-09-05T10:56:12Z",
        "updatedAt" : "2019-09-05T10:56:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f15aa222ab18523ccec19fd330ce060d95a62ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@\ndaml 1.2\nmodule Daml.Trigger\n  ( Message(..)\n  , Transaction(..)"
  }
]