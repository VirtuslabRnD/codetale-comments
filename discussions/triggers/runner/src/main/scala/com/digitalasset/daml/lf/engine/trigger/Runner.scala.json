[
  {
    "id" : "9a05986c-f6ce-4826-b002-9c42a310b63d",
    "prId" : 10102,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed641144-85d5-4561-a0d1-5bb4c260a550",
        "parentId" : null,
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "small nit, that whitespace change is not necessary",
        "createdAt" : "2021-06-24T12:13:23Z",
        "updatedAt" : "2021-06-24T12:13:45Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "a3fcd2a0-3345-48fb-87b5-768063522c75",
        "parentId" : "ed641144-85d5-4561-a0d1-5bb4c260a550",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Computer did it, not me. I defer to IntelliJ for things like this.",
        "createdAt" : "2021-06-24T12:14:59Z",
        "updatedAt" : "2021-06-24T12:14:59Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "64a5e94a-68d8-40f0-bc68-a0f7e5d962b1",
        "parentId" : "ed641144-85d5-4561-a0d1-5bb4c260a550",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "no worries here, this constantly happens to me too with IntelliJ and I expected that this was IntelliJ too as it is in the classic `import` statements area :smile:  ",
        "createdAt" : "2021-06-24T12:24:33Z",
        "updatedAt" : "2021-06-24T12:24:33Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "86d83b6c-00e1-4688-a837-936a2afdf976",
        "parentId" : "ed641144-85d5-4561-a0d1-5bb4c260a550",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "@SamirTalwar-DA IntelliJ's decisions here are not idempotent, so this will never eventually settle on an \"IntelliJ-clean\" state. Best to leave them out entirely with `git add -p`.",
        "createdAt" : "2021-06-24T14:32:58Z",
        "updatedAt" : "2021-06-24T14:32:58Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "010eea1dd4cfe456ff9da332e3f7b6ef46e98238",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +54,58 @@import com.daml.script.converter.Converter.Implicits._\nimport com.daml.script.converter.ConverterException\nimport com.google.protobuf.empty.Empty\n\nsealed trait TriggerMsg"
  },
  {
    "id" : "d6686399-6fc9-4568-8d47-c02f4d98d9c1",
    "prId" : 8037,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d61306bc-2c6d-445d-aa27-cc3ebe0d7154",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Did you manage to hit this? I would expect that our transaction stream gets killed before that but maybe that only happens if a transaction is sent?",
        "createdAt" : "2020-11-23T16:20:13Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "89d8528f-a2c4-4c65-ba37-861f302c57fa",
        "parentId" : "d61306bc-2c6d-445d-aa27-cc3ebe0d7154",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, without this change the error is caught and injected into the DAML code as a failed completion.",
        "createdAt" : "2020-11-24T08:56:58Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "ee51dc4f-2d2d-4742-84f4-d6ce6684b3da",
        "parentId" : "d61306bc-2c6d-445d-aa27-cc3ebe0d7154",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "\r\n\r\nYes, without this change the error is caught and injected into the DAML code as a failed completion.\r\n",
        "createdAt" : "2020-11-25T10:30:34Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "632515e90d652374fe2bbed365818b95b2378697",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +536,540 @@        .submitSingleCommand(req)\n      f.map(_ => None).recover {\n        case s: StatusRuntimeException if s.getStatus != io.grpc.Status.UNAUTHENTICATED =>\n          // Do not capture UNAUTHENTICATED errors.\n          // The access token may be expired, let the trigger runner handle token refresh."
  },
  {
    "id" : "db61bdf0-ee61-4ffd-a64d-185f987cb810",
    "prId" : 8037,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ae02ac-5727-4718-a1e3-a0c616c8b088",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "How does this look in the standalone trigger runner?",
        "createdAt" : "2020-11-23T16:20:35Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4dca1ac8-332b-4f78-a0ed-2328067ce79d",
        "parentId" : "c0ae02ac-5727-4718-a1e3-a0c616c8b088",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "IIUC then we don't hit this in the standalone trigger runner. To test this I've set up the copy trigger example using `daml-sdk-head` from this branch and configered HMAC256 validation. I've then created a short lived token for the trigger runner, started the runner, waited for the token to expire, and then submitted a create that should activate the trigger. The trigger runner then failed as shown below:\r\n```\r\n$ daml trigger --dar .daml/dist/copy-trigger-0.0.1.dar --trigger-name CopyTrigger:copyTrigger --ledger-host localhost --ledger-port 6865 --ledger-party Alice --access-token-file trigger-token.jwt\r\nReading token from trigger-token.jwt...\r\nTrigger  is running as Alice (context: {triggerDefinition=f2c380ed08917de575b4a7f8bd05128cfb732bc334ecc17524c9b722210117fe:CopyTrigger:copyTrigger})\r\nException in thread \"main\" io.grpc.StatusRuntimeException: PERMISSION_DENIED\r\n        at io.grpc.Status.asRuntimeException(Status.java:533)\r\n        at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:453)\r\n        at io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:426)\r\n        at io.grpc.internal.ClientCallImpl.access$500(ClientCallImpl.java:66)\r\n        at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:689)\r\n        at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$900(ClientCallImpl.java:577)\r\n        at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:751)\r\n        at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:740)\r\n        at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n        at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n        at java.base/java.lang.Thread.run(Thread.java:834)\r\ndaml-helper: Received ExitFailure 1 when running\r\nRaw command: java -Dlogback.configurationFile=/home/aj/.daml/sdk/0.0.0/daml-sdk/trigger-logback.xml -jar /home/aj/.daml/sdk/0.0.0/daml-sdk/daml-sdk.jar trigger --dar .daml/dist/copy-trigger-0.0.1.dar --trigger-name CopyTrigger:copyTrigger --ledger-host localhost --ledger-port 6865 --ledger-party Alice --access-token-file trigger-token.jwt\r\n```\r\nRunning the same test on master produces the same error.",
        "createdAt" : "2020-11-25T10:27:12Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "632515e90d652374fe2bbed365818b95b2378697",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +537,541 @@      f.map(_ => None).recover {\n        case s: StatusRuntimeException if s.getStatus != io.grpc.Status.UNAUTHENTICATED =>\n          // Do not capture UNAUTHENTICATED errors.\n          // The access token may be expired, let the trigger runner handle token refresh.\n          Some(SingleCommandFailure(req.getCommands.commandId, s))"
  },
  {
    "id" : "d9a6f50c-90fd-492a-a00b-207b379f04e6",
    "prId" : 7820,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9aa2c73-184c-495d-b199-6b4c693f522f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth documenting the thought process that went into this? `fail` seems sensible but I’m sure you’ve put some thoughts into this that I’d like not to get lost.",
        "createdAt" : "2020-11-10T11:53:02Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0a2d4bde-34c8-405c-8ddd-50ed586b02c4",
        "parentId" : "b9aa2c73-184c-495d-b199-6b4c693f522f",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Added such in 662a7cac0f26eacf4fedff6106875dc6372b2e38 ",
        "createdAt" : "2020-11-10T21:15:45Z",
        "updatedAt" : "2020-11-10T21:15:45Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "662a7cac0f26eacf4fedff6106875dc6372b2e38",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +323,327 @@      //   tabula rasa and notice the still-unhandled contract in the ACS again\n      //   on init, as we expect triggers to be able to do anyhow.\n        .buffer(256 + maxParallelSubmissionsPerTrigger, OverflowStrategy.fail)\n        .map {\n          case SingleCommandFailure(commandId, s) =>"
  },
  {
    "id" : "c561a1de-a313-47f6-af1e-b99e897f7cea",
    "prId" : 7820,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b478a6d0-16c0-4f18-822f-d991106a4c4f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Looking at `CommandRetryFlow` it is structured pretty differently and pushes retries back through the flow. Is there a reason why the two are so different? What is stopping us from pushing retries back through the stream?",
        "createdAt" : "2020-11-10T12:28:29Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "90e4f1c2-0ff8-4126-a5ff-d4475fd17bf2",
        "parentId" : "b478a6d0-16c0-4f18-822f-d991106a4c4f",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "See commit message 7d969a67f42d0dfc42749496c7d1040d4cca56ad for an explanation.",
        "createdAt" : "2020-11-10T20:47:42Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "662a7cac0f26eacf4fedff6106875dc6372b2e38",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +606,610 @@  }\n\n  /** Like `CommandRetryFlow` but with no notion of ledger time, and with\n    * delay support.  Note that only the future succeeding with `None`\n    * indicates that a retry should be attempted; a failed future propagates"
  },
  {
    "id" : "d4d89ef6-2e04-41ae-b0da-88494414b600",
    "prId" : 7820,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6d06937-18de-422b-8401-045625568f3b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Any particular reason for the choice of 250ms? Seems totally sensible but so does 100ms or whatever else you can come up with.",
        "createdAt" : "2020-11-10T12:30:04Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "43e27962-e06c-47b3-8fa7-0c8f8ee00796",
        "parentId" : "a6d06937-18de-422b-8401-045625568f3b",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Only that it quickly converges to whole seconds.",
        "createdAt" : "2020-11-10T20:48:22Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "662a7cac0f26eacf4fedff6106875dc6372b2e38",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +590,594 @@  val maxTriesWhenOverloaded = 6\n\n  private def overloadedRetryDelay(afterTries: Int): FiniteDuration =\n    (250 * (1 << (afterTries - 1))).milliseconds\n"
  },
  {
    "id" : "9ed739ba-ab60-49fb-8332-b425e49f579c",
    "prId" : 7820,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e919fb-fd6a-44a7-abee-daef3aba5326",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Arguably not a queue anymore.",
        "createdAt" : "2020-11-10T12:38:58Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1d49cc36-6903-441d-82c5-203b0e5cb4ce",
        "parentId" : "23e919fb-fd6a-44a7-abee-daef3aba5326",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "The buffer behaves just like one. 🤷‍♂️ ",
        "createdAt" : "2020-11-10T20:50:22Z",
        "updatedAt" : "2020-11-10T21:15:31Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "662a7cac0f26eacf4fedff6106875dc6372b2e38",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +307,311 @@      filter: TransactionFilter): Flow[SingleCommandFailure, TriggerMsg, NotUsed] = {\n\n    // A queue for command submission failures.\n    val submissionFailureQueue: Flow[SingleCommandFailure, Completion, NotUsed] =\n      Flow[SingleCommandFailure]"
  },
  {
    "id" : "e3b2d688-d794-4965-b991-d2e0dd498311",
    "prId" : 7812,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97f67727-2ccb-4a07-b39c-a3be8c569054",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I thought those are identical now?",
        "createdAt" : "2020-10-27T16:10:15Z",
        "updatedAt" : "2020-10-27T17:17:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb276b36d6afbbc0ef08b66b73e27bda3a0144bb",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +450,454 @@    // The flow that we return:\n    //  - Maps incoming trigger messages to new trigger messages\n    //    replacing ledger command IDs with the IDs used internally;\n    //  - Folds over the trigger messages via the speedy machine\n    //    thereby accumulating the state changes."
  },
  {
    "id" : "1123c54b-684c-43df-a964-a5f82691900e",
    "prId" : 7587,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "666d3085-10ff-4c4b-a68a-711b1281de01",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Looks like we should be able to pop from that set now if we’ve seen both the transaction as well as the completion for a command. Doesn’t have to be in this PR.",
        "createdAt" : "2020-10-07T07:26:15Z",
        "updatedAt" : "2020-10-07T07:32:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a90d36d4-3c84-4451-a5d6-0edf4dc6ce42",
        "parentId" : "666d3085-10ff-4c4b-a68a-711b1281de01",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#7598 ",
        "createdAt" : "2020-10-07T15:09:52Z",
        "updatedAt" : "2020-10-07T15:09:52Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7a51c3a04d2e56ca2b5ee2cbe95daaeeb378fb",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +412,416 @@          val uuid = fromTryCatchThrowable[UUID, IllegalArgumentException](\n            UUID.fromString(t.commandId)).toOption\n          List(if (uuid exists commandIdsUsed) msg else TransactionMsg(t.copy(commandId = \"\")))\n        case x @ HeartbeatMsg() => List(x) // Hearbeats don't carry any information.\n      })"
  },
  {
    "id" : "8f423076-47e3-49a9-a4fd-598e6ad4cdbb",
    "prId" : 7456,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7bc7bb1-f725-4b81-ac61-3c68ecdde592",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That’s the mapping I was talking about above which we can get rid off with this change.",
        "createdAt" : "2020-10-01T08:19:50Z",
        "updatedAt" : "2020-10-02T16:27:21Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "27c8c9b1e1674688c7b1e08c329341d8e4615ef4",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +233,237 @@    usedCommandIds += commandId\n    val commandUUID = UUID.randomUUID\n    commandIdMap += (commandUUID -> commandId)\n    val commandsArg = Commands(\n      ledgerId = client.ledgerId.unwrap,"
  },
  {
    "id" : "07f982ee-7351-4935-b15d-65d19f623d4f",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9168d369-e74e-4030-a99c-c3aec47a681d",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "20:58:20.100 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - trigger received completion message Completion(658ee8d2-160f-413e-b6e3-c95ab01f4d7c,Some(Status(0,,Vector())),4,None) (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:08:29Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "9b21940b-6c2c-4a51-9af3-712983e0a3df",
        "parentId" : "9168d369-e74e-4030-a99c-c3aec47a681d",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "(Of course, you will not see `triggerId` in context with the non-service runner.)",
        "createdAt" : "2020-09-02T21:23:22Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +326,330 @@\n  private def logReceivedMsg(tm: TriggerMsg): Unit = tm match {\n    case CompletionMsg(c) => logger.debug(s\"trigger received completion message $c\")\n    case TransactionMsg(t) => logger.debug(s\"trigger received transaction, ID ${t.transactionId}\")\n    case HeartbeatMsg() => ()"
  },
  {
    "id" : "c33ea113-c767-4696-a642-d4652dc36e28",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eab2801f-7054-4e07-b81a-89b4e4e82a84",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "20:58:20.103 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - trigger received transaction, ID 4 (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:08:56Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +327,331 @@  private def logReceivedMsg(tm: TriggerMsg): Unit = tm match {\n    case CompletionMsg(c) => logger.debug(s\"trigger received completion message $c\")\n    case TransactionMsg(t) => logger.debug(s\"trigger received transaction, ID ${t.transactionId}\")\n    case HeartbeatMsg() => ()\n  }"
  },
  {
    "id" : "ba910b2b-2365-4f12-ad20-0ff3ba079383",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6d02236-9f0c-4603-a1e3-5172a5d60fa4",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "20:58:20.093 [TriggerService-akka.actor.default-dispatcher-3] DEBUG com.daml.lf.engine.trigger.Runner - submitting command ID 0, commands ImmArray.ImmArraySeq(CreateCommand(Some(Identifier(cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1,TestTrigger,B)),Some(Record(Some(Identifier(cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1,TestTrigger,B)),Vector(RecordField(p,Some(Value(Party(Alice)))), RecordField(v,Some(Value(Int64(42))))))))) (context: {triggerDefinition=cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1:TestTrigger:trigger, triggerId=535b9269-fe3f-426b-b83c-87b6c5b8b6c7})",
        "createdAt" : "2020-09-02T21:12:26Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +252,256 @@                  )\n                  logger.debug(\n                    s\"submitting command ID $commandId, commands ${commands.map(_.command.value)}\")\n                  submit(SubmitRequest(commands = Some(commandsArg)))\n                }"
  },
  {
    "id" : "6a784043-9f3e-47ab-b380-57f02909cbf0",
    "prId" : 6576,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "160c083d-9e5a-40be-8362-1d0b58e40a24",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Given that the coding is a lot cleaner now, I wouldn't have asked for the comment anymore. 😃\r\nBut it doesn't do harm either.",
        "createdAt" : "2020-07-02T10:05:55Z",
        "updatedAt" : "2020-07-02T10:20:48Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ebcb9850a4c55d27bf585e555ceabb482760cb",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +423,427 @@    val args: Array[SExprAtomic] = values.map(SEValue(_))\n    // We can safely introduce a let-expression here to bind the `func` expression,\n    // because there are no stack-references in `args`, since they are pure speedy values.\n    AExpr(SELet1General(func.wrapped, SEAppAtomicGeneral(SELocS(1), args)))\n  }"
  },
  {
    "id" : "283d05a5-b07c-4ab7-a46d-eeacf023017d",
    "prId" : 6440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Don't we need to shift all stack references in `args` by 1 for this to work?",
        "createdAt" : "2020-06-26T11:58:03Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "344ea134-5e17-4b06-8fb0-c4bd4f467722",
        "parentId" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I dont think so, but I'll have a deeper think...",
        "createdAt" : "2020-06-30T15:09:55Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "e13d921e-c6e3-4a53-a168-dbd8e9be361f",
        "parentId" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Did you think about it?",
        "createdAt" : "2020-07-01T18:59:31Z",
        "updatedAt" : "2020-07-01T18:59:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "9219906f-454c-4a2b-b638-d00b42d53484",
        "parentId" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. It is safe because the args array always contains values (constructed with SEValue) and so will not contains any stack references.\r\n",
        "createdAt" : "2020-07-02T07:05:45Z",
        "updatedAt" : "2020-07-02T07:05:45Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "21adc4a5-bbb4-4e9f-aa59-80d55e889c3e",
        "parentId" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I understand. Can you please add a comment in the code why it is safe and also explain why the function doesn't take an array of values but rather an array of expressions (or change it to take an array of values).",
        "createdAt" : "2020-07-02T07:15:00Z",
        "updatedAt" : "2020-07-02T07:15:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dcbbbe21-7a01-4721-af01-b7729104555f",
        "parentId" : "b912f278-762a-4e15-896a-e9df45617ab1",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "https://github.com/digital-asset/daml/issues/6573",
        "createdAt" : "2020-07-02T07:40:35Z",
        "updatedAt" : "2020-07-02T07:41:05Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +427,431 @@\n  def makeApp(func: AExpr, args: Array[SExprAtomic]): AExpr = {\n    AExpr(SELet1General(func.wrapped, SEAppAtomicGeneral(SELocS(1), args)))\n  }\n"
  },
  {
    "id" : "513fb6b0-7f5e-4f30-8066-23197c1f132c",
    "prId" : 5916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8bc1305-723a-4f33-bd63-3cbaf6e8c760",
        "parentId" : null,
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Why did this change?",
        "createdAt" : "2020-05-08T18:51:58Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "9b137c11-479f-409a-8aa5-96ce4390ab62",
        "parentId" : "f8bc1305-723a-4f33-bd63-3cbaf6e8c760",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "So that we can log the name in the trigger sink.",
        "createdAt" : "2020-05-08T19:15:47Z",
        "updatedAt" : "2020-05-08T19:15:48Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +484,488 @@    source\n      .viaMat(msgFlow)(Keep.right[NotUsed, T])\n      .toMat(getTriggerSink(name, acs, submit))(Keep.both)\n      .run()\n  }"
  },
  {
    "id" : "2a201f39-eb1b-49e2-892d-5c8ecbf33e4a",
    "prId" : 5875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a77f33b-48f7-41a6-91ad-2558f4badbfb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Note that `usedCommandIds` leaks memory. We should at least limit the size.",
        "createdAt" : "2020-05-07T07:52:48Z",
        "updatedAt" : "2020-05-07T10:47:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "09d276215366082b5891c9c2fd70ea2e27abc11d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +217,221 @@  // limit the size.\n  private var commandIdMap: Map[UUID, String] = Map.empty\n  // This is the set of command IDs emitted by the trigger.  We track\n  // this to detect collisions.\n  private var usedCommandIds: Set[String] = Set.empty"
  },
  {
    "id" : "fb9192e8-fe65-42d1-8a4f-3212145b4b85",
    "prId" : 5875,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5083b749-17aa-4357-a781-af5f2b5cf3bc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`msgFlow` isn’t a kill switch in general, e.g., in the tests we set it to something like `take(n)` to cut off the stream after n messages.",
        "createdAt" : "2020-05-07T07:56:36Z",
        "updatedAt" : "2020-05-07T10:47:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "09d276215366082b5891c9c2fd70ea2e27abc11d",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +457,461 @@  }\n\n  // Run the trigger given the state of the ACS. The msgFlow argument\n  // passed from ServiceMain is a kill switch. Other choices are\n  // possible demonstrated in the tests where a"
  },
  {
    "id" : "5ad8205d-1716-41ab-a625-940a2457261c",
    "prId" : 5038,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d980624c-3440-4e46-9510-cf3934df65a6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think the API isn’t quite right get. It would make more sense to split the initialization into\r\n1. Take the packages and a trigger id, call `getTrigger`, `getTriggerFilter` and `getTriggerHeartbeat` and stuff that information in `Trigger`.\r\n2. Then make the runner take the `Trigger` and only handle connection to the ledger.\r\n\r\nHowever, I didn’t want to include this in this PR to make it easier to follow.",
        "createdAt" : "2020-03-17T09:50:57Z",
        "updatedAt" : "2020-03-17T09:50:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cff5df7c8ddada578757bb1298720a07e4aa66a",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +439,443 @@  )(implicit materializer: Materializer, executionContext: ExecutionContext): Future[SExpr] = {\n    val runner = Runner.fromDar(dar, triggerId, client, timeProviderType, applicationId, party)\n    val filter = runner.getTriggerFilter()\n    val heartbeat = runner.getTriggerHeartbeat()\n    for {"
  },
  {
    "id" : "dd71876b-8bbc-457f-b0bb-605270f31648",
    "prId" : 5038,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0eb8cd47-2041-4d3d-958b-1e110bafd99d",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Does `converter` still need to be an argument when it's a member of `Runner`?",
        "createdAt" : "2020-03-17T10:38:54Z",
        "updatedAt" : "2020-03-17T10:43:06Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "e4ae5e54-ec3b-428b-a96a-c864264f1edc",
        "parentId" : "0eb8cd47-2041-4d3d-958b-1e110bafd99d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It doesn’t, good catch! I’ll clean it up as part of the next refactoring PR.",
        "createdAt" : "2020-03-17T10:51:03Z",
        "updatedAt" : "2020-03-17T10:51:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cff5df7c8ddada578757bb1298720a07e4aa66a",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +77,81 @@  // the new state\n  private def handleStepResult(\n      converter: Converter,\n      v: SValue,\n      submit: SubmitRequest => Unit): SValue ="
  },
  {
    "id" : "142775da-605e-4c6d-9f3a-6ae4cfa0c785",
    "prId" : 3983,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "628804c1-40c1-4861-82ba-f08ab4c29c45",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do I understand it correctly that we do not need to reset the log since we log on addition to the tracelog and never actually read the values?",
        "createdAt" : "2020-01-08T14:59:42Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "37b390bb-86e0-43de-8627-20343b4dac62",
        "parentId" : "628804c1-40c1-4861-82ba-f08ab4c29c45",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Yes, that's the idea.\r\nAlthough in DAMLScript the only tracelogs that you will see as the output of DAMLScript are the ones in the `Script` value, but not the ones that are logged as part of regular choice executions on the server.",
        "createdAt" : "2020-01-08T15:04:50Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "0777809c-9fd5-4e9c-bb05-1fcf5da4b429",
        "parentId" : "628804c1-40c1-4861-82ba-f08ab4c29c45",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Sure that’s exactly how it should be imho :)",
        "createdAt" : "2020-01-08T15:06:47Z",
        "updatedAt" : "2020-01-08T15:13:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "7af1640707d0cfa84dc71cd6c9c0200392829790",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +119,123 @@    }\n\n  def stepToValue(machine: Speedy.Machine): Unit = {\n    while (!machine.isFinal) {\n      machine.step() match {"
  },
  {
    "id" : "fa032f9a-1167-4794-8f5e-be07057695c4",
    "prId" : 3858,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda5d086-3d08-4480-8723-5e25dcbec15e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I am a bit unsure on whether this should depend on the time provider, i.e., be static in static time mode or whether it should always UTC. Given that e.g. DABL always runs in static time mode, I could see it being useful to use UTC since that allows you to feed in time externally.\r\n\r\n@tweber-da Given that you raised this issue, do you have a preference here?\r\nor maybe @bame-da?",
        "createdAt" : "2019-12-16T12:31:07Z",
        "updatedAt" : "2019-12-16T12:52:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "585b8b4c-b5fc-4f07-9046-20ba38e9640b",
        "parentId" : "cda5d086-3d08-4480-8723-5e25dcbec15e",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Merging for now. @tweber-da @bame-da let me know if you'd prefer the trigger to get wall clock time in static time mode as well.\r\n",
        "createdAt" : "2019-12-17T10:11:58Z",
        "updatedAt" : "2019-12-17T10:11:58Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "15fac3d5c4c90326214e18a515fa882a21f6ef7f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +267,271 @@    })\n    val clientTime: Timestamp =\n      Timestamp.assertFromInstant(Runner.getTimeProvider(timeProviderType).getCurrentTime)\n    val initialState =\n      SEApp("
  },
  {
    "id" : "3fa92c2b-a0d2-49c9-950f-adcb7f139187",
    "prId" : 3501,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d069a690-d15a-44d3-8465-eb114b33e50e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think this isn’t quite right: First the commandId field is optional and will be an empty string for transactions submitted by another party so we need to handle this. Transactions submitted by our party might still come from a different client than the trigger so the UUID conversion can still fail. I would propose that in that case we should treat this as if no command id has been supplied and do the same for when the lookup fails.",
        "createdAt" : "2019-11-18T09:58:58Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "212c07af-fe65-4bcb-b865-405fdde091f7",
        "parentId" : "d069a690-d15a-44d3-8465-eb114b33e50e",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "The empty case should be handled by the `try catch`. `UUID.fromString` should throw an `IllegalArgumentException` in case of an empty string or otherwise illegal UUID and the `catch` block handles that case.\r\n\r\nFor reference, this snippet is taken from the [`CompletionMsg` case above](https://github.com/digital-asset/daml/pull/3501/files/95ccc59b45119a070a0c30fb5451ca8855158438#diff-89250be8bed2fd6ce958fd8b1c1aeea9R204-R214).\r\n\r\n> I would propose that in that case we should treat this as if no command id has been supplied and do the same for when the lookup fails.\r\n\r\nSo, clear the `commandId` field instead of forwarding the incoming `msg` unchanged? ",
        "createdAt" : "2019-11-18T12:36:38Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "27670409-d863-4eef-bdea-7fdc7c8c0d4c",
        "parentId" : "d069a690-d15a-44d3-8465-eb114b33e50e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah yeah, the catch makes sense. Clearing `commandId` sounds good and we should we should do thet for completions as well.",
        "createdAt" : "2019-11-18T13:02:50Z",
        "updatedAt" : "2019-11-18T13:07:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "205db04d-79f2-44c2-88e9-e96056f7cbea",
        "parentId" : "d069a690-d15a-44d3-8465-eb114b33e50e",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I've changed it to clear the `commandId` in such cases. The `Converter` will then convert that into a `None : Optional CommandId`.\r\n\r\nIn case of `MCompletion` we're already dropping those messages with unknown command ids.",
        "createdAt" : "2019-11-18T13:10:57Z",
        "updatedAt" : "2019-11-18T13:10:57Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "29c0a995f2d88ec863b54a1e2a26bcb7649cf5d4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +215,219 @@        case TransactionMsg(t) =>\n          try {\n            commandIdMap.get(UUID.fromString(t.commandId)) match {\n              case None => List(TransactionMsg(t.copy(commandId = \"\")))\n              case Some(internalCommandId) =>"
  }
]