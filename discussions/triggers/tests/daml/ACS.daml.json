[
  {
    "id" : "5466f6e2-00eb-4d44-84b1-1bc17db703dc",
    "prId" : 2973,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41173318-d736-4f23-abe1-facac21590e4",
        "parentId" : null,
        "authorId" : null,
        "body" : "Cool, this is much nicer!",
        "createdAt" : "2019-09-23T10:12:17Z",
        "updatedAt" : "2019-09-23T10:12:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "256118b7f2894aaab5f49184e0422475cb64d3dd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +48,52 @@            let proposeMirror : Command = createCmd (AssetMirrorProposal { issuer })\n            in (proposeMirror :: cmds, TM.insert cId.contractId cId.templateId acs)\n            | Some (AssetMirrorProposal {}) <- fromAnyTemplate argument ->\n            let accept : Command = exerciseCmd @AssetMirrorProposal cId Accept\n            in (accept :: cmds, acs)"
  },
  {
    "id" : "d25afc2a-9d69-4869-aace-9534c7ecea19",
    "prId" : 2945,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cfb6257-9d50-4390-b80f-9f66ae32a528",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m confused, it looks like you don’t expose `AnyContractId` (or more likely I’m too stupid to see it) but you can still access the fields?",
        "createdAt" : "2019-09-18T08:04:06Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "aba0b833-5fe3-4ed2-b61e-3114a9f94195",
        "parentId" : "7cfb6257-9d50-4390-b80f-9f66ae32a528",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Indeed, that's why I didn't notice that I hadn't exposed it. I don't know how the field is accessible without export. The code still compiles, even if I explicitly export the type without the constructors.",
        "createdAt" : "2019-09-18T08:16:47Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "936b3a16-2302-4f9f-a0ea-64ceb796fcb3",
        "parentId" : "7cfb6257-9d50-4390-b80f-9f66ae32a528",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I think that might be because of how our record desugaring (the dot syntax used here) works. That does seem rather confusing and potentially problematic since it removes the ability to have abstract record types.",
        "createdAt" : "2019-09-18T08:18:56Z",
        "updatedAt" : "2019-09-18T08:30:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "833cab6997bcd9eadf1ccd597c9c4eb33d76d128",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +21,25 @@    updateAcs : TextMap Identifier -> Created -> TextMap Identifier\n    updateAcs acs (Created _ cId)\n      | cId.templateId.entityName == \"Asset\" = TM.insert cId.contractId cId.templateId acs\n      | otherwise = acs\n"
  }
]