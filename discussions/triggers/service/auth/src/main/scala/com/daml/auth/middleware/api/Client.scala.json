[
  {
    "id" : "e76972c9-dca1-4203-a9f3-8a4fce7672c7",
    "prId" : 8532,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7822eea-24f8-421f-9af1-14cb9336d3a7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do you see a usecase where you would want to configure this? I don’t but you’ve clearly thought more about it so just wondering if we might want this in the future :slightly_smiling_face: ",
        "createdAt" : "2021-01-18T07:52:24Z",
        "updatedAt" : "2021-01-18T12:36:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d06d3a15-29a6-42d3-acd9-4daaae348984",
        "parentId" : "e7822eea-24f8-421f-9af1-14cb9336d3a7",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I don't see when this would be necessary. If it becomes necessary at some point, it should be easy enough to make it configurable. ",
        "createdAt" : "2021-01-18T11:23:47Z",
        "updatedAt" : "2021-01-18T12:36:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92766e48a42ec95810bd58a33f80a7c4bd4656",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +147,151 @@    }\n\n  val authenticateChallengeName = \"DamlAuthMiddleware\"\n\n  /** Return a 401 Unauthorized response."
  },
  {
    "id" : "b72ed162-9509-43d9-9980-d0283e643880",
    "prId" : 8532,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bbd6aab-19a0-4a59-a0fa-c7339069fd95",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess we don’t have to worry about duplicates here?",
        "createdAt" : "2021-01-18T07:54:36Z",
        "updatedAt" : "2021-01-18T12:36:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d64e6d36-6450-44ab-b7ca-86b8c876f973",
        "parentId" : "5bbd6aab-19a0-4a59-a0fa-c7339069fd95",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "The main motivation here was to leave the configured URI as untouched as possible. Duplicates could occur if the user configures an `--auth` flag with query params that conflict with the auth middleware protocol. In that case both the original parameter and the new parameter would be present. In general, multiple parameters with the same key are allowed in URIs and their meaning is implementation defined. akka-http's `parameters` combinator seems to use the first parameter in case of duplicates (maybe we should instead combine in case of `claims`?). However, the auth middleware is meant to be exchangeable. I'm not sure we should define the handling of multiple query parameters in a user's auth middleware implementation at this point. ",
        "createdAt" : "2021-01-18T12:27:23Z",
        "updatedAt" : "2021-01-18T12:36:59Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92766e48a42ec95810bd58a33f80a7c4bd4656",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +249,253 @@  private def appendToUri(uri: Uri, path: Uri.Path, query: Uri.Query = Uri.Query.Empty): Uri = {\n    val newPath: Uri.Path = uri.path ++ path\n    val newQueryParams: Seq[(String, String)] = uri.query().toSeq ++ query.toSeq\n    val newQuery = Uri.Query(newQueryParams: _*)\n    uri.withPath(newPath).withQuery(newQuery)"
  }
]