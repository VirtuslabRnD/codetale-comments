[
  {
    "id" : "28ee71e9-618d-484f-8353-27ba1b35b555",
    "prId" : 7981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0990d53-5ecb-45ae-9476-0814d59cd25d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Contrary to the other scopes this is actually standardized in oidc so a bit less important to make it configurable but still useful if we can do it in one go.",
        "createdAt" : "2020-11-17T10:35:31Z",
        "updatedAt" : "2020-11-17T11:08:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1cb1bbdaed5b1ff73f8f5e4958958815b914f7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +114,118 @@            // Auth0 will only issue a refresh token if the offline_access claim is present.\n            // TODO[AH] Make the request configurable, see https://github.com/digital-asset/daml/issues/7957\n            scope = Some(\"offline_access \" + login.claims.toQueryString),\n            state = Some(requestId.toString),\n            audience = Some(\"https://daml.com/ledger-api\")"
  },
  {
    "id" : "8ae1d4cf-140f-475c-ac46-d4c197b005ad",
    "prId" : 7981,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b97bc3c6-4b22-422e-8830-742b6a768239",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Reading through this, the field name is a bit confusing. `config.endpoints.oauthToken` or `config.oauthTokenEndpoint` might be clearer but let’s leave that out of this PR.",
        "createdAt" : "2020-11-17T10:37:04Z",
        "updatedAt" : "2020-11-17T11:08:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7cf6b07c-4051-4fb1-b41f-fdf40bbb943b",
        "parentId" : "b97bc3c6-4b22-422e-8830-742b6a768239",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Indeed, it might make sense to couple this setting with the configuration of the requests themselves. ",
        "createdAt" : "2020-11-17T11:06:30Z",
        "updatedAt" : "2020-11-17T11:08:09Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1cb1bbdaed5b1ff73f8f5e4958958815b914f7",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +202,206 @@        for {\n          entity <- Marshal(body).to[RequestEntity]\n          req = HttpRequest(uri = config.oauthToken, entity = entity, method = HttpMethods.POST)\n          resp <- Http().singleRequest(req)\n        } yield resp"
  },
  {
    "id" : "1c29c8b8-47f9-4197-b45c-7940bd71aaf9",
    "prId" : 7920,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cc30d20-afe9-4248-9c50-1496069ddb24",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "This is a change to the specification of the auth middleware. Before it didn't mention authorization failure in this context.\r\n\r\nI've considered these alternatives to forwarding the error:\r\n- Return an error from the auth middleware directly. This would not require any error handling code in the trigger service. However, it also doesn't allow any auth failure related cleanup or other dedicated handling in the auth service's client. E.g. in the trigger service we can delete the stored continuation.\r\n- Just redirect but not pass an error parameter. This would also not require any error handling code in the trigger service. The stored continuation would still be popped. However, it wouldn't give the auth middleware's client the opportunity to react to login failure. Instead, it would only fail again at the next /auth request. The client can still choose to ignore the error parameter. Meaning, from the client's perspective this approach is still a possibility.",
        "createdAt" : "2020-11-09T13:31:56Z",
        "updatedAt" : "2020-11-10T08:50:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "7feba79b-88e8-4707-9a6d-2d3b6b8a3b38",
        "parentId" : "5cc30d20-afe9-4248-9c50-1496069ddb24",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Your approach seems very sensible. I would argue that it also matches the interaction between the oauth client and authorization server: If the user doesn’t pass the consent screen, you also get an error response on the client. That said, I think it’s probably not reasonable to rely on the error response always arriving, e.g., if he user just closes the tab so we probably want some timeout to clean things up in addition to this. But that’s definitely a separate issue.",
        "createdAt" : "2020-11-10T08:41:26Z",
        "updatedAt" : "2020-11-10T08:50:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bdb193f7-b304-4924-8809-313c92a06441",
        "parentId" : "5cc30d20-afe9-4248-9c50-1496069ddb24",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "> That said, I think it’s probably not reasonable to rely on the error response always arriving, e.g., if he user just closes the tab so we probably want some timeout to clean things up in addition to this. But that’s definitely a separate issue.\r\n\r\nAbsolutely, that's in part what https://github.com/digital-asset/daml/issues/7721 is for. That and also DOS attacks.",
        "createdAt" : "2020-11-10T08:49:46Z",
        "updatedAt" : "2020-11-10T08:50:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dad084826c66beb847e71834d1060d429fcf444",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +187,191 @@              Uri.Query(params: _*)\n            }\n            redirect(uri, StatusCodes.Found)\n          }\n        }"
  },
  {
    "id" : "588fac31-4d03-4155-b8e7-9b00344761f7",
    "prId" : 7629,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db299fbb-8454-4c9c-9544-fe9b9f1809a3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think I’ve mentioned it before but I expect we need to make the mapping here pretty configurable. For auth0 you are very flexible in defining how scopes are mapped to the token but this isn’t necessarily true for all auth providers and some of them also use arbitrary other arguments. One idea would be to have a jsonnet template (or whatever other template format you come up with, I’m not familiar with what people use for this) to basically define the whole request body here as users need to.\r\n\r\nDefinitely not something for this PR, but something to keep in mind.",
        "createdAt" : "2020-10-09T15:40:32Z",
        "updatedAt" : "2020-10-09T15:43:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fdd3d94a-7e59-4495-98cf-cfb7c2fdeca6",
        "parentId" : "db299fbb-8454-4c9c-9544-fe9b9f1809a3",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, this is auth0 specific. What I've seen in other places is presets for known auth providers. Templating is a nice idea, I'll keep it in mind.",
        "createdAt" : "2020-10-09T16:42:22Z",
        "updatedAt" : "2020-10-09T16:42:22Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "58bb1ff30fa2ecc252322bac614323c81e9f5eb1",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +107,111 @@            scope = Some(login.claims.toQueryString),\n            state = Some(requestId.toString),\n            audience = Some(\"https://daml.com/ledger-api\")\n          )\n          redirect(config.oauthAuth.withQuery(authorize.toQuery), StatusCodes.Found)"
  },
  {
    "id" : "04c7decd-7c5a-436d-9d36-c6c65631f3dc",
    "prId" : 7565,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03d1f148-ed23-4856-82f1-3cf56ace2698",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I still feel like there must be some builtin pattern for checking the status code and then unmarshalling but I never found one :confused: ",
        "createdAt" : "2020-10-05T12:00:09Z",
        "updatedAt" : "2020-10-05T13:34:20Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "9310bb3f2b0980068c91493742150006dbe5c473",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +126,130 @@                resp <- Http().singleRequest(req)\n                tokenResp <- if (resp.status != StatusCodes.OK) {\n                  Unmarshal(resp).to[String].flatMap { msg =>\n                    Future.failed(new RuntimeException(\n                      s\"Failed to retrieve token at ${req.uri} (${resp.status}): $msg\"))"
  },
  {
    "id" : "5768fdae-5c98-44fe-8d9c-5bb73180d056",
    "prId" : 7519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa16de03-1763-4637-8ee2-53a95de48ade",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think we might want to make the authority here or probably even better just the full URL configurable. Consider a case where this is running behind NGINX. We might be listening on `localhost` but the external facing host will be different and the path could also be different (e.g. it could be behind some prefix).",
        "createdAt" : "2020-09-30T08:05:40Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "65a01cc9-7411-4fab-86ec-4782813f7ba5",
        "parentId" : "aa16de03-1763-4637-8ee2-53a95de48ade",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Good point",
        "createdAt" : "2020-09-30T08:37:19Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@\n  // TODO[AH] Make the redirect URI configurable, especially the authority. E.g. when running behind nginx.\n  private def toRedirectUri(uri: Uri) =\n    Uri()\n      .withScheme(uri.scheme)"
  },
  {
    "id" : "6ec90503-6fa4-4066-8ab8-5d9a99547d5c",
    "prId" : 7519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc23f0d3-b41a-4d49-b491-aa286368b5bd",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth extracting the request bodies into separate functions? Totally fine to leave that for separate PRs.",
        "createdAt" : "2020-09-30T08:10:24Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "47446c11-5327-4e13-a39a-5135b4779b10",
        "parentId" : "cc23f0d3-b41a-4d49-b491-aa286368b5bd",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yeah, that's probably better for readability, especially once the other endpoints are filled in. ",
        "createdAt" : "2020-09-30T08:38:48Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@      path(\"login\") {\n        get {\n          parameters(('redirect_uri.as[Uri], 'claims))\n            .as[Request.Login](Request.Login) {\n              login =>"
  },
  {
    "id" : "897e924c-b355-4a5e-aa43-601fa54c1686",
    "prId" : 7519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9d2c20d-56fd-427e-be19-44fcb81817c3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We probably need to make the scopes configurable to some degree. Some oauth providers (e.g. auth0) also allow you to use custom parameters instead of scopes to accomplish the same thing. Not quite sure what the best UX for that is and we don’t have to solve this in this PR but something to keep in mind for the future.",
        "createdAt" : "2020-09-30T08:11:53Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8c421838-f33a-4a56-8a0d-153a5ae679fa",
        "parentId" : "c9d2c20d-56fd-427e-be19-44fcb81817c3",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "That's good to know, the implementation of that is probably best guided by a concrete use-case that requires that sort of thing. The mapping from claims to scope generally still needs work. ",
        "createdAt" : "2020-09-30T08:40:37Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@                      clientId = config.clientId,\n                      redirectUri = toRedirectUri(request.uri),\n                      scope = Some(login.claims),\n                      state = Some(requestId.toString))\n                    redirect("
  },
  {
    "id" : "98f92b36-110f-4987-8dfe-3ed6f77db20b",
    "prId" : 7519,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b7824f7-26ae-46f3-8624-116863121925",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe unauthorized would be a more appropriate status code?",
        "createdAt" : "2020-09-30T08:13:03Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b955cf3-0a69-463b-8ff2-271b9c6526db",
        "parentId" : "4b7824f7-26ae-46f3-8624-116863121925",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "The idea behind 404 was that the login request under the given `state` was not found. 401 seems problematic, the `/cb` is part of the authentication flow, not something that requires authentication itself, also 401 requires a challenge in the [WWW-Authenticate header field](https://tools.ietf.org/html/rfc7235#section-3.1) which doesn't seem appropriate here. ",
        "createdAt" : "2020-09-30T08:56:38Z",
        "updatedAt" : "2020-09-30T09:47:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd2cbb85e88ccc2b25624f1d6476ec839d66de0",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@                    redirectUri match {\n                      case None =>\n                        complete(StatusCodes.NotFound)\n                      case Some(redirectUri) =>\n                        val body = OAuthRequest.Token("
  }
]