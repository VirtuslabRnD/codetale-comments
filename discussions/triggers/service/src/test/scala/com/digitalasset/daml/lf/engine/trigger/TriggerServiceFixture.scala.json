[
  {
    "id" : "4488bb42-5b6b-4b97-9b87-0a866668a4bd",
    "prId" : 9286,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b85a04e-7cc7-42fa-8414-690f27caa5c8",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "My guess would be that culprit=flyway, maybe more connections when running on Oracle.",
        "createdAt" : "2021-03-31T00:35:10Z",
        "updatedAt" : "2021-03-31T08:28:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "a02933a5-15bf-427a-af70-369e0f9381bd",
        "parentId" : "0b85a04e-7cc7-42fa-8414-690f27caa5c8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah it’s definitely flyway. I just don’t really get why it would use more connections against Oracle than against PostgreSQL for the same number of migrations but :shrug: doesn’t seem that bad to change it.",
        "createdAt" : "2021-03-31T08:25:04Z",
        "updatedAt" : "2021-03-31T08:28:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3cbb7cfe5d582d0470ac96635b4c767ed8c3200",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +444,448 @@    JdbcConfig(\"oracle.jdbc.OracleDriver\", oracleJdbcUrl, oracleUser, oraclePwd)\n  // TODO For whatever reason we need a larger pool here, otherwise\n  // the connection deadlocks. I have no idea why :(\n  private lazy val triggerDao =\n    DbTriggerDao(jdbcConfig_, poolSize = dao.Connection.PoolSize.Production)"
  },
  {
    "id" : "45471cd1-4af2-4a8d-9f2a-b22c4f4aa4c3",
    "prId" : 7952,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a58748-14e7-4625-ae63-14fb57ccdf6b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should we also clear cookies?",
        "createdAt" : "2020-11-12T09:57:04Z",
        "updatedAt" : "2020-11-12T16:58:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a06220c2-26c2-4645-9236-e584bd54d9aa",
        "parentId" : "d8a58748-14e7-4625-ae63-14fb57ccdf6b",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, that's already done in the HttpCookies fixture",
        "createdAt" : "2020-11-12T10:39:56Z",
        "updatedAt" : "2020-11-12T16:58:01Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "15141e7528b1720f2546c848298b9fabca5dfddc",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +214,218 @@\n  override protected def afterEach(): Unit = {\n    authServer.resetAuthorizedParties()\n\n    super.afterEach()"
  },
  {
    "id" : "641508e6-704a-456e-a01d-ff4770b28e28",
    "prId" : 7654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bedae292-2ffb-4aa5-9aa6-7c8a022954de",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Unbinding the middleware first seems more intuitive to me given that it connects to the oauth server.",
        "createdAt" : "2020-10-16T14:56:33Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4a7ca678-3771-4314-b9cd-d2a9e8f7edbe",
        "parentId" : "bedae292-2ffb-4aa5-9aa6-7c8a022954de",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Fair enough, fixed.",
        "createdAt" : "2020-10-16T15:15:49Z",
        "updatedAt" : "2020-10-16T15:18:19Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1adc8e2e9d1b4d7828d6b222879ebaabd6947a",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +124,128 @@          cleanup = () =>\n            for {\n              _ <- middleware.unbind()\n              _ <- oauth.unbind()\n            } yield ()"
  },
  {
    "id" : "9deb7f71-ad0e-4fb5-bef2-409914de63dc",
    "prId" : 6927,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c48136f4-b0ea-41eb-a7bd-bb20f363b3d0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like you are now starting toxiproxy in parallel with Sandbox. I believe that is racy, consider the following scenario:\r\n\r\n1. `LockedFreePort.find()` will bind to port 0 to get a free port X and immediately stop listening on that port and give you back the port X it got allocated by the OS.\r\n2. Now port X is free, Sandbox starts up bindings to port 0. This doesn’t go through the locking mechanism afaik as it is only used in the test library. The OS is free to allocate Sandbox to port X since nothing is listening on this.\r\n3. Now toxiproxy is started on port X which is already occupied by Sandbox.\r\n\r\nAt least on Linux, this is very hard to trigger since the Kernel will not immediately reuse the port so Sandbox will be allocated to a different port. Not quite sure about other platforms but I don’t recall seeing issues with this there either. So we probably don’t have to worry about this for now but it’s worth keeping in mind. You could fix it fairly easily by sequencing `toxiproxyF` before starting Sandbox or only create the future after you got `ledgerPort`.",
        "createdAt" : "2020-07-30T06:21:49Z",
        "updatedAt" : "2020-07-30T06:22:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2d55dcab-3d6d-420d-8a8d-bfe7150ead58",
        "parentId" : "c48136f4-b0ea-41eb-a7bd-bb20f363b3d0",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Ahh interesting. I'll keep an eye on it and probably reorder the futures later.",
        "createdAt" : "2020-07-30T17:43:34Z",
        "updatedAt" : "2020-07-30T17:44:08Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "d29cbf8d-e0c1-43aa-9487-822bc64f95f4",
        "parentId" : "c48136f4-b0ea-41eb-a7bd-bb20f363b3d0",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Something like this maybe?\r\n\r\n```\r\n- should give an 'unauthorized' response for a stop request without an authorization header *** FAILED *** (123 milliseconds)\r\n  java.lang.NullPointerException:\r\n  at com.daml.ports.PortLock$Locked.unlock(PortLock.scala:55)\r\n  at com.daml.ports.PortLock$.lock(PortLock.scala:41)\r\n  at com.daml.ports.LockedFreePort$.find(LockedFreePort.scala:15)\r\n  at com.daml.lf.engine.trigger.TriggerServiceFixture$.$anonfun$withTriggerService$1(TriggerServiceFixture.scala:65)\r\n```",
        "createdAt" : "2020-07-30T18:30:07Z",
        "updatedAt" : "2020-07-30T18:30:07Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "94d1ed12-ec42-4c85-bf03-08604766a236",
        "parentId" : "c48136f4-b0ea-41eb-a7bd-bb20f363b3d0",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "That could be it! I'll submit the PR sequencing `toxiproxyF` before the sandbox as it's an easy change anyway.",
        "createdAt" : "2020-07-30T18:43:55Z",
        "updatedAt" : "2020-07-30T18:43:56Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "3096030e-dd8d-476d-8363-c276097f93c1",
        "parentId" : "c48136f4-b0ea-41eb-a7bd-bb20f363b3d0",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#6939 for the one, and 69d5d87c904add3ee19566f7ce61d00d3c34db3c for the other.",
        "createdAt" : "2020-07-30T19:36:32Z",
        "updatedAt" : "2020-07-30T19:36:32Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "9da65d203728c37c05e82c1cdcd4581d76e66879",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +63,67 @@      else BazelRunfiles.rlocation(\"external/toxiproxy_dev_env/toxiproxy-server-windows-amd64.exe\")\n    val toxiproxyF: Future[(Process, ToxiproxyClient)] = for {\n      toxiproxyPort <- Future(LockedFreePort.find())\n      toxiproxyServer <- Future(\n        Process(Seq(toxiproxyExe, \"--port\", toxiproxyPort.port.value.toString)).run())"
  },
  {
    "id" : "b28d6e3a-1192-4073-92c0-a85ab1895ab9",
    "prId" : 6926,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What exactly went wrong with `Future.sequence`? As far as I understand `Future.sequence` is not fail fast so it shouldn’t stop anything from running. Does running these things in parallel cause issues?",
        "createdAt" : "2020-08-04T05:03:33Z",
        "updatedAt" : "2020-08-04T05:03:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b6da370c-f5bd-45f6-b34d-097b224c3569",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Actually, I think I might have misread something and it is fail fast which probably explains the issue here.",
        "createdAt" : "2020-08-04T05:04:40Z",
        "updatedAt" : "2020-08-04T05:04:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "11144477-fe79-4e05-85cb-00b20040f52a",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I don't think `Future.sequence` is fail-fast. It's passed already-running Futures and AFAIK, there's no way to stop them.",
        "createdAt" : "2020-08-04T09:18:31Z",
        "updatedAt" : "2020-08-04T09:18:31Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "a36a5cb5-64a8-4251-bfb1-907c6d48b55c",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "So the issue was that we tried to stop things in parallel? I’m not quite sure why that’s a problem.",
        "createdAt" : "2020-08-04T09:23:32Z",
        "updatedAt" : "2020-08-04T09:23:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "57e3184a-c793-4fb2-9791-ae9092e513db",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It is fail-fast in the sense that if one future fails, it completed, allowing the next step (the restart) to proceed despite something else's shutdown being in progress.",
        "createdAt" : "2020-08-04T12:09:18Z",
        "updatedAt" : "2020-08-04T12:09:18Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "49c4617a-6236-42c9-b84c-d13036b5d4a0",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I could possibly restore the parallel shutdown, if the forced success of this chain is really the relevant piece, but would rather get this in as is first.",
        "createdAt" : "2020-08-04T12:13:24Z",
        "updatedAt" : "2020-08-04T12:13:24Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "4652ee61-04c4-49e8-b9cc-9b5bb2344074",
        "parentId" : "6eba4085-b3b6-49c8-ad1c-e972d5ea78a4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, thanks for the explanation! I’m not worried about losing parallelism so totally fine to get this in and ignore this.",
        "createdAt" : "2020-08-04T12:14:40Z",
        "updatedAt" : "2020-08-04T12:14:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d621fa244b09f829603ce2baad68676abb485e58",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +138,142 @@\n    fa.transformWith { ta =>\n      for {\n        se <- optErr(serviceF.flatMap {\n          case (_, system) =>"
  },
  {
    "id" : "183d6a32-5030-463f-a73d-5850f31abdf7",
    "prId" : 6309,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb2693a9-0bf5-4e39-9292-d78d4c13027a",
        "parentId" : null,
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "```suggestion\r\n        noSecretKey = true // Use the default secret for testing.\r\n```",
        "createdAt" : "2020-06-11T22:18:15Z",
        "updatedAt" : "2020-06-11T22:19:34Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "df38038340aa1699372867c97fee63f61f3bd093",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +124,128 @@        dar,\n        jdbcConfig,\n        noSecretKey = true // That's ok, use the default.\n      )\n    } yield service"
  }
]