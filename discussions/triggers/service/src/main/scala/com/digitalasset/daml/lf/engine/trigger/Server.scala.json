[
  {
    "id" : "f0140cd3-a704-463d-ae9d-b7e450a17ec8",
    "prId" : 8186,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26bb52b8-e862-4821-be36-cca4acad89f8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This feels a bit backwards. We could just watch when we start it and throw the exception when we failed. I think I proposed that before but it doesn’t work because we cannot throw from the behavior interceptor? If so, totally fine to keep it until the akka bug is fixed.",
        "createdAt" : "2020-12-08T08:41:50Z",
        "updatedAt" : "2020-12-08T08:42:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3fe8b798-6a3b-45cd-8b6c-c4df96b8fcf8",
        "parentId" : "26bb52b8-e862-4821-be36-cca4acad89f8",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "We only want to restart after a token expiry and after we've refreshed the token. So we can't `watchWith(..., RestartTrigger(...))` when we start the trigger. \r\nWe could let the server watch the `TriggerRunner` and then handle refresh and restart in the `ChildFailed` signal handler. As described in https://github.com/digital-asset/daml/pull/8037#discussion_r534048335 this is awkward right now as we don't have the necessary information available. I'll see if we can refactor the trigger server to make this easier.",
        "createdAt" : "2020-12-08T09:43:18Z",
        "updatedAt" : "2020-12-08T09:43:18Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "18c99608aa81832da01c1346f677b3d8f2159e67",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +604,608 @@      // and wait for it to terminate before we can spawn it again.\n      // Otherwise, akka will raise an error due to a non-unique actor name.\n      getRunnerRef(req.runningTrigger.triggerInstance) match {\n        case Some(runner) =>\n          ctx.watchWith(runner, req)"
  },
  {
    "id" : "d0b720f8-3510-4c8f-ac35-7a7150f8b556",
    "prId" : 8048,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "358c3c23-5d76-400e-8a71-ec74faf8ecb3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`ctx.child` and `ctx.spawn` are not thread safe and need to be accessed directly from a behavior. afaict, this was always an issue but newer versions of akka throw a runtime error here.",
        "createdAt" : "2020-11-24T17:00:56Z",
        "updatedAt" : "2020-11-25T08:47:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d779b0dd647defc802c83114b8d208a5ddb426c2",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +118,122 @@  }\n\n  private def getRunner(triggerInstance: UUID): Future[Option[ActorRef[TriggerRunner.Message]]] = {\n    implicit val timeout: Timeout = Timeout(5 seconds)\n    implicit val scheduler: Scheduler = schedulerFromActorSystem(ctx.system)"
  },
  {
    "id" : "06217b47-c1b8-42a7-8320-ce8c8d5f7f5f",
    "prId" : 7999,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c7da26c-282d-4813-a364-48665f999be8",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Returning arbitrary exceptions to the client is maybe something we should avoid. Not to risk exposing any sensitive information about a deployment. It might be better to log the error and return a generic error message. For certain types of errors we can choose to be more specific, e.g. unprocessable entity. I think this was already an issue before this PR, so seems more appropriate for a follow up PR.",
        "createdAt" : "2020-11-18T09:14:13Z",
        "updatedAt" : "2020-11-18T09:25:45Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "b69076aa-34a5-445c-8dcc-980bf443d9f6",
        "parentId" : "9c7da26c-282d-4813-a364-48665f999be8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah that’s a good point, agree on tackling it separately.",
        "createdAt" : "2020-11-18T09:30:19Z",
        "updatedAt" : "2020-11-18T09:30:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "246ff4beb1f3ee7ae4f3fdef7ae1bb8b426a22f3",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +348,352 @@                        case Failure(exception) =>\n                          complete(\n                            errorResponse(StatusCodes.InternalServerError, exception.description))\n                        case Success(Left(err)) =>\n                          complete(errorResponse(StatusCodes.UnprocessableEntity, err))"
  },
  {
    "id" : "b66a7536-8052-47c0-abfb-a5bd929d5d6a",
    "prId" : 7654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "307646e2-dd2a-4505-9c55-39f863ea8eac",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We could in principle consider having a type parameter for whether we run with auth middleware or not which would allow us to get rid of some of the `Option`s and make sure that we either consistently run with auth or consistently don’t run with auth.",
        "createdAt" : "2020-10-13T08:55:34Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f35d3c37-462c-4525-a317-cdff9113a1fc",
        "parentId" : "307646e2-dd2a-4505-9c55-39f863ea8eac",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Wouldn’t do it in this PR and I’m not sure it’s worth doing at all but at least worth considering.",
        "createdAt" : "2020-10-13T08:55:52Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1adc8e2e9d1b4d7828d6b222879ebaabd6947a",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +200,204 @@      implicit ec: ExecutionContext,\n      system: ActorSystem): Directive1[Option[String]] =\n    authConfig match {\n      case NoAuth => provide(None)\n      case AuthMiddleware(authUri) =>"
  },
  {
    "id" : "5b1c1ba7-362f-4f0a-bd00-feb69b893e16",
    "prId" : 7654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c6a7eea-d506-4131-9c3d-257686370b0c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":thinking: not sure, seems like that should work. Maybe @S11001001 knows why.",
        "createdAt" : "2020-10-13T08:57:02Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1adc8e2e9d1b4d7828d6b222879ebaabd6947a",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +284,288 @@              val claims =\n                AuthRequest.Claims(actAs = List(params.party))\n              // TODO[AH] Why do we need to pass ec, system explicitly?\n              authorize(claims)(ec, system) { token =>\n                startTrigger(params.party, params.triggerName, token) match {"
  },
  {
    "id" : "b7cb53a3-6357-4d0f-a91e-c67916c32be7",
    "prId" : 7654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d9a447-c7bb-4657-a7eb-67d999835bf2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We obviously also need this on other endpoints but I assume we’re going to add this later.",
        "createdAt" : "2020-10-13T09:41:03Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "412398c1-5dc1-4bea-9b16-0e5079bfc764",
        "parentId" : "b3d9a447-c7bb-4657-a7eb-67d999835bf2",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I've started with this one since it is the one where the token is actually required for the interaction with the ledger. AFAIK the others don't require authorization as far as the ledger is concerned. Do we also want to use the auth middleware to double as an authorization service for actions on the trigger service itself? E.g. uploading a DAR or stopping a trigger.",
        "createdAt" : "2020-10-13T15:28:22Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "cbd65c9a-74dd-4a90-a003-0f709ef7109a",
        "parentId" : "b3d9a447-c7bb-4657-a7eb-67d999835bf2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "For stopping the trigger I think it makes sense and the same for anything that interacts with a trigger. You want the exact same set of claims for this and I don’t really see how else we would handle it. For DAR uploads, I’m a bit unsure. That’s more of an admin operation. We could either require an admin token via the auth middleware and tie ledger admin privileges to trigger service admin privileges. The alternative would be some separate mechanism for admin operations on the trigger service.",
        "createdAt" : "2020-10-13T16:31:06Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "34c9e751-725b-473b-aaf0-42e8ab141719",
        "parentId" : "b3d9a447-c7bb-4657-a7eb-67d999835bf2",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Thanks for clarifying. Stop seems straight forward enough, upload sounds like it needs a bit more thinking. I'll leave these for future PRs. ",
        "createdAt" : "2020-10-16T13:49:26Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1adc8e2e9d1b4d7828d6b222879ebaabd6947a",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +286,290 @@              // TODO[AH] Why do we need to pass ec, system explicitly?\n              authorize(claims)(ec, system) { token =>\n                startTrigger(params.party, params.triggerName, token) match {\n                  case Left(err) =>\n                    complete(errorResponse(StatusCodes.UnprocessableEntity, err))"
  },
  {
    "id" : "f94ce670-fd6c-404b-8ce6-33305718535a",
    "prId" : 7654,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9a5526a-cbc0-4ec0-a2f9-8800806f2191",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "This directive seems reasonably generic and could potentially be factored out into a client library to be re-used between multiple clients that use the auth middleware.",
        "createdAt" : "2020-10-16T14:00:38Z",
        "updatedAt" : "2020-10-16T15:18:15Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b1adc8e2e9d1b4d7828d6b222879ebaabd6947a",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +197,201 @@  // If a login is required then this will store the current continuation in `authCallbacks`\n  // to proceed once the login flow completed and authentication succeeded.\n  private def authorize(claims: AuthRequest.Claims)(\n      implicit ec: ExecutionContext,\n      system: ActorSystem): Directive1[Option[String]] ="
  },
  {
    "id" : "9d077d8e-e736-4de1-ae3e-b43989f033ac",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2fde7ac-f6ae-44fb-8ea3-ee2ccf4d5605",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```\r\n20:58:59.417 [TriggerService-akka.actor.default-dispatcher-7] INFO  com.daml.lf.engine.trigger.Server - uploading package cc176cffd4667d83c42c1cba4402a21a24a05deb7ba6684cd1a7462809de72b1\r\n20:58:59.448 [TriggerService-akka.actor.default-dispatcher-7] INFO  com.daml.lf.engine.trigger.Server - uploading package c1f1f00558799eec139fb4f4c76f95fb52fa1837a5dd29600baa1c8ed1bdccfd\r\n20:58:59.448 [TriggerService-akka.actor.default-dispatcher-7] INFO  com.daml.lf.engine.trigger.Server - uploading package 733e38d36a2759688a4b2c4cec69d48e7b55ecc8dedc8067b815926c917a182a\r\n<...snip...>\r\n```",
        "createdAt" : "2020-09-02T21:09:51Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +83,87 @@    pkgMap foreach {\n      case (pkgId, pkg) =>\n        logger.info(s\"uploading package $pkgId\")\n        complete(compiledPackages.addPackage(pkgId, pkg))\n    }"
  },
  {
    "id" : "4b74134d-037c-4447-b826-860546bfa314",
    "prId" : 6556,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daa00f4e-90a3-4f50-b22b-27efd5ed6626",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The logic here feels like it might be in the wrong place. Maybe we should move the code for adding it to the table out of `startTrigger` instead of passing an `Option` in here?",
        "createdAt" : "2020-07-01T07:12:58Z",
        "updatedAt" : "2020-07-01T13:04:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ee140d02-e7d9-45f9-962a-658ad2a68c2a",
        "parentId" : "daa00f4e-90a3-4f50-b22b-27efd5ed6626",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Not sure - the steps before and after are required in both cases. Will consider changing later though.",
        "createdAt" : "2020-07-01T13:15:12Z",
        "updatedAt" : "2020-07-01T13:15:12Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "44fd02678b0cd8c79abe85f459fcddbe31dca900",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +108,112 @@    for {\n      trigger <- Trigger.fromIdentifier(compiledPackages, triggerName)\n      triggerInstance <- existingInstance match {\n        case None =>\n          val newInstance = UUID.randomUUID"
  },
  {
    "id" : "3f3e2f68-b596-46ae-84dd-5d98f3e8e57b",
    "prId" : 6556,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d6a8147-7084-46aa-88af-72ce741916bc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I believe I brought this up before but let me bring it up again: I feel slightly uneasy about the fact that we are only reading from the DB on startup and then only write to it while using the in-memory state as the source of truth. That seems like it might be easy for things to get out of sync.\r\nDid you consider abstracting over things such that if we run with postgres we always use postgres as the source of truth and don’t even keep the in-memory store?",
        "createdAt" : "2020-07-01T07:18:10Z",
        "updatedAt" : "2020-07-01T13:04:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b4f9417-db66-4957-84e0-53d2897b9d56",
        "parentId" : "9d6a8147-7084-46aa-88af-72ce741916bc",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "I'm not sure what you mean - the answer to your last question is we already do that. For tracking running triggers, the `RunningTriggerDao` abstracts over the read and write operations so we only use the in-memory store if we don't have a database and we only use the database if we have one. The one exception to this is the package map which we keep in memory in both cases because it's currently required to create a trigger Runner. The code here is specific to when the service is started up with a database provided. Does that address your concern?",
        "createdAt" : "2020-07-01T12:55:12Z",
        "updatedAt" : "2020-07-01T13:04:53Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "ad6c7d29-fab9-4b78-87ee-77cc30981853",
        "parentId" : "9d6a8147-7084-46aa-88af-72ce741916bc",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah that sounds good, sorry for the confusion :+1: You might still be able to make startup a bit less specific to the postgres case.  If you run with an in-memory state reading the list of triggers will simply be empty on startup so there is no harm in going through the same logic.",
        "createdAt" : "2020-07-01T13:00:11Z",
        "updatedAt" : "2020-07-01T13:04:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "49fc2db0-b65b-454b-a35d-7c7951364fb1",
        "parentId" : "9d6a8147-7084-46aa-88af-72ce741916bc",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "That's true - I started down that route since I already have `persistPackages` do nothing in the in-memory case. It seemed like maybe I would be forcing the abstraction continuing that way, but maybe it makes some sense. I'll consider for a future PR.",
        "createdAt" : "2020-07-01T13:11:43Z",
        "updatedAt" : "2020-07-01T13:11:43Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "44fd02678b0cd8c79abe85f459fcddbe31dca900",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +346,350 @@        val dao = DbTriggerDao(c)\n        val server = new Server(ledgerConfig, restartConfig, secretKey, dao)\n        val recovery: Either[String, Unit] = for {\n          packages <- dao.readPackages\n          _ = server.addPackagesInMemory(packages)"
  }
]