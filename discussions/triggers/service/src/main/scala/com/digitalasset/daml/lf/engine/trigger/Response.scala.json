[
  {
    "id" : "9aab6c39-e201-43cc-b105-d3b0d564c4dd",
    "prId" : 7205,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f648247-3ada-46e4-a519-340bacf377c4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there an advantage to making this an `implicit val` with an anonymous class as opposed to an implicit object? Happy either way, just trying to understand if there is a difference.",
        "createdAt" : "2020-09-03T09:58:57Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fd40e4a4-f165-40e4-b3bc-09001536bd32",
        "parentId" : "2f648247-3ada-46e4-a519-340bacf377c4",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "For a library, there are interesting good reasons related to API stability and proper separation of interface and implementation.  I won't go into those (as this isn't a library), but focus on a semantics difference affecting all use cases:\r\n\r\n```scala\r\nWelcome to Scala 2.12.10 (OpenJDK 64-Bit Server VM, Java 1.8.0_202).\r\nType in expressions for evaluation. Or try :help.\r\n\r\nscala> class Foo[T]\r\ndefined class Foo\r\n\r\nscala> object Qqq {\r\n     |   implicit val a: Foo[Int] = new Foo\r\n     |   implicit def b: Foo[Int] = new Foo\r\n     | }\r\ndefined object Qqq\r\n\r\nscala> import Qqq._\r\nimport Qqq._\r\n\r\nscala> implicitly[Foo[Int]]\r\n<console>:17: error: ambiguous implicit values:\r\n both value a in object Qqq of type => Foo[Int]\r\n and method b in object Qqq of type => Foo[Int]\r\n match expected type Foo[Int]\r\n       implicitly[Foo[Int]]\r\n                 ^\r\n```\r\n\r\nThis error is desirable; you have multiple instances in scope and Scala refuses to pick one.\r\n\r\nConsider the opposite implementation, though:\r\n\r\n```scala\r\nscala> object Qqq {\r\n     |   implicit object a extends Foo[Int]\r\n     |   implicit def b: Foo[Int] = new Foo\r\n     | }\r\ndefined object Qqq\r\n\r\nscala> import Qqq._\r\nimport Qqq._\r\n\r\nscala> implicitly[Foo[Int]]\r\nres1: Foo[Int] = Qqq$a$@25031fd4\r\n```\r\n\r\nEven though we have conflicting instances, scalac will pick one.  Why?  There's a hint here:\r\n\r\n```scala\r\nscala> implicitly[a.type]\r\nres3: Qqq.a.type = Qqq$a$@25031fd4\r\n```\r\n\r\nbut if we go back to the original code:\r\n\r\n```scala\r\nscala> implicitly[a.type]\r\n<console>:24: error: could not find implicit value for parameter e: Qqq.a.type\r\n       implicitly[a.type]\r\n                 ^\r\n\r\nscala> a: a.type\r\nres5: Qqq.a.type = Foo@5bee88e3\r\n```\r\n\r\nAn `implicit object bar extends Baz` is not *just* an implicit `Baz`, it is also an implicit `bar.type`, a strict subtype of `Baz`.  In the above, `a.type` exists regardless, but it is only implicit *itself* if you use `implicit object`.  And that causes SLS [ยง7.2](https://scala-lang.org/files/archive/spec/2.12/07-implicits.html#implicit-parameters), [ยง6.26.3](https://scala-lang.org/files/archive/spec/2.12/06-expressions.html#overloading-resolution) to kick in.\r\n\r\nThis can be harmless.  *Or*, you've imported `JsonFormat`s from multiple places and suddenly one of them silently works instead of giving you a conflict error.",
        "createdAt" : "2020-09-03T15:03:21Z",
        "updatedAt" : "2020-09-03T15:40:53Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "710f675e-f2fe-4a2f-88e1-dbf32a8e7fa0",
        "parentId" : "2f648247-3ada-46e4-a519-340bacf377c4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, thanks for writing this up!",
        "createdAt" : "2020-09-03T15:52:22Z",
        "updatedAt" : "2020-09-03T15:52:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d5af3d7402e279de3eb423f6bf09c7b274c605",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@  // Trigger status messages have timestamps for which this is the\n  // formatter.\n  implicit val LocalDateTimeJsonFormat: RootJsonFormat[LocalDateTime] =\n    new RootJsonFormat[LocalDateTime] {\n      override def write(dt: LocalDateTime) ="
  }
]