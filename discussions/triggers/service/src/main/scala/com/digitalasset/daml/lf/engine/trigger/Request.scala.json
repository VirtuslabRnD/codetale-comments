[
  {
    "id" : "502fab04-8774-4b0b-8a80-f578c6b6b418",
    "prId" : 6528,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "079a4f0a-5a39-4024-9da1-c1aa987820af",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I could have sworn that there was a warning for this that you could enable and enforce but now I cannot find it anymore :thinking: ",
        "createdAt" : "2020-06-29T17:09:07Z",
        "updatedAt" : "2020-06-29T17:09:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "12d76e63-4f88-4477-9bf4-0e900251cd58",
        "parentId" : "079a4f0a-5a39-4024-9da1-c1aa987820af",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Yeah, not sure why but IntelliJ's scalafmt highlights more things than scalafmt in our dev env enforces.",
        "createdAt" : "2020-06-29T17:25:02Z",
        "updatedAt" : "2020-06-29T17:25:02Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "4a06a87f-083b-49f9-8f88-a03a8d4c9f1a",
        "parentId" : "079a4f0a-5a39-4024-9da1-c1aa987820af",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "scalafmt is purely a formatter. IntelliJ can run scalafmt, and we configure it to do so. _Unrelatedly_, IntelliJ has a ton of (mostly useful, sometimes broken) static analysis (which it calls \"code inspections\") that it can perform. This includes one that tells you to add a return type to any non-private function definition, which is on by default.\r\n\r\nWe could, in theory, [run IntelliJ code inspections from the command line](https://www.jetbrains.com/help/idea/command-line-code-inspector.html), and therefore in CI, but I've never tried it and I'm pretty sure @S11001001's head would explode if I did.",
        "createdAt" : "2020-06-30T09:31:00Z",
        "updatedAt" : "2020-06-30T09:31:01Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "7fbe3e2b-cb5f-4258-b75d-a56388ca39ed",
        "parentId" : "079a4f0a-5a39-4024-9da1-c1aa987820af",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "And this is a case where requiring the annotation is silly. It's implied by `read` being an override; `override`, if used, even imposes an expected type context on the body. Moreover, if this was an implicit val, the \"public\" signature would actually be private.",
        "createdAt" : "2020-06-30T15:38:43Z",
        "updatedAt" : "2020-06-30T15:38:44Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfb0b3b9f1e2d33f2c506284b31907dac1277a5e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +10,14 @@object Request {\n  implicit object IdentifierFormat extends JsonFormat[Identifier] {\n    def read(value: JsValue): Identifier = value match {\n      case JsString(s) =>\n        val components = s.split(\":\")"
  },
  {
    "id" : "fc88be6b-0fbc-4e2e-9577-2fe47bdb5e7d",
    "prId" : 5808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4e298fe-335e-41cd-af08-3f9211640872",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "iirc since I wrote this we added a `toString` method for `Identifier` so you might be able to simply this now.",
        "createdAt" : "2020-05-01T14:14:54Z",
        "updatedAt" : "2020-05-01T14:20:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "90f8df6c2c2e02c0fc86275c0a6f6fc0d058a9e6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@      case _ => deserializationError(\"Expected trigger identifier of the form pkgid:mod:name\")\n    }\n    def write(id: Identifier) = JsString(s\"${id.packageId}:${id.qualifiedName}\")\n  }\n"
  },
  {
    "id" : "5c9a246d-47a9-4316-a81b-ce2862ba0e69",
    "prId" : 5808,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1298069d-9c68-403f-a9e8-8c9286c9cc74",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Similar question as on the other PR (but no need to address now): We should be using the `Party` newtype.",
        "createdAt" : "2020-05-01T14:20:38Z",
        "updatedAt" : "2020-05-01T14:20:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c9cd42e4-c6ad-4de2-ba12-11b47fd0446e",
        "parentId" : "1298069d-9c68-403f-a9e8-8c9286c9cc74",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Implemented this but it's a bit bigger than I expected, so will raise a separate PR for it",
        "createdAt" : "2020-05-01T16:59:48Z",
        "updatedAt" : "2020-05-01T16:59:49Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "90f8df6c2c2e02c0fc86275c0a6f6fc0d058a9e6",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@  }\n\n  case class StartParams(identifier: Identifier, party: String)\n  implicit val startParamsFormat = jsonFormat2(StartParams)\n"
  }
]