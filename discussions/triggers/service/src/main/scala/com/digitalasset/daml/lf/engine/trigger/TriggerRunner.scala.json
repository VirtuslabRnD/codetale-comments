[
  {
    "id" : "bf3817a8-7178-4bb1-839c-189d9c233374",
    "prId" : 8037,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c53be58c-ea08-4916-bc5f-94f50ebf83f1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What does `asScala` do on a context?",
        "createdAt" : "2020-12-02T10:59:42Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fd9ae2cb-974b-4c62-8d3a-1fa22c49d020",
        "parentId" : "c53be58c-ea08-4916-bc5f-94f50ebf83f1",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "The `BehaviorInterceptor` is part of a more low level API, so we're not getting the scaladsl context but an object that provides both the javadsl and scaladsl contexts. `.asScala` gives us the scaladsl context.",
        "createdAt" : "2020-12-02T15:35:29Z",
        "updatedAt" : "2020-12-02T15:35:48Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "632515e90d652374fe2bbed365818b95b2378697",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +63,67 @@      case e: InitializationHalted => {\n        // This should be a stop supervisor nested under the restart supervisor.\n        ctx.asScala.log.info(s\"Supervisor saw failure ${e.getMessage} - stopping\")\n        Behaviors.stopped\n      }"
  },
  {
    "id" : "49aef515-b640-44c0-8f73-a0ad0b93d051",
    "prId" : 5916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7be778c-5cfc-4051-b153-7415066227f5",
        "parentId" : null,
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Is there an analogue of this in `TriggerActor` or is this brand new?",
        "createdAt" : "2020-05-08T19:06:43Z",
        "updatedAt" : "2020-05-08T19:08:40Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "acea7b33-4590-4c11-8450-6ae78dad7c6a",
        "parentId" : "b7be778c-5cfc-4051-b153-7415066227f5",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Re-reading your PR description, it looks like this entire class is new and this is the key line which does restarts on failure.",
        "createdAt" : "2020-05-08T19:12:29Z",
        "updatedAt" : "2020-05-08T19:12:29Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "bfb3cd24-2433-4c66-9bf1-5b64874a5d21",
        "parentId" : "b7be778c-5cfc-4051-b153-7415066227f5",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "`TriggerRunnerImpl` is basically that which was `TriggerActor`.",
        "createdAt" : "2020-05-08T19:18:09Z",
        "updatedAt" : "2020-05-08T19:18:09Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@\n  private val child =\n    ctx.spawn(Behaviors.supervise(TriggerRunnerImpl(config)).onFailure(restart), name)\n\n  override def onMessage(msg: Message): Behavior[Message] ="
  },
  {
    "id" : "0f7da7fa-1b41-42f1-991b-93ba711b9224",
    "prId" : 5916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c0ddf28-39da-41a7-b8f8-99e521d4dcdf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is a super confusing name. We already have a class called `Runner`.",
        "createdAt" : "2020-05-11T07:16:05Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "46261d87-da34-4362-b61c-cad70457d4dd",
        "parentId" : "5c0ddf28-39da-41a7-b8f8-99e521d4dcdf",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "The relationships are :  `TriggerRunner` has-a `TriggerRunnerImpl` has-a `Runner`.",
        "createdAt" : "2020-05-11T13:06:41Z",
        "updatedAt" : "2020-05-11T13:06:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@import com.daml.grpc.adapter.ExecutionSequencerFactory\n\nobject TriggerRunner {\n  type Config = TriggerRunnerImpl.Config\n"
  },
  {
    "id" : "8877d5b1-aae7-4229-9219-91fac3fa2a19",
    "prId" : 5916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b7548d0-30f6-4916-89e9-6eab0c7114aa",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This will only deliver the `Stop` message but it won’t wait for the child to actually stop. It seems like we probably should do that.",
        "createdAt" : "2020-05-11T07:19:51Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7c8985fb-3bfb-442f-ad63-cf0a58b09fb5",
        "parentId" : "5b7548d0-30f6-4916-89e9-6eab0c7114aa",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I'll look into this.",
        "createdAt" : "2020-05-11T12:48:41Z",
        "updatedAt" : "2020-05-11T12:48:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@    Behaviors.receiveMessagePartial[Message] {\n      case Stop =>\n        child ! Stop\n        Behaviors.stopped\n    }"
  },
  {
    "id" : "a5969560-0888-46b6-bacc-33f278447a0f",
    "prId" : 5916,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecf1b04b-a193-48e2-98f7-dabd9baa7234",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What’s the reason for this being a class instead of an `Object` like `TriggerRunnerImpl`?",
        "createdAt" : "2020-05-11T07:22:20Z",
        "updatedAt" : "2020-05-11T07:30:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c1cee1a4-2e5e-4243-b94d-a326c5ff7657",
        "parentId" : "ecf1b04b-a193-48e2-98f7-dabd9baa7234",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "`TriggerRunner` maintains state in the form a data member, `TriggerRunnerImpl` passes immutable state around as parameters. It's the difference between the functional vs. the object oriented style. I fully expect the former could be rewritten in the functional approach but in this instance it seemed easier to just go with the OO style (consistent with this example https://doc.akka.io/docs/akka/current/typed/guide/tutorial_1.html#failure-handling).",
        "createdAt" : "2020-05-11T13:00:40Z",
        "updatedAt" : "2020-05-11T13:00:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "af232941b942e74dba8060b1a9b12c00425ead19",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@}\n\nclass TriggerRunner(\n    ctx: ActorContext[TriggerRunner.Message],\n    config: TriggerRunner.Config,"
  }
]