[
  {
    "id" : "b81652e4-050b-411d-853e-af7e14a93e0d",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d537ff4-e78d-416f-bd65-b264fd6e2775",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is currently my biggest gripe with this approach. For the trigger service, GET requests are not completely unreasonable but it still feels very arbitrary and weird. I don‚Äôt have a great solution here so very happy to hear any suggestions.",
        "createdAt" : "2020-09-15T13:41:09Z",
        "updatedAt" : "2020-09-15T14:01:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c09a6c0d-b3a7-4962-8d20-1bba27b930ee",
        "parentId" : "0d537ff4-e78d-416f-bd65-b264fd6e2775",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I think it's a reasonable restriction. This isn't a general-purpose middleware, why make things more complicated on the client side?",
        "createdAt" : "2020-09-15T14:00:01Z",
        "updatedAt" : "2020-09-15T14:01:35Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "1f3160ae-d73e-4f8d-9ea7-b8450b170b3a",
        "parentId" : "0d537ff4-e78d-416f-bd65-b264fd6e2775",
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "i don't see a way to remove this restriction and still have this solution work in a browser seamlessly without removing the proxying behavior by replacing it with a trust relationship between an external website and the middleware component",
        "createdAt" : "2020-09-15T14:19:21Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@## Issues\n\n1. This only works if the original request was a GET\n   request. POST requests cannot be redirected in a well-supported way\n   while preserving the request body so we cannot really make this"
  },
  {
    "id" : "bb48c657-2779-4b13-ac7c-8f01abd01931",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86aa9ad5-4f62-4075-a11b-20e97a3fe62b",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Can these fail independently? You could fail and receive a new refresh token anyway, and in case the new token ‚â† the old one, an implementation may permanently reject the prior token and require use of the new one.",
        "createdAt" : "2020-09-15T13:55:26Z",
        "updatedAt" : "2020-09-15T14:01:35Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "888dcd25-133d-490e-9b49-8952a0a23605",
        "parentId" : "86aa9ad5-4f62-4075-a11b-20e97a3fe62b",
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "in general, the refresh tokens are statefully validated, and the access tokens are statelessly validated, meaning that you can not invalidate an access token except by deny-listing it by id, and further implying that a failure to validate a refresh token has no effect by default on the validity of any previously granted access tokens",
        "createdAt" : "2020-09-15T14:16:03Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "1bf9b1c6-474e-444b-8357-3231cb9da7b2",
        "parentId" : "86aa9ad5-4f62-4075-a11b-20e97a3fe62b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "By ‚Äúthese‚Äù you mean the access token and the refresh token? In OAuth2 at least, they cannot fail independently. You always get a new access token if the request succeeds and optionally a new refresh token. If you do not get a new refresh token this just means that that the existing refresh token is still valid.",
        "createdAt" : "2020-09-15T14:25:42Z",
        "updatedAt" : "2020-09-15T14:25:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@\n3. /refresh This accepts a refresh token and returns a new access\n   token and optionally a new refresh token (or fails).\n\n### Auth Middleware Implementation based on OAuth2 Authorization Code Grant"
  },
  {
    "id" : "82563ed1-6eaf-41ad-87ed-93519cfcd8b4",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73146c32-2c51-4223-af80-01535779101c",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "üëè so you decided to go with the code grant. ",
        "createdAt" : "2020-09-15T14:08:36Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "d0bc3efc-b852-479d-ba79-d03cf900060f",
        "parentId" : "73146c32-2c51-4223-af80-01535779101c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "At least I want to support this as it seems like the most natural model for the trigger service. I do believe that you can fit a client credentials grant in there if you want to. In this case, the middleware would act as follows:\r\n\r\n/login would somehow check that the user is authorized to interact with the trigger service. This is deliberately outside of the client credentials grant so I don‚Äôt think there is a standard solution to this. One option would be to just require the user to authenticate as some admin user with whatever authentication mechanism you have. If that is successful, the middleware makes the request to get the token and then proceeds as the middleware for the authorization code grant.",
        "createdAt" : "2020-09-15T14:37:34Z",
        "updatedAt" : "2020-09-15T14:37:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@## Goals\n\n- Be compatible with an OAuth2 authorization code grant\n  https://tools.ietf.org/html/rfc6749#section-4.1\n- Do not require OAuth2 or any other specific"
  },
  {
    "id" : "a1dc0eda-5cfa-4506-9f71-d547cb657da5",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33cda410-dc64-4e73-97f2-ce807040a7a8",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "curious how compatible with the authorization code grant you will be, if you're not exchanging the granted code with specifically an OAuth2 tenant for an access token?",
        "createdAt" : "2020-09-15T14:09:25Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "c9908205-f6f2-47cb-81c5-9a19401b6e2c",
        "parentId" : "33cda410-dc64-4e73-97f2-ce807040a7a8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not quite sure what you are getting at. The auth middleware is exchanging the granted code with the authorization server for the token.",
        "createdAt" : "2020-09-15T14:26:19Z",
        "updatedAt" : "2020-09-15T14:26:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e02bc5a2-c474-4cc1-ae8a-b6ad63969401",
        "parentId" : "33cda410-dc64-4e73-97f2-ce807040a7a8",
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "ok! yea I was a bit overly focused on the semantics of 'compatible' here. this makes sense. ",
        "createdAt" : "2020-09-15T14:29:16Z",
        "updatedAt" : "2020-09-15T14:29:17Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@- Be compatible with an OAuth2 authorization code grant\n  https://tools.ietf.org/html/rfc6749#section-4.1\n- Do not require OAuth2 or any other specific\n  authentication/authorization protocol from the IAM. In other words,\n  the communication with the IAM must be pluggable."
  },
  {
    "id" : "f53303fc-3534-42e8-8442-ce39abf39b1a",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b201345f-5a07-4631-97db-25a44fb0f497",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "üëè curious about the mechanism for verifying the consent here: is it the grant itself, or some user metadata that was the result of a previous authentication step?",
        "createdAt" : "2020-09-15T14:10:14Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "8dec1c4b-a29d-49f9-95ce-3d65d9338b4a",
        "parentId" : "b201345f-5a07-4631-97db-25a44fb0f497",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That‚Äôs up to the middleware. One option would be that the middleware translates the required claims to OAuth2 claims and includes those when redirecting to `/authorize`.",
        "createdAt" : "2020-09-15T14:27:44Z",
        "updatedAt" : "2020-09-15T14:27:44Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@- Do not rely on wildcard access for the trigger service, it should\n  only be able to start triggers on behalf of a party if a user that\n  controls that party has given consent.\n- Support long-running triggers without constant user\n  interaction. Since auth tokens are often short-lived (e.g., expire"
  },
  {
    "id" : "76d4c1a6-f453-47a7-8de6-f7c94fe92d6d",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1efbe08c-ca4c-4ff7-b486-a7647833164b",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "ok in this sense the auth middleware will trust an upstream identity provider which implies that there is a requirement for some agreement on the claims as furnished by that provider and the claims that the middleware understands, right?",
        "createdAt" : "2020-09-15T14:14:51Z",
        "updatedAt" : "2020-09-15T14:25:18Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "9ab8cc07-62a4-4bed-bdf7-0c6237bb40c0",
        "parentId" : "1efbe08c-ca4c-4ff7-b486-a7647833164b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The middleware has to translate between claims (a ledger concept) and OAuth2 claims/custom parameters in the authorize request/‚Ä¶. We assume that at the end we do get a ledger token back from the middleware which in turn gets it from the authorization server.",
        "createdAt" : "2020-09-15T14:28:50Z",
        "updatedAt" : "2020-09-15T14:28:50Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@all that much, they just need to be fixed once).\n\n1. /auth The trigger service, will contact this endpoint with a set of\n   claims. If the user has already authenticated and is authorized for\n   those claims, it will return an access token (an opaque"
  },
  {
    "id" : "620f2e1e-b154-4c37-9a90-6e1f867d62b3",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b49cb55d-8b29-4608-ab77-86080709420d",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "using cookies is a bold choice here; it keeps the state out of the auth middleware but it does mean you are now beholden to cursed cross browser cookie control implementation wrinkles",
        "createdAt" : "2020-09-15T14:16:42Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "ac6f55e2-a5c9-4b60-b26d-c38dd1ea906e",
        "parentId" : "b49cb55d-8b29-4608-ab77-86080709420d",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Very open for other ideas. This was mostly copied from the existing Oauth2 proxies assuming that if it works for them,a it works for us and while brothers might be weird cookies are at least reasonably secure.",
        "createdAt" : "2020-09-15T14:32:04Z",
        "updatedAt" : "2020-09-15T14:32:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@   service setting a cookie with the access and refresh token and\n   redirecting to the original URL. At this point, the request to\n   /auth will succeed (based on the cookie).\n\n3. /refresh This accepts a refresh token and returns a new access"
  },
  {
    "id" : "4f587692-504c-4c2f-9a1d-4633425db786",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6f2d59-da61-4065-8be6-b6fd3b5571e9",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "üëè ",
        "createdAt" : "2020-09-15T14:17:06Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +61,65 @@   authorization server adding the client id and secret.\n\nNote that the auth middleware does not need to persist any state in\nthis model. The trigger service does need to persist at least the\nrefresh token and potentially the access token."
  },
  {
    "id" : "be9fbb98-572a-464d-815f-a429b1215e07",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "651a2bf0-d004-4a7d-9c38-81b25a754842",
        "parentId" : null,
        "authorId" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "body" : "nice. so the auth middleware is effectively an oauth2 application secret holding cookie processor proxy",
        "createdAt" : "2020-09-15T14:17:35Z",
        "updatedAt" : "2020-09-15T14:19:59Z",
        "lastEditedBy" : "e3013ada-789a-49bd-a424-6e7814ceb5f1",
        "tags" : [
        ]
      },
      {
        "id" : "4a40c91d-3737-4033-8a79-6688af571005",
        "parentId" : "651a2bf0-d004-4a7d-9c38-81b25a754842",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Exactly",
        "createdAt" : "2020-09-15T14:32:13Z",
        "updatedAt" : "2020-09-15T14:32:13Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@   redirects back to the original URI.\n3. /refresh simply proxies to the refresh endpoint on the\n   authorization server adding the client id and secret.\n\nNote that the auth middleware does not need to persist any state in"
  },
  {
    "id" : "0ee6dc97-9326-4de8-8719-a783bb84cb98",
    "prId" : 7394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99175753-1bab-4bb3-be3f-20b17801dc2e",
        "parentId" : null,
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "This is missing that it passes along the cookies from the user.",
        "createdAt" : "2020-10-01T12:06:19Z",
        "updatedAt" : "2020-10-01T12:06:19Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5357a86d0f627e31a3230356a58c925f8c1f55d4",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n1. /auth The trigger service, will contact this endpoint with a set of\n   claims. If the user has already authenticated and is authorized for\n   those claims, it will return an access token (an opaque\n   blob to the trigger service) for at least those claims and a"
  },
  {
    "id" : "f5608a87-4b44-44fd-bf92-84ee6386238a",
    "prId" : 6725,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00beaa57-5ff2-4395-856a-5df8edf061ca",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe it would be nice to just write the token to a file?",
        "createdAt" : "2020-07-14T18:48:05Z",
        "updatedAt" : "2020-07-14T18:51:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "60f114522bfde5760bbd92538f260bd67281b758",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +77,81 @@\n```\n‚ùØ curl -X GET localhost:8089/sa/secure/me --oauth2-bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImEtcy1lMDZmZDVjMy00NWM1LTRjZGQtYTI1OC1iMmIzMmIyNjA3NDYifQ.eyJpc3MiOiJsb2NhbGhvc3QvbG9naW4iLCJzdWIiOiJ1c2VyIiwiZXhwIjoxNTk0ODI3NTIwLCJsZWRnZXJJZCI6Ii5hdXRoIiwicGFydHkiOiJ1c2VyIiwicmlnaHRzIjpbInJlYWQiLCJ3cml0ZTpjcmVhdGUiLCJ3cml0ZTpleGVyY2lzZSJdfQ.NiOHuA3Zm6yAs2ThSlXzlGyffbjauJLBjlnD8k8Qi-BBsya45bD0k4cLr-NMcUeabyoEHWVdDuPm7CoUCRkMqePBU5Q9FcwNyU3pqUdiRwmsLLEnFfaSi5mXV9JDH8qlw59LBLXOu5_D2i3p5mC4WB6hvLjqocJG7hguG5pmYZ4\n{\n  \"user\": \"sa-user-21a4c943-57cc-46e7-b07e-380d2c780622\""
  },
  {
    "id" : "678d4d78-30a4-4e07-993a-6bc8e2a8f2bd",
    "prId" : 6725,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0978c334-dcfa-405f-b488-e1dc3065e936",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does this request do anything or is this just to view the output?",
        "createdAt" : "2020-07-14T18:48:47Z",
        "updatedAt" : "2020-07-14T18:51:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c44f599c-f7df-4e77-ae65-b40423654cd6",
        "parentId" : "0978c334-dcfa-405f-b488-e1dc3065e936",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Just views the output. This won't actually be used in the auth flow, though it's nice to confirm the previous command worked when running manually.",
        "createdAt" : "2020-07-14T18:56:59Z",
        "updatedAt" : "2020-07-14T18:56:59Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "60f114522bfde5760bbd92538f260bd67281b758",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +89,93 @@‚ùØ curl -X POST localhost:8089/sa/secure/request/test-ledger -H \"Content-type: application/json\" -d '{\"nonce\": \"random-nonce\"}' --oauth2-bearer ...\n\n‚ùØ curl -X GET localhost:8089/sa/secure --oauth2-bearer ...\n{\"serviceAccounts\":[{\"creds\":[],\"nonce\":\"random-nonce\",\"serviceAccount\":\"sa-d007e6a6-7af6-41de-890d-96647c4b23f8\"}]}\n"
  },
  {
    "id" : "ad3d6d7b-9098-4469-b25d-9c6797639771",
    "prId" : 6725,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "615ff6af-1fee-4529-9552-f7d439d28f3f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It might be nice if you add short comments how the curl commands releate to the description above.",
        "createdAt" : "2020-07-14T18:51:04Z",
        "updatedAt" : "2020-07-14T18:51:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bb1d12f2-26e9-4244-b1eb-7318724cac0b",
        "parentId" : "615ff6af-1fee-4529-9552-f7d439d28f3f",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "You're probably right - the commands correspond 1-1 to the earlier steps, besides the `me` request. Maybe I should just leave that one out and it will be clearer.",
        "createdAt" : "2020-07-14T18:59:01Z",
        "updatedAt" : "2020-07-14T18:59:01Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "70b1856b-22b1-4eb2-84d5-9c8967fb08b9",
        "parentId" : "615ff6af-1fee-4529-9552-f7d439d28f3f",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "I'll likely merge this as is and consider refining later.",
        "createdAt" : "2020-07-14T19:00:07Z",
        "updatedAt" : "2020-07-14T19:00:07Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "60f114522bfde5760bbd92538f260bd67281b758",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +97,101 @@{\"serviceAccounts\":[{\"creds\":[{\"credId\":\"cred-80f27291-7fce-4b0d-b77f-cd3671edf474\"}],\"nonce\":\"random-nonce\",\"serviceAccount\":\"sa-d007e6a6-7af6-41de-890d-96647c4b23f8\"}]}\n\n‚ùØ curl -X GET localhost:8089/sa/secure/cred/cred-80f27291-7fce-4b0d-b77f-cd3671edf474 --oauth2-bearer ...\n{\n  \"cred\": \"O0hR6WrOawvf1tPJ\","
  },
  {
    "id" : "bb3b7311-e59c-4623-ab4f-68faf6daa87a",
    "prId" : 6659,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e3c8346-03ba-4b69-a0e6-6a0951c3914c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "My understanding is that outside of the test mode, `ref-ledger-authenticator` talks to an underlying IAM, e.g., Auth0. Currently the docs seem to ignore that distinction but I think it‚Äôs important to point out which part is responsible for what and who defines things like the expiration dates (presumably the IAM and not ref-ledger-authenticator?).",
        "createdAt" : "2020-07-09T10:02:54Z",
        "updatedAt" : "2020-07-09T16:20:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b2edc29e-c35e-45a0-a4da-e6f7dcc0ceaa",
        "parentId" : "6e3c8346-03ba-4b69-a0e6-6a0951c3914c",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "I believe the only difference with the test mode is that requests to `authorize` use basic auth (ignoring the password) instead of OAuth2, for which you would use a token issuer like Auth0. The validity windows are defined in a config file in the auth service itself.",
        "createdAt" : "2020-07-09T15:38:33Z",
        "updatedAt" : "2020-07-09T16:20:14Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "9c2d7f5a-9970-4217-b5e1-89b82ea6fe58",
        "parentId" : "6e3c8346-03ba-4b69-a0e6-6a0951c3914c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Isn‚Äôt auth0 signing the token? If so, I‚Äôm not sure how ref-ledger-authenticator can decide on the expiration date.",
        "createdAt" : "2020-07-09T15:40:53Z",
        "updatedAt" : "2020-07-09T16:20:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ddb3dba3-bb1b-4306-9530-35fa466eeb8e",
        "parentId" : "6e3c8346-03ba-4b69-a0e6-6a0951c3914c",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "I see, I think you're right. In the ref-ledger-authenticator there is a JwtJwkAuthenticator interface with a sample implementation that reads expiration details from a config file. I think for production it would be swapped out with Auth0, and I guess then those details would be configured separately.",
        "createdAt" : "2020-07-09T16:15:54Z",
        "updatedAt" : "2020-07-09T16:20:14Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "bf332442-3a0d-4c26-9641-eac5b5249f51",
        "parentId" : "6e3c8346-03ba-4b69-a0e6-6a0951c3914c",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "However, my understanding is this only applies to the bearer token used to authenticate with the auth service itself, not the SA credentials and tokens. Will get confirmation on this.",
        "createdAt" : "2020-07-09T16:18:57Z",
        "updatedAt" : "2020-07-09T16:20:14Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ef884cb57cd501155631e52f5071c726c6e4a87",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@It is important to note the validity windows for each of these items as they influence our authentication flow.\nUsers and service accounts are valid forever.\nHowever, both SA credentials and SA tokens have validity windows: 30 days for an SA credential and 1 day for an SA token.\nFor this reason there may be many SA credentials per service account, and many SA tokens per SA credential.\nNote that there is also a bearer token used to interact with the auth service with a validity window of 1 day."
  }
]