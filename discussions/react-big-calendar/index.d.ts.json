[
  {
    "id" : "c3ffcc8c-40be-4eff-b78f-3426577dc3e3",
    "prId" : 13414,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13414#pullrequestreview-14552438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89d9cc15-3631-47df-b40b-87bc447a5d49",
        "parentId" : null,
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "You are hacking incorrect behavior, please check:\r\n- https://stackoverflow.com/questions/39415661/why-cant-i-import-a-class-or-function-with-import-as-x-from-y  \r\n- https://github.com/DefinitelyTyped/DefinitelyTyped#common-mistakes\r\n\r\nFrom documentation: http://intljusticemission.github.io/react-big-calendar/examples/index.html#intro\r\n```\r\nimport BigCalendar from 'react-big-calendar';\r\n```\r\nThis documentation implies a Class with static methods and not a namespace.\r\nPrevious declaration was 100% correct and correctly guarded for right usage, you shouldn't be able to import by `import * as BigCalendar`, because this would lead to errors in TS projects.\r\n",
        "createdAt" : "2016-12-17T20:51:36Z",
        "updatedAt" : "2016-12-29T09:30:37Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "55d76d3d-4d34-4f45-80d9-0773c1e24990",
        "parentId" : "89d9cc15-3631-47df-b40b-87bc447a5d49",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "To be more precise of course you still will be able to use `import * as BigCalendar`, but to use it correctly you have to access default property from namespace like this:\r\n```\r\nimport * as BigCalendar from 'react-big-calendar'\r\nconst BigCalendarDefault = BigCalendar.default;\r\n```",
        "createdAt" : "2016-12-17T21:00:50Z",
        "updatedAt" : "2016-12-29T09:30:37Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "a752b69f-97d3-4d86-a03a-3e5e96f02256",
        "parentId" : "89d9cc15-3631-47df-b40b-87bc447a5d49",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "@frankwallis please remove namespace, and leave just `export = BigCalendar;`, this way it will be correct with library export and don't need the namespace hack, now you will be able to use default import with --allowSyntheticDefaultImports flag, or import with require",
        "createdAt" : "2016-12-28T11:32:50Z",
        "updatedAt" : "2016-12-29T09:30:37Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e550262d662319eadceca4ab080eed289cc894a7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +55,59 @@\n    /* react-big-calendar is exported as a commonjs module (it uses babel-preset-jason) */\n    export = BigCalendar;\n}"
  },
  {
    "id" : "06ca5f18-12ee-4508-a9da-65691bbfe1cb",
    "prId" : 14937,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14937#pullrequestreview-24948291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76519755-f79c-4eea-a9b6-905dc3ee4c5d",
        "parentId" : null,
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "good changes but please could you add test cases to both className and elementProps?",
        "createdAt" : "2017-03-02T08:40:37Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "ab3492e3-adfd-432c-b7fe-6bc1e7301e86",
        "parentId" : "76519755-f79c-4eea-a9b6-905dc3ee4c5d",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "I have added them, all set.",
        "createdAt" : "2017-03-02T19:03:25Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      },
      {
        "id" : "ee0b7e25-961b-4393-b341-4a28ff43c002",
        "parentId" : "76519755-f79c-4eea-a9b6-905dc3ee4c5d",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "that's cool but I cannot see the commit though, have you made push to your branch?",
        "createdAt" : "2017-03-02T22:49:52Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "5034acb3-13d3-4cb6-b6b2-5725f64f0d1d",
        "parentId" : "76519755-f79c-4eea-a9b6-905dc3ee4c5d",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "Ahh, I spaced off pushing up the changeset.  It's there now.",
        "createdAt" : "2017-03-03T10:50:46Z",
        "updatedAt" : "2017-03-03T10:50:46Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      }
    ],
    "commit" : "db9518ef6ae14ddd0cdf0bb531ebd49ba16b9c28",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +40,44 @@        defaultView?: string;\n        className?: string;\n        elementProps?: React.HTMLAttributes<HTMLElement>;\n    }\n"
  },
  {
    "id" : "328eb6de-20a5-4f56-8d3a-01595cb7c535",
    "prId" : 14937,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14937#pullrequestreview-25117936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "parentId" : null,
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "why changed boolean to string?",
        "createdAt" : "2017-03-02T08:42:11Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "1022d428-ec33-41d0-830a-00e67f214aa9",
        "parentId" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "Hi Piotr.  I have changed boolean to string here because we're not trying to type guard the resultant type, but instead the provided parameter type, which will be either a _string_ property name of the current event object or a _function_ that should return a boolean.\r\n\r\nSome use cases:\r\n  **allDayAccessor: 'someAllDayFieldName'**   <-  This has to be a string; eventObj[string]  eventObj[boolean] will not function as intended.\r\n  **allDayAccessor: (row:any) => row.isAllDay**  <-  This function must return a boolean.\r\n",
        "createdAt" : "2017-03-02T18:07:49Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      },
      {
        "id" : "0d7114c9-076d-4a94-97ec-c5fa85b8c67d",
        "parentId" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "ah ok I got it, so the string is a key to get a value from object which resolve to boolean.\r\nIf that's the case then what I would suggest is to use lower case `object` type, not an `Object`, and bump TS version to 2.2.",
        "createdAt" : "2017-03-02T22:30:09Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "a5456d8b-74df-4a1c-9b78-bcba6a8b2f55",
        "parentId" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "the reason for not using Object is because it will allow to use other incompatible types like for instance `boolean` or 'number` and allow for runtime errors.\r\nFrom examples you provided I see this is used as a callback so maybe it's not that important, but anyway it's better to be as safe as possible and follow best practices",
        "createdAt" : "2017-03-02T22:40:37Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "4ab39918-aaf0-4293-ad8c-45df91005813",
        "parentId" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "I hear ya.  I was trying not to get too invested in this type declaration, but perhaps a step in a better direction still would be to use type inference:\r\n\r\ninterface BigCalendarProps`<T>` extends React.Props<BigCalendar>\r\n\r\nevents?: **T**[];\r\n\r\nendAccessor?: **keyof T** | ((row: **T**) => Date);",
        "createdAt" : "2017-03-03T11:02:20Z",
        "updatedAt" : "2017-03-03T11:03:40Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      },
      {
        "id" : "fc0e2bad-2070-43a9-ac29-225240446a29",
        "parentId" : "820db30f-bf2c-4511-985b-0f9014b501ad",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "@danno2000 This is a good idea, unfortunately it will not work as you would wish and would require consumers to do workaround which is not optimal for my taste. To use a generic JSX element currently, you must alias a type and interface or extend a base class to a non-generic specialization:\r\n\r\ne.g. `class MyTypeBigCalendar extends BigCalendar<MyType> {}`\r\n\r\nAnd I think with stricter type checking like enabled `noImplicit*`, would not have a possibility to opt-out.\r\n\r\nThere is an existing issue for this already, so I would suggest wait for it to be finalized, before introducing this change. Issue: https://github.com/Microsoft/TypeScript/issues/6395\r\n",
        "createdAt" : "2017-03-04T09:18:41Z",
        "updatedAt" : "2017-03-04T09:19:21Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db9518ef6ae14ddd0cdf0bb531ebd49ba16b9c28",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +28,32 @@        eventPropGetter?: (event: Object, start: stringOrDate, end: stringOrDate, isSelected: boolean) => void;\n        titleAccessor?: string | ((row: Object) => string);\n        allDayAccessor?: string | ((row: Object) => boolean);\n        startAccessor?: string | ((row: Object) => Date);\n        endAccessor?: string | ((row: Object) => Date);"
  },
  {
    "id" : "a0115e5a-fa23-4126-8bd2-dc880dde2315",
    "prId" : 14937,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14937#pullrequestreview-24863733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1446f6d-bebc-4ea4-9b60-81770cbffcca",
        "parentId" : null,
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "please update both start/end accessors to `Date | (row: Object) => Date;`\r\n\r\nPlease note: there is no need for additional parentheses, please remove them",
        "createdAt" : "2017-03-02T08:43:41Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "68cc45c1-fb2b-423c-85f1-76bb1d26159a",
        "parentId" : "e1446f6d-bebc-4ea4-9b60-81770cbffcca",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "This is the same conflict as the **string|()=>bool** type guard issue.  \"myDateFieldName\" is not a date, it's a string.  \r\nHere's the jsDoc: \r\nhttps://github.com/intljusticemission/react-big-calendar/blob/master/src/Calendar.js#L256\r\n\r\nI did try to remove the extra parens before the original commit, I don't like extra parens either.  It won't build without them, TS gets confused about the end of the statement.",
        "createdAt" : "2017-03-02T18:15:49Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      },
      {
        "id" : "2c07c720-1b6b-4a6a-8e40-8176d196d9b8",
        "parentId" : "e1446f6d-bebc-4ea4-9b60-81770cbffcca",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "yes your'e right, I forgot that making union with function signature is required to enclose with parens, looks good!",
        "createdAt" : "2017-03-02T22:42:27Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db9518ef6ae14ddd0cdf0bb531ebd49ba16b9c28",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +30,34 @@        allDayAccessor?: string | ((row: Object) => boolean);\n        startAccessor?: string | ((row: Object) => Date);\n        endAccessor?: string | ((row: Object) => Date);\n        min?: stringOrDate;\n        max?: stringOrDate;"
  },
  {
    "id" : "9cc630e4-a7cf-452a-878c-235e1c5b0ad5",
    "prId" : 14937,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14937#pullrequestreview-24864327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91fa1c2a-ffbc-4302-b1d1-692986915980",
        "parentId" : null,
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "function signature is wrong, the constrains are that: \"function should resolve to the specific value\" and there is none other actual signature requirements, so the correct declaration should be:\r\n`Date | (...args: any[]) => Date;`\r\n\r\nAlso note: there is no need for additional parentheses, please remove them",
        "createdAt" : "2017-03-02T08:52:49Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      },
      {
        "id" : "be167464-4924-4d4b-98da-246bd8eb6b52",
        "parentId" : "91fa1c2a-ffbc-4302-b1d1-692986915980",
        "authorId" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "body" : "Okay, there are now two issues present in the type guard you've provided.  I agree that the output of the function should be a Date.  \r\n\r\nFirstly, the first portion will still need to be a string, because all property names of objects are stored as strings.  There's a quick paragraph called \"Property names\" in the following link:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\r\n\r\nSecondly, now you've introduced a spread operator into your function signature, which is not necessary.  Below are a couple of links to the usage of startAccessor in the calendar:\r\nhttps://github.com/intljusticemission/react-big-calendar/blob/fa73913d8f1198359aa06256f4e5dd88557d8ef1/src/utils/eventLevels.js#L13\r\nhttps://github.com/intljusticemission/react-big-calendar/blob/fa73913d8f1198359aa06256f4e5dd88557d8ef1/src/utils/accessors.js#L6\r\n\r\nLooking at the first link, pay particular attention to the **dates.startOf(get(event, startAccessor), 'day')**, you'll see \"get\" which is an alias for \"assessor\" in the import statement on line 2.  Note that the first argument being passed into \"get\" is an event object and the second argument is the startAccessor that we're currently having a conversation about.\r\n\r\nNow have a look at the second link, the acessor.js file.  **Note that on line 6, \"field\" is our startAccessor function and it's being handed a parameter of \"data\" which is our event object.**  There is only one parameter, which is the event object.  In other words, there's no need for a spread operator, just the one param that is our event object.",
        "createdAt" : "2017-03-02T18:59:10Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "f247b96b-3f01-4dd0-b253-6a4985200e65",
        "tags" : [
        ]
      },
      {
        "id" : "92621f98-5804-49d1-9cb4-1b97df673bd3",
        "parentId" : "91fa1c2a-ffbc-4302-b1d1-692986915980",
        "authorId" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "body" : "yes you're right, I'm not familiar with the API of library because not using it anymore, but now after a closer look it make sense, thx 👍 ",
        "createdAt" : "2017-03-02T22:45:34Z",
        "updatedAt" : "2017-03-03T10:48:26Z",
        "lastEditedBy" : "11b77802-0577-4a2a-9db4-ecf2ad2fcb5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "db9518ef6ae14ddd0cdf0bb531ebd49ba16b9c28",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +30,34 @@        allDayAccessor?: string | ((row: Object) => boolean);\n        startAccessor?: string | ((row: Object) => Date);\n        endAccessor?: string | ((row: Object) => Date);\n        min?: stringOrDate;\n        max?: stringOrDate;"
  }
]