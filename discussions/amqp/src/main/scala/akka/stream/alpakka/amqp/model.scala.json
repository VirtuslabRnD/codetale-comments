[
  {
    "id" : "58c8b7c4-8a0a-4e18-bf96-4edfb13266ea",
    "prId" : 1921,
    "prUrl" : "https://github.com/akka/alpakka/pull/1921#pullrequestreview-287000275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9ea3027-90b6-4959-b0b6-68c00c5f5330",
        "parentId" : null,
        "authorId" : "aad5d50a-4c3a-4321-830a-982c0bccfc35",
        "body" : "`PartialFunction.cond`",
        "createdAt" : "2019-09-10T20:45:46Z",
        "updatedAt" : "2019-11-25T18:22:36Z",
        "lastEditedBy" : "aad5d50a-4c3a-4321-830a-982c0bccfc35",
        "tags" : [
        ]
      },
      {
        "id" : "bbfba262-f6a4-412c-9d6e-d0c9ef06d6c0",
        "parentId" : "a9ea3027-90b6-4959-b0b6-68c00c5f5330",
        "authorId" : "085736fc-d24d-4f93-8954-634af1491b1f",
        "body" : "It doesn't make it much simpler, and every single equals method in whole alpakka seems to be implemented using `match`, so I'll leave that as is.",
        "createdAt" : "2019-09-11T18:50:07Z",
        "updatedAt" : "2019-11-25T18:22:36Z",
        "lastEditedBy" : "085736fc-d24d-4f93-8954-634af1491b1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c5eca877e84a351172164ba71b752e2b3fed46b",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +94,98 @@    s\"WriteResult(confirmed=$confirmed)\"\n\n  override def equals(other: Any): Boolean = other match {\n    case that: WriteResult =>\n      Objects.equals(this.confirmed, that.confirmed)"
  },
  {
    "id" : "d1dc4f23-6874-437e-8afc-c61bbc720be9",
    "prId" : 222,
    "prUrl" : "https://github.com/akka/alpakka/pull/222#pullrequestreview-29372237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f257cda7-970a-4682-91c2-4270b17dcca4",
        "parentId" : null,
        "authorId" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "body" : "We have to provide a way to set these from Java, which means adding `with***` methods for every one of these properties.",
        "createdAt" : "2017-03-27T06:41:38Z",
        "updatedAt" : "2017-05-03T20:45:29Z",
        "lastEditedBy" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "tags" : [
        ]
      },
      {
        "id" : "90f23a72-fffc-4f7c-91f2-1a7fd763bcf9",
        "parentId" : "f257cda7-970a-4682-91c2-4270b17dcca4",
        "authorId" : "471d7e58-b24e-477a-90a8-141013a5a17a",
        "body" : "Ok, I added the `with***` methods.",
        "createdAt" : "2017-03-27T21:25:46Z",
        "updatedAt" : "2017-05-03T20:45:29Z",
        "lastEditedBy" : "471d7e58-b24e-477a-90a8-141013a5a17a",
        "tags" : [
        ]
      },
      {
        "id" : "4a5f873f-3237-4b1c-aa36-80000a51d16a",
        "parentId" : "f257cda7-970a-4682-91c2-4270b17dcca4",
        "authorId" : "471d7e58-b24e-477a-90a8-141013a5a17a",
        "body" : "I also added a `addHostAndPort(hostAndPorts: (String, Int))` and the Java one `addHostAndPort(hostAndPort: akka.japi.Pair[String, Int])` to add host/port combinations to the already given list. I am a bit unsure about the name `addHostAndPort`. What do you think?",
        "createdAt" : "2017-03-27T21:27:38Z",
        "updatedAt" : "2017-05-03T20:45:29Z",
        "lastEditedBy" : "471d7e58-b24e-477a-90a8-141013a5a17a",
        "tags" : [
        ]
      },
      {
        "id" : "84bab4ca-ad49-4670-a9d2-2b9c3c99d125",
        "parentId" : "f257cda7-970a-4682-91c2-4270b17dcca4",
        "authorId" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "body" : "Looking at other connectors (amqp and mqtt) the convention is still to use `with***` method name, but also make it a vararg method, like so:\r\n\r\n```scala\r\n@annotation.varargs\r\ndef withHostAndPorts(hostAndPorts: akka.japi.Pair[String, Int]*) = ...\r\n```",
        "createdAt" : "2017-03-28T07:14:07Z",
        "updatedAt" : "2017-05-03T20:45:29Z",
        "lastEditedBy" : "8173970f-6a3f-4891-8394-179e8251af2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba303e73dc488713f70a85e22395bf2512edbf19",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +162,166 @@    automaticRecoveryEnabled: Option[Boolean] = None,\n    topologyRecoveryEnabled: Option[Boolean] = None,\n    exceptionHandler: Option[ExceptionHandler] = None\n) extends AmqpConnectionSettings {\n"
  }
]