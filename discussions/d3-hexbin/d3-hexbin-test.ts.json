[
  {
    "id" : "2da8b7ee-9f53-4e0b-863b-1134751188de",
    "prId" : 12089,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12089#pullrequestreview-15519650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc36ca22-8261-42b8-bc84-e6b243068b04",
        "parentId" : null,
        "authorId" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "body" : "Passing in `null` as the radius should now fail with `strictNullChecks` on. The definitions only allow `number | undefined`, radius being optional. Here there is no need to support `null` in the definitions, as it has no special meaning, like \"removing a listener or accessor function and returning to default behavior\".",
        "createdAt" : "2016-12-05T17:59:22Z",
        "updatedAt" : "2016-12-05T18:28:37Z",
        "lastEditedBy" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "tags" : [
        ]
      },
      {
        "id" : "c7a41097-5931-45eb-b507-71146a11149e",
        "parentId" : "fc36ca22-8261-42b8-bc84-e6b243068b04",
        "authorId" : "31dcb08e-20cd-4882-8d11-0931a492153c",
        "body" : "fmm, so do I need to remove this test?",
        "createdAt" : "2017-01-06T16:36:27Z",
        "updatedAt" : "2017-01-06T16:36:27Z",
        "lastEditedBy" : "31dcb08e-20cd-4882-8d11-0931a492153c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cba012173e997d261e5d194dbbec6f5c4bf68a3",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@{\n    // hexbin.hexagon(radius) uses the current bin radius if radius is null\n    let path: string = d3Hexbin.hexbin().hexagon(null);\n    path = d3Hexbin.hexbin().hexagon(undefined);\n}"
  },
  {
    "id" : "afee081f-e078-489d-b969-24037d12ec12",
    "prId" : 12089,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12089#pullrequestreview-11424946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1607ae06-6dc9-47b1-8ef3-a0fc7b3aeef9",
        "parentId" : null,
        "authorId" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "body" : "As a general note, since the tests in DT are strictly \"shape tests\", there are a few patterns I tend to follow in the other D3 module definitions:\r\n* When defining variables/constants always explicitly type them with the _expected_ type. I.e. `let x : number = ...` rather than `let x = ...` This way, tests will fail if the right-hand  side does not meet the expectation. Otherwise, the definitions could appear internally consistent due to TypeScripts implicit type inference. The same holds for accessor functions to be tested as the return type of a getter.\r\n* Test each signature for each interface method\r\n* For a \"setter\" method signature always test the return type individually. Do not use consecutive chaining in shape tests. Otherwise, the test may not find edge cases where a return type is (accidentally) changed by one method, but the next chained method is also defined on it, e.g. a sub-type. Re-assigning to the object on which a setter was invoked is a quick check for chainability.\r\n* As in the case of `hexbin()`, there are sometimes generator factories, which make a default assumption about underlying data types (like each point  is of type `[number, number]`), but allow for more general data structures. In this case by setting the generic `T` e.g. to type `Point`. Again, I would first define a variable with explicit type, like `Hexbin<[number, number]>` or `Hexbin<Point`>, then test the factory by assigning to those variables.\r\n* When there are accessors involved, like here for `x` and `y`, I tend to test against each of the typed generators I obtained from the factory.\r\n\r\nOne aspect, that is helpful is creating explicit tests for expected failure modes, e.g. assigning `let x: d3Hexbin.Hexbin<Point> = d3Hexbin.hexbin();`. Same for e.g. method signatures with accessor functions depending on a generic. The benefit is that it may catch some edge cases. Note that such tests can only be inspected by you when updating tests. As you should see compiler errors in your IDE right away. You will need to comment them out before committing, so the CI tests do not fail. I tend to do that by also appending a comment like `// fails, argument type mismatch` or something similar.\r\n\r\nYou can find examples of the latter e.g. in d3-selection.\r\n",
        "createdAt" : "2016-12-05T18:27:13Z",
        "updatedAt" : "2016-12-05T18:28:37Z",
        "lastEditedBy" : "b97ad7b9-a71a-418e-8d81-d15777ab9de6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7cba012173e997d261e5d194dbbec6f5c4bf68a3",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/**\n * Typescript definition tests for d3/d3-hexbin module\n *"
  }
]