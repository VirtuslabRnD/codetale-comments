[
  {
    "id" : "1df041ab-d25f-447c-b9e2-b075601495c1",
    "prId" : 99965,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99965#pullrequestreview-606822268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8cdfd79-c1c1-4369-a243-bc38a7888ac0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "create here is surprisingâ€¦ I'd expect the ingressclass to be created by the manifest that started the ingress controller. Is it self-creating ingressclass?",
        "createdAt" : "2021-03-08T23:58:16Z",
        "updatedAt" : "2021-03-11T00:37:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "16a18197-6097-44fa-899f-2df2d623e54b",
        "parentId" : "f8cdfd79-c1c1-4369-a243-bc38a7888ac0",
        "authorId" : "795a7242-f965-4c9a-b641-070356320c29",
        "body" : "Current approach is for the controller to create/ensure that the GCP ingress classes and ingress params exist.",
        "createdAt" : "2021-03-09T00:10:40Z",
        "updatedAt" : "2021-03-11T00:37:21Z",
        "lastEditedBy" : "795a7242-f965-4c9a-b641-070356320c29",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c5110f6576e560ed29d34dbcd6f7fad8537e0f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +59,63 @@- apiGroups: [\"networking.gke.io\"]\n  resources: [\"servicenetworkendpointgroups\",\"gcpingressparams\"]\n  verbs: [\"get\", \"list\", \"watch\", \"update\", \"create\", \"patch\"]\n# GLBC creates and updates `networking.k8s.io/IngressClass`\n- apiGroups: [\"networking.k8s.io\"]"
  },
  {
    "id" : "92cc46f2-7c45-422b-baa1-7042d2e59e0a",
    "prId" : 95025,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95025#pullrequestreview-495819614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c4c5240-4be8-4548-a1b6-b5f05894f140",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "I don't have a better suggestion but having a gke specific api group in a generic (cloud provider wise) role file doesn't seem correct.",
        "createdAt" : "2020-09-24T16:09:05Z",
        "updatedAt" : "2020-09-24T16:09:05Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "184a7bd6-4678-4b7d-8ea1-024beff81197",
        "parentId" : "7c4c5240-4be8-4548-a1b6-b5f05894f140",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this actually generic? it's in support of https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/manifests/glbc.manifest, right? the file already contained `cloud.google.com` resource permissions.",
        "createdAt" : "2020-09-24T16:58:50Z",
        "updatedAt" : "2020-09-24T16:59:17Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "b3741ddb-03c8-4738-880c-fa27c29ac7b8",
        "parentId" : "7c4c5240-4be8-4548-a1b6-b5f05894f140",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "So anything gce specific should be under cluster/gce. (Eg. cluster/gce/addons) This is under cluster/addons which *should* be generic. At this point I think this file will only effect gce, e2e and scalability (which is really gce).  So its not effecting much beyond gce.",
        "createdAt" : "2020-09-24T18:00:44Z",
        "updatedAt" : "2020-09-24T18:00:45Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "91bd11681aafa22d28776f90097d74c03be701ea",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +55,59 @@  resources: [\"backendconfigs\"]\n  verbs: [\"get\", \"list\", \"watch\", \"update\", \"create\", \"patch\"]\n- apiGroups: [\"networking.gke.io\"]\n  resources: [\"servicenetworkendpointgroups\"]\n  verbs: [\"get\", \"list\", \"watch\", \"update\", \"create\", \"patch\"]"
  }
]