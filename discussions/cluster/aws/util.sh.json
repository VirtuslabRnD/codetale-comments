[
  {
    "id" : "6d4c2ffa-b124-4322-bd9e-69d4ac31b97b",
    "prId" : 27791,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a45d1445-29c4-47ca-aa96-01bffb5d94e1",
        "parentId" : null,
        "authorId" : null,
        "body" : "Is this change really necessary?\n",
        "createdAt" : "2016-06-22T20:22:43Z",
        "updatedAt" : "2016-06-22T20:22:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3397a0f4-1bc6-4b11-a19a-3db03af98549",
        "parentId" : "a45d1445-29c4-47ca-aa96-01bffb5d94e1",
        "authorId" : "815980f5-2f9b-482a-89ad-0fc8f02a9994",
        "body" : "Without it, subsequent calls to things like `detect-security-group` will fail as `VPC_ID` is set within `kube-up` and hence will not be availabile if `kube-up.sh` executes in a sub-process.\n",
        "createdAt" : "2016-06-22T21:34:31Z",
        "updatedAt" : "2016-06-22T21:34:31Z",
        "lastEditedBy" : "815980f5-2f9b-482a-89ad-0fc8f02a9994",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bacc4830e447a1a42d8f2d157fcf4792c1dd3dd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1492,1496 @@#   Variables from config.sh\nfunction test-setup {\n  . \"${KUBE_ROOT}/cluster/kube-up.sh\"\n\n  VPC_ID=$(get_vpc_id)"
  },
  {
    "id" : "c71f6907-0b3b-4669-85ff-6725f606a561",
    "prId" : 24464,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "452d6d6a-0e8e-4743-9654-ca54f312995e",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "For the record, I verified this ID against https://cloud-images.ubuntu.com/locator/ \n",
        "createdAt" : "2016-05-10T04:01:39Z",
        "updatedAt" : "2016-05-13T18:07:15Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "895e44405c4cf998264e9105934a1b9d87905dca",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +362,366 @@\n      ap-northeast-2)\n        AWS_IMAGE=ami-62ac620c\n        ;;\n"
  },
  {
    "id" : "14648303-2d34-473b-bd5d-d018ad65f3eb",
    "prId" : 23785,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e117768-357e-4e30-b5fa-cba195c43aa2",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I think you could also do `if lb.get('VPCId') ==`.  Your way is more verbose but likely clearer though!\n",
        "createdAt" : "2016-04-02T14:09:39Z",
        "updatedAt" : "2016-04-02T14:10:03Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "06c04d17ce043eb7094aa119681d975a7709198b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +152,156 @@  # ELB doesn't seem to be on the same platform as the rest of AWS; doesn't support filtering\n  aws elb --output json describe-load-balancers  | \\\n    python -c \"import json,sys; lst = [str(lb['LoadBalancerName']) for lb in json.load(sys.stdin)['LoadBalancerDescriptions'] if 'VPCId' in lb and lb['VPCId'] == '$1']; print('\\n'.join(lst))\"\n}\n"
  },
  {
    "id" : "79d4cfbc-edcb-4cf2-bfc2-6dffbe9882a8",
    "prId" : 22670,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be4ae4cc-4d7d-44b6-b7ea-5dd8a3af387c",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "should this be a constant instead of reproducing it all over the place?\n",
        "createdAt" : "2016-03-07T23:43:42Z",
        "updatedAt" : "2016-03-08T00:42:30Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "58c429a9-5934-4b43-a192-4ffaea6250c9",
        "parentId" : "be4ae4cc-4d7d-44b6-b7ea-5dd8a3af387c",
        "authorId" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "body" : "Could be. `LogLevel` is already repeated all over the place, and `StrictHostKeyChecking` is used inconsistently. It might be reasonable to put it in `cluster/common.sh`.\n",
        "createdAt" : "2016-03-07T23:49:56Z",
        "updatedAt" : "2016-03-08T00:42:30Z",
        "lastEditedBy" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fdadbb1328a3daccdd08fb29791b7b6ecd86dec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1512,1516 @@\n  for try in $(seq 1 5); do\n    if ssh -oLogLevel=quiet -oConnectTimeout=30 -oStrictHostKeyChecking=no -i \"${AWS_SSH_KEY}\" ${SSH_USER}@${ip} \"echo test > /dev/null\"; then\n      break\n    fi"
  },
  {
    "id" : "bcbb46ac-c099-4c05-a533-d75185780428",
    "prId" : 22594,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "252e2c40-8e5f-4538-b991-e8a629b52fdb",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: It's not clear to me why sudo would not prompt for an interactive password entry here.  But it you've tested it, I guess it doesn't.  Any idea why @justinsb ?\n",
        "createdAt" : "2016-03-10T15:37:48Z",
        "updatedAt" : "2016-03-10T15:37:48Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fdf1e5d3-cb55-44f5-8251-c932753b463f",
        "parentId" : "252e2c40-8e5f-4538-b991-e8a629b52fdb",
        "authorId" : null,
        "body" : "Aah, re-reading the man page, I guess one of these applies?\n\n```\nAuthentication and logging\n       sudo requires that most users authenticate themselves by default.  A password is not required if the invoking user is root, if the target user is\n       the same as the invoking user, or if the authentication has been disabled for the user or command in the sudoers file. \n```\n",
        "createdAt" : "2016-03-10T15:52:07Z",
        "updatedAt" : "2016-03-10T15:52:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "110655cc-f3dc-4fdb-87b5-1c7c9f2535f0",
        "parentId" : "252e2c40-8e5f-4538-b991-e8a629b52fdb",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Yes - it's because all AWS images have a non-root account which you SSH in to, but that user is set up to allow passwordless sudo.  (Because there's no way to communicate a password).  At least all the images I've ever seen!\n",
        "createdAt" : "2016-03-10T16:08:08Z",
        "updatedAt" : "2016-03-10T16:08:08Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "523e1d0d8cf830ed7cbf6f2a7d1131610a34c3df",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +198,202 @@#   SSH_USER\nfunction get-master-env() {\n  ssh -oStrictHostKeyChecking=no -i \"${AWS_SSH_KEY}\" ${SSH_USER}@${KUBE_MASTER_IP} sudo cat /etc/kubernetes/kube_env.yaml\n}\n"
  },
  {
    "id" : "3ebaa6e4-b9b5-4ef7-80ad-0c9c3f619a1e",
    "prId" : 19446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c26c8a26-5ec7-4786-9b34-655bd21e3b84",
        "parentId" : null,
        "authorId" : null,
        "body" : "As far as I understand this will reboot an instance every time it fails a single health check (threshold=0).  What does evaluation-periods actually do?  It's not clear from [the documentation](http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html). \n\nI'm concerned this could easily lead to unwanted reboot loops.   Consider increasing threshold and period?  For example threshold=2, period=180 would only reboot after 3 health check failures within 3 minutes?\n",
        "createdAt" : "2016-01-11T23:19:41Z",
        "updatedAt" : "2016-01-11T23:19:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "67bbd18f-cc51-4b93-bcdd-f414c66538d8",
        "parentId" : "c26c8a26-5ec7-4786-9b34-655bd21e3b84",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "My understanding is that threshold=0 indicates when the condition is breached.  StatusCheck is a binary condition, 0 when healthy and 1 when unhealthy.  Evaluation Periods indicates the number of consecutive breaches before the alarm triggers.  So I think this means that this will reboot only after 3 minutes of continuous (statistic=Minimum) status check = 0.\n\ne.g. \"Recover an Amazon Elastic Compute Cloud instance\" here http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudwatch.html\n\nI agree the docs are less than clear.   But I did try this (by logging in and taking eth0 down) and it did seem to work as expected.\n\nOne note: this is just software failure on the instance.  I am not yet enabling the ec2:recover action for failure of the host, because that has a whole list of conditions and is also very difficult to test.  Not sure if I should do that too (in a separate PR)?\n",
        "createdAt" : "2016-01-17T19:17:44Z",
        "updatedAt" : "2016-01-17T19:17:44Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "0891ab1d-f251-4cea-9c7f-9274b0b1e024",
        "parentId" : "c26c8a26-5ec7-4786-9b34-655bd21e3b84",
        "authorId" : null,
        "body" : "@justinsb Cool, current PR looks good - glad you tested it properly :-)\nRegarding ec2:recover, yes, lets add that in a separate PR.\nThis PR LGTM.\n",
        "createdAt" : "2016-01-20T21:19:47Z",
        "updatedAt" : "2016-01-20T21:19:47Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d91ad0bb6fd5d489727e934482fe0d1d0ca6cf88",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +458,462 @@                 --threshold 0 \\\n                 --period 60 \\\n                 --evaluation-periods 3 \\\n                 --alarm-actions arn:aws:swf:${AWS_REGION}:${aws_owner_id}:action/actions/AWS_EC2.InstanceId.Reboot/1.0 > $LOG\n"
  },
  {
    "id" : "ce2a651b-be52-480d-aa9b-65680a6a4a3f",
    "prId" : 18821,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdf059e5-3a33-435d-902b-1fa508dd4720",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I think in general it would be fine to just make two calls here - bash is sufficiently messy that I'd rather trade-off scripting complexity for AWS efficiency of execution.  But thank you for doing the right thing - we should leave this as-is!\n",
        "createdAt" : "2016-02-13T15:03:00Z",
        "updatedAt" : "2016-02-13T15:03:00Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8beaac51d2e58422f4f8636cfbec4ba25b69470",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +340,344 @@\n  ROOT_DEVICE_MASTER=$($AWS_CMD describe-images --image-ids ${master_image} --query 'Images[].RootDeviceName')\n  if [[ \"${master_image}\" == \"${node_image}\" ]]; then\n      ROOT_DEVICE_NODE=${ROOT_DEVICE_MASTER}\n    else"
  },
  {
    "id" : "64d518cc-474b-4735-8d97-4e40612a58fe",
    "prId" : 17803,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04db60e4-2f75-4b65-8606-4a4f073345e0",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Why do you split this into two functions?\n",
        "createdAt" : "2015-11-30T08:52:24Z",
        "updatedAt" : "2015-11-30T08:52:24Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "07a0c549-8a02-4d33-b927-95b2d9892f3c",
        "parentId" : "04db60e4-2f75-4b65-8606-4a4f073345e0",
        "authorId" : "f1963bac-2094-40ff-aeb5-bafd6b49c645",
        "body" : "Underlying reason was I'm using these scripts to recreate the auto-scaling group and the minion counting doesn't add up when creating a new auto-scaling group (1 existing minion + 1 new minion = 2 minions > 1 expected minion).  By separating this I'm able to skip the check in my own scripting.  The additional benefit of extracting the function is shorter function bodies ~ cleaner code.  Ideally, yes fix the minion count perhaps? :smile:\n",
        "createdAt" : "2015-11-30T15:43:33Z",
        "updatedAt" : "2015-11-30T15:44:07Z",
        "lastEditedBy" : "f1963bac-2094-40ff-aeb5-bafd6b49c645",
        "tags" : [
        ]
      }
    ],
    "commit" : "94d32588f410d36339a8c7013b5985836bee409d",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +1032,1036 @@}\n\nfunction wait-minions {\n  # Wait for the minions to be running\n  # TODO(justinsb): This is really not needed any more"
  },
  {
    "id" : "e8235cff-49b6-4692-8dea-0758ac85c2bd",
    "prId" : 16735,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f7f5fbf-ebb5-4a1d-977b-1dbf5f304113",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Do we want to make this comment consistent with the default?\n",
        "createdAt" : "2015-11-03T17:46:00Z",
        "updatedAt" : "2015-11-03T18:12:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e453a2e2-1c40-4034-997c-c055d3f53b61",
        "parentId" : "1f7f5fbf-ebb5-4a1d-977b-1dbf5f304113",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I was trying to provide a hint as to the typical usage - I imagine most people will not specify the default, but may then need a hint for the second AZ.  (Same as KUBE_SHARE_MASTER=true)\n",
        "createdAt" : "2015-11-03T18:11:20Z",
        "updatedAt" : "2015-11-03T18:12:44Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d5671aec2d6697856259e3b8c01ded8ea1c24c8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +25,29 @@#     create more nodes, perhaps with a different instance type or in\n#     a different subnet/AZ\n#   KUBE_SUBNET_CIDR=172.20.1.0/24\n#     Override the default subnet CIDR; useful if you want to create\n#     a second subnet.  The default subnet is 172.20.0.0/24.  The VPC"
  },
  {
    "id" : "8198a1e9-8797-4744-92fc-e5c92b9056c0",
    "prId" : 15173,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4000a6f5-2ddf-4f1f-9c72-e7627518ff1c",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This is now called extensions/v1beta1\n",
        "createdAt" : "2015-10-15T22:09:46Z",
        "updatedAt" : "2015-10-15T22:09:46Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "33d0541a00e947d07ccd9f3246244b89f6de499d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +447,451 @@    else\n      # TODO: add checking if RUNTIME_CONFIG contains \"experimental/v1alpha1=false\" and appending \"experimental/v1alpha1=true\" if not.\n      if echo \"${RUNTIME_CONFIG}\" | grep -q -v \"experimental/v1alpha1=true\"; then\n        echo \"Experimental API should be turned on, but is not turned on in RUNTIME_CONFIG!\"\n        exit 1"
  },
  {
    "id" : "f5a8444f-2558-4a8b-9c3b-a6632e1d9d7a",
    "prId" : 11765,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27e846a2-13d8-44c7-b80a-bb85da20fa62",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Out of curiosity, how did you decide which providers to enable or disable by default?\n",
        "createdAt" : "2015-07-23T18:43:20Z",
        "updatedAt" : "2015-07-27T06:23:44Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "f049b8bc-7414-40a0-b5a3-aabdb635d65f",
        "parentId" : "27e846a2-13d8-44c7-b80a-bb85da20fa62",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Should be enabled by default for all providers. In this particular the logic is to take value from  cluster/aws/config-{default, test}.sh if specified. Otherwise take false as a default. Since there is ENABLED_CLUSTER_UI defined in both config files here the value would be equal to them (true by default).\n",
        "createdAt" : "2015-07-23T18:52:12Z",
        "updatedAt" : "2015-07-27T06:23:44Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "f48543aba54e7edd545389fd104695463f0a354b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +817,821 @@    echo \"readonly ELASTICSEARCH_LOGGING_REPLICAS='${ELASTICSEARCH_LOGGING_REPLICAS:-}'\"\n    echo \"readonly ENABLE_CLUSTER_DNS='${ENABLE_CLUSTER_DNS:-false}'\"\n    echo \"readonly ENABLE_CLUSTER_UI='${ENABLE_CLUSTER_UI:-false}'\"\n    echo \"readonly DNS_REPLICAS='${DNS_REPLICAS:-}'\"\n    echo \"readonly DNS_SERVER_IP='${DNS_SERVER_IP:-}'\""
  },
  {
    "id" : "8d75f16f-816a-4890-bb59-bcb3622962ae",
    "prId" : 9745,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911b513c-eb53-432f-983f-3fde1fafc5bd",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Do for loops not work on tab delimited collections?\n",
        "createdAt" : "2015-06-15T16:26:40Z",
        "updatedAt" : "2015-06-15T16:26:40Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f042845088fbe98f02f8f43392ec458082be660",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1081,1085 @@                                         Name=tag:KubernetesCluster,Values=${CLUSTER_ID} \\\n                               --query RouteTables[].RouteTableId \\\n                      | tr \"\\t\" \"\\n\")\n    for route_table_id in ${route_table_ids}; do\n      $AWS_CMD delete-route-table --route-table-id $route_table_id > $LOG"
  },
  {
    "id" : "712378bc-31e7-4428-b7ce-c665dca0482a",
    "prId" : 9369,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e95d707-3477-4ac4-9e29-3fd85b382281",
        "parentId" : null,
        "authorId" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "body" : "Is there an issue associated with this TODO? It seems like something that would be silently hit (and somewhat non-trivial to diagnose?).\n",
        "createdAt" : "2015-06-08T20:33:56Z",
        "updatedAt" : "2015-06-08T20:58:53Z",
        "lastEditedBy" : "109e4fe5-4b7d-49ac-a32f-b25103830bbf",
        "tags" : [
        ]
      },
      {
        "id" : "feb6cccd-a7f8-4209-bb0d-f67308c9bce0",
        "parentId" : "4e95d707-3477-4ac4-9e29-3fd85b382281",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "Good call; opened #9432\n",
        "createdAt" : "2015-06-08T21:00:02Z",
        "updatedAt" : "2015-06-08T21:00:02Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c229e5284d8838b76895684ae39a95b996f521b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +49,53 @@\n# Be sure to map all the ephemeral drives.  We can specify more than we actually have.\n# TODO: Actually mount the correct number (especially if we have more), though this is non-trivial, and\n#  only affects the big storage instance types, which aren't a typical use case right now.\nBLOCK_DEVICE_MAPPINGS=\"[{\\\"DeviceName\\\": \\\"/dev/sdb\\\",\\\"VirtualName\\\":\\\"ephemeral0\\\"},{\\\"DeviceName\\\": \\\"/dev/sdc\\\",\\\"VirtualName\\\":\\\"ephemeral1\\\"},{\\\"DeviceName\\\": \\\"/dev/sdd\\\",\\\"VirtualName\\\":\\\"ephemeral2\\\"},{\\\"DeviceName\\\": \\\"/dev/sde\\\",\\\"VirtualName\\\":\\\"ephemeral3\\\"}]\""
  },
  {
    "id" : "4cd2f570-4e92-4d03-92d2-18b3a2f98d52",
    "prId" : 7888,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22931123-282f-4aa0-b043-2892211f09c3",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Please quote your variables (through the change) as \"${AWS_CMD}\" with both quotation marks and curly braces. \n",
        "createdAt" : "2015-05-07T21:59:41Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "db03c2cc-b750-40e1-b489-0ace30ade4de",
        "parentId" : "22931123-282f-4aa0-b043-2892211f09c3",
        "authorId" : "26378c9e-58fc-4f19-8ade-8d42214333f4",
        "body" : "I'm not sure what you meant. `\"${AWS_CMD}\"` will be treated as string (so not executed). `\"$(AWS_CMD)\"` literally as command.\n\n``` bash\n#!/usr/bin/env bash\nAWS_CMD=\"ls -la\"\necho \"${AWS_CMD}\" # => ls -la\necho \"$(AWS_CMD)\" # => ./cli.sh: line 4: AWS_CMD: command not found\n```\n\nI did quote some variables (in next commit) but some of them are output from amazon (e.g. _elastic_ip_allocation_id_, _ip_address_, *master_instance_id) and follow certain form which protecting against should not be necessary. Also saw examples of not-quoting similar situations in https://github.com/madis/kubernetes/blob/associate_aws_elastic_ip_with_master/cluster/aws/util.sh#L408 . So I'd like to know which variables (or in which situations) I should quote & curly brace or should I quote all variables? Or if my next commit puts things in order, please tell me :)\n",
        "createdAt" : "2015-05-08T14:42:01Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "26378c9e-58fc-4f19-8ade-8d42214333f4",
        "tags" : [
        ]
      },
      {
        "id" : "16d3287b-7700-4370-b0ea-9dbd1a8f055b",
        "parentId" : "22931123-282f-4aa0-b043-2892211f09c3",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "There's a pretty strict bash style (as you've probably noticed!)  I think in this case, we can't quote it, but curly brackets help us get closer to full-adherence to the \"style guide\".  (I'm not sure if the style guide is actually written down anywhere, but we set options to exit on error, and require variable declaration; also I find it helpful to copy an example from elsewhere in the script when testing e.g. whether a variable is empty)\n",
        "createdAt" : "2015-05-08T15:05:00Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "546b3d11-9098-4b13-9b25-87b02479c79d",
        "parentId" : "22931123-282f-4aa0-b043-2892211f09c3",
        "authorId" : "26378c9e-58fc-4f19-8ade-8d42214333f4",
        "body" : "Is https://google-styleguide.googlecode.com/svn/trunk/shell.xml the proper styleguide to adhere or is it some other?\n",
        "createdAt" : "2015-05-08T15:11:04Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "26378c9e-58fc-4f19-8ade-8d42214333f4",
        "tags" : [
        ]
      },
      {
        "id" : "ea9775b6-3fd0-424c-b415-ca8138ca92b8",
        "parentId" : "22931123-282f-4aa0-b043-2892211f09c3",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Our style guide has been informally set by @filbranden but is probably largely based on the google shell style guide. \n",
        "createdAt" : "2015-05-08T16:44:49Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "d8c13e65-01a1-4ebb-bca4-95b8690f0a09",
        "parentId" : "22931123-282f-4aa0-b043-2892211f09c3",
        "authorId" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "body" : "@madis \n\nRecommendation (from the style guide you referenced, yes that's the correct one) is to always use `${...}` for variables with more than one character to make that consistent regardless of whether you have some string following the variable that would require the curly braces, so we essentially try to use it everywhere...\n\nIf you expect `${AWS_CMD}` to expand to a single word then you should double quote it, but your example of `ls -la` shows that maybe you don't...\n\nIn that case, if `${AWS_CMD}` is defined inside your script, you should probably use a bash array instead since that's the more general way to support a variable expanding to multiple arguments that is friendly with whitespace.\n\nThough, if you expect AWS_CMD to be set or exported from the external environment, then it's fair to just use the unquoted `${AWS_CMD}` as you're using it. In that case, though, make sure you handle the way of `${AWS_CMD}` not being set in the environment before this script is called, for instance by defaulting it to something useful, or by checking that it is properly defined before you use it (or at least defaulting it to something like `false` which under `set -o errexit` will trigger a somewhat more useful error when executed instead of taking the next argument and assuming it's a command, in which case you run a risk if that actually looks like a valid command then something unintended will run instead of what you originally expected.)\n\nI hope this addresses your concerns.\n",
        "createdAt" : "2015-05-08T18:09:23Z",
        "updatedAt" : "2015-05-14T05:33:36Z",
        "lastEditedBy" : "fd5eb1fb-f30a-4735-908c-944e87d99845",
        "tags" : [
        ]
      }
    ],
    "commit" : "15643a2c72857c3aa962ee16996d9c3a6025135d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +369,373 @@# Output: allocated IP address\nfunction allocate-elastic-ip {\n  $AWS_CMD allocate-address --domain vpc --output text | cut -f3\n}\n"
  },
  {
    "id" : "46320568-1716-45cb-92f7-935f32ba968e",
    "prId" : 6606,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f92d1e53-9f77-45ef-954a-78faaef85133",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "fix indentation.\n",
        "createdAt" : "2015-04-20T21:10:52Z",
        "updatedAt" : "2015-04-23T09:04:01Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "2a359b10-abae-418f-9680-f515d5fa77b7",
        "parentId" : "f92d1e53-9f77-45ef-954a-78faaef85133",
        "authorId" : "6f897e0f-e2ae-4ecc-994b-a82b2fb10eaf",
        "body" : "Seems correct to me?\n",
        "createdAt" : "2015-04-23T08:59:43Z",
        "updatedAt" : "2015-04-23T09:04:01Z",
        "lastEditedBy" : "6f897e0f-e2ae-4ecc-994b-a82b2fb10eaf",
        "tags" : [
        ]
      }
    ],
    "commit" : "645d6d1f2667097b537b64995883549de444b6a0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +49,53 @@\nfunction get_subnet_id {\n  python -c \"import json,sys; lst = [str(subnet['SubnetId']) for subnet in json.load(sys.stdin)['Subnets'] if subnet['VpcId'] == '$1' and subnet['AvailabilityZone'] == '$2']; print ''.join(lst)\"\n}\n"
  },
  {
    "id" : "68091427-e443-4eff-9d16-1c7c6eb05696",
    "prId" : 6606,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d028366-9892-4c57-8239-7a6af998aad7",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "fix indentation.\n",
        "createdAt" : "2015-04-20T21:10:58Z",
        "updatedAt" : "2015-04-23T09:04:01Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "ed1fcbf4-7480-41e7-80c7-5d7c9e57928c",
        "parentId" : "8d028366-9892-4c57-8239-7a6af998aad7",
        "authorId" : "6f897e0f-e2ae-4ecc-994b-a82b2fb10eaf",
        "body" : "Here too\n",
        "createdAt" : "2015-04-23T08:59:49Z",
        "updatedAt" : "2015-04-23T09:04:01Z",
        "lastEditedBy" : "6f897e0f-e2ae-4ecc-994b-a82b2fb10eaf",
        "tags" : [
        ]
      },
      {
        "id" : "e8a48914-f189-449b-8d4a-fc61eb9a2dd7",
        "parentId" : "8d028366-9892-4c57-8239-7a6af998aad7",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "as above.\n",
        "createdAt" : "2015-04-27T18:09:52Z",
        "updatedAt" : "2015-04-27T18:09:52Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "9707e94c-d2e0-4e99-9781-15f02646b155",
        "parentId" : "8d028366-9892-4c57-8239-7a6af998aad7",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "oops, nm, it's the one on 37 that's the outlier...\n",
        "createdAt" : "2015-04-27T18:11:08Z",
        "updatedAt" : "2015-04-27T18:11:08Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "645d6d1f2667097b537b64995883549de444b6a0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +53,57 @@\nfunction get_cidr {\n  python -c \"import json,sys; lst = [str(subnet['CidrBlock']) for subnet in json.load(sys.stdin)['Subnets'] if subnet['VpcId'] == '$1' and subnet['AvailabilityZone'] == '$2']; print ''.join(lst)\"\n}\n"
  },
  {
    "id" : "8d5e843e-4f42-4d6e-9638-8832fb083330",
    "prId" : 6606,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d13f3a3-1ba8-4b40-8fca-7a3c0c048bc7",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "fix indentation.\n",
        "createdAt" : "2015-04-20T21:11:22Z",
        "updatedAt" : "2015-04-23T09:04:01Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "645d6d1f2667097b537b64995883549de444b6a0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +393,397 @@    SUBNET_ID=$($AWS_CMD create-subnet --cidr-block $INTERNAL_IP_BASE.0/24 --vpc-id $VPC_ID --availability-zone ${ZONE} | json_val '[\"Subnet\"][\"SubnetId\"]')\n  else\n    EXISTING_CIDR=$($AWS_CMD describe-subnets | get_cidr $VPC_ID $ZONE)\n    echo \"Using existing CIDR $EXISTING_CIDR\"\n    INTERNAL_IP_BASE=${EXISTING_CIDR%.*}"
  },
  {
    "id" : "46cda0f8-5dd4-413c-af06-7f7d7a14fd7d",
    "prId" : 6007,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54883ffb-8a8c-4781-b32b-2190cf3e48b5",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "BTW, in GCE I'm heavily pushing for the master to tear these down as part of of a finalizer on the master. See the discussion in #4630. So I've been pushing back heavily against similar code on the GCE `util.sh`, because I don't want each provider to have to implement it.\n",
        "createdAt" : "2015-03-26T20:34:11Z",
        "updatedAt" : "2015-03-26T20:50:39Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "3109a7ee-85b8-4001-b9eb-d345e7b775fa",
        "parentId" : "54883ffb-8a8c-4781-b32b-2190cf3e48b5",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "That would be nice :-)  But it sounds like we still need this for now?\n",
        "createdAt" : "2015-03-26T20:48:53Z",
        "updatedAt" : "2015-03-26T20:50:39Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "39428cad-00b3-47ed-9875-c21bd028ab15",
        "parentId" : "54883ffb-8a8c-4781-b32b-2190cf3e48b5",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Yes? Well, \"it depends\". I assume you have ELB deletion code in the `cloudprovider` layer? If so, you're in the same situation as GCE, which is \"leaking if you blow away the cluster entirely while a service with an ELB is still around\".\n",
        "createdAt" : "2015-03-26T20:54:45Z",
        "updatedAt" : "2015-03-26T20:54:45Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "f256d3b77a35089cefe1db3c311c1e4e03ab654d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +722,726 @@        fi\n      done\n    fi\n\n    echo \"Deleting VPC: ${vpc_id}\""
  },
  {
    "id" : "b1715566-a5f9-44b0-bf8d-a7a056f1a2be",
    "prId" : 6006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfc2ee78-3355-4c28-8114-a97e531af431",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "local instance_states\n",
        "createdAt" : "2015-04-16T17:27:54Z",
        "updatedAt" : "2015-04-23T01:30:57Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "9253ae6dcada6f529e1e2a59592f998d83291834",
    "line" : null,
    "diffHunk" : "@@ -1,1 +711,715 @@      $AWS_CMD terminate-instances --instance-ids ${instance_ids} > $LOG\n      echo \"Waiting for instances to be deleted\"\n      while true; do\n        local instance_states=$($AWS_CMD describe-instances --instance-ids ${instance_ids} | expect_instance_states terminated)\n        if [[ -z \"${instance_states}\" ]]; then"
  },
  {
    "id" : "9db25175-f7c1-4656-8058-473e836b22aa",
    "prId" : 6006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2f4b03e-f797-4cc2-bf21-1975a21f31e7",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "local vpc_id\n",
        "createdAt" : "2015-04-16T17:30:01Z",
        "updatedAt" : "2015-04-23T01:30:57Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "9253ae6dcada6f529e1e2a59592f998d83291834",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +679,683 @@}\n\nfunction kube-down {\n  local vpc_id=$(get_vpc_id)\n  if [[ -n \"${vpc_id}\" ]]; then"
  },
  {
    "id" : "ded5af2a-a655-482a-9f04-77c3441c8949",
    "prId" : 5379,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "579e415d-c470-444f-92ca-8d98a819bc47",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "It looks like git won the battle on this file - detect-image isn't defined in this file in this branch, and you have some merge conflicts below.\n",
        "createdAt" : "2015-03-12T17:44:43Z",
        "updatedAt" : "2015-03-16T21:30:57Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b535ff17a84b03e9a6769e61b2314310eaf6603",
    "line" : null,
    "diffHunk" : "@@ -1,1 +332,336 @@  fi\n\n  detect-image\n\n  $AWS_CMD import-key-pair --key-name kubernetes --public-key-material file://$AWS_SSH_KEY.pub > $LOG 2>&1 || true"
  },
  {
    "id" : "bc220598-546c-4545-afab-da9b87d9743f",
    "prId" : 3970,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3803ccbf-92bd-4529-97ce-a01c7e854b6b",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "nit: `((n++))`\n",
        "createdAt" : "2015-01-30T05:38:30Z",
        "updatedAt" : "2015-01-30T05:38:30Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8791acdbaa00a57e1bd337ddfb5dc77a7df0091",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +224,228 @@  until [ $n -ge 5 ]; do\n    $AWS_CMD create-tags --resources ${1} --tags Key=${2},Value=${3} > $LOG && return\n    n=$[$n+1]\n    sleep 15\n  done"
  },
  {
    "id" : "9f2c49b6-6183-4987-91cf-a133f6a60d5b",
    "prId" : 3068,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2ac0a8d-b731-4b6e-91e2-6e1741872d2d",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "How and what should go in this profile?  I don't see a reference in the README.  Most users will get stuck here.\n",
        "createdAt" : "2014-12-19T23:14:16Z",
        "updatedAt" : "2014-12-19T23:14:16Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2369f0d50d3f87650a22c0a3ba5ba94335ec2b64",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +229,233 @@  fi\n\n  aws iam get-instance-profile --instance-profile-name ${IAM_PROFILE} || {\n        echo \"You need to set up an IAM profile and role for kubernetes\"\n        exit 1"
  },
  {
    "id" : "a7910171-a2cd-4d43-8963-d5d99958bda9",
    "prId" : 2653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26353a60-d9b6-46c5-a222-198478edbaf5",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Style nit -- we generally just do `\"${ENABLE_CLUSTER_MONITORING-}\"` in stuff like this as that defaults it to blank.  This is 100% acceptable though.\n",
        "createdAt" : "2014-11-28T16:13:56Z",
        "updatedAt" : "2014-11-28T16:13:56Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "9f79a65c-3bfb-4141-99fd-c704d9ec4777",
        "parentId" : "26353a60-d9b6-46c5-a222-198478edbaf5",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "LMK if you'd like me to apply the style tweak.  I wasn't sure whether it is was a two or three state value!\n",
        "createdAt" : "2014-11-28T16:23:33Z",
        "updatedAt" : "2014-11-28T16:23:33Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b05068f4023d8afd5a9b597966f2285cbec1c7c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +107,111 @@\nfunction setup-monitoring {\n  if [[ \"${ENABLE_CLUSTER_MONITORING:-false}\" == \"true\" ]]; then\n    # TODO: Implement this.\n    echo \"Monitoring not currently supported on AWS\""
  },
  {
    "id" : "7945f935-a7b0-4c37-8832-f90d73657c25",
    "prId" : 2260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec5650ec-96e4-46f9-bdf9-71ee60766904",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Ideally the tag used for filtering/launching instances should be parameterized. As things stand you can only have one cluster per account.  TODO?\n",
        "createdAt" : "2014-11-10T18:56:48Z",
        "updatedAt" : "2014-11-11T01:17:39Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "fb9172ac-5e7e-4e23-8d03-71c8bdac7443",
        "parentId" : "ec5650ec-96e4-46f9-bdf9-71ee60766904",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-11-10T20:42:10Z",
        "updatedAt" : "2014-11-11T01:17:39Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "48498cf9bb4b03d955b4ddd592e2deb6b311928c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +30,34 @@# TODO (bburns) Parameterize this for multiple cluster per project\nfunction get_instance_ids {\n  python -c 'import json,sys; lst = [str(instance[\"InstanceId\"]) for reservation in json.load(sys.stdin)[\"Reservations\"] for instance in reservation[\"Instances\"] for tag in instance[\"Tags\"] if tag[\"Value\"].startswith(\"kubernetes-minion\") or tag[\"Value\"].startswith(\"kubernetes-master\")]; print \" \".join(lst)'\n}\n"
  },
  {
    "id" : "01552751-d9bf-42cc-960c-4ebf3488e433",
    "prId" : 2260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd51397-4146-4a2b-aa64-8fe80ff63749",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "This should be indented as it is in the for loop.\n",
        "createdAt" : "2014-11-10T19:33:05Z",
        "updatedAt" : "2014-11-11T01:17:39Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "1a4e809a-30d5-4ba9-8f2d-04c42a408411",
        "parentId" : "5cd51397-4146-4a2b-aa64-8fe80ff63749",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2014-11-10T20:47:46Z",
        "updatedAt" : "2014-11-11T01:17:39Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "48498cf9bb4b03d955b4ddd592e2deb6b311928c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +279,283 @@\n  for (( i=0; i<${#MINION_NAMES[@]}; i++)); do\n    (\n      # We pipe this to the ami as a startup script in the user-data field.  Requires a compatible ami\n      echo \"#! /bin/bash\""
  }
]