[
  {
    "id" : "9410810a-1adf-45d6-877c-fd842d718848",
    "prId" : 10611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d116eef-9843-4943-ba7f-7563712d0a5f",
        "parentId" : null,
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "This is sufficient - remaining processes will end at some point.\n",
        "createdAt" : "2015-07-01T09:10:20Z",
        "updatedAt" : "2015-07-09T12:00:15Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      },
      {
        "id" : "5c3bb2ff-ea04-402c-87c6-f74ed4416653",
        "parentId" : "0d116eef-9843-4943-ba7f-7563712d0a5f",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Can you add this note into the shell script comments so that it doesn't get lost in github comments. \n",
        "createdAt" : "2015-07-07T14:33:18Z",
        "updatedAt" : "2015-07-09T12:00:15Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa608258a6cc8e3385f562fe6e23aee2e9afc0a6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +52,56 @@    #    be killed)\n    # This is sufficient - remaining processes will end after a while.\n\n    local pid\n    pid=$(cat \"${PIDFILE}\" 2> /dev/null)"
  },
  {
    "id" : "92879acd-8b30-435d-b7a5-1cb75761750a",
    "prId" : 10611,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b947bec2-0169-4ced-bf38-a11b9468be60",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Is there a reason these lines aren't spelled:\n\n```\nif ! pid=$(cat \"${PIDFILE}\" 2> /dev/null); then\n  return 1\nfi\n```\n\n?\n\nIt's more idiomatic to test for return inline unless you need to pocket the return value.\n",
        "createdAt" : "2015-07-09T13:19:07Z",
        "updatedAt" : "2015-07-09T13:19:07Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "e17e1abf-adc0-4d37-8370-044ca8611453",
        "parentId" : "b947bec2-0169-4ced-bf38-a11b9468be60",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "nested bash expressions are horrible - this is the only reason I put it this way.\n",
        "createdAt" : "2015-07-09T13:26:24Z",
        "updatedAt" : "2015-07-09T13:26:24Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa608258a6cc8e3385f562fe6e23aee2e9afc0a6",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +57,61 @@    if [[ $? != 0 ]]; then\n        return 1\n    fi\n    local pgrp\n    # find the process group for the service and kill entire group"
  },
  {
    "id" : "c0c83a0a-e049-4ec3-833d-f839e00eaaba",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Do we need some way to sequence the creation of these objects?\n",
        "createdAt" : "2015-01-20T18:39:02Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "342d634a-8336-4f86-ab23-84c638e2e630",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "I was worried about that, but the parallel spray works fine (at the\nmoment). In the future I could imagine a rudimentary approach using tsort.\n\nOn Tue, Jan 20, 2015 at 10:39 AM, Eric Tune notifications@github.com\nwrote:\n\n> In cluster/saltbase/salt/kube-addons/initd\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion-diff-23243941\n> :\n> \n> > +\n> > +# PATH should only include /usr/\\* if it runs after the mountnfs.sh script\n> > +PATH=/sbin:/usr/sbin:/bin:/usr/bin\n> > +DESC=\"Kubernetes Addon Object Manager\"\n> > +NAME=kube-addons\n> > +DAEMON_LOG_FILE=/var/log/$NAME.log\n> > +PIDFILE=/var/run/$NAME.pid\n> > +SCRIPTNAME=/etc/init.d/$NAME\n> > +KUBECTL=/usr/local/bin/kubectl\n> > +\n> > +# Define LSB log_\\* functions.\n> > +# Depend on lsb-base (>= 3.2-14) to ensure that this file is present\n> > +# and status_of_proc is working.\n> > +. /lib/lsb/init-functions\n> > +\n> > +function addon_manager_async() {\n> \n> Do we need some way to sequence the creation of these objects?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23243941\n> .\n",
        "createdAt" : "2015-01-20T18:44:17Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "5ee36f7f-ac0e-4b63-a02c-2e992e6adb38",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This might not work for monitoring since it requires an 'InfluxDB' service to be setup before starting heapster controller. This requirement should go away once heapster starts using DNS. I will work on a PR to make heapster use DNS.\n",
        "createdAt" : "2015-01-20T22:28:55Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "72464c5f-973e-4117-9cf5-6febe5aec7cb",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "The objects seem to have no trouble being created, no matter what order I fed them in. The services in the pods themselves can't really be relied on to start in a particular order (nor was kube-up.sh actually testing that any particular service was up before creating the next set of pods). (Please note that the `initd` script is actually doing a parallel start on everything, so DNS will probably come up pretty rapidly anyways, but there are no guarantees.)\n\nI did some basic spot checking on the monitoring dashboard after these changes and it looked fine, but there's not a whole lot of testing here. So I think we're fine here unless you're sure there's a problem.\n",
        "createdAt" : "2015-01-20T23:28:26Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "e1ca50fb-16d0-495b-ab2a-e7c8d5702fd4",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "To make this predictable, we will need DNS to be up before starting monitoring and logging services. \n",
        "createdAt" : "2015-01-20T23:43:43Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6d5a852d-5b7d-49ed-bddb-86174d8add14",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Define 'up'? Everything in (now) `/etc/kubernetes/addons/dns` created? The service is healthy? The service has been healthy for N minutes and isn't flapping?\n",
        "createdAt" : "2015-01-20T23:47:14Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "1cd8bd31-7ea4-440e-abae-90dd2c602f72",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Also, this isn't actually true today. Existing `kube-up.sh` semantics call `setup-monitoring`, which create the `cluster/addons/cluster-monitoring` objects, then create DNS.\n\nI suspect what happens is that monitoring comes up and gropes around in the dark for DNS, and then eventually gets it and starts working. Which is fine. That's actually a reasonable approach for service finalization.\n",
        "createdAt" : "2015-01-20T23:50:32Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "45b083b9-ecef-4552-be19-a7deaca36af2",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "I take back my comment - the apps can be made resilient to DNS issues. By 'up' I meant a healthy service. cc @satnam6502 to make sure that DNS is not a hard requirement for logging.\n",
        "createdAt" : "2015-01-20T23:51:14Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "8b85e4e7-af90-46ea-b6fd-937db43f5fd0",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "The current monitoring setup does not rely on DNS. It relies on environment\nvariables for the purposes of service discovery.\n\nOn Tue, Jan 20, 2015 at 3:51 PM, Zach Loafman notifications@github.com\nwrote:\n\n> In cluster/saltbase/salt/kube-addons/initd\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion_r23267625\n> :\n> \n> > +\n> > +# PATH should only include /usr/\\* if it runs after the mountnfs.sh script\n> > +PATH=/sbin:/usr/sbin:/bin:/usr/bin\n> > +DESC=\"Kubernetes Addon Object Manager\"\n> > +NAME=kube-addons\n> > +DAEMON_LOG_FILE=/var/log/$NAME.log\n> > +PIDFILE=/var/run/$NAME.pid\n> > +SCRIPTNAME=/etc/init.d/$NAME\n> > +KUBECTL=/usr/local/bin/kubectl\n> > +\n> > +# Define LSB log_\\* functions.\n> > +# Depend on lsb-base (>= 3.2-14) to ensure that this file is present\n> > +# and status_of_proc is working.\n> > +. /lib/lsb/init-functions\n> > +\n> > +function addon_manager_async() {\n> \n> Also, this isn't actually true today. Existing kube-up.sh semantics call\n> setup-monitoring, which create the cluster/addons/cluster-monitoring\n> objects, then create DNS.\n> \n> I suspect what happens is that monitoring comes up and gropes around in\n> the dark for DNS, and then eventually gets it and starts working. Which is\n> fine. That's actually a reasonable approach for service finalization.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23267625\n> .\n",
        "createdAt" : "2015-01-20T23:58:35Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "76b2d8dd-e44c-47e1-afec-bb4c5a846d76",
        "parentId" : "37bd4e6f-9c88-4e0c-9c6a-bbb8aa1a5d9f",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I'm happy with DNS\n\nOn Tue, Jan 20, 2015 at 3:59 PM, Vish Kannan notifications@github.com\nwrote:\n\n> In cluster/saltbase/salt/kube-addons/initd\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion_r23268068\n> :\n> \n> > +\n> > +# PATH should only include /usr/\\* if it runs after the mountnfs.sh script\n> > +PATH=/sbin:/usr/sbin:/bin:/usr/bin\n> > +DESC=\"Kubernetes Addon Object Manager\"\n> > +NAME=kube-addons\n> > +DAEMON_LOG_FILE=/var/log/$NAME.log\n> > +PIDFILE=/var/run/$NAME.pid\n> > +SCRIPTNAME=/etc/init.d/$NAME\n> > +KUBECTL=/usr/local/bin/kubectl\n> > +\n> > +# Define LSB log_\\* functions.\n> > +# Depend on lsb-base (>= 3.2-14) to ensure that this file is present\n> > +# and status_of_proc is working.\n> > +. /lib/lsb/init-functions\n> > +\n> > +function addon_manager_async() {\n> \n> The current monitoring setup does not rely on DNS. It relies on\n> environment variables for the purposes of service discovery.\n> ... <#14b09c8faf2e3b33_>\n> On Tue, Jan 20, 2015 at 3:51 PM, Zach Loafman notifications@github.com\n> wrote: In cluster/saltbase/salt/kube-addons/initd <\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion_r23267625>\n> : > + > +# PATH should only include /usr/\\* if it runs after the mountnfs.sh\n> script > +PATH=/sbin:/usr/sbin:/bin:/usr/bin > +DESC=\"Kubernetes Addon\n> Object Manager\" > +NAME=kube-addons > +DAEMON_LOG_FILE=/var/log/$NAME.log >\n> +PIDFILE=/var/run/$NAME.pid > +SCRIPTNAME=/etc/init.d/$NAME >\n> +KUBECTL=/usr/local/bin/kubectl > + > +# Define LSB log_\\* functions. > +#\n> Depend on lsb-base (>= 3.2-14) to ensure that this file is present > +# and\n> status_of_proc is working. > +. /lib/lsb/init-functions > + > +function\n> addon_manager_async() { Also, this isn't actually true today. Existing\n> kube-up.sh semantics call setup-monitoring, which create the\n> cluster/addons/cluster-monitoring objects, then create DNS. I suspect what\n> happens is that monitoring comes up and gropes around in the dark for DNS,\n> and then eventually gets it and starts working. Which is fine. That's\n> actually a reasonable approach for service finalization. -- Reply to this\n> email directly or view it on GitHub <\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23267625>\n> .\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23268068\n> .\n",
        "createdAt" : "2015-01-21T00:59:42Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a305269e1830b0ebc00a83af734712ab3be2cad3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@. /lib/lsb/init-functions\n\nfunction addon_manager_async() {\n    # The business logic for whether a given object should be created\n    # was already enforced by salt, and /etc/kubernetes/addons is the"
  },
  {
    "id" : "486a79e7-5dca-46b5-ac54-7e60b83e4d66",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "831a88a0-cefa-4396-8ede-a166c807f4be",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "NB: We are going to have to make sure that kubectl has the right auth material moving forward as we lock things down.  Hopefully our e2e tests will catch this after this goes in.\n",
        "createdAt" : "2015-01-20T18:41:10Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "a6c65b69-b774-47bb-be26-9fdf22b15448",
        "parentId" : "831a88a0-cefa-4396-8ede-a166c807f4be",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "The e2e tests catch DNS at the very least.\n\nOn Tue, Jan 20, 2015 at 10:41 AM, Joe Beda notifications@github.com wrote:\n\n> In cluster/saltbase/salt/kube-addons/initd\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion-diff-23244133\n> :\n> \n> > +PIDFILE=/var/run/$NAME.pid\n> > +SCRIPTNAME=/etc/init.d/$NAME\n> > +KUBECTL=/usr/local/bin/kubectl\n> > +\n> > +# Define LSB log_\\* functions.\n> > +# Depend on lsb-base (>= 3.2-14) to ensure that this file is present\n> > +# and status_of_proc is working.\n> > +. /lib/lsb/init-functions\n> > +\n> > +function addon_manager_async() {\n> > -    # The business logic for whether a given object should be created\n> > -    # was already enforced by salt, and /etc/kubernetes/addons is the\n> > -    # managed result is of that. Start everything below that directory.\n> > -    echo \"== Kubernetes addon manager started at $(date -Is) ==\"\n> > -    for obj in $(find /etc/kubernetes/addons -name *.yaml); do\n> > -       ${KUBECTL} create -f ${obj} &\n> \n> NB: We are going to have to make sure that kubectl has the right auth\n> material moving forward as we lock things down. Hopefully our e2e tests\n> will catch this after this goes in.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23244133\n> .\n",
        "createdAt" : "2015-01-20T18:42:39Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "a305269e1830b0ebc00a83af734712ab3be2cad3",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@    echo \"== Kubernetes addon manager started at $(date -Is) ==\"\n    for obj in $(find /etc/kubernetes/addons -name \\*.yaml); do\n\t    ${KUBECTL} create -f ${obj} &\n\t    echo \"++ addon ${obj} started in pid $! ++\"\n    done"
  },
  {
    "id" : "93ac3e26-07a0-4d67-ace2-933866f48cbd",
    "prId" : 3601,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cdbf927-be26-4cc8-9ae0-ef47a5d04fa7",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "What happens if a user wants to push a new config for these things?  I'm guessing that we don't support that for now. We might want to document that as part of kube-push.sh.\n\nAlso, this'll error if the master machine reboots.  We also need to make sure that on a reboot this guy comes up after the apiserver -- or perhaps waits/retries until the apiserver is ready.\n",
        "createdAt" : "2015-01-20T18:43:21Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "8f64fc96-b25f-4661-a8e6-515c0a39805f",
        "parentId" : "9cdbf927-be26-4cc8-9ae0-ef47a5d04fa7",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "> # Required-Start: $local_fs $network $syslog kube-apiserver\n\nYes, it'll error if restarted for now. It's a bit of a wart.\n\nWhat I really want is \"create or update\".\n\nOn Tue, Jan 20, 2015 at 10:43 AM, Joe Beda notifications@github.com wrote:\n\n> In cluster/saltbase/salt/kube-addons/initd\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601#discussion-diff-23244341\n> :\n> \n> > -    done\n> > -    noerrors=\"true\"\n> > -    for pid in $(jobs -p); do\n> > -       wait ${pid} || noerrors=\"false\"\n> > -       echo \"++ pid ${pid} complete ++\"\n> > -    done\n> > -    if [ ${noerrors} == \"true\" ]; then\n> > -       echo \"== Kubernetes addon manager completed successfully at $(date -Is) ==\"\n> > -    else\n> > -       echo \"== Kubernetes addon manager completed with errors at $(date -Is) ==\"\n> > -    fi\n> >   +\n> > -    # We stay around so that status checks by salt make it look like\n> > -    # the service is good. (We could do this is other ways, but this\n> > -    # is simple.)\n> > -    sleep infinity\n> \n> What happens if a user wants to push a new config for these things? I'm\n> guessing that we don't support that for now. We might want to document that\n> as part of kube-push.sh.\n> \n> Also, this'll error if the master machine reboots. We also need to make\n> sure that on a reboot this guy comes up after the apiserver -- or perhaps\n> waits/retries until the apiserver is ready.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3601/files#r23244341\n> .\n",
        "createdAt" : "2015-01-20T18:48:30Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "616514c3-4188-4e3f-853e-2173ade0d3c9",
        "parentId" : "9cdbf927-be26-4cc8-9ae0-ef47a5d04fa7",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "I might've misunderstood your comment a bit, though. The only error you see is actually in the `/var/log/kube-addons.log`, and it's relatively obvious that it completed with mild errors. Is this worth fixing right now?\n\nIs there hope down the line for an atomic create-or-update op? Because the robust approach without it is probably to do something like \"if create fails, try update .. if that fails, we had a real error\", but even that is a guess.\n",
        "createdAt" : "2015-01-20T22:09:21Z",
        "updatedAt" : "2015-01-21T20:26:01Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "a305269e1830b0ebc00a83af734712ab3be2cad3",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@    # the service is good. (We could do this is other ways, but this\n    # is simple.)\n    sleep infinity\n}\n"
  }
]