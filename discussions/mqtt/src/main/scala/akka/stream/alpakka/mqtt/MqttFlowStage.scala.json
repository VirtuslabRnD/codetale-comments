[
  {
    "id" : "ec062bac-a491-4525-a5bb-765f1e7ddc6e",
    "prId" : 814,
    "prUrl" : "https://github.com/akka/alpakka/pull/814#pullrequestreview-99131939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "452598fd-97db-42ed-87ae-116153fc2eb3",
        "parentId" : null,
        "authorId" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "body" : "This was hiding the outer scope - not a biggy, but I thought I'd address it.",
        "createdAt" : "2018-02-25T05:01:05Z",
        "updatedAt" : "2018-02-25T05:01:06Z",
        "lastEditedBy" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb0c9d05573e64fa26fce219bdf0229aec24f832",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +62,66 @@        getAsyncCallback[IMqttAsyncClient]((client: IMqttAsyncClient) => {\n          if (manualAcks) client.setManualAcks(true)\n          val (topics, qoses) = sourceSettings.subscriptions.unzip\n          if (topics.nonEmpty) {\n            client.subscribe(topics.toArray, qoses.map(_.byteValue.toInt).toArray, (), mqttSubscriptionCallback)"
  },
  {
    "id" : "a3731f2c-3d11-4cbd-9905-7c5385b21b8d",
    "prId" : 814,
    "prUrl" : "https://github.com/akka/alpakka/pull/814#pullrequestreview-99131945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ce3ea76-5a34-4fa9-b572-76817b4d7a74",
        "parentId" : null,
        "authorId" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "body" : "An additional check as I noticed a scenario where we had pulled already given auto-reconnect.",
        "createdAt" : "2018-02-25T05:01:38Z",
        "updatedAt" : "2018-02-25T05:01:38Z",
        "lastEditedBy" : "c82885b6-397c-46ac-bd34-8b847b9fcd87",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb0c9d05573e64fa26fce219bdf0229aec24f832",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +93,97 @@\n      private val onPublished = getAsyncCallback[Try[IMqttToken]] {\n        case Success(_) => if (!hasBeenPulled(in)) pull(in)\n        case Failure(ex) => failStage(ex)\n      }"
  }
]