[
  {
    "id" : "9565a308-34d5-42ff-8a97-5f7914564074",
    "prId" : 13853,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13853#pullrequestreview-17532083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3844dd1d-94f3-4e81-9e50-7db711e6f0bc",
        "parentId" : null,
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "From the source, looks like it is returning an Observable as well :https://github.com/Reactive-Extensions/RxJS/blob/8fa95ac884181fb6cbff8ce7c1d669ffb190f5e4/src/modular/observable/mergeall.js#L64",
        "createdAt" : "2017-01-18T01:43:56Z",
        "updatedAt" : "2017-01-18T01:43:58Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "583ce349-dfc8-4c06-abd3-4d9eaafb7af5",
        "parentId" : "3844dd1d-94f3-4e81-9e50-7db711e6f0bc",
        "authorId" : "73a0df17-018c-4583-8d35-e458d17b8e00",
        "body" : "Yes but this method only works for observable sequences of observables. Thus we have:\r\n\r\nIf concatAll returns T:\r\n```ts\r\nlet  x : Observable<Observable<number>>; //T is Observable<number>\r\nlet concat = x.concatAll();\r\n//concat should be Observable<number>, not Observable<Observable<number>>\r\n//this is only posible if concatAll() returns T\r\n\r\nconcat.subscribe(x => {  console.log(x + 1); /* x is a number */ });\r\n```\r\n\r\nIf concatAll returns Observable(T) instead of T:\r\n```ts\r\nlet concat = x.concatAll(); //concat is Observable<Observable<number>>\r\n\r\nconcat.subscribe(x => {  \r\nconsole.log(x + 1); \r\n/* type error, x is a number in runtime, but \r\ntypescript detects x as Observable<number> instead */ \r\n});\r\n```",
        "createdAt" : "2017-01-18T02:52:21Z",
        "updatedAt" : "2017-01-18T02:52:35Z",
        "lastEditedBy" : "73a0df17-018c-4583-8d35-e458d17b8e00",
        "tags" : [
        ]
      },
      {
        "id" : "23cd6509-2474-487b-9f8b-c32131615125",
        "parentId" : "3844dd1d-94f3-4e81-9e50-7db711e6f0bc",
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "I am not an expert on rxjs, but why is this different from the other methods? and what if x is `Observable<Observable<Observable<T>>>`?  or just `Observable<T>`?",
        "createdAt" : "2017-01-18T03:42:10Z",
        "updatedAt" : "2017-01-18T03:42:10Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "6d7c34a2-cc90-4876-a4a0-1c1ff83d7328",
        "parentId" : "3844dd1d-94f3-4e81-9e50-7db711e6f0bc",
        "authorId" : "73a0df17-018c-4583-8d35-e458d17b8e00",
        "body" : "This method is different from other methods such as `map` or `filter` in that it reduces an observable of observables onto a flattened observable. It does not returns the same type as `x`.\r\n\r\nSince the reduction is not recursive, if `x` is `Observable<Observable<Observable<T>>>` `concat` should be of type `Observable<Observable<T>>`. This is compatible with the pull request\r\n\r\nIf `x` is `Observable<T>` ideally `concatAll` should not be available since[ the method expects an observable of observables as an input](https://github.com/Reactive-Extensions/RxJS/blob/8fa95ac884181fb6cbff8ce7c1d669ffb190f5e4/src/modular/observable/mergeall.js#L60), but this kind of type restrictions [are not possible to express on typescript yet](https://github.com/Microsoft/TypeScript/issues/1290)\r\n\r\n",
        "createdAt" : "2017-01-18T03:58:16Z",
        "updatedAt" : "2017-01-18T03:58:16Z",
        "lastEditedBy" : "73a0df17-018c-4583-8d35-e458d17b8e00",
        "tags" : [
        ]
      },
      {
        "id" : "2807200e-216f-4021-9d93-8e46b6e08041",
        "parentId" : "3844dd1d-94f3-4e81-9e50-7db711e6f0bc",
        "authorId" : "de31bdbf-c755-4bd1-849f-63abfcefc12f",
        "body" : "```ts\r\nconst x: Observable<number> = Observable.range(0, 1);\r\nx.concatAll().subscribe(x => console.log(x)); // throw `TypeError: xs.subscribe is not a function` at run time\r\n```\r\n\r\nThis typescript code is valid now.  Current type definition is ill clearly.\r\n\r\nI can't think of any better alternatives than this request.  Maybe, we should comment notice on code such as:\r\n\r\n```ts\r\n/**\r\n * Observable<Observable<V>>.concatAll(): Observable<V>\r\n * Notice: This method throws run time exception without Observable value.\r\n */\r\nconcatAll(): T;\r\n```",
        "createdAt" : "2017-01-19T19:29:50Z",
        "updatedAt" : "2017-01-19T19:31:52Z",
        "lastEditedBy" : "de31bdbf-c755-4bd1-849f-63abfcefc12f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a9fe2efe4aa8a9c6ad765d6ccc471341964332",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +233,237 @@        concat(...sources: (Observable<T> | IPromise<T>)[]): Observable<T>;\n        concat(sources: (Observable<T> | IPromise<T>)[]): Observable<T>;\n        concatAll(): T;\n        concatObservable(): Observable<T>;    // alias for concatAll\n        concatMap<T2, R>(selector: (value: T, index: number) => Observable<T2>, resultSelector: (value1: T, value2: T2, index: number) => R): Observable<R>;    // alias for selectConcat"
  },
  {
    "id" : "a6ae0b75-1752-4b64-a783-d8e6d1c73628",
    "prId" : 13853,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13853#pullrequestreview-17532083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc6a80f6-b5e7-4549-bd69-77da7ec82a8e",
        "parentId" : null,
        "authorId" : "de31bdbf-c755-4bd1-849f-63abfcefc12f",
        "body" : "Should we discuss about this line, too?\r\nActually, I can't find this method on RxJS 4 document...",
        "createdAt" : "2017-01-19T19:06:23Z",
        "updatedAt" : "2017-01-19T19:31:52Z",
        "lastEditedBy" : "de31bdbf-c755-4bd1-849f-63abfcefc12f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a9fe2efe4aa8a9c6ad765d6ccc471341964332",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +234,238 @@        concat(sources: (Observable<T> | IPromise<T>)[]): Observable<T>;\n        concatAll(): T;\n        concatObservable(): Observable<T>;    // alias for concatAll\n        concatMap<T2, R>(selector: (value: T, index: number) => Observable<T2>, resultSelector: (value1: T, value2: T2, index: number) => R): Observable<R>;    // alias for selectConcat\n        concatMap<T2, R>(selector: (value: T, index: number) => IPromise<T2>, resultSelector: (value1: T, value2: T2, index: number) => R): Observable<R>;    // alias for selectConcat"
  }
]