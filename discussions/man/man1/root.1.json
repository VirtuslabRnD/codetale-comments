[
  {
    "id" : "f402e3e2-cd97-4ecc-b063-dce4d69d3c2f",
    "prId" : 1487,
    "prUrl" : "https://github.com/root-project/root/pull/1487#pullrequestreview-85426191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d8d6897-4866-4798-bf76-854f2327a8da",
        "parentId" : null,
        "authorId" : "2feffd62-0186-49eb-83ed-d3295abdb279",
        "body" : "note to self: wrap lines.",
        "createdAt" : "2017-12-23T16:58:23Z",
        "updatedAt" : "2017-12-23T16:59:46Z",
        "lastEditedBy" : "2feffd62-0186-49eb-83ed-d3295abdb279",
        "tags" : [
        ]
      }
    ],
    "commit" : "195639502b1c87016686a4af3680c7c302ab4bfb",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +72,76 @@Afterwards the function with the same name as the filename (without extension) in the macro file is executed (eg. \\fIvoid macro()\\fR in a file \\fImacro.C\\fR).\n.PP\nCompilation is done on-demand if the macro is newer than a previously generated shared library. Two plus signs (macro.C++) force a recompilation. Adding \\fIO\\fR after a plus results in an optimised build, adding \\fIg\\fR adds debug symbols (eg. \\fImacro.C+Og\\fR).\n.PP\nMacro files, data files and \\fI-e\\fR expressions are processed in the order in which they are provided. If a macro relies on the presence of \\fI_file0\\fR, then root should be called with \\fIroot data.root macro.C\\fR."
  }
]