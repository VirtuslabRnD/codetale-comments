[
  {
    "id" : "a6e88c21-8089-4dfa-a213-da7b1031de99",
    "prId" : 8131,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m confused, this is hardcoded not the actual SDK version, how does this work?",
        "createdAt" : "2020-12-03T10:50:50Z",
        "updatedAt" : "2020-12-03T10:50:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f6a7ef1c-e81d-4288-a315-107ddebf3ea0",
        "parentId" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "when we build the package with our bazel rules, all strings '0.0.0-SDKVERSION' in the source are replaced by the actual sdk version.",
        "createdAt" : "2020-12-03T11:54:21Z",
        "updatedAt" : "2020-12-03T11:54:21Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "1cf2f0a3-7f47-4094-8e87-5b2e32c2bfd1",
        "parentId" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Have you checked this? My understanding was that we only replace things in `package.json` not the source files. Looking at the Bazel rules seems to confirm that.",
        "createdAt" : "2020-12-03T11:59:37Z",
        "updatedAt" : "2020-12-03T11:59:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8fe5df5a-b940-43fb-9512-0b359a6e0a76",
        "parentId" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah nvm, we replace in all files.",
        "createdAt" : "2020-12-03T12:00:46Z",
        "updatedAt" : "2020-12-03T12:00:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "de60bc8a-a8da-44ef-9202-189536fe58d8",
        "parentId" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "this should also resolve the above issue in the test, right?",
        "createdAt" : "2020-12-03T14:52:58Z",
        "updatedAt" : "2020-12-03T14:52:58Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "7dfd179d-7450-4ffb-b4a2-9f5fa04dac93",
        "parentId" : "943c2b14-5a94-4a25-b0d7-baa7114f43af",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not quite sure, we do this in `pkg_npm` not during the build. I think the tests might still be affected. Easy enough to test with `DAML_SDK_RELEASE_VERSION`.",
        "createdAt" : "2020-12-03T14:54:24Z",
        "updatedAt" : "2020-12-03T14:54:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2669471dddf5c1ac7627c8052b1ff9b796894302",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +35,39 @@   * @internal\n   */\n  sdkVersion: '0.0.0-SDKVERSION';\n  /**\n   * @internal"
  },
  {
    "id" : "d44092e4-f8f0-415d-93f5-810074870be3",
    "prId" : 8040,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d944ec7-1149-4422-8d03-7a372d06e9ee",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m a bit surprised lodash doesn’t seem to have a deep ordering helper but I couldn’t find one :disappointed: ",
        "createdAt" : "2020-11-24T10:06:47Z",
        "updatedAt" : "2020-11-24T14:34:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7df993ad-b38c-4d5d-bb1c-0e7d50aa7472",
        "parentId" : "4d944ec7-1149-4422-8d03-7a372d06e9ee",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "This was not my first choice either.",
        "createdAt" : "2020-11-24T10:42:13Z",
        "updatedAt" : "2020-11-24T14:34:38Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "6856f16217ca4443fc526bb6270b3af4c146cffd",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +466,470 @@    // sorting done so that generic object deep comparison would find equal\n    // maps equal (as defined by jest's expect().toEqual())\n    this._kvs = _.sortBy(kvs, kv => JSON.stringify(kv[0]));\n    this._keys = this._kvs.map(e => e[0]);\n    this._values = this._kvs.map(e => e[1]);"
  },
  {
    "id" : "0859c21b-68a9-42f7-bb47-66ff83f5258f",
    "prId" : 8040,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "776def47-e05a-4266-8e31-6fb910344122",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Worth mentioning that this is an immutable map? And perhaps also that this is intentionally only exposed as an abstract interface and no stability of the underlying implementation is guaranteed.",
        "createdAt" : "2020-11-24T10:12:50Z",
        "updatedAt" : "2020-11-24T14:34:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a0b7c905-a741-4524-8955-d7e64181b423",
        "parentId" : "776def47-e05a-4266-8e31-6fb910344122",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I've added a note about immutability and key equality (we use deep equality, which is different from both Immutable.js and es6 Maps). I'm not quite sure how to phrase \"don't rely on things that are not exported\".",
        "createdAt" : "2020-11-24T12:09:01Z",
        "updatedAt" : "2020-11-24T14:34:38Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "2f088e60-ff1b-48b3-9af6-0c27e557c5bb",
        "parentId" : "776def47-e05a-4266-8e31-6fb910344122",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fair point, let’s not add something about the exported stuff.",
        "createdAt" : "2020-11-24T12:10:36Z",
        "updatedAt" : "2020-11-24T14:34:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6856f16217ca4443fc526bb6270b3af4c146cffd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +422,426 @@\n/**\n * The counterpart of DAML's `DA.Map.Map K V` type.\n *\n * This is an immutable map which compares keys via deep equality. The order of"
  },
  {
    "id" : "dde0220b-c888-4a89-9acd-5d2ae0a630fd",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3722be10-6ca6-4a58-9e16-13534d29d006",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That seems like an implementation detail. Do we want to keep this in the docs? In fact should we hide the whole `Serializable` thing?",
        "createdAt" : "2020-03-13T20:25:21Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dd917e8e-fc4d-4944-babf-44b7722d51db",
        "parentId" : "3722be10-6ca6-4a58-9e16-13534d29d006",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "My thinking was that if someone is looking at the documentation of daml-types, then they probably want to build something on their own. So the serializable thing might be of interest to them. But I wouldn't mind either to make it internal.",
        "createdAt" : "2020-03-13T20:42:07Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "90422c09-7368-43d6-b77f-f17ccf3658f1",
        "parentId" : "3722be10-6ca6-4a58-9e16-13534d29d006",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think we should mark it `@internal`. I don't want to commit to keeping it like this.",
        "createdAt" : "2020-03-16T10:09:32Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +13,17 @@   * The decoder for a contract of template T.\n   *\n   * NB: This is a function to allow for mutually recursive decoders.\n   */\n  decoder: () => jtv.Decoder<T>;"
  },
  {
    "id" : "0d7e8930-658c-4673-8085-11e5f75ef2cc",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18e51261-29f0-4453-832e-568ba9f7ee67",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should we make the decoders internal?",
        "createdAt" : "2020-03-13T20:27:19Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a285b525-f595-4323-aba0-57aefda1f5f8",
        "parentId" : "18e51261-29f0-4453-832e-568ba9f7ee67",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "see above.",
        "createdAt" : "2020-03-13T20:42:32Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "4ef9f6b5-6f25-42cd-8ff8-105e0b9503c3",
        "parentId" : "18e51261-29f0-4453-832e-568ba9f7ee67",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yes, let's make this `@internal` as well.",
        "createdAt" : "2020-03-16T10:10:22Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +59,63 @@  /**\n   * Returns a decoder to decode the choice arguments.\n   */\n  argumentDecoder: () => jtv.Decoder<C>;\n  /**"
  },
  {
    "id" : "d02250a2-b4aa-41e9-a93b-b2ee81d00bac",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c56e1bb-4e2e-498d-999b-d89e45647e0f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we actually validate this on the client side anywhere or do you only get the error from the JSON API. If the latter, would it make sense to introduce validation somewhere to get more readable errors?",
        "createdAt" : "2020-03-13T20:29:23Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b49b15a0-b931-44fb-b952-739e946085e6",
        "parentId" : "8c56e1bb-4e2e-498d-999b-d89e45647e0f",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I don't know, @hurryabit might know ?",
        "createdAt" : "2020-03-13T20:44:30Z",
        "updatedAt" : "2020-03-13T20:49:35Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "cfe53bef-651d-46f8-9eea-f40e54a23597",
        "parentId" : "8c56e1bb-4e2e-498d-999b-d89e45647e0f",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Currently, we only validate data coming from the JSON API. We only validate that each `Numeric` is a string and nothing beyond that.\r\n\r\nLong term, we should also validate the data we send to the JSON API to be able to produce better error messages if we were to send malformed data.",
        "createdAt" : "2020-03-16T11:15:01Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +143,147 @@ *\n * We represent `Numeric`s as string in order to avoid a loss of precision. The string must match\n * the regular expression `-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?`.\n */\nexport type Numeric = string;"
  },
  {
    "id" : "d169faed-2625-4760-a355-2d273a606606",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "300dcf69-abd4-44f2-bd70-4cb642546741",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n * @typeparam C The choice argument type.\r\n```",
        "createdAt" : "2020-03-16T10:10:01Z",
        "updatedAt" : "2020-03-16T11:20:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +48,52 @@ * @typeparam T The template type.\n * @typeparam K The contract key type.\n * @typeparam C The choice type.\n * @typeparam R The choice return type.\n *"
  },
  {
    "id" : "da5ecd4c-923d-4613-8323-0c155ea6a717",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30837455-904d-4749-8709-11bde92b57c8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should probably also make all companion objects for builtin types `@internal`. They are not meant to be used by humans but only by `daml2ts`.",
        "createdAt" : "2020-03-16T10:11:44Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +107,111 @@\n/**\n * Companion obect of the [[Unit]] type.\n */\nexport const Unit: Serializable<Unit> = {"
  },
  {
    "id" : "6099cff2-0a49-408f-8949-b9c548e6c2f9",
    "prId" : 5000,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf9eb0c-7dd3-4606-ba39-dc03b9faeb29",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should give a very brief explanation, that just using `null | T` would not work if you have nested `Optional`s. That's where the seemingly complicated `OptionalInner` type is coming from. See https://docs.daml.com/json-api/lf-value-specification.html#optional for an explanation of the `Optional` encoding.",
        "createdAt" : "2020-03-16T11:18:19Z",
        "updatedAt" : "2020-03-16T11:20:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b6d56020-cb86-48f8-a05c-7aa8652656cb",
        "parentId" : "dbf9eb0c-7dd3-4606-ba39-dc03b9faeb29",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "See also the last note of the \"Primitive DAML Types\" section of https://docs.daml.com/daml2ts/index.html.",
        "createdAt" : "2020-03-17T13:57:52Z",
        "updatedAt" : "2020-03-17T13:57:52Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "404991104a725113a3b006be2fea20fdbf0a6dad",
    "line" : 275,
    "diffHunk" : "@@ -1,1 +270,274 @@ * The counterpart of DAML's `Optional T` type.\n *\n * @typeparam T The type of the optionally present value.\n */\nexport type Optional<T> = null | OptionalInner<T>"
  }
]