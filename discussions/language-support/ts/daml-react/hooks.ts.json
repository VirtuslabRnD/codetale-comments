[
  {
    "id" : "912c6ea8-12cc-4e32-8b64-ea5a68136413",
    "prId" : 5375,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff4d6cce-a686-4c12-ab99-da2528bc781e",
        "parentId" : null,
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "@hurryabit I changed the order of these signatures so that the documentation is created for the version with most parameters. I hope this doesn't change anything in semantics.",
        "createdAt" : "2020-04-02T12:43:37Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "f4b588b9-63a4-4cb9-ad8b-600a368b0976",
        "parentId" : "ff4d6cce-a686-4c12-ab99-da2528bc781e",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Since the signatures don't overlap, this should be fine. It would also only affect type checking and nothing at runtime. Can you please do the same for `useQuery` as well if necessary?",
        "createdAt" : "2020-04-02T14:51:50Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1752da46-607b-40e7-878c-70650f996e39",
        "parentId" : "ff4d6cce-a686-4c12-ab99-da2528bc781e",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "for `useQuery` it's already right.",
        "createdAt" : "2020-04-02T15:03:04Z",
        "updatedAt" : "2020-04-02T15:04:13Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d069d14fb2abcaacdc8e8d1a8de1432e5c485a54",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +146,150 @@ */\nexport function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory: () => Query<T>, queryDeps: readonly unknown[]): QueryResult<T, K, I>\nexport function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>): QueryResult<T, K, I>\nexport function useStreamQuery<T extends object, K, I extends string>(template: Template<T, K, I>, queryFactory?: () => Query<T>, queryDeps?: readonly unknown[]): QueryResult<T, K, I> {\n  const [result, setResult] = useState<QueryResult<T, K, I>>({contracts: [], loading: false});"
  },
  {
    "id" : "3f811e42-9815-446d-81d1-a23c11009a31",
    "prId" : 4977,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7dd7a34-84d9-4724-bf4c-a31cfb4a2261",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n * @param keyFactory A function returning a contract key.\r\n * @param keyDeps The dependencies of the key (for which a change triggers an update of the result)\r\n```",
        "createdAt" : "2020-03-16T10:04:16Z",
        "updatedAt" : "2020-03-16T10:04:45Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c770f146e360efcd62a10a47b65fef1f667abe5",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +204,208 @@ * @param template The template of the contracts to match.\n * @param queryFactory A function returning a contract key.\n * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n *\n * @return The matching (unique) contract."
  },
  {
    "id" : "a76fd4a4-0b74-4152-8023-cb5fa05f2fc8",
    "prId" : 4972,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03c8c587-2d6b-4db7-ad99-d907a195a027",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is there a `@deprecated` pragma we could add to the doc comment?",
        "createdAt" : "2020-03-16T11:30:25Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "271522cf-36a4-42ed-aefd-119f6e1f49c2",
        "parentId" : "03c8c587-2d6b-4db7-ad99-d907a195a027",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "so right now, the docs for this are not shown at all because of the `@ignore` pragma. we can also use the `@deprecate` pragma to show the docs as deprecated.",
        "createdAt" : "2020-03-16T12:11:46Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "66d436ca-fe22-4f41-a9b4-3aa17a64f805",
        "parentId" : "03c8c587-2d6b-4db7-ad99-d907a195a027",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "changed it to @deprecated.",
        "createdAt" : "2020-03-16T12:12:38Z",
        "updatedAt" : "2020-03-16T13:09:28Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "69373fe4a2c42ce761b666e5f98233422141ea9f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +138,142 @@ */\nexport const useExercise = <T extends object, C, R>(choice: Choice<T, C, R>): (cid: ContractId<T>, argument: C) => Promise<R> => {\n  console.log('useExercise is deprecated. Please use \"useLedger\" instead.');\n  const state = useDamlState();\n  const exercise = async (cid: ContractId<T>, argument: C) => {"
  }
]