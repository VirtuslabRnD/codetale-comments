[
  {
    "id" : "c38dcce9-0992-428f-95fe-8a62456a17d0",
    "prId" : 7789,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d48634c3-4f68-4733-b80b-0de4c1088fa7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "A comment that explains why we have to lie to the compiler would be nice.",
        "createdAt" : "2020-10-23T11:36:55Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "48b1770c-b3f2-4b25-8368-bedb99b4bf78",
        "parentId" : "d48634c3-4f68-4733-b80b-0de4c1088fa7",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I don't think we _have to_, but the current test code does and changing that seemed outside the scope of this PR.\r\n\r\nThe issue is that we're mocking the entire stream implementation in such a way that the return value of the (mocked) streams is never type checked. The logical type signature for the `streamq` and `streamk` functions would ensure that the values we get out of our streams are the ones expected by the `useStream*` functions, but all of the existing tests essentially return & check for `{loading: boolean; contract: payload}` instead of the proper `{loading: boolean, contract: {templateId: ..., payload: ..., ...}}`, i.e. we're completely skipping over the `CreateEvent` type.\r\n\r\nWhile I do think this should be cleaned up at some point, I don't think it should be done as part of this PR. I'm also not sure there's that much to gain, so priority is unclear.",
        "createdAt" : "2020-10-23T12:08:02Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "2e0b6266-8d57-4f85-a600-e47eeb749a4f",
        "parentId" : "d48634c3-4f68-4733-b80b-0de4c1088fa7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Perfectly fine to not change this in this PR and maybe never. Can we copy your implementation into a code comment? I’m sure I’ll forget about this again otherwise.",
        "createdAt" : "2020-10-23T12:10:19Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "44c5cd15-8df5-460c-abdd-9dceab855e23",
        "parentId" : "d48634c3-4f68-4733-b80b-0de4c1088fa7",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Added similar explanation as comments.",
        "createdAt" : "2020-10-23T12:17:34Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2711d75ba7ad4effdb829987dba951c25a92e82",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +316,320 @@ * that in the context of mocking all stream operations.\n */\nfunction streamq<Q, LyingToTheCompiler extends {loading: boolean; contracts: readonly object[]}>(useFn: (template: Template<object>, factory: () => Q, deps: unknown[], closeHandler?: (e: StreamCloseEvent) => void) => LyingToTheCompiler, mkQuery: (s: string) => () => Q): () => void {\n  return (): void => {\n    test('live event changes loading status', () => {"
  },
  {
    "id" : "adfecbdb-19fa-48f9-bd1b-2eb75a80b21a",
    "prId" : 7789,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b6176f-82e0-4638-9ec2-ed0dd3f5d864",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Would a test be useful that actually tests multiple queries or keys or is this somewhat redundant in this mocked setup?",
        "createdAt" : "2020-10-23T11:41:13Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "db9af671-b6ca-4e49-8493-8bde0efb54c0",
        "parentId" : "66b6176f-82e0-4638-9ec2-ed0dd3f5d864",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Given that we're completely mocking the entire stream stack here, I don't think it would add any value at all to test at this level. I'm otherwise happy with the current test coverage of the underlying `@daml/ledger` functions, but would be open to try and add more of that in a separate PR if you're not.",
        "createdAt" : "2020-10-23T12:09:28Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "fdaa048c-0049-495b-a7c4-7beb9324cb1d",
        "parentId" : "66b6176f-82e0-4638-9ec2-ed0dd3f5d864",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I agree with you, just wanted to check if I had all the context.",
        "createdAt" : "2020-10-23T12:10:52Z",
        "updatedAt" : "2020-10-23T12:19:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2711d75ba7ad4effdb829987dba951c25a92e82",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +569,573 @@    {loading: true, contract: null},\n    (c: object | null): {loading: boolean; contract: object | null} => ({loading: false, contract: c})));\ndescribe(\n  'useStreamFetchByKeys',\n  streamk("
  }
]