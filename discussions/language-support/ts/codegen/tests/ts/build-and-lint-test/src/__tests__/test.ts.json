[
  {
    "id" : "7f07c365-4caa-4a2e-bb7c-4f7f4afb34a8",
    "prId" : 8115,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9608bb06-fd14-4952-a84a-b00d47a509e8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Your token is a bit misleading. We need an admin token for package management (at least for uploads). The only reason why this works is that your ledger runs without auth and the JSON API doesnâ€™t validate the token. (Probably same issue for party management). Doesnâ€™t really matter for this test so I donâ€™t mind keeping it.",
        "createdAt" : "2020-12-01T07:52:19Z",
        "updatedAt" : "2020-12-01T12:14:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d1870178-2f7b-4288-93eb-75bca6bcf8d3",
        "parentId" : "9608bb06-fd14-4952-a84a-b00d47a509e8",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I did consider that, but I really don't know what to do about it.\r\n\r\nI'll add a note to the documentation, at least.",
        "createdAt" : "2020-12-01T10:22:27Z",
        "updatedAt" : "2020-12-01T12:14:12Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6dbdcae070460afe2e2215e8ba8bd4ac6e1e740",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +543,547 @@    }\n  };\n  const ledger = new Ledger({token: ALICE_TOKEN, httpBaseUrl: httpBaseUrl()});\n\n  const packagesBefore = await ledger.listPackages();"
  },
  {
    "id" : "9b2106c9-7e93-4240-8814-4a3e0ce330b0",
    "prId" : 8104,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "361d517f-599d-4bb0-a66d-e582dc79e115",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Isnâ€™t this just a regular `.sort()`? I donâ€™t see what lodash buys us here.",
        "createdAt" : "2020-11-30T11:38:18Z",
        "updatedAt" : "2020-11-30T12:54:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5022429922fc1111549959ddfa2657c7a676b431",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +528,532 @@  const allPartiesAfter = (await ledger.listKnownParties()).map((pi) => pi.identifier);\n\n  expect(_.sortBy(allPartiesAfter)).toEqual(_.sortBy([\"Alice\", \"Bob\", \"Dave\", newParty1.identifier, newParty2.identifier]));\n\n});"
  },
  {
    "id" : "401ba49a-d5ba-4683-9879-cefc9a14565f",
    "prId" : 8104,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217e1443-0de8-4aa8-81e6-483e22c13eec",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Here `lodash` buys us a tiny bit but `.sort` accepts a custom comparator so only very very little imho.",
        "createdAt" : "2020-11-30T11:40:32Z",
        "updatedAt" : "2020-11-30T12:54:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6cb4f0f7-8c47-4551-9d15-4c9d47363b1e",
        "parentId" : "217e1443-0de8-4aa8-81e6-483e22c13eec",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "`.sort` is in-place mutation, so I tend to avoid it by default. There's no specific reason to stay functional here, but there's also no strong perf requirement to mutate in place. Happy to change if you want.",
        "createdAt" : "2020-11-30T12:12:43Z",
        "updatedAt" : "2020-11-30T12:54:43Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "632d3afc-c0ff-4af6-81bf-55c145de5938",
        "parentId" : "217e1443-0de8-4aa8-81e6-483e22c13eec",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah right, I had forgotten about that. Then letâ€™s keep the immutable version. Definitely not worried about performance, I just like to stick to the stdlib when it doesnâ€™t make a difference but immutability seems good enough.",
        "createdAt" : "2020-11-30T12:14:11Z",
        "updatedAt" : "2020-11-30T12:54:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "73a7b9b0-e3a1-4032-a49d-59b75891a674",
        "parentId" : "217e1443-0de8-4aa8-81e6-483e22c13eec",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "It's not uncommon in the JS world to pretend `lodash` is part of the stdlib.",
        "createdAt" : "2020-11-30T12:55:20Z",
        "updatedAt" : "2020-11-30T12:55:20Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "5022429922fc1111549959ddfa2657c7a676b431",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +520,524 @@\n  const allParties = await ledger.listKnownParties();\n  expect(_.sortBy(allParties, [(p: PartyInfo) => p.identifier])).toEqual([p(\"Alice\"), p(\"Bob\")]);\n\n  const newParty1 = await ledger.allocateParty({});"
  },
  {
    "id" : "672ff742-a850-4884-b146-36652ce900e9",
    "prId" : 7911,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2121504-8fc2-479e-b0bb-cfa4f6d6f0ff",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "No fancy promsifying library here? ðŸ˜ƒ ",
        "createdAt" : "2020-11-05T17:43:06Z",
        "updatedAt" : "2020-11-05T17:43:13Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5b932c4f-c41f-4678-a72f-d2c87215dd30",
        "parentId" : "d2121504-8fc2-479e-b0bb-cfa4f6d6f0ff",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I'm a man of simple tastes. ðŸ¤·",
        "createdAt" : "2020-11-06T11:47:38Z",
        "updatedAt" : "2020-11-06T11:47:39Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d27225896e75770250dc8030d18f3812ecbc497",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +465,469 @@  const events: string[] = [];\n  const ws = new WebSocket(url, ['jwt.token.' + ALICE_TOKEN, 'daml.ws.auth']);\n  await new Promise(resolve => ws.addEventListener('open', () => resolve()));\n  const forCloseEvent = new Promise(resolve => ws.addEventListener('close', () => {\n    events.push('close');"
  },
  {
    "id" : "f52c44c1-557d-4d50-84d2-68a10ba8ecae",
    "prId" : 7066,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7066",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5f886d9-0735-4d93-8255-d2b2ad53b5df",
        "parentId" : null,
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Tests are failing about 4/10 times without this. With it I got 40 out of 40 successes. I'm not super happy about it, but this being JS, I don't know of any better way to give the collect callback a chance to run.",
        "createdAt" : "2020-09-08T17:16:45Z",
        "updatedAt" : "2020-09-08T17:16:46Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "6b99bb7d-6cdd-4886-8343-25dde972fb42",
        "parentId" : "d5f886d9-0735-4d93-8255-d2b2ad53b5df",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we make a promise out of the callback and `await` that?",
        "createdAt" : "2020-09-08T17:19:40Z",
        "updatedAt" : "2020-09-08T17:19:47Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "913f3377-d7ad-4ea8-a133-ff1f17037bbd",
        "parentId" : "d5f886d9-0735-4d93-8255-d2b2ad53b5df",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I suppose we could replace the current `collect` mechanism with a multi-delivery promise, and then explicitly `await` each expected message, rather than handling the whole stream as an array.\r\n\r\nSyntactically you'd have a few more method calls and `await` expressions in exchange for this one `sleep`. In terms of runtime behaviour, I believe the test would time out instead of failing, which means that it would be slower for non-timing-related failures and that it will be much more lenient if things get slow.\r\n\r\nI'll let you decide if you think the tradeoff is worth it; I have a small preference for the state it's currently in, but it's not a massive change and I'm willing to open a PR for it if you think that's better.",
        "createdAt" : "2020-09-08T17:34:58Z",
        "updatedAt" : "2020-09-08T17:34:58Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "772100eb-8a90-48b0-b046-1424b24a98ac",
        "parentId" : "d5f886d9-0735-4d93-8255-d2b2ad53b5df",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Letâ€™s leave it and if it starts flaking we can reconsider.",
        "createdAt" : "2020-09-08T17:36:14Z",
        "updatedAt" : "2020-09-08T17:36:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef0422dc9dbfe8749fff1b56b9a06706cecc569",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +364,368 @@  await create(\"included\");\n\n  await sleep(500);\n\n  expect(queryResult).toMatchObject("
  },
  {
    "id" : "4df93504-ec24-44ba-9070-8d17f161c578",
    "prId" : 6898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11ecb8c6-ec20-4640-9599-7e0a42639c67",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Shouldnâ€™t this pass now?",
        "createdAt" : "2020-07-28T13:30:52Z",
        "updatedAt" : "2020-07-28T13:31:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0c5f7014-f513-4ec0-b461-e70416530177",
        "parentId" : "11ecb8c6-ec20-4640-9599-7e0a42639c67",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It should indeed. Good catch. I'll make another PR for that.",
        "createdAt" : "2020-07-28T13:35:59Z",
        "updatedAt" : "2020-07-28T13:36:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f94a507b-5e87-4f87-9a34-c8b4ee4c5956",
        "parentId" : "11ecb8c6-ec20-4640-9599-7e0a42639c67",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Now youâ€™re just gaming PR stats :trollface: ",
        "createdAt" : "2020-07-28T13:37:28Z",
        "updatedAt" : "2020-07-28T13:37:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6a0a9187-7346-46bf-9c42-d330cc994f75",
        "parentId" : "11ecb8c6-ec20-4640-9599-7e0a42639c67",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm gaming your contribution stats too since code reviews count as well. ðŸ¤« ",
        "createdAt" : "2020-07-28T13:40:00Z",
        "updatedAt" : "2020-07-28T13:40:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dbc137d3934573d4f5719eb87379502e0807f24",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +119,123 @@  // test('uninhabited record', () => {\n  //   expect(buildAndLint.Main.VoidRecord.decoder().run(undefined).ok).toBe(false);\n  // });\n\n  test('uninhabited enum', () => {"
  },
  {
    "id" : "77c652f7-fd24-40d1-a9e6-a288a3326fda",
    "prId" : 5571,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c6ab53a-9611-4173-ac76-60f6b45bec95",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Nice!",
        "createdAt" : "2020-04-16T08:18:09Z",
        "updatedAt" : "2020-04-16T13:08:48Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "72535d45c1b8ec7a43d469e44a1e26622b509de6",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +157,161 @@  expect(events[1]).toHaveProperty('created');\n  const alice5Archived = (events[0] as {archived: buildAndLint.Main.Person.ArchiveEvent}).archived;\n  const alice6Contract = (events[1] as {created: buildAndLint.Main.Person.CreateEvent}).created;\n  expect(alice5Archived.contractId).toEqual(alice5Contract.contractId);\n  expect(alice6Contract.contractId).toEqual(result);"
  },
  {
    "id" : "db1e2be0-f896-47ee-b387-8ea0c077b73e",
    "prId" : 5553,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b0356fe-649b-422e-ad89-cda4d955cb59",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This would have made it a bit terser:\r\n```suggestion\r\nconst httpBaseUrl = (): string => `http://localhost:${jsonApiPort}/`;\r\n```\r\nAnd please add semicolons to the end of lines. It's not strictly necessary but I don't understand the implications of not doing it and am a bit wary hence.",
        "createdAt" : "2020-04-16T08:26:59Z",
        "updatedAt" : "2020-04-16T08:27:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "a531fa2e91c8166269e89d49c693ca7b59e6ba22",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +29,33 @@let jsonApiPort: number | undefined = undefined;\nconst JSON_API_PORT_FILE = 'json-api.port';\nconst httpBaseUrl: () => string = () => `http://localhost:${jsonApiPort}/`\n\nlet sandboxProcess: ChildProcess | undefined = undefined;"
  },
  {
    "id" : "3841e927-6455-4cba-9881-ee6fc3de6661",
    "prId" : 5550,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1444ede4-6aad-4416-b6f9-b25c31576900",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Hardcoding port numbers somewhat defeats the point of using `--port-file`. We should bind to port `0` and then read the port from the file. Fine to leve it for this PR but letâ€™s change that separately.",
        "createdAt" : "2020-04-14T15:42:03Z",
        "updatedAt" : "2020-04-14T15:44:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a93f16b4-d6e7-4945-ae99-dd9e0a099824",
        "parentId" : "1444ede4-6aad-4416-b6f9-b25c31576900",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Tracking in issue https://github.com/digital-asset/daml/issues/5551",
        "createdAt" : "2020-04-14T16:05:08Z",
        "updatedAt" : "2020-04-14T16:05:08Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "21784d17a48a9bb046c8c2a7f2100c6770449ae0",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +26,30 @@const SANDBOX_PORT = 6865;\nconst SANDBOX_PORT_FILE = 'sandbox.port';\nconst JSON_API_PORT = 7575;\nconst JSON_API_PORT_FILE = 'json-api.port';\nconst HTTP_BASE_URL = `http://localhost:${JSON_API_PORT}/`;"
  },
  {
    "id" : "3e75d6ae-4bff-4c6a-953f-2d97135537ec",
    "prId" : 4975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1247c484-e2a5-456b-bf44-a46956e79de8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This doesnâ€™t seem to actually test the difference anywhere. I admittedly donâ€™t understand typescript but afaict one of the main benefits of the new approach is that I can just use `\"Red\"` instead of `Color.Red`. We should add some tests for that!",
        "createdAt" : "2020-03-12T20:23:06Z",
        "updatedAt" : "2020-03-12T21:11:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "920c8a8e-1390-4e1d-8a2b-97df3f477c1a",
        "parentId" : "1247c484-e2a5-456b-bf44-a46956e79de8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok, done!",
        "createdAt" : "2020-03-12T20:54:33Z",
        "updatedAt" : "2020-03-12T21:12:15Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +236,240 @@    archiveX: {},\n    either: {tag: 'Right', value: 'really?'},\n    tuple: {_1: '12', _2: 'mmm'},\n    enum: buildAndLint.Main.Color.Red,\n    enumList: [buildAndLint.Main.Color.Red, buildAndLint.Main.Color.Blue, buildAndLint.Main.Color.Yellow],"
  }
]