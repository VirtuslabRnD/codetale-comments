[
  {
    "id" : "c59a259e-5630-4b09-b57d-4178f8ad090b",
    "prId" : 7801,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8fc0fa0-8e5b-4395-8996-bbc527fe95b9",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`tplKeyDecoder` is a `Maybe`. Why is `tplKeyEncode` not a `Maybe` as well instead of the slightly weird `EncodeThrow` thing?",
        "createdAt" : "2020-11-10T13:09:19Z",
        "updatedAt" : "2020-11-12T10:25:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "421f11c1-b6c2-46b7-b25a-589e0a7df0e9",
        "parentId" : "b8fc0fa0-8e5b-4395-8996-bbc527fe95b9",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "`tplKeyDecoder` is a `Maybe`, but the first thing we do with it is to turn it into a `(T.Text, Decoder)` where the decoder is `DecoderConstant ConstantUndefined`, and while `DecoderConstant` is used in some other cases, `ConstantUndefined` only ever gets created here, so this feels like unnecessary juggling to me. It would have seemed more straightforward to have a `Decoder` case for that, so that's what I did for `Encode`. Happy to switch, though.\r\n\r\nThe `Maybe` would have made sense to me if the goal was to not produce the `keyDecoder` entry if it's `None`.",
        "createdAt" : "2020-11-11T15:23:56Z",
        "updatedAt" : "2020-11-12T10:25:15Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "03a2359dab1deba28d016e518e9932fab4052c9d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +348,352 @@  , tplKeyDecoder :: Maybe Decoder\n  -- ^ Nothing if we do not have a key.\n  , tplKeyEncode :: Encode\n  , tplChoices' :: [ChoiceDef]\n  }"
  },
  {
    "id" : "ca135df7-80e4-4ff3-a7c5-533eca8d87db",
    "prId" : 6834,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799d8940-4f40-4168-a40b-11f0840003a4",
        "parentId" : null,
        "authorId" : "c09ded25-bbd5-4a6f-9bae-4cee10c50b4b",
        "body" : "Where is the `DecoderLazy` actually constructed in the codegen?",
        "createdAt" : "2020-07-22T17:53:45Z",
        "updatedAt" : "2020-07-22T17:53:45Z",
        "lastEditedBy" : "c09ded25-bbd5-4a6f-9bae-4cee10c50b4b",
        "tags" : [
        ]
      },
      {
        "id" : "68f02c6e-ab07-4874-8ab1-9673ebceba74",
        "parentId" : "799d8940-4f40-4168-a40b-11f0840003a4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "For variants, that part is fine. The problem is that variants are not the only way to write recursive (terminating) types `Optional`, `List` and `TextMap` give you the same issues and therefore need to be lazy as well. This just seemed like the most appropriate place to document what needs to be lazy.",
        "createdAt" : "2020-07-22T17:54:59Z",
        "updatedAt" : "2020-07-22T17:54:59Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "225ab218-8159-440d-a743-ff26821fe808",
        "parentId" : "799d8940-4f40-4168-a40b-11f0840003a4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The other option would be to make all record fields lazy but I’m not quite sure around the performance implications of making things lazy so limiting it to where we need it to break recursion seemed like a better choice.",
        "createdAt" : "2020-07-22T17:58:53Z",
        "updatedAt" : "2020-07-22T17:58:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "35c9813d-2b63-40d1-9d34-919edbafe124",
        "parentId" : "799d8940-4f40-4168-a40b-11f0840003a4",
        "authorId" : "c09ded25-bbd5-4a6f-9bae-4cee10c50b4b",
        "body" : "makes sense, thanks!",
        "createdAt" : "2020-07-23T08:48:17Z",
        "updatedAt" : "2020-07-23T08:48:18Z",
        "lastEditedBy" : "c09ded25-bbd5-4a6f-9bae-4cee10c50b4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6665127fa528a85209f8a213aa3865360858ad44",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +479,483 @@    | DecoderConstant DecoderConstant\n    | DecoderRef TypeRef -- ^ Reference to an object with a .decoder() method\n    | DecoderLazy Decoder -- ^ Lazy decoder, we need this to avoid infinite loops\n    -- on recursive types. We insert this in every variant, Optional, List and TextMap\n    -- which are the only ways to construct terminating recursive types."
  },
  {
    "id" : "b8dd1234-0705-4a85-b42d-a9309f56b43e",
    "prId" : 6834,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbe6bad1-e851-4a71-9669-60ec48c30c26",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I assume with \"terminating recursive types\" you meant recursive types that are inhabited. Is that correct?",
        "createdAt" : "2020-07-22T20:44:57Z",
        "updatedAt" : "2020-07-22T21:00:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6665127fa528a85209f8a213aa3865360858ad44",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +481,485 @@    | DecoderLazy Decoder -- ^ Lazy decoder, we need this to avoid infinite loops\n    -- on recursive types. We insert this in every variant, Optional, List and TextMap\n    -- which are the only ways to construct terminating recursive types.\n\ndata DecoderConstant"
  },
  {
    "id" : "e187133a-de54-409e-8670-bbf3f54ed786",
    "prId" : 6657,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "691099ca-2c9f-4677-aa98-8656a52d67b9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I just learnt that `const` was only introduced in ES6. 😞",
        "createdAt" : "2020-07-09T19:15:49Z",
        "updatedAt" : "2020-07-09T19:31:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "2f37c44e-af7d-4f18-a2a4-051f84546218",
        "parentId" : "691099ca-2c9f-4677-aa98-8656a52d67b9",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah all the good stuff is only in ES6 :cry: But given that this is generated code it luckily isn’t a big deal (and I believe the typescript typechecker might still yell at you although I haven’t verified that (should be the same as before)).",
        "createdAt" : "2020-07-09T19:32:58Z",
        "updatedAt" : "2020-07-09T19:32:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "381ee9cd524fb450ded324f1f48f4cc97a2cf7cb",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +215,219 @@    modHeader ES5 = commonjsPrefix ++\n      [ \"/* eslint-disable-next-line no-unused-vars */\"\n      , \"var jtv = require('@mojotech/json-type-validation');\"\n      , \"/* eslint-disable-next-line no-unused-vars */\"\n      , \"var damlTypes = require('@daml/types');\""
  },
  {
    "id" : "2e23fb4a-c0fc-48b7-84e1-ad7cb5c8b6a4",
    "prId" : 6615,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e7bcdf2-988d-40a3-8db4-ec369efcc691",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Shouldn't we treat the case when `args` is empty different?",
        "createdAt" : "2020-07-08T07:56:04Z",
        "updatedAt" : "2020-07-08T07:58:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cb7a9e4a-9bfa-4f7e-84d1-31d15c94acb3",
        "parentId" : "7e7bcdf2-988d-40a3-8db4-ec369efcc691",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I realized that on my branch where I change it to emit declaration files but it doesn’t actually make a difference. Typescript seems to be perfectly happy with `<>`. (I’ll still fix it).",
        "createdAt" : "2020-07-08T07:59:43Z",
        "updatedAt" : "2020-07-08T07:59:44Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "36330525b73a099b3fc48a30be0c9792ca20c8e5",
    "line" : 271,
    "diffHunk" : "@@ -1,1 +486,490 @@        , [ \"  | '\" <> f <> \"'\" | f <- fs ]\n        ]\n  where ty t args = t <> \"<\" <> T.intercalate \", \" args <> \">\"\n\n-- | Generate the Serializable definition for a datatype."
  },
  {
    "id" : "c0771c76-1836-42fa-b84f-f28d3a67b2bb",
    "prId" : 5587,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b7bca96-6b5d-4c5a-a6a4-8f5281451fa1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Just out of curiosity, have you tried using just `Key` instead of `T.Key`? Did that work?",
        "createdAt" : "2020-04-16T19:50:24Z",
        "updatedAt" : "2020-04-16T20:00:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "2500f644-e45f-4448-9167-4a254f708f1e",
        "parentId" : "4b7bca96-6b5d-4c5a-a6a4-8f5281451fa1",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Somebody seems to love the magic weapons for point-free code, `maybe` & `const`... 😃\r\nI would have gone for\r\n```suggestion\r\n                              tK = if isJust mbKeyDef then tT <> \".Key\" else \"undefined\"\r\n```",
        "createdAt" : "2020-04-16T19:51:29Z",
        "updatedAt" : "2020-04-16T20:00:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1abbd6a0-ad51-43ee-a237-cf641b456241",
        "parentId" : "4b7bca96-6b5d-4c5a-a6a4-8f5281451fa1",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> Just out of curiosity, have you tried using just `Key` instead of `T.Key`? Did that work?\r\n\r\nI have as a matter of fact. Yes, that works fine.",
        "createdAt" : "2020-04-16T21:07:14Z",
        "updatedAt" : "2020-04-16T21:07:15Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c49bde3c90377c04ba63a6b08ba6367fe9c5618",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +391,395 @@                          let mbKeyDef = fst . genType (moduleName mod) . tplKeyType <$> tplKey tpl\n                              tT = conName\n                              tK = maybe \"undefined\" (const (tT <> \".Key\")) mbKeyDef\n                              tI = \"typeof \" <> tT <> \".templateId\" in\n                          [ \"export namespace \" <> tT <> \" {\" ] ++"
  },
  {
    "id" : "eaa196c4-19f9-4074-b6ba-7ab78e61f4d3",
    "prId" : 5571,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa090981-3779-479a-b86a-5f8aa69c8d97",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I assume this will just be undefined if we do not have a key? Is this tested?",
        "createdAt" : "2020-04-16T14:11:55Z",
        "updatedAt" : "2020-04-16T14:12:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dcaeade2-dbce-4a32-b115-43e4311a9e79",
        "parentId" : "fa090981-3779-479a-b86a-5f8aa69c8d97",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "In the event there is no key, then the definition in play is `export type Key = unknown` which is consistent with the definitions of `Event<>` and `CreateEvent<>`. Yes, tested.",
        "createdAt" : "2020-04-16T14:18:46Z",
        "updatedAt" : "2020-04-16T14:18:47Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "72535d45c1b8ec7a43d469e44a1e26622b509de6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +390,394 @@                        associatedTypes =\n                          let tT = conName\n                              tK = tT <> \".Key\"\n                              tI = \"typeof \" <> tT <> \".templateId\" in\n                          [ \"export namespace \" <> tT <> \" {\""
  },
  {
    "id" : "7cb2a2fa-508d-4c11-8e9d-6d32ed8be83e",
    "prId" : 5571,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f9bcec2-b06e-4033-a02b-ae7605ff1291",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I would prefer if there was no `Key` type synonym when there's no contract key for the template. Let's use `Key` for `tK` when there is a key and `undefined` when there's no key.",
        "createdAt" : "2020-04-16T15:26:47Z",
        "updatedAt" : "2020-04-16T15:26:47Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3c70ec26-7e06-494d-8a9b-287e1d2c85de",
        "parentId" : "0f9bcec2-b06e-4033-a02b-ae7605ff1291",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "PR https://github.com/digital-asset/daml/pull/5587.",
        "createdAt" : "2020-04-16T16:08:30Z",
        "updatedAt" : "2020-04-16T16:08:31Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "72535d45c1b8ec7a43d469e44a1e26622b509de6",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +393,397 @@                              tI = \"typeof \" <> tT <> \".templateId\" in\n                          [ \"export namespace \" <> tT <> \" {\"\n                          , \"  export type Key = \" <> maybe \"unknown\" (fst . genType (moduleName mod) . tplKeyType) (tplKey tpl)\n                          , \"  export type CreateEvent = damlLedger.CreateEvent\" <> \"<\" <> tparams [tT, tK, tI] <> \">\"\n                          , \"  export type ArchiveEvent = damlLedger.ArchiveEvent\" <> \"<\" <>  tparams [tT, tI] <> \">\""
  },
  {
    "id" : "4eca18fe-eb66-483b-8d2e-a25b309e7d27",
    "prId" : 5323,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why are you not using `callProcessSilent` here?",
        "createdAt" : "2020-04-01T06:24:50Z",
        "updatedAt" : "2020-04-01T11:02:41Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a8c48947-6bae-4fea-8a2b-754d6b72289e",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Didn't feel right having this executable depend on a test utility library",
        "createdAt" : "2020-04-01T10:53:57Z",
        "updatedAt" : "2020-04-01T11:02:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "34d3d9e9-c3fd-4cd3-9301-dcf3665b56a4",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : null,
        "body" : "Maybe `callProcessSilent` (etc) should be in da-hs-base.",
        "createdAt" : "2020-04-01T11:00:42Z",
        "updatedAt" : "2020-04-01T11:02:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a2799f36-e2aa-4caa-b201-75129f49c4bf",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Not ~sufficiently~ currently motivated (enough) to do it for this one case today but my arm can be twisted if you feel strongly about it 😉  Do you? ",
        "createdAt" : "2020-04-01T11:08:34Z",
        "updatedAt" : "2020-04-01T11:12:33Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "9f2c96d0-ba7a-4fd3-b4e7-068d28e81a94",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "@associahedron ",
        "createdAt" : "2020-04-01T11:10:00Z",
        "updatedAt" : "2020-04-01T11:10:01Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "d276f8c9-bdb0-4ca1-a84d-394f7b6bb3c1",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : null,
        "body" : "Not strongly, no :) ",
        "createdAt" : "2020-04-01T11:10:05Z",
        "updatedAt" : "2020-04-01T11:10:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "951c0916-6160-43af-834b-f8156de6089e",
        "parentId" : "78b7c48f-c530-49f5-b25c-0e616533d364",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I do agree though, just inclined to do it down the road when a more motivating circumstance arises.",
        "createdAt" : "2020-04-01T11:11:19Z",
        "updatedAt" : "2020-04-01T11:11:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "910d8cde2a20dfa2ec955c1f660b07062bec4b51",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +611,615 @@      copyDirectory pkg $ \"node_modules\" </> scope </> pkg\n\n    yarn :: [String] -> IO ()\n    yarn args = do\n      (exitCode, _, err) <- readProcessWithExitCode \"yarn\" args \"\""
  },
  {
    "id" : "af2f3221-7d33-4266-949a-027726cc256f",
    "prId" : 5209,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80420392-659f-4924-99dd-cdb3527d6c28",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This is because `A/B/C/module.ts` file sits one level deeper than `A/B/C.ts`.",
        "createdAt" : "2020-03-26T10:15:01Z",
        "updatedAt" : "2020-03-26T14:23:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "7009aff7cd6ec3595cab8af0ca8deff007a84e3e",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +229,233 @@        imports = (PRSelf, modName) `Set.delete` Set.unions refs\n        (internalImports, externalImports) = splitImports imports\n        rootPath = map (const \"..\") (unModuleName modName)\n        defs = map biconcat defSers\n        modText = T.unlines $ intercalate [\"\"] $ filter (not . null) $"
  },
  {
    "id" : "ba7cba89-c9f3-42fd-b067-f262e81afe1f",
    "prId" : 5197,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92dc0878-633b-45d8-9539-dffdf03dcd56",
        "parentId" : null,
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Do we still need this after the recent change?",
        "createdAt" : "2020-03-25T20:06:28Z",
        "updatedAt" : "2020-03-25T20:37:25Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "c9fa6b2c-68f2-43dc-9e2b-c302a73247a2",
        "parentId" : "92dc0878-633b-45d8-9539-dffdf03dcd56",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do you mean the camelcase exception? We still produce names like `DA_Template_Internal` which might trigger a warning.",
        "createdAt" : "2020-03-25T20:17:42Z",
        "updatedAt" : "2020-03-25T20:37:25Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "23b6e09c-b6d7-439f-9cc6-1d75dde0f603",
        "parentId" : "92dc0878-633b-45d8-9539-dffdf03dcd56",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I did. Ok!",
        "createdAt" : "2020-03-25T20:18:36Z",
        "updatedAt" : "2020-03-25T20:37:25Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "48bdeaa24d48feb9788fb193e93d3158496d3125",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +260,264 @@    modHeader =\n      [ \"// Generated from \" <> modPath (unModuleName modName) <> \".daml\"\n      , \"/* eslint-disable @typescript-eslint/camelcase */\"\n      , \"/* eslint-disable @typescript-eslint/no-namespace */\"\n      , \"/* eslint-disable @typescript-eslint/no-use-before-define */\""
  },
  {
    "id" : "a1b81a81-f62b-47bb-8302-64f71d032778",
    "prId" : 5171,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40ef814a-2e55-4317-b7b8-f776fa08e244",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can you please create an issue to make sure we remove this flag after the next release.",
        "createdAt" : "2020-03-25T17:32:18Z",
        "updatedAt" : "2020-03-25T17:50:50Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c5f0918f-e5a3-4fb6-b10a-64208072bd17",
        "parentId" : "40ef814a-2e55-4317-b7b8-f776fa08e244",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/issues/5194",
        "createdAt" : "2020-03-25T18:34:58Z",
        "updatedAt" : "2020-03-25T18:34:59Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "ede39c0bc7b73401d689c75f3f46feb6f2c5843f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +79,83 @@    { optInputDars :: [FilePath]\n    , optOutputDir :: FilePath\n    , optInputPackageJson :: Maybe FilePath -- Deprecated.\n    , optScope :: Scope -- Defaults to 'daml.js'.\n    }"
  },
  {
    "id" : "dc484c25-aea8-42d5-afd2-aa4110d8b0c9",
    "prId" : 5098,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce283de2-c47a-4642-95da-e5ac9d7571eb",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "You've apparently done too much OCaml in your life. Nobody else would leave a space between \"Error\" and the colon afterwards. 😉",
        "createdAt" : "2020-03-20T08:35:25Z",
        "updatedAt" : "2020-03-20T08:35:34Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "89312882f256fc1cc54ac6d03a1692bcf561dfb2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +746,750 @@    Just bytes ->\n      case eitherDecode @PackageJson bytes of\n        Left msg -> fail $ \"Error : '\" <> optInputPackageJson <> \"' : \" <> msg\n        Right packageJson -> pure packageJson\n  transformAndWrite ourWorkspaces outBaseDir packageJson"
  },
  {
    "id" : "704877b1-c779-42ee-978e-7504a5c58e08",
    "prId" : 5088,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a26e0467-7dc4-4f37-a144-14fdabec83bb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Shadowing `id` is a bit confusing.",
        "createdAt" : "2020-03-19T16:17:22Z",
        "updatedAt" : "2020-03-19T16:17:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5dcee4fd-bc25-44bf-9b00-afa78f43bca6",
        "parentId" : "a26e0467-7dc4-4f37-a144-14fdabec83bb",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm innocent. 🤷‍♂",
        "createdAt" : "2020-03-19T17:05:51Z",
        "updatedAt" : "2020-03-19T17:05:52Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1d173aa884ccf973a78aba176065c91d09572af",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +174,178 @@                     pkgName = packageNameText pkgId mbPkgName\n                 let pkgDesc = case mbPkgName of\n                       Nothing -> id\n                       Just pkgName -> unPackageName pkgName <> \" (hash: \" <> id <> \")\"\n                 T.putStrLn $ \"Generating \" <> pkgDesc"
  },
  {
    "id" : "501b4fb8-9961-473a-8e37-9e952a60a429",
    "prId" : 5081,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If you use `eiherDecode` you can get an error message on parse failures.",
        "createdAt" : "2020-03-19T07:54:20Z",
        "updatedAt" : "2020-03-19T07:54:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2df74a34-cac8-4e7c-a3b8-cb8265b01ed0",
        "parentId" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Excellent idea. Would be `eitherDecode @PackageJson` then I guess.",
        "createdAt" : "2020-03-19T08:05:55Z",
        "updatedAt" : "2020-03-19T08:05:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cdcf88f3-c88a-473c-a448-4ceb9d6e53ec",
        "parentId" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I'll get another PR going for that.",
        "createdAt" : "2020-03-19T10:52:35Z",
        "updatedAt" : "2020-03-19T10:52:35Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "c0d483a9-f117-4596-b9b5-b5d8ff06d2fa",
        "parentId" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I've had a look at the error messages it produces. They don't look helpful to be honest. For example, with a stray ',' the resulting error message is:\r\n```\r\nError in $: Failed reading: satisfy. Expecting object value\r\n```\r\nI recommend we do not switch from `decode` to `eitherDecode`.",
        "createdAt" : "2020-03-19T18:20:43Z",
        "updatedAt" : "2020-03-19T18:20:43Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "93941c2a-5f75-4db5-88f0-75a3f94ef940",
        "parentId" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It depends on the error and the kind of code you write. E.g. for a missing key you can often get fairly decent errors. Using things like `withObject`, `<?>` you can improve errors. I wouldn’t use one bad error message as an indicator that not showing the error at all is better.",
        "createdAt" : "2020-03-19T18:27:10Z",
        "updatedAt" : "2020-03-19T18:27:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6431056d-6c50-431c-988b-f3d3e977473b",
        "parentId" : "45e448c5-2016-4e09-9850-e198b93a6f0c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok, sounds reasonable. In which case I offer https://github.com/digital-asset/daml/pull/5098 😃  ",
        "createdAt" : "2020-03-19T18:31:28Z",
        "updatedAt" : "2020-03-19T18:31:28Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f4693b184a4cd1682837e9ac4ddf2d48ab7fada",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +744,748 @@  packageJson <- case mbBytes of\n    Nothing -> pure mempty\n    Just bytes -> case decode @PackageJson bytes of\n      Nothing -> fail $ \"Error decoding JSON from '\" <> optInputPackageJson <> \"'\"\n      Just packageJson -> pure packageJson"
  },
  {
    "id" : "de802267-52f5-4abc-a4a9-0fb95a77b3c1",
    "prId" : 5005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb49d981-8554-44bb-8dbd-dc6b13aac1bc",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think the following is easier to read (and shorter):\r\n```suggestion\r\n    Just bytes -> case decode @PackageJson bytes of\r\n```",
        "createdAt" : "2020-03-16T09:21:48Z",
        "updatedAt" : "2020-03-16T09:25:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9640f962003330d691482ffa2c1b07dfa5e06655",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +749,753 @@  packageJson <- case mbBytes of\n    Nothing -> pure mempty\n    Just bytes -> case decode bytes :: Maybe PackageJson of\n      Nothing -> fail $ \"Error decoding JSON from '\" <> optInputPackageJson <> \"'\"\n      Just packageJson -> pure packageJson"
  },
  {
    "id" : "e76b8f84-fa80-4653-95fb-db58d12578e5",
    "prId" : 5005,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e63e278-e8ae-4c55-9c15-c92523b4b6ec",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a big fan of using (highly) polymorphic constants in monomorphic code. What is `mempty` here? Is it `[]` or `Sum 0` or `Endo id`? I _guess_ it's an empty string of some sort. If so, I'd prefer to have the following for the sake of legibility:\r\n```suggestion\r\n    Nothing -> pure \"\"\r\n```",
        "createdAt" : "2020-03-16T09:25:33Z",
        "updatedAt" : "2020-03-16T09:25:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9640f962003330d691482ffa2c1b07dfa5e06655",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +748,752 @@    (Just <$> BSL.readFile optInputPackageJson) (const $ pure Nothing)\n  packageJson <- case mbBytes of\n    Nothing -> pure mempty\n    Just bytes -> case decode bytes :: Maybe PackageJson of\n      Nothing -> fail $ \"Error decoding JSON from '\" <> optInputPackageJson <> \"'\""
  },
  {
    "id" : "92840577-f7de-4d9e-be20-86885a91becd",
    "prId" : 5001,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "843bba50-366e-448b-a6d8-47fc937a5eb2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "How reasonable would it be to default this to `package.json`?",
        "createdAt" : "2020-03-13T19:57:48Z",
        "updatedAt" : "2020-03-13T20:44:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fdaef0ed-622f-44c4-88ff-f668f4c9adfd",
        "parentId" : "843bba50-366e-448b-a6d8-47fc937a5eb2",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Very reasonable I expect. I'll do that.",
        "createdAt" : "2020-03-13T20:03:35Z",
        "updatedAt" : "2020-03-13T20:44:57Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd62e20b94f00b0592230f520a91b0f57ca3096f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +94,98 @@        <> help \"Output directory for the generated packages\"\n        )\n    <*> strOption\n        (  short 'p'\n        <> metavar \"PACKAGE-JSON\""
  },
  {
    "id" : "947cb4a1-d602-4d95-b678-03d8a821a259",
    "prId" : 5001,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6f86393-552c-4833-84b4-8f90664e2417",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe catch the error when reading the file and default it to this instead of explicitly creating it here?",
        "createdAt" : "2020-03-13T20:48:34Z",
        "updatedAt" : "2020-03-13T20:49:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd62e20b94f00b0592230f520a91b0f57ca3096f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +734,738 @@  -- exist, create it.\n  packageJsonExists <- doesFileExist optInputPackageJson\n  when (not packageJsonExists) $ do\n    BSL.writeFile optInputPackageJson $\n      encodePretty (object"
  },
  {
    "id" : "29405219-af11-406e-80c3-77c278a3cddd",
    "prId" : 4975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85b86e6d-0b20-434f-a1a1-0c134f56747b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Side note: The whole code in this module seems to become increasingly messy. I hope it won’t grow much anymore so this is probably not a huge issue but if it does, we should use a pretty printing library and maybe consider introducing some intermediate types or at least lots of helper functions instead of converting directly to strings.",
        "createdAt" : "2020-03-12T20:16:55Z",
        "updatedAt" : "2020-03-12T21:11:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "529c3ea7-6992-4c23-a909-1bfcf63e424e",
        "parentId" : "85b86e6d-0b20-434f-a1a1-0c134f56747b",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Captured in issue https://github.com/digital-asset/daml/issues/5047.",
        "createdAt" : "2020-03-17T16:40:55Z",
        "updatedAt" : "2020-03-17T16:40:56Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +352,356 @@              -- The complete definition of the companion object.\n              serDesc =\n                [ \"export const \" <> conName <> \": daml.Serializable<\" <> conName <> \"> & {\"] <>\n                [ \"  readonly \" <> cons <> \": \" <> conName <> \";\" | cons <- cs ] ++\n                [\"} = {\"] ++"
  },
  {
    "id" : "19b2cbe7-34c0-4424-991b-133c515d45d5",
    "prId" : 4975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a55fac4-64a5-4c7b-8e48-a62b0dd5227a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "One thing that has come up in the past I believe is the need to enumerate enum values (e.g., let’s say you have a dropdown or something like that). If my understanding and my google searches are correct this is easy to do with an enum but not with a union. However, given that we have the companion object, we can probably add the enumeration on that, e.g. `Color.keys = [\"Red\", …]`. I would suggest to leave this out of this PR and do some research if there is a common pattern for this in typescript that we can steal.",
        "createdAt" : "2020-03-12T20:25:58Z",
        "updatedAt" : "2020-03-12T21:11:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e84bcf8d-5320-4cdd-9f2c-fac391105f6e",
        "parentId" : "7a55fac4-64a5-4c7b-8e48-a62b0dd5227a",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yes, we should definitely do something like this. If it wasn't for the `decoder` method, we could use `Object.keys(Color)`. But it's there anyway. So, having `Color.keys` would be great.",
        "createdAt" : "2020-03-16T09:33:32Z",
        "updatedAt" : "2020-03-16T09:33:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "100cb996-537e-49d9-b69f-48d7c373c863",
        "parentId" : "7a55fac4-64a5-4c7b-8e48-a62b0dd5227a",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/5044",
        "createdAt" : "2020-03-17T15:37:06Z",
        "updatedAt" : "2020-03-17T15:37:06Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +355,359 @@                [ \"  readonly \" <> cons <> \": \" <> conName <> \";\" | cons <- cs ] ++\n                [\"} = {\"] ++\n                [\"  \" <> cons <> \": '\" <> cons <> \"',\" | cons <- cs] ++\n                [\"  decoder: () => jtv.oneOf<\" <> conName <> \">\" <> \"(\"] ++\n                [\"      jtv.constant(\" <> conName <> \".\" <> cons <> \"),\" | cons <- cs] ++"
  },
  {
    "id" : "0fa5668a-1cc0-43d5-a8f7-860ca9cdd15f",
    "prId" : 4975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b76a3fe-6ea1-42ef-8b06-81853c3a01ab",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Declaring that `Color.X` has type `Color` renders the pattern match exhaustiveness checker for `Color` useless. Instead, we want to declare the type as `\"X\"`. The easiest way to get this is to intersect with the type\r\n```\r\n{readonly [c in Color]: c}\r\n```\r\ninstead of the record were constructing here.",
        "createdAt" : "2020-03-16T09:53:00Z",
        "updatedAt" : "2020-03-16T09:54:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "25997516-1f40-4ca0-8afc-9a0c12c4af6f",
        "parentId" : "6b76a3fe-6ea1-42ef-8b06-81853c3a01ab",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "For reference https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types.",
        "createdAt" : "2020-03-17T14:22:03Z",
        "updatedAt" : "2020-03-17T14:22:04Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "becd4d1c-feea-4e60-bd72-192ab4193bfd",
        "parentId" : "6b76a3fe-6ea1-42ef-8b06-81853c3a01ab",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/5044",
        "createdAt" : "2020-03-17T14:48:51Z",
        "updatedAt" : "2020-03-17T14:48:52Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +353,357 @@              serDesc =\n                [ \"export const \" <> conName <> \": daml.Serializable<\" <> conName <> \"> & {\"] <>\n                [ \"  readonly \" <> cons <> \": \" <> conName <> \";\" | cons <- cs ] ++\n                [\"} = {\"] ++\n                [\"  \" <> cons <> \": '\" <> cons <> \"',\" | cons <- cs] ++"
  },
  {
    "id" : "71b6b644-6f9b-4ee1-8554-d408f9d437a0",
    "prId" : 4975,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fde2aaa-b503-4b19-af0c-39e49ae1bb1d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We already state that `Color` has type `daml.Serializable<Color>` (intersected with more stuff) above. Thus, we can drop this check. If that's the last occurrence of this check (hopfully!), then we can remove the whole `STATIC_IMPLEMENTS_SERIALIZABLE_CHECK` from our libraries.",
        "createdAt" : "2020-03-16T09:54:50Z",
        "updatedAt" : "2020-03-16T09:54:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "917448d7-c0c9-488b-a4f5-bf357b9169a7",
        "parentId" : "2fde2aaa-b503-4b19-af0c-39e49ae1bb1d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/5044. Unfortunately, not the last occurence.",
        "createdAt" : "2020-03-17T14:49:17Z",
        "updatedAt" : "2020-03-17T14:49:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "2d79ffa7-abca-47cb-8dbe-553223e37cab",
        "parentId" : "2fde2aaa-b503-4b19-af0c-39e49ae1bb1d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "although the last occurrence is silly in the same way that this one became. will remove it in this PR freeing the way to delete it from @daml/types. ",
        "createdAt" : "2020-03-17T14:50:24Z",
        "updatedAt" : "2020-03-17T14:50:24Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "aff71f1c-b39d-4d90-82e7-0456564d1ac6",
        "parentId" : "2fde2aaa-b503-4b19-af0c-39e49ae1bb1d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Done in https://github.com/digital-asset/daml/pull/5044 including removal of the definition of the check from `daml-types`.",
        "createdAt" : "2020-03-17T15:00:54Z",
        "updatedAt" : "2020-03-17T15:00:54Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f6f10a59e79f234fa88ceca81c572c611a97f7d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +360,364 @@                [\"  ),\"] ++\n                [\"} as const;\"] ++\n                [\"daml.STATIC_IMPLEMENTS_SERIALIZABLE_CHECK<\" <> conName <> \">(\" <> conName <> \")\"]\n          in\n          ((makeType typeDesc, serDesc), Set.empty)"
  },
  {
    "id" : "4a188e14-993b-410e-9616-1a8deec892b7",
    "prId" : 4951,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This changes behavior: `joinPath` is platform dependent. On Windows it will produce backslashes, i.e., `joinPath [\"a\", \"b\"] == \"a\\\\b\"`. Does that still work?  If it does, did it work before, i.e., do both `/` and `\\` work on Windows? If so, would it be better to use `/` consistently everywhere so the generated typescript code is platform independent?",
        "createdAt" : "2020-03-11T18:25:36Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b54b41da-fd36-4c5e-acb2-1eab94ee284b",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "the approach we've taken in ghc-lib scripts is to use '/' even on windows.\r\n- i'll change the implementation of `modPath` to use `intercalate` rather than `joinPath`\r\n- `import System.FilePath.Posix((</>)) -- Make sure we generate / on all platforms.`\r\n\r\nthe change to `modPath`  has the additional benefit of cutting down on more `T.unpack`'s too. ",
        "createdAt" : "2020-03-11T18:33:02Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "7f7f373a-01f1-482f-b38a-9b708d7e913c",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I know how it works for ghc-lib. What I don’t know if javascript import syntax imposes special restrictions. From looking around, I couldn’t find a clear answer to this.",
        "createdAt" : "2020-03-11T18:34:25Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f9423c6a-21d7-4557-a310-7c05153accd7",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "it would seem according to https://shapeshed.com/writing-cross-platform-node/ that forward slashes will work on windows.",
        "createdAt" : "2020-03-11T18:41:28Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "d3d610d7-040f-4c6a-bbb2-14ec23c2daf5",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "i expect the two suggested changes above is a good idea so as to negate the possibility of future maintainers wondering about it all over.",
        "createdAt" : "2020-03-11T18:42:44Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "6c3a5288-2afe-4e7b-8804-9c1f82aaef1f",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That doesn’t talk about imports which is the thing I’m worried about. Anyway, given that basically all examples I can find use forward slashes that seems like a safe choice and it is platform independent which makes me happy since I like reproducible builds across platforms.",
        "createdAt" : "2020-03-11T18:43:12Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6ceb78aa-85e7-4067-a996-87984db8c9c6",
        "parentId" : "5157c5a5-e41e-46bd-8ffd-90d49b6ca47c",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> basically all examples I can find use forward slashes that seems like a safe choice \r\n\r\nagreed. have pushed a revision. good to go?",
        "createdAt" : "2020-03-11T18:46:21Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0292d1964bcdf22d58064a0fe8dc136cec7f4f1",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +262,266 @@    importDecl pkgMap modRef@(pkgRef, modName) rootPath =\n      \"import * as \" <>  genModuleRef modRef <> \" from '\" <>\n      modPath ((rootPath : pkgRefStr pkgMap pkgRef : [\"lib\" | pkgRef /= PRSelf]) ++ unModuleName modName) <>\n      \"';\"\n"
  },
  {
    "id" : "d72c0a34-2c00-4d80-838c-e20b8eafee2f",
    "prId" : 4951,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20e86971-0cfc-41f5-8bcd-71c8bc077ee3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that you already import `System.FilePath.Posix`, maybe just use `joinPath` from there?",
        "createdAt" : "2020-03-11T18:45:57Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e7915d17-e9bc-4001-9f95-104737323b44",
        "parentId" : "20e86971-0cfc-41f5-8bcd-71c8bc077ee3",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "we could, i like that this approach allows us to avoid unpacks.",
        "createdAt" : "2020-03-11T18:46:51Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "576c3693-8009-476b-987e-70c3dc04933f",
        "parentId" : "20e86971-0cfc-41f5-8bcd-71c8bc077ee3",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense :+1:",
        "createdAt" : "2020-03-11T18:47:42Z",
        "updatedAt" : "2020-03-11T18:52:19Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0292d1964bcdf22d58064a0fe8dc136cec7f4f1",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +561,565 @@-- \"B\"]' is \"./A/B\".\nmodPath :: [T.Text] -> T.Text\nmodPath parts = T.intercalate \"/\" parts\n\nonHead :: (a -> a) -> [a] -> [a]"
  },
  {
    "id" : "fcfb869b-3bfc-4f32-9d54-872f62289af9",
    "prId" : 4951,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dde98bac-3876-4c4f-93c1-5cf6b9029d28",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can't we just import `System.FilePath.Posix` _instead_ of `System.FilePath`.",
        "createdAt" : "2020-03-12T10:09:59Z",
        "updatedAt" : "2020-03-12T10:13:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c469f95f-f5c8-46fe-a4d3-4b577e7d233c",
        "parentId" : "dde98bac-3876-4c4f-93c1-5cf6b9029d28",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "i agree it seems sensible. see https://github.com/digital-asset/daml/pull/4963.",
        "createdAt" : "2020-03-12T11:54:18Z",
        "updatedAt" : "2020-03-12T11:54:19Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "f090aa88-6143-471e-87f2-bec260c4f964",
        "parentId" : "dde98bac-3876-4c4f-93c1-5cf6b9029d28",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Update : after discussion, it seems the safer choice is to not replace `FilePath` with `FilePath.Posix` so, it was decided to not land https://github.com/digital-asset/daml/pull/4963.",
        "createdAt" : "2020-03-12T12:57:25Z",
        "updatedAt" : "2020-03-12T12:57:25Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0292d1964bcdf22d58064a0fe8dc136cec7f4f1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +32,36 @@import System.Directory\nimport System.FilePath hiding ((<.>), (</>))\nimport System.FilePath.Posix((</>)) -- Make sure we generate / on all platforms.\nimport qualified System.FilePath as FP\n"
  },
  {
    "id" : "aa60c194-ad89-41df-b0e3-30cecd3bce8f",
    "prId" : 4926,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb9b6cce-35dd-4c3b-9e0e-aceeca9f2fda",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This might be showing my ignorance of typescript but why do we use namespaces instead of ES2015 module syntax? All the docs I can find on this claim that this is outdated and legacy stuff and ES2015 module syntax should be preferered.",
        "createdAt" : "2020-03-11T07:39:22Z",
        "updatedAt" : "2020-03-11T12:08:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "43e77d82-a3b7-4d02-9397-a6e23b0299da",
        "parentId" : "cb9b6cce-35dd-4c3b-9e0e-aceeca9f2fda",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Each ES2015 module has to go into its own file, which is exactly the opposite of what we're trying to do here. However, _I think_ we can use proper `const`s and nested objects for the value level and `declare namspace` for the type level to achieve what we want. Let's try that in a separate PR though.",
        "createdAt" : "2020-03-11T10:07:10Z",
        "updatedAt" : "2020-03-11T12:08:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d48ad79f-713e-478f-97f4-db477b9f4204",
        "parentId" : "cb9b6cce-35dd-4c3b-9e0e-aceeca9f2fda",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, I didn’t think of the type-level stuff so I thought a simple object would be sufficient.",
        "createdAt" : "2020-03-11T16:40:02Z",
        "updatedAt" : "2020-03-11T16:40:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "13e89ec71941cba02bae6952b66d10827cea0610",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +613,617 @@          ]\n        go indent var (m : parts) = let ws = spaces indent in\n          [ ws <> \"/* eslint-disable @typescript-eslint/no-namespace */\"\n          , ws <> \"export namespace \" <> m <> \" {\"\n          ] <>"
  },
  {
    "id" : "498003c2-324e-4b4f-8497-960e816f7ec6",
    "prId" : 4926,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c68ccc3-fa1d-4664-873d-83d7060dd30f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I find the inlined pretty printing quite hard to read. Do we actually need this? Maybe leave it out for now and replace it by a proper pretty printing library at some point?",
        "createdAt" : "2020-03-11T07:44:23Z",
        "updatedAt" : "2020-03-11T12:08:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "13e89ec71941cba02bae6952b66d10827cea0610",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +616,620 @@          , ws <> \"export namespace \" <> m <> \" {\"\n          ] <>\n          go (indent + 2) var parts <>\n          [ ws <> \"}\" ]\n        go _ _ [] = []"
  },
  {
    "id" : "4ba0a8e6-7ee2-4cfa-8edc-045b5d2e6656",
    "prId" : 4908,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26ada464-db0c-4322-8b20-cac993f69c76",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What’s the point of including the `@` here? Can a scope ever not contain an `@`? My understanding was that the `@` sign is not part of the scope name but just syntax to differentiate the scope from the name. So it seems more sensible to not include it here.",
        "createdAt" : "2020-03-09T19:04:44Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b65fca99-2050-431c-973b-6da82e161bb1",
        "parentId" : "26ada464-db0c-4322-8b20-cac993f69c76",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "@cocreature in https://github.com/digital-asset/daml/pull/4818#discussion_r388145444, @hurryabit indicated that he'd prefer to see the '@'. i'm easy on this point.",
        "createdAt" : "2020-03-09T19:15:55Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "0c54e2d3-a5e7-4266-ba70-dad7a56766b9",
        "parentId" : "26ada464-db0c-4322-8b20-cac993f69c76",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "That was about the internals not the UX for the CLI argument afaict. Either way, if @hurryabit prefers this I don’t feel too strongly about this.",
        "createdAt" : "2020-03-09T19:18:17Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "138f2da8-92fb-4313-989c-6cc314f081f8",
        "parentId" : "26ada464-db0c-4322-8b20-cac993f69c76",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "As @cocreature said, I preferred it for the internals. If we required our users to pass the `@` to the CLI argument, we also need to check that they actually do it, which we currently don't. That said, I prefer if our would not need to pass in the `@` symbol but just `daml.js`.",
        "createdAt" : "2020-03-11T09:48:29Z",
        "updatedAt" : "2020-03-11T09:48:29Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a3b87b41-6bdd-4ff9-966c-49ed04bcd2a4",
        "parentId" : "26ada464-db0c-4322-8b20-cac993f69c76",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4939",
        "createdAt" : "2020-03-11T13:24:43Z",
        "updatedAt" : "2020-03-11T13:24:43Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cfd59b9df6a3b375874b3c10ce37b23477f8af0",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +101,105 @@        (  short 's'\n        <> metavar \"SCOPE\"\n        <> value \"@daml.js\"\n        <> help \"The NPM scope name for the generated packages; defaults to @daml.js\"\n        ))"
  },
  {
    "id" : "c2b7b9d6-7cb8-4487-a986-dd0e99a07c48",
    "prId" : 4908,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa8ec933-ca8d-48d4-818e-be67f6210983",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It looks like this is the root not the leaf. Am I missing something?",
        "createdAt" : "2020-03-09T19:12:28Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e3a97a8a-0ec0-4d6a-92e4-c2b23a3fa4f9",
        "parentId" : "fa8ec933-ca8d-48d4-818e-be67f6210983",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "No it's the leaf. We take the filename of `/some/long/path/to/here` giving 'here'.",
        "createdAt" : "2020-03-09T19:18:04Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "4f0cc7f9-7614-4a2f-b03d-c3ff582d73ef",
        "parentId" : "fa8ec933-ca8d-48d4-818e-be67f6210983",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Wow. Is it really spelled `optOuputDir` in the code? Better fix that :)\r\n",
        "createdAt" : "2020-03-09T19:18:54Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "24a7e533-33f1-4fbb-80dd-db64529c360a",
        "parentId" : "fa8ec933-ca8d-48d4-818e-be67f6210983",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Fixed.",
        "createdAt" : "2020-03-09T19:20:04Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "39c1b26c-9875-4338-9baf-9035a0a8c242",
        "parentId" : "fa8ec933-ca8d-48d4-818e-be67f6210983",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "oh i see, I misread the code. Thanks for the explanation!",
        "createdAt" : "2020-03-09T19:20:06Z",
        "updatedAt" : "2020-03-09T19:46:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cfd59b9df6a3b375874b3c10ce37b23477f8af0",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +668,672 @@        -- Topologically order our packages.\n      outBaseDir = T.pack $ takeFileName optOutputDir\n        -- The leaf directory of the output directory (e.g. often 'daml2ts').\n  let ourWorkspaces = map ((outBaseDir <> \"/\") <>) ps\n  bytes <- BSL.readFile file"
  },
  {
    "id" : "36f2bf9d-c9d6-4e5c-9266-73b5eb4d4c65",
    "prId" : 4887,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "584be2b3-b621-4873-ba9f-5e675d597c53",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do we really need to mark this a `T.Text`? Isn't `\"es5\"` just fine? That will give us a `String` and the right thing.\r\n```suggestion\r\n        [ \"target\" .= \"es5\"\r\n```\r\nSame in many places below.",
        "createdAt" : "2020-03-09T10:43:27Z",
        "updatedAt" : "2020-03-09T12:13:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f654e51e-75e2-4b30-bcca-fdc80b146409",
        "parentId" : "584be2b3-b621-4873-ba9f-5e675d597c53",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "It really needs to be marked as Text.",
        "createdAt" : "2020-03-09T11:01:56Z",
        "updatedAt" : "2020-03-09T12:13:49Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "0438e0bc-7980-4dcb-8ed5-6dd9dffdd216",
        "parentId" : "584be2b3-b621-4873-ba9f-5e675d597c53",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Ah right, because we have `OverloadedStrings` turned on to be able to get `Text` literals. 😦",
        "createdAt" : "2020-03-09T12:02:30Z",
        "updatedAt" : "2020-03-09T12:13:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "671273b87d011dd24ccc205355b414e47eec088f",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +572,576 @@    tsConfig = object\n      [ \"compilerOptions\" .= object\n        [ \"target\" .= (\"es5\" :: T.Text)\n        , \"lib\" .= ([\"dom\", \"es2015\"] :: [T.Text])\n        , \"strict\" .= True"
  },
  {
    "id" : "81b0b09a-b56a-4c2e-9961-2ef63b4823dc",
    "prId" : 4887,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1aa8b24-0f31-497b-a7d5-47a3db99c07f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Good idea to make it explicit! Very fancy though. 😃\r\n\r\n",
        "createdAt" : "2020-03-09T11:54:56Z",
        "updatedAt" : "2020-03-09T12:13:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "671273b87d011dd24ccc205355b414e47eec088f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +64,68 @@newtype NpmPackageName = NpmPackageName {unNpmPackageName :: T.Text}\n  deriving stock (Eq, Show)\n  deriving newtype (Hashable, FromJSON, ToJSON, ToJSONKey)\nnewtype NpmPackageVersion = NpmPackageVersion {unNpmPackageVersion :: T.Text}\n  deriving stock (Eq, Show)"
  },
  {
    "id" : "a251e7eb-c524-40f4-bafa-53795d303e47",
    "prId" : 4858,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31816dd3-fa4f-45cf-84a8-85c8fec68b89",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't understand why returning this text here is better than what we had before. Could you please shed some light on this?",
        "createdAt" : "2020-03-05T22:08:20Z",
        "updatedAt" : "2020-03-05T22:21:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "91f4b63b-c72e-42a4-b1d1-01f9603a2b7b",
        "parentId" : "31816dd3-fa4f-45cf-84a8-85c8fec68b89",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I'm struggling now to find the reference (update : https://github.com/digital-asset/daml/pull/4818#discussion_r388146306) but at the end of the day it is so that we can write this:\r\n```\r\n  let (g, nodeFromVertex) = graphFromEdges'\r\n        (map (\\(a, ds) -> (a, a, map undependency ds)) dependencies)\r\n```\r\nIn that call to `graphFromEdges'` either everything needs to be strings or everything needs to be `Text`. Switching to `Text` makes sense because dependencies are naturally text:\r\n```\r\n        depends = [ Dependency $ pkgRefStr pkgMap pkgRef\r\n                  | (pkgRef, _) <- modRefs refs, pkgRef /= PRSelf ]\r\n```\r\nPackage names are naturally text:\r\n```\r\npackageNameText :: PackageId -> Maybe PackageName -> T.Text\r\npackageNameText pkgId mbPkgIdent = maybe (unPackageId pkgId) unPackageName mbPkgIdent\r\n```\r\nSo with this formulation there are no calls to `T.pack`, `T.unpack`.",
        "createdAt" : "2020-03-05T22:13:56Z",
        "updatedAt" : "2020-03-05T22:27:51Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "8d00930c-83e3-4a57-aaa6-4bb489f71f4c",
        "parentId" : "31816dd3-fa4f-45cf-84a8-85c8fec68b89",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What I meant is that before this change we computed the value of the `pkgName` we're returning hat at the call site of `daml2ts`, i.e., in line 126 above. Now, we compute it twice, there and in the `where` clause below.",
        "createdAt" : "2020-03-06T09:32:48Z",
        "updatedAt" : "2020-03-06T09:32:53Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d6c59934-f236-4139-a533-17e7970be512",
        "parentId" : "31816dd3-fa4f-45cf-84a8-85c8fec68b89",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Oh I see. Yes you are right. Well spotted. I'll eliminate the redundancy.",
        "createdAt" : "2020-03-06T11:29:49Z",
        "updatedAt" : "2020-03-06T11:29:50Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec2e540da0e90de0063b280ce57f1a4a794bf3a9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +152,156 @@\n-- Write the files for a single package.\ndaml2ts :: Daml2TsParams -> IO (T.Text, [Dependency])\ndaml2ts Daml2TsParams {..} = do\n    let Options {..} = opts"
  },
  {
    "id" : "269953f0-085d-4819-8c25-d5e00602955e",
    "prId" : 4852,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "128177ae-2a32-4d7d-b2d0-9a4c0a6c8255",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    sdkVersionOrErr <- DATypes.parseVersion . T.pack . fromMaybe \"0.0.0\" <$> getSdkVersionMaybe\r\n```\r\nI find the name `version` bit too generic given that its pretty much the same as `sdkVersion` below.",
        "createdAt" : "2020-03-05T22:13:35Z",
        "updatedAt" : "2020-03-05T22:14:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1773cbef-83e6-4ad7-b2e2-8962aa890f4c",
        "parentId" : "128177ae-2a32-4d7d-b2d0-9a4c0a6c8255",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4861",
        "createdAt" : "2020-03-06T01:16:50Z",
        "updatedAt" : "2020-03-06T01:16:51Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "1af3f577028e08b742a81ae3abbd42d04f4f41b3",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +112,116 @@main = do\n    opts@Options{..} <- execParser optionsParserInfo\n    version <- DATypes.parseVersion . T.pack . fromMaybe \"0.0.0\" <$> getSdkVersionMaybe\n    sdkVersion <- case version of\n          Left _ -> fail \"Invalid SDK version\""
  },
  {
    "id" : "b61bfbce-52a2-4253-8cfd-09d4d4508d1d",
    "prId" : 4818,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I found it easier to understand with the leading `@`. Here and below.",
        "createdAt" : "2020-03-05T08:40:08Z",
        "updatedAt" : "2020-03-05T12:00:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "a29dfeed-18df-4bcf-9004-8bc306c436b2",
        "parentId" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I like it too but understand why the presence of `fromJust . stripPrefix` causes a maintainer to be concerned.",
        "createdAt" : "2020-03-05T11:41:48Z",
        "updatedAt" : "2020-03-05T12:00:20Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "3ac24613-c20c-4927-b4a3-8c470d27868d",
        "parentId" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes sense. Thanks for the explanation.\r\n\r\nIt could help if the comment explained very briefly that the scope `foo` is the `@foo` in a package name.",
        "createdAt" : "2020-03-05T12:15:03Z",
        "updatedAt" : "2020-03-05T12:15:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "acd2e359-3b89-4028-a94a-07a27919873a",
        "parentId" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-05T14:01:16Z",
        "updatedAt" : "2020-03-05T14:01:16Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "4d8c9f6f-241a-44c4-81c8-aeae52ddb8f8",
        "parentId" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "This comment is going into https://github.com/digital-asset/daml/pull/4837. When `scope` becomes a command line argument, I'll be sure to move the comment along with it.",
        "createdAt" : "2020-03-05T14:04:16Z",
        "updatedAt" : "2020-03-05T14:04:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "9815f533-6f24-463e-a714-1fc8bcc572c1",
        "parentId" : "e238c0f4-b083-4135-8a81-86c56c2fa857",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "This went back to the way we want it in https://github.com/digital-asset/daml/pull/4908 (making scope an optional command line argument).",
        "createdAt" : "2020-03-09T16:08:34Z",
        "updatedAt" : "2020-03-09T16:08:35Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "00d45cb44007659545cda3a4ccf31a12b4c88fbe",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +146,150 @@newtype Dependency = Dependency {undependency :: T.Text}  deriving (Eq, Ord)\n\n-- Gives the scope 'foo' given a directory path like '/path/to/foo'.\nscopeOfScopeDir :: FilePath -> Scope\nscopeOfScopeDir = Scope . takeFileName"
  },
  {
    "id" : "9665207f-6913-4dbd-a54a-f1b43f6ff236",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d056d1d4-5edb-412b-bbff-4e3b57922e9d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Let’s leave it for a separate PR but the `stripPrefix` stuff here looks similar to the other `stripPrefix` stuff. Rather than stripping it here, it shouldn’t be added in the first place.",
        "createdAt" : "2020-03-04T19:09:01Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1cd43666-0a8b-4311-8bb7-ced50d691788",
        "parentId" : "d056d1d4-5edb-412b-bbff-4e3b57922e9d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "i'll work on a follow up for this today.",
        "createdAt" : "2020-03-04T19:22:26Z",
        "updatedAt" : "2020-03-04T19:22:27Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "f0abeb5b-9442-4b80-bbba-d3c7fa3da070",
        "parentId" : "d056d1d4-5edb-412b-bbff-4e3b57922e9d",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4818",
        "createdAt" : "2020-03-04T21:04:27Z",
        "updatedAt" : "2020-03-04T21:04:28Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 485,
    "diffHunk" : "@@ -1,1 +652,656 @@      ps = map (fst3 . nodeFromVertex) $ reverse (topSort g)\n        -- Topologically order our packages.\n      ldr = fromJust (stripPrefix \"@\" (unscope (scopeOfScopeDir optOutputDir)))\n        -- 'ldr' we expect to be something like \"daml2ts/\".\n  let ourPackages = map (T.pack . ((ldr ++ \"/\") ++)) ps"
  },
  {
    "id" : "0eca5392-77f8-4f90-b9b2-285cc0f759f8",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441ec023-8e53-4944-a983-500c09e314ef",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This looks somewhat dangerous. You are throwing away every field apart from the two you modify. Additional fields should probably stay intact. Let’s tackle that in a separate PR.",
        "createdAt" : "2020-03-04T19:10:14Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "608770ec-b0fc-420e-a3e7-9f9d0ff5f87b",
        "parentId" : "441ec023-8e53-4944-a983-500c09e314ef",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "sounds good. yes, i am a newbie with this library and would like to learn how to better here in this respect.",
        "createdAt" : "2020-03-04T19:15:03Z",
        "updatedAt" : "2020-03-04T19:19:03Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "092419d5-28b5-4fa1-aba1-3dddbb851e2c",
        "parentId" : "441ec023-8e53-4944-a983-500c09e314ef",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "@hurryabit addresses this (along with other niggles) in https://github.com/digital-asset/daml/pull/4820.",
        "createdAt" : "2020-03-05T00:22:41Z",
        "updatedAt" : "2020-03-05T00:22:42Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "b917fa21-06da-4275-b54e-0969086c3c4f",
        "parentId" : "441ec023-8e53-4944-a983-500c09e314ef",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "This is fixed in https://github.com/digital-asset/daml/pull/4820.",
        "createdAt" : "2020-03-05T00:24:27Z",
        "updatedAt" : "2020-03-05T00:24:28Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 492,
    "diffHunk" : "@@ -1,1 +659,663 @@    (fail $ \"Error decoding JSON from '\" <> file <> \"'\")\n    (transformAndWrite ourPackages ldr)\n    (decode bytes :: Maybe PackageJson)\n  where\n    transformAndWrite :: [T.Text] -> String -> PackageJson -> IO ()"
  },
  {
    "id" : "81d93bf5-4fe7-4b7d-a871-b59625a4acac",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5adb99-0057-465d-baf5-97f1a6d4e55f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The number of parameters to this function is slowly getting out of hands. Can we please change it to a single record in a follow-up PR.",
        "createdAt" : "2020-03-04T19:26:18Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8eaf487e-d1f2-40a7-942c-5d58501233c3",
        "parentId" : "0f5adb99-0057-465d-baf5-97f1a6d4e55f",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Yes, will do.",
        "createdAt" : "2020-03-04T21:15:23Z",
        "updatedAt" : "2020-03-04T21:15:24Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "3239e379-a276-43ca-bf28-f3fef6d0cfa7",
        "parentId" : "0f5adb99-0057-465d-baf5-97f1a6d4e55f",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4852",
        "createdAt" : "2020-03-05T15:44:21Z",
        "updatedAt" : "2020-03-05T15:44:21Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +133,137 @@                     asName = if name == id then \"itself\" else name\n                 putStrLn $ \"Generating \" <> id <> \" as \" <> asName\n                 deps <- daml2ts opts pm pkgId pkg mbPkgName damlTypesVersion packageVersion\n                 pure (name, name, deps)\n        whenJust optInputPackageJson $"
  },
  {
    "id" : "03d6906c-1df7-4cee-b779-32ef2c706a4e",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ebfdb21-a6df-4cd0-b59a-1a55362867b8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Does it make sense to return the same thing twice?",
        "createdAt" : "2020-03-04T19:26:29Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "f43b139b-aec0-4549-a497-725d0ce9ff65",
        "parentId" : "2ebfdb21-a6df-4cd0-b59a-1a55362867b8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "It's setting up the call to `Graph.topSort` that requires the tuples in roughly that format. It is possible to not do this here and return `(name, deps)` and do the \"dup\" at the call site to `topSort`. I'll put in the PR with the parameter pack enhancement of the comment above.",
        "createdAt" : "2020-03-04T21:16:48Z",
        "updatedAt" : "2020-03-04T21:16:49Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "858f61fc-8006-404f-b309-54197cb052d9",
        "parentId" : "2ebfdb21-a6df-4cd0-b59a-1a55362867b8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "✔️ ",
        "createdAt" : "2020-03-05T15:15:27Z",
        "updatedAt" : "2020-03-05T15:15:27Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "e428667b-6ba0-485e-9c27-edb981379220",
        "parentId" : "2ebfdb21-a6df-4cd0-b59a-1a55362867b8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4847",
        "createdAt" : "2020-03-05T15:23:27Z",
        "updatedAt" : "2020-03-05T15:23:28Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +134,138 @@                 putStrLn $ \"Generating \" <> id <> \" as \" <> asName\n                 deps <- daml2ts opts pm pkgId pkg mbPkgName damlTypesVersion packageVersion\n                 pure (name, name, deps)\n        whenJust optInputPackageJson $\n          writeTopLevelPackageJson optOutputDir dependencies"
  },
  {
    "id" : "14bc63a3-4728-4e83-96e9-fd0b03f69322",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "522bda62-32d0-47df-92a1-dd52ed4436fd",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We should make the scope configurable via a command line argument rather than infer it from some path. I suggest we use `@daml.js` as the default for that argument.",
        "createdAt" : "2020-03-04T19:29:30Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8d555b0d-c9d8-4c8b-a0f2-668140b63b42",
        "parentId" : "522bda62-32d0-47df-92a1-dd52ed4436fd",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:17:16Z",
        "updatedAt" : "2020-03-04T21:17:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "a4495389-6ba9-451b-bab6-7412a9a2a861",
        "parentId" : "522bda62-32d0-47df-92a1-dd52ed4436fd",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4908",
        "createdAt" : "2020-03-09T16:00:52Z",
        "updatedAt" : "2020-03-09T16:00:53Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +146,150 @@\n-- Gives the scope '@foo' given a directory path like '/path/to/foo'.\nscopeOfScopeDir :: FilePath -> Scope\nscopeOfScopeDir = Scope . (\"@\" <>) . takeFileName\n"
  },
  {
    "id" : "be6e2fdf-cc2c-4825-8a14-f6fd5d454bfd",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d973710-5f5b-48c9-ab58-5696617bc98f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n          --   import * as pkgd14e08_DA_Internal_Template from '@daml2ts/d14e08/lib/DA/Internal/Template';\r\n```",
        "createdAt" : "2020-03-04T19:30:57Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "7ef2bf75-db06-4a2b-bde6-4a0add3ddff4",
        "parentId" : "1d973710-5f5b-48c9-ab58-5696617bc98f",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I have a PR here https://github.com/digital-asset/daml/pull/4818 with other cosmetic changes. I'll add this to that.",
        "createdAt" : "2020-03-04T21:18:05Z",
        "updatedAt" : "2020-03-04T21:18:05Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +171,175 @@          -- The scope e.g. '@daml2ts'.\n          -- We use this, for example, when generating import declarations e.g.\n          --   'import * as pkgd14e08_DA_Internal_Template from @daml2ts/d14e08/lib/DA/Internal/Template';'\n    createDirectoryIfMissing True packageSrcDir\n    -- Write .ts files for the package and harvest references to"
  },
  {
    "id" : "6083549f-83b3-4672-8334-eff0e3c5c9e6",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab1d7785-63f0-4945-b089-16be504993f7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That comment should probably go a few lines deeper. There are no references to be harvested from `packageId.ts`.",
        "createdAt" : "2020-03-04T19:32:09Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cedc127c-794f-4c93-850c-4a44f60ee8bf",
        "parentId" : "ab1d7785-63f0-4945-b089-16be504993f7",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:19:20Z",
        "updatedAt" : "2020-03-04T21:19:21Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "94c0b93d-aeb8-4619-9242-e1df0ef99d53",
        "parentId" : "ab1d7785-63f0-4945-b089-16be504993f7",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4858",
        "createdAt" : "2020-03-05T18:07:12Z",
        "updatedAt" : "2020-03-05T18:07:12Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +173,177 @@          --   'import * as pkgd14e08_DA_Internal_Template from @daml2ts/d14e08/lib/DA/Internal/Template';'\n    createDirectoryIfMissing True packageSrcDir\n    -- Write .ts files for the package and harvest references to\n    -- foreign packages as we do.\n    T.writeFileUtf8 (packageSrcDir </> \"packageId.ts\") $ T.unlines"
  },
  {
    "id" : "5e083fd5-7329-4c23-835a-d7a242136242",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03807a71-43d6-427f-a695-ec0ed4cf7599",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'd suggest to write the `packageId.ts` file here, together with the other \"meta data\".",
        "createdAt" : "2020-03-04T19:34:04Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "338b3f4e-a5d4-4901-bd4e-f7bc666b0b00",
        "parentId" : "03807a71-43d6-427f-a695-ec0ed4cf7599",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:19:43Z",
        "updatedAt" : "2020-03-04T21:19:43Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "5d6e11e5-9fbe-4d86-9c2c-a0744ddb7600",
        "parentId" : "03807a71-43d6-427f-a695-ec0ed4cf7599",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4858",
        "createdAt" : "2020-03-05T18:07:17Z",
        "updatedAt" : "2020-03-05T18:07:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +180,184 @@    -- Now write 'package.json', 'tsconfig.json' and '.eslint.rc.json'\n    -- files into the package dir. The 'package.json' needs the\n    -- dependencies.\n    writeTsConfig packageDir\n    writeEsLintConfig packageDir"
  },
  {
    "id" : "d334a334-6d7d-41eb-b09f-21ee7e408308",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72d17fb2-78e9-45ca-9793-bd95130498c2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "You seem to love the `maybe` function. I'd say a simple `case ... of` is almost always easier to read when the function you pass as the second argument is a syntactic lambda.",
        "createdAt" : "2020-03-04T19:35:22Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fa673a8b-b51b-4716-b629-502f777acf97",
        "parentId" : "72d17fb2-78e9-45ca-9793-bd95130498c2",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok. You want it changed in this instance?",
        "createdAt" : "2020-03-04T21:20:49Z",
        "updatedAt" : "2020-03-04T21:20:49Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "0d5fcf92-f179-4360-927d-db8d85f12dbd",
        "parentId" : "72d17fb2-78e9-45ca-9793-bd95130498c2",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Preferably yes. I like easy to read code.",
        "createdAt" : "2020-03-05T00:23:35Z",
        "updatedAt" : "2020-03-05T00:23:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8a34fbab-4f36-42cc-be9f-4a6d87ec67e0",
        "parentId" : "72d17fb2-78e9-45ca-9793-bd95130498c2",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "✔️ ",
        "createdAt" : "2020-03-05T13:47:37Z",
        "updatedAt" : "2020-03-05T13:47:38Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +189,193 @@      writeModuleTs :: FilePath -> Scope -> Module -> IO [Dependency]\n      writeModuleTs packageSrcDir scope mod = do\n         maybe (pure [])\n           (\\(modTxt, ds) -> do\n             let outputFile = packageSrcDir </> joinPath (map T.unpack (unModuleName (moduleName mod))) FP.<.> \"ts\""
  },
  {
    "id" : "f6105b0a-142c-41b2-96a0-59b3f05bf8e7",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4024e805-70bb-4406-861b-11da2bad6dae",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "IMO, the only point of `maybe` is to allow for point-free style:\r\n```suggestion\r\n        (T.pack . packageNameStr pkgId . fst)\r\n```\r\nI still prefer a `case ... of` expression though. It would cover the same number of lines and be easier to read.",
        "createdAt" : "2020-03-04T19:39:54Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c1bb3ba2-314f-40fa-b919-f0dc2baf7754",
        "parentId" : "4024e805-70bb-4406-861b-11da2bad6dae",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "What you've written there is nice. Sorry I missed that. Given your comments about my use of maybes in general here I guess I'll eschew it though in favor of a case.",
        "createdAt" : "2020-03-04T21:22:07Z",
        "updatedAt" : "2020-03-04T21:22:08Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "7722b821-7f4c-4b35-9ad5-1bb948aa6549",
        "parentId" : "4024e805-70bb-4406-861b-11da2bad6dae",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "✔️ ",
        "createdAt" : "2020-03-05T13:48:09Z",
        "updatedAt" : "2020-03-05T13:48:09Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 286,
    "diffHunk" : "@@ -1,1 +241,245 @@      PRImport pkgId ->\n        maybe (error \"IMPOSSIBLE : package map malformed\")\n        (\\(mbPkgName, _) -> T.pack $ packageNameStr pkgId mbPkgName)\n        (Map.lookup pkgId pm)\n"
  },
  {
    "id" : "eb77c1f3-4fde-49a4-985e-4b8263ec2723",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "436e851c-d2e9-473e-bfd6-3e3603d1fbec",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Renamings like this in such a big PR make the PR even harder to review. 😓 ",
        "createdAt" : "2020-03-04T19:42:00Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dc397849-8072-4b6a-bc4a-2adb4584def0",
        "parentId" : "436e851c-d2e9-473e-bfd6-3e3603d1fbec",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok. I'm sorry.",
        "createdAt" : "2020-03-04T21:23:18Z",
        "updatedAt" : "2020-03-04T21:23:18Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +453,457 @@  where\n    go = \\case\n        TVar v -> dupe (unTypeVarName v)\n        TUnit -> (\"{}\", \"daml.Unit\")\n        TBool -> (\"boolean\", \"daml.Bool\")"
  },
  {
    "id" : "6d41bee5-ea2c-419d-9edd-001304124da8",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a71a70be-76f0-4871-81a5-9b65404c55f9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That's indented too deep:\r\n```suggestion\r\n    , \"  },\"\r\n```",
        "createdAt" : "2020-03-04T19:42:45Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "227b45a6-9a52-4c40-bbc7-6eb30e788b5d",
        "parentId" : "a71a70be-76f0-4871-81a5-9b65404c55f9",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Noted. Will fix.",
        "createdAt" : "2020-03-04T21:23:31Z",
        "updatedAt" : "2020-03-04T21:23:31Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "27fa0a97-4910-44cd-b764-a2d850c85d26",
        "parentId" : "a71a70be-76f0-4871-81a5-9b65404c55f9",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Fixed in https://github.com/digital-asset/daml/pull/4818.",
        "createdAt" : "2020-03-04T21:37:00Z",
        "updatedAt" : "2020-03-04T21:37:01Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 385,
    "diffHunk" : "@@ -1,1 +552,556 @@    , \"    \\\"declaration\\\": true,\"\n    , \"    \\\"sourceMap\\\": true\"\n    , \"    },\"\n    , \"  \\\"include\\\": [\\\"src/**/*.ts\\\"],\"\n    , \"}\""
  },
  {
    "id" : "9b7a23e6-546c-4f75-81e6-5c26de7bb82b",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f600831-2e40-4f41-9429-7f9e520f00c3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It's not clear to me that this is the right thing to do. For now, I would leave the `license` field out until we have a better idea.",
        "createdAt" : "2020-03-04T19:44:00Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "4ae117e9-00fa-4dde-bde5-4950cc342802",
        "parentId" : "7f600831-2e40-4f41-9429-7f9e520f00c3",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:23:49Z",
        "updatedAt" : "2020-03-04T21:23:49Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 421,
    "diffHunk" : "@@ -1,1 +588,592 @@   , \"  \\\"version\\\": \\\"\" <> packageVersion <> \"\\\",\"\n   , \"  \\\"description\\\": \\\"Produced by daml2ts\\\",\"\n   , \"  \\\"license\\\": \\\"Apache-2.0\\\",\"\n   , \"  \\\"dependencies\\\": {\"\n   , \"    \\\"@daml/types\\\": \\\"\" <> damlTypesVersion <> \"\\\",\""
  },
  {
    "id" : "6146ae57-dfd7-4a50-b1a0-4ea2e146171e",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "780da23d-59e9-4122-82a7-363b65382ff6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We need to make these version numbers easier configurable. I suggest to put constants somewhere close to the top of the file.",
        "createdAt" : "2020-03-04T19:44:53Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0f1a164d-9237-43bf-9959-26a399c276ca",
        "parentId" : "780da23d-59e9-4122-82a7-363b65382ff6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:24:01Z",
        "updatedAt" : "2020-03-04T21:24:02Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "3f565013-d1f0-4af7-bd12-66582c0bf8b7",
        "parentId" : "780da23d-59e9-4122-82a7-363b65382ff6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4878",
        "createdAt" : "2020-03-06T14:10:31Z",
        "updatedAt" : "2020-03-06T14:10:31Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 432,
    "diffHunk" : "@@ -1,1 +599,603 @@    , \"  },\"\n    , \"  \\\"devDependencies\\\": {\"\n    , \"    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^2.11.0\\\",\"\n    , \"    \\\"@typescript-eslint/parser\\\": \\\"^2.11.0\\\",\"\n    , \"    \\\"eslint\\\": \\\"^6.7.2\\\",\""
  },
  {
    "id" : "ec1f889d-f982-453b-82e2-769659d20ad8",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a28bd8ef-d756-4021-bdd8-eef09439c890",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "If you put `json-type-validation` as the last dependency, you'd get out of the business of figuring out where the commas go and remove complexity.",
        "createdAt" : "2020-03-04T19:47:03Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d5bc6b05-39f1-464a-a2ab-373978abd072",
        "parentId" : "a28bd8ef-d756-4021-bdd8-eef09439c890",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Fair enough. Will fix.",
        "createdAt" : "2020-03-04T21:24:40Z",
        "updatedAt" : "2020-03-04T21:24:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "8134f126-91aa-47e2-838a-53d2bfa434c7",
        "parentId" : "a28bd8ef-d756-4021-bdd8-eef09439c890",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4859",
        "createdAt" : "2020-03-05T18:34:00Z",
        "updatedAt" : "2020-03-05T18:34:00Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 425,
    "diffHunk" : "@@ -1,1 +592,596 @@   , \"    \\\"@daml/types\\\": \\\"\" <> damlTypesVersion <> \"\\\",\"\n   , \"    \\\"@mojotech/json-type-validation\\\": \\\"^3.1.0\\\"\" ++ if not $ null dependencies then \", \" else \"\"\n   ] ++ dependencies ++\n    [\"  },\"\n    , \"  \\\"scripts\\\": {\""
  },
  {
    "id" : "320fc786-75ac-483a-a6ca-aeab33aef83f",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36b0dffb-8f2e-476b-8f83-47dd0be27ff6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I have no clue what `ldr` stands for. Can we please give this variable a more descriptive name?",
        "createdAt" : "2020-03-04T19:50:46Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e4cf694a-1705-4f23-9f33-309976be7ede",
        "parentId" : "36b0dffb-8f2e-476b-8f83-47dd0be27ff6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "\"Leader\". Yes.",
        "createdAt" : "2020-03-04T21:24:55Z",
        "updatedAt" : "2020-03-04T21:24:56Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "5227729d-432c-4ce5-a002-796a823a676d",
        "parentId" : "36b0dffb-8f2e-476b-8f83-47dd0be27ff6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Changed in https://github.com/digital-asset/daml/pull/4818 to `scope`.",
        "createdAt" : "2020-03-05T13:49:17Z",
        "updatedAt" : "2020-03-05T13:49:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 485,
    "diffHunk" : "@@ -1,1 +652,656 @@      ps = map (fst3 . nodeFromVertex) $ reverse (topSort g)\n        -- Topologically order our packages.\n      ldr = fromJust (stripPrefix \"@\" (unscope (scopeOfScopeDir optOutputDir)))\n        -- 'ldr' we expect to be something like \"daml2ts/\".\n  let ourPackages = map (T.pack . ((ldr ++ \"/\") ++)) ps"
  },
  {
    "id" : "8af2b9f0-c92e-4fec-8283-c1eaed0443b0",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c31e806-1dbd-4bbc-82a1-0330691622f4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Make `ldr` a `T.Text` and\r\n```suggestion\r\n            filter (not . T.isPrefixOf ldr) (workspace oldPackageJson)\r\n```",
        "createdAt" : "2020-03-04T19:54:21Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "081df32c-e2c5-4259-9142-0574ec30615d",
        "parentId" : "7c31e806-1dbd-4bbc-82a1-0330691622f4",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-03-04T21:25:23Z",
        "updatedAt" : "2020-03-04T21:25:24Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "afa2bb70-51d8-472a-853e-22bdebc7ee3d",
        "parentId" : "7c31e806-1dbd-4bbc-82a1-0330691622f4",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4859",
        "createdAt" : "2020-03-05T18:26:25Z",
        "updatedAt" : "2020-03-05T18:26:25Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 502,
    "diffHunk" : "@@ -1,1 +669,673 @@            | x <- [T.unpack y | y <- workspaces oldPackageJson]\n            , isNothing $ stripPrefix ldr x\n            ]\n      --  * Our packages need to come after 'daml-types' if it exists;\n      --  * Our packages need to come before any other existing packages."
  },
  {
    "id" : "351f4d29-2452-40a1-9cc3-77ec8486316b",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06996552-53c0-456d-a61a-eeb48fc37736",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why do you hate `case ... of` so much?",
        "createdAt" : "2020-03-04T19:55:23Z",
        "updatedAt" : "2020-03-04T19:56:00Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "bc02a399-67fb-4531-af43-8aab7d24146e",
        "parentId" : "06996552-53c0-456d-a61a-eeb48fc37736",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok, I got the message.",
        "createdAt" : "2020-03-04T21:26:10Z",
        "updatedAt" : "2020-03-04T21:42:41Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "c634861f-ee77-4eb9-8831-1a589f7caa72",
        "parentId" : "06996552-53c0-456d-a61a-eeb48fc37736",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "✔️ ",
        "createdAt" : "2020-03-05T13:51:23Z",
        "updatedAt" : "2020-03-05T13:51:24Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +672,676 @@      --  * Our packages need to come after 'daml-types' if it exists;\n      --  * Our packages need to come before any other existing packages.\n          allPackages = maybe\n            (ourPackages ++ keepPackages)\n            (\\(before, after) -> before ++ damlTypes ++ ourPackages ++ after)"
  },
  {
    "id" : "74892b16-e9fb-4511-99cd-c605e777a4ed",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42ef68a1-80ee-4166-9d9b-a55de4c6d3e1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We can remove the special case for `daml-types`, which is actually `@daml/types` once https://github.com/digital-asset/daml/pull/4820 has landed. The only reason why you would need this is when you don't get `@daml/types` from npmjs.com but rather have it somehow local, as we do in our tests. However, we can also use the `resolutions` field in the workspace `package.json` to point to our local version of `@daml/types`, as in https://github.com/digital-asset/daml/pull/4820.",
        "createdAt" : "2020-03-05T00:18:49Z",
        "updatedAt" : "2020-03-05T00:18:49Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "4628b584-9c55-45f7-a84a-8ecda2205f57",
        "parentId" : "42ef68a1-80ee-4166-9d9b-a55de4c6d3e1",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "In other words, the packages generated by `daml2ts` go first, everything else comes afterwards. This should simplify the code here quite a bit.",
        "createdAt" : "2020-03-05T00:20:05Z",
        "updatedAt" : "2020-03-05T00:20:05Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e45ef4ad-5651-424c-a98a-bee444127bb5",
        "parentId" : "42ef68a1-80ee-4166-9d9b-a55de4c6d3e1",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Yes, got it. Will implement.",
        "createdAt" : "2020-03-05T00:33:21Z",
        "updatedAt" : "2020-03-05T00:33:21Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "5fde15a0-f248-42f9-816b-98843b17a8ac",
        "parentId" : "42ef68a1-80ee-4166-9d9b-a55de4c6d3e1",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "https://github.com/digital-asset/daml/pull/4859",
        "createdAt" : "2020-03-05T18:24:16Z",
        "updatedAt" : "2020-03-05T18:24:17Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 503,
    "diffHunk" : "@@ -1,1 +670,674 @@            , isNothing $ stripPrefix ldr x\n            ]\n      --  * Our packages need to come after 'daml-types' if it exists;\n      --  * Our packages need to come before any other existing packages.\n          allPackages = maybe"
  },
  {
    "id" : "4bca3b74-8e75-4e1a-97d1-4e2a2f0ff9e1",
    "prId" : 4677,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02a27633-f144-487c-8a0a-c78c838d9fc6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why did you remove the `let`s? OCaml's `let x = ... in let y = ... in ...` is superior to Haskell's `let { x = ...; y = ... } in ...`, which is basically a huge footgun.",
        "createdAt" : "2020-02-24T19:16:57Z",
        "updatedAt" : "2020-02-24T19:17:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cae2164e-567b-4b56-b22d-1655b2559d6f",
        "parentId" : "02a27633-f144-487c-8a0a-c78c838d9fc6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "We had,\r\n```haskell\r\n  let x = ...\r\n  let y = ...\r\n  ...\r\n```\r\nin a monadic context. I replaced with,\r\n```haskell\r\nlet x = ...\r\n      y = ...\r\n      ...\r\n```\r\nas I believed it to be more idiomatic? You want I restore it?\r\n",
        "createdAt" : "2020-02-24T19:18:59Z",
        "updatedAt" : "2020-02-24T19:22:16Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "84441619-3fca-4c7f-afb2-3bd9700900ae",
        "parentId" : "02a27633-f144-487c-8a0a-c78c838d9fc6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Let me know if so and I'll do so in a follow up PR!",
        "createdAt" : "2020-02-24T19:28:08Z",
        "updatedAt" : "2020-02-24T19:28:09Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "63ba189b-66c1-443e-983b-478432e638a3",
        "parentId" : "02a27633-f144-487c-8a0a-c78c838d9fc6",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't know which one is more idiomatic. Let's go with the safer version then, i.e., the old version.",
        "createdAt" : "2020-02-25T13:01:51Z",
        "updatedAt" : "2020-02-25T13:01:52Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b9d969a823c3ba1d5837388aabcf5f3624625ee",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +93,97 @@        \\(pkgId, (mbPkgName, pkg)) -> do\n          let id = show $ unPackageId pkgId\n              name = maybe id (T.unpack . unPackageName) mbPkgName\n              asName = if name == id then \"itself\" else name\n          putStrLn $ \"Generating \" <> id <> \" as \" <> asName"
  },
  {
    "id" : "29e269f0-4249-4ff3-afdc-b8d4954049c5",
    "prId" : 4589,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d819ae0b-b900-46f3-83e8-8121201feddb",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I always get confused by nested folds and I think this is also sensitive to the order which is probably not intended: If I first see `a.dar` which has a dependency on `$pkgid1` and afterwards `b.dar` where the main dalf has `$pkgid1` I’m not going to pick up the name for `$pkgid1`. If I put `b.dar` first I will pick up the name. \r\n\r\nI would suggest to do this in two steps instead:\r\n\r\n1. Take a list of DARs and build up a list of `Map.Map PackageId ([String], Archive)`. This basically consist of a function `FilePath -> Map.Map PackageId ([String], Archive)` that you apply to each DAR and then throw something like `Map.unionsWith (\\(names1, archive), (names2, _) -> (names1 <> names2, archive)` at it to merge them (a bit more complex if you want to detect duplicate package names).\r\n2. Check for errors, if there are none iterate over the map and generate typescript.",
        "createdAt" : "2020-02-18T20:03:01Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a9d81e39-4d45-49af-b765-b8476af5c180",
        "parentId" : "d819ae0b-b900-46f3-83e8-8121201feddb",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "> I always get confused by nested folds and I think this is also sensitive to the order which is probably not intended: If I first see a.dar which has a dependency on $pkgid1 and afterwards b.dar where the main dalf has $pkgid1 I’m not going to pick up the name for $pkgid1. If I put b.dar first I will pick up the name.\r\n\r\nI'm not sure about that.\r\n\r\nIf you see `a.dar` and it depends on `$pkgid1`, then ts will be generated for `$pkgid1` (against its hash). If later you see `b.dar` where the main dalf has `$pkgid1`, it will generate again this time against its package name (unless the package name is missing in which case it won't regenerate).",
        "createdAt" : "2020-02-18T20:28:07Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "ab5d67cf-8ce8-4ef0-9a13-d06a518c7a4d",
        "parentId" : "d819ae0b-b900-46f3-83e8-8121201feddb",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, you will actually call `daml2ts` twice. That’s not what I would have expected. I would have expected that we always generate once per package id. If we can somehow infer a name for that package id we use it (assuming it’s unique, otherwise we error out). If there is no name we generate it without a name.",
        "createdAt" : "2020-02-18T20:48:04Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4dce520b-cb1f-46a0-b42b-06b0eb53567e",
        "parentId" : "d819ae0b-b900-46f3-83e8-8121201feddb",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Cool. I hear you. This might not be the end game but yes, the scheme implemented here in some cases ~will~ might result in some duplicated packages (1.a  of https://github.com/digital-asset/daml/issues/4585). Thanks for looking at that somewhat tricky logic Moritz!",
        "createdAt" : "2020-02-18T20:52:27Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "6f6c3911-e9d9-4297-af9f-fcd44a86ed50",
        "parentId" : "d819ae0b-b900-46f3-83e8-8121201feddb",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I could live with the duplicates for now but ultimately they'll have to go. What @cocreature describes would solve that problem _and_ most likely be easier to understand since it separates the conflict detection from the code generation.\r\n\r\nI would suggest to build an intermediate structure of type `Map PackageId (Archive, Maybe String)`, where the `Maybe String` part is an optional name for a package. If we see a second name, we can fail immediately. We can build this intermediate structure in one big `foldl'` over _all_ DALFs and their potential names.",
        "createdAt" : "2020-02-18T20:59:09Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfa57d959142aacb99b2e6fbc3d865de3c11999",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@main = do\n    opts@Options{..} <- execParser optionsParserInfo\n    foldM_ (processDar opts) Map.empty optInputDars\n      where\n        -- Generate the ts for a single DAR. 'processed' is a map of"
  },
  {
    "id" : "554d3c7d-3ae0-4faf-a1d9-74c072576fb1",
    "prId" : 4589,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "872d0801-ad6d-4811-b13e-6d8e08b267f6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It would be good to have a description of what it means for a `PackageId` to appear as a key of the map. And what it means for a `String` to be contained in the list of a specific `PackageId`.",
        "createdAt" : "2020-02-18T20:51:25Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fda8230f-de91-45ac-b8d1-2eb0cfc3601b",
        "parentId" : "872d0801-ad6d-4811-b13e-6d8e08b267f6",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok.",
        "createdAt" : "2020-02-18T21:42:26Z",
        "updatedAt" : "2020-02-18T22:09:01Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cfa57d959142aacb99b2e6fbc3d865de3c11999",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@        -- package ids of processed DALFs (the same package can appear\n        -- in multiple DARs - avoid regenerating them where possible).\n        processDar :: Options -> Map.Map PackageId [String] -> FilePath -> IO (Map.Map PackageId [String])\n        processDar opts pkgs dar = do\n          dar <- B.readFile dar"
  },
  {
    "id" : "52f241a1-e375-499e-9391-1afe84df5f80",
    "prId" : 4476,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b47e3c97-8005-4831-9afa-11b21d9ff796",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Whenever I see this pattern I wish Haskell's `let`s wouldn't be recursive by default. So sad. 😿",
        "createdAt" : "2020-02-11T20:53:07Z",
        "updatedAt" : "2020-02-11T20:53:17Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "470a305dbec7ef86ed9a3c742435fc7bcadb9638",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +60,64 @@    dalfs <- either fail pure $ DAR.readDalfs archive\n    DAR.DalfManifest{packageName, ..} <- either fail pure $ DAR.readDalfManifest archive\n    packageName <- pure $ optMainPackageName <|> packageName\n    forM_ ((DAR.mainDalf dalfs, packageName) : map (, Nothing) (DAR.dalfs dalfs)) $ \\(dalf, mbPkgName) -> do\n        (pkgId, pkg) <- either (fail . show)  pure $ Archive.decodeArchive Archive.DecodeAsMain (BSL.toStrict dalf)"
  },
  {
    "id" : "5db67ec9-dbe0-4f98-9164-5859ce338b2c",
    "prId" : 4186,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ef37fc-0c96-4538-bfa2-af808d9242c8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n                              [\"  export type Key = \" <> fst (genType (moduleName mod) (tplKeyType key))] ++\r\n```",
        "createdAt" : "2020-01-23T16:36:18Z",
        "updatedAt" : "2020-01-23T16:37:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba23e4fe614a08c3ef5ac8bf5a398e8e42e1d724",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +251,255 @@                              [ \"// eslint-disable-next-line @typescript-eslint/no-namespace\"\n                              , \"export namespace \" <> conName <> \" {\"] ++\n                              [\"  export type Key = \" <> fst (genType (moduleName mod) (tplKeyType key)) <> \"\"] ++\n                              [\"}\"]) (tplKey tpl)\n                        registrations ="
  },
  {
    "id" : "c3af9e81-1c00-4a8e-8054-16bacb251104",
    "prId" : 4047,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58c1502a-d7af-4f9a-b928-8e6f2297f1fa",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why?",
        "createdAt" : "2020-01-14T19:26:11Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "871a079b-e6bd-4d2e-b364-7b4ee6212216",
        "parentId" : "58c1502a-d7af-4f9a-b928-8e6f2297f1fa",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Probably a mistake. Let me check.",
        "createdAt" : "2020-01-14T19:53:25Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "a66d1672-99a5-4868-bd8f-b6af8e83e75d",
        "parentId" : "58c1502a-d7af-4f9a-b928-8e6f2297f1fa",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "No, not a mistake. We can't assume the result of `makeSer` is going to be in a context where a trailing `;` is right (the variant case has a usage where it's not - the alternative of course is do surgery on it with something like `replace`).\r\n```haskell\r\n  Corge: ({\r\n    decoder: () => jtv.object({\r\n      x: daml.Int.decoder(),\r\n      y: daml.Text.decoder(),\r\n    }),\r\n  });, -- <- here!\r\n```\r\n",
        "createdAt" : "2020-01-14T20:22:09Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "cbee9fd5-8a37-4966-b69c-ea7a4571a3f5",
        "parentId" : "58c1502a-d7af-4f9a-b928-8e6f2297f1fa",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That an explanation makes sense. Happy to change it then.",
        "createdAt" : "2020-01-14T20:25:57Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "b53294257221487f2c5abc0f6a00dce9cbe09c9b",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +268,272 @@            [\"export const \" <> conName <> serHeader <> \" ({\"] ++\n            map (\"  \" <>) (onHead (\"decoder: \" <>) serDesc) ++\n            [\"})\"]\n        makeNameSpace serDesc =\n            [ \"// eslint-disable-next-line @typescript-eslint/no-namespace\""
  },
  {
    "id" : "2518d5e9-d512-4fd0-9270-3f998e7e509c",
    "prId" : 4047,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fbfc054-ac04-4efe-a635-bae2dbd5a901",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "How does the first line look like? Can we modify it with `onHead` instead?",
        "createdAt" : "2020-01-14T19:30:09Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "22bb7a89-698f-459b-8dca-d68170448371",
        "parentId" : "6fbfc054-ac04-4efe-a635-bae2dbd5a901",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "I recall evaluating that and determining that it was easier to discard the line.",
        "createdAt" : "2020-01-14T20:44:25Z",
        "updatedAt" : "2020-01-14T21:12:06Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "b53294257221487f2c5abc0f6a00dce9cbe09c9b",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +157,161 @@                let\n                  assocNames = map fst assocDefDataTypes\n                  -- Any associated serializers, dropping the first line\n                  -- of each.\n                  assocSers = map (\\(n, d) -> (n, serFromDef (drop 1) n d)) assocDefDataTypes"
  },
  {
    "id" : "68e6bf8e-4823-4170-822e-5d392418a770",
    "prId" : 3895,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39a48de3-d4a2-4e8a-9fba-8a78c348b4af",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I suppose `rtyp` is the companion object (ie. `Serializable` dictionary) for the return type. I think I've used something like `rser` below. We should find a consistent naming scheme for these. Not necessarily in this PR but soon.",
        "createdAt" : "2019-12-20T10:26:50Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "4fa95a3f-36fa-4f9f-b88b-38e811e89d47",
        "parentId" : "39a48de3-d4a2-4e8a-9fba-8a78c348b4af",
        "authorId" : null,
        "body" : "Ok",
        "createdAt" : "2019-12-20T11:51:55Z",
        "updatedAt" : "2019-12-20T12:56:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a63d1a81485323a7fa5c1e1b7822721fa74377e8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +156,160 @@                Just tpl ->\n                    let (chcs, argRefs) = unzip\n                            [((unChoiceName (chcName chc), t, r, rtyp), argRefs)\n                            | chc <- NM.toList (tplChoices tpl)\n                            , let tLf = snd (chcArgBinder chc)"
  }
]