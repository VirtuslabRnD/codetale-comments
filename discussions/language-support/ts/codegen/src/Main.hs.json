[
  {
    "id" : "9474676a-f238-4446-8a8b-db4944d51e51",
    "prId" : 3689,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfda2363-cf59-4d71-a1de-381b6e5c105c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "imhoo this would be easier to read as something like\r\n```\r\n++ [\"\"] ++\r\nintercalate [\"\"] $ concatMap (\\(def, ser) -> def ++ ser) defSers\r\n```\r\nIt took me a while to spot why we add a list with an empty string to each definition.",
        "createdAt" : "2019-12-01T11:19:20Z",
        "updatedAt" : "2019-12-01T11:26:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "105008ac1708b448f467614f7fb1a3da9910207d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +100,104 @@        ,\"const templateId = (entityName: string): daml.TemplateId => ({packageId, moduleName, entityName});\"\n        ] ++\n        concatMap (\\(def, ser) -> [\"\"] ++ def ++ ser) defSers\n  where\n    serDefs = filter (getIsSerializable . dataSerializable) (NM.toList (moduleDataTypes mod))"
  },
  {
    "id" : "d2aaac7a-13d9-49f8-a42d-2d2b8cf1d29e",
    "prId" : 3689,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a915ba3-aaf9-4479-a1e4-2a8830615572",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Manually writing the code for detecting the references seems a bit repetitive and brittle since itâ€™s easy to forget to recurse somewhere. Is there a reason why we cannot throw some traversal at this that takes care of giving us all module references?",
        "createdAt" : "2019-12-01T11:24:05Z",
        "updatedAt" : "2019-12-01T11:26:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "105008ac1708b448f467614f7fb1a3da9910207d",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +173,177 @@  where\n    go = \\case\n        TVar v -> (dup (unTypeVarName v), Set.empty)\n        TUnit -> ((\"{}\", \"daml.Unit\"), Set.empty)\n        TBool -> ((\"boolean\", \"daml.Bool\"), Set.empty)"
  },
  {
    "id" : "b2de341f-c69a-43f6-92c5-1ee876f0724a",
    "prId" : 3441,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a020efa-27b3-4424-be12-dda0cb82b766",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Those relative imports make me sad :disappointed: ",
        "createdAt" : "2019-11-19T08:22:50Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "94eb8d88-951a-418f-bc4b-8c5fe5185efb",
        "parentId" : "1a020efa-27b3-4424-be12-dda0cb82b766",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That's apparently how JavaScript imports work. :|",
        "createdAt" : "2019-11-19T08:51:16Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "eff993c856bef39dda178c0b0ca7b3cc76f89f26",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@        ,\"import * as daml from '@digitalasset/daml-json-types';\"\n        ,\"import * as jtv from '@mojotech/json-type-validation';\"\n        ,\"import packageId from '\" <> pkgRootPath <> \"/packageId';\"\n        ] ++\n        [\"import * as \" <> modNameStr <> \" from '\" <> pkgRootPath <> \"/\" <> pkgRefStr <> T.intercalate \"/\" (unModuleName modName) <> \"';\""
  },
  {
    "id" : "ab9dbcbe-13b1-4b53-ac83-03a2dfceaa60",
    "prId" : 3441,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73879db5-c7cb-4cc8-9cfc-90835956a482",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why do we need to treat nested options specially?",
        "createdAt" : "2019-11-19T08:25:19Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9cc49496-307c-48f9-b7ca-43e11c91cee8",
        "parentId" : "73879db5-c7cb-4cc8-9cfc-90835956a482",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "They have a different encoding, see https://docs.daml.com/json-api/lf-value-specification.html#optional. I just realized I'm also off for record fields of type `Optional _`. It's tracked on #3518 now as well.",
        "createdAt" : "2019-11-19T08:57:23Z",
        "updatedAt" : "2019-11-19T15:10:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "eff993c856bef39dda178c0b0ca7b3cc76f89f26",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +187,191 @@            in\n            (t' <> \"[]\", \"daml.List(\" <> ser <> \")\")\n        TOptional (TOptional _) -> error \"TODO(MH): nested optionals\"\n        TOptional t ->\n            let (t', ser) = go t"
  }
]