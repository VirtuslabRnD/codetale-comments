[
  {
    "id" : "ecc77648-ead2-4421-a75c-66f3347c3053",
    "prId" : 8879,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f949a60-e604-47ad-8025-26f4945faf51",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "When will `dt` not be in `resolved.prior`? I was expecting that it would always be added after the call to `covariantVars`.",
        "createdAt" : "2021-03-15T09:42:31Z",
        "updatedAt" : "2021-03-17T16:06:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "57ef94b5-c1f4-4cc9-8375-73ded0a24404",
        "parentId" : "9f949a60-e604-47ad-8025-26f4945faf51",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Iff the type doesn't have any type variables that are referenced in its definition, it won't be in `prior`.",
        "createdAt" : "2021-03-15T16:20:03Z",
        "updatedAt" : "2021-03-17T16:06:45Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed9021ecbab33e285033409dd4f5bad011914d6",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +62,66 @@        resolved.prior.getOrElse(\n          dt,\n          ei.typeDecls.getOrElse(dt, sys.error(s\"$dt not found\")).`type`.typeVars map (_ =>\n            Covariant\n          ),"
  },
  {
    "id" : "ed42cc85-e067-4b83-b695-135688844c64",
    "prId" : 6469,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41104c04-b519-41d0-8d34-77750ee148af",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "ummmm... I guess it compiles and does the right thing :) but I have no idea what it does.",
        "createdAt" : "2020-06-24T20:35:55Z",
        "updatedAt" : "2020-06-24T20:35:55Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "15c9db06-b207-4116-bdc4-921c9ba15fd4",
        "parentId" : "41104c04-b519-41d0-8d34-77750ee148af",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Aliases have never been 100% well-cooked in Scala. 🤷‍♂️ ",
        "createdAt" : "2020-06-24T20:50:51Z",
        "updatedAt" : "2020-06-24T20:50:51Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e9f85e23ff1161af7fbc16f25932387c256b3ea",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +24,28 @@  private def foldMapGenTypes[Z: Monoid](typeDecl: DataType)(f: iface.Type => Z): Z = {\n    val notAGT = (s: String) => mzero[Z]\n    (typeDecl: ScopedDataType[iface.DataType[iface.Type, VariantField]])\n      .foldMap(_.bifoldMap(f)(_.bifoldMap(_ foldMap (_.bifoldMap(notAGT)(f)))(f)))\n  }"
  }
]