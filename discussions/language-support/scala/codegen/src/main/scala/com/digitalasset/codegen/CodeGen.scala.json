[
  {
    "id" : "ea3a4a84-c9aa-465f-bd42-d9ec27d59585",
    "prId" : 9997,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93d06fc4-d849-42fb-9484-375192d84f2f",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> I somewhat wonder if we should replace some/most uses of `\\/` with `Either`. It doesnâ€™t seem like we really use much of what scalaz provides here.\r\n\r\n@cocreature It depends on whether you agree with the underlying rationale of scalaz/scalaz#1469. The best illustration locally is this function, `produceTemplateAndTypeFilesLF`.\r\n\r\nAs a rule, the numerous variables in this function live in a tapestry of different subtypes of the goal type. Your `ntdRights` lives in a \"righty\" type and `tmplLefts` lives in a \"lefty\" type, for example. It is only later that we unify the types via covariance, and this proceeds through later in the file.\r\n\r\nSo if at any point you inspect the various variables, you will see that they exist not at the type we necessarily need them to be, but some subtype that happens to express how they were constructed. We know it works together because when we _unify_, it lazily works. However, unless you're familiar with how the goal relates to the components' types, if you change something upstream, the occurrence of the failure (at unification) bears less relationship to the part that actually needs to change. (I am speaking generally; I would hope at this point that Scala codegen's upstream will not change significantly. This is simply the most elaborate use of \"natural\" covariant unification I am aware of related to eithers in the daml codebase.)\r\n\r\nBy contrast, consider the situation with invariant `\\/`. The type ascriptions added here are sort of declarations of how each component variable needs to arrange itself to fit into the goal type. So we ascribe `specialPlans` as a declaration that its type may not merely exist in the subtype lattice; its plans must declaratively be `FilePlan`s, so to speak. If I do not do this, the resulting error is [mostly] apparent in how it points to `specialPlans`'s problematic [sub]type, so should such an upstream change occur, it is [mostly] apparent what part of the unification tree needs to change.\r\n\r\nSo it really boils down to whether you consider the additional explicitness useful scaffolding, or a distraction. Or, whether the magic of *variant unification is good magic or wicked magic. (There are additional issues related to higher-kinded types, but that isn't strictly relevant to what I've just described.)",
        "createdAt" : "2021-06-15T17:21:23Z",
        "updatedAt" : "2021-06-15T17:21:24Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "41debb6b-d9e9-40ad-b18d-bf066b4b3e55",
        "parentId" : "93d06fc4-d849-42fb-9484-375192d84f2f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "In this PR it feels more like noise to me. Maybe Iâ€™ve written Scala for so long that Iâ€™m starting to like subtyping :scream_cat: ",
        "createdAt" : "2021-06-15T17:33:54Z",
        "updatedAt" : "2021-06-15T17:33:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "17d5da70-30ea-414c-8f7f-9ffc6354e085",
        "parentId" : "93d06fc4-d849-42fb-9484-375192d84f2f",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It certainly felt like noise while working on the PR ðŸ˜† \r\n\r\nHowever, I also think I'm operating from the privileged position of updating unification code _that I happen to know already works_, which is a little different from trying to assemble new lattices.",
        "createdAt" : "2021-06-15T17:35:54Z",
        "updatedAt" : "2021-06-15T17:35:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3d79e6abc0e99faf1afcf63f8e6497059f626fc",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +249,253 @@\n    filePlans ++ specialPlans\n  }\n\n  private[this] def splitNTDs[RT, VT](definitions: List[ScopedDataType.DT[RT, VT]]): ("
  },
  {
    "id" : "54ee5db2-e6e5-4a61-81e3-a37ad94fa442",
    "prId" : 1833,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "912660c0-d817-4496-8470-c774a3d44ecf",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n      variants.traverseU {\r\n```",
        "createdAt" : "2019-06-24T13:01:10Z",
        "updatedAt" : "2019-06-26T17:21:52Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "0024f1caa606682717407339870b82441a5a448c",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +290,294 @@    // or Scala 2.13\n    val (deletedRecords, newVariants) =\n      variants.toList.traverseU {\n        case ScopedDataType(ident @ Identifier(packageId, qualName), vTypeVars, Variant(fields)) =>\n          val typeVarDelegate = Util simplyDelegates vTypeVars"
  }
]