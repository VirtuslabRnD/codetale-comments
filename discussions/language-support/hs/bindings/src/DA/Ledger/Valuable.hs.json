[
  {
    "id" : "b6e5c15f-aa78-4106-b19a-964b4e2fdb13",
    "prId" : 1865,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8502b7f-13f5-4150-8085-ba2d0f2843e4",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "IsLedgerValue?",
        "createdAt" : "2019-06-25T19:56:59Z",
        "updatedAt" : "2019-06-25T19:58:01Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "db47fb13-5f2a-4786-8f03-73e0a877542b",
        "parentId" : "f8502b7f-13f5-4150-8085-ba2d0f2843e4",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yes. Made this change",
        "createdAt" : "2019-06-26T09:28:58Z",
        "updatedAt" : "2019-06-26T09:28:58Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "083986803f9b3170c769c8f1a0c16e4556e24542",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4,8 @@{-# LANGUAGE OverloadedStrings #-}\n\nmodule DA.Ledger.Valuable( -- TODO: Better name!\n    Valuable(..), -- types which can be converted to/from a Ledger API Value\n    ) where"
  },
  {
    "id" : "50e4acbe-dc4d-4d3a-a306-47589e56b36c",
    "prId" : 1572,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66cbeac4-c657-4e42-90ac-0479c5183862",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I don't like the name Valuable, since it confuses \"can be converted to a value\" with \"has monetary value\", and in our domain, we often mean the latter. How about `IsValue`?",
        "createdAt" : "2019-06-10T13:25:08Z",
        "updatedAt" : "2019-06-10T13:25:24Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "59f5e07f-b0b4-4f64-b21b-599a384f796c",
        "parentId" : "66cbeac4-c657-4e42-90ac-0479c5183862",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yeah, I agree `Valuable` is a not-that funny pun. Couldn't think of a snappy name.\r\n`IsValue` is still a bit vague\r\nHow about `IsDamlValue` ?",
        "createdAt" : "2019-06-10T15:35:11Z",
        "updatedAt" : "2019-06-10T15:35:11Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "948bdc4b-1cb1-4dc0-9e03-de53a292e949",
        "parentId" : "66cbeac4-c657-4e42-90ac-0479c5183862",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Sure - better to be explicit than funny ðŸ˜º .",
        "createdAt" : "2019-06-10T17:27:40Z",
        "updatedAt" : "2019-06-10T17:28:22Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "66505802fdfef3cae7f19d041c1f552cc7a53963",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +11,15 @@import DA.Ledger.Types\n\nclass Valuable a where\n    toValue :: a -> Value\n    fromValue :: Value -> Maybe a"
  },
  {
    "id" : "c81465a7-198b-418b-9f52-8a55e96a9c7b",
    "prId" : 1342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9384e5b1-91f7-4059-894d-9992986a7e8e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It would be better to label the fields of `RecordField` and use the selector here.",
        "createdAt" : "2019-05-24T12:47:23Z",
        "updatedAt" : "2019-05-24T12:47:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3824a772-d296-4da1-8ebb-bed59d4ac758",
        "parentId" : "9384e5b1-91f7-4059-894d-9992986a7e8e",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "The fields of `RecordValue` are labelled. As seen by the use of curly braces in the fragment:\r\n`map (\\RecordField{value} -> value)`\r\nI guess you think `map field` would be nicer.\r\nTrouble is that `value` is used as a field name in multiple data records.\r\nSo this change is ambiguous.\r\nBut we can fix this by changing to a more specific label. `fieldValue` ",
        "createdAt" : "2019-05-24T15:42:08Z",
        "updatedAt" : "2019-05-24T15:42:08Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "1a026aa4-f03b-4dc4-91ff-f65a5be72d4e",
        "parentId" : "9384e5b1-91f7-4059-894d-9992986a7e8e",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Aside, do you find it slightly confusing that we are discussing Haskell record/field syntax\r\nin an example which is modelling DAML records/fields ? :)",
        "createdAt" : "2019-05-24T15:43:25Z",
        "updatedAt" : "2019-05-24T15:43:25Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@        fromValue\n        . VList\n        . map (\\RecordField{value} -> value)\n        . fields\n"
  },
  {
    "id" : "a255c61d-11b0-41e9-814c-9db3e5a2951d",
    "prId" : 1342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d0e2d6c-2018-49a7-92ec-9fad99ea60d2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I find this hard to read. I'd have written something straightforward like\r\n```haskell\r\nfromValue = \\case\r\n  VList vs -> mapM fromValue vs\r\n  _ -> Nothing\r\n```\r\nI must admit, I'm not the biggest fan of the point free style in many cases.",
        "createdAt" : "2019-05-24T12:50:02Z",
        "updatedAt" : "2019-05-24T12:50:14Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "efcbf81d-d9de-40e1-9d16-3d9c3e892fa6",
        "parentId" : "8d0e2d6c-2018-49a7-92ec-9fad99ea60d2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "That's funny. Because I only introduced the =<< in response to a suggestion from HLint.\r\nI also am not a big fan of point free in many cases.\r\nAlthough I do find myself shifting in that direction:  Haskell infection perhaps? :)",
        "createdAt" : "2019-05-24T13:12:18Z",
        "updatedAt" : "2019-05-24T13:12:19Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "e934ff2b-05fb-44b5-ad17-a858cb4da255",
        "parentId" : "8d0e2d6c-2018-49a7-92ec-9fad99ea60d2",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I originally wrote:\r\n`fromValue = join . fmap (mapM fromValue) . (\\case VList vs -> Just vs; _ -> Nothing)`\r\nbefore HLint's suggestion. But clearly your suggestion is the simplest/best.",
        "createdAt" : "2019-05-24T15:16:26Z",
        "updatedAt" : "2019-05-24T15:16:26Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "594bc3c2-2089-4273-8167-a63547480d71",
        "parentId" : "8d0e2d6c-2018-49a7-92ec-9fad99ea60d2",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I think HLint's suggestion makes your version better - a combo of join/fmap is very confusing, but it's still not as clear as Martin's.",
        "createdAt" : "2019-05-25T08:00:20Z",
        "updatedAt" : "2019-05-25T08:00:21Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@instance Valuable a => Valuable [a] where\n    toValue = VList . map toValue\n    fromValue = (mapM fromValue =<<) . \\case VList vs -> Just vs; _ -> Nothing"
  }
]