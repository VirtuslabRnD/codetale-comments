[
  {
    "id" : "17bb905f-0706-4aba-95b5-4d26a216fa06",
    "prId" : 8125,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c0b683-3aa9-486b-9a88-67c91e008637",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Note that this means the Haskell bindings are not backwards compatible in the sense that they don’t work against older ledgers. This is fine since we don’t use command submisions in `daml ledger` but for example that would be an issue in party allocation since that is used in `daml ledger`.",
        "createdAt" : "2020-12-03T15:22:59Z",
        "updatedAt" : "2020-12-07T12:08:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1c3063a8-fa8d-416d-9311-d37328611311",
        "parentId" : "25c0b683-3aa9-486b-9a88-67c91e008637",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "> This is fine since we don’t use command submissions\r\n\r\nThis means I can keep the change as is, right? I you want, I could do something like putting the head of the `actAs` list in the `party` field, and the tail in the `act_as` field.",
        "createdAt" : "2020-12-03T22:43:23Z",
        "updatedAt" : "2020-12-07T12:08:16Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "70fa1132b1abb62c9cfc7e7de931ddb95c3bc770",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +71,75 @@        commandsApplicationId = unApplicationId aid,\n        commandsCommandId = unCommandId cid,\n        commandsParty = \"\", -- deprecated in favor of actAs\n        commandsActAs = Vector.fromList $ map unParty actAs,\n        commandsReadAs = Vector.fromList $ map unParty readAs,"
  },
  {
    "id" : "e6c80c67-4c95-4729-9f81-ab9d4bd314d8",
    "prId" : 2440,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What happens if the string has more than 10 digits after the period?",
        "createdAt" : "2019-08-07T10:56:02Z",
        "updatedAt" : "2019-08-07T10:56:43Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d9729442-77d9-440d-8ce0-737114ccee63",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I imagine it will fail.\r\nWhat does the Ledger API guarantee?",
        "createdAt" : "2019-08-07T11:05:37Z",
        "updatedAt" : "2019-08-07T11:05:38Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "288aa0be-577e-4d15-be33-2b4b75817ac9",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Failing would be good, swallowing digits or rounding would be slightly scary. The current Ledger API never gives you more than 10 digits but this might change in the future. Crashing loudly if it does would be nice.",
        "createdAt" : "2019-08-07T11:39:57Z",
        "updatedAt" : "2019-08-07T11:39:57Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1afad912-37dc-4d18-84bd-cfc9264e7d62",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I did some experiments: -- `read \"123.11223344556677\"`\r\nTurns out that it does silently swallow digits! --> `123.1122334455`\r\nBut it seems this is consistent with Haskell's overall approach to fixed width decimals..\r\nFor example, writing `VDecimal 123.11223344556677`, and so invoking the fractional instance, performs the exact same truncation.",
        "createdAt" : "2019-08-08T07:35:04Z",
        "updatedAt" : "2019-08-08T07:35:04Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "ddf55a72-c0e7-4fe6-b5a0-3b49c3f6a933",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t think being consistent with Haskell’s default approach is useful in any way here. Throwing an error is a much better option.",
        "createdAt" : "2019-08-08T07:48:46Z",
        "updatedAt" : "2019-08-08T07:48:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f3dd5e9f-f5ce-4797-96a1-c5a01435588b",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I wasn't suggesting it was, I was just reporting what I discovered.",
        "createdAt" : "2019-08-08T08:00:51Z",
        "updatedAt" : "2019-08-08T08:00:52Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "6d3869dd-0548-423d-b882-34e96c9f6b6c",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I tried coded something which for any `a` with `Read a` and `Show a` which checks round-tripability: \r\n```\r\nreadCheckRoundTrip :: (Read a,Show a) => String -> a\r\nreadCheckRoundTrip s = if s /= s' then error msg else a\r\n  where\r\n      a = read s\r\n      s' = show a\r\n      msg = \"read does not round-trip correctly: [\" <> s <> \"] --> [\" <> s' <> \"]\"\r\n```\r\n\r\nbut is not right when there are multiple `String` reps for the same `a`, i.e. trailing `0`s when printing a fixed width number.\r\n\r\nSo perhaps we should avoid coding what surely must be a solved problem...\r\n\r\nDo you know if there is any standard support for `Fixed`  which allows checking if `read` is *safe*, i.e. does not loose precision?\r\n",
        "createdAt" : "2019-08-08T08:39:09Z",
        "updatedAt" : "2019-08-08T08:39:09Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "1693d8b1-b29f-4432-b1dd-8b3aada80c58",
        "parentId" : "1f743d75-f5ce-490b-8c2f-9ec81d0c6361",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Sadly, I don’t know of any package that provides this :disappointed: ",
        "createdAt" : "2019-08-08T09:10:38Z",
        "updatedAt" : "2019-08-08T09:10:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "eabad75dbc08b599fb34c3aa1143453e577fd92b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +356,360 @@        LL.ValueSumList vs -> (fmap VList . raiseList raiseValue . LL.listElements) vs\n        LL.ValueSumInt64 i -> (return . VInt . fromIntegral) i\n        LL.ValueSumDecimal t -> (return . VDecimal . read . Text.unpack) t\n        LL.ValueSumText t -> (return . VText) t\n        LL.ValueSumTimestamp x -> (return . VTime . MicroSecondsSinceEpoch . fromIntegral) x"
  },
  {
    "id" : "fc72d0cd-6e93-40dd-b700-4808d2e2983b",
    "prId" : 2368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bbd80d4-7ec8-4186-97e8-38f3ddc7252b",
        "parentId" : null,
        "authorId" : null,
        "body" : "```suggestion\r\n        collapseErrors = either (Left . ThrewException) id\r\n```",
        "createdAt" : "2019-08-01T12:36:34Z",
        "updatedAt" : "2019-08-01T12:37:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c8df9aeb-2e3d-4b18-b405-422bca2379d6",
        "parentId" : "7bbd80d4-7ec8-4186-97e8-38f3ddc7252b",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done, thanks",
        "createdAt" : "2019-08-05T15:36:43Z",
        "updatedAt" : "2019-08-05T15:36:44Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +177,181 @@    where\n        collapseErrors :: Either SomeException (Perhaps a) -> Perhaps a\n        collapseErrors =  either (Left . ThrewException) id\n\n"
  },
  {
    "id" : "b3a7fef1-1952-4c2e-a31a-486622f70a61",
    "prId" : 2368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "227ca50c-cf26-4d3e-8b8c-73b382df17c1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n    VVariant v -> LL.ValueSumVariant (lowerVariant v)\r\n```",
        "createdAt" : "2019-08-05T11:29:14Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +118,122 @@lowerValue = LL.Value . Just . \\case\n    VRecord r -> (LL.ValueSumRecord . lowerRecord) r\n    VVariant v -> (LL.ValueSumVariant . lowerVariant) v\n    VContract c -> (LL.ValueSumContractId . unContractId) c\n    VList vs -> (LL.ValueSumList . LL.List . Vector.fromList . map lowerValue) vs"
  },
  {
    "id" : "07165620-28e1-4d1e-b2e9-69c99190d341",
    "prId" : 2368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ad30b28-2533-457d-8b6c-1a84886375ec",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "FYI, the idiom we use in (most of) our code base is like:\r\n```suggestion\r\n    VTime x -> LL.ValueSumTimestamp $ fromIntegral $ unMicroSecondsSinceEpoch x\r\n```",
        "createdAt" : "2019-08-05T11:30:45Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +124,128 @@    VDecimal t -> LL.ValueSumDecimal t\n    VText t -> LL.ValueSumText t\n    VTime x -> (LL.ValueSumTimestamp . fromIntegral . unMicroSecondsSinceEpoch) x\n    VParty p -> (LL.ValueSumParty . unParty) p\n    VBool b -> LL.ValueSumBool b"
  },
  {
    "id" : "b17b2996-3b63-4615-8ec2-b6beaa421cb5",
    "prId" : 2368,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43bb1c85-2058-41bf-be17-117b5225bfd1",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n        LL.ValueSumVariant v -> VVariant <$> raiseVariant v\r\n```",
        "createdAt" : "2019-08-05T11:38:28Z",
        "updatedAt" : "2019-08-05T11:51:20Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f819135b9015a28811f8fa4cb7540952ddb7a3c7",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +350,354 @@    LL.Value (Just sum) -> case sum of\n        LL.ValueSumRecord r -> (fmap VRecord . raiseRecord) r\n        LL.ValueSumVariant v -> (fmap VVariant . raiseVariant) v\n        LL.ValueSumEnum e -> (fmap VEnum . raiseEnum) e\n        LL.ValueSumContractId c -> (return . VContract . ContractId) c"
  },
  {
    "id" : "7904ff81-9022-4bcf-b356-a978dd92e4e0",
    "prId" : 2321,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b750c934-217a-4e56-b507-5b7e11ebb339",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I find this incredibly hard to read because it's not clear what variables go into `Completion{..}` and which don't. I only know that both `cid` and `status` must go into the record construction since they would be unused otherwise but I'm usually too slow (or too lazy) to run the check for unused variables in my head.\r\n```suggestion\r\n         return Completion{cid, status}\r\n```\r\nThis might look like I'm contradicting myself but I don't. I can live with record wildcards in _pattern matching_ but I think they are almost always a mistake in record construction.",
        "createdAt" : "2019-07-30T07:15:22Z",
        "updatedAt" : "2019-07-30T07:20:02Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "81758fe1-2901-49b7-9cfa-fb15c7a96021",
        "parentId" : "b750c934-217a-4e56-b507-5b7e11ebb339",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I'm not really sure I understand the reasoning why one is ok and one is bad...\r\nBut I don't really care that much.\r\nI'll change them all back again in another PR.",
        "createdAt" : "2019-07-30T08:23:08Z",
        "updatedAt" : "2019-07-30T08:23:09Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "44669fdb-a985-4128-9fdd-3b0c9c693a24",
        "parentId" : "b750c934-217a-4e56-b507-5b7e11ebb339",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a big fan of record wildcards in pattern matching but I can live with them. They implicitly bring names into scope, which is less than optimal. However, if a see a name that has not been brought into scope explicitly and there's a pattern match with a record wildcard, I can at least assume that's where the name is coming from.\r\nIf I see a record construction using a record wildcard, the only way I can figure out what actually going into that construction is to go and look at the type definition. That is something I can hardly live with.\r\nDoes that explanation make at least some sense?",
        "createdAt" : "2019-07-30T12:02:58Z",
        "updatedAt" : "2019-07-30T12:02:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2db8aa702af32ed66d9fd525a174268d6fb0f2",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +211,215 @@        cid <- raiseCommandId completionCommandId\n        let status = completionStatus\n        return Completion{..}\n\nraiseCheckpoint :: LL.Checkpoint -> Perhaps Checkpoint"
  },
  {
    "id" : "b09507a1-ff53-4098-805e-cbbd6e0379b4",
    "prId" : 2067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb84e7c-2ebf-48a6-a115-38cdc4bedcff",
        "parentId" : null,
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This is an unrelated bug fix",
        "createdAt" : "2019-07-09T12:43:29Z",
        "updatedAt" : "2019-07-09T12:43:29Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "db14f1a6e0a6eb3965e0abef2a70c66c0b63aece",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +245,249 @@        cid <- raiseContractId exercisedEventContractId\n        tid <- perhaps \"exercisedEventTemplateId\" exercisedEventTemplateId >>= raiseTemplateId\n        ccEid <- raiseEventId exercisedEventContractCreatingEventId\n        choice <- raiseChoice exercisedEventChoice\n        choiceArg <- perhaps \"exercisedEventChoiceArgument\" exercisedEventChoiceArgument >>= raiseValue"
  },
  {
    "id" : "2b6301c8-4f6f-4763-a8cb-f65c048581d4",
    "prId" : 2067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78295abd-36fd-4258-9afb-825a397385a4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "There's no need for a `case` expression here. The pattern can just come after the function name. Record wild cards might also help to make this a bit less verbose.",
        "createdAt" : "2019-07-15T11:34:44Z",
        "updatedAt" : "2019-07-15T11:36:11Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0edb2a84-86a6-4cb9-a0c1-fb5b99820396",
        "parentId" : "78295abd-36fd-4258-9afb-825a397385a4",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Are we really happy with the use of `{..}` ?\r\nThe way it implicitly brings unknown names into scope seems rather scary.",
        "createdAt" : "2019-07-15T13:01:53Z",
        "updatedAt" : "2019-07-15T13:01:53Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "09419e10-a451-45f7-9eb0-ee2d9b336493",
        "parentId" : "78295abd-36fd-4258-9afb-825a397385a4",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not the biggest fan of `{..}` either but we have plenty of it in our code base already. Instead of\r\n```\r\nf C{x, y} = x+y\r\n```\r\nor\r\n```\r\nf C{..} = x+y\r\n```\r\nI usually prefer\r\n```\r\nf x = x c + y c\r\n```\r\nThat avoids the `{..}` and repeating the names at the same time.",
        "createdAt" : "2019-07-15T15:40:48Z",
        "updatedAt" : "2019-07-15T15:40:48Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "db14f1a6e0a6eb3965e0abef2a70c66c0b63aece",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +163,167 @@\nraiseGetActiveContractsResponse :: LL.GetActiveContractsResponse -> Perhaps (AbsOffset,Maybe WorkflowId,[Event])\nraiseGetActiveContractsResponse = \\case\n    LL.GetActiveContractsResponse{getActiveContractsResponseOffset,\n                                  getActiveContractsResponseWorkflowId,"
  },
  {
    "id" : "f234aca6-b6a8-4f4b-887b-acc121ae3d85",
    "prId" : 2029,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b58254b8-f378-403c-8d8c-a2cb63401348",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not sure extracting this to a separate function is helpful. The logic is simple and short so inlining it might be better than introducing an uncommon abstraction.",
        "createdAt" : "2019-07-05T15:53:01Z",
        "updatedAt" : "2019-07-05T16:14:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "28c7fd7b-1b78-48e7-a38a-945e48eabba3",
        "parentId" : "b58254b8-f378-403c-8d8c-a2cb63401348",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok",
        "createdAt" : "2019-07-08T09:49:23Z",
        "updatedAt" : "2019-07-08T09:49:23Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec9c9d014032efd981e4522a47dfb769819d7c4a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +37,41 @@-- lower\n\nlowerList :: (a -> b) -> [a] -> Vector b\nlowerList lowerElem xs = Vector.fromList $ map lowerElem xs\n"
  },
  {
    "id" : "4906f18e-4b44-4b2f-bd91-2551b61a566c",
    "prId" : 2029,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f6cee50-82b3-4c9a-bdb6-eb88770070d7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This might be clearer if you generalize this a bit:\r\n```haskell\r\nraiseMap\r\n    :: forall f k k' v v'. (Monad f, Ord k')\r\n    => (k -> f k')\r\n    -> (v -> f v')\r\n    -> Map k v\r\n    -> f (Map k' v')\r\nraiseMap raiseK raiseV = fmap Map.fromList . mapM (uncurry raiseKV) . Map.toList\r\n    where raiseKV :: k -> v -> f (k', v')\r\n          raiseKV kLow vLow = (,) <$> raiseK kLow <*> raiseV vLow\r\n```\r\nYou can move the handling of the `Maybe` part into `raiseV`.",
        "createdAt" : "2019-07-05T16:06:33Z",
        "updatedAt" : "2019-07-05T16:14:46Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c52d8399-5731-44a9-97e2-98527515397d",
        "parentId" : "0f6cee50-82b3-4c9a-bdb6-eb88770070d7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "The `Maybe` is important for this abstraction, because it corresponds to the type attributed by `grpc-haskell`  to protobuf Maps. And so the caller line is simply this: \r\n```\r\nevents <- raiseMap raiseEventId raiseTreeEvent transactionTreeEventsById\r\n```\r\n\r\nKeeping the `Maybe` means generalisaion to `Monad f` is not directly possible, because the code as written includes `missing \"mapElem\"`, and `missing` is specific to the `Perhaps` monad.\r\n\r\nBut in any case I don't think generalising to an arbitrary monad here would be particularly helpful to the reader. This whole file is about `lower`ing and `raise`ing types, and all the `raise` functions operate in the `Perhaps` monad.",
        "createdAt" : "2019-07-08T10:08:24Z",
        "updatedAt" : "2019-07-08T10:08:24Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "1e2128e4-d811-49ed-9e7a-a25e2c036e7d",
        "parentId" : "0f6cee50-82b3-4c9a-bdb6-eb88770070d7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I see, you could still generalize while keeping `Maybe` if you let the caller pass in a handler for the `Nothing` case but that’s probably not worth it. Would be nice to capture the fact that `Maybe` comes from `grpc-haskell` in a comment. That said, I would at least generalize the key type. If I see a type that is not polymorphic, I expect that there is a reason for it but here you aren’t making use of the fact that it is `Text`.",
        "createdAt" : "2019-07-08T10:15:11Z",
        "updatedAt" : "2019-07-08T10:15:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "bcf20c9d-17a8-4d4f-aee7-a109763621ed",
        "parentId" : "0f6cee50-82b3-4c9a-bdb6-eb88770070d7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I will generalize from `Text` to any key type. And add a comment about the `Maybe` :)",
        "createdAt" : "2019-07-08T10:46:46Z",
        "updatedAt" : "2019-07-08T10:46:46Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec9c9d014032efd981e4522a47dfb769819d7c4a",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +382,386 @@              x:xs -> do y <- f x; ys <- loop xs; return $ y:ys\n\nraiseMap :: forall a b c. Ord a =>\n                (Text -> Perhaps a) -> (b -> Perhaps c) -> Map Text (Maybe b) -> Perhaps (Map a c)\nraiseMap raiseK raiseV = fmap Map.fromList . mapM raiseKV . Map.toList"
  },
  {
    "id" : "c4eac01a-e6cb-4675-b760-cf0683713407",
    "prId" : 1342,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fb980ea-5931-480b-b14d-0e167e438ab5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "A more idiomatic way to write this is\r\n```haskell\r\nfmap VRecord (raiseRecord r)\r\n```\r\nor\r\n```haskell\r\nfmap VRecord $ raiseRecord r\r\n````\r\nor in this special case\r\n```haskell\r\nVRecord <$> raiseRecord r\r\n```\r\n@neil-da Should we add an hlint rule for the first suggestion?",
        "createdAt" : "2019-05-24T12:44:30Z",
        "updatedAt" : "2019-05-24T12:44:30Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "2cf868f3-c0b0-47d6-900d-42a52b0ac70a",
        "parentId" : "9fb980ea-5931-480b-b14d-0e167e438ab5",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Are you saying that the fragment `(f . g) x` is not idomatic? And `f (g x)` or `f $ g x` is better?",
        "createdAt" : "2019-05-24T15:18:30Z",
        "updatedAt" : "2019-05-24T15:18:30Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "9a31a735-593f-4685-ab90-621196d392ba",
        "parentId" : "9fb980ea-5931-480b-b14d-0e167e438ab5",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Yes, that is what I meant.",
        "createdAt" : "2019-05-24T16:06:55Z",
        "updatedAt" : "2019-05-24T16:06:56Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "dbce32a6-028a-4b74-b59e-b62bd253d8b1",
        "parentId" : "9fb980ea-5931-480b-b14d-0e167e438ab5",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "https://github.com/ndmitchell/hlint/issues/644",
        "createdAt" : "2019-05-25T09:02:53Z",
        "updatedAt" : "2019-05-25T09:02:53Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b47e2ac0d39770b24721e1dcd04ee7bb4eed8269",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +183,187 @@    LL.Value Nothing -> missing \"Value\"\n    LL.Value (Just sum) -> case sum of\n        LL.ValueSumRecord r -> (fmap VRecord . raiseRecord) r\n        LL.ValueSumVariant _ -> undefined\n        LL.ValueSumContractId c -> (return . VContract . ContractId) c"
  },
  {
    "id" : "1fe01963-efcd-4d78-88e6-ede7226e2898",
    "prId" : 879,
    "prUrl" : "https://github.com/digital-asset/daml/pull/879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5894f6f6-4224-4e12-baf9-4ba7a1d7d562",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "I just write undefined - you're also not finished if undefined exists in your code...",
        "createdAt" : "2019-05-03T10:19:47Z",
        "updatedAt" : "2019-05-03T10:20:18Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8115afd41b7797436684816ff474f2ce0f10f185",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@import           DA.Ledger.Types\n\nxxx :: a -- TODO: not finished while any instances of \"xxx\" of \"_\" remain in this file\nxxx = undefined\n"
  }
]