[
  {
    "id" : "e68a69e0-8243-491d-8de0-36a64c6358b1",
    "prId" : 2261,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d23e6b9-b876-4075-aa3d-69907cab6634",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Might be worth considering to prefix these field names. `size` seems a bit too generic (yes, Haskell records suck).",
        "createdAt" : "2019-07-23T10:54:58Z",
        "updatedAt" : "2019-07-23T10:55:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5c7dd7d4-ec13-419e-9730-10993ce21804",
        "parentId" : "3d23e6b9-b876-4075-aa3d-69907cab6634",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "These short names correspond to the style adopted in:\r\n\r\nhttps://github.com/digital-asset/daml/blob/master/language-support/hs/bindings/src/DA/Ledger/Types.hs\r\n\r\nwhere it was an active decision to not uniquify field names, and instead use  `{-# LANGUAGE DuplicateRecordFields #-}` where necessary.\r\n\r\nSo far I am happy with this choice, but you may well disagree :)\r\n",
        "createdAt" : "2019-07-23T12:26:25Z",
        "updatedAt" : "2019-07-23T12:26:26Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +20,24 @@data PackageDetails = PackageDetails\n    { pid :: PackageId\n    , size :: Int\n    , knownSince :: Timestamp\n    , sourceDescription :: Text"
  },
  {
    "id" : "c53a89b3-f292-497f-a41f-7e10a053f14d",
    "prId" : 2261,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a9c80c1-558a-41b8-aa54-b532f07a5bd7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n        let rpc = LL.packageManagementServiceListKnownPackages service\r\n```\r\nI'll keep suggesting this until you tell me a reason why it's bad. :)",
        "createdAt" : "2019-07-23T12:31:49Z",
        "updatedAt" : "2019-07-23T12:34:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "fdbe3092-3d15-4d63-bf47-ee8ff09420bc",
        "parentId" : "5a9c80c1-558a-41b8-aa54-b532f07a5bd7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Well... its clearly just a small matter of style.\r\nBut since the paint colour of this particular bike shed has been questioned, I will have to reply :)\r\n\r\nI prefer to focus here on the record values themselves rather than the record selector functions.\r\nThis makes it clear that `service` is a package of related RPCs, of which we only use one.\r\nBy using the functional selector style, it's not obvious the value is even a record.\r\n\r\nIt's related to how I don't normally like to use `fst` and prefer pattern matching to access elems.\r\n ",
        "createdAt" : "2019-07-23T13:05:48Z",
        "updatedAt" : "2019-07-23T13:05:48Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "682f9447-7791-4192-b7d3-327cd47c42a1",
        "parentId" : "5a9c80c1-558a-41b8-aa54-b532f07a5bd7",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I agree that it's a matter of taste. We only have this discussion because Haskell's record system sucks so much. When I see code like `let Foo x y = foo` I instinctively wonder what happens if `foo` is a `Bar ...`? Oh, there's is no `Bar ...` case. And then I'm annoyed again I have to write or read the `Foo` constructor even though it doesn't carry too much useful information. Damn Haskell records.\r\nEven though I disagree with your particular choice of style, I'll stop bothering you about since it is indeed bike shedding.",
        "createdAt" : "2019-07-23T13:16:32Z",
        "updatedAt" : "2019-07-23T13:16:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "c0c98d82-d321-4263-b16f-b18a0d2b43fb",
        "parentId" : "5a9c80c1-558a-41b8-aa54-b532f07a5bd7",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Thank you.\r\n\r\n> When I see code like `let Foo x y = foo` I instinctively wonder what happens if `foo` is a `Bar`\r\n\r\nwe get a static error\r\n```\r\n    Pattern match(es) are non-exhaustive\r\n    In a pattern binding: Patterns not matched: (Bar _)\r\n```\r\n\r\nI think the issues with Haskell's record system stem from it taking a primary view that the fields are selector-functions, rather than record pattern match syntax (aka ML style)",
        "createdAt" : "2019-07-23T13:32:48Z",
        "updatedAt" : "2019-07-23T13:33:04Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +30,34 @@    withGRPCClient config $ \\client -> do\n        service <- LL.packageManagementServiceClient client\n        let LL.PackageManagementService {packageManagementServiceListKnownPackages=rpc} = service\n        let request = LL.ListKnownPackagesRequest\n        rpc (ClientNormalRequest request timeout emptyMdm)"
  },
  {
    "id" : "d8aadaa4-b5c8-4ca3-a915-588e1a194c8d",
    "prId" : 2261,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43091e92-5d24-4353-aa4d-995d94e6bdf3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nraiseResponse = raiseList raisePackageDetails . LL.listKnownPackagesResponsePackageDetails\r\n```\r\nand remove the next two lines.",
        "createdAt" : "2019-07-23T12:33:56Z",
        "updatedAt" : "2019-07-23T12:34:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "14a28963-f7e9-44d7-9be3-49896bc52122",
        "parentId" : "43091e92-5d24-4353-aa4d-995d94e6bdf3",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I prefer to have all the conversion code (most of it it is `Convert.hs`) to follow a common style.\r\nI like the `\\case` syntax, because it's the same whether the types have 1 or more variant.\r\nI don't see anything is gained by using a different syntax for the case of 1-variant",
        "createdAt" : "2019-07-23T13:09:18Z",
        "updatedAt" : "2019-07-23T13:09:18Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e04f55acf35ac9065ac1bb318f00d64fe53ba3f",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +40,44 @@\nraiseResponse ::  LL.ListKnownPackagesResponse -> Perhaps [PackageDetails]\nraiseResponse = \\case\n    LL.ListKnownPackagesResponse{..} ->\n        raiseList raisePackageDetails listKnownPackagesResponsePackageDetails"
  },
  {
    "id" : "3eb218b4-2b46-4ae1-a160-1c90678e9549",
    "prId" : 2146,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faed855b-bc5c-4535-9a06-2745d0b4e44d",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we get a haddock comment here that explains when you will get back `Left`?",
        "createdAt" : "2019-07-15T12:54:37Z",
        "updatedAt" : "2019-07-15T13:23:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0ca91d93-3674-4f33-b8aa-e70e3a14c068",
        "parentId" : "faed855b-bc5c-4535-9a06-2745d0b4e44d",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok",
        "createdAt" : "2019-07-15T13:18:19Z",
        "updatedAt" : "2019-07-15T13:23:34Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "450a3ef00b954086e6def746c020486ccfc9de1a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@\n-- | Upload a DAR file to the ledger. If the ledger responds with `INVALID_ARGUMENT`, we return `Left details`.\nuploadDarFile :: ByteString -> LedgerService (Either String ()) -- Unlike other services, no LedgerId is needed. (why?!)\nuploadDarFile bytes =\n    makeLedgerService $ \\timeout config ->"
  }
]