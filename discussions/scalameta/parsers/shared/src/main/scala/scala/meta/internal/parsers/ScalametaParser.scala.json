[
  {
    "id" : "bd70917e-5bc2-4a2b-99d7-8898fef4d0c9",
    "prId" : 2426,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2426#pullrequestreview-711168695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b25b79af-1714-4eb6-a3af-2dc1b552d937",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "should you access token before checking `pos < 0`?",
        "createdAt" : "2021-07-21T00:38:55Z",
        "updatedAt" : "2021-07-21T00:41:51Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0c3a3f738312340704bdbb31f777c12b5b6206",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +702,706 @@    @tailrec\n    def countIndentInternal(pos: Int, acc: Int = 0): (Int, Int) = {\n      val token = scannerTokens(pos)\n      if (pos < 0) (acc, pos)\n      else"
  },
  {
    "id" : "20b1239f-ad03-44cb-9651-a06e25ed40bb",
    "prId" : 2426,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2426#pullrequestreview-711412392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "701d7844-5635-4326-afef-77cd67aee1ee",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "a tab is a single indent?",
        "createdAt" : "2021-07-21T00:39:58Z",
        "updatedAt" : "2021-07-21T00:41:51Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "102248c4-5aa5-4639-b586-10e849f82d9b",
        "parentId" : "701d7844-5635-4326-afef-77cd67aee1ee",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "it is, you cannot mix tabs and spaces, so it's just a number of tabs or a number of spaces.",
        "createdAt" : "2021-07-21T08:50:06Z",
        "updatedAt" : "2021-07-21T08:50:06Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "da0c3a3f738312340704bdbb31f777c12b5b6206",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +679,683 @@        t.value.charAt(idx) match {\n          case '\\n' => loop(idx + 1, 0, isAfterNewline = true)\n          case ' ' | '\\t' if isAfterNewline => loop(idx + 1, indent + 1, isAfterNewline)\n          case _ => loop(idx + 1, indent, isAfterNewline = false)\n        }"
  },
  {
    "id" : "b264e92d-ccd7-430c-832f-11d7f4602308",
    "prId" : 2418,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2418#pullrequestreview-704258286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feffe2c9-9867-41fc-aa70-62101edd699c",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "So this checks if all regions up to parens are indented. ",
        "createdAt" : "2021-07-12T15:34:00Z",
        "updatedAt" : "2021-07-12T15:34:00Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "6042ecb10e36e3d61f7e8cb84b35ab41afeac782",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +415,419 @@        sepRegions\n          .collectFirst {\n            case RegionParen => true\n            case other if !other.isIndented => false\n          }"
  },
  {
    "id" : "48fa7002-bd3e-4293-94f5-88cb2b5c3603",
    "prId" : 2413,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2413#pullrequestreview-703838160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60643b59-4d54-44c1-b67b-8be94880beaf",
        "parentId" : null,
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "should it skip parens too?",
        "createdAt" : "2021-07-10T12:57:39Z",
        "updatedAt" : "2021-07-10T12:57:47Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "c7d1a62b-028c-438e-9674-07d90346014c",
        "parentId" : "60643b59-4d54-44c1-b67b-8be94880beaf",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "It doesn't in dotty, so I would rather keep it the same as the Scala 3 implementation.",
        "createdAt" : "2021-07-12T08:17:09Z",
        "updatedAt" : "2021-07-12T08:17:10Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "28766865cb37c5afa3852779a57680741758af05",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +992,996 @@  def followedByToken[T <: Token: TokenInfo]: Boolean = {\n    def startBlock = token.is[LeftBrace] || token.is[Indentation.Indent]\n    def endBlock = token.is[RightBrace] || token.is[Indentation.Outdent]\n    @tailrec\n    def lookForToken(braces: Int = 0): Boolean = {"
  },
  {
    "id" : "f0d23add-337a-4f38-a1fb-ea9733a998d9",
    "prId" : 2409,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2409#pullrequestreview-703100849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a30a2104-0c12-462b-b5b9-695a59d509ab",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "still renamed... i know tpe is weird but that's what it's called in 100 other places in scalameta",
        "createdAt" : "2021-07-09T14:20:36Z",
        "updatedAt" : "2021-07-09T14:23:55Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "1675110f937fbeae1d29e83d6d6dcedede6c812e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4201,4205 @@      }\n\n    val decltype = startModType()\n\n    def parents() = {"
  },
  {
    "id" : "1d64a6e2-4d88-4c39-ab2e-df74cbf0babc",
    "prId" : 2400,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2400#pullrequestreview-694052446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feab778b-c256-4810-bdb2-6ed05c4c5c3f",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "what if start != end? does it ever make sense to start a tree with Whitespace?",
        "createdAt" : "2021-06-28T14:10:52Z",
        "updatedAt" : "2021-06-28T14:10:52Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "85b43578-1b27-4499-97a2-c62251e70a37",
        "parentId" : "feab778b-c256-4810-bdb2-6ed05c4c5c3f",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "if start != end then trivia is already removed fully.",
        "createdAt" : "2021-06-28T14:43:38Z",
        "updatedAt" : "2021-06-28T14:43:48Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "7548bee8-d58f-4b18-ad24-cbb254f84acc",
        "parentId" : "feab778b-c256-4810-bdb2-6ed05c4c5c3f",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "got it... must be because it's not the start that has it but end.",
        "createdAt" : "2021-06-28T14:49:42Z",
        "updatedAt" : "2021-06-28T14:49:46Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ce5feed17b024f0a62978a4c39518d6710a5c6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +863,867 @@\n    if (start == end && scannerTokens(start).is[Trivia])\n      TokenStreamPosition(start, end)\n    else\n      TokenStreamPosition(start, end + 1)"
  },
  {
    "id" : "e1730cda-7a93-413e-a145-cd154dea11fc",
    "prId" : 2396,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2396#pullrequestreview-692088697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e4fba06-698a-4599-8956-2c23fd0eb053",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Is this needed? Outdent should be always before end marker and from what I see we don't need it below.",
        "createdAt" : "2021-06-24T16:25:37Z",
        "updatedAt" : "2021-06-24T16:25:54Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "85a4e06a-2e4f-46db-b581-c7b9af1b603e",
        "parentId" : "3e4fba06-698a-4599-8956-2c23fd0eb053",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "For empty template body, there is no indent/outdent\r\n```scala\r\nobject Foo: // <- here at colon  we call `observeIndented` while the next line doesn't have any indentation\r\nend Foo\r\n```",
        "createdAt" : "2021-06-24T16:42:35Z",
        "updatedAt" : "2021-06-24T16:42:35Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "a5fedb9a-689a-4a6b-a3e0-9e5c8b8e41d8",
        "parentId" : "3e4fba06-698a-4599-8956-2c23fd0eb053",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Generally, it should end on the LF after `:`, but this doesn't seem to happen and we are skipping the LF. That would be the underlying issue here. However, not sure how to fix it properly, so it's ok for now.",
        "createdAt" : "2021-06-24T17:25:39Z",
        "updatedAt" : "2021-06-24T17:25:46Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "88d9459f-80d9-4253-a109-1d33d6fa559e",
        "parentId" : "3e4fba06-698a-4599-8956-2c23fd0eb053",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "and would this work:\r\n```\r\nobject Foo:\r\n// comment\r\nend Foo\r\n```",
        "createdAt" : "2021-06-24T18:14:18Z",
        "updatedAt" : "2021-06-24T18:14:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "f6e0e776-7841-46d9-9f17-945c72ae57b5",
        "parentId" : "3e4fba06-698a-4599-8956-2c23fd0eb053",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "@kitbellew yep. Parser ignores comments in the same way as whitespaces",
        "createdAt" : "2021-06-24T18:19:34Z",
        "updatedAt" : "2021-06-24T18:19:34Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cfe008d55791ec5452f665600bee0b2d0cc6719",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +908,912 @@    case LF() | LFLF() => next()\n    case _ if in.observeOutdented() =>\n    case t if t.is[EndMarkerIntro] =>\n    case _ => accept[Semicolon]\n  }"
  },
  {
    "id" : "8c86ddab-f5f3-4bb7-ba1f-3f89971202ce",
    "prId" : 2381,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2381#pullrequestreview-685081664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1381180-790c-4c2b-8acf-f53f61beb2a8",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "i think this branch is not tested. you don't use scala 2 in any test cases?",
        "createdAt" : "2021-06-16T11:35:15Z",
        "updatedAt" : "2021-06-16T11:35:47Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "cf2f776c-98b5-4647-a28e-1dc5ef796b0d",
        "parentId" : "a1381180-790c-4c2b-8acf-f53f61beb2a8",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "For scala2 this part branch isn't involved because the condition has to be inside braces.\r\nThere are tests for scala2 `if`/`while` in [TermSuite](https://github.com/scalameta/scalameta/blob/main/tests/shared/src/test/scala/scala/meta/tests/parsers/TermSuite.scala).\r\n\r\n",
        "createdAt" : "2021-06-16T12:07:54Z",
        "updatedAt" : "2021-06-16T12:07:54Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a40e10fbb565d4add07d2a11c4dac0475e61e73",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2271,2275 @@\n  def condExprInParens[T <: Token: TokenInfo]: Term = {\n    if (dialect.allowSignificantIndentation) {\n      val forked = in.fork\n      val simpleExpr = condExpr()"
  },
  {
    "id" : "10177d9b-e2dc-423a-9059-4240c3d44a19",
    "prId" : 2375,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2375#pullrequestreview-676287271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "213d1b51-a00a-4fb6-b19d-6db869ab08a9",
        "parentId" : null,
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "I found that for parsing cases we use `expr(location = BlockStat, ...)`: https://github.com/scalameta/scalameta/blob/c058f6dfd2d220a8cef2e44669f3adb393ff6d6d/scalameta/parsers/shared/src/main/scala/scala/meta/internal/parsers/ScalametaParser.scala#L3124\r\n\r\nI'm wondering if the same approach would work for `function` and `implicitClosure`",
        "createdAt" : "2021-06-02T16:18:35Z",
        "updatedAt" : "2021-06-02T16:18:35Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "d8765735-ad6d-49c7-b243-6bca330c6cbd",
        "parentId" : "213d1b51-a00a-4fb6-b19d-6db869ab08a9",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "I tried that and seems like `expr` usage instead of `blockExpr` fixes that problem - [commit](https://github.com/dos65/scalameta/commit/37f1fd38a7931d944d01b36dcf2098f7dabff4b3).\r\nI'm not fully sure if it fixes any additional cases but at least it looks more generic.\r\n@tgodzik wdyt?",
        "createdAt" : "2021-06-03T10:04:39Z",
        "updatedAt" : "2021-06-03T10:04:39Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "60811bc0-79b4-4da7-955a-c7c778efb42f",
        "parentId" : "213d1b51-a00a-4fb6-b19d-6db869ab08a9",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "That's a good idea! Thanks! And also changed!",
        "createdAt" : "2021-06-04T13:21:53Z",
        "updatedAt" : "2021-06-04T13:21:53Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "53266fb5-8b22-4a56-b6ab-dcb901405506",
        "parentId" : "213d1b51-a00a-4fb6-b19d-6db869ab08a9",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Actually, it doesn't work after checking again. Reverted to the last version.",
        "createdAt" : "2021-06-04T13:29:58Z",
        "updatedAt" : "2021-06-04T13:29:58Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "389a314d447e5e7d47d5dd2a2d7705e582e21fe2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +3084,3088 @@  }\n\n  def blockExpr(isBlockOptional: Boolean = false): Term = autoPos {\n    if (ahead(token.is[CaseIntro] || (token.is[Ellipsis] && ahead(token.is[KwCase])))) {\n      if (token.is[LeftBrace])"
  },
  {
    "id" : "3815096e-7659-4094-9dbf-32ff1e1a0ba6",
    "prId" : 2362,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2362#pullrequestreview-666830972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ed53313-3ba2-4b6a-bd0d-bcf65163652b",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "unrelated question to method 10 lines above. why does it check for whitespace in two differently ways? isWhitespace vs is[Whitespace].",
        "createdAt" : "2021-05-24T14:23:36Z",
        "updatedAt" : "2021-05-24T14:26:05Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "ecb74f53-9e3c-4708-a971-562a6e1de829",
        "parentId" : "8ed53313-3ba2-4b6a-bd0d-bcf65163652b",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "`isWhitespace` is only used to count spaces or tabs, so in reality it should be `isSpacesOrTabs`, but it's an inner function, so this should not be a big issue.",
        "createdAt" : "2021-05-24T14:43:04Z",
        "updatedAt" : "2021-05-24T14:43:04Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "9de0e6f29c477a94dd0d25192f6ede9366dbf63d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +690,694 @@    countIndentAndNewlineIndex(tokenPosition)._1\n\n  private def currentIndentation: Int = {\n    in.currentIndentation\n  }"
  },
  {
    "id" : "d5d3d14d-7fa7-4a6c-82b9-1ffded69be16",
    "prId" : 2348,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2348#pullrequestreview-666669876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7df86b9b-4fcf-48b3-be3d-03ee13d94bcf",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "does this version not allow type bounds?",
        "createdAt" : "2021-05-24T11:40:28Z",
        "updatedAt" : "2021-05-24T11:45:40Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "a7fc67af-ab60-4fb7-8246-c9fc912a62d0",
        "parentId" : "7df86b9b-4fcf-48b3-be3d-03ee13d94bcf",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "yep, but it is in line with scala/scala#9605",
        "createdAt" : "2021-05-24T12:03:28Z",
        "updatedAt" : "2021-05-24T12:03:28Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "55606a8a37c6be603c7eecc2639a75573af72ad7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1743,1747 @@              Type.Placeholder(typeBounds())\n            else\n              Type.Name(s\"${ident.value}_\")\n          }\n        case Literal() =>"
  },
  {
    "id" : "3d86d5e5-227e-4338-9b46-80977aa2a117",
    "prId" : 2337,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2337#pullrequestreview-655545401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d097a666-7a55-4401-9dd9-32452ec14949",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "is this case tested? i thought this was the one that was failing for me originally, i don't see it in new tests.",
        "createdAt" : "2021-05-10T11:41:46Z",
        "updatedAt" : "2021-05-10T12:49:32Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "924544b0-4387-4af2-8cc7-b1f9eca72aff",
        "parentId" : "d097a666-7a55-4401-9dd9-32452ec14949",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "Yes, it's covered  - https://github.com/scalameta/scalameta/blob/9e05c5aa0e796c261c85d2e0bb2215034620ef18/tests/shared/src/test/scala-2.13/scala/meta/tests/tokenizers/TokensPositionSuite.scala#L704-L709",
        "createdAt" : "2021-05-10T11:43:28Z",
        "updatedAt" : "2021-05-10T12:49:32Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "acc5fc3bb21f95161ee3f67ea2223893c9219a12",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2471,2475 @@                  Some(\n                    atPos(tree, tree)(\n                      Term.Param(Nil, atPos(name, name)(Name.Anonymous()), None, None)\n                    )\n                  )"
  },
  {
    "id" : "2bf68c8e-4886-4154-b01c-3a8511ef96bc",
    "prId" : 2329,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2329#pullrequestreview-651409335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a651d46-76b0-46fa-8cfe-fa8acfc7c301",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "does this mean you will NOT keep braces for this single-stat block? i would prefer that you had. if block had braces, they need to be part of it, regardless of the number of stats.",
        "createdAt" : "2021-05-04T15:50:23Z",
        "updatedAt" : "2021-05-04T15:50:55Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "19d9f644-c865-46f6-b7b3-dac880019d83",
        "parentId" : "0a651d46-76b0-46fa-8cfe-fa8acfc7c301",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "That's only for indentation, that doesn't have braces at all.",
        "createdAt" : "2021-05-04T15:59:18Z",
        "updatedAt" : "2021-05-04T15:59:19Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "426f7b8b-2686-46ed-abb7-54726c446650",
        "parentId" : "0a651d46-76b0-46fa-8cfe-fa8acfc7c301",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "zrozumiał...",
        "createdAt" : "2021-05-04T16:00:54Z",
        "updatedAt" : "2021-05-04T16:01:00Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7c272cbd09e4a6d6a87945a1d3ed39b10379ec8",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +4229,4233 @@        if (in.observeIndented()) {\n          val block = autoPos(Term.Block(indented(templateStats())))\n          if (block.stats.size == 1) block.stats.head\n          else block\n        } else if (token.is[DefIntro]) {"
  },
  {
    "id" : "e8a78cef-eb80-4e17-9b62-10472262967e",
    "prId" : 2328,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2328#pullrequestreview-651476627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee73a4de-494a-44ed-aee5-105e62f576f6",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "should this whole function be changed to:\r\n```\r\n    val edefsOrTemplate = if (token.is[LeftBrace]) {\r\n      // @S: pre template body cannot stub like post body can!\r\n      val (self, body) = templateBody(enumCaseAllowed)\r\n      if (token.is[KwWith] && self.name.is[Name.Anonymous] && self.decltpe.isEmpty) {\r\n        val edefs = body.map(ensureEarlyDef)\r\n        next()\r\n        Left(edefs)\r\n      } else {\r\n        Right(Template(Nil, Nil, self, body))\r\n      }\r\n    } else {\r\n      Left(Nil)\r\n    }\r\n    edefsOrTemplate match {\r\n      case Right(t) => t\r\n      case Left(edefs) =>\r\n        val parents = if (token.is[Colon]) Nil else templateParents(afterExtend)\r\n        template(edefs, parents, enumCaseAllowed)\r\n    }\r\n```",
        "createdAt" : "2021-05-04T15:20:57Z",
        "updatedAt" : "2021-05-04T15:21:11Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "e73e5551-c028-4da6-9eb8-0dde744b4484",
        "parentId" : "ee73a4de-494a-44ed-aee5-105e62f576f6",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "We should be fine as is, since early defs are not allowed in Dotty, so they will not exist with colons.\r\n\r\nIt would be probably good to remove early defs from Scala 3 dialect, but we could do that separately if needed.",
        "createdAt" : "2021-05-04T17:12:10Z",
        "updatedAt" : "2021-05-04T17:12:10Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eaafa05ad72799c236cb981a55fd9f93403aaec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4737,4741 @@      }\n    } else {\n      val parents = if (token.is[Colon]) Nil else templateParents(afterExtend)\n      template(Nil, parents, enumCaseAllowed)\n    }"
  },
  {
    "id" : "a712b5f9-0832-4b7d-9c7e-0048cf30d55b",
    "prId" : 2327,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2327#pullrequestreview-651401675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77b0cba9-f1f3-41cc-aceb-22b86870c360",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "i am not sure i understand this. does this mean unquoting a mod requires `$(mod)`, with parens?",
        "createdAt" : "2021-05-04T15:04:02Z",
        "updatedAt" : "2021-05-05T09:12:55Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "ec50c988-a184-4112-9937-d9650ac5e909",
        "parentId" : "77b0cba9-f1f3-41cc-aceb-22b86870c360",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "It means as far as I can tell `$mod (` so essentially the constructor should be next.",
        "createdAt" : "2021-05-04T15:46:43Z",
        "updatedAt" : "2021-05-05T09:12:55Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "ca500228-a008-4a08-8081-4a3d09664114",
        "parentId" : "77b0cba9-f1f3-41cc-aceb-22b86870c360",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "ah, so this is not for `private class C(...)`, it's for `class C private(...)`? got it.",
        "createdAt" : "2021-05-04T15:53:39Z",
        "updatedAt" : "2021-05-05T09:12:55Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fcb000b8f81059d73eb92bba3e54f308f949da3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3574,3578 @@\n  def ctorModifiers(): Option[Mod] = token match {\n    case Unquote() if ahead(token.is[LeftParen]) => Some(unquote[Mod])\n    case Ellipsis(_) => Some(ellipsis(1, astInfo[Mod]))\n    case KwPrivate() => Some(accessModifier())"
  },
  {
    "id" : "d0a7bd76-43cc-486a-b697-507e1943118b",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-654986008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd379e3c-6d9a-4e77-9df4-9c5a17880c22",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "looks like there was an actual token here as well",
        "createdAt" : "2021-05-08T11:47:53Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +3843,3847 @@          else if (token.is[Unquote]) unquote[Name]\n          else if (token.is[Underscore] && allowUnderscore) {\n            next(); autoPos(Name.Anonymous())\n          } else {\n            if (allowUnderscore) syntaxError(\"identifier or `_' expected\", at = token)"
  },
  {
    "id" : "c5dfcd13-9b6e-4949-ba74-69d291a6bdc7",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-654986008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6238bf9f-5899-4a74-aabe-db0d535d359b",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "looks like there was an actual token here as well",
        "createdAt" : "2021-05-08T11:48:41Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +3501,3505 @@      val result = {\n        if (token.is[KwThis]) {\n          val qual = autoPos(Name.Anonymous())\n          next()\n          mod(atPos(in.prevTokenPos, auto)(Term.This(qual)))"
  },
  {
    "id" : "ec7666e7-22f8-4119-bf5b-b793cd0f7cdb",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-654986008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb463e93-7443-4388-b4cb-bd11df46974d",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "is there a test for this? what does this look like?",
        "createdAt" : "2021-05-08T11:49:50Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +2503,2507 @@                      Term.Param(\n                        List(atPos(kwUsing.pos)(Mod.Using())),\n                        autoPos(Name.Anonymous()),\n                        Some(tpt),\n                        None"
  },
  {
    "id" : "1990a12d-f097-4ddb-bfd1-5ed4f14cd303",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-654986008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "754c5a20-812b-4468-93f7-1cfdd91a6bbe",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "looks like there was an actual token here as well but no test",
        "createdAt" : "2021-05-08T11:51:01Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2483,2487 @@                  Some(\n                    atPos(tree, tree)(\n                      Term.Param(Nil, autoPos(Name.Anonymous()), Some(tpt), None)\n                    )\n                  )"
  },
  {
    "id" : "dbfa53a1-fe00-45ac-a62b-8ce56b90d468",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-654986008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "438259ad-1f61-4f4e-9c51-814d76cb1303",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "looks like there was an actual token here as well but no test",
        "createdAt" : "2021-05-08T11:51:16Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2472,2476 @@                  Some(\n                    atPos(tree, tree)(\n                      Term.Param(Nil, autoPos(Name.Anonymous()), None, None)\n                    )\n                  )"
  },
  {
    "id" : "ea4c82e3-43fa-4566-9278-42dc38f6ea26",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-655545267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd33c6e6-2626-478d-b0f4-3d0bc788f96a",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "what does this look like?",
        "createdAt" : "2021-05-08T11:51:54Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "deda2154-8915-4b06-bdcd-d0716c2f9a42",
        "parentId" : "bd33c6e6-2626-478d-b0f4-3d0bc788f96a",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "`q\"asdsa $this\"`. \r\n\r\nIn this case, the previous logic wasn't changed - `Name.Anonymous` doesn't point at `this`.\r\nWould it be ok to change that?",
        "createdAt" : "2021-05-10T10:50:13Z",
        "updatedAt" : "2021-05-10T10:50:13Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "54a0caa5-13a2-46bb-b6b3-480187b0a829",
        "parentId" : "bd33c6e6-2626-478d-b0f4-3d0bc788f96a",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "yes!",
        "createdAt" : "2021-05-10T11:43:17Z",
        "updatedAt" : "2021-05-10T11:43:17Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2152,2156 @@      case LeftBrace() => dropTrivialBlock(expr(location = NoStat, allowRepeated = true))\n      case KwThis() =>\n        val qual = autoPos(Name.Anonymous()); next();\n        atPos(in.prevTokenPos, auto)(Term.This(qual))\n      case _ =>"
  },
  {
    "id" : "73150aa9-5e5f-4d7a-90ff-9465eb8ab7a8",
    "prId" : 2322,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2322#pullrequestreview-655510658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60c50527-27ce-4b0f-90c1-edf706143d72",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "what does this look like?",
        "createdAt" : "2021-05-08T11:52:28Z",
        "updatedAt" : "2021-05-08T11:53:18Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "9fc50d41-c882-4f29-ac69-24875d11d2cd",
        "parentId" : "60c50527-27ce-4b0f-90c1-edf706143d72",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "```scala\r\ntrait A {\r\n  type X\r\n}\r\n\r\nclass FF extends A {\r\n  type F = super.X\r\n  //        ^^ \r\n}\r\n```",
        "createdAt" : "2021-05-10T10:56:51Z",
        "updatedAt" : "2021-05-10T10:56:52Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe4fc0c6a400c02496107e4db9c631eaaac965c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1972,1976 @@      }\n    } else {\n      autoPos(Name.Anonymous())\n    }\n  }"
  },
  {
    "id" : "a5204a5a-6151-4573-a57b-49689cc78e92",
    "prId" : 2319,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2319#pullrequestreview-648386820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96f8f462-3fe3-4cf0-967c-df955cca6ae7",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "@dos65 quick question: below, on lines 4546 and 4557 (and maybe elsewhere), the same construct was used. should they be changed there as well? if Name.Anonymous should never have any tokens, should we define a shortcut:\r\n```\r\n  def atNameAnonymous(in: ...): ... = atPos(x, x - 1)(...)\r\n```\r\n(and what does `autoPos` on 4533 do?)",
        "createdAt" : "2021-04-29T14:58:58Z",
        "updatedAt" : "2021-04-29T14:58:58Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "f44f3a93-7da3-4525-99ef-a97942b17a58",
        "parentId" : "96f8f462-3fe3-4cf0-967c-df955cca6ae7",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "oops)\r\n\r\nGood catch, thx! I will fix these cases too\r\n\r\n> and what does autoPos on 4533 do?\r\n\r\n:thinking: ",
        "createdAt" : "2021-04-29T15:18:05Z",
        "updatedAt" : "2021-04-29T15:18:05Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "4858bf6b-92b2-488b-a783-c6473c415fb6",
        "parentId" : "96f8f462-3fe3-4cf0-967c-df955cca6ae7",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should do a `-1` range correctly in that case I think.",
        "createdAt" : "2021-04-29T15:59:38Z",
        "updatedAt" : "2021-04-29T15:59:38Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3062166e24e53d52642003acb6a2172a87d5c78c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4535,4539 @@      Ctor.Primary(mods, name, paramss)\n    } else if (owner.isTrait) {\n      Ctor.Primary(Nil, atPos(in.tokenPos, in.tokenPos - 1)(Name.Anonymous()), Nil)\n    } else {\n      unreachable(debug(owner))"
  },
  {
    "id" : "8478b15d-371a-48b6-a957-986e643739a8",
    "prId" : 2290,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2290#pullrequestreview-637531500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6876c842-f596-4e80-9212-fe0e4594ded3",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Funnily enough this also allows:\r\n```\r\nif\r\n   case a =>\r\n   case b =>\r\nthen\r\n  stat\r\n```\r\n\r\nwhich is not entirely correct, but it's also accepted by the Dotty parser, only to be rejected at typer. I think more permissive parser is ok in this case.",
        "createdAt" : "2021-04-16T09:24:53Z",
        "updatedAt" : "2021-04-16T09:24:53Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "b24865f0-30bf-4732-9a3d-faa903031188",
        "parentId" : "6876c842-f596-4e80-9212-fe0e4594ded3",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I agree it's better to be permissive in this case. I think the Scalameta parser is probably too strict in some cases.",
        "createdAt" : "2021-04-16T09:54:26Z",
        "updatedAt" : "2021-04-16T09:54:26Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "490efa68d0f2f9a2941edebc7f766fbcc07f06aa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2155,2159 @@  private def exprMaybeIndented(): Term = {\n    if (token.is[Indentation.Indent]) {\n      blockExpr()\n    } else {\n      expr()"
  },
  {
    "id" : "dd63f850-8981-4480-a1f8-356dc5381c91",
    "prId" : 2282,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2282#pullrequestreview-635534506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a42fc3d-419c-43d8-97fc-b550889bb2fc",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "i'd short circuit, perhaps, and avoid reverse search if the condition is false\r\n```\r\nexpected < existingIndent && .... collectFirst {\r\n  case pointPos if ... =>\r\n    curr = TokenRef ...\r\n}.isDefined",
        "createdAt" : "2021-04-14T11:19:45Z",
        "updatedAt" : "2021-04-14T11:34:10Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "db8ddd8f-b99b-4e8c-b05a-7df6ea482cae",
        "parentId" : "7a42fc3d-419c-43d8-97fc-b550889bb2fc",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "thx! I'll look at it in the next PR",
        "createdAt" : "2021-04-14T12:01:26Z",
        "updatedAt" : "2021-04-14T12:01:27Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9157227d21dbd121a1c609c45cf7ee6b9aafbe98",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +290,294 @@      else {\n        val existingIndent = sepRegions.find(_.isIndented).map(_.indent).getOrElse(0)\n        val lastLF = (prevPos to tokenPos).reverse.collectFirst({\n          case i if scannerTokens.tokens(i).is[LF] => i\n        })"
  },
  {
    "id" : "3f132b9a-7c55-47a8-ac88-1cd24bf5926a",
    "prId" : 2282,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2282#pullrequestreview-635527263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b1d11b9-04b3-42eb-a049-a5abe82ab601",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "is `find(!...)` available on `Range`?",
        "createdAt" : "2021-04-14T11:28:43Z",
        "updatedAt" : "2021-04-14T11:34:10Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "37d92724-adb3-4eeb-8c97-fc22367be87f",
        "parentId" : "4b1d11b9-04b3-42eb-a049-a5abe82ab601",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "`dropWhile` is specifically implemented for `Range` and should work slightly faster than generic `find`",
        "createdAt" : "2021-04-14T11:52:31Z",
        "updatedAt" : "2021-04-14T11:52:32Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "9157227d21dbd121a1c609c45cf7ee6b9aafbe98",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +829,833 @@    def skipTrivia(range: Range): Int = {\n      range\n        .dropWhile(i => scannerTokens(i).is[Trivia])\n        .headOption\n        .getOrElse(range.start)"
  },
  {
    "id" : "efe6138c-4ed1-4c9b-ab72-4356ba60d846",
    "prId" : 2277,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2277#pullrequestreview-632403721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbdcf43-0032-4d31-96f6-40fe69019a80",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "does this change apply to all end markers? should we undo @tgodzik's special-case handling for match? #2276 ",
        "createdAt" : "2021-04-09T11:10:20Z",
        "updatedAt" : "2021-04-09T11:10:20Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "c0cd4f62-fd0c-4606-a5f3-68bc8f3d1261",
        "parentId" : "1cbdcf43-0032-4d31-96f6-40fe69019a80",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Just checked and we still need that one.",
        "createdAt" : "2021-04-09T12:31:27Z",
        "updatedAt" : "2021-04-09T12:31:27Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "5606187a-cfba-4a01-9bdc-7ee7a3a9a76c",
        "parentId" : "1cbdcf43-0032-4d31-96f6-40fe69019a80",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "These two cases with `match` and `val` are different so we need both changes",
        "createdAt" : "2021-04-09T13:18:49Z",
        "updatedAt" : "2021-04-09T13:19:31Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "132f1618ca3885a351ab5654b043b988533e9ff3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1194,1198 @@      token.is[RightParen] || token.is[RightBracket] || token.is[RightBrace] ||\n      token.is[Underscore] || token.is[Ellipsis] || token.is[Unquote] ||\n      token.prev.is[EndMarkerIntro]\n    }\n  }"
  },
  {
    "id" : "a5841be5-7330-4c4c-943f-b736aced825b",
    "prId" : 2276,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2276#pullrequestreview-632543883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "sorry for being a pain but this is something that i learned the hard way in scalafmt. does prev refer to the previous token, skipping both whitespace and comments?\r\n\r\nwill this handle something like that:\r\n```\r\n    foo match // blah\r\n    case bar => ...\r\n    end match // blah\r\n  case qux => ...\r\n```",
        "createdAt" : "2021-04-09T14:06:37Z",
        "updatedAt" : "2021-04-09T14:06:37Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "6d0c06ce-3611-434b-bf54-64debcc13525",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "It skips them:\r\n```scala\r\n    def prev: Token = {\r\n      val prev = scannerTokens.apply(Math.max(token.index - 1, 0))\r\n      if (prev.is[Whitespace] || prev.is[Comment]) prev.prev\r\n      else prev\r\n    }\r\n```",
        "createdAt" : "2021-04-09T14:13:23Z",
        "updatedAt" : "2021-04-09T14:13:24Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "148669bc-590b-4b9b-a194-40067b05b351",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "what about this:\r\n```\r\nval end = ...\r\nend match\r\ncase theend => ...\r\nend match\r\n```",
        "createdAt" : "2021-04-09T14:27:16Z",
        "updatedAt" : "2021-04-09T14:27:17Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "f28e5bd9-fa1d-47af-835b-2d39df3f2c44",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "this doesn't compile in Dotty from what I see.",
        "createdAt" : "2021-04-09T14:54:47Z",
        "updatedAt" : "2021-04-09T14:54:47Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "dabbad38-a613-4e38-851b-b2835606d93a",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "why not? `end` is not restricted https://scalacenter.github.io/scala-3-migration-guide/docs/incompatibilities/syntactic-changes.html#restricted-keywords",
        "createdAt" : "2021-04-09T15:17:20Z",
        "updatedAt" : "2021-04-09T15:17:20Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "0bf29976-9ff8-403a-b7a5-50d34123ad6e",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Might be a bug? Or really there is a number of scenarios, where soft keywords don't work, but it's not stated.\r\n\r\nSame with:\r\n```scala\r\ndef extension(a : Int) = a + 2\r\nextension(2)\r\n```\r\nwill not work.\r\n\r\nYou need to do:\r\n```scala\r\ndef extension(a : Int) = a + 2\r\n`extension`(2)\r\n```\r\n\r\nSo soft keywords are kind of dodgy and when I asked Martin he said that this is fine.",
        "createdAt" : "2021-04-09T15:33:02Z",
        "updatedAt" : "2021-04-09T15:33:02Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "85bde104-efbf-4327-a532-2de3e6e7d28f",
        "parentId" : "68fd1e93-ad6b-40e7-be07-90b3406b7685",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "https://github.com/lampepfl/dotty/issues/10076 for some context (I kind of argued with him there :sweat_smile: )",
        "createdAt" : "2021-04-09T15:34:05Z",
        "updatedAt" : "2021-04-09T15:34:05Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b8fc1bd8fff43bf58d7b03a9251be5ee01e2549a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +606,610 @@                  // check the previous token to avoid infinity loop\n                  (!prev.prev.is[soft.KwEnd] && prev.is[KwMatch]) &&\n                  next.is[KwCase] && token.isNot[Indentation.Indent]\n              } else false\n            }"
  },
  {
    "id" : "b34a4f9f-1c10-456a-afa1-84e8230db5a4",
    "prId" : 2238,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2238#pullrequestreview-590741820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47399f4e-df2d-4907-8606-e1ffcb555998",
        "parentId" : null,
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "This clause affects all `*` usage.\r\nThe community test has a lot of new similar errors:\r\n```\r\nFailed for file ..community-projects/dotty/compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala\r\nError: ..community-projects/dotty/compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala:103: error: ) expected but identifier found\r\n    private def lineBreak(): String = \"\\n\" + (\"  \" * indent)\r\n```\r\n\r\nI'm not sure maybe it should be  `dialect.allowPostfixStarVarargSplices && isIndentEndsByStar` ?",
        "createdAt" : "2021-02-15T19:41:18Z",
        "updatedAt" : "2021-02-15T19:53:54Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      },
      {
        "id" : "c6a98bdd-c9d9-402b-a5c8-15218bd92448",
        "parentId" : "47399f4e-df2d-4907-8606-e1ffcb555998",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Damn, I will take a look into this. Martin's small changes are actually much more complicated than anticipated.",
        "createdAt" : "2021-02-15T19:54:56Z",
        "updatedAt" : "2021-02-15T19:54:56Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "ce1dedea-b869-4cbd-a081-0846ca9cbbd1",
        "parentId" : "47399f4e-df2d-4907-8606-e1ffcb555998",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Fix is here: https://github.com/scalameta/scalameta/pull/2240",
        "createdAt" : "2021-02-15T20:38:18Z",
        "updatedAt" : "2021-02-15T20:38:18Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "8279089f786218c3c48d84f8bc881d6acc3fd813",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2232,2236 @@            t = atPos(t, auto)(Term.Ascribe(t, typeOrInfixType(location)))\n          }\n        } else if (dialect.allowPostfixStarVarargSplices && isStar) {\n          repeatedTerm(() => next())\n        } else if (token.is[KwMatch]) {"
  },
  {
    "id" : "d81ff2cb-1b99-43c4-b00d-9c1a965045e6",
    "prId" : 2237,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2237#pullrequestreview-590419356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce4febad-3c01-4e05-b17e-30c23f9e7e74",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : " We should have `RegionIndent` and the `RegionParen` next - instead of just dropping it.",
        "createdAt" : "2021-02-15T11:02:50Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "aadbe44a-038d-4260-8563-061df978f574",
        "parentId" : "ce4febad-3c01-4e05-b17e-30c23f9e7e74",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "It will be applied one more time.\r\nAfter `observerIndented` were called the next token after `Indent` will be `(` that will put `RegionParen` again.\r\n\r\nFor example, in the code below at the moment when `observeIndented` is called iterator already reached `(` token on the second line and updated `sepRegions` on `RegionParen :: Nil`.\r\n\r\n```scala\r\nif (cond)\r\n  <(>f)\r\n```",
        "createdAt" : "2021-02-15T12:09:28Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65d886f60569f3957421c3e80b5d5c88ac189f0",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +310,314 @@        val undoRegionChange =\n          prev.headOption match {\n            case Some(RegionParen) if token.is[LeftParen] => prev.tail\n            case Some(RegionEnumArtificialMark) if token.is[KwEnum] => prev.tail\n            case Some(_: RegionBrace) if token.is[LeftBrace] => prev.tail"
  },
  {
    "id" : "6cf004f2-08dc-4c75-abb5-15edcd945c51",
    "prId" : 2237,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2237#pullrequestreview-590680860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0190a6c-a5f3-4024-ab78-2d8b769c0f6d",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Same case as with the above comment. We should still have RegionBrace, but most likely change the order.\r\n\r\n`RegionBrace :: RegionIndent`",
        "createdAt" : "2021-02-15T11:04:31Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "9bcfd325-d248-46f3-be34-9005a0035819",
        "parentId" : "f0190a6c-a5f3-4024-ab78-2d8b769c0f6d",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "The same as above",
        "createdAt" : "2021-02-15T18:05:57Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65d886f60569f3957421c3e80b5d5c88ac189f0",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +312,316 @@            case Some(RegionParen) if token.is[LeftParen] => prev.tail\n            case Some(RegionEnumArtificialMark) if token.is[KwEnum] => prev.tail\n            case Some(_: RegionBrace) if token.is[LeftBrace] => prev.tail\n            case _ => prev\n          }"
  },
  {
    "id" : "8e5ce75e-94c9-4821-a48a-c62ae3a511e3",
    "prId" : 2237,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2237#pullrequestreview-590680767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fd84dd0-3e3a-409e-9143-a9d7dc7bc3a6",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This should not pop up aside from enum, isn't thi shandled by `observeIndentedEnum`",
        "createdAt" : "2021-02-15T11:05:10Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "66dbc51e-506b-4e32-a649-79f181fdf57a",
        "parentId" : "8fd84dd0-3e3a-409e-9143-a9d7dc7bc3a6",
        "authorId" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "body" : "There is the same case as with `RegionParen`\r\nEven if it might be strange but it possible to define `enum` inside `if` ",
        "createdAt" : "2021-02-15T18:05:45Z",
        "updatedAt" : "2021-02-17T10:03:31Z",
        "lastEditedBy" : "ac5ed7d7-17a6-48d0-a426-0b37bf9febdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "e65d886f60569f3957421c3e80b5d5c88ac189f0",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +311,315 @@          prev.headOption match {\n            case Some(RegionParen) if token.is[LeftParen] => prev.tail\n            case Some(RegionEnumArtificialMark) if token.is[KwEnum] => prev.tail\n            case Some(_: RegionBrace) if token.is[LeftBrace] => prev.tail\n            case _ => prev"
  },
  {
    "id" : "592bde6c-f30e-4d1f-9af1-766f5cf7a8ed",
    "prId" : 2213,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2213#pullrequestreview-566124366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0d94190-1ebb-4bf4-a62f-251b6d8beda5",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Removed `abstract givens cannot be annonymous` here since it's actually misleading. Givens with `with` cannot be abstract at all.",
        "createdAt" : "2021-01-12T10:19:07Z",
        "updatedAt" : "2021-01-12T10:19:07Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "22b449c6b1fbbf2df67ab344145080fe59008f7e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +3962,3966 @@        }\n      } else {\n        syntaxError(\"expected 'with' <body>\", at = token.pos)\n      }\n      val rhs = if (slf.decltpe.nonEmpty) {"
  },
  {
    "id" : "3ba61d83-2b7b-4604-b21f-0c61412b8c5a",
    "prId" : 2210,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2210#pullrequestreview-563628572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e58d628a-ece4-4776-b25f-77e1a6e5cb70",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "comments section for this method:\r\n` // GivenDef          ::=  [GivenSig] [‘_’ ‘<:’] Type ‘=’ Expr`\r\nare no longer relevant, probably best to remove",
        "createdAt" : "2021-01-06T19:34:26Z",
        "updatedAt" : "2021-01-07T16:32:29Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "139ab144-c370-47b4-b80f-b1e7908a238d",
        "parentId" : "e58d628a-ece4-4776-b25f-77e1a6e5cb70",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Updated!",
        "createdAt" : "2021-01-07T16:25:13Z",
        "updatedAt" : "2021-01-07T16:32:29Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "a08d5544ed1a8f7ec41bf03154761d07b05f865b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +3949,3953 @@      accept[Equals]\n      Defn.GivenAlias(mods, sigName, sigTparams, sigUparamss, decltpe, exprMaybeIndented())\n    } else {\n      val inits = parents()\n      val (slf, stats) = if (token.is[KwWith]) {"
  },
  {
    "id" : "56b64a26-8243-4a03-b1b5-383f3ec0494f",
    "prId" : 2210,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2210#pullrequestreview-563704282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f262dfd-c7e7-49f2-97ef-4c10207f931f",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "There is a line above:\r\n`val (sigName, sigTparams, sigUparamss) = if (token.is[Colon]) {`\r\naccording to spec colon must always be present.\r\nAt least one of sigName, sigTparams, sigUparamss must be present.\r\nWith this there is probably no need to fork and rollback how it was done before.\r\n\r\nSomeone noticed parsing was not straightforward and adjusted syntax? :)",
        "createdAt" : "2021-01-06T19:41:53Z",
        "updatedAt" : "2021-01-07T16:32:29Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "80399aaf-4c7f-4d1f-90fe-5df76499b2c1",
        "parentId" : "1f262dfd-c7e7-49f2-97ef-4c10207f931f",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "You can still have:\r\n`given Ord[Int] with { def compare(x: Int, y: Int): Int = 0 }` \r\n\r\nwhich does not contain `:`, since `[GivenSig]` is optional.",
        "createdAt" : "2021-01-07T15:03:18Z",
        "updatedAt" : "2021-01-07T16:32:29Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "b9107985-a1fb-4077-a27f-1d1aa22011c9",
        "parentId" : "1f262dfd-c7e7-49f2-97ef-4c10207f931f",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "ahh right 👍 ",
        "createdAt" : "2021-01-07T18:01:22Z",
        "updatedAt" : "2021-01-07T18:01:22Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a08d5544ed1a8f7ec41bf03154761d07b05f865b",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +3947,3951 @@\n    if (token.is[Equals]) {\n      accept[Equals]\n      Defn.GivenAlias(mods, sigName, sigTparams, sigUparamss, decltpe, exprMaybeIndented())\n    } else {"
  },
  {
    "id" : "3ce89dff-a0e0-434e-aed2-21fc1d50bade",
    "prId" : 2194,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2194#pullrequestreview-550126091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffade120-f6e6-4483-9390-434a44053abe",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Added a condition to if, since it caused outdent to appear where none is needed - the parser should have failed at that point also, but the error was misleading.",
        "createdAt" : "2020-12-11T14:06:41Z",
        "updatedAt" : "2020-12-15T12:12:31Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bccd792af2a010693382e60f925df53d355aa00",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +414,418 @@              (!sepRegionsProcess.head.isInstanceOf[RegionBrace] &&\n                !sepRegionsProcess.head.isInstanceOf[RegionEnum])) {\n              if (dialect.allowSignificantIndentation && sepRegionsProcess.head.isIndented)\n                insertOutdent()\n              sepRegionsProcess = sepRegionsProcess.tail"
  },
  {
    "id" : "a62f2dbc-f235-40af-a1b1-f9596d095e79",
    "prId" : 2183,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2183#pullrequestreview-541215628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4df74a0-b2e1-45ca-ab18-94efac81d79c",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This is moved out from `expr`",
        "createdAt" : "2020-11-30T19:16:42Z",
        "updatedAt" : "2020-11-30T19:18:27Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a97c23dc793bfa47061fb103aab7c8a0097f3b5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2089,2093 @@  }\n\n  def ifClause(isInline: Boolean = false) = {\n    accept[KwIf]\n    val (cond, thenp) = if (token.isNot[LeftParen] && dialect.allowSignificantIndentation) {"
  },
  {
    "id" : "5004ee02-aaa9-4acf-a919-0c92ccfb71c3",
    "prId" : 2183,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2183#pullrequestreview-541215628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "064dd477-1418-4c5a-8d0f-fa79f2dc1e48",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Turns out there was one more issue with ifs, so a much safer place to check it is here.\r\n\r\nThe problem was with\r\n`def a = inline if cond then a`",
        "createdAt" : "2020-11-30T19:17:25Z",
        "updatedAt" : "2020-11-30T19:18:27Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a97c23dc793bfa47061fb103aab7c8a0097f3b5",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +2128,2132 @@  def expr(location: Location, allowRepeated: Boolean): Term =\n    autoPos(token match {\n      case SkInline() if ahead(token.is[KwIf]) =>\n        accept[Ident]\n        ifClause(isInline = true)"
  },
  {
    "id" : "f12484f4-fb9a-4dcc-8246-8c6b11820235",
    "prId" : 2183,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2183#pullrequestreview-541215628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7f47927-0f99-4690-9478-9af67ebfb1a5",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I removed the additional case with non-inline mods - it will be reported anyway as error.",
        "createdAt" : "2020-11-30T19:18:10Z",
        "updatedAt" : "2020-11-30T19:18:27Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a97c23dc793bfa47061fb103aab7c8a0097f3b5",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +3845,3849 @@        enumCaseDef(mods)\n      case KwIf() if mods.size == 1 && mods.head.is[Mod.Inline] =>\n        ifClause(isInline = true)\n      case other =>\n        tmplDef(mods)"
  },
  {
    "id" : "8c9d47ea-a85f-461b-bb5a-8ecae7af37e0",
    "prId" : 2148,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2148#pullrequestreview-516266671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676c15a2-7ea9-4b29-a6f4-93f9d5c2adc1",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "We weren't adding outdents when EOF was met, which can easily happen.",
        "createdAt" : "2020-10-23T15:11:51Z",
        "updatedAt" : "2020-10-24T10:47:59Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "818d38cb-e428-4a5a-a6b8-e4d5cd241f3e",
        "parentId" : "676c15a2-7ea9-4b29-a6f4-93f9d5c2adc1",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "good catch! scary it didn't fail on tests/community-tests :fearful: ",
        "createdAt" : "2020-10-23T21:40:03Z",
        "updatedAt" : "2020-10-24T10:47:59Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "25d33132-e45d-4ac1-8789-40dbf48cfc5b",
        "parentId" : "676c15a2-7ea9-4b29-a6f4-93f9d5c2adc1",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I don't think people usually leave EOF, but it failed on a number of places in scala3doc",
        "createdAt" : "2020-10-24T10:18:39Z",
        "updatedAt" : "2020-10-24T10:47:59Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ae819463c21f6b746c3fc55a94abfc494a0963",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +362,366 @@            if (!sepRegions.isEmpty && sepRegions.head == RegionBracket) sepRegions.tail\n            else sepRegions\n          } else if (curr.is[EOF]) {\n            var sepRegionsProcess = sepRegions\n            while (indentedRegion(sepRegionsProcess)) {"
  },
  {
    "id" : "b2b6454d-96b7-4776-8e7f-aec51fbb3172",
    "prId" : 2148,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2148#pullrequestreview-515759948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d81770d-bf35-427c-a597-cc75f563ccd7",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This allows naming params `transparent` `opaque` etc.",
        "createdAt" : "2020-10-23T15:12:17Z",
        "updatedAt" : "2020-10-24T10:47:59Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ae819463c21f6b746c3fc55a94abfc494a0963",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +3260,3264 @@    def loop(mods: List[Mod]): List[Mod] = token match {\n      case InlineSoftIdent() => mods\n      case _ if isParams && token.is[NonParamsModifier] => mods\n      case Unquote() => if (continueLoop) mods else loop(appendMod(mods, modifier()))\n      case Ellipsis(_) => loop(appendMod(mods, modifier()))"
  },
  {
    "id" : "c7d8a490-4701-46e7-be52-0cec7c594f5f",
    "prId" : 2143,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2143#pullrequestreview-512460482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beaf3881-da74-48eb-a0ab-adc6d4a0da02",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "good catch! :+1: ",
        "createdAt" : "2020-10-20T08:32:31Z",
        "updatedAt" : "2020-10-20T09:07:12Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6885a2a713ac180859f807ca1fc3155fa50b92e5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +296,300 @@            var sepRegionsProcess = sepRegionsParameter\n            while ((indentedRegion(sepRegionsProcess)\n                && sepRegionsProcess.head.indent > currentIndent && !isLeadingInfixOperator(\n                  curr\n                )) ||"
  },
  {
    "id" : "e70d177e-cddd-463b-b106-2a329099e508",
    "prId" : 2138,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2138#pullrequestreview-509360146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afef5006-f160-4007-87c9-7dfa3e2e91db",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "took me a minute to realize but very nice extraction of match to be used only once :+1:",
        "createdAt" : "2020-10-15T13:10:15Z",
        "updatedAt" : "2020-10-15T13:10:40Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "add8ef2dca199c3dd8e3cc141c115c930fc9fe04",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4385,4389 @@    if (mods forall {\n        case _: Mod.Implicit | _: Mod.Lazy | _: Mod.Inline | _: Mod.Annot => true; case _ => false\n      }) {\n      defOrDclOrSecondaryCtor(mods)\n    } else {"
  },
  {
    "id" : "a3fbb181-fd32-4ded-b4a9-79393b9b6873",
    "prId" : 2125,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2125#pullrequestreview-500910234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e873a224-6e46-4a06-9580-de3e74c7bc62",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Why not have it in one place only? Why do we need to forward it through all the functions?",
        "createdAt" : "2020-10-02T06:34:16Z",
        "updatedAt" : "2020-10-02T06:35:15Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "0fdbf2be-ad83-447f-a424-d9d3178ef208",
        "parentId" : "e873a224-6e46-4a06-9580-de3e74c7bc62",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "That's because it is not in all functions, even example in issue shows this:\r\n`F[_]` <- should fail\r\n`F[X[_]]` <- valid\r\nand this function is called recursively.",
        "createdAt" : "2020-10-02T07:20:55Z",
        "updatedAt" : "2020-10-02T07:20:56Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "6482f7c7-7ec7-4549-a815-d0cd439a9d15",
        "parentId" : "e873a224-6e46-4a06-9580-de3e74c7bc62",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Ok, thanks for the explanation!",
        "createdAt" : "2020-10-02T07:25:15Z",
        "updatedAt" : "2020-10-02T07:25:16Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ada4080249078ec88a81610c5bb23f06222ad0b",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +3835,3839 @@      ownerIsType = true,\n      ctxBoundsAllowed = true,\n      allowUnderscore = dialect.allowTypeParamUnderscore\n    )\n    val ctor = primaryCtor(OwnedByEnum)"
  },
  {
    "id" : "c72a0113-4b07-4c32-8e4e-5a9b8b2ae573",
    "prId" : 2105,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2105#pullrequestreview-458442429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daa8b194-6a00-4eda-9c35-320b202ce587",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Will this work in Scala 2.11.12? I think Either is right biased starting from 2.12.0",
        "createdAt" : "2020-07-30T10:29:04Z",
        "updatedAt" : "2020-08-03T07:22:11Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "4980c340-6ad7-488e-b28e-dec744201ca6",
        "parentId" : "daa8b194-6a00-4eda-9c35-320b202ce587",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "yeah test failed, will explicitly map right value",
        "createdAt" : "2020-07-30T14:14:33Z",
        "updatedAt" : "2020-08-03T07:22:11Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "57532ab9b7cd8acea3e7fe07fc7d45b3b6147dd2",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +433,437 @@    if (endTokenPos < startTokenPos) endTokenPos = startTokenPos - 1\n    val pos = TokenStreamPosition(startTokenPos, endTokenPos + 1)\n    result.map(_.withOrigin(Origin.Parsed(input, dialect, pos)).asInstanceOf[T])\n  }\n"
  },
  {
    "id" : "cc84c4b8-ca40-4358-a348-91902df16769",
    "prId" : 2105,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2105#pullrequestreview-459979041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af9ace49-f6b9-43d5-8412-0e2bfa5dad31",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "if we hadn't had to build it for 2.11, `fold` would have been ideal here, although our usage is also equivalent to `.map(...).getOrElse(...)`.",
        "createdAt" : "2020-08-03T12:19:12Z",
        "updatedAt" : "2020-08-03T12:19:12Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "57532ab9b7cd8acea3e7fe07fc7d45b3b6147dd2",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +2092,2096 @@        simpleExprRest(atPos(op, auto)(literal(isNegated = true)), canApply = true)\n      else {\n        simpleExpr0(allowRepeated = true) match {\n          case Success(result) => atPos(op, auto)(Term.ApplyUnary(op, result))\n          case Failure(_) =>"
  },
  {
    "id" : "63f3eaf9-bbce-48a7-8bb3-223a714efb2c",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-472249559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "443aba2f-379c-45f3-a196-7daeb2c3735a",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Why is this needed? I thought top level statements already did work.",
        "createdAt" : "2020-08-17T11:17:52Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d5a4eb18-a9c9-4af3-a070-57c5bc073908",
        "parentId" : "443aba2f-379c-45f3-a196-7daeb2c3735a",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "not perfectly, now they should work even better ;)",
        "createdAt" : "2020-08-21T06:58:53Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 926,
    "diffHunk" : "@@ -1,1 +3715,3719 @@        next()\n        objectDef(mods :+ atPos(casePos, casePos)(Mod.Case()))\n      case DefIntro() if dialect.allowToplevelStatements =>\n        defOrDclOrSecondaryCtor(mods)\n      case _ =>"
  },
  {
    "id" : "1e6057ac-33ef-416b-ade7-85a1f70b10ba",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-472520369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15b1074b-03ba-4eaf-bc44-8d328fc3f8a6",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Isn't this covered at line 276? Why is this needed with `)`?\r\n\r\nNot sure where the indent regions are closed aside from here and this seems to happen only on `)`",
        "createdAt" : "2020-08-25T13:02:34Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +358,362 @@          } else if (curr.is[RightParen]) {\n            var sepRegionsProcess = sepRegions\n            while (indentedRegion(sepRegionsProcess)) {\n              insertOutdent()\n              sepRegionsProcess = sepRegionsProcess.tail"
  },
  {
    "id" : "c3856c03-d703-47fd-b232-4557bdf1cd62",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-476451810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34c686d5-f4b6-4395-b199-da9d1f6946f0",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Does this mean we accept `then` even if significant indentation is not used?",
        "createdAt" : "2020-08-25T13:12:03Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "4d280817-8e7a-47d8-b6e5-3ca143048874",
        "parentId" : "34c686d5-f4b6-4395-b199-da9d1f6946f0",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "KwThen will only be emitted if significant indentation is used",
        "createdAt" : "2020-08-27T07:24:38Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 491,
    "diffHunk" : "@@ -1,1 +1874,1878 @@          }\n          newLinesOpt()\n          acceptOpt[KwThen]\n          (cond, exprMaybeIndented())\n        }"
  },
  {
    "id" : "13c98862-1313-46ab-b6ac-1659eecf520a",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-472520369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cc48a13-b574-4764-8ed0-7f54cb5eb812",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Shouldn't this also be `condExpr`",
        "createdAt" : "2020-08-25T13:23:05Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 561,
    "diffHunk" : "@@ -1,1 +1933,1937 @@          Term.While(cond, exprMaybeIndented())\n        } else {\n          val cond = expr()\n          acceptOpt[LF]\n          accept[KwDo]"
  },
  {
    "id" : "daec0ca9-4e87-40b2-a64a-893511b385ee",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-495553785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "114425d9-748c-4abc-bc0a-fa9e7646d3ab",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "What case is it solving?",
        "createdAt" : "2020-09-23T15:00:43Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "3a08da88-57b9-48fa-85d0-56ced8e9d030",
        "parentId" : "114425d9-748c-4abc-bc0a-fa9e7646d3ab",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "https://dotty.epfl.ch/docs/reference/other-new-features/indentation.html\r\n`the first token on the next line is not a leading infix operator.`",
        "createdAt" : "2020-09-24T13:11:49Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +407,411 @@          sepRegionsParameter.head.isInstanceOf[RegionIndentEnum])) {\n\n          if (isLeadingInfixOperator(next)) {\n            loop(prevPos, nextPos, sepRegionsParameter, expectedIndent, shouldStartIndent)\n          } else {"
  },
  {
    "id" : "aba6ad8e-9b9c-4eb0-927f-827bccd82317",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497035944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be49563b-99e5-4dd3-84e3-0c2138ce3546",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This is the default so maybe let's leave out `Parameter`\r\n```suggestion\r\n        sepRegions: List[SepRegion],\r\n```",
        "createdAt" : "2020-09-25T13:29:39Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d0f67c3b-f67b-43be-9f8c-2426875f5745",
        "parentId" : "be49563b-99e5-4dd3-84e3-0c2138ce3546",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "it would clash with sepRegions defined below",
        "createdAt" : "2020-09-26T22:49:27Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +232,236 @@        prevPos: Int,\n        currPos: Int,\n        sepRegionsParameter: List[SepRegion],\n        previousTokenIndent: Int,\n        previousTokenStartIndent: Boolean"
  },
  {
    "id" : "c164ff27-4f21-48de-9294-7e9fb37cdd1a",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497036084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23dfa7a0-60b4-4bf5-b8a3-63d4bdd7309a",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "why is this true? The function checks `isAheadNewLine`, `:` doesn't seem to imply the same.",
        "createdAt" : "2020-09-25T15:25:45Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "2346ceb5-46f2-44a6-9158-4a83a37d225f",
        "parentId" : "23dfa7a0-60b4-4bf5-b8a3-63d4bdd7309a",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "ColonEol also contains LF",
        "createdAt" : "2020-09-26T22:53:26Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +456,460 @@  private def isAheadNewLine(currentPosition: Int): Boolean = {\n    val nextPos = currentPosition + 1\n    if (scannerTokens(currentPosition).is[ColonEol]) true\n    else if (nextPos >= scannerTokens.length) false\n    else if (scannerTokens(nextPos).is[LF]) true"
  },
  {
    "id" : "c1cb1ce9-0ad9-4410-8b3b-93f063516395",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497061027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24b88504-1db0-4c71-8aff-7596d0a21b82",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should we check if significant indentation is supported here?",
        "createdAt" : "2020-09-25T15:53:49Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d6d88071-0762-415e-a949-821b16db3a42",
        "parentId" : "24b88504-1db0-4c71-8aff-7596d0a21b82",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "we checked in if above",
        "createdAt" : "2020-09-27T08:02:14Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 561,
    "diffHunk" : "@@ -1,1 +1933,1937 @@          Term.While(cond, exprMaybeIndented())\n        } else {\n          val cond = expr()\n          acceptOpt[LF]\n          accept[KwDo]"
  },
  {
    "id" : "c4e8111d-7650-481f-a1ad-33274b8f4f66",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-498666475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3db4693-998a-4fec-acdf-805fa953c291",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "why is this needed? We are already inside cases, so everything should work as previously.",
        "createdAt" : "2020-09-25T16:11:24Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d89e2976-2b57-4d9f-bbb5-ef54d5bc9db6",
        "parentId" : "d3db4693-998a-4fec-acdf-805fa953c291",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "okay, so parsing seq of stats is based on a loop: \r\n`while(CanStartStat) { parseStat; parseSep }`\r\nmatch-case old version always ends with `}` + LF\r\nmatch-case new version might only end with Outdent.\r\nI add LF artificially (you can see `insertOutdent()` + insertLF in code) to meet previous assumptions.\r\n\r\nBut I tried remove this line, remove adding LF after Outdent and add checking in `parseSep` if maybe previous token was Outdent, but I failed and in so many weird places I dropped this idea.",
        "createdAt" : "2020-09-28T07:10:59Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "47888824-44d3-47d0-8e38-56d97f997b2c",
        "parentId" : "d3db4693-998a-4fec-acdf-805fa953c291",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Tried to work around it to see if we will get a bigger problem and I think this is the best we can do. Let's leave it.",
        "createdAt" : "2020-09-29T16:22:36Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 667,
    "diffHunk" : "@@ -1,1 +2614,2618 @@        cases += caseClause()\n      }\n      if (token.is[LF] && ahead(token.is[CaseIntro])) accept[LF]\n    }\n    if (cases.isEmpty) // trigger error if there are no cases"
  },
  {
    "id" : "100d3836-9562-4b9c-9f66-8a6f5685ac64",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497057628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "035549e4-7e7d-4904-991d-7395ff1442b2",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should we add Outdent to StatSep ?",
        "createdAt" : "2020-09-25T16:11:55Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "25839ed6-05a4-4607-91d8-f1df904e16e2",
        "parentId" : "035549e4-7e7d-4904-991d-7395ff1442b2",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "no because it is not StatSep, similarly ro Brace.",
        "createdAt" : "2020-09-27T07:07:42Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 676,
    "diffHunk" : "@@ -1,1 +2629,2633 @@    val enums = new ListBuffer[Enumerator]\n    enums ++= enumerator(isFirst = true)\n    while (token.is[StatSep] && !ahead(token.is[Indentation.Outdent])) {\n      next()\n      enums ++= enumerator(isFirst = false)"
  },
  {
    "id" : "f3f89cdd-9c49-4c21-9cf3-8f642566e3e8",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497399305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a8329b8-2cc8-4e3d-8b7c-1cc4a7d97c50",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Do we need ident here? This should just be a temporary token, that we switch to RegionBrace later and we would calculate ident there.",
        "createdAt" : "2020-09-28T11:06:09Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +204,208 @@  case object RegionBracket extends SepRegion\n  case class RegionBrace(override val indent: Int) extends SepRegion\n  case class RegionEnum(override val indent: Int) extends SepRegion\n  case class RegionIndentEnum(override val indent: Int) extends SepRegion\n  case object RegionArrow extends SepRegion"
  },
  {
    "id" : "6c93f93f-e781-43cd-b4a0-6ce54a16f9fe",
    "prId" : 2104,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2104#pullrequestreview-497399305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c154d6cb-9188-4f11-b666-fd4f9c7e2358",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should `previousTokenIndent` not be enough for us in this case?",
        "createdAt" : "2020-09-28T11:06:56Z",
        "updatedAt" : "2020-09-30T16:20:26Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda6140f18cfdd322470f06e9c7b5a6fdee0156",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +203,207 @@  case object RegionParen extends SepRegion\n  case object RegionBracket extends SepRegion\n  case class RegionBrace(override val indent: Int) extends SepRegion\n  case class RegionEnum(override val indent: Int) extends SepRegion\n  case class RegionIndentEnum(override val indent: Int) extends SepRegion"
  },
  {
    "id" : "2e966c89-ba06-401d-92a2-d3dcdf3f9bf8",
    "prId" : 2032,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2032#pullrequestreview-445939839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0638f377-043f-4a55-9ab1-4bd27b9c0fcf",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Judging by the diff in scalac, we need to change how the body is parsed https://github.com/scala/scala/pull/8071/files#diff-e059ce64777235990044f1624042e5d0R1518\r\n\r\n<img width=\"762\" alt=\"Screenshot 2020-04-27 at 08 27 21\" src=\"https://user-images.githubusercontent.com/1408093/80350955-04aeef00-8861-11ea-9b14-1e54871b9d9f.png\">\r\n",
        "createdAt" : "2020-04-27T08:28:22Z",
        "updatedAt" : "2020-07-09T23:05:12Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "74df2ef0-f66e-4d19-bfdb-d51955965a83",
        "parentId" : "0638f377-043f-4a55-9ab1-4bd27b9c0fcf",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "done. added link to dialect.",
        "createdAt" : "2020-07-09T20:20:33Z",
        "updatedAt" : "2020-07-09T23:05:12Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a45ccc26d7015d6c1128a4e1d7c38d7635c74be",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1604,1608 @@      case KwTry() =>\n        next()\n        val body: Term = token match {\n          case _ if dialect.allowTryWithAnyExpr => expr()\n          case LeftBrace() => autoPos(inBracesOrUnit(block()))"
  },
  {
    "id" : "8cbc00ac-09db-489a-9649-3933e1ac35e7",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-418075932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9082e65-5c62-4d57-9b63-7e6c3d898b2d",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Can we move it next to `parsedImplicits` so that it's easier to see that we are using the same mechanism here.",
        "createdAt" : "2020-05-25T16:02:27Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "1ecde733-cc88-4f3f-b62d-aadd961b40c5",
        "parentId" : "a9082e65-5c62-4d57-9b63-7e6c3d898b2d",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "having it here is better because this scope is only inside defined method.\r\nFor `parsedImplicits` it is a little more complex as you declare it globally but set inside function, very hard to read",
        "createdAt" : "2020-05-26T08:25:20Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 473,
    "diffHunk" : "@@ -1,1 +2816,2820 @@        List(ellipsis(2, astInfo[Term.Param]))\n      case _ =>\n        var parsedUsing = false\n        if (token.is[KwImplicit]) {\n          next()"
  },
  {
    "id" : "8ac390db-a653-40a4-8e83-fe9119b46f17",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419139377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9f01495-e7c0-46ee-86df-be2cdf10a852",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should it not be an error if we don't have `on` ?",
        "createdAt" : "2020-05-25T16:30:12Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "5cd51cc4-b5e5-4c7f-8087-661e82bf8b65",
        "parentId" : "d9f01495-e7c0-46ee-86df-be2cdf10a852",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Extension block can be defined without 'on'",
        "createdAt" : "2020-05-27T12:26:29Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 658,
    "diffHunk" : "@@ -1,1 +3233,3237 @@      (tparams, eparam, sparams)\n    } else {\n      (Nil, Term.Param(Nil, meta.Name.Anonymous(), None, None), Nil)\n    }\n"
  },
  {
    "id" : "8f63d46a-321d-4711-b5b0-3313b3348abd",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419143500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f713354f-ecfc-4b17-950a-ad931bd54241",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "We should just run `baseTermDefinedOnce` first and we wouldn't need to check  `ExtensionMethod` and  `ExtensionMethodInfix`",
        "createdAt" : "2020-05-25T16:39:42Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "8f9749f5-3f97-4818-a5ca-e84951604c5f",
        "parentId" : "f713354f-ecfc-4b17-950a-ad931bd54241",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "they check different things.\r\nOne check is that eparam can be only defined in extension group or all methods, like XOR :D",
        "createdAt" : "2020-05-27T12:30:50Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "ed0f4401-3d9a-40dd-9d32-1082c20e237d",
        "parentId" : "f713354f-ecfc-4b17-950a-ad931bd54241",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "second that type parameters [X, Y] can be defined also only in one place",
        "createdAt" : "2020-05-27T12:31:34Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 678,
    "diffHunk" : "@@ -1,1 +3253,3257 @@      if (eg.tparams.nonEmpty) {\n        for (f <- eg.templ.stats) {\n          if (f.is[Defn.ExtensionMethod]) {\n            val m = f.asInstanceOf[Defn.ExtensionMethod]\n            if (m.tparams.nonEmpty) {"
  },
  {
    "id" : "74f47dc8-7109-4e1e-866b-69146292f55b",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419147671",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "250ef69c-0f72-4734-b88f-5072a7b43330",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Why do we need this?",
        "createdAt" : "2020-05-25T17:04:57Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "3b38ae95-0f42-4c81-bf2d-bc806a8cc48c",
        "parentId" : "250ef69c-0f72-4734-b88f-5072a7b43330",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "dotty craziness :)\r\n```\r\nscala> extension c {\r\n     |   def (s: String) >>LF HERE>>\r\n     |     show(): String = s\r\n     | }\r\n```",
        "createdAt" : "2020-05-27T12:36:36Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 752,
    "diffHunk" : "@@ -1,1 +3327,3331 @@    accept[RightParen]\n\n    acceptOpt[LF]\n    val isInfix = token.isNot[Dot]\n    acceptOpt[Dot]"
  },
  {
    "id" : "54df99ee-4dca-4f35-90b2-ea3c030a1933",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-421891020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b0fed90-c170-498f-bc2d-d6147c9c7559",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Maybe this could be a bit more readable and we would lose the additional allocation:\r\n```scala\r\nif (isSoftKw(token, SoftKeyword.SkUsing) && dialect.allowGivenUsing) {\r\n  next()\r\n  Term.ApplyUsing(t, commaSeparated(argumentExpr()))  \r\n} else {\r\n  Term.Apply(t, argumentExprs())\r\n}\r\n```",
        "createdAt" : "2020-06-01T10:21:26Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "b0610b4c-e5ec-4ad8-b888-9719cdabe580",
        "parentId" : "7b0fed90-c170-498f-bc2d-d6147c9c7559",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "changed :+1:",
        "createdAt" : "2020-06-01T12:44:43Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "3a2b4431-f347-4e44-9c80-2d676a6fb366",
        "parentId" : "7b0fed90-c170-498f-bc2d-d6147c9c7559",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Tests failed.\r\nit cannot work, you are in `case LeftParen() | LeftBrace() if (canApply) =>`\r\nYou will never be `SkUsing` in that case.\r\n\r\nReverting.",
        "createdAt" : "2020-06-01T13:14:36Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "5a63fd95-51b3-4d2a-975c-867a85825c2c",
        "parentId" : "7b0fed90-c170-498f-bc2d-d6147c9c7559",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Maybe then:\r\n```scala\r\n  def argumentExprs(isUsing: () => Unit = () => ()): List[Term] = {\r\n    token match {\r\n      case LeftBrace() =>\r\n        List(blockExpr())\r\n      case LeftParen() =>\r\n        inParens(token match {\r\n          case RightParen() =>\r\n            Nil\r\n          case tok: Ellipsis if tok.rank == 2 =>\r\n            List(ellipsis(2, astInfo[Term]))\r\n          case _ =>\r\n            if (isSoftKw(token, SoftKeyword.SkUsing) && dialect.allowGivenUsing) {\r\n              next()\r\n              isUsing()\r\n            }\r\n            commaSeparated(argumentExpr)\r\n        })\r\n      case _ =>\r\n        Nil\r\n    }\r\n  }\r\n``` \r\n\r\nand then:\r\n\r\n```scala\r\n        val arguments = atPos(t, auto) {\r\n          var isUsing = false\r\n          def using() = { isUsing = true }\r\n          val args = argumentExprs(using)\r\n          if (isUsing) Term.ApplyUsing(t, args)\r\n          else Term.Apply(t, args)\r\n        }\r\n```\r\n\r\n?",
        "createdAt" : "2020-06-01T14:29:41Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 357,
    "diffHunk" : "@@ -1,1 +2158,2162 @@      case LeftParen() | LeftBrace() if (canApply) =>\n        val arguments = atPos(t, auto) {\n          argumentExprsWithUsing() match {\n            case (args, true) => Term.ApplyUsing(t, args)\n            case (args, false) => Term.Apply(t, args)"
  },
  {
    "id" : "f278ed4a-2d9d-446b-8458-772b39a4e80f",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-421850352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91d16c97-a362-45df-a6a3-1edc189491e4",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This should in theory be the same logic as implicit, why is it different?",
        "createdAt" : "2020-06-01T10:38:20Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "020c84ce-4a05-4d49-bcf5-7b0ffa01bcd5",
        "parentId" : "91d16c97-a362-45df-a6a3-1edc189491e4",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "I think implicits cannot be anonymous, at least that was my assumption",
        "createdAt" : "2020-06-01T12:36:17Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "08c1bab1-4f12-415b-b05f-0391d31a10e8",
        "parentId" : "91d16c97-a362-45df-a6a3-1edc189491e4",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Yup, confirmed",
        "createdAt" : "2020-06-01T12:36:49Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "2edad330-be8a-4963-bf8b-913ca9b51798",
        "parentId" : "91d16c97-a362-45df-a6a3-1edc189491e4",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Ach right! It's a totally different syntax for annonymous implicits via [A: ClassTag] etc.",
        "createdAt" : "2020-06-01T13:40:11Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +2896,2900 @@      case _ =>\n        var anonymousUsing = false\n        val name = if (isUsing && ahead(!token.is[Colon])) { //anonymous using\n          anonymousUsing = true\n          meta.Name.Anonymous()"
  },
  {
    "id" : "4e22660a-38f7-4ad8-b1d0-449407788cf7",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-427129292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b476f2f1-060b-49f3-a0f9-a4ef9f17afd5",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "```suggestion\r\n      case InlineSoftIdent() => mods\r\n```\r\notherwise we are suggesting we are not doing anything about those modifiers.",
        "createdAt" : "2020-06-09T12:52:48Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d53e4d0e-4cee-4a82-ba31-d941c7dba18f",
        "parentId" : "b476f2f1-060b-49f3-a0f9-a4ef9f17afd5",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : ":+1:",
        "createdAt" : "2020-06-09T13:13:15Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 450,
    "diffHunk" : "@@ -1,1 +2769,2773 @@      )\n    def loop(mods: List[Mod]): List[Mod] = token match {\n      case InlineSoftModifier() => mods\n      case Unquote() => if (continueLoop) mods else loop(appendMod(mods, modifier()))\n      case Ellipsis(_) => loop(appendMod(mods, modifier()))"
  },
  {
    "id" : "6b1f9881-bde7-4487-be40-5c3e51fbad14",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-428140726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acf3065a-8887-44dc-9c26-d08f01481e5a",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "```suggestion\r\n    if (isInlineSoftKw(token) && ahead(token.is[Ident] || DclIntro.unapply(token) || Modifier.unapply(token))) {\r\n```\r\n?\r\n\r\nOr we could create a separate function like: \r\n```scala\r\nahead{\r\n  case _ : Ident | DclIntro() | Modifier() => true\r\n  case _ => false\r\n}\r\n```",
        "createdAt" : "2020-06-09T12:55:27Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "bad7c256-f23f-44d8-b379-19e0faa799b2",
        "parentId" : "acf3065a-8887-44dc-9c26-d08f01481e5a",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "you wanted to add this comment to `inlineDefOrOpaque` piece of code not `methodParamModifiers`, right?",
        "createdAt" : "2020-06-09T13:17:56Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "58a582ff-3dcb-4ebc-b0d7-2af090a89df2",
        "parentId" : "acf3065a-8887-44dc-9c26-d08f01481e5a",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Hmm... yeah this might not be an issue. It might make sense to have `Modifier.unapply(token)` if at any point we have`inline other_modifier param`, but currently we might just leave it as is.",
        "createdAt" : "2020-06-09T13:43:16Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "157cd0c7-c82e-494b-b950-18e2326ad8b6",
        "parentId" : "acf3065a-8887-44dc-9c26-d08f01481e5a",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "ok",
        "createdAt" : "2020-06-10T14:55:22Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 459,
    "diffHunk" : "@@ -1,1 +2780,2784 @@\n  def methodParamModifiers(): List[Mod] = {\n    if (isInlineSoftKw(token) && ahead(token.is[Ident])) {\n      List(modifier())\n    } else {"
  },
  {
    "id" : "9d299948-f520-4298-8447-3a869469c4bc",
    "prId" : 2008,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2008#pullrequestreview-379664026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4b06f43-ad66-4447-96d1-9bda7a9d4839",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "This will also allocate a new list, but you can avoid that by making it an iterator first",
        "createdAt" : "2020-03-23T12:02:50Z",
        "updatedAt" : "2020-04-28T14:12:15Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "d3541f44-b4b4-4f79-b8f7-88e6dbb688a7",
        "parentId" : "a4b06f43-ad66-4447-96d1-9bda7a9d4839",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "good catch with this allocation, I will try use `iterator` ",
        "createdAt" : "2020-03-23T13:45:50Z",
        "updatedAt" : "2020-04-28T14:12:15Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "c9dbd4d4-c5d1-43d9-91bf-f7d1d530d8d5",
        "parentId" : "a4b06f43-ad66-4447-96d1-9bda7a9d4839",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "changed to iterator :+1:",
        "createdAt" : "2020-03-23T17:34:49Z",
        "updatedAt" : "2020-04-28T14:12:15Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1eedb4ba2ce047aa874b408f69db9d8c51054e90",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3001,3005 @@    def onlyLastParameterCanBeRepeated(params: List[Term.Param]): Unit = {\n      params.iterator\n        .take(params.length - 1)\n        .filter(p => !p.is[Term.Param.Quasi] && p.decltpe.exists(_.is[Type.Repeated]))\n        .foreach(p => syntaxError(\"*-parameter must come last\", p))"
  },
  {
    "id" : "633d3349-152a-494f-b714-9d2cf248c960",
    "prId" : 2005,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2005#pullrequestreview-376265756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55baec6c-f821-444d-bd0d-2ca1d05673a6",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "What happens if there are multiple `LF`?",
        "createdAt" : "2020-03-17T16:32:58Z",
        "updatedAt" : "2020-03-17T16:33:07Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "fd3e68e5-6c3b-4b18-9046-07ac030118a7",
        "parentId" : "55baec6c-f821-444d-bd0d-2ca1d05673a6",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "it will generate `LFLF` which is invalid in this scenario",
        "createdAt" : "2020-03-17T17:44:47Z",
        "updatedAt" : "2020-03-17T17:44:48Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfbd45b4f85feb4db85cc30d56030dbb9041521d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +330,334 @@  }\n  @inline final def inBracesOrError[T](body: => T, alt: T): T = {\n    if (token.is[LF]) { accept[LF] }\n    if (token.is[LeftBrace]) inBraces(body)\n    else {"
  },
  {
    "id" : "3f303097-ad14-41b3-9cb6-4610fff98fcd",
    "prId" : 1004,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1004#pullrequestreview-49156381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe118569-ae20-407e-af57-b43b4322c3d9",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This looks weird.",
        "createdAt" : "2017-07-07T16:29:48Z",
        "updatedAt" : "2017-07-07T16:34:01Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "879fbb4d-9e5a-4c4a-bd01-bb433807b6ce",
        "parentId" : "fe118569-ae20-407e-af57-b43b4322c3d9",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "This is a known issue https://github.com/scalacenter/scalafix/issues/216 due to be fixed in the next release.",
        "createdAt" : "2017-07-11T07:37:37Z",
        "updatedAt" : "2017-07-11T07:37:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "97058b85-f31b-40d0-940b-3aca939774b8",
        "parentId" : "fe118569-ae20-407e-af57-b43b4322c3d9",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Fix pending in https://github.com/scalacenter/scalafix/pull/245 the rewrite has limitations for how much it can preserve formatting, it adds a lot of complexity to the rewrite. Ideally we should be using scalafmt to clean up stuff like this. ",
        "createdAt" : "2017-07-11T10:39:03Z",
        "updatedAt" : "2017-07-11T10:39:03Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "0073bff1bbfcb08a17e49392edf1f66286f9d9df",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +6,10 @@import scala.compat.Platform.EOL\nimport scala.reflect.{ClassTag, classTag}\nimport scala.collection. mutable \nimport mutable. ListBuffer \nimport scala.annotation.tailrec"
  },
  {
    "id" : "5e66ce0c-2b5a-44a3-a033-57e43d7eabec",
    "prId" : 1004,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1004#pullrequestreview-48654166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4aa0e2b-b039-4a77-841a-1870dd970952",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "This, too.",
        "createdAt" : "2017-07-07T16:29:55Z",
        "updatedAt" : "2017-07-07T16:34:01Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0073bff1bbfcb08a17e49392edf1f66286f9d9df",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +7,11 @@import scala.reflect.{ClassTag, classTag}\nimport scala.collection. mutable \nimport mutable. ListBuffer \nimport scala.annotation.tailrec\nimport scala.collection.immutable._"
  },
  {
    "id" : "4b02668f-6f24-4cd2-88eb-a1f060f58af3",
    "prId" : 906,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/906#pullrequestreview-41725950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd38ccac-1057-4568-b8f2-588422282fbb",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I don't know if `typRest` is a good name or not, wdyt @xeno-by ?",
        "createdAt" : "2017-05-31T14:49:38Z",
        "updatedAt" : "2017-06-02T21:20:34Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9e8cc181-7e80-4557-853c-a247f35e98b1",
        "parentId" : "cd38ccac-1057-4568-b8f2-588422282fbb",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Sounds allright.",
        "createdAt" : "2017-06-02T09:08:14Z",
        "updatedAt" : "2017-06-02T21:20:34Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e6c4ba620af1bd214b9553c80f8eeef51e95f47",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1011,1015 @@    }\n\n    def typRest(): Type = autoPos {\n      val t: Type =\n        if (token.is[LeftParen]) tupleInfixType()"
  },
  {
    "id" : "b2a18159-bb8a-47d5-bff8-86e35bf3b99a",
    "prId" : 906,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/906#pullrequestreview-41725950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7889f73-f7a7-47cf-b4de-b0104974801a",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "What about the position for this tree?",
        "createdAt" : "2017-06-02T09:07:51Z",
        "updatedAt" : "2017-06-02T21:20:34Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e6c4ba620af1bd214b9553c80f8eeef51e95f47",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1002,1006 @@        typRest() match {\n          case Type.Function(params, body) =>\n            Type.ImplicitFunction(params, body)\n          case t =>\n            syntaxError(\"function type expected\", at = t)"
  }
]