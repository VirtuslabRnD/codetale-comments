[
  {
    "id" : "f65601a2-4a86-433a-bb9e-f63812851268",
    "prId" : 2193,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2193#pullrequestreview-548391265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78faa020-ea44-4099-836b-396a0ee999ab",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "do we need to wrap this in an instance? wouldn't this work, with implicit:\r\n```\r\n  object SoftKw {\r\n    @classifier\r\n    trait Using {\r\n      def unapply(token: Token)(implicit dialect: Dialect): Boolean = {\r\n        dialect.allowGivenUsing && isSoftKw(token, \"using\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // somewhere else\r\n  token.is[SoftKw.Using]\r\n```",
        "createdAt" : "2020-12-09T16:44:38Z",
        "updatedAt" : "2020-12-10T10:25:13Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "f9dfa194-1a14-4063-88e5-18de2c446442",
        "parentId" : "78faa020-ea44-4099-836b-396a0ee999ab",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Tried it and it does not recognize it as an unapply method :/",
        "createdAt" : "2020-12-09T16:53:41Z",
        "updatedAt" : "2020-12-10T10:25:13Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcfb286b85006520a9aaaeea249de1625c0085b3",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@import scala.meta.internal.classifiers.classifier\n\nclass SoftKeywords(dialect: Dialect) {\n\n  import ScalametaParser.isIdentAnd"
  }
]