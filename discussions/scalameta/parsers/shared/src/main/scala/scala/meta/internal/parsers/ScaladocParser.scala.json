[
  {
    "id" : "c33577f4-e6b6-4aed-9b26-b7d0e4423cbc",
    "prId" : 2259,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2259#pullrequestreview-600589006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a02c0977-c62c-4424-aae9-8025a387c29c",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "what is the significance of this `[_: P]` construct?",
        "createdAt" : "2021-02-26T17:37:57Z",
        "updatedAt" : "2021-03-02T16:13:30Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "bbc7e27b-5529-4382-a6fb-61f043d29f74",
        "parentId" : "a02c0977-c62c-4424-aae9-8025a387c29c",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "That's an implicit parameter of type `P[_]`, which I think is a replacement of `Parser` from v1. It's needed for most operations on the parser.",
        "createdAt" : "2021-03-01T10:31:31Z",
        "updatedAt" : "2021-03-02T16:13:30Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "e772b2893885c31ddbf7bb5d77f0931ae4e38da9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +25,29 @@    (Index ~ hspacesMin(min) ~ Index).map { case (b, e) => e - b }\n\n  private def nl[_: P]: P0 = P(\"\\n\")\n  private def startOrNl[_: P] = nl | Start\n  private def paraEnd[_: P] = nl.rep(exactly = 2)"
  },
  {
    "id" : "95ea4608-b134-49c9-8a35-a6d707db7c39",
    "prId" : 2059,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2059#pullrequestreview-423463178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02fa38f6-7de2-4d3b-8233-c2580fd843f7",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Do we know `x` is always non-empty?",
        "createdAt" : "2020-06-03T11:28:26Z",
        "updatedAt" : "2020-06-03T16:38:20Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "78a11d2d-111d-4ca6-b5ba-5f4772d65dcf",
        "parentId" : "02fa38f6-7de2-4d3b-8233-c2580fd843f7",
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "i will add a test but if i read the `.rep(2)` above correctly, it should have at least 2 elements.",
        "createdAt" : "2020-06-03T11:36:16Z",
        "updatedAt" : "2020-06-03T16:38:20Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      }
    ],
    "commit" : "0895807bdd03f35efd545e4d45a450d65e089033",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +164,168 @@    val table = row.rep(2, sep = sep).map { x =>\n      // we'll trim the header later; we might need it if align is missing\n      val rest = x.tail.map(_.map(_.trim))\n      val alignRow = rest.head\n      val align = alignRow.flatMap(toAlign).toSeq"
  }
]