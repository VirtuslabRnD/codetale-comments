[
  {
    "id" : "f1b7f5cc-2f58-4809-aa54-576e108fda26",
    "prId" : 1190,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1190#pullrequestreview-82623847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "529750d5-1179-4064-9012-c3ecd23841ca",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Is this cache cleared anywhere?",
        "createdAt" : "2017-12-11T20:05:33Z",
        "updatedAt" : "2017-12-11T20:17:35Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "5c360326-ca90-47be-8296-4252c94ce42a",
        "parentId" : "529750d5-1179-4064-9012-c3ecd23841ca",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Good point.",
        "createdAt" : "2017-12-11T20:14:58Z",
        "updatedAt" : "2017-12-11T20:17:35Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "609f6a05ed70bda51555ea7c074ea5dad6de0573",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +89,93 @@      } else {\n        val msym = uncached(sym)\n        symbolCache.put(sym, msym)\n        msym\n      }"
  },
  {
    "id" : "d0996700-69d4-4f14-a34a-13ea74687898",
    "prId" : 1190,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1190#pullrequestreview-83173643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63b40656-ba11-4179-92c9-828b48c1c5b4",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Can we keep the original function unchanged except named `toSemanticUncached` and then create new `toSemantic` that uses caching? I feel it's difficult to follow the logic when the nesting is too deep. The big diff also makes it harder to review this change.",
        "createdAt" : "2017-12-11T23:09:59Z",
        "updatedAt" : "2017-12-11T23:10:16Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "fa784962-c6e1-4e9c-988e-896e094374aa",
        "parentId" : "63b40656-ba11-4179-92c9-828b48c1c5b4",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Nevermind, I want to edit this method to fix #1194 ",
        "createdAt" : "2017-12-13T13:43:00Z",
        "updatedAt" : "2017-12-13T13:43:24Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "609f6a05ed70bda51555ea7c074ea5dad6de0573",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@  lazy val symbolCache = new HashMap[g.Symbol, m.Symbol]\n  implicit class XtensionGSymbolMSymbol(sym: g.Symbol) {\n    def toSemantic: m.Symbol = {\n      def uncached(sym: g.Symbol): m.Symbol = {\n        if (sym == null || sym == g.NoSymbol) return m.Symbol.None"
  }
]