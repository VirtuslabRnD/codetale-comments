[
  {
    "id" : "55afcf3c-07c2-44d6-97e2-345a06bfcde7",
    "prId" : 748,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/748#pullrequestreview-27151604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d305946-3f24-426e-b768-f8fd2137f0af",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Neat!",
        "createdAt" : "2017-03-15T18:07:52Z",
        "updatedAt" : "2017-03-15T22:11:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ebedc4580ffc91ea45155279b688f37f0c43b95",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +229,233 @@  def unapply(arg: String): Option[Symbol] =\n    scala.util.Try(apply(arg)).toOption\n}\n\n@root trait Signature {"
  },
  {
    "id" : "68ad1959-a420-4d16-9868-8d7688a19f43",
    "prId" : 680,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/680#pullrequestreview-21702785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b086facb-7190-4718-89d8-c355ad63859d",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Why not unsupported like for None?",
        "createdAt" : "2017-02-14T09:09:05Z",
        "updatedAt" : "2017-02-14T09:27:00Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "95d92c14-0b75-49d8-b3bc-e7d45cfa54c8",
        "parentId" : "b086facb-7190-4718-89d8-c355ad63859d",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Aha, because it's \"not yet implemented\" as opposed to \"it won't be implemented\". Nevermind",
        "createdAt" : "2017-02-14T09:26:05Z",
        "updatedAt" : "2017-02-14T09:27:00Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73a8ace2ee18ab80d1f5341c5ab19672d924b71",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +44,48 @@    override def syntax = s\"${addr.syntax}@$start..$end\"\n    override def structure = s\"\"\"Symbol.Local(${addr.structure}, $start, $end)\"\"\"\n    override def name: Name = ???\n    override def fullName: Ref = ???\n  }"
  },
  {
    "id" : "9534a6bd-fb79-41ee-9d69-e2f1aa8c2031",
    "prId" : 680,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/680#pullrequestreview-21702785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a488004-9380-4fb3-9089-ed893941172f",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Can we try to avoid using `return` in the future? I never use it myself, took me a while to understand where this line even returns to.",
        "createdAt" : "2017-02-14T09:11:01Z",
        "updatedAt" : "2017-02-14T09:34:26Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "7f891fc4-47aa-4dee-9769-a64f06740be7",
        "parentId" : "7a488004-9380-4fb3-9089-ed893941172f",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Also, why `scala.None` instead of `None`?",
        "createdAt" : "2017-02-14T09:24:03Z",
        "updatedAt" : "2017-02-14T09:27:00Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "c73a8ace2ee18ab80d1f5341c5ab19672d924b71",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +67,71 @@        val nameChain = ownerChain(this).map {\n          case Symbol.Global(_, Signature.Term(name)) => name\n          case _ => return scala.None\n        }\n        def loop(names: List[String]): Option[Term.Ref] = names match {"
  }
]