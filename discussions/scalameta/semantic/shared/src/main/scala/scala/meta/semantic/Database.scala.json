[
  {
    "id" : "4c2519a5-78ee-45c2-9da1-8f9ba5d7c70a",
    "prId" : 868,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/868#pullrequestreview-39362506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "753fdfe1-87ba-4ca6-87b5-1a104cb679b5",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why does this compile?",
        "createdAt" : "2017-05-21T16:15:08Z",
        "updatedAt" : "2017-05-22T14:55:08Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "76b54fe1-2e05-48f6-b920-3e07ac52e7c9",
        "parentId" : "753fdfe1-87ba-4ca6-87b5-1a104cb679b5",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I have removed Sourcepath.",
        "createdAt" : "2017-05-21T19:23:46Z",
        "updatedAt" : "2017-05-22T14:55:08Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "986139dd74528943167a02f94308884192d7490b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +34,38 @@\nobject Database {\n  def load(classpath: Classpath, sourcepath: Sourcepath): Database = {\n    v.Database.load(classpath).toSchema.toMeta(Some(sourcepath))\n  }"
  },
  {
    "id" : "e003d2b2-9cce-4434-a786-f56107b62db8",
    "prId" : 868,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/868#pullrequestreview-39366600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "041caee6-ba72-471f-8b85-e8d736ff6e28",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "How about we add another overload that takes `(classpath: Classpath)`, i.e operates exactly like `Array[Byte]`, but without its users having to know things like `META-INF`?",
        "createdAt" : "2017-05-21T21:53:21Z",
        "updatedAt" : "2017-05-22T14:55:08Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "986139dd74528943167a02f94308884192d7490b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +36,40 @@  def load(classpath: Classpath, sourcepath: Sourcepath): Database = {\n    v.Database.load(classpath).toSchema.toMeta(Some(sourcepath))\n  }\n  def load(classpath: Classpath): Database = {\n    v.Database.load(classpath).toSchema.toMeta(None)"
  },
  {
    "id" : "72cbbc26-84c8-435a-839f-f4ad83bf6808",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35246595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f0da2e-7cd4-4c6a-a696-49921178a511",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "On the topic of making this api safer, what do you think about making this return a `Try[Database]`? It's not really exceptional that a random blob of bytes does not parse into a `Database`.",
        "createdAt" : "2017-04-21T08:28:19Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9e9bc8c5-3d13-40df-8535-f47e07fdf4a4",
        "parentId" : "46f0da2e-7cd4-4c6a-a696-49921178a511",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Later, I will write one megacomment about my thoughts wrt exceptions/monads for error handling.",
        "createdAt" : "2017-04-27T23:21:22Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@  }\n\n  def fromBinary(bytes: Array[Byte]): Database = p.Database.parseFrom(bytes).toMeta[Database]\n  def fromFile(file: File): Database = {\n    val databaseEntries = mutable.ListBuffer[URI]()"
  },
  {
    "id" : "ebcbf8a8-76b5-4a80-b748-3dc5e44192f5",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35246607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff10dacf-372f-4eab-952b-9b3fb7a6b303",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Same here, the file may not even exist.",
        "createdAt" : "2017-04-21T08:28:36Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "3d76b326-76dd-4dae-897b-902f8a723b8a",
        "parentId" : "ff10dacf-372f-4eab-952b-9b3fb7a6b303",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Same here.",
        "createdAt" : "2017-04-27T23:21:25Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@\n  def fromBinary(bytes: Array[Byte]): Database = p.Database.parseFrom(bytes).toMeta[Database]\n  def fromFile(file: File): Database = {\n    val databaseEntries = mutable.ListBuffer[URI]()\n    def addFile(file: File): Unit = {"
  },
  {
    "id" : "f1e9617a-90c4-45b0-ba14-b1c9f1699803",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35246641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1077d6f-1a99-4bf8-bb54-60b0fafcb264",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "See comment on supporting file contents in semanticdb.proto",
        "createdAt" : "2017-04-21T08:50:36Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "ce256e6c-f490-492a-9abe-ceaaa9f12de3",
        "parentId" : "f1077d6f-1a99-4bf8-bb54-60b0fafcb264",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "See my reply there as well.",
        "createdAt" : "2017-04-27T23:21:38Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@\n@data class AttributedSource(\n  path: AbsolutePath,\n  names: Map[Anchor, Symbol],\n  messages: Seq[Message],"
  },
  {
    "id" : "29ad7f31-3fdd-45b6-8d38-55dac79f7b26",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35494146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1a13098-ab96-4376-9a91-8606ece2acab",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Input.LabeledString would eliminate the need for all this relativization ;) ",
        "createdAt" : "2017-04-21T08:51:10Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "33378312-594b-412f-b3ac-c1fca55d8add",
        "parentId" : "b1a13098-ab96-4376-9a91-8606ece2acab",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "whoops, I misunderstood what's happening here, nevermind my comment!",
        "createdAt" : "2017-04-29T11:15:08Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +165,169 @@    var result = databaseRoot.toString\n    if (!result.endsWith(\"/\")) result += \"/\"\n    // TODO: This relativization is unsound and should be removed.\n    result += path.toRelative.toString\n    result = result.stripSuffix(\".scala\") + \".semanticdb\""
  },
  {
    "id" : "1eaeff16-c849-4057-a174-b6ae165774c1",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35496632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f4b62d-462a-4338-9db5-17258e8f58a8",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Following discussions in https://github.com/scalameta/scalameta/issues/777 \r\n\r\nI believe we need to pass a `sourceRoot: AbsolutePath` here in order to relativize any `AbsolutePath` inside this Database.",
        "createdAt" : "2017-04-27T08:18:24Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "c2574ed9-6158-40a5-a31b-96d974b3b119",
        "parentId" : "f2f4b62d-462a-4338-9db5-17258e8f58a8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Maybe we should construct Databases in a relativized form already. More details in my upcoming comment to #777.",
        "createdAt" : "2017-04-28T00:33:22Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "f22370b8-67c4-4837-85de-79ed518a17d3",
        "parentId" : "f2f4b62d-462a-4338-9db5-17258e8f58a8",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I'm excited to see what you have in mind :) \r\n\r\nThe biggest concern for me is merging two semanticdbs that are built from a different sourceRoot. This will likely be a common case around sbt. For example, how do I combine semanticdb built from two different repos?",
        "createdAt" : "2017-04-29T10:59:25Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "748fdf54-58b2-42a4-bb0a-211fc08a01ae",
        "parentId" : "f2f4b62d-462a-4338-9db5-17258e8f58a8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "That will be possible.",
        "createdAt" : "2017-04-29T13:34:18Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n  override def toString: String = sources.mkString(EOL + EOL)\n  def toBinary: Array[Byte] = this.toProto[p.Database].toByteArray\n  def writeToFile(dir: File): Unit = {\n    if (dir.exists) sys.error(s\"implementation restriction: can't write a semantic database to an existing file\")"
  },
  {
    "id" : "3c81319d-04d5-455d-a901-af420c24e5fa",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35496675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b508d251-abe6-475c-b159-1cc598190cf8",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Do we keep sugars as `String` in this PR or do want to add a richer structure to them? I'm fine with leaving it to a separate PR.",
        "createdAt" : "2017-04-29T11:10:36Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "1177e627-fda5-48a3-9351-6f828e079c43",
        "parentId" : "b508d251-abe6-475c-b159-1cc598190cf8",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I'll open a ticket for that. Adding a richer structure to sugars and infos will take a while, probably on a scale of days, not hours.",
        "createdAt" : "2017-04-29T13:36:45Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@  def messages: Seq[Message] = sources.flatMap(_.messages)\n  def denotations: Map[Symbol, Denotation] = sources.foldLeft(Map[Symbol, Denotation]())(_ ++ _.denotations)\n  def sugars: Map[Anchor, String] = sources.foldLeft(Map[Anchor, String]())(_ ++ _.sugars)\n\n  override def toString: String = sources.mkString(EOL + EOL)"
  }
]