[
  {
    "id" : "95353900-f84a-4eb5-826a-f19d75d2e158",
    "prId" : 988,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/988#pullrequestreview-48788793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37c5a157-c2a6-4abc-9bb0-ae09a3acb403",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Looks like an unused import.",
        "createdAt" : "2017-07-07T03:35:26Z",
        "updatedAt" : "2017-07-07T03:42:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "b2ead17a-3df3-4d39-8a13-8e07f5442f27",
        "parentId" : "37c5a157-c2a6-4abc-9bb0-ae09a3acb403",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Removed in https://github.com/scalameta/scalameta/pull/1004",
        "createdAt" : "2017-07-07T07:51:05Z",
        "updatedAt" : "2017-07-07T07:51:05Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "dd9d23c7-456a-4bb6-84b5-22c2cd392e2a",
        "parentId" : "37c5a157-c2a6-4abc-9bb0-ae09a3acb403",
        "authorId" : "05699173-a301-4e02-a831-0dc655609bf3",
        "body" : "Can we just enable -Ywarn-unused:import to prevent humans having to catch this? If it makes the local development cycle awkward you can either disable that flag locally, or we could modify build to enable the flag in CI runs.",
        "createdAt" : "2017-07-07T19:09:22Z",
        "updatedAt" : "2017-07-07T19:09:22Z",
        "lastEditedBy" : "05699173-a301-4e02-a831-0dc655609bf3",
        "tags" : [
        ]
      },
      {
        "id" : "70bce4dd-3ddc-4cf0-bcba-e23b33b1701a",
        "parentId" : "37c5a157-c2a6-4abc-9bb0-ae09a3acb403",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "@olafurpg Can we implement an unused import check on CI via scalafix?",
        "createdAt" : "2017-07-09T22:30:34Z",
        "updatedAt" : "2017-07-09T22:30:34Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "488ac646810a094fdfc3a6ffa580539a7c79780a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\nimport scala.meta.internal.io.PathIO.fileSeparator\nimport scala.meta.io.AbsolutePath\nimport scala.meta.io.RelativePath\nimport org.scalameta.invariants.require"
  },
  {
    "id" : "0881181b-a4b8-48f5-ad84-4907d7f2d846",
    "prId" : 988,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/988#pullrequestreview-48512726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "457f4a69-7d16-46da-9016-c3afff3559b4",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "`path.path` reads weirdly. Can we change it to `path.value`?",
        "createdAt" : "2017-07-07T03:36:05Z",
        "updatedAt" : "2017-07-07T03:42:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "488ac646810a094fdfc3a6ffa580539a7c79780a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +14,18 @@  def isSemanticdb(path: RelativePath): Boolean = {\n    path.toNIO.startsWith(semanticDbPrefix.toNIO) &&\n    path.path.getFileName.toString.endsWith(semanticDbSuffix)\n  }\n"
  },
  {
    "id" : "bd4fb330-6633-4a99-9381-d7e2f0faf439",
    "prId" : 988,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/988#pullrequestreview-48512726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47360faa-e671-4140-a980-c74af565e0f3",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Also, I'm not sure whether `path.path.getFileName.toString` constitutes an improvement with respect to `path.toString`. Can you comment on this?",
        "createdAt" : "2017-07-07T03:36:26Z",
        "updatedAt" : "2017-07-07T03:42:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "488ac646810a094fdfc3a6ffa580539a7c79780a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +14,18 @@  def isSemanticdb(path: RelativePath): Boolean = {\n    path.toNIO.startsWith(semanticDbPrefix.toNIO) &&\n    path.path.getFileName.toString.endsWith(semanticDbSuffix)\n  }\n"
  },
  {
    "id" : "e467abcd-5a5e-4582-92f5-4ea1cf006abb",
    "prId" : 988,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/988#pullrequestreview-48512726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50710898-1343-439d-ae40-48eb54657a2a",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "`path.relativize(path)` reads like a typo. Have I misunderstood something?",
        "createdAt" : "2017-07-07T03:36:36Z",
        "updatedAt" : "2017-07-07T03:42:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "488ac646810a094fdfc3a6ffa580539a7c79780a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +20,24 @@    require(isSemanticdb(path))\n    RelativePath(path.toNIO\n      .relativize(path.toNIO)\n      .resolveSibling(path.path.getFileName.toString.stripSuffix(semanticDbSuffix) + scalaSuffix))\n  }"
  },
  {
    "id" : "adb6db76-c080-4849-8bf7-7e2c66592295",
    "prId" : 988,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/988#pullrequestreview-48788910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2883919-b3be-4bbc-a00b-296359d2ee2c",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I find the refactoring of logic in `Paths` hard to follow. Let's discuss a formulation that would work for both of us. What did you find unnice about the previous implementation?",
        "createdAt" : "2017-07-07T03:40:39Z",
        "updatedAt" : "2017-07-07T03:42:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "d6fe32f5-f3bc-494f-9d55-fd2c3ca33c17",
        "parentId" : "f2883919-b3be-4bbc-a00b-296359d2ee2c",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I've refactored the logic a bit to make it cleaner. I agree my refactoring was a bit messy. I did not like the previous implementation since it was purely string based. A path is more a `List[String]` than a `String`, so when changing the extension we should try to use `resolveSibling` and when checking the extension we should check the extension against the filename instead of `Path.toString.endsWith`.",
        "createdAt" : "2017-07-07T08:30:27Z",
        "updatedAt" : "2017-07-07T08:30:27Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "19db5d4b-888b-4d5c-92e6-5b1cd6aeb331",
        "parentId" : "f2883919-b3be-4bbc-a00b-296359d2ee2c",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "On a number of occasions, we have seen that moving from `String` to `*Path` brings correctness benefits. In general, I'm in favor of refactorings like that, as long as they are reasonably concise. I had problems with the first take on this, but I do like the new version. Thank you!",
        "createdAt" : "2017-07-09T22:36:36Z",
        "updatedAt" : "2017-07-09T22:36:36Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "488ac646810a094fdfc3a6ffa580539a7c79780a",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +31,35 @@  def scalaToSemanticdb(path: RelativePath): RelativePath = {\n    require(isScala(path))\n    semanticDbPrefix.resolve(path.resolveSibling(_.stripSuffix(scalaSuffix) + semanticDbSuffix))\n  }\n}"
  }
]