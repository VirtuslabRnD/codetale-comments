[
  {
    "id" : "2e047dfa-93c5-4b40-b293-df5a26f48b5f",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35248947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0822d90-40a6-488e-a0b3-3b567a473099",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "First of all, I am super duper excited to use Denotation in scalafix ðŸ˜¸ ðŸŽ‰ \r\n\r\nDo you plan to change the `info` field in this PR or a followup?",
        "createdAt" : "2017-04-21T08:52:07Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "62ce3ef9-853f-424c-b115-24664024c4b2",
        "parentId" : "d0822d90-40a6-488e-a0b3-3b567a473099",
        "authorId" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "body" : "I believe that this a very bad misuse of the term. This should be called Definition instead.",
        "createdAt" : "2017-04-22T03:52:19Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "tags" : [
        ]
      },
      {
        "id" : "6e82d69f-c319-4a9a-90dd-13b08a314348",
        "parentId" : "d0822d90-40a6-488e-a0b3-3b567a473099",
        "authorId" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "body" : "Or, even better, Declaration. This will match naming inside compilers.",
        "createdAt" : "2017-04-22T03:57:38Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "tags" : [
        ]
      },
      {
        "id" : "2da418e5-216b-46cf-96c6-31809bdf4346",
        "parentId" : "d0822d90-40a6-488e-a0b3-3b567a473099",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "To quote `Denotations.scala` from Dotty (https://github.com/lampepfl/dotty/blob/fa13f8d772cc53a8dce5e6854309f00288876d0d/compiler/src/dotty/tools/dotc/core/Denotations.scala#L56-L58):\r\n\r\n>  *  Symbol                   A label for a definition or declaration in one compiler run\r\n> *  Denotation              The meaning of a named type or symbol during a period\r\n\r\nThis corresponds exactly to what we're doing in scalameta. A symbol is just a lightweight wrapper of a string id, and a denotation represents a symbol's meaning within a given mirror (just like in Dotty, a symbol can have multiple denotations depending on a context).\r\n\r\nEven the fields of the `Denotation` class in scalameta are similar  @to the fields of a similar class in Dotty: `flags`, `name`, `info`. In the future, we plan to add `privateWithin` and most likely `owner`.\r\n\r\nAll in all, I'm confident that separating `Symbol.id` from `Symbol.info` and friends is a very important insight. In scalac, these concepts are mixed in a fat `Symbol` object, which makes it hard to reliably metaprogram between compiler runs. @densh and I started realizing this in late 2012 when working on hygiene from scala.reflect (back then scalameta didn't exist yet), and I'm happy that in 2017 this is something that's independently employed in multiple metaprogramming frameworks for Scala.",
        "createdAt" : "2017-04-27T23:33:48Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "8480f477-ba48-47ea-8166-f7e24b87c9fa",
        "parentId" : "d0822d90-40a6-488e-a0b3-3b567a473099",
        "authorId" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "body" : "I still believe that this overloads a term is a very misleading way.\r\n\r\nIn your case every denotation has a corresponding symbol to start with. The symbol is the original abstraction, it's just that it makes practical sense to serialize\\pass unique identifier of the symbol instead of serializing ther entire information about it. I totally agree that separating `Symbol.id` and `Symbol.info` makes sense, similarly how introduction of primary keys in databases makes sense.\r\n\r\nIn Dotty's case, the Denotation is the original abstraction, there are a lot of denotations that do not correspond to any specific symbols or definitions. This is a lot more than simple separation of a primary key that I see here.\r\n\r\nI stand unconvinced and believe that the terms `Declaration` \\ `Definiton` represent scalameta case better. Otherwise we can have a big long-term problem in terminology between Dotty and scalameta. As compilers and meta-programming are close to each-other there is a huge value to keep terminology consistent. ",
        "createdAt" : "2017-04-27T23:41:21Z",
        "updatedAt" : "2017-04-30T04:14:02Z",
        "lastEditedBy" : "76245ab7-24e0-4b36-b196-5e6570a0aa85",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@import org.scalameta.data._\n\n@data class Denotation(flags: Long, name: String, info: String) extends HasFlags {\n  def hasFlag(flag: Long) = (flags & flag) == flag\n"
  }
]