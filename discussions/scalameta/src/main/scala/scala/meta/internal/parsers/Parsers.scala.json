[
  {
    "id" : "4f908978-c4d5-4140-b36d-c7a2a084c74f",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "138851f3-b173-4e19-af13-dadcdc9c15ec",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Round braces are called parentheses :)\n",
        "createdAt" : "2015-08-03T19:13:37Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "bb4df07f-16a2-40f5-ac3b-ec25ba20e6d2",
        "parentId" : "138851f3-b173-4e19-af13-dadcdc9c15ec",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Changed.\n",
        "createdAt" : "2015-08-03T20:12:08Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +580,584 @@  }\n\n  def unquote[T <: Tree : AstMetadata]: T = unquote[T](advance = true) // to write `unquote[T]` without round braces\n\n  /** Convert tree to formal parameter list. */"
  },
  {
    "id" : "a992803e-0999-4e71-8726-d5ce91abfaf9",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a39e950a-11fc-4541-b2e1-cc0b2962e3dd",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Isn't this equivalent to `if (advance) unquote[T] else ahead(unquote[T])`? If yes, then why have a special version of `unquote` and `ellipsis`, if we can localize this special case to a single function?\n",
        "createdAt" : "2015-08-03T19:26:49Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "8f5e0f64-7181-4318-b6a7-875a00782b56",
        "parentId" : "a39e950a-11fc-4541-b2e1-cc0b2962e3dd",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "About method `name`: I thought that would be strange, if `advance` didn't have influence on both cases, `Unquote` and `Ellipsis`.\nAnd about method `unquote`: since I have had to add that `advance: Boolean = true`, compiler did not allow simple `unquote[T]` elsewhere, only with parentheses. So I added special version of `unquote`, to preserve old syntax. Note that it actually delegates to original `unquote`.\n",
        "createdAt" : "2015-08-03T19:34:54Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      },
      {
        "id" : "9631c93e-8678-4d9b-936d-156b403d899a",
        "parentId" : "a39e950a-11fc-4541-b2e1-cc0b2962e3dd",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yeah, sure the suggested change would have to be made to both branches. Then the `unquote` method would go back to its old form - without the parameter and without multiple overloads.\n",
        "createdAt" : "2015-08-03T19:57:04Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "55972028-5c89-4046-acc7-e053949a3712",
        "parentId" : "a39e950a-11fc-4541-b2e1-cc0b2962e3dd",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "In old form, `unquote` always drives iterator forward. However, sometimes that is not desired behaviour, so I added extra parameter with default value, for the future cases.\n",
        "createdAt" : "2015-08-03T20:17:03Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      },
      {
        "id" : "6b9a3507-7290-4362-9cca-33dccf457c59",
        "parentId" : "a39e950a-11fc-4541-b2e1-cc0b2962e3dd",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I suggest we discuss this in voice. Ping me when you're up for that.\n",
        "createdAt" : "2015-08-04T06:18:39Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +998,1002 @@      res\n    case token: Unquote =>\n      unquote[T](advance)\n    case _ =>\n      syntaxErrorExpected[Ident]"
  },
  {
    "id" : "d1f20f67-9c76-4ded-be05-10560d906313",
    "prId" : 212,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43de5699-7ea3-4259-a4a3-101fd892108c",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Where did this `CaseIntro` come from?\n",
        "createdAt" : "2015-08-03T19:34:52Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "d784f15d-97d4-49a1-aa5b-ce1f6d0793d5",
        "parentId" : "43de5699-7ea3-4259-a4a3-101fd892108c",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "It is used to handle situations like\n`val q\"$expr match { case bar => baz; ..case $casez; case q => w}\" = q\"foo match { case bar => baz; case _ => foo ; case q => w }\"`\n",
        "createdAt" : "2015-08-03T19:40:18Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      },
      {
        "id" : "a7fb0842-19c7-4426-932e-5b5939c7c6d9",
        "parentId" : "43de5699-7ea3-4259-a4a3-101fd892108c",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Why `CaseIntro` and not `case` like it was before?\n",
        "createdAt" : "2015-08-03T20:02:42Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "3f568ef4-3c5a-407d-b19f-f6e1eed30431",
        "parentId" : "43de5699-7ea3-4259-a4a3-101fd892108c",
        "authorId" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "body" : "Same reason as with `StatSep` vs `;`. `CaseIntro` is most general form of `case` that can be applied here.\n",
        "createdAt" : "2015-08-03T20:24:01Z",
        "updatedAt" : "2015-08-04T15:04:51Z",
        "lastEditedBy" : "c1f226fe-550f-43ad-be9d-55f0b9be0a11",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbf2930c7194f4d53068c7e8e58fa0625d10b44",
    "line" : 302,
    "diffHunk" : "@@ -1,1 +1707,1711 @@  def caseClauses(): List[Case] = {\n    val cases = new ListBuffer[Case]\n    while (token.is[CaseIntro] || token.is[Ellipsis]) {\n      if (token.is[Ellipsis]) {\n        cases += ellipsis(1, unquote[Case], accept[`case`])"
  },
  {
    "id" : "d57da3ca-f127-4ec6-9cbe-af24cee454c6",
    "prId" : 138,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbe88078-2230-4ac0-a7e3-8710a6964270",
        "parentId" : null,
        "authorId" : "2c2cb248-dd76-4258-9c80-1a6cb352bbf8",
        "body" : "Hey, I think there is a small error there:\n\n```\nscala> \"23.45F\".parse[Term].show[Raw]\nres5: String = Lit.Float(23.0f)\n```\n\nI guess it should be `value.toFloat`, and should be changed  for Double (below) as well.\n",
        "createdAt" : "2015-05-28T20:59:25Z",
        "updatedAt" : "2015-05-28T20:59:25Z",
        "lastEditedBy" : "2c2cb248-dd76-4258-9c80-1a6cb352bbf8",
        "tags" : [
        ]
      },
      {
        "id" : "64b084ea-d5eb-46a8-a1f7-0aeca50125bc",
        "parentId" : "dbe88078-2230-4ac0-a7e3-8710a6964270",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Fixed in https://github.com/scalameta/scalameta/pull/139. I shouldnt've skipped the tests, regardless of how obvious they seemed.\n",
        "createdAt" : "2015-05-29T10:48:28Z",
        "updatedAt" : "2015-05-29T10:48:28Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f01dff595ad49add82a2feba8375022156c10b2b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1087,1091 @@        if (value > Float.MaxValue) syntaxError(\"floating point number too large\", at = token)\n        else if (value < Float.MinValue) syntaxError(\"floating point number too small\", at = token)\n        else Lit.Float(value.toLong)\n      case token: Literal.Double  =>\n        val value = if (isNegated) -token.value else token.value"
  }
]