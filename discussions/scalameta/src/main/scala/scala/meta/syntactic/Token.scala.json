[
  {
    "id" : "ea5edb58-cb5b-44a5-8557-6b7e24e02c19",
    "prId" : 142,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb14d365-4013-4118-8233-45b0afafa8f2",
        "parentId" : null,
        "authorId" : "46f3a78a-e8c2-463a-ac44-604cf0c0d624",
        "body" : "If I understand correctly, the redirection mechanism in `customMatcher` will see that we're trying to lift `Unquote` and use directly `liftUnquote` instead of generating a new one which would require a Liftable for `Any`? Nice!\n",
        "createdAt" : "2015-06-02T07:18:04Z",
        "updatedAt" : "2015-06-02T07:18:04Z",
        "lastEditedBy" : "46f3a78a-e8c2-463a-ac44-604cf0c0d624",
        "tags" : [
        ]
      },
      {
        "id" : "db1c3a4e-c2e7-418b-87f2-326a75442be6",
        "parentId" : "cb14d365-4013-4118-8233-45b0afafa8f2",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yes, that's right. Ideally, we shouldn't have this `customMatcher` at all and the materializer should simply account for the implicits in scope. In the future, I'll get to implementing that.\n",
        "createdAt" : "2015-06-02T08:41:45Z",
        "updatedAt" : "2015-06-02T08:41:45Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee20d0514261c7ede3dbc5c9e0d14dbb1c5567a1",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +164,168 @@// To combat that, we have TokenLiftables right here, guaranteeing that there won't be problems\n// if someone wants to refactor/rename something later.\ntrait TokenLiftables extends tokens.Liftables {\n  val c: scala.reflect.macros.blackbox.Context\n  override lazy val u: c.universe.type = c.universe"
  }
]