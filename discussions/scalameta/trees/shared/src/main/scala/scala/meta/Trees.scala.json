[
  {
    "id" : "638dbfdd-0422-4b12-96bd-149aea2fad00",
    "prId" : 2187,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2187#pullrequestreview-542849335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "692d3310-e287-4afe-91a5-73b05f82fb78",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I also added the check to make sure that no one will try to add a different term here. We can always change the check, but might be harder to fix if we change the type.",
        "createdAt" : "2020-12-02T13:46:56Z",
        "updatedAt" : "2020-12-02T13:46:56Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "51fd3bfcb1ca92cb2a5625b70ea578cc36bf922a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +263,267 @@  }\n  @ast class Macro(body: Term) extends Pat {\n    checkFields(body.is[Term.QuotedMacroExpr])\n  }\n  @ast class Given(tpe: Type) extends Pat"
  },
  {
    "id" : "9f3e495e-68fe-47b3-8ec6-99b5f3755008",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-400711603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5004c74-06c5-4b12-b4c9-40e2ee75d134",
        "parentId" : null,
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "Aren't you missing term params of enums, here?",
        "createdAt" : "2020-04-24T15:55:00Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "57a8fed2-a2ed-4ac2-94cb-73baf595a5a4",
        "parentId" : "f5004c74-06c5-4b12-b4c9-40e2ee75d134",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "It should be available in `Ctor.Primary`, e.g.\r\n`\"enum C(i: Int) { case R, G }\"` ->\r\n`Defn.Enum(Nil, pname(\"C\"), Nil, ctorp(List(tparam(\"i\", \"Int\"))), tpl(List(RGCase))))`",
        "createdAt" : "2020-04-27T07:58:37Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +304,308 @@      mods: List[Mod],\n      name: scala.meta.Type.Name,\n      tparams: List[scala.meta.Type.Param],\n      ctor: Ctor.Primary,\n      templ: Template"
  },
  {
    "id" : "18bce694-6561-4a2b-bdde-74339cdbb5ad",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-400123306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3965cc55-2fd4-45b6-be03-96dd1ac7399f",
        "parentId" : null,
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "I assume `Name`s can represent *anonymous* things?",
        "createdAt" : "2020-04-24T15:56:20Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "95ce6248-05eb-49eb-a1a5-755d2131e73f",
        "parentId" : "3965cc55-2fd4-45b6-be03-96dd1ac7399f",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "There is `scala.meta.Name.Anonymous()` \r\nhttps://github.com/scalameta/scalameta/blob/4bf5dfd1e7afc3bc7d6a305690dd5b737afd08e6/scalameta/trees/shared/src/main/scala/scala/meta/Trees.scala#L38",
        "createdAt" : "2020-04-24T17:06:39Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +303,307 @@  @ast class Enum(\n      mods: List[Mod],\n      name: scala.meta.Type.Name,\n      tparams: List[scala.meta.Type.Param],\n      ctor: Ctor.Primary,"
  },
  {
    "id" : "456b31a7-6350-4cc9-97de-f402bfd1f1d9",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-401650597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c957d8-5fee-41b2-9c7d-75165b452b94",
        "parentId" : null,
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "For extension methods, how do you store whether they are declared as infix (without `.`) or as dot methods (with a `.`)?",
        "createdAt" : "2020-04-24T15:57:49Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "02f20b24-1ea5-4ce9-9203-73ff58168ec1",
        "parentId" : "b6c957d8-5fee-41b2-9c7d-75165b452b94",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "We distinguish `Term.ApplyInfix` and `Term.Apply` so it would make sense to distinguish them here as well üëç ",
        "createdAt" : "2020-04-24T17:07:49Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "bb3bb1d1-4cb4-44f7-bd40-2096d0238aeb",
        "parentId" : "b6c957d8-5fee-41b2-9c7d-75165b452b94",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "okay added Infix version too",
        "createdAt" : "2020-04-28T09:18:27Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +337,341 @@      templ: Template\n  ) extends Defn\n  @ast class ExtensionMethod(\n      mods: List[Mod],\n      eparam: Term.Param,"
  },
  {
    "id" : "e87a530e-ecbb-468f-b458-9c5562b537b6",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419099960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "parentId" : null,
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "Why would `Using()` be a modifier?",
        "createdAt" : "2020-04-24T16:00:24Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "3025f355-cb81-4a27-9d75-761f737160e2",
        "parentId" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "It behaves as modifier `def f(x: String)(using Int)(y: String)(using b: Int)`\r\nDo you think it would be better to represent it in other way?",
        "createdAt" : "2020-04-27T08:02:04Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "ad3b44e6-9ec3-4ac0-adf0-91b09a41607b",
        "parentId" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "It is kind of a modifier, but it applies to the whole parameter *list*, not just one parameter (unlike the other modifiers above). In dotty itself it's a flag of the parameter list, not a modifier of each parameter.",
        "createdAt" : "2020-04-27T09:43:08Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "8c959818-efb9-453c-a3ef-3c712924527f",
        "parentId" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Yeah well this is a little messy and I am not sure how to make it properly.\r\nThere are 2 situations, definition and usage.\r\nFor method definition we store `paramss: List[List[Term.Param]]`. I can't really do much here without bigger changes, I decided to add `Using` modifier to each param that is in a list if `using` modifier was found in this list. It was nice during parsing, but now I hit terrible problems with printing this structure(no idea how to do it yet)\r\nOn method call it is much better, because we have `Apply(term, List[Term]`, I just added `ApplyUsing(term, List[Term])` and it covers it nicely\r\n\r\nI can imagine having `sparams: List[List[Term.Param]]` changed to\r\n`sparams: List[TreeList[Term.Param]]` where\r\n`TermList <: TreeList` and `TermListUsing <: TreeList` but I don't think it is doable in reasonable effort not talking about compatibility :/",
        "createdAt" : "2020-04-27T10:53:34Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "81dc902b-c2ae-4ba5-9239-98705fe86f97",
        "parentId" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Ok actually it is similar to `implicit` we have in scala2, I will take inspiration from there :P",
        "createdAt" : "2020-04-27T11:02:34Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "5dc908e7-66aa-44d9-aebb-3862366bd2f4",
        "parentId" : "709bef65-9020-4685-bf8e-bf4e7ac29a8d",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "reworked it to keep it the same way as implicit.",
        "createdAt" : "2020-05-27T11:28:36Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +493,497 @@  @ast class VarParam() extends Mod\n  @ast class Inline() extends Mod\n  @ast class Using() extends Mod\n  @ast class Opaque() extends Mod\n}"
  },
  {
    "id" : "0e03a1a7-5938-46ee-b911-ba4f9308dd69",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-405748465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12cdab1f-c06b-4a13-8019-f4e0fca1c140",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "This is a binary breaking change, can you elaborate on the use-case here? If this is Dotty-only syntax then I propose we introduce a new class instead so that we don't break existing usage of `Defn.Type`",
        "createdAt" : "2020-05-02T09:59:09Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "4750b392-9d40-4fb6-9f75-c98bafd55fc4",
        "parentId" : "12cdab1f-c06b-4a13-8019-f4e0fca1c140",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "needed for opaque type aliases `opaque type A <: B = C`\r\n\r\nhttps://dotty.epfl.ch/docs/reference/other-new-features/opaques.html\r\n\r\nYes it is a new syntax, I will introduce a new type.",
        "createdAt" : "2020-05-02T12:18:45Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "5b30002c-43d0-4426-8e63-3443c0edc156",
        "parentId" : "12cdab1f-c06b-4a13-8019-f4e0fca1c140",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "created completely new type `OpaqueTypeAlias`",
        "createdAt" : "2020-05-05T12:42:25Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +381,385 @@      name: scala.meta.Type.Name,\n      tparams: List[scala.meta.Type.Param],\n      bounds: scala.meta.Type.Bounds,\n      body: scala.meta.Type\n  ) extends Defn"
  },
  {
    "id" : "888c7b38-589e-4fb1-8d39-60d28fce7e5b",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419100121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17fbe33c-01f4-4065-8ae5-eeabd7dc5b86",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Does it still need to be a modifier if we have ApplyUsing ?",
        "createdAt" : "2020-05-22T11:41:44Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "88cbb0be-8da5-4cff-880c-2b633051647d",
        "parentId" : "17fbe33c-01f4-4065-8ae5-eeabd7dc5b86",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Ach, nevermind. I get the issue here.",
        "createdAt" : "2020-05-25T15:10:37Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "518f85d6-234f-4e81-bdb8-396e420fe4da",
        "parentId" : "17fbe33c-01f4-4065-8ae5-eeabd7dc5b86",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : ":+1: ",
        "createdAt" : "2020-05-27T11:28:51Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +493,497 @@  @ast class VarParam() extends Mod\n  @ast class Inline() extends Mod\n  @ast class Using() extends Mod\n  @ast class Opaque() extends Mod\n}"
  },
  {
    "id" : "95314945-4b19-41c2-b544-ce38ba0e1ac6",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419125630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38329c74-d5e5-47ba-817b-764fc7dc96b1",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "What about annotation?",
        "createdAt" : "2020-05-22T12:29:22Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "2dd36abe-fcdb-4961-8ebc-d526a1395219",
        "parentId" : "38329c74-d5e5-47ba-817b-764fc7dc96b1",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "will add test +1",
        "createdAt" : "2020-05-27T12:07:22Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +314,318 @@      tparams: List[scala.meta.Type.Param],\n      ctor: Ctor.Primary,\n      inits: List[Init]\n  ) extends Defn\n      with Member.Term"
  },
  {
    "id" : "cec754be-fa59-4e16-a94c-8a0dcfa1d63c",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419125460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f9bc887-0168-4c83-b455-bf7fd41a9c32",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "What about annotations?",
        "createdAt" : "2020-05-22T12:30:48Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "c37803eb-6c00-44e2-be81-d81d9bad153c",
        "parentId" : "8f9bc887-0168-4c83-b455-bf7fd41a9c32",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "will add test :+1:",
        "createdAt" : "2020-05-27T12:07:08Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +319,323 @@  @ast class RepeatedEnumCase(\n      mods: List[Mod],\n      cases: List[Term.Name]\n  ) extends Defn\n  @ast class GivenAlias("
  },
  {
    "id" : "0d23219c-1d96-4171-b7eb-090ac1ec17b2",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419118837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d7df3e5-accf-4cfc-bacf-b5d432860137",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Could we include method def here and lose the other fields?",
        "createdAt" : "2020-05-22T12:46:24Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "c5e6d54e-4a07-4e92-95f0-4c57d36ca625",
        "parentId" : "7d7df3e5-accf-4cfc-bacf-b5d432860137",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Maybe it's better to leave it as is actually.",
        "createdAt" : "2020-05-25T15:35:50Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "76016413-8b02-4dcd-bb95-493fad541be5",
        "parentId" : "7d7df3e5-accf-4cfc-bacf-b5d432860137",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "ok leaving it as it is then",
        "createdAt" : "2020-05-27T11:57:41Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +345,349 @@      decltpe: Option[scala.meta.Type],\n      body: Term\n  ) extends Defn\n      with Member.Term\n  @ast class ExtensionMethodInfix("
  },
  {
    "id" : "2ecb2b59-d1d9-422d-836f-e9368ed0e1c5",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-418092297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4d48e68-a2fd-49e0-aed5-f4ac0f7a69ef",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This would correspond to something like `$x` in a normal code? I don't think this is actually used.",
        "createdAt" : "2020-05-25T14:53:30Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "41c15b66-13aa-4963-8c5e-347611427c4f",
        "parentId" : "b4d48e68-a2fd-49e0-aed5-f4ac0f7a69ef",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "This corresponds to: `'[ List[${ summon[Type[T]] }] ]`\r\ncheck test: `macro-quote-type`",
        "createdAt" : "2020-05-26T08:46:38Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +174,178 @@    checkParent(ParentChecks.TypeLambda)\n  }\n  @ast class Macro(body: Term) extends Type\n  @ast class Method(paramss: List[List[Term.Param]], tpe: Type) extends Type {\n    checkParent(ParentChecks.TypeMethod)"
  },
  {
    "id" : "696e19cb-24b0-47a9-8bf4-e63925dcb000",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419119043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "203eb745-fbc9-4047-ac59-310fc1677904",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "We should check if opaque is in the mods.",
        "createdAt" : "2020-05-25T15:10:13Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "17bedbd5-4239-4a10-8523-85d885352576",
        "parentId" : "203eb745-fbc9-4047-ac59-310fc1677904",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : ":+1: ",
        "createdAt" : "2020-05-27T11:57:59Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +383,387 @@      bounds: scala.meta.Type.Bounds,\n      body: scala.meta.Type\n  ) extends Defn\n      with Member.Type {\n    checkFields(mods.exists(_.is[Mod.Opaque]))"
  },
  {
    "id" : "b8d92b8c-d7ba-4960-a1fa-9543f1d6ffa7",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419084524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf0f37c-d7f1-4c01-8302-14d4db506683",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Let's maybe check if using is defined in all mods or args.",
        "createdAt" : "2020-05-25T15:11:38Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "e2e70d0d-094e-4856-8c6d-76bd510f6136",
        "parentId" : "dbf0f37c-d7f1-4c01-8302-14d4db506683",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "Term has no name or mods :) That was a topic of discussion in issue I created. That's why we wrap it in `ApplyUsing` instead of just using `Apply`",
        "createdAt" : "2020-05-27T11:04:51Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +82,86 @@  }\n  @ast class Apply(fun: Term, args: List[Term]) extends Term\n  @ast class ApplyUsing(fun: Term, args: List[Term]) extends Term\n  @ast class ApplyType(fun: Term, targs: List[Type] @nonEmpty) extends Term\n  @ast class ApplyInfix(lhs: Term, op: Name, targs: List[Type], args: List[Term]) extends Term"
  },
  {
    "id" : "22c9c0f9-9f23-4ffb-b793-e55dc18bb5c2",
    "prId" : 907,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/907#pullrequestreview-46420164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8ed0637-2585-4043-9503-75fb9f38c111",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "`Name.Indeterminate` is still not entirely hidden from users\r\n\r\n```scala\r\nq\"import a.b\".structure\r\nres6: String = Import(List(Importer(Term.Name(\"a\"), List(Importee.Name(Name.Indeterminate(\"b\"))))))\r\n```\r\nHow about updating Structure to emit a `Name(\"b\")` which calls `Name.apply(value: String): Name = Name.Indeterminate(value)`?",
        "createdAt" : "2017-06-05T13:55:49Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "d84d5179-17ac-4450-be42-55472bafcc6c",
        "parentId" : "a8ed0637-2585-4043-9503-75fb9f38c111",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Additionally, can we expose a `Name(): Name = Name.Anonymous()` constructor? Structure should then also print out `Name()` instead of `Name.Anonymous()`.",
        "createdAt" : "2017-06-05T14:03:12Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9d8ad082-2e4e-4996-90ad-0a6807d7a04e",
        "parentId" : "a8ed0637-2585-4043-9503-75fb9f38c111",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I like this idea. However, instead of `Name()`, I'll do `Name(\"_\")` in order to be symmetric with pattern matching.",
        "createdAt" : "2017-06-27T00:28:19Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "377c7f53-b7e7-4175-b301-958dff7b7959",
        "parentId" : "a8ed0637-2585-4043-9503-75fb9f38c111",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Actually, I have another idea. How about we merge `Name.Anonymous` and `Name.Indeterminate` into just `Name`?! I'll prototype this today or tomorrow and will report back with results.",
        "createdAt" : "2017-06-27T00:42:00Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "6671021ca31de70beb5653b516169540d2300121",
    "line" : 715,
    "diffHunk" : "@@ -1,1 +389,393 @@object Importee {\n  @ast class Wildcard() extends Importee\n  @ast class Name(name: scala.meta.Name) extends Importee {\n    checkFields(name.is[scala.meta.Name.Quasi] || name.is[scala.meta.Name.Indeterminate])\n  }"
  }
]