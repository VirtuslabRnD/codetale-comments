[
  {
    "id" : "972e57f4-ad24-4f41-83a8-032a8d32d658",
    "prId" : 2409,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2409#pullrequestreview-703066300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d3a17d1-4d97-4f0c-a702-fd7504dc3ee9",
        "parentId" : null,
        "authorId" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "body" : "you forgot to use this variable",
        "createdAt" : "2021-07-09T11:49:36Z",
        "updatedAt" : "2021-07-09T12:03:35Z",
        "lastEditedBy" : "b7bb2558-250e-4d73-909f-5c968a6a3505",
        "tags" : [
        ]
      },
      {
        "id" : "08000c64-76d4-475c-b600-1b0881709fa3",
        "parentId" : "7d3a17d1-4d97-4f0c-a702-fd7504dc3ee9",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Good catch! It's now used.",
        "createdAt" : "2021-07-09T13:45:39Z",
        "updatedAt" : "2021-07-09T13:45:39Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "1675110f937fbeae1d29e83d6d6dcedede6c812e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1062,1066 @@        val pparents = r(t.inits, \" with \")\n        val derived = r(t.derives, \"derives \", \", \", \"\")\n        val isGiven = t.parent.exists(_.is[Defn.Given])\n        val withGiven = if (!isGiven) \"\" else if (isBodyEmpty) \"with {}\" else \"with\"\n        val pbody = {"
  },
  {
    "id" : "fc3488d5-7e85-4518-9072-b4cb94595813",
    "prId" : 2261,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2261#pullrequestreview-603072798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1503e1bf-8d78-4f27-87ec-8b8ace555f3c",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Interesting! Nice job with finding a minimal repro!",
        "createdAt" : "2021-03-03T16:02:33Z",
        "updatedAt" : "2021-03-03T16:03:00Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "9ecc1f65-59d4-4c5a-acad-96df9ad704f4",
        "parentId" : "1503e1bf-8d78-4f27-87ec-8b8ace555f3c",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "that was all @WojciechMazur :tada: ",
        "createdAt" : "2021-03-03T16:13:21Z",
        "updatedAt" : "2021-03-03T16:13:21Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e12cb53c8ec1de7b51e4e28b493007647a7c44d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +269,273 @@      /* Soft keywords might need to be written with backquotes in some places.\n       * Previously used match clause fails due to:\n       * https://github.com/scala-native/scala-native/issues/2187\n       * instead we went with if clause to work around the issue.\n       */"
  },
  {
    "id" : "ac4c049e-1b9f-48a7-85e2-80333bc66bd4",
    "prId" : 2239,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2239#pullrequestreview-592105578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79ffc1e9-d971-44ad-a662-82c168a2981a",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "just cosmetic suggestion:\r\n`val op = if (dialect.allowAsForImportRename) kw(\"as\") else kw(\"=>\")`\r\n`s(t.name, \" \", op, \" \", t.rename)`",
        "createdAt" : "2021-02-17T11:44:18Z",
        "updatedAt" : "2021-02-17T15:50:20Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5ec732af4c3518ebdf33cbcf706919041605d24",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1142,1146 @@      case t: Importee.Rename =>\n        if (dialect.allowAsForImportRename)\n          s(t.name, \" \", kw(\"as\"), \" \", t.rename)\n        else\n          s(t.name, \" \", kw(\"=>\"), \" \", t.rename)"
  },
  {
    "id" : "feefbfda-8d9a-4134-8407-e925dc777793",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-400715463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d68dd04-c3ec-4b65-b227-c41a2b2cadc4",
        "parentId" : null,
        "authorId" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "body" : "You're adding a printer for `Mod.Open`, but not for `Mod.Opaque` nor `Mod.Using`. Is that intentional?",
        "createdAt" : "2020-04-24T16:01:10Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "f1588ba7-5588-4fd3-ab89-f107185283e0",
        "tags" : [
        ]
      },
      {
        "id" : "4eda8a1b-0059-4b98-bb0d-838f3dd3fcc6",
        "parentId" : "3d68dd04-c3ec-4b65-b227-c41a2b2cadc4",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "missed that, good catch :+1:",
        "createdAt" : "2020-04-27T08:04:16Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +1023,1027 @@      case _: Mod.Final => kw(\"final\")\n      case _: Mod.Sealed => kw(\"sealed\")\n      case _: Mod.Open => kw(\"open\")\n      case _: Mod.Opaque => kw(\"opaque\")\n      case _: Mod.Using => kw(\"using\")"
  },
  {
    "id" : "44d279d6-cdaa-4c5d-914a-00e0605c90eb",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-421822091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96b1a35-2f69-46fd-87fc-9c8b2f98988c",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Should it not be similar to implicit like:\r\n`w(\"using \", r(params, \", \"), params.exists(_.mods.exists(_.is[Mod.Using])))`\r\n?",
        "createdAt" : "2020-06-01T11:21:46Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "9b40d9b8-d0db-4dba-8b92-9a98ff7f781f",
        "parentId" : "b96b1a35-2f69-46fd-87fc-9c8b2f98988c",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "it doesn't matter, we already did this check line above and we know using is there",
        "createdAt" : "2020-06-01T12:59:36Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +1122,1126 @@      def usingImplicit(params: List[Term.Param]): Show.Result = {\n        if (params.exists(_.mods.exists(_.is[Mod.Using])))\n          s(\"using \", r(params, \", \"))\n        else\n          w(\"implicit \", r(params, \", \"), params.exists(_.mods.exists(_.is[Mod.Implicit])))"
  },
  {
    "id" : "6ef91b4f-d615-4298-9abd-a0a4c4e5eb22",
    "prId" : 907,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/907#pullrequestreview-46523985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7923493e-5205-47bc-b735-925e7c57dd59",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "On the topic of cleanups, I'm eager to get rid of TreeSyntax in favor of a prettyprinter built with paiges #892",
        "createdAt" : "2017-06-05T12:51:36Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "78f66dc0-0bc3-408a-8168-ee11f75b8355",
        "parentId" : "7923493e-5205-47bc-b735-925e7c57dd59",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Our current prettyprinter is outrageously inadequate - it is both slow and buggy - so I agree that it should be rewritten from scratch. However, I'm not sure about the exact strategy.\r\n\r\nMy concern about using `typelevel/paiges` is that the 3-5x slowdown advertised in the readme is not really competitive (even though the readme tries to convince the readers otherwise). It would be a shame to invest significant time into a rewrite only to discover that the new version is inadequate, too.\r\n\r\n@olafurpg @DavidDudson What do you think?\r\n\r\n/cc @densh, since he seems to have experimented with prettyprinters a lot with native. Denys, I see that you're currently using an imperative prettyprinter. Are you happy with it? Do you plan to change it in the future?",
        "createdAt" : "2017-06-27T01:33:13Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "8a64c83a-d4bd-4e99-92a6-fc3ee1d173a0",
        "parentId" : "7923493e-5205-47bc-b735-925e7c57dd59",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "I think you are misunderstanding the 3-5x slowdown as being caused by non-imperativeness. The [underlying implementation](https://github.com/typelevel/paiges/blob/78777cbc6d7f95fd909141d7fe7a7346bd2a19fb/core/src/main/scala/org/typelevel/paiges/Chunk.scala) is imperative. It's ~4x slower than `.mkString` because it implements line wrapping, which is non-trivial and highly valuable IMO for pretty-printers.\r\n\r\nThe complexity in TreeSyntax is partly caused it trying to implement line-wrapping in some places. For example, see `s(stats.head).toString.contains(EOL)` [here](https://github.com/scalameta/scalameta/blob/d0804413ab1845fc9603ef73282bed1c0616970d/scalameta/trees/shared/src/main/scala/scala/meta/internal/prettyprinters/TreeSyntax.scala#L492). I suspect a paiges based line wrapper might be an order of magnitude faster than the current TreeSyntax, and even if TreeSyntax is terribly slow I think performance is not its biggest issue. ",
        "createdAt" : "2017-06-27T11:55:12Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "b398798e-8ffe-41d3-a1d0-aef851949bd5",
        "parentId" : "7923493e-5205-47bc-b735-925e7c57dd59",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "btw, this output here https://gist.github.com/olafurpg/44ee2d0a8c5b8330702cf00d23d0978a which was pretty-printing output from `.structure` rendered in ~300ms. It took me 10 mins to implement that pretty printer. Scalafmt would choke on that input, despite months of optimization efforts.",
        "createdAt" : "2017-06-27T11:57:52Z",
        "updatedAt" : "2017-07-06T03:59:49Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "6671021ca31de70beb5653b516169540d2300121",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@import scala.compat.Platform.EOL\n\nobject TreeSyntax {\n  def apply[T <: Tree](dialect: Dialect): Syntax[T] = {\n    object syntaxInstances {"
  }
]