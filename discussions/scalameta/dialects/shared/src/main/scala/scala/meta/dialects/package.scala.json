[
  {
    "id" : "a26ef5d6-1655-4e08-b8e6-1893467f345c",
    "prId" : 2344,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2344#pullrequestreview-661001167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83ef6499-1460-40fb-9fe2-46c69526781c",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I haven't added `case` in for expression since we don't actually have a separate option for that, I can add it if needed later, but it's rather a minor problem - it will parse it always currently.",
        "createdAt" : "2021-05-17T13:58:32Z",
        "updatedAt" : "2021-05-17T13:58:32Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bf05856695919b7b1655ac7fecc791e171cc9be",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +63,67 @@   */\n  implicit val Scala213Source3 = Scala213\n    .withAllowQuestionMarkPlaceholder(true)\n    .withAllowAsForImportRename(true)\n    .withAllowStarWildcardImport(true)"
  },
  {
    "id" : "275577c5-f020-423c-855b-0fae2167c1c9",
    "prId" : 2027,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2027#pullrequestreview-419956583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e6e67f-a577-4dcc-a909-fe294d6051d0",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Maybe we should no longer copy Scala213 but define a totally separate dialect?",
        "createdAt" : "2020-05-25T11:45:11Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "d9cf597d-2780-4c9d-acb4-5af3e4edc2a0",
        "parentId" : "a7e6e67f-a577-4dcc-a909-fe294d6051d0",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "I have no preferences, let me know if you want it to be separate dialect and I will squash all settings.\r\nIt will be Dialect(a, b, c).withX(..).withY(..) - some parameters go with constructor, other are only exposed via `withX` ",
        "createdAt" : "2020-05-27T10:58:14Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "fda35b8b-147c-41ea-bb47-a88c3f2704d2",
        "parentId" : "a7e6e67f-a577-4dcc-a909-fe294d6051d0",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Let's leave it as is.",
        "createdAt" : "2020-05-28T09:58:57Z",
        "updatedAt" : "2020-06-22T15:02:28Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc7ada7f7baf3d65abfdbedc5968db4feb477ab7",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +106,110 @@    .withAllowExtensionMethods(true)\n    .withAllowOpenClass(true)\n    .withAllowWhiteboxMacro(true)\n    .withAllowToplevelStatements(true)\n    .withAllowOpaqueTypes(true)"
  },
  {
    "id" : "434c3e1a-bee9-40db-8b98-e26760388f0c",
    "prId" : 929,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/929#pullrequestreview-43240104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68904ccb-bfe2-4de2-bb2d-a8abc39fa33d",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Is this supported in Dotty? Let's have a test for this, too.",
        "createdAt" : "2017-06-09T18:22:27Z",
        "updatedAt" : "2017-06-09T19:18:31Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "606ac020-cd9a-482c-a946-db5201bfa3a6",
        "parentId" : "68904ccb-bfe2-4de2-bb2d-a8abc39fa33d",
        "authorId" : "23b5fa3c-3d9e-4ae4-8f25-4df2c4a97789",
        "body" : "I get\r\n```\r\n15:11:10 ~ > dotc -repl\r\nWelcome to Scala.next (pre-alpha, git-hash: 05aeeb5)  (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_73).\r\nType in expressions to have them evaluated.\r\nType :help for more information.\r\nscala> case class A\r\n-- [E004] Syntax Error: <console>:4:11 -----------------------------------------\r\n4 |case class A\r\n  |           ^\r\n  |           A case class must have at least one parameter list\r\n\r\nlonger explanation available when compiling with `-explain`\r\n```",
        "createdAt" : "2017-06-09T19:17:58Z",
        "updatedAt" : "2017-06-09T19:18:31Z",
        "lastEditedBy" : "23b5fa3c-3d9e-4ae4-8f25-4df2c4a97789",
        "tags" : [
        ]
      }
    ],
    "commit" : "86ef6d8c7ab147c657cfcac963789ac9a839bcd5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +23,27 @@  // Can case classes be declared without a parameter list?\n  // Deprecated in 2.10, not supported in 2.11 and newer.\n  allowCaseClassWithoutParameterList: Boolean,\n\n  // Are extractor varargs specified using colons, i.e. is `case Extractor(xs: _*)` legal or not?"
  },
  {
    "id" : "e4cdac57-2c3b-4c4c-83ab-44dbbc549ae5",
    "prId" : 808,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/808#pullrequestreview-35514063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30097335-0389-41f3-908d-e543bc0059b5",
        "parentId" : null,
        "authorId" : "63aec760-6afb-40e1-832d-acf54c195894",
        "body" : "Thanks, @xeno-by.",
        "createdAt" : "2017-04-30T10:44:46Z",
        "updatedAt" : "2017-04-30T10:44:46Z",
        "lastEditedBy" : "63aec760-6afb-40e1-832d-acf54c195894",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac448f5c9b3250ede75f1d0a84fb0a036943da36",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +150,154 @@    // NOTE: support for literal types is tentatively scheduled for 2.12.3\n    // https://github.com/scala/scala/pull/5310#issuecomment-290617202\n    allowLiteralTypes = false,\n    allowTrailingCommas = true\n  )"
  }
]