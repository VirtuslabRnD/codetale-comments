[
  {
    "id" : "a5ed0c2c-5f9a-48ca-851c-257eac2c1901",
    "prId" : 678,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/678#pullrequestreview-21636811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "What if we add a field `name: String` to Dialect and manually maintain `Dialect.all: Seq[Dialect]`? Then we could get away with custom equality, custom toString and jvm reflection (which won't work on Scala.js). From my POV, Dialect should be a stupid configuration object.",
        "createdAt" : "2017-02-13T10:03:29Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "a31c6334-a3d3-463c-bfcb-0665f3c78519",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "If we add `Dialect.name` then people may accidentally break dialects with `Dialect.copy`, changing attributes and forgetting to change a name.",
        "createdAt" : "2017-02-13T21:07:59Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "abfcd427-05c0-4ff4-9747-da4ec4044e66",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "The sourcecode.Name macro can take care of that. Otherwise I don't see why this is a big problem.",
        "createdAt" : "2017-02-13T21:11:05Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "c0b2a5ff-4de4-45a5-a266-b44a9a61f4b8",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "See https://github.com/scalameta/scalameta/pull/662#issuecomment-278653974 for what I mean",
        "createdAt" : "2017-02-13T21:14:21Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "a9b794a4-6b1d-488e-b6ac-f5af9c3e784b",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Wouldn't custom equality and custom toString still be a thing? If name is automatically populate by a macro, then it won't be part of the case class signature, so the autogenerated implementations won't do.",
        "createdAt" : "2017-02-13T22:28:19Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "757da530-09b7-4908-9a0e-bf19488f1be2",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "As for using JVM reflection, I don't mind changing `Dialect.standard` to be populated manually.",
        "createdAt" : "2017-02-13T22:29:32Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "6ffc7cab-a631-4880-9414-1e9c581a5b94",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "> If name is automatically populated by a macro, then it won't be part of the case class signature,\r\n\r\nNot sure I follow.\r\n\r\n> Wouldn't custom equality and custom toString still be a thing?\r\n\r\nSure, custom equality and toString are fine by me. My suggestion was only to make Dialect as easy as possible to understand by making it a plain `@data` class, but I don't really mind the customization.\r\n\r\n> As for using JVM reflection, I don't mind changing Dialect.standard to be populated manually.\r\n\r\nWe can keep reflection for now, but add a comment for our future future self that this can easily be replaced with a manual list to support Scala.js.",
        "createdAt" : "2017-02-13T22:42:22Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "37783e98-ccc1-48c1-99fd-06c3c7678d90",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Added a commit that removes reflection, but uses it in tests to make sure that the map is populated correctly. I think that the code actually looks better now.",
        "createdAt" : "2017-02-13T22:51:02Z",
        "updatedAt" : "2017-02-13T22:51:02Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "16f63187-614a-4f53-bd4e-3cb1ac12f606",
        "parentId" : "1a17d0d5-c030-411d-b3fe-7fa1cd7b274a",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "As for autopopulated names, I was referring to this code: https://github.com/scalameta/scalameta/blob/1a451a339e9305a613e751de296f47915a5fc923/scalameta/dialects/src/main/scala/scala/meta/dialects/package.scala#L132. In that case, `name` is in the second parameter list of the case class, so it won't participate in equals/hashCode, etc.",
        "createdAt" : "2017-02-13T22:52:01Z",
        "updatedAt" : "2017-02-13T22:52:01Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "12e0cf7814bad1f41f76884678bebe61877ce4e4",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +81,85 @@  // because sometimes dialects representing distinct Scala versions\n  // can be structurally equal to each other.\n  override def canEqual(that: Any): Boolean = this eq that.asInstanceOf[AnyRef]\n  override def equals(other: Any): Boolean = this eq other.asInstanceOf[AnyRef]\n  override def hashCode: Int = System.identityHashCode(this)"
  },
  {
    "id" : "7f3df0e1-242e-4e7c-83ae-075c511ec601",
    "prId" : 678,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/678#pullrequestreview-21470507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14e7853d-34cf-43df-a601-2d0b48576b6b",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "YES üôè  This reads much better üò∏ ",
        "createdAt" : "2017-02-13T10:04:29Z",
        "updatedAt" : "2017-02-13T22:50:37Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "12e0cf7814bad1f41f76884678bebe61877ce4e4",
    "line" : 370,
    "diffHunk" : "@@ -1,1 +116,120 @@\n  implicit val Sbt0136 = Scala210.copy(\n    allowToplevelTerms = true,\n    toplevelSeparator = EOL\n  )"
  },
  {
    "id" : "48be621e-ba43-4b21-87b3-77690121627e",
    "prId" : 640,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/640#pullrequestreview-20364179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "parentId" : null,
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "If I understand correctly, after 2.12.2 is released, we should flip the flag, right? If yes, let's create a ticket for that.",
        "createdAt" : "2017-02-05T21:59:26Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "9a597e69-c29c-4f88-ab3f-2e4da005ebf8",
        "parentId" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "authorId" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "body" : "Ok, I create the ticket myself?",
        "createdAt" : "2017-02-06T09:55:42Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "tags" : [
        ]
      },
      {
        "id" : "ad2e778b-d987-49fb-84ba-490458195e17",
        "parentId" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "Yes, thank you!",
        "createdAt" : "2017-02-06T15:20:33Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "baa47058-6233-4416-bbd3-ce779df6ead9",
        "parentId" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "authorId" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "body" : "I create it now or I want till the PR is merged?",
        "createdAt" : "2017-02-06T15:51:38Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "tags" : [
        ]
      },
      {
        "id" : "5698f58b-79a3-4a19-b6f1-e6529f7c9126",
        "parentId" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I'm sure we'll get this PR merged soon, so please go for it now :)",
        "createdAt" : "2017-02-06T16:54:45Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "01b76fa0-8ccf-461d-9e01-80dcb47355b6",
        "parentId" : "0c1f0474-5827-482a-a825-2bde8b4186a2",
        "authorId" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "body" : "https://github.com/scalameta/scalameta/issues/645",
        "createdAt" : "2017-02-06T20:47:01Z",
        "updatedAt" : "2017-02-07T20:54:07Z",
        "lastEditedBy" : "c21da591-924f-4cd8-bfb4-9aa92e71f13b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1d446014e625f98e63e590a307644847c90e8eb",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +173,177 @@    def allowOrTypes = Scala211.allowOrTypes\n    def allowTraitParameters = Scala211.allowTraitParameters\n    def allowLiteralTypes: Boolean = false // Scheduled to be included in 2.12.2\n    private def writeReplace(): AnyRef = new Dialect.SerializationProxy(this)\n  }"
  },
  {
    "id" : "311cb1fd-4d5e-4915-a048-97c9e4827650",
    "prId" : 475,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f1a7d77-0dae-47e7-b714-18deeaffcd40",
        "parentId" : null,
        "authorId" : "951817ab-7f84-47b3-b139-e9583e3a2714",
        "body" : "Just a really quick comment.\n\nThis seems to depend heavily on Scala 2.11. With Scala 2.12 in RC now, 2.12 is just around the corner. Can we change the name of this to Paradise_211? To ease migration later? Also can we write the same code to work for both Paradise_211 and Paradise_212? @xeno-by correct me if I'm confused. I may have missed something in the Pre-SIP\n",
        "createdAt" : "2016-09-11T20:45:22Z",
        "updatedAt" : "2016-09-11T20:45:38Z",
        "lastEditedBy" : "951817ab-7f84-47b3-b139-e9583e3a2714",
        "tags" : [
        ]
      },
      {
        "id" : "7be21690-7993-4d6c-a379-b39fb48831b5",
        "parentId" : "9f1a7d77-0dae-47e7-b714-18deeaffcd40",
        "authorId" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "body" : "I didn't want to overengineer this, since for the time being 2.11 is going to be the only supported Scala version for Paradise 3.x. But migration is actually a valid concern. I'll rename this to `Paradise211` now.\n",
        "createdAt" : "2016-09-11T20:50:18Z",
        "updatedAt" : "2016-09-11T20:50:18Z",
        "lastEditedBy" : "56d6821a-439f-4d87-aba8-a6368926dbc5",
        "tags" : [
        ]
      },
      {
        "id" : "5ae79cfd-3326-48fe-97c2-20867e24ca5f",
        "parentId" : "9f1a7d77-0dae-47e7-b714-18deeaffcd40",
        "authorId" : "951817ab-7f84-47b3-b139-e9583e3a2714",
        "body" : "Fair enough. Thanks\n",
        "createdAt" : "2016-09-11T20:54:25Z",
        "updatedAt" : "2016-09-11T20:54:25Z",
        "lastEditedBy" : "951817ab-7f84-47b3-b139-e9583e3a2714",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7b94402582852f0ae56bacee5bda7276b88a9b1",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +103,107 @@  }\n\n  @leaf implicit object Paradise extends Dialect {\n    def name = \"Paradise\"\n    def bindToSeqWildcardDesignator = Scala211.bindToSeqWildcardDesignator"
  }
]