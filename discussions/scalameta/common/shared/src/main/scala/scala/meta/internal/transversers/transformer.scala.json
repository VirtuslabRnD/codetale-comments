[
  {
    "id" : "5af3db93-0a12-46d5-8593-e4556b6047a5",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-505624484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e51b0a02-f4d7-49b9-ae57-017b1134881f",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This produces for each field a n pattern matching block that will modify the tree if anything in it is modified. The whole function is just extracted, so not really changed.",
        "createdAt" : "2020-10-09T12:27:27Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +15,19 @@  import c.universe._\n\n  def transformField(f: Field): ValDef = {\n    def treeTransformer(input: Tree, tpe: Type): Tree = {\n      val from = c.freshName(TermName(\"from\"))"
  },
  {
    "id" : "76645bd5-5f74-461c-870e-e047b113222d",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-505624484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ed9192e-4921-4c76-a669-fb2ee668dfbc",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Here we produce values to be used later on similar to normal fields.\r\n\r\nFor example for template we get `early` already included in enclosing block from pattern match, but since derives is not in unapply, we need to add it manually.\r\n\r\n```scala\r\nval derives = tree.derives\r\n```",
        "createdAt" : "2020-10-09T12:39:20Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +103,107 @@    q\"\"\"\n      var same = true\n      ..$binaryCompatGetters\n      ..$transformedFields\n      ..${binaryCompatFields.map(transformField)}"
  },
  {
    "id" : "9ea5d9bb-659c-48ad-9eac-15aea76b5fb6",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-505624484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "665e5763-ec95-47e7-9c44-d464e09815db",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "The same logic used for tranformedFields is used here for binary compat ones.\r\n```\r\nval derives1 = {...}\r\n```",
        "createdAt" : "2020-10-09T12:39:53Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +105,109 @@      ..$binaryCompatGetters\n      ..$transformedFields\n      ..${binaryCompatFields.map(transformField)}\n      if (same) tree\n      else {"
  },
  {
    "id" : "03fada0a-4ce7-40fc-9319-f9b102135b9f",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-505624484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "650a62ef-1d9b-4008-9f93-b8a1283ddc0a",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Additionally we need to set the fields afterwards. It will look something like:\r\n```scala\r\n if (same)\r\n    tree\r\n else\r\n    {\r\n      val newTree = _root_.scala.meta.Template(early1, inits1, self1, stats1);\r\n      newTree.setDerives(derives1);\r\n      newTree\r\n    }\r\n}\r\n```",
        "createdAt" : "2020-10-09T12:40:41Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +109,113 @@      else {\n        val newTree = $constructor(..${transformedFields.map(_.name)})\n        ..$binaryCompatSetters\n        newTree\n      }"
  },
  {
    "id" : "8a5a559d-20a3-42f3-8266-04158e5ebbd3",
    "prId" : 1349,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/1349#pullrequestreview-97617512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4ab3691-d1c1-49ac-aefd-e00322f51eab",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Wow, I can't believe it was this simple!\r\n\r\n",
        "createdAt" : "2018-02-19T17:36:47Z",
        "updatedAt" : "2018-02-19T18:04:16Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d53589e87467cef6a3e03fcd0834a404afc404d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@      ..$transformedFields\n      if (same) tree\n      else $constructor(..${transformedFields.map(_.name)}).withOrigin(tree.origin)\n    \"\"\"\n  }"
  }
]