[
  {
    "id" : "3b90a0de-50eb-4955-81f8-1ce70fffa30d",
    "prId" : 2189,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2189#pullrequestreview-544269781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3698426c-b93f-4587-9f69-18b7c0b917d6",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "This is actual the fix for product, which is used in structure or in pprint.",
        "createdAt" : "2020-12-03T18:45:42Z",
        "updatedAt" : "2020-12-04T16:14:36Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3542fd0224104891b2ccc48008f3bcedf8eedbf6",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +279,283 @@\n        // generate product elements for @binaryCompat fields\n        pelClauses ++= fieldsNum\n          .to(fieldsNum + binaryCompatNum)\n          .zip(binaryCompatVars)"
  },
  {
    "id" : "6eb4689b-e167-47ab-9984-6de9bb58e695",
    "prId" : 2189,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2189#pullrequestreview-544270187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8b009dd-3e7e-4b51-92a7-bdf972e7814e",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Invokes the original apply",
        "createdAt" : "2020-12-03T18:48:36Z",
        "updatedAt" : "2020-12-04T16:14:36Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3542fd0224104891b2ccc48008f3bcedf8eedbf6",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +392,396 @@              def apply(...$params): $iname = {\n                ..$checks\n                val newAst = apply(...$internalArgss);\n                ..$setters\n                newAst"
  },
  {
    "id" : "72e13528-5654-4e50-b341-8e4edf71efbc",
    "prId" : 2189,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2189#pullrequestreview-545111196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82436af4-efa7-49a0-884f-a988e351c5ab",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Performance nitpick: the lambda to `sortBy` gets evaluated many times per element. You can cache the results by doing a method like here https://github.com/twitter/bazel-multideps/blob/db19c92d13bce01bcd0189309564c79213995917/multideps/src/main/scala/multideps/diagnostics/MultidepsEnrichments.scala#L58",
        "createdAt" : "2020-12-04T16:19:22Z",
        "updatedAt" : "2020-12-04T16:22:40Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "f171b2bf-b057-4b91-acc8-9c507baaaf98",
        "parentId" : "82436af4-efa7-49a0-884f-a988e351c5ab",
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "The size of the list will always be small here so I suspect performance is not a concern. Just an FYI, feel free to ignore",
        "createdAt" : "2020-12-04T16:20:48Z",
        "updatedAt" : "2020-12-04T16:22:40Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "bf759e68-936e-4781-ae10-76d38c613f5e",
        "parentId" : "82436af4-efa7-49a0-884f-a988e351c5ab",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "Currently it's mostly only a single element list, so it should not be an issue. But I haven't really thought about the performance here. \r\n\r\nI think I will leave as is, because I am afraid of really adding any more complexity here.",
        "createdAt" : "2020-12-04T16:29:36Z",
        "updatedAt" : "2020-12-04T16:29:36Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3542fd0224104891b2ccc48008f3bcedf8eedbf6",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +359,363 @@        val sortedBinaryCompatName = binaryCompatVars\n          .collect { case vr: ValDef => vr }\n          .sortBy { vr =>\n            try {\n              vr.mods.annotations.collectFirst { case q\"new binaryCompatField($version)\" =>"
  },
  {
    "id" : "ab3817b9-377a-4435-8147-a61e2e9e1a90",
    "prId" : 2189,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2189#pullrequestreview-545114597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e78cafab-e81a-495c-8d66-50390c789858",
        "parentId" : null,
        "authorId" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "body" : "Does this provide a stable sort when we have two bincompat fields with the same name?",
        "createdAt" : "2020-12-04T16:21:47Z",
        "updatedAt" : "2020-12-04T16:22:40Z",
        "lastEditedBy" : "bd90d0d4-3cfe-485f-b03d-29764e6b2eae",
        "tags" : [
        ]
      },
      {
        "id" : "136a46d0-5fbc-42a8-aaf8-104b835072e7",
        "parentId" : "e78cafab-e81a-495c-8d66-50390c789858",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "`sortBy` is stable judging by the docs so this should also be stable. So if we ever need to add two elements at the same time it should work ok. ",
        "createdAt" : "2020-12-04T16:33:33Z",
        "updatedAt" : "2020-12-04T16:33:33Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "3542fd0224104891b2ccc48008f3bcedf8eedbf6",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +364,368 @@                val since = version.toString().stripPrefix(\"\\\"\").stripSuffix(\"\\\"\")\n                val versions = since.split(\"\\\\.\").map(_.toInt)\n                (versions(0), versions(1), versions(2))\n              }.get\n            } catch {"
  },
  {
    "id" : "fc30dc15-6545-4a4f-96be-8b02d7327321",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-505624484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "240d202f-41c3-4e5d-925f-9b922aa47883",
        "parentId" : null,
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "We add the compat annotation to the getter to be able to recognise it later in transform.",
        "createdAt" : "2020-10-09T12:42:19Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +112,116 @@        val binaryCompatAbstractFields = binaryCompatVars.flatMap { case vr: ValDef =>\n          List(\n            q\"${binaryCompatMods(vr)} def ${getterName(vr)}: ${vr.tpt}\",\n            q\"def ${setterName(vr)}(${vr.name} : ${vr.tpt}) : Unit\"\n          )"
  },
  {
    "id" : "efcf07d9-4f1e-46ee-a03c-40d18d38d7c8",
    "prId" : 2134,
    "prUrl" : "https://github.com/scalameta/scalameta/pull/2134#pullrequestreview-508540137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8ade487-5d15-4d52-a091-cf394594ea6f",
        "parentId" : null,
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "[Q] should we also enforce `FINAL` ?",
        "createdAt" : "2020-10-10T16:32:50Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      },
      {
        "id" : "bff88a0a-695d-41c6-93d8-ae297ad7a970",
        "parentId" : "f8ade487-5d15-4d52-a091-cf394594ea6f",
        "authorId" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "body" : "I don't think so, private is already safe enough.",
        "createdAt" : "2020-10-14T13:54:02Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : "e26c6789-3ff6-4411-9f32-f6ffcf911775",
        "tags" : [
        ]
      },
      {
        "id" : "ffdb88cf-369e-4115-ac2a-433fb0d68e12",
        "parentId" : "f8ade487-5d15-4d52-a091-cf394594ea6f",
        "authorId" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "body" : "ok :+1: just educated myself that private final doesn't make any sense :sweat_smile: ",
        "createdAt" : "2020-10-14T16:46:28Z",
        "updatedAt" : "2020-10-14T16:46:28Z",
        "lastEditedBy" : "4505061e-6f7e-40b4-a615-ec2ee29e935c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +102,106 @@                c.abort(vr.pos, \"The binaryCompat AST field needs to be private\")\n              if (!vr.mods.hasFlag(MUTABLE))\n                c.abort(vr.pos, \"The binaryCompat AST field needs to declared as var\")\n              true\n            case _ => false"
  }
]