[
  {
    "id" : "a68e1eb0-4641-45b3-87be-7154152dfd88",
    "prId" : 1923,
    "prUrl" : "https://github.com/akka/alpakka/pull/1923#pullrequestreview-287466146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e9f8ea0-93ed-497d-87a2-03bc5fcc1f4c",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "Ok, under assumption that the `rawUri` now starts with the path which should be case.",
        "createdAt" : "2019-09-12T14:17:53Z",
        "updatedAt" : "2019-09-12T14:26:47Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      },
      {
        "id" : "4c3e5b5d-6a67-4ece-9810-1d9079f43453",
        "parentId" : "5e9f8ea0-93ed-497d-87a2-03bc5fcc1f4c",
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "Maybe add a `require(rawUri startsWith rawPath)` just to make sure there are no surprises later on?",
        "createdAt" : "2019-09-12T14:21:07Z",
        "updatedAt" : "2019-09-12T14:26:47Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc0f3792a9ace6ae85948c8d1ee08cf5b2355156",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +225,229 @@      val fixedPath = rawPath.replaceAll(\"\\\\+\", \"%2B\")\n      require(rawUri startsWith rawPath)\n      fixedPath + rawUri.drop(rawPath.length)\n    } else {\n      rawUri"
  },
  {
    "id" : "5a03f2c4-1a21-45fa-b5d9-b9eeafac4d30",
    "prId" : 253,
    "prUrl" : "https://github.com/akka/alpakka/pull/253#pullrequestreview-33795426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3386ea2-fa6d-4fa2-9db6-e566663b2f7c",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "Good idea, to put extract that method.",
        "createdAt" : "2017-04-20T15:03:08Z",
        "updatedAt" : "2017-05-09T15:47:19Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "a634d2b04f98ca529d4da6baa259d8a0890a9ada",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +94,98 @@      .withUri(uriFn(requestUri(s3Location.bucket, Some(s3Location.key), region)))\n\n  private[this] def requestHost(bucket: String, region: String)(implicit conf: S3Settings): Uri.Host =\n    conf.proxy match {\n      case None =>"
  },
  {
    "id" : "d8ece8bd-53a0-45c3-865d-c1b12d4d2710",
    "prId" : 253,
    "prUrl" : "https://github.com/akka/alpakka/pull/253#pullrequestreview-33795426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d8fbf22-ae35-4da5-9939-b81c37e0080e",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "I wonder if it wouldn't make sense to use separate methods for the initial call and the continuation. It seems that you either would want to add a prefix or a token both never both?",
        "createdAt" : "2017-04-20T15:37:03Z",
        "updatedAt" : "2017-05-09T15:47:19Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "a634d2b04f98ca529d4da6baa259d8a0890a9ada",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +17,21 @@private[alpakka] object HttpRequests {\n\n  def listBucket(\n      bucket: String,\n      region: String,"
  },
  {
    "id" : "23456909-7ab2-499f-a216-f8ca88fbf411",
    "prId" : 177,
    "prUrl" : "https://github.com/akka/alpakka/pull/177#pullrequestreview-21453843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2f92f1f-9b09-4ba4-9829-984c96293b00",
        "parentId" : null,
        "authorId" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "body" : "ok, so us-east-1 is some kind of special default",
        "createdAt" : "2017-02-13T08:10:37Z",
        "updatedAt" : "2017-02-13T08:10:52Z",
        "lastEditedBy" : "b8cd968d-9321-417f-8dcf-5300bfdd199e",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa81fc00bd9454103cda5b6e41640eb50c7c63ec",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +90,94 @@          region match {\n            case \"us-east-1\" => Uri.Host(s\"${s3Location.bucket}.s3.amazonaws.com\")\n            case _ => Uri.Host(s\"${s3Location.bucket}.s3-$region.amazonaws.com\")\n          }\n        case Some(proxy) => Uri.Host(proxy.host)"
  },
  {
    "id" : "1817053a-f885-47c6-a2d4-6c8842b99c5e",
    "prId" : 24,
    "prUrl" : "https://github.com/akka/alpakka/pull/24#pullrequestreview-8767778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc1fb529-89fa-44a4-b3a9-32a2241e5300",
        "parentId" : null,
        "authorId" : "fa3d0bce-7460-4467-9643-30183ac343bd",
        "body" : "Hi all, looking forward to the s3 support! I played around with it a bit and noticed a cert related error. The issues seems to be related to having periods \".\" in bucket names, which breaks the s3 wild card certificate. For example, if I have a bucket \"has.dots\" then I'll get the following error: Caused by: java.security.cert.CertificateException: No subject alternative DNS name matching has.dots.s3.amazonaws.com found.\n\nI was able to work around the issue by moving the bucket out of the host and placing it in the path (ie not using virtual hosted–style buckets):\n\n```\n  def requestHost(s3Location: S3Location): Uri.Host = Uri.Host(\"s3-us-west-1.amazonaws.com\")\n\n  def requestUri(s3Location: S3Location): Uri = Uri(s\"/${s3Location.bucket}/${s3Location.key}\").withHost(requestHost(s3Location)).withScheme(\"https\")\n```\n\nThis issue is described in http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html\nSpecifically, \"When using virtual hosted–style buckets with SSL, the SSL wild card certificate only matches buckets that do not contain periods. To work around this, use HTTP or write your own certificate verification logic.\"\n",
        "createdAt" : "2016-11-15T21:33:20Z",
        "updatedAt" : "2016-11-17T07:59:36Z",
        "lastEditedBy" : "fa3d0bce-7460-4467-9643-30183ac343bd",
        "tags" : [
        ]
      },
      {
        "id" : "1de8247a-7879-4ba0-a81b-02d9735da537",
        "parentId" : "dc1fb529-89fa-44a4-b3a9-32a2241e5300",
        "authorId" : "a8a7ac35-01a2-4f32-abf9-242df63175ea",
        "body" : "Sounds like a great suggestion. If you can provide a PR for this branch, then go ahead, otherwise let's move the suggestion into a ticket so people can work on it once this lands in master.\n",
        "createdAt" : "2016-11-16T08:26:09Z",
        "updatedAt" : "2016-11-17T07:59:36Z",
        "lastEditedBy" : "a8a7ac35-01a2-4f32-abf9-242df63175ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9960883a0204e0c3813c613afa4e76a0be17136",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@  }\n\n  def requestHost(s3Location: S3Location): Uri.Host = Uri.Host(s\"${s3Location.bucket}.s3.amazonaws.com\")\n\n  def requestUri(s3Location: S3Location): Uri = Uri(s\"/${s3Location.key}\").withHost(requestHost(s3Location)).withScheme(\"https\")"
  }
]