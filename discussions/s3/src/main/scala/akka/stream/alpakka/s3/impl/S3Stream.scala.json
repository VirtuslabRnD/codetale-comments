[
  {
    "id" : "bbcd6bb9-75d8-438a-a7b8-449181f5f832",
    "prId" : 2341,
    "prUrl" : "https://github.com/akka/alpakka/pull/2341#pullrequestreview-427092190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81f35643-bdc0-4085-adaf-896149999fa4",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "A bit weird way to use the marshaller but still better than all the duplication from before.",
        "createdAt" : "2020-06-09T12:35:25Z",
        "updatedAt" : "2020-06-09T15:48:09Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "2564821bb4863ccaf959ee0c8f4c0ad0e04d22ad",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +243,247 @@  private def unmarshalError(code: StatusCode, entity: ResponseEntity)(implicit mat: Materializer) = {\n    import mat.executionContext\n    Unmarshal(entity).to[String].map { err =>\n      throw S3Exception(err, code)\n    }"
  },
  {
    "id" : "8b5ccd7f-daaf-4a18-8d63-422a414b5657",
    "prId" : 2116,
    "prUrl" : "https://github.com/akka/alpakka/pull/2116#pullrequestreview-359979965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d629ea61-b57f-48e0-a019-34b6bfd8e681",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "What failures do happen here? Are all of them worth retrying?",
        "createdAt" : "2020-02-17T11:16:00Z",
        "updatedAt" : "2020-02-19T04:02:21Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "393de2cd-0920-4e89-b6d1-cbc632976c9f",
        "parentId" : "d629ea61-b57f-48e0-a019-34b6bfd8e681",
        "authorId" : "e69ead3f-d900-47af-80f3-6ffd9d0ca0ec",
        "body" : "So the only one I've encountered in recent memory is `akka.http.impl.engine.client.OutgoingConnectionBlueprint$UnexpectedConnectionClosureException`, which is basically a connection reset... something that S3 seems to do every so often in lieu of a 500.  My inclination is that any exception here is likely to be transient, and it's no great harm if it isn't (it'll still get thrown after a bit of a delay, and probably points to an environmental issue or something requiring human attention), particularly as UploadPart is idempotent.  I think if/when people do identify recurrent exceptions that can and do occur with some regularity, and where retrying is just a waste of time, they can add them here.",
        "createdAt" : "2020-02-17T21:55:00Z",
        "updatedAt" : "2020-02-19T04:02:21Z",
        "lastEditedBy" : "e69ead3f-d900-47af-80f3-6ffd9d0ca0ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec32a27ad65db1a37d1aa73a0e830c4c5bd383aa",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +660,664 @@                None\n              }\n            case (chunkAndUploadInfo, (Failure(_), _)) =>\n              // Treat any exception as transient.\n              Some(chunkAndUploadInfo)"
  },
  {
    "id" : "846e15de-74eb-43b2-bc69-7915353d809d",
    "prId" : 1686,
    "prUrl" : "https://github.com/akka/alpakka/pull/1686#pullrequestreview-239842892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70f00969-9a18-4c3d-8df4-c7ac0d0d805c",
        "parentId" : null,
        "authorId" : "9e3b280e-f564-4cc3-aad7-44f7784f8a00",
        "body" : "I'm wondering, does going back to localDate in the CredentialScope screw things up? Because now requestDate and CredentialScope.date are going to have different dates, causing S3 to reject the request still.",
        "createdAt" : "2019-05-20T18:01:02Z",
        "updatedAt" : "2019-05-20T18:03:07Z",
        "lastEditedBy" : "9e3b280e-f564-4cc3-aad7-44f7784f8a00",
        "tags" : [
        ]
      },
      {
        "id" : "65b2bacb-5373-48a3-ad7a-bd9e3856ce92",
        "parentId" : "70f00969-9a18-4c3d-8df4-c7ac0d0d805c",
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "I do not see how the dates can be different.\r\nFrom `toLocalDate` Javadoc: \"This returns a LocalDate with the same year, month and day as this date-time.\"",
        "createdAt" : "2019-05-21T06:20:07Z",
        "updatedAt" : "2019-05-21T06:20:07Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      }
    ],
    "commit" : "42d4a3e605a84f64a0bcc0ab704d8c6de7793a36",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +104,108 @@      requestDate,\n      settings.credentialsProvider,\n      CredentialScope(requestDate.toLocalDate, settings.s3RegionProvider.getRegion, \"s3\")\n    )\n  }"
  },
  {
    "id" : "fa5b2638-7e71-49e8-8130-8e847890ce09",
    "prId" : 858,
    "prUrl" : "https://github.com/akka/alpakka/pull/858#pullrequestreview-106466820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9148956f-2969-4aa8-ba1f-53787835f572",
        "parentId" : null,
        "authorId" : "a141b0cb-a84d-4131-a4c1-fc1f8b93e109",
        "body" : "Jup. I can see how it is reasonable to construct your own Content-Type header in this case... we might want to introduce a nicer escape hatch for that at some point - though still making it evident that for 'typical' situations you should not construct it yourself.",
        "createdAt" : "2018-03-23T12:02:39Z",
        "updatedAt" : "2018-03-23T12:02:39Z",
        "lastEditedBy" : "a141b0cb-a84d-4131-a4c1-fc1f8b93e109",
        "tags" : [
        ]
      }
    ],
    "commit" : "804f2c4919522086238e34535953423fd1e657c0",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +231,235 @@\n  //`Content-Type` header is by design not accessible as header. So need to have a custom\n  //header implementation to expose that\n  private case class CustomContentTypeHeader(contentType: ContentType) extends CustomHeader {\n    override def name(): String = \"Content-Type\""
  },
  {
    "id" : "6e336123-544e-4314-b2f9-c2e90a75d82a",
    "prId" : 253,
    "prUrl" : "https://github.com/akka/alpakka/pull/253#pullrequestreview-37015887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59bc95b7-67e6-47b2-bf30-62bdfd08abc1",
        "parentId" : null,
        "authorId" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "body" : "Yes, this is great now.",
        "createdAt" : "2017-05-09T12:34:53Z",
        "updatedAt" : "2017-05-09T15:47:19Z",
        "lastEditedBy" : "f671ad62-946e-4691-83e4-79ee05b8b109",
        "tags" : [
        ]
      }
    ],
    "commit" : "a634d2b04f98ca529d4da6baa259d8a0890a9ada",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +84,88 @@\n    Source\n      .unfoldAsync[ListBucketState, Seq[String]](Starting) {\n        case Finished => Future.successful(None)\n        case Starting => listBucketCall(None)"
  }
]