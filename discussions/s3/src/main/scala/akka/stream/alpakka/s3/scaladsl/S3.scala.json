[
  {
    "id" : "926b4377-bbae-4da6-98bd-bd7a2d84c1e4",
    "prId" : 2626,
    "prUrl" : "https://github.com/akka/alpakka/pull/2626#pullrequestreview-621360835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c168e9d-bfa2-4fd6-8b70-1f653584210d",
        "parentId" : null,
        "authorId" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "body" : "Breaking change. Replaced `Materializer` implicit params with `ClassicActorSystemProvider`.",
        "createdAt" : "2021-03-25T16:56:39Z",
        "updatedAt" : "2021-03-26T01:39:40Z",
        "lastEditedBy" : "daac5cb5-ce57-4037-a06c-7adf6a3f10e6",
        "tags" : [
        ]
      }
    ],
    "commit" : "eac491925c4c26609507245e1e28fa1453b36eb7",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1,5 @@/*\n * Copyright (C) 2016-2020 Lightbend Inc. <https://www.lightbend.com>\n */\n\npackage akka.stream.alpakka.s3.scaladsl"
  },
  {
    "id" : "bee5e2f0-4b0a-427f-aae7-fd8e6084dc34",
    "prId" : 1608,
    "prUrl" : "https://github.com/akka/alpakka/pull/1608#pullrequestreview-234419828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57b6ee14-118e-4004-9faa-1c6ef1e0b0b0",
        "parentId" : null,
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "I'm a bit surprised the overload works for picking the correct method based on the return type. And I wonder if it would be better to come up with different names to properly distinguish them.",
        "createdAt" : "2019-04-30T10:09:44Z",
        "updatedAt" : "2019-05-07T11:14:43Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "52d75ef0-5197-44cc-9074-d2c41d196c90",
        "parentId" : "57b6ee14-118e-4004-9faa-1c6ef1e0b0b0",
        "authorId" : "8c9a317a-77d6-498d-8ef9-a6b8fb054d10",
        "body" : "I mean it is kind of good and bad. It is consistent and clear but only works when you specify type.\r\n\r\nDo you think that it would be better when `Source` version would be `makeBucket` and future versions: `makeBucketF`? ",
        "createdAt" : "2019-04-30T12:56:19Z",
        "updatedAt" : "2019-05-07T11:14:43Z",
        "lastEditedBy" : "8c9a317a-77d6-498d-8ef9-a6b8fb054d10",
        "tags" : [
        ]
      },
      {
        "id" : "07998504-47a1-4bec-a3ea-0240debbc5e5",
        "parentId" : "57b6ee14-118e-4004-9faa-1c6ef1e0b0b0",
        "authorId" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "body" : "I think I'd prefer to append `Source`. \r\n```scala\r\ndef makeBucketSource(bucketName: String): Source[Done, NotUsed]\r\n``` \r\nlooks OK, doesn't it?",
        "createdAt" : "2019-05-07T09:13:54Z",
        "updatedAt" : "2019-05-07T11:14:43Z",
        "lastEditedBy" : "9500ec63-4ee5-4a4b-820c-121a3523fbda",
        "tags" : [
        ]
      },
      {
        "id" : "fe0aedc6-f870-4c9e-93be-4f231ee8810f",
        "parentId" : "57b6ee14-118e-4004-9faa-1c6ef1e0b0b0",
        "authorId" : "8c9a317a-77d6-498d-8ef9-a6b8fb054d10",
        "body" : "Makes sense :+1: \r\n\r\nI will submit a updated version in few hours",
        "createdAt" : "2019-05-07T09:54:17Z",
        "updatedAt" : "2019-05-07T11:14:43Z",
        "lastEditedBy" : "8c9a317a-77d6-498d-8ef9-a6b8fb054d10",
        "tags" : [
        ]
      }
    ],
    "commit" : "981df237c787fe77ff1e57e97d5a118386cb378a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +236,240 @@   * @return [[scala.concurrent.Future Future]] with type [[Done]] as API doesn't return any additional information\n   */\n  def makeBucket(bucketName: String)(implicit mat: Materializer, attr: Attributes = Attributes()): Future[Done] =\n    S3Stream.makeBucket(bucketName)\n"
  }
]