[
  {
    "id" : "bbcab3cb-52d0-4430-b90c-f38fdf081317",
    "prId" : 997,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/997#pullrequestreview-419915814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a821879d-19ae-4efa-9a84-37dafc8fd667",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "what happens if the future is already completed?",
        "createdAt" : "2020-05-28T08:38:14Z",
        "updatedAt" : "2020-05-28T09:23:20Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "ebf93969-ea92-479a-91b7-773aa9112439",
        "parentId" : "a821879d-19ae-4efa-9a84-37dafc8fd667",
        "authorId" : "50ed2ab6-ae6d-4e6d-9d6c-8a3737c1baf8",
        "body" : "Yes. Needed to check whether it is done or is cancelled already.\r\nThank you.",
        "createdAt" : "2020-05-28T09:04:25Z",
        "updatedAt" : "2020-05-28T09:23:20Z",
        "lastEditedBy" : "50ed2ab6-ae6d-4e6d-9d6c-8a3737c1baf8",
        "tags" : [
        ]
      }
    ],
    "commit" : "969f4e9407781dc732715ee08e92bc524eda908b",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +720,724 @@        private void cancelAutomaticTransitionToHalfOpen() {\n            if (transitionToHalfOpenFuture != null && !transitionToHalfOpenFuture.isDone()) {\n                transitionToHalfOpenFuture.cancel(true);\n            }\n        }"
  },
  {
    "id" : "e2f9f883-cc67-4ff6-9b65-9e281d274efc",
    "prId" : 194,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/194#pullrequestreview-89288390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "894de857-7a79-41d9-8295-71ba4d53bcc0",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "I think we don't need special event handlers like `onDisable` and `onForceOpen`. I would suggest to use `onStateTransition` for all state transitions.",
        "createdAt" : "2018-01-16T12:23:39Z",
        "updatedAt" : "2018-01-26T16:41:33Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "19b82904-ab70-4d48-acc8-8e03a9e0fb0b",
        "parentId" : "894de857-7a79-41d9-8295-71ba4d53bcc0",
        "authorId" : "9846db02-b759-47d4-9123-87f757a6f12b",
        "body" : "only for `onReset`",
        "createdAt" : "2018-01-16T23:46:20Z",
        "updatedAt" : "2018-01-26T16:41:33Z",
        "lastEditedBy" : "9846db02-b759-47d4-9123-87f757a6f12b",
        "tags" : [
        ]
      }
    ],
    "commit" : "beacb83443c740ff0b2b7956259b4ebe300888a1",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +289,293 @@\n        @Override\n        public EventPublisher onReset(EventConsumer<CircuitBreakerOnResetEvent> onResetEventConsumer) {\n            registerConsumer(CircuitBreakerOnResetEvent.class, onResetEventConsumer);\n            return this;"
  }
]