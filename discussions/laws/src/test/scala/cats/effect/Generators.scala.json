[
  {
    "id" : "0def2520-1158-4f9b-abd6-b68b6aac0b01",
    "prId" : 877,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/877#pullrequestreview-416553694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3be0257e-8113-4bb3-a8cb-528529d22e57",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Don't you want to generate actual side effects? Although I don't know how exactly that would work, this is essentially `pure` and we already have that.",
        "createdAt" : "2020-05-21T22:50:04Z",
        "updatedAt" : "2020-06-09T01:21:55Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "ed2a1388-86b6-46df-b12a-0f65bb43fe69",
        "parentId" : "3be0257e-8113-4bb3-a8cb-528529d22e57",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Well, I've been thinking about that a lot. I really *do* want to generate side-effects, but I kinda can't. Or rather, I *can* generate them, but I can't observe them.\r\n\r\nWe have this same problem with fibers. So when we generate a `start`… where does it go? Really what we want to be able to do is generate a DAG, where the `start` node forks the path and things come back together at `join` and everything in the middle is also generated (or alternatively, you could `start` and just ignore it). But… we can't really do that directly.\r\n\r\nWe have the same problem with side-effects: there's no point in generating a side-effect if you can't later come back and observe it. But that then requires generating a *pair* of effects, with stuff in between, and some shared mutable place that the side-effects can be represented without stepping on each other (or maybe *with* stepping on each other). It's kind of a mess.\r\n\r\nSo for now it's just the `pure` generator.",
        "createdAt" : "2020-05-21T23:16:28Z",
        "updatedAt" : "2020-06-09T01:21:55Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b27e6d5c8b81e654e402e5568e94a3fb84db13",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +151,155 @@\n  override protected def baseGen[A: Arbitrary: Cogen] =\n    (\"delay\" -> arbitrary[A].map(F.delay(_))) :: super.baseGen[A]\n}\n"
  },
  {
    "id" : "8f6f83de-5139-4ab4-8dfa-e8ba63baf502",
    "prId" : 877,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/877#pullrequestreview-416554106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fd6d04e-2f77-4dcd-a749-0defacfff31e",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Unless I'm missing something, this completes immediately and `fo` never has a chance to be sequenced",
        "createdAt" : "2020-05-21T22:54:22Z",
        "updatedAt" : "2020-06-09T01:21:55Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "c456d510-1927-4bcb-a92a-baf611317148",
        "parentId" : "1fd6d04e-2f77-4dcd-a749-0defacfff31e",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "It does complete immediately, though that reminds me that we need to have a law which shows how that sequencing is intended to be handled (tldr, `fo` should still be sequenced).",
        "createdAt" : "2020-05-21T23:17:46Z",
        "updatedAt" : "2020-06-09T01:21:55Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b27e6d5c8b81e654e402e5568e94a3fb84db13",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +267,271 @@            deeper[Unit])),\n        Cogen.cogenOption(cogenFU))\n    } yield F.async[A](k => F.delay(k(result)) >> fo)\n\n  private def genEvalOn[A: Arbitrary: Cogen](deeper: GenK[F]) ="
  }
]