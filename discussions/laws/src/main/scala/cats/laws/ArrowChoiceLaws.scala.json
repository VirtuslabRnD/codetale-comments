[
  {
    "id" : "d23565f5-bdb5-4486-ab83-1508679ca94f",
    "prId" : 2096,
    "prUrl" : "https://github.com/typelevel/cats/pull/2096#pullrequestreview-83043082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6746c73-3dd9-4964-aa8a-6cc357fb5934",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Are these laws based on the ones defined in [Control-ArrowChoice](https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Arrow.html)? ",
        "createdAt" : "2017-12-12T15:25:27Z",
        "updatedAt" : "2017-12-13T19:23:41Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "7e95e049-2a04-4d43-9129-b7e1fa9ac0bb",
        "parentId" : "f6746c73-3dd9-4964-aa8a-6cc357fb5934",
        "authorId" : "578d04c8-51eb-46e6-af71-72c52643fcc1",
        "body" : "Hmm, they are meant to but interestingly the ones in the source and the ones in the Haskell doc do not quite look the same, I'll give them another pass tonight to make sure I transcribed the correct set.",
        "createdAt" : "2017-12-12T16:29:58Z",
        "updatedAt" : "2017-12-13T19:23:41Z",
        "lastEditedBy" : "578d04c8-51eb-46e6-af71-72c52643fcc1",
        "tags" : [
        ]
      },
      {
        "id" : "a220cd44-36ae-45dd-9979-616cbbf9f259",
        "parentId" : "f6746c73-3dd9-4964-aa8a-6cc357fb5934",
        "authorId" : "578d04c8-51eb-46e6-af71-72c52643fcc1",
        "body" : "Yeah, I totally misread them, somehow. How embarrassing! Sorry about that. Fixing.",
        "createdAt" : "2017-12-13T02:02:46Z",
        "updatedAt" : "2017-12-13T19:23:41Z",
        "lastEditedBy" : "578d04c8-51eb-46e6-af71-72c52643fcc1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b5d4972f83b452f1c8da7228bdf76c058491057",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@trait ArrowChoiceLaws[F[_, _]] extends ArrowLaws[F] with ChoiceLaws[F] {\n  implicit override def F: ArrowChoice[F]\n  implicit def Function: ArrowChoice[Function1]\n\n  def sumAssoc[A, B, C](e: Either[Either[A, B], C]): Either[A, Either[B, C]] ="
  }
]