[
  {
    "id" : "6db0defd-9b2a-467e-bd12-b1c5ac558435",
    "prId" : 2577,
    "prUrl" : "https://github.com/typelevel/cats/pull/2577#pullrequestreview-167014917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd09a9d0-900f-4b72-ad61-81a38877365a",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Hmm, my thinking is that `Stream` as a type doesn't enforce exhaustiveness, you probably have a practical case for favoring `Stream` over `List`/`Chain` somewhere right? ",
        "createdAt" : "2018-10-22T16:51:15Z",
        "updatedAt" : "2019-02-17T06:31:08Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "29e50f4b-eec5-48f4-88c9-641ffeb637b0",
        "parentId" : "dd09a9d0-900f-4b72-ad61-81a38877365a",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "The `Eq` instances that use `ExhaustiveCheck` use `forall`, so my thought was that you wouldn't necessarily need to generate all instances for tests that fail fast. But since this is intended for small domains, there's really no reason to think that `Stream` would be better than `List`. I'm happy to change it if you'd like.",
        "createdAt" : "2018-10-22T17:14:35Z",
        "updatedAt" : "2019-02-17T06:31:08Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "571a120c3ccfca82ccaf2923ef7e88e6316176fa",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@ */\ntrait ExhaustiveCheck[A] extends Serializable { self =>\n  def allValues: Stream[A]\n}\n"
  },
  {
    "id" : "f34bee50-e92f-402e-954c-bc6577446298",
    "prId" : 2577,
    "prUrl" : "https://github.com/typelevel/cats/pull/2577#pullrequestreview-167014299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c22c6d9-44fd-48f3-a9e5-c941b44a57ee",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "for MiniInt, it will be 349 values, just curious do we actually need this instance or you added it preemptively? ",
        "createdAt" : "2018-10-22T16:56:38Z",
        "updatedAt" : "2019-02-17T06:31:08Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "1ef1e30c-dfc7-49a2-831b-f8812473087b",
        "parentId" : "3c22c6d9-44fd-48f3-a9e5-c941b44a57ee",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "It is used by some tests, but I tried to make those places use `(MiniInt, Boolean, Boolean)` to reduce the domain size a bit. Let me know if you found a place where I failed to do that.",
        "createdAt" : "2018-10-22T17:12:59Z",
        "updatedAt" : "2019-02-17T06:31:08Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "571a120c3ccfca82ccaf2923ef7e88e6316176fa",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@        b <- B.allValues\n        c <- C.allValues\n      } yield (a, b, c)\n    )\n"
  }
]