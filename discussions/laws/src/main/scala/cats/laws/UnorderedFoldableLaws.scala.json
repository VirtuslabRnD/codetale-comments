[
  {
    "id" : "0460eef6-6c68-430c-876b-daabd40ee555",
    "prId" : 1981,
    "prUrl" : "https://github.com/typelevel/cats/pull/1981#pullrequestreview-76415075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d97c2cf5-13f8-4248-9f37-c1bbca59496a",
        "parentId" : null,
        "authorId" : "4ba044d4-c7ec-4557-a24c-1ac7e3efc057",
        "body" : "Could it be made to be such that `existsLazy` and `forallLazy` are laws for `UnorderedFoldable` and not just `Foldable`?",
        "createdAt" : "2017-11-09T15:15:33Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "4ba044d4-c7ec-4557-a24c-1ac7e3efc057",
        "tags" : [
        ]
      },
      {
        "id" : "3541660c-f195-4344-9b2a-40f137d9ce88",
        "parentId" : "d97c2cf5-13f8-4248-9f37-c1bbca59496a",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "I think lazyness would require `foldRight`, no? ",
        "createdAt" : "2017-11-10T11:01:13Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "f4594a68-31fd-4c80-a352-43ce7ba77381",
        "parentId" : "d97c2cf5-13f8-4248-9f37-c1bbca59496a",
        "authorId" : "4ba044d4-c7ec-4557-a24c-1ac7e3efc057",
        "body" : "I believe you can do it with `Eval`: see my duplicative [attempt](https://github.com/hrhino/cats/blob/5638c658bafcac4e06a841138d1bb5f6fa71617c/core/src/main/scala/cats/UnorderedFoldable.scala#L94-L99) at this type class.\r\n\r\n```scala\r\n  def exists[A](fa: F[A])(p: A => Boolean): Boolean =\r\n    foldMapUnordered(fa)(a => Eval.later(p(a)))(new CommutativeMonoid[Eval[Boolean]] {\r\n      def empty = Eval.False\r\n      def combine(x: Eval[Boolean], y: Eval[Boolean]): Eval[Boolean] =\r\n        x.flatMap(xv => if (xv) Eval.True else y)\r\n    }).value\r\n```\r\n\r\nand dually for `forall`.",
        "createdAt" : "2017-11-10T13:56:20Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "4ba044d4-c7ec-4557-a24c-1ac7e3efc057",
        "tags" : [
        ]
      },
      {
        "id" : "e634bf5d-3a0b-4622-a63f-cb72ec9f432b",
        "parentId" : "d97c2cf5-13f8-4248-9f37-c1bbca59496a",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "You're absolutely right, this is great! Thank you so much!",
        "createdAt" : "2017-11-14T11:51:26Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea38cd60eb2846d92d6b9b425524433717ee9882",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@  def forallEmpty[A](fa: F[A], p: A => Boolean): Boolean = {\n    !F.isEmpty(fa) || F.forall(fa)(p)\n  }\n\n"
  }
]