[
  {
    "id" : "13ec4dc1-2c71-4c3c-83ac-171ddc809528",
    "prId" : 455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "459527ef-2c0d-48f4-abb6-9e6484550cca",
        "parentId" : null,
        "authorId" : "e706d82a-117b-4df8-a082-5200de4da984",
        "body" : "workaround in scalaz https://github.com/scalaz/scalaz/commit/450ed685ac52ca6fe63\n",
        "createdAt" : "2015-08-25T14:28:19Z",
        "updatedAt" : "2015-08-26T19:14:06Z",
        "lastEditedBy" : "e706d82a-117b-4df8-a082-5200de4da984",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb01f5d1ea5ba518a058bd9cbdcb5daac90ad8e6",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +71,75 @@  // composition. The current value (8) could result in streams of up\n  // to 512 elements in length. Thus, since F may not be stack-safe,\n  // we want to keep n relatively small.\n  implicit def streamingTArbitrary[F[_], A](implicit F: Monad[F], A: Arbitrary[A]): Arbitrary[StreamingT[F, A]] =\n    Arbitrary(for {"
  }
]