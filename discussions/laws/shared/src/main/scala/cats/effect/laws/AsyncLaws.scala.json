[
  {
    "id" : "0adc0465-7259-484b-a2e9-cc022587f819",
    "prId" : 1528,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1528#pullrequestreview-556065390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60edbfb-3d22-402c-b469-ad485908e153",
        "parentId" : null,
        "authorId" : "3f1176f1-791a-4566-8749-308589834168",
        "body" : "`scalafmt` wanted to break this line at the `a` in `F.pure(a)` 😒 ",
        "createdAt" : "2020-12-20T22:01:58Z",
        "updatedAt" : "2020-12-20T22:01:58Z",
        "lastEditedBy" : "3f1176f1-791a-4566-8749-308589834168",
        "tags" : [
        ]
      }
    ],
    "commit" : "2380817284c1f7b4605ea213ee15e29887ce189b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +29,33 @@  // format: off\n  def asyncRightIsUncancelableSequencedPure[A](a: A, fu: F[Unit]) =\n    F.async[A](k => F.delay(k(Right(a))) >> fu.as(None)) <-> (F.uncancelable(_ => fu) >> F.pure(a))\n  // format: on\n"
  },
  {
    "id" : "23879d70-aeeb-40cc-aa01-a61277f5012d",
    "prId" : 1484,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1484#pullrequestreview-556056511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "769542d7-5c84-49ea-8b65-dba9e5d12cf8",
        "parentId" : null,
        "authorId" : "3f1176f1-791a-4566-8749-308589834168",
        "body" : "My rationale for the `uncancelable` is that `fu` is sequenced when `async` is evaluated, but its cancellation status doesn't affect the outcome.",
        "createdAt" : "2020-12-13T22:34:44Z",
        "updatedAt" : "2020-12-18T22:50:04Z",
        "lastEditedBy" : "3f1176f1-791a-4566-8749-308589834168",
        "tags" : [
        ]
      },
      {
        "id" : "8fc0828a-128e-44ee-a219-d6b326083a0e",
        "parentId" : "769542d7-5c84-49ea-8b65-dba9e5d12cf8",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Actually I think it's cancelation status still affects the outcome. `fu = F.canceled` would still imply `F.canceled` on both sides. Does this actually produce a different test outcome?",
        "createdAt" : "2020-12-18T18:35:06Z",
        "updatedAt" : "2020-12-18T22:50:04Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "6dbf3aa3-d31e-422e-b3a8-4779d2b0ae12",
        "parentId" : "769542d7-5c84-49ea-8b65-dba9e5d12cf8",
        "authorId" : "3f1176f1-791a-4566-8749-308589834168",
        "body" : "You're right, good call, looks like I misinterpreted the failures before. Running the original laws again shows they fail when one side doesn't terminate and the other ends up as `canceled`. I'll have to investigate that more.",
        "createdAt" : "2020-12-18T19:43:46Z",
        "updatedAt" : "2020-12-18T22:50:04Z",
        "lastEditedBy" : "3f1176f1-791a-4566-8749-308589834168",
        "tags" : [
        ]
      },
      {
        "id" : "5d424fce-ce87-4df5-98f0-f465243752c7",
        "parentId" : "769542d7-5c84-49ea-8b65-dba9e5d12cf8",
        "authorId" : "3f1176f1-791a-4566-8749-308589834168",
        "body" : "Looking into this a bit more, I think this change is actually correct if we want to keep the current semantic that the effect returned from the async callback\r\n```scala\r\n(Either[Throwable, A] => Unit) => F[Option[F[Unit]]]\r\n```\r\nis uncancelable (e.g. consider `fu = F.canceled >> F.never`).\r\n\r\nI think my use of the term \"outcome\" in the OP caused confusion. `fu` does affect the resulting `Outcome`, but not the \"outcome\" in the sense that cancellation is suppressed.",
        "createdAt" : "2020-12-20T19:48:45Z",
        "updatedAt" : "2020-12-20T19:48:45Z",
        "lastEditedBy" : "3f1176f1-791a-4566-8749-308589834168",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f2b59b16641cbc6da688001a69c07af81d3a24e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +27,31 @@  implicit val F: Async[F]\n\n  def asyncRightIsUncancelableSequencedPure[A](a: A, fu: F[Unit]) =\n    F.async[A](k => F.delay(k(Right(a))) >> fu.as(None)) <-> F.uncancelable(_ =>\n      fu >> F.pure(a))"
  },
  {
    "id" : "858fb57c-40ce-40a3-9fcc-2c991c296b28",
    "prId" : 473,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/473#pullrequestreview-192994699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79d9c3fc-5c0d-430f-a40a-a59ddad2f46a",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "👍🙂",
        "createdAt" : "2019-01-16T06:59:49Z",
        "updatedAt" : "2019-01-16T11:50:39Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba891cb4aa20eb05189f68ab2d43a1d7854cd71b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +38,42 @@    var cur = a\n\n    val change: F[Unit] = F.async { cb =>\n      cur = f(cur)\n      cb(Right(()))"
  }
]