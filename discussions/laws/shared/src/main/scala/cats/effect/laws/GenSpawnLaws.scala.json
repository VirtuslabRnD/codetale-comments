[
  {
    "id" : "e5ea94fa-4414-43d9-b237-900994c4ffc2",
    "prId" : 1800,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1800#pullrequestreview-617851978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c82baa43-f072-4652-afa5-6ab3163bc90e",
        "parentId" : null,
        "authorId" : "3f1176f1-791a-4566-8749-308589834168",
        "body" : "Moving surfacing of cancelation into the argument might make the intent of the laws clearer. Something like\r\n```scala\r\nfinal class CancelationSurfaced[F[_], A](fa: F[A]) // where the generator for CancellationSurfaced applies the flatMap -> handleError transformatiuon\r\n\r\ndef raceCanceledIdentifyLeft[A](fa: CancelationSurfaced[F, A]) = ...\r\n```\r\nespecially as the particular sequence used to ensure cancelation is visible isn't unique in that function.\r\n\r\nArguably, if you're reasoning over the laws then you're also likely aware of these cancelation semantics and why the \"identity\" is applied, so maybe it's a feature, but you have to learn to look through it anyhow to see the intent of the law.\r\n\r\nThe new type would also give a place to document the effect on the laws.",
        "createdAt" : "2021-03-22T16:41:04Z",
        "updatedAt" : "2021-03-22T17:01:01Z",
        "lastEditedBy" : "3f1176f1-791a-4566-8749-308589834168",
        "tags" : [
        ]
      },
      {
        "id" : "8dfbe706-5212-4f0e-9b90-3e0bb51f8090",
        "parentId" : "c82baa43-f072-4652-afa5-6ab3163bc90e",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Oh this is a really really good idea. It breaks bincompat so we have to do it now if we're going to do it.",
        "createdAt" : "2021-03-22T18:24:32Z",
        "updatedAt" : "2021-03-22T18:24:32Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "16f971c4e49c14b46995637e21ec58d2a837aa1b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@\n  def raceCanceledIdentityLeft[A](fa: F[A]) =\n    F.race(F.canceled, fa.flatMap(F.pure(_)).handleErrorWith(F.raiseError(_))) <-> fa.map(\n      _.asRight[Unit])\n"
  },
  {
    "id" : "83c36483-4338-4b1d-aa3d-80b076795676",
    "prId" : 1484,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1484#pullrequestreview-555721777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b4238e4-f21b-4a6d-a7c9-af288812f01d",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I'd rather be a bit more general here:\r\n\r\n```scala\r\nF.uncancelable(_ => F.race(fa, fb)) <-> F.race(fa, fb).onCancel(F.never)\r\n```",
        "createdAt" : "2020-12-18T18:39:25Z",
        "updatedAt" : "2020-12-18T22:50:04Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f2b59b16641cbc6da688001a69c07af81d3a24e",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +125,129 @@\n  def uncancelableRaceNotInherited =\n    F.uncancelable(_ => F.race(F.never[Unit], F.canceled)).void <-> F.never[Unit]\n\n  def uncancelableCancelCancels ="
  }
]