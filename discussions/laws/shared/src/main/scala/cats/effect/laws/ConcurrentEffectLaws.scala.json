[
  {
    "id" : "0b07d63d-2ebf-4290-ba78-25a057bbbc5f",
    "prId" : 611,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/611#pullrequestreview-280910332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b396b57f-83c9-4624-9f1f-0a2b9476130f",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Ah yeah, this is a race condition. Also I really hate the use of `Future` in the laws.",
        "createdAt" : "2019-08-28T15:20:29Z",
        "updatedAt" : "2019-08-28T15:21:41Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "361b181488ee7406a3ae2c9a28177b626d411e75",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +43,47 @@        // Waiting for the task to start before cancelling it\n        Async.fromFuture(F.pure(spawned.future)) >> cancel\n      }\n      F.liftIO(F.runAsync(token)(_ => IO.unit).toIO) *> latch.get\n    }"
  },
  {
    "id" : "3a20e1d2-da1d-421f-8fe5-a1fce2d4262b",
    "prId" : 540,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/540#pullrequestreview-241780345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb8e036f-c6e6-4e63-91be-17c781111ea1",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "Breaking change to the law, but it doesn't depend on an `F[A]`.",
        "createdAt" : "2019-05-24T14:48:16Z",
        "updatedAt" : "2019-05-26T00:55:37Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9a2bc3972a8b4a828b480aa0bddd5f82e750e8c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +34,38 @@  }\n\n  def runCancelableIsSynchronous[A] = {\n    val lh = Deferred.uncancelable[F, Unit].flatMap { latch =>\n      // Never ending task"
  }
]