[
  {
    "id" : "003f2b51-a14d-4de7-8a26-c883fad18409",
    "prId" : 1877,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1877#pullrequestreview-472350960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75446b66-9bc7-4f01-8ef0-b3e88acac180",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Why is this change needed?",
        "createdAt" : "2020-08-20T15:57:21Z",
        "updatedAt" : "2020-10-06T16:52:57Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "fac4459b-738c-49dd-9c3e-55c547abc29d",
        "parentId" : "75446b66-9bc7-4f01-8ef0-b3e88acac180",
        "authorId" : "ec81b063-dc9d-4604-ae13-ab5cd6be1355",
        "body" : "The assertions below `assertThrows[NullPointerException]` fail when a primitive type is provided in 2.12. In Scala 2.11 they seem to succeed, but to be honest, I don't understand why, as e.g. `null.asInstanceOf[Float]` is `0.0` and does not throw a `NullPointerException`, both in 2.11 and 2.12.\r\n\r\nWe could also use `AnyVal` here or `Number`.",
        "createdAt" : "2020-08-20T22:30:10Z",
        "updatedAt" : "2020-10-06T16:52:57Z",
        "lastEditedBy" : "ec81b063-dc9d-4604-ae13-ab5cd6be1355",
        "tags" : [
        ]
      },
      {
        "id" : "a75ab952-59da-44ca-bcdc-8cbb81dffa2b",
        "parentId" : "75446b66-9bc7-4f01-8ef0-b3e88acac180",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Ah yes, I see. Yes, in that case changing it `AnyRef` is good.",
        "createdAt" : "2020-08-21T09:40:50Z",
        "updatedAt" : "2020-10-06T16:52:57Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "fce1234368bb0af02f2e0a329da7a4054b4e52b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +110,114 @@  test(s\"addFirst(e)\") {\n    locally {\n      type E = AnyRef\n      val ad = new ArrayDeque[E]()\n"
  }
]