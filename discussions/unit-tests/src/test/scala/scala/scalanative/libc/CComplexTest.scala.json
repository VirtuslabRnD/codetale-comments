[
  {
    "id" : "c9ed739f-cea2-46ee-9dcc-9fbc7e7c57e9",
    "prId" : 2148,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2148#pullrequestreview-621271057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "I'll bite, why the change?  Seems to be a change by 2. A bit being set?",
        "createdAt" : "2021-02-04T22:05:14Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "f1c1a47e-0b9d-40b0-a85b-1fbc66fafee9",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "A couple of comments on this change.\r\n1. The results where generated on macOS but work on Linux as well.\r\n2. Currently we are only doing CI on Linux but I think we need to consider supporting macOS and BSD if we can.\r\n3. If looks like there is a small additional error on this test so maybe we can add something like the following:\r\n```Scala\r\ndef isAlmostEqual(act: Float, exp: Float, ulpFactor: Int): Boolean = ...\r\n// replace 2 in the function with ulpFactor\r\n// Also add the same with a default to the following and make appropriate changes\r\ndef assertEqualsComplexF(act: Ptr[CFloatComplex],\r\n                           exp: Ptr[CFloatComplex], ulpFactor = 2): Unit =...\r\n// pass the ulpFactor through\r\n```\r\n\r\nThen for the test in question you can try `3` and leave a comment that BSD is off by three compared to macOS and Linux off by 2.",
        "createdAt" : "2021-02-05T02:34:42Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "04ea794f-d084-467a-b846-007d89db0ea3",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "body" : "From what you say I understand that the literal numbers were generated and copied as-is from macOS. There is an identical test with `Cpow` that uses `double` instead of `float`, that I assume produces more accurated results. What I did was to take the complex double and convert it to a complex float. This is how I generated the number, it's not the result from FreeBSD, so I think it's a more accurate number (supported by the fact that  the CI on Linux didn't break). If macOS is fine too I don't think we need to change `2` with `3`.",
        "createdAt" : "2021-02-05T06:35:35Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "tags" : [
        ]
      },
      {
        "id" : "53205321-ca03-4724-a395-42a1d087bbcb",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "That is fine if it works on macOS if you put a comment with the \"// old value macOS, new value changed for BSD\". The code generation is below so it can be repeated and studied - not sure if it is the best way or not.\r\n\r\nThe double code uses a `ulpFactor` of 1 or just `epsilon` vs 2 for float.",
        "createdAt" : "2021-02-05T16:53:35Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "5c08af73-bdfc-4704-80bb-8357b1cd9ced",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "body" : "I've run the code. These are the FreeBSD values:\r\n```\r\ncpowf   -> toFloat(0x3e8c4421), toFloat(0x3f156d69)\r\ncpow    -> toDouble(\"3fd18884016cf327\"), toDouble(\"3fe2adad36b098aa\")\r\n```\r\nSo as you can see the double values are the same, while the float are different from both the original ones and the patched ones. As I said, the float value has been generated by converting the double value, so it should be more accurate than any direct output of `cpowf`. I cannot test it on macOS.",
        "createdAt" : "2021-02-05T17:37:27Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "tags" : [
        ]
      },
      {
        "id" : "46b355bf-a46f-4cf4-bb13-491c7d9f17fa",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "body" : "It should work on macOS, too, the `assertEqualsComplexF` function returns `true` when I pass the original numbers.",
        "createdAt" : "2021-02-06T08:31:20Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "4112551a-46bb-426b-a18f-35c61a0de7fd",
        "tags" : [
        ]
      },
      {
        "id" : "74c4137c-3aeb-4e4d-b56f-64418ed93342",
        "parentId" : "b485b728-399f-451f-8c4b-c3b05ba3d6f9",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "ok, that sounds good.",
        "createdAt" : "2021-03-25T15:39:33Z",
        "updatedAt" : "2021-04-20T11:04:17Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e7b39ad678905d5e19d85ef0c7346599d58f53",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +173,177 @@      // FreeBSD values: 0x3e8c4421, 0x3f156d69\n      assertEqualsComplexF(cpowf(tf, tf, buff),\n                           res(toFloat(0x3e8c4420), toFloat(0x3f156d6a)))\n    }\n  }"
  }
]