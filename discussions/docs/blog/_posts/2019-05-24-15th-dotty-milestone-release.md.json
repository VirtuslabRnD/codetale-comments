[
  {
    "id" : "1f0a7cea-3d64-45f5-a91c-906455083ffc",
    "prId" : 6544,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6544#pullrequestreview-240620650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe7dfe1-94af-4b37-9c0c-1fad451a2023",
        "parentId" : null,
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "This change addresses ... position. -> We introduce two annotations that regulate the use of operators. The first is called `@infix` and the second is called `@alpha`. The motivation behind `@infix` is ...",
        "createdAt" : "2019-05-22T12:02:38Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      },
      {
        "id" : "5f2ad623-a0f1-469e-8ca8-6cb878325829",
        "parentId" : "0fe7dfe1-94af-4b37-9c0c-1fad451a2023",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Actually only one annotation, `@alpha` doesn't work yet (although is defined). #5975 says it will come in a separate PR, which I haven't seen yet.",
        "createdAt" : "2019-05-22T13:01:57Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "2897ab74-862e-428c-b94f-2a6c6fc60e04",
        "parentId" : "0fe7dfe1-94af-4b37-9c0c-1fad451a2023",
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "Good catch. I thought it was in @anatoliykmetyuk. @odersky since `@alpha` is not yet in I propose to enclose the relevant section in the docs in comments.",
        "createdAt" : "2019-05-22T13:13:59Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ffc2f785c4b9a5730441d1c45c3df13fb4aaba",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n## Operator Rules\nThis change addresses the problem of the regulation of whether an operator is supposed to be used in an infix position. The motivation is for the library authors to be able to enforce whether a method or a type is supposed to be used in an infix position by the users. This ability will help to make code bases more consistent in the way the calls to methods are performed.\n\nMethods with symbolic names like `+` are allowed to be used in an infix position by default:"
  },
  {
    "id" : "33236470-2d51-4d91-82a8-128ee2523a86",
    "prId" : 6544,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6544#pullrequestreview-240750953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dc87aaf-6a0c-4219-b4c9-160dcbf5cb4d",
        "parentId" : null,
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "you can do so -> they can do so",
        "createdAt" : "2019-05-22T12:03:14Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      },
      {
        "id" : "226b2e1b-40f9-46a5-87e3-b073ec98fb8c",
        "parentId" : "5dc87aaf-6a0c-4219-b4c9-160dcbf5cb4d",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "\"you\", since that's the author of the code that has the control over how the method is used. If it is not marked as `infix` by the author, there's nothing (probably) \"they\" can do to get rid of the warning.",
        "createdAt" : "2019-05-22T16:37:53Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ffc2f785c4b9a5730441d1c45c3df13fb4aaba",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@```\n\nAs the warning says, if you want the users of the method to be able to use it in an infix position, you can do so as follows:\n\n```scala"
  },
  {
    "id" : "212685fe-bcd4-4563-9b78-3332c5705631",
    "prId" : 6544,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6544#pullrequestreview-240579837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "648a4251-ee57-4a9c-bc35-c9e3172d5197",
        "parentId" : null,
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "I would write a small paragraph:\r\n\r\n> Bootstrapping Dotty is a big milestone for us and in compiler construction in general. Firstly, we feel more confident that our compiler works as is (even without reusing the new features). Secondly, in the immediate future, we will be able to reuse many of the features that dotty proposes within dotty itself. For example, we have no fewer than 2641 occurrences of the text string `(implicit ctx: Context)` in the compiler that we can scrap with [Contextual Function types](https://www.scala-lang.org/blog/2016/12/07/implicit-function-types.html). Big milestones have high risk/high gain and we must be attentive. That is the reason that we will wait a bit until we start using new features. Consequently, at the moment we cross-compile the build with 2.12 on the CI so that we don't accidentally start using Dotty features in case we need to revise the bootstrap process (we'll start using Dotty features eventually, but let's wait until we're confident that this setup works well enough). \r\n> \r\n> Check the following for more information https://github.com/lampepfl/dotty/pull/5923#issuecomment-485421148 and please let us know if you have any incremental compilation issues or anything else! ",
        "createdAt" : "2019-05-22T12:45:15Z",
        "updatedAt" : "2019-05-23T09:13:32Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3ffc2f785c4b9a5730441d1c45c3df13fb4aaba",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@[6-week release schedule](https://dotty.epfl.ch/docs/contributing/release.html).\n\n# Whatâ€™s new in the 0.15.0-RC1 technology preview?\n## Full Bootstrap\nBootstrapping Dotty is a big milestone for us and in compiler construction in general. Firstly, we feel more confident that our compiler works as is (even without reusing the new features). Secondly, in the immediate future, we will be able to reuse many of the features that dotty proposes within dotty itself. For example, we have no fewer than 2641 occurrences of the text string (implicit ctx: Context) in the compiler that we can scrap with [Contextual Function types](https://www.scala-lang.org/blog/2016/12/07/implicit-function-types.html). Big milestones have high risk/high gain and we must be attentive. That is the reason that we will wait a bit until we start using new features. Consequently, at the moment we cross-compile the build with 2.12 on the CI so that we don't accidentally start using Dotty features in case we need to revise the bootstrap process (we'll start using Dotty features eventually, but let's wait until we're confident that this setup works well enough)."
  }
]