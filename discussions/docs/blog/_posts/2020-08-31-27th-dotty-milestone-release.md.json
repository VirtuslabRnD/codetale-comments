[
  {
    "id" : "bfd750a4-fe19-410e-a447-cfaf2c42a1e2",
    "prId" : 9653,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9653#pullrequestreview-477667491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b34df154-44da-47f3-b6d5-39c5d9aa173c",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "/cc @bishabosha ",
        "createdAt" : "2020-08-27T12:44:38Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "c860c74c-9484-44ae-8137-d747a054af29",
        "parentId" : "b34df154-44da-47f3-b6d5-39c5d9aa173c",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "In addition to https://github.com/lampepfl/dotty/pull/9532 I merged https://github.com/lampepfl/dotty/pull/9612 which is actually correct when mixing class and value cases",
        "createdAt" : "2020-08-27T13:04:03Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "03971fd2-7268-440b-87e0-395c5777ffb7",
        "parentId" : "b34df154-44da-47f3-b6d5-39c5d9aa173c",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Is that other PR related to serialization-deserialization? Or how should we mention it?",
        "createdAt" : "2020-08-28T11:46:23Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "888326a1-5190-4c98-b3bd-54cc5f3b19bc",
        "parentId" : "b34df154-44da-47f3-b6d5-39c5d9aa173c",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "Thats right, #9612 an implementation of deserialisation that completely replaces the implementation of #9532 so we should probably mention #9612 only. #9532 also has a bug that I didn't test (ordinal does not correspond to position in the values array) but is fixed in #9612 ",
        "createdAt" : "2020-08-28T11:54:08Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      },
      {
        "id" : "6f7d096c-c367-417d-b428-6d041baf3651",
        "parentId" : "b34df154-44da-47f3-b6d5-39c5d9aa173c",
        "authorId" : "128563de-a925-4397-af34-450c7978a8d2",
        "body" : "although #9532 can be mentioned for enabling the values array even when enums have a type parameter",
        "createdAt" : "2020-08-28T11:56:05Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "128563de-a925-4397-af34-450c7978a8d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "425604a5809502c177ad566038a90863b73c5eeb",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@As we're getting closer to the release of Scala 3, we are continuing to focus on the stability and performance of the language. In this release, we have fixed support of objects under JDK9+ (PR [#9181](https://github.com/lampepfl/dotty/pull/9181)). The issue was, due to the changes in JDK9+ compared to JDK8, our initialization scheme for objects did not work under JDK9+. The aforementioned fixed that issue, thereby unblocking JDK9+ support for Dotty.\n\nWe are also continuing to work on stabilising enums. PR [#9532](https://github.com/lampepfl/dotty/pull/9532) corrects the deserialization and serialization of singleton enum values with `ObjectInputStream` and `ObjectOutputStream`. PR [#9549](https://github.com/lampepfl/dotty/pull/9549) enables overriding the `toString` method on enums â€“ previously this was not possible because of the way enums were desugared.\n\n# Performance"
  },
  {
    "id" : "d1a2c857-2007-4b63-9e96-0f9ef376cdd9",
    "prId" : 9653,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9653#pullrequestreview-476681948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95b878db-f1a6-424d-b3dd-c8709602421a",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "/cc @odersky ",
        "createdAt" : "2020-08-27T12:44:48Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "425604a5809502c177ad566038a90863b73c5eeb",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\n# Performance\nWe are also focusing these days on making the compiler faster and memory-efficient. For the past month, we were looking in the compiler's memory footprint. We were trying to determine what was allocated in unreasonable amounts during compilation and trying to resolve these allocation issues. The following PRs attempt to increase the performance of the compiler:\n\n- Optimize megaphase [#9597](https://github.com/lampepfl/dotty/pull/9597)"
  },
  {
    "id" : "34998e5a-5bae-40f8-9967-f73579438069",
    "prId" : 9653,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9653#pullrequestreview-477664999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08278f9e-a569-4809-941b-bb7fa54b4d10",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "/cc @nicolasstucki ",
        "createdAt" : "2020-08-27T12:44:56Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "8c88f7b3-059d-4a73-9c97-89811369bfc0",
        "parentId" : "08278f9e-a569-4809-941b-bb7fa54b4d10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "LGTM",
        "createdAt" : "2020-08-28T11:51:17Z",
        "updatedAt" : "2020-08-31T08:17:14Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "425604a5809502c177ad566038a90863b73c5eeb",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\n# Metaprogramming\nWe are keeping the work on the metaprogramming API improvements. For this release, the following PRs bring better API to metaprogrammers:\n\n- Avoid leak of internal implementation in tasty.Reflection [#9613](https://github.com/lampepfl/dotty/pull/9613)"
  }
]