[
  {
    "id" : "94cedc2c-2b54-4b25-bd55-a6d4da7657b9",
    "prId" : 5117,
    "prUrl" : "https://github.com/apache/kafka/pull/5117#pullrequestreview-126189773",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4d090e1-d8f3-4bda-aa51-d7531617eff1",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Test- => Test-topic? Ditto below in a few other places.",
        "createdAt" : "2018-06-05T18:40:33Z",
        "updatedAt" : "2018-06-06T11:20:45Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "1675c2ed-2e7c-47c5-8a67-2d4536ff9d81",
        "parentId" : "b4d090e1-d8f3-4bda-aa51-d7531617eff1",
        "authorId" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "body" : "The 'Test-' is deliberate. This command is adding a prefixed ACL, i.e. one matching any Topic whose name starts with 'Test-', so it would match 'Test-topic'",
        "createdAt" : "2018-06-05T23:32:12Z",
        "updatedAt" : "2018-06-06T11:20:45Z",
        "lastEditedBy" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f96d0db4fbc086139542b5730ac79aea8c44c13",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1180,1184 @@            You can add acls on resources matching a certain prefix, e.g. suppose you want to add an acl \"Principal User:Jane is allowed to produce to any Topic whose name is prefixed with 'Test-' from any host\".\n            You can do that by executing the CLI with following options:\n            <pre class=\"brush: bash;\">bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:Jane --producer --topic Test- --resource-name-type Prefixed</pre>\n            Note, --resource-name-type defaults to 'literal', which only affects resources with the exact same name. The exception to this is the wildcard resource name '*', which should also be added using 'literal'.\n"
  },
  {
    "id" : "69fcca5c-860d-4bfb-90aa-603a7219e9cb",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-406291693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "626ddbb9-39dc-45c7-a30a-b0826c23182d",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "fix broken link",
        "createdAt" : "2020-05-06T04:04:26Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@            <b>Note:</b>\n            If you configure the Kafka brokers to require client authentication by setting ssl.client.auth to be \"requested\" or \"required\" in the\n            <a href=\"#brokerconfigs\">Kafka brokers config</a> then you must provide a truststore for the Kafka brokers as well and it should have\n            all the CA certificates that clients' keys were signed by.\n            <pre class=\"brush: bash;\">"
  },
  {
    "id" : "cd312ebf-11f3-446a-b70f-4d98465119c6",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-406292477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce697e13-fe92-48e0-a75b-a0b319e69206",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "Fix wrong content format.\r\n\r\n**Before:**\r\n![圖片](https://user-images.githubusercontent.com/43372967/81137668-1fd0db80-8f92-11ea-9502-026dba38b031.png)\r\n\r\n**After:**\r\n![圖片](https://user-images.githubusercontent.com/43372967/81137626-0039b300-8f92-11ea-818e-15b4aed2270b.png)\r\n",
        "createdAt" : "2020-05-06T04:08:00Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +364,368 @@            implementation used with the <code>ssl.secure.random.implementation</code>. However, there are performance issues with some implementations (notably, the\n            default chosen on Linux systems, <code>NativePRNG</code>, utilizes a global lock). In cases where performance of SSL connections becomes an issue,\n            consider explicitly setting the implementation to be used. The <code>SHA1PRNG</code> implementation is non-blocking, and has shown very good performance\n            characteristics under heavy load (50 MB/sec of produced messages, plus replication traffic, per-broker).\n            </p>"
  },
  {
    "id" : "1b6de085-b681-4c66-813e-5a2e4447535c",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-406293433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f980f4f-b6f1-4e03-a850-637286408838",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "Fix the broken link. The old ahchor: `#security_sasl_brokernotes` is now pointing to the new anchor: `#security_jaas_broker` \r\nbased on the old commit: https://github.com/apache/kafka/pull/1232/files#diff-64f03d45aabc1a9f07a427f4f21d28f5R215 \r\nVS. \r\nour current file: https://github.com/apache/kafka/blob/trunk/docs/security.html#L425\r\n",
        "createdAt" : "2020-05-06T04:12:26Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +610,614 @@            </li>\n            <tt>KafkaServer</tt> section in the JAAS file tells the broker which principal to use and the location of the keytab where this principal is stored. It\n            allows the broker to login using the keytab specified in this section. See <a href=\"#security_jaas_broker\">notes</a> for more details on Zookeeper SASL configuration.\n            <li>Pass the JAAS and optionally the krb5 file locations as JVM parameters to each Kafka broker (see <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html\">here</a> for more details):\n                <pre>    -Djava.security.krb5.conf=/etc/kafka/krb5.conf"
  },
  {
    "id" : "5f29fc8c-eba7-4fa5-831f-94a0bc939204",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-412294151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cc4087b-7991-4f06-ba54-d33cc95554fe",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "There's no `--delete` option. And because in the previous one sample, we explained the `--describe` option usage, we should also put `--alter` here explicitly for user, not just `--delete-config`.",
        "createdAt" : "2020-05-15T01:45:51Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +770,774 @@        <p>Credentials may be deleted for one or more SCRAM mechanisms using the <i>--alter --delete-config</i> option:\n        <pre class=\"brush: bash;\">\n    > bin/kafka-configs.sh --zookeeper localhost:2182 --zk-tls-config-file zk_tls_config.properties --alter --delete-config 'SCRAM-SHA-512' --entity-type users --entity-name alice\n        </pre>\n        </li>"
  },
  {
    "id" : "867ec5ac-551d-4e7a-ba67-5791c302b4d7",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-412295643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49ad2a54-63d3-40de-b15c-7b28b60784a0",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "In the documentation, we always put a hyperlink for the **KIP**. So, I added here.\r\nbefore:\r\n![image](https://user-images.githubusercontent.com/43372967/82002815-678dec00-9691-11ea-9ee7-a17f4e1b4f20.png)\r\n\r\nafter:\r\n![image](https://user-images.githubusercontent.com/43372967/82002859-8b513200-9691-11ea-8ca0-080c03540cc2.png)\r\n\r\n",
        "createdAt" : "2020-05-15T01:50:48Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1194,1198 @@    Kafka ships with a pluggable Authorizer and an out-of-box authorizer implementation that uses zookeeper to store all the acls. The Authorizer is configured by setting <tt>authorizer.class.name</tt> in server.properties. To enable the out of the box implementation use:\n    <pre>authorizer.class.name=kafka.security.authorizer.AclAuthorizer</pre>\n    Kafka acls are defined in the general format of \"Principal P is [Allowed/Denied] Operation O From Host H on any Resource R matching ResourcePattern RP\". You can read more about the acl structure in <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-11+-+Authorization+Interface\">KIP-11</a> and resource patterns in <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\">KIP-290</a>. In order to add, remove or list acls you can use the Kafka authorizer CLI. By default, if no ResourcePatterns match a specific Resource R, then R has no associated acls, and therefore no one other than super users is allowed to access R. If you want to change that behavior, you can include the following in server.properties.\n    <pre>allow.everyone.if.no.acl.found=true</pre>\n    One can also add super users in server.properties like the following (note that the delimiter is semicolon since SSL user names may contain comma). Default PrincipalType string \"User\" is case sensitive."
  },
  {
    "id" : "0bcaba17-971e-45cc-b68a-7253a7f9b968",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-412296139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d744221-5db5-45cf-a248-46b6a4b9dcb7",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "There's no format like ` `` ` in the documentation anywhere else. Replace with `<code>` formatting here.\r\nbefore:\r\n![image](https://user-images.githubusercontent.com/43372967/82280446-793cff80-99c1-11ea-8d64-1d58a51da62a.png)\r\n\r\nafter:\r\n![image](https://user-images.githubusercontent.com/43372967/82002970-ce130a00-9691-11ea-8ffc-8ed41b3a55a4.png)\r\n",
        "createdAt" : "2020-05-15T01:52:38Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1439,1443 @@            By default, all principals that don't have an explicit acl that allows access for an operation to a resource are denied. In rare cases where an allow acl is defined that allows access to all but some principal we will have to use the --deny-principal and --deny-host option. For example, if we want to allow all users to Read from Test-topic but only deny User:BadBob from IP 198.51.100.3 we can do so using following commands:\n            <pre class=\"brush: bash;\">bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:* --allow-host * --deny-principal User:BadBob --deny-host 198.51.100.3 --operation Read --topic Test-topic</pre>\n            Note that <code>--allow-host</code> and <code>--deny-host</code> only support IP addresses (hostnames are not supported).\n            Above examples add acls to a topic by specifying --topic [topic-name] as the resource pattern option. Similarly user can add acls to cluster by specifying --cluster and to a consumer group by specifying --group [group-name].\n            You can add acls on any resource of a certain type, e.g. suppose you wanted to add an acl \"Principal User:Peter is allowed to produce to any Topic from IP 198.51.200.0\""
  },
  {
    "id" : "d214c02d-b441-47b0-85ec-89676c2766f8",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-412296376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29944c91-99d9-4747-9a8c-4876571a31d3",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "fix typo.",
        "createdAt" : "2020-05-15T01:53:30Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +1452,1456 @@                Removing acls is pretty much the same. The only difference is instead of --add option users will have to specify --remove option. To remove the acls added by the first example above we can execute the CLI with following options:\n            <pre class=\"brush: bash;\"> bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --remove --allow-principal User:Bob --allow-principal User:Alice --allow-host 198.51.100.0 --allow-host 198.51.100.1 --operation Read --operation Write --topic Test-topic </pre>\n            If you want to remove the acl added to the prefixed resource pattern above we can execute the CLI with following options:\n            <pre class=\"brush: bash;\"> bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --remove --allow-principal User:Jane --producer --topic Test- --resource-pattern-type Prefixed</pre></li>\n"
  },
  {
    "id" : "248a1a66-a111-4002-8f70-22b048d0d489",
    "prId" : 8623,
    "prUrl" : "https://github.com/apache/kafka/pull/8623#pullrequestreview-412296662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53590e4d-fc49-4f00-9257-6c9e6ba1947c",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "In the documentation, when referring to the `bin/xxx.sh`, we won't add dot slash `./` in the beginning. Fix it.",
        "createdAt" : "2020-05-15T01:54:32Z",
        "updatedAt" : "2020-05-19T06:43:05Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a6a7fd61a57cbf9d707d8cf2e1a83cb7c3e66c8",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2159,2163 @@        <li>If you enabled mTLS, disable the non-TLS port in ZooKeeper</li>\n        <li>Perform a second rolling restart of brokers, this time setting the configuration parameter <tt>zookeeper.set.acl</tt> to true, which enables the use of secure ACLs when creating znodes</li>\n        <li>Execute the ZkSecurityMigrator tool. To execute the tool, there is this script: <tt>bin/zookeeper-security-migration.sh</tt> with <tt>zookeeper.acl</tt> set to secure. This tool traverses the corresponding sub-trees changing the ACLs of the znodes. Use the <code>--zk-tls-config-file &lt;file&gt;</code> option if you enable mTLS.</li>\n    </ol>\n    <p>It is also possible to turn off authentication in a secure cluster. To do it, follow these steps:</p>"
  }
]