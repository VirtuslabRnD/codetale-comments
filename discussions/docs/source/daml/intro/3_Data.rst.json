[
  {
    "id" : "a0a043a0-05e7-464f-bca4-9384db3e17cb",
    "prId" : 7264,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f16d91-b265-4406-94d9-fc21f0582694",
        "parentId" : null,
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "Do we have a function `script : Script a -> Script a`?",
        "createdAt" : "2020-08-31T14:29:51Z",
        "updatedAt" : "2020-09-08T11:42:48Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "f03ed0eb-689c-4d21-8931-9744629c5015",
        "parentId" : "b8f16d91-b265-4406-94d9-fc21f0582694",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yes, see comment above.",
        "createdAt" : "2020-08-31T14:30:24Z",
        "updatedAt" : "2020-09-08T11:42:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "edfcefed5831fd27018f4cb3fdeb4a98f8ea266a",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +66,70 @@- Most of the variables are declared inside a ``let`` block.\n\n  That's because the ``script do`` block expects script actions like ``submit`` or ``Party``. An integer like ``123`` is not an action, it's a pure expression, something we can evaluate without any ledger. You can think of the ``let`` as turning variable declaration into an action.\n- Most variables do not have annotations to say what type they are.\n"
  },
  {
    "id" : "3cf85a49-4fa0-4519-88c2-b1e7c1761230",
    "prId" : 6210,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0503eea-4aa1-417f-afe6-12482ae65fb9",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I don't really understand\r\n> This is the case for ``0.001 : Decimal`` which could be any ``Numeric n``.\r\n\r\nWould it make sense to remove the `Decimal` type annotation and say\r\n> This is the case for ``0.001``, which could be of type ``Numeric n`` for any ``n``. Here, we specify...",
        "createdAt" : "2020-06-03T15:37:16Z",
        "updatedAt" : "2020-06-03T15:37:16Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "61ba8099-e9a8-4110-a4fd-48f4ac830848",
        "parentId" : "f0503eea-4aa1-417f-afe6-12482ae65fb9",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "https://github.com/digital-asset/daml/pull/6214",
        "createdAt" : "2020-06-03T15:40:44Z",
        "updatedAt" : "2020-06-03T15:40:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed87096b60c0c2c61d512ea7f823d73eba95ad10",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +70,74 @@  it, you do have to add a type annotation. This is the case for\n  ``0.001 : Decimal`` which could be any ``Numeric n``. Here we\n  specify ``Decimal`` which is a synonym for ``Numeric 10``. You can always choose to add type annotations to aid readability.\n- The ``assert`` function is an action that takes a boolean value and succeeds with ``True`` and fails with ``False``.\n"
  },
  {
    "id" : "2e25a123-0ee4-4c62-be02-0158435d79b2",
    "prId" : 4151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f7117e-4935-4da7-8426-cd8ce4914bc3",
        "parentId" : null,
        "authorId" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "body" : "Please verify if the last sentence is true and also helpful.",
        "createdAt" : "2020-01-21T16:51:02Z",
        "updatedAt" : "2020-01-21T21:35:43Z",
        "lastEditedBy" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ac4407a28c3b374db6ca6d03028cf565e778b9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +227,231 @@  :end-before: -- KEY_TEST_END\n\nSince DAML is designed to run on distributed systems, you have to assume that there is no global entity that can guarantee uniqueness, which is why each ``key`` expression must come with a ``maintainer`` expression. ``maintainer`` takes one or several parties, all of which have to be signatories of the contract and be part of the key. That way the index can be partitioned amongst sets of maintainers, and each set of maintainers can independently ensure the uniqueness constraint on their piece of the index. The constraint that maintainers are part of the key is ensured by only having the variable `key` in each maintainer expression.\n\nNote how the ``fetch`` in the final ``submit`` block has become a ``fetchByKey @Account``. ``fetchByKey @Account`` takes a value of type ``AccountKey`` and returns a tuple ``(ContractId Account, Account)`` if the lookup was successful or fails the transaction otherwise."
  },
  {
    "id" : "937aa9cb-b2ec-46f6-8e59-a030c54f2a32",
    "prId" : 4151,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e13f430f-e05e-42dc-82a3-717c0495995c",
        "parentId" : null,
        "authorId" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "body" : "Alternatively, we could remove the last sentence:\r\n```suggestion\r\n  Stores the identity of an entity that is able to act on the ledger, in the sense that they can sign contracts and submit transactions.\r\n```",
        "createdAt" : "2020-01-21T16:51:28Z",
        "updatedAt" : "2020-01-21T21:35:43Z",
        "lastEditedBy" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5ac4407a28c3b374db6ca6d03028cf565e778b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +32,36 @@\n- ``Party``\n  Stores the identity of an entity that is able to act on the ledger, in the sense that they can sign contracts and submit transactions. In general, ``Party`` is opaque.\n- ``Text``\n  Stores a unicode character string like ``\"Alice\"``."
  }
]