[
  {
    "id" : "949ce066-0892-4d9b-b619-2d641bb82f90",
    "prId" : 8175,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85432fe9-f762-413b-9241-68d7175af832",
        "parentId" : null,
        "authorId" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "body" : "`False && True || True && True` would still be `True` if we replaced the precedence of `&&` and `||`. I attempted a slightly shorter expression which gives different result with the hypothetical precedences. ",
        "createdAt" : "2020-12-04T20:28:31Z",
        "updatedAt" : "2020-12-04T20:49:26Z",
        "lastEditedBy" : "97fbb584-9e91-4c6b-935e-6b9b63b4f92c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a8ab64272cb8a30b39c0218a81b476c2b9d0665",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +116,120 @@.. note::\n\n  While function application is left associative by default, infix operators can be declared left or right associative and given a precedence. Good examples are the boolean operations ``&&`` and ``||``, which are declared right associative with precedences 3, and 2, respectively. This allows you to write ``True || True && False`` and get value ``True``. See section 4.4.2 of `the Haskell 98 report <https://www.haskell.org/onlinereport/decls.html>`_ for more on fixities. \n\nType Constraints"
  },
  {
    "id" : "c78c6698-23db-4647-93e6-8460e525c0c0",
    "prId" : 7507,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "398870fe-919e-45c3-8f19-dfcd10dab909",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth mentioning that `when` is also control flow in the sense that it short circuits.",
        "createdAt" : "2020-09-29T08:24:42Z",
        "updatedAt" : "2020-09-29T17:18:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e147d427-7fc7-4d79-bdca-db6cb18f67f1",
        "parentId" : "398870fe-919e-45c3-8f19-dfcd10dab909",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "It only short circuits Action execution, though, not evaluation.",
        "createdAt" : "2020-09-29T09:50:45Z",
        "updatedAt" : "2020-09-29T17:18:09Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "3dd40536-e5ee-4af3-9ae5-76eb028274e0",
        "parentId" : "398870fe-919e-45c3-8f19-dfcd10dab909",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "it does short circuit evaluation. Itâ€™s hacked up in the compiler",
        "createdAt" : "2020-09-29T09:53:47Z",
        "updatedAt" : "2020-09-29T17:18:09Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "35cd1eea-138f-4e6d-be24-c8c5c0b42cc0",
        "parentId" : "398870fe-919e-45c3-8f19-dfcd10dab909",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "I had no idea!",
        "createdAt" : "2020-09-29T14:15:28Z",
        "updatedAt" : "2020-09-29T17:18:09Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "56781b9351d93757f344927f4f2fc3ac98edb262",
    "line" : 333,
    "diffHunk" : "@@ -1,1 +331,335 @@  :end-before: -- CUSTOM_WHEN_END\n\nNote that we still need the ``else`` clause of the same type ``()``. This pattern is so common, it's encapsulated in the standard library function ``DA.Action.when : (Applicative f) => Bool -> f () -> f ()``. \n\n.. literalinclude:: daml/daml-intro-9/daml/Main.daml"
  }
]