[
  {
    "id" : "c74112ed-1972-4ec2-9201-5c554773b4f3",
    "prId" : 7509,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99ab6ebe-1a98-49f6-ae9e-e9a5b91052f4",
        "parentId" : null,
        "authorId" : "f54de0ef-2e7e-457a-8c80-613c17895693",
        "body" : "Stakeholder refers to signatory or observer?",
        "createdAt" : "2020-09-29T19:15:04Z",
        "updatedAt" : "2020-09-29T19:51:08Z",
        "lastEditedBy" : "f54de0ef-2e7e-457a-8c80-613c17895693",
        "tags" : [
        ]
      },
      {
        "id" : "2b3ced03-a791-48c4-adf2-4fe7e68cd9e1",
        "parentId" : "99ab6ebe-1a98-49f6-ae9e-e9a5b91052f4",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "either",
        "createdAt" : "2020-09-29T19:46:15Z",
        "updatedAt" : "2020-09-29T19:51:08Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7080adfdff37981aa82b636ac60f8530d795c439",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +152,156 @@Let's illustrate how collisions and operational semantics and interleave:\n\n1. Bob creates ``T`` with key ``k``. Alice is not a stakeholder.\n2. Alice submits a command resulting in well-authorized ``lookupByKey @T k`` during interpretation. Even if Alice witnessed 1, this will resolve to a ``None`` as Alice is not a stakeholder. This transaction is invalid at the time of interpretation, but Alice doesn't know that.\n3. Bob submits an ``exerciseByKey @T k Archive``."
  },
  {
    "id" : "3758e7c0-83d0-4141-8aba-b95f9302b878",
    "prId" : 7509,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "266c3bd6-67e7-4ecb-bc29-6e26d2e2f80b",
        "parentId" : null,
        "authorId" : "f54de0ef-2e7e-457a-8c80-613c17895693",
        "body" : "So 2 is valid but is still a `None`, correct?",
        "createdAt" : "2020-09-29T19:15:28Z",
        "updatedAt" : "2020-09-29T19:51:08Z",
        "lastEditedBy" : "f54de0ef-2e7e-457a-8c80-613c17895693",
        "tags" : [
        ]
      },
      {
        "id" : "eeb67e61-0e21-4d07-8dac-c0a16a33c8ad",
        "parentId" : "266c3bd6-67e7-4ecb-bc29-6e26d2e2f80b",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "yes",
        "createdAt" : "2020-09-29T19:46:29Z",
        "updatedAt" : "2020-09-29T19:51:08Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7080adfdff37981aa82b636ac60f8530d795c439",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +155,159 @@2. Alice submits a command resulting in well-authorized ``lookupByKey @T k`` during interpretation. Even if Alice witnessed 1, this will resolve to a ``None`` as Alice is not a stakeholder. This transaction is invalid at the time of interpretation, but Alice doesn't know that.\n3. Bob submits an ``exerciseByKey @T k Archive``.\n4. Depending on which of the transactions from 2 and 3 gets sequenced first, either just 3, or both 2 and 3 get committed. If 3 is committed before 2, 2 becomes valid while in transit.\n\nAs you can see, the behavior of ``fetch``, ``fetchByKey`` and ``lookupByKey`` at interpretation time depend on what information is available to the requester at that time. That's something to keep in mind when writing DAML contracts, and something to think about when encountering frequent \"Disputed\" errors."
  }
]