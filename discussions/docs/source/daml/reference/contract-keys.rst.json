[
  {
    "id" : "5ead1c3a-92b3-41cb-a7f3-1dd8291bd59c",
    "prId" : 5923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bf19260-1dc4-4238-9476-f437bf818299",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`exerciseByKey` is now in the `Contract Lookups` section which kind of makes sense but seems a bit weird.",
        "createdAt" : "2020-05-11T09:11:22Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8edc3a01-641d-41e7-b1a4-6d066b1da487",
        "parentId" : "0bf19260-1dc4-4238-9476-f437bf818299",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I agree that it seems a bit weird. I would suggest we move it next to the regular `exercise` with a reference to this section.",
        "createdAt" : "2020-05-11T10:05:39Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "6fbd7058-a5d1-4d33-87ca-2f65d8f070f5",
        "parentId" : "0bf19260-1dc4-4238-9476-f437bf818299",
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "I'd keep it here because of the proviso for resolution time (and concurrent access, that IMO should be added).",
        "createdAt" : "2020-05-11T11:14:51Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c59b3f653972a4c96542fa6a0f77d69f1f863be",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +35,39 @@Checking of the keys is done automatically at execution time, by the DAML exeuction engine: if someone tries to create a new contract that duplicates an existing contract key, the execution engine will cause that creation to fail. \n\nContract Lookups\n****************\n"
  },
  {
    "id" : "dfe0c9b1-2136-43b9-8f62-2320a1e6fadf",
    "prId" : 5923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7641aff5-9b44-4de8-8c75-7a52e03e5f8f",
        "parentId" : null,
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "I think there's a significant difference: signatories \"owning\" a contract is a DAML-level (or ledger model-level) authorization concern, in that they must authorize the creation at the DAML level. Preventing double spends or ensuring key uniqueness is an implementation concern. For example, it's done through the committers in vDAML, and signatories/maintainers have nothing to do with it.",
        "createdAt" : "2020-05-11T10:49:47Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      },
      {
        "id" : "ea7d7a68-23d5-43d8-a4f0-19a97775f68d",
        "parentId" : "7641aff5-9b44-4de8-8c75-7a52e03e5f8f",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "To me, that's an issue with ledger fidelity. In kvutil ledgers, the participants have simply delegated their responsibility / right to validate transactions to centralized validating nodes. I still think the maintainers conceptually own the index / keys and have the responsibility to maintain uniqueness.\r\n\r\nThink of a deployment situation where parties can be hosted on multiple Participants on different domains. It is exactly the maintainers responsibility not to allocate keys on different domains and thus violate uniqueness.",
        "createdAt" : "2020-05-11T11:28:31Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "aebf96df-5786-473d-ae52-7975af814809",
        "parentId" : "7641aff5-9b44-4de8-8c75-7a52e03e5f8f",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "Another way of thinking about it is this:\r\n\r\nIn an idealised DAML Ledger where Parties correspond to Participants and DAML's privacy model is fully implemented, if all signatories collaborate, they can double spend their contracts, for nobody else knows about these contracts at all.\r\n\r\nIf all maintainers collaborate, they can double-allocate a key, for if C1 has key K with signatories M u S and maintainers M, they may be able to create a disjoint set S' and create C2 with key K, signatories M u S' and maintainers M. Since only M know about C1 and C2, nobody is any the wiser.\r\n",
        "createdAt" : "2020-05-11T11:32:54Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "5fbd4cb3-768a-423d-854f-4dd6a2321462",
        "parentId" : "7641aff5-9b44-4de8-8c75-7a52e03e5f8f",
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "Sure, but this presupposes that signatories/maintainers collaborate in some way during validation. I can also take your example and consider the case where my participant node just chooses to show me some contracts as double-spent locally, without any of the other signatories' participants being any the wiser. Can now any node double spend the contract? Should we talk about that in the DAML docs too? \r\n\r\nWhat I'm trying to say, there are many ways to slice it, the question is which ones are the most useful/understandable. While validation is part of the process of every implementation, I think it's confusing to talk about it at the level of the language/abstract ledger model, where the details of the validation process are unclear.",
        "createdAt" : "2020-05-11T15:57:02Z",
        "updatedAt" : "2020-05-11T15:57:02Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c59b3f653972a4c96542fa6a0f77d69f1f863be",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +27,31 @@**********************\n\nIf you specify a contract key for a template, you must also specify a ``maintainer`` or maintainers, in a similar way to specifying signatories or observers. The maintainers \"own\" the key in the same way the signatories \"own\" a contract. Just like signatories of contracts prevent double spends or use of false contract data, maintainers of keys prevent double allocation or incorrect lookups. Since the key is part of the contract, the maintainers **must** be signatories of the contract. However, maintainers are computed from the ``key`` instead of the template arguments.  In the example above, the ``bank`` is ultimately the maintainer of the key. \n\nUniqueness of keys is guaranteed per template. Since multiple templates may use the same key type, some key-related function must be annotated using the ``@ContractType`` as shown in the examples below."
  },
  {
    "id" : "b2e1a7f9-b0f8-40d3-a8d5-c7fb3b495da3",
    "prId" : 5923,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dfa3009-82fb-4a4c-80f0-13524c8df161",
        "parentId" : null,
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "This looks like a good place for a note on the ramifications for concurrent access to keys in a parallel/distributed setting.",
        "createdAt" : "2020-05-11T11:10:00Z",
        "updatedAt" : "2020-05-11T11:40:10Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c59b3f653972a4c96542fa6a0f77d69f1f863be",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +38,42 @@****************\n\nThe primary purpose of contract keys is to provide a stable, and possibly meaningful, identifier for contracts that can be used in DAML to fetch contracts. There are two functions to perform such lookups: :ref:`fetchbykey` and :ref:`lookupbykey`. Both types of lookup are performed at interpretation time on the submitting Partipant Node, on a best-effort basis. Currently, that best-effort means lookups only return contracts if the submitting Party is a stakeholder of that contract.\n\nIn particular, the above means that if multiple commands are submitted simultaneously, all using contract lookups to find and consume a given contract, there will be contention between these commands, and at most one will succeed."
  },
  {
    "id" : "bef37435-2806-4055-880a-15eea496fb47",
    "prId" : 1112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3fb942f-b841-495e-aca7-3ecd6bc09e46",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We need to explain the `@Account` part from the example above. This is about ambiguous types. I'll explain the details in person tomorrow.\r\nSame for `lookupByKey` and `exerciseByKey`.",
        "createdAt" : "2019-05-13T18:02:25Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "25c156ef290597fc1251dafd7bcb3842902f98cc",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@Contract keys introduce several new functions.\n\n``fetchByKey``\n==============\n"
  },
  {
    "id" : "35d9c1ee-5ff5-484e-95da-f189544f6cac",
    "prId" : 1112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f2af8c6-2334-4b79-8e5d-0c62add08311",
        "parentId" : null,
        "authorId" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "body" : "```suggestion\r\n   Unbound reference to this in maintainer with evar.\r\n   \r\nWe plan to improve the error messages in the near future.\r\n```",
        "createdAt" : "2019-05-14T13:59:04Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "8e6a9b81-aba7-4206-84ba-06825f79e954",
        "tags" : [
        ]
      },
      {
        "id" : "3e7ff0a3-4149-44a2-8572-73d0926cec6e",
        "parentId" : "9f2af8c6-2334-4b79-8e5d-0c62add08311",
        "authorId" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "body" : "Nope - I really don't like committing to future improvements in the docs. Doesn't help the users at the point they read it, just makes us feel better.",
        "createdAt" : "2019-05-14T14:02:32Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "tags" : [
        ]
      },
      {
        "id" : "1ce8e0da-6187-4859-94d8-ef7b593bb275",
        "parentId" : "9f2af8c6-2334-4b79-8e5d-0c62add08311",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Oops, the \"We plan to improve the error messages in the near future.\" was not meant to be part of the suggestion.",
        "createdAt" : "2019-05-14T16:08:40Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "25c156ef290597fc1251dafd7bcb3842902f98cc",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@\n   Failure to process DAML program, this feature is not currently supported.\n   Unbound reference to this in maintainer with evar."
  },
  {
    "id" : "692d732f-27d1-4312-893b-c22165624d98",
    "prId" : 1112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90724682-2775-4559-a587-f728d0c8b435",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not sure we should explain how to authorize something here. We should instead do this in a more general setting because it is relevant for `create` and `exercise` as well. Can we just drop the second sentence for now?",
        "createdAt" : "2019-05-15T11:10:03Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "64885777-a340-44af-963f-7a469c95415c",
        "parentId" : "90724682-2775-4559-a587-f728d0c8b435",
        "authorId" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "body" : "I think this should be \"as well as\" rather than \"instead\"? I'd like to have the authorization information at the point of need - ie here - but also we could have a more general page explaining how it works overall.",
        "createdAt" : "2019-05-15T12:00:03Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "tags" : [
        ]
      },
      {
        "id" : "6c8d4894-d32d-4d16-8ec9-2fecbfa8e7e3",
        "parentId" : "90724682-2775-4559-a587-f728d0c8b435",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The authorization model is not simple enough to repeat it inline wherever it is needed. The explanation we have is not quite accurate. A proper explanation would be too long:\r\n> A maintainer can authorize by being a signatory of the contract containing the choice in whose body the `fetchByKey` is run or by being a controller of this choice.",
        "createdAt" : "2019-05-15T12:05:32Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ead8c305-4103-4ebb-a24b-6742b8fdda94",
        "parentId" : "90724682-2775-4559-a587-f728d0c8b435",
        "authorId" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "body" : "Oh, I see what you mean. Hmm.",
        "createdAt" : "2019-05-15T14:28:33Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "25c156ef290597fc1251dafd7bcb3842902f98cc",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@It returns a tuple of the ID and the contract object (containing all its data). \n\nYou need authorization from **at least one** of the maintainers to run ``fetchByKey``. A maintainer can authorize by being a signatory, or by submitting the command/being a controller for the choice.\n\n``fetchByKey`` fails and aborts the transaction if:"
  },
  {
    "id" : "b4ea34ec-fd31-47bc-936a-40e81253ece2",
    "prId" : 1112,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddbcc2ef-7f21-41b9-a0aa-4e62375fd52e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Authorization is a local thing within a transaction because it can be delegated from the signatories of a contract into the choices of that contract. The condition that a transaction containing a `lookupByKey` needs to be submitted by one of the maintainers is a global condition. (Is that actually true, @bitonic?) I would split that sentence definitely into two sentences. Maybe like:\r\n```suggestion\r\nYou need authorization from **all** of the maintainers to run ``lookupByKey``. A transaction containing a ``lookupByKey`` needs to be submitted by one of the maintainers.\r\n```",
        "createdAt" : "2019-05-15T11:17:19Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "395739f5-5643-42e8-bb31-6f426d50eb4f",
        "parentId" : "ddbcc2ef-7f21-41b9-a0aa-4e62375fd52e",
        "authorId" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "body" : "I'll wait on the answer from @bitonic about whether this is actually right before I add this in :) ",
        "createdAt" : "2019-05-15T12:02:26Z",
        "updatedAt" : "2019-05-16T15:46:35Z",
        "lastEditedBy" : "217c7adb-d958-471a-ac17-e626ccd391d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "25c156ef290597fc1251dafd7bcb3842902f98cc",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@Use ``lookupByKey`` to check whether a contract with the specified key exists. If it does exist, ``lookupByKey`` returns the ``Some contractId``, where ``contractId`` is the ID of the contract; otherwise, it returns ``None``.\n\nYou need authorization from **all** of the maintainers to run ``lookupByKey``, and it can only be submitted by one of the maintainers.\n\nIf the lookup fails (ie returns ``None``), this guarantees that no contract has this key."
  }
]