[
  {
    "id" : "49834846-fa53-47ec-b240-997183960092",
    "prId" : 9396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee20e3b8-fbab-4265-ba2c-cacae8bbacfc",
        "parentId" : null,
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "There's actually something more for Canton, which I also can't quite properly formulate yet :roll_eyes: I'll try to explain here. But I think it may be valuable if we can extract the essence, so worth spending some brain cycles on this.\r\n\r\nFor distributed checks we will have Alice checking what she thinks that Bob should see, and checking that Bob has actually seen it. Alice's view is based on `proj(tx, Alice)`, so she will be computing `proj(proj(tx, Alice), Bob)`. So this itself has to be model-conformant, otherwise, Alice might think that Bob would reject this.\r\n\r\nThere's probably a bit more that we want there. E.g., if Bob is \"above\" Alice in the transaction, then we probably want `proj(tx, Alice) == proj(proj(tx, Bob), Alice)`. But not sure how to formulate \"above\"...",
        "createdAt" : "2021-04-13T13:27:37Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      },
      {
        "id" : "2db69ec7-cd4a-4afa-97fc-cd5e735fe9f2",
        "parentId" : "ee20e3b8-fbab-4265-ba2c-cacae8bbacfc",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "> For distributed checks we will have Alice checking what she thinks that Bob should see, and checking that Bob has actually seen it. Alice's view is based on proj(tx, Alice), so she will be computing proj(proj(tx, Alice), Bob). So this itself has to be model-conformant, otherwise, Alice might think that Bob would reject this.\r\n\r\nThis part should be implied by \"projection-closed\" I think. If it's closed under one projection, it's also closed under two projections!",
        "createdAt" : "2021-04-13T13:39:02Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "80c6ef9b-c10d-4afd-a694-0b5ff0f5060b",
        "parentId" : "ee20e3b8-fbab-4265-ba2c-cacae8bbacfc",
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "You're right, and I think the \"privacy requirements\" now mostly capture what I wanted to say (minus the Canton-distributed-check requirement, but we don't need to solve that for this PR)",
        "createdAt" : "2021-04-20T12:33:02Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17e57425cccdee747194509b2a8d944df03ecb3",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +272,276 @@\nInstead, we require that the contract model be **projection-closed**, i.e.\nclosed under projections for any party 'p'. This is a weaker requirement\nthat matches what we actually need.\n"
  },
  {
    "id" : "1e86ece1-31a7-467b-a81d-fd844919cf6d",
    "prId" : 9396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a700674-36e8-4b0b-b592-29ff824c9dd7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It seems implicit in your definition since rollbacks are not actions but I think it might be worth spelling this out explicitly in your doc somewhere:\r\nrollback nodes have neither informees nor required authorizers",
        "createdAt" : "2021-04-14T09:30:55Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17e57425cccdee747194509b2a8d944df03ecb3",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +150,154 @@  the required authorizers of its children.\n\nPrivacy\n+++++++\n"
  },
  {
    "id" : "b284a873-5255-4ac3-8315-ee76db516ec0",
    "prId" : 9396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f21b686a-bc2f-47af-a8f0-c2890e4cc970",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do any of these steps still apply, if the party sees the parent exercise? Looking at the first rule for example, it seems unintuitive to me that even if I see the full rollback the structure won’t be what it was originally. I know if I see the parent exercise or not, so leaking information is not an issue here afaict.",
        "createdAt" : "2021-04-19T14:11:42Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7ca269fc-36eb-422e-8307-743e031ef47c",
        "parentId" : "f21b686a-bc2f-47af-a8f0-c2890e4cc970",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Projection (for `p`) is never applied to consequences of an exercise that is seen by `p`. So this normalization only happens for top-level rollback nodes, OR rollback nodes under an exercise that was projected away (OR nested rollback nodes that were projected).",
        "createdAt" : "2021-04-19T15:44:36Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "f39d4425-a122-4994-ad75-b312d17985b0",
        "parentId" : "f21b686a-bc2f-47af-a8f0-c2890e4cc970",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Basically you get the original rollback structure if it wasn't projected away. Otherwise we project under the rollback and try to normalize the result.",
        "createdAt" : "2021-04-19T15:45:43Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      },
      {
        "id" : "21b60aab-e342-463c-bca2-df9a5423eb2d",
        "parentId" : "f21b686a-bc2f-47af-a8f0-c2890e4cc970",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, that’s what I was hoping for :+1: ",
        "createdAt" : "2021-04-19T15:46:33Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17e57425cccdee747194509b2a8d944df03ecb3",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +217,221 @@the following steps:\n\n- If the projected rollback node starts with another rollback node, for instance:\n\n  .. code-block:: none"
  },
  {
    "id" : "82d6ccf4-cc53-49e7-bdf4-8f573958ea0d",
    "prId" : 9396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e102e568-fcae-45ed-9745-3073c66bae6c",
        "parentId" : null,
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "Would be good to refer to the concrete example at the end of the previous section",
        "createdAt" : "2021-04-20T12:00:58Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      },
      {
        "id" : "fa5c8453-03e5-463e-8bb6-60a31f28e0f8",
        "parentId" : "e102e568-fcae-45ed-9745-3073c66bae6c",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Done :-) ",
        "createdAt" : "2021-05-04T12:46:41Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17e57425cccdee747194509b2a8d944df03ecb3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@rollback cannot affect actions that appear later in the transaction tree.\n\nFor example, a contract may be consumed by an exercise under a rollback node,\nand immediately again after the rollback node. This is allowed because the\nexercise was rolled back, and this does not represent a \"double spend\" of"
  },
  {
    "id" : "b4cf96a2-5c6e-4376-877b-24eda05d9bfd",
    "prId" : 9396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "336fd59d-2496-41f4-8c5c-6011b2273a9e",
        "parentId" : null,
        "authorId" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "body" : "You could also relate this to the existing definition in two ways:\r\n1. a commit/ledger is well-authorized exactly when the same ledger with `Rollback` nodes removed (absorbed into their parent transactions) is well-authorized according to the old definition\r\n2. define \"top-level action\" and \"consequence\" to \"see through\" `Rollback` nodes, and then just keep the existing rules.",
        "createdAt" : "2021-04-20T12:21:00Z",
        "updatedAt" : "2021-05-04T13:00:00Z",
        "lastEditedBy" : "7fffcfe2-e6e3-4e9c-a758-1855e207e60a",
        "tags" : [
        ]
      },
      {
        "id" : "c52e5d2c-64aa-4e92-847e-b91eb2bcf80e",
        "parentId" : "336fd59d-2496-41f4-8c5c-6011b2273a9e",
        "authorId" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "body" : "Added a link and made the connection clearer.",
        "createdAt" : "2021-05-04T13:00:13Z",
        "updatedAt" : "2021-05-04T13:00:13Z",
        "lastEditedBy" : "f7ed27fc-83ac-401f-af8b-91c645eda7e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f17e57425cccdee747194509b2a8d944df03ecb3",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@+++++++++++++\n\nSince they are not ledger actions, rollback nodes do not have authorizers\ndirectly. Instead, a ledger is well-authorized exactly when the same ledger\nwith rollback nodes removed (that is, replacing the rollback nodes with"
  }
]