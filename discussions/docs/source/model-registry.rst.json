[
  {
    "id" : "2c97be49-b8a5-423c-ab80-71b04e818da5",
    "prId" : 3011,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3011#pullrequestreview-438475814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52a33310-b764-4788-86b9-5066e393abf3",
        "parentId" : null,
        "authorId" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "body" : "`tracking.html` is in the same directory as `model-registry.html`. `..` is not necessary.",
        "createdAt" : "2020-06-26T17:34:09Z",
        "updatedAt" : "2020-06-26T17:34:10Z",
        "lastEditedBy" : "0e487e6e-a7e7-4430-a4d6-ca9e76a34cba",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c463e3bbe35d5643baeb36d48b1de799911bb38",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +37,41 @@========================\nIf running your own MLflow server, you must use a database-backed backend store in order to access\nthe model registry via the UI or API. `See here <tracking.html#backend-stores>`_ for more information.\n\nBefore you can add a model to the Model Registry, you must log it using the ``log_model`` methods"
  },
  {
    "id" : "bd727709-b21d-4639-acbd-3c802e2af05d",
    "prId" : 3000,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/3000#pullrequestreview-440278091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "parentId" : null,
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "Can we also mention `MlflowClient.get_model_version_download_uri(name, version)` as an explicit way to get the URI and download it? Might be also worth mentioning the java version. We don't need to provide an example for these I think because that distracts from the main flow - but we could link to the docs perhaps.",
        "createdAt" : "2020-06-25T21:48:30Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "e0b87707-486b-4276-9d59-095345000c9d",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "I added a new section with an example. ",
        "createdAt" : "2020-06-26T00:18:26Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      },
      {
        "id" : "3329e862-d84a-43dd-b1e4-26e03b7604d2",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "body" : "Perhaps we should add the param `artifact_uri` to `MlflowClient.downloadArtifacts`. It would be trivial to do so. What do you think? ",
        "createdAt" : "2020-06-26T16:08:07Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "dab5a163-e8a4-4ae3-a16c-0d903dcff35c",
        "tags" : [
        ]
      },
      {
        "id" : "e9161025-de9f-4989-92e3-58ac363f5f23",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "`MlflowClient.download_artifacts` is a run-specific API. Are you thinking we need an API to download any artifact URI? I think we used to have one but we cleaned it up as part of the 1.0 release. There is the internal `mlflow.tracking.artifact_utils._download_artifact_from_uri` (which i think eventually powers the CLI command below)... it would probably be useful to have a public method for that, but I think the community just hasn't asked for it (AFAIK).",
        "createdAt" : "2020-06-26T22:27:47Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "c4c08c22-f4d3-4ee5-b281-88bacd859e60",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "This section is tailored more toward the Model Registry Workflow API; we might not want to conflate it. It could serve a better purpose to make this part of the API calls in the `MLflowclient` docs. ",
        "createdAt" : "2020-06-29T15:35:24Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "59abb9ce-1575-4d2a-b122-8926bc44eaf3",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "A couple of observations.\r\n\r\n1. \"Run an MLflow Model from the Model Registry\"\r\n\r\nThis subheading is not consistent with the use of gerunds in the other subheadings under this workflow. Also, the verb \"Run\", not sure it quite fits with model: you serve a mode; you train a model; you score (or infer from) a model. \"Run\" usage may be more appropriate with, say, something like \"Run\" an MLflow Project. \r\n\r\nI think more fitting to be consistent with the flow of the workflow APIs would be \"Fetching (or Retrieving) an MLflow model\".  \r\n\r\n2. Second, you can fetch models from the registry using both native `load_model` and `pyfunc_load_model`. Should we include that code too?\r\n\r\nWDYT?\r\n",
        "createdAt" : "2020-06-29T15:50:14Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "f7b3f628-aac5-4910-86ee-c02379253fb5",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "ok looking above at the section intro, this is meant to be for API workflow using the python `MlflowClient` and `models` methods, so it makes sense not to include the model downloading stuff here. \r\n\r\nI still think it is very valuable for those who don't want to load the model using `<flavor>.load_model` -- could it make sense to include the downloading example as a whole different section for how to use model registry at inference time in arbitrary contexts? then we can list the python (`MlflowClient.get_model_version_download_uri`), REST API, and java ways. too much?",
        "createdAt" : "2020-06-30T07:17:51Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "828a806a-6722-4ea8-b782-3bae8f69d833",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "Yes, true, we should evolve these docs, as part of the model registry general usage, with expanded sections: Accessing or downloading model artifacts: a) models b) gifs/pdfs c) schemas d) tags/values, etc. \r\n",
        "createdAt" : "2020-06-30T15:51:09Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "3890a28f-e19e-4d56-bc5b-1aea6c1b8fda",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "body" : "ok we can do this in another PR at a later date",
        "createdAt" : "2020-06-30T18:04:34Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "672c9aff-2ae2-4b23-92a1-3e0ef1c935e9",
        "tags" : [
        ]
      },
      {
        "id" : "0fb8eb2b-e810-4920-98e3-f976b42a5f09",
        "parentId" : "a96225b6-9f02-4de3-9747-841570203e4f",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "Yes, we can!",
        "createdAt" : "2020-06-30T18:38:21Z",
        "updatedAt" : "2020-06-30T23:09:04Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "db059eafea0f68463db2282782671f322c32d577",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +157,161 @@\nAfter you have registered an MLflow model, you can fetch that model using ``mlflow.<model_flavor>.load_model()``, or more generally, :meth:`~mlflow.pyfunc.load_model`. \n\n**Fetch a specific model version**\n"
  },
  {
    "id" : "953662a6-6054-46a6-a20e-191f3705f36c",
    "prId" : 2517,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2517#pullrequestreview-366993330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ededdc83-0ba7-460d-b6f2-80b10dc8cdbd",
        "parentId" : null,
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Thanks for doing these docs cleanups. I verified them locally -- they work great. Awesome cleanup.",
        "createdAt" : "2020-03-02T07:34:34Z",
        "updatedAt" : "2020-03-02T14:37:28Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "1169c334efd730e7e918caf6315c64681f4b3a69",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +82,86 @@============\n\nAn alternative way to interact with Model Registry is using the :ref:`MLflow model flavor <python-api>` or :ref:`MLflow Client Tracking API <mlflow.tracking>` interface.\nIn particular, you can register a model during an MLflow experiment run or after all your experiment runs.\n"
  },
  {
    "id" : "3a7ef905-9776-46d2-a1db-f23e5a8d607f",
    "prId" : 2493,
    "prUrl" : "https://github.com/mlflow/mlflow/pull/2493#pullrequestreview-366780767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513404a5-28cd-4d29-92c5-44f82b498585",
        "parentId" : null,
        "authorId" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "body" : "None is also possible! You can move a model back to the None stage.",
        "createdAt" : "2020-02-28T23:28:59Z",
        "updatedAt" : "2020-03-01T06:24:31Z",
        "lastEditedBy" : "6e958077-8d60-494d-8079-e77af3a2951f",
        "tags" : [
        ]
      },
      {
        "id" : "6c433bd8-df9d-4762-ab16-d6b97ba0c318",
        "parentId" : "513404a5-28cd-4d29-92c5-44f82b498585",
        "authorId" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "body" : "Ah, interesting. Will note that.",
        "createdAt" : "2020-02-29T02:02:26Z",
        "updatedAt" : "2020-03-01T06:24:31Z",
        "lastEditedBy" : "6d4a2e11-d3e1-4165-abba-00dd048f07b1",
        "tags" : [
        ]
      },
      {
        "id" : "01cd6a76-3f9c-41e9-b444-ce9625789f18",
        "parentId" : "513404a5-28cd-4d29-92c5-44f82b498585",
        "authorId" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "body" : "Model versions added to registry are in `None` stage. The way this is envisioned is versions moving forward from `Staging` --> `Production` or `Archived` directly. While, the APIs do no block moving versions to `None` it makes little sense. \r\n\r\nLet's **not** document transitioning to `None`. Let's keep it as is.",
        "createdAt" : "2020-02-29T06:15:48Z",
        "updatedAt" : "2020-03-01T06:24:31Z",
        "lastEditedBy" : "585a7aa0-77e3-46ce-95a0-4a8de00c6c4a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d49082ee37ba3dcae8ae48a5a9af5165cf7188c",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +162,166 @@-------------------------------------\nOver the course of the model’s lifecycle, a model evolves—from development to staging to production.\nYou can transition a registered model in the registry to one of the stages: **Staging**, **Production** or **Archived**.\n\n.. code-block:: py"
  }
]