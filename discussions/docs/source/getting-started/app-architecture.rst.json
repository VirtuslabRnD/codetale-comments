[
  {
    "id" : "6a005c80-8dbe-4ff7-973f-824b1a2236f4",
    "prId" : 5396,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01ba8572-5678-484a-a02a-ee83ea437884",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Why has this changed?",
        "createdAt" : "2020-04-03T09:12:11Z",
        "updatedAt" : "2020-04-03T09:14:54Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "0e1cbf21-a1af-490e-ac74-0168045f4f43",
        "parentId" : "01ba8572-5678-484a-a02a-ee83ea437884",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "The `//` style of comment doesn't work within a JSX block. This code wasn't being compiled before so it didn't matter, now it's a proper comment in the JSX.",
        "createdAt" : "2020-04-03T14:56:34Z",
        "updatedAt" : "2020-04-03T14:56:34Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "6b08782c-8725-47c3-aa21-f3115c8d146b",
        "parentId" : "01ba8572-5678-484a-a02a-ee83ea437884",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That makes a lot of sense. Thanks for the explanation.",
        "createdAt" : "2020-04-03T17:03:39Z",
        "updatedAt" : "2020-04-03T17:03:40Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d936fa3ccd08b7a6f57540b05fd2b7f15140c03",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +159,163 @@.. literalinclude:: code/templates-tarball/create-daml-app/ui/src/components/MainView.tsx\n  :language: tsx\n  :start-after: {/* USERLIST_BEGIN */}\n  :end-before: {/* USERLIST_END */}\n"
  },
  {
    "id" : "257b9e9e-7f67-4f3b-bdd6-a1cbb9f4ab3f",
    "prId" : 5067,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b5f041-27a7-49ec-96c3-52e366ea76cc",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I always misspell \"paramteres\" the same way. 😃\r\n```suggestion\r\n    - After that we declare choice parameters using the ``with`` keyword. Here this is the user we want to start following.\r\n```",
        "createdAt" : "2020-03-18T16:05:22Z",
        "updatedAt" : "2020-03-19T09:04:26Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "6732d9740491dd03a47de76737706eadfdcffcf8",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +70,74 @@    - The choice starts with the ``nonconsuming choice`` keyword followed by the choice name ``Follow``.\n    - The return type of a choice is defined next. In this case it is ``ContractId User``.\n    - After that we declare choice paramteres with ``with`` keyword. Here this is the user we want to start following.\n    - The keyword ``controller`` defines the ``Party`` that is allowed to execute the choice. In this case, it is the ``username`` party associated with the ``User`` contract.\n    - The ``do`` keyword marks the start of the choice body where its functionality will be written."
  },
  {
    "id" : "7aa0b81e-dfd2-415c-9c79-c910cde8efff",
    "prId" : 4987,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676fc6a6-4797-4e25-bff8-0785ddd0e115",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I wonder if it would make sense to point out that it doesn’t matter if the checks come before or after archiving `self` or maybe move the archive to the first line. Currently users might get the mistaken impression that doing the checks afterwards would be dangerous since the contract might get archived even if the checks fail. Since the choice is transactional this is not the case. Probably not super important for the getting started guide.",
        "createdAt" : "2020-03-13T14:04:10Z",
        "updatedAt" : "2020-03-13T14:24:54Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d218c0d4-a577-40c4-a747-0cd343376e21",
        "parentId" : "676fc6a6-4797-4e25-bff8-0785ddd0e115",
        "authorId" : "6b882042-8bae-4e3e-ab1c-5636c9fbdc53",
        "body" : "Will write your comment down and leave it as is (just because it's the GSG). The explanation now follows what's in the code. ",
        "createdAt" : "2020-03-13T14:27:42Z",
        "updatedAt" : "2020-03-13T14:27:42Z",
        "lastEditedBy" : "6b882042-8bae-4e3e-ab1c-5636c9fbdc53",
        "tags" : [
        ]
      },
      {
        "id" : "f6c4970d-8099-4552-ae2d-7239ed936204",
        "parentId" : "676fc6a6-4797-4e25-bff8-0785ddd0e115",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think it's good practice to have the checks at the top of the choice so they are easy to find. I'm actually in favor of archiving `self` in the line before creating the new contract. This makes it more obvious that we're \"updating\" the contract.\r\n\r\nThis line should also end with a period.",
        "createdAt" : "2020-03-16T11:38:58Z",
        "updatedAt" : "2020-03-16T11:39:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a5bbe74c4566807ce543c422f2e13b5223b4607",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +67,71 @@    - The keyword ``controller`` defines the ``Party`` that is allowed to execute the choice. In this case, it is the ``username`` party associated with the ``User`` contract.\n    - The ``do`` keyword marks the start of the choice's body where its functionality will be written.\n    - After passing some checks current contract is archived with ``archive self`` \n    - A new ``User`` contract with the added friend is created.\n"
  },
  {
    "id" : "32dc4bee-9331-44dc-ba7e-b52bb93d3cf5",
    "prId" : 4987,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a51f7b-e75b-4704-8b82-15a6595308d4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We don't pass arguments here, we rather declare arguments (or to be more precise, (formal) parameters).",
        "createdAt" : "2020-03-16T11:36:32Z",
        "updatedAt" : "2020-03-16T11:39:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a5bbe74c4566807ce543c422f2e13b5223b4607",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +64,68 @@    - The choice starts with the ``nonconsuming choice`` keyword followed by the choice name ``AddFriend``.\n    - The return type of a choice is defined next. In this case it is ``ContractId User``.\n    - After that we pass arguments for the choice with ``with`` keyword. Here this is the friend we are trying to add.\n    - The keyword ``controller`` defines the ``Party`` that is allowed to execute the choice. In this case, it is the ``username`` party associated with the ``User`` contract.\n    - The ``do`` keyword marks the start of the choice's body where its functionality will be written."
  },
  {
    "id" : "870c5d7c-ebfe-45f9-aabf-eb4959b40b94",
    "prId" : 4987,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50d66cdb-b5d7-4dd4-b810-f8fcad56a670",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I _think_ we usually use the term \"choice body\" with the genitive.",
        "createdAt" : "2020-03-16T11:36:57Z",
        "updatedAt" : "2020-03-16T11:39:18Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a5bbe74c4566807ce543c422f2e13b5223b4607",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +66,70 @@    - After that we pass arguments for the choice with ``with`` keyword. Here this is the friend we are trying to add.\n    - The keyword ``controller`` defines the ``Party`` that is allowed to execute the choice. In this case, it is the ``username`` party associated with the ``User`` contract.\n    - The ``do`` keyword marks the start of the choice's body where its functionality will be written.\n    - After passing some checks current contract is archived with ``archive self`` \n    - A new ``User`` contract with the added friend is created."
  },
  {
    "id" : "bddae089-808a-4ba7-bbe7-e32262eb8254",
    "prId" : 4700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee6ca553-8980-4ea2-93d4-8dd9bfea24ec",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This might just be showing my ignorance of react but I thought that the thing that avoids having to thread it through are contexts not hooks.",
        "createdAt" : "2020-02-26T07:24:27Z",
        "updatedAt" : "2020-02-26T11:02:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "08c0b659-79e8-45af-9ff9-5843a986c4c3",
        "parentId" : "ee6ca553-8980-4ea2-93d4-8dd9bfea24ec",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "There's a hook called `useContext` which gets the value from the context.",
        "createdAt" : "2020-02-26T08:32:07Z",
        "updatedAt" : "2020-02-26T11:02:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c0fb9dc7ad9176d66635641bcff4bf3042ddb9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +93,97 @@\nAn important tool in the design of our components is a React feature called `Hooks <https://reactjs.org/docs/hooks-intro.html>`_.\nHooks allow you to share and update state across components, avoiding having to thread it through manually.\nWe take advantage of hooks in particular to share ledger state across components.\nWe use custom *DAML React hooks* to query the ledger for contracts, create new contracts, and exercise choices."
  },
  {
    "id" : "001245de-491b-480d-8415-b3dc55c81bcf",
    "prId" : 4700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab6d60e7-9a87-4526-ac60-8e8cd299baac",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "“their contracts” is a bit unclear. Maybe something like “only the `User` contracts of users that have added the current user will be returned”.",
        "createdAt" : "2020-02-26T07:26:41Z",
        "updatedAt" : "2020-02-26T11:02:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c0fb9dc7ad9176d66635641bcff4bf3042ddb9",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +118,122 @@This uses the ``useStreamQuery`` hook to get all ``User`` contracts on the ledger.\n(``User`` here is an object generated by ``daml codegen ts`` - it stores metadata of the ``User`` template defined in ``User.daml``.)\nNote however that this query preserves privacy: only users that have added the current user have their contracts revealed.\nThis behaviour is due to the observers on the ``User`` contract being exactly the user's friends.\n"
  },
  {
    "id" : "00dc1d7a-d4ae-49a5-ad58-366a769c0b1a",
    "prId" : 4700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbd91bc9-7463-456a-9c18-d35aeba27a14",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Can we make one of these two components disappear by either inlining it into the other or into `App`?",
        "createdAt" : "2020-02-26T08:40:32Z",
        "updatedAt" : "2020-02-26T11:02:04Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "95fbb6de-1954-4fcf-be65-c9addc94791d",
        "parentId" : "bbd91bc9-7463-456a-9c18-d35aeba27a14",
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "We could, though I kind of like being able to ignore the ``MainScreen`` code, and showing ``App`` and ``MainView`` in the guide.",
        "createdAt" : "2020-02-26T10:44:48Z",
        "updatedAt" : "2020-02-26T11:02:04Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c0fb9dc7ad9176d66635641bcff4bf3042ddb9",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +106,110 @@\nLet's move on to more advanced uses of our DAML React library.\nThe ``MainScreen`` is a simple frame around the ``MainView`` component, which houses the main functionality of our app.\nIt uses DAML React hooks to query and update ledger state.\n"
  },
  {
    "id" : "a4b0864c-9e72-46ba-9b24-d279e5598414",
    "prId" : 4639,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5ada502-b576-4693-b7a8-fa5841205c32",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Something is missing here. `as For example` looks weird.",
        "createdAt" : "2020-02-20T18:18:07Z",
        "updatedAt" : "2020-02-20T18:20:32Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "11bd6d8badab788e42fb840029b1da2e05c24ffa",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +111,115 @@The *key* in this case is the username of the current user, used to look up the corresponding ``User`` contract.\nThe wrapper function ``addFriend`` is then passed to the subcomponents of ``MainView``.\nFor example, ``addFriend`` is passed to the ``UserList`` component as an argument (called a *prop* in React terms).\nThis gets triggered when you click the button next to a user's name in the \"Network\" panel.\n"
  },
  {
    "id" : "83653f5f-2d4f-4d64-9d0c-a1ed923a597d",
    "prId" : 4560,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d17edc42-7866-4291-9a86-3928af28bd6f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do we actually teach how to start VS Code using `daml studio`? If not, we should do so somewhere close to the beginning.",
        "createdAt" : "2020-02-18T12:06:37Z",
        "updatedAt" : "2020-02-18T12:07:23Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "38aa33ed292b17a3a16f2629fa6db6e89aadebca",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +14,18 @@==============\n\nUsing the Visual Studio Code editor, navigate to the ``daml`` subdirectory.\nThere is a single DAML file called ``User.daml`` with the model for app users.\nThe core data is at the start of the ``User`` contract template."
  },
  {
    "id" : "425720f0-91c7-4d24-a701-e5edfdc8e9bf",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29812885-b171-4f0b-acd8-e3f2e0f03705",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We want people to have a pleasant UX. Currently, this only works with VS Code. Let's not suggest to use a different editor in the main text for now. We could add a footnote but I'm not sure we need to.",
        "createdAt" : "2020-02-17T16:16:43Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@==============\n\nUsing VSCode (or a code editor of your choice), navigate to the ``daml`` subdirectory.\nThere is a single DAML file called ``User.daml`` with the model for users of the app.\n"
  },
  {
    "id" : "45751609-0ce7-4318-9162-ef07d5de6b8e",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbc019e3-8b0b-437f-82cc-7417d1a81305",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "\"model for users of the app\" is slightly ambiguous. We need something better but I have currently no idea what.",
        "createdAt" : "2020-02-17T16:17:35Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@\nUsing VSCode (or a code editor of your choice), navigate to the ``daml`` subdirectory.\nThere is a single DAML file called ``User.daml`` with the model for users of the app.\n\nThe core data is at the start of the ``User`` contract template."
  },
  {
    "id" : "e4b0eb33-c823-4f37-ad8a-eeaf18ba28bd",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "126aa6da-6dee-44f0-a0af-f82e11e1de89",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "The signatories are not authorized to do something but rather need to authorize the creating of new instances of this template.",
        "createdAt" : "2020-02-17T16:48:55Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\n2. The signatories and observers of the contract.\nThe signatories are the parties authorized to create new versions of the contract or archive the contract.\nIn this case only the user has those rights.\nThe observers are the parties who are able to view the contract on the ledger."
  },
  {
    "id" : "f67496fa-64cb-4e92-96cc-a77f318a7d0e",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c2d1c77-3c80-4894-8de5-7733f27bb717",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "It is an obligation to authorize not a right.",
        "createdAt" : "2020-02-17T16:49:26Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@2. The signatories and observers of the contract.\nThe signatories are the parties authorized to create new versions of the contract or archive the contract.\nIn this case only the user has those rights.\nThe observers are the parties who are able to view the contract on the ledger.\nIn this case all friends of a user are able to see the user contract."
  },
  {
    "id" : "be2cd786-1889-4f3e-bf87-e24b30cb087f",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0482bfc3-22ea-4f98-8a48-1977acab4624",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think the word \"updated\" gives people a wrong sense of how DAML works. I would just remove the parentheses.",
        "createdAt" : "2020-02-17T16:51:23Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@Let's say what the ``signatory`` and ``observer`` clauses mean in our app more concretely.\nA user Alice can see another user Bob in the network only when Alice is a friend in Bob's user contract.\nFor this to be true, Bob must have previously added Alice as a friend (i.e. updated his user contract), as he is the sole signatory on his user contract.\nIf not, Bob will be invisible to Alice.\n"
  },
  {
    "id" : "a537c44a-2360-475a-9fab-4cfcbbd13b13",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdc301fb-5d01-4097-aead-c8d3d6fb5f23",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Given that we explained signatories before observers, we should probably write\r\n```suggestion\r\nWe can see some concepts here that are central to DAML, namely *authorization* and *authorization*.\r\n```",
        "createdAt" : "2020-02-17T16:52:16Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@If not, Bob will be invisible to Alice.\n\nWe can see some concepts here that are central to DAML, namely *privacy* and *authorization*.\nPrivacy is about who can *see* what, and authorization is about who can *do* what.\nIn DAML we must answer these questions upfront, as they fundamentally change the design of an application."
  },
  {
    "id" : "2954ee1d-73a6-4710-8aec-3a36bfb60940",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a3ef61e-aed2-4fab-a2f4-692bea8dc6c2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "That's a very catchy explanation. I like it a lot!",
        "createdAt" : "2020-02-17T16:52:41Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@\nWe can see some concepts here that are central to DAML, namely *privacy* and *authorization*.\nPrivacy is about who can *see* what, and authorization is about who can *do* what.\nIn DAML we must answer these questions upfront, as they fundamentally change the design of an application.\n"
  },
  {
    "id" : "72c8a926-de78-4233-ba61-b3c4efd0436b",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "591554a9-8598-40fb-9984-82917f069e33",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nDAML contracts are *immutable* (can not be changed in place), so the only way to \"change\" them is to archive the current instance and create a new one.\r\n```",
        "createdAt" : "2020-02-17T16:53:49Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@  :end-before: -- ADDFRIEND_END\n\nDAML contracts are *immutable* (can not be changed in place), so they must be updated by archiving the current instance and creating a new one.\nThat is what the ``AddFriend`` choice does: after checking some preconditions, it creates a new user contract with the new friend added to the list.\nThe ``choice`` syntax automatically includes the archival of the current instance."
  },
  {
    "id" : "d86c34a7-96ad-420c-a2f6-362798b4ee98",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfdd632f-1c78-43e4-9b42-3460011395a2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nFor example, we can query the ledger for all contracts that are visible to the logged-in user, create contracts and exercise choices on contracts.\r\n```",
        "createdAt" : "2020-02-17T16:58:17Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@For this we use a state management feature in React called `Hooks <https://reactjs.org/docs/hooks-intro.html>`_.\nYou can see the capabilities of the DAML React hooks in ``create-daml-app/ui/src/daml-react-hooks/hooks.ts``.\nFor example, we can query the ledger for all visible contracts (relative to a particular user), create contracts and exercise choices on contracts.\n\n.. TODO Update location to view DAML react hooks API"
  },
  {
    "id" : "d8ed769e-fee4-4c97-b6ef-7da01c7fa779",
    "prId" : 4548,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1af4e657-be2a-4b77-91d4-e97f56574c42",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We don't know about more restricted queries yet.\r\n```suggestion\r\nFor instance, ``allUsers`` uses a query to get the ``User`` contracts on the ledger.\r\n```",
        "createdAt" : "2020-02-17T16:59:24Z",
        "updatedAt" : "2020-02-17T17:03:24Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb92a345c4400124c999fca0333ed607b44eac61",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@This is the start of the component which provides data from the current state of the ledger to the main screen of our app.\nThe three declarations within ``MainView`` all use DAML hooks to get information from the ledger.\nFor instance, ``allUsers`` uses a catch-all query to get the ``User`` contracts on the ledger.\nHowever, the query respects the privacy guarantees of a DAML ledger: the contracts returned are only those visible to the currently logged in party.\nThis explains why you cannot see *all* users in the network on the main screen, only those who have added you as a friend (making you an observer of their ``User`` contract)."
  }
]