[
  {
    "id" : "6719a333-a4f3-4162-a0cd-b4c57a828edf",
    "prId" : 9466,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd7ec5d5-a523-47d4-bc45-23de22ae8fe1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe `remember` is a bit too much given that we didn’t explain it before. How about `Note`",
        "createdAt" : "2021-04-21T09:24:55Z",
        "updatedAt" : "2021-04-21T09:25:00Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cde844e83f2dc1685c56a24bbe9ae6bc1880828",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +28,32 @@.. hint::\n\n  Remember that you can load all the example code by running ``daml new script-example --template script-example``\n\nUsage"
  },
  {
    "id" : "085f6497-d8c9-473a-b3d9-457105e035c4",
    "prId" : 8339,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab40970d-1d98-4b3c-b2ef-760ae00e118c",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "The comment next to `validateTokenParties`, which is used for queries claims it checks for superset. Looks like that comment is off.",
        "createdAt" : "2020-12-18T10:43:57Z",
        "updatedAt" : "2020-12-18T11:02:06Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "262c0fada0958b8ae7a8ac27c152be23eb296468",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +371,375 @@   that means ``actAs`` and ``readAs`` must match exactly what you\n   specified whereas for queries the union of ``actAs`` and ``readAs``\n   must match the parties specified in the query.\n#. If you use multiple parties within your DAML Script, you need to\n   specify one token per party or every submission and query must"
  },
  {
    "id" : "9eefff1c-6b73-445d-9d61-cf931644b65c",
    "prId" : 7448,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "086dd9db-8a59-486c-8ba2-a69108fade1e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I've learned to spell out small numbers.\r\n```suggestion\r\n   #. You use something that is not part of the four ledger API command\r\n```",
        "createdAt" : "2020-09-21T12:21:12Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cd0fc840-cf4a-4a5f-956f-6a2537008f1e",
        "parentId" : "086dd9db-8a59-486c-8ba2-a69108fade1e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I really dislike that pattern. I know it is common to recommend this in style guides but I find it harder to read and in the end I care less about style than I care about readability in documentation.",
        "createdAt" : "2020-09-21T12:26:08Z",
        "updatedAt" : "2020-09-21T13:08:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecdf6e272d2721bf8ddc245c4cadbdf7c1eb3687",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +250,254 @@      choice and call that using ``createAndExerciseCmd``.\n\n   #. You use something that is not part of the 4 ledger API command\n      types, e.g., ``fetch``. For ``fetch`` and ``fetchByKey``, you\n      can instead use ``queryContractId`` and ``queryContractKey``"
  },
  {
    "id" : "3e146ba2-06d0-4c91-b07b-758fe5f25a8b",
    "prId" : 6477,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "223b1c46-dd3f-431a-9d0e-87cf9a920262",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What I was calling API here is things like `submit`, i.e., the scenario specific API provided by `daml-stdlib` not the gRPC API of the scenario service. But I do agree that your formulation is better :+1:",
        "createdAt" : "2020-06-24T10:58:51Z",
        "updatedAt" : "2020-06-24T10:58:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc1657c00b0a093c7ac0c1e2c66c44703c7daa5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +10,14 @@   daml-script-docs\n\nDAML scenarios provide a simple way for testing DAML models\nand getting quick feedback in DAML studio. However, scenarios are run\nin a special process and do not interact with an actual ledger. This"
  },
  {
    "id" : "4accdfd0-dcb8-40f0-9649-25a4b63b1425",
    "prId" : 4834,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3700d19-5560-446e-a882-8806f1459ce3",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Should there be a separate section introducing `init-script` as a concept before going into migration, or is this planned for later when DAML script is stabilized?",
        "createdAt" : "2020-03-05T13:39:34Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "2230e558-05da-4847-9fbf-fccfcbd417cd",
        "parentId" : "f3700d19-5560-446e-a882-8806f1459ce3",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good point! I’ve added a section on that. PTAL",
        "createdAt" : "2020-03-05T14:00:50Z",
        "updatedAt" : "2020-03-05T14:47:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9ac8387c-9a12-4750-b61f-8b22cda85584",
        "parentId" : "f3700d19-5560-446e-a882-8806f1459ce3",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Thank you, that looks great!",
        "createdAt" : "2020-03-05T16:10:13Z",
        "updatedAt" : "2020-03-05T16:10:13Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +220,224 @@\nExisting scenarios that you used for ledger initialization can be\ntranslated to DAML script but there are a few things to keep in mind:\n\n#. You need to add ``daml-script`` to the list of dependencies in your"
  },
  {
    "id" : "fc77d314-1480-4b08-9555-ecc4d63de7f0",
    "prId" : 4834,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d779492-07cf-4372-991e-49e2434464d6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\ncreate a party with a specific party identifier during development, you can\r\n```\r\nSame below.",
        "createdAt" : "2020-03-06T10:08:48Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +204,208 @@your ``daml.yaml``. This will automatically be picked up by ``daml\nstart`` and used to initialize sandbox. Since it is often useful to\ncreate a party with a specific party id during development, you can\nuse the ``allocatePartyWithHint`` function which accepts not only the\ndisplay name but also a hint for the party id. On Sandbox, the hint"
  },
  {
    "id" : "c7233066-c74b-47bc-af7d-fbcf7c24df25",
    "prId" : 4834,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "955a273e-c330-4e28-a7f7-353b273f9750",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What do you mean by \"create a choice\"? I suppose you mean something like creating a contract with a single choice?",
        "createdAt" : "2020-03-06T10:11:18Z",
        "updatedAt" : "2020-03-06T10:11:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "058afac5-44e7-42d3-8de3-b75b21089ada",
        "parentId" : "955a273e-c330-4e28-a7f7-353b273f9750",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yep, tried to make it a bit clearer in https://github.com/digital-asset/daml/pull/4870",
        "createdAt" : "2020-03-06T10:36:16Z",
        "updatedAt" : "2020-03-06T10:36:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "037ce5cc9ac3507255449da9e5db468694059574",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +235,239 @@   intentional. Your initialization scripts should not be able to\n   create transactions that a ledger client would not be able to\n   create. If you need, you can create a choice and call that via\n   ``createAndExercise``.\n#. You need to replace calls to ``getParty x`` by"
  },
  {
    "id" : "01b9b813-f393-4b80-8f41-4e0baecfc348",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fb9fc25-ff62-4058-99ef-aea402b5f21e",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nDAML Script addresses this problem by providing you with an API with\r\n```\r\nI think we should do this consistently.",
        "createdAt" : "2019-11-19T15:23:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@e.g., your UI or :doc:`DAML triggers </triggers/index>`.\n\nDAML script addresses this problem by providing you with an API with\nthe simplicity of DAML scenarios and all the benefits such as being\nable to reuse your DAML types and logic while running against an"
  },
  {
    "id" : "03450a5c-a833-4599-902a-71ef9f609a33",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcd14da0-b79a-4c36-8cc8-379ff1fdd47a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nand getting quick feedback in DAML Studio. However, scenarios are run\r\n```",
        "createdAt" : "2019-11-19T15:23:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@\nDAML scenarios provide a simple API for experimenting with DAML models\nand getting quick feedback in DAML studio. However, scenarios are run\nin a special process and do not interact with an actual ledger. This\nmeans that you cannot use scenarios to test other ledger clients,"
  },
  {
    "id" : "edc12638-9853-485c-b60b-3a42ebef6060",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f8708f-7f71-4b25-a923-c79a3942d722",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nlogic and your UI. DAML Script can also be used for ledger initialization on all ledger implementations.\r\n```\r\nIt took me a while to understand the sentence. I don't think it's really necessary to mention here that scenarios can be used to initialize the sandbox. IMO, it is more likely to cause confusion rather than really help the documentation of DAML Script.",
        "createdAt" : "2019-11-19T15:29:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@able to reuse your DAML types and logic while running against an\nactual ledger. This means that you can use it to test automation\nlogic, your UI but also for ledger initialization where scenarios\ncannot be used (with the exception of :doc:`/tools/sandbox`).\n"
  },
  {
    "id" : "1e222e2a-2470-421e-b0cb-84cb89b70f52",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99e0bb09-afe7-4cf6-839a-400a41b5ec0f",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nOur example for this tutorial consists of two templates.\r\n```",
        "createdAt" : "2019-11-19T15:29:18Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@=====\n\nOur example for this tutorial consists of 2 templates.\n\nFirst, we have a template called ``Coin``:"
  },
  {
    "id" : "3bde5a38-dc2e-4fb2-bce7-31350a00622b",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a79b951-cd2c-45c1-bc28-27660a9b8a64",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nsingle ``Accept`` choice to the ``owner``, which will create the corresponding ``Coin`` when exercised.\r\n```",
        "createdAt" : "2019-11-19T15:32:14Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@\n``CoinProposal`` is only signed by the ``issuer`` and it provides a\nsingle ``Accept`` choice which, when exercised by the controller will\ncreate the corresponding ``Coin``.\n"
  },
  {
    "id" : "d72d6728-0798-420e-b69e-a1c8a01377df",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "236d8400-a853-4477-84d6-5c9999635598",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nthat operate on these templates. In order to use DAML Script, you need to add the ``daml-script``\r\n```",
        "createdAt" : "2019-11-19T15:34:08Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@\nHaving defined the templates, we can now move on to write DAML scripts\nthat operate on these templates. To get accees to the API used to implement DAML scripts, you need to add the ``daml-script``\nlibrary to the ``dependencies`` field in ``daml.yaml``.\n"
  },
  {
    "id" : "20aace94-1f86-4b51-950b-d9077814727c",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a6fb7d-a11b-49a6-9e81-f8c189d5e524",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nIn addition to that, you also need to import the ``Daml.Script`` module.\r\n```",
        "createdAt" : "2019-11-19T15:34:37Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@   :end-before: # script-dependencies-end\n\nIn addition to that you also need to import the ``Daml.Script`` module\nand since DAML script provides ``submit`` and ``submitMustFail``\nfunctions that collide with the ones used in scenarios, we need to"
  },
  {
    "id" : "9996654b-571e-4b10-8cc4-a97d0e2e2d8f",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f65102c-ac31-4403-baa2-5dcd01705bd5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nSince DAML script provides ``submit`` and ``submitMustFail``\r\n```",
        "createdAt" : "2019-11-19T15:35:02Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@\nIn addition to that you also need to import the ``Daml.Script`` module\nand since DAML script provides ``submit`` and ``submitMustFail``\nfunctions that collide with the ones used in scenarios, we need to\nhide those. We also enable the ``ApplicativeDo`` extension. We will"
  },
  {
    "id" : "e458642c-8617-4051-ae95-5004fb45135b",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "595dc00a-0668-4659-9da6-796568bcd085",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nSince parties cannot be arbitrary strings on an actual ledger, we\r\n```",
        "createdAt" : "2019-11-19T15:36:56Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@   :end-before: -- DAML_SCRIPT_HEADER_END\n\nSince on an actual ledger parties cannot be arbitrary strings, we\ndefine a record containing all the parties that we will use in our\nscript so that we can easily swap them out."
  },
  {
    "id" : "6649f5c8-5249-41ce-bf88-f4b58067f205",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a013f471-a68e-49da-a8df-9610ba9d62ab",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nLet us now write a function to initialize the ledger with three\r\n```",
        "createdAt" : "2019-11-19T15:37:42Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@   :end-before: -- LEDGER_PARTIES_END\n\nLet us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script"
  },
  {
    "id" : "d1661e0f-8aff-4612-baab-20f9206df13a",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7508d06-b1da-40ee-8eff-fdea895e31c4",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n``CoinProposal``s and accept two of them. This function takes the\r\n```",
        "createdAt" : "2019-11-19T15:37:54Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@\nLet us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML script’s equivalent of ``Scenario ()``."
  },
  {
    "id" : "18c814a8-899c-4571-ba09-69626e3da37a",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6f6e7ec-0afa-49e3-8aab-ac441e46d8ee",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n``LedgerParties`` as an argument and returns a ``Script\r\n```",
        "createdAt" : "2019-11-19T15:38:31Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@Let us now write a function to initialize the ledger with 3\n``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML script’s equivalent of ``Scenario ()``.\n"
  },
  {
    "id" : "4942e547-6628-472a-8f8c-c7610af1d4d6",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91c5b076-6675-4a25-8539-e6c0fdcbac8a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n()``, which is DAML Script’s equivalent of ``Scenario ()``.\r\n```",
        "createdAt" : "2019-11-19T15:38:44Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@``CoinProposal``s and accept 2 of them. This function takes the\n``LedgerParties`` as an argument and return something of type ``Script\n()`` which is DAML script’s equivalent of ``Scenario ()``.\n\n.. literalinclude:: ./template-root/src/ScriptExample.daml"
  },
  {
    "id" : "4d340fa6-913e-4e6d-b398-00b17d62ef04",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314d4de6-8d57-44b8-9082-62f225420376",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nmust be of type ``Commands a``. In our case that becomes ``Commands (ContractId\r\n```",
        "createdAt" : "2019-11-19T15:40:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@submitting the transaction. In our case, we want all proposals to be\ncreated by the bank so we use ``parties.bank``. The second argument\nmust be of type ``Commands a`` so in our case ``Commands (ContractId\nCoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\ncorresponding to the 3 proposals that we create. ``Commands`` is"
  },
  {
    "id" : "8875358c-26fb-4490-8fd2-209a6b6967c5",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e90b023c-5f6b-4922-b3d9-1c589df6cd96",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\ncorresponding to the three proposals that we create. ``Commands`` is\r\n```",
        "createdAt" : "2019-11-19T15:40:25Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@must be of type ``Commands a`` so in our case ``Commands (ContractId\nCoinProposal, ContractId CoinProposal, ContractId CoinProposal)``\ncorresponding to the 3 proposals that we create. ``Commands`` is\nsimilar to ``Update`` which is used in the ``submit`` function in\nscenarios. However, ``Commands`` requires that the individual commands"
  },
  {
    "id" : "a2d3978c-c787-4e88-b7ef-fc9346e1cef2",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed791bdb-3788-4795-93a8-aa8a69328d74",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nrespect this restriction. In ``Commands`` we use ``createCmd`` instead of\r\n```",
        "createdAt" : "2019-11-19T15:41:13Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +100,104 @@Ledger API where a transaction consists of a list of commands.  Using\n``ApplicativeDo`` we can still use ``do``-notation as long as we\nrespect this. In ``Commands`` we use ``createCmd`` instead of\n``create`` and ``exerciseCmd`` instead of ``exercise``.\n"
  },
  {
    "id" : "0e0ba8e4-a463-4d48-8bfc-145cdc28fd54",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10497d02-b6ab-4909-bb30-d9db967d381b",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nAfter creating the ``CoinProposal``s, we want ``Alice`` and\r\n```",
        "createdAt" : "2019-11-19T15:41:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@   :end-before: -- INITIALIZE_PROPOSAL_END\n\nNow that we have created the ``CoinProposal``s, we want ``Alice`` and\n``Bob`` to accept the proposal while the ``Bank`` will ignore the\nproposal that it has created for itself. To do so we use separate"
  },
  {
    "id" : "42e623af-eb69-4288-b3ca-ccfe5965cb9a",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c18dd9e2-2a79-4d55-bd41-4658a7b1efb5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nUp to here, we have defined a way to initialize the ledger. Next, we will write a\r\n```",
        "createdAt" : "2019-11-19T15:44:33Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@   :end-before: -- INITIALIZE_PURE_END\n\nWe have now defined a way to initialize the ledger so we can write a\ntest that checks that the contracts that we expect exist afterwards.\n"
  },
  {
    "id" : "11ec6363-3ee1-42eb-b37c-20fba8e2afef",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6eef458-3c59-4f59-84d6-c51fabf4ab1a",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\ntest that checks that the contracts we expect to exist do actually exist.\r\n```",
        "createdAt" : "2019-11-19T15:45:12Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@\nWe have now defined a way to initialize the ledger so we can write a\ntest that checks that the contracts that we expect exist afterwards.\n\nFirst, we define the signature of our test. We will create the parties"
  },
  {
    "id" : "ef8bfa71-7046-426d-8795-4f5db7f50931",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33fb6e5c-8bf7-4202-8198-a33b56ac39e3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nTo this end, we first define the signature of our test. We will create the parties\r\n```",
        "createdAt" : "2019-11-19T15:45:30Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@test that checks that the contracts that we expect exist afterwards.\n\nFirst, we define the signature of our test. We will create the parties\nused here in the test, so it does not take any arguments.\n"
  },
  {
    "id" : "d0daedb9-749f-4c2a-94cf-10f1d0f04d9c",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b19287fb-c515-4193-b3de-3ebeb1e75da2",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nname, it will create two different parties. This is very convenient for\r\n```",
        "createdAt" : "2019-11-19T15:46:01Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +142,146 @@display name. Note that the display name does not identify a party\nuniquely. If you call ``allocateParty`` twice with the same display\nname, it will create 2 different parties. This is very convenient for\ntesting since a new party cannot see any old contracts on the ledger\nso using new parties for each test removes the need to reset the"
  },
  {
    "id" : "731dbb9c-abcb-4ad7-aa58-11c905776f5e",
    "prId" : 3527,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06e02c67-bc01-48d5-b369-2bf0a5c72eb3",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\nHence, using new parties for each test removes the need to reset the ledger between tests.\r\n```",
        "createdAt" : "2019-11-19T15:47:48Z",
        "updatedAt" : "2019-11-19T16:55:55Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f6dad6bf2853d8ac2e46b69980048e9b455509",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@name, it will create 2 different parties. This is very convenient for\ntesting since a new party cannot see any old contracts on the ledger\nso using new parties for each test removes the need to reset the\nledger.\n"
  }
]