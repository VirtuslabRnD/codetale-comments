[
  {
    "id" : "109c2790-b4ae-457b-bcb1-fc45cf0d11fa",
    "prId" : 5223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fecfcdcf-0bc9-4d50-bdc0-03b7e20fa7f4",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : ":+1: ",
        "createdAt" : "2020-03-27T08:00:19Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c6c7c118876a03f4fb995d33280f39a4f00a91b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +295,299 @@*******\n\nTextMaps are represented as objects:\n\n::"
  },
  {
    "id" : "d7b7cbab-12c8-4772-84e2-263457c69ab0",
    "prId" : 5223,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b318afae-587c-43ea-99cf-c2bd24f34401",
        "parentId" : null,
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "The current approach on the ledger API is to accept repeat key, the last key overwrite the previous one. \r\n(I should have added that to the ledger API doc) \r\nSo there is no requirement that `ValueGenMap` coming from the input does not require the value to be ordered. \r\nThe 'dropping' of duplicate key will be done by the `ValueTranslator#translateValue` method. \r\n\r\nI do not think we this behaviour for the http service.  \r\n\r\nThat is to say: \r\nInput maps are just list of tuples. \r\nOutput maps are list list of tuples with the extra guarantee that field are ordered without  duplicate keys. \r\n\r\n\r\n\r\n",
        "createdAt" : "2020-03-30T11:56:07Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ae02eeea-3288-49b0-abd2-dafac2ec9027",
        "parentId" : "b318afae-587c-43ea-99cf-c2bd24f34401",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "@gerolf-da @hurryabit What do you think ? ",
        "createdAt" : "2020-03-30T12:00:53Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "3d2a4ff2-d4c6-48af-a688-8e0704663065",
        "parentId" : "b318afae-587c-43ea-99cf-c2bd24f34401",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "@hurryabit said we should fail on duplicate keys in #5031 discussion; that is why this is planned.",
        "createdAt" : "2020-03-30T14:40:59Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "1e4ef574-37a2-406b-b08b-d3c1d82e5636",
        "parentId" : "b318afae-587c-43ea-99cf-c2bd24f34401",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Being lenient on the input is pretty much the question of whether you want to notify the user of a possible data problem (duplicate keys) over convenience to not have to care about it.\r\nI think we can start out being more strict, and then later loosen the restriction.",
        "createdAt" : "2020-03-30T14:51:34Z",
        "updatedAt" : "2020-05-04T21:18:48Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c6c7c118876a03f4fb995d33280f39a4f00a91b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +308,312 @@    [ [k₁, v₁], [kₙ, vₙ] ]\n\nOrder does not matter.  However, any duplicate keys will cause the map\nto be treated as invalid.\n"
  },
  {
    "id" : "f0998a84-8d9a-42c1-a801-082e9c320ef7",
    "prId" : 3012,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7045acf7-17a0-4942-ac02-c578ca471fc9",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "The backtick literals in this paragraph that are split across lines probably need to be joined back to start and end in the same line.",
        "createdAt" : "2019-09-24T20:10:59Z",
        "updatedAt" : "2019-09-24T20:17:25Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "9c5cca6d-48a2-45bc-acd0-dae62fc245e6",
        "parentId" : "7045acf7-17a0-4942-ac02-c578ca471fc9",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Ah, I just accidentally added an empty line between them; renders fine after reverting that d2ef790834",
        "createdAt" : "2019-09-24T20:18:00Z",
        "updatedAt" : "2019-09-24T20:18:01Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2ef7908343297b9e6dc5a35bd3cd1ae9e972779",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +216,220 @@****\n\nRepresented as empty object ``{}``. Note that in JavaScript ``{} !==\n{}``; however, ``null`` would be ambiguous; for the type ``Optional\nUnit``, ``null`` decodes to ``None``, but ``{}`` decodes to ``Some ()``."
  }
]