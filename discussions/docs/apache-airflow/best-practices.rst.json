[
  {
    "id" : "4e48f8ed-1394-495d-b3f8-ca7b1424e7e1",
    "prId" : 13502,
    "prUrl" : "https://github.com/apache/airflow/pull/13502#pullrequestreview-562562229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f9698d-f341-4465-bf6d-f7e3346f59d8",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I think it would be great to add a little context here. In which situations you would like to do that? I am not 100% sure here if we are talking about \"user facing' mocking or \"contributors\" mocking. If this is user-facing, then it would be great to explain when mocking might be useful. If this is \"contributors-facing\" then it should be moved to CONTRIBUTORS.",
        "createdAt" : "2021-01-06T10:16:32Z",
        "updatedAt" : "2021-01-06T10:50:12Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "69d1602c-d21b-407d-9710-024f1fc6da60",
        "parentId" : "65f9698d-f341-4465-bf6d-f7e3346f59d8",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I think this is useful for the end user. I've seen similar questions on Slack many times, including once yesterday. See: https://apache-airflow.slack.com/archives/CSS36QQS1/p1609874991010700\r\n\r\nI have added some context in which cases, this can be helpful.",
        "createdAt" : "2021-01-06T10:51:58Z",
        "updatedAt" : "2021-01-06T10:51:58Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "f581cd2f67a4fcc170649d4b4aa4d9a763c0064f",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +240,244 @@Mocking variables and connections\n=================================\n\nWhen you write tests for code that uses variables or a connection, you must ensure that they exist when you run the tests. The obvious solution is to save these objects to the database so they can be read while your code is executing. However, reading and writing objects to the database are burdened with additional time overhead. In order to speed up the test execution, it is worth simulating the existence of these objects without saving them to the database. For this, you can create environment variables with mocking :any:`os.environ` using :meth:`unittest.mock.patch.dict`.\n"
  }
]