[
  {
    "id" : "4e48f8ed-1394-495d-b3f8-ca7b1424e7e1",
    "prId" : 13502,
    "prUrl" : "https://github.com/apache/airflow/pull/13502#pullrequestreview-562562229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65f9698d-f341-4465-bf6d-f7e3346f59d8",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I think it would be great to add a little context here. In which situations you would like to do that? I am not 100% sure here if we are talking about \"user facing' mocking or \"contributors\" mocking. If this is user-facing, then it would be great to explain when mocking might be useful. If this is \"contributors-facing\" then it should be moved to CONTRIBUTORS.",
        "createdAt" : "2021-01-06T10:16:32Z",
        "updatedAt" : "2021-01-06T10:50:12Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "69d1602c-d21b-407d-9710-024f1fc6da60",
        "parentId" : "65f9698d-f341-4465-bf6d-f7e3346f59d8",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I think this is useful for the end user. I've seen similar questions on Slack many times, including once yesterday. See: https://apache-airflow.slack.com/archives/CSS36QQS1/p1609874991010700\r\n\r\nI have added some context in which cases, this can be helpful.",
        "createdAt" : "2021-01-06T10:51:58Z",
        "updatedAt" : "2021-01-06T10:51:58Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "f581cd2f67a4fcc170649d4b4aa4d9a763c0064f",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +240,244 @@Mocking variables and connections\n=================================\n\nWhen you write tests for code that uses variables or a connection, you must ensure that they exist when you run the tests. The obvious solution is to save these objects to the database so they can be read while your code is executing. However, reading and writing objects to the database are burdened with additional time overhead. In order to speed up the test execution, it is worth simulating the existence of these objects without saving them to the database. For this, you can create environment variables with mocking :any:`os.environ` using :meth:`unittest.mock.patch.dict`.\n"
  },
  {
    "id" : "1178479f-1422-4943-8b51-75ea5ebaea99",
    "prId" : 17319,
    "prUrl" : "https://github.com/apache/airflow/pull/17319#pullrequestreview-720202902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "788912a1-9d6a-47c3-8fb1-377432fa290a",
        "parentId" : null,
        "authorId" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "body" : "What does “use environment variables in the top-level Python code” mean here?",
        "createdAt" : "2021-07-30T04:18:06Z",
        "updatedAt" : "2021-07-30T04:18:15Z",
        "lastEditedBy" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "tags" : [
        ]
      },
      {
        "id" : "ffaac747-ace6-4097-b6de-5bf115004f6c",
        "parentId" : "788912a1-9d6a-47c3-8fb1-377432fa290a",
        "authorId" : "f96930c6-4615-4aad-9453-14f92b07f3b9",
        "body" : "I think it means accessing the environment variables outside a task, as referred to [this](https://airflow.apache.org/docs/apache-airflow/stable/best-practices.html#top-level-python-code).\r\n\r\nWhat do you think if we keep only this:\r\n```suggestion\r\nAn alternative option is to use environment variables to create and manage Airflow variables.\r\nThis avoids new connections to Airflow metadata DB every time Airflow parses the\r\nPython file. For more information, see: :ref:`managing_variables`.\r\n```\r\nsince I think \"environment variables in the top-level Python code\" might be irrelevant to Airflow Variable?",
        "createdAt" : "2021-07-31T14:35:45Z",
        "updatedAt" : "2021-07-31T14:35:46Z",
        "lastEditedBy" : "f96930c6-4615-4aad-9453-14f92b07f3b9",
        "tags" : [
        ]
      },
      {
        "id" : "7116e3cf-9465-44de-a270-fab35bb93c63",
        "parentId" : "788912a1-9d6a-47c3-8fb1-377432fa290a",
        "authorId" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "body" : "Yeah that makes sense to me.",
        "createdAt" : "2021-08-02T07:59:27Z",
        "updatedAt" : "2021-08-02T07:59:27Z",
        "lastEditedBy" : "a5092e56-4956-45ec-9914-ecec6b63df73",
        "tags" : [
        ]
      },
      {
        "id" : "08b2bb07-e85f-4800-8106-89b613844e41",
        "parentId" : "788912a1-9d6a-47c3-8fb1-377432fa290a",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "The idea here was that you could control the behaviour of top-level python code by setting \"regular\" environment variables and reading from those. I think we should generally discourage using Airflow Variables  at the top level of python code in Dag - (regardless if they are defined via ENV Vars or not). I think in some future version of Airflow, where we will convert access to variables into API calls, we will likely detect such access to Airflow Variables during parsing and either warn or block it. \r\n\r\nThere is very little sense to use Airflow Variables in top-level code of DAGs- even if you make \"requirement\" to define them via variables, it's much simpler, explicit and straightforward to simply ... use the variables via os.environment and then they should not need to follow the _VAR convention. \r\n\r\n So I think the proposed change is not what we intended to say here.",
        "createdAt" : "2021-08-02T08:13:27Z",
        "updatedAt" : "2021-08-02T08:13:28Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "02b94604-6ad2-4015-8ecb-611dfe8649a0",
        "parentId" : "788912a1-9d6a-47c3-8fb1-377432fa290a",
        "authorId" : "f96930c6-4615-4aad-9453-14f92b07f3b9",
        "body" : "Yeah, sounds great to me. ;)",
        "createdAt" : "2021-08-02T13:29:02Z",
        "updatedAt" : "2021-08-02T13:29:03Z",
        "lastEditedBy" : "f96930c6-4615-4aad-9453-14f92b07f3b9",
        "tags" : [
        ]
      }
    ],
    "commit" : "75845b054219fa7cd58591406744aa6919a3e661",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +118,122 @@An alternative option is to use environment variables in the top-level Python code or use environment variables to\ncreate and manage Airflow variables. This will avoid new connections to Airflow metadata DB every time\nAirflow parses the Python file. For more information, see: :ref:`managing_variables`.\n\nTop level Python Code"
  }
]