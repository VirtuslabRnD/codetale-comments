[
  {
    "id" : "5bc23853-21b9-4d1f-9e61-1e1d566dec00",
    "prId" : 2140,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2140#pullrequestreview-713235421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5afade7e-23fd-4947-abbc-15fac61896ce",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "As a fun addition, we could add that literally every fiber in Cats Effect is executed asynchronously, even if it was written using only synchronous combinators. Just a thought. ðŸ˜„ ",
        "createdAt" : "2021-07-22T20:43:20Z",
        "updatedAt" : "2021-07-22T20:58:30Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "bb43b9cd-74f6-4385-9add-488a830162d2",
        "parentId" : "5afade7e-23fd-4947-abbc-15fac61896ce",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : ":-D I thought about it, but I figured that would just confuse people. I want to bring readers to a place of not worrying about such details.",
        "createdAt" : "2021-07-22T21:04:17Z",
        "updatedAt" : "2021-07-22T21:04:17Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "a9cd32b4-99fa-45b4-9ac7-050c27cde77e",
        "parentId" : "5afade7e-23fd-4947-abbc-15fac61896ce",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Agreed.",
        "createdAt" : "2021-07-22T21:05:59Z",
        "updatedAt" : "2021-07-22T21:05:59Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d75ca114140e8be098238beee90a1c768928764",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@In the language of Cats Effect, \"concurrent\" generally refers to two or more actions which are defined to be independent in their control flow. It is the opposite of \"sequential\", or rather, \"sequential\" implies that something *cannot* be \"concurrent\". Critically, it is possible for things that are \"concurrent\" to evaluate sequentially if the underlying runtime decides this is optimal, whereas actions which are sequential will always be evaluated one after the other.\n\nConcurrency is often conflated with asynchronous execution due to the fact that, in practice, the *implementation* of concurrency often relies upon some mechanism for asynchronous evaluation. But as noted above, asynchrony is just that: an implementation detail, and one which says nothing about concurrent vs sequential semantics.\n\nCats Effect has numerous mechanisms for defining concurrent effects. One of the most straightforward of these is `parTupled`, which evaluates a pair of independent effects and produces a tuple of their results:"
  },
  {
    "id" : "752ed87d-11ce-461b-b53f-1aad9e8d4f78",
    "prId" : 2140,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2140#pullrequestreview-713235154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d6df215-3f25-4b60-8236-8470b913018c",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Since _fork_ has not been used up to here, should we add a (`start` in Cats Effect) to maybe link the general concept to the actual implementation in CE?",
        "createdAt" : "2021-07-22T20:47:09Z",
        "updatedAt" : "2021-07-22T20:58:30Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "f489c938-d787-46f7-9f86-ef771ac0fd90",
        "parentId" : "1d6df215-3f25-4b60-8236-8470b913018c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I struggled a lot with this paragraph. \"Fork\" in particular is difficult, because it's hard to define the concept without being circular. I'm not sure the implementation really helps, but I do agree this needs re-wording.",
        "createdAt" : "2021-07-22T21:05:34Z",
        "updatedAt" : "2021-07-22T21:05:35Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d75ca114140e8be098238beee90a1c768928764",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +161,165 @@#### Structured Concurrency\n\nFormally-speaking, structured concurrency is a form of control flow in which all concurrent operations must form a closed hierarchy. Conceptually, it means that any operation which *forks* some actions to run concurrently must forcibly ensure that those actions are completed before moving forward. Furthermore, the *results* of a concurrent operation must only be made available upon its completion, and only to its parent in the hierarchy. `parTupled` above is a simple example of this: the `IO[(Response, Response)]` is unavailable as a result until *both* service calls have completed, and those responses are only accessible within the resulting tuple.\n\nCats Effect has a large number of structured concurrency tools, most notably `parTupled`, `parMapN`, and `parTraverse`. Additionally, it offers a number of more robust structured concurrency operators such as `background`, `Supervisor`, and `Dispatcher`. It has also fostered an ecosystem wherein structured concurrency is the *rule* rather than the exception, particularly with the help of higher-level frameworks such as [Fs2](https://fs2.io). However, structured concurrency can be very limiting, and Cats Effect does not *prevent* unstructured concurrency when it is needed."
  },
  {
    "id" : "7e4560bc-5731-44a5-a9d6-180b3fbcdfb7",
    "prId" : 2140,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2140#pullrequestreview-713236574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96755a8b-4890-497e-942a-e76d9ae41de0",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "```suggestion\r\nCats Effect has a large number of structured concurrency tools, most notably `parTupled`, `parMapN`, and `parTraverse`. Additionally, it offers a number of more robust structured concurrency operators such as `background`, `cats.effect.std.Supervisor`, and `cats.effect.std.Dispatcher`. It has also fostered an ecosystem wherein structured concurrency is the *rule* rather than the exception, particularly with the help of higher-level frameworks such as [Fs2](https://fs2.io). However, structured concurrency can be very limiting, and Cats Effect does not *prevent* unstructured concurrency when it is needed.\r\n```",
        "createdAt" : "2021-07-22T20:50:03Z",
        "updatedAt" : "2021-07-22T20:58:30Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "352c8dcf-cfe6-4d66-bd69-70313c494c4a",
        "parentId" : "96755a8b-4890-497e-942a-e76d9ae41de0",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Counter-point: doesn't everyone have either an IDE, Metals, or something like Dash? Do we really need the fully-qualified names?",
        "createdAt" : "2021-07-22T21:06:05Z",
        "updatedAt" : "2021-07-22T21:06:06Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "67c42229-0f96-45be-a754-2c1ff103196d",
        "parentId" : "96755a8b-4890-497e-942a-e76d9ae41de0",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "It's just that they cannot be found under the `cats.effect` package, unlike `Ref` and `Deferred` for example. It was just a thought, I don't really mind either way.",
        "createdAt" : "2021-07-22T21:07:36Z",
        "updatedAt" : "2021-07-22T21:07:36Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d75ca114140e8be098238beee90a1c768928764",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +163,167 @@Formally-speaking, structured concurrency is a form of control flow in which all concurrent operations must form a closed hierarchy. Conceptually, it means that any operation which *forks* some actions to run concurrently must forcibly ensure that those actions are completed before moving forward. Furthermore, the *results* of a concurrent operation must only be made available upon its completion, and only to its parent in the hierarchy. `parTupled` above is a simple example of this: the `IO[(Response, Response)]` is unavailable as a result until *both* service calls have completed, and those responses are only accessible within the resulting tuple.\n\nCats Effect has a large number of structured concurrency tools, most notably `parTupled`, `parMapN`, and `parTraverse`. Additionally, it offers a number of more robust structured concurrency operators such as `background`, `Supervisor`, and `Dispatcher`. It has also fostered an ecosystem wherein structured concurrency is the *rule* rather than the exception, particularly with the help of higher-level frameworks such as [Fs2](https://fs2.io). However, structured concurrency can be very limiting, and Cats Effect does not *prevent* unstructured concurrency when it is needed.\n\nIn particular, fibers may be `start`ed without the caller being forced to wait for their completion. This low-level flexibility is necessary in some cases, but it is also somewhat dangerous since it can result in fiber \"leaks\" (in which a fiber is `start`ed and all references to it outside of the runtime are abandoned). It is generally better to rely on structured (but very flexible) tools such as `background` or `Supervisor`."
  },
  {
    "id" : "4b605cc1-83c8-4bc3-bd2f-c2c8534c1ef8",
    "prId" : 2140,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2140#pullrequestreview-713238749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda86a29-70a1-40f8-abb4-073301e778c3",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Should we stick to idiomatic Scala and `println`?",
        "createdAt" : "2021-07-22T20:56:34Z",
        "updatedAt" : "2021-07-22T20:58:30Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "c156207d-5716-4d1f-8c6e-09dcd37d7e22",
        "parentId" : "cda86a29-70a1-40f8-abb4-073301e778c3",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I wanted to differentiate it explicitly from `IO.println`.",
        "createdAt" : "2021-07-22T21:06:21Z",
        "updatedAt" : "2021-07-22T21:06:21Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "fc3e4faa-73f3-4b2e-8377-7798aae11595",
        "parentId" : "cda86a29-70a1-40f8-abb4-073301e778c3",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "I thought about that too. I agree.",
        "createdAt" : "2021-07-22T21:10:46Z",
        "updatedAt" : "2021-07-22T21:10:46Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d75ca114140e8be098238beee90a1c768928764",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +233,237 @@### Side-Effects\n\nWhen running a piece of code causes changes outside of just returning a value, we generally say that code \"has side-effects\". More intuitively, code where you care whether it runs more than once, and/or *when* it runs, almost always has side-effects. The classic example of this is `System.out.println`:\n\n```scala mdoc"
  }
]