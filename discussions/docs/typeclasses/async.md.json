[
  {
    "id" : "22b81b73-da23-4816-be90-f32f611bac30",
    "prId" : 1807,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1807#pullrequestreview-617397118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4efda1d2-b9e4-4a6a-a2b5-af7c6ab57893",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "you probably want to introduce `uncancelable` here first",
        "createdAt" : "2021-03-22T11:03:56Z",
        "updatedAt" : "2021-03-22T17:50:23Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "640c191c-2341-4e86-b0af-7de8894bc1ec",
        "parentId" : "4efda1d2-b9e4-4a6a-a2b5-af7c6ab57893",
        "authorId" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "body" : "Yep thanks 👍 Just copied this from Gitter without thinking too much about it 😂 Although I did also consider removing `uncancelable` from both implementations as it's pretty irrelevant to what we're actually discussing here (could leave a note to say that we're ignoring cancellation). What do you think?",
        "createdAt" : "2021-03-22T11:08:03Z",
        "updatedAt" : "2021-03-22T17:50:23Z",
        "lastEditedBy" : "940c7717-e09f-4735-b1e2-bb5b29e96dd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5fda59d0dd073dc99721f64f24ad640268d8d77",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +182,186 @@    }\n  }\n```\n\nIn this case, the error channel is propagated from `k(cb)` as we directly `flatMap`"
  },
  {
    "id" : "ab2f7b1c-8635-4b96-982d-555db8097426",
    "prId" : 1807,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1807#pullrequestreview-617396203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd974440-966f-4fd1-9d88-2eb89ccb9dbb",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "yeah this is hard to explain, but essentially the reason is that `get` represents \"the rest of the runloop\", which don't want to be resumed concurrently from multiple places",
        "createdAt" : "2021-03-22T11:06:58Z",
        "updatedAt" : "2021-03-22T17:50:23Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5fda59d0dd073dc99721f64f24ad640268d8d77",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +188,192 @@\nFantastic! We're done, right? Well... not quite. The problem is that it is not safe\nto call concurrent operations such as `get.start`. We therefore need to employ\none more trick and restrict the operations in scope using higher-rank polymorphism.\n"
  },
  {
    "id" : "a9ae0bba-6099-41ec-9c54-23477321fc68",
    "prId" : 1807,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1807#pullrequestreview-617607245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89410343-cfc3-40a1-b73c-fb950f99f3ba",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Needs indentation",
        "createdAt" : "2021-03-22T14:43:18Z",
        "updatedAt" : "2021-03-22T17:50:23Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5fda59d0dd073dc99721f64f24ad640268d8d77",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +145,149 @@\n```scala\ndef asyncRightIsSequencedPure[A](a: A, fu: F[Unit]) =\n  F.async[A](k => F.delay(k(Right(a))) >> fu.as(None)) <-> (fu >> F.pure(a))\n"
  }
]