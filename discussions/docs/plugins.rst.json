[
  {
    "id" : "01f4141b-edaa-4339-a4ad-cc61e1046e08",
    "prId" : 4376,
    "prUrl" : "https://github.com/apache/airflow/pull/4376#pullrequestreview-191742615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18469ddc-86e1-4e4e-974f-44d2dfff1a78",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n     # Creating a flask appbuilder BaseView for the RBAC webserver\r\n```",
        "createdAt" : "2019-01-11T16:33:49Z",
        "updatedAt" : "2019-01-11T16:34:02Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed4f524fa13c0b9fe3a55223080d7da56b8da80",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +183,187 @@        url='https://airflow.incubator.apache.org/')\n\n    # Creating a flask appbuilder BaseView\n    class TestAppBuilderBaseView(AppBuilderBaseView):\n        default_view = \"test\""
  },
  {
    "id" : "ec840c9c-1623-4610-8732-0224eaed5280",
    "prId" : 4412,
    "prUrl" : "https://github.com/apache/airflow/pull/4412#pullrequestreview-190513299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Could you extend this doc to make it clear under what name this plugin will be available? Because I don't think that _any_ of these names actually appears in the airflow plugin import statement at use time? (Though that might be clearer if it did?)\r\n\r\n",
        "createdAt" : "2019-01-08T14:27:48Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "f4e4935b-fd3e-42e4-a768-81f568c42f37",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "89215173-b24c-4c10-96fd-18a104284519",
        "body" : "I'll expand the documentation when I get home, but given a class like\r\n\r\n```python\r\n# my_package/my_plugin.py\r\nfrom airflow.plugins_manager import AirflowPlugin\r\n\r\nclass MyAirflowPlugin(AirflowPlugin):\r\n    name = 'my_namespace.MyPlugin'\r\n```\r\nI think (I can't remember off the top of my head, but I will test) that the plugin would be exposed under `airflow.operators.my_namespace.MyPlugin`, `airflow.sensors.my_namespace.MyPluigin`, etc.",
        "createdAt" : "2019-01-08T16:03:08Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "89215173-b24c-4c10-96fd-18a104284519",
        "tags" : [
        ]
      },
      {
        "id" : "74f43a07-f245-4241-ae17-6d681b35ee4f",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "89215173-b24c-4c10-96fd-18a104284519",
        "body" : "I'd write some test cases for this functionality, but it is a bit difficult given the structure of this file. Would there be objection to wrapping this functionality in some functions as I did with `is_valid_plugin(...)` to make this a bit easier to test?",
        "createdAt" : "2019-01-08T16:05:28Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "89215173-b24c-4c10-96fd-18a104284519",
        "tags" : [
        ]
      },
      {
        "id" : "1cfcd866-7a06-4d9c-91d1-600b609dcc35",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "89215173-b24c-4c10-96fd-18a104284519",
        "body" : "Before I spent time working on testcases, this would be the idea (and I'd put it in a separate PR) https://github.com/drewsonne/incubator-airflow/pull/1/files",
        "createdAt" : "2019-01-08T18:02:54Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "89215173-b24c-4c10-96fd-18a104284519",
        "tags" : [
        ]
      },
      {
        "id" : "5f80e5d7-0611-4118-82e5-1a4e34074029",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "The class as you have it in that PR1 you link to looks fine from a very quick glance.\r\n\r\nI was more thinking that in the setup.py example in the docs that the `my_plugin` (and maybe `MyAirflowPlugin`?) name doesn't matter - it's not part of the the \"name\" that is exposed by airflow is it? It would be `from airflow.operators.my_namespace import MyOperator` right?",
        "createdAt" : "2019-01-08T22:42:54Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "0e503aab-7ec9-438b-9e57-d8117f14818f",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "89215173-b24c-4c10-96fd-18a104284519",
        "body" : "Ah right, i have not used the “name” of the entry point as it is already handled by the ‘AirflowPlugin.name’. We could use it, but it seems like a precedence would just complicate things.",
        "createdAt" : "2019-01-09T00:00:44Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "89215173-b24c-4c10-96fd-18a104284519",
        "tags" : [
        ]
      },
      {
        "id" : "e9f1d56d-62d0-4966-8284-13fc1f6bc1bb",
        "parentId" : "6ba176f6-93a6-41eb-a2fd-6ca85f2fa840",
        "authorId" : "89215173-b24c-4c10-96fd-18a104284519",
        "body" : "And yes, that import is correct. It's using the same namespace building logic as the file based plugins, so it shouldn't change beyond that.",
        "createdAt" : "2019-01-09T00:01:37Z",
        "updatedAt" : "2019-01-10T22:18:01Z",
        "lastEditedBy" : "89215173-b24c-4c10-96fd-18a104284519",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8d8783586c7f25eb448add547e895f03870334f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +268,272 @@        }\n    )\n\n::\n"
  },
  {
    "id" : "77403ad0-0f71-4491-9291-6c462e68c296",
    "prId" : 4974,
    "prUrl" : "https://github.com/apache/airflow/pull/4974#pullrequestreview-218676332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8eae5b6-c24b-4832-aef5-52f02de8999a",
        "parentId" : null,
        "authorId" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "body" : "Without this, assigning the function in this way binds it to the AirflowPlugin class. Illustration of the difference (on Python2):\r\n\r\n```\r\n>>> def x(arg_that_should_be_str):\r\n...   return arg_that_should_be_str\r\n...\r\n>>> class Foo:\r\n...   x = x\r\n...\r\n>>> x_impl = Foo.x\r\n>>> x_impl(\"a string\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unbound method x() must be called with Foo instance as first argument (got str instance instead)\r\n>>>\r\n>>> class Foo:\r\n...   x = staticmethod(x)\r\n...\r\n>>> x_impl = Foo.x\r\n>>> x_impl(\"a string\")\r\n'a string'\r\n```",
        "createdAt" : "2019-03-26T02:09:21Z",
        "updatedAt" : "2019-03-26T02:09:22Z",
        "lastEditedBy" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "tags" : [
        ]
      },
      {
        "id" : "6fdcdeee-b55a-42c9-9e8d-d32e310fa67b",
        "parentId" : "f8eae5b6-c24b-4832-aef5-52f02de8999a",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "hmm interesting\r\n",
        "createdAt" : "2019-03-26T02:59:18Z",
        "updatedAt" : "2019-03-26T02:59:18Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      },
      {
        "id" : "114e121d-515a-4787-ae6a-e76908d549fb",
        "parentId" : "f8eae5b6-c24b-4832-aef5-52f02de8999a",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "```>>> def x(arg_that_should_be_str):\r\n...    return arg_that_should_be_str\r\n...\r\n>>> class Foo:\r\n...    x = x\r\n...\r\n>>> x_impl = Foo.x\r\n>>> type(x_impl)\r\n<type 'instancemethod'>\r\n>>> x_impl(\"a string\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unbound method x() must be called with Foo instance as first argument (got str instance instead)\r\n>>> ^D\r\ntfeng@tfeng-mbp143 ~/playground/incubator-airflow (tfeng_fix_ci_race) $ python3\r\nPython 3.7.1 (default, Nov 28 2018, 11:51:54)\r\n[Clang 10.0.0 (clang-1000.11.45.5)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> def x(t):\r\n...   return t\r\n...\r\n>>> class Foo:\r\n...   x = x\r\n...\r\n>>> x_impl = Foo.x\r\n>>> type(x_impl)\r\n<class 'function'>\r\n```\r\n\r\nsomehow py2 treats as instance method while py3 treats it as function. Good find.  This seems to be related to https://stackoverflow.com/questions/3589311/get-defining-class-of-unbound-method-object-in-python-3 (unbound method in python3 is gone)",
        "createdAt" : "2019-03-26T03:13:43Z",
        "updatedAt" : "2019-03-26T03:13:53Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "e32e47fe-e0a4-45a5-bd32-22188a65ae68",
        "parentId" : "f8eae5b6-c24b-4832-aef5-52f02de8999a",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "FYI @astahlman @milton0825 ",
        "createdAt" : "2019-03-26T03:14:03Z",
        "updatedAt" : "2019-03-26T03:14:04Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c941b98020f881e6a3ae49dd4ab9ac40783d3fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +213,217 @@        appbuilder_views = [v_appbuilder_package]\n        appbuilder_menu_items = [appbuilder_mitem]\n        stat_name_handler = staticmethod(stat_name_dummy_handler)\n\n"
  }
]