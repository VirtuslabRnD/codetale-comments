[
  {
    "id" : "b7706e57-922b-48a8-b709-56f46b32afe9",
    "prId" : 38967,
    "prUrl" : "https://github.com/ansible/ansible/pull/38967#pullrequestreview-118058068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ae91095-f855-4f20-b117-821839595a9d",
        "parentId" : null,
        "authorId" : "de5e1b91-f661-4a4e-9b31-f71565f2ab84",
        "body" : "Q: Does `default` work together with `options`, for cases where top-level arg is not supplied?\r\nIs `apply_defaults` simply shorthand for a `default` of corresponding dict (in your example giving top_level a `default=dict(second_level=True)`)?\r\n\r\nIf that is true, perhaps implementation doesn't need to complicate `_handle_options` further, could derive an \"effective default\" without even looking at given params.",
        "createdAt" : "2018-05-03T16:55:17Z",
        "updatedAt" : "2018-05-03T17:05:45Z",
        "lastEditedBy" : "de5e1b91-f661-4a4e-9b31-f71565f2ab84",
        "tags" : [
        ]
      },
      {
        "id" : "c06312d7-83d4-4abc-9b61-b562a16c56ad",
        "parentId" : "2ae91095-f855-4f20-b117-821839595a9d",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "> Q: Does default work together with options, for cases where top-level arg is not supplied?\r\n\r\nyes\r\n\r\n> Is apply_defaults simply shorthand for a default of corresponding dict (in your example giving top_level a default=dict(second_level=True))?\r\n\r\nYes, effectively the goal here, is that a user should not have to duplicate default options from the suboptions, to allow this functionality to work.\r\n\r\nA future linting changing will ensure a module does not supply both `apply_defaults` and `default` together on the same argument.\r\n",
        "createdAt" : "2018-05-07T16:22:24Z",
        "updatedAt" : "2018-05-07T16:22:24Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "50c937ab70ba72dfbb0b6a802d204233f67f37ef",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +630,634 @@``apply_defaults`` works alongside ``options`` and allows the ``default`` of the sub-options to be applied even when the top-level argument is not supplied.\n\nIn the example of the ``argument_spec`` at the top of this section, it would allow ``module.params['top_level']['second_level']`` to be defined, even if the user does not provide ``top_level`` when calling the module.\n\nremoved_in_version"
  }
]