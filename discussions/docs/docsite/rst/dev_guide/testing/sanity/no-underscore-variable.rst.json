[
  {
    "id" : "485d4ecf-dadb-4eeb-b576-83eba6e5c922",
    "prId" : 27774,
    "prUrl" : "https://github.com/ansible/ansible/pull/27774#pullrequestreview-54732358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "162697de-53a8-4c6a-90c4-66044e05b747",
        "parentId" : null,
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "May want to mention cases where static checking tool complains about multiple uses of 'dummy'. Pylint will complain if 'dummy' is used in a scope, then a list comprehension in that scope uses 'dummy' as well'.\r\n\r\nie, something like:\r\n\r\n``` python\r\ndef foobar(the_stuff, misc=None):\r\n   stuff, dummy = parse_stuff(the_stuff)\r\n\r\n   filtered_stuff = [misc_thing for misc_thing, dummy in parse_misc_to_tuple(misc)]\r\n```\r\nIf we want to detail that case, and suggest an option (I just used '_dummy', but whatever we decide...).",
        "createdAt" : "2017-08-04T17:30:17Z",
        "updatedAt" : "2017-08-04T17:30:17Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "8d234e89-dc7e-41c0-8cfd-0b6f19b27f55",
        "parentId" : "162697de-53a8-4c6a-90c4-66044e05b747",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "I tested the following with pylint 1.7.2:\r\n```\r\ndef arigato():\r\n    return None, None, 'test'\r\n\r\ndef roboto():\r\n    dummy, dummy, msg = arigato()\r\n    filtered_stuff = [misc_thing for misc_thing, dummy in ((1, 2), (3, 4))]\r\n    print(msg)\r\n    return filtered_stuff\r\n\r\n\r\nif __name__ == '__main__':\r\n    roboto()\r\n```\r\n\r\nHere's the pylint messages:\r\n```\r\n$ pylint test.py                                        *[code-smell-_]  (21:47:51)\r\n************* Module abadger.test\r\nC0111:  1, 0: Missing module docstring (missing-docstring)\r\nC0111:  1, 0: Missing function docstring (missing-docstring)\r\nC0111:  4, 0: Missing function docstring (missing-docstring)\r\n```\r\n\r\nSo it looks like repeated use of dummy is okay.",
        "createdAt" : "2017-08-05T04:49:35Z",
        "updatedAt" : "2017-08-05T04:49:35Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "3df2f56c-6a9c-409e-b78e-abbe915c620e",
        "parentId" : "162697de-53a8-4c6a-90c4-66044e05b747",
        "authorId" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "body" : "ah, looking again it wasn't pylint showing the error, it was flake8.  (I have both turned on for my checkers)\r\n\r\n```\r\ndiff --git lib/ansible/parsing/vault/__init__.py lib/ansible/parsing/vault/__init__.py\r\nindex 9040cbf..47a066a 100644\r\n--- lib/ansible/parsing/vault/__init__.py\r\n+++ lib/ansible/parsing/vault/__init__.py\r\n@@ -526,7 +526,7 @@ class VaultLib:\r\n         # the known vault secrets.\r\n         if not C.DEFAULT_VAULT_ID_MATCH:\r\n             # Add all of the known vault_ids as candidates for decrypting a vault.\r\n-            vault_id_matchers.extend([_vault_id for _vault_id, _dummy in self.secrets if _vault_id != vault_id])\r\n+            vault_id_matchers.extend([_vault_id for _vault_id, dummy in self.secrets if _vault_id != vault_id])\r\n \r\n         matched_secrets = match_secrets(self.secrets, vault_id_matchers)\r\n \r\n[newswoop:F25:ansible (vault_pylint %)]$ flake8  lib/ansible/parsing/vault/__init__.py \r\nlib/ansible/parsing/vault/__init__.py:529:64: F812 list comprehension redefines 'dummy' from line 490\r\n```",
        "createdAt" : "2017-08-07T13:52:25Z",
        "updatedAt" : "2017-08-07T13:52:25Z",
        "lastEditedBy" : "fa0144fc-7424-474a-9ab5-059de28814b7",
        "tags" : [
        ]
      },
      {
        "id" : "0981736d-ddea-4ac6-8c2f-6fb6350c2758",
        "parentId" : "162697de-53a8-4c6a-90c4-66044e05b747",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Looks like flake8 (interestingly, seems like flake8 only; pep8 and pyflakes don't complain) is not treating any dummy/unused value specially here.  I tried ```dummy, _dummy, __, and _``` and all of them result in F182 with flake8.",
        "createdAt" : "2017-08-07T18:08:33Z",
        "updatedAt" : "2017-08-07T18:08:33Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      },
      {
        "id" : "20e0c2f5-c54d-496b-9ed0-f9ec111c2902",
        "parentId" : "162697de-53a8-4c6a-90c4-66044e05b747",
        "authorId" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "body" : "Given that last test, it doesn't look like information about this really belongs in no-underscore-variable.rst .  If someone is affected by this, they would already have hit it with ```_```.",
        "createdAt" : "2017-08-07T18:11:15Z",
        "updatedAt" : "2017-08-07T18:11:15Z",
        "lastEditedBy" : "838eb58c-0fa8-4742-994f-a407c7183e57",
        "tags" : [
        ]
      }
    ],
    "commit" : "33b5167ee9cafccba078a443a210c47551465c28",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@In common practice, ``_`` is frequently used as a dummy variable (a variable\nto receive a value from a function where the value is useless and never used).\nIn Ansible, we're using the identifier ``dummy`` for this purpose instead.\n\nExample of unfixed code:"
  }
]