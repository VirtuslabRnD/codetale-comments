[
  {
    "id" : "32fb0d36-d57a-4c6f-9243-34518fe17e8b",
    "prId" : 66389,
    "prUrl" : "https://github.com/ansible/ansible/pull/66389#pullrequestreview-351684229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ece7f06b-0eea-490b-8bdd-52d9105e4002",
        "parentId" : null,
        "authorId" : "659587dc-b401-4c91-aa40-a8a932100545",
        "body" : "Is there any way a module owner would know they used that ``add_file_common_args=True`` ?  And what happens to a user of one of those modules if the module owner doesn't make a code change in 2.10 to match this?",
        "createdAt" : "2020-01-31T17:17:50Z",
        "updatedAt" : "2020-01-31T17:17:50Z",
        "lastEditedBy" : "659587dc-b401-4c91-aa40-a8a932100545",
        "tags" : [
        ]
      },
      {
        "id" : "75bf6578-8ba0-44b1-bcac-03fc0adfdbcb",
        "parentId" : "ece7f06b-0eea-490b-8bdd-52d9105e4002",
        "authorId" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "body" : "Module owners explicitly have to set `add_file_common_args=True`, so they should know. For most modules using `add_file_common_args=True`, this should have absolutely no effect, since these parameters weren't documented and the sanity checks ignore them explicitly (i.e. essentially nobody knows that they are undocumented, and thus that they exist at all). It can happen in a few cases (like the ones I fixed in this PR) that modules forgot to declare some of these options by themselves, because \"it just worked\".\r\n\r\nThere are 29 modules in ansible/ansible which use this flag. These ones we can check manually (a lot of work, but not impossible), but if someone has a custom module which depends on one of these options, we can't really avoid this. But for this similar arguments as for the modules in ansible/ansible apply: this shouldn't affect most modules using `add_file_common_args=True`, and a huge majority of modules doesn't even use that.",
        "createdAt" : "2020-01-31T17:49:44Z",
        "updatedAt" : "2020-01-31T17:49:44Z",
        "lastEditedBy" : "d10c46ef-3d4c-4766-bd09-d27ec4674a84",
        "tags" : [
        ]
      },
      {
        "id" : "23951191-4beb-4102-85e0-505ac22b82e8",
        "parentId" : "ece7f06b-0eea-490b-8bdd-52d9105e4002",
        "authorId" : "659587dc-b401-4c91-aa40-a8a932100545",
        "body" : "ok thanks for the explanation!",
        "createdAt" : "2020-01-31T18:14:01Z",
        "updatedAt" : "2020-01-31T18:14:02Z",
        "lastEditedBy" : "659587dc-b401-4c91-aa40-a8a932100545",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a3787e2caf004638d560d272b924918bcf59111",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +93,97 @@-------------------------\n\n* Ansible modules created with ``add_file_common_args=True`` added a number of undocumented arguments which were mostly there to ease implementing certain action plugins. The undocumented arguments ``src``, ``follow``, ``force``, ``content``, ``backup``, ``remote_src``, ``regexp``, ``delimiter``, and ``directory_mode`` are now no longer added. Modules relying on these options to be added need to specify them by themselves.\n* :ref:`vmware_datastore_maintenancemode <vmware_datastore_maintenancemode_module>` now returns ``datastore_status`` instead of Ansible internal key ``results``.\n* :ref:`vmware_host_kernel_manager <vmware_host_kernel_manager_module>` now returns ``host_kernel_status`` instead of Ansible internal key ``results``."
  }
]