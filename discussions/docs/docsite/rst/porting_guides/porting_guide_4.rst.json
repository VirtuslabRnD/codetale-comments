[
  {
    "id" : "6816e64c-90f5-499a-ac3e-e75ca7fa73b0",
    "prId" : 74016,
    "prUrl" : "https://github.com/ansible/ansible/pull/74016#pullrequestreview-620000797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1532ee6f-fdff-4104-98b5-4b07e18477a7",
        "parentId" : null,
        "authorId" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "body" : "This is aimed at module developers/maintainers, right? I'd make this a bit clearer, so users can skip this entry with a higher degree of comfort. Maybe something liike:\r\n```suggestion\r\n* If your modules import python ``module_utils``, you may now mark the import as optional during the module payload build by wrapping the ``import`` statement in a ``try`` or ``if`` block. This allows modules to use ``module_utils`` that may not be present in all versions of Ansible or a collection, and to perform arbitrary recovery or fallback actions during module runtime.\r\n```",
        "createdAt" : "2021-03-24T15:37:49Z",
        "updatedAt" : "2021-03-24T15:50:18Z",
        "lastEditedBy" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "tags" : [
        ]
      },
      {
        "id" : "0b6991c8-b573-4eb7-9fa3-9e31c311b797",
        "parentId" : "1532ee6f-fdff-4104-98b5-4b07e18477a7",
        "authorId" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "body" : "I moved this content to https://github.com/ansible/ansible/pull/74021. ",
        "createdAt" : "2021-03-24T17:11:34Z",
        "updatedAt" : "2021-03-24T17:11:35Z",
        "lastEditedBy" : "0d301bd1-6b47-409f-ac92-439b799b2375",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ffae27033d3c2badb08fb20a82fe1a0162428a8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +37,41 @@  For example, `ANSIBLE_COLLECTIONS_ON_ANSIBLE_VERSION_MISMATCH=0` will now cause an error (valid choices are 'ignore', 'warn' or 'error').\n* The ``ansible-galaxy`` command now uses ``resolvelib`` for resolving dependencies. In most cases this should not make a user-facing difference beyond being more performant, but we note it here for posterity and completeness.\n* Python ``module_utils`` imports may now be marked as optional during the module payload build by wrapping the ``import`` statement in a ``try`` or ``if`` block. This allows modules to use ``module_utils`` that may not be present in all versions of Ansible or a collection, and to perform arbitrary recovery or fallback actions during module runtime.\n\n"
  }
]