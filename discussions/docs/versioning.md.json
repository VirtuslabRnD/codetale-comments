[
  {
    "id" : "f3a143d5-0f65-4461-9447-34dc5cf732eb",
    "prId" : 4833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59bb931e-7387-4e4c-865f-1285703c1438",
        "parentId" : null,
        "authorId" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "body" : "It's worth noting that Kube 2.0 will still include the v1 API.\n",
        "createdAt" : "2015-02-26T19:11:12Z",
        "updatedAt" : "2015-03-17T03:37:23Z",
        "lastEditedBy" : "7766e039-aa4c-4476-9091-5cc8763fa8d6",
        "tags" : [
        ]
      },
      {
        "id" : "c8967fce-109c-4564-95fb-753f28fc1d20",
        "parentId" : "59bb931e-7387-4e4c-865f-1285703c1438",
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Added.\n",
        "createdAt" : "2015-03-16T06:51:25Z",
        "updatedAt" : "2015-03-17T03:37:23Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      }
    ],
    "commit" : "373fc9656ac23143c37d6e0baa556e254be15c00",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@ * The first incarnation of a new (backwards-incompatible) API in HEAD is v2beta1. By default this will be unregistered in apiserver, so it can change freely. Once it is available by default in apiserver (which may not happen for several minor releases), it cannot change ever again because we serialize objects in versioned form, and we always need to be able to deserialize any objects that are saved in etcd, even between alpha versions. If further changes to v2beta1 need to be made, v2beta2 is created, and so on, in subsequent 1.x versions.\n* **Kube 1.y (where y is the last version of the 1.x series) must have final API v2**\n * Before Kube 2.0 is cut, API v2 must be released in 1.x. This enables two things: (1) users can upgrade to API v2 when running Kube 1.x and then switch over to Kube 2.x transparently, and (2) in the Kube 2.0 release itself we can cleanup and remove all API v2beta\\* versions because no one should have v2beta\\* objects left in their database. As mentioned above, tooling will exist to make sure there are no calls or references to a given API version anywhere inside someone's kube installation before someone upgrades.\n * Kube 2.0 must include the v1 API, but Kube 3.0 must include the v2 API only. It *may* include the v1 API as well if the burden is not high - this will be determined on a per-major-version basis.\n"
  }
]