[
  {
    "id" : "3cc98216-2616-41a7-9cf9-c184da9b3ac9",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I think putting `Timestamp` on the higher level objects is too constraining, and it should be attached to individual metrics. Reasons include:\n- We may collect metrics at varying intervals (e.g. more expensive metrics are collected less frequently). We already do this with some disk metrics and network metrics.\n- Containers have independent scrapers which scrape at different times.\n- If CustomMetrics were to make it into this API, they would certainly need different timestamps\n",
        "createdAt" : "2016-04-14T17:50:35Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "5822913a-37fa-4087-94ca-30b5b4102b3e",
        "parentId" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I strongly disagree with having `Timestamp` per metric. I can imagine it might make sense to have it per in `ContainerMetrics` (example needed) but in general I think we should have a consistent information about pod from some point in time. Especially if we want to make some aggregation on pod level (which HPA does) it totally doesn't make sense to have different timestamps per container.\n\n> Containers have independent scrapers which scrape at different times.\n\nIMO this is a bug not a feature.\n\nAlso the goal for this effort is to have some basic overview of resource usage. Not every metric has to included here, so hopefully we are able to align timestamps for the metrics supported here. \n",
        "createdAt" : "2016-04-14T19:24:02Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "591bb32c-b5cf-4065-9454-f2ab72e53006",
        "parentId" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "HPA does not aggregate across metrics right? As long as metrics are aligned for every resource, why does it matter to HPA?\n",
        "createdAt" : "2016-04-14T20:02:44Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ee67a334-ac35-4dbb-aa47-5f68770bcac7",
        "parentId" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "If we decide to have a top-level timestamp, we should at least make sure it's well-defined. Is it:\n- The time the response was generated at\n- The timestamp of the newest metric\n- The timestamp of the oldest metric\n- The average timestamp\n\n> > Containers have independent scrapers which scrape at different times.\n> \n> IMO this is a bug not a feature.\n\nIt's to avoid usage spikes at each housekeeping interval, the same reason Heapster polls each node at a different time.\n",
        "createdAt" : "2016-04-14T20:42:43Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "7e74b4bf-8113-4b13-af3b-2238e6d7ed26",
        "parentId" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I agree with Tim, at least you should add a comment explaining what timestamp and window mean.\n",
        "createdAt" : "2016-04-18T07:29:06Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "270b6145-b923-41f3-ab98-ab8bc232576f",
        "parentId" : "373873bb-9d17-4808-9c8d-1fe4b30eef98",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Added comment.\n\n> It's to avoid usage spikes at each housekeeping interval, the same reason Heapster polls each node at a different time.\n\nI know about it and I'm fine with it, although it's rather implementation imperfection and metrics inaccuracy that the feature itself.\n",
        "createdAt" : "2016-04-19T12:30:30Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +132,136 @@  // The following fields define time interval from which metrics were\n  // collected in the following format [Timestamp-Window, Timestamp].\n  Timestamp unversioned.Time\n  Window    unversioned.Duration\n"
  },
  {
    "id" : "ec0153c1-114d-476d-8476-266ee621ab51",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c01234b-b143-4732-b635-f2cb95990832",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "What does this field indicate? It sounds like it's specified as a request parameter, so why have it on every metric object rather than with the top-level response (or not at all)?\n",
        "createdAt" : "2016-04-14T17:51:41Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "a83e2ee8-084d-4876-85fa-0913f11a1d35",
        "parentId" : "6c01234b-b143-4732-b635-f2cb95990832",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "In the first version there won't be a support for the parameter. It will be added if we decide we need to support various window sizes. PodMetrics is actually a top level resource (this will be returned for request to `/namespaces/{namespace}/pods/{pod}`). I'm fine with not having this field however I think it's better user experience to have self-descriptive response especially when `window` param is not supported.\n",
        "createdAt" : "2016-04-14T18:51:22Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +133,137 @@  // collected in the following format [Timestamp-Window, Timestamp].\n  Timestamp unversioned.Time\n  Window    unversioned.Duration\n\n  // Metrics for all containers are collected within the same time window."
  },
  {
    "id" : "90f477db-aca3-4847-a0a5-67e426dae981",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4160809-0bef-4dad-8e12-2eff22335a94",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "Similar is already part of pkg/.../types.go:\n\n```\ntype ResourceName string\nconst (\n        // CPU, in cores. (500m = .5 cores)\n        ResourceCPU ResourceName = \"cpu\"\n        // Memory, in bytes. (500Gi = 500GiB = 500 * 1024 * 1024 * 1024)\n        ResourceMemory ResourceName = \"memory\"\n        // Volume size, in bytes (e,g. 5Gi = 5GiB = 5 * 1024 * 1024 * 1024)\n        ResourceStorage ResourceName = \"storage\"\n        // Number of Pods that may be running on this Node: see ResourcePods\n)\n```\n",
        "createdAt" : "2016-04-14T18:14:39Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "c94c0ba4-4bba-42d7-a6ff-aa2b13049fb1",
        "parentId" : "c4160809-0bef-4dad-8e12-2eff22335a94",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I know and I also like this type, however someone (@davidopp, @fgrzadkowski, @mwielgus?) has objections that maybe some day we would like to have a different set of keys here. Is this still current?\n",
        "createdAt" : "2016-04-14T18:30:04Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "29e3d702-fe9b-4a55-9b2b-8b50eee93076",
        "parentId" : "c4160809-0bef-4dad-8e12-2eff22335a94",
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "I was just pointing to that similar constants already exist, and you could reuse them. \n",
        "createdAt" : "2016-04-14T18:34:23Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "8e95e816-21f2-4691-8ebd-3a894e66ced8",
        "parentId" : "c4160809-0bef-4dad-8e12-2eff22335a94",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Reusing just constants doesn't make sense here. If we decide to reuse something we should reuse [ResourceList](https://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/types.go#L2194).\n",
        "createdAt" : "2016-04-14T19:50:04Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "a409aa1d-efb4-4086-bf02-68d50cea76d5",
        "parentId" : "c4160809-0bef-4dad-8e12-2eff22335a94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We generally do not reuse constants - we type them and keep them distinct\nfor better API descriptiveness.\n\nOn Apr 14, 2016, at 2:35 PM, Avesh Agarwal notifications@github.com wrote:\n\nIn docs/proposals/resource-metrics-api.md\nhttps://github.com/kubernetes/kubernetes/pull/24253#discussion_r59768572:\n\n> -  Timestamp unversioned.Time\n> -  Window    unversioned.Duration\n>   +\n> -  Containers []ContainerMetrics\n>   +}\n>   +\n>   +type ContainerMetrics struct {\n> -  Name  string\n> -  Usage map[ResourceType]Resource.Quantity\n>   +}\n>   +\n>   +type ResourceType string\n>   +const CpuResource ResourceType = \"cpu\"\n>   +const MemoryResource ResourceType = \"memory\"\n>   +const StorageResource ResourceType = \"storage\"\n>   +```\n\nI was just pointing to that similar constants already exist, and you could\nreuse them.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/24253/files/9f124139f4c4e9fe149075b1bef55824c7a2092f#r59768572\n",
        "createdAt" : "2016-04-15T14:06:51Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +145,149 @@  Usage v1.ResourceList\n}\n```\n\nBy default `Usage` is the mean from samples collected within the returned time window."
  },
  {
    "id" : "d1b6e324-8808-4dad-affe-e0eb47898a5d",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "Would be good to have a collective usage for pod too.\n",
        "createdAt" : "2016-04-14T18:45:28Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "581ff207-bfa8-4eb7-ae9a-90d0a96dadf0",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Yeah, this would make users' life easier. The question is how compatible with pod definition we want to be. Especially you don't request resource per pod but rather per container. @erictune WDYT?\n",
        "createdAt" : "2016-04-14T19:27:53Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "a223841c-024d-42b2-824e-e79787c42c25",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Why would you do usage per pod? Usage per pod is always sum of usage per container.\n",
        "createdAt" : "2016-04-18T07:23:31Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "086d3e30-0844-4cdd-889c-681133650f65",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "What @aveshagarwal means is to have it precomputed for easier usage, though I'm rather against here.\n",
        "createdAt" : "2016-04-19T11:28:15Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "e6b6d4ba-318a-4c59-bb2d-37d0d3c3b7a7",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If we later add volume resources, then it pod metrics would be sum of container and volume metrics for the pod.  So, if we plan to add volume later, it might be better to add Pod metrics here, so that when we add volume accounting, users who use Pod metrics immediately see this new usage. OTOH, it might be breaking for users to change the Pod accounting.  So maybe better to not add it until we are sure what it will contain.\n\nAlso, if we later add 95th as an aggregation, the user cannot compute this herself.  The kubelet has to do that.  So, if 95th, or other non-user-computable aggregations are needed, then I agree we will need a PodMetrics.  However, I am fine with leaving those out of the MVP until we have a stronger use case.\n",
        "createdAt" : "2016-04-25T20:50:33Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "d7f5003d-28ee-4614-b3c0-731c25b15936",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "SGTM\n",
        "createdAt" : "2016-04-26T09:38:26Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "ece835c5-acd2-47c4-85f1-ad66320b99e5",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "body" : "What do you mean by adding \"95th as an aggregation\"? I'm unsure why the users can't compute that. And if we do want to start offering aggregated stats, then we should serve a distribution (e.g., f(x)) rather than a specific value (e.g., f(0.95)).\n",
        "createdAt" : "2016-05-03T23:31:23Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "tags" : [
        ]
      },
      {
        "id" : "dc8ddd8a-02e1-4195-b451-b51d26920770",
        "parentId" : "5b74c237-dfb9-4643-aece-0be1ed15fa2c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "This is one of possibilities to to provide a distribution, however this is out of the scope of MVP so let's do not discuss it right now.\n",
        "createdAt" : "2016-05-04T13:59:46Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +137,141 @@  // Metrics for all containers are collected within the same time window.\n  Containers []ContainerMetrics\n}\n\ntype ContainerMetrics struct {"
  },
  {
    "id" : "e8ef6f99-f620-462c-9f49-51f543a7bd7b",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "If pod metrics is an aggregate of all of its container metrics, Is it possible to describe similarly what are the different constituents of a node metrics? Or how is computed just as a whole or by taking aggregation of various different metrics, if the later what are those?\n",
        "createdAt" : "2016-04-14T18:57:49Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "3413dc41-e632-4c64-8654-af29d650ef07",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "It definitely has to to be clarified. The question is what does scheduler expect to get. @davidopp for clarifying the scheduler needs.\n",
        "createdAt" : "2016-04-14T19:30:07Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "90b7c543-a8d8-4a36-a907-a9834adc8cb1",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Actually it might make sense to have both, though we don't have a use case for both yet.\n",
        "createdAt" : "2016-04-14T19:30:51Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "68469ff3-6e9f-4ea0-8cf5-5f005c307563",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "IIUC the question is: is there any difference between the sum over all ContainerMetrics on a node, and the value reported by NodeMetrics? And if so, should we expose the constituents of that difference explicitly? (I actually don't know the answer to the question, if that is the question. But I assume docker daemon and kubelet usage count in NodeMetrics but aren't represented in ContainerMetrics.)\n",
        "createdAt" : "2016-04-15T08:06:05Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1031d2ea-ec92-41e6-9cca-25b9d13a1daf",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "@davidopp yes, you understand the problem correctly. What we are exposing currently as a node usage is containers usage + system overhead + docker + kubelet + kube-proxy. The question is whether we should change it to just containers usage, which might be in line with what scheduler expects, especially in context we want to support [Allocatable](https://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/types.go#L2094) feature.\n\n@dchen1107 any thoughts?\n",
        "createdAt" : "2016-04-15T11:27:10Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "1a1cb3e7-55f5-40cd-b303-e04f9766bed3",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "in a separate email, @piosz asked:\n\n> How should we account CPU usage on node level?\n> \n> AFAIU the code, currently in stats summary API we export just the cpu usage of the whole node. > On the other hand from scheduler perspective it might make sense to use the sum of cpu usage of all pods running on the machine especially assuming we will start supporting Allocatable feature.\n> \n> Technically as for now there is no difference. There is aggregating logic already implemented in Heapster so adding yet another metric to aggregate is a 2-lines change.\n\nIf the scheduler is just using a \"least loaded\" heuristic for spreading work, then whole node cpu usage is sufficient.   It is just a rough heuristic, so we should do the simplest thing, I think.\n\nRegarding unaccounted cpu usage: If some node has a bunch of CPU usage that is not accounted to any container, (e.g. kernel threads or processes in root cpu cgroup), we still want to avoid that node.  \n",
        "createdAt" : "2016-04-15T16:30:09Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "d7b8cfd9-d72e-41cd-a56f-fd0e22e5e176",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "+1 to what @erictune said. NodeMetrics should report overall for node, including stuff that isn't in ContainerMetrics.\n",
        "createdAt" : "2016-04-15T20:46:09Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "b960f3f7-0f7f-435a-9698-4aef6d16db90",
        "parentId" : "91668a0f-33a0-487d-99f6-488309e7de03",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "SGTM, thanks for the clarification.\n",
        "createdAt" : "2016-04-19T11:29:58Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +125,129 @@  Usage v1.ResourceList\n}\n\ntype PodMetrics struct {\n  unversioned.TypeMeta"
  },
  {
    "id" : "15f2c697-134a-48a1-a82e-88919bb863ff",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6b652ba-b94f-4c89-9472-104dad41f6e7",
        "parentId" : null,
        "authorId" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "body" : "Containers sounds confusing, how about containerUsageList or containerMetricsList or may be something else.\n",
        "createdAt" : "2016-04-14T19:39:20Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6252ac4b-6b9e-4dee-8931-ca3b934d52fc",
        "tags" : [
        ]
      },
      {
        "id" : "18d94202-c733-445c-92f5-fa23bce3d8d9",
        "parentId" : "c6b652ba-b94f-4c89-9472-104dad41f6e7",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "@erictune WDYT?\n",
        "createdAt" : "2016-04-15T11:30:22Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@\n  // Metrics for all containers are collected within the same time window.\n  Containers []ContainerMetrics\n}\n"
  },
  {
    "id" : "7c57904a-601f-42e3-a3ee-d73cf58b5bd3",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b36becc1-2e5a-498b-9a61-501091080c6e",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Will watch be ever supported? Polling requires clients to poll with a period lesser than the minimum resolution in-order to not miss metrics.\n",
        "createdAt" : "2016-04-14T19:57:30Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ba798f66-c6f5-4389-a137-ed84592c282b",
        "parentId" : "b36becc1-2e5a-498b-9a61-501091080c6e",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Support for watch is definitely a good idea and I think eventually we will add it, although it doesn't add much value (metrics will change very frequently) so there won't be a support for the watch in the first version.\n",
        "createdAt" : "2016-04-15T11:36:42Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "0a0ee0ac-91ad-4839-9aba-3c8063198011",
        "parentId" : "b36becc1-2e5a-498b-9a61-501091080c6e",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Got it. Would it make sense to mention the future plans in the proposal?\n",
        "createdAt" : "2016-04-15T20:47:55Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "1a5eb7e1-ad34-468d-a457-4288033613c4",
        "parentId" : "b36becc1-2e5a-498b-9a61-501091080c6e",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Definitely yes. I'll add a paragraph.\n",
        "createdAt" : "2016-04-19T11:30:48Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@\nAll endpoints are GET endpoints, rooted at `/apis/metrics/v1alpha1/`.\nThere won't be support for the other REST methods.\n\nThe list of supported endpoints:"
  },
  {
    "id" : "fb8d6001-670e-4975-8b7a-763f74005cb2",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7176f245-4ccd-4197-a377-25a28776baeb",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Why not wrap these fields in a sub-structure that makes it easy to add more windows in the future?\n\n``` go\ntype Sample struct {\nTimestamp unversioned.Time\nWindow    unversioned.Duration\nUsage map[ResourceType]Resource.Quantity\n}\n\ntype NodeMetrics struct {\n   unversioned.TypeMeta\n   ObjectMeta\n   Samples []Sample\n}\n```\n",
        "createdAt" : "2016-04-14T20:01:24Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "f238bad5-e98f-464c-9ae0-1e20d6b2147a",
        "parentId" : "7176f245-4ccd-4197-a377-25a28776baeb",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "The current proposal is to have `window` as a parameter so by definition you won't be able to return metrics from multiple windows in one response. \n",
        "createdAt" : "2016-04-15T11:32:48Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "f6a17a39-5652-4202-aa29-47e7caf0e6b1",
        "parentId" : "7176f245-4ccd-4197-a377-25a28776baeb",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Ahh makes sense.. In that case, what is the purpose of including this field?\n",
        "createdAt" : "2016-04-15T20:44:34Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "1e99da15-13a7-4b89-9cad-a91659918a20",
        "parentId" : "7176f245-4ccd-4197-a377-25a28776baeb",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "To make response self-descriptive. I won't fight for having it though I found it usable. See also https://github.com/kubernetes/kubernetes/pull/24253#discussion_r59771187\n",
        "createdAt" : "2016-04-19T11:32:16Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +119,123 @@  // The following fields define time interval from which metrics were\n  // collected in the following format [Timestamp-Window, Timestamp].\n  Timestamp unversioned.Time\n  Window    unversioned.Duration\n"
  },
  {
    "id" : "c6474d66-509e-4b00-8f21-f955831673e6",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7961e78-2535-4990-93c1-bdd25970f08b",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add some comment that this is something the scheduler will do in the future, but not yet.\n",
        "createdAt" : "2016-04-18T07:13:37Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "28369cf6-e1ec-4d24-b1b6-d8b57be425de",
        "parentId" : "b7961e78-2535-4990-93c1-bdd25970f08b",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2016-04-19T11:38:15Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@#### Scheduler\n\nScheduler in order to schedule best-effort pods requires node level resource usage metrics\nas an average aggreated across 1 minute (the window may change in the future).\nThe metrics should be available for all resources supported in the scheduler."
  },
  {
    "id" : "21fae34c-e036-4d1b-9741-f57433d0f846",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf29bb70-5f56-4948-ad27-861e4c7464c9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Why would you have them in different API groups instead of using the paths you listed at the end of the doc?\n",
        "createdAt" : "2016-04-18T07:16:11Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "dfea6dd3-5ee2-4102-9706-1eac073ba051",
        "parentId" : "cf29bb70-5f56-4948-ad27-861e4c7464c9",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "This is explained by @erictune in https://github.com/kubernetes/kubernetes/pull/18824#discussion_r49902002\n",
        "createdAt" : "2016-04-19T12:09:33Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "f68396fc-fdff-4606-afcd-3296320bf5a3",
        "parentId" : "cf29bb70-5f56-4948-ad27-861e4c7464c9",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I see. Yeah, I don't think it's necessary to put them in separate groups now.\n",
        "createdAt" : "2016-04-21T23:34:07Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "5950a445-b8ba-4d69-8413-7cc49dec4285",
        "parentId" : "cf29bb70-5f56-4948-ad27-861e4c7464c9",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "This is what I meant here.\n",
        "createdAt" : "2016-04-22T13:57:09Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\nInitially the metrics API will be in a separate [API group](api-group.md) called ```metrics```.\nLater if we decided to have Node and Pod in different API groups also\nNodeMetrics and PodMetrics should be in different API groups.\n"
  },
  {
    "id" : "fbd7f97e-c1a0-49de-9228-dc3cad72b738",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "753a6fd1-8d75-4834-ba27-66b065e35246",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I would rewrite this whole section as \"Ubernetes might want to consider cluster-level usage (in addition to cluster-level request) of running pods when choosing where to schedule new pods. Although Ubernetes is still in design, we expect the metrics API described here to be sufficient. Cluster-level usage can be obtained by summing over usage of all nodes in the cluster.\"\n",
        "createdAt" : "2016-04-21T23:31:03Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "ab825d22-5be3-4b1a-9e78-d8fcf521285c",
        "parentId" : "753a6fd1-8d75-4834-ba27-66b065e35246",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2016-04-22T13:56:03Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +77,81 @@available in API server so the use case initially won't be supported.\n\n#### Ubernetes\n\nUbernetes might want to consider cluster-level usage (in addition to cluster-level request)"
  },
  {
    "id" : "1cdd0046-36e8-4223-b39d-864cea5fee84",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc03aed5-970d-4d66-9627-b9d55fdc4af6",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "In that case, remove the old proposal?\n",
        "createdAt" : "2016-04-25T20:41:36Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "0d6664ff-29ae-4fec-904e-0ddb94836ff7",
        "parentId" : "bc03aed5-970d-4d66-9627-b9d55fdc4af6",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I'll do it once we will merge this one.\n",
        "createdAt" : "2016-04-26T08:42:12Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@# Resource Metrics API\n\n*This proposal is based on and supersedes [compute-resource-metrics-api.md](compute-resource-metrics-api.md).*\n\nThis document describes API part of MVP version of Resource Metrics API effort in Kubernetes."
  },
  {
    "id" : "237872d4-2f58-40ef-b301-7fe1cae6137c",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Where will you define exactly how Usage is measured for each resource?  For example, is memory usage working-set or something else?  It seems like this definition should be part of the API (at least as comments). \n",
        "createdAt" : "2016-04-25T20:42:37Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "617d6be6-8131-4776-b72b-5ba4077db094",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "As for now it's total memory in use. I agree it should be documented.\n\nAlso I think it should be consistent with what Kubelet uses right now (or at least is planning to use in the future) to account resource usage. Especially user experience should be as follow:\n- a user specifies memory request for a container to 200MB\n- in Metrics API the container usage is 190MB\n- the container started using a little bit more memory\n- Kubelet under high memory pressure decided to kill the container due to OOM\n\n@dchen1107, @timstclair could you please explain which kind of memory usage Kubelet uses?\n",
        "createdAt" : "2016-04-26T09:45:18Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "1a95cc15-4727-434c-a794-a5168c20b8b5",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I'm not sure what you mean by \"which kind of memory usage Kubelet uses\". Admission is based on request, and currently we don't do any eviction (the [proposal](https://github.com/kubernetes/kubernetes/pull/18724) doesn't define what memory usage is). The [stats API](https://github.com/kubernetes/kubernetes/blob/3b09c64161744deb675b61624e668f2bc387c81c/pkg/kubelet/api/v1alpha1/stats/types.go#L138) has multiple fields describing memory.\n",
        "createdAt" : "2016-04-26T23:31:20Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "ce0a35c8-970b-446f-ac2b-3d08df2b6871",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "For eviction, the proposal is using `memory.available` which I recently added to the stats API.\n\nIt's defined as `memory limit - workingSetBytes` , so for purposes of node eviction, its `memory.available = memory.capacity - workingSetBytes`\n\nWe will block best effort pods in admission if the eviction threshold for memory.available has fallen below a operator specified value, we will update a node condition like `MemoryPressure` when the node is in that state.\n",
        "createdAt" : "2016-04-27T03:27:57Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "b35a2787-77ec-4dcd-8501-a4602461ea8a",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "So, then Usage should be workingSetBytes?  If we all agree on that, let's document it?\n",
        "createdAt" : "2016-04-29T07:25:45Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "fbd3cd17-4c7f-4bfa-838b-67f1c937d339",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "body" : "The stats objects are more complete. Why not just use them instead?\n",
        "createdAt" : "2016-05-03T23:28:14Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6c7e5fb3-9a32-484a-be21-c70b4d00de52",
        "tags" : [
        ]
      },
      {
        "id" : "ee0d1d18-2025-4171-87e5-101128a9df69",
        "parentId" : "addab509-4b07-4ba0-b169-5264ee77d2da",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "@timstclair thanks for the info. What I meant here is exactly what is not defined in the proposal, but as @derekwaynecarr wrote it's working set.\n\n@erictune it seems we all agree here, so I'll add an appropriate comment.\n\n@Q-Lee I agree that we can provide more info. The question is whether we want to do it. As for now it's out of the scope of the MVP and all more specific metrics are available in Heapster/InfluxDB\n",
        "createdAt" : "2016-05-04T14:31:52Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +123,127 @@\n  // The memory usage is the memory working set.\n  Usage v1.ResourceList\n}\n"
  },
  {
    "id" : "4b66ec7e-e9a3-4677-bc53-ad7017abdc54",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10036cb9-68f2-49b3-9ef1-9b6e6fe0c95e",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is window free to vary from response to response for the same node or the same pod, over time?\n",
        "createdAt" : "2016-04-25T20:56:51Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "81b15837-988c-455a-94c4-b3ad34880cca",
        "parentId" : "10036cb9-68f2-49b3-9ef1-9b6e6fe0c95e",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "By default the windows will be set to 1minute. In the future once we will add support for window parameter this will have various values depending on the request. This field is somehow redundant and I'm ok with removing it though I think it's better user experience when the response is self-descriptive especially in the default case. See also https://github.com/kubernetes/kubernetes/pull/24253#discussion_r59771187\n",
        "createdAt" : "2016-04-26T10:19:08Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@  // collected in the following format [Timestamp-Window, Timestamp].\n  Timestamp unversioned.Time\n  Window    unversioned.Duration\n\n  // The memory usage is the memory working set."
  },
  {
    "id" : "9641784d-1d52-4f2b-a024-d2700e539592",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "901071cd-8b8e-4b00-9076-a7a70d873a91",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "This seems to be implying that all containers of the same Pod are measured at the same Timestamp and Window?  Is that correct?\n",
        "createdAt" : "2016-04-25T20:57:44Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "a731d14e-3d81-43ac-956a-fe3358c7606f",
        "parentId" : "901071cd-8b8e-4b00-9076-a7a70d873a91",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Yes. If we want to make any reasonable aggregation on pod level (which for example HPA does) it's hard requirement.\n",
        "createdAt" : "2016-04-26T09:52:31Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "707399b7-f92a-45d3-a47b-e2e6f6a211ee",
        "parentId" : "901071cd-8b8e-4b00-9076-a7a70d873a91",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Agree.  Document in the comments of the type.\n",
        "createdAt" : "2016-04-29T07:29:22Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "767845a8-f594-4ec0-84c0-cbc6921da9da",
        "parentId" : "901071cd-8b8e-4b00-9076-a7a70d873a91",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2016-05-04T15:32:12Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +133,137 @@  // collected in the following format [Timestamp-Window, Timestamp].\n  Timestamp unversioned.Time\n  Window    unversioned.Duration\n\n  // Metrics for all containers are collected within the same time window."
  },
  {
    "id" : "79eb6e37-f3fc-4932-b1cc-10b7185fec0d",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54c61811-c149-4bca-9cf5-3a27c824345b",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "What keys can I expect to find in this map, or are there no guarantees?\n",
        "createdAt" : "2016-04-25T21:01:13Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "88172a84-7dc9-4bb7-859b-6c471ea6bcef",
        "parentId" : "54c61811-c149-4bca-9cf5-3a27c824345b",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Either 'everything we have' (if we collected only memory, we will return only memory) or 'all or nothing' (if we collected only memory, we will respond with 404). I don't have strong opinion which one is better. WDYT?\n",
        "createdAt" : "2016-04-26T10:13:39Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "cb9d04cb-bfba-4eac-a6ea-368d72c0dad3",
        "parentId" : "54c61811-c149-4bca-9cf5-3a27c824345b",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "not sure.\n",
        "createdAt" : "2016-04-29T07:34:35Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : null,
    "diffHunk" : "@@ -1,1 +143,147 @@  Name string\n  // The memory usage is the memory working set.\n  Usage v1.ResourceList\n}\n```"
  },
  {
    "id" : "2667996c-8427-4036-a052-6de145b6bd2d",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3f95012-4800-43dd-980c-de625b398a7c",
        "parentId" : null,
        "authorId" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "body" : "Nitpicking: for cluster-wide rank statistics such as 95th and 99th percentile, and people will want them, you can't compute those from pre-aggregated data. Think of the case where you look at the max over a window of one hour and a large RC/RS moves from one set of machines to another: it will be counted twice. (You also need to decide whether it's cluster-wide, but computed at the container, pod or node level... most likely people will want the last two.) One way to approximate this would be computing something like Q-digests or t-digests from data streamed from PodMetrics (not node data). Unless you only want to support instantaneous usage, the last sentence is misleading.\n",
        "createdAt" : "2016-04-25T21:58:57Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "11725e10-43c9-4a8c-96d0-5118a3e67a6a",
        "tags" : [
        ]
      },
      {
        "id" : "ae117500-e8ab-470a-8cde-c100142e2cb7",
        "parentId" : "a3f95012-4800-43dd-980c-de625b398a7c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I agree. In the future we may want to introduce also aggregations on a cluster level though as for now there is no use case for it. I added it to Further improvements section.\n",
        "createdAt" : "2016-04-26T10:22:00Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@of running pods when choosing where to schedule new pods. Although Ubernetes is still in design,\nwe expect the metrics API described here to be sufficient. Cluster-level usage can be\nobtained by summing over usage of all nodes in the cluster.\n\n#### kubectl top"
  },
  {
    "id" : "97851e20-8d9f-47fe-9f4d-bfc7969e322b",
    "prId" : 24253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d71f7bd-799b-4935-9243-f7a8b5d02c1c",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I plan to add a new node condition as part of https://github.com/kubernetes/kubernetes/pull/18724 that could be used as a signal to the scheduler for it to not place additional best effort pods on a node.  If a machine's available memory falls below the specified threshold, the node will report a `MemoryPressure` node condition of true, and it will block all incoming best effort pods from running in `kubelet` admission flow.\n",
        "createdAt" : "2016-04-27T03:20:56Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "6fbc0960-0b21-4c50-9725-d542278c1bc1",
        "parentId" : "4d71f7bd-799b-4935-9243-f7a8b5d02c1c",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Thanks for the explanation.\n",
        "createdAt" : "2016-05-04T15:35:51Z",
        "updatedAt" : "2016-05-05T06:57:50Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3f43cc4c3240554dec34d4b1eed788394693788",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@as an average aggreated across 1 minute (the window may change in the future).\nThe metrics should be available for all resources supported in the scheduler.\nCurrently the scheduler does not need this information, because it schedules best-effort pods\nwithout considering node usage. But having the metrics available in the API server is a blocker\nfor adding the ability to take node usage into account when scheduling best-effort pods."
  }
]