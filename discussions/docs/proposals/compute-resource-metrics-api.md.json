[
  {
    "id" : "35ccb1f0-d4e8-4884-8d16-383e02debcbb",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "757f4cd1-f6d2-4357-bf04-f00f5c48a11f",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "Can we document here the difference between /nodes and /derivedNodes? Same for /pods?\n\nFrom the document, i cannot see any difference. \n",
        "createdAt" : "2015-10-22T23:34:02Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "0aab3436-7263-4344-84b6-6d81af6f4c16",
        "parentId" : "757f4cd1-f6d2-4357-bf04-f00f5c48a11f",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Done.\n",
        "createdAt" : "2015-10-23T00:11:42Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +96,100 @@  - `/rawNodes/localhost` - The only node provided is `localhost`; type\n    metrics.Node\n- `/derivedNodes` - host metrics; type `[]metrics.DerivedNode`\n  - `/nodes/{node}` - derived metrics for a specific node\n- `/rawPods` - All raw pod metrics across all namespaces; type"
  },
  {
    "id" : "3ce82b5e-8559-4381-9ccd-d978b4ff389d",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "837b6d73-289d-4005-b00a-a674376f3766",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Can you educate me with an example response with this query parameter @timstclair ?\n",
        "createdAt" : "2015-10-22T23:39:33Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "26b4d6aa-f2ed-42da-8e24-f65ee769ce82",
        "parentId" : "837b6d73-289d-4005-b00a-a674376f3766",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I think most of our get endpoints have this parameter, so I included it here. It's basically whether to format the response json with whitespace to be more human readable. If you query the API in browser, I think it defaults to true - try adding `?pretty=false` to see it off.\n",
        "createdAt" : "2015-10-23T00:13:03Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +127,131 @@As well as the common query parameters:\n\n- `pretty` - pretty print the response\n- `labelSelector` - restrict the list of returned objects by labels (list endpoints only)\n- `fieldSelector` - restrict the list of returned objects by fields (list endpoints only)"
  },
  {
    "id" : "f4acbbb0-cd79-45da-8143-069d4dde6c40",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "IIUC, in the near-term, the API server will expose a subset of the APIs that the kubelet will expose. To start with, the API server and kubelet metrics APIs will be mutually exclusive. \n",
        "createdAt" : "2015-10-22T23:57:59Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "ad919f02-d106-42b0-8b47-09d8e13f10d9",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Thinking more about this, I'm worried that this will get confusing, especially if the API server and kubelet APIs diverge any more. I almost wonder if we want separate api groups for each (e.g. `kubelet-metrics`, or maybe just `kubelet` or `node`). On the one hand, we want consistency so keeping them together makes sense, on the other hand it should be clear which is served by which component. Separate groups also prevents reuse of common types across the APIs. Another option would be to prefix kubelet-only types with \"kubelet\" (e.g. s/pods/kubeletPods/), but this could get messy if we decide to start serving them at the cluster level.\n\nThoughts?\n",
        "createdAt" : "2015-10-23T00:18:13Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "17b602dc-79f6-459e-8d70-3fa6e9d6af33",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "In the future, I can see kubelet might exposing `derived` metrics, which will help us scale heapster as well. I don't see why we will have two types if the versions match in that case.\n\nPerhaps, we can state the general APIs in the beginning, and then explicitly state which component will be exposing these APIs?\n",
        "createdAt" : "2015-10-23T00:24:17Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "cd8610a8-e3b4-49f7-9fb4-7dff3d764c4d",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Do you mean in the documentation?\n",
        "createdAt" : "2015-10-23T00:26:43Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "f5b8359e-0096-4d42-ac67-8add7248406c",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This comment has now been suppressed by the recent rebase :(\n\nYeah. I mean better documentation could satisfy my concerns. But in general, if we have a need for diverging the data format between the kubelet and api-server, we might have to abandon this idea. Since this is versioned and we are starting in an `alpha` phase, I'd say lets roll with the current proposal, with better documentation. WDYT?\n",
        "createdAt" : "2015-10-23T00:30:57Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "8edea737-82c2-4619-b03b-83e9f846d6b8",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Ok, works for me.\n\nFor future reference, if I make changes in separate commits (don't squash) does it prevent github from collapsing comment threads?\n",
        "createdAt" : "2015-10-23T00:34:47Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "356c5764-ee16-4101-b4a9-f1d2df291bdc",
        "parentId" : "fa9ee9a8-2560-4142-a6a4-08cb4ccbd511",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Yeah. Multiple commits followed by a squash after LGTM is the recommended\napproach for PRs that have lots of comments.\n\nOn Thu, Oct 22, 2015 at 5:35 PM, Tim St. Clair notifications@github.com\nwrote:\n\n> In docs/proposals/compute-resource-metrics-api.md\n> https://github.com/kubernetes/kubernetes/pull/15862#discussion_r42823261\n> :\n> \n> > @@ -35,15 +35,31 @@ Documentation for other releases can be found at\n> > \n> >  ## Goals\n> > \n> > -Provide resource usage metrics on pods and nodes on the API server to be used\n> > -by the scheduler to improve job placement, utilization, etc. and by end users\n> > -to understand the resource utilization of their jobs. Horizontal and vertical\n> > -auto-scaling are also near-term uses.\n> > +Provide resource usage metrics on pods and nodes through the API server to be\n> > +used by the scheduler to improve job placement, utilization, etc. and by end\n> > +users to understand the resource utilization of their jobs. Horizontal and\n> > +vertical auto-scaling are also near-term uses. Additionally, a subset of the\n> \n> Ok, works for me.\n> \n> For future reference, if I make changes in separate commits (don't squash)\n> does it prevent github from collapsing comment threads?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15862/files#r42823261.\n",
        "createdAt" : "2015-10-23T00:43:54Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@used by the scheduler to improve pod placement, utilization, etc. and by end\nusers to understand the resource utilization of their jobs. Horizontal and\nvertical auto-scaling are also near-term uses. Additionally, a subset of the\nmetrics API should be served directly from the kubelet.\n"
  },
  {
    "id" : "082fa303-f774-49db-aabf-d4ae2f8f0dd0",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "428e3a32-d72c-4770-95f1-c7ceb54d2c44",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "AFAIK, we do not have a plan to surface raw metrics via the API server. This proposal does not seem to state that explicitly. May be we want to propose the API group as a common entity and then split the proposal into api-server specific and kubelet specific sections?\n",
        "createdAt" : "2015-10-23T00:00:44Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "9d18680b-cf81-449b-847d-920737be779a",
        "parentId" : "428e3a32-d72c-4770-95f1-c7ceb54d2c44",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "See above comment.\n",
        "createdAt" : "2015-10-23T00:18:49Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "6acb2846-eb2c-4077-a5c5-195cdb2ecf2c",
        "parentId" : "428e3a32-d72c-4770-95f1-c7ceb54d2c44",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "This goes back to an early question of whether we want the \"raw\" metrics to be the default (unprefixed) type. If they're not being exposed at the cluster level, I think it makes this more of an issue. I think we should add back the \"raw\" prefix.\n",
        "createdAt" : "2015-10-23T00:36:26Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "dd6766ec-328c-45d8-9450-01717adf0709",
        "parentId" : "428e3a32-d72c-4770-95f1-c7ceb54d2c44",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1\n\nOn Thu, Oct 22, 2015 at 5:36 PM, Tim St. Clair notifications@github.com\nwrote:\n\n> In docs/proposals/compute-resource-metrics-api.md\n> https://github.com/kubernetes/kubernetes/pull/15862#discussion_r42823357\n> :\n> \n> > @@ -35,15 +35,31 @@ Documentation for other releases can be found at\n> > \n> >  ## Goals\n> > \n> > -Provide resource usage metrics on pods and nodes on the API server to be used\n> > -by the scheduler to improve job placement, utilization, etc. and by end users\n> > -to understand the resource utilization of their jobs. Horizontal and vertical\n> > -auto-scaling are also near-term uses.\n> > +Provide resource usage metrics on pods and nodes through the API server to be\n> > +used by the scheduler to improve job placement, utilization, etc. and by end\n> > +users to understand the resource utilization of their jobs. Horizontal and\n> > +vertical auto-scaling are also near-term uses. Additionally, a subset of the\n> > +metrics API should be served directly from the kubelet.\n> > +\n> > +### API Requirements\n> > +\n> > +- Provide machine level metrics, all pod metrics (in single request), specific\n> \n> This goes back to an early question of whether we want the \"raw\" metrics\n> to be the default (unprefixed) type. If they're not being exposed at the\n> cluster level, I think it makes this more of an issue. I think we should\n> add back the \"raw\" prefix.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15862/files#r42823357.\n",
        "createdAt" : "2015-10-23T00:44:13Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6dbcc40f-8562-4d72-9db7-6584aff23645",
        "parentId" : "428e3a32-d72c-4770-95f1-c7ceb54d2c44",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Done.\n",
        "createdAt" : "2015-10-23T00:55:52Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +44,48 @@### API Requirements\n\n- Provide machine level metrics, all pod metrics (in single request), specific\n  pod metrics\n- Ability to authenticate machine & pod metrics independently from each other"
  },
  {
    "id" : "4fbd4a81-3a50-4c77-a857-819de3cd1787",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f04cafd6-1df0-405c-944a-82c2c1ac9f2e",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nit: Should we include `type ContainerStats cadvisorv2.ContainerStats` for the sake of completeness?\n",
        "createdAt" : "2015-10-23T00:03:36Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "2bd3d0e4-6c3e-44a3-a75d-3fbd2a1fb54a",
        "parentId" : "f04cafd6-1df0-405c-944a-82c2c1ac9f2e",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "I was trying to avoid copying the entire cadvisor API here. Is it useful to add one more level of depth here? For now I'll just add a link to the cadvisor API.\n",
        "createdAt" : "2015-10-23T00:20:13Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "5dc04ac1-d1df-490d-9531-31f03b99fe43",
        "parentId" : "f04cafd6-1df0-405c-944a-82c2c1ac9f2e",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "SGTM\n",
        "createdAt" : "2015-10-23T00:24:35Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +166,170 @@  ObjectMeta              // Should include container name\n  Spec ContainerSpec      // Mirrors cadvisorv2.ContainerSpec\n  Stats []ContainerStats  // Mirrors cadvisorv2.ContainerStats\n}\n"
  },
  {
    "id" : "808628dc-935f-432e-ad8b-f71509674ec9",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7c946b0-8673-4a15-b346-cad0e6d800f6",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should we mention that step is calculated from the timestamp of the metric point closest to `start`?\n\nEssentially `start` and `end` might not map directly to metrics timestamps.\n",
        "createdAt" : "2015-10-23T00:05:28Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "163b56ab-e832-46e3-bac6-91516a8c3379",
        "parentId" : "a7c946b0-8673-4a15-b346-cad0e6d800f6",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Added note under `start`\n",
        "createdAt" : "2015-10-23T00:25:00Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +120,124 @@  sample after the start time is the actual beginning.\n- `end` - end time to return metrics to; type json encoded `time.Time`\n- `step` - the time step between each stats sample; type int (seconds), default\n  10s, must be a multiple of 10s\n- `count` - maximum number of stats to return in each ContainerMetrics instance;"
  },
  {
    "id" : "578d2cbb-4f83-4de9-853b-3664c6c662fc",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dda610f-b885-485d-b90f-3768b6c65a2d",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Why is this necessary? @piosz @mwielgus \n",
        "createdAt" : "2015-10-23T00:24:59Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@- `step` - the time step between each stats sample; type int (seconds), default\n  10s, must be a multiple of 10s\n- `count` - maximum number of stats to return in each ContainerMetrics instance;\n  type int\n"
  },
  {
    "id" : "94a1680c-368d-40d9-862c-530549419e8d",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b94e8ef-679f-4210-82eb-034df72eb681",
        "parentId" : null,
        "authorId" : "6cc3c868-173f-40ea-8728-da5974495fb9",
        "body" : "`derivedNodes`\n",
        "createdAt" : "2015-10-24T19:06:10Z",
        "updatedAt" : "2015-10-27T22:05:14Z",
        "lastEditedBy" : "6cc3c868-173f-40ea-8728-da5974495fb9",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +97,101 @@    metrics.Node\n- `/derivedNodes` - host metrics; type `[]metrics.DerivedNode`\n  - `/nodes/{node}` - derived metrics for a specific node\n- `/rawPods` - All raw pod metrics across all namespaces; type\n  `[]metrics.RawPod`"
  },
  {
    "id" : "e5b7c16e-109e-4f8e-bc8f-217e3bdb61ee",
    "prId" : 15862,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf927f84-0a17-49e6-a750-d686639fa524",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "@timstclair: I just remembered that network usage is at the pod level and volumes disk usage is also at the pod level. So in addition to container metrics, we will have pod level metrics too. \n",
        "createdAt" : "2015-10-29T17:29:48Z",
        "updatedAt" : "2015-10-29T17:29:48Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "8f729598-080d-4d4b-aec7-cf2862ad6d24",
        "parentId" : "bf927f84-0a17-49e6-a750-d686639fa524",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Would we move those stats out of [ContainerStats](https://github.com/timstclair/cadvisor/blob/master/info/v2/container.go#L105) and into RawPod, add additional NetworkStats into the RawPod, or add a new Network stats type?\n",
        "createdAt" : "2015-10-29T21:29:10Z",
        "updatedAt" : "2015-10-29T21:29:10Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "f375dde5-f78e-473f-b995-59a45690cc29",
        "parentId" : "bf927f84-0a17-49e6-a750-d686639fa524",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Yes. Its either that or we can pre-define an infrastructure container and\nassociate all pod level stats to that container. Even in that case, volume\nfs usage cannot belong to any containers.\n\nOn Thu, Oct 29, 2015 at 2:29 PM, Tim St. Clair notifications@github.com\nwrote:\n\n> In docs/proposals/compute-resource-metrics-api.md\n> https://github.com/kubernetes/kubernetes/pull/15862#discussion_r43446885\n> :\n> \n> > +## Schema\n> > +\n> > +Types are colocated with other API groups in `/pkg/apis/metrics`, and follow api\n> > +groups conventions there.\n> > +\n> > +```go\n> > +// Raw metrics are only available through the kubelet API.\n> > +type RawNode struct {\n> > -  TypeMeta\n> > -  ObjectMeta              // Should include node name\n> > -  Machine ContainerMetrics\n> > -  SystemContainers []ContainerMetrics\n> >   +}\n> >   +type RawPod struct {\n> > -  TypeMeta\n> > -  ObjectMeta              // Should include pod name\n> \n> Would we move those stats out of ContainerStats\n> https://github.com/timstclair/cadvisor/blob/master/info/v2/container.go#L105\n> and into RawPod, add additional NetworkStats into the RawPod, or add a new\n> Network stats type?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15862/files#r43446885.\n",
        "createdAt" : "2015-11-02T18:12:07Z",
        "updatedAt" : "2015-11-02T18:12:07Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "accb08c0eea50898def74d42eadeec1119c3925b",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +159,163 @@type RawPod struct {\n  TypeMeta\n  ObjectMeta              // Should include pod name\n  Containers []Container\n}"
  },
  {
    "id" : "b072c324-0820-44dc-8915-c5a9e117851a",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "149ada2f-4581-469c-a1bc-74b359ebf367",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So kubelets would have to have a configuration flag to choose whether to push metrics or not?\n",
        "createdAt" : "2015-07-28T20:58:16Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4398ec24-febb-412c-a5b5-2ec333985ef0",
        "parentId" : "149ada2f-4581-469c-a1bc-74b359ebf367",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "In-order for the pull model to work as desired, kubelet needs to expose a versioned metrics endpoint and heapster should have access to all the nodes in the cluster. Then we need API plugins implemented for heapster to serve all the metrics API endpoints. \nTo begin with, there will be no flag in the kubelet. Kubelet will only push metrics to API server.\nWill this model work for Open Shift?\n",
        "createdAt" : "2015-07-28T21:38:39Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "b00fd45e-821a-4e93-ba1c-e2b332981631",
        "parentId" : "149ada2f-4581-469c-a1bc-74b359ebf367",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'd eventually like a model where the main apiserver could delegate to another apiserver for the implementation of an api group. \n\nIn that case, the metrics apiserver could have an alternative storage backend and/or collection mechanism. A data puller would need to run in the same network as the Kubelets to be practical with respect to bandwidth and auth.\n\nSimilarly, we might eventually want such an alternate data path for events.\n\nIn both cases, I imagine keeping current state in memory for low-latency, low-dependency serving and then push history to a pluggable storage backend, with graceful handling of outages of that backend. For stats we could probably tolerate data loss. For events, we might want to try harder to avoid it, such as by buffering on local disk.\n\nSimilarly, if we used longer history dependent on such a storage backend, we'd likely need to cache and/or eagerly pre-compute decisions made using the history in order to tolerate outages, and maybe even to cut circular dependencies. (Once we have horizontal and vertical auto-scaling, we'll want to use them for almost everything.)\n\nI view analytics and UI use cases as being somewhat separate from the online production usage scenarios.\n",
        "createdAt" : "2015-08-04T07:35:41Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +121,125 @@* via heapster - Since heapster keeps data for a period of time, we could\n  redirect requests to the API server to heapster instead of using etcd. This\n  would also allow serving metrics other than the latest ones.\n\nAn edge case that this proposal doesn't take into account is kubelets being"
  },
  {
    "id" : "59f645cd-503a-48d9-ba2b-563d750795df",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Can we skip putting it in etcd?  Otherwise it will spam the etcd window and logs, I think?  Since it will be recreated within a few seconds, no need to persist it.  Just need some way to do unreliable broadcast from one apiserver to the other replicas? \n",
        "createdAt" : "2015-07-29T02:49:09Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "d0794834-23c5-466a-9342-9f22c6eadefd",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "@vishh can probably answer this better than I can\n",
        "createdAt" : "2015-07-29T18:04:25Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "2897a3b5-a184-4277-8760-39155a2b39ed",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "+1 to @erictune's concern. We can skip etcd completely and handle all metrics data in-memory. We have had several issues with events in the past.\n",
        "createdAt" : "2015-07-29T18:28:28Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "2c087abb-0fbd-4719-ab8a-439b542a4584",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Or optionally, just call through to the underlying location of the metrics\n(node today, a metrics store like heapster later)?  It seems like you only\nwant metrics as a snapshot, and historical / more advanced metrics would be\nelsewhere.  That sounds a lot like how we treat pod logs today (we call to\nthe api server which calls to the kubelet).\n\nOn Tue, Jul 28, 2015 at 10:49 PM, Eric Tune notifications@github.com\nwrote:\n\n> In docs/proposals/compute-resource-metrics-api.md\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11951#discussion_r35723817\n> :\n> \n> > +\n> > +We can either use a Push or a Poll based system:\n> > +\n> > +\\* Push - each node would periodically POST their derived and raw metrics to\n> > -  the API server. Kubectl and the scheduler would watch the API server to get\n> > -  the latest metrics.\n> >   +\n> >   +\\* Poll - heapster would periodically poll a kubelet API endpoint on each node\n> > -  to fetch its node and pods metrics. Then Heapster will have to implement the\n> > -  APIs mentioned above.\n> >   +\n> >   +Our initial plan is to follow the push based system.\n> >   +\n> >   +The API server will not hold any of this data directly. For our initial\n> >   +purposes, it will hold the most recent metrics obtained from each node in\n> >   +etcd. Then, when polled for metrics, the API server would only serve said most\n> \n> Can we skip putting it in etcd? Otherwise it will spam the etcd window and\n> logs, I think? Since it will be recreated within a few seconds, no need to\n> persist it. Just need some way to do unreliable broadcast from one\n> apiserver to the other replicas?\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11951/files#r35723817\n> .\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-07-29T20:21:31Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "dd763ffd-dac3-4c92-85cc-d0f2adf6cd88",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "@smarterclayton what you suggest sounds more like the Poll system - relying on endpoints on each kubelet - rather than the proposed Push system. Both are described in the proposal.\n",
        "createdAt" : "2015-07-29T20:27:46Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "b50bcba7-d653-44dd-85c5-e53b7074d2c6",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We really need to have parallel api servers (that's a strong requirement\nfor HA and other issues).  I don't know that a fan-out solution bypassing\netcd is easy to implement (we rejected it in several times in other\nplaces), so that leaves either etcd or a call through directly to the\nunderlying node.\n\nOn Wed, Jul 29, 2015 at 2:28 PM, Vish Kannan notifications@github.com\nwrote:\n\n> In docs/proposals/compute-resource-metrics-api.md\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11951#discussion_r35794526\n> :\n> \n> > +\n> > +We can either use a Push or a Poll based system:\n> > +\n> > +\\* Push - each node would periodically POST their derived and raw metrics to\n> > -  the API server. Kubectl and the scheduler would watch the API server to get\n> > -  the latest metrics.\n> >   +\n> >   +\\* Poll - heapster would periodically poll a kubelet API endpoint on each node\n> > -  to fetch its node and pods metrics. Then Heapster will have to implement the\n> > -  APIs mentioned above.\n> >   +\n> >   +Our initial plan is to follow the push based system.\n> >   +\n> >   +The API server will not hold any of this data directly. For our initial\n> >   +purposes, it will hold the most recent metrics obtained from each node in\n> >   +etcd. Then, when polled for metrics, the API server would only serve said most\n> \n> +1 to @erictune https://github.com/erictune's concern. We can skip etcd\n> completely and handle all metrics data in-memory. We have had several\n> issues with events in the past.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/11951/files#r35794526\n> .\n\n## \n\nClayton Coleman | Lead Engineer, OpenShift\n",
        "createdAt" : "2015-07-29T20:28:02Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4bc1eff7-8adb-4c5f-a339-6bbc32bee959",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "How would watch work if calling directly to nodes? Since we have multiple users of this data, it will be wasteful to reach out to the node for every request. Skipping etcd will be easier if we let a plugin implement the metrics endpoint. \n",
        "createdAt" : "2015-07-29T21:45:04Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "085d355c-9f4c-4529-88d1-ab818825eeaf",
        "parentId" : "10ac3bb0-867f-4ede-b67f-5b257b158452",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We called Kubelets directly before -- remember the pod cache, long kubectl latencies, etc.? Let's not repeat that.\n\netcd for now is fine for derived metrics. We'll optimize later.\n",
        "createdAt" : "2015-08-04T07:39:20Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@The API server will not hold any of this data directly. For our initial\npurposes, it will hold the most recent metrics obtained from each node in\netcd. Then, when polled for metrics, the API server would only serve said most\nrecent data per node.\n"
  },
  {
    "id" : "4e5ee4db-df62-496e-bba1-f91a73a3ed29",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "can I top a nodes stats?  what is syntax for that?\n",
        "createdAt" : "2015-07-29T03:19:08Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "bc0d9c5d-cf1e-4c99-af69-4dadd91cf65b",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "+1. That would be useful. \n\n`kubectl get` should work on these API resources, like like all other API resources:\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/kubectl/cmd/get.go\n\nOne wrinkle is that these are the first subresources we want to display. Probably the syntax should be something like `podmetrics/derived`.\n\nIt would be useful to add a general option (--sort=column, -scolumn) to request to sort by particular columns of `get` output. `top` could be an alias for `get podmetrics/derived -w -s2 -s3`.\n",
        "createdAt" : "2015-07-29T05:58:08Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c5abf1df-fe2a-47c4-8417-1d7713c396ca",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "@erictune the syntax would be similar to the example shown :)\n\n@bgrant0607 what you say makes sense. Would this sort option work with all resources and their columns?\n",
        "createdAt" : "2015-07-29T18:24:41Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "3bfca1b9-0a54-46bb-9eda-9e4bed9d8644",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes, ideally the sort option would be generically applicable.\n",
        "createdAt" : "2015-08-04T06:52:05Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d7afe82f-2eb9-4d47-8640-e91b377fb679",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Maybe we'd want to use column titles instead of numbers.\n\nAnyway, filed #12402\n",
        "createdAt" : "2015-08-07T22:36:46Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6732897c-31ab-45cc-9775-acf257684ddd",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "Thanks @bgrant0607 \n",
        "createdAt" : "2015-08-09T00:42:47Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "1ba52ef6-7bc9-47cf-b899-1d84952380ae",
        "parentId" : "648e6e42-f83c-470b-a648-0f0c84c66900",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "FYI, sorting is in.\n",
        "createdAt" : "2015-08-13T05:15:46Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@\n```\n$ kubectl top kubernetes-minion-abcd\nPOD                        CPU         MEM\nmonitoring-heapster-abcde  0.12 cores  302 MB"
  },
  {
    "id" : "417ad304-940b-49ee-b585-3fed0dfab759",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed4be8ff-c5c1-4d6d-889e-c27c1b5d1590",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Horizontal and vertical auto-scaling are near-term uses, also.\n",
        "createdAt" : "2015-07-29T05:43:56Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c2683ed2-dd4b-4728-aa30-801c98798e59",
        "parentId" : "ed4be8ff-c5c1-4d6d-889e-c27c1b5d1590",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "ping @mvdan \n",
        "createdAt" : "2015-08-06T18:18:44Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "47bba0fa-9fe5-437c-8dc0-d116abafef75",
        "parentId" : "ed4be8ff-c5c1-4d6d-889e-c27c1b5d1590",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "Done\n",
        "createdAt" : "2015-08-09T00:38:54Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@\nProvide resource usage metrics on pods and nodes on the API server to be used\nby the scheduler to improve job placement, utilization, etc. and by end users\nto understand the resource utilization of their jobs. Horizontal and vertical\nauto-scaling are also near-term uses."
  },
  {
    "id" : "06fb35c2-b3dd-48a0-8eb0-52fddf848358",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7ed8309-5a28-4449-9a3b-48b0fbd365b1",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I'd suggest adding a sentence or two on why it's podMetrics/mypod instead of mypod/podMetrics (same for nodeMetrics/myNode instead of myNode/nodeMetrics).\n",
        "createdAt" : "2015-07-31T19:26:00Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "7ac6c7db-9170-41aa-bcfd-9d7dfd10558b",
        "parentId" : "e7ed8309-5a28-4449-9a3b-48b0fbd365b1",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "Sure.\n",
        "createdAt" : "2015-07-31T20:25:01Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@scheduler needs to know the current free resources on each node.\n\n## Proposed endpoints\n\n\t/api/v1/namespaces/myns/podMetrics/mypod"
  },
  {
    "id" : "feb1dfb6-edc4-4961-9094-e92751fb8bbd",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bed1b7b3-a8d6-4f6c-af8d-b8aa97625e5c",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Just curious, is there a reason why you push from each Kubelet instead of pushing from Heapster? The latter might be more efficient.\n",
        "createdAt" : "2015-07-31T19:27:57Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "eb77122e-9a3d-4235-a296-279ed3ff1377",
        "parentId" : "bed1b7b3-a8d6-4f6c-af8d-b8aa97625e5c",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Good idea. Pushing directly from the nodes will result in reduced latency though. \n",
        "createdAt" : "2015-07-31T19:50:31Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "e1fa814d-9475-470f-883d-dcfd09917d0c",
        "parentId" : "bed1b7b3-a8d6-4f6c-af8d-b8aa97625e5c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Push from Kubelet to Heapster and then from Heapster to apiserver? Why would that be more efficient?\n",
        "createdAt" : "2015-08-04T06:56:18Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b7a94810-604a-40a0-9670-6572f6cc7dd4",
        "parentId" : "bed1b7b3-a8d6-4f6c-af8d-b8aa97625e5c",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I was assuming it would be more efficient because I thought we're pushing from Kubelet to Heapster anyway.\n",
        "createdAt" : "2015-08-04T08:14:40Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "0b2f1e7c-e8d6-45a2-8a83-a19d6325956a",
        "parentId" : "bed1b7b3-a8d6-4f6c-af8d-b8aa97625e5c",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "@davidopp right now heapster pulls raw metrics from each kubelet, so not exactly. Different data and different mechanism.\n",
        "createdAt" : "2015-08-04T16:47:03Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@## Data gathering\n\nWe will use a push based system. Each kubelet will periodically - every 10s -\nPOST its derived metrics to the API server. Then, any users of the metrics can\nregister as watchers to receive the new metrics when they are available."
  },
  {
    "id" : "3a878b7a-d775-44fe-8892-1ea793d5cad0",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91efeeda-c1e5-4752-966f-64240eb178c8",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Maybe reference #489\n",
        "createdAt" : "2015-07-31T19:54:28Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "e868d0ab-b4eb-4b59-8323-568c158728cd",
        "parentId" : "91efeeda-c1e5-4752-966f-64240eb178c8",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "Via a full github http link?\n",
        "createdAt" : "2015-07-31T20:56:36Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "2e85131f-2c79-4fd4-8753-a6a45e04b7f5",
        "parentId" : "91efeeda-c1e5-4752-966f-64240eb178c8",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Yes\n",
        "createdAt" : "2015-08-04T08:16:13Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1aa21164-e196-4caf-ba3e-5890f1bf0ddb",
        "parentId" : "91efeeda-c1e5-4752-966f-64240eb178c8",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I think we have a redirector now: issues.k8s.io or somesuch. Since we're going to move the repo next week, let's not introduce new references to the existing location.\n",
        "createdAt" : "2015-08-07T22:34:23Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@historical data and thus take hours to gather enough information to provide\nrelevant metrics again. We might want to use persistent storage directly or in\nthe future to improve that situation.\n\nMore information on kubelet checkpoints can be read on"
  },
  {
    "id" : "a636cc6e-3179-424f-ab7c-5878c286c6e3",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cceaf6-24fc-4de1-b543-ddf3cb64cbc4",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "At some point we will likely want a history service, which also helps in accurate job-sizing. \n",
        "createdAt" : "2015-07-31T20:03:07Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "48804edf-407b-4f18-a090-d7873cf6ebac",
        "parentId" : "03cceaf6-24fc-4de1-b543-ddf3cb64cbc4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes, at some point we'll want a service with history of at least one week. We've discussed indexing those metrics by image and perhaps other attributes. However, that's out of scope for now.\n",
        "createdAt" : "2015-08-04T06:54:40Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@restarted. If any of them are, with a simple implementation they would lose\nhistorical data and thus take hours to gather enough information to provide\nrelevant metrics again. We might want to use persistent storage directly or in\nthe future to improve that situation.\n"
  },
  {
    "id" : "33c7701d-a5cf-4bab-8c64-6b08637e3f6f",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af28485b-d16d-4ded-adbe-55b924d44617",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "We don't really articulate \"what\" these metrics can be.  e.g. can we extend them?  should we latch onto labeling, or keep it separate?  if so, why?\n\nOther systems regularly publish deltas on a machine attribute set to some collection system to do complete NP-hard scheduling.   \n",
        "createdAt" : "2015-07-31T20:11:17Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +93,97 @@\nWe will use a push based system. Each kubelet will periodically - every 10s -\nPOST its derived metrics to the API server. Then, any users of the metrics can\nregister as watchers to receive the new metrics when they are available.\n"
  },
  {
    "id" : "ea2a0c5a-92d4-4496-851a-9775282f367d",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92ad4b09-16d6-4138-8dc5-c07e673b7fa6",
        "parentId" : null,
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "@bgrant0607 is it a problem if `NinetyFive` and `95th` here are different? I don't think `95th` is a good Go field name, but `ninetyfive` seems too long for json.\n",
        "createdAt" : "2015-08-09T01:03:26Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@\tMean       ResourceUsage `json:\"mean\"`\n\tMax        ResourceUsage `json:\"max\"`\n\tNinetyFive ResourceUsage `json:\"95th\"`\n}\n"
  },
  {
    "id" : "298a10d2-1bea-4009-abc7-115d4c140a51",
    "prId" : 11951,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Since we are seriously considering moving events out of etcd (due to performance reasons), adding a lot of usage-related data to it doesn't sound like the best idea to me (especially since we're targeting 1000-node clusters by the EOY).\nIIUC, usage data will not event be read from etcd since apiserver will be serving it from memory. Thus it seems to be that some append-only database would be enough here.\nAnyway, what I wanted to say is that we need to be very careful about performance with this change.\n\ncc @timothysc \n",
        "createdAt" : "2015-08-13T13:57:03Z",
        "updatedAt" : "2015-08-13T18:18:27Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "35b882c4-53b6-4064-8f7d-b68e46c462dc",
        "parentId" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "CC @vishh\n",
        "createdAt" : "2015-08-13T18:18:52Z",
        "updatedAt" : "2015-08-13T18:18:52Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "181cd41c-10a0-43a8-bb21-5634234f084e",
        "parentId" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "https://github.com/kubernetes/kubernetes/pull/11951#discussion_r36163816\n",
        "createdAt" : "2015-08-13T18:43:43Z",
        "updatedAt" : "2015-08-13T18:43:43Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "b933064a-7626-43e9-bf28-bffa3fff9576",
        "parentId" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "The eventual goal is to move events and metrics into a pluggable backend. However, this cannot be done until apiserver supports plugins.\n",
        "createdAt" : "2015-08-13T18:53:22Z",
        "updatedAt" : "2015-08-13T18:53:22Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "114cede5-ff7b-414a-848f-7aee211f185f",
        "parentId" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Got it  - thanks for response.\n",
        "createdAt" : "2015-08-14T07:35:29Z",
        "updatedAt" : "2015-08-14T07:35:29Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "60c52cab-6d41-4a97-9384-3c4a6c402e4a",
        "parentId" : "5fbeb7d5-d805-4f4e-9b73-922a006e1937",
        "authorId" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "body" : "FYI @xiang90 \n",
        "createdAt" : "2016-04-11T02:57:27Z",
        "updatedAt" : "2016-04-11T02:57:27Z",
        "lastEditedBy" : "bb4cf218-381a-40ad-ac0c-0c2c66685cd4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a0bc4dd83f204d4fb05ca4242aa814dd9a8ee27",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +109,113 @@Benchmarks will be run with etcd to see if it can keep up with the frequent\nwrites of data. If it turns out that etcd doesn't scale well enough, we will\nhave to switch to a different storage system.\n\nIf a pod gets deleted, the API server will get rid of any metrics it may"
  }
]