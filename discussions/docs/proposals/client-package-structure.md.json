[
  {
    "id" : "c47b8592-5fde-42e7-81ae-20b04689d663",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc0806e5-67db-49e5-8f8a-b7212640418c",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Does it need a RESTClient? A http.Client is enough.\n",
        "createdAt" : "2015-10-15T21:12:40Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "7f97a528-a429-4d9a-b33f-414cef83e311",
        "parentId" : "bc0806e5-67db-49e5-8f8a-b7212640418c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Ah, never mind. I see RESTClient.Client is a http.Client.\n",
        "createdAt" : "2015-10-15T21:17:08Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bcb5741a-bc60-4039-8ca8-406844d7b690",
        "parentId" : "bc0806e5-67db-49e5-8f8a-b7212640418c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think we should _ever_ use standard http client in our codebase.  See previous statements about RESTClient offering help and abstraction that handles transport as well\n",
        "createdAt" : "2015-10-18T23:10:17Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2edacbdd-4bab-44b5-a3a1-58499dca528e",
        "parentId" : "bc0806e5-67db-49e5-8f8a-b7212640418c",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "RESTClient has apiVersion and codec. The discovery client shouldn't have those, it's version agnostic and the messages it handles are not encoded to a version.\n",
        "createdAt" : "2015-10-19T20:52:04Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "f9ebb251-2227-403f-a67a-61d8705e6466",
        "parentId" : "bc0806e5-67db-49e5-8f8a-b7212640418c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "RESTClient does not require apiVersion.  The absence of an apiversion is\nnot an error. It should use codec - why does discovery have to be tied to\nJSON?  And codec being absent could very well support the null codec (or a\nsimple JSON codec)\n\nRESTClient exists to abstract access to RESTful apis.  It also exists to\nunify client-server interactions over HTTP with conventions.  Having two\ncode paths to communicate to a server is not desirable.\n\nOn Mon, Oct 19, 2015 at 4:52 PM, Chao Xu notifications@github.com wrote:\n\n> In docs/proposals/client-package-structure.md\n> https://github.com/kubernetes/kubernetes/pull/15730#discussion_r42424233\n> :\n> \n> > +current version inspecific types.\n> > +\n> > +We will provide this structure for each version of each group. It is infeasible\n> > +to do this manually, so we will generate this. The generator will accept both\n> > +swagger and the ordinary go types.\n> > +\n> > +Typed clients will be constructabale given a MetaClient.\n> > +\n> > +Action items:\n> > +\\* Move current typed clients into new directory structure (described below)\n> > +\\* Finish client generation logic. (@lavalamp)\n> > +\n> > +#### High-level, typed: Discovery\n> > +\n> > +A `DiscoveryClient` is necessary to discover the api groups, versions, and\n> > +resources a server supports. It's constructable given a RESTClient. It is\n> \n> RESTClient has apiVersion and codec. The discovery client shouldn't have\n> those, it's version agnostic and the messages it handles are not encoded to\n> a version.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/15730/files#r42424233.\n",
        "createdAt" : "2015-10-19T21:43:29Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +218,222 @@\nA `DiscoveryClient` is necessary to discover the api groups, versions, and\nresources a server supports. It's constructable given a RESTClient. It is\nconsumed by both the ClientMux and users who want to iterate over groups,\nversions, or resources. (Example: namespace controller.)"
  },
  {
    "id" : "2bd3c2ea-48f6-4793-a4e4-b66ecbaeec32",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "106f4fc5-43ee-4e08-b46e-44ecf54cc1ed",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Shall a Client Set include a DiscoveryClient?\n",
        "createdAt" : "2015-10-15T21:54:36Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6a063df5-7717-409a-8d20-a2e8f5d4db90",
        "parentId" : "106f4fc5-43ee-4e08-b46e-44ecf54cc1ed",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes, it should, I'll add.\n",
        "createdAt" : "2015-10-15T23:24:35Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +290,294 @@)\n\ntype Client interface {\n  API() api_v1.Client\n  Extensions() ext_v1beta1.Client"
  },
  {
    "id" : "57e6f144-bfd7-42d2-a92d-b0dca9f8bcd9",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e891844d-309b-4403-b664-3560d6b12aa8",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Instead of meta, why not \"rest discovery client\"?\n",
        "createdAt" : "2015-10-18T23:05:15Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3a191029-d9af-42f2-9f13-a2ae74fa3d46",
        "parentId" : "e891844d-309b-4403-b664-3560d6b12aa8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Well, I called the thing that talks to the group/version/resource page the \"discovery client\". I picture this thing using a discovery client to populate its cache on an as-needed basis.\n",
        "createdAt" : "2015-10-19T23:20:25Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +156,160 @@\nAction items:\n* Move client cache out of kubectl libraries into a more general home.\n* TODO: a mux layer may not be necessary, depending on what needs to be cached.\n  If transports are cached already, and RESTClients are extremely light-weight,"
  },
  {
    "id" : "55b8001e-440d-4454-b5f0-41d86f41bacf",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eb7ae13-f7ae-49ea-9cc8-ecb9d90d2031",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why would we not continue to offer the internal typed client?\n",
        "createdAt" : "2015-10-18T23:05:50Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4c970677-1b8d-4a0c-8eae-3d5746cab7dd",
        "parentId" : "6eb7ae13-f7ae-49ea-9cc8-ecb9d90d2031",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Clarified.\n",
        "createdAt" : "2015-10-19T23:21:08Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +192,196 @@\nWe will provide this structure for each version of each group. It is infeasible\nto do this manually, so we will generate this. The generator will accept both\nswagger and the ordinary go types. The generator should operate on out-of-tree\nsources AND out-of-tree destinations, so it will be useful for consuming"
  },
  {
    "id" : "868a128e-b9fd-4efb-bbe0-6ebce75ec033",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a8cc7cb-0b87-4558-a595-8bff4ddd8025",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We should note that a discovery client is not required - some callers may choose to init typed clients directly without negotiation and that is acceptable.  Also, discover client _must_ be able to result in a generic RESTClient (for resource types not compiled into Kube), and future enhancements will allow swagger doc to lazily generate a generic typed client as necessary.\n",
        "createdAt" : "2015-10-18T23:12:31Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4b32b724-f99e-4611-be05-3104c27e4112",
        "parentId" : "7a8cc7cb-0b87-4558-a595-8bff4ddd8025",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hopefully clarified that discovery client doesn't do construction at all, it just reports back on what the server's got.\n",
        "createdAt" : "2015-10-19T23:21:17Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +220,224 @@resources a server supports. It's constructable given a RESTClient. It is\nconsumed by both the ClientMux and users who want to iterate over groups,\nversions, or resources. (Example: namespace controller.)\n\nThe DiscoveryClient is *not* required if you already know the group/version of"
  },
  {
    "id" : "1362ca56-94c0-43ff-96e4-b0e96fbbdc72",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a257933-ec04-4172-8a9d-6a404d5eac48",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Other steps:\n- use versioned param structs (list options, delete options) everywhere\n- remove Kube API group specific behavior from request.go\n- formalize SetKubeDefaults with didcover, remove any overlap.  Discovery should probably only occur when apiversion is unspecified on config\n",
        "createdAt" : "2015-10-18T23:28:00Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +331,335 @@---------------------/the-test-set-you-just-generated/\n```\n\n`/clientsets/` will retain their contents until they reach their expire date.\ne.g., when we release v1.N, we'll remove clientset v1.(N-3). Clients from old"
  },
  {
    "id" : "9f120c33-ce95-4894-96f9-1c1c48fc3b4b",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08707368-9e39-4b73-804c-fca7a78c7b5d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "+1\n",
        "createdAt" : "2015-10-18T23:32:50Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@subsequent layers.\n\nTentative name: \"Transport\".\n\nIt's expected that the transport config will be general enough that third"
  },
  {
    "id" : "53f5aba4-82b1-47bc-b58f-1a03443199cc",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f87cbc0-1fe9-48c5-b14b-e088ec2a62aa",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I feel we use `Codec` a lot. Maybe we could clarify what this is? I think ideally it should be concerned with encoding and decoding only and not have anything to do with converting to different versions. Perhaps something like\n\n``` go\ntype Codec interface {\n    Encode(runtime.Object) []byte\n    Decode([]byte]) runtime.Object\n}\n```\n",
        "createdAt" : "2015-10-20T22:27:38Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "dbda330d-4974-4b04-bc3a-f671bfb4d1aa",
        "parentId" : "8f87cbc0-1fe9-48c5-b14b-e088ec2a62aa",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I agree that we can simplify the codec down to that, though with errors added. A Codec for a particular version should have the property that it consumes/produces objects of that version, or an error.\n",
        "createdAt" : "2015-10-20T23:20:05Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a7d84ff1-2fed-4e52-b422-6db4276bea4e",
        "parentId" : "8f87cbc0-1fe9-48c5-b14b-e088ec2a62aa",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I think consuming an `*http.Client` instead of a Transport makes more sense. The current RESTClient is constructed, then an `*http.Client` using a transport is shoved in. The current RESTClient and Request are all build around using an *http.Client and not a transport anyway. This also allows a user to customize the client (e.g. timeouts) before building the RESTClient instead of changing it afterwards. Seems better to me.\n",
        "createdAt" : "2015-11-13T00:39:26Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "44a72400-820e-4839-ba35-b65dfec784ee",
        "parentId" : "8f87cbc0-1fe9-48c5-b14b-e088ec2a62aa",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I agree that consuming `*http.Client` seems better.\n",
        "createdAt" : "2015-11-13T19:21:48Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d8ac9fba-737d-4771-8fa3-efbc6e65b416",
        "parentId" : "8f87cbc0-1fe9-48c5-b14b-e088ec2a62aa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I would prefer an interface rather than a concrete type.  We've had several\nplaces where the go http client was not usable as is (due to limitations\nfor proxying, http handling, and it's retry / timeout behavior).  Since a\ncaller could extract the transport later it's not a huge deal in the short\nterm.\n\nOn Nov 12, 2015, at 7:39 PM, krousey notifications@github.com wrote:\n\nIn docs/proposals/client-package-structure.md\nhttps://github.com/kubernetes/kubernetes/pull/15730#discussion_r44736922:\n\n> +\n> +Transport objects are safe for concurrent use, and are cached and reused by\n> +subsequent layers.\n> +\n> +Tentative name: \"Transport\".\n> +\n> +It's expected that the transport config will be general enough that third\n> +parties (e.g., OpenShift) will not need their own implementation, rather they\n> +can change the Host field to point at their own servers, etc..\n> +\n> +Action items:\n> +\\* Split out of current client package into a new package. (@krousey)\n> +\n> +### RESTClient/request.go\n> +\n> +RESTClient consumes a Transport and a Codec (and optionally a group/version),\n\nI think consuming an *http.Client instead of a Transport makes more sense.\nThe current RESTClient is constructed, then an *http.Client using a\ntransport is shoved in. The current RESTClient and Request are all build\naround using an *http.Client and not a transport anyway. This also allows a\nuser to customize the client (e.g. timeouts) before building the RESTClient\ninstead of changing it afterwards. Seems better to me.\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/15730/files#r44736922.\n",
        "createdAt" : "2015-11-18T00:03:15Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@### RESTClient/request.go\n\nRESTClient consumes a Transport and a Codec (and optionally a group/version),\nand produces something that implements the interface currently in request.go.\nThat is, with a RESTClient, you can write chains of calls like:"
  },
  {
    "id" : "feeedb07-45f9-4a59-9bef-98328f8e4213",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f30d3060-e98d-4cd9-a771-6fba4ac10c32",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "How will the codec specify this semantic content? Any examples?\n",
        "createdAt" : "2015-10-20T22:31:42Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "fb99d957-50a3-48cf-b8e9-48f1685c5f95",
        "parentId" : "f30d3060-e98d-4cd9-a771-6fba4ac10c32",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I will add an example. It'll take the form of having the codec encode a struct containing the query parameters.\n",
        "createdAt" : "2015-10-20T23:21:00Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@a chained function call.\n\nIdeally, no semantic behavior is built into RESTClient, and RESTClient will use\nthe Codec it was constructed with for all semantic operations, including turning\noptions objects into URL query parameters. Unfortunately, that is not true of"
  },
  {
    "id" : "bf0b694c-0e19-4f72-a5c9-87db166609e3",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d8d1985-b661-48bb-a334-7c393527aba6",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "For it to build a new RESTClient, it will have to be able to map group/version to codecs AND transports as well. Are we going to worry about how best to do that later?\n",
        "createdAt" : "2015-11-02T22:26:18Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "6a35e0cc-8b54-4f9f-bf98-00c4f200a1f5",
        "parentId" : "2d8d1985-b661-48bb-a334-7c393527aba6",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Added a line.\n",
        "createdAt" : "2015-11-03T00:27:49Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +144,148 @@\nThe client muxer layer has a map of group/version to cached RESTClient, and\nknows how to construct a new RESTClient in case of a cache miss (using the\ndiscovery client mentioned below). The ClientMux may need to deal with multiple\ntransports pointing at differing destinations (e.g. OpenShift or other 3rd party"
  },
  {
    "id" : "8a25dd45-e785-4712-bf1b-7ca623c983d1",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5908a1a0-b782-4c12-b75d-97f129ec5652",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Doesn't this assume a JSON encoding, which may or may not be the case?\n",
        "createdAt" : "2015-11-02T22:33:54Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "cca10652-c301-4308-bcb1-42119a01be4c",
        "parentId" : "5908a1a0-b782-4c12-b75d-97f129ec5652",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "added text\n",
        "createdAt" : "2015-11-03T00:30:46Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +243,247 @@A dynamic client is constructable given a config, group, and version. It will\nuse this to construct a RESTClient with a Codec which encodes/decodes to\n'Unstructured' `runtime.Object`s. The group and version may be from a previous\ninvocation of a DiscoveryClient, or they may be known by other means.\n"
  },
  {
    "id" : "54efbb7f-950c-4d28-89f4-1dee8f7e9e82",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e6a0acf-970a-4d04-80a6-fce5ecbbb265",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Is clientset supposed to be here?\n",
        "createdAt" : "2015-11-02T22:34:33Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "62833fcf-cc0c-45a3-bed0-c1492cf58868",
        "parentId" : "0e6a0acf-970a-4d04-80a6-fce5ecbbb265",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "yes, added explanation\n",
        "createdAt" : "2015-11-03T00:31:57Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9e734752-e784-4f51-96c3-58b845f87423",
        "parentId" : "0e6a0acf-970a-4d04-80a6-fce5ecbbb265",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Did you miss the resource (Pod etc.) in the chain? I thought it would be `clientset.GroupName().Resource().NamespaceSpecifier().Action()`, \nand it's `clientset.GroupName().Resource()` that \"returns the generated client that this section is about\", not `clientset.GroupName()`.\n",
        "createdAt" : "2015-11-23T21:47:59Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "8f24a099-774e-4df5-961f-e291b1766467",
        "parentId" : "0e6a0acf-970a-4d04-80a6-fce5ecbbb265",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "@caesarxuchao It seems the resource also takes a namespace in his example on line 148. So it would be like `clientset.GroupName().Pods(\"namespace\").Create(p)` if I'm understanding correctly.\n",
        "createdAt" : "2015-11-23T22:12:42Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "5606129b-b701-4396-a8d9-4db9c50d01ff",
        "parentId" : "0e6a0acf-970a-4d04-80a6-fce5ecbbb265",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks @krousey. I think you are right.\n",
        "createdAt" : "2015-11-23T22:17:35Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +168,172 @@That is, the system will be:\n\n`clientset.GroupName().NamespaceSpecifier().Action()`\n\nWhere:"
  },
  {
    "id" : "771be9e0-a53a-4688-a9f8-df4c4719b0ef",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b570796-d78f-46c7-b05f-06d93c35cd32",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Master branch will have all release client sets?\nThey will be there in their specific release branches as well.\n",
        "createdAt" : "2015-11-03T00:14:52Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "64a6d015-2f7c-4ed2-8592-e85b6b6a674d",
        "parentId" : "5b570796-d78f-46c7-b05f-06d93c35cd32",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Added explanation.\n",
        "createdAt" : "2015-11-03T00:36:04Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +327,331 @@----------------/dynamic/\n----------/clientsets/\n---------------------/release-1.1/\n---------------------/release-1.2/\n---------------------/the-test-set-you-just-generated/"
  },
  {
    "id" : "4745872b-187b-4ec1-ae4a-c820a0c7b45c",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "856168ad-eb90-409d-a1f4-f182dea3723e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "How about DecodeParameters(Into) ?\n",
        "createdAt" : "2015-11-03T08:35:15Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "647830e2-7a77-489a-917b-6dd235d02e0c",
        "parentId" : "856168ad-eb90-409d-a1f4-f182dea3723e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I just removed it because of @krousey, since it's only needed by the server.\n",
        "createdAt" : "2015-11-03T22:56:49Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b3aa8870-d92a-4d52-8b68-a3adba75d8bb",
        "parentId" : "856168ad-eb90-409d-a1f4-f182dea3723e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Added comment.\n",
        "createdAt" : "2015-11-03T23:02:06Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "e3d63bca-4c49-44f4-9d21-c5f303a16767",
        "parentId" : "856168ad-eb90-409d-a1f4-f182dea3723e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Are parameters really special?  Are we ever going to need to encode to headers?  How does a client know what to decode to?  I feel like two codecs (BodyCodec and URLCodec) would be better than one codec doing both.\n",
        "createdAt" : "2015-11-04T18:31:30Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "97348f31-d5a4-4d81-82b2-0da4eb979954",
        "parentId" : "856168ad-eb90-409d-a1f4-f182dea3723e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm fine with that.\n",
        "createdAt" : "2015-11-05T00:38:51Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +112,116 @@\n  // Used to version-control query parameters\n  EncodeParameters(optionsObject runtime.Object) (url.Values, error)\n\n  // Not included here since the client doesn't need it, but a corresponding"
  },
  {
    "id" : "d7b759a9-8de9-40c4-b303-01865b8f3299",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57786641-3c8b-4cee-a3b6-16aa3ecb33e8",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We need to settle on the pattern for sub resources.  You don't have to do it here, but I'd like the current state called out as \"insufficiently defined\"\n",
        "createdAt" : "2015-11-04T18:33:00Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7365b0c4-9700-4a6c-9894-87c9b2b6b950",
        "parentId" : "57786641-3c8b-4cee-a3b6-16aa3ecb33e8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Done\n",
        "createdAt" : "2015-12-02T22:48:17Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@* `GroupName()` returns the generated client that this section is about.\n* `NamespaceSpecifier()` may take a namespace parameter or nothing.\n* `Action` is one of Create/Get/Update/Delete/Watch, or appropriate actions\n  from the type's subresources.\n* It is TBD how we'll represent subresources and their actions. This is"
  },
  {
    "id" : "dfbe81e4-5cf7-49b9-947a-2d0f4ec1e361",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ba7ae6a-c788-457e-a409-db2f73cbf2db",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "How does someone write a client code library that supports multiple server versions?  Do they have to also duplicate all of their higher level logic that takes the code (MyFuncV1 c.Client.Pods.Get() vs MyFuncV2 c.Client.Pods.Get())?  Do they have to use conversions?\n",
        "createdAt" : "2015-11-04T18:34:20Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e98d4354-2d40-4e4e-b422-d846956afee7",
        "parentId" : "0ba7ae6a-c788-457e-a409-db2f73cbf2db",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Options:\n1. Use the dynamic client (yuk).\n2. At run-time, choose a codec that can convert from what the server speaks to what you wrote. This is essentially what we do today, only we want to do it in a way that doesn't require the client code to change every time we make a change (no \"internal\" version).\n",
        "createdAt" : "2015-11-05T00:43:33Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "aa946591-bcab-4ddb-9e8c-6996dc43b9ed",
        "parentId" : "0ba7ae6a-c788-457e-a409-db2f73cbf2db",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You really hate the dynamic client, huh?  :)  \n\nI think I'm ok with 2, but I'll want to think about it some.  I do regret that we don't have per field addition schema versions on the individual objects.\n",
        "createdAt" : "2015-11-05T03:49:32Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "60c57d09-5864-4b39-98d2-b7bdc81aa44d",
        "parentId" : "0ba7ae6a-c788-457e-a409-db2f73cbf2db",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Added.\n",
        "createdAt" : "2015-12-02T22:48:14Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +203,207 @@will be able to construct the appropriate RESTClient.\n\nTyped clients do not require any version negotiation. The server either supports\nthe client's group/version, or it does not. However, there are ways around this:\n* If you want to use a typed client against a server's API endpoint and the"
  },
  {
    "id" : "c2829229-9e31-4d6e-9057-a049e62d2d31",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d7cbae-b353-4eed-9d38-95223712615e",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Just to confirm Dynamic is also part of this, right?\n",
        "createdAt" : "2015-11-13T03:27:34Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "ca39ea9b-ee5e-46b3-ba16-ec501c195cd5",
        "parentId" : "11d7cbae-b353-4eed-9d38-95223712615e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yes.\n",
        "createdAt" : "2015-11-13T18:31:34Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6a010428-381d-457d-840b-87d8a6eee4ff",
        "parentId" : "11d7cbae-b353-4eed-9d38-95223712615e",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Sorry I see now that GroupVersion() below is returning dynamic.Client\n",
        "createdAt" : "2015-11-13T19:25:38Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 296,
    "diffHunk" : "@@ -1,1 +294,298 @@  Extensions() ext_v1beta1.Client\n  Net() net_v1beta1.Client\n  // ... other typed clients here.\n\n  // Included in every set"
  },
  {
    "id" : "e20313a2-9f12-4875-bf61-6b549e0417a9",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d9f9a9a-00b3-4cec-9543-d0bd62567136",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Thinking more about this, am wondering if we really need to duplicate it here in HEAD.\nThe client will be there in the corresponding release branch.\n\nHow will cherrypicks in release branch work? Will we do the cherrypick, generate the client in release branch and then copy it back here?\n",
        "createdAt" : "2015-11-13T19:23:05Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "d1548a85-a445-469e-b182-89f828290ad8",
        "parentId" : "5d9f9a9a-00b3-4cec-9543-d0bd62567136",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I'm not sure of the answers to these questions, but I really want `go get` to Just Workâ„¢. And I don't think `go get` let's you specify a git tag.\n",
        "createdAt" : "2015-11-13T19:32:08Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "b7e1a3d6-a816-4eeb-9d82-c6e48b54ad8a",
        "parentId" : "5d9f9a9a-00b3-4cec-9543-d0bd62567136",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We want the tests to continue to be run, so it's worth leaving in HEAD, I think. @krousey's point is legit, too.\n",
        "createdAt" : "2015-12-02T22:48:11Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +327,331 @@----------------/dynamic/\n----------/clientsets/\n---------------------/release-1.1/\n---------------------/release-1.2/\n---------------------/the-test-set-you-just-generated/"
  },
  {
    "id" : "abcf176c-e803-457a-9669-ad6d84bae4a2",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29e1006-0bc3-4207-bccc-17d192c8cc5e",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Will we have a HEAD or latest clientset? The one that we will use with the latest HEAD code.\n",
        "createdAt" : "2015-11-13T19:24:11Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +326,330 @@--------------------------------------------/<resource>.go\n----------------/dynamic/\n----------/clientsets/\n---------------------/release-1.1/\n---------------------/release-1.2/"
  },
  {
    "id" : "d0dbd99f-dc29-4a63-ba1d-9d7173e07962",
    "prId" : 15730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e2a2a4b-1bd0-4212-8e1d-d0e77a1a4e44",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "TOC and/or TL;DR of the proposed layers / modules.\n",
        "createdAt" : "2015-11-17T22:02:47Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "028aa2c3-9687-4ba6-907d-a467c2c9b2f1",
        "parentId" : "0e2a2a4b-1bd0-4212-8e1d-d0e77a1a4e44",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Added TOC\n",
        "createdAt" : "2015-12-02T22:48:06Z",
        "updatedAt" : "2015-12-09T05:15:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc5e1ea98f24b6412fec625d4773262f66b472d8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +50,54 @@# Client: layering and package structure\n\n## Desired layers\n\n### Transport"
  }
]