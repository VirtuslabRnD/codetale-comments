[
  {
    "id" : "e56e7473-dea4-4b34-956e-1b73cf68d1c5",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1bec459-0d84-4cab-b2a3-7fb380071df5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "To be honest, I think it will even be easier if we decide to do it in the future.\n",
        "createdAt" : "2016-03-07T07:48:51Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +116,120 @@* gRPC was considered, but is a larger change that requires more core\n  refactoring. This approach does not eliminate the possibility of switching\n  to gRPC in the future.\n* We considered attempting to improve JSON serialization, but the cost of\n  implementing a more efficient serializer library than ugorji is"
  },
  {
    "id" : "b30033b8-f594-4815-a055-c6123a43cd94",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a314f54d-3423-4700-bc72-bf22f8685c96",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Just to clarify if I understand correctly:\n\n\"type Pod struct { ... }\" - those are types that already exist, right?\n\n\"message Pod {}\" - this is something that we want to auto-generate, right? \nAnd IIUC, it should also be: \"message Pod { ... }\" - because there should be the same fields, there. Or am I missing something?\n",
        "createdAt" : "2016-03-07T10:01:34Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c4eafe20-4f36-46d2-a2bb-bb857b56fb8a",
        "parentId" : "a314f54d-3423-4700-bc72-bf22f8685c96",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> \"type Pod struct { ... }\" - those are types that already exist, right?\n> \n> Correct\n> \n> \"message Pod {}\" - this is something that we want to auto-generate, right?\n\nCorrect\n\n> And IIUC, it should also be: \"message Pod { ... }\" - because there should\n> be the same fields, there. Or am I missing something?\n\nYes\n",
        "createdAt" : "2016-03-09T05:05:06Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +134,138 @@    type Pod struct { ... }\n\n    message Pod {}\n\nSince the Go structs are designed to be serialized to JSON (with only the"
  },
  {
    "id" : "1338fb53-eb2f-4e20-a3d7-29b85ba8cfa2",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca6ee91c-9b15-4b4e-8c2e-48d221f114e4",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I remember that you were switching \"int\" to \"int32\" and \"int64\" at some point. But do we have some checker that is testing it e.g. on every commit?\n",
        "createdAt" : "2016-03-07T10:02:44Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "77eaf09e-e3ab-4256-b55a-e7ef66eb9671",
        "parentId" : "ca6ee91c-9b15-4b4e-8c2e-48d221f114e4",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The checker would be that protobuf generation would fail (because go2idl\nwon't be able to pick an unambiguous type).  I'll need to double check that\nwe catch that earlier.\n\nOn Mon, Mar 7, 2016 at 4:03 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55182327\n> :\n> \n> > -    type Pod struct { ... }\n> >   +\n> > -    message Pod {}\n> >   +\n> >   +Since the Go structs are designed to be serialized to JSON (with only the\n> >   +int, string, bool, map, and array primitive types), we will use the\n> >   +canonical JSON serialization as the protobuf field type wherever possible,\n> >   +i.e.:\n> >   +\n> > -    JSON      Protobuf\n> > -    string -> string\n> > -    int    -> varint\n> > -    bool   -> bool\n> > -    array  -> repeating message|primitive\n> >   +\n> >   +We disallow the use of the Go `int` type in external fields because it is\n> \n> I remember that you were switching \"int\" to \"int32\" and \"int64\" at some\n> point. But do we have some checker that is testing it e.g. on every commit?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55182327.\n",
        "createdAt" : "2016-03-09T05:05:45Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@    array  -> repeating message|primitive\n\nWe disallow the use of the Go `int` type in external fields because it is\nambiguous depending on compiler platform, and instead always use `int32` or\n`int64`."
  },
  {
    "id" : "7507dd2c-cb8f-4975-9104-5a3019fc121b",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c514b57f-91bc-4377-9faf-e370e8749322",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Just curious - how do we know if a field is nullable or not?\n",
        "createdAt" : "2016-03-07T10:05:15Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e77cbb3d-7961-485f-9561-968a3c69525b",
        "parentId" : "c514b57f-91bc-4377-9faf-e370e8749322",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's nullable = true if it's a slice, a map, or a pointer AND omitempty is\nnot in the json struct tag.  All other types are nullable = false.\n\nOn Mon, Mar 7, 2016 at 4:05 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55182596\n> :\n> \n> > +option (gogoproto.unmarshaler_all) = true;\n> > +option (gogoproto.goproto_unrecognized_all) = false;\n> > +option (gogoproto.goproto_enum_prefix_all) = false;\n> > +option (gogoproto.goproto_getters_all) = false;\n> > +option go_package = \"v1\";\n> > +\n> > +// Represents a Persistent Disk resource in AWS.\n> > +//\n> > +// An AWS EBS disk must exist before mounting to a container. The disk\n> > +// must also be in the same AWS zone as the kubelet. An AWS EBS disk\n> > +// can only be mounted as read/write once. AWS EBS volumes support\n> > +// ownership management and SELinux relabeling.\n> > +message AWSElasticBlockStoreVolumeSource {\n> > -  // Unique ID of the persistent disk resource in AWS (Amazon EBS volume).\n> > -  // More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore\n> > -  optional string volumeID = 1 [(gogoproto.customname) = \"VolumeID\", (gogoproto.nullable) = false];\n> \n> Just curious - how do we know if a field is nullable or not?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55182596.\n",
        "createdAt" : "2016-03-09T05:06:37Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +253,257 @@  // Unique ID of the persistent disk resource in AWS (Amazon EBS volume).\n  // More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore\n  optional string volumeID = 1 [(gogoproto.customname) = \"VolumeID\", (gogoproto.nullable) = false];\n\n  // Filesystem type of the volume that you want to mount."
  },
  {
    "id" : "80df63d6-8dcc-470d-8f12-b3730276db28",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d840f7b-3f55-4c3b-aca7-b328d74ab42d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "And if the first four bytes are different, then we will continue decoding to JSON, right?\n",
        "createdAt" : "2016-03-07T10:11:13Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9b0d6fd6-4796-4c4b-acea-d3b15e3318f1",
        "parentId" : "2d840f7b-3f55-4c3b-aca7-b328d74ab42d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah, pkg/runtime/serializer/recognizer (used by the UniversalDeserializer)\nwill use the prefix bytes to peek at the head of the object and make a\ndecision whether to try a decode.\n\nOn Mon, Mar 7, 2016 at 4:11 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55183244\n> :\n> \n> > +JSON into the value field (for example, templates or third party objects).\n> > +\n> > +A client should use the `kind` and `apiVersion` fields to identify the\n> > +correct protobuf IDL for that message and version, and then decode the\n> > +`bytes` field into that Protobuf message.\n> > +\n> > +Any Unknown value written to stable storage will be given a 4 byte prefix\n> > +`0x6b, 0x38, 0x73, 0x00`, which correspond to `k8s` followed by a zero byte.\n> > +The content-type `application/vnd.kubernetes.protobuf` is defined as\n> > +representing the following schema:\n> > +\n> > -    MESSAGE = '0x6b 0x38 0x73 0x00' UNKNOWN\n> > -    UNKNOWN = <protobuf serialization of k8s.io/kubernetes/pkg/runtime#Unknown>\n> >   +\n> >   +A client should check for the first four bytes, then perform a protobuf\n> >   +deserialization of the remaining bytes into the `runtime.Unknown` type.\n> \n> And if the first four bytes are different, then we will continue decoding\n> to JSON, right?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55183244.\n",
        "createdAt" : "2016-03-09T05:07:45Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 349,
    "diffHunk" : "@@ -1,1 +347,351 @@\nA client should check for the first four bytes, then perform a protobuf\ndeserialization of the remaining bytes into the `runtime.Unknown` type.\n\n## Streaming wire format"
  },
  {
    "id" : "8a7d358e-0e18-4cad-be45-f6a6ee6507a9",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58436b52-2792-47b1-ade9-8df10fcdfae0",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This is something that currently is not supported, right?\n",
        "createdAt" : "2016-03-07T10:17:57Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2879b597-a4c0-4643-a337-42576ab6a32d",
        "parentId" : "58436b52-2792-47b1-ade9-8df10fcdfae0",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The server side is implemented for the correct HTTP spec behavior on\nmissing/incorrect content types.  The client side is not implemented.\n\nOn Mon, Mar 7, 2016 at 4:18 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55183967\n> :\n> \n> > +Servers can define the list of content types they accept and return in\n> > +their API discovery docs, and clients can use protobuf if they support it.\n> > +Allows dynamic configuration during upgrade if the client is already using\n> > +API-discovery.\n> > +\n> > +### Optimistically attempt to send and receive requests using protobuf\n> > +\n> > +Using multiple `Accept` values:\n> > +\n> > -    Accept: application/vnd.kubernetes.protobuf, application/json\n> >   +\n> >   +clients can indicate their preferences and handle the returned\n> >   +`Content-Type` using whatever the server responds. On update operations,\n> >   +clients can try protobuf and if they receive a 415 error, record that and\n> >   +fall back to JSON. Allows the client to be backwards compatible with\n> >   +any server, but comes at the cost of some implementation complexity.\n> \n> This is something that currently is not supported, right?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55183967.\n",
        "createdAt" : "2016-03-09T05:08:22Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 422,
    "diffHunk" : "@@ -1,1 +420,424 @@clients can try protobuf and if they receive a 415 error, record that and\nfall back to JSON. Allows the client to be backwards compatible with\nany server, but comes at the cost of some implementation complexity.\n\n"
  },
  {
    "id" : "15163575-e20a-45a1-bb8c-167eee3aba4e",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fb7241d-8de9-4268-9a5f-7cbf6c9fa42b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So IIUC, that means that supporting protobuffers will require additional tags in the original files (this will be a corresponding tag to currently existing \"json\" tag). Am I right?\n\nIf I understood correctly, if you decide to add a new type to an API, then it will be \"corrected\" by generators, by adding appropriate tag numbers as tags, right? This is nice, but I think it won't be obvious for people and we probably need to clearly document it.\n",
        "createdAt" : "2016-03-07T10:23:53Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "dbae8f6a-c357-493e-8ce3-f45a9a1759d6",
        "parentId" : "5fb7241d-8de9-4268-9a5f-7cbf6c9fa42b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "OK - it seems the answer for it is already below.\n",
        "createdAt" : "2016-03-07T10:26:32Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2f11aa93-ce19-4ddd-bc32-3ecb160428c9",
        "parentId" : "5fb7241d-8de9-4268-9a5f-7cbf6c9fa42b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It does not require it (we could avoid generating the tags) but I think we\nwant people to be able to reorder the gostructs if they want internally.\n\nIf you add a new type, when you run generation the first time your protobuf\nIDL and generated serializers will be created, AND the source type fields\nwill have protobuf struct tags added.  The verify-generated-protobuf script\nshould be checking to verify that those didn't change (and it would fail,\ntelling you that there is a different set of code).\n\nOn Mon, Mar 7, 2016 at 4:24 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55184663\n> :\n> \n> > +clients can indicate their preferences and handle the returned\n> > +`Content-Type` using whatever the server responds. On update operations,\n> > +clients can try protobuf and if they receive a 415 error, record that and\n> > +fall back to JSON. Allows the client to be backwards compatible with\n> > +any server, but comes at the cost of some implementation complexity.\n> > +\n> > +\n> > +## Generation process\n> > +\n> > +Generation proceeds in five phases:\n> > +\n> > +1. Generate a gogo-protobuf annotated IDL from the source Go struct.\n> > +2. Generate temporary Go structs from the IDL using gogo-protobuf.\n> > +3. Generate marshaller/unmarshallers based on the IDL using gogo-protobuf.\n> > +4. Take all tag numbers generated for the IDL and apply them as struct tags\n> > -   to the original Go types.\n> \n> So IIUC, that means that supporting protobuffers will require additional\n> tags in the original files (this will be a corresponding tag to currently\n> existing \"json\" tag). Am I right?\n> \n> If I understood correctly, if you decide to add a new type to an API, then\n> it will be \"corrected\" by generators, by adding appropriate tag numbers as\n> tags, right? This is nice, but I think it won't be obvious for people and\n> we probably need to clearly document it.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55184663.\n",
        "createdAt" : "2016-03-09T05:10:05Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0ecf515b-1a8d-4de3-9f2c-ce3d3ccc1b37",
        "parentId" : "5fb7241d-8de9-4268-9a5f-7cbf6c9fa42b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "SGTM - thanks for explanation.\n\nCan you extend your doc by adding what you wrote in the comment?\n",
        "createdAt" : "2016-03-09T09:29:48Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ef4292ab-4a5a-467d-bfce-c129fb4ee8d4",
        "parentId" : "5fb7241d-8de9-4268-9a5f-7cbf6c9fa42b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Updated\n",
        "createdAt" : "2016-03-14T21:24:21Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 433,
    "diffHunk" : "@@ -1,1 +431,435 @@3. Generate marshaller/unmarshallers based on the IDL using gogo-protobuf.\n4. Take all tag numbers generated for the IDL and apply them as struct tags\n   to the original Go types.\n5. Generate a final IDL without gogo-protobuf annotations as the canonical IDL.\n"
  },
  {
    "id" : "7207fea5-229e-404c-a4d2-87a452523632",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e50a4f8c-2224-478f-97b3-329e6b9acd1d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Are we going to commit those files to repository?\n",
        "createdAt" : "2016-03-07T10:25:22Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "39eb7f35-579c-4964-98f0-df72b7b43d0b",
        "parentId" : "e50a4f8c-2224-478f-97b3-329e6b9acd1d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - that one is also answered below. Sorry - I should have read the whole doc before adding comments.\n",
        "createdAt" : "2016-03-07T10:27:34Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "41f72e0b-e4da-4911-9d6d-abb3a8d5b639",
        "parentId" : "e50a4f8c-2224-478f-97b3-329e6b9acd1d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I think there is value in having the generated proto checked in somewhere.\nThey are stable to input which means diffs should be small.  If we don't\ncheck them in then we have no way of knowing if the generator is broken and\nour proto IDL regressed between two commits without adding an additional\nprocess that detects incompatible schemas.\n\nOn Mon, Mar 7, 2016 at 4:25 AM, Wojciech Tyczynski <notifications@github.com\n\n> wrote:\n> \n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r55184849\n> :\n> \n> > +\n> > +\n> > +## Generation process\n> > +\n> > +Generation proceeds in five phases:\n> > +\n> > +1. Generate a gogo-protobuf annotated IDL from the source Go struct.\n> > +2. Generate temporary Go structs from the IDL using gogo-protobuf.\n> > +3. Generate marshaller/unmarshallers based on the IDL using gogo-protobuf.\n> > +4. Take all tag numbers generated for the IDL and apply them as struct tags\n> > -   to the original Go types.\n> >   +5. Generate a final IDL without gogo-protobuf annotations as the canonical IDL.\n> >   +\n> >   +The output is a `generated.proto` file in each package containing a standard\n> >   +proto2 IDL, and a `generated.pb.go` file in each package that contains the\n> >   +generated marshal/unmarshallers.\n> \n> Are we going to commit those files to repository?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files#r55184849.\n",
        "createdAt" : "2016-03-09T05:11:17Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "85ae483a-3eeb-44c5-acf5-a0457296f7e4",
        "parentId" : "e50a4f8c-2224-478f-97b3-329e6b9acd1d",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - I completely agree with that - that's why I was asking about it.\n",
        "createdAt" : "2016-03-09T09:28:27Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 438,
    "diffHunk" : "@@ -1,1 +436,440 @@The output is a `generated.proto` file in each package containing a standard\nproto2 IDL, and a `generated.pb.go` file in each package that contains the\ngenerated marshal/unmarshallers.\n\nThe Go struct generated by gogo-protobuf from the first IDL must be identical"
  },
  {
    "id" : "ae9f5893-8006-4bf4-ae4c-05e6b055b7f6",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ac0a11-aefe-4251-a13a-8fbf702f2bd9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe, and encoding? So we can say e.g. compressed, encrypted, maybe even json or yaml (for emergency escape hatch).\n",
        "createdAt" : "2016-03-16T00:14:27Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@  rest, like JSON, in order for backwards compatibility in storage to work,\n  so we must add an envelope with apiVersion and kind to wrap the nested\n  object, and make the data format recognizable to clients.\n* Use the [gogo-protobuf](https://github.com/gogo/protobuf) Golang library to generate marshal/unmarshal\n  operations, allowing us to bypass the expensive reflection used by the"
  },
  {
    "id" : "57fb1357-b610-4819-b412-33d22bab807d",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86b850d-f21e-4365-b941-ca9f6b9f919c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah, cool, you got this already.\n",
        "createdAt" : "2016-03-16T00:16:50Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +305,309 @@      optional TypeMeta typeMeta = 1;\n      optional bytes value = 2;\n      optional string contentEncoding = 3;\n      optional string contentType = 4;\n    }"
  },
  {
    "id" : "d927849b-a0f8-468b-a24f-19fc3fda89ec",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c54afea8-fc28-40d3-83de-388e190c85d2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We may want to make a proto -> json/yaml interpreter binary. Actually this might be very important if e.g. you need to fix a broken etcd or some such.\n",
        "createdAt" : "2016-03-16T00:23:20Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5f3d638b-0f6d-4c8f-9c44-de2514c7b385",
        "parentId" : "c54afea8-fc28-40d3-83de-388e190c85d2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Done right, it could be something kubect convert does.\n",
        "createdAt" : "2016-03-16T01:57:28Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 489,
    "diffHunk" : "@@ -1,1 +487,491 @@  possible.\n* Debugging of protobuf related errors is harder due to the binary nature of\n  the format.\n* Migrating API object storage from JSON to protobuf will require that all\n  API servers are upgraded before beginning to write protobuf to disk, since"
  },
  {
    "id" : "4a901715-ee0c-4b02-ba4a-6ed759745db1",
    "prId" : 22600,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d2772c-5db3-44e3-b062-fff678db8a41",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Just out of curiosity how much worse is build time and binary size?\n",
        "createdAt" : "2016-03-16T04:23:09Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "5a9c8b43-4ae8-4b7f-b5e4-3f860df98512",
        "parentId" : "19d2772c-5db3-44e3-b062-fff678db8a41",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "About 15-25%.\n\nPushed updates.\n\nOn Wed, Mar 16, 2016 at 12:23 AM, Derek Carr notifications@github.com\nwrote:\n\n> In docs/proposals/protobuf.md\n> https://github.com/kubernetes/kubernetes/pull/22600#discussion_r56280142\n> :\n> \n> > +handled using our existing API change rules. Tags cannot change within an\n> > +API version.\n> > +\n> > +Generation would be done by developers and then checked into source control,\n> > +like conversions and ugorji JSON codecs.\n> > +\n> > +Because protoc is not packaged well across all platforms, we will add it to\n> > +the `kube-cross` Docker image and developers can use that to generate\n> > +updated protobufs. Protobuf 3 beta is required.\n> > +\n> > +The generated protobuf will be checked with a verify script before merging.\n> > +\n> > +\n> > +## Implications\n> > +\n> > +\\* The generated marshal code is large and will increase build times and binary\n> \n> Just out of curiosity how much worse is build time and binary size?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/22600/files/ebafdccb059907ec7163dfd92cc7cbd54d5d8f9a#r56280142\n",
        "createdAt" : "2016-03-16T15:51:28Z",
        "updatedAt" : "2016-03-17T02:15:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "95cf60be23b40e35b8ab25e7873f366974dea1c4",
    "line" : 483,
    "diffHunk" : "@@ -1,1 +481,485 @@## Implications\n\n* The generated marshal code is large and will increase build times and binary\n  size. We may be able to remove ugorji after protobuf is added, since the\n  bulk of our decoding would switch to protobuf."
  }
]