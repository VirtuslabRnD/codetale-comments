[
  {
    "id" : "7b726ea7-a13a-444b-b277-4efe3d0f7b14",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a2d4f4b-827d-4cd1-9c31-6b8de2ee1267",
        "parentId" : null,
        "authorId" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "body" : "For this whole section, is the key reason admins treat these pods differently in policies due to the duration or is duration merely correlated with importance?  That is, admins set aside fewer guaranteed resources for these short-duration jobs because they can generally afford brief downtime, not merely because they'll finish quickly.  It just so happens that most such jobs can finish quickly.\n",
        "createdAt" : "2016-01-26T00:21:52Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "tags" : [
        ]
      },
      {
        "id" : "bb1a3638-e79f-4a32-a9b0-7c02b31f0fa3",
        "parentId" : "4a2d4f4b-827d-4cd1-9c31-6b8de2ee1267",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Typically, batch style workloads consume as much resource as they can until something applies the brakes.  Transactional web applications typically consume resource in response to user requests.  Transactional web applications tend to stay put once scheduled until a deployment occurs.  Batch style workloads cause more bursts in scheduling.  \n\nCluster administrators often plan their clusters with a view to long running workloads when coming from traditional PaaS background.  Admins in this case want to prioritize their cluster planning around transactional web applications that tend to not move once scheduled and scale based on incoming traffic to the cluster that they can measure.  They are often willing to provide higher quota limits for those workloads because most applications never actually consume up to their limit.  Batch workloads on the other hand are greedy and often consume up to their limit until done and therefore may actually have a greater impact on what is consumed on the node to which its scheduled.\n",
        "createdAt" : "2016-01-26T01:15:41Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "7cd4fa42-d66f-4b24-b142-d10c8ce7732d",
        "parentId" : "4a2d4f4b-827d-4cd1-9c31-6b8de2ee1267",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Batch workloads may use many more resources than requested, but at a lower QoS level, with throughput more important than latency.\n\nThey also often have weaker availability requirements, and may be deferred in time.\n\nAdditionally, because they are bounded in duration, they are launched more often, and a rate limit on creation is needed.\n",
        "createdAt" : "2016-02-19T03:03:45Z",
        "updatedAt" : "2016-02-19T03:03:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@Another example is providing more quota to a database pod than a\npod that performs a database migration.\n\n## Use Cases\n"
  },
  {
    "id" : "5cbf32e7-6614-4372-8933-91e04061855d",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f13aacb-3668-4a97-af18-c756832568ba",
        "parentId" : null,
        "authorId" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "body" : "What happens if a pod matches multiple quotas?  Are the quotas additive or do we take the min?\n\nI.e., suppose the quotas below exist.  What would the quota be for all the Terminating,BestEffort pods?\n\n20 GiB scopes={}\n20 GiB scopes={Terminating}\n20 GiB scopes={Terminating,BestEffort}\n5 GiB scopes={BestEffort}\n",
        "createdAt" : "2016-01-26T00:29:45Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "d324e241-a7f0-4ace-bda2-4174b07bdb18",
        "tags" : [
        ]
      },
      {
        "id" : "e28daf05-f985-458a-a171-0097fca5b09c",
        "parentId" : "4f13aacb-3668-4a97-af18-c756832568ba",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I notice I have a typo, but I will add an example to make this clear.  I had examples in an earlier draft that got removed when I refactored.  A quota with scope=BestEffort would not allow it to track CPU or Memory.  It would only match pods that have best effort quality of service which led proposed cgroup hierarchy would offer no guarantees.  \n",
        "createdAt" : "2016-01-26T01:21:31Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +137,141 @@| BestEffort | Match `kind=Pod` where `status.qualityOfService in (BestEffort)` |\n| NotBestEffort | Match `kind=Pod` where `status.qualityOfService not in (BestEffort)` |\n\nA `BestEffort` scope restricts a quota to tracking the following resources:\n"
  },
  {
    "id" : "23f06c9b-c64e-447c-9d42-bcb8962b3e21",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9787163c-dffb-44cf-9d45-9282c64f5693",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I think having a separate quota only for BE pods only makes sense if you don't allow limit quota on BE pods, since otherwise there's really no difference between a BE pod and a non-BE pod (both have non-zero limit, can run briefly or forever, etc.). I do see later that you don't allow limit quota on BE pods, which makes what you're doing here make more sense... Maybe make some comment along these lines here...\n",
        "createdAt" : "2016-02-16T00:26:20Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +56,60 @@manages.\n\n### Ability to limit impact to node and promote fair-use\n\nThe current `ResourceQuota` API object does not allow the ability"
  },
  {
    "id" : "bd3df7ca-2d9e-4d02-8e1b-3c6521183430",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413480c0-cc84-4ca5-ae77-b9780f31cbf9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "This general issue seems to keep coming up... It seems like we need label-namespace-level ACLs on labels, so we can then create a label namespace to house non-user-modifiable system-generated labels. I wonder if we could even get rid of the concept of field selector entirely if we do that, if we publish every field as a label (?!?)...\n",
        "createdAt" : "2016-02-16T00:27:38Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "8346289b-af7e-4237-879d-57d091669d34",
        "parentId" : "413480c0-cc84-4ca5-ae77-b9780f31cbf9",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am not sure I want the ability to publish every field as a label, but I do think it may make some sense to let you put system style labels in a different space with different ACLs.  As part of defining your API object, you can write the projection code that promotes specific fields on object to that special label-space.  That said, even with this capability, I do think scopes are easier to understand for common use cases.\n",
        "createdAt" : "2016-02-16T15:52:31Z",
        "updatedAt" : "2016-02-16T16:10:42Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "ca614dca-1061-4418-bb13-a3ac90220b8e",
        "parentId" : "413480c0-cc84-4ca5-ae77-b9780f31cbf9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We shouldn't publish every field as a label.\n\nACLs on labels and annotations would be useful.\n",
        "createdAt" : "2016-02-19T04:18:32Z",
        "updatedAt" : "2016-02-19T04:18:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "26600fa5-3b09-4911-8e97-e0ce9670270e",
        "parentId" : "413480c0-cc84-4ca5-ae77-b9780f31cbf9",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "What is the downside of publishing every field as a label (in a separate namespace)? It would allow us to unify field selectors and label selectors (both in use and in implementation/code). If it's in a special namespace we could hide it in when displaying kubectl unless you ask to see that namespace. It would eliminate other kinds of redundancies too, for example having to publish QoS both as a field and as a label (latter so you can use it in MetadataPolicy, former for reasons @derekwaynecarr will remember but not me).\n",
        "createdAt" : "2016-02-19T06:13:23Z",
        "updatedAt" : "2016-02-19T06:13:23Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +256,260 @@explore in the future, but labels are insufficient selection targets\nfor `cluster-administrators` to control footprint.  In those instances,\nyou need fields that are cluster controlled and not user-defined.\n\n## Example"
  },
  {
    "id" : "f248ae6e-00aa-4376-af29-d14605f89e10",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c5b5b1e-57f8-4899-91f6-a287d4d15bcf",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Another alternative would be something closer to the name of the field, such as requests.cpu. I agree cpu.request reads better, but it is ad hoc and possibly more difficult to handle extended resources offered by nodes, such as gpus.\n",
        "createdAt" : "2016-02-19T03:14:04Z",
        "updatedAt" : "2016-02-19T03:14:04Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "dfbd924b-563c-4c35-9c31-f3602370c239",
        "parentId" : "6c5b5b1e-57f8-4899-91f6-a287d4d15bcf",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I am fine to update to requests.cpu in the implementation.  Will take a note to do that.\n",
        "createdAt" : "2016-02-19T21:42:34Z",
        "updatedAt" : "2016-02-19T21:42:34Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +113,117 @@| ------------- | ----------- |\n| cpu | total cpu requests (backwards compatibility) |\n| cpu.request | total cpu requests |\n| cpu.limit | total cpu limits |\n| memory | total memory requests (backwards compatibility) |"
  },
  {
    "id" : "6a19a61d-1f33-444e-9162-72d47ed13903",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46538efd-9f1e-43ff-ac78-f0e71863036f",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This doesn't take restartPolicy into account? A Pod might not have a deadline, but still could terminate in 30 seconds if it had restartPolicy Never or OnFailure.\n",
        "createdAt" : "2016-02-19T03:18:59Z",
        "updatedAt" : "2016-02-19T03:18:59Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "1d2bf57b-289d-4339-a4b3-e9fa0220282e",
        "parentId" : "46538efd-9f1e-43ff-ac78-f0e71863036f",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Saw that there was some commentary about this.\n\nI commented on #20199. I'm ok with a separate mechanism to require reasonable deadlines on terminating pods, but that's worth mentioning here as the solution.\n",
        "createdAt" : "2016-02-19T04:01:28Z",
        "updatedAt" : "2016-02-19T04:01:28Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "fe978913-d824-4b5c-a11c-602d34922f67",
        "parentId" : "46538efd-9f1e-43ff-ac78-f0e71863036f",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "There is nothing stopping another scope that matches on RestartPolicy being added in the future as well...\n",
        "createdAt" : "2016-02-19T21:46:37Z",
        "updatedAt" : "2016-02-19T21:46:37Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@| Scope | Description |\n| ----- | ----------- |\n| Terminating | Match `kind=Pod` where `spec.activeDeadlineSeconds >= 0` |\n| NotTerminating | Match `kind=Pod` where `spec.activeDeadlineSeconds = nil` |\n| BestEffort | Match `kind=Pod` where `status.qualityOfService in (BestEffort)` |"
  },
  {
    "id" : "88e6afa6-8bdb-4e5a-a9d2-098dcbd060c3",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a14f67ac-5c8e-45d8-b4be-12e2a788ee3e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also assumes the addition of `status.qualityOfService`.\n",
        "createdAt" : "2016-02-19T03:52:34Z",
        "updatedAt" : "2016-02-19T03:52:34Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@  Scopes []ResourceQuotaScope `json:\"scopes,omitempty\"`\n}\n```\n\n## Rest API Impact"
  },
  {
    "id" : "32115d86-aabb-4c29-a785-98f4150a634a",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1852c35-4d05-4139-be2b-060968c5780a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Nit: This needs patch merge key tags.\n",
        "createdAt" : "2016-02-19T03:53:05Z",
        "updatedAt" : "2016-02-19T03:53:05Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "2f3f12c2-11ce-47f6-8964-15224a0e7261",
        "parentId" : "c1852c35-4d05-4139-be2b-060968c5780a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also note that API field comments should be in terms of json field names, or plain English (without mentioning names/types)\n",
        "createdAt" : "2016-02-19T03:55:30Z",
        "updatedAt" : "2016-02-19T03:55:30Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@  // Scopes is the set of filters that must match an object for it to be\n  // tracked by the quota\n  Scopes []ResourceQuotaScope `json:\"scopes,omitempty\"`\n}\n```"
  },
  {
    "id" : "fef4c447-c0c3-4834-bb93-313ba43112cf",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5977e979-ffe4-4ddd-b968-7b6361a0fd6c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Aside: Could you please rename ResourceList to ResourceMap?\n",
        "createdAt" : "2016-02-19T03:54:21Z",
        "updatedAt" : "2016-02-19T03:54:21Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "e451d042-42ac-4d47-9352-836050bf533f",
        "parentId" : "5977e979-ffe4-4ddd-b968-7b6361a0fd6c",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Opened and assigned issue: https://github.com/kubernetes/kubernetes/issues/21584\n",
        "createdAt" : "2016-02-19T21:45:59Z",
        "updatedAt" : "2016-02-19T21:45:59Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@type ResourceQuotaSpec struct {\n  // Hard is the set of desired hard limits for each named resource\n  Hard ResourceList `json:\"hard,omitempty\"`\n  // Scopes is the set of filters that must match an object for it to be\n  // tracked by the quota"
  },
  {
    "id" : "68f2e602-a79f-42ba-b4fb-bc40dd3a9037",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9462b844-d451-473b-a4f2-99991fe0828a",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "FieldSelector came up for MetadataPolicy, also. I'd be in favor of that.\n",
        "createdAt" : "2016-02-19T04:03:18Z",
        "updatedAt" : "2016-02-19T04:03:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "058a7638-f458-41f2-b9fa-eb79aa97eea8",
        "parentId" : "9462b844-d451-473b-a4f2-99991fe0828a",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "That said, I'm also ok with the approach proposed above.\n",
        "createdAt" : "2016-02-19T04:04:42Z",
        "updatedAt" : "2016-02-19T04:04:42Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "57f037a6-8d5b-4c9a-ac17-a8744c129a25",
        "parentId" : "9462b844-d451-473b-a4f2-99991fe0828a",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Long term, I am in favor of FieldSelector to handle edge cases, and scopes to handle common cases.\n",
        "createdAt" : "2016-02-19T21:47:25Z",
        "updatedAt" : "2016-02-19T21:47:25Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +212,216 @@\nThis proposal initially enumerated a solution that leveraged a\n`FieldSelector` on a `ResourceQuota` object.  A `FieldSelector`\ngrouped an `APIVersion` and `Kind` with a selector over its\nfields that supported set-based requirements.  It would have allowed"
  },
  {
    "id" : "46cafcaf-9341-4e26-a9ce-a822fc797c2d",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cecdbe8-9f62-49c8-8193-888484ac9d9c",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "s/19084/19804/\n",
        "createdAt" : "2016-02-19T04:06:24Z",
        "updatedAt" : "2016-02-19T04:06:24Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +232,236 @@* Generic field selectors are not yet settled art\n * see [#1362](https://github.com/kubernetes/kubernetes/issues/1362)\n * see [#19084](https://github.com/kubernetes/kubernetes/pull/19804)\n* Discovery API Limitations\n * Not possible to discover the set of field selectors supported by kind."
  },
  {
    "id" : "a470f143-7ab5-496a-969a-bde3b8e7b259",
    "prId" : 19761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65361fe6-2e2b-420d-8282-c9c203b79f5b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Swagger\n",
        "createdAt" : "2016-02-19T04:06:45Z",
        "updatedAt" : "2016-02-19T04:06:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f782089bb2152ee405809fec5f13c73af3967de0",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +233,237 @@ * see [#1362](https://github.com/kubernetes/kubernetes/issues/1362)\n * see [#19084](https://github.com/kubernetes/kubernetes/pull/19804)\n* Discovery API Limitations\n * Not possible to discover the set of field selectors supported by kind.\n * Not possible to discover if a field is readonly, readwrite, or immutable"
  }
]