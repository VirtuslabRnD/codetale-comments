[
  {
    "id" : "32cef449-2da6-4657-a521-baf28215c71e",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1307937-fe2e-4877-978a-28de63f00a26",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "@erictune what would be a good API group to add this too? Will we have an authentication api group eventually to house user and group objects? That seems like a reasonable place to put these types.\n",
        "createdAt" : "2016-03-02T04:02:42Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "ada8ff9b-dcad-4cfe-9322-ee1c778b5517",
        "parentId" : "f1307937-fe2e-4877-978a-28de63f00a26",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "This is more pki/ca-related than auth\n",
        "createdAt" : "2016-03-02T04:16:51Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0089e445-d3ed-423f-92e6-9548917a1f5a",
        "parentId" : "f1307937-fe2e-4877-978a-28de63f00a26",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "I have it under `extensions` for now. Will move it to a more appropriate location when we can figure out where that is.\n",
        "createdAt" : "2016-03-21T22:00:23Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      },
      {
        "id" : "7b2e2121-bbcd-4b61-acbb-a8355c279062",
        "parentId" : "f1307937-fe2e-4877-978a-28de63f00a26",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I have it under extensions for now. Will move it to a more appropriate location when we can figure out where that is.\n\nNo more under extensions please.  We can argue over the exact name in the pull or here, but I don't want any more \"temporary\" resources under extensions.\n",
        "createdAt" : "2016-03-22T12:15:00Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@provisioning script.\n\n## API Changes\n\n### CertificateSigningRequest Object"
  },
  {
    "id" : "b046eccb-087f-43f5-a2c3-146d03124a85",
    "prId" : 20439,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/20439#pullrequestreview-62388282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't want to scope creep this, but I would like a section that describes how other usecases for CSR on the cluster overlaps, and make sure this is not so narrowly scoped that it can't be useful elsewhere.\n",
        "createdAt" : "2016-03-02T19:04:08Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "efa4f723-def7-4fe9-b0ac-055799e0eca0",
        "parentId" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "Can you point me to more info about your use cases? This is certainly general enough for other purposes, but node init is the main one we have.\n",
        "createdAt" : "2016-03-02T21:56:11Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      },
      {
        "id" : "ab8c1a00-9c57-4ac7-a5f9-9039036dcc27",
        "parentId" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "authorId" : "b56795d9-0816-4d28-b233-275e1ee4baf1",
        "body" : "@smarterclayton Do you have other CSR use cases in mind?\n",
        "createdAt" : "2016-04-08T22:33:25Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "b56795d9-0816-4d28-b233-275e1ee4baf1",
        "tags" : [
        ]
      },
      {
        "id" : "0d69239d-f536-405d-b6c7-b5e32db23bd9",
        "parentId" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "authorId" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "body" : "@erictune and I talked about this face-to-face and agreed that pod-level CSRs are out of scope for this proposal. They're necessary, but belong at a logically higher level than this (after clustering takes place).\n",
        "createdAt" : "2016-04-08T22:58:19Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "dabe34ec-22c8-4948-a579-d661cdc42761",
        "tags" : [
        ]
      },
      {
        "id" : "5e03de74-3d8d-424f-995e-bcea35783384",
        "parentId" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Hi all - sorry to dig up an old thread!\r\n\r\nI'm working on cert-manager, which is effectively 'kube-lego 2.0'. It aims to generalise obtaining certificates in Kubernetes, specifically for applications (which it looks like this comment thread touched on way back when).\r\n\r\nWe're looking at this moving into the kubernetes-incubator, and have a few open questions around existing work. I see the k8s certificates API, and we are finding ourselves effectively re-implementing it.\r\n\r\nIt seems like this document is the canonical design proposal for the Certificates API group itself, but I can't seem much information on the expected uses of the API.\r\n\r\nAs it stands, I can see a few issues with the existing certificates API that prevent us being able to adopt it:\r\n\r\n* CSRs are non-namespaced - users are often scoped to only particular namespaces, but still need to make requests. There's no way for us to support this right now, and so users would need create/update/delete permission for all CSR resources, which breaks a lot of isolation models.\r\n\r\n* CSRs directly embed signed certificates in their API status - this may not be too much of an issue, as the Certificate itself needn't be classed as 'secret'.\r\n\r\n* Lack of ability to specify 'issuing source' - so if you look at the cert-manager proposal, we intend to support a variety of issuing sources. This includes a simple CA keypair (like the kube-controller-manager does right now), as well as others such as ACME, and in future potentially Vault. There is no way to 'choose' which issuer should issue a CSR as part of the certificates API, meaning users would have to go \"all or nothing\" with different issuers. In cert-manager, the `Certificate` resource (the equivalent of the `CertificateSigningRequest` resource) has an `issuer` field which allows us to disambiguate. We also allow extra configuration for the issuer to be specified (e.g. in the ACME case, which challenge mechanism should be used)",
        "createdAt" : "2017-09-13T10:02:44Z",
        "updatedAt" : "2017-09-13T10:02:45Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "e6f782b9-c706-4b89-91ee-5645664952e7",
        "parentId" : "f3e103fb-53a0-4748-95ef-99e25fb5d48e",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "For reference, I have a draft proposal drawn up for cert-manager already: https://github.com/jetstack-experimental/cert-manager/pull/50\r\n",
        "createdAt" : "2017-09-13T10:06:14Z",
        "updatedAt" : "2017-09-13T10:06:14Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@advantages of a PKI system. Instead, we propose that the kubelet generate a\nprivate key and a CSR for submission to a cluster-level certificate signing\nprocess.\n\n## Preliminaries"
  },
  {
    "id" : "774b490b-c7ed-4402-945a-9975e9b6f743",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "251ae9e8-f927-44d7-9301-2c47d0e4f139",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "@deads2k can you describe service auto signing here (as prototyped) so we have some context\n",
        "createdAt" : "2016-03-02T19:12:24Z",
        "updatedAt" : "2016-05-03T21:37:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 265,
    "diffHunk" : "@@ -1,1 +263,267 @@## Future Work\n\n- revocation UI in kubectl and CRL support at the apiserver\n- supplemental policy (e.g. cluster CA only issues 30-day certs for hostnames *.k8s.example.com, each new cert must have fresh keys, ...)\n- fully automated provisioning (using a handshake protocol or external list of authorized machines)"
  },
  {
    "id" : "7a60c13c-0329-4294-80ef-8140159dee46",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1efbbe-80a9-4f46-bdc9-fee424dc3b35",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I think this filed should be moved to the body of status.\n",
        "createdAt" : "2016-05-03T22:19:53Z",
        "updatedAt" : "2016-05-03T22:19:53Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +141,145 @@\tMessage string `json:\"message,omitempty\"`\n\t// If request was approved, the controller will place the issued certificate here.\n\tCertificate []byte `json:\"certificate,omitempty\"`\n}\n"
  },
  {
    "id" : "9586fef3-96b7-441e-afad-ef59d8f9493d",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b078745-055f-4eb4-a2a7-befb5ac47b5e",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "enums are namespaced in the api. e.g. this should be CertificateApproved and CertificateDenied\n",
        "createdAt" : "2016-05-03T22:20:17Z",
        "updatedAt" : "2016-05-03T22:20:17Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@const (\n\tApproved RequestConditionType = \"Approved\"\n\tDenied   RequestConditionType = \"Denied\"\n)\n"
  },
  {
    "id" : "d9365384-4375-4bc0-8991-34ac0aaafec1",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a36929dd-52e0-4235-8a3d-38b7694ecac3",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Many of these fileds don't really represent differences from desired state and should probably be moved into spec.\n",
        "createdAt" : "2016-05-03T22:22:10Z",
        "updatedAt" : "2016-05-03T22:22:10Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@\n\t// IP SANs from the request\n\tIPAddresses []string `json:\"ipaddresses,omitempty\"`\n\n\tConditions []CertificateSigningRequestCondition `json:\"conditions,omitempty\"`"
  },
  {
    "id" : "87023340-5ad5-4e5b-8585-306c8f91fc89",
    "prId" : 20439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee262b9-b8aa-41f5-a45d-eba301cd67a5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I didn't see a discussion (or missed it in a previous version) but can I watch the list and steal someone else's certificate?\n",
        "createdAt" : "2016-05-04T00:53:37Z",
        "updatedAt" : "2016-05-04T00:53:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "acfef7c0-2668-4cf6-a408-e527c1e50f83",
        "parentId" : "cee262b9-b8aa-41f5-a45d-eba301cd67a5",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Neither the csr nor the cert contains the private key of the node. A cert just holds the public key half, and isn't a secret (it's presented by the node in every TLS handshake)\n",
        "createdAt" : "2016-05-04T03:18:54Z",
        "updatedAt" : "2016-05-04T03:18:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3d5cd05f-187b-4cbb-88c6-e1f17b39a58a",
        "parentId" : "cee262b9-b8aa-41f5-a45d-eba301cd67a5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Oh, right.\n\nOn Tue, May 3, 2016 at 11:19 PM, Jordan Liggitt notifications@github.com\nwrote:\n\n> In docs/proposals/kubelet-tls-bootstrap.md\n> https://github.com/kubernetes/kubernetes/pull/20439#discussion_r61986759\n> :\n> \n> > +1. **Approved** if the controller should issue the cert\n> > +2. **Denied** if the controller should not issue the cert\n> > +\n> > +The suggested command for listing is `kubectl get csrs`. The approve/deny\n> > +interactions can be accomplished with normal updates, but would be more\n> > +conveniently accessed by direct subresource updates. We leave this for future\n> > +updates to kubectl.\n> > +\n> > +## Security Considerations\n> > +\n> > +### Endpoint Access Control\n> > +\n> > +The ability to post CSRs to the signing endpoint should be controlled. As a\n> > +simple solution we propose that each node be provisioned with an auth token\n> > +(possibly static across the cluster) that is scoped via ABAC to only allow\n> > +access to the CSR endpoint.\n> \n> Neither the csr nor the cert contains the private key of the node. A cert\n> just holds the public key half, and isn't a secret (it's presented by the\n> node in every TLS handshake)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/20439/files/5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c#r61986759\n",
        "createdAt" : "2016-05-04T03:24:20Z",
        "updatedAt" : "2016-05-04T03:24:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a65bb0044d9ac3fc3e7585d09cb6bb33e9c3b2c",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +244,248 @@simple solution we propose that each node be provisioned with an auth token\n(possibly static across the cluster) that is scoped via ABAC to only allow\naccess to the CSR endpoint.\n\n### Expiration & Revocation"
  }
]