[
  {
    "id" : "572b2bde-a312-4904-8ce4-4542331fe684",
    "prId" : 17554,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c678e30-43f3-4ce3-b454-6ed76adb28f7",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "DownwardAPI says \"Items\".  It probably should have said \"Files\", but it doesn't.  Consistency is more important than correctness.  File a bug to fix this for v2 api (seriously :)\n",
        "createdAt" : "2015-11-25T06:15:49Z",
        "updatedAt" : "2015-11-25T06:15:49Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4eca05cd-998b-4278-9993-8864e1cbae94",
        "parentId" : "2c678e30-43f3-4ce3-b454-6ed76adb28f7",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Created #17859\n",
        "createdAt" : "2015-11-27T06:52:43Z",
        "updatedAt" : "2015-11-27T06:52:43Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "e5e240f1-4163-4920-a1db-4c1ee5804b1d",
        "parentId" : "2c678e30-43f3-4ce3-b454-6ed76adb28f7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "This should be \"Items\" for v1\n",
        "createdAt" : "2015-12-01T06:45:06Z",
        "updatedAt" : "2015-12-01T06:45:06Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "862b2ad1-31b4-4c86-8c10-bceaf9e8f294",
        "parentId" : "2c678e30-43f3-4ce3-b454-6ed76adb28f7",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "oh hell, now I don't know.  A sensible name now but inconsistent vs consistent but to be changed later.  I can go either way.\n",
        "createdAt" : "2015-12-01T06:46:11Z",
        "updatedAt" : "2015-12-01T06:46:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "62f7220d6be15c35189a15c5ba0b4416a719586c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +188,192 @@type ConfigDataVolumeSource struct {\n  // A list of config data keys to project into the volume in files\n  Files []ConfigDataVolumeFile `json:\"files\"`\n}\n"
  },
  {
    "id" : "ff609f1a-bdba-4e56-8b11-551270ee0679",
    "prId" : 6477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97bbe9ce-55ab-49cd-bc83-5c2f5f9bdd56",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@tmrts Going to add discussion of use-cases here?\n",
        "createdAt" : "2015-09-18T02:54:32Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "35240c8c-abc0-4fd5-901a-40813489f300",
        "parentId" : "97bbe9ce-55ab-49cd-bc83-5c2f5f9bdd56",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This would also be the place to contextualize this proposal by giving a brief but specific example of how your proposal will address each use-case.\n",
        "createdAt" : "2015-09-18T03:11:37Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "7b18baee-72b2-4a27-b3ef-13ecefdced03",
        "parentId" : "97bbe9ce-55ab-49cd-bc83-5c2f5f9bdd56",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "Shouldn't this stay as is, since it's a brief summary of the problems ?\n",
        "createdAt" : "2015-09-18T17:14:04Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "fc6a9ace-6ea3-4ba2-9833-d267c9450e5e",
        "parentId" : "97bbe9ce-55ab-49cd-bc83-5c2f5f9bdd56",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This can stay as-is now.\n",
        "createdAt" : "2015-11-05T20:39:56Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "2a3c9f5f-43ae-484d-877e-628d34e4a9f5",
        "parentId" : "97bbe9ce-55ab-49cd-bc83-5c2f5f9bdd56",
        "authorId" : "8f7fe7a6-7bc9-4dfb-b9c0-a2f808baa9d1",
        "body" : "Deployment orchestration seems unrelated to the other three problems listed here. Hopefully, this won't be a hammer that we try to use for everything that might be a nail. Better to keep it focused on the problem of application configuration. \n",
        "createdAt" : "2015-11-06T21:24:31Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "8f7fe7a6-7bc9-4dfb-b9c0-a2f808baa9d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c491d671d696187b103f7e217b82a4e37e6c953",
    "line" : null,
    "diffHunk" : "@@ -1,1 +50,54 @@\nGoals of this design:\n\n1.  Describe a `ConfigData` API resource\n2.  Describe the semantics of consuming `ConfigData` as environment variables"
  },
  {
    "id" : "44515b46-3616-48c6-ae9f-d3882292b3a7",
    "prId" : 6477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c5f7e70-647e-4fd6-854c-b156195d45f4",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This seems useful in a limited way.  From the application level you may need configuration directories + files (entire vol) as part of a pre-run hook.  \n\n/cc @kubernetes/sig-big-data \n",
        "createdAt" : "2015-11-05T18:35:04Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "c9ee18d0-d9f6-4f94-9d56-e3265538ed57",
        "parentId" : "3c5f7e70-647e-4fd6-854c-b156195d45f4",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "@bgrant0607 mentioned that as well. That example is a bit outdated. But, you'll be able to retrieve a `ConfigData` object and mount it to container where keys are file names and values are file contents before a container starts. I believe thats what you are asking\n",
        "createdAt" : "2015-11-05T19:09:38Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "1411af24-a05f-4d44-9777-16b99ff09f7b",
        "parentId" : "3c5f7e70-647e-4fd6-854c-b156195d45f4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We should support both volumes and env vars.\n",
        "createdAt" : "2015-11-06T22:09:31Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d1a36b23-5c7e-4b18-95c5-eaa7a0fa6ddf",
        "parentId" : "3c5f7e70-647e-4fd6-854c-b156195d45f4",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "~~Is there any way in this API to disable env variables? As someone actually working with an app, I'm finding them annoying to work around (the service environment variables in particular), so I'd prefer if there were fewer surprising env variables.~~\n",
        "createdAt" : "2015-11-10T18:48:59Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "d326a6fa-3cc5-4324-aa2a-93b8186bdaab",
        "parentId" : "3c5f7e70-647e-4fd6-854c-b156195d45f4",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Got it, env selection is explicit, concerns addressed.\n",
        "createdAt" : "2015-11-10T18:52:32Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c491d671d696187b103f7e217b82a4e37e6c953",
    "line" : null,
    "diffHunk" : "@@ -1,1 +136,140 @@  // dot followed by valid DNS_SUBDOMAIN.\n\tData map[string]string `json:\"data,omitempty\"`\n}\n\ntype ConfigDataList struct {"
  },
  {
    "id" : "cf83ca24-da9b-4808-a961-6e81669c1305",
    "prId" : 6477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4be0d47c-ee97-4c64-ac9a-5a51c9f1e812",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "metadata.name\n",
        "createdAt" : "2015-11-13T04:11:31Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c491d671d696187b103f7e217b82a4e37e6c953",
    "line" : null,
    "diffHunk" : "@@ -1,1 +201,205 @@metadata:\n  name: config-env-example\nspec:\n  containers:\n  - name: etcd"
  },
  {
    "id" : "ee0d2e8c-83b8-4f22-b4e0-d9736be76bb6",
    "prId" : 6477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "string makes binary values a bit more difficult.  Do we need to cover that?\n",
        "createdAt" : "2015-11-18T05:56:31Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "93e6ee30-02c4-4d58-afe4-18918acc18ed",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We need to decide whether the map-keys represent files (as they do in secrets) or whether they are just identifiers in the k-v pair, which are used to expand templates.\n\nI get the sense that a lot of users will want to use this structure to fill in params in a template config file (e.g. confd @kelseyhightower ).  I think that should be the common case, in which case we can be more restrictive on key names (just DNS_SUBDOMAIN).\n",
        "createdAt" : "2015-11-18T05:57:50Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "afd24430-0dde-4211-aa22-89f115569a01",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Another idea I was discussing with @pmorie was to have two sets of data, let's call them A and B, and a field to indicate which of them is current (and the other is previous), and a number between 0 and 999, let's call it the crossover, representing tenths-of-percents. (or maybe 9999, hundredths).  (or maybe 1024 to be a fair modulus).\n\nWhen a consumer (i.e. the volume) wants to use a ConfigData they generate a random int %1000 (or 1024 or whatever we chose above).  If the random number is >= crossover, use whichever dataset is marked as previous.  If the random number is < crossover, use whichever dataset is marked as current.\n\nThis allows a user to push new config data and then increment the crossover (as fast or slow as they need) to transition consumers to the new data.\n\nit's a little complicated, so maybe we don't want to do it just now, but I'd like to see us leave room for it.  Maybe we could put a bit of thought into the REST-ish attributes we want?\n",
        "createdAt" : "2015-11-18T06:08:47Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "b54e5141-131b-46e5-892e-502c45f7e99b",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin somewhere in the github comment spaghetti on this issue is a meatball wherein we discuss that binaries will be handled by #831\n",
        "createdAt" : "2015-11-19T04:01:29Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "4dfb9eac-d020-4b26-a2c3-00ac3721603a",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin \n\n> We need to decide whether the map-keys represent files (as they do in secrets) or whether they are just identifiers in the k-v pair, which are used to expand templates.\n\nI dislike the way the secret volume plugin and its interaction are factored currently today (in fact, it's been on my list since last week to write this up in an issue, which I will do after posting this comment).  In the same dimension, I _do_ like how the downward API volume plugin is factored: you project keys from the downward api into files configured on the volume; ie, the volume maps keys into files.  The current design in the proposal is one that has the same semantics: the volume plugin projects the value into a file configured for the key.\n\nWhere secrets needs to change from a volume standpoint is that you should be able to register the files to project secret keys into.  We originally decided to punt on this in secrets, but now we've solved all the problems of validating path specified in the API in general, so secrets should change.\n\n> Maybe we could put a bit of thought into the REST-ish attributes we want?\n\nAbsolutely -- can we do that as a follow-up to this PR?\n",
        "createdAt" : "2015-11-19T05:12:10Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "241e0440-7446-43fc-9bc6-d4b2663a04b5",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I don't see what init-containers have to do with binary config data?\n\nOn Wed, Nov 18, 2015 at 8:02 PM, Paul Morie notifications@github.com\nwrote:\n\n> In docs/proposals/config_data.md\n> https://github.com/kubernetes/kubernetes/pull/6477#discussion_r45297260:\n> \n> > +\n> > +### API Resource\n> > +\n> > +The `ConfigData` resource will be added to the `extensions` API Group:\n> > +\n> > +```go\n> > +package api\n> > +\n> > +// ConfigData holds configuration data for pods to consume.\n> > +type ConfigData struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n> > -  // dot followed by valid DNS_SUBDOMAIN.\n> > -   Data map[string]string `json:\"data,omitempty\"`\n> \n> @thockin https://github.com/thockin somewhere in the github comment\n> spaghetti is a meatball wherein we discuss that binaries will be handled by\n> #831 https://github.com/kubernetes/kubernetes/issues/831\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/6477/files#r45297260.\n",
        "createdAt" : "2015-11-19T05:31:38Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3ced89c4-40f1-499d-a825-0f5686944b18",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "My point was that I don't think one value per file is actually what people want.  i think they want to have a template file and a bunch of variables and expand those variables into the template and produce a result file.\n",
        "createdAt" : "2015-11-19T05:34:06Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3b131ee2-4af8-4bd8-b8f1-bf88f436a31f",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If I had to hazard a guess, I'd say both k/v and \"as files\" are likely,\nwith a bias to the latter in the beginning and the former in automated\nstuff (attaching env vars to services that you want to consume)\n\nOn Nov 18, 2015, at 12:58 AM, Tim Hockin notifications@github.com wrote:\n\nIn docs/proposals/config_data.md\nhttps://github.com/kubernetes/kubernetes/pull/6477#discussion_r45162580:\n\n> +\n> +### API Resource\n> +\n> +The `ConfigData` resource will be added to the `extensions` API Group:\n> +\n> +```go\n> +package api\n> +\n> +// ConfigData holds configuration data for pods to consume.\n> +type ConfigData struct {\n> - TypeMeta   `json:\",inline\"`\n> - ObjectMeta `json:\"metadata,omitempty\"`\n>   +\n> -  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n> -  // dot followed by valid DNS_SUBDOMAIN.\n> - Data map[string]string `json:\"data,omitempty\"`\n\nWe need to decide whether the map-keys represent files (as they do in\nsecrets) or whether they are just identifiers in the k-v pair, which are\nused to expand templates.\n\nI get the sense that a lot of users will want to use this structure to fill\nin params in a template config file (e.g. confd @kelseyhightower\nhttps://github.com/kelseyhightower ). I think that should be the common\ncase, in which case we can be more restrictive on key names (just\nDNS_SUBDOMAIN).\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/6477/files#r45162580.\n",
        "createdAt" : "2015-11-19T05:40:33Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b33c3fd1-e3d7-4098-98cd-6f91ace9c51d",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We can make the volume which presents these things be fairly powerful without the core design changing.\n\nOne naked value per file?  vs JSON of some values vs k-v vs full template expansion\n",
        "createdAt" : "2015-11-19T05:45:01Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "5c45b8e8-9208-4252-96e2-bc20a5dfc454",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "only change I want to see, then, is that we drop \"dot followed by valid DNS_SUBDOMAIN\" as valid keys.  Not useful, I think.\n",
        "createdAt" : "2015-11-19T05:46:08Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "82732da5-c651-496b-bd55-cc3571f81801",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : ".kubeconfig?\n\n.gitconfig?\n\nOn Nov 19, 2015, at 12:46 AM, Tim Hockin notifications@github.com wrote:\n\nIn docs/proposals/config_data.md\nhttps://github.com/kubernetes/kubernetes/pull/6477#discussion_r45302204:\n\n> +\n> +### API Resource\n> +\n> +The `ConfigData` resource will be added to the `extensions` API Group:\n> +\n> +```go\n> +package api\n> +\n> +// ConfigData holds configuration data for pods to consume.\n> +type ConfigData struct {\n> - TypeMeta   `json:\",inline\"`\n> - ObjectMeta `json:\"metadata,omitempty\"`\n>   +\n> -  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n> -  // dot followed by valid DNS_SUBDOMAIN.\n> - Data map[string]string `json:\"data,omitempty\"`\n\nonly change I want to see, then, is that we drop \"dot followed by valid\nDNS_SUBDOMAIN\" as valid keys. Not useful, I think.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/6477/files#r45302204.\n",
        "createdAt" : "2015-11-19T15:09:02Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e01c4d27-90c0-4ab4-ae01-3b6d19aebb42",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Having the keys allowed differ between secret and config data is really\ngoing to confuse users and complicate using them.\n\nI think it's a really important use case to be able to move the same inputs\nto secrets and vice versa without problem.  We've talked about how the\nbase64 encoding sucks for usability on secrets - maybe we should solve that\nand then have config also support that.\n\nI would really want to tie config data and secrets more closely, not less.\n\nOn Nov 19, 2015, at 12:46 AM, Tim Hockin notifications@github.com wrote:\n\nIn docs/proposals/config_data.md\nhttps://github.com/kubernetes/kubernetes/pull/6477#discussion_r45302204:\n\n> +\n> +### API Resource\n> +\n> +The `ConfigData` resource will be added to the `extensions` API Group:\n> +\n> +```go\n> +package api\n> +\n> +// ConfigData holds configuration data for pods to consume.\n> +type ConfigData struct {\n> - TypeMeta   `json:\",inline\"`\n> - ObjectMeta `json:\"metadata,omitempty\"`\n>   +\n> -  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n> -  // dot followed by valid DNS_SUBDOMAIN.\n> - Data map[string]string `json:\"data,omitempty\"`\n\nonly change I want to see, then, is that we drop \"dot followed by valid\nDNS_SUBDOMAIN\" as valid keys. Not useful, I think.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/6477/files#r45302204.\n",
        "createdAt" : "2015-11-19T15:13:47Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "b8bc2ca3-da44-4c4c-856f-240ebcc2974f",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "@thockin I was saying container volumes, not init-containers.\n",
        "createdAt" : "2015-11-19T16:06:36Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "7fdb54f1-868b-4b90-935c-29abdcafd858",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "@thockin at our earlier discussions (now disappeared in github) we've decided that map[string]string is sufficient for server our use cases. AFAIK there aren't any common config format that is binary in nature apart from encrypted files and certificates (also available in text format). For most configuration files seem like text format is enough. Granted it makes binary data a bit tricky, is this a common concern that we should limit the ConfigData for?\n\nFor your \"dot followed by DNS_SUBDOMAIN\" comment, I agree and we can do something like a valid DNS_SUBDOMAIN for key names and then use the desired file names  as `path: /etc/.gitconfig`, `path: /etc/redis.conf` etc.\n\nFor the `crossover` part, I think such logic would be bloating `ConfigData`. Instead, that part should perhaps be discussed for advanced rolling update logic or in a similar context.\n",
        "createdAt" : "2015-11-19T17:08:14Z",
        "updatedAt" : "2015-11-19T18:51:45Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "4b3f0d1a-c093-4cb8-8774-8b11fa9aa03f",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Let's not let this go off the rails. I'll try to catch up on the discussion.\n",
        "createdAt" : "2015-11-19T20:02:48Z",
        "updatedAt" : "2015-11-19T20:02:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "689abdd6-de4b-4f89-b5d4-31cdd09b1be0",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@smarterclayton @thockin \nBinary values and base64: I think binary won't be common for config, so I'd like to force users to base64 the data if that's what they need. Strings are better for readability, as Clayton mentioned.\n",
        "createdAt" : "2015-11-19T20:11:41Z",
        "updatedAt" : "2015-11-19T20:11:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "3627b75e-524b-4590-9e40-08ac9e5e073e",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Key-value: Users who want to map the items into env vars will break out individual knobs into individual map entries. Users who want to generate files with a config tool will have one entry per file. How would structured data be broken into multiple entries, anyway? The latter is how I expect to use it for our components -- stuff a whole yaml object into each entry.\n",
        "createdAt" : "2015-11-19T20:14:57Z",
        "updatedAt" : "2015-11-19T20:14:57Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a3d51ab7-a0a5-4cee-9ef1-a5a89f6f8697",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Update fuzzing and rolling updates: No, let's not add those features to ConfigData, at least not now and hopefully never. It shouldn't be the role of ConfigData to deal with that.\n\nIf a user wants a rolling update, create a new ConfigData and use Deployment to do a rolling update. Eventually Deployment will be smarter about being less disruptive and/or will add more update strategies.\n",
        "createdAt" : "2015-11-19T20:39:07Z",
        "updatedAt" : "2015-11-19T20:39:07Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "d320e510-a79c-4bed-b0bf-260069577052",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Agree that key rules should be same as secrets. Name remapping should happen when exposed as env vars or files.\n",
        "createdAt" : "2015-11-19T20:59:27Z",
        "updatedAt" : "2015-11-19T20:59:27Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c9a34503-4fcd-4859-abe5-b39709a90b51",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "body" : "@bgrant0607 what do you mean by \"Name remapping should happen when exposed as env vars or files\". Isn't that the opposite of secrets? where keys represent files and there is no remapping? I was suggesting allowing remapping when exposed as env vars or files.\n",
        "createdAt" : "2015-11-19T21:08:22Z",
        "updatedAt" : "2015-11-19T21:08:22Z",
        "lastEditedBy" : "0d2d9977-2328-4ade-b6a6-ba60c2dd5bd5",
        "tags" : [
        ]
      },
      {
        "id" : "a6c12180-f57c-4305-af6c-2c320112e8fe",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "There's discussion in flight on the name restrictions for secrets.  The absences of underscore, for example, really is an oversight.\n\nBut mostly, the secrets volume is just wrong to assume that keys == filenames.\n\nIf we assume that few people has complained about the name format for secrets (yet), maybe we can rev the secrets volume to have an optional explicit file->key mapping, like downwardAPI.  We still can't get rid of the leading dot without breaking compat, so I guess it's fine to leave this as the same spec.  I just hope that doesn't bite us when we do some sort of templating for the volume for config data.\n\nSo I rescind my comment.  Making this the same spec as secrets is better.  and we should fix secrets.  @pmorie @derekwaynecarr - I will file a bug\n",
        "createdAt" : "2015-11-19T23:30:16Z",
        "updatedAt" : "2015-11-19T23:30:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8aafc320-d6db-4a64-a413-6d8f9a6bbe73",
        "parentId" : "b5f60b0b-cc70-418a-8c22-fb1fb266d21e",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I remember now why I didn't create that issue last night: we already have\nan issue for this: #4789\n\nOn Thursday, November 19, 2015, Tim Hockin notifications@github.com wrote:\n\n> In docs/proposals/config_data.md\n> https://github.com/kubernetes/kubernetes/pull/6477#discussion_r45416882:\n> \n> > +\n> > +### API Resource\n> > +\n> > +The `ConfigData` resource will be added to the `extensions` API Group:\n> > +\n> > +```go\n> > +package api\n> > +\n> > +// ConfigData holds configuration data for pods to consume.\n> > +type ConfigData struct {\n> > -   TypeMeta   `json:\",inline\"`\n> > -   ObjectMeta `json:\"metadata,omitempty\"`\n> >   +\n> > -  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n> > -  // dot followed by valid DNS_SUBDOMAIN.\n> > -   Data map[string]string `json:\"data,omitempty\"`\n> \n> There's discussion in flight on the name restrictions for secrets. The\n> absences of underscore, for example, really is an oversight.\n> \n> But mostly, the secrets volume is just wrong to assume that keys ==\n> filenames.\n> \n> If we assume that few people has complained about the name format for\n> secrets (yet), maybe we can rev the secrets volume to have an optional\n> explicit file->key mapping, like downwardAPI. We still can't get rid of the\n> leading dot without breaking compat, so I guess it's fine to leave this as\n> the same spec. I just hope that doesn't bite us when we do some sort of\n> templating for the volume for config data.\n> \n> So I rescind my comment. Making this the same spec as secrets is better.\n> and we should fix secrets. @pmorie https://github.com/pmorie\n> @derekwaynecarr https://github.com/derekwaynecarr - I will file a bug\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/6477/files#r45416882.\n",
        "createdAt" : "2015-11-20T00:24:33Z",
        "updatedAt" : "2015-11-20T00:24:33Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c491d671d696187b103f7e217b82a4e37e6c953",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +135,139 @@  // Data contains the configuration data.  Each key must be a valid DNS_SUBDOMAIN or leading\n  // dot followed by valid DNS_SUBDOMAIN.\n\tData map[string]string `json:\"data,omitempty\"`\n}\n"
  }
]