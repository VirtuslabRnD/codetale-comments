[
  {
    "id" : "b1108a24-6984-4391-929c-cdd41310e888",
    "prId" : 4779,
    "prUrl" : "https://github.com/apache/airflow/pull/4779#pullrequestreview-242659707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9c7f31a-33bc-48cf-bcb9-167c1681cff1",
        "parentId" : null,
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "Add this to let users know that we recommend set relationships using bitshift operators",
        "createdAt" : "2019-05-28T13:15:18Z",
        "updatedAt" : "2019-05-28T13:17:25Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c27da23ebcea1ec6ae2357a31e1f52da43b7ab",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +187,191 @@\nWe recommend you setting operator relationships with bitshift operators rather than ``set_upstream()``\nand ``set_downstream()``.\n\nTraditionally, operator relationships are set with the ``set_upstream()`` and"
  },
  {
    "id" : "0f550722-6e4c-4a1d-8d9b-ba51035c85ab",
    "prId" : 4779,
    "prUrl" : "https://github.com/apache/airflow/pull/4779#pullrequestreview-242659707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8945ca9-ab4b-4017-8677-f0877325f75c",
        "parentId" : null,
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "Let users know `>>` could work on `list[operatos]` as upstream",
        "createdAt" : "2019-05-28T13:16:30Z",
        "updatedAt" : "2019-05-28T13:17:25Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      }
    ],
    "commit" : "37c27da23ebcea1ec6ae2357a31e1f52da43b7ab",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +252,256 @@.. code:: python\n\n    op1 >> [op2, op3] >> op4\n\nis equivalent to:"
  },
  {
    "id" : "2771d271-b7ca-410c-b31d-d3d246ef12f8",
    "prId" : 4805,
    "prUrl" : "https://github.com/apache/airflow/pull/4805#pullrequestreview-209854462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "If we have this file in repo, we should include it instead of copy it's content. It's allow to keep example allways working and fresh. \r\nSee: \r\nhttp://www.sphinx-doc.org/en/1.5/markup/code.html#directive-literalinclude\r\nhttps://github.com/apache/airflow/blob/master/docs/howto/operator.rst",
        "createdAt" : "2019-03-01T17:10:51Z",
        "updatedAt" : "2019-03-01T17:10:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "e5e4b965-ac5d-4383-9cee-bbcd75b9a3c0",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "56b181b5-2e4f-4c48-b5f9-715cb1204f19",
        "body" : "This is a very good idea. But there is no such folder for those scripts. What do you think if we make a dir under docs, like /docs/example_dags/branch_without_trigger.py ? ",
        "createdAt" : "2019-03-01T19:11:57Z",
        "updatedAt" : "2019-03-01T19:11:57Z",
        "lastEditedBy" : "56b181b5-2e4f-4c48-b5f9-715cb1204f19",
        "tags" : [
        ]
      },
      {
        "id" : "608d431e-88f9-4faa-b3ae-6f7d2ca3e418",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "@cixuuz I don't think create a py file iin docs is a good idea.",
        "createdAt" : "2019-03-02T02:55:33Z",
        "updatedAt" : "2019-03-02T02:55:34Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "cfbf1bed-fce1-4c04-8083-5692025b0c24",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "56b181b5-2e4f-4c48-b5f9-715cb1204f19",
        "body" : "Considering this kind of script is only for demo and no other script storing in .py, I agree with u that not doing so. Thank you!",
        "createdAt" : "2019-03-02T03:02:55Z",
        "updatedAt" : "2019-03-02T03:02:55Z",
        "lastEditedBy" : "56b181b5-2e4f-4c48-b5f9-715cb1204f19",
        "tags" : [
        ]
      },
      {
        "id" : "f18f9aad-a964-436a-808c-dbaf6628c2f1",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Files can be stored in the `airflow/example_dags` directory or `airflow/contrib/example_dags` directory. Files from this directory can be automatically tested to confirm their correctness.\r\nExample: \r\n```\r\n.. literalinclude:: ../../airflow/example_dags/example_python_operator.py\r\n    :language: python\r\n    :start-after: [START howto_operator_python_kwargs]\r\n    :end-before: [END howto_operator_python_kwargs]\r\n```\r\nSource: https://raw.githubusercontent.com/apache/airflow/master/docs/howto/operator.rst\r\n\r\nOther scripts are stored in py files.",
        "createdAt" : "2019-03-02T04:41:10Z",
        "updatedAt" : "2019-03-02T04:44:20Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "86fd2a13-719e-4e59-8c31-0cbe02977582",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I will try to extract all examples to separate files and create automatic tests. ",
        "createdAt" : "2019-03-02T04:56:14Z",
        "updatedAt" : "2019-03-02T04:56:14Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "00efe624-50d7-45c9-b821-7777a2911275",
        "parentId" : "df4b868d-ac9f-42af-b284-0fa158d9c869",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "@mik-laj , I don't think this should be a blocker as we have done it for other doc files as well. If we want to extract this file from doc and put it in example folder, we could do it in a later pr. ",
        "createdAt" : "2019-03-02T05:46:57Z",
        "updatedAt" : "2019-03-02T05:46:58Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "80dbf9a0612d3fe1f2029c7a7c529ff57fea3c6b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +762,766 @@.. code:: python\n\n  #dags/branch_without_trigger.py\n  import datetime as dt  \n  "
  },
  {
    "id" : "97ec2a18-6847-4eee-84a5-1164dd537e40",
    "prId" : 5970,
    "prUrl" : "https://github.com/apache/airflow/pull/5970#pullrequestreview-346909504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c4955e4-4fa0-4b82-95c0-fb2323a09d42",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "I think this should also be added to the Updating.md (see my comment).",
        "createdAt" : "2020-01-22T10:04:47Z",
        "updatedAt" : "2020-01-23T09:04:28Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "a97b4f0d-c6a2-409f-9117-b24499ba1975",
        "parentId" : "0c4955e4-4fa0-4b82-95c0-fb2323a09d42",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "That is something users should be aware of when updating Airflow. Don't you think?",
        "createdAt" : "2020-01-22T10:05:47Z",
        "updatedAt" : "2020-01-23T09:04:28Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "7e594fde-1000-41fd-a46a-8044ea14dbab",
        "parentId" : "0c4955e4-4fa0-4b82-95c0-fb2323a09d42",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Agree with @feluelle , let's add this to Updating.md\r\n\r\nGood work @m1racoli ",
        "createdAt" : "2020-01-22T10:12:59Z",
        "updatedAt" : "2020-01-23T09:04:28Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "a07b20f2-5362-4f3d-ae0d-8cdde49ff389",
        "parentId" : "0c4955e4-4fa0-4b82-95c0-fb2323a09d42",
        "authorId" : "ae5763a9-2cba-40ab-a391-799b1e892737",
        "body" : "Good point and thanks! Will update Updating.md.",
        "createdAt" : "2020-01-22T21:18:26Z",
        "updatedAt" : "2020-01-23T09:04:28Z",
        "lastEditedBy" : "ae5763a9-2cba-40ab-a391-799b1e892737",
        "tags" : [
        ]
      }
    ],
    "commit" : "d600f6ee6e3941d58d80473e0b95aa6c0ba7e87f",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1059,1063 @@a cascaded skip from ``task1``. ``task4`` is downstream of ``task1`` and\n``task2``, but it will not be skipped, since its ``trigger_rule`` is set to\n``all_done``.\n\n.. image:: img/latest_only_with_trigger.png"
  },
  {
    "id" : "740aacc4-9404-4c56-acb6-bd9d46959790",
    "prId" : 6999,
    "prUrl" : "https://github.com/apache/airflow/pull/6999#pullrequestreview-337998509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d89a0a2-3b42-4bce-b980-437a46d18fe9",
        "parentId" : null,
        "authorId" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "body" : "While this is mentioned later on, it is a concept that is often misunderstood (even the tutorial had to emphasise this). I still have colleagues who don't realize a DAG is actually code...",
        "createdAt" : "2020-01-03T09:23:50Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9ba2387037840f0268cd08186a8fef113f5233",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +35,39 @@\nA DAG is defined in a Python script, which represents the DAGs structure (tasks\nand their dependencies) as code.\n\nFor example, a simple DAG could consist of three tasks: A, B, and C. It could"
  },
  {
    "id" : "75f52f0d-7a21-4680-bbb4-e1a30d968eb2",
    "prId" : 6999,
    "prUrl" : "https://github.com/apache/airflow/pull/6999#pullrequestreview-337998664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "718c9c85-4e1c-4e3d-a027-7645a1af9293",
        "parentId" : null,
        "authorId" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "body" : "Added section for DAG Runs and execution_date, as I feel they are important concepts and give a lot of context.",
        "createdAt" : "2020-01-03T09:24:18Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9ba2387037840f0268cd08186a8fef113f5233",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +119,123 @@.. _concepts:dagruns:\n\nDAG Runs\n========\n"
  },
  {
    "id" : "16382198-ec94-4fab-89b9-46c71d998f91",
    "prId" : 6999,
    "prUrl" : "https://github.com/apache/airflow/pull/6999#pullrequestreview-338415455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8831237d-3921-424a-ba70-de88f4b98e27",
        "parentId" : null,
        "authorId" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "body" : "Moved Task and Task Instance up (before Operator) as they are kind of more high level concepts. We start off talking about workflow / dependencies / orchestration, so rather continue with that and then dive lower into operator details.\r\nI feel this more clearly shows what a dependency looks like and what is upstream/downstream.",
        "createdAt" : "2020-01-03T09:25:41Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "tags" : [
        ]
      },
      {
        "id" : "672b96e9-f376-4afe-8820-0bb7401c52f7",
        "parentId" : "8831237d-3921-424a-ba70-de88f4b98e27",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "❤️ ",
        "createdAt" : "2020-01-05T18:51:38Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9ba2387037840f0268cd08186a8fef113f5233",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +147,151 @@.. _concepts:tasks:\n\nTasks\n=====\n"
  },
  {
    "id" : "d588a343-78ee-4e9d-b847-87b3691422f7",
    "prId" : 6999,
    "prUrl" : "https://github.com/apache/airflow/pull/6999#pullrequestreview-338415455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e912edd1-f066-41c3-83a3-4e614a2d6bf1",
        "parentId" : null,
        "authorId" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "body" : "Not sure how you feel about this note - but I think differentiating between previous and upstream is important for a new user especially. The concepts of upstream / downstream task didn't sink in for me at first and explicitly calling them out from previous would have helped me immediately understand.",
        "createdAt" : "2020-01-03T09:30:56Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "tags" : [
        ]
      },
      {
        "id" : "c74d6151-d81e-4d36-847b-5bb28373ab45",
        "parentId" : "e912edd1-f066-41c3-83a3-4e614a2d6bf1",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "❤️ ",
        "createdAt" : "2020-01-05T18:52:59Z",
        "updatedAt" : "2020-01-06T05:12:00Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9ba2387037840f0268cd08186a8fef113f5233",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +208,212 @@Here, *previous* refers to the logical past/prior ``execution_date``, that runs independently of other runs,\nand *upstream* refers to a dependency within the same run and having the same ``execution_date``.\n\n.. note::\n    The Airflow documentation sometimes refers to *previous* instead of *upstream* in places, and vice-versa."
  },
  {
    "id" : "25ffb7bc-e027-494e-b2ba-bce3c5000aea",
    "prId" : 7133,
    "prUrl" : "https://github.com/apache/airflow/pull/7133#pullrequestreview-413089271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dae50f5-6bce-4a0f-b905-0b3e7ffd10f1",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "can you add the import here? `from airflow.exceptions import ...`",
        "createdAt" : "2020-05-16T16:15:23Z",
        "updatedAt" : "2020-05-16T16:21:16Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "d3bc6471-d247-466d-9cc2-d2896c5aae2d",
        "parentId" : "5dae50f5-6bce-4a0f-b905-0b3e7ffd10f1",
        "authorId" : "9da97bef-3e93-4c17-8ea6-b1c18b751d15",
        "body" : "done :)",
        "createdAt" : "2020-05-16T16:22:06Z",
        "updatedAt" : "2020-05-16T16:22:06Z",
        "lastEditedBy" : "9da97bef-3e93-4c17-8ea6-b1c18b751d15",
        "tags" : [
        ]
      }
    ],
    "commit" : "48bea5e82fbd005496437dc216568186f8f0c316",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1236,1240 @@\n.. code:: python\n\n  from airflow.exceptions import AirflowFailException, AirflowSkipException\n"
  },
  {
    "id" : "fb7b4997-3b83-4924-9123-a3258c99b912",
    "prId" : 8962,
    "prUrl" : "https://github.com/apache/airflow/pull/8962#pullrequestreview-419651092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1e2115c-f38d-4251-984b-544f0a7d7691",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "For the basic example I think it might be clearer if we didn't use \"multiple_outputs\"",
        "createdAt" : "2020-05-22T10:10:12Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "df512508-1d47-415c-9259-eae6586c908b",
        "parentId" : "e1e2115c-f38d-4251-984b-544f0a7d7691",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "I rather do a more complete E2E tutorial here. We may want to switch the Hello World example on the tutorial page with an even simpler example. Thoughts?",
        "createdAt" : "2020-05-22T17:15:30Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "5641616d-5ef1-4f84-bad9-5a654ce25c8c",
        "parentId" : "e1e2115c-f38d-4251-984b-544f0a7d7691",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "created #9041 as a follow up task",
        "createdAt" : "2020-05-27T22:23:06Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dd411303e2604e1e0a81d91b186b189733db332",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +140,144 @@    )\n\n    @dag.task(multiple_outputs=True)\n    def prepare_email(raw_json: str) -> Dict[str, str]:\n      external_ip = json.loads(raw_json)['origin']"
  },
  {
    "id" : "287ec434-c782-4920-b15f-61f2540f9e3b",
    "prId" : 8962,
    "prUrl" : "https://github.com/apache/airflow/pull/8962#pullrequestreview-433669968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Do we still need this `.output`? The AIP didn't have that, and its much \"nicer\" without it.",
        "createdAt" : "2020-05-22T10:10:49Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "733131e0-36e9-4ebf-852c-600700738db0",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "The AIP used `__call__` instead which was a bit more verbose and cofusing in my opinion. I rather keep `.output` as it allows for more composable DAGs.",
        "createdAt" : "2020-05-22T16:55:08Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "3f71d7d9-ab4b-493c-8d63-8a13aacfad91",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Can you explain what you mean about \"more composable DAGs\"? I don't understand what you mean.\r\n\r\nThe AIP <https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-31%3A+Airflow+functional+DAG+definition> has this:\r\n\r\n```python\r\n  ip_info = get_ip()\r\n  subject = email_subject_generator(ip_info)\r\n  body = email_body_generator(ip_info)\r\n  send_email(subject=subject, html_content=body)\r\n```\r\n\r\nSo this PR doesn't implement what we voted on.  ",
        "createdAt" : "2020-06-16T16:59:20Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "0dacb50f-516f-45ea-bc21-842f7170a78f",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "The `output` part was implemented already as part of a previous PR. This PR focuses on `@task` only. \r\n\r\nThe main difference between the proposed approach vs current approach is that in the current approach  we do not need to `call` normal operators. This should reduce complexity on creating functional DAGs. \r\n\r\nIn addition, existing operators may have templated fields that are mandatory (example `subject` is required in `EmailOperator` initialization). This basically means that we need to overwrite them on `call` which is a bit confusing (see example below or example on AIP)\r\n\r\nThe `output` is basically a way to access XComArg for non callable operators. This allows a more smooth definition of functional DAGs between normal operators and `@task` operators.\r\n\r\nOld example:\r\n```python\r\n    get_ip = SimpleHttpOperator(\r\n        task_id='get_ip', endpoint='get', method='GET', xcom_push=True\r\n    )\r\n\r\n    @dag.task(multiple_outputs=True)\r\n    def prepare_email(raw_json: str) -> Dict[str, str]:\r\n      external_ip = json.loads(raw_json)['origin']\r\n      return {\r\n        'subject':f'Server connected from {external_ip}',\r\n        'body': f'Seems like today your server executing Airflow is connected from the external IP {external_ip}<br>'\r\n      }\r\n    server_info = get_ip()\r\n    email_info = prepare_email(server_info)\r\n      \r\n    send_email = EmailOperator(\r\n        task_id='send_email',\r\n        to='example@example.com',\r\n        subject='',\r\n        html_content=''\r\n    )\r\n    send_email(subject=email_info['subject'], html_content=email_info['body'])\r\n```\r\n\r\nNew approach:\r\n```python\r\n\r\n    get_ip = SimpleHttpOperator(\r\n        task_id='get_ip', endpoint='get', method='GET', xcom_push=True\r\n    )\r\n\r\n    @dag.task(multiple_outputs=True)\r\n    def prepare_email(raw_json: str) -> Dict[str, str]:\r\n      external_ip = json.loads(raw_json)['origin']\r\n      return {\r\n        'subject':f'Server connected from {external_ip}',\r\n        'body': f'Seems like today your server executing Airflow is connected from the external IP {external_ip}<br>'\r\n      }\r\n\r\n    email_info = prepare_email(get_ip.output)\r\n\r\n    send_email = EmailOperator(\r\n        task_id='send_email',\r\n        to='example@example.com',\r\n        subject=email_info['subject'],\r\n        html_content=email_info['body']\r\n    )\r\n```\r\n\r\nI do believe the new approach is better. I'm happy to change the AIP and submit it for vote if that seems something that may be required.",
        "createdAt" : "2020-06-16T17:15:14Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "4e00a5f7-034b-4e2f-ac91-d141df840b2b",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Ahhh gotcha. I hadn't noticed/appreciated the difference between `ip_info = get_ip()` and `get_ip.output` and was merging them together in my head.",
        "createdAt" : "2020-06-16T17:28:17Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "1745b37f-9a1b-4887-a0d1-74a59c4eeb5d",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Could you update the AIP, and draft a short summary change to the list with lazy consensus (i.e. if no one objects within 48 hours we'll merge it) please?",
        "createdAt" : "2020-06-16T17:32:05Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "94f2ab64-f9e9-4c69-84b6-de1904561dd6",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Sent message to mailing list: https://lists.apache.org/thread.html/rc40ea8171be80365c46ce29b4c8cfacc7567963c0df6af6056537c63%40%3Cdev.airflow.apache.org%3E",
        "createdAt" : "2020-06-16T19:03:41Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "e11e814e-f1d6-46cb-ba88-c34b8b0effc3",
        "parentId" : "47e748a4-a5f1-486f-9730-54349e71e193",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Resolving after update passed in mailing list",
        "createdAt" : "2020-06-18T21:46:32Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dd411303e2604e1e0a81d91b186b189733db332",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +148,152 @@      }\n\n    email_info = prepare_email(get_ip.output)\n\n    send_email = EmailOperator("
  },
  {
    "id" : "77930926-a9a6-4758-95a0-ad9cb089d163",
    "prId" : 8962,
    "prUrl" : "https://github.com/apache/airflow/pull/8962#pullrequestreview-419896728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Unfortunately we can't use f-Strings, because we still support Python 2.7 in the 1.10.x series.",
        "createdAt" : "2020-05-27T12:02:20Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "687530e2-0aff-45f4-b3a0-01dcb8574317",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "So if we want this in 1.10.11 we need to be very careful :/",
        "createdAt" : "2020-05-27T12:05:58Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "1c61d2d5-7400-4d74-aac4-f0f924ea306f",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "The question is do we want to backport it?",
        "createdAt" : "2020-05-27T17:29:57Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "8dc15172-68fc-4cc3-a93e-9f2d618dc6ed",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Or we could use [future-fstrings](https://github.com/asottile/future-fstrings). We already have it as dep of a [dep](https://github.com/apache/airflow/search?q=future-fstrings&unscoped_q=future-fstrings) and add `# -*- coding: future_fstrings -*-`.",
        "createdAt" : "2020-05-27T18:49:26Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "2d48c530-fbf5-40d1-8b50-edc9e3235d49",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Given this is an example DAG on a document, I don't think it really matters that much. If users want to use it on python 2 (which btw is already deprecated) they can change it to format. But I think we should adapt to use py3 examples better.",
        "createdAt" : "2020-05-27T21:49:06Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "aeace4a1-8867-404e-9c64-3cffac9be276",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "There are more cases where you are using F-Strings https://github.com/apache/airflow/pull/8962#discussion_r431670798",
        "createdAt" : "2020-05-28T08:34:54Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "de824df1-7fb8-409e-a1d6-a7789244b95b",
        "parentId" : "ae39a138-85e6-4b52-8d83-0d772fc17798",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "f-strings are not a blocker and we are using them in many places ",
        "createdAt" : "2020-05-28T08:40:04Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dd411303e2604e1e0a81d91b186b189733db332",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +145,149 @@      return {\n        'subject':f'Server connected from {external_ip}',\n        'body': f'Seems like today your server executing Airflow is connected from the external IP {external_ip}<br>'\n      }\n"
  },
  {
    "id" : "cb42081d-d687-4a91-a3d1-7c434afb4435",
    "prId" : 8962,
    "prUrl" : "https://github.com/apache/airflow/pull/8962#pullrequestreview-434252864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Random thought. Functional dags is perhaps not the right name for this whole feature. It's not like functional programming where a something is run without side-effects.\r\n\r\nWhat would people think about renaming this to \"Literate DAGs\"? I'll take to the mailing list if people agree, just something doesn't quite sit right with me about \"functional\" today.\r\n\r\nIf no one else likes this/thinks functional is great then I'll not worry.",
        "createdAt" : "2020-06-16T17:08:12Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "5c16862d-2b57-4756-a596-5896103a7bee",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "And we can discuss this _after_ this PR is merged if we want. It's not a blocker on merging the PR.",
        "createdAt" : "2020-06-16T17:12:01Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "51990244-fdd7-4b98-a3b5-0c46a0040292",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "That's fair. The Functional DAGs comes from the AIP title itself. I do understand the confusion, but not sure if literate is better. \r\n\r\nIdeally though, having XComArg and all this, it should allow DAGs to be written without as much side effects. You will be able to paramatrize an operator such that it is indeed more functional (takes A and B, outputs C) instead of current approach where you mostly generate artifacts that depend on Airflow context and such they are side effects.\r\n\r\nNot sure if the above makes sense. In my mind, it makes it more functional (less prone to side effects) as you make operators resemble more functions, and XComArgs map to function parameters and function outputs. ",
        "createdAt" : "2020-06-16T17:27:02Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "85231fb0-ed92-4380-8991-df29ef1df987",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Does this need any name? Can't we just say that this is a way how users can define DAGs? Personally I would encourage users to use this way instead of using XComs. WDYT?",
        "createdAt" : "2020-06-17T07:10:55Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "4ec649ef-e2fa-4bbf-9940-d88083f2f9c1",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Fair. Main issue is that it does introduce a new syntax so for backwards compatible issues I would add a name to this.\r\n\r\nWe can switch all documentation to use this style on 2.0 and therefore remove this specific section (or collapse it)",
        "createdAt" : "2020-06-18T00:47:34Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "26b4fa03-9311-42b4-a8b5-c7a4291b643e",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "@casassg do we have any backwards issues other than metaclass? ",
        "createdAt" : "2020-06-18T07:57:09Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "1ba4cf43-e117-4e87-9e07-204a721e9ae1",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "That's true. Mostly saying as a full refactor of user docs on how to write DAGs may be more adequate for Airflow 2.0 than 1.10. But happy to reconsider this. If we go down that path, we should do it in a separate PR though. This PR is already become large enough",
        "createdAt" : "2020-06-18T18:18:56Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "45852b79-1123-441c-bfc6-28671f872644",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Definitely! We should make an issue for that, discuss and then adjust the docs in a follow-up PR",
        "createdAt" : "2020-06-19T08:28:29Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "c0e2261a-ba9c-440d-a6ce-d8509190ac32",
        "parentId" : "712b84d0-c944-4ecf-9b9d-0b9159e59008",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Created #9415 ",
        "createdAt" : "2020-06-19T17:54:39Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dd411303e2604e1e0a81d91b186b189733db332",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +119,123 @@.. _concepts:functional_dags:\n\nFunctional DAGs\n---------------\n"
  },
  {
    "id" : "b495ecd5-764c-4f34-80e4-dfaf5b42ca82",
    "prId" : 8962,
    "prUrl" : "https://github.com/apache/airflow/pull/8962#pullrequestreview-433667772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d765dc-b291-4417-9dcf-b55ea7f40fd1",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Do we need to add a note here with caveats about \"don't make the list dynamic/quickly changing\"?",
        "createdAt" : "2020-06-16T17:11:02Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "c906ede4-6f6a-43fb-a0b6-1a7d40e7fe7d",
        "parentId" : "d9d765dc-b291-4417-9dcf-b55ea7f40fd1",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Adding a note `Avoid generating this list dynamically to keep dag topology stable between DAG runs`\r\n\r\nIf we have dag serialization and dag versioning, that should be fine in the future though right? 👀 \r\n\r\n",
        "createdAt" : "2020-06-16T17:22:06Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      },
      {
        "id" : "38a3f057-b218-429e-a493-4a88be5d503c",
        "parentId" : "d9d765dc-b291-4417-9dcf-b55ea7f40fd1",
        "authorId" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "body" : "Added comment.",
        "createdAt" : "2020-06-18T21:42:08Z",
        "updatedAt" : "2020-06-23T18:02:27Z",
        "lastEditedBy" : "d22b786b-b06e-462c-a530-7ee1b6ae12d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3dd411303e2604e1e0a81d91b186b189733db332",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +262,266 @@\n    # Avoid generating this list dynamically to keep DAG topology stable between DAG runs\n    for user_id in user_ids:\n      update_user(user_id)\n"
  },
  {
    "id" : "f14f4d9d-d836-4f88-a4c3-42cb41e17d80",
    "prId" : 10756,
    "prUrl" : "https://github.com/apache/airflow/pull/10756#pullrequestreview-483747086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52be7ec8-70c8-40eb-b4d0-b3c6ef6f7136",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "concepts.rst should have only the core concepts. Additional information specific to a specific topic should be included in the topic article.  For example, queues are unique to CeleryExecutor, so they are described in [CeleryExecutor](https://airflow.readthedocs.io/en/latest/executor/celery.html#queues).",
        "createdAt" : "2020-09-08T01:43:12Z",
        "updatedAt" : "2020-09-08T22:08:58Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "2647f57059b26836c14dc2d2f60b844f8020588b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +159,163 @@.. _concepts:executor_config:\n\nexecutor_config\n===============\n"
  }
]