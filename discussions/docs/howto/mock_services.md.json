[
  {
    "id" : "21b6b0d1-2195-487a-875a-4d9d3105e26a",
    "prId" : 3247,
    "prUrl" : "https://github.com/zio/zio/pull/3247#pullrequestreview-387179471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e0becd4-4c46-4dbc-8f4d-da8abdb1a7a3",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Great that we have a clear separation between source and test now!",
        "createdAt" : "2020-04-03T11:39:19Z",
        "updatedAt" : "2020-04-03T12:14:17Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c507dfd0f3ecdb685df9e5b69d3bd10b856a46c9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +79,83 @@## Creating a mock service\n\nWe'll be assuming you've read [How to use modules and layers][doc-use-modules-and-layers] guide. In the main sources we define the _service_, a module alias and _capability accessors_. In test sources we're defining the _mock object_ which extends `zio.test.mock.Mock` which holds _capability tags_ and _compose layer_.\n\n```scala mdoc:silent"
  },
  {
    "id" : "f2e9c507-2fb1-45be-bbf4-d200da251aba",
    "prId" : 3247,
    "prUrl" : "https://github.com/zio/zio/pull/3247#pullrequestreview-387179471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3367e41a-e4ce-445d-a321-a134c73c4f24",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Maybe say something about what this is so people don't just think they can do `ZIO.runtime[R]`?",
        "createdAt" : "2020-04-03T11:43:17Z",
        "updatedAt" : "2020-04-03T12:14:17Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c507dfd0f3ecdb685df9e5b69d3bd10b856a46c9",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +154,158 @@val compose: URLayer[Has[Proxy], Example] =\n  ZLayer.fromServiceM { proxy =>\n    withRuntime.map { rts =>\n      new Example.Service {\n        val static                                 = proxy(Static)"
  },
  {
    "id" : "e8bdf8b8-f072-49f7-bd1c-3d1587fe03a1",
    "prId" : 3247,
    "prUrl" : "https://github.com/zio/zio/pull/3247#pullrequestreview-387207276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe973a5d-364f-45db-b7ac-c6f39e60c634",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Why do we need to unsafely run a sink or a stream?",
        "createdAt" : "2020-04-03T11:44:24Z",
        "updatedAt" : "2020-04-03T12:14:17Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "3c44de46-507b-49ad-b794-df9a40a6bf06",
        "parentId" : "fe973a5d-364f-45db-b7ac-c6f39e60c634",
        "authorId" : "73db70fa-89e1-4c46-9a34-73cfc3db7d43",
        "body" : "The internal mock machinery returns an `IO[E, A]` where `A <: ZStream` or `A <: ZSink`.\r\nFor ZStream `E = Nothing`, becouse any errors happening in creation of the stream are deferred to the first `take` (moved into streams error channel `ZStream[_, E, _]`). For `ZSink` any errors happening upon creation are caught immidietly resulting in a failed Sink, so we need to manually move the error from our internal mock `IO[E, _]` to a failed ZSink.",
        "createdAt" : "2020-04-03T12:20:28Z",
        "updatedAt" : "2020-04-03T12:20:28Z",
        "lastEditedBy" : "73db70fa-89e1-4c46-9a34-73cfc3db7d43",
        "tags" : [
        ]
      },
      {
        "id" : "5461257c-47e6-4328-89f4-360e8bc9b662",
        "parentId" : "fe973a5d-364f-45db-b7ac-c6f39e60c634",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Could we do something like `io.foldCauseM(e => ZStream.fail(e), stream)`? Maybe I'm not understanding.",
        "createdAt" : "2020-04-03T12:24:42Z",
        "updatedAt" : "2020-04-03T12:24:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c507dfd0f3ecdb685df9e5b69d3bd10b856a46c9",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +166,170 @@        def overloaded(arg1: Long)                 = proxy(Overloaded._1, arg1)\n        def function(arg1: Int)                    = rts.unsafeRunTask(proxy(Function, arg1))\n        def sink(a: Int)                           = rts.unsafeRun(proxy(Sink, a).catchAll(error => UIO(ZSink.fail(error))))\n        def stream(a: Int)                         = rts.unsafeRun(proxy(Stream, a))\n      }"
  },
  {
    "id" : "1a7ef2fc-f24a-4ccb-8a8c-aee5ca910e95",
    "prId" : 3247,
    "prUrl" : "https://github.com/zio/zio/pull/3247#pullrequestreview-387205622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3855c89-8d38-47ef-a986-91cf3f6395db",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Any other types we want to support mocking? `ZManaged`? `ZSTM`? Any way to abstract over this?",
        "createdAt" : "2020-04-03T11:55:51Z",
        "updatedAt" : "2020-04-03T12:14:17Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "e136848d-895d-4ab1-93e8-f46310a75f7b",
        "parentId" : "a3855c89-8d38-47ef-a986-91cf3f6395db",
        "authorId" : "73db70fa-89e1-4c46-9a34-73cfc3db7d43",
        "body" : "Yes, we should have all ZIO data types covered. I don't see a clean way to abstract over this ATM, but will definately think about it in future.",
        "createdAt" : "2020-04-03T12:22:13Z",
        "updatedAt" : "2020-04-03T12:22:14Z",
        "lastEditedBy" : "73db70fa-89e1-4c46-9a34-73cfc3db7d43",
        "tags" : [
        ]
      }
    ],
    "commit" : "c507dfd0f3ecdb685df9e5b69d3bd10b856a46c9",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +132,136 @@- `A` is the type of return value it can produce\n\nThe `Capability` type is not publicly available, instead you have to extend `Mock` dependent types `Effect`, `Method`, `Sink` or `Stream`.\n\nWe model input arguments according to following scheme:"
  }
]