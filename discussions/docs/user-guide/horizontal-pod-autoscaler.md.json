[
  {
    "id" : "6842cdde-1030-4c7f-8a4e-e131402edb83",
    "prId" : 16135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a6b812e-b5ca-456d-956a-31c625ed1578",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Do we throw an event when this happens or anything that the user can see when they get in this state?  I think it will be a common error.  \n",
        "createdAt" : "2015-10-23T00:10:08Z",
        "updatedAt" : "2015-10-26T09:26:53Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "ebc42ff0-7315-4966-9fd1-52e07ea55219",
        "parentId" : "7a6b812e-b5ca-456d-956a-31c625ed1578",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Yes, we will fire an event with reason: \"FailedGetMetrics\" and message like: \"failed to get cpu utilization: failed to get CPU consumption and request: some pods do not have request for cpu\".\n",
        "createdAt" : "2015-10-23T17:44:31Z",
        "updatedAt" : "2015-10-26T09:26:53Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d243d514ed9ec5aada282ef718f4174ceda5aaa",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@CPU utilization is the recent CPU usage of a pod divided by the sum of CPU requested by the pod's containers.\nPlease note that if some of the pod's containers do not have CPU request set,\nCPU utilization for the pod will not be defined and the autoscaler will not take any action.\nFurther details of the autoscaling algorithm are given [here](../design/horizontal-pod-autoscaler.md#autoscaling-algorithm).\n"
  },
  {
    "id" : "7412882f-52de-4ac2-b2bc-fd47d822b818",
    "prId" : 16135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "814bff3a-d83d-4b2d-a2f6-6eb86d5743b8",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I think this section could be rewritten a bit more concisely as follows:\n\nCurrently in Kubernetes, it is possible to perform a rolling update by managing Replication Controllers directly, or by using the Deployment object, which manages the underlying Replication Controllers for you. Horizontal pod autoscaler only supports the latter approach: the horizontal pod autoscaler is bound to the deployment object, it sets the size for the deployment object, and the deployment is responsible for setting sizes of underlying replication controllers. Horizontal pod autoscaler does not work with rolling update using direct manipulation of replication controllers, i.e. you cannot bind a horizontal pod autoscaler to a replication controller and do rolling update (e.g. using `kubectl rolling-update`). The reason this doesn't work is that when rolling update creates a new replication controller, the horizontal pod autoscaler will not be bound to the new replication controller.\n",
        "createdAt" : "2015-10-23T08:02:26Z",
        "updatedAt" : "2015-10-26T09:26:53Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "a789aa94-45cb-4e0f-be9f-3f594627d982",
        "parentId" : "814bff3a-d83d-4b2d-a2f6-6eb86d5743b8",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Done, thanks!\n",
        "createdAt" : "2015-10-23T17:52:02Z",
        "updatedAt" : "2015-10-26T09:26:53Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d243d514ed9ec5aada282ef718f4174ceda5aaa",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@\n\n## Autoscaling during rolling update\n\nCurrently in Kubernetes, it is possible to perform a rolling update by managing replication controllers directly,"
  }
]