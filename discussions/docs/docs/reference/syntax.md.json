[
  {
    "id" : "a3930201-5c4d-4f07-9041-24b35e344e07",
    "prId" : 11624,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11624#pullrequestreview-655539105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "952bd46d-df47-4bb3-9394-a95bf1c53587",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No `{nl}` needs to be inserted here.\r\n",
        "createdAt" : "2021-03-06T11:29:03Z",
        "updatedAt" : "2021-05-10T11:37:54Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "d163efbd-4748-4f0c-8a2c-fdc6cb0797b6",
        "parentId" : "952bd46d-df47-4bb3-9394-a95bf1c53587",
        "authorId" : "5af6a4eb-e367-4047-ba88-52c065f75cd9",
        "body" : "Enumerators themselves do not accept new line before them.\r\n> No {nl} needs to be inserted here.\r\n\r\nIs it because it's kinda \"obvious\" that here can go an arbitrary amount of new lines?\r\nFor me, it's as obvious as `{nl}` after `)` in `for` / `if` / `while`, still they contain `{nl}` in rules.\r\n",
        "createdAt" : "2021-03-06T12:18:12Z",
        "updatedAt" : "2021-05-10T11:37:54Z",
        "lastEditedBy" : "5af6a4eb-e367-4047-ba88-52c065f75cd9",
        "tags" : [
        ]
      },
      {
        "id" : "259048d9-7ae2-4a5d-9bb8-d5a0dd8b6576",
        "parentId" : "952bd46d-df47-4bb3-9394-a95bf1c53587",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, `nl` means an newline token inserted by the lexer. But there is never a newline inserted in front of a `do` or `yield`.",
        "createdAt" : "2021-05-10T11:37:09Z",
        "updatedAt" : "2021-05-10T11:37:54Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc604e35945645721ea085d2788ef396c3e6bdaa",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +267,271 @@                    |  ‘for’ ‘{’ Enumerators0 ‘}’ {nl} [‘do‘ | ‘yield’] Expr\n                    |  ‘for’     Enumerators0          (‘do‘ | ‘yield’) Expr\nEnumerators0      ::=  {nl} Enumerators [semi]\nEnumerators       ::=  Generator {semi Enumerator | Guard}\nEnumerator        ::=  Generator"
  }
]