[
  {
    "id" : "a7cf81f1-a47d-4c2c-8618-2fd437a78721",
    "prId" : 5233,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5233#pullrequestreview-166018387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbb9e73a-b5d6-4fca-a1bd-2c5eca0be142",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "If `C` is a type constructor, the join `C[A] & C[B]` is simplified by pulling the intersection inside the constructor, using the following rules:\r\n \r\n - If `C` is covariant, `C[A] & C[B] = C[A & B]`\r\n - If `C` is contravariant, `C[A] & C[B] = C[A | B]`\r\n",
        "createdAt" : "2018-10-12T09:05:02Z",
        "updatedAt" : "2018-10-15T09:05:03Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "f48b1111-e0e7-4bc5-9470-54adfc448788",
        "parentId" : "fbb9e73a-b5d6-4fca-a1bd-2c5eca0be142",
        "authorId" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "body" : "Ahh ... I think my comment above should have been a follow up to this ...",
        "createdAt" : "2018-10-17T08:39:15Z",
        "updatedAt" : "2018-10-17T08:39:15Z",
        "lastEditedBy" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "tags" : [
        ]
      },
      {
        "id" : "e49a39d4-5089-4a45-904c-b553aa0bdeaa",
        "parentId" : "fbb9e73a-b5d6-4fca-a1bd-2c5eca0be142",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Good catch. The derivation provides partial justification for the simplification, as we cannot derive in the other direction.\r\n\r\nI tried to find examples where the rules are unsound, but failed. It seems the other direction can be justified informally. @odersky mentioned some theoretical work is needed here based on DOT. ",
        "createdAt" : "2018-10-18T10:07:10Z",
        "updatedAt" : "2018-10-18T10:07:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6aa110e8dd78d8bece2cb2b6e90f955dbd2127",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@      C[A & B] <: C[A] & C[B]\n```\n\nWhen `C` is contravariant, `C[A | B] <: C[A] & C[B]` can be derived:\n"
  },
  {
    "id" : "a8ce5852-81a1-4ee0-9076-e061381f3678",
    "prId" : 5233,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5233#pullrequestreview-164137396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e647a330-f54b-4444-90ba-a1fab9c589d2",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Integrate the whole type checking section in the main page.",
        "createdAt" : "2018-10-12T09:07:38Z",
        "updatedAt" : "2018-10-15T09:05:03Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6aa110e8dd78d8bece2cb2b6e90f955dbd2127",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@----------------\n    A & B <: T\n```\n\nFrom the rules above, we can show that `&` is _commutative_: `A & B <: B & A` for any type `A` and `B`."
  },
  {
    "id" : "ebf57aec-d425-435c-9240-214a6fdd5606",
    "prId" : 5233,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5233#pullrequestreview-165512802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d6525e3-5dd7-4735-b7e0-1fcbf88003c2",
        "parentId" : null,
        "authorId" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "body" : "Where does the \"simplified\" terminology and the `~>` come from? Intuitively it makes sense, but seems redundant with the typing rules stating the same thing immediately below.",
        "createdAt" : "2018-10-17T08:37:59Z",
        "updatedAt" : "2018-10-17T08:38:00Z",
        "lastEditedBy" : "2c02aea2-3019-42f4-9678-8a2da637c660",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d6aa110e8dd78d8bece2cb2b6e90f955dbd2127",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +50,54 @@- If `C` is covariant, `C[A] & C[B] ~> C[A & B]`\n- If `C` is contravariant, `C[A] & C[B] ~> C[A | B]`\n\nWhen `C` is covariant, `C[A & B] <: C[A] & C[B]` can be derived:\n"
  }
]