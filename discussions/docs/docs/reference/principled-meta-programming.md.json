[
  {
    "id" : "5c464413-fd1d-41af-b9b9-728d6f3ae0ba",
    "prId" : 3867,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3867#pullrequestreview-90413027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c1fd770-7d5f-48bc-93f1-27ac087131a3",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "@odersky I created #3883 to make these classes `sealed`, no need to implement it on this PR.",
        "createdAt" : "2018-01-22T09:46:32Z",
        "updatedAt" : "2018-01-27T12:02:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "58677ed1d2684d70f65ff511f16d8475c5ccdefb",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +76,80 @@      def unary_~: T   // splice operation\n    }\n    sealed abstract class Type[T] {\n      type unary_~ = T  // splice type\n    }"
  },
  {
    "id" : "df4a19db-49e2-47cc-9883-518c2c58789a",
    "prId" : 3867,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3867#pullrequestreview-92023565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d6de8e-c2b7-49d4-af3a-9cefa7e52de3",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Missing `:` before result type.",
        "createdAt" : "2018-01-23T13:08:52Z",
        "updatedAt" : "2018-01-27T12:02:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3f7e0cd8-4ade-4de5-a218-f0d096c99e6f",
        "parentId" : "d9d6de8e-c2b7-49d4-af3a-9cefa7e52de3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Same here",
        "createdAt" : "2018-01-27T11:27:23Z",
        "updatedAt" : "2018-01-27T12:02:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "58677ed1d2684d70f65ff511f16d8475c5ccdefb",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +185,189 @@would be rewritten to\n\n    def reflect[T: Type, U](f: Expr[T] => Expr[U]) Expr[T => U] =\n      ’{ (x: ~implicitly[Type[T]]) => ~f(’(x)) }\n"
  },
  {
    "id" : "1df7de08-ac5f-4672-a0cf-b2e5b2e1bd8c",
    "prId" : 3867,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3867#pullrequestreview-92023565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f686e394-fe61-4fa3-88b1-021be3059002",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Still missing a `:`",
        "createdAt" : "2018-01-27T11:27:05Z",
        "updatedAt" : "2018-01-27T12:02:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "58677ed1d2684d70f65ff511f16d8475c5ccdefb",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +180,184 @@For instance, the user-level definition of `reflect`:\n\n    def reflect[T: Type, U](f: Expr[T] => Expr[U]) Expr[T => U] =\n      ’{ (x: T) => ~f(’(x)) }\n"
  }
]