[
  {
    "id" : "e586c27f-ae26-49d9-84be-e482168ddd39",
    "prId" : 6898,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6898#pullrequestreview-264554187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41f152ea-1bca-4fba-95dc-ddf4c6219865",
        "parentId" : null,
        "authorId" : "04cdd3c6-dc1a-4ad4-93ba-222a24a5ebdb",
        "body" : "Should we encourage the use of `: Unit` here or not?",
        "createdAt" : "2019-07-21T21:01:18Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "04cdd3c6-dc1a-4ad4-93ba-222a24a5ebdb",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb374a15d3918a661e6d06098b26347dcad3319c",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@Example:\n```scala\n    @main def happyBirthday(age: Int, name: String, others: String*) = {\n      val suffix =\n        (age % 100) match {"
  },
  {
    "id" : "3cf36160-86f1-4315-8b4c-53f05924f93b",
    "prId" : 6898,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6898#pullrequestreview-267458286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c37982fc-1cda-4fcb-b8ed-bfac31f1101c",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Why do we make this design decision here? Looks like a limitation to me. E.g. I may want to write a library of utility functions that may depend on each other:\r\n\r\n```scala\r\n@main def disableFile(path: Path): Unit =\r\n  // Change the `path`'s extension from `scala` to `disabled`\r\n\r\n@main def enableFile(path: Path): Unit =\r\n  // Change the `path`'s extension from `disabled` to `scala`\r\n\r\n@main def filterFolder(folder: Path, fileNamePattern: Regex): Unit = {\r\n  // Disable all the files except those the names of which match the given regex pattern\r\n  val allFiles: List[Path] = // get all the files present in the folder\r\n  allFiles.foreach(enableFile)  // Make sure we start with a clean folder, unaffected by previous runs of this or sister programs\r\n  allFiles.filterNot(file => fileNamePattern.matches(file.name)).foreach(disableFile)\r\n}\r\n```",
        "createdAt" : "2019-07-26T11:15:23Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "efc3d680-419a-40bc-a787-143caaefaac7",
        "parentId" : "c37982fc-1cda-4fcb-b8ed-bfac31f1101c",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "> It is not available for user programs in Scala\r\n\r\nAlso, it doesn't seem that this limitation is true:\r\n\r\n```scala\r\nobject Main {\r\n  def main(args: Array[String]): Unit = { f(); println(\"foo\") }\r\n\r\n  @main def f(): Unit = {\r\n    println(\"Hello world!\")\r\n    println(msg)\r\n  }\r\n\r\n  @main def g(): Unit = f()\r\n\r\n  def msg = \"I was compiled by dotty :)\"\r\n\r\n}\r\n```\r\n\r\nCompiles and runs fine.",
        "createdAt" : "2019-07-26T12:38:06Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "d5a4ac01-53c9-4038-a3e4-64a3584e0700",
        "parentId" : "c37982fc-1cda-4fcb-b8ed-bfac31f1101c",
        "authorId" : "a14778fc-0e43-40e5-b0eb-4f1793ea271f",
        "body" : "Doesn't that mean that the _synthetic_ method `main` can't be called, rather than that the `@main` method written in source can't be called? ",
        "createdAt" : "2019-07-27T06:32:23Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "a14778fc-0e43-40e5-b0eb-4f1793ea271f",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb374a15d3918a661e6d06098b26347dcad3319c",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@```\n**Note**: The `<static>` modifier above expresses that the `main` method is generated\nas a static method of class `happyBirthDay`. It is not available for user programs in Scala. Regular \"static\" members are generated in Scala using objects instead.\n\n`@main` methods are the recommended scheme to generate programs that can be invoked from the command line in Scala 3. They replace the previous scheme to write program as objects with a special `App` parent class. In Scala 2, `happyBirthday` could be written also like this:"
  },
  {
    "id" : "66587df9-bd3b-448d-b84a-6574b5ae6f33",
    "prId" : 6898,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6898#pullrequestreview-267129392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8350e693-4cfb-48ef-b89e-2621f18ea9c6",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "What is the exact lifecycle of such a program here? What's `happyBirthday`? Do we need to compile it with `dotc` and run `scala` from the folder in which the class files end up? Can we do `scala happyBirthday.scala 22` â€“ that is without the necessity to compile the source? I think we need to elaborate on this in the docs.",
        "createdAt" : "2019-07-26T11:16:59Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb374a15d3918a661e6d06098b26347dcad3319c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@Examples:\n```\n> scala happyBirthday 22\nIllegal command line after first argument: more arguments expected\n> scala happyBirthday sixty Fred"
  }
]