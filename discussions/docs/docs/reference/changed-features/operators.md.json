[
  {
    "id" : "ed9dc654-92f5-4b84-87fc-b0b9fecd30d4",
    "prId" : 5975,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5975#pullrequestreview-207377405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b9b8841-dc04-4893-a1c1-e055f82327fe",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "We should not rely on \"the host platform\"'s notion of a legal name. Scala code should equally compile on all platforms. So this should be defined here (potentially as a valid Java identifier name).",
        "createdAt" : "2019-02-25T12:59:14Z",
        "updatedAt" : "2019-05-15T18:33:17Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "774e9a76009e1a6a7aff7b86993b52918b362979",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@\n 3. The name given in an `@alpha` annotation must be a legal name\n    for the defined entities on the host platform.\n\n 4. Definitions with symbolic names should have an `@alpha` annotation. Lack of such"
  },
  {
    "id" : "03676dda-a75d-49c6-86d0-6919c3b1ac4c",
    "prId" : 5975,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5975#pullrequestreview-207385989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb1468f0-16a6-4f8c-a989-4b15f1e5752e",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "The two \"also OK\" cases (`s1.union(s2)` and `s1.*(s2)`) kind of go against the motivation of achieving consistency. For consistency to be really applied, they should give a deprecation warning.",
        "createdAt" : "2019-02-25T13:02:45Z",
        "updatedAt" : "2019-05-15T18:33:17Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "46b79378-f8ff-45d1-a190-c2ac93a571bd",
        "parentId" : "cb1468f0-16a6-4f8c-a989-4b15f1e5752e",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, it's a tradeoff. I believe though that declaring something @infix would be a strong enough social cue that people would follow it without the compiler having to enforce it. Always allowing method call syntax has the advantage that we can normalize programs. We can say `x union y` desugars to `x.union(y)`. If `x.union(y)` was not legal that explanation would not be available.",
        "createdAt" : "2019-02-25T13:18:23Z",
        "updatedAt" : "2019-05-15T18:33:17Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "cc860c51-bc8d-420e-9bf0-c7f78e20cd14",
        "parentId" : "cb1468f0-16a6-4f8c-a989-4b15f1e5752e",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Meh. Yes, OK.",
        "createdAt" : "2019-02-25T13:20:20Z",
        "updatedAt" : "2019-05-15T18:33:17Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "774e9a76009e1a6a7aff7b86993b52918b362979",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\ns1 * s2             // OK\ns1.*(s2)            // also OK, but unusual\n```\nInfix operations involving alphanumeric operators are deprecated, unless"
  }
]