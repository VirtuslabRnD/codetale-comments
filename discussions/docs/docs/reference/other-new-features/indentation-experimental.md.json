[
  {
    "id" : "23a0c01f-3d4c-4c27-b41a-86fcdf46d0d9",
    "prId" : 11752,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11752#pullrequestreview-616683548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "parentId" : null,
        "authorId" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "body" : "Are we able to handle this another way?  It seems a bit wrong? Kind of like someone left the colon by mistake. ",
        "createdAt" : "2021-03-19T14:10:00Z",
        "updatedAt" : "2021-03-19T17:00:28Z",
        "lastEditedBy" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "tags" : [
        ]
      },
      {
        "id" : "141975eb-e6a4-49ff-b59f-0797bc78ee36",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "body" : "Maybe something like a soft keyword `and` ?",
        "createdAt" : "2021-03-19T14:21:58Z",
        "updatedAt" : "2021-03-19T17:00:28Z",
        "lastEditedBy" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "tags" : [
        ]
      },
      {
        "id" : "1958dc98-6ce9-42c4-9b75-0e78148a41a1",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think curried functions with complex arguments are pretty much an anti-pattern anyway, but others like their `Option.fold`s. The current possibility falls out from the rules we have. Before this PR there was a special added rule that disallowed the `:` at start of line. But that would leave no way to handle curried functions except with braces. So I think it's probably better to have simpler, more orthogonal rules and let users decide whether they like this pattern or whether they want to keep using braces after all.\r\n\r\n\r\n",
        "createdAt" : "2021-03-19T14:36:06Z",
        "updatedAt" : "2021-03-19T17:00:28Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "47503a9c-0073-486b-8c1f-176cc09a9e31",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "6c87ae34-7753-435b-a2db-597f1be782f4",
        "body" : "It feels like it might look better if there will be an additional per-parameter indentation.\r\nSmth like:\r\n```scala\r\nval firstLine = files.get(filename).fold:\r\n  {smth here} =>\r\n     val filenames = files.values\r\n     s\"\"\"no file named $fileName found among\r\n         |${values.mkString(\\n)}\"\"\".stripMargin\r\n  f =>\r\n     val lines = f.iterator.map(_.readline)\r\n     lines.mkString(\"\\n\")\r\n```",
        "createdAt" : "2021-03-19T16:50:12Z",
        "updatedAt" : "2021-03-19T17:00:28Z",
        "lastEditedBy" : "6c87ae34-7753-435b-a2db-597f1be782f4",
        "tags" : [
        ]
      },
      {
        "id" : "b49ce4f4-f62a-45aa-8eaf-310dc23ad00b",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That does not work. This would group both lambdas in a sequence as a single parameter block.\r\n",
        "createdAt" : "2021-03-19T17:02:12Z",
        "updatedAt" : "2021-03-19T17:02:13Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "bb91d12e-1a88-4b6f-9f98-21011d14646d",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "6c87ae34-7753-435b-a2db-597f1be782f4",
        "body" : "Yep, I missed that `:` is about different parameter sections.\r\n\r\nShould this work if `:` have the same indentation level as the first parameter?\r\n\r\n```scala\r\nval firstLine = files.get(filename).fold:\r\n  val filenames = files.values\r\n  s\"\"\"no file named $fileName found among \r\n      |${values.mkString(\\n)}\"\"\".stripMargin\r\n  :\r\n  f =>\r\n    val lines = f.iterator.map(_.readline)\r\n    lines.mkString(\"\\n\")\r\n```",
        "createdAt" : "2021-03-19T17:56:33Z",
        "updatedAt" : "2021-03-19T17:56:34Z",
        "lastEditedBy" : "6c87ae34-7753-435b-a2db-597f1be782f4",
        "tags" : [
        ]
      },
      {
        "id" : "39a9e883-8c3e-4a93-b19f-7c89041ab46a",
        "parentId" : "3c5c538d-a194-4b46-842c-03b470b94938",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No, then it does not work. Everything at the same indentation level is one argument\r\n\r\n",
        "createdAt" : "2021-03-19T18:21:09Z",
        "updatedAt" : "2021-03-19T18:21:10Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fd873ceca9691a469918af5c08d8dfd5b547f16",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@      s\"\"\"no file named $fileName found among\n         |${values.mkString(\\n)}\"\"\".stripMargin\n   :\n      f =>\n         val lines = f.iterator.map(_.readLine)"
  },
  {
    "id" : "38e31d5c-88c5-4219-bbcc-cc7afba7406f",
    "prId" : 11752,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11752#pullrequestreview-616437612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a937a7e-6d21-4044-92fa-c367d0b89163",
        "parentId" : null,
        "authorId" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "body" : "This looks rather ok, but honestly I am not sure if it helps with the readability. But I guess if we are going fully with optional braces, we should allow this.",
        "createdAt" : "2021-03-19T14:17:02Z",
        "updatedAt" : "2021-03-19T17:00:28Z",
        "lastEditedBy" : "b0a3e0ce-5278-4dad-8026-49b4b4041725",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fd873ceca9691a469918af5c08d8dfd5b547f16",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@Similar to what is done for classes and objects, a `:` that follows a function reference at the end of a line means braces can be omitted for function arguments. Example:\n```scala\ntimes(10):\n   println(\"ah\")\n   println(\"ha\")"
  }
]