[
  {
    "id" : "b198c9d8-c003-4a28-a2f8-43e621e8d671",
    "prId" : 7471,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7471#pullrequestreview-309968228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c3e2d5d-3832-4ac3-ab39-893b8eca314a",
        "parentId" : null,
        "authorId" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "body" : "Would it be possible to do this as annotation? IMHO a class-level annotation would make it clearer to the reader which class is doing the extending, and potentially make it easier to see what is being extended (since the class is in the extension list).",
        "createdAt" : "2019-10-31T15:25:49Z",
        "updatedAt" : "2019-10-31T17:11:37Z",
        "lastEditedBy" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "921ddebcf77e2cdca181587686eded7be3ea2fe7",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@ - The language feature `adhocExtensions` is enabled for the extending class. This is typically enabled by an import statement in the source file of the extension:\n   ```scala\n   import scala.language.adhocExtensions\n   ```\n   Alternatively, the feature can be enabled by the command line option `-language:adhocExtensions`."
  },
  {
    "id" : "03510a56-a545-42c6-83f3-2b1dc76096ff",
    "prId" : 7471,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7471#pullrequestreview-310044622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f554718-ecce-4ff2-b8c3-d9210e97d2c1",
        "parentId" : null,
        "authorId" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "body" : "(I admit I have no idea what Lightbend's plan is for Scala and Modules, so forgive me if this is totally out of scope)\r\n\r\nWould it make sense to automatically add a \"module export\" for anything that's considered `open`? I mean a [JSR 376](https://openjdk.java.net/projects/jigsaw/spec/sotms) `module { exports ... }` declaration.\r\n\r\nAlthough perhaps this is an SBT concern and not something that the Scala compiler cares about....",
        "createdAt" : "2019-10-31T15:35:50Z",
        "updatedAt" : "2019-10-31T17:11:37Z",
        "lastEditedBy" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "tags" : [
        ]
      },
      {
        "id" : "dae93ee1-9b5f-4b5c-8971-f741601ce116",
        "parentId" : "7f554718-ecce-4ff2-b8c3-d9210e97d2c1",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "At present it is unclear to what extent JDK modules should affect the language (vs build tools).",
        "createdAt" : "2019-10-31T17:10:14Z",
        "updatedAt" : "2019-10-31T17:11:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "921ddebcf77e2cdca181587686eded7be3ea2fe7",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@to mock classes in tests, or to apply temporary patches that add features or fix bugs in library classes. That's why _ad-hoc_ extensions are permitted, but only if there is an explicit opt-in via a language feature import.\n\n### Details\n\n - `open` is a soft modifier. It is treated as a normal identifier"
  },
  {
    "id" : "a8aa7a48-1969-447e-a489-d6393354e64f",
    "prId" : 7471,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7471#pullrequestreview-310044856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ce6220e-9aad-4d56-8eb3-941908a7ba5c",
        "parentId" : null,
        "authorId" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "body" : "Does the compiler emit a warning if you do `open trait` or `open abstract class`?",
        "createdAt" : "2019-10-31T15:36:34Z",
        "updatedAt" : "2019-10-31T17:11:37Z",
        "lastEditedBy" : "c770985f-3f14-4114-8ea0-15b7f199fc1f",
        "tags" : [
        ]
      },
      {
        "id" : "e9567157-19ac-4576-bb17-7ba3c8ae55ec",
        "parentId" : "8ce6220e-9aad-4d56-8eb3-941908a7ba5c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No. ",
        "createdAt" : "2019-10-31T17:10:34Z",
        "updatedAt" : "2019-10-31T17:11:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "921ddebcf77e2cdca181587686eded7be3ea2fe7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@   unless it is in modifier position.\n - An `open` class cannot be `final` or `sealed`.\n - Traits or `abstract` classes are always `open`, so `open` is redundant for them.\n\n### Relationship with `sealed`"
  }
]