[
  {
    "id" : "394362d2-9882-4598-9a1e-b967cc48e8cb",
    "prId" : 11033,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11033#pullrequestreview-564104677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0818cdd7-b4ab-4693-b600-375b018422fe",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "Here you still use TASTy",
        "createdAt" : "2021-01-08T09:11:25Z",
        "updatedAt" : "2021-01-12T16:11:53Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6fedfabc32bd92669490750535d2614037d6189",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +34,38 @@4. [Reflection](./reflection.md) Quotations are a \"black-box\"\n   representation of code. They can be parameterized and composed using\n   splices, but their structure cannot be analyzed from the outside. TASTy\n   reflection gives a way to analyze code structure by partly revealing the representation type of a piece of code in a standard API. The representation\n   type is a form of typed abstract syntax tree, which gives rise to the `TASTy`"
  },
  {
    "id" : "9d711f25-c9f5-48b9-9d46-a368c2fdb5e9",
    "prId" : 6261,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6261#pullrequestreview-245443957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd27b2b1-c4c5-4939-b5d6-b8517bf477ea",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This description does not correspond with the contents of `staging.md`",
        "createdAt" : "2019-06-04T12:07:08Z",
        "updatedAt" : "2019-06-05T11:36:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "bb33a681-bf77-44ec-9f37-3e86196d0be7",
        "parentId" : "dd27b2b1-c4c5-4939-b5d6-b8517bf477ea",
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "True. Will improve staging.",
        "createdAt" : "2019-06-04T13:27:36Z",
        "updatedAt" : "2019-06-05T11:36:20Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37dde7f264001c94485b9ddbe587af0ecbaf308",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@   Here, we move towards _domain-specific_ metaprogramming.\n\n3. [Staging](./staging.html) Macros can be seen as distinct phase while\n   programming. You write your regular code that will be compiled according to\n   the semantics of the language and the macro code that is going to be"
  }
]