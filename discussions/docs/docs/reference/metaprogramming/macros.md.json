[
  {
    "id" : "a87ba541-5a38-4e5c-9494-8a17f5e4d336",
    "prId" : 12732,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12732#pullrequestreview-679544719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n  '{ /* actual implementation later in this document */ }\r\n```",
        "createdAt" : "2021-06-07T13:20:36Z",
        "updatedAt" : "2021-06-07T13:20:36Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b8e815d5-c3e5-4979-9644-ef8d8e02428f",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "c5dc0f99-7383-4421-a747-a8b40fcc081f",
        "body" : "That will also be eaten by whatever tool transforms the markdown to HTML, just as the other comment (probably all valid Scala comments?). I've no idea why a markdown-to-HTML converter would do thatâ€¦",
        "createdAt" : "2021-06-07T15:57:28Z",
        "updatedAt" : "2021-06-07T15:57:28Z",
        "lastEditedBy" : "c5dc0f99-7383-4421-a747-a8b40fcc081f",
        "tags" : [
        ]
      },
      {
        "id" : "d4d5a2b2-8d56-4c98-8a20-2d238f862bf1",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "body" : "Handling of angle brackets in code blocks is mangled by scala style at https://github.com/lampepfl/dotty/pull/12734",
        "createdAt" : "2021-06-07T16:04:48Z",
        "updatedAt" : "2021-06-07T16:04:48Z",
        "lastEditedBy" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "tags" : [
        ]
      },
      {
        "id" : "59683f58-0939-4552-8697-f379fe973403",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "c5dc0f99-7383-4421-a747-a8b40fcc081f",
        "body" : "Probably, it is very common for Markdown code comments to require special handling of angle brackets.  But I am talking about code comments, i.e. the `\\\\ comment` and `/* comment */` which simply disappear in the htmlized output.",
        "createdAt" : "2021-06-07T16:13:42Z",
        "updatedAt" : "2021-06-07T16:14:13Z",
        "lastEditedBy" : "c5dc0f99-7383-4421-a747-a8b40fcc081f",
        "tags" : [
        ]
      },
      {
        "id" : "ff4a11cc-664a-4339-8829-8f042d95f498",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "body" : "To confirm, if you remove `scala` from the triple-backticks, the angle brackets render correctly.\r\n```\r\n'{ \"&lt;some source code&gt;\" } // Better implementation later in this document\r\n```",
        "createdAt" : "2021-06-07T16:20:54Z",
        "updatedAt" : "2021-06-07T16:20:54Z",
        "lastEditedBy" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "tags" : [
        ]
      },
      {
        "id" : "c2d6c3a0-bc97-4ced-a4a7-78fdce322ca0",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "body" : "Otherwise it xmlifies as\r\n```\r\n</span><span id=\"11\" class=\"\">  '{ \"\r\n        <some source code>\r\n         \" } \r\n         <span class=\"hideable\">// Better implementation later in this document</span>\r\n\r\n        </some></span><pre></pre></code></pre>\r\n```\r\nApologies if this was already discussed elsewhere, just mentioning what I noticed this morning.",
        "createdAt" : "2021-06-07T16:23:38Z",
        "updatedAt" : "2021-06-07T16:23:38Z",
        "lastEditedBy" : "317b625a-4db6-4333-bf57-152beea40aa0",
        "tags" : [
        ]
      },
      {
        "id" : "5e133e2e-a083-4f59-a48b-0e6cd8e3cec7",
        "parentId" : "b154f394-5d5d-45b6-8e18-1d25478c2faf",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The current version makes it readable. We can change it later if we want when the underlying issue is fixed.",
        "createdAt" : "2021-06-09T11:44:06Z",
        "updatedAt" : "2021-06-09T11:44:06Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7a24baa2b06724d4be007bff1869086dc2db327",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +41,45 @@\ndef showExpr(expr: Expr[Boolean])(using Quotes): Expr[String] =\n  '{ [actual implementation later in this document] }\n```\n"
  },
  {
    "id" : "3a897a32-7875-4684-9858-90cb032537ce",
    "prId" : 12110,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12110#pullrequestreview-637486706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413d3724-c8cc-4ca8-acf1-c9c34f881258",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```\r\nIn this version of `to`, the type of `x` is now the result of inserting the type `Type[T]` and selecting its `Underlying `. \r\nTo avoid clutter the compiler converts any type reference to a type `T` in subsequent phases to `summon[Type[T]].Underlying`.\r\nAnd to avoid duplication it does it once per type and creates an alias for that type at the start of the quote.\r\nFor instance, the user-level definition of `to`:\r\n```\r\n\r\nAnd also change bellow\r\n```diff\r\n-   '{ (x: t.Underlying) => ${ f('x) } }\r\n+   '{ \r\n+      type T = t.Underlying\r\n+      (x: T) => ${ f('x) } \r\n+.   }\r\n```\r\n\r\n\r\n",
        "createdAt" : "2021-04-16T08:34:54Z",
        "updatedAt" : "2021-04-21T21:47:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a1c536ce-ce76-423a-b915-af23f1383cdb",
        "parentId" : "413d3724-c8cc-4ca8-acf1-c9c34f881258",
        "authorId" : "7497ae09-39c0-4c3a-bb3f-b644cef31096",
        "body" : "Addressed",
        "createdAt" : "2021-04-16T09:03:05Z",
        "updatedAt" : "2021-04-21T21:47:18Z",
        "lastEditedBy" : "7497ae09-39c0-4c3a-bb3f-b644cef31096",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6487733380ca91103a21fa6b4a7ebed9a6dab5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +196,200 @@```\n\nIn this version of `to`, the type of `x` is now the result of\ninserting the type `Type[T]` and selecting its `Underlying`.\n"
  },
  {
    "id" : "c7a71213-7b2e-44c1-8d5c-3a418d73bfed",
    "prId" : 11903,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11903#pullrequestreview-622635048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76e6a95b-9304-45ae-822e-b7462f11332e",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "Is this now actually true? At some point, some normalization was observable .",
        "createdAt" : "2021-03-26T17:21:08Z",
        "updatedAt" : "2021-03-26T17:22:00Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      },
      {
        "id" : "d92766d4-7929-473f-bddf-8bda64089e38",
        "parentId" : "76e6a95b-9304-45ae-822e-b7462f11332e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That was in the patterns, not here.",
        "createdAt" : "2021-03-27T09:26:42Z",
        "updatedAt" : "2021-03-27T09:26:42Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "6028b0c2bb41c9ce1d0569af27994b799d5a6163",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +67,71 @@```scala\n${'{e}} = e\n'{${e}} = e\n```\n"
  },
  {
    "id" : "e3860773-9dd5-4662-a5f2-5101aa9a178d",
    "prId" : 11903,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11903#pullrequestreview-622635115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9f69ad2-f488-4fc5-808b-e5059e0dae11",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "Above in line 48 you say \"type structure\"",
        "createdAt" : "2021-03-26T17:21:38Z",
        "updatedAt" : "2021-03-26T17:22:00Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      },
      {
        "id" : "136ca752-fbea-4f12-a624-d5581a2795fd",
        "parentId" : "d9f69ad2-f488-4fc5-808b-e5059e0dae11",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes, there is much more to improve in this document. Might need a full rewrite.",
        "createdAt" : "2021-03-27T09:27:54Z",
        "updatedAt" : "2021-03-27T09:27:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "6028b0c2bb41c9ce1d0569af27994b799d5a6163",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +76,80 @@\n- `Expr[T]`: abstract syntax trees representing expressions of type `T`\n- `Type[T]`: non erased representation of type `T`.\n\nQuoting takes expressions of type `T` to expressions of type `Expr[T]`"
  },
  {
    "id" : "a0c96cc1-6838-4714-a39f-3e7030d43d54",
    "prId" : 8479,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8479#pullrequestreview-371067527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6560b26-68c3-49d3-9729-4923c09db502",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Maybe it should be `Expr.summonFrom` to align with `compiletime.summonFrom`",
        "createdAt" : "2020-03-09T10:50:53Z",
        "updatedAt" : "2020-03-09T14:01:29Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d86a210aec2b9e867d17e05157e6f63abf4e4bd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +566,570 @@\nSimilarly to the `summonFrom` construct, it is possible to make implicit search available\nin a quote context. For this we simply provide `scala.quoted.Expr.summon`:\n\n```scala"
  },
  {
    "id" : "95df686a-8080-42a3-a419-c8557d581b9b",
    "prId" : 7299,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7299#pullrequestreview-292872724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe call it `distribute`?  From [wikipedia](https://en.wikipedia.org/wiki/Modal_logic#Axiomatic_systems):\r\n\r\n```\r\nK, Distribution Axiom: â–¡(p â†’ q) â†’ (â–¡p â†’ â–¡q).\r\n```",
        "createdAt" : "2019-09-24T21:14:45Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b5bf0ca0-cd52-4c51-9f88-ea75539553f4",
        "parentId" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`distribite` is not precise, it only captures a generic property in the types. It would not describe what the method actually does.",
        "createdAt" : "2019-09-25T03:24:50Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "537281ca-55ee-4f94-849b-ade1ad41fb4a",
        "parentId" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Also `reduce` itself is not a distribution, `reduce(_)`  is the a distribution.",
        "createdAt" : "2019-09-25T05:21:21Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "4c0e3b68-b79b-4c1b-9dd2-d8a009e3f33d",
        "parentId" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "authorId" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "body" : "I agree with @liufengyun. Reduce is counter intuitive.",
        "createdAt" : "2019-09-25T05:31:18Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "37519144-0f9f-4b2b-85f7-34dde9be2e11",
        "tags" : [
        ]
      },
      {
        "id" : "b76a6e80-237e-4ac3-8881-3bf1e12ebc44",
        "parentId" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Do you have another suggestion?",
        "createdAt" : "2019-09-25T06:01:31Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2896b1d2-4010-4ee3-9edb-a01d669ee1eb",
        "parentId" : "edc5c7e3-b156-4366-a03c-96a9650bcc4b",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The following sentence does not read well, given the literal meaning of beta-reduction:\r\n\r\n> The `Expr` companion object contains a `betaReduce` conversion that turns a tree\r\ndescribing a function into a function mapping trees to trees.",
        "createdAt" : "2019-09-25T07:20:43Z",
        "updatedAt" : "2019-09-25T07:20:43Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "19797491d13c920bb1e7237dee666da9e019955a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +150,154 @@```scala\nExpr.betaReduce(_): Expr[(T1, ..., Tn) => R] => ((Expr[T1], ..., Expr[Tn]) => Expr[R])\n```\nIts dual, letâ€™s call it `reflect`, can be defined as follows:\n```scala"
  },
  {
    "id" : "1fdc2f87-09b9-4975-b0c0-c227c850737a",
    "prId" : 6261,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6261#pullrequestreview-245343106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d87c70f0-1426-4821-a749-8a0c3182df5c",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We need to mention in this section that within a quote or a splice we can quote or splice identifiers directly (i.e. `'e` and `$e`). We should probably make the link between the syntax of splices in string in string interpolators and these splices (syntactically)",
        "createdAt" : "2019-06-04T11:26:00Z",
        "updatedAt" : "2019-06-05T11:36:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37dde7f264001c94485b9ddbe587af0ecbaf308",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@Macros are built on two well-known fundamental operations: quotation and\nsplicing.  Quotation is expressed as `'{...}` for expressions (both forms are\nequivalent) and as `'[...]` for types. Splicing is expressed as `${ ... }`.\nAdditionally, within a quote or a splice we can quote or splice identifiers\ndirectly (i.e. `'e` and `$e`). Readers may notice the resemblance of the two"
  }
]