[
  {
    "id" : "a90826aa-476c-4789-a6c9-5d2e024f0316",
    "prId" : 10091,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10091#pullrequestreview-520519623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cea4bf9b-8dd8-490d-a9f1-f0b61c292ca6",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "How would we re-write the following pattern to make `x`, `y` and `z` givens?\r\n```scala\r\ncase x @ (y: Y, z @ Z()) =>\r\n```",
        "createdAt" : "2020-10-28T13:29:40Z",
        "updatedAt" : "2020-10-28T14:43:48Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3d786a86-7d83-441d-ba1c-592e30151577",
        "parentId" : "cea4bf9b-8dd8-490d-a9f1-f0b61c292ca6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We should have tests with nested given patterns.",
        "createdAt" : "2020-10-28T14:45:05Z",
        "updatedAt" : "2020-10-28T14:45:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "053e1f67-daf1-45d3-84af-82986b1aeaca",
        "parentId" : "cea4bf9b-8dd8-490d-a9f1-f0b61c292ca6",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "you can't make `x` a given here. for `x` and `y` it would simply be:\r\n```\r\ncase (x as given Y, y as given Z)\r\n```\r\nWe already have a test like this.\r\n",
        "createdAt" : "2020-10-29T15:19:38Z",
        "updatedAt" : "2020-10-29T15:19:38Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "41f2d8b3-d631-4f9f-ac94-ef44bd4c4156",
        "parentId" : "cea4bf9b-8dd8-490d-a9f1-f0b61c292ca6",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This seems to be a core limitation of the syntax. \r\n\r\nThe given statement syntax is\r\n```scala\r\ngiven X\r\ngiven x as X\r\n```\r\nWhat if we used the same in patterns?\r\n```scala\r\ncase given X =>\r\ncase given x as X =>\r\n```\r\n\r\nThen we could extend it to\r\n\r\n```scala\r\ncase given x @ X(y, z) =>\r\n```",
        "createdAt" : "2020-10-30T09:57:35Z",
        "updatedAt" : "2020-10-30T09:57:35Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "718dacd21fe12a1d5c2b9afa22c5705413637395",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +99,103 @@\npair match\n  case (ctx as given Context, y) => ...\n```\nIn the first fragment above, anonymous given instances for class `Context` are established by enumerating over `applicationContexts`. In the second fragment, a given `Context`"
  },
  {
    "id" : "d0543df0-1f88-4290-ae0e-e28317079cbf",
    "prId" : 8630,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8630#pullrequestreview-383653726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76ffad52-b0d5-47a4-99d4-6de6dbee10ba",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We need tests for this.",
        "createdAt" : "2020-03-30T08:53:38Z",
        "updatedAt" : "2020-03-30T19:38:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "663ba329-0f63-4af6-840a-03570ba26296",
        "parentId" : "76ffad52-b0d5-47a4-99d4-6de6dbee10ba",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I mean, we do not have any tests with `transparent inline given ...`",
        "createdAt" : "2020-03-30T08:56:37Z",
        "updatedAt" : "2020-03-30T19:38:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb01e6f81f8e7e7738e9671df651de237a2f25ff",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +85,89 @@Example:\n```scala\ntransparent inline given mkAnnotations[A, T] as Annotations[A, T] = ${\n  // code producing a value of a subtype of Annotations\n}"
  }
]