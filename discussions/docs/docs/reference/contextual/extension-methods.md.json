[
  {
    "id" : "9de19934-5f4b-40b3-add3-6cbb8ba8934b",
    "prId" : 11417,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11417#pullrequestreview-591505892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8eeeb2a-4bce-41c5-a8e2-3198750a062c",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "@odersky it seems the original doc was referencing the `sumBy` method still as an extension method (as spotted by @julienrf). Can you confirm this change is correct?",
        "createdAt" : "2021-02-16T16:29:58Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "308b8906-3d89-40f7-8297-3baf584579f3",
        "parentId" : "d8eeeb2a-4bce-41c5-a8e2-3198750a062c",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, correct",
        "createdAt" : "2021-02-16T18:24:08Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4b053694cdf96d79f743232ee1851d0a29ca1d0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +93,97 @@\n```scala\nsumBy[String](List(\"a\", \"bb\", \"ccc\"))(_.length)\n```\n"
  },
  {
    "id" : "0afbf139-f692-4b47-a90b-88531ea45f40",
    "prId" : 11417,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11417#pullrequestreview-591505892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4b11dc4-0b84-4244-a9d7-6464a315aa41",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Correct here as well\r\n",
        "createdAt" : "2021-02-16T18:24:27Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4b053694cdf96d79f743232ee1851d0a29ca1d0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +99,103 @@\n```scala\nsumBy[String](List(\"a\", \"bb\", \"ccc\"))[Int](_.length)\n```\n"
  },
  {
    "id" : "78b2454e-c7a1-4380-8b8e-e855c58c18a8",
    "prId" : 11417,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11417#pullrequestreview-592762172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a18aaf35-26be-4217-94bc-e763fdaeb537",
        "parentId" : null,
        "authorId" : "aac96502-7134-484b-914a-5f21bcc44a90",
        "body" : "@anatoliykmetyuk @odersky \r\nIt seems the _\"only if\"_ is not right. Even though the code\r\n```\r\nList[String](\"a\", \"bb\", \"ccc\").sumBy(_.length)\r\nList[String](\"a\", \"bb\", \"ccc\").sumBy[Int](_.length)\r\n```\r\ndoesn't fit this context (they are not regular / non-extension method calls), they can work when I try them in Scala 3.0.0-RC1 REPL. If this is expected. I think it's better to edit this paragraph and keep all these 4 forms in this reference doc.\r\n\r\nBy the way, personally, the type arguments usage in the non-extension method call form looks weird.\r\n\r\nAlso, I think replace the \"regular method\" with \"non-extension method\" make this sentence clearer.\r\nWhen I read this document before, since the code example doesn't fit the context, I didn't get the meaning of \"regular\". Also, since the extension method syntax is legal, it's also a kind of \"regular\" method.",
        "createdAt" : "2021-02-17T09:28:49Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "aac96502-7134-484b-914a-5f21bcc44a90",
        "tags" : [
        ]
      },
      {
        "id" : "5f4db980-c89c-480f-a871-7152410cc0ab",
        "parentId" : "a18aaf35-26be-4217-94bc-e763fdaeb537",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Good point. We should add all 4 forms.Can someone make a PR for that?\r\n",
        "createdAt" : "2021-02-17T10:01:07Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "d297d5ec-5c8b-4678-87ae-f9d8dbc9d7d9",
        "parentId" : "a18aaf35-26be-4217-94bc-e763fdaeb537",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "I’m not sure the `List[String]` form can be regarded as a way to pass type parameters to an extension method. We are not passing any parameters to the extension methods, we are helping the compiler to infer the type parameters of the callee precisely. It’s still on the compiler to then infer the type parameters for the extension method; I do not see how explicitly specifying the type parameter of the callee helps the latter task.",
        "createdAt" : "2021-02-17T15:40:49Z",
        "updatedAt" : "2021-02-17T16:50:08Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "4b9c9df5-253e-477e-b748-1bb01fe33260",
        "parentId" : "a18aaf35-26be-4217-94bc-e763fdaeb537",
        "authorId" : "aac96502-7134-484b-914a-5f21bcc44a90",
        "body" : "@odersky Here is the PR: #11451",
        "createdAt" : "2021-02-18T01:02:35Z",
        "updatedAt" : "2021-02-18T01:02:35Z",
        "lastEditedBy" : "aac96502-7134-484b-914a-5f21bcc44a90",
        "tags" : [
        ]
      }
    ],
    "commit" : "f4b053694cdf96d79f743232ee1851d0a29ca1d0",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +90,94 @@\nBy contrast, type arguments matching type parameters following `extension` can be passed\nonly if the method is referenced as a regular method:\n\n```scala"
  },
  {
    "id" : "f0358c77-3d5c-4743-bdd8-6157ebb4b9b7",
    "prId" : 10658,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10658#pullrequestreview-548164860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8690c431-47c3-44d7-aa55-a2fc076f4590",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "The text above this line would also need to be adjusted.",
        "createdAt" : "2020-12-09T13:06:32Z",
        "updatedAt" : "2020-12-09T16:03:36Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      },
      {
        "id" : "32e71fdf-922b-497f-9582-58550de4b484",
        "parentId" : "8690c431-47c3-44d7-aa55-a2fc076f4590",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Well spotted. I'll update the doc.\r\n",
        "createdAt" : "2020-12-09T13:09:12Z",
        "updatedAt" : "2020-12-09T16:03:36Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b451515c74ab5cfa4836a88815f9f98aab5fb0a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +101,105 @@left-hand parameter type. In this case one can \"pull out\" the common parameters into\na single extension and enclose all methods in braces or an indented region.\nExample:\n\n```scala"
  },
  {
    "id" : "372a1bc0-5c5e-42e5-82cc-a164be60e580",
    "prId" : 9255,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9255#pullrequestreview-442357591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ffa8ee8-b5c7-45f5-a171-3235ff38f2e0",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Do we also support collective extension with `{ ... }` as in ` extension (x: Int) { def ... }`?",
        "createdAt" : "2020-06-29T08:54:42Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "41b4b1cc-fe57-4e98-973b-67dc0cbc0d63",
        "parentId" : "5ffa8ee8-b5c7-45f5-a171-3235ff38f2e0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Should we?",
        "createdAt" : "2020-06-29T08:54:54Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "09479b37-3008-47fa-8102-d38e78a91728",
        "parentId" : "5ffa8ee8-b5c7-45f5-a171-3235ff38f2e0",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, we do support that. ",
        "createdAt" : "2020-06-29T11:08:31Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "75795c15-377d-4e27-a8d7-7b955d50758d",
        "parentId" : "5ffa8ee8-b5c7-45f5-a171-3235ff38f2e0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We should mention that the following are equivalent \r\n```scala\r\nextension (x: Int) {\r\n  def f(y: Int) = x + y\r\n}\r\n```\r\n\r\n```scala\r\nextension (x: Int):\r\n  def f(y: Int) = x + y\r\n```\r\n\r\nThis would help users understand the scope of the `extension`.",
        "createdAt" : "2020-07-03T12:14:42Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1601400452edcac163e2d53a4fa60aaf191a95d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +93,97 @@Sometimes, one wants to define several extension methods that share the same\nleft-hand parameter type. In this case one can \"pull out\" the common parameters into\na single extension and enclose all methods in braces or an indented region following a '`:`'.\nExample:\n```scala"
  },
  {
    "id" : "e8c6807a-9017-4814-b19c-ebb476853652",
    "prId" : 9255,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9255#pullrequestreview-442444301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a85fdbfe-1088-4cdb-be91-0ab37614fbbc",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I would turn this around and say that collective extension methods are the normal syntax and the single definition on one line is the shorthand. ",
        "createdAt" : "2020-07-03T12:39:26Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d7054618-f727-473d-a77d-99fdab55473d",
        "parentId" : "a85fdbfe-1088-4cdb-be91-0ab37614fbbc",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "The normalization goes from collective to individual.",
        "createdAt" : "2020-07-03T13:52:09Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "b388ec76-30eb-4d68-9d1a-7d56f5f55470",
        "parentId" : "a85fdbfe-1088-4cdb-be91-0ab37614fbbc",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Ok",
        "createdAt" : "2020-07-03T14:21:05Z",
        "updatedAt" : "2020-07-05T10:03:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1601400452edcac163e2d53a4fa60aaf191a95d",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +108,112 @@assuming the common extended value `ss` as receiver.\n\nCollective extensions like these are a shorthand for individual extensions\nwhere each method is defined separately. For instance, the first extension above expands to\n```scala"
  },
  {
    "id" : "8c460869-f9b7-4184-a067-b393ee90f35c",
    "prId" : 8162,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8162#pullrequestreview-351598828",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4736cc2c-e448-4401-a126-bfd3f61a0ebb",
        "parentId" : null,
        "authorId" : "cc76ae48-16f2-4f78-8406-3b327ceef8ee",
        "body" : "Are these changes indented in the **not** new section ?",
        "createdAt" : "2020-01-31T15:50:37Z",
        "updatedAt" : "2020-02-01T11:11:00Z",
        "lastEditedBy" : "cc76ae48-16f2-4f78-8406-3b327ceef8ee",
        "tags" : [
        ]
      },
      {
        "id" : "c132ac95-a000-4a80-99f8-2aab36d343c7",
        "parentId" : "4736cc2c-e448-4401-a126-bfd3f61a0ebb",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "No they are not. Thank for pointing it out! ",
        "createdAt" : "2020-01-31T15:52:59Z",
        "updatedAt" : "2020-02-01T11:11:00Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0861a29c14f999f61b35c85599631016b992359d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +144,148 @@}\n\nextension on [T](xs: List[T])(using Ordering[T]) {\n  def largest(n: Int) = xs.sorted.takeRight(n)\n}"
  },
  {
    "id" : "05917e30-28b7-4ca9-9f7a-e50c7226d8cc",
    "prId" : 7455,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7455#pullrequestreview-308072417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6c520b6-5761-4717-8432-0c1eb8c80c0f",
        "parentId" : null,
        "authorId" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "body" : "> As usual, type parameters of the extension method follow the defined method name. Nevertheless, such type parameters can already be used in the preceding parameter clause.\r\n\r\nThis need to be updated. Also I would add a paragraph about the position of explicit type parameters at call site.",
        "createdAt" : "2019-10-28T19:16:49Z",
        "updatedAt" : "2019-10-29T08:37:22Z",
        "lastEditedBy" : "223e67d6-1873-432a-9af9-f40b82a7eedd",
        "tags" : [
        ]
      }
    ],
    "commit" : "9af572dee0b20b4d349531d7b7bc22063d690359",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +161,165 @@  summon[Numeric[T]].plus(x, y)\n```\n\nIf an extension method has type parameters, they come immediately after the `def` and are followed by the extended parameter. When calling a  generic extension method, any explicitly given type arguments follow the method name. So the `second` method can be instantiated as follows:\n```scala"
  },
  {
    "id" : "2f87e730-4630-4763-9a05-d95f3018e577",
    "prId" : 5825,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5825#pullrequestreview-199111260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fe84025-8ed1-497f-96c0-a139d10dcbe1",
        "parentId" : null,
        "authorId" : "50310865-85c2-417b-b540-06dc077c1e27",
        "body" : "should be ?\r\n\r\n> ...defined without a `for` clause. E.g.,",
        "createdAt" : "2019-02-01T13:33:47Z",
        "updatedAt" : "2019-02-04T20:11:01Z",
        "lastEditedBy" : "50310865-85c2-417b-b540-06dc077c1e27",
        "tags" : [
        ]
      },
      {
        "id" : "96448892-550e-43fd-887a-e2a5f62a4596",
        "parentId" : "5fe84025-8ed1-497f-96c0-a139d10dcbe1",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Thanks!",
        "createdAt" : "2019-02-01T14:59:08Z",
        "updatedAt" : "2019-02-04T20:11:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f397165a57173f0151ff8e39027f1b1650f60cbb",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@### Implied Instances for Extension Methods\n\nImplied instances that define extension methods can also be defined without an `of` clause. E.g.,\n\n```scala"
  }
]