[
  {
    "id" : "59cd9f88-5194-4cc8-bdb0-85a2d04aa14e",
    "prId" : 10826,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10826#pullrequestreview-554426747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee8094c0-703c-4b56-87fa-10ae4bd1b3e9",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "@nicolasstucki : Do we still support this use case? It seems to be a valid use case.",
        "createdAt" : "2020-12-17T09:36:14Z",
        "updatedAt" : "2020-12-17T17:20:54Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "649be2353284b25c3dd15025a5568e7d455122b0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +98,102 @@      case '[tpe *: tpes]    => derived[tpe] :: summonAll[tpes]\n      case '[EmptyTuple]     => Nil\n    }\n```\n"
  },
  {
    "id" : "13a2f4ab-0ed1-4763-a8ec-9b9c04573bf0",
    "prId" : 10432,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10432#pullrequestreview-536402623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f8d331c-0112-400e-9e09-a3bce478a390",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "If we use `q`, then it's more consistent to have `import q.reflect._`. The same for other places.",
        "createdAt" : "2020-11-23T11:40:42Z",
        "updatedAt" : "2020-11-23T12:49:15Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "2a975fd6-abf4-4ea2-86cc-1602eb165daa",
        "parentId" : "9f8d331c-0112-400e-9e09-a3bce478a390",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That one is waiting for #10442. Same in other places.",
        "createdAt" : "2020-11-23T11:53:08Z",
        "updatedAt" : "2020-11-23T12:49:15Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "80ed86aa1bc8a4643cee80855afe32dc88aed964",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +178,182 @@\n  given derived[T: Type](using q: Quotes) as Expr[Eq[T]] = {\n    import qctx.reflect._\n\n    val ev: Expr[Mirror.Of[T]] = Expr.summon[Mirror.Of[T]].get"
  },
  {
    "id" : "b6c8fc83-0fcf-4df1-a6de-8d6a288823bb",
    "prId" : 10382,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10382#pullrequestreview-534546650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74d0ede7-a43c-4e09-8a63-bca06b474174",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@nicolasstucki Does this actually compile? I don't see where `t` is defined here. Also if we update the doc we should keep the test case synchronized: https://github.com/lampepfl/dotty/blob/master/tests/run-macros/i8007/Macro_3.scala",
        "createdAt" : "2020-11-19T14:09:12Z",
        "updatedAt" : "2020-11-19T14:09:13Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "b6758b9d-d0da-479c-b9ac-91ece26f2d1d",
        "parentId" : "74d0ede7-a43c-4e09-8a63-bca06b474174",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I missed that. I will fix it.",
        "createdAt" : "2020-11-19T15:08:54Z",
        "updatedAt" : "2020-11-19T15:08:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "87887cc8-45ad-49a9-8d3e-227e28a01312",
        "parentId" : "74d0ede7-a43c-4e09-8a63-bca06b474174",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Fix in #10395",
        "createdAt" : "2020-11-19T15:12:21Z",
        "updatedAt" : "2020-11-19T15:12:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bda7be5bb9755214334a5ba9313038869eae549",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +92,96 @@\n```scala\n  def summonAll[T: Type](using qctx: QuoteContext): List[Expr[Eq[_]]] = t match {\n    case '[String *: tpes] => '{ summon[Eq[String]] }  :: summonAll[tpes]\n    case '[Int *: tpes]    => '{ summon[Eq[Int]] }     :: summonAll[tpes]"
  }
]