[
  {
    "id" : "c5c29abc-2a53-482a-b821-e229243ac405",
    "prId" : 1901,
    "prUrl" : "https://github.com/typelevel/cats/pull/1901#pullrequestreview-62823069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e764c7ae-61b1-4be4-9b35-a841e4499781",
        "parentId" : null,
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "This might flow better:\r\n\r\nCats and [Scalaz](https://github.com/scalaz/scalaz) have the same goal: to facilitate pure functional programming in Scala applications. However, the underlying core strategy is different;",
        "createdAt" : "2017-09-14T17:16:26Z",
        "updatedAt" : "2017-09-14T17:17:17Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2a1e2726ca7c4d580350d63a5b7c202a17c8cc0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +39,43 @@## <a id=\"diff-scalaz\" href=\"#diff-scalaz\"></a>What is the difference between Cats and Scalaz? \n\nCats and [Scalaz](https://github.com/scalaz/scalaz) have the same goal: facilitate pure functional programming in Scala applications; the underlying core strategy is different. Scalaz took the approach of trying to provide a single batteries-included *standard library* for FP that powers the Scala applications. Cats, on the other hand, aims to help build an [ecosystem](/cats/#ecosystem) of pure FP libraries by providing a solid and stable foundation. These libaries can have their own styles and personalities, competing with each other, while at the same time playing nice. It is through this ecosystem of FP libraries (cats included) that Scala applications can be powered with \"FP awesome-ness\" and beyond by picking whatever best fit their needs. \n\nBased on this core strategy, Cats took a [modular](/cats/#modularity) approach and focuses on providing core, [binary compatible](/cats/#a-namebinary-compatibility-and-versioning), [approachable](/cats/#approachability) and [efficient](/cats/#efficiency) abstractions. It provides a welcoming and supportive environment for the [user community](https://gitter.im/typelevel/cats) governed "
  },
  {
    "id" : "b249efbc-0221-44dd-b8b9-b39e3ff351d3",
    "prId" : 1901,
    "prUrl" : "https://github.com/typelevel/cats/pull/1901#pullrequestreview-62823069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d2a6a27-4c09-4392-9d55-6f827f64c6f1",
        "parentId" : null,
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "cats takes*?",
        "createdAt" : "2017-09-14T17:16:37Z",
        "updatedAt" : "2017-09-14T17:17:17Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2a1e2726ca7c4d580350d63a5b7c202a17c8cc0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +41,45 @@Cats and [Scalaz](https://github.com/scalaz/scalaz) have the same goal: facilitate pure functional programming in Scala applications; the underlying core strategy is different. Scalaz took the approach of trying to provide a single batteries-included *standard library* for FP that powers the Scala applications. Cats, on the other hand, aims to help build an [ecosystem](/cats/#ecosystem) of pure FP libraries by providing a solid and stable foundation. These libaries can have their own styles and personalities, competing with each other, while at the same time playing nice. It is through this ecosystem of FP libraries (cats included) that Scala applications can be powered with \"FP awesome-ness\" and beyond by picking whatever best fit their needs. \n\nBased on this core strategy, Cats took a [modular](/cats/#modularity) approach and focuses on providing core, [binary compatible](/cats/#a-namebinary-compatibility-and-versioning), [approachable](/cats/#approachability) and [efficient](/cats/#efficiency) abstractions. It provides a welcoming and supportive environment for the [user community](https://gitter.im/typelevel/cats) governed \nby the [typelevel code of conduct](https://typelevel.org/conduct). It also takes great effort in supplying a comprehensive and beginner-friendly [documentation](/cats/#documentation). \n                       "
  },
  {
    "id" : "e5615661-99d8-4519-ac55-99023034b21e",
    "prId" : 1901,
    "prUrl" : "https://github.com/typelevel/cats/pull/1901#pullrequestreview-62826005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c58005ea-4460-4138-87bd-9ea268cea06c",
        "parentId" : null,
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "I'm really not sure we can say this. I don't know where else we say this in the docs but I really don't think it's the case.",
        "createdAt" : "2017-09-14T17:17:15Z",
        "updatedAt" : "2017-09-14T17:17:18Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "a78f95fa-f700-4991-b9e6-a0fcf31cda5e",
        "parentId" : "c58005ea-4460-4138-87bd-9ea268cea06c",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Not sure which part you are referring to, is it \"great effort\" or \"comprehensive\" or \"beginner-friendly\"? ",
        "createdAt" : "2017-09-14T17:26:48Z",
        "updatedAt" : "2017-09-14T17:31:34Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2a1e2726ca7c4d580350d63a5b7c202a17c8cc0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +42,46 @@\nBased on this core strategy, Cats took a [modular](/cats/#modularity) approach and focuses on providing core, [binary compatible](/cats/#a-namebinary-compatibility-and-versioning), [approachable](/cats/#approachability) and [efficient](/cats/#efficiency) abstractions. It provides a welcoming and supportive environment for the [user community](https://gitter.im/typelevel/cats) governed \nby the [typelevel code of conduct](https://typelevel.org/conduct). It also takes great effort in supplying a comprehensive and beginner-friendly [documentation](/cats/#documentation). \n                       \n"
  },
  {
    "id" : "24468ba9-4a57-404d-9e46-a91ece844d3a",
    "prId" : 1573,
    "prUrl" : "https://github.com/typelevel/cats/pull/1573#pullrequestreview-37086511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94b2e96c-d332-4122-ac80-75af429c998e",
        "parentId" : null,
        "authorId" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "body" : "As of #1537 there is also `<<` (`FlatMap#forEffect`).",
        "createdAt" : "2017-05-05T13:03:08Z",
        "updatedAt" : "2017-05-09T16:42:14Z",
        "lastEditedBy" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "tags" : [
        ]
      },
      {
        "id" : "406ffc87-8a7b-4906-a9b7-518b0341c38a",
        "parentId" : "94b2e96c-d332-4122-ac80-75af429c998e",
        "authorId" : "ce96b419-753f-4ea1-afb3-3adc3b30fcc7",
        "body" : "I've now added that",
        "createdAt" : "2017-05-09T16:44:08Z",
        "updatedAt" : "2017-05-09T16:44:08Z",
        "lastEditedBy" : "ce96b419-753f-4ea1-afb3-3adc3b30fcc7",
        "tags" : [
        ]
      }
    ],
    "commit" : "64b8393701ac2c872a5275d7b1ad624144461c9d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +221,225 @@| `x =!= y`                        | not equals             |                  | `Eq[A]`                 | `neqv(x: A, y: A): Boolean`                               |\n| `fa >>= f`                       | flatMap                |                  | `FlatMap[F[_]]`         | `flatMap(fa: F[A])(f: A => F[B]): F[B]`                   |\n| `fa >> fb`                       | followed by            |                  | `FlatMap[F[_]]`         | `followedBy(fa: F[A])(fb: F[B]): F[B]`                    |\n| `fa << fb`                       | for effect             |                  | `FlatMap[F[_]]`         | `forEffect(fa: F[A])(fb: F[B]): F[A]`                     |\n| <code>x &#124;-&#124; y</code>   | remove                 |                  | `Group[A]`              | `remove(x: A, y: A): A`                                   |"
  },
  {
    "id" : "4409c598-4162-4812-9d2d-4fa0674ccd07",
    "prId" : 1227,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe659fa-3103-4821-9a5f-6c591fd673bf",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "an alternate approach is use `Free` and specify the things you need to do, then finally interpret those into `Xor`, `Try` or `Future` at the end of the world. I think this is a good approach too because generally the `IO` winds up being kind of an `Any` side-effect when most times you have a pretty narrow scope.\n\nWe already have some nice `Free` docs to point to, right?\n",
        "createdAt" : "2016-07-25T21:09:53Z",
        "updatedAt" : "2016-07-26T10:40:52Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "2de25cee-e196-4738-8b68-4d804fc7986f",
        "parentId" : "7fe659fa-3103-4821-9a5f-6c591fd673bf",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "@johnynek good point. I'll add a note about `Free` and point to the free docs.\n",
        "createdAt" : "2016-07-26T10:28:48Z",
        "updatedAt" : "2016-07-26T10:40:52Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "dca97450-56dc-452e-8f26-dfe72956f559",
        "parentId" : "7fe659fa-3103-4821-9a5f-6c591fd673bf",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Added. Let me know what you think.\n",
        "createdAt" : "2016-07-26T10:41:11Z",
        "updatedAt" : "2016-07-26T10:41:11Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b409a5c63ca068fe97c99906896b52f208efd68a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +90,94 @@- Should you be able to block a thread waiting for the result of a task? This is really convenient for tests, but it isn't really compatible with a JavaScript runtime and therefore is an issue for [scala.js](https://www.scala-js.org/).\n\nFor some use-cases, a very simple `IO` is the best answer, as it avoids a lot of the overhead and complexity of other solutions. However, other use-cases require low-level concurrency control with asynchrony, resource management, and stack-safety. Considering all of the competing concerns, Cats has opted to not implement its own `IO`/`Task` types and instead encourage users to use a separate library that best serves their use-case.\n\nHere are a couple libraries with `Task` implementations that you may find useful (in no particular order):"
  },
  {
    "id" : "ca8a45b7-1cbd-4c27-92ee-6ebe00fafdc9",
    "prId" : 1183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d48d922d-c69c-4a80-8b4c-9b09da5d90c1",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "I put the links at the end of the header because I added a bit of CSS that makes an anchor pop up with a link for each header and if it's on the left side, the header text shifts around which is a bit disorienting. This is something that isn't noticeable if you are just looking at the markdown view, but it will be noticeable once the FAQ is deployed on the site.\n\nI'm definitely open to better options -- I was just looking for low-hanging fruit for easy FAQ links that I could implement with very limited CSS skills :)\n",
        "createdAt" : "2016-07-11T12:29:03Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "a5001708-09d8-4fd8-b38e-11069572dc95",
        "parentId" : "d48d922d-c69c-4a80-8b4c-9b09da5d90c1",
        "authorId" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "body" : "Hey @ceedubs - so the reason I switched the order, was that when I tested locally, when the anchor was defined after the text, I built locally and tested the page, and the problem was that clicking the link brought me to just after the heading. So, as the page is a bit larger now, that actually meant that the heading was not visible, and I had to scroll in reverse to see the heading.  I thought this would be confusing for anyone who clicked a link not to be able to see the heading of the link they clicked on so I switched the anchor to earlier. I agree about the anchor, but I think it might actually be worse not to be able to see the heading.\n",
        "createdAt" : "2016-07-11T12:48:38Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "tags" : [
        ]
      },
      {
        "id" : "5fbf7501-d289-40c9-874a-68c38caf518f",
        "parentId" : "d48d922d-c69c-4a80-8b4c-9b09da5d90c1",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "@mikejcurry ah I see. That makes sense. Let's go with your approach, and hopefully someone will be annoyed enough by the jumping text that they'll fix it for us :P\n",
        "createdAt" : "2016-07-11T13:22:37Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "26d92774-4aab-4df2-96ed-8b60faf18091",
        "parentId" : "d48d922d-c69c-4a80-8b4c-9b09da5d90c1",
        "authorId" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "body" : "My own CSS skills aren't particularly advanced, but if I get some time I'll come back to these links and see if I can find a better way.\n",
        "createdAt" : "2016-07-11T19:59:28Z",
        "updatedAt" : "2016-07-11T19:59:28Z",
        "lastEditedBy" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b705c4ea4b58ce77f6259ae99c85d8b68202637b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@ * [How can I help?](#contributing)\n\n## <a id=\"what-imports\" href=\"#what-imports\"></a>What imports do I need?\n\nThe easiest approach to cats imports is to import everything that's commonly needed:"
  },
  {
    "id" : "ab5493f6-d0eb-4481-bd1b-af3e9823d575",
    "prId" : 1183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7eb9f46-2e3a-4544-8adf-a581755d878a",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "> Cats uses Simulacrum wherever possible to encode type classes\n\nWe have made a conscious decision not to use it within cats-kernel to ensure backwards compatibility. I'm not sure whether or not that's worth bringing up here.\n",
        "createdAt" : "2016-07-11T12:30:56Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "5353197a-7589-4822-97ad-6ea463f14669",
        "parentId" : "c7eb9f46-2e3a-4544-8adf-a581755d878a",
        "authorId" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "body" : "Good point, I'll add some text this evening for this. Were the backward compatibility concerns related to algebra origins of the code in kernel? I think context would be useful here related to this for reference so I'd like to be able to include something to that effect.\n",
        "createdAt" : "2016-07-11T12:53:00Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "tags" : [
        ]
      },
      {
        "id" : "90835942-459b-4052-8b0a-5830f63f4955",
        "parentId" : "c7eb9f46-2e3a-4544-8adf-a581755d878a",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Yes, the compatibility concerns are related to the algebra origins of cats-kernel. I agree that including context would be nice, but we probably don't need to bring in the historical context. I think we could just say something about how the `cats-kernel` module is expected to be a shared dependency for at least a couple of projects and there's an interest in ensuring that it is lightweight and very stable from a binary compatibility perspective. At some point there may be a transition from simulacrum to typeclassic, and we aren't confident that this transition will be 100% binary compatible.\n",
        "createdAt" : "2016-07-11T13:29:24Z",
        "updatedAt" : "2016-07-11T19:55:15Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "418f7cb3-fa5b-45e3-955a-148c0f097cf1",
        "parentId" : "c7eb9f46-2e3a-4544-8adf-a581755d878a",
        "authorId" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "body" : "I've incorporated your comment into the text. Let me know what you think!\n",
        "createdAt" : "2016-07-11T20:00:14Z",
        "updatedAt" : "2016-07-11T20:00:14Z",
        "lastEditedBy" : "507becc8-343f-49eb-9c0b-58304a1630c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b705c4ea4b58ce77f6259ae99c85d8b68202637b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +42,46 @@\nNote that the one area where simulacrum is intentionally not used is in the `cats-kernel` module. The `cats-kernel` module is intended to be a shared dependency for a number of projects, and as such, it is important that it is both lightweight and very stable from a binary compatibility perspective. At some point there may be a transition from simulacrum to [typeclassic](https://github.com/typelevel/typeclassic), and the binary compatibility of moving between simulacrum and typeclassic is unclear at this point. Avoiding the dependency on simulacrum in `cats-kernel`, provides insulation against any potential binary compatibility problems in such a transition.\n\n## <a id=\"kind-projector\" href=\"#kind-projector\"></a>What do types like `?` and `λ` mean?\n"
  }
]