[
  {
    "id" : "b9568f0a-8253-40d6-8c24-c2921f290b7c",
    "prId" : 1072,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f54a3bbb-a426-430e-9d0c-6f9c93a81022",
        "parentId" : null,
        "authorId" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "body" : "This could then be something like : \n\n> To do this, we will use  a `FunctionK` (also known as a natural transformation). A `FunctionK` is like a function but between type containers instead of values. A `FunctionK` between types `F[_]` and `G[_]` could be written as `FunctionK[F, G]` (or as `F ~> G` using the symbolic alternative).\n",
        "createdAt" : "2016-05-30T19:01:22Z",
        "updatedAt" : "2016-05-31T12:40:52Z",
        "lastEditedBy" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "tags" : [
        ]
      },
      {
        "id" : "8d967dc8-8215-4ddc-9fca-25d4009f4c23",
        "parentId" : "f54a3bbb-a426-430e-9d0c-6f9c93a81022",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "I would say that we can describe the type `FunctionK` as a _natural transformation_. So, when we would put the term in backticks (i.e. code) we'd say `FunctionK` but otherwise we'd say transformation or natural transformation. Does this make sense?\n",
        "createdAt" : "2016-05-30T19:24:31Z",
        "updatedAt" : "2016-05-31T12:40:52Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      },
      {
        "id" : "bb2779df-e0f1-4e0b-8583-63f816560a47",
        "parentId" : "f54a3bbb-a426-430e-9d0c-6f9c93a81022",
        "authorId" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "body" : "That does make sense, yes. It felt weird to use `FunctionK` in the documentation, that's why I left the documentation itself untouched.\n",
        "createdAt" : "2016-05-30T19:32:23Z",
        "updatedAt" : "2016-05-31T12:40:52Z",
        "lastEditedBy" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "tags" : [
        ]
      }
    ],
    "commit" : "8509cd41765ef82dc01184d9a20af203c814c935",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +168,172 @@`G[_]` (this particular transformation would be written as\n`FunctionK[F,G]` or as done here using the symbolic\nalternative as `F ~> G`).\n\nIn our case, we will use a simple mutable map to represent our key"
  },
  {
    "id" : "d67da48e-c012-4aff-afc4-58c105e4c509",
    "prId" : 991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6028129b-fbfd-4f0d-9a40-bfc7d3bd6698",
        "parentId" : null,
        "authorId" : "87827373-839d-4659-b70a-3dfef48eaa6a",
        "body" : "Here is the note in the tutorial\n",
        "createdAt" : "2016-04-26T18:35:03Z",
        "updatedAt" : "2016-05-17T14:36:19Z",
        "lastEditedBy" : "87827373-839d-4659-b70a-3dfef48eaa6a",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfd04f09cfa114913bc8d322b07829d9ceea9c7d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +168,172 @@`G[_]` (this particular transformation would be written as\n`NaturalTransformation[F,G]` or as done here using the symbolic\nalternative as `F ~> G`).\n\nIn our case, we will use a simple mutable map to represent our key"
  },
  {
    "id" : "b292bdea-ff14-4bad-adb4-0383b788d0fc",
    "prId" : 991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1693abce-d70a-492f-8ee6-5632550d8ba5",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "The build is failing because `~>` is imported, but `NaturalTransformation` is not. We should probably pick either one or the other for the tutorial and stick to it, but I do like your note about one being an alias for the other.\n",
        "createdAt" : "2016-05-04T12:43:31Z",
        "updatedAt" : "2016-05-17T14:36:19Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfd04f09cfa114913bc8d322b07829d9ceea9c7d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +245,249 @@\n```scala\nfinal def foldMap[M[_]](f: NaturalTransformation[S,M])(M: Monad[M]): M[A] = ...\n```\n"
  },
  {
    "id" : "9fa0a7c4-8480-43ca-9663-1aa287e0c047",
    "prId" : 832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2493f63-93e5-46de-a3d5-e08b4f9d5c40",
        "parentId" : null,
        "authorId" : "38b2671a-e346-400c-b290-b97f8c3dc652",
        "body" : "An alternative to `liftF` is to use `Free.inject` when targeting `cats.data.Coproduct` as a composition mechanism maybe it should be mentioned here. \n",
        "createdAt" : "2016-01-30T21:53:04Z",
        "updatedAt" : "2016-01-30T21:53:04Z",
        "lastEditedBy" : "38b2671a-e346-400c-b290-b97f8c3dc652",
        "tags" : [
        ]
      },
      {
        "id" : "88ae5e69-bb67-4942-af97-cc2e411e0f89",
        "parentId" : "f2493f63-93e5-46de-a3d5-e08b4f9d5c40",
        "authorId" : "38b2671a-e346-400c-b290-b97f8c3dc652",
        "body" : "I guess it's mentioned below. Perhaps we should consider adding some kind of TOC at the beginning of each tutorial to show at a glance the different sections and topics being described. \n",
        "createdAt" : "2016-01-30T21:58:32Z",
        "updatedAt" : "2016-01-30T21:58:32Z",
        "lastEditedBy" : "38b2671a-e346-400c-b290-b97f8c3dc652",
        "tags" : [
        ]
      }
    ],
    "commit" : "fadfbc8ea895f5bf7b72f61c3e29611cf9784b5b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +89,93 @@\n1. Create a type based on `Free[_]` and `KVStoreA[_]`.\n2. Create smart constructors for `KVStore[_]` using `liftF`.\n3. Build a program out of key-value DSL operations.\n4. Build a compiler for programs of DSL operations."
  }
]