[
  {
    "id" : "a24d6345-0b3f-44be-bb72-b37c5c0b5827",
    "prId" : 4456,
    "prUrl" : "https://github.com/apache/kafka/pull/4456#pullrequestreview-93413555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The types don't align. Using `Stores` you get plain `byte[]`/`byte[]` stores:\r\n```\r\n        StoreBuilder<KeyValueStore<byte[], byte[]>> a = Stores.keyValueStoreBuilder(\r\n            Stores.persistentKeyValueStore(\"name\"),\r\n            Serdes.ByteArray(),\r\n            Serdes.ByteArray()\r\n        );\r\n```",
        "createdAt" : "2018-01-30T23:51:44Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "08ed9633-19c1-4364-a5e8-b191546d4788",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "body" : "Yeah, but here I'm using the `Serdes.String()` and `Serdes.Long()` to create the StoreBuilder<KeyValueStore<String, Long>>, is there sth. wrong with this ?\r\n```\r\nStoreBuilder<KeyValueStore<String, Long>> countStoreSupplier = Stores.keyValueStoreBuilder(\r\n  Stores.persistentKeyValueStore(\"persistent-counts\"),\r\n  Serdes.String(),\r\n  Serdes.Long());\r\nKeyValueStore<String, Long> countStore = countStoreSupplier.build();\r\n```",
        "createdAt" : "2018-01-31T12:19:58Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "tags" : [
        ]
      },
      {
        "id" : "7d485130-b17a-4525-94d7-1af313949117",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`Stores.persistentKeyValueStore(\"persistent-counts\")` returns a `KeyValueBytesStoreSupplier` that extends `StoreSupplier<KeyValueStore<Bytes, byte[]>>` -- thus, the types are fixed.\r\n\r\nIf you want to have a String/Long store, you cannot use `Stores.persistentKeyValueStore(\"persistent-counts\")` but need implement your own `StoreSupplier` with corresponding types.\r\n\r\nI am fine either way -- but the example code should compile :) It think it's best if you code the example first and than c&p the code into the docs -- this ensures you get everything right.",
        "createdAt" : "2018-01-31T18:55:41Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4bd93bdc-eb06-4d8a-96fd-d9e539d32c22",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think I have to revert my comment here... The example works as you describe it. Got confused... Sorry.",
        "createdAt" : "2018-02-01T00:10:12Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e56f88f1-6af4-47fa-8b79-3674c221ce46",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "body" : "np @mjsax in fact, actually I should have run it before putting into docs, that's true and it's just because I see we are doing like this everywhere ... xD\r\nAnd for `KeyValueBytesStoreSupplier`, seems it always provides a `byte[]/byte[]` store for metering purpose in `InnerMeteredKeyValueStore` ? shall we also change `{@link org.apache.kafka.streams.processor.StateStoreSupplier}` [here](https://github.com/apache/kafka/blob/trunk/streams/src/main/java/org/apache/kafka/streams/state/internals/InnerMeteredKeyValueStore.java#L58) to `{@link org.apache.kafka.streams.state.StoreSupplier}` as the first one is deprecated ?",
        "createdAt" : "2018-02-01T13:22:44Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "tags" : [
        ]
      },
      {
        "id" : "400c62c5-bbdb-4d21-9f61-8945c25ce451",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Yes, internally, it must always be a `Byte/byte[]` store, if you use the `StoreBuilder` -- this allows us to wrap the store with caching and logging.\r\n\r\nYes, please update the other JavaDoc, too (it's internal only, but still good to update).",
        "createdAt" : "2018-02-01T18:26:56Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ba77db1f-e02e-4115-b3ef-3131af2c9223",
        "parentId" : "f010f1ae-de94-4635-a7e5-baf541275cd6",
        "authorId" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "body" : "@mjsax done.",
        "createdAt" : "2018-02-01T19:47:07Z",
        "updatedAt" : "2018-02-01T19:47:07Z",
        "lastEditedBy" : "9699dd81-efb9-40ce-9b93-2f923bcee57a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab182d1bc96dfe7d889ae2daca299b95588d8940",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +219,223 @@    <span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">String</span><span class=\"o\">(),</span>\n    <span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">Long</span><span class=\"o\">());</span>\n<span class=\"n\">KeyValueStore</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Long</span><span class=\"o\">&gt;</span> <span class=\"n\">countStore</span> <span class=\"o\">=</span> <span class=\"n\">countStoreSupplier</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span>\n</pre></div>\n                            </div>"
  },
  {
    "id" : "7e05aebc-2979-42d0-bb61-1e0e244f8ebe",
    "prId" : 4456,
    "prUrl" : "https://github.com/apache/kafka/pull/4456#pullrequestreview-92764961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e82b792-8179-4fc6-b9ce-3deaf7a8f959",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above.",
        "createdAt" : "2018-01-30T23:52:16Z",
        "updatedAt" : "2018-02-01T19:45:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab182d1bc96dfe7d889ae2daca299b95588d8940",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +248,252 @@    <span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">String</span><span class=\"o\">(),</span>\n    <span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">Long</span><span class=\"o\">());</span>\n<span class=\"n\">KeyValueStore</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Long</span><span class=\"o\">&gt;</span> <span class=\"n\">countStore</span> <span class=\"o\">=</span> <span class=\"n\">countStoreSupplier</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span>\n</pre></div>\n                            </div>"
  },
  {
    "id" : "ac08717a-974c-4ba4-aaea-74488956f724",
    "prId" : 5128,
    "prUrl" : "https://github.com/apache/kafka/pull/5128#pullrequestreview-125766593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "986cbc35-e75e-4868-85e5-4b373d0ef464",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why skip `id9` and use `id10` here?",
        "createdAt" : "2018-06-03T18:24:40Z",
        "updatedAt" : "2018-06-04T22:04:57Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f8126b7a-ea17-4363-8bd5-e885f6b019df",
        "parentId" : "986cbc35-e75e-4868-85e5-4b373d0ef464",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "`id9` is already used by: \r\n\r\n```\r\n                <li><a class=\"reference internal\" href=\"#unit-testing-processors\" id=\"id9\">Unit Testing Processors</a></li>\r\n```",
        "createdAt" : "2018-06-04T21:53:38Z",
        "updatedAt" : "2018-06-04T22:04:57Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      },
      {
        "id" : "687edbef-cce5-4194-8f0d-4445f0c914e0",
        "parentId" : "986cbc35-e75e-4868-85e5-4b373d0ef464",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ah I see, thanks.",
        "createdAt" : "2018-06-04T22:38:27Z",
        "updatedAt" : "2018-06-04T22:38:28Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7461502b300c54b3a14cf2860ebcc10ab3c0c1d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +54,58 @@                </li>\n                <li><a class=\"reference internal\" href=\"#connecting-processors-and-state-stores\" id=\"id8\">Connecting Processors and State Stores</a></li>\n                <li><a class=\"reference internal\" href=\"#accessing-processor-context\" id=\"id10\">Accessing Processor Context</a></li>\n            </ul>\n        </div>"
  },
  {
    "id" : "90d91cb3-9e6b-4945-9786-ec5d024b61f4",
    "prId" : 5796,
    "prUrl" : "https://github.com/apache/kafka/pull/5796#pullrequestreview-164943388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f0d8483-433e-4a0c-a04c-3acb8126116d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Is this intentional?",
        "createdAt" : "2018-10-15T20:16:53Z",
        "updatedAt" : "2018-10-16T00:20:58Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "49c5c4b9-3da5-41f7-96bb-76bd5f1c6f02",
        "parentId" : "8f0d8483-433e-4a0c-a04c-3acb8126116d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Yes. Fixed the indention.",
        "createdAt" : "2018-10-16T00:15:44Z",
        "updatedAt" : "2018-10-16T00:20:58Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "533af8cc7bb1b99d0062c9d4486df0777f1e2a9b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +367,371 @@            <div class=\"highlight-java\"><div class=\"highlight\"><pre><span></span><span class=\"n\">public void process(String key, String value) {</span>\n\n    <span class=\"c1\">// add a header to the elements</span>\n    <span class=\"n\">context()</span><span class=\"o\">.</span><span class=\"na\">headers</span><span class=\"o\">()</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">.</span><span class=\"o\">(</span><span class=\"s\">&quot;key&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;key&quot;</span>\n<span class=\"o\">}</span>"
  },
  {
    "id" : "e9afd4b8-6875-4232-9f46-0924e7a1273c",
    "prId" : 6239,
    "prUrl" : "https://github.com/apache/kafka/pull/6239#pullrequestreview-203558184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79ac2acc-c428-44e8-a3e5-c76bef4193c8",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Hmm, maybe just\r\n```suggestion\r\n                            <li>Available <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/state/Stores.html\">store variants</a>:\r\n```\r\n\r\nfor now?\r\n\r\nEither that, or give the correct link for each of the store types. It seems confusing to link to the k/v store, but then say \"available variants: k/v store, time window store, and session store\"",
        "createdAt" : "2019-02-14T03:43:56Z",
        "updatedAt" : "2019-02-21T03:08:16Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "8284985337551c636fdd761939ef675ee5c84ce2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +228,232 @@                            <li>RocksDB settings can be fine-tuned, see\n                                <a class=\"reference internal\" href=\"config-streams.html#streams-developer-guide-rocksdb-config\"><span class=\"std std-ref\">RocksDB configuration</span></a>.</li>\n                            <li>Available <a class=\"reference external\" href=\"/{{version}}/javadoc/org/apache/kafka/streams/state/Stores.html#persistentKeyValueStore-java.lang.String-\">store variants</a>:\n                                time window key-value store, session window key-value store.</li>\n                        </ul>"
  },
  {
    "id" : "4becd3cf-619c-4152-9ad2-44c5d4469262",
    "prId" : 6824,
    "prUrl" : "https://github.com/apache/kafka/pull/6824#pullrequestreview-418682397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44de12c6-51bc-4c47-83df-056810d226bf",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks for the cleanup here. Do you mind posting screenshots of the rendered docs?",
        "createdAt" : "2020-05-26T15:51:05Z",
        "updatedAt" : "2020-05-27T02:01:21Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "233f370e-ba29-4bc9-b013-77aef8a87cf9",
        "parentId" : "44de12c6-51bc-4c47-83df-056810d226bf",
        "authorId" : "9af9fedf-5bac-44a0-895d-96aad0032528",
        "body" : "After the `\"Source\"` addition suggested in another comment:\r\n\r\n![screencapture-localhost-25-documentation-streams-developer-guide-processor-api-html-2020-05-26-13_27_24](https://user-images.githubusercontent.com/3172488/82937232-6e501500-9f55-11ea-96ed-26a2a4c0457c.png)",
        "createdAt" : "2020-05-26T18:34:20Z",
        "updatedAt" : "2020-05-27T02:01:21Z",
        "lastEditedBy" : "9af9fedf-5bac-44a0-895d-96aad0032528",
        "tags" : [
        ]
      },
      {
        "id" : "7b888286-fbb4-47b4-bbc1-ac5a16c03fe9",
        "parentId" : "44de12c6-51bc-4c47-83df-056810d226bf",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks!",
        "createdAt" : "2020-05-26T21:11:35Z",
        "updatedAt" : "2020-05-27T02:01:21Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f23fbd6a633193d0ea5cfcb0734446a248b7cf09",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +382,386 @@                output data streams out of the topology.</p>\n            <p>Here is an example implementation:</p>\n            <pre class=\"brush: java\">\n                Topology builder = new Topology();\n                // add the source processor node that takes Kafka topic \"source-topic\" as input"
  },
  {
    "id" : "bcd91f53-78b1-41d4-b564-c6d671fbcbda",
    "prId" : 8920,
    "prUrl" : "https://github.com/apache/kafka/pull/8920#pullrequestreview-436216723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "625938b9-ff73-4e2b-be40-dd88bf2a5def",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we also extend `Defining and creating a State Store` ? -- It seems the section you added below, focuses on their usage?\r\n\r\n",
        "createdAt" : "2020-06-23T23:00:53Z",
        "updatedAt" : "2020-06-24T20:13:14Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a522718d4fd5beaca053c3a967076943919ca82d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +50,54 @@                        <li><a class=\"reference internal\" href=\"#fault-tolerant-state-stores\" id=\"id5\">Fault-tolerant State Stores</a></li>\n                        <li><a class=\"reference internal\" href=\"#enable-or-disable-fault-tolerance-of-state-stores-store-changelogs\" id=\"id6\">Enable or Disable Fault Tolerance of State Stores (Store Changelogs)</a></li>\n                        <li><a class=\"reference internal\" href=\"#timestamped-state-stores\" id=\"id11\">Timestamped State Stores</a></li>\n                        <li><a class=\"reference internal\" href=\"#implementing-custom-state-stores\" id=\"id7\">Implementing Custom State Stores</a></li>\n                    </ul>"
  },
  {
    "id" : "720f6ba7-075b-44c7-9da9-bd0e57ed93ba",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-701492676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12e8d079-96a3-45e4-bd4a-1579ade125a0",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The whole time handling situation is slightly different now that there's no implicit timestamp inheritance during `process()`. I just reframed this whole section to first document the role of the input and output type bounds, to second document the new Record class, and finally to slightly reframe the docs about what happens during punctuation.",
        "createdAt" : "2021-07-07T22:26:09Z",
        "updatedAt" : "2021-07-07T22:47:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +87,91 @@              <code class=\"docutils literal\"><span class=\"pre\">Processor</span></code> object by calling\n              <code class=\"docutils literal\"><span class=\"pre\">init()</span></code> on it again after <code class=\"docutils literal\"><span class=\"pre\">close()</span></code>.</p>\n          <p>\n            The <code class=\"docutils literal\"><span class=\"pre\">Processor</span></code> interface takes two sets of generic parameters:\n            <code class=\"docutils literal\"><span class=\"pre\">KIn, VIn, KOut, VOut</span></code>. These define the input and output types"
  },
  {
    "id" : "62fd71a4-6844-4d76-87c4-030f03706266",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-701492676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e3441b2-bf24-42a6-a364-921e0ae13522",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I happened to notice that the old docs here were outdated. Streams no longer plays those games with stream time. It's just computed as the max timestamp of any record processed by the task. But the key point still stands, that people should be aware that stream time doesn't advance unless we process records.",
        "createdAt" : "2021-07-07T22:28:07Z",
        "updatedAt" : "2021-07-07T22:47:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +148,152 @@                  If there are no records to process, or if Streams is waiting for new records\n                  due to the <a class=\"reference internal\" href=\"/documentation/#streamsconfigs_max.task.idle.ms\">Task Idling</a>\n                  configuration, then the stream time will not advance and <code class=\"docutils literal\"><span class=\"pre\">punctuate()</span></code> will not be triggered if <code class=\"docutils literal\"><span class=\"pre\">PunctuationType.STREAM_TIME</span></code> was specified.\n                    This behavior is independent of the configured timestamp extractor, i.e., using <code class=\"docutils literal\"><span class=\"pre\">WallclockTimestampExtractor</span></code> does not enable wall-clock triggering of <code class=\"docutils literal\"><span class=\"pre\">punctuate()</span></code>.</p>\n            </div>"
  },
  {
    "id" : "aec1b6b5-02f4-46a0-a39a-b48034f9c5ff",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-701492676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2469cde-c847-4fca-9d77-8c6dda085fdc",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Adding in the new output type bounds. The rest of the example is also updated to the new PAPI (type bounds on ProcessorContext, Record, etc.)",
        "createdAt" : "2021-07-07T22:41:48Z",
        "updatedAt" : "2021-07-07T22:47:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +158,162 @@                <li>In the <code class=\"docutils literal\"><span class=\"pre\">punctuate()</span></code> method, iterate the local state store and send the aggregated counts to the downstream processor (we will talk about downstream processors later in this section), and commit the current stream state.</li>\n            </ul>\n            <pre class=\"line-numbers\"><code class=\"language-java\">public class WordCountProcessor implements Processor&lt;String, String, String, String&gt; {\n    private KeyValueStore&lt;String, Integer&gt; kvStore;\n"
  },
  {
    "id" : "a092d2e9-cb9a-4a41-b6dc-d3197ccd0b71",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-701492676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3ff4d37-e17a-472b-872b-90d5e28597a6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is kind of funny: the old example was actually missing the `process` method! I copied the implementation over from the WordCountProcessorDemo.",
        "createdAt" : "2021-07-07T22:44:12Z",
        "updatedAt" : "2021-07-07T22:47:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +175,179 @@\n    @Override\n    public void process(final Record&lt;String, String&gt; record) {\n        final String[] words = record.value().toLowerCase(Locale.getDefault()).split(\"\\\\W+\");\n"
  },
  {
    "id" : "260dcaa4-57d1-4817-a0ca-7f88b00ee40e",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-701492676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf522465-e8cf-4062-b9a9-464bc23e4169",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "For this example, it seems more appropriate to depict a self-contained store definition, rather than referencing an externally defined store builder, as in the other example.",
        "createdAt" : "2021-07-07T22:45:17Z",
        "updatedAt" : "2021-07-07T22:47:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +477,481 @@                        Serdes.Long()\n                    );\n            return Collections.singleton(countsStoreBuilder);\n        }\n    }, \"Source\")"
  },
  {
    "id" : "6bc8a02d-d535-49ae-935c-b7a2368ae113",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-705304507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31b592a2-0772-4ba9-b632-5d9cfeaec623",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`properties` -> `fields` (or `elements`) ?",
        "createdAt" : "2021-07-12T23:54:05Z",
        "updatedAt" : "2021-07-13T00:02:59Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6f6d356b-3b30-40c5-911d-afe453fb7523",
        "parentId" : "31b592a2-0772-4ba9-b632-5d9cfeaec623",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks for this thought. I tend to say \"properties\" when I want to refer to the components of a complex type in the abstract.\r\n\r\n\"Field\" refers to the actual instance member that stores the pointer or primitive. For example, the fields of Record are private, so we actually don't give access to the fields per se. We do provide methods that get or set those fields (on new or existing instances). So the idea of saying \"property\" is to refer to the key, value, timestamp, or header itself without specifically mentioning whether it's stored in a field, variable, constant, or accessed/set via constructors, methods, etc.\r\n\r\n\"Element\" would also work, but I think I still favor \"property\", since people tend to refer to the contents of a data collection as its elements.",
        "createdAt" : "2021-07-13T14:59:00Z",
        "updatedAt" : "2021-07-13T14:59:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +110,114 @@            constructor to create a new <code class=\"docutils literal\"><span class=\"pre\">Record</span></code>\n            from scratch, or you can use the convenience builder methods to replace one of the\n            <code class=\"docutils literal\"><span class=\"pre\">Record</span></code>'s properties\n            and copy over the rest. For example,\n            <code class=\"docutils literal\"><span class=\"pre\">inputRecord.withValue(newValue)</span></code>"
  },
  {
    "id" : "78406efb-d425-469e-a3c5-5b81a31b7e27",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-706711892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5973b840-8882-41b6-b445-c66ff771ab40",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "You can also create a punctuation within `process()`.",
        "createdAt" : "2021-07-12T23:55:20Z",
        "updatedAt" : "2021-07-13T00:02:59Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "15d83e4f-e4c8-43f6-ba2d-2c91f9f5b770",
        "parentId" : "5973b840-8882-41b6-b445-c66ff771ab40",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Now that you mention it, I see that that's true. Should we actually suggest doing that, though? It seems kind of advanced for this level of documentation.",
        "createdAt" : "2021-07-13T14:49:21Z",
        "updatedAt" : "2021-07-13T14:49:21Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "240d19b2-26a8-43ae-bbc2-e625ebf37387",
        "parentId" : "5973b840-8882-41b6-b445-c66ff771ab40",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think I'll go ahead and merge to get this off my plate. If you do want to make this point, I can do a follow-on PR.",
        "createdAt" : "2021-07-13T14:59:44Z",
        "updatedAt" : "2021-07-13T14:59:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "cb8a2b42-fb2d-4ee1-b456-4af264d52983",
        "parentId" : "5973b840-8882-41b6-b445-c66ff771ab40",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Don't have a strong opinion -- but it's actually quite useful -- for example, you could register a punctuation for a specific input record (that you buffer in a state store) to emit it later on.\r\n\r\nAtm it sound like that you can only register a punctuation within `init()` what seems wrong.",
        "createdAt" : "2021-07-14T05:05:26Z",
        "updatedAt" : "2021-07-14T05:05:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f742aa93-e019-41bf-80ac-c45c7124706f",
        "parentId" : "5973b840-8882-41b6-b445-c66ff771ab40",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Hmm, that actually does sounds really useful. I never thought of it before. I'll file a ticket to document this use case. Thanks!",
        "createdAt" : "2021-07-14T20:55:15Z",
        "updatedAt" : "2021-07-14T20:55:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +125,129 @@              <code class=\"docutils literal\"><span class=\"pre\">Processor#process()</span></code>,\n              you have the option to schedule periodic invocation (called \"punctuation\")\n              in your processor's <code class=\"docutils literal\"><span class=\"pre\">init()</span></code>\n              method by calling  <code class=\"docutils literal\"><span class=\"pre\">ProcessorContext#schedule()</span></code>\n              and passing it a  <code class=\"docutils literal\"><span class=\"pre\">Punctuator</span></code>."
  },
  {
    "id" : "26a7cca1-7360-4f15-847c-93b33c9f5291",
    "prId" : 10994,
    "prUrl" : "https://github.com/apache/kafka/pull/10994#pullrequestreview-705857390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "358c0bb7-aea3-4d11-8d2d-fae85efab045",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`stream time` -> `stream-time` ",
        "createdAt" : "2021-07-12T23:57:00Z",
        "updatedAt" : "2021-07-13T00:03:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9cd808a1-8852-4b46-a7bd-fe1b76fc5af2",
        "parentId" : "358c0bb7-aea3-4d11-8d2d-fae85efab045",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks for pointing this out. I left out the hyphen here because \"time\" is a noun and \"stream\" is an adjective in this usage, as opposed to something like \"stream-time punctuation\", in which case \"punctuation\" is the noun, and \"stream-time\" is effectively a compound word acting as a single adjective.\r\n\r\nIn some cases, it would be fine to say that \"stream-time\" could be used here as a compound word functioning as a noun, but for some reason, that doesn't sound right to me in this sentence.\r\n\r\nThat said, compound word usage in English is pretty idiomatic, and I'm not sure anyone could claim there's a solid rule governing this sentence. All I can say is that \"steam time\" sounds right to me :) ",
        "createdAt" : "2021-07-13T15:07:31Z",
        "updatedAt" : "2021-07-13T15:07:49Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "54712b7e-86bc-4cc4-9892-289b52958f88",
        "parentId" : "358c0bb7-aea3-4d11-8d2d-fae85efab045",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I guess we use `stream-time` as a noun throughout the documentation... But anyway. Not a big deal.",
        "createdAt" : "2021-07-14T05:08:35Z",
        "updatedAt" : "2021-07-14T05:08:35Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1291c458c7005d24a676c30d0dcb90f7da35e47",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +148,152 @@                  If there are no records to process, or if Streams is waiting for new records\n                  due to the <a class=\"reference internal\" href=\"/documentation/#streamsconfigs_max.task.idle.ms\">Task Idling</a>\n                  configuration, then the stream time will not advance and <code class=\"docutils literal\"><span class=\"pre\">punctuate()</span></code> will not be triggered if <code class=\"docutils literal\"><span class=\"pre\">PunctuationType.STREAM_TIME</span></code> was specified.\n                    This behavior is independent of the configured timestamp extractor, i.e., using <code class=\"docutils literal\"><span class=\"pre\">WallclockTimestampExtractor</span></code> does not enable wall-clock triggering of <code class=\"docutils literal\"><span class=\"pre\">punctuate()</span></code>.</p>\n            </div>"
  }
]