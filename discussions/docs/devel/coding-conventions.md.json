[
  {
    "id" : "abbae311-dc12-4837-8e70-a5b85bf83710",
    "prId" : 25099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be410b9a-1e2f-402a-8815-4eb1001b5875",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "this is a weird linewrap, but it renders correctly - can we equally indent it and still render?\n",
        "createdAt" : "2016-05-03T23:42:35Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "6bd52e85-f475-49d6-a048-725ed857b034",
        "parentId" : "be410b9a-1e2f-402a-8815-4eb1001b5875",
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "Depends on the parsing tool. Some tools delete the extra whitespace in front of line two and after the new line, but not all tools.  The key is the line is a section or paragraph if you will, with a particular tab over.  However if you have spaces but no new section identifier like `-` or `*` or `1` then you are at the mercy of the implementation.  This is why on many manuals when you look at it in a shell set to the number of cols it was drafted with (new lined at), all is good, but then when you shrink it a few lines you get the end of the shorter line (tail) as the beginning of the next but then you have an extra new line at the end of the tail then the next line with the spaces in front.  \n\nHaving no spaces at the front of the next line in the paragraph tells the parsing tools that this is a continuing section.  Further, the number of spaces at the beginning does not always correspond to the tabbed section.   Think tabs vs spaces.  Getting the number of spaces just right is a hit or miss and won't work for all tools.  Thus, better to not guess.   \n",
        "createdAt" : "2016-05-04T00:13:02Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      },
      {
        "id" : "08200130-040e-4af6-817a-77d31162eb61",
        "parentId" : "be410b9a-1e2f-402a-8815-4eb1001b5875",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "puke.  How many different renderings do we expect to work?  Anything more\nthat GitHub (GFM) ?\n\nOn Tue, May 3, 2016 at 5:13 PM, Mike Brown notifications@github.com wrote:\n\n> In docs/devel/coding-conventions.md\n> https://github.com/kubernetes/kubernetes/pull/25099#discussion_r61977101\n> :\n> \n> > ```\n> >  - https://google-styleguide.googlecode.com/svn/trunk/shell.xml\n> > ```\n> > -    - Ensure that build, release, test, and cluster-management scripts run on OS X\n> >   +\n> > -    - Ensure that build, release, test, and cluster-management scripts run on\n> >   +OS X\n> \n> Depends on the parsing tool. Some tools delete the extra whitespace in\n> front of line two and after the new line, but not all tools. The key is the\n> line is a section or paragraph if you will, with a particular tab over.\n> However if you have spaces but no new section identifier like - or \\* or 1\n> then you are at the mercy of the implementation. This is why on many\n> manuals when you look at it at the cols it was new lined at all is good but\n> then when you strink it a few lines you get the end of the shorter line\n> (tail) as the beginning of the next but then you have an extra new line at\n> the end of the tail then the next line with the spaces in front. Having no\n> spaces at the front of the next line in the paragraph tells the parsing\n> tools that this is a continuing section. Further the number of spaces at\n> the beginning does not always correspond to the tabbed section. Getting the\n> number of spaces just right is a hit or miss and won't work f or all t\n> ools.. Thus better to not not guess.\n> \n> â€”\n> You are receiving this because you were assigned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/25099/files/f1b0b315c817c80452752e5861f957583138bae0#r61977101\n",
        "createdAt" : "2016-05-04T07:04:44Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "74dcdae9-b0d5-4f19-b0d3-007b0e502cc4",
        "parentId" : "be410b9a-1e2f-402a-8815-4eb1001b5875",
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "I presume the two important ones are the linux man(ual) which are the cli text manual documents (MD.. compiled versions of .md files) and man pages which is being used by GitHub.  I see there has been an effort to compile the kubectl-*.md docs into a linux manual.  \n",
        "createdAt" : "2016-05-04T14:31:16Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      },
      {
        "id" : "adc17f4a-dc3c-4943-bbca-c5de9adb5d58",
        "parentId" : "be410b9a-1e2f-402a-8815-4eb1001b5875",
        "authorId" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "body" : "@thockin To see the line wrap issue type `man docs/devel/coding-conventions.md` and make your window smaller.\n",
        "createdAt" : "2016-05-04T14:41:25Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "98677041-8dd3-472f-8583-94ee9e37145c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a42ea536ba12fef82fe8c18d50f9da47e72c1c72",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +55,59 @@\n    - Ensure that build, release, test, and cluster-management scripts run on\nOS X\n\n  - Go"
  },
  {
    "id" : "c832cbdd-2298-4b5d-b9e5-3a8f4622d908",
    "prId" : 25099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e332f8b-6ddc-491a-8e92-d87a2839c72f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same here\n",
        "createdAt" : "2016-05-03T23:42:46Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a42ea536ba12fef82fe8c18d50f9da47e72c1c72",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +62,66 @@\n    - [Go Code Review\nComments](https://github.com/golang/go/wiki/CodeReviewComments)\n\n    - [Effective Go](https://golang.org/doc/effective_go.html)"
  },
  {
    "id" : "c885ed74-2af9-4196-ac8c-55804e02e58c",
    "prId" : 25099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e0b70b9-a01c-402c-88bf-423f457e3380",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "same, I won't call it out more.\n",
        "createdAt" : "2016-05-03T23:42:59Z",
        "updatedAt" : "2016-05-09T17:43:39Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "a42ea536ba12fef82fe8c18d50f9da47e72c1c72",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +68,72 @@    - Comment your code.\n      - [Go's commenting\nconventions](http://blog.golang.org/godoc-documenting-go-code)\n      - If reviewers ask questions about why the code is the way it is, that's a\nsign that comments might be helpful."
  },
  {
    "id" : "ffe91720-cf0a-4ca8-a5fd-86cdf7689a74",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0c173ca-5a8a-42dd-81f2-dc58b45b98f4",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "There are a few different variants of the table test floating around, are we going to prescribe one?\n",
        "createdAt" : "2015-08-27T21:20:39Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "e1390027-5016-4352-91da-ba911fa7f325",
        "parentId" : "f0c173ca-5a8a-42dd-81f2-dc58b45b98f4",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I don't necessarily think that prescribing one is a good idea, but it would be good to try to stick to an existing convention that may exist in any given file.\n",
        "createdAt" : "2015-08-27T21:21:45Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "a059e131-3214-4bd2-b394-d0619b9b237e",
        "parentId" : "f0c173ca-5a8a-42dd-81f2-dc58b45b98f4",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "IMO we should also ask for integration and/or e2e tests for all significant features.\n",
        "createdAt" : "2015-08-27T23:25:21Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : null,
    "diffHunk" : "@@ -1,1 +59,63 @@Testing conventions\n  - All new packages and most new significant functionality must come with unit tests\n  - Table-driven tests are preferred for testing multiple scenarios/inputs; for example, see [TestNamespaceAuthorization](../../test/integration/auth_test.go)\n  - Significant features should come with integration (test/integration) and/or end-to-end (test/e2e) tests\n    - Including new kubectl commands and major features of existing commands"
  },
  {
    "id" : "e5b1d284-1176-472b-a2a9-30f12c1e08d9",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05ff0196-308d-4732-947b-560b41a8921c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add: \n- Naming:\n  - Please consider package name when selecting an interface name, and avoid redundancy.\n    - e.g.: `storage.Interface` is better than `storage.StorageInterface`.\n  - Please consider parent directory name when choosing a package name.\n    - so pkg/controllers/autoscaler/foo.go should say `package autoscaler` not `package autoscalercontroller`.\n    - Unless there's a good reason, the `package foo` line should match the name of the directory in which the .go file exists.\n    - Importers can use a different name if they need to disambiguate.\n",
        "createdAt" : "2015-08-28T17:54:59Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dcbac3d6-9931-4f5d-86bd-83a9079cc055",
        "parentId" : "05ff0196-308d-4732-947b-560b41a8921c",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Add a link to https://github.com/kubernetes/kubernetes/blob/master/docs/devel/logging.md\n",
        "createdAt" : "2015-08-28T18:10:24Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +81,85 @@Coding advice\n  - Go\n    - [Go landmines](https://gist.github.com/lavalamp/4bd23295a9f32706a48f)\n\n"
  },
  {
    "id" : "8c3c4408-f5e6-4bf5-9639-4f6f3e764dc3",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d7299d1-29b8-496e-a6da-f0fbb0d8bbc1",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Maybe also a link to\nhttps://golang.org/doc/effective_go.html\nwhich has a lot of conventions\n",
        "createdAt" : "2015-08-28T20:02:49Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "29fe39d3-f0d6-4040-bdc3-b4b6314fd2bf",
        "parentId" : "5d7299d1-29b8-496e-a6da-f0fbb0d8bbc1",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "It seems like all of the above could be some form of static analysis tools prior to PR. \n",
        "createdAt" : "2015-08-28T20:41:57Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "3546b5a6-279f-410e-aee6-2a7b0d1397ec",
        "parentId" : "5d7299d1-29b8-496e-a6da-f0fbb0d8bbc1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@timothysc PRs for more static checking would be welcome.\n",
        "createdAt" : "2015-08-28T23:17:36Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : null,
    "diffHunk" : "@@ -1,1 +54,58 @@      - [API changes](api_changes.md)\n      - [API conventions](api-conventions.md)\n    - [Kubectl conventions](kubectl-conventions.md)\n    - [Logging conventions](logging.md)\n"
  },
  {
    "id" : "b24f8a2d-8596-4d88-a8a3-7731787c1ce9",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7362915-9a17-4279-9857-ac4ef7e6ce70",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "We should also quarantine some tests to specific platforms all the way through.  There are a bunch of GCE-isms that we have to skirt around and new ones come up all the time.  (pot-meet-kettle)  \n",
        "createdAt" : "2015-08-28T20:43:26Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "9d451e6e-42c5-41f8-9a20-f6ef6f7a6b23",
        "parentId" : "f7362915-9a17-4279-9857-ac4ef7e6ce70",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Is there an example of an existing convention that people should follow?\n\nHave issues been filed for the specific problems you refer to?\n",
        "createdAt" : "2015-08-28T23:22:07Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +60,64 @@  - All new packages and most new significant functionality must come with unit tests\n  - Table-driven tests are preferred for testing multiple scenarios/inputs; for example, see [TestNamespaceAuthorization](../../test/integration/auth_test.go)\n  - Significant features should come with integration (test/integration) and/or end-to-end (test/e2e) tests\n    - Including new kubectl commands and major features of existing commands\n  - Unit tests must pass on OS X and Windows platforms - if you use Linux specific features, your test case must either be skipped on windows or compiled out (skipped is better when running Linux specific commands, compiled out is required when your code does not compile on Windows)."
  },
  {
    "id" : "3b506993-73d3-4866-88a7-6bf632100302",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99f22685-ed82-46a9-95bd-34f2aa0a2622",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Unit tests must pass on Mac and Windows platforms - if you use linux specific features, your test case must either be skipped on windows or compiled out (skipped is better when running linux specific commands, compiled out is required when your code does not compile on windows).\n",
        "createdAt" : "2015-08-30T21:35:35Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +59,63 @@Testing conventions\n  - All new packages and most new significant functionality must come with unit tests\n  - Table-driven tests are preferred for testing multiple scenarios/inputs; for example, see [TestNamespaceAuthorization](../../test/integration/auth_test.go)\n  - Significant features should come with integration (test/integration) and/or end-to-end (test/e2e) tests\n    - Including new kubectl commands and major features of existing commands"
  },
  {
    "id" : "6f1c3ab2-3162-4049-8e48-28a93ff6e301",
    "prId" : 13278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a128ad1-c3ee-485f-a287-6a56f885194c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Do not use uppercase characters, underscores, or dashes in package names.  Package directories should generally avoid using dashes as much as possible (when packages are multiple words, they usually should be in nested subdirectories).\n",
        "createdAt" : "2015-08-30T21:36:10Z",
        "updatedAt" : "2015-09-01T20:34:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "97e505849f8699811d70e007891dce3f669d2e53",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@      - Libraries with no more appropriate home belong in new package subdirectories of pkg/util\n    - Avoid general utility packages. Packages called \"util\" are suspect. Instead, derive a name that describes your desired function. For example, the utility functions dealing with waiting for operations are in the \"wait\" package and include functionality like Poll. So the full name is wait.Poll\n    - Go source files and directories use underscores, not dashes\n      - Package directories should generally avoid using separators as much as possible (when packages are multiple words, they usually should be in nested subdirectories).\n    - Document directories and filenames should use dashes rather than underscores"
  },
  {
    "id" : "48bf874a-6ec6-463f-bd22-213919f41390",
    "prId" : 4999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dba0874e-ff31-422c-a96c-4e99e2dd3a41",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm flattered-- but not really style advice, is it? :)\n",
        "createdAt" : "2015-03-04T00:27:58Z",
        "updatedAt" : "2015-03-04T00:27:58Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "91458060-9fcc-4d3c-a5ea-ca207b52aac7",
        "parentId" : "dba0874e-ff31-422c-a96c-4e99e2dd3a41",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "not introducing bugs is always stylish.\n",
        "createdAt" : "2015-03-05T00:00:06Z",
        "updatedAt" : "2015-03-05T00:00:06Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "edee8ebc-ba8a-4b50-83ad-8a43dd7cc2a6",
        "parentId" : "dba0874e-ff31-422c-a96c-4e99e2dd3a41",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Haha :)\n",
        "createdAt" : "2015-03-05T01:25:41Z",
        "updatedAt" : "2015-03-05T01:25:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "6765bbc179afe4b9f48ae224f9fd9837bd895848",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@  - Go\n    - https://github.com/golang/go/wiki/CodeReviewComments\n    - https://gist.github.com/lavalamp/4bd23295a9f32706a48f\n"
  }
]