[
  {
    "id" : "e7f5e713-d0bd-4474-bdce-d0e08df733ec",
    "prId" : 18694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecb5a501-84a6-474e-b85b-fccbf7d5ce3e",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "A `formatting requirement`? It should be consistent with the next point.\n",
        "createdAt" : "2015-12-15T22:12:06Z",
        "updatedAt" : "2015-12-18T17:43:40Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "a3b1cab9-7db4-4114-b11c-5a3844ff589e",
        "parentId" : "ecb5a501-84a6-474e-b85b-fccbf7d5ce3e",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I specifically split the negative case into formatting and behavioral, but in the positive sense there is no difference in words.\n",
        "createdAt" : "2015-12-16T00:27:50Z",
        "updatedAt" : "2015-12-18T17:43:40Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fecf965b4844af057e5eabc6cb2e233dd64ab5c",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +800,804 @@* Telling users what they CAN do is more useful than telling them what they\n  CANNOT do.\n* When asserting a requirement in the positive, use \"must\".  Examples: \"must be\n  greater than 0\", \"must match regex '[a-z]+'\".  Words like \"should\" imply that\n  the assertion is optional, and must be avoided."
  },
  {
    "id" : "82da10dc-cf45-416f-bc9e-5fda8e5566ec",
    "prId" : 17377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f09fb41a-318f-4ac2-b111-bedc4f581dd9",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@smarterclayton I sort of like this... int64 validated to be `0 <= x <= 2^32` instead of uint32? what do you think?\n",
        "createdAt" : "2015-11-18T18:04:51Z",
        "updatedAt" : "2015-11-18T18:04:51Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "531f050a-8c8a-4dca-a5e3-6882991001b5",
        "parentId" : "f09fb41a-318f-4ac2-b111-bedc4f581dd9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I could be ok with this - @thockin if you agree I'll use int64 internally\nfor UID/GID and then we'll validate to the range\n\nOn Wed, Nov 18, 2015 at 1:05 PM, Jordan Liggitt notifications@github.com\nwrote:\n\n> In docs/devel/api-conventions.md\n> https://github.com/kubernetes/kubernetes/pull/17377#discussion_r45235687\n> :\n> \n> > @@ -247,6 +248,14 @@ ports:\n> > \n> >  This rule maintains the invariant that all JSON/YAML keys are fields in API objects. The only exceptions are pure maps in the API (currently, labels, selectors, annotations, data), as opposed to sets of subobjects.\n> > \n> > +#### Primitive types\n> > +\n> > +\\* Avoid floating-point values as much as possible, and never use them in spec. Floating-point values cannot be reliably round-tripped (encoded and re-decoded) without changing, and have varying precision and representations across languages and architectures.\n> > +\\* All numbers (e.g., uint32, int64) are converted to float64 by Javascript and some other languages, so any field which is expected to exceed that either in magnitude or in precision (specifically integer values > 53 bits) should be serialized and accepted as strings.\n> > +\\* Do not use unsigned integers, due to inconsistent support across languages and libraries. Just validate that the integer is non-negative if that's the case.\n> \n> @smarterclayton https://github.com/smarterclayton I sort of like\n> this... int64 validated to be 0 <= x <= 2^32 instead of uint32? what do\n> you think?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17377/files#r45235687.\n",
        "createdAt" : "2015-11-18T18:07:35Z",
        "updatedAt" : "2015-11-18T18:07:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e362dcc1-3461-4cf3-aafd-dcf198db3b1b",
        "parentId" : "f09fb41a-318f-4ac2-b111-bedc4f581dd9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We could make exceptions, if compelling, but I'd rather not. We haven't run tests in Javascript, Python, PHP, Ruby, Java, etc., nor in various parsing/printing libraries, nor alternate encodings (e.g., yaml, ubjson), but it's definitely the case that some don't natively support unsigned ints. For instance, it looks like Java would need to parse unit32 as a double (http://www.json.org/javadoc/org/json/JSONObject.html), in which case it would have to validate sign and size, anyway.\n\nWe don't have any examples of bitmasks yet, but I'd be inclined to say they should be strings.\n",
        "createdAt" : "2015-11-19T05:22:32Z",
        "updatedAt" : "2015-11-19T05:22:32Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "c86b978d-c983-42d0-9e49-b9261aad28cb",
        "parentId" : "f09fb41a-318f-4ac2-b111-bedc4f581dd9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I can live with this, I think\n",
        "createdAt" : "2015-11-19T05:40:07Z",
        "updatedAt" : "2015-11-19T05:40:07Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2442b80e-fdc0-4ae8-95dc-47631c0c38db",
        "parentId" : "f09fb41a-318f-4ac2-b111-bedc4f581dd9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We kind of do - the range allocators are base64 encoded bitmask strings.\nNot publicly exposed yet.\n\nOn Nov 19, 2015, at 12:22 AM, Brian Grant notifications@github.com wrote:\n\nIn docs/devel/api-conventions.md\nhttps://github.com/kubernetes/kubernetes/pull/17377#discussion_r45301195:\n\n> @@ -247,6 +248,14 @@ ports:\n> \n>  This rule maintains the invariant that all JSON/YAML keys are fields in API objects. The only exceptions are pure maps in the API (currently, labels, selectors, annotations, data), as opposed to sets of subobjects.\n> \n> +#### Primitive types\n> +\n> +\\* Avoid floating-point values as much as possible, and never use them in spec. Floating-point values cannot be reliably round-tripped (encoded and re-decoded) without changing, and have varying precision and representations across languages and architectures.\n> +\\* All numbers (e.g., uint32, int64) are converted to float64 by Javascript and some other languages, so any field which is expected to exceed that either in magnitude or in precision (specifically integer values > 53 bits) should be serialized and accepted as strings.\n> +\\* Do not use unsigned integers, due to inconsistent support across languages and libraries. Just validate that the integer is non-negative if that's the case.\n\nWe could make exceptions, if compelling, but I'd rather not. We haven't run\ntests in Javascript, Python, PHP, Ruby, Java, etc., nor in various\nparsing/printing libraries, nor alternate encodings (e.g., yaml, ubjson),\nbut it's definitely the case that some don't natively support unsigned\nints. For instance, it looks like Java would need to parse unit32 as a\ndouble (http://www.json.org/javadoc/org/json/JSONObject.html), in which\ncase it would have to validate sign and size, anyway.\n\nWe don't have any examples of bitmasks yet, but I'd be inclined to say they\nshould be strings.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/17377/files#r45301195.\n",
        "createdAt" : "2015-11-19T05:47:03Z",
        "updatedAt" : "2015-11-19T05:47:03Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6252172857dd92df55391e3766ca7e4c6da5d6c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +253,257 @@* Avoid floating-point values as much as possible, and never use them in spec. Floating-point values cannot be reliably round-tripped (encoded and re-decoded) without changing, and have varying precision and representations across languages and architectures.\n* All numbers (e.g., uint32, int64) are converted to float64 by Javascript and some other languages, so any field which is expected to exceed that either in magnitude or in precision (specifically integer values > 53 bits) should be serialized and accepted as strings.\n* Do not use unsigned integers, due to inconsistent support across languages and libraries. Just validate that the integer is non-negative if that's the case.\n* Do not use enums. Use aliases for string instead (e.g., `NodeConditionType`).\n* Look at similar fields in the API (e.g., ports, durations) and follow the conventions of existing fields."
  },
  {
    "id" : "a247c48f-383a-4aaa-8129-9136f7381965",
    "prId" : 17377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20afed24-b735-46b0-99dc-b38caf9da3dc",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Tangent: we don't validate the fields typed as string aliases are one of the defined constants for that type.  Should we?  Go string aliases can take any value and aren't bound by `const` blocks.\n",
        "createdAt" : "2015-11-19T05:34:19Z",
        "updatedAt" : "2015-11-19T05:34:19Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "d269ad28-0909-4a41-b565-35367e5334e7",
        "parentId" : "20afed24-b735-46b0-99dc-b38caf9da3dc",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "validation logic should check that values are valid.  I know we do for a lot of fields (I wrote it).  We might not be 100%   \n",
        "createdAt" : "2015-11-19T05:41:09Z",
        "updatedAt" : "2015-11-19T05:41:09Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6252172857dd92df55391e3766ca7e4c6da5d6c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +254,258 @@* All numbers (e.g., uint32, int64) are converted to float64 by Javascript and some other languages, so any field which is expected to exceed that either in magnitude or in precision (specifically integer values > 53 bits) should be serialized and accepted as strings.\n* Do not use unsigned integers, due to inconsistent support across languages and libraries. Just validate that the integer is non-negative if that's the case.\n* Do not use enums. Use aliases for string instead (e.g., `NodeConditionType`).\n* Look at similar fields in the API (e.g., ports, durations) and follow the conventions of existing fields.\n"
  },
  {
    "id" : "48e85322-ecb2-40a1-a8ce-8f3aec9555f9",
    "prId" : 16628,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce8c7f5b-8fc3-4a20-b0d9-2af3bdc3aac5",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "The status code is added to the api-conventions.md. PTAL. I'll squash later.\n",
        "createdAt" : "2015-11-13T00:50:31Z",
        "updatedAt" : "2015-11-25T18:27:42Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4700707b386447b85ed112c195efd5648ae999f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +551,555 @@  * Indicates that the item is no longer available at the server and no forwarding address is known.\n  * Suggested client recovery behavior\n    * Do not retry. Fix the request.\n* `422 StatusUnprocessableEntity`\n  * Indicates that the requested create or update operation cannot be completed due to invalid data provided as part of the request."
  },
  {
    "id" : "ceef272a-ff5a-4bb1-80be-e600a85367a8",
    "prId" : 15566,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ecb560e-12a5-4436-8709-9ddc6262a23e",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "SGTM\n",
        "createdAt" : "2015-10-13T21:53:35Z",
        "updatedAt" : "2015-10-19T18:16:29Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1549496ee31d2a79b160745ef2a307062d74995",
    "line" : null,
    "diffHunk" : "@@ -1,1 +384,388 @@Required fields have the opposite properties, namely:\n\n- They do not have an `omitempty` struct tag.\n- They are not a pointer type in the Go definition (e.g. `bool otherFlag`).\n- The API server should not allow POSTing or PUTing a resource with this field unset."
  },
  {
    "id" : "3e37a597-c202-4a7c-9398-763b9fe5d2a4",
    "prId" : 15566,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0a6b72f-e921-45f9-82d1-41704a5f13ee",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "is this worth putting on the debt paydown?\n\nis it worth talking about internal vs versioned (where some fields are pointers in versioned and not in internal because of defaults) ?\n",
        "createdAt" : "2015-10-16T00:24:13Z",
        "updatedAt" : "2015-10-19T18:16:29Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "fdfa3a5a-c364-491c-9441-220501e52f9f",
        "parentId" : "c0a6b72f-e921-45f9-82d1-41704a5f13ee",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "It is definitely worth debt paydown.  Actually, it should be a pre-req for the versioned clients too, since it makes their interface consistent.  Filed issue 15859.\n",
        "createdAt" : "2015-10-19T18:08:58Z",
        "updatedAt" : "2015-10-19T18:16:29Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1549496ee31d2a79b160745ef2a307062d74995",
    "line" : null,
    "diffHunk" : "@@ -1,1 +401,405 @@  other clients that use corresponding types\n\nTherefore, we ask that pointers always be used with optional fields.\n\n"
  },
  {
    "id" : "1307b015-b9db-4595-ae4d-509a190967ab",
    "prId" : 12515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37764ce8-3e7e-4581-82f8-7c3697e8144c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Describe why we don't use phase?  It's an important distinction \n",
        "createdAt" : "2015-08-11T20:25:41Z",
        "updatedAt" : "2015-08-14T01:32:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "349bf8fb-829a-4e87-be3b-f9fbfb1dfdaf",
        "parentId" : "37764ce8-3e7e-4581-82f8-7c3697e8144c",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Added below.\n",
        "createdAt" : "2015-08-12T18:21:58Z",
        "updatedAt" : "2015-08-14T01:32:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f04d721612410f3a8b8757062a0baf195cfa0a60",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +183,187 @@##### Typical status properties\n\n**Conditions** represent the latest available observations of an object's current state. Objects may report multiple conditions, and new types of conditions may be added in the future. Therefore, conditions are represented using a list/slice, where all have similar structure.\n\nThe `FooCondition` type for some resource type `Foo` may include a subset of the following fields, but must contain at least `type` and `status` fields:"
  },
  {
    "id" : "e627da2f-75d0-4991-b81d-2dc116f7bd01",
    "prId" : 12515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "451d4991-7b2c-4d08-8636-b1b362d88dcf",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "We also have a /finalize resource but that may prove to be less common.\n",
        "createdAt" : "2015-08-12T02:19:49Z",
        "updatedAt" : "2015-08-14T01:32:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "5409b2b0-0cee-4cc2-aab3-6ad85e7b9d6f",
        "parentId" : "451d4991-7b2c-4d08-8636-b1b362d88dcf",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'll add that in a later pass. I hope to find time to hash out initializers in a couple weeks.\n",
        "createdAt" : "2015-08-12T17:33:55Z",
        "updatedAt" : "2015-08-14T01:32:52Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f04d721612410f3a8b8757062a0baf195cfa0a60",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +128,132 @@   * `/status`: Used to write just the status portion of a resource. For example, the `/pods` endpoint only allows updates to `metadata` and `spec`, since those reflect end-user intent. An automated process should be able to modify status for users to see by sending an updated Pod kind to the server to the \"/pods/&lt;name&gt;/status\" endpoint - the alternate endpoint allows different rules to be applied to the update, and access to be appropriately restricted.\n   * `/scale`: Used to read and write the count of a resource in a manner that is independent of the specific resource schema.\n\n   Two additional subresources, `proxy` and `portforward`, provide access to cluster resources as described in [docs/user-guide/accessing-the-cluster.md](../user-guide/accessing-the-cluster.md).\n"
  }
]