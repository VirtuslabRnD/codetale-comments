[
  {
    "id" : "869e63e0-5e9f-4992-8b86-a7e5c87a93b8",
    "prId" : 10091,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/10091#pullrequestreview-323120623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "parentId" : null,
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "Is this needed at runtime? I think it only containers headers.\r\n```suggestion\r\n```",
        "createdAt" : "2019-11-25T23:23:19Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "77abc906-7704-4a55-90a2-d28f21496af1",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "body" : "No, `boost-cpp` also contains libraries but also has a `run_exports` so you can omit it as it will be automatically included.",
        "createdAt" : "2019-11-26T06:11:26Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "tags" : [
        ]
      },
      {
        "id" : "90f6f0f9-824c-4c56-87cb-7e568eaada5d",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "I'm testing this with a local build right now, but at some point in the past (could have been a while ago) I did find that the run dependency on ``boost-cpp`` was needed. I know it contains libraries that are needed at runtime, but @xhochy appears to be right that it should be automatic now. It's not a ``run_exports`` in the ``boost-cpp`` package currently, but it is set using ``pin_run_as_build`` in ``conda-forge-pinning``.",
        "createdAt" : "2019-11-26T15:51:01Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      },
      {
        "id" : "7c34192b-bf56-4c87-a0f1-17b8dc31aa3a",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "My test without ``boost-cpp`` as a run requirement just failed locally with an overlinking error complaining about missing ``boost-cpp``. I guess ``pin_run_as_build`` doesn't add the dependency in the same way as ``run_exports``, it just sets the pin if it is there in the run requirements? Anyway, looks like these have to stay.",
        "createdAt" : "2019-11-26T16:12:26Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      },
      {
        "id" : "dc8fa9e2-d004-40d3-b473-6b53e86c3b92",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "How were you building this locally? The `pin_run_as_build` mechanism requires additional options to be passed (and might only work in feedstocks).",
        "createdAt" : "2019-11-26T16:24:31Z",
        "updatedAt" : "2019-11-26T16:24:32Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "22b0be25-11af-4115-90d1-de88c17f2c77",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "Regardless, LGTM and it can be removed in the feedstock if needed 👍 Thanks @ryanvolz!",
        "createdAt" : "2019-11-26T16:25:42Z",
        "updatedAt" : "2019-11-26T16:25:42Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "96613972-4cb8-420b-baa4-56ba76508b34",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "I adapted ``build-locally.py`` from a feedstock run run ``.circleci/run_docker_build.sh`` in a docker container. Not sure if that would do it, but maybe?",
        "createdAt" : "2019-11-26T16:27:19Z",
        "updatedAt" : "2019-11-26T16:27:20Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      },
      {
        "id" : "5e1d0f7a-8229-4326-9903-2151da1e4808",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "Anyway, I'll try it out with a pull request on the feedstock to make sure.",
        "createdAt" : "2019-11-26T16:28:14Z",
        "updatedAt" : "2019-11-26T16:28:14Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      },
      {
        "id" : "06be5247-487f-4204-9e7b-80b6b56448e0",
        "parentId" : "c69a3497-5525-46b5-a986-089b169c9a6d",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "> I adapted build-locally.py from a feedstock run run .circleci/run_docker_build.sh in a docker container. Not sure if that would do it, but maybe?\r\n\r\nThat will match with what is done for testing here in staged-recipes.\r\n\r\nThe `pin_run_as_build` constraints in the feedstocks come from rerendering where \"variant config files\" are generated and passed with something like `conda build -m .ci_support/config-something.yaml`.",
        "createdAt" : "2019-11-26T16:32:15Z",
        "updatedAt" : "2019-11-26T16:32:15Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "35736f48a11096a62f5ab37d9735225a7399dd25",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +218,222 @@      run:\n        - {{ pin_subpackage('gnuradio-core', exact=True) }}\n        - boost-cpp\n        - {{ pin_compatible('log4cpp') }}\n        - python"
  },
  {
    "id" : "6470af3a-8822-4e0e-86ff-6b36ce10acad",
    "prId" : 10091,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/10091#pullrequestreview-323085615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64561cfa-d676-4337-bd1f-ea751b6ea1a9",
        "parentId" : null,
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "It's better to take the global pin:\r\n```suggestion\r\n    - numpy\r\n```\r\nSee https://github.com/conda-forge/root-feedstock/pull/68#issuecomment-558266527",
        "createdAt" : "2019-11-25T23:26:20Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "bc2c4889-82f1-494a-9e43-b44fc9aac920",
        "parentId" : "64561cfa-d676-4337-bd1f-ea751b6ea1a9",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "This is a hack that I found necessary to get it to build. First, numpy is only actually a runtime dependency and the C API is not used at all. However, the build system checks that numpy is there at build time in order to ensure that runtime dependency, so in practice it becomes a host dependency. So why not just accept the pin then? Well maybe it's a bug that should be fixed another way, but I found that ``.circleci/build_steps.sh`` sets ``export CONDA_NPY='19'``, and even though the comment in the script says that the value is unused, that was causing a version conflict between the numpy 1.9 that was specified and the numpy pulled in by some of the dependencies that required the version from the conda-forge pin (currently 1.14?). So this was a hack to get the build to ignore the pin since the package doesn't care about the C API anyway.",
        "createdAt" : "2019-11-26T15:43:51Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      },
      {
        "id" : "c9797a25-eb16-4b80-8ac6-3aeca7a2ac48",
        "parentId" : "64561cfa-d676-4337-bd1f-ea751b6ea1a9",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "If you don't use the C API then this is fine 👍 ",
        "createdAt" : "2019-11-26T15:48:55Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "35736f48a11096a62f5ab37d9735225a7399dd25",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@    # (only needed at runtime, except gnuradio CMake checks for it at build)\n    # specify version so pin is ignored\n    - numpy >=1.1\n    - python\n    - six"
  },
  {
    "id" : "93b76ace-eb58-480f-9e91-6ba03e5b2a20",
    "prId" : 10091,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/10091#pullrequestreview-323082490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d2806ea-2004-4f02-b7cf-bef145047eb0",
        "parentId" : null,
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "Is this only using the Python API? Or is the C API also used? If so this is needed here and elsewhere\r\n```suggestion\r\n        - {{ pin_compatible('numpy') }}\r\n```",
        "createdAt" : "2019-11-25T23:27:29Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "20003d26-d38b-4ac2-9e74-d0e96d6a3faa",
        "parentId" : "9d2806ea-2004-4f02-b7cf-bef145047eb0",
        "authorId" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "body" : "Only the Python API is used, and numpy is not actually a host dependency except that the build system checks that it is there to ensure the run dependency on its own, so the pin is not needed.",
        "createdAt" : "2019-11-26T15:45:12Z",
        "updatedAt" : "2019-11-26T16:13:58Z",
        "lastEditedBy" : "9a1e57dd-ed09-48b2-9b26-9e41d63ae0ba",
        "tags" : [
        ]
      }
    ],
    "commit" : "35736f48a11096a62f5ab37d9735225a7399dd25",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@        - {{ pin_compatible('log4cpp') }}\n        - mako\n        - numpy\n        - {{ pin_compatible('portaudio') }}  # [linux]\n        - python"
  }
]