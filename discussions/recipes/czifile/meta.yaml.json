[
  {
    "id" : "231c866a-b31c-4bbf-9fc5-291c39a7d6eb",
    "prId" : 11096,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/11096#pullrequestreview-380122260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7962e4ee-6a8f-4d47-8ba9-cca12e25ef94",
        "parentId" : null,
        "authorId" : "085a9c6b-569e-49bd-9434-7f128372cf0c",
        "body" : "I think we should also be testing the `czifile` command",
        "createdAt" : "2020-03-24T03:06:12Z",
        "updatedAt" : "2020-03-24T15:10:45Z",
        "lastEditedBy" : "085a9c6b-569e-49bd-9434-7f128372cf0c",
        "tags" : [
        ]
      },
      {
        "id" : "e09a577d-5cf6-428a-9728-252dbc617ff4",
        "parentId" : "7962e4ee-6a8f-4d47-8ba9-cca12e25ef94",
        "authorId" : "2f48602b-b2d6-4250-b750-44d58e4b26b5",
        "body" : "The problem is, that the `czifile` command itself expects a filename as argument, or will open a file picker… ( https://gist.github.com/csachs/5388c2a8b406f351e3be9b5782f0f5e4#file-czifile-py-L1296..L1304 ), and will try to open whatever it got passed.\r\nHence I didn't add it for a check. Both commands are not testing much more than the import check, anyways.\r\nAs a workaround, due to the `if`, starting it with an empty argument `czifile ''` does indeed run it without any errors.",
        "createdAt" : "2020-03-24T09:16:46Z",
        "updatedAt" : "2020-03-24T15:10:45Z",
        "lastEditedBy" : "2f48602b-b2d6-4250-b750-44d58e4b26b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "536054e95e71b8170d68dabac4e34b69db5536b0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@  commands:\n    - czifile \"\"\n    - czi2tif\n\nabout:"
  },
  {
    "id" : "5af5428c-4c45-4ce7-9181-195111286c6d",
    "prId" : 11096,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/11096#pullrequestreview-380144167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6094fdf-73f6-42d3-88f2-00d79ee23d6f",
        "parentId" : null,
        "authorId" : "085a9c6b-569e-49bd-9434-7f128372cf0c",
        "body" : "Looking at the `setup.py`, there are some `install_requirements`:\r\n\r\n```\r\n 'numpy>=1.11.3',\r\n 'tifffile>=2019.7.2',\r\n 'imagecodecs>=2019.5.22;platform_system==\"Windows\"',\r\n```\r\n\r\nI'm not sure how important the version restrictions are. Also, what about `imagecodecs-lite` vs `imagecodecs` with a platform dependency?\r\n",
        "createdAt" : "2020-03-24T03:09:06Z",
        "updatedAt" : "2020-03-24T15:10:45Z",
        "lastEditedBy" : "085a9c6b-569e-49bd-9434-7f128372cf0c",
        "tags" : [
        ]
      },
      {
        "id" : "aeb0dd39-c4e6-49d1-bb81-0934175e9c51",
        "parentId" : "f6094fdf-73f6-42d3-88f2-00d79ee23d6f",
        "authorId" : "2f48602b-b2d6-4250-b750-44d58e4b26b5",
        "body" : "I've added version requirements. For `imagecodecs-lite`, the first release after `2019.5.22` (no corresponding `-lite` release exists).\r\n\r\nThe whole `imagecodecs` vs. `imagecodecs-lite` is a larger issue … `imagecodecs` is not yet a `conda-forge` package (see https://github.com/conda-forge/staged-recipes/pull/6842 for the lengthy discussion). Since much of `czifile`'s functionality is available with just `imagecodecs-lite`, I'd pick that as of the time being; I can change the dependency later when an `imagecodecs` package emerges.\r\n\r\n(Concerning the windows specifier, I assume cgohlke pointed to that package, since he builds binary wheels for Windows, and hence there an installation is rather easy.)",
        "createdAt" : "2020-03-24T09:44:57Z",
        "updatedAt" : "2020-03-24T15:10:45Z",
        "lastEditedBy" : "2f48602b-b2d6-4250-b750-44d58e4b26b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "536054e95e71b8170d68dabac4e34b69db5536b0",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    - pip\n  run:\n    - python\n    - numpy >=1.11.3\n    - tifffile >=2019.7.2"
  }
]