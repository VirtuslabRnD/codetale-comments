[
  {
    "id" : "68150852-1857-49a9-8789-b1c14ebe5a44",
    "prId" : 9225,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/9225#pullrequestreview-296137124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "733da9eb-2c88-4c0d-877d-9d0ae0f143b8",
        "parentId" : null,
        "authorId" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "body" : "No need for an asterix, conda does exactly that automatically.",
        "createdAt" : "2019-10-02T06:19:10Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "tags" : [
        ]
      },
      {
        "id" : "90fc9db9-c5c9-4bfc-834e-3da7bf4af7d1",
        "parentId" : "733da9eb-2c88-4c0d-877d-9d0ae0f143b8",
        "authorId" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "body" : "Without the asterix, there is a message:\r\n```\r\nWARNING:conda_build.utils:Adding .* to spec 'openjdk 8' to ensure satisfiability.  Please consider putting {{ var_name }}.* or some relational operator (>/</>=/<=) on this spec in meta.yaml, or if req is also a build req, using {{ pin_compatible() }} jinja2 function instead.  See https://conda.io/docs/user-guide/tasks/build-packages/variants.html#pinning-at-the-variant-level\r\n```\r\nShould the message be ignored?",
        "createdAt" : "2019-10-02T06:58:11Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "tags" : [
        ]
      },
      {
        "id" : "38cc67a9-a084-4e66-9d62-6216c54a69de",
        "parentId" : "733da9eb-2c88-4c0d-877d-9d0ae0f143b8",
        "authorId" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "body" : "No, I just didn't know that the convention is now the other way around ",
        "createdAt" : "2019-10-02T10:09:04Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "63355e08-a563-4e4d-8957-62b0581f602e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6297604bc216279241378ff14334d3b0e4459b29",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@    - glog\n    - gflags\n    - openjdk 8.*\n    - ncurses\n    - xz"
  },
  {
    "id" : "d810918a-5a86-4151-99b0-a1bfcdede828",
    "prId" : 9225,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/9225#pullrequestreview-310793948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92f35b14-b299-481b-9cd3-ba92a802f3a3",
        "parentId" : null,
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Could you please elaborate on this `boost-cpp`/`cmake` workaround?\r\n\r\nEdit: Also would be good to understand why `boost-cpp` is in `requirements/build`.",
        "createdAt" : "2019-10-08T19:10:21Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "fe32dce9-f561-406a-84bf-78cdfb584acc",
        "parentId" : "92f35b14-b299-481b-9cd3-ba92a802f3a3",
        "authorId" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "body" : "omniscidb is not `boost > 1.68` ready. Currently, when using 1.70, the build fails with\r\n```\r\nundefined reference to `boost::program_options::options_description::m_default_line_length'\r\n```\r\n\r\nI'll get back to here when I reproduce the issue that required `boost-cpp` in `build` section.",
        "createdAt" : "2019-10-08T19:54:50Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "tags" : [
        ]
      },
      {
        "id" : "68fe6b97-35f0-4153-86c3-8a72354354c9",
        "parentId" : "92f35b14-b299-481b-9cd3-ba92a802f3a3",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "> omniscidb is not `boost > 1.68` ready. Currently, when using 1.70, the build fails with\r\n> \r\n> ```\r\n> undefined reference to `boost::program_options::options_description::m_default_line_length'\r\n> ```\r\n\r\nThat's fine.\r\n\r\n> I'll get back to here when I reproduce the issue that required `boost-cpp` in `build` section.\r\n\r\nThis is what I'm interested in understanding. Guessing this is a bug with something else, but understand what needs to be fixed would be useful.",
        "createdAt" : "2019-10-08T20:02:34Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "2efef219-7903-4a91-b165-5644d2e0f330",
        "parentId" : "92f35b14-b299-481b-9cd3-ba92a802f3a3",
        "authorId" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "body" : "The `boost-cpp/cmake` workaround appears to be unnecessary now.",
        "createdAt" : "2019-11-03T00:02:55Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "tags" : [
        ]
      }
    ],
    "commit" : "6297604bc216279241378ff14334d3b0e4459b29",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@    # clang++ is used for generating the bytecodes of extension functions\n    - clangxx\n    - cmake\n    - make\n    - maven"
  },
  {
    "id" : "d075e18d-b554-4eac-b2cf-84c97f20a7a6",
    "prId" : 9225,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/9225#pullrequestreview-319668792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4444fbb5-0cdc-4dad-b541-7cceacc37921",
        "parentId" : null,
        "authorId" : "fa18c2b0-9128-4c2b-b6e0-433b177f7cf1",
        "body" : "One more question. Why add `-cuda`?",
        "createdAt" : "2019-11-18T22:06:03Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "fa18c2b0-9128-4c2b-b6e0-433b177f7cf1",
        "tags" : [
        ]
      },
      {
        "id" : "f616647a-4a30-4b94-b1c9-adfe28edc60d",
        "parentId" : "4444fbb5-0cdc-4dad-b541-7cceacc37921",
        "authorId" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "body" : "Because there is also `omniscidb-cpu`.",
        "createdAt" : "2019-11-18T22:11:13Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "tags" : [
        ]
      },
      {
        "id" : "933ada05-3691-4717-997a-d025220044a2",
        "parentId" : "4444fbb5-0cdc-4dad-b541-7cceacc37921",
        "authorId" : "fa18c2b0-9128-4c2b-b6e0-433b177f7cf1",
        "body" : "You should use one feedstock for both to avoid duplication, but this can be done later.",
        "createdAt" : "2019-11-19T20:19:39Z",
        "updatedAt" : "2019-11-19T20:27:36Z",
        "lastEditedBy" : "fa18c2b0-9128-4c2b-b6e0-433b177f7cf1",
        "tags" : [
        ]
      },
      {
        "id" : "665aed0c-a232-4703-8378-f9070caddeaf",
        "parentId" : "4444fbb5-0cdc-4dad-b541-7cceacc37921",
        "authorId" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "body" : "Yes, I agree, we'll continue working on this.",
        "createdAt" : "2019-11-20T08:39:33Z",
        "updatedAt" : "2019-11-20T08:39:34Z",
        "lastEditedBy" : "c9d93b39-4832-4c58-b0ee-db4e36d93435",
        "tags" : [
        ]
      }
    ],
    "commit" : "6297604bc216279241378ff14334d3b0e4459b29",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@{% set name = \"omniscidb-cuda\" %}\n{% set version = \"5.0.0\" %}\n{% set sha256 = \"3115261258059f8ad61efc802cd6c13e8c0d62a07621ebcfad55bb6f8ceaa0ed\" %}"
  }
]