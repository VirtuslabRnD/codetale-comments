[
  {
    "id" : "83fddf34-40b6-4387-891f-3bb5dbb843d4",
    "prId" : 323,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea58a836-5254-4ecb-91cb-3a5d19a89110",
        "parentId" : null,
        "authorId" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "body" : "Meant to ping you on this @takluyver - I'm trying to increase the bus factor on the Jupyter related conda recipes so added you to the maintainers. Please do let me know if that isn't OK.\n",
        "createdAt" : "2016-04-12T17:11:40Z",
        "updatedAt" : "2016-04-12T17:11:55Z",
        "lastEditedBy" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "a8fa6bba-a7d4-49e3-9ead-93705c8caaa8",
        "parentId" : "ea58a836-5254-4ecb-91cb-3a5d19a89110",
        "authorId" : "034d212a-78da-41f9-9ec1-26383738ddf4",
        "body" : "In the specific case, that's fine.\n\nHowever, more generally, I'm concerned that we're replicating the Debian maintainership model, which I think is fundamentally broken for packaging a large diverse ecosystem of software components. Specifically, there are two related issues I have with it:\n- If package maintainers are separate from upstream maintainers (as here - I'm not involved at all in pathlib2 development), I think things inevitably end up languishing because of a lack of interest. I'm unlikely to notice if a new version of pathlib2 is released, and even if I do, will I be motivated to update the conda recipe?\n- If packages are maintained by specific named individuals rather than as a collective team pool, it means there's a low bus factor on each individual package, and it can lead to unwanted fragmentation, if different people pick different ways of packaging things.\n\nI wonder if we could develop a more automated approach for straightforward packages, that wouldn't require human intervention on each new release. E.g. maybe convert wheels into conda packages? I have been working on a tool called [flonda](https://github.com/takluyver/flonda) that can build conda packages directly from the metadata my packaging tool [flit](http://flit.readthedocs.org/en/latest/) uses. That only works on packages that have chosen to use flit, but a similar technique could be used to make conda packages from wheels.\n",
        "createdAt" : "2016-04-12T18:25:11Z",
        "updatedAt" : "2016-04-12T18:25:11Z",
        "lastEditedBy" : "034d212a-78da-41f9-9ec1-26383738ddf4",
        "tags" : [
        ]
      },
      {
        "id" : "da819e9e-1cda-409e-bba3-fea9840e1b15",
        "parentId" : "ea58a836-5254-4ecb-91cb-3a5d19a89110",
        "authorId" : "034d212a-78da-41f9-9ec1-26383738ddf4",
        "body" : "(Plus, even in the cases where I am the upstream maintainer, I'm not entirely keen on adding a step to my release process which has to happen in a separate repository.)\n",
        "createdAt" : "2016-04-12T18:27:15Z",
        "updatedAt" : "2016-04-12T18:27:15Z",
        "lastEditedBy" : "034d212a-78da-41f9-9ec1-26383738ddf4",
        "tags" : [
        ]
      },
      {
        "id" : "bde0a619-915f-4097-9ec5-e466b99bfcdf",
        "parentId" : "ea58a836-5254-4ecb-91cb-3a5d19a89110",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "> I wonder if we could develop a more automated approach for straightforward packages, that wouldn't require human intervention on each new release. E.g. maybe convert wheels into conda packages?\n\nThere has been discussed many times with Continuum over a couple of years on this point of simplifying the entry of PyPI packages into the conda ecosystem. Recently, it sounded like there was some interest on their end. Though I don't know what timeline is being considered at present. Really it seems like that is where this change will need to begin for anything to happen on this front.\n\nEven if it does happen, there are some packages that are just problems for this model of packaging. At least to me, it is not entirely clear how this gets automated on their end. How do they recognize whether a package can be converted this way or not? For instance, pyzmq is on PyPI, but I think we would rather build its C dependencies and compile pyzmq to link against them. Similarly, numpy is up there with ATLAS, but many conda users would be extremely unhappy using ATLAS. Not to mention, this falls into the same category as pyzmq. Namely, we would want to build the BLAS dependency separately. They can try to read the PyPI package metadata for C/C++/Cython and skip it, but that only goes so far. For example, Python libraries using `ctypes` or `cffi` still have C library dependencies that we should try to package and explicitly require if we can. At present, the best we can do is what we are doing now. Wrap up the Python dependencies we need here. This is already a significant improvement on the previous situation given the level of automation present here.\n\nWithin our own system, we have considered at the bare minimum trying to open [issues](https://github.com/conda-forge/conda-forge.github.io/issues/51) on PyPI releases or when git tags are pushed. Ideally, these would be PR's with version updates. However, there is still a bit of diversity in our system that makes this not totally easy to automate. While desirable, there are simply more pressing problems. For awhile that has been CI efficiency and automation. Now, it is starting to seem like documentation and examples. Both before and now, a pressing issue has been community engagement, review of additions, and migration of conda-recipes. While this is going well thus far, there is still lots of work to do on that front. I think it is still some time off before we really sit down and evaluate this problem. That being said, we remain aware that it exists.\n\nTL;DR - Sure, but it is not that simple. While it is an issue, there are other problems that are more pressing at present.\n",
        "createdAt" : "2016-04-12T19:05:21Z",
        "updatedAt" : "2016-04-13T01:17:54Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebcd21b23e77e1e56aca2c4e4f5e903b1d9a28c5",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@  recipe-maintainers:\n    - pelson\n    - takluyver"
  }
]