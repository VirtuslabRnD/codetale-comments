[
  {
    "id" : "65cc270d-497f-4e63-bc65-de405fd5280e",
    "prId" : 14408,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/14408#pullrequestreview-624729450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8624851d-bdb7-4bbe-8419-5ffb10681c7a",
        "parentId" : null,
        "authorId" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "body" : "Does this need to be pinned so tightly?",
        "createdAt" : "2021-03-30T20:55:34Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "tags" : [
        ]
      },
      {
        "id" : "c54feca5-57e0-4a4e-bdbf-e38dc2718f80",
        "parentId" : "8624851d-bdb7-4bbe-8419-5ffb10681c7a",
        "authorId" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "body" : "Unfortunately yes - we require the latest pystan 2*, and pystan 3.0 was just released but is not backwards compatible with pystan 2*, so we're pinned to 2.19.1.1 (which will be the last 2* release).",
        "createdAt" : "2021-03-30T21:44:23Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12638852d55c2a1035033b187c09d194a05f58a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@    - matplotlib-base\n    - pandas >=1.0.4\n    - pystan ==2.19.1.1\n    - LunarCalendar\n    - convertdate"
  },
  {
    "id" : "f00a6a09-1a4e-4dc5-8a84-944cc8f1560f",
    "prId" : 14408,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/14408#pullrequestreview-636103150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "parentId" : null,
        "authorId" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "body" : "This looks like a pure Python package. No way to do this as `noarch: python`?",
        "createdAt" : "2021-04-12T18:28:13Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "tags" : [
        ]
      },
      {
        "id" : "d2b657ab-8e0f-4e97-b367-dc68066e8be8",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "body" : "Would the `binary_has_prefix_files` bit below work with `noarch`?",
        "createdAt" : "2021-04-12T18:53:10Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "tags" : [
        ]
      },
      {
        "id" : "a0435050-2f57-41ab-8e9b-148644e8027b",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "body" : "Any chance they could just be `*.pkl`?",
        "createdAt" : "2021-04-12T18:55:03Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "tags" : [
        ]
      },
      {
        "id" : "ac8c4ebd-4637-4aa7-b0e5-baf7c64686f0",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "body" : "Well I think part of the question is, does binary prefix replacement work with `noarch` packages?",
        "createdAt" : "2021-04-12T18:56:40Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "tags" : [
        ]
      },
      {
        "id" : "57f291ad-7e9b-4cba-b58d-5e19f773daee",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "body" : "@dopplershift thanks for the help! I tried the `noarch: python` and it didn't work because although this package is pure python, during build it uses its dependency pystan to compile a model binary that is then stored in the pickle. It seems that with `noarch: python` that build didn't happen and the package failed to install.",
        "createdAt" : "2021-04-13T21:54:36Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "tags" : [
        ]
      },
      {
        "id" : "425d2ef7-4696-4050-be19-8a5b25b2fc58",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "body" : "Can you give it another shot? It looks like the first time you tried in 1058c2a46a389827e60f2c1b2b147113a450d2e1, you added `noarch: python`, but you also removed the `script` line, which is what tells it to run `setup.py`. Try only adding the `noarch: python`.",
        "createdAt" : "2021-04-14T16:23:27Z",
        "updatedAt" : "2021-04-14T20:18:11Z",
        "lastEditedBy" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "tags" : [
        ]
      },
      {
        "id" : "ffdb8d07-c82b-4098-911a-d69d68e165a8",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "body" : "Thanks, and forgive my ignorance, for some reason I thought it was supposed to replace script!",
        "createdAt" : "2021-04-14T19:08:54Z",
        "updatedAt" : "2021-04-14T20:18:11Z",
        "lastEditedBy" : "e19a2839-7c90-4446-825e-52bf1387dae4",
        "tags" : [
        ]
      },
      {
        "id" : "e7414b8f-7510-4b5f-8787-36e76e4207c9",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "body" : "> Would the `binary_has_prefix_files` bit below work with `noarch`?\r\n\r\nTo answer my own question, this seems to be working fine with `noarch`",
        "createdAt" : "2021-04-14T21:01:30Z",
        "updatedAt" : "2021-04-14T21:01:30Z",
        "lastEditedBy" : "8acc2b00-986c-40be-a345-a0ce5205c09a",
        "tags" : [
        ]
      },
      {
        "id" : "1e48b8a1-5918-47ed-9e2b-07c12de6987a",
        "parentId" : "bfb42c52-0477-4570-839b-50903c4fdd77",
        "authorId" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "body" : ":tada:",
        "createdAt" : "2021-04-14T21:39:59Z",
        "updatedAt" : "2021-04-14T21:39:59Z",
        "lastEditedBy" : "f2a8b72f-e001-4606-a1c7-b774f81c945f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12638852d55c2a1035033b187c09d194a05f58a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  binary_has_prefix_files:\n    - {{ SP_DIR|replace(\"\\\\\", \"/\") }}/stan_model/prophet_model.pkl"
  },
  {
    "id" : "da60237f-404c-49b7-b3cc-8b9539999ebf",
    "prId" : 14408,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/14408#pullrequestreview-624729450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d261e1b6-80d7-4ff5-8ac9-39cd26268db8",
        "parentId" : null,
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Does this need to be pinned so tightly?",
        "createdAt" : "2021-03-30T20:55:34Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "90d6895c-a760-4efe-8c92-86a0cf89ea67",
        "parentId" : "d261e1b6-80d7-4ff5-8ac9-39cd26268db8",
        "authorId" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "body" : "Unfortunately yes - we require the latest pystan 2*, and pystan 3.0 was just released but is not backwards compatible with pystan 2*, so we're pinned to 2.19.1.1 (which will be the last 2* release).",
        "createdAt" : "2021-03-30T21:44:23Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12638852d55c2a1035033b187c09d194a05f58a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@    - matplotlib-base\n    - pandas >=1.0.4\n    - pystan ==2.19.1.1\n    - LunarCalendar\n    - convertdate"
  },
  {
    "id" : "199d790d-8fea-4f31-9328-06a22725abea",
    "prId" : 14408,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/14408#pullrequestreview-636103150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "parentId" : null,
        "authorId" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "body" : "This looks like a pure Python package. No way to do this as `noarch: python`?",
        "createdAt" : "2021-04-12T18:28:13Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "tags" : [
        ]
      },
      {
        "id" : "f8ad0c48-aa9f-4167-b50c-e1961af26527",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Would the `binary_has_prefix_files` bit below work with `noarch`?",
        "createdAt" : "2021-04-12T18:53:10Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "a086f37f-f4de-4e02-ad03-ba3e307bc021",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "body" : "Any chance they could just be `*.pkl`?",
        "createdAt" : "2021-04-12T18:55:03Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "tags" : [
        ]
      },
      {
        "id" : "901a115e-86a0-405a-b3f7-c6b0812c5433",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Well I think part of the question is, does binary prefix replacement work with `noarch` packages?",
        "createdAt" : "2021-04-12T18:56:40Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "00a930b0-62c5-4d32-813e-120959d6d400",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "body" : "@dopplershift thanks for the help! I tried the `noarch: python` and it didn't work because although this package is pure python, during build it uses its dependency pystan to compile a model binary that is then stored in the pickle. It seems that with `noarch: python` that build didn't happen and the package failed to install.",
        "createdAt" : "2021-04-13T21:54:36Z",
        "updatedAt" : "2021-04-14T20:18:10Z",
        "lastEditedBy" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "tags" : [
        ]
      },
      {
        "id" : "6096f090-b049-4b95-b42f-7725e878cd85",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "body" : "Can you give it another shot? It looks like the first time you tried in 1058c2a46a389827e60f2c1b2b147113a450d2e1, you added `noarch: python`, but you also removed the `script` line, which is what tells it to run `setup.py`. Try only adding the `noarch: python`.",
        "createdAt" : "2021-04-14T16:23:27Z",
        "updatedAt" : "2021-04-14T20:18:11Z",
        "lastEditedBy" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "tags" : [
        ]
      },
      {
        "id" : "add13f92-b2aa-4857-9f09-b65b58245b6d",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "body" : "Thanks, and forgive my ignorance, for some reason I thought it was supposed to replace script!",
        "createdAt" : "2021-04-14T19:08:54Z",
        "updatedAt" : "2021-04-14T20:18:11Z",
        "lastEditedBy" : "6a21999a-cfae-4dd1-b71c-8df5d88386dd",
        "tags" : [
        ]
      },
      {
        "id" : "75588108-1a2b-4c75-9bbc-f04529bd07d1",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "> Would the `binary_has_prefix_files` bit below work with `noarch`?\r\n\r\nTo answer my own question, this seems to be working fine with `noarch`",
        "createdAt" : "2021-04-14T21:01:30Z",
        "updatedAt" : "2021-04-14T21:01:30Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "9b63c0f5-bbe7-4ee9-8b2d-7913bb1d0a93",
        "parentId" : "7ae11e06-3c27-448b-ad8f-2a383c60fa92",
        "authorId" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "body" : ":tada:",
        "createdAt" : "2021-04-14T21:39:59Z",
        "updatedAt" : "2021-04-14T21:39:59Z",
        "lastEditedBy" : "43fc678a-cc3a-4707-8540-4c6397651b46",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12638852d55c2a1035033b187c09d194a05f58a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  binary_has_prefix_files:\n    - {{ SP_DIR|replace(\"\\\\\", \"/\") }}/stan_model/prophet_model.pkl"
  }
]