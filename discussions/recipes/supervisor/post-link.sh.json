[
  {
    "id" : "3ee1168e-0d2c-48e7-9171-77f95b47de78",
    "prId" : 573,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3eb2d93-3788-4c3e-9521-ddb018df0ead",
        "parentId" : null,
        "authorId" : "5102da93-31fa-41e6-b5fa-7de04e55f6ea",
        "body" : "This is going to require sudo, right?  How can we make that gel with conda's user-level acess model?  Generally, if we're telling people to use sudo, they'll end up with files owned by root, which breaks later usability, then they devolve into using sudo for everything.  Imagine\n\n```\nsudo ipython\n```\n\nIs there a way to not require sudo here?  I understand that it probably means not using supervisor at the system level - but it is still useful at the user level.  I use it for my raspberry pi photo frame at home this way.\n",
        "createdAt" : "2016-05-10T13:35:25Z",
        "updatedAt" : "2016-05-10T13:35:25Z",
        "lastEditedBy" : "5102da93-31fa-41e6-b5fa-7de04e55f6ea",
        "tags" : [
        ]
      },
      {
        "id" : "1e9dc8a4-f849-4302-9ad6-06f8220824e5",
        "parentId" : "e3eb2d93-3788-4c3e-9521-ddb018df0ead",
        "authorId" : "f5b5ea2e-ce82-4cbc-9653-5909d6fb660d",
        "body" : "No, actually it's not.  The post-install shouldn't be doing this linking if you're not running as root.  So if you've installed miniconda as root, then it'll link for you.  If not, then you just get your file structure in your $PREFIX.\n",
        "createdAt" : "2016-05-10T13:49:35Z",
        "updatedAt" : "2016-05-10T13:49:35Z",
        "lastEditedBy" : "f5b5ea2e-ce82-4cbc-9653-5909d6fb660d",
        "tags" : [
        ]
      },
      {
        "id" : "8b3dbfe7-c07a-4f60-bb26-7bc814e2c145",
        "parentId" : "e3eb2d93-3788-4c3e-9521-ddb018df0ead",
        "authorId" : "f5b5ea2e-ce82-4cbc-9653-5909d6fb660d",
        "body" : "This is kind of uncharted territory actually.  It's still a question for me what the \"best practice\" should be for conda doing OS management tasks like directory creation (outside of $PREFIX), user creation, setting permissions, etc.  The native OS package managers do all of this when they install packages; conda should too.  At some point.\n\nThis part is just a little nudge in that direction.  If you've already installed conda as root, then go ahead and link these files into the `/` file structure.\n",
        "createdAt" : "2016-05-10T13:53:39Z",
        "updatedAt" : "2016-05-10T13:53:39Z",
        "lastEditedBy" : "f5b5ea2e-ce82-4cbc-9653-5909d6fb660d",
        "tags" : [
        ]
      },
      {
        "id" : "591adeb8-89be-426b-a9a1-fd6f513d829b",
        "parentId" : "e3eb2d93-3788-4c3e-9521-ddb018df0ead",
        "authorId" : "5102da93-31fa-41e6-b5fa-7de04e55f6ea",
        "body" : "I see.  Yes, I think your scripts here are a good way to do what you want here, and making it work both on the user-level and root level is a good idea.\n\n+1 to merge from me.\n",
        "createdAt" : "2016-05-10T13:57:17Z",
        "updatedAt" : "2016-05-10T13:57:17Z",
        "lastEditedBy" : "5102da93-31fa-41e6-b5fa-7de04e55f6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "471bba4947e9c8d1e08b27f04653dfce38333b21",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@if [[ $(id -u) == 0 ]]; then\n    mkdir -p /etc/supervisord/ && ln -s $PREFIX/etc/supervisord/ /etc/supervisord/\n    ln -s $PREFIX/etc/supervisord.conf /etc/supervisord.conf\n    mkdir -p /var/log/supervisord/ && ln -s $PREFIX/var/log/supervisord/ /var/log/supervisord/\n    mkdir -p /var/run/supervisord/ && ln -s $PREFIX/var/run/supervisord/ /var/run/supervisord/"
  }
]