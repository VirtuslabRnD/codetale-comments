[
  {
    "id" : "83663db1-391c-47ac-979e-2aee99878cea",
    "prId" : 293,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b89aea-697f-4ce0-a248-c0ddde2c4e79",
        "parentId" : null,
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Should we just add the optional dependency?\n",
        "createdAt" : "2016-04-09T21:01:44Z",
        "updatedAt" : "2016-04-09T21:01:44Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "fb4a6653-0919-4f7a-b19a-6c418988c3e4",
        "parentId" : "86b89aea-697f-4ce0-a248-c0ddde2c4e79",
        "authorId" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "body" : "> Should we just add the optional dependency?\n\nI couldn't quickly write a test which needed it so didn't add the optional dependency. As a first cut, I think this is good enough without.\n",
        "createdAt" : "2016-04-10T06:47:02Z",
        "updatedAt" : "2016-04-10T06:47:02Z",
        "lastEditedBy" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "2ab69dc6-22ad-4927-9c36-4addf2ecb740",
        "parentId" : "86b89aea-697f-4ce0-a248-c0ddde2c4e79",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "Personally, I would be happy to see the optional dependency with or without the test. That being said, could we just run the test suite?\n",
        "createdAt" : "2016-04-10T20:18:46Z",
        "updatedAt" : "2016-04-10T20:18:46Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      },
      {
        "id" : "84916594-aae6-4977-b964-d8247c9f1cf5",
        "parentId" : "86b89aea-697f-4ce0-a248-c0ddde2c4e79",
        "authorId" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "body" : "> Personally, I would be happy to see the optional dependency with or without the test\n\nThat's like adding a function to a piece of software and having no idea if it is working or not - it makes me extremely nervous, especially given the simplicity of adding a test in this case.\n\nIn terms of running the test suite, if it takes <1 min to run I'm 👍 with it, otherwise the testing should be taking place in the source repository IMHO. We can't afford to eat up too many cycles with unittesting of packages in conda-forge.\n",
        "createdAt" : "2016-04-11T07:38:22Z",
        "updatedAt" : "2016-04-11T07:38:22Z",
        "lastEditedBy" : "753b1247-ba26-4947-8bde-480d6590d6e2",
        "tags" : [
        ]
      },
      {
        "id" : "67148455-4fb8-425b-b325-644b7f8d2a60",
        "parentId" : "86b89aea-697f-4ce0-a248-c0ddde2c4e79",
        "authorId" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "body" : "I guess I would be more nervous if it weren't a simple Python 3.4 backport. Though you make a good point that it probably should be tested especially since it is so easy to do.\n\nBased on what I saw from the CI times of `mistune` and `traitlets`, this ends up being ~1min (with a few second hedge factor).\n\nThat being said, I don't think we should be so aggressive on avoiding running the test suites. Particularly when it comes to compiled software. This case isn't so bad as they are both pure Python. However, when it is something fairly low level that contains C/C++, we should want to avoid releasing it as potentially broken software if we can. This is as much to make sure the code is ok as it is to make sure the compiler is behaving correctly (this will be more important if we start shipping our own). For instance, take this quote from GMP.\n\n> Most problems with GMP these days are due to problems not in GMP, but with the compiler used for compiling the GMP sources. This is a major concern to the GMP project, since an incorrect computation is an incorrect computation, whether caused by a GMP bug or a compiler bug. We fight this by making the GMP testsuite have great coverage, so that it should catch every possible miscompilation.\n\n-- Reporting bugs in GMP - ( https://gmplib.org/ )\n\nThe case with most of the compiled code that has entered our stack to date fits under this category. It is normally quite old, very stable, and is widely used (both in the world and in our stack).\n\nEspecially given our recent improvements with CI performance, we shouldn't let fear of testing time drive poor release quality.\n",
        "createdAt" : "2016-04-11T15:14:03Z",
        "updatedAt" : "2016-04-11T15:14:03Z",
        "lastEditedBy" : "a3f1fdb0-47ad-411e-b63d-af6fc71a1fa6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f0afe27e358a6fa1994ce7794ee74e502392ba4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    - decorator\n    # enum34 may be of interest here also, but a test would also\n    # need to be added to the recipe. \n\ntest:"
  }
]