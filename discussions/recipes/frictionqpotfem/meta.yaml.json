[
  {
    "id" : "b6282f93-ae5e-4ea0-ac63-84f5ea8441cf",
    "prId" : 12912,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/12912#pullrequestreview-510972128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "parentId" : null,
        "authorId" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "body" : "These are either:\r\n* not needed at all (outside of `run`)\r\n* belong in `host`\r\n\r\nI'd suggest removing them and adding them as `host` deps if needed\r\n```suggestion\r\n```",
        "createdAt" : "2020-10-16T17:27:12Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "tags" : [
        ]
      },
      {
        "id" : "0aba68dd-b288-49f7-be15-069c10e3cd6f",
        "parentId" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "authorId" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "body" : "Thanks for your review @chrisburr . I need clarification of your remark: all these libraries are loaded by CMake during install. So I don't think `build` could work without them. Then the user always needs them when using the header-only library. But since the user only needs them at compile time I don't want to fix them to any version of this library (again this library is header-only, so nothing is actually compiled in the feedstock). So I still think that I did right...",
        "createdAt" : "2020-10-16T17:48:01Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "tags" : [
        ]
      },
      {
        "id" : "14289c40-cb44-4cea-bfb8-f4040f203565",
        "parentId" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "authorId" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "body" : "As this is header only I guess the \"install\" is basically (vastly over-simplifying):\r\n```\r\ncp myheader.h $PREFIX/include/myheader.h\r\n```\r\nIn which case they're probably not actually needed, except I guess CMake is looking for them anyway even if they're not used? If so, they're needed for the \"target\" platform and this should be:\r\n```yaml\r\n  build:\r\n    - {{ compiler('cxx') }}\r\n    - cmake\r\n    - make  # [unix]\r\n  host:\r\n    - goosefem\r\n    - gmatelastoplasticqpot\r\n    - xtensor\r\n```\r\nTo try and explain the distinction: Imagine `xtensor` provides shared libraries and you're cross compiling for ARM from a `linux-64` machine. The compiler, `cmake` and `make` all need to be run-able on `linux-64` but they don't care about being executable on ARM. When you link to `libxtensor.so`, you need the ARM binary even though it can't be executed. Of course if they're header-only it probably doesn't make any difference if you use the ARM or x86 version of the package but it hypothetically could if you generate the headers differently for different platforms.",
        "createdAt" : "2020-10-16T18:17:08Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "tags" : [
        ]
      },
      {
        "id" : "27ad93ab-e654-4cde-83dd-1a5001adf359",
        "parentId" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "authorId" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "body" : "Thanks @chrisburr ! \r\n\r\nIndeed installing is essentially copying the headers and generating the proper CMake config files. This is done with CMake that indeed looks for the dependencies. So at that time they need to be there. Furthermore, since the library is header only there is no linking involved. Only the end user will compile and use the dependencies (a side note is that all the listed dependencies are header-only libraries, though for the discussion I don't think that matters). It does however need them all always when it want to compile with this library. So it does make sense to install them when the user installs the curent library. \r\n\r\nI think that the only way I can satisfy both requirements *without* fixing a version of this library to a specific version of the dependencies is to what I did. Note that this is an important requirement, as only the end user will compile, so only the end user will 'fix' the versions used.\r\n",
        "createdAt" : "2020-10-17T05:14:22Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "tags" : [
        ]
      },
      {
        "id" : "aaafdf2a-b706-408a-aa16-4be1b9038b07",
        "parentId" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "authorId" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "body" : "> I think that the only way I can satisfy both requirements without fixing a version of this library to a specific version of the dependencies is to what I did.\r\n\r\nAre you looking for [`ignore_run_exports`](https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html?highlight=ignore_run_exports#export-runtime-requirements) to make sure the `host` dependencies don't add version constraints at runtime?",
        "createdAt" : "2020-10-17T05:33:36Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "c299267b-13d3-4165-bdd2-383eea98be0c",
        "tags" : [
        ]
      },
      {
        "id" : "48240c39-5f14-4fd8-b9e5-1a35c9d17a4b",
        "parentId" : "e67eeb9d-c8f3-4210-a8bf-f24d427ab726",
        "authorId" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "body" : "I have changed the recipe according to your suggestion",
        "createdAt" : "2020-10-17T09:26:58Z",
        "updatedAt" : "2020-10-17T09:26:58Z",
        "lastEditedBy" : "402c1e44-e291-46fb-885a-921c1d6472aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "4be55b55c9a177364cd8e26a5dd579d093a2690e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    - goosefem\n    - gmatelastoplasticqpot\n    - xtensor\n  run:\n    - goosefem"
  },
  {
    "id" : "26a6766c-019c-45f3-be25-087f4d734a96",
    "prId" : 12912,
    "prUrl" : "https://github.com/conda-forge/staged-recipes/pull/12912#pullrequestreview-510972128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "parentId" : null,
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "These are either:\r\n* not needed at all (outside of `run`)\r\n* belong in `host`\r\n\r\nI'd suggest removing them and adding them as `host` deps if needed\r\n```suggestion\r\n```",
        "createdAt" : "2020-10-16T17:27:12Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "4aecc18e-d549-4c5d-9040-a2d2d4354612",
        "parentId" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "authorId" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "body" : "Thanks for your review @chrisburr . I need clarification of your remark: all these libraries are loaded by CMake during install. So I don't think `build` could work without them. Then the user always needs them when using the header-only library. But since the user only needs them at compile time I don't want to fix them to any version of this library (again this library is header-only, so nothing is actually compiled in the feedstock). So I still think that I did right...",
        "createdAt" : "2020-10-16T17:48:01Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "tags" : [
        ]
      },
      {
        "id" : "9c085577-0ab0-4af1-85bd-53a647550d9c",
        "parentId" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "As this is header only I guess the \"install\" is basically (vastly over-simplifying):\r\n```\r\ncp myheader.h $PREFIX/include/myheader.h\r\n```\r\nIn which case they're probably not actually needed, except I guess CMake is looking for them anyway even if they're not used? If so, they're needed for the \"target\" platform and this should be:\r\n```yaml\r\n  build:\r\n    - {{ compiler('cxx') }}\r\n    - cmake\r\n    - make  # [unix]\r\n  host:\r\n    - goosefem\r\n    - gmatelastoplasticqpot\r\n    - xtensor\r\n```\r\nTo try and explain the distinction: Imagine `xtensor` provides shared libraries and you're cross compiling for ARM from a `linux-64` machine. The compiler, `cmake` and `make` all need to be run-able on `linux-64` but they don't care about being executable on ARM. When you link to `libxtensor.so`, you need the ARM binary even though it can't be executed. Of course if they're header-only it probably doesn't make any difference if you use the ARM or x86 version of the package but it hypothetically could if you generate the headers differently for different platforms.",
        "createdAt" : "2020-10-16T18:17:08Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "69cca024-e5db-4ba6-a606-2394caa27ed2",
        "parentId" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "authorId" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "body" : "Thanks @chrisburr ! \r\n\r\nIndeed installing is essentially copying the headers and generating the proper CMake config files. This is done with CMake that indeed looks for the dependencies. So at that time they need to be there. Furthermore, since the library is header only there is no linking involved. Only the end user will compile and use the dependencies (a side note is that all the listed dependencies are header-only libraries, though for the discussion I don't think that matters). It does however need them all always when it want to compile with this library. So it does make sense to install them when the user installs the curent library. \r\n\r\nI think that the only way I can satisfy both requirements *without* fixing a version of this library to a specific version of the dependencies is to what I did. Note that this is an important requirement, as only the end user will compile, so only the end user will 'fix' the versions used.\r\n",
        "createdAt" : "2020-10-17T05:14:22Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "tags" : [
        ]
      },
      {
        "id" : "f6844dfa-12eb-49a4-a0de-3c71325bb4ef",
        "parentId" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "authorId" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "body" : "> I think that the only way I can satisfy both requirements without fixing a version of this library to a specific version of the dependencies is to what I did.\r\n\r\nAre you looking for [`ignore_run_exports`](https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html?highlight=ignore_run_exports#export-runtime-requirements) to make sure the `host` dependencies don't add version constraints at runtime?",
        "createdAt" : "2020-10-17T05:33:36Z",
        "updatedAt" : "2020-10-17T09:25:38Z",
        "lastEditedBy" : "d838053f-6fcd-47a0-a593-accf1cf846b0",
        "tags" : [
        ]
      },
      {
        "id" : "52c85fb6-edb1-42ce-bd4b-54b1f15ff878",
        "parentId" : "72c16dea-2546-4667-b8f2-7c02d7ab4002",
        "authorId" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "body" : "I have changed the recipe according to your suggestion",
        "createdAt" : "2020-10-17T09:26:58Z",
        "updatedAt" : "2020-10-17T09:26:58Z",
        "lastEditedBy" : "9ff34741-632f-43b7-ba25-766a242c9d7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4be55b55c9a177364cd8e26a5dd579d093a2690e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    - goosefem\n    - gmatelastoplasticqpot\n    - xtensor\n  run:\n    - goosefem"
  }
]