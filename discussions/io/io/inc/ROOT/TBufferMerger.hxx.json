[
  {
    "id" : "320e7907-9135-477d-a914-efa2d6626ab0",
    "prId" : 533,
    "prUrl" : "https://github.com/root-project/root/pull/533#pullrequestreview-37147341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9daafbbf-3cc2-4899-b6e8-488e0ff7b8f5",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "This probably can probably be replaced by a TBits (more compact).",
        "createdAt" : "2017-05-09T20:05:34Z",
        "updatedAt" : "2017-05-10T06:49:41Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "139828ec-ec28-49d8-9f35-c2f92c508c5c",
        "parentId" : "9daafbbf-3cc2-4899-b6e8-488e0ff7b8f5",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I didn't want to touch the imported code, because I wasn't sure what exactly was stored in it, but an array of characters seems wierd as replacement for a vector of bools, if that's what it really is for here. I would prefer using std::bitset if that's ok in that case. What do you think?",
        "createdAt" : "2017-05-09T20:13:36Z",
        "updatedAt" : "2017-05-10T06:49:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "f9751faa-266c-4232-a465-0d9ad1f410f5",
        "parentId" : "9daafbbf-3cc2-4899-b6e8-488e0ff7b8f5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "This does not need to be addressed before merging.\r\n\r\nThe main difference between std::bitset and TBits is that bitset has a fixed size at compile time while TBits is expandable (and some operation in TBits are (or at least used to be) faster).  Here you can not predict the maximum number of TStreamerInfo involved in storing data in this file.\r\n\r\nThe reason it is a TArrayC is that at the time the original version of this code was written (circa 2000), TBits did not exist yet ... i.e. this code is copy/paste per se from TFile::WriteStreamerInfo.\r\n\r\nThe purpose is solely to keep track of whether a StreamerInfo, refer to by its index has been sent over ...\r\n\r\n... right but that does not make any sense when the client and the  server are in the same process ....\r\n\r\nSo actually WriteStreamerInfo and any use of fClassSent can go away ....\r\n",
        "createdAt" : "2017-05-09T20:25:41Z",
        "updatedAt" : "2017-05-10T06:49:41Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "a16b19e1-7566-4a51-9a7f-0aee0822a967",
        "parentId" : "9daafbbf-3cc2-4899-b6e8-488e0ff7b8f5",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Well, I'm not acquainted yet with the internals of the I/O system, so I cannot make such judgments. If it is indeed unnecessary, then we should remove it.",
        "createdAt" : "2017-05-09T20:34:32Z",
        "updatedAt" : "2017-05-10T06:49:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed8dc20b25f5a18d6c8441abe7d91179858ebbfb",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@private:\n   TBufferMerger &fMerger;              //< TBufferMerger this file is attached to\n   std::unique_ptr<TArrayC> fClassSent; //< StreamerInfo this file has already written\n\n   /** Constructor. Can only be called by TBufferMerger."
  },
  {
    "id" : "71541419-6a67-476b-a328-1461a32bfa22",
    "prId" : 577,
    "prUrl" : "https://github.com/root-project/root/pull/577#pullrequestreview-38440374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Is there a particular reason to mark the members only `const`?",
        "createdAt" : "2017-05-16T16:06:55Z",
        "updatedAt" : "2017-05-16T16:09:38Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "76881b29-e5c4-4463-aaa6-e600b8aabe56",
        "parentId" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "As opposed to what?",
        "createdAt" : "2017-05-16T16:10:29Z",
        "updatedAt" : "2017-05-16T16:10:29Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e625b9e2-2737-4735-9d5a-ff347826bc3b",
        "parentId" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "As opposed to not being `const`. What's the meaning of const int/string? The compiler can deduce this based on the fact that those are allocated on the stack so if it is there for optimization I think it is redundant. If you are telling the reader that you only touch this in the constructors, could be good to know. I don't think this is a common practice in ROOT, however.",
        "createdAt" : "2017-05-16T16:14:04Z",
        "updatedAt" : "2017-05-16T16:14:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "8364c9fb-234f-46f4-998e-3258b10f798e",
        "parentId" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Is there a particular reason to mark the members only const?\r\n\r\nIt insures that the invariant of the class (not-allowed to change output file after the class) are guaranteed.  It also allows/indicates-that-you-are-allowed to use those from multiple thread without risk of race condition.",
        "createdAt" : "2017-05-16T16:14:11Z",
        "updatedAt" : "2017-05-16T16:16:55Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "ff5c2454-2af6-4413-a5e9-23483558ded5",
        "parentId" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Yes, what @pcanal said, and it makes it easy to catch bugs if these members are ever modified by mistake.",
        "createdAt" : "2017-05-16T16:16:43Z",
        "updatedAt" : "2017-05-16T16:16:43Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "de765b2b-200c-4df7-b636-15ba4abaa022",
        "parentId" : "75a8ac0a-095f-4a08-9f87-f5a4985619c5",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Ok, make sense. I see their semantics is readonly.",
        "createdAt" : "2017-05-16T16:23:41Z",
        "updatedAt" : "2017-05-16T16:23:41Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf9be1f866a1d1c9bf6eed206f7a7c82b1cea5d2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +84,88 @@   const std::string fName;\n   const std::string fOption;\n   const Int_t fCompress;\n   std::mutex fQueueMutex;                                       //< Mutex used to lock fQueue\n   std::mutex fWriteMutex;                                       //< Mutex used for the condition variable"
  }
]