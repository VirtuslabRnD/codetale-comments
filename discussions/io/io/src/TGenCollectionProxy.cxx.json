[
  {
    "id" : "9dfbbb04-4233-4838-baac-2c0d12b8fa06",
    "prId" : 6062,
    "prUrl" : "https://github.com/root-project/root/pull/6062#pullrequestreview-454251539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54c05c3b-286b-47cc-b58d-e2bdb9ec44c4",
        "parentId" : null,
        "authorId" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "body" : "Would there be a problem if `Initialize(kFALSE)` is called multiple times?",
        "createdAt" : "2020-07-23T15:30:09Z",
        "updatedAt" : "2020-07-23T16:31:58Z",
        "lastEditedBy" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d319506405a6901a61abda28fefe215acb28419f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +733,737 @@TVirtualCollectionProxy* TGenCollectionProxy::Generate() const\n{\n   if ( !fValue.load(std::memory_order_relaxed) ) Initialize(kFALSE);\n\n   if( fPointers )"
  },
  {
    "id" : "59b18296-1aba-4516-923f-5914f184510a",
    "prId" : 6062,
    "prUrl" : "https://github.com/root-project/root/pull/6062#pullrequestreview-454269378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267f138e-2ef9-4dfc-ae4a-f69a376a06e6",
        "parentId" : null,
        "authorId" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "body" : "NOTE: the use of `std::memory_order_relaxed` does not mean the non-atomic values set in `Initialize` will be properly synchronized across threads (assuming you were intending `fValue` to do that work).",
        "createdAt" : "2020-07-23T15:35:22Z",
        "updatedAt" : "2020-07-23T16:31:58Z",
        "lastEditedBy" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "tags" : [
        ]
      },
      {
        "id" : "69dc263b-f638-4777-bd97-c3cdeb5de6e5",
        "parentId" : "267f138e-2ef9-4dfc-ae4a-f69a376a06e6",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The intended pattern is that Initialize take the global lock, recheck fValue (and return immediately if set), do the work and set fValue as the last step.  (i.e. fValue being \"spurriously\" seen as nullptr is fine).",
        "createdAt" : "2020-07-23T15:48:10Z",
        "updatedAt" : "2020-07-23T16:31:58Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d319506405a6901a61abda28fefe215acb28419f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +942,946 @@Int_t TGenCollectionProxy::GetCollectionType() const\n{\n   if (!fValue.load(std::memory_order_relaxed)) {\n      Initialize(kFALSE);\n   }"
  }
]