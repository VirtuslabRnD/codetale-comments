[
  {
    "id" : "855c3291-097c-4c3b-8b66-de96ec94bcec",
    "prId" : 1462,
    "prUrl" : "https://github.com/root-project/root/pull/1462#pullrequestreview-84578026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "As a side note, the idea of the Action is to factor these long blocks to remove any if statements whose answer is known at construction time.  For example those at line 583 or 605 should (eventually) lead to 2 more version of this functions (possibly build by composition to avoid code duplication) where each version contains only the code path needed and no (well less) conditional statements.",
        "createdAt" : "2017-12-19T19:17:45Z",
        "updatedAt" : "2017-12-19T19:17:45Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "dcebe66e-eb4d-467b-9ab0-15da2d98d1f8",
        "parentId" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Yes, I agree.\r\n\r\nAs you can see, I keep possibility to use same actions for binary- and text-based buffers.\r\nShould one try to use these actions also for binary I/O?\r\n\r\nAlso very principal question - should we try to avoid virtual methods inside actions?\r\nThis can be achieved, if we can really split binary-based and text-based TBuffer classes and use respective methods directly. But this could have many side-effects.",
        "createdAt" : "2017-12-19T19:50:17Z",
        "updatedAt" : "2017-12-19T19:50:17Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "683d5e0b-8ad7-442d-96be-0b7eda418fac",
        "parentId" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Should one try to use these actions also for binary I/O?\r\n\r\nYes, especially in some work goes into optimization (i.e. splitting the function).\r\n\r\n> should we try to avoid virtual methods inside actions?\r\n\r\nAbsolutely, that is the main advantage of splitting (even if just by templating) text and binary functions.\r\n\r\nThanks.",
        "createdAt" : "2017-12-19T19:53:50Z",
        "updatedAt" : "2017-12-19T19:53:50Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e4f43cf4-f03f-4773-b343-40965c252c30",
        "parentId" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : ">>    should we try to avoid virtual methods inside actions?\r\n\r\n> Absolutely, that is the main advantage of splitting (even if just by templating) text and binary functions.\r\n\r\nMy current idea - introduce TBufferText class which is derived from TBuffer and defines all necessary methods to work with text-based streamers. And all JSON/XML/SQL buffers derive from it. Problem - XML and SQL buffers are inherited from TBufferFile, which could be difficult to brake. \r\n\r\nBut if it would work, TBufferFile interfaces can be used exclusively for binary operations and TBufferText exclusively for text-based. Of course, all virtual methods for TBuffer will be implemented for both classes. I will check if it can be done this way.",
        "createdAt" : "2017-12-19T20:06:30Z",
        "updatedAt" : "2017-12-19T20:06:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "3df39491-10bb-406e-899c-3abc2c40c687",
        "parentId" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> But if it would work, TBufferFile interfaces can be used exclusively for binary operations and TBufferText exclusively for text-based\r\n\r\nif the inheritance from TBufferFile is still needed for TBufferXML, I think we can still pull it of, as\r\n```\r\nTBufferFile::WriteInt(...);\r\nTBufferText::WriteInt(...);\r\n```\r\nwould both call the right thing without virtual call ... humm but they actually require casting the input (TBuffer) into the expected type (TBufferFile or TBufferText), we have to make sure the cast is not 'eating' all the gain :)\r\n",
        "createdAt" : "2017-12-19T20:15:18Z",
        "updatedAt" : "2017-12-19T20:15:18Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f87c94d6-1c99-41a3-a076-135012c3dc88",
        "parentId" : "2bbe60e0-8b01-44d9-8f01-6d63223f53d5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> we have to make sure the cast is not 'eating' all the gain \r\n\r\nI hope, static_cast should cost nothing, but it should be checked precisely.",
        "createdAt" : "2017-12-19T20:18:25Z",
        "updatedAt" : "2017-12-19T20:18:25Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b10b9f7c5f665f737827e9cce47d2b11911e09bc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +569,573 @@\n\n   /** Direct copy of code from TStreamerInfo::WriteBufferAux,\n    * potentially can be used later for non-text streaming */\n   template<bool kIsTextT>"
  },
  {
    "id" : "3c28f835-8ede-4e59-97cd-70b7caf463f4",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600970973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "626684c4-6cee-492f-9f4a-20e610a28254",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Are all of these substitutions really safe? I guess so, but it may be dangerous to introduce close to the release.",
        "createdAt" : "2021-03-01T14:58:04Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1a1e7a2c-da5a-4092-b292-1d906a53d259",
        "parentId" : "626684c4-6cee-492f-9f4a-20e610a28254",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "They are pretty safe (i.e. I tweak the code accordingly).   `GetEntries` is returning the number of elements while GetEntriesFast return the hight non-empy slots.  So for most case where their was no hole in the array, the return value is the same.",
        "createdAt" : "2021-03-01T17:11:34Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4010,4014 @@      }\n\n      UInt_t ndata = info->GetElements()->GetEntriesFast();\n      TStreamerInfo *sinfo = static_cast<TStreamerInfo*>(info);\n      TStreamerInfoActions::TActionSequence *sequence = new TStreamerInfoActions::TActionSequence(info,ndata);"
  },
  {
    "id" : "37c7d551-474b-455a-a83a-fe7b1ec75123",
    "prId" : 7843,
    "prUrl" : "https://github.com/root-project/root/pull/7843#pullrequestreview-634167905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a93f16f6-840e-40e6-ad2b-5a409dda9665",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`fCreateWriteIterators` is set but seems to be unused?",
        "createdAt" : "2021-04-13T04:31:11Z",
        "updatedAt" : "2021-04-13T04:31:55Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "868fe18c-8af6-40c7-85ac-949a0a8aafef",
        "parentId" : "a93f16f6-840e-40e6-ad2b-5a409dda9665",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Correct ... it sole lone purpose is to remind the future implementer to use when it needs to be instead of thinking that the other one work for both read and write.",
        "createdAt" : "2021-04-13T04:35:55Z",
        "updatedAt" : "2021-04-13T04:35:56Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e798d31618fa1c29714184bef895493cd65048f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +964,968 @@         if (proxy) {\n            fCreateIterators = proxy->GetFunctionCreateIterators();\n            fCreateWriteIterators = proxy->GetFunctionCreateIterators(kFALSE);\n            fCopyIterator = proxy->GetFunctionCopyIterator();\n            fDeleteIterator = proxy->GetFunctionDeleteIterator();"
  }
]