[
  {
    "id" : "8c9aa339-d742-43a8-9aff-69d3b5e1e57b",
    "prId" : 3762,
    "prUrl" : "https://github.com/root-project/root/pull/3762#pullrequestreview-233584908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a78ccc-6d4c-43e4-9fd3-1a470f1d9fb6",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I can not see how this is similar to the old code (which was removing the prefix/protocol) ....\r\n\r\nCould you add some test (in io/io/test) that checks that this is functioning as expected?",
        "createdAt" : "2019-05-03T17:11:28Z",
        "updatedAt" : "2019-05-03T17:11:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "cfeba648-088a-49ae-8f7d-96e0812dee29",
        "parentId" : "a5a78ccc-6d4c-43e4-9fd3-1a470f1d9fb6",
        "authorId" : "84934651-16c1-4ff4-a251-7ceae0f23e56",
        "body" : "> I can not see how this is similar to the old code\r\n\r\n```\r\nuser@host $ root https://root.cern.ch/js/files/hsimple.root\r\nroot [0] \r\nAttaching file https://root.cern.ch/js/files/hsimple.root as _file0...\r\n(TFile *) 0x55a59e7cce90\r\nroot [1] target = _file0->mkdir(\"dir\")\r\n(TDirectory *) @0x7ffd3594db48\r\nroot [2] TString path\r\n(TString &) \"\"[0]\r\nroot [3] path = target->GetPath()\r\n(TString &) \"https://root.cern.ch/js/files/hsimple.root:/dir\"[47]\r\nroot [4] path.Remove(0, path.Last(':') + 2)\r\n(TString &) \"dir\"[3]\r\nroot [5] path = target->GetPath()\r\n(TString &) \"https://root.cern.ch/js/files/hsimple.root:/dir\"[47]\r\nroot [6] path.Remove(0, std::strlen(target->GetFile()->GetPath()))\r\n(TString &) \"dir\"[3]\r\nroot [7] target->GetFile()->GetPath()\r\n(const char *) \"https://root.cern.ch/js/files/hsimple.root:/\"\r\n```",
        "createdAt" : "2019-05-03T17:29:40Z",
        "updatedAt" : "2019-05-03T17:29:41Z",
        "lastEditedBy" : "84934651-16c1-4ff4-a251-7ceae0f23e56",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec5de14d5da7ca760ef807ecf69bf8aeac3af4d1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +389,393 @@   TString path(target->GetPath());\n   // coverity[unchecked_value] 'target' is from a file so GetPath always returns path starting with filename:\n   path.Remove(0, std::strlen(target->GetFile()->GetPath()));\n\n   Int_t nguess = sourcelist->GetSize()+1000;"
  },
  {
    "id" : "25ab690b-ce58-4390-8fdd-ea8b4b694c05",
    "prId" : 6073,
    "prUrl" : "https://github.com/root-project/root/pull/6073#pullrequestreview-456171948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99cf6eed-95fa-4f2c-a0e4-d9d5e1625b58",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "This is somewhat an expensive operation.  **If** possible, one should avoid calculating twice in a row.",
        "createdAt" : "2020-07-23T18:42:28Z",
        "updatedAt" : "2020-07-24T13:13:41Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "09a71b31-3ee5-4418-ac64-058c4ff94eb6",
        "parentId" : "99cf6eed-95fa-4f2c-a0e4-d9d5e1625b58",
        "authorId" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "body" : "Thank you, should be fixed by 7d4ed3c",
        "createdAt" : "2020-07-23T21:16:41Z",
        "updatedAt" : "2020-07-24T13:13:41Z",
        "lastEditedBy" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "tags" : [
        ]
      },
      {
        "id" : "c2b40212-cda3-44e5-9483-71bab2b2c226",
        "parentId" : "99cf6eed-95fa-4f2c-a0e4-d9d5e1625b58",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I think the fall through (non-mergeable case) is broken by 7d4ed3c",
        "createdAt" : "2020-07-23T21:55:20Z",
        "updatedAt" : "2020-07-24T13:13:41Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "dc6dc1d9-5cdf-40a4-be12-4cc9d36798a0",
        "parentId" : "99cf6eed-95fa-4f2c-a0e4-d9d5e1625b58",
        "authorId" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "body" : "You're 100% right, fixed for real with 4292cd4 ",
        "createdAt" : "2020-07-27T22:13:04Z",
        "updatedAt" : "2020-07-27T22:13:05Z",
        "lastEditedBy" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "4292cd40dcc70752e94cc1ba9030e2b7ccd89aee",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +613,617 @@               TList listH;\n               TString listHargs;\n               if (cl->GetMethodWithPrototype(\"Merge\", \"TCollection*,TFileMergeInfo*\")) {\n                  listHargs.Form(\"(TCollection*)0x%lx,(TFileMergeInfo*)0x%lx\",\n                                  (ULong_t)&listH, (ULong_t)&info);"
  },
  {
    "id" : "694b7ae8-48c4-470b-adf9-a04d3f6604a8",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600930296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81a28084-63a3-43a2-811a-f9bdbdec0bef",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I have not reviewed this function; I suppose it comes 1:1 from `MergeRecursive` through code refactoring?",
        "createdAt" : "2021-03-01T13:28:43Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3244b389-450e-4f8e-b96f-bf00ce4bf7b9",
        "parentId" : "81a28084-63a3-43a2-811a-f9bdbdec0bef",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "For better and worse no.  That was the point of extracting it out.  The change include support for the object coming from the live list of objects (before looking in the list of keys).",
        "createdAt" : "2021-03-01T16:33:03Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +389,393 @@} // anonymous namespace\n\nBool_t TFileMerger::MergeOne(TDirectory *target, TList *sourcelist, Int_t type, TFileMergeInfo &info,\n                             TString &oldkeyname, THashList &allNames, Bool_t &status, Bool_t &onlyListed,\n                             const TString &path, TDirectory *current_sourcedir, TFile *current_file, TKey *key,"
  },
  {
    "id" : "5dbd9f25-b261-44b9-81ce-fb50b6634d6e",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-601015326",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7e34e14-3001-4bb5-857b-ef67c00639cc",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "What if `in_type & kDelayWrite`?",
        "createdAt" : "2021-03-01T13:33:36Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "bd7814b2-0d52-43b7-a4b7-d82e8af7ca92",
        "parentId" : "a7e34e14-3001-4bb5-857b-ef67c00639cc",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "if in_type is not incremental but type is incremental we are now in the case where the user \"explicitly\" request a non-incremental merge but we still have internally an incremental merge.  Because the user did not request the incremental merge they also probably do not to a final Write of the file and thus not doing the write here would lead to data lose ...\r\n\r\nadding this as a comment ... ",
        "createdAt" : "2021-03-01T17:59:23Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 773,
    "diffHunk" : "@@ -1,1 +970,974 @@         // to data loss ...\n         if (type & kIncremental)\n            fOutputFile->Write(\"\",TObject::kOverwrite);\n         gROOT->GetListOfFiles()->Remove(fOutputFile);\n         fOutputFile->Close();"
  },
  {
    "id" : "12fba648-266f-4197-ba85-423ddf7a1f6f",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600994212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e53ecbd-32ee-448e-b4d1-4a9d7e1c513d",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This method is very long. It's probably a good idea to take the opportunity to split it into more than one if you need to change this part of the code anyway. Breaking by type of thing being merged probably makes sense. But if you need to merge soon, I guess this could be done later.",
        "createdAt" : "2021-03-01T13:57:32Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "a89c36f9-2120-4bb6-8986-b261e8017070",
        "parentId" : "5e53ecbd-32ee-448e-b4d1-4a9d7e1c513d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes I agree on the split.  Given that we need to branch this week (and release v6.22 this week too), I will delay the split.",
        "createdAt" : "2021-03-01T17:35:51Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +392,396 @@                             TString &oldkeyname, THashList &allNames, Bool_t &status, Bool_t &onlyListed,\n                             const TString &path, TDirectory *current_sourcedir, TFile *current_file, TKey *key,\n                             TObject *obj)\n{\n   const char *keyname = obj ? obj->GetName() : key->GetName();"
  },
  {
    "id" : "1926e676-47b9-46f1-b7a8-be14e661a265",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600967793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab136611-ecef-401a-8231-04575382db55",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I think a comment here describing why this is needed would be good.",
        "createdAt" : "2021-03-01T14:56:03Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "d039a498-5e24-4fda-81fc-9686ca874d7a",
        "parentId" : "ab136611-ecef-401a-8231-04575382db55",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Added:\r\n```\r\n         // In the case of 'kDelayWrite' the caller want to avoid having to \r\n         // write the output objects once for every input file and instead\r\n         // write it only once at the end of the process.\r\n```",
        "createdAt" : "2021-03-01T17:08:40Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 764,
    "diffHunk" : "@@ -1,1 +961,965 @@         // write it only once at the end of the process.\n         if (!(in_type & kDelayWrite))\n            fOutputFile->Write(\"\",TObject::kOverwrite);\n      } else {\n         // If in_type is not incremental but type is incremental we are now in"
  }
]