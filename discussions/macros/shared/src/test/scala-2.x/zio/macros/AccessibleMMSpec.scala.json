[
  {
    "id" : "99e733f4-5fbb-429b-9a69-48ed7bbe26a3",
    "prId" : 4332,
    "prUrl" : "https://github.com/zio/zio/pull/4332#pullrequestreview-518732726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "688a2939-5f73-44e8-aebf-c96a6de4ee16",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "It would be good to add tests also for variance annotations inside the F parameter as in:\r\n\r\n```scala\r\ntrait Service[F[+_, _]] // should work and variance should be preserved in output code (e.g. Service[UIO] <: Service[Task])\r\ntrait Service[F[_, +_]] // should work and variance should be preserved in output code (e.g. Service[UIO] <: Service[Task])\r\ntrait Service[F[+_, +_]] // should work and variance should be preserved in output code (e.g. Service[UIO] <: Service[Task])\r\n\r\ntrait Service[F[-_, _]] // should fail because IO is not contravariant\r\ntrait Service[F[_, -_]] // should fail because IO is not contravariant\r\n```",
        "createdAt" : "2020-10-27T17:54:15Z",
        "updatedAt" : "2020-10-29T09:28:32Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "e896322b-2c9f-4df4-818a-b18fec1623be",
        "parentId" : "688a2939-5f73-44e8-aebf-c96a6de4ee16",
        "authorId" : "80d96adb-0a00-4574-bac5-b30b1c2e4c29",
        "body" : "I've added 4 more test at the end of `AccessibleMMSpec` and `AccessibleMSpec`. They don't cover all cases due to limitations of typechecking in tests, but I hope this is better than nothing.\r\nThank you for your help!",
        "createdAt" : "2020-10-28T14:36:25Z",
        "updatedAt" : "2020-10-29T09:28:32Z",
        "lastEditedBy" : "80d96adb-0a00-4574-bac5-b30b1c2e4c29",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a7a9e4dcfcb3eb9be22084d1b0bcecd484566d",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +228,232 @@             @accessibleMM[RIO]\n             object Module {\n               trait Service[-A, F[_, _]] {\n                 val v: F[A, Int]\n               }"
  }
]