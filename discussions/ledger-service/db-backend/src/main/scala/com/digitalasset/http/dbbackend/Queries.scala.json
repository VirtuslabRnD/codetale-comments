[
  {
    "id" : "b8946f7c-75dd-459f-a9b8-0b3b91cf01c8",
    "prId" : 9895,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d213ac3-ecc2-4b0f-a876-dba8c0e6d606",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Search indices may not refer to nvarchar2 columns; this shouldn't make a difference for party IDs, offsets, or contract IDs.",
        "createdAt" : "2021-06-14T20:53:55Z",
        "updatedAt" : "2021-06-14T20:53:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b8969f45ad100400690044b9bcf7aeb5a671c3",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +614,618 @@  protected[this] override def textType = sql\"NVARCHAR2(100)\"\n  protected[this] override def packageIdType = sql\"NVARCHAR2(64)\"\n  protected[this] override def partyOffsetContractIdType = sql\"VARCHAR2(255)\"\n  // if >=1578: ORA-01450: maximum key length (6398) exceeded\n  protected[this] override def nameType = sql\"NVARCHAR2(1562)\""
  },
  {
    "id" : "b30094e8-d761-4aba-9b07-c4e6772ab46b",
    "prId" : 9895,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1c22b99-6f42-480e-a121-2f6f6e561b8e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Where do those magic numbers come from? Can we link to some docs in a comment?",
        "createdAt" : "2021-06-17T08:44:02Z",
        "updatedAt" : "2021-06-17T15:12:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9f8c8931-b02f-4fe8-93da-4eb8beea6f47",
        "parentId" : "e1c22b99-6f42-480e-a121-2f6f6e561b8e",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I did not find them in any docs; at the very least, the reference for `CREATE *` does not mention which errors may be emitted.\r\n\r\n-942 came from the stackoverflow that included it. But, as I found with materialized view, the second was found by running the test with the wrong number and looking at the matching `ORA-*` error message.\r\n\r\nI can include copies of the error messages, if you like. Or just a link to this very comment. I would recommend that approach should this list need to be extended again, rather than diving into the docs again.",
        "createdAt" : "2021-06-17T15:21:01Z",
        "updatedAt" : "2021-06-17T15:21:01Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b8969f45ad100400690044b9bcf7aeb5a671c3",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +596,600 @@  protected[this] override def dropIfExists(d: Droppable) = {\n    val sqlCode = d match {\n      case _: CreateTable => -942\n      case _: CreateMaterializedView => -12003\n    }"
  },
  {
    "id" : "28cfc6b4-b1d4-460e-b8e7-99af8afc6a05",
    "prId" : 9895,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6649ab4e-e39a-4105-ad84-08126a9ac50a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m confused, why do you need the row_number here? This seems like you’re inventing a `LIMIT 1` or something like that. What am I missing?",
        "createdAt" : "2021-06-17T08:50:57Z",
        "updatedAt" : "2021-06-17T15:12:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0f316d53-780b-4306-bf87-90e54223676c",
        "parentId" : "6649ab4e-e39a-4105-ad84-08126a9ac50a",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes, we are inventing a limit-1-per-contract-ID here. (This is the recommended approach to solving this problem without `DISTINCT`, which won't work because of the clobs, by various sources.) We used to use this prior to #9484, as well.",
        "createdAt" : "2021-06-17T15:16:21Z",
        "updatedAt" : "2021-06-17T15:16:21Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "06026ed2-252f-47cb-a633-101ac3c1ef42",
        "parentId" : "6649ab4e-e39a-4105-ad84-08126a9ac50a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah makes sense, I misread this query on my first try",
        "createdAt" : "2021-06-17T15:20:27Z",
        "updatedAt" : "2021-06-17T15:20:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "00b8969f45ad100400690044b9bcf7aeb5a671c3",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +701,705 @@        sql\"\"\"SELECT c.contract_id contract_id, $tpid template_id, key, payload,\n                     signatories, observers, agreement_text,\n                     row_number() over (PARTITION BY c.contract_id ORDER BY c.contract_id) AS rownumber\n                FROM contract c\n                     LEFT JOIN contract_stakeholders cst ON (c.contract_id = cst.contract_id)"
  },
  {
    "id" : "eb203617-8eef-40ac-bec0-ef274d514f37",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9efcae30-0bb1-449d-9df0-47bd19ba6f01",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#9375",
        "createdAt" : "2021-04-09T21:37:40Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 270,
    "diffHunk" : "@@ -1,1 +732,736 @@        type Ix = Int\n        // TODO we may UNION the resulting queries and aggregate the Ixes SQL-side,\n        // but this will probably necessitate the same PostgreSQL-side\n        uniqueSets(queries.zipWithIndex.map { case ((tpid, pred), ix) => (tpid, (pred, ix)) }).map {\n          preds: NonEmpty[Map[SurrogateTpId, (Fragment, Ix)]] =>"
  },
  {
    "id" : "66bd63ee-d41c-486d-8e53-2a47ea180e94",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ead33649-f5d7-44c3-93d1-b79d223de6a7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not at all opposed to this quite the opposite but is this needed for something else in this PR or just a drive-by change?",
        "createdAt" : "2021-04-12T09:32:21Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "34e05469-de73-41ef-bc6e-cc5d5ff5bf08",
        "parentId" : "ead33649-f5d7-44c3-93d1-b79d223de6a7",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Drive-by, it seemed nicer to have error messages tell you _which_ constraint failed.",
        "createdAt" : "2021-04-12T15:47:54Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +41,45 @@      CREATE TABLE\n        contract\n        (contract_id \"\"\" ++ contractIdType ++ sql\"\"\" NOT NULL CONSTRAINT contract_k PRIMARY KEY\n        ,tpid \"\"\" ++ bigIntType ++ sql\"\"\" NOT NULL REFERENCES template_id (tpid)\n        ,\"\"\" ++ jsonColumn(sql\"key\") ++ sql\"\"\""
  },
  {
    "id" : "79c6e0b9-528f-4017-86c0-9cac66a5f6fc",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44a4e072-ea4b-4cff-a51d-8f5fb226685b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Could you expand on that? I don’t understand what the issue is and how this fixes it.",
        "createdAt" : "2021-04-12T09:42:41Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "67ec2a66-4f8c-4a2f-811a-23fb41121787",
        "parentId" : "44a4e072-ea4b-4cff-a51d-8f5fb226685b",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "As a rule Scala is perfectly aware of type equalities in GADTs, i.e. _for all_ arbitrary `F: * -> *`, `F[A] ~ F[B]`. But sometimes it won't _use_ that fact until you give it a nudge. In this code, the \"nudge\" is the ascription `T[Query0[DBContract[Mark, JsValue, JsValue, Vector[String]]]]`, but this doesn't apply until the _result_ of `queryByCondition`, so letting Scala operate under the fantasy that Int (or SurrogateTpId) is not Mark, until it really must be, is most convenient.\r\n\r\nI think they [finally fixed this in Scala 3](https://twitter.com/not_xuwei_k/status/1332751181119184896).",
        "createdAt" : "2021-04-12T16:04:15Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +682,686 @@  ): T[Query0[DBContract[Mark, JsValue, JsValue, Vector[String]]]] = {\n    // we effectively shadow Mark because Scala 2.12 doesn't quite get\n    // that it should use the GADT type equality otherwise\n    def queryByCondition[Mark0: Get](\n        tpid: Fragment,"
  },
  {
    "id" : "ed0f2657-8d77-4991-94b3-47327f5876f0",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "122400ef-8aa0-4f81-8916-bc2a4f48cdfa",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What does this change do? Does it sidestep the length limit by moving the literal out of the path? If so, let’s please add a comment.",
        "createdAt" : "2021-04-12T09:49:23Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0967cb7c-097c-453e-987a-5241c2057d13",
        "parentId" : "122400ef-8aa0-4f81-8916-bc2a4f48cdfa",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "baa61c5fee2",
        "createdAt" : "2021-04-12T16:16:02Z",
        "updatedAt" : "2021-04-12T16:16:02Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +784,788 @@      (\n        \"?(@ == $X)\", // not a Scala interpolation\n        sql\" PASSING $literal AS X\",\n      )\n    val predExtension = literal match {"
  },
  {
    "id" : "3130eba1-ad8f-4dc7-887c-0e1ba3531631",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56f76f32-381e-4119-8b78-afb848d7f33f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "xxx? Is that a todo? If so, let’s please use TODO so we only have to grep for one thing.",
        "createdAt" : "2021-04-12T09:50:17Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "668fcf32-a8e8-4154-a15c-fb2d6f5b447d",
        "parentId" : "56f76f32-381e-4119-8b78-afb848d7f33f",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I use it as a sort of weaker TODO that shouldn't block anything (i.e. in some respect not finding it with grep is a feature). Is there a better way to express that in a lightweight way?",
        "createdAt" : "2021-04-12T15:43:47Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "63e7aa2e-ab35-4be0-9de8-e23c9d9d90ec",
        "parentId" : "56f76f32-381e-4119-8b78-afb848d7f33f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "not sure, I tend to use NOTE and TODO but NOTE mostly for things that are purely informational and shouldn’t be acted upon. Fine to keep XXX as well if you want.",
        "createdAt" : "2021-04-12T15:52:32Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 368,
    "diffHunk" : "@@ -1,1 +840,844 @@  }\n\n  // XXX as with containsAtContractPath, literalScalar is too big a type\n  private[http] override def cmpContractPathToScalar(\n      path: JsonPath,"
  },
  {
    "id" : "c9259536-73fa-4b96-af47-5a239f12620f",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b05ede91-5cc5-4823-899d-540a08852743",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "There are a few `println`s in this method. Should they be removed? If so, feel free to do it in a separate PR.",
        "createdAt" : "2021-04-12T12:02:22Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "05f614cc-cc0b-457f-9e4c-a230f9452aac",
        "parentId" : "b05ede91-5cc5-4823-899d-540a08852743",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Sure. 42c913b178f",
        "createdAt" : "2021-04-12T16:15:48Z",
        "updatedAt" : "2021-04-12T16:15:49Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +637,641 @@    val r = Update[(String, SurrogateTpId, JsValue, JsValue, String)](\n      \"\"\"\n        INSERT /*+ ignore_row_on_dupkey_index(contract(contract_id)) */\n        INTO contract (contract_id, tpid, key, payload, agreement_text)\n        VALUES (?, ?, ?, ?, ?)"
  },
  {
    "id" : "8c646adf-6a40-4929-b833-e472b4e40d54",
    "prId" : 9278,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63e9e312-6881-45a5-b435-44763236c984",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm not sure I follow what `/*` is. It looks like a C-style comment but it's embedded in a multi-line string that ultimately becomes a SQL, how is this parsed? If by any chance this is parsed as a Scala comment, should it stay? If not, I don't understand it.",
        "createdAt" : "2021-04-12T12:03:26Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e302c83c-dc66-42b1-a190-19f4e99f8aeb",
        "parentId" : "63e9e312-6881-45a5-b435-44763236c984",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is oracle magic fro `on conflict do nothing`. Yes really, magic comments are how this work …",
        "createdAt" : "2021-04-12T14:15:49Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "391b171f-6001-4104-bd5a-cd497b1637cc",
        "parentId" : "63e9e312-6881-45a5-b435-44763236c984",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Ok.",
        "createdAt" : "2021-04-12T15:32:01Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b875c57f-e70a-43ad-9fca-36f5f408cd26",
        "parentId" : "63e9e312-6881-45a5-b435-44763236c984",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Thanks.",
        "createdAt" : "2021-04-12T15:32:09Z",
        "updatedAt" : "2021-04-12T16:14:25Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8ca8f38aa756dd8dbeaa8d63baa3678dc9a060c",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +651,655 @@    val r2 = Update[(String, String)](\n      \"\"\"\n        INSERT /*+ ignore_row_on_dupkey_index(signatories(contract_id, party)) */\n        INTO signatories (contract_id, party)\n        VALUES (?, ?)"
  },
  {
    "id" : "8f47a84c-166f-4299-8bc6-d206fb6a7502",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b70cfb31-2c6b-4756-abc3-291828abe1c7",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This is a little simplistic, as explained in #9256.",
        "createdAt" : "2021-03-26T19:17:47Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 414,
    "diffHunk" : "@@ -1,1 +764,768 @@            val fieldPreds = OneAnd(hp, tp).map { case (ok, ov) =>\n              containsAtContractPath(path objectAt Ref.Name.assertFromString(ok), ov)\n            }\n            concatFragment(intersperse(fieldPreds, sql\" AND \"))\n          case _ =>"
  },
  {
    "id" : "84ae1f41-df8d-4294-944a-835cfef4802d",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Reviewers, please take special care to examine this function.",
        "createdAt" : "2021-03-26T19:21:47Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "3e6a0a56-e754-42aa-86bd-0d6401dafa3a",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can you provide an example of a query that needs this? I think I’m not quite following which weird restriction we’re trying to work around here.",
        "createdAt" : "2021-03-29T10:30:14Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "65a16f47-45c2-44be-9485-29d9a3735eac",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Every location that uses the function needs it. Function calls of the form `json_query(x, $y)` where `y: String` fail with `ORA-40454: path expression not a literal`. In other words, while paths use string _syntax_, you cannot put anything but a literal string in the SQL.",
        "createdAt" : "2021-03-29T16:14:45Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "86ed0c14-d409-4324-8144-ae643cc3dcba",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Let me rephrase, in which case do we get a value that we need to escape? Daml-LF names cannot have `'` in them so record fields or variants are not an option. What can hit this?",
        "createdAt" : "2021-03-29T16:17:58Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "147ef0d3-5a5f-4c51-ac4f-5c0e1a5bd801",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`$.p?(@ == \"I'm a string\")` as produced by https://github.com/digital-asset/daml/pull/9159/files#diff-570f7c791ece7e9dc9ef545dae8b7bb7375560172359ddc5a6ed86477713d6c1R736-R739",
        "createdAt" : "2021-03-29T18:36:51Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "dc724016-54f3-4f36-97b7-37cbde7a66ca",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Makes sense, what is stopping us from relying on doobie’s escaping, e.g., something like `fr\"${escapethis}\"`?",
        "createdAt" : "2021-03-29T18:44:39Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "95fe22a4-b844-4271-b2e5-a166d9f10501",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I guess that goes via jdbc to do escaping so it’s not a literal to oracle?",
        "createdAt" : "2021-03-29T18:49:46Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5ee8c8a2-403f-45da-95b8-bef8994c71e1",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Exactly.",
        "createdAt" : "2021-03-29T18:51:16Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "0ef69174-e7dd-4ba4-9ad2-4e3c4b283e9a",
        "parentId" : "c00477bf-bba7-4b58-b507-c702ec7e78f0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ugh, alright, don’t have a better idea then. This is very sad :sob: ",
        "createdAt" : "2021-03-29T18:52:46Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 380,
    "diffHunk" : "@@ -1,1 +730,734 @@    )\n    Fragment const0 (\"'\" + s.replace(\"'\", \"''\") + \"'\")\n  }\n\n  private[http] override def equalAtContractPath(path: JsonPath, literal: JsValue): Fragment = {"
  },
  {
    "id" : "7dd753dc-5ea4-4f2d-80a9-95c5b95324e1",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67190689-91e0-4cf7-9d54-e32642ca1862",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Assuming the `MERGE INTO` stuff is to handle `on conflict do nothing`, I noticed that you can do that a bit easier https://github.com/digital-asset/daml/commit/2c14ff1e80538883156aacbb04ee2798ebfa8092#",
        "createdAt" : "2021-03-29T10:19:48Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "97bb471e-af63-4a42-9419-5266ae6b8d75",
        "parentId" : "67190689-91e0-4cf7-9d54-e32642ca1862",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Nice. I'll incorporate that into the next PR, though.",
        "createdAt" : "2021-03-29T17:16:14Z",
        "updatedAt" : "2021-03-29T18:55:38Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "26dac119-710d-4996-88d7-f0ec067efa7b",
        "parentId" : "67190689-91e0-4cf7-9d54-e32642ca1862",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "e6a53be22a7b34c233110d63d1e5cd20cd87d50b ",
        "createdAt" : "2021-04-05T16:59:50Z",
        "updatedAt" : "2021-04-05T16:59:50Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +629,633 @@    val r = Update[(String, String, SurrogateTpId, JsValue, JsValue, String)](\n      \"\"\"\n        MERGE INTO contract USING (SELECT 1 FROM DUAL) ON (contract_id = ?)\n        WHEN NOT MATCHED THEN INSERT (contract_id, tpid, key, payload, agreement_text)\n        VALUES (?, ?, ?, ?, ?)"
  },
  {
    "id" : "356335f6-05f0-4fe1-a914-8cfeb6dce5cb",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09908103-0380-4fa8-9b69-8ac78a11cc3a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "same here",
        "createdAt" : "2021-03-29T10:20:03Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 288,
    "diffHunk" : "@@ -1,1 +645,649 @@    val r2 = Update[(String, String, String, String)](\n      \"\"\"\n        MERGE INTO signatories USING (SELECT 1 FROM DUAL) ON (contract_id = ? AND party = ?)\n        WHEN NOT MATCHED THEN INSERT (contract_id, party)\n        VALUES (?, ?)"
  },
  {
    "id" : "17753153-fbec-456f-bdfe-7c248d4c0c4e",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5d9217f-17db-4147-b526-dafd3d19ad8b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "and here",
        "createdAt" : "2021-03-29T10:20:09Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +655,659 @@    val r3 = Update[(String, String, String, String)](\n      \"\"\"\n        MERGE INTO observers USING (SELECT 1 FROM DUAL) ON (contract_id = ? AND party = ?)\n        WHEN NOT MATCHED THEN INSERT (contract_id, party)\n        VALUES (?, ?)"
  },
  {
    "id" : "9d29b953-3375-4984-ac0a-b2c8836ec87e",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "849a5b8b-d1ae-4fd1-8274-7f7264b0416b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe add a todo to clean up this query. We should probably either try to switch to arrays or try to only do one join per table.",
        "createdAt" : "2021-03-29T10:26:39Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +679,683 @@    import Queries.CompatImplicits.catsReducibleFromFoldable1\n    // % is explicitly reserved by specification as a delimiter\n    val q = sql\"\"\"SELECT c.contract_id, key, payload, agreement_text, sd.parties, od.parties\n                  FROM (contract c\n                        LEFT JOIN signatories sm ON (c.contract_id = sm.contract_id)"
  },
  {
    "id" : "c17241ba-d0bf-4c75-baf1-ec559fedad14",
    "prId" : 8596,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed90b926-c602-4d3c-bd64-068769db1983",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should be a bit more precise here:\r\n\r\n1. LedgerString is limited to 255 char, see https://github.com/digital-asset/daml/blob/4d55b58f19b91630aacc0f811fe575eb1d1bd5c1/daml-lf/data/src/main/scala/com/digitalasset/daml/lf/data/IdString.scala#L297-L319. This applies to parties, offsets and contract ids.\r\n2. package ids are sha256s which are limited to 64 hex digits.\r\n3. There is no length limit on module names and entity names. We should probably use `NCLOB` here.\r\n\r\nIf you want to omit it from this PR, I’m fine with that but let’s add at least add a TODO in that case.",
        "createdAt" : "2021-02-15T16:35:30Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6247c6a7-a732-43b7-a0b9-fa4e1eaa1457",
        "parentId" : "ed90b926-c602-4d3c-bd64-068769db1983",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "85cf99a5325",
        "createdAt" : "2021-02-16T17:57:02Z",
        "updatedAt" : "2021-02-16T17:57:03Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "85cf99a5325d1e3dc1e136edfe7db29762cec0bd",
    "line" : 474,
    "diffHunk" : "@@ -1,1 +483,487 @@    bigIntType ++ sql\" GENERATED ALWAYS AS IDENTITY\"\n  // TODO SC refine the string formats chosen here and for jsonColumn\n  protected[this] override def textType = sql\"NVARCHAR2(100)\"\n  protected[this] override def agreementTextType = sql\"NVARCHAR2(100)\"\n"
  },
  {
    "id" : "7946f7a6-0867-4907-8a77-d4589b827dfc",
    "prId" : 8596,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c4f1fd0-d940-4421-a6b4-30367dcb0f4e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "postgres’ bigint is a 64bit int. Oracle has that under the name `LONGINTEGER`. Any reason not to use that here?",
        "createdAt" : "2021-02-15T16:36:48Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "726852d6-ff4a-48d4-9f39-e7ecbaf07e3e",
        "parentId" : "8c4f1fd0-d940-4421-a6b4-30367dcb0f4e",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```\r\nORA-30675: identity column must be a numeric type\r\n```\r\n\r\nWhich is apparently not a set that includes `LONGINTEGER`.",
        "createdAt" : "2021-02-16T16:57:25Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "02099d3a-518d-42f1-bd91-27cc11124b6f",
        "parentId" : "8c4f1fd0-d940-4421-a6b4-30367dcb0f4e",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Meanwhile the oracle documentation states\r\n> Numeric Data Types which are INTEGER, SHORTINTEGER, LONGINTEGER, DECIMAL, SHORTDECIMAL, and NUMBER\r\n\r\nthisisfine.gif\r\n",
        "createdAt" : "2021-02-17T07:47:11Z",
        "updatedAt" : "2021-02-17T07:49:14Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "85cf99a5325d1e3dc1e136edfe7db29762cec0bd",
    "line" : 470,
    "diffHunk" : "@@ -1,1 +479,483 @@    END;\"\"\"\n\n  protected[this] override def bigIntType = sql\"NUMBER(19,0)\"\n  protected[this] override def bigSerialType =\n    bigIntType ++ sql\" GENERATED ALWAYS AS IDENTITY\""
  },
  {
    "id" : "9bc2b288-352a-45a4-99a1-3ebbd4c4d377",
    "prId" : 8596,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf03c7a6-1f87-4ae8-a5cc-8b1b93fdcd97",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe worth adding a comment that we need this since oracle wants an object as the root.",
        "createdAt" : "2021-02-15T16:40:39Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e1498c24-1a78-4433-9489-a151725b649f",
        "parentId" : "cf03c7a6-1f87-4ae8-a5cc-8b1b93fdcd97",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "1d019fa3e83",
        "createdAt" : "2021-02-16T17:57:10Z",
        "updatedAt" : "2021-02-16T17:57:10Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "85cf99a5325d1e3dc1e136edfe7db29762cec0bd",
    "line" : 511,
    "diffHunk" : "@@ -1,1 +520,524 @@  protected[this] type DBContractKey = JsValue\n\n  protected[this] override def toDBContractKey[CK: JsonWriter](x: CK) =\n    JsObject(Map(\"key\" -> x.toJson))\n"
  },
  {
    "id" : "d7a083dc-2bc4-4656-808b-acfe0868406a",
    "prId" : 8596,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f6bf286-04d8-4aa6-a216-01d11d5f2a40",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "what does `prim` stand for heres",
        "createdAt" : "2021-02-15T16:40:49Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b6b496b8-6b00-4b89-8ba4-7504ec834de0",
        "parentId" : "0f6bf286-04d8-4aa6-a216-01d11d5f2a40",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Primitive. Same thing as `impl` or `aux` or `2` I suppose",
        "createdAt" : "2021-02-16T14:07:09Z",
        "updatedAt" : "2021-02-16T17:56:43Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "85cf99a5325d1e3dc1e136edfe7db29762cec0bd",
    "line" : 514,
    "diffHunk" : "@@ -1,1 +523,527 @@    JsObject(Map(\"key\" -> x.toJson))\n\n  protected[this] override def primInsertContracts[F[_]: cats.Foldable: Functor](\n      dbcs: F[DBContract[SurrogateTpId, DBContractKey, JsValue, Array[String]]]\n  )(implicit log: LogHandler, pas: Put[Array[String]]): ConnectionIO[Int] = {"
  },
  {
    "id" : "665f5884-1f8b-4f54-a558-684fbf92cca8",
    "prId" : 8517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "debc3613-7fa6-48c5-bac8-db100cbbd2e3",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I assume other dbs prefer/support only this order?",
        "createdAt" : "2021-01-21T07:43:30Z",
        "updatedAt" : "2021-01-21T08:00:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c1609344-70bf-42d7-92e8-2867ffa76b4c",
        "parentId" : "debc3613-7fa6-48c5-bac8-db100cbbd2e3",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This idea comes from your replacement for `BIGSERIAL`.",
        "createdAt" : "2021-01-21T12:21:56Z",
        "updatedAt" : "2021-01-21T12:21:57Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "020309d547337a91ad2082b195401b3fc0e0de17",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +38,42 @@      CREATE TABLE\n        contract\n        (contract_id TEXT NOT NULL PRIMARY KEY\n        ,tpid BIGINT NOT NULL REFERENCES template_id (tpid)\n        ,key JSONB NOT NULL"
  },
  {
    "id" : "440e66c5-5e80-4c59-8e05-0181d0ee5f7b",
    "prId" : 8517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32ef8e33-76c5-433a-b08a-86fdb8db7cce",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":+1: ",
        "createdAt" : "2021-01-21T07:43:53Z",
        "updatedAt" : "2021-01-21T08:00:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "020309d547337a91ad2082b195401b3fc0e0de17",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +49,53 @@\n  val indexContractsTable: Fragment = sql\"\"\"\n      CREATE INDEX contract_tpid_idx ON contract (tpid)\n    \"\"\"\n"
  },
  {
    "id" : "a2a864e5-bb78-452b-b246-2b5ffa5fcbff",
    "prId" : 8517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bf54f18-f194-4cea-89c7-0c421bb38f65",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I assume as we discover incompatible queries, we’ll make some of the methods here abstract and move the implementation in the backend-specific classes?",
        "createdAt" : "2021-01-21T07:58:49Z",
        "updatedAt" : "2021-01-21T08:00:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "81861666-35fa-48bc-b20c-ab4e451e8fec",
        "parentId" : "6bf54f18-f194-4cea-89c7-0c421bb38f65",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Indeed.",
        "createdAt" : "2021-01-21T12:20:45Z",
        "updatedAt" : "2021-01-21T12:20:45Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "020309d547337a91ad2082b195401b3fc0e0de17",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +24,28 @@import cats.syntax.functor._\n\nsealed abstract class Queries {\n  import Queries._\n  import Implicits._"
  },
  {
    "id" : "d317bea3-1310-48a3-974d-2f4018b8b38a",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42c6595a-8aa3-4590-855b-534a21add577",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The naming seems a bit unfortunate but I guess we use it as the template id in other places and having two separate types is a bit annoying. Maybe a type parameter for metadata would be useful",
        "createdAt" : "2021-01-06T08:06:21Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7dfc74c7-82b0-4780-bb04-8ec86f4977ba",
        "parentId" : "42c6595a-8aa3-4590-855b-534a21add577",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Since the index is in a sense \"templateId +\" with reference to argument data, it seems unfortunate to introduce another field to model a similar idea, when there is no semantic reason.\r\n\r\nMy perception of this choice is that we can have\r\n\r\n1. a name that is occasionally a little inaccurate, but an aid to \"intuition\", for what it's worth; or\r\n2. a name that reflects the uninterpreted, formal semantics of the field, but offers no \"intuitive\" aid to the reader.\r\n\r\nI think you can guess which choice I generally favor, though I have chosen the other in this case due to the stronger pull of change conservatism. Which do you think is most valuable to us as maintainers of the code?",
        "createdAt" : "2021-01-08T13:05:25Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "40fc6ea1-c81a-421d-9fb5-f2a013dd8b07",
        "parentId" : "42c6595a-8aa3-4590-855b-534a21add577",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t care much about the name, what I would like is a type change when going from query index -> template id which points to type parameter and 2 (or two separate types but I don’t think that makes a lot of sense here) because I don’t trust myself to not mess this up if the types don’t enforce it.\r\n\r\nBut let’s leave it out of this PR for now.",
        "createdAt" : "2021-01-14T08:14:18Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2679743f-0b70-401c-aa29-db8240b8ad58",
        "parentId" : "42c6595a-8aa3-4590-855b-534a21add577",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "We do have a type change, because `templateId` is type-parameterized. 😕 ",
        "createdAt" : "2021-01-14T11:53:55Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "45077d4e-0503-48c6-9813-079d95338cc2",
        "parentId" : "42c6595a-8aa3-4590-855b-534a21add577",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "oh perfect, apologies for missing that. In that case, I don’t really care about the name so for now I’d just keep it.",
        "createdAt" : "2021-01-14T11:57:00Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +270,274 @@    * A contract cannot be produced more than once from a given resulting query,\n    * but may be produced more than once from different queries.  In each case, the\n    * `templateId` of the resulting [[DBContract]] is actually the 0-based index\n    * into the `queries` argument that produced the contract.\n    */"
  },
  {
    "id" : "0266663a-fb5d-44d0-931b-9882b7985357",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04c35bed-0002-4fd0-8d34-86fa4a00a15c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "spotted the higher-kinded gadt :grin:, a comment on the meaning of the type parameters and the constructors would be nice.",
        "createdAt" : "2021-01-06T09:33:08Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1a61fff1-ce05-416c-9a14-af72e5bd9fbb",
        "parentId" : "04c35bed-0002-4fd0-8d34-86fa4a00a15c",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Added in 1ebffc40f6586bc10f935f0492651efc6d49b47b \r\n",
        "createdAt" : "2021-01-13T23:24:10Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +331,335 @@    * @tparam Mark The \"marker\" indicating which query matched.\n    */\n  private[http] sealed abstract class MatchedQueryMarker[T[_], +Mark]\n      extends Product\n      with Serializable"
  },
  {
    "id" : "5e8d7d6d-6d63-4a56-bd6b-1d00eef98dec",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ccc4d0-7915-4dbd-a2c3-6b914390df94",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I can’t find a call-site where we pass this in. Do we actually use this anywhere?",
        "createdAt" : "2021-01-06T09:38:36Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ca9383e3-47a6-4863-9ac6-2d357e65cbf7",
        "parentId" : "d0ccc4d0-7915-4dbd-a2c3-6b914390df94",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "We do as of 1ebffc40f6586bc10f935f0492651efc6d49b47b ",
        "createdAt" : "2021-01-13T23:24:23Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +336,340 @@  private[http] object MatchedQueryMarker {\n    case object ByInt extends MatchedQueryMarker[Seq, Int]\n    case object Unused extends MatchedQueryMarker[Id, SurrogateTpId]\n  }\n"
  },
  {
    "id" : "3166902b-d886-4786-bca6-a3f1432f5185",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7be43d4f-127a-40a8-8481-514dc622c87c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "clever, I like it!",
        "createdAt" : "2021-01-06T09:58:23Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +310,314 @@      case MatchedQueryMarker.ByInt =>\n        type Ix = Int\n        uniqueSets(queries.zipWithIndex map { case ((tpid, pred), ix) => (tpid, (pred, ix)) }).map {\n          preds: Map[SurrogateTpId, (Fragment, Ix)] =>\n            val predHd +: predTl = preds.toVector"
  },
  {
    "id" : "230d4d39-246f-439f-9f8c-e51e7ba2ed1e",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02d714d6-18ad-44cf-9c9c-d5e0f2474110",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "does `unionPred` refer to `c`? The rest doesn’t seem to.",
        "createdAt" : "2021-01-14T08:17:31Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cbea9c8f-9af9-4f34-8204-84aefb883f13",
        "parentId" : "02d714d6-18ad-44cf-9c9c-d5e0f2474110",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It doesn't refer to `c`.",
        "createdAt" : "2021-01-14T11:48:28Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "5e0e79ee-794a-41ea-9a63-fe0ac6d72ea7",
        "parentId" : "02d714d6-18ad-44cf-9c9c-d5e0f2474110",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "in that case maybe remove it? Less unused variables in scope seems like a good thing.",
        "createdAt" : "2021-01-14T11:57:35Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "75d5b38d-d4b9-4272-9ae6-0bdc0c8747cc",
        "parentId" : "02d714d6-18ad-44cf-9c9c-d5e0f2474110",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Sure. If only we could get static checking of that here :(",
        "createdAt" : "2021-01-14T12:22:02Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "9892e40c-f4f4-4fc5-b0fe-f62e9f3cf2c4",
        "parentId" : "02d714d6-18ad-44cf-9c9c-d5e0f2474110",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "a960d0f2142 thanks",
        "createdAt" : "2021-01-14T13:22:55Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +290,294 @@      val unionPred = concatFragment(intersperse(assocedPreds, sql\" OR \"))\n      val q = sql\"\"\"SELECT contract_id, tpid, key, payload, signatories, observers, agreement_text\n                      FROM contract AS c\n                      WHERE (signatories && $partyVector::text[] OR observers && $partyVector::text[])\n                       AND (\"\"\" ++ unionPred ++ sql\")\""
  },
  {
    "id" : "46aa4ede-e4ad-4b85-ab74-ea3794a6f0ba",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "306db630-7999-432b-a55a-84e9b4c1cd0c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Did you consider a `OneAnd` equivalent for maps? I guess it’s probably not worth it given that this is relatively local.",
        "createdAt" : "2021-01-14T08:20:54Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "87744727-42c1-41af-9d5b-e6a2104f11f4",
        "parentId" : "306db630-7999-432b-a55a-84e9b4c1cd0c",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#8507 ",
        "createdAt" : "2021-01-14T13:43:14Z",
        "updatedAt" : "2021-01-14T13:43:15Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +344,348 @@  // Like groupBy but split into n maps where n is the longest list under groupBy.\n  // Invariant: every element of the result is non-empty\n  private[dbbackend] def uniqueSets[A, B](iter: Iterable[(A, B)]): Seq[Map[A, B]] =\n    unfold(iter.groupBy(_._1).transform((_, i) => i.toList): Map[A, List[(_, B)]]) { m =>\n      // invariant: every value of m is non-empty"
  },
  {
    "id" : "f937f389-ffc6-483a-97a5-b6765ad5e497",
    "prId" : 7993,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0d8cbef-9b1d-4fac-9208-93a16c54b64b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should we create indices on `contract_id` and maybe `key` by default? Seems common enough that we might not want to leave this to users.",
        "createdAt" : "2020-11-30T14:08:25Z",
        "updatedAt" : "2020-11-30T17:41:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f2c34a5d-ee21-449d-8245-333a8debd242",
        "parentId" : "f0d8cbef-9b1d-4fac-9208-93a16c54b64b",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`contract_id` is already a primary key. For contract keys, 18e80597c7a74d0a311b621ae3d63fbe6684b2a7 ",
        "createdAt" : "2020-11-30T17:41:48Z",
        "updatedAt" : "2020-11-30T17:41:48Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f25767003fe64e3f0817fa0ad97cda795248da19",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +258,262 @@      pvs: Put[Vector[String]])\n    : ConnectionIO[Option[DBContract[Unit, JsValue, JsValue, Vector[String]]]] =\n    selectContracts(parties, tpid, sql\"contract_id = $contractId\").option\n\n  private[http] def fetchByKey(parties: OneAnd[Set, String], tpid: SurrogateTpId, key: JsValue)("
  },
  {
    "id" : "d75dbd93-e343-451f-972d-3df19f858b77",
    "prId" : 3461,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87efae71-9b60-4804-85f8-aa9633256610",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Not really sure what warning we are trying to silence.",
        "createdAt" : "2019-11-18T20:29:54Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "5de9bf5c-c767-451b-a6e3-0feb0f4538d8",
        "parentId" : "87efae71-9b60-4804-85f8-aa9633256610",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Unused parameter `pas`.",
        "createdAt" : "2019-11-19T17:29:35Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c85def934039b766819823a7e2cf75c123b044",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +142,146 @@    )\n\n  @silent // pas is demonstrably used; try taking it out\n  def insertContracts[F[_]: cats.Foldable: Functor, CA: JsonWriter](\n      dbcs: F[DBContract[SurrogateTpId, CA, Seq[String]]])("
  },
  {
    "id" : "2a80bc4f-8de5-43ca-8f76-11f8a88b2ea4",
    "prId" : 3461,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b5a9d56-f34c-48e7-829c-809c34f4dd6d",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "is that something WIP?\r\nwhat do you plan to do with a contract that does not contain `templateId` value? It's type arg is `Unit`.",
        "createdAt" : "2019-11-18T20:35:17Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "74731260-1949-471a-bbeb-65c5d4e81349",
        "parentId" : "1b5a9d56-f34c-48e7-829c-809c34f4dd6d",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "actually thinking about it... we can look up `templateId` by `contractId`, but why bother if we can fetch it from DB. Just trying to understand what is the use case for this function, don't think it is being used anywhere.",
        "createdAt" : "2019-11-18T20:38:29Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "e0dd5f31-9e7c-439e-a174-a44db5badedf",
        "parentId" : "1b5a9d56-f34c-48e7-829c-809c34f4dd6d",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> don't think it is being used anywhere\r\n\r\nIt's not and won't in this PR; it will be used for #3388.\r\n\r\n> what do you plan to do with a contract that does not contain templateId value?\r\n\r\nThe use of `Unit` here represents the fact that nothing useful can be put in that slot. Logically, the template ID is always the template ID that was passed as the `tpid` argument, but `tpid.type` will stop compiling at some point in the future, so I don't want to give the false impression that any template IDs are being \"looked up\". The caller can insert the `tpid` afterwards if they want by `copy`, but I suspect that will never be useful in practice.",
        "createdAt" : "2019-11-19T17:35:59Z",
        "updatedAt" : "2019-11-19T19:20:44Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "12c85def934039b766819823a7e2cf75c123b044",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +184,188 @@      party: String,\n      tpid: SurrogateTpId,\n      predicate: Fragment): Query0[DBContract[Unit, JsValue, Unit]] = {\n    val q = sql\"\"\"SELECT (contract_id, create_arguments)\n                  FROM contract"
  },
  {
    "id" : "6c95e50d-8233-4c53-99d8-5633bf1ace60",
    "prId" : 10326,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10326#pullrequestreview-710471427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caf3c164-00f1-42f0-9c44-25089d993b1e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "the log handler is passed as an implicit now",
        "createdAt" : "2021-07-20T11:32:40Z",
        "updatedAt" : "2021-07-20T12:41:53Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb18bea5c7986a8a693f0d1e73cbf6b5618de89f",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +169,173 @@    }\n    // If a concurrent transaction inserted an offset for a new party, the insert will fail.\n    val insert =\n      Update[(String, SurrogateTpId, String)](\"\"\"INSERT INTO ledger_offset VALUES(?, ?, ?)\"\"\")\n    // If a concurrent transaction updated the offset for an existing party, we will get"
  }
]