[
  {
    "id" : "e41b0119-4c94-4ac7-8527-c23d1281d624",
    "prId" : 3953,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37ef6722-9de5-4836-9a8e-285035ec9f17",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "This function is identical to the above `readRSAPublicKeyFromCrt`, except for the final type cast. Could the common implementation be factored out?",
        "createdAt" : "2020-01-07T11:10:16Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "0f533325-7bbf-464b-80a3-ba887fddae47",
        "parentId" : "37ef6722-9de5-4836-9a8e-285035ec9f17",
        "authorId" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "body" : "Yes i tried to do this but got stuck in handling the Try wrapped in \\/ from the calling code.  I will do a removal of some duplication as a follow-up PR, if that sounds okay?",
        "createdAt" : "2020-01-08T02:35:35Z",
        "updatedAt" : "2020-01-08T17:32:49Z",
        "lastEditedBy" : "c36a5b02-f260-4cef-9fc6-22c312c693f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "92dae860832d93cc5bd64273b897a7c169a46095",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +47,51 @@    * These usually have the .crt file extension.\n    */\n  def readECPublicKeyFromCrt(file: File): Try[ECPublicKey] = {\n    bracket(Try(new FileInputStream(file)))(is => Try(is.close())).flatMap { istream =>\n      Try("
  },
  {
    "id" : "0fddc07a-12fb-4919-a6bb-1f99a3c77414",
    "prId" : 3526,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9293531b-643c-4bcb-a286-6cbb49552ac2",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Not sure how often this method is called. If often, we should cache the `KeyFactory` instance? `getInstnace` creates a new object every time it is called.\r\n",
        "createdAt" : "2019-11-19T21:32:47Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "36e0c918-0c5c-423c-8d77-0028607a2da2",
        "parentId" : "9293531b-643c-4bcb-a286-6cbb49552ac2",
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "It's called whenever an RSA key needs to be loaded from a file, which is usually once per application life time.",
        "createdAt" : "2019-11-20T14:57:27Z",
        "updatedAt" : "2019-11-25T14:55:04Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "05954a0b4045904a799d2c604ce9a266692d6a07",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@        // Interpret the container content as PKCS#8\n        key <- Try {\n          val kf = KeyFactory.getInstance(\"RSA\")\n          val keySpec = new PKCS8EncodedKeySpec(decoded.getBytes)\n          kf.generatePrivate(keySpec).asInstanceOf[RSAPrivateKey]"
  }
]