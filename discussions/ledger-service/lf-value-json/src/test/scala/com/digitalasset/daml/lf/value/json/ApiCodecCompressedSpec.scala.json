[
  {
    "id" : "4afc3078-09be-4b1b-9311-8145d2da0c1e",
    "prId" : 3838,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5979f27f-401f-4d49-8a02-4dc1906dde5e",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "What does `->>` do?",
        "createdAt" : "2019-12-17T12:47:12Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "3dba5441-e57d-45a4-a4d7-48334fa7943e",
        "parentId" : "5979f27f-401f-4d49-8a02-4dc1906dde5e",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It tags the right argument with the singleton type of the [literal] left argument; similarly to `@@` tags, its runtime value is just the right argument, though the compiler can naturally reify the tag back to a runtime value anywhere the literal is still apparent.  The `Record(k = v, ...)` is a macro doing something similar.",
        "createdAt" : "2019-12-17T17:10:27Z",
        "updatedAt" : "2019-12-19T14:12:52Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7ffa1caa126d239006cae51e19d703664b9b4f8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +55,59 @@    val (emptyRecordDDT, emptyRecordT) = VA.record(emptyRecordId, RNil)\n    val simpleRecordId = defRef(\"SimpleRecord\")\n    val simpleRecordVariantSpec = 'fA ->> VA.text :: 'fB ->> VA.int64 :: RNil\n    val (simpleRecordDDT, simpleRecordT) =\n      VA.record(simpleRecordId, simpleRecordVariantSpec)"
  },
  {
    "id" : "00f6fa4e-7969-4709-9fcb-02aa8d2cb06d",
    "prId" : 2136,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f97a120-086a-4dcb-8fa5-f4e5583d9f66",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Is that going to work? It is always `None`.",
        "createdAt" : "2019-07-16T19:58:29Z",
        "updatedAt" : "2019-07-16T20:05:27Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "f858d433-dc05-48c9-bd67-ceb7c0f97bcd",
        "parentId" : "1f97a120-086a-4dcb-8fa5-f4e5583d9f66",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Not when we have records/variants/enums being produced by TypedValueGenerators, but for now it's fine.",
        "createdAt" : "2019-07-16T20:10:55Z",
        "updatedAt" : "2019-07-16T20:10:55Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "efb2080e2b5a2a0b5eb73e3493af263b896954ca",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@\n  /** XXX SC replace when TypedValueGenerators supports TypeCons */\n  private val typeLookup: NavigatorModelAliases.DamlLfTypeLookup = _ => None\n\n  /** Serializes the API value to JSON, then parses it back to an API value */"
  }
]