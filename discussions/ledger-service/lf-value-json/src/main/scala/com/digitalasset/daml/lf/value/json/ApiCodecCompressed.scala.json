[
  {
    "id" : "cbf0b3ef-3b20-492e-8e9e-5829fc0d9371",
    "prId" : 2463,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "910cd0c8-2508-4fd8-9582-c9ff4ac946f8",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Using `match2` is to preserve exhaustiveness checking? Or is there any other advantage?",
        "createdAt" : "2019-08-13T10:02:01Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      },
      {
        "id" : "75854be5-5a23-4f28-b163-c53c1d2c8e11",
        "parentId" : "910cd0c8-2508-4fd8-9582-c9ff4ac946f8",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes; additionally, we might decide to resolve the first match layer in advance of having the `value` in the future, notwithstanding DAML recursive cases.",
        "createdAt" : "2019-08-13T14:32:48Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +109,113 @@      prim: Model.DamlLfTypePrim,\n      defs: Model.DamlLfTypeLookup): V[Cid] = {\n    (prim.typ, value).match2 {\n      case Model.DamlLfPrimType.Decimal => {\n        case JsString(v) =>"
  },
  {
    "id" : "810c7ac2-2c33-4785-974a-96e2f33416b3",
    "prId" : 2463,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89cfe3c0-0090-4d99-8872-83079dc4a499",
        "parentId" : null,
        "authorId" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "body" : "Unrelated to this commit: AFAIR `Model.damlLfInstantiate` is a copy of `typeCon.instantiate`, introduced when the daml.lf version had bug and Navigator could not upgrade to the latest daml.lf library version.\r\n\r\nNew issue for fixing this: https://github.com/digital-asset/daml/issues/2506",
        "createdAt" : "2019-08-13T10:19:45Z",
        "updatedAt" : "2019-08-13T20:29:54Z",
        "lastEditedBy" : "c83a17a2-0c0d-4811-9fe5-e560bb3ad87a",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f3e2803854a2ac76e3e34383a7bd0a16219dfc",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +251,255 @@        val id = typeCon.name.identifier\n        // val dt = typeCon.instantiate(defs(id).getOrElse(deserializationError(s\"Type $id not found\")))\n        val dt = Model.damlLfInstantiate(\n          typeCon,\n          defs(id).getOrElse(deserializationError(s\"Type $id not found\")))"
  },
  {
    "id" : "9bfc670a-d762-4ab5-b432-2c8e283c8480",
    "prId" : 2345,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b57c1371-449d-4b92-8ba4-53c2a8d527f5",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "I like that you got rid of the `Model.X` aliases. But I think you missed a few cases, like this one above.",
        "createdAt" : "2019-07-31T15:23:19Z",
        "updatedAt" : "2019-07-31T15:25:35Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "97ab13da-d6c7-4d8c-b71a-0a32b0548309",
        "parentId" : "b57c1371-449d-4b92-8ba4-53c2a8d527f5",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "The cases I skipped were deliberate, as replacing them requires actual thinking.",
        "createdAt" : "2019-08-01T15:27:47Z",
        "updatedAt" : "2019-08-01T15:27:47Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "3faa03b03ec0c0acd3c44e1d2b59a88956ccbd77",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +33,37 @@  // ------------------------------------------------------------------------------------------------------------------\n  def apiValueToJsValue(value: Model.ApiValue): JsValue = value match {\n    case v: Model.ApiRecord => apiRecordToJsValue(v)\n    case v: Model.ApiVariant => apiVariantToJsValue(v)\n    case v: V.ValueEnum => apiEnumToJsValue(v)"
  }
]