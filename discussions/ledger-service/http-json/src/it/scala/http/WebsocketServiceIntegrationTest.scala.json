[
  {
    "id" : "8205a9ee-efc6-431a-ba7f-1114b6717646",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e67afb-e1b1-4edd-9a39-514f31963967",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m confused, where’s the code that fails? We seem to just stop once we found the right number of contracts. I would have expected that we read until we get the life marker and error out if there’s a mismatch in the number of contracts.",
        "createdAt" : "2021-01-14T08:57:56Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "78c8b518-3750-4e63-bba3-a55aed9af9af",
        "parentId" : "d0e67afb-e1b1-4edd-9a39-514f31963967",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "The `Consume` language intrinsically fails when you do anything that doesn't match the contents of the stream: patmat, read past end, guard failure.",
        "createdAt" : "2021-01-14T11:49:58Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +732,736 @@  }\n\n  /** Consume ACS blocks expecting `createCount` contracts.  Fail if there\n    * are too many contracts.\n    */"
  },
  {
    "id" : "75841547-a5df-4dbd-ae1d-8b941d54be7d",
    "prId" : 7244,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bbc91e5-976b-4137-8270-3c0629a337b5",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "~~@garyverhaegen-da are you sure this test works? I see a space before `[]` which should NOT be there... In any case I don't like tests relying on formatted JSON strings.~~\r\n\r\nscratch it, I missed the fact that you are calling `parseJson` on the strings. All good! Thanks!\r\n\r\n",
        "createdAt" : "2020-09-01T16:54:18Z",
        "updatedAt" : "2020-09-01T16:58:22Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffdc23647326944307ebd81ee45f6acbaf83a0be",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +507,511 @@        Seq(\n          \"\"\"\n            |{\"events\": []}\n            |\"\"\".stripMargin.parseJson,\n          \"\"\""
  },
  {
    "id" : "2a7a5541-a509-4d1c-b3b6-af1ff2f7d81d",
    "prId" : 6569,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fddbea8c-507e-431a-90ac-097119d6f522",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "what is the differnces `fst @ _` vs `fst`. I don't see `fst` used in the scope of this pattern match, can it be:\r\n```\r\ncase (Vector((fstId, _), (sndId, _)), Vector(observeConsumed), Some(_))\r\n```",
        "createdAt" : "2020-07-02T13:40:59Z",
        "updatedAt" : "2020-07-02T13:41:18Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a7c57999f34bb73958b71a0030ed1b70eddf7b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +410,414 @@      } yield\n        inside(rescan) {\n          case (Vector((fstId, fst @ _), (sndId, snd @ _)), Vector(observeConsumed), Some(_)) =>\n            Set(fstId, sndId, observeConsumed.contractId) should have size 3\n        }"
  }
]