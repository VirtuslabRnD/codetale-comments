[
  {
    "id" : "c7ae52e2-5209-4678-912c-dd1785eeaccb",
    "prId" : 9321,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267f62f6-955f-4420-94d2-521cc91c69a7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do we have a test that hits this? I was expecting to see something with only a `tag` but no `value` but the tests you added do have an entry for the value.",
        "createdAt" : "2021-04-06T07:29:36Z",
        "updatedAt" : "2021-04-06T07:29:45Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cfd3ba9c-2404-46f4-a396-6f814acd5660",
        "parentId" : "267f62f6-955f-4420-94d2-521cc91c69a7",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes, the last-added test is actually a tag-with-no-value test.",
        "createdAt" : "2021-04-06T12:57:15Z",
        "updatedAt" : "2021-04-06T12:57:16Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3051544d51134d88e4b63d0d99fc3a49f548150",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +135,139 @@            vraw,\n            v_== map (JsonVariant(dc, _)),\n            v_@> map (JsonVariant(dc, _)) orElse Some(JsonVariant withoutValue dc),\n          )\n"
  },
  {
    "id" : "8f5b1dac-1cb3-48c1-a872-ce2ed952f500",
    "prId" : 9159,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a321688-b982-4307-a9f9-13c48e54d487",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there an easy way to understand which queries end up turning into equalities and which turn into contains queries? I think I donâ€™t quite get why we need both.",
        "createdAt" : "2021-03-29T09:06:53Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6e43ab37-c723-4cc2-bbf9-71adc277c845",
        "parentId" : "2a321688-b982-4307-a9f9-13c48e54d487",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Record queries are contains queries, which lift neatly into variants and optionals, so you can express a bunch of contains queries at once.",
        "createdAt" : "2021-03-29T17:15:54Z",
        "updatedAt" : "2021-03-29T18:55:37Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "07059d0ac4b197dbc3568bc3e333fa8b2c84cead",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +93,97 @@        safe_@> map (containsAtContractPath(path, _))\n      def flush_==(path: Path): Option[Fragment] =\n        safe_== map (equalAtContractPath(path, _))\n    }\n"
  },
  {
    "id" : "c4781e1d-2663-478d-ba7e-b1c2032f32dd",
    "prId" : 6569,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2c715ff-c001-465b-a7c3-aeecf1aee8ec",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Why not `case tc @ iface.TypeCon(iface.TypeConName(id), _)`?",
        "createdAt" : "2020-07-02T13:51:03Z",
        "updatedAt" : "2020-07-02T13:51:03Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a7c57999f34bb73958b71a0030ed1b70eddf7b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +322,326 @@\n    (typ match {\n      case tc @ iface.TypeCon(iface.TypeConName(id), typArgs @ _) =>\n        for {\n          dt <- defs(id)"
  },
  {
    "id" : "7d0a9923-1957-4624-9b64-fb27800eaef6",
    "prId" : 3599,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2a5273c-6f95-4700-9ff7-0f8b6b6d5287",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "why `Path` for argument, but `Fragment` for return value? For self-documenting purposes? `Path` means something like  `person.name`?",
        "createdAt" : "2019-12-03T18:20:38Z",
        "updatedAt" : "2019-12-04T20:59:12Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "4f8a66b5-aaab-434c-ac3a-0a38008dc5ce",
        "parentId" : "b2a5273c-6f95-4700-9ff7-0f8b6b6d5287",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes, only for self-documenting purposes. Yes.",
        "createdAt" : "2019-12-04T18:02:31Z",
        "updatedAt" : "2019-12-04T20:59:12Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e431d26e5ede26373af748ecaaa57c13a41b1d3",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +103,107 @@        safe_== : Option[JsValue],\n        safe_@> : Option[JsValue]) {\n      def flush_@>(path: Path): Option[Fragment] =\n        safe_@> map (jq => path ++ sql\" @> $jq::jsonb\")\n      def flush_==(path: Path): Option[Fragment] ="
  },
  {
    "id" : "bb172553-b0d3-4c9b-bbf7-f14e8d1706f6",
    "prId" : 2826,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "304754e2-e1cb-4d36-8483-e68cd126e194",
        "parentId" : null,
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Variants can only have a single direct field, which in turn can be of a record type with many fields. What do you think about \"inline\" the fields of the child record as a shortcut? Especially considering that the name of the variant field is not directly \"visible\" in the DAML code. What field name should users use?",
        "createdAt" : "2019-09-23T15:33:10Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      },
      {
        "id" : "4f78d724-9d2f-4568-aad6-a28bbfdbf073",
        "parentId" : "304754e2-e1cb-4d36-8483-e68cd126e194",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "You cannot really inline the record, you need the parent field, which is a (`DataCon`, `Record`) pair.\r\nwhere `DataCon` is data constructor, the name of the variant and `Record` is a nested record. If you inline the record, where are you going to put the data constructor string? And we need it for serialization/deserialization. We can change the ADT but this will break backward-compatibility (many modules will be affected).",
        "createdAt" : "2019-09-23T18:24:23Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "df9ce7de-42a4-4ee4-bfd9-d870f6e364fd",
        "parentId" : "304754e2-e1cb-4d36-8483-e68cd126e194",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> What do you think about \"inline\" the fields of the child record as a shortcut?\r\n\r\nWith the caveat that users would have to be aware of exceptions, exceptions to those exceptions, and exceptions to those exceptions to those exceptions (I stopped thinking of examples at that point).\r\n\r\n> Especially considering that the name of the variant field is not directly \"visible\" in the DAML code. What field name should users use?\r\n\r\nThe name is visible in DAML code; it's the data constructor.",
        "createdAt" : "2019-09-23T18:58:24Z",
        "updatedAt" : "2019-09-23T19:38:21Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "7ec87e8b-2bee-4f3a-b5be-04898fbd1206",
        "parentId" : "304754e2-e1cb-4d36-8483-e68cd126e194",
        "authorId" : "eb431011-3221-41ae-bf30-e72dde278004",
        "body" : "Okay, thanks.",
        "createdAt" : "2019-09-24T07:13:56Z",
        "updatedAt" : "2019-09-24T07:13:56Z",
        "lastEditedBy" : "eb431011-3221-41ae-bf30-e72dde278004",
        "tags" : [
        ]
      }
    ],
    "commit" : "078ec69a5240afdc0f2e7a5ee0646566cc902378",
    "line" : 162,
    "diffHunk" : "@@ -1,1 +160,164 @@        )(VariantMatch)\n\n      case _ => predicateParseError(s\"Variant must have exactly 1 field, got: $fields, id: $id\")\n    }\n"
  }
]