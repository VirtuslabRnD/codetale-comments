[
  {
    "id" : "a404726b-a862-4854-8e21-dabeaad9cbf5",
    "prId" : 9847,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2da61808-3c45-4302-a5e4-5400a55db579",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe add a comment somewhere what adjust request should do.",
        "createdAt" : "2021-06-15T14:21:24Z",
        "updatedAt" : "2021-06-15T14:31:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9283b3ac-6540-4432-b148-ffe022db100d",
        "parentId" : "2da61808-3c45-4302-a5e4-5400a55db579",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/9847/commits/5e695f854f6153e81bbd8f359fa5f1e6b4509479",
        "createdAt" : "2021-06-15T16:00:27Z",
        "updatedAt" : "2021-06-15T16:00:27Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58853091ac6f22cb2c46f79b55c20e87ee0456e9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +181,185 @@    /** Perform any necessary adjustment to the request based on the prefix\n      */\n    def adjustRequest(\n        prefix: Option[domain.StartingOffset],\n        request: A,"
  },
  {
    "id" : "d19f6a33-2131-4917-913c-98738f3ee0f7",
    "prId" : 9847,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13cd421e-b6a5-4f97-84e7-c61d91cef97e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "comment here might also be useful.",
        "createdAt" : "2021-06-15T14:22:44Z",
        "updatedAt" : "2021-06-15T14:31:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ddcea9ce-81bb-4972-807b-0123f0dd5888",
        "parentId" : "13cd421e-b6a5-4f97-84e7-c61d91cef97e",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/9847/commits/5e695f854f6153e81bbd8f359fa5f1e6b4509479",
        "createdAt" : "2021-06-15T16:00:33Z",
        "updatedAt" : "2021-06-15T16:00:33Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58853091ac6f22cb2c46f79b55c20e87ee0456e9",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +188,192 @@    /** Specify the offset from which the live part of the query should start\n      */\n    def liveStartingOffset(\n        prefix: Option[domain.StartingOffset],\n        request: A,"
  },
  {
    "id" : "c76ef717-ac42-42b1-9ea0-bb64a9fc2ca6",
    "prId" : 9847,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f85754-3170-4e54-9d54-394ccf40552c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "afaik `insertDeleteStepSource` always goes in-memory and never via the database which is not what we had before and not what we want I believe. Am I missing something?",
        "createdAt" : "2021-06-15T14:29:58Z",
        "updatedAt" : "2021-06-15T14:31:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6238d710-3bbd-4a56-938e-abdc0af7e965",
        "parentId" : "42f85754-3170-4e54-9d54-394ccf40552c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'm relatively sure we always fetched only the ACS from the database, isn't that the case?",
        "createdAt" : "2021-06-15T15:00:22Z",
        "updatedAt" : "2021-06-15T15:00:23Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "e40fc43e-c481-41f8-a93f-5e52dd709429",
        "parentId" : "42f85754-3170-4e54-9d54-394ccf40552c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, this is not the case where we have no offset but it’s the case where we made no acs request because everything had an offset. What is slightly confusing is that `insertDeleteStepSource` will fetch the ACS again if you pass `None`. Afaict we will never actually pass `None` here (if `acsRequest` is None`, `liveStartOffset` must be `Some`) so maybe add an assertion and/or a comment to make that explict.",
        "createdAt" : "2021-06-15T16:18:37Z",
        "updatedAt" : "2021-06-15T16:18:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "47c2c64c-d238-4100-9db1-75bc2079898e",
        "parentId" : "42f85754-3170-4e54-9d54-394ccf40552c",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/9847/commits/bf1c88e6ae28ce0be6a3da245d44ada31c0c8eb4",
        "createdAt" : "2021-06-16T06:56:58Z",
        "updatedAt" : "2021-06-16T06:56:58Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58853091ac6f22cb2c46f79b55c20e87ee0456e9",
    "line" : 310,
    "diffHunk" : "@@ -1,1 +672,676 @@\n                Future.successful {\n                  contractsService\n                    .insertDeleteStepSource(\n                      jwt,"
  },
  {
    "id" : "fca47d30-f345-4e36-a848-30cdfc203917",
    "prId" : 9847,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef7b55f4-4311-4fa6-851d-03fd01df305a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "so the live offset is the acs end not the point where we start the streams right?",
        "createdAt" : "2021-06-15T14:31:04Z",
        "updatedAt" : "2021-06-15T14:31:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "684615fb-0d5e-4b60-973f-86afc41e0670",
        "parentId" : "ef7b55f4-4311-4fa6-851d-03fd01df305a",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Not necessarily, if the query offset is earlier than the end of the ACS we need to start from there.",
        "createdAt" : "2021-06-15T15:01:10Z",
        "updatedAt" : "2021-06-15T15:01:10Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58853091ac6f22cb2c46f79b55c20e87ee0456e9",
    "line" : 289,
    "diffHunk" : "@@ -1,1 +651,655 @@                      Q.predicate(shiftedRequest, resolveTemplateId, lookupType)\n\n                    Source.single(liveBegin) ++ contractsService\n                      .insertDeleteStepSource(\n                        jwt,"
  },
  {
    "id" : "fb41ca7b-ecdf-4ccc-8974-bd828be33cf3",
    "prId" : 9847,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8ec1ae2-b9b0-4136-8254-47a8375506e0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "do you assume that the request has already been adjusted? probably worth documenting",
        "createdAt" : "2021-06-15T16:11:54Z",
        "updatedAt" : "2021-06-15T16:18:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f601f7b1-43ed-4def-8e44-22aa54ed7b88",
        "parentId" : "e8ec1ae2-b9b0-4136-8254-47a8375506e0",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Addressed by https://github.com/digital-asset/daml/pull/9847/commits/893c5536383a64fda2d9ff54b0187f15af0c9707",
        "createdAt" : "2021-06-16T06:56:47Z",
        "updatedAt" : "2021-06-16T06:56:47Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "58853091ac6f22cb2c46f79b55c20e87ee0456e9",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +321,325 @@          request: SearchForeverRequest,\n      ): Option[domain.StartingOffset] =\n        request.queries\n          .map(_.offset)\n          .minimumBy1(identity)"
  },
  {
    "id" : "f0490a8b-c9db-4a00-8ff6-fbccf06b8e6b",
    "prId" : 8517,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36f4ae32-ee5b-44a6-a6e4-e05a4549b53c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "What does \"is not similarly tested\" mean? I first thought it means \"does not satisfy the prefix\" but that’s clearly wrong in the example below since `Some(_)` is always satisfied.",
        "createdAt" : "2021-01-21T07:50:49Z",
        "updatedAt" : "2021-01-21T08:00:39Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "aa77b8bf-0260-4b14-bf2d-a1d27194a998",
        "parentId" : "36f4ae32-ee5b-44a6-a6e4-e05a4549b53c",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Tested with `prefix`.",
        "createdAt" : "2021-01-21T12:19:52Z",
        "updatedAt" : "2021-01-21T12:19:52Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "020309d547337a91ad2082b195401b3fc0e0de17",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +58,62 @@\n  /** If an element satisfies `prefix`, consume it and emit the result alongside\n    * the next element (which is not similarly tested); otherwise, emit it.\n    *\n    * {{{"
  },
  {
    "id" : "f6a7a1a3-c0fa-40e1-8400-2c74e044fc0f",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b44aa88f-36fd-454e-847b-bc7abc2fe0bc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "If I read this correctly we preserve the streaming behavior for the in-memory mode right? Just double-checking since I vaguely recall that at some point we discussed that this might also go away since (at least for now) we don’t stream db results.",
        "createdAt" : "2021-01-06T10:23:19Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1c1c7529-0892-4c32-81a3-9f7b68695af8",
        "parentId" : "b44aa88f-36fd-454e-847b-bc7abc2fe0bc",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes; since we already had a separate ACS phase for the in-memory mode, we merely replace that \"prefix\".",
        "createdAt" : "2021-01-06T15:04:37Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +487,491 @@          )\n\n      Source\n        .lazyFutureSource(() =>\n          prefilter.map { case (prefiltered, shiftedPrefix) =>"
  },
  {
    "id" : "438f4669-ff4b-4f69-a3d4-6698fc80a6e6",
    "prId" : 8226,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efda9461-1047-4716-8dd6-82e4b045b3ca",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "that’s the contract keys one right?",
        "createdAt" : "2021-01-14T09:04:40Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9727056c-45c4-44c9-82a6-348e2b817c5e",
        "parentId" : "efda9461-1047-4716-8dd6-82e4b045b3ca",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Yes.",
        "createdAt" : "2021-01-14T11:50:15Z",
        "updatedAt" : "2021-01-14T13:22:56Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f45a8b9355e909e14c683fc97b3e6651d8dee70f",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +320,324 @@        { parties => implicit lh =>\n          import dbbackend.ContractDao.{selectContractsMultiTemplate, MatchedQueryMarker}\n          selectContractsMultiTemplate(parties, dbQueries, MatchedQueryMarker.Unused)\n        },\n      )"
  },
  {
    "id" : "1d5dfb3c-ad85-4210-8803-b488c63932fc",
    "prId" : 7109,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a65dd9e-739c-4afa-bcde-e173dbad3b0b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thank you for making the change! Much easier to follow now for me!",
        "createdAt" : "2020-08-13T06:58:45Z",
        "updatedAt" : "2020-08-13T06:59:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "073b6313a6a76aa9d1e126f727c4446e885d05a4",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +414,418 @@      .keepAlive(config.heartBeatPer, () => TickTrigger)\n      .scan(zero) {\n        case ((None, _), TickTrigger) =>\n          // skip all ticks we don't have the offset yet\n          (None, TickTrigger)"
  },
  {
    "id" : "f987c4f3-366a-4dcd-82d2-1dfa750d09d6",
    "prId" : 4886,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eafc7ce-8cdf-475d-bd8a-10aebaefc8b5",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This occurring earlier in the stream means that empty (or emptied by means of filtering) steps will not cause offset to \"tick up\". You might have to `-\\/` on the heartbeat before this stage in the flow.",
        "createdAt" : "2020-03-09T19:25:14Z",
        "updatedAt" : "2020-03-11T19:23:44Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "56ac3c79-adb8-4cba-b468-d496889475b7",
        "parentId" : "1eafc7ce-8cdf-475d-bd8a-10aebaefc8b5",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@S11001001 @hurryabit  is that really important to \"tick up\" empty events? You will get the heartbeat in any case if there is no activity matching the query. We either filter empty events out completely or we need to add some logic for conflating consecutive empty events, which would rather complicate the flow.\r\n\r\nIf you only care about the \"live\" marker, it can be sent explicitly.",
        "createdAt" : "2020-03-11T13:01:13Z",
        "updatedAt" : "2020-03-11T19:23:44Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "b418338e-55a1-49aa-9bee-b453941df8c5",
        "parentId" : "1eafc7ce-8cdf-475d-bd8a-10aebaefc8b5",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It is important, and a prime motivation for this feature.\r\n\r\nConsider the sequence of event blocks, before we filter out the empty ones. Each has a unique offset, representing when it happened, and therefore when the stream will pick up if you resume it.\r\n\r\nA block becomes empty in the stream for only one reason: we filtered out all the events in it. This feature is important to preserve so you don't get spammed with empty event blocks should you choose a particularly strict query (e.g. all key queries are quite strict).\r\n\r\nSuppose that you get a block, and then four hours pass. Suppose that there are empty event blocks in that time. Under the current code, the heartbeat will continue to emit the offset from the last non-empty event block. What we want is for it to emit the offset from the last _empty or non-empty_ event block, so that should you close the stream and resume, you won't necessarily be four hours in the past.\r\n\r\nI don't think this has to terribly affect the current flow; your present logic can work on `StepAndErrors`, possibly making `StepAndErrors` a full ADT (or not, do whatever works structurally), rather than the output of `render`, and an \"empty\" `StepAndErrors` that should be emitted anyway because it is a heartbeat can simply be `nonEmpty`.",
        "createdAt" : "2020-03-11T18:31:09Z",
        "updatedAt" : "2020-03-11T19:23:44Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "60d53093-e629-4f5b-8d07-53fad4d2d183",
        "parentId" : "1eafc7ce-8cdf-475d-bd8a-10aebaefc8b5",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "See: #4955",
        "createdAt" : "2020-03-11T19:18:13Z",
        "updatedAt" : "2020-03-11T19:23:44Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "41ee53013c9760d2123824d5705920e4ed550345",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +314,318 @@        .insertDeleteStepSource(jwt, jwtPayload.party, resolved.toList, Terminates.Never)\n        .via(convertFilterContracts(fn))\n        .filter(_.nonEmpty)\n        .via(removePhantomArchives(remove = !Q.allowPhantonArchives))\n        .map(_.mapPos(Q.renderCreatedMetadata).render)"
  },
  {
    "id" : "cbe5d5d4-614a-4351-838d-d10351340cb1",
    "prId" : 4363,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2c898c8-a6a4-4ce8-8268-c87d7e4c7b62",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "why don't we want to emit `errors` first? the client may decide to cancel the stream processing entirely based on what error(s) they receive.",
        "createdAt" : "2020-02-05T13:37:27Z",
        "updatedAt" : "2020-02-06T14:50:14Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "ff471948-854d-4dfe-8f28-81df60af8b3c",
        "parentId" : "b2c898c8-a6a4-4ce8-8268-c87d7e4c7b62",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "@hurryabit  ^^^",
        "createdAt" : "2020-02-05T13:37:57Z",
        "updatedAt" : "2020-02-06T14:50:14Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "8c5c6fda-07da-4dc6-8f76-85592edf83ed",
        "parentId" : "b2c898c8-a6a4-4ce8-8268-c87d7e4c7b62",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This block assembles a single message; the client will get all this at once.",
        "createdAt" : "2020-06-18T18:00:30Z",
        "updatedAt" : "2020-06-18T18:00:31Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eebf6edfa656f053fe4aa62ae2b225acfed08a5",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +69,73 @@              val acj = inj(\"created\", ac)\n              acj copy (fields = acj.fields ++ pos)\n          } ++ errors.map(e => inj(\"error\", e.message)))\n    }\n"
  },
  {
    "id" : "aac594e6-2907-4a06-a883-4d3cf8817c88",
    "prId" : 3796,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187c2448-50b1-4ee8-9c87-cd3d1afb973b",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Please do not hardcode the `keepAlive` setting, pass it through the `wsConfig`",
        "createdAt" : "2019-12-11T20:51:45Z",
        "updatedAt" : "2019-12-11T21:29:33Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "de976ed59d6d521657884322490436c95dece760",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@                wsConfig.maxBurst,\n                wsConfig.mode)\n      .keepAlive(5.seconds, () => TextMessage.Strict(heartBeat))\n      .watchTermination() {\n        (_, future) =>"
  },
  {
    "id" : "9b1104a8-2c53-457b-8f92-9c8e85685287",
    "prId" : 3796,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec63c74c-1ffd-46b4-a302-88d5391fe04f",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "we probably don't want to consume all transactions from the very beginning all the time.",
        "createdAt" : "2019-12-11T21:04:30Z",
        "updatedAt" : "2019-12-11T21:29:33Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "e338099b-6ea4-4b21-a007-50cb55d81c88",
        "parentId" : "ec63c74c-1ffd-46b4-a302-88d5391fe04f",
        "authorId" : "e18aaaa4-367e-4ddf-8d14-651b9ff7c44f",
        "body" : "yeah, same thoughts on this too, (see TODO the comment), maybe we can wrap the client request message with offset input",
        "createdAt" : "2019-12-11T21:07:40Z",
        "updatedAt" : "2019-12-11T21:29:33Z",
        "lastEditedBy" : "e18aaaa4-367e-4ddf-8d14-651b9ff7c44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "de976ed59d6d521657884322490436c95dece760",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@      case \\/-(ids) =>\n        val filter = transactionFilterFor(jwtPayload.party, ids)\n        transactionClient.getTransactions(LedgerOffsetOrdering.ledgerBegin, None, transactionFilter = filter) // TODO: make offSet pass along with client message\n          .via(Flow[Transaction].filter(_.events.nonEmpty))\n          .map(tx => {"
  },
  {
    "id" : "1d212d18-f76b-4713-ba8a-8e19f03b0137",
    "prId" : 3796,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "816eb965-5369-454c-adfb-1d0cb121dca4",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "Please use `spray.json.JsValue#compactPrint` instead of `toString`",
        "createdAt" : "2019-12-11T21:05:14Z",
        "updatedAt" : "2019-12-11T21:29:33Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "a01dfbeb-1baa-4856-85f2-ec87f1657bc8",
        "parentId" : "816eb965-5369-454c-adfb-1d0cb121dca4",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "this is probably a question for @bame-da\r\nwe currently don't do any API Transaction cleanup, we serialize `com.digitalasset.ledger.api.v1.transaction.Transaction` to JSON as is. The JSON is going to be very noisy.\r\nIn any case if decide to clean it up, it should be done in a separate PR.",
        "createdAt" : "2019-12-11T21:13:53Z",
        "updatedAt" : "2019-12-11T21:29:33Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "de976ed59d6d521657884322490436c95dece760",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@          .map(tx => {\n            lfVToJson(tx) match {\n              case \\/-(a) => TextMessage(JsObject(\"transaction\" -> a).toString)\n              case -\\/(e) => wsErrorMessage(e.shows)\n            }"
  }
]