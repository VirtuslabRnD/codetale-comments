[
  {
    "id" : "a9db3d86-44e3-4019-88d4-acabf3600e11",
    "prId" : 10252,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96ad6fcd-3df5-40b9-baa7-93b6f54a5143",
        "parentId" : null,
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "switched to point based here, because the formatter formats the code to a more readable way here",
        "createdAt" : "2021-07-13T10:15:38Z",
        "updatedAt" : "2021-07-13T10:15:39Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "558f7058906f921d12c021b2566d3562b5d08ec7",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +151,155 @@      liveOrHealthDispatch\n    dispatch\n      .&&& { case r => r }\n      .andThen { case (lcFhr, req) =>\n        extendWithRequestIdLogCtx(implicit lc => {"
  },
  {
    "id" : "62534948-f58a-4814-a6eb-ec4d34ee9fc5",
    "prId" : 10244,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9cd6714-6b74-479d-b942-bf84f0bf00c8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I assume the idea is to switch over to that once we use the dsl?",
        "createdAt" : "2021-07-12T16:44:02Z",
        "updatedAt" : "2021-07-12T16:58:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "04c21dfd-bdfa-44f6-b9f1-dac45519fafb",
        "parentId" : "e9cd6714-6b74-479d-b942-bf84f0bf00c8",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "Correct",
        "createdAt" : "2021-07-12T18:58:45Z",
        "updatedAt" : "2021-07-12T18:58:45Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "39ce4b77ce590b5eb14df72f02d6332c7fb08409",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +69,73 @@  import Uri.Path._\n\n  // Inspired by\n  // https://github.com/akka/akka-http/blob/master/akka-http/src/main/scala/akka/http/scaladsl/server/directives/MiscDirectives.scala#L110-L116\n  // Because the Remote-Address header is deprecated we don't match for it here."
  },
  {
    "id" : "8b7d6681-40a3-4a46-8e97-fa75eb86315d",
    "prId" : 10102,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0857902-e166-47ac-8436-a41f6b6000f0",
        "parentId" : null,
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "Great to see someone noticed this, I completely forgot that I should refactor that after I added the overload with the varargs instead of the need of using a map :smile: ",
        "createdAt" : "2021-06-24T12:07:04Z",
        "updatedAt" : "2021-06-24T12:13:45Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "df7a1a8a-6699-41d7-ab69-ac5b3718dc47",
        "parentId" : "a0857902-e166-47ac-8436-a41f6b6000f0",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "(This was a THANKS! :smile: )",
        "createdAt" : "2021-06-24T12:14:54Z",
        "updatedAt" : "2021-06-24T12:14:54Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "010eea1dd4cfe456ff9da332e3f7b6ef46e98238",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +175,179 @@      \"act_as\" -> jwtPayload.actAs.toString,\n      \"application_id\" -> jwtPayload.applicationId.toString,\n      \"read_as\" -> jwtPayload.readAs.toString,\n    ).run(fn)\n"
  },
  {
    "id" : "86bae6bd-5fa9-43d8-a00c-bd8d3a7f1a10",
    "prId" : 10068,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I understand that this comes from existing code, but should we also take advantage of this chance to log this exception?",
        "createdAt" : "2021-06-21T21:04:55Z",
        "updatedAt" : "2021-06-21T21:05:46Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "321d2471-c589-402d-be36-a8e4d83a63bc",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I am generally against logging anything that is reported by proper channels already; it's a good way to leak sensitive data.",
        "createdAt" : "2021-06-21T21:31:46Z",
        "updatedAt" : "2021-06-21T21:31:46Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "2a6d040e-27cc-4f81-bac8-d9a3c9056f4f",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "We are recovering from a server error here, I think it makes sense for the information to be logged on the server. I would argue it would probably make less sense to return the full description to the client (e.g. if the connection to the database fails I'd be likely be more interested to have it logged rather than reported to the client). Does that make sense?",
        "createdAt" : "2021-06-21T21:50:59Z",
        "updatedAt" : "2021-06-21T21:50:59Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "cd3a6ec2-7d41-4f52-a1c8-26760d1c561b",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "If you can honestly say \"don't report the description to the client at all in this case\", then it makes sense. Otherwise, we're pointing in one direction and jumping in the other.",
        "createdAt" : "2021-06-22T00:34:50Z",
        "updatedAt" : "2021-06-22T00:34:50Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "2ff5e9dd-6649-445d-8bcf-b5d887282090",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "If the errors caught here are meaningful to be reported in full only to the operator of the server, then yes. There are cases in which both a detailed report to the user _and_ logging to the advantage of the operator could make sense. Not sure of what could be thrown here. It looks to me like here most exceptions would be interesting from an operational point of view but less so from a user perspective, but I'll let you judge that.",
        "createdAt" : "2021-06-22T07:29:35Z",
        "updatedAt" : "2021-06-22T07:29:35Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "ed92899f-8064-4661-8137-1a07dec209cf",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "This escalated quickly :joy:\r\n\r\nThing is, how do we know whether the information is either best only for the user or the operator of the server?",
        "createdAt" : "2021-06-22T07:40:56Z",
        "updatedAt" : "2021-06-22T07:40:56Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "fb7e2a7b-ffc0-46ed-a4bf-2e9b673a2888",
        "parentId" : "360ce3ae-c8ba-405c-a7b2-e595437a9fca",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "I want to postpone this to a separate pr and better discuss this in slack or in an gh issue",
        "createdAt" : "2021-06-22T07:41:36Z",
        "updatedAt" : "2021-06-22T08:27:30Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b9088f4f4eac911aeb6b8a2fed14d153ddfc1de",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +490,494 @@        }\n        .recover { case NonFatal(e) =>\n          httpResponseError(ServerError(e.description))\n        },\n    )"
  },
  {
    "id" : "7e6ba025-7105-4fff-b4ea-c444c5710fcd",
    "prId" : 10045,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e44d665-a5c0-4fb0-9eaa-de84854f6227",
        "parentId" : null,
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "I think I'm going to merge the single case matches here into one because it's also weird to have an extra declaration for them then.",
        "createdAt" : "2021-06-17T14:29:08Z",
        "updatedAt" : "2021-06-17T14:29:08Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "3c4a3799-3604-4a33-9034-bcee0c796c22",
        "parentId" : "2e44d665-a5c0-4fb0-9eaa-de84854f6227",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "on the other hand, mixing stuff together when it's split up that cleanly isn't looking that much better either.",
        "createdAt" : "2021-06-21T08:15:36Z",
        "updatedAt" : "2021-06-21T08:15:36Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "f496c2c5dcf3cd352b1c1c533815c83fef94134a",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +98,102 @@        (implicit lc => httpResponse(query(req)))\n    }\n    val fetchDispatch: DispatchFun = {\n      case req @ HttpRequest(POST, Uri.Path(\"/v1/fetch\"), _, _, _) =>\n        (implicit lc => Timed.future(apiMetrics.fetchTimer, httpResponse(fetch(req))))"
  },
  {
    "id" : "003220b9-4f6d-4301-b1b0-ef96bf235cae",
    "prId" : 10045,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51401acb-a9f7-43ba-9670-c9c308fc3854",
        "parentId" : null,
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "All of this weird formatting just because scalafmt needs these braces, otherwise it fails with a parser error -.-",
        "createdAt" : "2021-06-17T14:29:41Z",
        "updatedAt" : "2021-06-17T14:29:42Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "8f68853e-d9a8-4eaf-a4cf-b8f5331b882a",
        "parentId" : "51401acb-a9f7-43ba-9670-c9c308fc3854",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I'll take weird formatting over formatting discussions any time. 🙂 ",
        "createdAt" : "2021-06-17T15:52:47Z",
        "updatedAt" : "2021-06-17T15:52:47Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f496c2c5dcf3cd352b1c1c533815c83fef94134a",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +110,114 @@    val allocatePartyDispatch: DispatchFun = {\n      case req @ HttpRequest(POST, Uri.Path(\"/v1/parties/allocate\"), _, _, _) =>\n        (\n            implicit lc =>\n              Timed.future(apiMetrics.allocatePartyTimer, httpResponse(allocateParty(req)))"
  },
  {
    "id" : "ebcb87cb-5deb-44db-8c8e-778ceeb14dbc",
    "prId" : 9995,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f954226-4e21-444c-be00-21314d60024f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems like there is a fair bit of duplication between the write & read endpoints. Can we share this? In the end both tokens can provide us with those fields so we should be able to make them extend a common trait (maybe we even have one already I forgot).",
        "createdAt" : "2021-06-15T10:48:06Z",
        "updatedAt" : "2021-06-15T10:48:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c0311d7f-3fac-4d62-afa8-e4e4fd86e100",
        "parentId" : "0f954226-4e21-444c-be00-21314d60024f",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "I thought about union both jwtpayloads with a trait, however because it hasn't been done in the past already I hesitated to do it as both are similar but used in different scenarios.\r\n\r\nHowever I would be much happier too with adding a trait and removing that duplicate code.",
        "createdAt" : "2021-06-15T11:22:48Z",
        "updatedAt" : "2021-06-15T11:22:48Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "00179b8a-e981-42cf-8f04-7ac75483772e",
        "parentId" : "0f954226-4e21-444c-be00-21314d60024f",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "adressed with 0b0c824 & 24b0c33",
        "createdAt" : "2021-06-15T15:29:13Z",
        "updatedAt" : "2021-06-15T15:29:13Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      }
    ],
    "commit" : "1af8a4f7acea6db93a40c96dd988d63c8daea8fd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +137,141 @@    ).run(fn)\n\n  def handleCommand[T[_]](req: HttpRequest)(\n      fn: (\n          Jwt,"
  },
  {
    "id" : "ffd42877-3a65-413d-9432-47a9561be0b4",
    "prId" : 5660,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "This is pretty quick and dirty \"parsing\"; should we parse [rfc 7239 forwarded-elements](https://tools.ietf.org/html/rfc7239#section-4) instead? @leo-da ",
        "createdAt" : "2020-04-21T22:38:01Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "bf453725-63c0-4412-a86b-ccaa1b53c0ba",
        "parentId" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "I need to read on this first... but I expect Akka HTTP provides some utilities for this.",
        "createdAt" : "2020-04-21T23:20:12Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "27446876-c9c0-4f4d-b7eb-e85eb4077e5c",
        "parentId" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "> but I expect Akka HTTP provides some utilities for this\r\n\r\nNot really. The closest they come is [`Connection`'s parser](https://github.com/akka/akka-http/blob/v10.1.11/akka-http-core/src/main/scala/akka/http/impl/model/parser/SimpleHeaders.scala#L77-L80), but that syntax is sufficiently incompatible to just crash on a Forwarded header. We can reuse [some of the parser components](https://github.com/akka/akka-http/blob/v10.1.11/akka-http-core/src/main/scala/akka/http/impl/model/parser/CommonRules.scala#L18-L63), though they are package-private and thus [not part of the stable API](https://doc.akka.io/docs/akka-http/10.1.11/common/http-model.html#parsing-rendering)\r\n\r\n> Parsing and rendering of HTTP data structures is heavily optimized and for most types there’s currently no public API provided to parse (or render to) Strings or byte arrays.\r\n\r\nBut that _still_ does not include a forwarded-element parser anyway, so even odds we might as well define a new parser.\r\n\r\nIf what we want is a parser. That question thus reduces to whether avoiding the obvious edge cases in the quick and dirty approach is worth dealing with the above.",
        "createdAt" : "2020-04-21T23:30:14Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "b9e6bcd4-69f5-4fa3-a1c5-41a1ea426f7e",
        "parentId" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I think this is fine. It's clearly possible to craft a Forwarded value that thwarts it, but if you're at the point of crafting the header you can already set it to whatever you want anyway.\r\n\r\nThe goal of this filter is not to be absolutely unbreakable, but to avoid accidental security holes.",
        "createdAt" : "2020-04-22T10:22:01Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "320da9b4-af27-44a6-a44a-87ad85be3d6f",
        "parentId" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "@garyverhaegen-da Makes sense to me, thanks.",
        "createdAt" : "2020-04-22T14:57:25Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "2bf4d505-ec2a-46d0-9266-bdd1ede5e12a",
        "parentId" : "187feb6f-0cf0-45b2-940d-0a658e2eed19",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "> We can reuse some of the parser components, though they are package-private and thus not part of the stable API\r\n\r\nNah... I thought it would be available. In any case I agree with @garyverhaegen-da it does not have to be bulletproof, it is just a fat finger check, a security advise to developers/operations to run JSON API behind a reverse proxy with HTTPs. If developer is crafting the header they supposed to understand the implications.",
        "createdAt" : "2020-04-22T16:56:45Z",
        "updatedAt" : "2020-04-27T20:37:42Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "185ea518a2b61c43eb373b611650bcf599b2e5ee",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +486,490 @@    override val name = \"Forwarded\"\n    override def parse(value: String) = Try(new Forwarded(value))\n    private val re = raw\"\"\"(?i)proto\\s*=\\s*\"?(https?)\"\"\".r\n  }\n}"
  }
]