[
  {
    "id" : "70fd4082-ebaa-4608-80c2-9805937e92db",
    "prId" : 9618,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b62e7736-c8e2-47e1-8c5e-7f6fd6e0f1fe",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Should parties and template identifiers be part of the logging context, rather than logged in the message? Putting the query parameters could also be reasonable but a bit challenging, because the logging context right now doesn't allow to nest objects.",
        "createdAt" : "2021-05-10T13:25:53Z",
        "updatedAt" : "2021-05-11T13:49:12Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "1d990e6a-11a5-4a02-babb-acf20376a6de",
        "parentId" : "b62e7736-c8e2-47e1-8c5e-7f6fd6e0f1fe",
        "authorId" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "body" : "Well this one was kind of a suggestion what could be logged additionally.",
        "createdAt" : "2021-05-10T14:26:45Z",
        "updatedAt" : "2021-05-11T13:49:12Z",
        "lastEditedBy" : "c4645a69-f802-4b1d-b965-7b5142892664",
        "tags" : [
        ]
      },
      {
        "id" : "9f54f264-e5c0-4372-9909-087fe844f282",
        "parentId" : "b62e7736-c8e2-47e1-8c5e-7f6fd6e0f1fe",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Including parties (for the requests that have them) in the context seems very sensible but I’m fine with leaving that for a separate PR.",
        "createdAt" : "2021-05-10T15:47:43Z",
        "updatedAt" : "2021-05-11T13:49:12Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a36f30ccd6e3be16bc1676dea4cd7c3dbe9e453",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +346,350 @@    logger.debug(\n      s\"Searching in memory, parties: $parties, templateIds: $templateIds, queryParms: $queryParams\"\n    )\n\n    type Ac = domain.ActiveContract[LfValue]"
  },
  {
    "id" : "a14f6334-a733-4149-9080-048a1d9ebfda",
    "prId" : 7993,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71cb12a5-c8c9-46e2-98ee-02a845901fb6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This didn’t change in this PR but why are we representing queries as `Map[String, JsValue]`. This seems like we are encoding the fact that the first layer is a record? Is that useful given that we lose all structure on the levels below and therefore have to deal with incorrectly typed queries anyway?",
        "createdAt" : "2020-11-30T14:31:14Z",
        "updatedAt" : "2020-11-30T17:41:43Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f1d914e3-709b-4c40-b69d-d320f068af45",
        "parentId" : "71cb12a5-c8c9-46e2-98ee-02a845901fb6",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "It's been a while, but as I vaguely recall, certain invariants are easier to enforce if you type this fact. And all else being equal I'm loath to give up a carefully typed premise.",
        "createdAt" : "2020-11-30T17:23:38Z",
        "updatedAt" : "2020-11-30T17:41:43Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "f25767003fe64e3f0817fa0ad97cda795248da19",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +161,165 @@    override def search(ctx: SearchContext[Set, Id], queryParams: Map[String, JsValue]) = {\n      import ctx.{jwt, parties, templateIds}\n      searchInMemory(jwt, parties, templateIds, InMemoryQuery.Params(queryParams))\n    }\n  }"
  },
  {
    "id" : "c3b2a788-7b20-48eb-a0e8-e388d8665011",
    "prId" : 4800,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2bae19a-0ac8-405f-8dd5-54f1927e52f6",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n          funPredicates.get(ac.templateId).exists(_(ac.payload))\r\n```",
        "createdAt" : "2020-03-03T22:13:58Z",
        "updatedAt" : "2020-03-03T22:13:58Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "75c53b22a7d154693d1cae438f10e0920ce2e8e1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +251,255 @@        }\n        val convertedInserts = converted.inserts filter { ac =>\n          funPredicates.get(ac.templateId).cata(f => f(ac.payload), false)\n        }\n        (errors, converted.copy(inserts = convertedInserts))"
  },
  {
    "id" : "d87a833f-353b-46d6-a151-d6a3976d8f28",
    "prId" : 4312,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8c1998-9fa2-4169-923c-104daf68aea3",
        "parentId" : null,
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "just curious why polymorphic type here? There is only one type that satisfies the upper bound of: \r\n```\r\nTid <: domain.TemplateId.OptionalPkg\r\n```",
        "createdAt" : "2020-01-30T21:05:10Z",
        "updatedAt" : "2020-01-30T21:11:56Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "cbe0382f-b4cb-43e1-b58e-3a3c933bb44f",
        "parentId" : "ca8c1998-9fa2-4169-923c-104daf68aea3",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Just making the type a little more self-documenting; every element in the right set must be an element from the argument set, arbitrary constructed `TemplateId.OptionalPkg`s won't type-check.",
        "createdAt" : "2020-01-30T21:06:26Z",
        "updatedAt" : "2020-01-30T21:06:26Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "78599c17af9a135b4807e32f1657f935a368ec00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +323,327 @@      Error('lfValueToJsValue, e.description))\n\n  private[http] def resolveTemplateIds[Tid <: domain.TemplateId.OptionalPkg](\n      xs: Set[Tid],\n  ): (Set[domain.TemplateId.RequiredPkg], Set[Tid]) = {"
  }
]