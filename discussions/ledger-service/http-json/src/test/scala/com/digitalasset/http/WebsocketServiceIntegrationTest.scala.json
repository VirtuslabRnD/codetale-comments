[
  {
    "id" : "141db482-6df4-4c18-b4f4-889a07e84904",
    "prId" : 5879,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d034e7ab-1efb-47c2-a3a6-75062a884562",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "As @leo-da [has noted in the past](https://github.com/digital-asset/daml/pull/5318#discussion_r401121113), `GeneratorDrivenPropertyChecks` and `Async*Spec` do not play well together. I would like to do something better than \"just take one sample and test it\", though.",
        "createdAt" : "2020-05-12T22:02:00Z",
        "updatedAt" : "2020-05-13T17:47:31Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +526,530 @@  \"query on a bunch of random splits should yield consistent results\" ignore withHttpService {\n    (uri, _, _) =>\n      val splitSample = SplitSeq.gen.map(_ map (BigDecimal(_))).sample.get\n      val query =\n        \"\"\"["
  },
  {
    "id" : "487c2349-a05e-427b-aae5-bb04be0be34b",
    "prId" : 5879,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72762aec-778d-4846-85aa-03058c757e2e",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "#5969 ",
        "createdAt" : "2020-05-13T18:14:24Z",
        "updatedAt" : "2020-05-13T18:14:24Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e9a6d756e4e1c4e1ad2c49edf0b9b35b7203a4f",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +523,527 @@  }\n\n  // TODO SC enable after tracking down dupes\n  \"query on a bunch of random splits should yield consistent results\" ignore withHttpService {\n    (uri, _, _) =>"
  },
  {
    "id" : "247aa9b6-25b3-4059-a938-2d992cd6c20f",
    "prId" : 5318,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcc88db9-2ba5-4c48-907c-83733916194d",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Use `TableDrivenPropertyChecks` and `forEvery` for this kind of testing setup. That will still discriminate successful and failing cases without having to interpolate test names.",
        "createdAt" : "2020-03-31T17:34:24Z",
        "updatedAt" : "2020-03-31T17:58:45Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "c12c8b4c-bad7-434f-b4fe-f5e802a39cad",
        "parentId" : "bcc88db9-2ba5-4c48-907c-83733916194d",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "`TableDrivenPropertyChecks` and `GeneratorDrivenPropertyChecks` do not work with `AsyncFreeSpec`\r\n```\r\n found   : Unit\r\n required: scala.concurrent.Future[org.scalatest.compatible.Assertion]\r\n```",
        "createdAt" : "2020-03-31T18:22:21Z",
        "updatedAt" : "2020-03-31T18:22:21Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      },
      {
        "id" : "89861080-751d-4d49-a71b-8994475e6fc7",
        "parentId" : "bcc88db9-2ba5-4c48-907c-83733916194d",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "Oh well.",
        "createdAt" : "2020-03-31T18:23:32Z",
        "updatedAt" : "2020-03-31T18:23:32Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "3fa7c587-8c7f-41ca-b91e-7f1d058bcd3d",
        "parentId" : "bcc88db9-2ba5-4c48-907c-83733916194d",
        "authorId" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "body" : "yeah, it is either `AsyncFreeSpec` or `org.scalatest.concurrent.Futures#whenReady` at the end of every test scenario.",
        "createdAt" : "2020-03-31T18:28:42Z",
        "updatedAt" : "2020-03-31T18:28:42Z",
        "lastEditedBy" : "9da357e5-66f5-424f-b28c-d68ddac2a372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0bd1e6c6633281ac328abbfbfb725b280a3b63",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +116,120 @@      Uri.Path(\"/v1/stream/fetch\"),\n      Source.single(TextMessage.Strict(\"\"\"[{\"templateId\": \"AA:BB\", \"key\": [\"k\", \"v\"]}]\"\"\")))\n  ).foreach { scenario =>\n    s\"${scenario.id} report UnknownTemplateIds and error when cannot resolve any template ID\" in withHttpService {\n      (uri, _, _) =>"
  }
]