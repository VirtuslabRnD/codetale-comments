[
  {
    "id" : "3563b308-7ea4-4f39-9e8a-78cf09507eb6",
    "prId" : 267,
    "prUrl" : "https://github.com/zio/zio/pull/267#pullrequestreview-180313959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65bb372a-713d-47f2-a731-9af209d56d87",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This looks really nice now. 👍 ",
        "createdAt" : "2018-11-30T15:25:44Z",
        "updatedAt" : "2018-12-03T08:47:37Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fe5fae4e1d47b127154528e5564ec3a4b73dd78",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +91,95 @@    fb: Task[B]\n  ): Task[Either[(A, effect.Fiber[Task, B]), (effect.Fiber[Task, A], B)]] =\n    (fa raceWith fb)(\n      { case (l, f) => l.fold(f.interrupt *> IO.fail0(_), IO.now).map(lv => Left((lv, toFiber(f)))) },\n      { case (r, f) => r.fold(f.interrupt *> IO.fail0(_), IO.now).map(rv => Right((toFiber(f), rv))) }"
  },
  {
    "id" : "e5770a13-d75a-4d5f-9c63-5abcea3d01cf",
    "prId" : 267,
    "prUrl" : "https://github.com/zio/zio/pull/267#pullrequestreview-180538059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d3ca0ee-b0ad-4776-994e-5393d5b8074a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This makes sense. Another option would be if there's no checked errors, peeling off the first unchecked error. Not sure it matters much, though.",
        "createdAt" : "2018-11-30T15:27:24Z",
        "updatedAt" : "2018-12-03T08:47:37Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "261965cb-a26d-4cd1-ac87-1cc38dcf2e49",
        "parentId" : "5d3ca0ee-b0ad-4776-994e-5393d5b8074a",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Matters for existing code that's catching a specific throwable (e.g. doobie). It's hard to decide what would be best here, as on one hand existing code would have no way of dealing with synthetic exceptions from combined Fibers, but OTOH we want to preserve as much information about errors as possible.",
        "createdAt" : "2018-12-01T20:57:37Z",
        "updatedAt" : "2018-12-03T08:47:37Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fe5fae4e1d47b127154528e5564ec3a4b73dd78",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +99,103 @@private class CatsEffect extends CatsMonadError[Throwable] with Effect[Task] with CatsSemigroupK[Throwable] with RTS {\n  @inline final protected def exitResultToEither[A](e: ExitResult[Throwable, A]): Either[Throwable, A] =\n    e.fold(_.checked[Throwable] match {\n      case t :: Nil => Left(t)\n      case _        => e.toEither"
  },
  {
    "id" : "04ef21fe-b3a1-43fe-899d-7204b30a1a64",
    "prId" : 267,
    "prUrl" : "https://github.com/zio/zio/pull/267#pullrequestreview-180538126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e9be113-eb1e-48ef-a6a3-b3e2c2f94f51",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "`io.catchAll(IO.terminate)` is so common we could do a method to implement that pattern: `io.orDie: IO[Nothing, A]`. This way we could make it zero cost. I'll open a ticket if you like the idea.",
        "createdAt" : "2018-11-30T15:30:11Z",
        "updatedAt" : "2018-12-03T08:47:37Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "ecf612a7-ec18-4443-af11-003e706dde1a",
        "parentId" : "8e9be113-eb1e-48ef-a6a3-b3e2c2f94f51",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "I like the idea! I've had multiple questions wrt 'how do I make IO[Nothing, ?] from IO[Throwable, ?]'. I think the name might benefit from being long and explicit, e.g. `io.dieOnThrowable`",
        "createdAt" : "2018-12-01T21:00:01Z",
        "updatedAt" : "2018-12-03T08:47:37Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fe5fae4e1d47b127154528e5564ec3a4b73dd78",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +156,160 @@    release: A => Task[Unit]\n  ): Task[B] =\n    IO.bracket(acquire)(release(_).catchAll(IO.terminate))(use)\n\n  override def bracketCase[A, B]("
  }
]