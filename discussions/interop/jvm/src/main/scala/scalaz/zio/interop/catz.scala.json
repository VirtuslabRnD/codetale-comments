[
  {
    "id" : "f1fadbc4-75cc-46df-a20d-ac4a946122be",
    "prId" : 247,
    "prUrl" : "https://github.com/zio/zio/pull/247#pullrequestreview-159894968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dd908f0-e90f-499c-b000-a4c54c9b8da5",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Oops, do we really want this in here? Seems like it would be better in `tut` docs.",
        "createdAt" : "2018-09-28T14:51:28Z",
        "updatedAt" : "2018-09-28T14:51:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "0144b14c8409613bc399148124feb374b8603c23",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +132,136 @@import scalaz.zio._\n\nobject App extends App {\n  // print + 1000 empty flatMaps\n  def worker(i: Int) ="
  },
  {
    "id" : "9c20e8a0-2388-4ca8-8b15-082d9c8b0d1c",
    "prId" : 58,
    "prUrl" : "https://github.com/zio/zio/pull/58#pullrequestreview-132300482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d16b1f-e23c-4082-b0c8-b3df37424055",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Is it possible to do anything more than `Effect`? e.g. `Concurrent`, etc.",
        "createdAt" : "2018-06-25T11:08:24Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9633e155-594d-4a87-bd72-3ac04464e628",
        "parentId" : "71d16b1f-e23c-4082-b0c8-b3df37424055",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Didn't try, just ported it from ioeffect. Will give it a go later and see how far I get. But i think there may be a difference in semantics that makes it hard or even impossible to implement as per cats-effect 0.10",
        "createdAt" : "2018-06-25T12:28:45Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "d12d211f-7dd9-4556-ad4c-8a5b606d8f7e",
        "parentId" : "71d16b1f-e23c-4082-b0c8-b3df37424055",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Hey @jdegoes this PR is taking quite long, what do you think if we merge it and I work on the remaining stuff in followup (smaller) PRs? I think it is in pretty good shape already, it has more functionality that the one provided by `ioeffect` and it's got way more tests.\r\nI can create separate issues for the rest of the tasks such as add docs and implement `Concurrent` (what I already started)",
        "createdAt" : "2018-06-27T06:38:04Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b2d2321de350504db2ed7d1dabe52c380c502b8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@object catz extends RTS {\n\n  implicit val catsEffectInstance: Effect[Task] = new Effect[Task] {\n    def runAsync[A](\n      fa: Task[A]"
  },
  {
    "id" : "19f53848-d382-408b-ba13-c329b28352f9",
    "prId" : 58,
    "prUrl" : "https://github.com/zio/zio/pull/58#pullrequestreview-131667662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eca0625-9c94-4a6c-abe5-cef3f7f19ff4",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I wonder about extending `RTS` here.... it means users have no control over the thread pool, etc. Maybe that's OK for now. It certainly provides the \"easiest\" experience, albeit at the cost of more surprises later.",
        "createdAt" : "2018-06-25T11:09:36Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "78afd083-8b58-4127-8508-b9a20d110af1",
        "parentId" : "4eca0625-9c94-4a6c-abe5-cef3f7f19ff4",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "I think the other option is to somehow give the instance access to it but that would involve making it implicit maybe, not that sexy either.\r\n\r\nBTW I love the design decision of not attaching the ability to evaluate itself to the IO values, I tried to do something really nasty (for debugging purpose in a test), evaluate the IO in a totally wrong place to print its value and I couldn't because of the separation. :smile: ",
        "createdAt" : "2018-06-25T12:34:06Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "e0c585c0-3a7c-4bca-98cf-15a26e1a0d85",
        "parentId" : "4eca0625-9c94-4a6c-abe5-cef3f7f19ff4",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "This is kinda related to another question i wanted to ask you. How do you plan supporting something like `shift`? do you think it is a valid feature to have? For something like jdbc queries vs http requests, they have different characteristics given one is blocking and the other is not but they might be part of a group of composed IOs which should run in different thread pools. WDYT?",
        "createdAt" : "2018-06-25T12:45:15Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "91910358-5f82-44ce-a507-39932715dbf8",
        "parentId" : "4eca0625-9c94-4a6c-abe5-cef3f7f19ff4",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "`shift` can be implemented now via `async`, it's a few lines of code and I've written it before many times to show people, but refuse to do it again. ðŸ˜† \r\n\r\nUltimately composable RTS is the better way to solve it. This will likely involve NOT a `shift`-like design, which is horrible and dysfunctional, but a `forkOn` design.",
        "createdAt" : "2018-06-25T15:43:05Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b2d2321de350504db2ed7d1dabe52c380c502b8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@import scala.util.control.NonFatal\n\nobject catz extends RTS {\n\n  implicit val catsEffectInstance: Effect[Task] = new Effect[Task] {"
  },
  {
    "id" : "db2bda49-2ad0-4d6e-8692-64abea736702",
    "prId" : 58,
    "prUrl" : "https://github.com/zio/zio/pull/58#pullrequestreview-131561495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f7e9b33-297b-4563-a923-fd881acc16b8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "ðŸ˜† ",
        "createdAt" : "2018-06-25T11:10:53Z",
        "updatedAt" : "2018-06-27T06:41:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b2d2321de350504db2ed7d1dabe52c380c502b8",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\n    //LOL monad \"law\"\n    def tailRecM[A, B](a: A)(f: A => Task[Either[A, B]]): Task[B] =\n      f(a).flatMap {\n        case Left(l)  => tailRecM(l)(f)"
  }
]