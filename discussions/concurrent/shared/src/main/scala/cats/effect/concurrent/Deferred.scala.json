[
  {
    "id" : "cf1005b9-d5a8-4b48-a43d-4ef760a2662b",
    "prId" : 1128,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1128#pullrequestreview-474572526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "I just noticed, but for `IO` the `start` is unnecessary since `next(a)` will always internally shift, but we can't rely on that fact in general :( ",
        "createdAt" : "2020-08-24T18:23:43Z",
        "updatedAt" : "2020-08-24T21:00:41Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "1931a507-5881-4018-a0d5-9f1cb59d0e2a",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Isn't `next` an `async` callback? If so, we can rely on internal shifting. It's in the laws, albeit indirectly.",
        "createdAt" : "2020-08-25T00:29:06Z",
        "updatedAt" : "2020-08-25T00:29:28Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "75ee296f-3c81-4107-8b52-5a7db23cd640",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Yeah `next` is an `async` callback, which law captures internal shifting?",
        "createdAt" : "2020-08-25T00:53:42Z",
        "updatedAt" : "2020-08-25T00:53:43Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "c75092ca-d060-4303-9855-8349e68b24ee",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "https://github.com/typelevel/cats-effect/blob/series/3.x/laws/shared/src/main/scala/cats/effect/laws/AsyncLaws.scala#L47-L48",
        "createdAt" : "2020-08-25T01:18:04Z",
        "updatedAt" : "2020-08-25T01:18:04Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "f94f4efe-0351-48b3-9da0-e268f2721858",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "ohh, that's pretty clever!",
        "createdAt" : "2020-08-25T02:19:24Z",
        "updatedAt" : "2020-08-25T02:19:24Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "54d27b98-c658-4cf7-a0a6-493bdb1d9a02",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "is that settled then, can I remove `start`? although I have to admit I'm having some trouble seeing how that law implies internal shifting (early morning for me)",
        "createdAt" : "2020-08-25T08:35:41Z",
        "updatedAt" : "2020-08-25T08:35:42Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "8ef25b49-0020-4597-adf9-67c6e9622f57",
        "parentId" : "66907c08-68cd-4075-8dc3-8fb2630c6da6",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "@SystemFw What we *don't* do is tie the `executionContext` to `delay`, which is undecidable in general. However, the commutativity does guarantee that `F.executionContext` returns a consistent value regardless of what happens before or after it, and can only be affected by what is *around* it (i.e. `evalOn`). If we assume that `executionContext` represents the executor *actually* in use (which we have to assume; we can't generally assert it), then the commutativity law forces internal shifting if we instantiate `fa` with something which contains `async`.",
        "createdAt" : "2020-08-25T15:01:58Z",
        "updatedAt" : "2020-08-25T15:01:58Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8d5771dde06973262d20f741a3d148177943e43",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +213,217 @@        while (cursor.hasNext) {\n          val next = cursor.next()\n          val task = F.map(F.start(F.delay(next(a))))(mapUnit)\n          acc = F.flatMap(acc)(_ => task)\n        }"
  }
]