[
  {
    "id" : "728e991b-6b77-43e2-9302-08d0faef1ea2",
    "prId" : 4759,
    "prUrl" : "https://github.com/apache/kafka/pull/4759#pullrequestreview-112128991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e351cf-1cc7-4ed3-a1db-cb81d0d415ce",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Why do we need the cast?",
        "createdAt" : "2018-04-12T21:27:56Z",
        "updatedAt" : "2018-04-13T22:44:03Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "ab655fed-9515-4dcd-af5b-1db8761602d2",
        "parentId" : "05e351cf-1cc7-4ed3-a1db-cb81d0d415ce",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Otherwise you get the warning:\r\n```\r\nwarning: non-varargs call of varargs method with inexact argument type for last parameter\r\n```\r\nThe issue is that there are multiple interpretations of what an array there could mean: pass a single parameter which is an array, or pass the contents of the array as parameters.",
        "createdAt" : "2018-04-13T19:14:11Z",
        "updatedAt" : "2018-04-13T22:44:03Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a1c01bb974b8f155c94c1149c554ed95bf6cf94",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +141,145 @@    public TasksResponse tasks(TasksRequest request) throws Exception {\n        UriBuilder uriBuilder = UriBuilder.fromPath(url(\"/coordinator/tasks\"));\n        uriBuilder.queryParam(\"taskId\", (Object[]) request.taskIds().toArray(new String[0]));\n        uriBuilder.queryParam(\"firstStartMs\", request.firstStartMs());\n        uriBuilder.queryParam(\"lastStartMs\", request.lastStartMs());"
  },
  {
    "id" : "ff9e5ae1-f1b8-4beb-825c-a4df391fd62c",
    "prId" : 6133,
    "prUrl" : "https://github.com/apache/kafka/pull/6133#pullrequestreview-192913381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc31d798-7063-444e-b907-b7cbaaabb567",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Will this work with multiple task ids? The `tasks()` code does this:\r\n```\r\n        uriBuilder.queryParam(\"taskId\", (Object[]) request.taskIds().toArray(new String[0]));\r\n```\r\nI think that returns a single-element array only?",
        "createdAt" : "2019-01-14T12:06:02Z",
        "updatedAt" : "2019-01-18T22:11:26Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "212cce42-a7a0-4381-a2c1-c7faf28ae8a4",
        "parentId" : "cc31d798-7063-444e-b907-b7cbaaabb567",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "`List#toArray` can return arrays with more than one element.\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/util/List.html#toArray-T:A-\r\n\r\nThe array argument at the end is a little weird.  TL;DR is that if you want to squeeze out some extra efficiency, you can pass something other than a zero-length array to that argument, to avoid object allocation.",
        "createdAt" : "2019-01-15T23:25:14Z",
        "updatedAt" : "2019-01-18T22:11:26Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "79faa3ad9e3e56e76643b08e2df267e00889990f",
    "line" : 337,
    "diffHunk" : "@@ -1,1 +402,406 @@                TasksRequest req = new TasksRequest(taskIds, 0, 0, 0, 0,\n                    Optional.ofNullable(taskStateType));\n                TasksResponse response = client.tasks(req);\n                if (taskIdPattern != null) {\n                    TreeMap<String, TaskState> filteredTasks = new TreeMap<>();"
  },
  {
    "id" : "c66dcaa9-847f-4901-9311-ab6cd7977123",
    "prId" : 6133,
    "prUrl" : "https://github.com/apache/kafka/pull/6133#pullrequestreview-192914210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02b7ba89-d6ca-4195-9aaf-81aa2badf7d8",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "This is great functionality but would it be better if we had it in the coordinator server in order to leverage it from REST API clients in other languages? Otherwise we probably need to duplicate logic.\r\n We could maybe open a JIRA to track this as a separate item",
        "createdAt" : "2019-01-14T12:06:11Z",
        "updatedAt" : "2019-01-18T22:11:26Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "dcffc2ac-206c-4de7-956b-d12b422b1d87",
        "parentId" : "02b7ba89-d6ca-4195-9aaf-81aa2badf7d8",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "We've been holding off on including regular expressions into APIs since we would like APIs to be language neutral, and Java regexps are not.  They also change over time as Java changes (java 8 changed how some of them are interpreted).\r\n\r\nI think we could open a follow-up JIRA for this, though.  We can use re2 regular expressions to make the API language-neutral.",
        "createdAt" : "2019-01-15T23:28:07Z",
        "updatedAt" : "2019-01-18T22:11:26Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "79faa3ad9e3e56e76643b08e2df267e00889990f",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +406,410 @@                    TreeMap<String, TaskState> filteredTasks = new TreeMap<>();\n                    for (Map.Entry<String, TaskState> entry : response.tasks().entrySet()) {\n                        if (taskIdPattern.matcher(entry.getKey()).matches()) {\n                            filteredTasks.put(entry.getKey(), entry.getValue());\n                        }"
  }
]