[
  {
    "id" : "e39bc9ee-bda3-4073-8eaa-a107d5091b96",
    "prId" : 5864,
    "prUrl" : "https://github.com/apache/kafka/pull/5864#pullrequestreview-171728526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8184efb-5f90-4433-99aa-95f419124974",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "This raises an `InterruptException` and I can't figure out why. Is there something obvious that I'm missing?\r\n```\r\n[2018-11-05 17:47:05,859] WARN ConsumeRecords caught an exception:  (org.apache.kafka.trogdor.workload.ConsumeBenchWorker)\r\norg.apache.kafka.common.errors.InterruptException: java.lang.InterruptedException\r\n\tat org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.maybeThrowInterruptException(ConsumerNetworkClient.java:493)\r\n\tat org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:281)\r\n\tat org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:236)\r\n\tat org.apache.kafka.clients.consumer.KafkaConsumer.pollForFetches(KafkaConsumer.java:1243)\r\n\tat org.apache.kafka.clients.consumer.KafkaConsumer.poll(KafkaConsumer.java:1188)\r\n\tat org.apache.kafka.clients.consumer.KafkaConsumer.poll(KafkaConsumer.java:1164)\r\n\tat org.apache.kafka.trogdor.workload.ConsumeBenchWorker$Consumer.poll(ConsumeBenchWorker.java:503)\r\n\tat org.apache.kafka.trogdor.workload.ConsumeBenchWorker$ConsumeMessages.call(ConsumeBenchWorker.java:243)\r\n\tat org.apache.kafka.trogdor.workload.ConsumeBenchWorker$ConsumeMessages.call(ConsumeBenchWorker.java:198)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\n\tat java.base/java.lang.Thread.run(Thread.java:844)\r\nCaused by: java.lang.InterruptedException\r\n\t... 14 more\r\n```",
        "createdAt" : "2018-11-05T17:57:04Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "484683fe-49ff-426d-a0ee-56e55a12c13d",
        "parentId" : "b8184efb-5f90-4433-99aa-95f419124974",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Most likely something somewhere else failed, and your thread was sent the interrupt exception as part of tearing down the worker.",
        "createdAt" : "2018-11-05T19:27:20Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "f6b9175a-9ca6-4919-8286-ed98d04452d5",
        "parentId" : "b8184efb-5f90-4433-99aa-95f419124974",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "I am not sure about the cause of this since I haven't been able to reproduce it since. I had changed the parameters in `trogdor-run-consume-bench.sh`. Might have been something to do with old consumer group state after having re-ran it a couple of times",
        "createdAt" : "2018-11-05T19:47:58Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "119fec452fb4136c36248cc5848eefb9e023e1cb",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +237,241 @@            try {\n                while (messagesConsumed < maxMessages) {\n                    ConsumerRecords<byte[], byte[]> records = consumer.poll();\n                    if (records.isEmpty()) {\n                        continue;"
  },
  {
    "id" : "d2ace973-5b6e-4bd5-8571-a4e3ae2981e5",
    "prId" : 5864,
    "prUrl" : "https://github.com/apache/kafka/pull/5864#pullrequestreview-172144836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "767071ba-cbe8-402b-9bee-6a7bded5b6df",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Why is this needed?  The loop condition is the same.",
        "createdAt" : "2018-11-06T16:45:50Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "8c3cd908-848e-4b37-bbae-a72836fc71bd",
        "parentId" : "767071ba-cbe8-402b-9bee-6a7bded5b6df",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "The default `max.poll.records` is 500. This would result in the consumer always consuming 500 at a minimum (provided the topic had the records) and not respect the cases where `maxMessages` was less than that",
        "createdAt" : "2018-11-06T17:41:21Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "119fec452fb4136c36248cc5848eefb9e023e1cb",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +255,259 @@                        messageSizeHistogram.add(messageBytes);\n                        bytesConsumed += messageBytes;\n                        if (messagesConsumed >= maxMessages)\n                            break;\n"
  },
  {
    "id" : "ec8cc08e-42dd-4a94-94fb-f861613040fc",
    "prId" : 5864,
    "prUrl" : "https://github.com/apache/kafka/pull/5864#pullrequestreview-172146442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84d2f4b-98f3-4dd3-8d7c-222d84df2913",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "This is not needed.  Only one thread at a time should be accessing the consumer.",
        "createdAt" : "2018-11-06T16:49:51Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "ef98ec0c-fc34-4806-b206-53607b10dad1",
        "parentId" : "a84d2f4b-98f3-4dd3-8d7c-222d84df2913",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "The `ConsumeStatusUpdater`  calls `KafkaConsumer#assignment()` dynamically to get the latest assignments for a consumer.\r\nMy reasoning was that there might be edge cases where these assignments change during a benchmark run (e.g one consumer finishes early, starts late, etc).\r\nThat might not be needed in practice, though. WDYT?",
        "createdAt" : "2018-11-06T17:44:54Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "119fec452fb4136c36248cc5848eefb9e023e1cb",
    "line" : 401,
    "diffHunk" : "@@ -1,1 +462,466 @@     * A thread-safe KafkaConsumer wrapper\n     */\n    private static class ThreadSafeConsumer {\n        private final KafkaConsumer<byte[], byte[]> consumer;\n        private final String clientId;"
  },
  {
    "id" : "cb13a0be-da06-4181-8993-c1035ea0e637",
    "prId" : 5864,
    "prUrl" : "https://github.com/apache/kafka/pull/5864#pullrequestreview-172146803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ebf0aa2-160d-44ad-ab41-64451d05bede",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "50 ms is way too short for a poll interval.  We don't want to use up so much CPU.  If there's nothing to consume it should wait for at least a minute.",
        "createdAt" : "2018-11-06T16:50:17Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "c6d97b90-a5cb-4ffb-b2e3-3cf431e3ec4d",
        "parentId" : "7ebf0aa2-160d-44ad-ab41-64451d05bede",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "That's how it before but good point. If we remove the lock we should go with this",
        "createdAt" : "2018-11-06T17:45:37Z",
        "updatedAt" : "2018-11-12T10:51:44Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "119fec452fb4136c36248cc5848eefb9e023e1cb",
    "line" : 416,
    "diffHunk" : "@@ -1,1 +477,481 @@            this.consumerLock.lock();\n            try {\n                return consumer.poll(Duration.ofMillis(50));\n            } finally {\n                this.consumerLock.unlock();"
  }
]