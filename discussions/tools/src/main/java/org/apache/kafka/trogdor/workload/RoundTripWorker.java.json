[
  {
    "id" : "49783f58-fe83-4aed-a84f-cc0e8c68b395",
    "prId" : 4710,
    "prUrl" : "https://github.com/apache/kafka/pull/4710#pullrequestreview-104329644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c448215-2e2f-4b1f-9e6c-83054e98d0b5",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Out of curiosity, why is the key generator not part of the spec also?\r\n\r\nBy the way, it would be nice to have some high-level javadocs for this class. I am not sure what a \"round-trip\" worker is supposed to do.",
        "createdAt" : "2018-03-15T01:20:31Z",
        "updatedAt" : "2018-03-16T18:31:35Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "518ae14b-ca09-4fe2-92e4-16ab6f602bbd",
        "parentId" : "7c448215-2e2f-4b1f-9e6c-83054e98d0b5",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Good question.  The reason why the key generator can't be configurable here is that RoundTripWorkload relies on the keys being sequential integers.  It uses this to ensure that it's gotten every message that was sent.  This wouldn't work with, say, ConstantGenerator (just to pick one example) since all the keys generated would be the same in that case.\r\n\r\nWe could potentially have a more sophisticated way of doing this that relied on a secondary interface.  So we could have `interface ReversableGenerator extends Generator`, and adds a function `long findPosition(byte[] value)`.  Then generators that allowed you to figure out the index from the payload (like sequential generator, and maybe some others) would implement ReversableGenerator, and ConstantGenerator, RandomGenerator, etc. would not.  This seems like overkill for now, though.\r\n\r\nWith regard to JavaDocs about RoundTripWorker: I agree.  I'll add it to the TODO",
        "createdAt" : "2018-03-15T18:35:59Z",
        "updatedAt" : "2018-03-16T18:31:35Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2c83e665766a3ed7f27b0e7a198de6e435c781",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +210,214 @@                    // we explicitly specify generator position based on message index\n                    ProducerRecord<byte[], byte[]> record = new ProducerRecord(TOPIC_NAME, 0,\n                        KEY_GENERATOR.generate(messageIndex),\n                        spec.valueGenerator().generate(messageIndex));\n                    producer.send(record, new Callback() {"
  },
  {
    "id" : "026266b9-d39b-41de-9fbd-f5621009ae21",
    "prId" : 4710,
    "prUrl" : "https://github.com/apache/kafka/pull/4710#pullrequestreview-104673724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b942c91-7d8b-4ea8-b958-0e2689d21f53",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Was this the fix for the failing tests? The JIRA mentions this: \"Currently RoundTripWorkload is unable to get the sequence number of the keys that it produced.\" I'm having some trouble understanding how that description is mapping to the patch.",
        "createdAt" : "2018-03-16T16:47:54Z",
        "updatedAt" : "2018-03-16T18:31:35Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "c19218ec-44d0-4b6b-9491-9542fc5d8162",
        "parentId" : "7b942c91-7d8b-4ea8-b958-0e2689d21f53",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "The previous code was using 8-byte sequence numbers rather than 4, so the fix would have been a little different to try to work with that generator.  However, the previous code wasn't able to properly change position back to an older position and get the same value as last time, which was also a problem in some contexts (although maybe not this one)",
        "createdAt" : "2018-03-16T18:28:10Z",
        "updatedAt" : "2018-03-16T18:31:35Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2c83e665766a3ed7f27b0e7a198de6e435c781",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +291,295 @@                        ConsumerRecords<byte[], byte[]> records = consumer.poll(50);\n                        for (ConsumerRecord<byte[], byte[]> record : records.records(TOPIC_NAME)) {\n                            int messageIndex = ByteBuffer.wrap(record.key()).order(ByteOrder.LITTLE_ENDIAN).getInt();\n                            messagesReceived++;\n                            if (toReceiveTracker.removePending(messageIndex)) {"
  }
]