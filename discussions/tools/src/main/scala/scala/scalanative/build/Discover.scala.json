[
  {
    "id" : "85ba2f85-1817-47d7-8892-d08e9dd7a0cf",
    "prId" : 1316,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1316#pullrequestreview-212945017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b039cdf1-1f25-4254-b8da-41d4408352d6",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "If you want to support `clang8` and `clang-8` being discovered, you should add more potential binary names here instead of dropping support for `clang-8.0` which is for example used on ubuntu. ",
        "createdAt" : "2019-03-11T12:08:17Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "d2cb8322-0853-42ce-a167-f9050817d81a",
        "parentId" : "b039cdf1-1f25-4254-b8da-41d4408352d6",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "I believe that with the change to the clangVersions data structure in the latest commit\r\nany of clangN, clang-N, or clang-N.0 will be found, if extant, by the code you highlighted , where N  either 7 or 8.\r\n\r\nTo my eyes, changing the data structure makes the intent of supporting/testing both  \"\" and \"0\" as minor\r\nversions clearer than hiding some tricky manipulation in a line of code.\r\n\r\nIf you like, I can revert the current commit and handle the complexities in the line you indicated.",
        "createdAt" : "2019-03-11T16:25:23Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "fc53a6dd-6278-4801-a02e-cd70f006b32a",
        "parentId" : "b039cdf1-1f25-4254-b8da-41d4408352d6",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "It doesn't hurt to support more potential names here. After all this is auto discovery implementation, it should do its best effort at finding a clang binary name. ",
        "createdAt" : "2019-03-11T16:29:26Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "e23ce511ce9193ab09837938c13c8ee222f724b7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +164,168 @@          case (major, minor) =>\n            val sep = if (minor == \"\") \"\" else \".\"\n            Seq(s\"$binaryName$major$minor\", s\"$binaryName-$major${sep}$minor\")\n        } :+ binaryName\n"
  },
  {
    "id" : "93b5cedd-188c-44c8-9594-81693679392c",
    "prId" : 1316,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1316#pullrequestreview-212939551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c39ac945-ee48-45cd-a088-420f3c7de12e",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "`(\"8\", \"0\")` and `(\"7\", \"0\")`.",
        "createdAt" : "2019-03-11T12:08:39Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "a70e5e84-3ebe-4787-aa11-ceeaf74c3caf",
        "parentId" : "c39ac945-ee48-45cd-a088-420f3c7de12e",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Done (\"8\", \"0\") and (\"7\", \"0\") added to previous variant with empty string second member of tuple.\r\nBelts & suspenders engineering which does not affect binary size of end user images.\r\n\r\nRe-tested with clang-7 (test-all) and passed.  \r\n\r\nClang-8 just went to rc5. I am glad they are taking the time to remove some nasty bugs\r\nbut that makes it slide another week. I do not foresee problems with clang-8 but will\r\ninstall it and run test-all in both debug & release modes. ",
        "createdAt" : "2019-03-11T16:09:46Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "365ce345-dfbe-4c3b-8e5c-b8458092b6da",
        "parentId" : "c39ac945-ee48-45cd-a088-420f3c7de12e",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Yes, the clangVersions data structure is getting large, particularly now that there are two entries per\r\nclang/llvm version.   I tried to be respectful of prior art.  \r\n\r\nDo you know the Swiss child psychologist Jean Piaget's accommodation/assimilation model of\r\nchild development?  Basically he describes a situation where changes to a child's mental\r\nschema pile up (accommodation) until the complexities force a re-organization (assimilation) or a\r\nsimpler schema is found.\r\n\r\nIf I were writing this section from a blank sheet of paper, I would probably just use the default `clang`\r\nverb. Much as I hate environmental variables, I would probably have a environment variables to\r\nset LLVM version and set clang, clang++, and anything else off of it, superceeding anything set up\r\nby llvm-config.  There are also a number of ways to set up alternatives in the OS.  \r\n\r\nThe existing 'add a version to clangVersions' works and fits available time, mine for development\r\nand yours for review, but  it should probably be changed for clang-9 or clang-10.  Other\r\nfish to fry (well, broil) now.",
        "createdAt" : "2019-03-11T16:20:22Z",
        "updatedAt" : "2019-03-11T16:30:21Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e23ce511ce9193ab09837938c13c8ee222f724b7",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +135,139 @@    Seq((\"8\", \"\"),\n        (\"8\", \"0\"),\n        (\"7\", \"\"),\n        (\"7\", \"0\"), // LLVM changed version numbering scheme, try both.\n        (\"6\", \"0\"),"
  }
]