[
  {
    "id" : "34e3e4cd-f4f7-4497-95a0-dc7c022baa7d",
    "prId" : 787,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/787#pullrequestreview-42244566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260edc0b-1ba9-464c-845e-d28bee8a919e",
        "parentId" : null,
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "@olafurpg That's an unexpected one. I'd expect for type annotation to stay on the same line. i.e.:\r\n```\r\nval Double: P[Double] = \r\n  neg(Infinity | Literals.Literals.Float.!) map (_.toDouble)\r\n```",
        "createdAt" : "2017-06-06T08:31:47Z",
        "updatedAt" : "2017-06-06T08:31:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "ef2126ee-b8bf-4a3b-ac8b-aca810a3da52",
        "parentId" : "260edc0b-1ba9-464c-845e-d28bee8a919e",
        "authorId" : "7cfb9c81-09fa-4bfa-bbb5-df5df4c4201d",
        "body" : "Hmmm ðŸ¤” the penalty for breaking before `:` is very high, but in this case it's not allowed to break after `=` because  `map` is an infix operator. It doesn't break on `=` when the rhs body is an infix expression because I hit on funky routing/akka DSLs where it clearly wasn't supposed to break after `=`. There is a rewrite http://scalameta.org/scalafmt/#AvoidInfix that converts misuse of infix into regular application, that should fix this particular case. \r\n\r\nIdeally, scalafmt should take way more control over infix operators, but I never managed to get it right for corner cases.",
        "createdAt" : "2017-06-06T08:45:01Z",
        "updatedAt" : "2017-06-06T08:45:01Z",
        "lastEditedBy" : "7cfb9c81-09fa-4bfa-bbb5-df5df4c4201d",
        "tags" : [
        ]
      }
    ],
    "commit" : "62faa29af80383102a7c0d781d2790a95eb5f6f2",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +76,80 @@    : P[Float] = neg(Infinity | Literals.Literals.Float.!) map (_.toFloat)\n  val Double\n    : P[Double] = neg(Infinity | Literals.Literals.Float.!) map (_.toDouble)\n  val stringLit: P[String] = P(Literals.Literals.NoInterp.String.! map {\n    _.init.tail"
  }
]