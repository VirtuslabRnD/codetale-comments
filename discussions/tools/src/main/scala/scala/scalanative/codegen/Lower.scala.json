[
  {
    "id" : "ebb861d7-0bde-4519-bd5a-b72730122faa",
    "prId" : 1894,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1894#pullrequestreview-504135213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2f08da1-de23-4b4f-bab3-7775909451c6",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Is method still called from anywhere in practice? If not, it should unconditionally throw to detect problems early. If yes, why is not an issue that it doesn't support `Val.ClassOf` for the places that still call it?",
        "createdAt" : "2020-10-07T15:48:18Z",
        "updatedAt" : "2020-11-30T11:44:06Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "71696d8e-a2b9-475f-bd65-47a39ad67949",
        "parentId" : "e2f08da1-de23-4b4f-bab3-7775909451c6",
        "authorId" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "body" : "All instances of `Val.ClassOf` are being handled before this point with `genVal`.\r\nI've tried to test it against `Inst.If` which is not being handled directly, for expr `if(???) classOf[Int] else classOf[String]` it compiles without problem which means it was handled before `super.onInst`.\r\nSame result when using `match` ",
        "createdAt" : "2020-10-07T18:01:48Z",
        "updatedAt" : "2020-11-30T11:44:06Z",
        "lastEditedBy" : "19a5939c-9a4f-4d42-a7b3-56f0d7513d13",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a49537c72347191165253d94579f165122a3bad",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +178,182 @@    }\n\n    override def onVal(value: Val): Val = value match {\n      case Val.ClassOf(_) =>\n        util.unsupported(\"Lowering ClassOf needs nir.Buffer\")"
  }
]