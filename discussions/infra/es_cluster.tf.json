[
  {
    "id" : "bbe2fc0b-1364-4188-90d3-0403ce60ca8c",
    "prId" : 10219,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a00a5783-487a-4b91-b9f0-38b7565890e6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m confused, what does size 0 do?",
        "createdAt" : "2021-07-08T16:12:19Z",
        "updatedAt" : "2021-07-08T16:13:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2803c0a3-62cf-4ec0-861d-922a2c3a197d",
        "parentId" : "a00a5783-487a-4b91-b9f0-38b7565890e6",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "That's the number of machines. In normal operation, you don't want any machine with an initial_master set. So this is there only as a knob to turn manually if/when reinitializing the cluster.",
        "createdAt" : "2021-07-08T16:33:15Z",
        "updatedAt" : "2021-07-08T16:33:15Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "d5b26875-f7ae-4845-931e-6f0fb451826e",
        "parentId" : "a00a5783-487a-4b91-b9f0-38b7565890e6",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "(The reinitialization process would be to set all three sizes at 0, then change either the blue or green one to 10, then wait for them to spin up, then set the init size to 1, then wait for it to form the cluster, and then set it back to 0.)",
        "createdAt" : "2021-07-08T16:34:22Z",
        "updatedAt" : "2021-07-08T16:34:31Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1237370e7e217d4652d424de3b7bc3181a4f572",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +25,29 @@      suffix         = \"-init\",\n      ubuntu_version = \"2004\",\n      size           = 0,\n      init           = \"[\\\"$(hostname)\\\"]\",\n    },"
  },
  {
    "id" : "f9b60391-2613-4410-bd3b-c9e88e810fce",
    "prId" : 10193,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2283fb56-909e-4d10-84b5-f0d3d29a0361",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "is that less or more permissions or just different and the old one didn’t work?",
        "createdAt" : "2021-07-06T17:20:10Z",
        "updatedAt" : "2021-07-06T17:23:08Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2c4623a4-bfc1-446a-8c0b-62c06fc4935b",
        "parentId" : "2283fb56-909e-4d10-84b5-f0d3d29a0361",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "It's less, but it's also unchanged. GCP has two different permission systems for instances: at one level, you specify \"scopes\", which is what we're doing here. This is the \"old\", deprecated-but-you-still-have-to-use-it way. The official recommendation (from GCP) here is to set it to \"cloud-platform\", which means \"access to everything\".\r\n\r\nThe \"current\" way of specifying permissions is via the service account associated with the instance.\r\n\r\nIn order for an action to succeed it needs to be permitted by both the scopes and the service account (which makes debugging permission issues a bit painful at times). So this is restricting the scope, but we were already (and still are) fully restricted to the absolute minimum set of rights by the service account, which is why \"less, but actually the same\".",
        "createdAt" : "2021-07-06T17:40:40Z",
        "updatedAt" : "2021-07-06T17:41:18Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff1deb20047bb53cdde535a0d82524ef9cc4f664",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +213,217 @@    scopes = [\n      # Required for cloud logging\n      \"logging-write\",\n      # Required per ES documentation\n      \"compute-rw\","
  },
  {
    "id" : "c765e916-d1e3-44e1-ac95-511759b498c4",
    "prId" : 10152,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aabc90b2-18ea-4578-b2e3-9eb6ae07d08f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "maybe overkill but do they have an actual healthcheck that we can ping instead? Or even better, maybe they use the proper [docker healthchecks](https://docs.docker.com/engine/reference/builder/#healthcheck). Definitely not a blocker if it’s not easy to use either of those.",
        "createdAt" : "2021-06-30T11:20:08Z",
        "updatedAt" : "2021-06-30T11:22:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a15c9f38-20b8-4011-996b-300beb999837",
        "parentId" : "aabc90b2-18ea-4578-b2e3-9eb6ae07d08f",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Not quite sure why you comment here, this is just log redirection.\r\n\r\nIn terms of healthcheck, what we want to know at the load balancer/instance manager level is whether or not there is a process listening for HTTP connections. Checking that the port is open seems good enough for that; the actual health endpoints on ES give information about the state of the cluster as a whole, which is completely irrelevant for load balancing and potentially damaging for \"kill node\" decisions the instance manager would make.\r\n\r\nOn the Kibana side, the status endpoint seems to report on two things: whether it can connect to ES (given that this is an in-machine connection, the only way this doesn't work is if the ES container is down, in which case the machine will be killed by the ES healthcheck) and whether all plugins are correctly installed with their dependencies etc., which is unlikely to change.\r\n\r\nFinally, regarding Docker health check, I don't think there's much value in having Docker try to restart the container vs. just starting a new machine.\r\n\r\nIt was worth looking into, so thanks for prompting me, but I think I'd rather leave the setup as it is.",
        "createdAt" : "2021-06-30T12:00:58Z",
        "updatedAt" : "2021-06-30T12:00:58Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "fad5cb6f-be9d-4335-96fb-aa7f0cafb053",
        "parentId" : "aabc90b2-18ea-4578-b2e3-9eb6ae07d08f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "oh I somehow misread this as waiting until we see a specific line in the logs which it clearly doesn’t do. need more coffee.",
        "createdAt" : "2021-06-30T12:02:11Z",
        "updatedAt" : "2021-06-30T12:02:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "f528a71a-cfb0-45bf-943f-f074e9f36985",
        "parentId" : "aabc90b2-18ea-4578-b2e3-9eb6ae07d08f",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Oh, no; I just want the logs of both containers to appear as logs emitted by the init script, so they show up in the \"serial output\" screen in the GCP console. And while I'm at it I prefix them with either `elastic:` or `kibana:` so I know which is which.",
        "createdAt" : "2021-06-30T12:10:37Z",
        "updatedAt" : "2021-06-30T12:10:37Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "07d92f4cc0815570ba8143dfb5c6d92f826f125a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +171,175 @@## Getting container output directly to the GCP console\n\n( exec 1> >(while IFS= read -r line; do echo \"elastic: $line\"; done); docker logs -f es ) &\n( exec 1> >(while IFS= read -r line; do echo \"kibana: $line\"; done); docker logs -f kibana ) &\n"
  }
]