[
  {
    "id" : "1bdecf11-84d7-46b7-8c14-ca6ddf0f78b8",
    "prId" : 686,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dc6776e-44d1-4c70-a45d-6509ff997744",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "Maybe this would make the decorator more generalizable:\n\n```\nif 'confirmed' in request.args and request.args.get('confirmed') != \"true\":\n    [skipp]\n```\n",
        "createdAt" : "2015-11-24T00:31:47Z",
        "updatedAt" : "2015-11-24T17:25:50Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "a12ced1c-4148-4f3e-9544-e7498d0b15f6",
        "parentId" : "7dc6776e-44d1-4c70-a45d-6509ff997744",
        "authorId" : "2047c56c-66c7-4242-875d-8c8db277f369",
        "body" : "Doesn't work in practice since for unconfirmed it just has nothing. (and not confirmed=false)\n",
        "createdAt" : "2015-11-24T17:14:53Z",
        "updatedAt" : "2015-11-24T17:25:50Z",
        "lastEditedBy" : "2047c56c-66c7-4242-875d-8c8db277f369",
        "tags" : [
        ]
      }
    ],
    "commit" : "a479fe59c1dec9e6091978ef1f2c6a1079c53d83",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +115,119 @@    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        if request.args.get('confirmed') == \"true\":\n            dag_id = request.args.get('dag_id')\n            task_id = request.args.get('task_id')"
  },
  {
    "id" : "c4c596a3-a642-4e30-8139-bb5a2c3909bc",
    "prId" : 4799,
    "prUrl" : "https://github.com/apache/airflow/pull/4799#pullrequestreview-209854709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4002f9aa-333a-4b93-8fda-83e50ae65add",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "should this line be `inspect.getsource(x) if x is not None else ''`? For your .jira description, the issue happens when None passes to render function which causes exception?",
        "createdAt" : "2019-03-01T07:06:19Z",
        "updatedAt" : "2019-03-01T07:06:19Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "af309fe0-73a1-40a9-af21-00476ebda386",
        "parentId" : "4002f9aa-333a-4b93-8fda-83e50ae65add",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "The behavior is correct either way: `PythonLexer` can handle `None`, but `inspect.getsource`. can't. The unit tests make sure that this is the case.",
        "createdAt" : "2019-03-02T05:55:30Z",
        "updatedAt" : "2019-03-02T05:55:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e656747834e77b5e7c5d7e6ca3e566f3accdd40",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +356,360 @@        'doc_md': wrapped_markdown,\n        'python_callable': lambda x: render(\n            inspect.getsource(x) if x is not None else None, lexers.PythonLexer),\n    }\n"
  },
  {
    "id" : "de5ae7b0-2b2e-418e-b440-90624064577e",
    "prId" : 5701,
    "prUrl" : "https://github.com/apache/airflow/pull/5701#pullrequestreview-272151465",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de8a02f9-c749-4ab4-a07b-34f7574ad1bc",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Why do we need this? Shouldn't line 387 & 390 cover all cases?",
        "createdAt" : "2019-08-06T23:41:34Z",
        "updatedAt" : "2019-08-09T01:37:53Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "822aa621-c389-4c20-be19-dd0ca69a95e5",
        "parentId" : "de8a02f9-c749-4ab4-a07b-34f7574ad1bc",
        "authorId" : "7d5b4ad4-2bc3-44ba-928d-3f84d2ebc52a",
        "body" : "This fn was copied from Airflow 1.10.4 (it was removed from master)\r\nhttps://github.com/apache/airflow/blob/1.10.4/airflow/www/utils.py#L407\r\n\r\nI did a test to confirm it is for a class that implements `__call__`:\r\nimport inspect\r\n\r\nclass A:\r\n  def `__call__`(self, x):\r\n    return x+1\r\n\r\na = A()\r\nprint(inspect.getsource(a.`__call__`)) # it works\r\nprint(inspect.getsource(a)) # it does not",
        "createdAt" : "2019-08-07T18:32:08Z",
        "updatedAt" : "2019-08-09T01:37:53Z",
        "lastEditedBy" : "7d5b4ad4-2bc3-44ba-928d-3f84d2ebc52a",
        "tags" : [
        ]
      }
    ],
    "commit" : "974eeb400e19104249e31e57bda897e09c41c2df",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +396,400 @@    if source_code is None:\n        try:\n            source_code = inspect.getsource(x.__call__)\n        except (TypeError, AttributeError):\n            pass"
  }
]