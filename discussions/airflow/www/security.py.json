[
  {
    "id" : "4bfa6140-1a42-4b66-b6be-a31e835a4cd6",
    "prId" : 4594,
    "prUrl" : "https://github.com/apache/airflow/pull/4594#pullrequestreview-196778299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a030f6bb-629d-4817-ae47-88953759967e",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "1. Here you're fetching all DAGs which is **paused** & non-subdag. But in the docstring above (https://github.com/apache/airflow/pull/4594/files#diff-5b3386f32d0c06f2aa7f668e7d7a6096R341), you mentioned \"fetching all the existing dag models that are **non-paused** or non subdags.\".\r\n2. In addition, the relations here is `OR(is_active, is_paused) AND non-subdag`. But in the docstring it is simply `non-paused OR non-subdags`\r\n\r\nConflicting to me. Did I miss something?",
        "createdAt" : "2019-01-26T06:04:39Z",
        "updatedAt" : "2019-01-26T06:25:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "0410e02b-65ad-4981-b926-9c81da304dfd",
        "parentId" : "a030f6bb-629d-4817-ae47-88953759967e",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "The target dag list include either active or pause dags but non-subdags. I update the comment a bit.",
        "createdAt" : "2019-01-26T06:27:19Z",
        "updatedAt" : "2019-01-26T06:27:19Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f799cb3f06f42d5cce062c51c9f633575177cbbb",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +364,368 @@        all_dags_models = session.query(models.DagModel)\\\n            .filter(or_(models.DagModel.is_active, models.DagModel.is_paused))\\\n            .filter(~models.DagModel.is_subdag).all()\n\n        # create can_dag_edit and can_dag_read permissions for every dag(vm)"
  },
  {
    "id" : "52512a76-6660-4d83-bb4e-9a23d2b98b27",
    "prId" : 4594,
    "prUrl" : "https://github.com/apache/airflow/pull/4594#pullrequestreview-196811573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dd63e46-5abd-423f-b226-dbd051bc50ed",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Understand the idea here is each DAG will be considered as a `View`.\r\n\r\nOne rare (but potentially valid) case to consider: what if a DAG id is identical to an existing View name? ",
        "createdAt" : "2019-01-26T15:36:58Z",
        "updatedAt" : "2019-01-26T15:49:22Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "e79eb270-fffb-410c-baec-acf73bbe5c32",
        "parentId" : "4dd63e46-5abd-423f-b226-dbd051bc50ed",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "It shouldn't have any impact. For instance, assuming the dag name is test-dag, this will add two entries to the table: can-dag-edit with test-dag and can-dag-read with test-dag.",
        "createdAt" : "2019-01-27T04:19:07Z",
        "updatedAt" : "2019-01-27T04:19:07Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f799cb3f06f42d5cce062c51c9f633575177cbbb",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +369,373 @@        for dag in all_dags_models:\n            for perm in DAG_PERMS:\n                merge_pv(perm, dag.dag_id)\n\n        # for all the dag-level role, add the permission of viewer"
  },
  {
    "id" : "e17e346d-1941-441c-890b-e32751546772",
    "prId" : 4594,
    "prUrl" : "https://github.com/apache/airflow/pull/4594#pullrequestreview-196811535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19fa9992-5697-4b4e-8b7a-4e8f887f4752",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "`EXISTING_ROLES` is a static set, in which we have 'Admin',  'Viewer', 'User', 'Op', and 'Public'. It's possible that we have created a new role, say `EnhancedUser` for which we added Connection Edit access.\r\n\r\nThen this custom role (non-dag specific role) will also be listed into `dag_role` here as it's not in `EXISTING_ROLES` (which should not happen).\r\n\r\nBut I'm not sure whether this will cause any actual impact.",
        "createdAt" : "2019-01-26T15:47:14Z",
        "updatedAt" : "2019-01-26T15:49:22Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "aeb76891-1ec7-4136-81de-b1752219eeaa",
        "parentId" : "19fa9992-5697-4b4e-8b7a-4e8f887f4752",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "It shouldn't have any impact. The code is to allow all the other non-static roles to have all the User role's permisssion on all User's views except the \"all-dag\" view. This is to allow the user to access basic functionality in webserver. If we would like to modify and control this part, we could modify later, but it is not part of this pr's scope.",
        "createdAt" : "2019-01-27T04:16:39Z",
        "updatedAt" : "2019-01-27T04:16:39Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f799cb3f06f42d5cce062c51c9f633575177cbbb",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +376,380 @@        user_role = self.find_role('User')\n\n        dag_role = [role for role in all_roles if role.name not in EXISTING_ROLES]\n        update_perm_views = []\n"
  },
  {
    "id" : "e785571a-899f-4898-b3c4-e9782edcc899",
    "prId" : 4658,
    "prUrl" : "https://github.com/apache/airflow/pull/4658#pullrequestreview-200822716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15f4ebb4-69ab-47a2-85a4-f267188d44b0",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "Have you checked if FAB's SecurityManager provided any API to delete role?",
        "createdAt" : "2019-02-06T21:24:47Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "98473dc1-0106-48ad-90dd-c7e4d28d6c79",
        "parentId" : "15f4ebb4-69ab-47a2-85a4-f267188d44b0",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "And maybe we need to check and make sure that user won't delete those 5 default roles defined in the security.py.",
        "createdAt" : "2019-02-06T21:32:13Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "ac1a92d5-9132-4ae1-876c-6892def142c4",
        "parentId" : "15f4ebb4-69ab-47a2-85a4-f267188d44b0",
        "authorId" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "body" : "Yeah, it doesn't appear to. These are the methods it does have:\r\n\r\n```\r\n    \"\"\"\r\n    ----------------------\r\n     PRIMITIVES FOR ROLES\r\n    ----------------------\r\n    \"\"\"\r\n    def find_role(self, name):\r\n        raise NotImplementedError\r\n\r\n    def add_role(self, name):\r\n        raise NotImplementedError\r\n\r\n    def get_all_roles(self):\r\n        raise NotImplementedError\r\n```\r\n\r\nFrom https://flask-appbuilder.readthedocs.io/en/latest/_modules/flask_appbuilder/security/manager.html",
        "createdAt" : "2019-02-06T21:48:30Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "tags" : [
        ]
      }
    ],
    "commit" : "c11ce552e50cc691d741e2812962ba377ee0d9f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +196,200 @@            self.log.info('Existing permissions for the role:%s within the database will persist.', role_name)\n\n    def delete_role(self, role_name):\n        \"\"\"Delete the given Role\n"
  },
  {
    "id" : "2b58efb0-e573-4f90-817a-eef3651ef988",
    "prId" : 4658,
    "prUrl" : "https://github.com/apache/airflow/pull/4658#pullrequestreview-200826825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53bc6ad7-3c05-4a24-bf70-61f8861d06d8",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "I am wondering what will happen if a user's role gets deleted. Will the user has no role associated in the db?",
        "createdAt" : "2019-02-06T21:26:11Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "220cf58c-8633-4f7f-85eb-f21d961eddac",
        "parentId" : "53bc6ad7-3c05-4a24-bf70-61f8861d06d8",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "There is a table called ab_user_role which is a join result between ab_user and ab_role. What will happen to that table in this case?",
        "createdAt" : "2019-02-06T21:29:52Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "4e15f2cb-5bdb-4799-b68d-fd46955f5cfa",
        "parentId" : "53bc6ad7-3c05-4a24-bf70-61f8861d06d8",
        "authorId" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "body" : "Yeah, delete will cascade to the `ab_user_role` table, so it just deletes any entries associated with that role. Here's an example:\r\n\r\n```\r\n$ airflow users -l | grep \"jdoe+1\"\r\n│    3 │ user1          │ jdoe+1@gmail.com │ jon          │ doe1        │ [Admin, Op, Public] │\r\n\r\n$ airflow roles --delete Public\r\n[2019-02-06 13:56:24,911] {__init__.py:51} INFO - Using executor SequentialExecutor\r\n[2019-02-06 13:56:25,431] {__init__.py:298} INFO - Filling up the DagBag from /Users/andrewstahlman/airflow/dags\r\n[2019-02-06 13:56:25,638] {security.py:452} INFO - Start syncing user roles.\r\n[2019-02-06 13:56:25,684] {security.py:196} INFO - Existing permissions for the role:Viewer within the database will persist.\r\n[2019-02-06 13:56:25,729] {security.py:196} INFO - Existing permissions for the role:User within the database will persist.\r\n[2019-02-06 13:56:25,771] {security.py:196} INFO - Existing permissions for the role:Op within the database will persist.\r\n[2019-02-06 13:56:25,772] {security.py:365} INFO - Fetching a set of all permission, view_menu from FAB meta-table\r\n[2019-02-06 13:56:25,927] {security.py:316} INFO - Cleaning faulty perms\r\n[2019-02-06 13:56:25,934] {security.py:204} INFO - Deleting role 'Public'\r\n\r\n$ airflow users -l | grep \"jdoe+1\"\r\n│    3 │ user1          │ jdoe+1@gmail.com │ jon          │ doe1        │ [Admin, Op] │\r\n```",
        "createdAt" : "2019-02-06T21:58:06Z",
        "updatedAt" : "2019-02-07T01:45:07Z",
        "lastEditedBy" : "8ae8c9e1-93ac-446d-b3f6-18d36b79bd39",
        "tags" : [
        ]
      }
    ],
    "commit" : "c11ce552e50cc691d741e2812962ba377ee0d9f1",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +207,211 @@        if role:\n            self.log.info(\"Deleting role '{}'\".format(role_name))\n            session.delete(role)\n            session.commit()\n        else:"
  },
  {
    "id" : "2fc28a2e-7929-408f-a705-1bfc342d12a3",
    "prId" : 4833,
    "prUrl" : "https://github.com/apache/airflow/pull/4833#pullrequestreview-210213100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a667422e-3407-4043-84d6-ae564f9b2611",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "```python\r\ndef fun1(data):\r\n    a=[]\r\n    for d in data:\r\n        a.append(d)\r\n    return list(set(a))\r\n\r\ndef fun2(data):\r\n    a=set()\r\n    for d in data:\r\n        a.add(d)\r\n    return list(a)\r\n\r\nif __name__ == '__main__':\r\n    import timeit\r\n    print(timeit.timeit(\"fun1(list(range(100)) + list(range(100)))\", setup=\"from __main__ import fun1\"))\r\n    print(timeit.timeit(\"fun2(list(range(100)) + list(range(100)))\", setup=\"from __main__ import fun2\"))\r\n```\r\nresult:\r\n22.5804829597\r\n18.7606010437",
        "createdAt" : "2019-03-04T15:47:30Z",
        "updatedAt" : "2019-03-05T02:56:43Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c11269657e1a1423a036399bc604c09a6ec73c8",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +190,194 @@                if pvm.view_menu.name in role_vms and pvm.permission.name in role_perms:\n                    role_pvms.add(pvm)\n            role.permissions = list(role_pvms)\n            self.get_session.merge(role)\n            self.get_session.commit()"
  },
  {
    "id" : "d2602489-815e-4cda-bb63-f639e4b7d2b1",
    "prId" : 6109,
    "prUrl" : "https://github.com/apache/airflow/pull/6109#pullrequestreview-295491225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "275c93a1-7807-4d44-b15b-7644bf08976d",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Are you sure? SQL Alchemy behaves differently when comparing variable.  This is not used to compare types in Python, but creates a query for SQL Alchemy.",
        "createdAt" : "2019-09-15T21:37:17Z",
        "updatedAt" : "2019-09-15T21:38:21Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "308843ce-b247-40f5-aff3-509a3af319a2",
        "parentId" : "275c93a1-7807-4d44-b15b-7644bf08976d",
        "authorId" : "e26b260f-b5b2-4259-a24b-3eee5f7f6286",
        "body" : "Yes, we should still not be checking this for equality.",
        "createdAt" : "2019-09-15T21:38:20Z",
        "updatedAt" : "2019-09-15T21:38:20Z",
        "lastEditedBy" : "e26b260f-b5b2-4259-a24b-3eee5f7f6286",
        "tags" : [
        ]
      },
      {
        "id" : "1870d2e8-bf4b-46d0-a77d-60f0b9f17fc5",
        "parentId" : "275c93a1-7807-4d44-b15b-7644bf08976d",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This is not right:\r\n\r\n```\r\nIn [5]: type(TI.state is None)\r\nOut[5]: bool\r\n\r\nIn [6]: type(TI.state == None)\r\nOut[6]: sqlalchemy.sql.elements.BinaryExpression\r\n```\r\n\r\nI fyou want to avoid the wrong-looking `== None` the (`is_`)[https://docs.sqlalchemy.org/en/11/core/sqlelement.html#sqlalchemy.sql.operators.ColumnOperators.is_] function is the way to go.",
        "createdAt" : "2019-10-01T09:58:08Z",
        "updatedAt" : "2019-10-01T09:58:09Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "33fe8898fbdd94cb1fe492ee9bc104f1a78f57f9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +341,345 @@            sesh.query(sqla_models.PermissionView)\n            .filter(or_(\n                sqla_models.PermissionView.permission is None,  # noqa pylint: disable=singleton-comparison\n                sqla_models.PermissionView.view_menu is None,  # noqa pylint: disable=singleton-comparison\n            ))"
  },
  {
    "id" : "cc3d60d0-eec9-4628-9cf3-832748fbb5fa",
    "prId" : 6199,
    "prUrl" : "https://github.com/apache/airflow/pull/6199#pullrequestreview-294451325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f846a595-3a26-4831-a428-9f924571d1d3",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Typo `have already have` here.\r\nMaybe you meant to type `Admin already has`",
        "createdAt" : "2019-09-27T15:59:24Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "4d753c6a-bc9b-4d24-a843-bc4acf529f62",
        "parentId" : "f846a595-3a26-4831-a428-9f924571d1d3",
        "authorId" : "56fb2fa2-cd64-4eda-a57f-3c640924d540",
        "body" : "Yes, I should modify here.",
        "createdAt" : "2019-09-27T17:03:55Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "56fb2fa2-cd64-4eda-a57f-3c640924d540",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ad08ff6c2c501e03872d41454bd2d071518ab",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +455,459 @@        \"\"\"\n        Admin should has all the permission-views, except the dag views.\n        because Admin have already have all_dags permission.\n        Add the missing ones to the table for admin.\n"
  },
  {
    "id" : "f53ef129-d62d-4770-9192-d9dc1a57ee76",
    "prId" : 6199,
    "prUrl" : "https://github.com/apache/airflow/pull/6199#pullrequestreview-294452825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9dccf6f-4e39-412b-aaf6-cf19a3dc2685",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Why not directly use `self.find_permission_view_menu` if you are simply looking for the `pvm` for `all_dags`?",
        "createdAt" : "2019-09-27T16:13:01Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "6cbc3229-98f5-46fa-8cc6-f5769e0def03",
        "parentId" : "c9dccf6f-4e39-412b-aaf6-cf19a3dc2685",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "@XD-DENG I need to take a deeper look, but the initial idea is to add all the permissions with views to Admin(not just those dag related). If we are going to add single view-menu(`all_dags`) to Admin, we need to add the rest to Admin(or it has been handled inside FAB which I am not sure) as well otherwise  Admin will miss bunches of permissions staffs.",
        "createdAt" : "2019-09-27T16:35:04Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "d96006a4-59d9-4225-aacd-8694aa781429",
        "parentId" : "c9dccf6f-4e39-412b-aaf6-cf19a3dc2685",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Thanks @feng-tao for the clarification :)",
        "createdAt" : "2019-09-27T16:37:02Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "f5e322a7-fab0-4217-abff-a1863878784e",
        "parentId" : "c9dccf6f-4e39-412b-aaf6-cf19a3dc2685",
        "authorId" : "56fb2fa2-cd64-4eda-a57f-3c640924d540",
        "body" : "Are you comment on line 464-467? These code is not looking for `pvm` for `all_dags`\r\nThese SQL code intent to filter out `can_dag_read/edit` on all dag views, and keep `can_dag_read/edit` on `all_dags`\r\n\r\nPlease notice the `~and_` in line 464 and the `!=` in line 466",
        "createdAt" : "2019-09-27T17:07:09Z",
        "updatedAt" : "2019-09-28T03:08:56Z",
        "lastEditedBy" : "56fb2fa2-cd64-4eda-a57f-3c640924d540",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ad08ff6c2c501e03872d41454bd2d071518ab",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +465,469 @@            sqla_models.PermissionView.permission_id.in_(dag_perm_ids),\n            sqla_models.PermissionView.view_menu_id != all_dag_view.id)\n        ).all()\n\n        pvms = [p for p in pvms if p.permission and p.view_menu]"
  },
  {
    "id" : "8b96ee00-4aea-4dc7-ac5e-fa9ec3c334f4",
    "prId" : 10594,
    "prUrl" : "https://github.com/apache/airflow/pull/10594#pullrequestreview-482939559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dc34f63-7073-40c8-9a7c-109cb7d83f06",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Where is `can_dag_read` still used?",
        "createdAt" : "2020-09-04T15:58:33Z",
        "updatedAt" : "2020-09-22T03:17:54Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "089a2f00-83a2-47b5-a4d6-1c6587369ce1",
        "parentId" : "4dc34f63-7073-40c8-9a7c-109cb7d83f06",
        "authorId" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "body" : "Currently, the UI is still using `can_dag_read`. When I backport the new permissions I can remove this.",
        "createdAt" : "2020-09-04T21:07:27Z",
        "updatedAt" : "2020-09-22T03:17:54Z",
        "lastEditedBy" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7f590d1b4eedfb00ece0828e55e876ecd4babe3",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +164,168 @@    READ_DAG_PERMS = {\n        'can_dag_read',\n        'can_read',\n    }\n"
  },
  {
    "id" : "0d7611af-fd7e-4cf1-99fc-0e9307c29aca",
    "prId" : 10955,
    "prUrl" : "https://github.com/apache/airflow/pull/10955#pullrequestreview-488902193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bf05387-d6df-461b-bba4-7fd7932f9162",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Not sure about that one? Is that a problem we are changing it?",
        "createdAt" : "2020-09-15T17:21:07Z",
        "updatedAt" : "2020-09-15T17:21:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d98c8fdadbe87f743c33085595ac9cf54ec5e11",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +60,64 @@        'Docs',\n        'Documentation',\n        'GitHub',\n        'About',\n        'Version',"
  },
  {
    "id" : "04d644e8-d894-4c94-8ca2-7a0dc6297ccf",
    "prId" : 11189,
    "prUrl" : "https://github.com/apache/airflow/pull/11189#pullrequestreview-506701766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bce9340-0b42-40e2-92f3-a5289075c427",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        2. Has can_read permission on AllDags view.\r\n        3. Has can_edit permission on AllDags view.\r\n```\r\n\r\n(Not as part of this PR, but why on earth do we check the role membership at all? We should just use the permissions system!) ",
        "createdAt" : "2020-10-12T08:35:50Z",
        "updatedAt" : "2020-10-15T22:47:03Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "733adb0b-7335-425e-897c-38925c6e7da1",
        "parentId" : "7bce9340-0b42-40e2-92f3-a5289075c427",
        "authorId" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "body" : "Yeah permissions should be refactored/simplified in general, but I've been avoiding that as much as possible.",
        "createdAt" : "2020-10-12T15:05:55Z",
        "updatedAt" : "2020-10-15T22:47:03Z",
        "lastEditedBy" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9b67a12080f822a6968393df1c4a256b9189748",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +416,420 @@        1. Role needs to be in (Admin, Viewer, User, Op).\n        2. Has can_read permission on dags view.\n        3. Has can_edit permission on dags view.\n        \"\"\"\n        return ("
  },
  {
    "id" : "49ac802b-d7c6-4843-bb63-e919ae63c74b",
    "prId" : 12516,
    "prUrl" : "https://github.com/apache/airflow/pull/12516#pullrequestreview-536468442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bf690a8-ea93-4992-ae86-c03490f4e467",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "A bit more clarification for this change:\r\n\r\nIf the ViewMenu name is like `RESOURCE_DAG_PREFIX` (\"DAG:\"), we can already be very sure that the resulting `pv_ids` doesn't include the id of `RESOURCE_DAG ` (\"DAGs\").\r\n\r\nHence in the following SQL query, we don't need to have the 2nd condition in the `and_()`\r\n\r\nLet me know if this doesn't make sense to you. Thanks.",
        "createdAt" : "2020-11-20T21:05:28Z",
        "updatedAt" : "2020-11-20T21:27:19Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "f7c37340-e215-4bf1-bce7-a3af12fcf745",
        "parentId" : "4bf690a8-ea93-4992-ae86-c03490f4e467",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Can you give an example over here?\r\n\r\ncc @jhtimmins ",
        "createdAt" : "2020-11-21T01:04:31Z",
        "updatedAt" : "2020-11-21T01:04:49Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "3a3d3bd4-488d-40ae-bca7-01c9611d2e8d",
        "parentId" : "4bf690a8-ea93-4992-ae86-c03490f4e467",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "There are 3 types of ViewMenus in this context:\r\n- type-1: non-DAG views\r\n- type-2: the single view corresponding to \"All DAGs\". This is marked as [\"DAGs\"](https://github.com/apache/airflow/blob/master/airflow/security/permissions.py#L23)(`permissions.RESOURCE_DAG`). Users who has permission to this VM has access to All DAGs. \r\n- type-3: DAG views, whose name starts with [\"DAG:\"](https://github.com/apache/airflow/blob/master/airflow/security/permissions.py#L24)) (`permissions.RESOURCE_DAG_PREFIX`, , for example, \"DAG:example_bash_operator\", \"DAG:example_python_operator\", etc.\r\n\r\nAs indicated in the docstring (\"_Admin should have all the permission-views, except the dag views. because Admin already has Dags permission.\t        because Admin already has Dags permission_\"), for `Admin`, we only need to assign type-1 + type-2 (type-2 already covers all type-3 View Menus).\r\n\r\nGiven the different string structure of `permissions.RESOURCE_DAG` and `permissions.RESOURCE_DAG_PREFIX` (\"`DAGs`\" and \"`DAG:`\"), if we get all entries of type-3, then filter them out (`.filter(~...)`), we naturally get type-1 + type-2. That's why I find the whole method can be simplified.",
        "createdAt" : "2020-11-21T07:19:14Z",
        "updatedAt" : "2020-11-21T07:19:15Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "aecfa61a-b7e8-4c40-8aaa-ab6fca5985a1",
        "parentId" : "4bf690a8-ea93-4992-ae86-c03490f4e467",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Nice, thanks for the explanation. It makes sense to me",
        "createdAt" : "2020-11-23T13:25:22Z",
        "updatedAt" : "2020-11-23T13:25:23Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "36cbfeb81589a2fbd727783e6e100b0b668a02eb",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +523,527 @@        dag_pvs = (\n            self.get_session.query(sqla_models.ViewMenu)\n            .filter(sqla_models.ViewMenu.name.like(f\"{permissions.RESOURCE_DAG_PREFIX}%\"))\n            .all()\n        )"
  },
  {
    "id" : "2a0cc3ca-ca19-44e0-9f9c-ab6de3c6d0a1",
    "prId" : 13923,
    "prUrl" : "https://github.com/apache/airflow/pull/13923#pullrequestreview-578660557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c1ad9e1-c6bb-4fef-8338-1b071d2412b7",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Can you add a test to prevent regression -- that checks that only custom roles have `Website.can_read`",
        "createdAt" : "2021-01-27T12:11:28Z",
        "updatedAt" : "2021-01-27T12:11:28Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "c3bc01a4-e78c-4bcb-b9af-334558fbdb1b",
        "parentId" : "8c1ad9e1-c6bb-4fef-8338-1b071d2412b7",
        "authorId" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "body" : "@kaxil All roles except for Public will get `Website.can_read`. This is just only added to custom roles explicitly, since the default ones already have it. So mostly I just wanted to not give Public that access.\r\n\r\nStill think it's worth adding a test to make sure that isn't available to Public?",
        "createdAt" : "2021-01-27T18:53:42Z",
        "updatedAt" : "2021-01-27T18:53:43Z",
        "lastEditedBy" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "tags" : [
        ]
      },
      {
        "id" : "bb39e4b6-731f-4c42-b9db-b7a2673679d7",
        "parentId" : "8c1ad9e1-c6bb-4fef-8338-1b071d2412b7",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think we should have a test somewhere that verifies the exact permissions the public role is supposed to have",
        "createdAt" : "2021-01-27T19:01:33Z",
        "updatedAt" : "2021-01-27T19:01:33Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "812f867b-dd17-4497-bfa2-ecc50bd0019c",
        "parentId" : "8c1ad9e1-c6bb-4fef-8338-1b071d2412b7",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "If we already have it, then not needed",
        "createdAt" : "2021-01-27T19:01:43Z",
        "updatedAt" : "2021-01-27T19:01:43Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "e6caa124-fb6a-4edb-8c13-f9a85bca8fc3",
        "parentId" : "8c1ad9e1-c6bb-4fef-8338-1b071d2412b7",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "@jhtimmins Can you make sure to add test (if it does not exist) in a follow up PR or the other PR that you have open",
        "createdAt" : "2021-01-28T19:16:21Z",
        "updatedAt" : "2021-01-28T19:16:21Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "619cbdcfe0af74d219dcb2820bd40e69430c03c7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +450,454 @@        )\n        custom_roles = [role for role in self.get_all_roles() if role.name not in EXISTING_ROLES]\n        for role in custom_roles:\n            self.add_permission_role(role, website_permission)\n"
  },
  {
    "id" : "88e95bad-f6be-4818-9510-c3eb0dc607d1",
    "prId" : 14197,
    "prUrl" : "https://github.com/apache/airflow/pull/14197#pullrequestreview-591828555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84723375-8a81-4ff8-bfb8-6f4a1db167d3",
        "parentId" : null,
        "authorId" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "body" : "These were alphabetized by resource name. Is there a reason we should move them?",
        "createdAt" : "2021-02-11T22:12:00Z",
        "updatedAt" : "2021-02-14T05:11:29Z",
        "lastEditedBy" : "f30d90ba-101c-4671-a1df-fa45531fa887",
        "tags" : [
        ]
      },
      {
        "id" : "a50d3e7e-f9c6-4d66-91bb-5d6286a5cef6",
        "parentId" : "84723375-8a81-4ff8-bfb8-6f4a1db167d3",
        "authorId" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "body" : "I didn't realize it was intended to be alphabetical as audit log is out of order, but I now see the log -> audit log rename is the culprit here. I'll move these back and fix audit log too once we figure out how we want to proceed on the name issue.",
        "createdAt" : "2021-02-17T04:27:59Z",
        "updatedAt" : "2021-02-17T04:28:00Z",
        "lastEditedBy" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1b6ee8784da1c97f028e36f78eda3f93a9c02fb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +73,77 @@        (permissions.ACTION_CAN_ACCESS_MENU, permissions.RESOURCE_TASK_INSTANCE),\n        (permissions.ACTION_CAN_ACCESS_MENU, permissions.RESOURCE_DOCS_MENU),\n        (permissions.ACTION_CAN_ACCESS_MENU, permissions.RESOURCE_DOCS_LINKS),\n        (permissions.ACTION_CAN_THIS_FORM_GET, permissions.RESOURCE_RESET_MY_PASSWORD_VIEW),\n        (permissions.ACTION_CAN_THIS_FORM_POST, permissions.RESOURCE_RESET_MY_PASSWORD_VIEW),"
  },
  {
    "id" : "11a6143b-6a6f-4d2b-809d-acb04032fc97",
    "prId" : 14993,
    "prUrl" : "https://github.com/apache/airflow/pull/14993#pullrequestreview-620292440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "100b8beb-d82c-4b2d-8a2f-f16db16a23bd",
        "parentId" : null,
        "authorId" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "body" : "Name isn't nullable on both permission and viewmodel, and with inner joins we are guaranteed to get both which lets us return directly instead of walking the whole list to check them.",
        "createdAt" : "2021-03-24T22:48:26Z",
        "updatedAt" : "2021-03-25T13:05:28Z",
        "lastEditedBy" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb1ff3d2140118489a3acdb4558830eb401b53bd",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +466,470 @@            .with_entities(self.permission_model.name, self.viewmenu_model.name)\n            .all()\n        )\n\n    def create_dag_specific_permissions(self) -> None:"
  },
  {
    "id" : "7d3619fd-938a-4ba2-85d3-997ac827ad2e",
    "prId" : 14993,
    "prUrl" : "https://github.com/apache/airflow/pull/14993#pullrequestreview-620292440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b93ce79-b8a4-4ef7-a615-9bd62991bf87",
        "parentId" : null,
        "authorId" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "body" : "Checking that we get a dag_id (which is the PK) and that it gets prefixed properly didn't seem necessary, unless I've overlooked something?",
        "createdAt" : "2021-03-24T22:50:18Z",
        "updatedAt" : "2021-03-25T13:05:28Z",
        "lastEditedBy" : "2b57321e-ffa6-49a5-a626-e83c2595de23",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb1ff3d2140118489a3acdb4558830eb401b53bd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +485,489 @@            for perm_name in self.DAG_PERMS:\n                dag_resource_name = self.prefixed_dag_id(dag_id)\n                if (perm_name, dag_resource_name) not in perms:\n                    self._merge_perm(perm_name, dag_resource_name)\n"
  }
]