[
  {
    "id" : "608a72b6-e87f-44d9-b440-11ab3573d971",
    "prId" : 83,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94170efe-6be8-409c-afc0-730c0b7af575",
        "parentId" : null,
        "authorId" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "body" : "What is an example of the second inequality being strict?\n",
        "createdAt" : "2015-06-26T19:07:45Z",
        "updatedAt" : "2015-06-26T19:07:45Z",
        "lastEditedBy" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "tags" : [
        ]
      },
      {
        "id" : "1af0cff8-3034-431f-aed0-e7c16bc71085",
        "parentId" : "94170efe-6be8-409c-afc0-730c0b7af575",
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "if should actually read  `if successes < done == len(task._upstream_list):` but I didn't know whether it would parse. But yeah, it's basically skipping tasks that have one or many `failed` or `upstream_failed` upstream and they may have other succeeded tasks, but they have to be all finished processing.\n",
        "createdAt" : "2015-06-26T19:46:36Z",
        "updatedAt" : "2015-06-26T19:46:36Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "447bb088b87c9ad5d9f5747e95ba011f3e29982c",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +659,663 @@            )\n            successes, done  = qry[0]\n            if successes < done >= len(task._upstream_list):\n                self.state = State.UPSTREAM_FAILED\n                self.start_date = datetime.now()"
  },
  {
    "id" : "14e08a15-92bc-4214-b00c-8ca32c9783bf",
    "prId" : 147,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1910225e-b83a-406d-8fa7-851a5cedcfb3",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "it's not super explicit here that list is used as a way to cast an iterable. btw:\n\n```\n>>> list('abc')\n['a', 'b', 'c']\n```\n\nwhat about, instead of the try block:\n\n```\nif not isinstance(task_list, (tuple, list):\n    task_list = [task_list]\n```\n",
        "createdAt" : "2015-07-17T19:11:44Z",
        "updatedAt" : "2015-07-17T19:11:44Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "52b33797-390b-404d-9dbe-6ef4e407494c",
        "parentId" : "1910225e-b83a-406d-8fa7-851a5cedcfb3",
        "authorId" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "body" : "I can change it to that if you prefer, however it doesn't allow you to have custom classes where **iter** is defined to be passed in here. Would a comment alleviate your concerns?\n",
        "createdAt" : "2015-07-17T19:18:28Z",
        "updatedAt" : "2015-07-17T19:18:28Z",
        "lastEditedBy" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "42d99d7dadb46ac0f4ad8cd15631e5d012aa6171",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1369,1373 @@    def _set_relatives(self, task_or_task_list, upstream=False):\n        try:\n            task_list = list(task_or_task_list)\n        except TypeError:\n            task_list = [task_or_task_list]"
  },
  {
    "id" : "e6afa9f7-3d3f-43e1-a3d9-e3677abea352",
    "prId" : 151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "parentId" : null,
        "authorId" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "body" : "would it be possible to make this a list of callbacks?\n",
        "createdAt" : "2015-07-17T18:16:55Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "tags" : [
        ]
      },
      {
        "id" : "79e7f618-8a54-4719-be42-c5cefb99a21e",
        "parentId" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "authorId" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "body" : "If we are going that route, maybe a dictionary would make more sense ? \n\n```\n{\"on_success\": callback_callable, \"on_failure\": notification_callback, \"on_retry\": email_callback}\n```\n\nBut I think it's makes the interface less clear.\n",
        "createdAt" : "2015-07-17T18:22:12Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "tags" : [
        ]
      },
      {
        "id" : "300f21b3-8de0-42c7-818b-e3c4796d22b4",
        "parentId" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "authorId" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "body" : "oh... I meant, instead of passing a single callback for on_failure, pass a list, so you can do multiple things if a task fails without wrapping wrapping callbacks inside themselves.\n",
        "createdAt" : "2015-07-17T18:37:00Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "tags" : [
        ]
      },
      {
        "id" : "8a0d01c4-91bf-40ed-9dc2-28e995043136",
        "parentId" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "authorId" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "body" : "Sorry, I misunderstood. Sounds reasonable to me.\n",
        "createdAt" : "2015-07-17T18:47:11Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "tags" : [
        ]
      },
      {
        "id" : "4aaef6db-9ec0-4d16-ab54-bf5ae1cc0652",
        "parentId" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "I think it muddies the API to expect a list or either a callable or a list of callable and for the Airflow to have to deal with etheir using type inspection. If you need to call multiple things, write a function that calls multiple things, or wrap it in a lambda that calls something like this\n\n```\ndef calls(funcs, *args, **args):\n    return [f(*args, **args) for f in funcs]\n```\n",
        "createdAt" : "2015-07-17T18:59:16Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "00d0b155-0a71-421c-8505-004bbcdaf60b",
        "parentId" : "9b23d8e7-7feb-4482-b725-26610788049d",
        "authorId" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "body" : "that is fine for me. I can make it work either way. thanks!\n",
        "createdAt" : "2015-07-17T22:15:58Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "4009a9e6b91afce2d8eedde1ed53b3b60d0d8e12",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +1152,1156 @@        self.on_failure_callback = on_failure_callback\n        self.on_success_callback = on_success_callback\n        self.on_retry_callback = on_retry_callback\n        if isinstance(retry_delay, timedelta):\n            self.retry_delay = retry_delay"
  },
  {
    "id" : "af7b867c-021e-4bee-8c7a-cb10208f6e90",
    "prId" : 151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "749e289e-c355-4b66-8d65-b930a50a8442",
        "parentId" : null,
        "authorId" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "body" : "it might be nice to also always email when the email is set.\n\nWould it be possible to have callbacks be a list and always seed the list with the email callback?\n",
        "createdAt" : "2015-07-17T18:20:36Z",
        "updatedAt" : "2015-07-18T01:10:16Z",
        "lastEditedBy" : "1e336686-2e66-4dfa-a3d5-95009d8e01ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "4009a9e6b91afce2d8eedde1ed53b3b60d0d8e12",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +881,885 @@\n        # Handling callbacks pessimistically\n        try:\n            if self.state == State.UP_FOR_RETRY and task.on_retry_callback:\n                task.on_retry_callback(context)"
  },
  {
    "id" : "5cc8f157-443e-4611-b229-9a918abebcf9",
    "prId" : 169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58711bf3-58a1-4f83-b89b-6f19e3e76bb8",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "This line right here\n",
        "createdAt" : "2015-07-23T06:53:24Z",
        "updatedAt" : "2015-07-23T06:53:24Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eeead06c72c638ad3f0451fbd727abcda2b1c46",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +936,940 @@            'ti': self,\n            'task_instance_key_str': ti_key_str,\n            'conf': conf,\n        }\n"
  }
]