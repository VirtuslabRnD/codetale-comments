[
  {
    "id" : "3dedcf25-2531-46d2-813b-ecd8d11346ec",
    "prId" : 15533,
    "prUrl" : "https://github.com/apache/airflow/pull/15533#pullrequestreview-654540942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "There are two thigns I do not like here:\r\n\r\n1) Copying the logic of the DBApi run()  method. I do not think however we can do too much about it though, because we do not want to modify the DBApi internals and make the provider depends on future version of Airflow.. So not much we can do here.\r\n\r\n2) We only store LAST query id even if we execute a sequence of queries. I think we should keep an array of those. rather than overwrite the query id with the last one\r\n\r\n\r\n",
        "createdAt" : "2021-04-26T16:58:51Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "e5445fbb-44dc-48da-b7d5-0140314b791a",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "73238ffa-26c5-4e17-b57a-e3edd170dfb6",
        "body" : "Related to point 1 - this problem (allow multiple queries) is not unique to Snowflake. This also applies to Presto and Trino so whatever solution that will be accepted here will most likely be copied to the other two providers as well.",
        "createdAt" : "2021-04-26T17:42:10Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "73238ffa-26c5-4e17-b57a-e3edd170dfb6",
        "tags" : [
        ]
      },
      {
        "id" : "6f7b61f8-9c06-44de-aa6f-bd97620ddd4b",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "body" : "Thanks for the feedback, I agree with both points and will adjust. \r\nI did not find better way than copying without changing DBApi semantics, also, when looking for similar solution saw that that's what some connectors do already - like Exasol one.\r\n",
        "createdAt" : "2021-04-26T18:57:40Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "tags" : [
        ]
      },
      {
        "id" : "c2f6f6de-4813-44ed-aedd-87fb4f07b7c4",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "We could potentially add some \"callbacks\" in the DBHook implementation, but this would mean Airflow 2.1+ compatibility. I am not sure it's worth it. Maybe we could figure out some ways of doing back-compatibility and implement it \"properly\" (like copying the method but use calbacks/original run with callbacks() when available? But I am not sure if it is worth it either.",
        "createdAt" : "2021-04-26T19:09:27Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "9bcab0dc-9a15-444b-a318-82e81b86cbc2",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "body" : "That could possibly allow native [OpenLineage](https://github.com/OpenLineage/OpenLineage) integration in airflow, but that's separate topic :slightly_smiling_face: \r\n\r\n>Maybe we could figure out some ways of doing back-compatibility and implement it \"properly\" (like copying the method but use calbacks/original run with callbacks() when available?\r\n\r\nYes. that makes sense - there's a lot of metadata that some databases expose in a non standard way. One example is `BigQueryExecuteQueryOperator`, which puts job id into xcoms. \r\nFor now, I don't think exposing query id in this particular way in this particular provider will make it in the future. ",
        "createdAt" : "2021-04-26T22:27:42Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "tags" : [
        ]
      },
      {
        "id" : "0de07211-7ef8-43cf-aab2-8543315f0eae",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Open Lineage integration is a cool idea. @bolkedebruin might be interested :) . How about starting discussion about it at the devlist @mobuchowski ? Sounds like a very good idea. ",
        "createdAt" : "2021-04-27T18:40:17Z",
        "updatedAt" : "2021-04-30T13:47:56Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "75ed6e3e-bbd7-408a-8292-1029ea844ae2",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "body" : "We're discussing it internally and will come back with some ideas surely :slightly_smiling_face: ",
        "createdAt" : "2021-04-30T14:15:56Z",
        "updatedAt" : "2021-04-30T14:15:56Z",
        "lastEditedBy" : "4fbcc8c9-81e3-48d7-a5df-ac7ed84f4a38",
        "tags" : [
        ]
      },
      {
        "id" : "2a66c86b-7833-4b87-ac8e-0ae6ec6a60b6",
        "parentId" : "ac60729f-02cc-4070-b137-aba10f04af18",
        "authorId" : "006306e5-73eb-4986-adf2-ffa737f53233",
        "body" : "Is it possible to save the query_ids as the inlets/outlets defined for the LineageBackend? Anyone have an idea of how sending this lineage data to the LineageBackend would be accomplished?",
        "createdAt" : "2021-05-07T14:48:05Z",
        "updatedAt" : "2021-05-07T14:48:06Z",
        "lastEditedBy" : "006306e5-73eb-4986-adf2-ffa737f53233",
        "tags" : [
        ]
      }
    ],
    "commit" : "907611fed82c0afb85a673ee7263c9c9e2df97a7",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +248,252 @@    def get_autocommit(self, conn):\n        return getattr(conn, 'autocommit_mode', False)\n\n    def run(self, sql: Union[str, list], autocommit: bool = False, parameters: Optional[dict] = None):\n        \"\"\""
  },
  {
    "id" : "a65a21c9-d5c8-4dc3-b0f5-ca44296e1624",
    "prId" : 16420,
    "prUrl" : "https://github.com/apache/airflow/pull/16420#pullrequestreview-683693672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6368ed8-9aba-438c-967e-1d745d9820a0",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Can you add a little docs about this env variable to module docsteing? This makes it easier to understand the purpose of this variable in the future",
        "createdAt" : "2021-06-15T00:44:10Z",
        "updatedAt" : "2021-06-15T00:45:12Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "0a6211fa-acb8-4a76-aad7-e53030d98710",
        "parentId" : "d6368ed8-9aba-438c-967e-1d745d9820a0",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I will merge it as it is now - I want to really release providers. We can add it as follow-up.",
        "createdAt" : "2021-06-15T08:11:46Z",
        "updatedAt" : "2021-06-15T08:11:46Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e326075ce9af238e59319f3b0bf91eb50dd88ae2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +181,185 @@            \"session_parameters\": self.session_parameters or session_parameters,\n            # application is used to track origin of the requests\n            \"application\": os.environ.get(\"AIRFLOW_SNOWFLAKE_PARTNER\", \"AIRFLOW\")\n        }\n"
  },
  {
    "id" : "b085907f-717d-4d0f-b6e2-cd018bc71796",
    "prId" : 16420,
    "prUrl" : "https://github.com/apache/airflow/pull/16420#pullrequestreview-683695457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc32809f-cd7c-4a9e-bacf-89b05e861635",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "```suggestion\r\n            # application is used to track origin of the requests\r\n            \"application\": os.environ.get(\"AIRFLOW_SNOWFLAKE_PARTNER\", \"AIRFLOW\")\r\n```",
        "createdAt" : "2021-06-15T08:13:27Z",
        "updatedAt" : "2021-06-15T08:13:27Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e326075ce9af238e59319f3b0bf91eb50dd88ae2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +181,185 @@            \"session_parameters\": self.session_parameters or session_parameters,\n            # application is used to track origin of the requests\n            \"application\": os.environ.get(\"AIRFLOW_SNOWFLAKE_PARTNER\", \"AIRFLOW\")\n        }\n"
  }
]