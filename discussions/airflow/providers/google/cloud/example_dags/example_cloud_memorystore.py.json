[
  {
    "id" : "ee78e785-ce13-4097-a02c-12466f674df4",
    "prId" : 13117,
    "prUrl" : "https://github.com/apache/airflow/pull/13117#pullrequestreview-556581579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Does this suggest a breaking change?",
        "createdAt" : "2020-12-16T23:02:14Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "b6ac0d3d-023e-4f34-a186-4d3758503574",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Yes. Unfortunately yes. Upgrading the library version introduces minor behavioral differences, so we will have to add an update entry for these libraries in UPDATING.md.",
        "createdAt" : "2020-12-17T11:44:10Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "0478e626-6486-4491-9bcd-b3dcf244e303",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "CAan we keep backwards-compatibility? I think we should change our approach and only introduce backwards-incompatible changes in providers if we absolutely must and there is no other way to solve it.",
        "createdAt" : "2020-12-18T10:45:52Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "c4004589-a1d5-4395-aea5-5355eb456a10",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This will be very problematic because this is changed in the third library and we are just passing that object as JSON. These are the consequences of the fact that our operators are only wrappers on the API and the abstraction layer between the third library and the DAG is relatively thin.\r\n\r\nIn my opinion, we need to introduce a breaking change. Otherwise, we will be forced to use old and outdated libraries that will not allow us to use new API fields/features.",
        "createdAt" : "2020-12-18T10:52:53Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "930f7cfd-a219-409f-bae8-48d4baed3f4e",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I added docs.",
        "createdAt" : "2020-12-18T13:01:24Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "fe279538-8f83-4999-baa5-b4ddd3c3b1f2",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Is the list of those modified fields known and fixed ? I guess it should be as it comes from the old version of library which is not going to be updated. I guess the values in Xcom come from another operator of ours, and they contain the values returned by `CloudMemorystoreGetInstanceOperator` - result of `MessageToDict` method call?\r\n\r\nI guess in this case we could -  potentially - make it backwards-compatible by modifying the dictionary returned and copying the values with legacy field names?  How feasible it is ? Maybe in the new library there is already a fixed list of values or even a code that we could use to do it ?",
        "createdAt" : "2020-12-20T09:05:10Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "33b50b5e-e818-44ca-a62c-ecb9bf4786a2",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "The word list is not provided explicitly, but we may try to guess these names when comparing types with similar names in the new version of the library, but this will require creating a large key mapping from one version of the library to the new library.  This key list is also not fixed as new versions of libraries may contain new keys. \r\n\r\nThis has its limitation. If we only replace dict keys based on a predefined list of keys, we can accidentally modify user values as well, because Google libraries not often, but sometimes also store values from the user as a key.\r\nhttps://github.com/googleapis/googleapis/blob/eabe7c0fde64b1451df6ea171b2009238b0df07c/google/cloud/datacatalog/v1/tags.proto#L79\r\nhttps://github.com/googleapis/googleapis/blob/eabe7c0fde64b1451df6ea171b2009238b0df07c/google/cloud/redis/v1/cloud_redis.proto#L276\r\nFor this not to happen, we may collect such cases as path, but we will still have to maintain them. \r\n\r\nPS. Google uses the snake_case convention in protobuff, so with this change, Google tried to standardize all field names. \r\n",
        "createdAt" : "2020-12-20T22:23:10Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "a53763e7-5992-4e0b-8a4d-bde39ae3b181",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "There is one more problem. If we try to rename the keys, then it will not be possible to create an object using this dictionary.\r\n```\r\ninstance_dict = t.xcom_pull('get-instance')\r\ninstance = Instance(**instance_dict)\r\n```",
        "createdAt" : "2020-12-20T22:35:16Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "30bd9622-3513-4da4-b246-49085ad568ac",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "In this case, I think we should put that change on hold and release/merge it together with other breaking changes for google provider. I do not think we have an immediate need to migrate to this new '2.0.0' version. And this should happen IMHO at the point we add more breaking changes together.",
        "createdAt" : "2020-12-21T09:14:25Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "1ea43031-d1c9-4989-90f1-14f47475df4f",
        "parentId" : "674004e1-ba5f-4a00-bed0-788214263f16",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "All right - after the discussion - seems like we have more breaking changes in this \"batch\" so this will be fine to make it backwards incompatible and set version to 2.0.0",
        "createdAt" : "2020-12-21T18:30:48Z",
        "updatedAt" : "2020-12-22T12:13:50Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4b5ead793f02167265f7dd3ce32752029f48ed1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +162,166 @@        task_id=\"gcs-set-acl-permission\",\n        bucket=BUCKET_NAME,\n        entity=\"user-{{ task_instance.xcom_pull('get-instance')['persistence_iam_identity']\"\n        \".split(':', 2)[1] }}\",\n        role=\"OWNER\","
  }
]