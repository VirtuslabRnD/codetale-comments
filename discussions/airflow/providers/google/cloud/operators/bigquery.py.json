[
  {
    "id" : "182df5b6-f4cb-4ccc-876f-ea88ed5bb9c0",
    "prId" : 8477,
    "prUrl" : "https://github.com/apache/airflow/pull/8477#pullrequestreview-401116487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3627dc1-72fe-4eef-9758-9d4e4c7db24a",
        "parentId" : null,
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "This change in order of arguments probably needs a note in UPDATING.md as well",
        "createdAt" : "2020-04-27T14:50:13Z",
        "updatedAt" : "2020-04-27T16:21:25Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      },
      {
        "id" : "8cbf745a-f929-4de7-a020-5caeba8c5822",
        "parentId" : "f3627dc1-72fe-4eef-9758-9d4e4c7db24a",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Added",
        "createdAt" : "2020-04-27T16:21:58Z",
        "updatedAt" : "2020-04-27T16:21:58Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "52166852c38b0265ed097e67d824a5b04bf3794d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1304,1308 @@    def __init__(self,\n                 dataset_resource: dict,\n                 dataset_id: Optional[str] = None,\n                 project_id: Optional[str] = None,\n                 gcp_conn_id: str = 'google_cloud_default',"
  },
  {
    "id" : "4bfe01e8-9f50-4d33-aece-0deca256df6d",
    "prId" : 8858,
    "prUrl" : "https://github.com/apache/airflow/pull/8858#pullrequestreview-413091356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e504a314-2197-43bb-a247-8add3c8da5f8",
        "parentId" : null,
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "Why not put new argument `table_resource` at the end? This way we do not brake backward compatibility if someone was using positional arguments.",
        "createdAt" : "2020-05-16T13:36:46Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      },
      {
        "id" : "72661f2e-8f13-45b8-9ad6-71fbe7c5972c",
        "parentId" : "e504a314-2197-43bb-a247-8add3c8da5f8",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Hint: ``@apply_defaults``",
        "createdAt" : "2020-05-16T14:35:25Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "bc9e0f19-f773-404a-944d-c1a68905ffb7",
        "parentId" : "e504a314-2197-43bb-a247-8add3c8da5f8",
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "Got it, thanks!",
        "createdAt" : "2020-05-16T16:50:26Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfedd51332a9f6e7d4637fc297802667b80ad91b",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +765,769 @@        dataset_id: str,\n        table_id: str,\n        table_resource: Optional[Dict[str, Any]] = None,\n        project_id: Optional[str] = None,\n        schema_fields: Optional[List] = None,"
  },
  {
    "id" : "2fc3415e-83d4-4ff3-896a-31cde716804a",
    "prId" : 8858,
    "prUrl" : "https://github.com/apache/airflow/pull/8858#pullrequestreview-413091368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208d6289-3438-497f-a5dd-552cb058a57e",
        "parentId" : null,
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "Again, why not put `fields` as the last argument?",
        "createdAt" : "2020-05-16T14:19:13Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      },
      {
        "id" : "b3acc737-eed6-4605-8073-75d8ad1c2940",
        "parentId" : "208d6289-3438-497f-a5dd-552cb058a57e",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Hint: ``@apply_defaults``",
        "createdAt" : "2020-05-16T14:35:18Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "b58b49d0-b435-4274-8662-86add95736ec",
        "parentId" : "208d6289-3438-497f-a5dd-552cb058a57e",
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "Got it, thanks!",
        "createdAt" : "2020-05-16T16:50:33Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfedd51332a9f6e7d4637fc297802667b80ad91b",
    "line" : 663,
    "diffHunk" : "@@ -1,1 +1406,1410 @@        self,\n        dataset_resource: dict,\n        fields: Optional[List[str]] = None,\n        dataset_id: Optional[str] = None,\n        project_id: Optional[str] = None,"
  },
  {
    "id" : "c6cf4b32-08e0-45df-9159-81d52b660adf",
    "prId" : 8858,
    "prUrl" : "https://github.com/apache/airflow/pull/8858#pullrequestreview-414246008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "742b46ca-0f0d-45ce-b502-6d1c358af2c5",
        "parentId" : null,
        "authorId" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "body" : "Will it be able to catch `Conflict` exception here without specifying `exists_ok=False` when calling `create_empty_table` method?",
        "createdAt" : "2020-05-19T08:52:39Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e98f6be9-f602-4d12-9ec7-3fcc6d61008a",
        "tags" : [
        ]
      },
      {
        "id" : "89dcbdfd-3cb0-403a-8b53-fc456f8288da",
        "parentId" : "742b46ca-0f0d-45ce-b502-6d1c358af2c5",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Good catch! Will fix",
        "createdAt" : "2020-05-19T09:03:14Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfedd51332a9f6e7d4637fc297802667b80ad91b",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +833,837 @@            self.log.info('Table %s.%s.%s created successfully',\n                          table.project, table.dataset_id, table.table_id)\n        except Conflict:\n            self.log.info('Table %s.%s already exists.', self.dataset_id, self.table_id)\n"
  },
  {
    "id" : "c1d1d744-4bdb-46f7-a481-afaaf6b5c01c",
    "prId" : 8858,
    "prUrl" : "https://github.com/apache/airflow/pull/8858#pullrequestreview-415110997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7bf75d1-4b74-4843-a418-4ee2334b8984",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Should we raise exception when user provide mutully exclussive parameters e.g. table_resource and source_uris?",
        "createdAt" : "2020-05-19T17:19:58Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "ac74cbff-78d3-4123-aaa0-2370d2fe6adf",
        "parentId" : "e7bf75d1-4b74-4843-a418-4ee2334b8984",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I agree. the behaviour is a bit undefined if wrong combination of  parameters is specified. If table_resources is undefined and schema_fields are defined and source_objects and bucket  are, I am not sure what happens here. I think all the \"superfluous\" combinations where same data is provided by different means  should result in exception",
        "createdAt" : "2020-05-19T18:34:05Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "c9700113-f593-4153-991a-5bdc25989216",
        "parentId" : "e7bf75d1-4b74-4843-a418-4ee2334b8984",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I've added an exception ",
        "createdAt" : "2020-05-20T08:35:38Z",
        "updatedAt" : "2020-05-25T12:14:54Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfedd51332a9f6e7d4637fc297802667b80ad91b",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +985,989 @@        ])\n\n        if not table_resource:\n            warnings.warn(\n                \"Passing table parameters via keywords arguments will be deprecated. \""
  },
  {
    "id" : "c1b212aa-c3f6-4f90-85db-459e5f0d0b08",
    "prId" : 8868,
    "prUrl" : "https://github.com/apache/airflow/pull/8868#pullrequestreview-654110570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73a618cf-578a-4bc7-80f4-5578dd935ca3",
        "parentId" : null,
        "authorId" : "e77c229b-b3b9-4d73-839c-1daf194bf0dc",
        "body" : "@turbaszek is this correct? That `airflow.providers.google.cloud.operators.bigquery.BigQueryExecuteQueryOperator` is replaced by `BigQueryInsertJobOperator`? `BigQueryExecuteQueryOperator` seems so much more nice.",
        "createdAt" : "2021-04-14T13:24:52Z",
        "updatedAt" : "2021-04-14T13:24:53Z",
        "lastEditedBy" : "e77c229b-b3b9-4d73-839c-1daf194bf0dc",
        "tags" : [
        ]
      },
      {
        "id" : "0de52440-7da3-4f85-95f0-97866f859fa1",
        "parentId" : "73a618cf-578a-4bc7-80f4-5578dd935ca3",
        "authorId" : "08925dc3-5b7c-419a-a7e9-3212f90b4c4a",
        "body" : "@judoole @turbaszek This is something I've been wondering for a long while. It seems that `BigQueryExecuteQueryOperator` makes the simple case of writing a job that queries data from one table and inserts it onto another so much simpler than `BigQueryInsertJobOperator `. The fact that `BigQueryInsertJobOperator` doesn't provide destination table as a task level parameter, doesn't provide clustering fields as a task level parameter, doesn't provide time_partitioning as a task level parameter but instead forces you to construct your own config fi. Overall it just seems way less friendly to use than `BigQueryInsertJobOperator `.",
        "createdAt" : "2021-05-06T14:17:46Z",
        "updatedAt" : "2021-05-06T14:18:06Z",
        "lastEditedBy" : "08925dc3-5b7c-419a-a7e9-3212f90b4c4a",
        "tags" : [
        ]
      },
      {
        "id" : "c7e2be05-4f85-4112-84d8-12359fc46cc4",
        "parentId" : "73a618cf-578a-4bc7-80f4-5578dd935ca3",
        "authorId" : "e77c229b-b3b9-4d73-839c-1daf194bf0dc",
        "body" : "Hey there @telac. I also asked on the Slack channel, and the deprecation is real and `BigQueryInsertJobOperator` is to be preferred in the future. The gist of it being;\r\n> BigQueryInsertJobOperator  exposes the full capabilities of the API and is easy to maintain.\r\n> The old operator - BigQueryExecuteQueryOperator needs to be updated every time a new fields in API is added.\r\n\r\nI guess personally I will create an in-house `BigQueryExecuteQueryOperator` equivalent Operator that extends from `BigQueryInsertJobOperator` and sets the specific parts we are interested in. For the most parts destination, sql, time_partitioning and write_disposition.",
        "createdAt" : "2021-05-07T06:00:06Z",
        "updatedAt" : "2021-05-07T06:00:06Z",
        "lastEditedBy" : "e77c229b-b3b9-4d73-839c-1daf194bf0dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "516ccead561d79613ea250edb946ad6f70f9fc81",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +549,553 @@            gcp_conn_id = bigquery_conn_id\n\n        warnings.warn(\n            \"This operator is deprecated. Please use `BigQueryInsertJobOperator`.\",\n            DeprecationWarning, stacklevel=3,"
  }
]