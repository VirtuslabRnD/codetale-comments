[
  {
    "id" : "271b2cbd-e375-431f-9298-e7c0e58e7e69",
    "prId" : 6574,
    "prUrl" : "https://github.com/apache/airflow/pull/6574#pullrequestreview-339831845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Do we need two wrappers? Do we use one without the other?",
        "createdAt" : "2019-12-05T12:44:11Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "49bc15d1-f858-4df6-b042-80eff391dc7c",
        "parentId" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Yes, because not every function that has a bucket has also a key as a parameter. I think it makes sense to split them.",
        "createdAt" : "2019-12-05T13:28:06Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "eb4f9a41-e68d-4171-b2ba-1db6fe96e122",
        "parentId" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Does the order of decorators matter?",
        "createdAt" : "2020-01-03T08:26:09Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "287f6552-f89a-4321-b61b-c47ef863b75a",
        "parentId" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "yes. If you provide the bucket_name first from the connection, in case there is one, it won't extract it from the key.",
        "createdAt" : "2020-01-03T20:25:32Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "0ab2e74d-d8fd-4de9-82c4-63923effeaa0",
        "parentId" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I think it's something worth a note somewhere",
        "createdAt" : "2020-01-05T13:34:37Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "b8e2ec3f-ddb5-46c4-88ba-2c9291248686",
        "parentId" : "4cabb907-16be-4f46-9b7e-40af66feb1af",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Hmm. But where? I can't think of a good place for it.",
        "createdAt" : "2020-01-08T12:28:48Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "574aac6993b5e55ffb3c049daed12d465a1539e7",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +272,276 @@\n    @provide_bucket_name\n    @unify_bucket_name_and_key\n    def check_for_key(self, key, bucket_name=None):\n        \"\"\""
  },
  {
    "id" : "e33dc3ee-c1eb-4ad3-9897-4ec4f3c8708f",
    "prId" : 6574,
    "prUrl" : "https://github.com/apache/airflow/pull/6574#pullrequestreview-327582740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "350ca5c7-1cf4-472a-abe3-9c3a39ed8654",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Oh there is an issue I did not test. Using `in` doesn't work at all for searching in a list of tuple matching the specific param. It searches for the complete tuple. ü§¶‚Äç‚ôÇ ",
        "createdAt" : "2019-12-05T14:16:19Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "c9b12e4d-4abe-408d-b19a-aab558fb2d1a",
        "parentId" : "350ca5c7-1cf4-472a-abe3-9c3a39ed8654",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "```python\r\n'bucket_name' not in [('bucket_name', 'my_bucket'), ('key', 'my_key')]\r\nOut[15]: True\r\n```",
        "createdAt" : "2019-12-05T14:17:52Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "105748f5-b965-4351-bb85-4f5c07126a6a",
        "parentId" : "350ca5c7-1cf4-472a-abe3-9c3a39ed8654",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "nvm ü§¶‚Äç‚ôÇ [arguments](https://docs.python.org/3.5/library/inspect.html#inspect.BoundArguments.arguments) is an `OrderedDict` - so it works.",
        "createdAt" : "2019-12-05T14:20:43Z",
        "updatedAt" : "2020-02-24T16:24:04Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "574aac6993b5e55ffb3c049daed12d465a1539e7",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +47,51 @@        bound_args = function_signature.bind(*args, **kwargs)\n\n        if 'bucket_name' not in bound_args.arguments:\n            self = args[0]\n            if self.aws_conn_id:"
  },
  {
    "id" : "105694ac-0888-4b7a-b81f-712c7d1612c2",
    "prId" : 7375,
    "prUrl" : "https://github.com/apache/airflow/pull/7375#pullrequestreview-355797239",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4a79931-df2f-4bff-b998-10754225f12f",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "LGTM, but please mention in the Updating.md that you removed the return statement so that people are aware of this when updating :)\r\n\r\nSome users might have implemented their own operator based on this `delete_objects` method.",
        "createdAt" : "2020-02-09T10:37:12Z",
        "updatedAt" : "2020-02-10T12:44:41Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "8413f4ef-f392-49ab-b7b1-19acd2f23937",
        "parentId" : "e4a79931-df2f-4bff-b998-10754225f12f",
        "authorId" : "6a47ef04-b068-46eb-8a0f-7bdaaa959c68",
        "body" : "Done",
        "createdAt" : "2020-02-10T09:41:55Z",
        "updatedAt" : "2020-02-10T12:44:41Z",
        "lastEditedBy" : "6a47ef04-b068-46eb-8a0f-7bdaaa959c68",
        "tags" : [
        ]
      }
    ],
    "commit" : "15eb29026e451cb7b8a2cb3fc55ce450474714c5",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +626,630 @@            if \"Errors\" in response:\n                errors_keys = [x['Key'] for x in response.get(\"Errors\", [])]\n                raise AirflowException(\"Errors when deleting: {}\".format(errors_keys))"
  },
  {
    "id" : "648b2ee3-6d13-4f7e-8bff-5a58af8c54a4",
    "prId" : 8895,
    "prUrl" : "https://github.com/apache/airflow/pull/8895#pullrequestreview-417369039",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a79f73bd-d3af-4895-b5ff-1388fd3d7571",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\n        :param force_delete: Forcibly delete all objects in the bucket before deleting the bucket\n```",
        "createdAt" : "2020-05-24T15:35:50Z",
        "updatedAt" : "2020-05-29T15:56:02Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "5993646eb502c6728be29aa57929cf8edb485c1b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +672,676 @@        :param bucket_name: Bucket name\n        :type bucket_name: str\n        :param force_delete: Enable this to delete bucket even if not empty\n        :type force_delete: bool\n        :return: None"
  },
  {
    "id" : "0b42e7c2-ffd9-482f-8d4f-a9306895d7cb",
    "prId" : 10164,
    "prUrl" : "https://github.com/apache/airflow/pull/10164#pullrequestreview-695032284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d67876f7-4d64-440c-bda5-ffedb3b5a4ac",
        "parentId" : null,
        "authorId" : "13bbef3a-0f38-4f4a-9afc-1a963e168ffb",
        "body" : "This seems incorrect to have annotated with return type S3Transfer though actual return type is boto3.s3.Object. This is giving pycharm fits due to the mismatched interface. Hopefully no impact at runtime.",
        "createdAt" : "2021-06-17T15:37:12Z",
        "updatedAt" : "2021-06-17T15:37:12Z",
        "lastEditedBy" : "13bbef3a-0f38-4f4a-9afc-1a963e168ffb",
        "tags" : [
        ]
      },
      {
        "id" : "00205374-d217-499a-9639-44ee557d1a45",
        "parentId" : "d67876f7-4d64-440c-bda5-ffedb3b5a4ac",
        "authorId" : "8d8cfe56-ebff-478a-8f59-7153cb2393cf",
        "body" : "Interesting. Could you share the output you are seeing from pycharm? I cannot figure out where the `boto3.s3.Object` is defined. I have been through the `boto3`, `botocore` and `airflow` code as well as [some docs]() but I have not been able to.\r\n\r\nI think we need the [`boto3-type-annotations`](https://pypi.org/project/boto3-type-annotations/) to solve this issue. [Check out this Stack Overflow question also](https://stackoverflow.com/questions/52087307/adding-type-hinting-to-functions-that-return-boto3-objects).\r\n\r\nThis is something `@mik-laj` once brought up in https://github.com/apache/airflow/issues/11297 it looks like. I don't have time to tackle it right now, but I could in the near future.",
        "createdAt" : "2021-06-20T02:03:29Z",
        "updatedAt" : "2021-06-20T02:03:30Z",
        "lastEditedBy" : "8d8cfe56-ebff-478a-8f59-7153cb2393cf",
        "tags" : [
        ]
      },
      {
        "id" : "7b390a1c-3e9c-4fc7-98fa-03156b147155",
        "parentId" : "d67876f7-4d64-440c-bda5-ffedb3b5a4ac",
        "authorId" : "8d8cfe56-ebff-478a-8f59-7153cb2393cf",
        "body" : "Just dropped a comment over in #11297 as well: https://github.com/apache/airflow/issues/11297#issuecomment-864488490",
        "createdAt" : "2021-06-20T02:07:15Z",
        "updatedAt" : "2021-06-20T02:07:16Z",
        "lastEditedBy" : "8d8cfe56-ebff-478a-8f59-7153cb2393cf",
        "tags" : [
        ]
      },
      {
        "id" : "a36362ad-fb8a-4860-a55f-3d217f3db088",
        "parentId" : "d67876f7-4d64-440c-bda5-ffedb3b5a4ac",
        "authorId" : "13bbef3a-0f38-4f4a-9afc-1a963e168ffb",
        "body" : "Thanks, Cooper. Saying it's giving pycharm fits might have been hyperbole by me. It's showing an error message due to the confusion over types:\r\n\r\n> Unresolved attribute reference 'download_fileobj' for class 'S3Transfer'\r\n\r\nWhen I step into the get_key function it's showing rtype as Object:\r\n\r\n>  :rtype: boto3.s3.Object\r\n",
        "createdAt" : "2021-06-28T13:22:22Z",
        "updatedAt" : "2021-06-28T13:22:23Z",
        "lastEditedBy" : "13bbef3a-0f38-4f4a-9afc-1a963e168ffb",
        "tags" : [
        ]
      },
      {
        "id" : "a6ba7488-16c6-4649-8a98-58cb781d2c9d",
        "parentId" : "d67876f7-4d64-440c-bda5-ffedb3b5a4ac",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "https://pypi.org/project/boto3-stubs/ might be a helpful project here.",
        "createdAt" : "2021-06-29T13:26:29Z",
        "updatedAt" : "2021-06-29T13:26:29Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "138b73c6cdd6d1eef2a193348b0887710281c253",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +324,328 @@    @provide_bucket_name\n    @unify_bucket_name_and_key\n    def get_key(self, key: str, bucket_name: Optional[str] = None) -> S3Transfer:\n        \"\"\"\n        Returns a boto3.s3.Object"
  }
]