[
  {
    "id" : "a1d8301a-d93a-44d2-bd3e-55f765391f81",
    "prId" : 7619,
    "prUrl" : "https://github.com/apache/airflow/pull/7619#pullrequestreview-373289700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34262097-0d6f-4a92-b893-c5256f604455",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "In my opinion this would be better to have in the commit message and/or the PR description.\r\n\r\nBut it's fine I guess - not that important to me.",
        "createdAt" : "2020-03-10T11:31:50Z",
        "updatedAt" : "2020-03-12T06:33:10Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "4ff5a306-01d8-4e80-9e98-b3eff4e7f734",
        "parentId" : "34262097-0d6f-4a92-b893-c5256f604455",
        "authorId" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "body" : "Added to the PR description; will quickly add it to the how-to documentation as well :)",
        "createdAt" : "2020-03-12T05:39:45Z",
        "updatedAt" : "2020-03-12T06:33:10Z",
        "lastEditedBy" : "892a0dfc-e8a5-4923-93ad-99df2c9c34db",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e12bf642220e717b4da3687a59db5b0b2a98172",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +256,260 @@            # requests_gssapi will need paramiko > 2.6 since you'll need\n            # 'gssapi' not 'python-gssapi' from PyPi.\n            # https://github.com/paramiko/paramiko/pull/1311\n            import requests_gssapi\n            auth = requests_gssapi.HTTPSPNEGOAuth()"
  },
  {
    "id" : "b12f4cbf-4941-492f-94c2-e53cbbf9883b",
    "prId" : 8534,
    "prUrl" : "https://github.com/apache/airflow/pull/8534#pullrequestreview-401033532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "parentId" : null,
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "I think we should not use `Optional ` here. Should only use in default `None`, am I wrong?",
        "createdAt" : "2020-04-26T01:23:11Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "8b8288d7-331d-4917-903e-623db4395a54",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "body" : "Optional is a valid type annotation here because we allow user to explicitly pass None as the value.",
        "createdAt" : "2020-04-26T03:36:38Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "tags" : [
        ]
      },
      {
        "id" : "92760b2b-39aa-4335-aff0-9d51310c3eb3",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "I not sure about that, I init think it should be use only if default value equal to `None`",
        "createdAt" : "2020-04-26T05:06:10Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "7cd07d89-4330-4152-90d2-a827c876d385",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "@turbaszek @potiuk https://docs.python.org/3/library/typing.html#typing.Optional WDYT",
        "createdAt" : "2020-04-26T05:06:56Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "5b8deebf-4d6d-4aa8-ac37-a0c7e421d4da",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "@zhongjiajie is right:\r\n> Optional[X] is equivalent to Union[X, None].\r\n\r\nwe should use `aws_conn_id: str = \"aws_default\"` because passing `None` will cause an error (probably) ",
        "createdAt" : "2020-04-26T13:21:29Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "03969d1c-fbf0-4d48-97b6-463b7c5214d1",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This does not cause error for AWS.  AWS hooks should support falling back to using default credential chain lookup behavior when connection id is not specified.\r\n\r\n",
        "createdAt" : "2020-04-26T13:43:52Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "2d3d0d21-917a-4c2f-9601-426f642317a2",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> This does not cause error for AWS. AWS hooks should support falling back to using default credential chain lookup behavior when connection id is not specified.\r\n\r\nThat's why I used \"probably\" because I don't know AWS hook behavior. Still we should use this:\r\n```\r\naws_conn_id: str = \"aws_default\"\r\n```\r\nor this:\r\n```\r\naws_conn_id: Optional[str] = None\r\n```",
        "createdAt" : "2020-04-26T13:46:23Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "dca999c5-ee30-46a3-afa4-1abee4ef0fb9",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "> This does not cause error for AWS. AWS hooks should support falling back to using default credential chain lookup behavior when connection id is not specified.\r\n\r\n!!!!!!! Wow, I don't know aws have this behavior!",
        "createdAt" : "2020-04-26T14:02:22Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "1a049d69-e441-4e03-8469-19893642956b",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This PR is just about to bring back this behavior. `fix: aws hook should work without conn id`",
        "createdAt" : "2020-04-26T14:22:09Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "3218ad6e-371c-41cd-be81-68ad40c3dbde",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "For GCP, we used a different behavior. GCP always need a connection because it defines connection information. A special connection mode is ADC expressed by connection configuration. ADC is the default configuration in Airflow.\r\n```\r\n    `Application Default Credentials`_ provides an easy way to obtain\r\n    credentials to call Google APIs for server-to-server or local applications.\r\n    This function acquires credentials from the environment in the following\r\n    order:\r\n\r\n    1. If the environment variable ``GOOGLE_APPLICATION_CREDENTIALS`` is set\r\n       to the path of a valid service account JSON private key file, then it is\r\n       loaded and returned. The project ID returned is the project ID defined\r\n       in the service account file if available (some older files do not\r\n       contain project ID information).\r\n    2. If the `Google Cloud SDK`_ is installed and has application default\r\n       credentials set they are loaded and returned.\r\n\r\n       To enable application default credentials with the Cloud SDK run::\r\n\r\n            gcloud auth application-default login\r\n\r\n       If the Cloud SDK has an active project, the project ID is returned. The\r\n       active project can be set using::\r\n\r\n            gcloud config set project\r\n\r\n    3. If the application is running in the `App Engine standard environment`_\r\n       then the credentials and project ID from the `App Identity Service`_\r\n       are used.\r\n    4. If the application is running in `Compute Engine`_ or the\r\n       `App Engine flexible environment`_ then the credentials and project ID\r\n       are obtained from the `Metadata Service`_.\r\n    5. If no credentials are found,\r\n       :class:`~google.auth.exceptions.DefaultCredentialsError` will be raised.\r\n\r\n    .. _Application Default Credentials: https://developers.google.com\\\r\n            /identity/protocols/application-default-credentials\r\n    .. _Google Cloud SDK: https://cloud.google.com/sdk\r\n    .. _App Engine standard environment: https://cloud.google.com/appengine\r\n    .. _App Identity Service: https://cloud.google.com/appengine/docs/python\\\r\n            /appidentity/\r\n    .. _Compute Engine: https://cloud.google.com/compute\r\n    .. _App Engine flexible environment: https://cloud.google.com\\\r\n            /appengine/flexible\r\n    .. _Metadata Service: https://cloud.google.com/compute/docs\\\r\n            /storing-retrieving-metadata\r\n```",
        "createdAt" : "2020-04-26T14:26:25Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "293eb499-5b81-472a-bb49-315231cbc757",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "There is only one exception to this rule in Airflow 1.10.x, which has been fixed in Airflow 2.0 - GKEPodOperator.",
        "createdAt" : "2020-04-26T14:27:56Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "b5772f07-8d89-4808-9be6-52d8d5fca62f",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Authorization using the metaserver is particularly problematic, because the server may have wider rights than we expect the instance user to have. Example: The server may have read / write access to Stackdriver logs, but the user should not have these privileges. The similar thing is with system buckets that the server can use, but the user should not be able to modify them. A similar thing looks like system buckets that the server can use, but the user should not be able to modify them.",
        "createdAt" : "2020-04-26T14:37:28Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "3e21caa0-3752-4698-966a-6ed49b981a3a",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "body" : "the wording in the documentation linked by @zhongjiajie is a little bit misleading, which probably caused confusion between `Optional` type and optional argument.\r\n\r\n`def foo(a: Optional[str] = 'test'):` tells mypy that argument `a` needs to be either `None` or a `str`. Since the default value `'test'` is a string, this is a valid use of `Optional` type annotation. `a: Optional[str] = None` is also a valid annotation.\r\n\r\nIf we allow `a` to take `None` as value, but annotate it as `def foo(a: str='test')`, then mypy will not be able to catch errors like `b = a + '_suffix'` because the annotation `str` tells mypy that `a` will always be a string. Mypy will also prevent users from calling `foo` with `foo(None)` due to missing `Optional` in the type annotation, which is not what we want.\r\n\r\nBehavior wise, both `aws_conn_id: Optional[str] = None` and `aws_conn_id: Optional[str] = 'aws_default'` will work for aws hook. I kept it to `aws_conn_id: Optional[str] = 'aws_default'` because that's what it used to be. I don't know if it's going to break anything if default is changed to `None` since there might be users out there actually using `aws_default` connection as the way to inject global aws credential instead of using default credential chain lookup.\r\n\r\nIn AWS land, the best practice is to use default credential chain lookup, so `aws_conn_id: Optional[str] = None` would be better. It's up to us whether we are willing risk breaking existing users in order to adopt a better practice. I don't have a strong opinion on this, but if anyone thinks we should take the chance for airflow 2.0, I am open to change it to `None`.",
        "createdAt" : "2020-04-26T18:54:13Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "tags" : [
        ]
      },
      {
        "id" : "2dd5bed3-f72b-42f8-8b73-0bb2cd40492d",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> the wording in the documentation linked by @zhongjiajie is a little bit misleading, which probably caused confusion between `Optional` type and optional argument.\r\n\r\nI can quite agree. In fact, I think introducing types in dynamically typed langauge creates more confusion that in statically typed one. In most places in airflow, I think we are using `Optional` when the default value is `None`",
        "createdAt" : "2020-04-26T23:33:14Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "671b4d73-d7d5-43a8-8f14-3ea814fe66c5",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I also do not have a strong opinion, but I wanted to present the GCP approach for comparison.",
        "createdAt" : "2020-04-27T01:06:00Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "3a0ad1ee-8403-4bf5-86d7-672d2f7ba642",
        "parentId" : "3385b09f-bb21-4eb8-aeff-f4fcced86599",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "> > the wording in the documentation linked by @zhongjiajie is a little bit misleading, which probably caused confusion between `Optional` type and optional argument.\r\n> \r\n> I can quite agree. In fact, I think introducing types in dynamically typed langauge creates more confusion that in statically typed one. In most places in airflow, I think we are using `Optional` when the default value is `None`\r\n\r\nYep, It's a little confusion here, thanks for the clarification. And maybe we better keep default value not equal to None.",
        "createdAt" : "2020-04-27T14:54:22Z",
        "updatedAt" : "2020-04-27T16:28:52Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6d767dc4063ca4452b45305ec9d9d046030e518",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +64,68 @@    def __init__(\n            self,\n            aws_conn_id: Optional[str] = \"aws_default\",\n            verify: Union[bool, str, None] = None,\n            region_name: Optional[str] = None,"
  }
]