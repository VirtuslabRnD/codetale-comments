[
  {
    "id" : "a1bb8831-1329-43a5-bc32-e5961197ea14",
    "prId" : 4723,
    "prUrl" : "https://github.com/apache/airflow/pull/4723#pullrequestreview-204604243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c897b2e6-5895-4040-aa23-10a82e3f3514",
        "parentId" : null,
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "Should we check if `self.parameters` is None in `get_records` function?\r\n```suggestion\r\n        if self.parameters:\r\n            records = hook.get_records(self.sql, self.parameters)\r\n        else:\r\n            records = hook.get_records(self.sql)\r\n```",
        "createdAt" : "2019-02-18T01:43:40Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "a80169cb-1779-4f8d-a36f-1069d45abb44",
        "parentId" : "c897b2e6-5895-4040-aa23-10a82e3f3514",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Hi @zhongjiajie, It's not necessary to do this check here, as it's already handled inside `hook.get_records`.\r\n\r\nYou can refer to https://github.com/apache/airflow/blob/master/airflow/hooks/dbapi_hook.py#L98",
        "createdAt" : "2019-02-18T01:51:48Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "e800ae87-6902-4f30-8817-bfce58a2daa3",
        "parentId" : "c897b2e6-5895-4040-aa23-10a82e3f3514",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "@XD-DENG Ok, I get it, thinks",
        "createdAt" : "2019-02-18T02:47:23Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1acc5508a4b9aaa7c98104ba31ab0623c95f4aa",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +62,66 @@\n        self.log.info('Poking: %s (with parameters %s)', self.sql, self.parameters)\n        records = hook.get_records(self.sql, self.parameters)\n        if not records:\n            return False"
  },
  {
    "id" : "855bad31-b214-4991-a7ca-a2d55d97d6d7",
    "prId" : 4723,
    "prUrl" : "https://github.com/apache/airflow/pull/4723#pullrequestreview-205005600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "Do all the sql type hooks(druid, mysql, postgres etc) are all inherited from dbapi hook? If that's case, the change LGTM",
        "createdAt" : "2019-02-18T07:09:45Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "36ff2cd9-0888-4271-9031-ba7a92ea1f21",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "If not, we should change that hook to inherit from dbapi hook.",
        "createdAt" : "2019-02-18T07:10:32Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "a6a36130-6dd5-4cad-8692-704743ee31b4",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Yes, hooks of druid, mysql, mssql, Postgres, oracle etc are all inherited from dbapi hook.\r\n\r\nreference:\r\n- https://github.com/apache/airflow/blob/master/airflow/hooks/mssql_hook.py#L25\r\n- https://github.com/apache/airflow/blob/master/airflow/hooks/mysql_hook.py#L28\r\n- https://github.com/apache/airflow/blob/master/airflow/hooks/oracle_hook.py#L29\r\n- https://github.com/apache/airflow/blob/master/airflow/hooks/postgres_hook.py#L28\r\n\r\nFor `SqlSensor`, the `get_hook()` in `BaseHook.get_connection(self.conn_id).get_hook()` will decide which exact hook to use based on the connection type (reference: https://github.com/apache/airflow/blob/master/airflow/models/connection.py#L184).",
        "createdAt" : "2019-02-18T07:26:51Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "70305b5d-a020-4761-b800-ce7f0befff6e",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "But I check`CloudSqlDatabaseHook `(https://github.com/apache/airflow/blob/6b38649fa6cdf16055c7f5458050c70f39cac8fd/airflow/contrib/hooks/gcp_sql_hook.py#L669) which doesn't seem to inherit from dbapi hook. \r\n\r\nBut the I assume the sqlSensor could use CloudSqlDatabasehook? Given there are many connection hooks defined, a safer approach would be check if the hook is an instance of dbapi hook, use the `records = hook.get_records(self.sql, self.parameters)`, otherwise fall back to `records = hook.get_records(self.sql)`. what you think?",
        "createdAt" : "2019-02-18T07:36:26Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "89d1d9c5-7cc9-4356-b927-60d6399863c9",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Actually `SqlSensor` can not support `CloudSqlDatabaseHook`. \r\n\r\nEventually `SqlSensor` uses `get_records` method to retrieve the records from DB, while `get_records` method is not available in `CloudSqlDatabaseHook` at all.",
        "createdAt" : "2019-02-18T08:09:54Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "1bb78f62-58bf-4cf7-8060-5d92f8ea89af",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "I see, but would a check on hook type be safer?",
        "createdAt" : "2019-02-19T02:01:53Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "30965692-befd-48a2-83fa-ef5bedc9fe78",
        "parentId" : "66f95e98-f439-4c6b-83df-658f1a6f0f54",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Get what you mean.\r\n\r\nGiven the limitation in https://github.com/apache/airflow/blob/master/airflow/models/connection.py#L184 and the implementation of each hook, only the connection types below are supported by `SqlSensor`:\r\n\r\n- 'google_cloud_platform'\r\n- 'jdbc'\r\n- 'mssql'\r\n- 'mysql'\r\n- 'oracle'\r\n- 'postgres'\r\n- 'presto'\r\n- 'sqlite'\r\n- 'vertica'\r\n\r\nI will add a check.",
        "createdAt" : "2019-02-19T02:21:15Z",
        "updatedAt" : "2019-02-20T23:49:11Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1acc5508a4b9aaa7c98104ba31ab0623c95f4aa",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +62,66 @@\n        self.log.info('Poking: %s (with parameters %s)', self.sql, self.parameters)\n        records = hook.get_records(self.sql, self.parameters)\n        if not records:\n            return False"
  },
  {
    "id" : "114288cb-321c-4004-8a0d-a2a0a3e4bf1f",
    "prId" : 5688,
    "prUrl" : "https://github.com/apache/airflow/pull/5688#pullrequestreview-276260973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2f5902e-1be2-4011-8a4f-0c1ba9731af3",
        "parentId" : null,
        "authorId" : "a1587925-b1c0-4469-a592-51497b162e71",
        "body" : "> An allow_null parameter exclude 'None' results from failure criteria.\r\n\r\n'None' was never part of failure criteria; `None` was implicitly part of the default _success_ criteria, since it was not on the \"keep poking\" list, and success is defined by negation.",
        "createdAt" : "2019-08-18T05:10:53Z",
        "updatedAt" : "2019-08-19T17:10:31Z",
        "lastEditedBy" : "a1587925-b1c0-4469-a592-51497b162e71",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2cff7144e33145ac8fa4e7956d37633632da3ec",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +30,34 @@    Runs a sql statement repeatedly until a criteria is met. It will keep trying until\n    success or failure criteria are met, or if the first cell is not in (0, '0', '', None).\n    An allow_null parameter exclude 'None' results from failure criteria.\n    Optional success and failure callables are called with the first cell returned as the argument.\n    If success callable is defined the sensor will keep retrying until the criteria is met."
  },
  {
    "id" : "364f6ec7-bf61-4e14-b93a-11c74608dfc1",
    "prId" : 5688,
    "prUrl" : "https://github.com/apache/airflow/pull/5688#pullrequestreview-281393762",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5049270b-b47d-43cd-b0be-5fd08de379c5",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        return first_cell is not None and str(first_cell) not in ('0', '')\r\n``",
        "createdAt" : "2019-08-29T11:32:46Z",
        "updatedAt" : "2019-08-29T11:32:46Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "2bfdfea1-3fe7-4ce2-a75e-4ef2fe8d533b",
        "parentId" : "5049270b-b47d-43cd-b0be-5fd08de379c5",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "(And although not  a new bug, this won't work if the type is floating point, that would give us 0.0 as a value)",
        "createdAt" : "2019-08-29T11:35:27Z",
        "updatedAt" : "2019-08-29T11:35:27Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2cff7144e33145ac8fa4e7956d37633632da3ec",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +105,109 @@        if self.allow_null:\n            return str(first_cell) not in ('0', '')\n        return str(first_cell) not in ('0', '', 'None')"
  }
]