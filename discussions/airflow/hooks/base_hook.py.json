[
  {
    "id" : "30e21ef8-a757-42ee-b5c4-fcb1d366b7fc",
    "prId" : 254,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bee61d03-73eb-4433-83a3-f50bbad559d9",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "Let's use a prefix for env vars as a module constant:\n\n```\nCONN_ENV_PREFIX = 'AIRFLOW_CONN_'\n```\n",
        "createdAt" : "2015-08-31T20:50:56Z",
        "updatedAt" : "2015-08-31T22:37:26Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bc95e230c3740aa3d601a17670b72c23a1dcfa4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@import os\nimport random\n\nfrom airflow import settings\nfrom airflow.models import Connection"
  },
  {
    "id" : "84fdfca7-5e7d-408f-a7bf-8a858a74d583",
    "prId" : 354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b2a2351-ca9c-437a-b803-a891e3af21dd",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "I changed that to enforce upper case env vars as in `AIRFLOW_CONN_AIRFLOW_DB`\n",
        "createdAt" : "2015-09-03T06:20:46Z",
        "updatedAt" : "2015-09-03T06:20:46Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8e84800eb015a8cbafe1196ba448eb7a120499a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +39,43 @@    @classmethod\n    def get_connection(cls, conn_id):\n        environment_uri = os.environ.get(CONN_ENV_PREFIX + conn_id.upper())\n        conn = None\n        if environment_uri:"
  },
  {
    "id" : "0c3a1d08-b4c0-42aa-ac92-8e9cbe4b8a4c",
    "prId" : 4926,
    "prUrl" : "https://github.com/apache/airflow/pull/4926#pullrequestreview-215365539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e7ec30-28f7-4f67-80c2-4ea3767ba171",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "In my other projects, we use the following syntax:\r\n```\r\ndef get_connections(cls, conn_id : str) -> Iterable[Connection]:\r\n```\r\n\r\nI wonder whether there is a preferred style of mypy syntax.",
        "createdAt" : "2019-03-17T06:19:26Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "ef3bae34-e319-43ab-873f-eb0737449d65",
        "parentId" : "d1e7ec30-28f7-4f67-80c2-4ea3767ba171",
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "Or is it because we need to support py27 in Airflow?",
        "createdAt" : "2019-03-17T06:19:56Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "0c8b15f7-a7fc-4f16-b3f9-a24a665bf2c2",
        "parentId" : "d1e7ec30-28f7-4f67-80c2-4ea3767ba171",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Yep, we have to use this syntax as long as we're supporting python2: https://mypy.readthedocs.io/en/latest/python2.html. If we drop python2 support, we can switch to python3-style annotations.",
        "createdAt" : "2019-03-17T17:12:09Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e751f4980b12602bf8c494c5cae6bbe7a774507",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +69,73 @@\n    @classmethod\n    def get_connections(cls, conn_id):  # type: (str) -> Iterable[Connection]\n        conn = cls._get_connection_from_env(conn_id)\n        if conn:"
  },
  {
    "id" : "037d4a84-265a-4de8-957b-2c42aff5bd0b",
    "prId" : 5327,
    "prUrl" : "https://github.com/apache/airflow/pull/5327#pullrequestreview-242010852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54199097-2e80-4839-91af-c61e3dce2722",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It's a bummer. But maybe we could consider moving this method out of BaseHook module. It is used in just a handful of places, and maybe simply we could define an auto_hook.py (or similar) module with just one get_hook() method - importing base_hook from the base_hook.py ? That would solve the string future reference problem. ",
        "createdAt" : "2019-05-25T17:54:32Z",
        "updatedAt" : "2019-05-25T17:57:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82c2f6afec272c2f2f0fb5e32cca5196178454b7",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +81,85 @@\n    @classmethod\n    def get_hook(cls, conn_id: str) -> \"BaseHook\":\n        # TODO: set method return type to BaseHook class when on 3.7+. See https://stackoverflow.com/a/33533514/3066428  # noqa: E501\n        connection = cls.get_connection(conn_id)"
  },
  {
    "id" : "cc4b065d-98ff-4ce1-83e0-1deefed560b4",
    "prId" : 10192,
    "prUrl" : "https://github.com/apache/airflow/pull/10192#pullrequestreview-540854967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ffa8502-991f-4aa1-9fe0-f37ceddd2061",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n            PendingDeprecationWarning,\r\n            stacklevel=2,\r\n```",
        "createdAt" : "2020-11-30T12:18:21Z",
        "updatedAt" : "2020-11-30T14:26:58Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7a8037258722677ef222859ec444d7e105ff4c9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +47,51 @@            \"`BaseHook.get_connections` method will be deprecated in the future.\"\n            \"Please use `BaseHook.get_connection` instead.\",\n            PendingDeprecationWarning,\n            stacklevel=2,\n        )"
  },
  {
    "id" : "c552ae8d-7384-46d1-bdef-8aaa25b18414",
    "prId" : 12558,
    "prUrl" : "https://github.com/apache/airflow/pull/12558#pullrequestreview-546477493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1ef124-ccf9-45a1-bb9a-4631b0ef2e47",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "This protocol is only informational. But I found it is nice to describe what functionality the custom Hook can have.",
        "createdAt" : "2020-12-07T19:42:52Z",
        "updatedAt" : "2020-12-08T13:01:52Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ad0ffc2211b5a321de0d6b6ae82a14bb46c36f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +92,96 @@        \"\"\"Returns connection for the hook.\"\"\"\n        raise NotImplementedError()\n\n\nclass DiscoverableHook(Protocol):"
  }
]