[
  {
    "id" : "75be0e3c-dca7-457a-8b6d-6f6fe7e9ea68",
    "prId" : 6596,
    "prUrl" : "https://github.com/apache/airflow/pull/6596#pullrequestreview-325843841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89e3dc75-42b5-4eb0-a58f-d5dfa36fd557",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I remember the discussion (in one of the old PRs) where adding assert in the code was highly discouraged. One of the reason I think was https://stackoverflow.com/a/1838411/5691525 \r\n\r\n>\"assert\" statements are removed when the compilation is optimized.",
        "createdAt" : "2019-12-02T23:29:02Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "5144f73a-752b-4db6-b11c-e81b1afdcb32",
        "parentId" : "89e3dc75-42b5-4eb0-a58f-d5dfa36fd557",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Found it: https://github.com/apache/airflow/pull/3690",
        "createdAt" : "2019-12-02T23:32:23Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "db97df92-1a42-4386-9365-9057b1c9765a",
        "parentId" : "89e3dc75-42b5-4eb0-a58f-d5dfa36fd557",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think I had added 1 in Serialization code too, I will remove it soon",
        "createdAt" : "2019-12-02T23:33:12Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "b967d593-ac3e-4fef-9d8d-dacfb2d93762",
        "parentId" : "89e3dc75-42b5-4eb0-a58f-d5dfa36fd557",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "If we do not want to use asserts we should (now we can with pre-commits) fail if someone adds it, not only remove them. \r\n\r\nHowever I would not dismiss the asserts immediately and easily. They are so much nicer to read in the code.\r\n\r\nIndeed \"-O\" option removes the asserts but this is pretty much everything it does (from Python docs):\r\n\r\n> Remove assert statements and any code conditional on the value of _ _ debug _ _. Augment the filename for compiled (bytecode) files by adding .opt-1 before the .pyc extension (see PEP 488). See also PYTHONOPTIMIZE.\r\n\r\nI am not sure if we plan to use -O. However even if we use it, I think pretty much all those asserts are really of \"This should never happen\" case. Those places I removed the asserts were really the \"impossible\" cases that we should never get to. Even if we do, we will fail rather sooner than later when trying to execute a method of a None field. I am happy to review all the assert code and see if that's the case (it was like that in my places as it was really mypy complaining that Optional[type] has no some method when it's None. So the worse case we will just get slightly less meaningful message requiring to take a look at the source code.\r\n\r\nOne comment:\r\n\r\nWe do not use _ _ debug _ _ anywhere in our code - I also checked all the libraries and there are just a few places where _ _ debug _ _ is used:\r\n\r\n```\r\n./site-packages/_pytest/assertion/rewrite.py:PYC_EXT\r\n./site-packages/bleach/_vendor/html5lib/_inputstream.py:\r\n./site-packages/click/_unicodefun.py:\r\n./site-packages/click/core.py:\r\n./site-packages/click/types.py:\r\n./site-packages/coverage/parser.py:\r\n./site-packages/flask_openid.py:\r\n./site-packages/future/backports/test/support.py:\r\n./site-packages/jinja2/nodes.py:if\r\n./site-packages/jinja2/runtime.py:\r\n./site-packages/mypy/newsemanal/semanal.py:\r\n./site-packages/mypy/semanal_pass1.py:\r\n./site-packages/pandas/core/reshape/merge.py:if\r\n./site-packages/parso/python/errors.py:\r\n./site-packages/pip/_vendor/distlib/_backport/misc.py:\r\n./site-packages/pip/_vendor/distlib/compat.py:\r\n./site-packages/pip/_vendor/html5lib/_inputstream.py:\r\n./site-packages/py2app/util.py:\r\n./site-packages/pygments/lexers/modula2.py:\r\n./site-packages/pygments/lexers/nit.py:\r\n./site-packages/werkzeug/wrappers/base_response.py:\r\n```\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-12-03T01:11:33Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0904b516d3537e9ca52592972e6380ee6fb25125",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +36,40 @@        if cluster_address is None:\n            cluster_address = conf.get('dask', 'cluster_address')\n        assert cluster_address, 'Please provide a Dask cluster address in airflow.cfg'\n        self.cluster_address = cluster_address\n        # ssl / tls parameters"
  },
  {
    "id" : "ccde547d-f7aa-4d8a-9e7f-5b1df7ab667c",
    "prId" : 6596,
    "prUrl" : "https://github.com/apache/airflow/pull/6596#pullrequestreview-326488978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0784bcdf-ef39-47d3-aec9-7c5b2b078088",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I would probably leave the `if` conditions instead of asserts",
        "createdAt" : "2019-12-02T23:34:43Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "5c1e75d9-7e33-4805-9a7c-7de8960ca5ec",
        "parentId" : "0784bcdf-ef39-47d3-aec9-7c5b2b078088",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I am happy to discuss it and see other's opinion there.  I was myself doubtful about asserts but they are really nicer and in many cases they simply make sense (see above) my comments. And if we discourage asserts we should remove them everywhere (they were used in other parts of the code).",
        "createdAt" : "2019-12-03T01:17:26Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "32359e3b-4fc3-4235-af23-52d66c8b05fd",
        "parentId" : "0784bcdf-ef39-47d3-aec9-7c5b2b078088",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I think this is a good case for asserts.\r\n\r\nUnder normal circumstances they should pass, and it's only if you're developing really that you might get this wrong, so having this be asserts that could be disabled by `python -O` seems like the right thing to do.",
        "createdAt" : "2019-12-03T12:31:14Z",
        "updatedAt" : "2019-12-03T13:41:00Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "d8f47c4a-c087-4e48-9c54-5c8fcfd62fb7",
        "parentId" : "0784bcdf-ef39-47d3-aec9-7c5b2b078088",
        "authorId" : "ac874905-6434-4bcb-9da4-7c323279bcf0",
        "body" : "I'd rather check our options first. How we may avoid assertions.\r\n\r\n1. If we need a oneliner: `if not self.futures: raise Error(NOT_STARTED_MESSAGE)`. It is not very elegant but easy to understand.\r\n\r\n1. Another option to consider is writing a single checker and call it wether we need it:\r\n\r\n    ```python\r\n    def _check_started(self):\r\n            if None in (self.client, self.futures):\r\n                raise AirflowError(NOT_STARTED_MESSAGE)\r\n    ```\r\n\r\n1. Or go more pythonic and introduce decorator.\r\n    \r\n    ```python\r\n    def check_futures(fn):\r\n        def wrapped(self):\r\n            if not self.futures:\r\n                raise AirflowError(NOT_STARTED_MESSAGE)```\r\n        return wrapped\r\n\r\n    @check_futures\r\n    def execute_async()\r\n        <...>\r\n    ```\r\n\r\n1. If we expect that some methods need some time to wait for executor start, [tenacity](https://tenacity.readthedocs.io/en/latest) could be useful:\r\n    \r\n    ```python\r\n    from tenacity import retry\r\n\r\n    @retry(stop=stop_after_attempt(3))\r\n    def execute_async()\r\n        try:\r\n            <...>\r\n        except Exception:\r\n            raise AirflowError(NOT_STARTED_MESSAGE)\r\n    ```\r\n\r\nMy vote goes to decorator solution -- either 3 or 4. Anyway, I think assertions could be occasionally useful for internal checks only. Like you checking all good and raise _your_ exception with meaningful message to end user. Otherwise it looks like a dirty hack. Just a simple AssertionError would confuse average pythonist as developer expects (and official docs clearly states that) assertion usage in test environment only. Confusion harm would outweight readability benefit.\r\n",
        "createdAt" : "2019-12-03T22:16:03Z",
        "updatedAt" : "2019-12-03T22:43:59Z",
        "lastEditedBy" : "ac874905-6434-4bcb-9da4-7c323279bcf0",
        "tags" : [
        ]
      },
      {
        "id" : "729a0154-560b-4c4b-b267-fc5f502175ba",
        "parentId" : "0784bcdf-ef39-47d3-aec9-7c5b2b078088",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "solution no.3 is not mypy compatibilie. It is not too smart to understand this. Most often, we want to have assertions to make pylint happy.",
        "createdAt" : "2019-12-03T22:21:32Z",
        "updatedAt" : "2019-12-03T22:21:32Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "0904b516d3537e9ca52592972e6380ee6fb25125",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +64,68 @@                      queue: Optional[str] = None,\n                      executor_config: Optional[Any] = None) -> None:\n        assert self.futures, NOT_STARTED_MESSAGE\n\n        def airflow_run():"
  },
  {
    "id" : "2e227a2c-6a94-41f4-9e92-6aaeb5375566",
    "prId" : 6749,
    "prUrl" : "https://github.com/apache/airflow/pull/6749#pullrequestreview-328577213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1c1cdfc-1d9a-47d6-a266-152eea8bfb52",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "```suggestion\r\n        if not self.client or not self.futures:\r\n```",
        "createdAt" : "2019-12-07T21:54:22Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "9352ebc3-1449-476f-84e8-66766fb5e911",
        "parentId" : "c1c1cdfc-1d9a-47d6-a266-152eea8bfb52",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I prefer not to. Those check should be separated out, because if they fail due to programmatic error you should kno which value was null. With or you never know which was null.",
        "createdAt" : "2019-12-07T21:56:38Z",
        "updatedAt" : "2019-12-08T22:44:08Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f633f1a0eccdc81f9dcfed45c01f5c7dd1dbbe",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +101,105 @@\n    def end(self) -> None:\n        if not self.client:\n            raise AirflowException(NOT_STARTED_MESSAGE)\n        if not self.futures:"
  }
]