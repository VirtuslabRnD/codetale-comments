[
  {
    "id" : "36d2d80e-6b37-4e5f-ae18-52d10b228a67",
    "prId" : 6715,
    "prUrl" : "https://github.com/apache/airflow/pull/6715#pullrequestreview-328312580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0052de2-e48e-416f-93fc-b72880bdb537",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "We should probably add this to our JSON Schema. Something like this is the part of the schema we want for op_links:\r\n\r\n```json\r\n{ \"type\": \"array\",\r\n  \"items\": {\r\n    \"type\": \"object\",\r\n    \"minProperties\": 1,\r\n    \"maxProperties\": 1\r\n  }\r\n}\r\n```",
        "createdAt" : "2019-12-06T15:50:56Z",
        "updatedAt" : "2019-12-06T20:43:26Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "80952c27-8123-406f-bf2e-86b7ee487cff",
        "parentId" : "e0052de2-e48e-416f-93fc-b72880bdb537",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This line took me a bit to work out what it's doing -- It modifies it in place, but `_operator_link_class, data = _operator_links_source.popitem()` works and is a bit clearer to me. What do you think?\r\n(Don't know if that works for py2, which isn't a problem here but is when backporting this)",
        "createdAt" : "2019-12-06T15:53:12Z",
        "updatedAt" : "2019-12-06T20:43:26Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "18c03b94-1d00-4620-be8a-1bb09c77f1bf",
        "parentId" : "e0052de2-e48e-416f-93fc-b72880bdb537",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Done",
        "createdAt" : "2019-12-06T16:26:19Z",
        "updatedAt" : "2019-12-06T20:43:26Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "3596a426ed57be55d6255fd3bbcce2c6273c3646",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +402,406 @@            #   ('airflow.gcp.operators.bigquery.BigQueryConsoleIndexableLink', {'index': 0})\n\n            _operator_link_class, data = list(_operator_links_source.items())[0]\n\n            if _operator_link_class in registered_operator_link_classes:"
  },
  {
    "id" : "550335fb-6b05-4045-b017-914b75ddb258",
    "prId" : 7092,
    "prUrl" : "https://github.com/apache/airflow/pull/7092#pullrequestreview-339395908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6942370c-7e13-4921-ac45-e2843ade4b24",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "If something has a default of None and a user explicitly passes in None, does this change now mean we store it sa `null` in the JSON?",
        "createdAt" : "2020-01-07T17:39:49Z",
        "updatedAt" : "2020-01-07T17:43:35Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "f4de8c8d-4cbd-487e-a226-d64ccec39251",
        "parentId" : "6942370c-7e13-4921-ac45-e2843ade4b24",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "No it is excluded because of the following function:\r\n\r\nhttps://github.com/apache/airflow/blob/e6f2e19912a1c588c79bb8ac137d09d6789d8126/airflow/serialization/serialized_objects.py#L107-L114",
        "createdAt" : "2020-01-07T17:41:26Z",
        "updatedAt" : "2020-01-07T17:43:35Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2f4e24cefaaac628d965383756c91cae750ae3b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +259,263 @@        \"\"\"\n        if attrname in cls._CONSTRUCTOR_PARAMS and \\\n                (cls._CONSTRUCTOR_PARAMS[attrname].default is value or (value in [{}, []])):\n            return True\n        return False"
  },
  {
    "id" : "4559ee1e-d73c-4835-8914-4b52dba75b1d",
    "prId" : 7644,
    "prUrl" : "https://github.com/apache/airflow/pull/7644#pullrequestreview-374275020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbb3635e-c38b-43b4-a878-867f913182c4",
        "parentId" : null,
        "authorId" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "body" : "not related to your change, but i am just curious: do you know what's the reason to do a lazy import for plugins_manager here as well as in `_deserialize_operator_extra_links`?",
        "createdAt" : "2020-03-09T23:04:38Z",
        "updatedAt" : "2020-03-09T23:04:39Z",
        "lastEditedBy" : "00f2d683-1e14-4545-aec8-d448205f3465",
        "tags" : [
        ]
      },
      {
        "id" : "064f12af-4ccb-4be8-9a1d-8bfb6b8035ee",
        "parentId" : "dbb3635e-c38b-43b4-a878-867f913182c4",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I have no idea. This code was written by @kaxil  together with @ashb Can you help us?.",
        "createdAt" : "2020-03-10T00:16:47Z",
        "updatedAt" : "2020-03-10T00:16:48Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "370c8a6b-fe6b-45c6-82bc-63da6219fbf3",
        "parentId" : "dbb3635e-c38b-43b4-a878-867f913182c4",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "It's a security measure:\r\n\r\nSince operator links can be dynamic (think a pre-signed S3 url that is only valid for 15mins), so we need to support inflating to \"custom\" classes, but we don't want to have to trust the serialized blob, so we only inflate classes are pre-registered.\r\n\r\nThis is a class of bugs called \"Object Injection Attacks\" -- if we trusted the input and de-serialized whatever class was here we might end up opening a reverse shell etc. https://blog.nelhage.com/2011/03/exploiting-pickle/ as an example. This defense is not perfect as the plugins are \"under user control\" but this is mostly looking forward to when we will have an API that accepts a serialized DAG blob to run.",
        "createdAt" : "2020-03-13T12:53:54Z",
        "updatedAt" : "2020-03-13T12:53:55Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "f44a0d164044d69dadf6c6b7726016db29d92a1b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +327,331 @@        \"\"\"Deserializes an operator from a JSON object.\n        \"\"\"\n        from airflow import plugins_manager\n        plugins_manager.ensure_plugins_loaded()\n"
  },
  {
    "id" : "9dfe496c-81c4-4b3a-bfa9-6c07678e83de",
    "prId" : 8805,
    "prUrl" : "https://github.com/apache/airflow/pull/8805#pullrequestreview-427218899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "347468be-8333-460b-be07-c8eae4445608",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Because:\r\n```python\r\nIn [3]: class meta(type):\r\n   ...:     def __call__(cls, *args, **kwargs):\r\n   ...:         return type.__call__(cls, *args, **kwargs)\r\n   ...:\r\n\r\nIn [7]: class Klass(metaclass=meta):\r\n   ...:     def __init__(self, a, b, c):\r\n   ...:         pass\r\n   ...:\r\n\r\nIn [8]: signature(Klass).parameters\r\nOut[8]: mappingproxy({'args': <Parameter \"*args\">, 'kwargs': <Parameter \"**kwargs\">})\r\n\r\nIn [9]: signature(Klass.__init__).parameters\r\nOut[9]:\r\nmappingproxy({'self': <Parameter \"self\">,\r\n              'a': <Parameter \"a\">,\r\n              'b': <Parameter \"b\">,\r\n              'c': <Parameter \"c\">})",
        "createdAt" : "2020-06-09T14:37:06Z",
        "updatedAt" : "2020-06-15T09:41:46Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfc9ab5fddc6fc08ff08e0a3d74b010c8d2f3c8a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +298,302 @@\n    _CONSTRUCTOR_PARAMS = {\n        k: v.default for k, v in signature(BaseOperator.__init__).parameters.items()\n        if v.default is not v.empty\n    }"
  },
  {
    "id" : "45858aa0-299b-405d-b24f-2540ac85ad6d",
    "prId" : 11558,
    "prUrl" : "https://github.com/apache/airflow/pull/11558#pullrequestreview-510849723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db14f08b-b861-43b8-9c63-2f47fda71808",
        "parentId" : null,
        "authorId" : "d3cb8bb5-cff2-4a3d-9608-a158861d1d07",
        "body" : "This block is redundant actually; no need to test for k8s.V1Pod _twice_.",
        "createdAt" : "2020-10-16T23:37:35Z",
        "updatedAt" : "2020-10-16T23:37:54Z",
        "lastEditedBy" : "d3cb8bb5-cff2-4a3d-9608-a158861d1d07",
        "tags" : [
        ]
      },
      {
        "id" : "33f0f7d8-c487-4ab8-b472-ec688de1c74f",
        "parentId" : "db14f08b-b861-43b8-9c63-2f47fda71808",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "PR: https://github.com/apache/airflow/pull/11602",
        "createdAt" : "2020-10-16T23:45:48Z",
        "updatedAt" : "2020-10-16T23:45:49Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8f1e3dcd1566fd96b0aead7aca147f0aeb88af",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +196,200 @@            elif isinstance(var, list):\n                return [cls._serialize(v) for v in var]\n            elif HAS_KUBERNETES and isinstance(var, k8s.V1Pod):\n                json_pod = PodGenerator.serialize_pod(var)\n                return cls._encode(json_pod, type_=DAT.POD)"
  },
  {
    "id" : "085d7aca-f990-4191-a65f-a0c6ba8072c5",
    "prId" : 12472,
    "prUrl" : "https://github.com/apache/airflow/pull/12472#pullrequestreview-540405301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c9ed8f-e792-4c5d-822a-2dffa02cb12b",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Shouldn't we cache ProviderManager instances? It seems to me that creating this object is the most expensive, but not reading the extra_links_class_names attribute?\r\n",
        "createdAt" : "2020-11-28T15:04:53Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "dd1f26c3-a109-4078-aa68-804fd810340b",
        "parentId" : "d0c9ed8f-e792-4c5d-822a-2dffa02cb12b",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "This cache is to be removed. I've changed ProviderManager to be singleton so it does not need caching either.",
        "createdAt" : "2020-11-28T16:33:51Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "66ba817d-0516-4311-b75a-db5ce694c3cb",
        "parentId" : "d0c9ed8f-e792-4c5d-822a-2dffa02cb12b",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Ah no. It is ok here. I want to still get it from the cache so i do not update the dict all the time only the first time. it's really small optimisation, but I just wanted to make sure it is only set once. Otherwise I'd have to re-create the dictionary every time (and as mentioned above ProvidersManager is a singleton, so no need to cache anything there.).",
        "createdAt" : "2020-11-28T17:19:26Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c8080f190b68a329fc3fcb3558063361291187f",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +68,72 @@\n\n@cache\ndef get_operator_extra_links():\n    \"\"\""
  },
  {
    "id" : "bb76d78e-87cc-4350-b504-381af210c7d7",
    "prId" : 12472,
    "prUrl" : "https://github.com/apache/airflow/pull/12472#pullrequestreview-542434048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "243ca856-7ea3-4cf8-9fc5-0c7a79210331",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "```suggestion\r\n\r\n    :return: set of extra links\r\n```",
        "createdAt" : "2020-11-28T19:40:40Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "d7164e5a-3548-43f9-951e-d2c93e23d314",
        "parentId" : "243ca856-7ea3-4cf8-9fc5-0c7a79210331",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Right",
        "createdAt" : "2020-12-02T01:39:23Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c8080f190b68a329fc3fcb3558063361291187f",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +74,78 @@    the providers.\n\n    :return: set of extra links\n    \"\"\"\n    _OPERATOR_EXTRA_LINKS.update(ProvidersManager().extra_links_class_names)"
  },
  {
    "id" : "d449685a-1f77-4e92-b5b0-370506a1a885",
    "prId" : 12472,
    "prUrl" : "https://github.com/apache/airflow/pull/12472#pullrequestreview-544130289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea647b43-221c-4455-846c-f84affa87264",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "(Style okay with this? I would have expected a new line or two after this)",
        "createdAt" : "2020-12-03T16:03:53Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "56837108-80c5-4f19-ac35-a05c8b4bcae5",
        "parentId" : "ea647b43-221c-4455-846c-f84affa87264",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It was black-formatted, I stopped caring since we have pre-commit enabled. If black-thinks it is, good, it must be good.",
        "createdAt" : "2020-12-03T16:14:45Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "63237d5a-4fe3-4d79-b500-fa1a74258125",
        "parentId" : "ea647b43-221c-4455-846c-f84affa87264",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "BTW. I stopped wasting my brain-cycles on formatting since we have black :)",
        "createdAt" : "2020-12-03T16:15:48Z",
        "updatedAt" : "2020-12-05T10:13:48Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c8080f190b68a329fc3fcb3558063361291187f",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +32,36 @@    from functools import lru_cache\n\n    cache = lru_cache(maxsize=None)\nfrom pendulum.tz.timezone import Timezone\n"
  }
]