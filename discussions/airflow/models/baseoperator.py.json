[
  {
    "id" : "0fd266f1-ce01-4f26-bfe0-b4d6da8263c4",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225734998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5511db4d-c516-4cdb-90f0-133c439b9ec9",
        "parentId" : null,
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "De-coupled how we define the link from the `BaseOperator` so that we can support global extra links (links shared by all operators) in the future easier.",
        "createdAt" : "2019-04-11T19:10:05Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +967,971 @@\n\nclass BaseOperatorLink:\n    \"\"\"\n    Abstract base class that defines how we get an operator link."
  },
  {
    "id" : "f0f9a986-6404-4016-a195-dce19bf2804c",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225916702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "is this compatible in both py2 and py3 ? ",
        "createdAt" : "2019-04-12T04:38:08Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "7ce92b03-bd3f-4b20-9177-abfc9c07da81",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "tests passed so I would assume so",
        "createdAt" : "2019-04-12T06:28:36Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      },
      {
        "id" : "eb96cf9f-0141-4389-ba9a-7877b9cc22d4",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "We have the same usage in other places: https://github.com/apache/airflow/blob/6b38649fa6cdf16055c7f5458050c70f39cac8fd/airflow/dag/base_dag.py#L32",
        "createdAt" : "2019-04-12T06:40:42Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +972,976 @@    \"\"\"\n\n    __metaclass__ = ABCMeta\n\n    @abstractmethod"
  },
  {
    "id" : "34f1c612-9555-4597-8037-cb60e8eecf55",
    "prId" : 5094,
    "prUrl" : "https://github.com/apache/airflow/pull/5094#pullrequestreview-229856905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "it would be good to specify the type for arguments as well.",
        "createdAt" : "2019-04-23T06:52:46Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "d6485531-d301-4b01-b6b7-8d35637e9a78",
        "parentId" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "I have a type hint in: https://github.com/apache/airflow/pull/5094/files/8be65327e8cd1f4cf7dedcb90b8eacc4fa5f635d#diff-b5ec97b8301ab688b7e045426f24d485R1002",
        "createdAt" : "2019-04-24T00:39:51Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "72793a9ef3c0a50c8b6d9a7698d113c81f8bab92",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1004,1008 @@        Link to external system.\n\n        :param operator: airflow operator\n        :param dttm: datetime\n        :return: link to external system"
  },
  {
    "id" : "9546b3d0-27b3-4712-ac09-9a400b16ab63",
    "prId" : 5147,
    "prUrl" : "https://github.com/apache/airflow/pull/5147#pullrequestreview-234299268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Actually I'm thinking should we make the same change here (for the two lines `self.add_only_new(self._upstream_task_ids, task.task_id)` & `self.add_only_new(self._downstream_task_ids, task.task_id)`) so the lines becomes consistent visually, even though they're the same under the hood.\r\n\r\nLet's have other committers' inputs here as well.",
        "createdAt" : "2019-04-22T10:04:35Z",
        "updatedAt" : "2019-04-22T10:04:36Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "e0a6f8a1-4707-4115-8580-776e1d11f3a5",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "IMO, both two ways are acceptable, but `self._private_member` is better way to entry private member in class itself.",
        "createdAt" : "2019-04-22T10:38:32Z",
        "updatedAt" : "2019-04-22T10:38:55Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "86dd70a2-28ee-4573-bfa8-2f65acfe3dcf",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah I think it's ok to use private member in this case",
        "createdAt" : "2019-05-07T03:59:48Z",
        "updatedAt" : "2019-05-07T04:00:03Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d050ad5e0d32b934ef1f84d6b198c8ed8ef3f6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +900,904 @@                self.add_only_new(self._upstream_task_ids, task.task_id)\n            else:\n                self.add_only_new(self._downstream_task_ids, task.task_id)\n                task.add_only_new(task.get_direct_relative_ids(upstream=True), self.task_id)\n"
  },
  {
    "id" : "36f9fdf5-06d6-45a1-9ecf-ebb83f802569",
    "prId" : 5327,
    "prUrl" : "https://github.com/apache/airflow/pull/5327#pullrequestreview-242012525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "No need for Optional here - it will be inferred automatically via = None. (though maybe you want to leave it for clarity).",
        "createdAt" : "2019-05-25T17:55:23Z",
        "updatedAt" : "2019-05-25T17:57:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "1d1cb953-0dd7-45b9-8633-96022ae037c7",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "adf8e9f1-8893-45f6-a226-8ae39e0dcc10",
        "body" : "My 2c, I am personally a big fan of `--no-implicit-optional` in mypy checks. I find that it forces contributors to reason explicitly about null safety, and is much clearer for readers.",
        "createdAt" : "2019-05-25T18:06:50Z",
        "updatedAt" : "2019-05-25T18:06:51Z",
        "lastEditedBy" : "adf8e9f1-8893-45f6-a226-8ae39e0dcc10",
        "tags" : [
        ]
      },
      {
        "id" : "3086656a-5459-498a-b8a8-4f3617e82aa7",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "I agree it seems sensible to remove the optionals. However when reading the docs (https://docs.python.org/3/library/typing.html#typing.Optional), it says the Optional is appropriate:\r\n\r\n> ... if an explicit value of None is allowed, the use of Optional is appropriate, whether the argument is optional or not. For example:\r\n> \r\n> ```python\r\n> def foo(arg: Optional[int] = None) -> None:\r\n>     ...\r\n> ```",
        "createdAt" : "2019-05-25T18:09:46Z",
        "updatedAt" : "2019-05-25T18:10:52Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      },
      {
        "id" : "b0c821f1-0ab7-462e-a077-34b3bebb37fb",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah. Explicit is better than implicit.",
        "createdAt" : "2019-05-25T18:57:45Z",
        "updatedAt" : "2019-05-25T18:57:45Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82c2f6afec272c2f2f0fb5e32cca5196178454b7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +241,245 @@        task_id: str,\n        owner: str = configuration.conf.get('operators', 'DEFAULT_OWNER'),\n        email: Optional[str] = None,\n        email_on_retry: bool = True,\n        email_on_failure: bool = True,"
  },
  {
    "id" : "7fcff638-1ca8-47f7-8274-138a56142537",
    "prId" : 5327,
    "prUrl" : "https://github.com/apache/airflow/pull/5327#pullrequestreview-242010852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217a60e4-1b78-41f5-b848-a3f08fd251e8",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Same here and below.",
        "createdAt" : "2019-05-25T17:55:40Z",
        "updatedAt" : "2019-05-25T17:57:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82c2f6afec272c2f2f0fb5e32cca5196178454b7",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +259,263 @@        weight_rule: str = WeightRule.DOWNSTREAM,\n        queue: str = configuration.conf.get('celery', 'default_queue'),\n        pool: Optional[str] = None,\n        sla: Optional[timedelta] = None,\n        execution_timeout: Optional[timedelta] = None,"
  },
  {
    "id" : "1ed8ecc8-6a98-44d6-a500-145e71c0caf4",
    "prId" : 5815,
    "prUrl" : "https://github.com/apache/airflow/pull/5815#pullrequestreview-274814263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Wouldn't this stop rendering of template fields ?",
        "createdAt" : "2019-08-14T09:38:05Z",
        "updatedAt" : "2019-08-14T09:38:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "66bf5573-eac6-4229-86f2-e8cc96c446ed",
        "parentId" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "The way I read it, this method iterates over all `template_fields` and if it finds a field value with an extension listed in `template_exts`, runs `env.loader.get_source(...)` and sets the result on the specific field.\r\n\r\nIt indeed scans over all `template_fields` even if `template_exts` is empty, which doesn't make sense so I think this is a valid change.",
        "createdAt" : "2019-08-14T11:00:40Z",
        "updatedAt" : "2019-08-14T11:00:41Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      },
      {
        "id" : "a7dfe8a9-2df7-4365-be4c-a895b52bc043",
        "parentId" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Cool, I get it",
        "createdAt" : "2019-08-14T11:05:03Z",
        "updatedAt" : "2019-08-14T11:05:03Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "5646ef1168c69e50a9bfe1caca09b3efd406be10",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +718,722 @@    def resolve_template_files(self):\n        # Getting the content of files for template_field / template_ext\n        if self.template_ext:\n            for attr in self.template_fields:\n                content = getattr(self, attr, None)"
  },
  {
    "id" : "b6ce47c4-0e09-4d02-9fb0-c762c9ec8453",
    "prId" : 6302,
    "prUrl" : "https://github.com/apache/airflow/pull/6302#pullrequestreview-301877821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a264279-b777-4484-92d6-176e65209218",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        for ope in self.operator_extra_links:\r\n```\r\n\r\nIf this doesn't fail tests our tests need improving!",
        "createdAt" : "2019-10-15T12:29:29Z",
        "updatedAt" : "2019-10-15T12:29:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "942f38f2-2336-4ed7-bebc-791988a6db7f",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "no, it is intentional.\r\n\r\n`operator_extra_links` is from plugins\r\n\r\n`self.operator_extra_links` is from the operator itself",
        "createdAt" : "2019-10-15T12:32:50Z",
        "updatedAt" : "2019-10-15T12:32:50Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "c9e24493-54ef-4dcb-bc70-9540110afc35",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Check line 569",
        "createdAt" : "2019-10-15T12:33:06Z",
        "updatedAt" : "2019-10-15T12:33:06Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "d0667ded-5395-4f42-96d1-e61f0c278718",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Temporary blindness!",
        "createdAt" : "2019-10-15T12:47:21Z",
        "updatedAt" : "2019-10-15T12:47:22Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13520fc8a83134aabfe092e27a39f79260b6a96",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +570,574 @@\n        op_extra_links_from_plugin = {}\n        for ope in operator_extra_links:\n            if ope.operators and self.__class__ in ope.operators:\n                op_extra_links_from_plugin.update({ope.name: ope})"
  },
  {
    "id" : "36b90b4d-dfd5-444a-ae35-a85ac14aca2b",
    "prId" : 6302,
    "prUrl" : "https://github.com/apache/airflow/pull/6302#pullrequestreview-301879905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n            if type(self) in ope.operators:\r\n```\r\n\r\nIs enough now I think? (and switch to `type(self)` as it avoids accessing `__` vars.",
        "createdAt" : "2019-10-15T12:31:03Z",
        "updatedAt" : "2019-10-15T12:31:04Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "389692cf-e392-4c5f-b392-d1cd1b3cff52",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Agree",
        "createdAt" : "2019-10-15T12:37:30Z",
        "updatedAt" : "2019-10-15T12:37:30Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "666d12f5-acd8-40d6-aeda-7f91cc839475",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Actually pylint complains with:\r\n\r\n```\r\nUsing type() instead of isinstance() for a typecheck.\r\n```",
        "createdAt" : "2019-10-15T12:49:37Z",
        "updatedAt" : "2019-10-15T12:49:37Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "6fb9032a-6c25-4fe3-b1ea-2a2e63a7e481",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Bah, stupid pylint.",
        "createdAt" : "2019-10-15T12:50:17Z",
        "updatedAt" : "2019-10-15T12:50:17Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13520fc8a83134aabfe092e27a39f79260b6a96",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +571,575 @@        op_extra_links_from_plugin = {}\n        for ope in operator_extra_links:\n            if ope.operators and self.__class__ in ope.operators:\n                op_extra_links_from_plugin.update({ope.name: ope})\n"
  },
  {
    "id" : "012ae755-b353-489b-a4ba-f4c1eb08304e",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-319815554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cf56298-4e4e-44fe-9021-3fb19dbb18b0",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I could have sworn I tried this (putting this in the class and couldn't get it working.) Much nicer!\r\n\r\n(Shame that cached_property doesn't work on classes.)",
        "createdAt" : "2019-11-20T09:56:18Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "1a36dfb0-5d32-483d-936b-5e5e697a6630",
        "parentId" : "0cf56298-4e4e-44fe-9021-3fb19dbb18b0",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I yet have to run all tests. but I hope it will work!",
        "createdAt" : "2019-11-20T12:51:29Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 243,
    "diffHunk" : "@@ -1,1 +1086,1090 @@        if not cls._serialized_fields:\n            cls._serialized_fields = frozenset(\n                vars(BaseOperator(task_id='test')).keys() - {\n                    'inlets', 'outlets', '_upstream_task_ids', 'default_args', 'dag', '_dag'\n                } | {'_task_type', 'subdag', 'ui_color', 'ui_fgcolor', 'template_fields'}"
  },
  {
    "id" : "45373037-e8dc-42db-9342-b044f635d5fc",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-321826094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd14ee17-1477-4422-8fc3-36ee47c53ba7",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Should be fine without quotes too I think \r\n```suggestion\r\n    operator_extra_links: Iterable[BaseOperatorLink] = ()\r\n```",
        "createdAt" : "2019-11-20T14:00:43Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "7d469fe2-1ec0-4644-93b8-5107bdf6cde5",
        "parentId" : "dd14ee17-1477-4422-8fc3-36ee47c53ba7",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I will try but I think it did not work because BaseOperatorLink is defined in the same file below. You can only use real classes when they are imported or declared before - so '' is forward-lookup way. But I will double check.",
        "createdAt" : "2019-11-20T15:23:57Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "b6b00ec1-3054-43c7-9fc2-8bc0872f9ccc",
        "parentId" : "dd14ee17-1477-4422-8fc3-36ee47c53ba7",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yes. It won't work without the quotes. ",
        "createdAt" : "2019-11-22T20:52:19Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "f9198662-54e0-41d7-b0fc-21680b55e74f",
        "parentId" : "dd14ee17-1477-4422-8fc3-36ee47c53ba7",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Aah ok",
        "createdAt" : "2019-11-22T21:41:59Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +251,255 @@\n    # Defines the operator level extra links\n    operator_extra_links: Iterable['BaseOperatorLink'] = ()\n\n    # The _serialized_fields are lazily loaded when get_serialized_fields() method is called"
  },
  {
    "id" : "1051fbed-7bbd-430c-8ef3-851889085374",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-321804681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be750278-e804-4751-8218-10d5239b4143",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Maybe keep the comment so that Readers know where to look for ?\r\n```suggestion\r\n     # Set at end of file\r\n    _serialized_fields: Optional[FrozenSet[str]] = None\r\n```\r\n\r\n",
        "createdAt" : "2019-11-20T14:01:54Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "1df20547-eac8-4c73-9a27-9da0fd1dd5e1",
        "parentId" : "be750278-e804-4751-8218-10d5239b4143",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "OK. I will keep comment and explain it's lazily set in get_serialized_fields() method.",
        "createdAt" : "2019-11-20T15:24:36Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "4af783de-f927-4fb2-a74a-b991c2e5948a",
        "parentId" : "be750278-e804-4751-8218-10d5239b4143",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Added.",
        "createdAt" : "2019-11-22T20:55:23Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +254,258 @@\n    # The _serialized_fields are lazily loaded when get_serialized_fields() method is called\n    _serialized_fields: Optional[FrozenSet[str]] = None\n\n    _comps = {"
  },
  {
    "id" : "b543503b-f33b-468a-b3f5-960444b5a6db",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-321806710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9d278f3-9e28-4897-a774-b42b9db317f6",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Looks good, just curious to know on what is causing`too-many-statements`",
        "createdAt" : "2019-11-20T14:03:10Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "7fa3c329-55f1-4ab1-a9a8-5d59871cedc1",
        "parentId" : "e9d278f3-9e28-4897-a774-b42b9db317f6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah. I was wondering too. Did not have time to look at it . Will do when doing final passes. Thanks for being curious.",
        "createdAt" : "2019-11-20T15:25:13Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "fb88fc52-2803-45ae-960d-a5d341756a11",
        "parentId" : "e9d278f3-9e28-4897-a774-b42b9db317f6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "The base operator __init__ is just complex. I think splitting it into separate methods makes little sense so I think it is justified to put it there.",
        "createdAt" : "2019-11-22T20:59:33Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +278,282 @@\n    # noinspection PyUnusedLocal\n    # pylint: disable=too-many-arguments,too-many-locals, too-many-statements\n    @apply_defaults\n    def __init__("
  },
  {
    "id" : "f84f1ef7-2d95-4a3b-9930-f8cc94f652cf",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-322407824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fa9e0d7-423e-4cf7-bc94-45ea734dad7e",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think we decided in one of the PR to keep the explicit `Optional` for default None values too",
        "createdAt" : "2019-11-20T14:03:51Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "8a18ccb9-b2eb-43d2-b6e5-6898a279b3a8",
        "parentId" : "6fa9e0d7-423e-4cf7-bc94-45ea734dad7e",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "So worth keeping \r\n```suggestion\r\n        dag: Optional[DAG] = None,\r\n```",
        "createdAt" : "2019-11-20T14:04:08Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "86669a11-4bed-40fc-9c71-e24ce1a69ffe",
        "parentId" : "6fa9e0d7-423e-4cf7-bc94-45ea734dad7e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I think the problem here was that I wanted to avoid cyclic import here - when you use 'DAG' in the __init__ parameters, the DAG has to be imported in the class. I will see if I can still have it working with \"'airflow.models.dag.DAG'\" maybe in quotes as forward-reference.",
        "createdAt" : "2019-11-20T15:27:07Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "2a79d9b2-3d02-4f22-9d35-fc7a95202a0c",
        "parentId" : "6fa9e0d7-423e-4cf7-bc94-45ea734dad7e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Imported DAG at the __init__ level.",
        "createdAt" : "2019-11-22T21:06:33Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "0140e4ff-d4d3-47db-b7e9-59e684140c24",
        "parentId" : "6fa9e0d7-423e-4cf7-bc94-45ea734dad7e",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Does this mean that thedag arg doesn't have a type hint anymore? Does `dag: Optional[\"DAG\"]` (or `dag: Optional[\"airflow.models.DAG\"]` help here)?",
        "createdAt" : "2019-11-25T16:23:33Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +295,299 @@        depends_on_past: bool = False,\n        wait_for_downstream: bool = False,\n        dag=None,\n        params: Optional[Dict] = None,\n        default_args: Optional[Dict] = None,  # pylint: disable=unused-argument"
  },
  {
    "id" : "70a9361c-6f48-4495-9bd4-ae6de3305c7b",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-320180367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5f29412-0bb6-4bd4-8577-cd552f292c43",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think this changes the behavior:\r\n\r\n>The **_==_** operator compares the values of both the operands and checks for value equality. Whereas **_is_** operator checks whether both the operands refer to the same object or not",
        "createdAt" : "2019-11-20T14:14:01Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "f2bfbea8-cdfd-4da8-8901-0a90718aa8d6",
        "parentId" : "e5f29412-0bb6-4bd4-8577-cd552f292c43",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "In case of type() objects it's a bit faster and works the same way. Types are always singletons   so == is equivalent to \"is\". It's - I think - common practice and it is an explicit way of comparing \"exact\" types rather than using isinstance. At least pylint does not complain any more with \"suspicious type comparision\". ",
        "createdAt" : "2019-11-20T15:39:35Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "599402ea-f9bd-477e-9b96-67de5ffd3006",
        "parentId" : "e5f29412-0bb6-4bd4-8577-cd552f292c43",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Yes you are right. Makes sense",
        "createdAt" : "2019-11-20T18:27:19Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +429,433 @@\n    def __eq__(self, other):\n        if type(self) is type(other) and self.task_id == other.task_id:\n            return all(self.__dict__.get(c, None) == other.__dict__.get(c, None) for c in self._comps)\n        return False"
  },
  {
    "id" : "d13c26c3-fe4e-4f8a-8778-aa2c08f9bc7b",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-321944587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1358b598-1dd7-4948-999c-de456a92a20e",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Are we jumping the gun here and some code below too by importing the DAG class again on each __rshift__ and __lshift__.\r\n\r\nI might be missing something as I am not sure how Python deals with importing the class that is already imported.",
        "createdAt" : "2019-11-20T14:17:45Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "9ec8a090-7d3c-4c75-a0da-96dcbdefb673",
        "parentId" : "1358b598-1dd7-4948-999c-de456a92a20e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It just checks if module is loaded in modules[] dictionary. So yes - slightly slower than not doing anything but i do no think it should be a problem at parsing time. But it's a good catch indeed.",
        "createdAt" : "2019-11-20T15:40:56Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "edbf6714-3063-4c5e-91c8-f3bde99e1a2e",
        "parentId" : "1358b598-1dd7-4948-999c-de456a92a20e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "https://stackoverflow.com/questions/32151193/is-there-a-performance-cost-putting-python-imports-inside-functions",
        "createdAt" : "2019-11-24T07:08:28Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "9b2a8177-228f-4a81-9a52-808bdedfc03c",
        "parentId" : "1358b598-1dd7-4948-999c-de456a92a20e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Should be no problem w/regards to performance.",
        "createdAt" : "2019-11-24T07:08:51Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "e29d07d4-8157-4e24-9f23-e555c4aca1b0",
        "parentId" : "1358b598-1dd7-4948-999c-de456a92a20e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "https://stackoverflow.com/questions/32151193/is-there-a-performance-cost-putting-python-imports-inside-functions",
        "createdAt" : "2019-11-24T07:09:22Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +458,462 @@        If \"Other\" is a DAG, the DAG is assigned to the Operator.\n        \"\"\"\n        from airflow.models.dag import DAG\n        if isinstance(other, DAG):\n            # if this dag is already assigned, do nothing"
  }
]