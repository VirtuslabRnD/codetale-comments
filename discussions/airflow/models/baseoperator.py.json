[
  {
    "id" : "0fd266f1-ce01-4f26-bfe0-b4d6da8263c4",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225734998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5511db4d-c516-4cdb-90f0-133c439b9ec9",
        "parentId" : null,
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "De-coupled how we define the link from the `BaseOperator` so that we can support global extra links (links shared by all operators) in the future easier.",
        "createdAt" : "2019-04-11T19:10:05Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +967,971 @@\n\nclass BaseOperatorLink:\n    \"\"\"\n    Abstract base class that defines how we get an operator link."
  },
  {
    "id" : "f0f9a986-6404-4016-a195-dce19bf2804c",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225916702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "is this compatible in both py2 and py3 ? ",
        "createdAt" : "2019-04-12T04:38:08Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "7ce92b03-bd3f-4b20-9177-abfc9c07da81",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "tests passed so I would assume so",
        "createdAt" : "2019-04-12T06:28:36Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      },
      {
        "id" : "eb96cf9f-0141-4389-ba9a-7877b9cc22d4",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "We have the same usage in other places: https://github.com/apache/airflow/blob/6b38649fa6cdf16055c7f5458050c70f39cac8fd/airflow/dag/base_dag.py#L32",
        "createdAt" : "2019-04-12T06:40:42Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +972,976 @@    \"\"\"\n\n    __metaclass__ = ABCMeta\n\n    @abstractmethod"
  },
  {
    "id" : "34f1c612-9555-4597-8037-cb60e8eecf55",
    "prId" : 5094,
    "prUrl" : "https://github.com/apache/airflow/pull/5094#pullrequestreview-229856905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "it would be good to specify the type for arguments as well.",
        "createdAt" : "2019-04-23T06:52:46Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "d6485531-d301-4b01-b6b7-8d35637e9a78",
        "parentId" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "I have a type hint in: https://github.com/apache/airflow/pull/5094/files/8be65327e8cd1f4cf7dedcb90b8eacc4fa5f635d#diff-b5ec97b8301ab688b7e045426f24d485R1002",
        "createdAt" : "2019-04-24T00:39:51Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "72793a9ef3c0a50c8b6d9a7698d113c81f8bab92",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1004,1008 @@        Link to external system.\n\n        :param operator: airflow operator\n        :param dttm: datetime\n        :return: link to external system"
  },
  {
    "id" : "9546b3d0-27b3-4712-ac09-9a400b16ab63",
    "prId" : 5147,
    "prUrl" : "https://github.com/apache/airflow/pull/5147#pullrequestreview-234299268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Actually I'm thinking should we make the same change here (for the two lines `self.add_only_new(self._upstream_task_ids, task.task_id)` & `self.add_only_new(self._downstream_task_ids, task.task_id)`) so the lines becomes consistent visually, even though they're the same under the hood.\r\n\r\nLet's have other committers' inputs here as well.",
        "createdAt" : "2019-04-22T10:04:35Z",
        "updatedAt" : "2019-04-22T10:04:36Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "e0a6f8a1-4707-4115-8580-776e1d11f3a5",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "IMO, both two ways are acceptable, but `self._private_member` is better way to entry private member in class itself.",
        "createdAt" : "2019-04-22T10:38:32Z",
        "updatedAt" : "2019-04-22T10:38:55Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "86dd70a2-28ee-4573-bfa8-2f65acfe3dcf",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah I think it's ok to use private member in this case",
        "createdAt" : "2019-05-07T03:59:48Z",
        "updatedAt" : "2019-05-07T04:00:03Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d050ad5e0d32b934ef1f84d6b198c8ed8ef3f6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +900,904 @@                self.add_only_new(self._upstream_task_ids, task.task_id)\n            else:\n                self.add_only_new(self._downstream_task_ids, task.task_id)\n                task.add_only_new(task.get_direct_relative_ids(upstream=True), self.task_id)\n"
  },
  {
    "id" : "36f9fdf5-06d6-45a1-9ecf-ebb83f802569",
    "prId" : 5327,
    "prUrl" : "https://github.com/apache/airflow/pull/5327#pullrequestreview-242012525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "No need for Optional here - it will be inferred automatically via = None. (though maybe you want to leave it for clarity).",
        "createdAt" : "2019-05-25T17:55:23Z",
        "updatedAt" : "2019-05-25T17:57:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "1d1cb953-0dd7-45b9-8633-96022ae037c7",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "adf8e9f1-8893-45f6-a226-8ae39e0dcc10",
        "body" : "My 2c, I am personally a big fan of `--no-implicit-optional` in mypy checks. I find that it forces contributors to reason explicitly about null safety, and is much clearer for readers.",
        "createdAt" : "2019-05-25T18:06:50Z",
        "updatedAt" : "2019-05-25T18:06:51Z",
        "lastEditedBy" : "adf8e9f1-8893-45f6-a226-8ae39e0dcc10",
        "tags" : [
        ]
      },
      {
        "id" : "3086656a-5459-498a-b8a8-4f3617e82aa7",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "I agree it seems sensible to remove the optionals. However when reading the docs (https://docs.python.org/3/library/typing.html#typing.Optional), it says the Optional is appropriate:\r\n\r\n> ... if an explicit value of None is allowed, the use of Optional is appropriate, whether the argument is optional or not. For example:\r\n> \r\n> ```python\r\n> def foo(arg: Optional[int] = None) -> None:\r\n>     ...\r\n> ```",
        "createdAt" : "2019-05-25T18:09:46Z",
        "updatedAt" : "2019-05-25T18:10:52Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      },
      {
        "id" : "b0c821f1-0ab7-462e-a077-34b3bebb37fb",
        "parentId" : "28e5e0de-89ba-462b-a465-d5900a836c17",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah. Explicit is better than implicit.",
        "createdAt" : "2019-05-25T18:57:45Z",
        "updatedAt" : "2019-05-25T18:57:45Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82c2f6afec272c2f2f0fb5e32cca5196178454b7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +241,245 @@        task_id: str,\n        owner: str = configuration.conf.get('operators', 'DEFAULT_OWNER'),\n        email: Optional[str] = None,\n        email_on_retry: bool = True,\n        email_on_failure: bool = True,"
  },
  {
    "id" : "7fcff638-1ca8-47f7-8274-138a56142537",
    "prId" : 5327,
    "prUrl" : "https://github.com/apache/airflow/pull/5327#pullrequestreview-242010852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217a60e4-1b78-41f5-b848-a3f08fd251e8",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Same here and below.",
        "createdAt" : "2019-05-25T17:55:40Z",
        "updatedAt" : "2019-05-25T17:57:31Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82c2f6afec272c2f2f0fb5e32cca5196178454b7",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +259,263 @@        weight_rule: str = WeightRule.DOWNSTREAM,\n        queue: str = configuration.conf.get('celery', 'default_queue'),\n        pool: Optional[str] = None,\n        sla: Optional[timedelta] = None,\n        execution_timeout: Optional[timedelta] = None,"
  },
  {
    "id" : "1ed8ecc8-6a98-44d6-a500-145e71c0caf4",
    "prId" : 5815,
    "prUrl" : "https://github.com/apache/airflow/pull/5815#pullrequestreview-274814263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Wouldn't this stop rendering of template fields ?",
        "createdAt" : "2019-08-14T09:38:05Z",
        "updatedAt" : "2019-08-14T09:38:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "66bf5573-eac6-4229-86f2-e8cc96c446ed",
        "parentId" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "The way I read it, this method iterates over all `template_fields` and if it finds a field value with an extension listed in `template_exts`, runs `env.loader.get_source(...)` and sets the result on the specific field.\r\n\r\nIt indeed scans over all `template_fields` even if `template_exts` is empty, which doesn't make sense so I think this is a valid change.",
        "createdAt" : "2019-08-14T11:00:40Z",
        "updatedAt" : "2019-08-14T11:00:41Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      },
      {
        "id" : "a7dfe8a9-2df7-4365-be4c-a895b52bc043",
        "parentId" : "7a995729-2c86-4e72-bef4-48c3289774f3",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Cool, I get it",
        "createdAt" : "2019-08-14T11:05:03Z",
        "updatedAt" : "2019-08-14T11:05:03Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "5646ef1168c69e50a9bfe1caca09b3efd406be10",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +718,722 @@    def resolve_template_files(self):\n        # Getting the content of files for template_field / template_ext\n        if self.template_ext:\n            for attr in self.template_fields:\n                content = getattr(self, attr, None)"
  },
  {
    "id" : "b6ce47c4-0e09-4d02-9fb0-c762c9ec8453",
    "prId" : 6302,
    "prUrl" : "https://github.com/apache/airflow/pull/6302#pullrequestreview-301877821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a264279-b777-4484-92d6-176e65209218",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n        for ope in self.operator_extra_links:\r\n```\r\n\r\nIf this doesn't fail tests our tests need improving!",
        "createdAt" : "2019-10-15T12:29:29Z",
        "updatedAt" : "2019-10-15T12:29:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "942f38f2-2336-4ed7-bebc-791988a6db7f",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "no, it is intentional.\r\n\r\n`operator_extra_links` is from plugins\r\n\r\n`self.operator_extra_links` is from the operator itself",
        "createdAt" : "2019-10-15T12:32:50Z",
        "updatedAt" : "2019-10-15T12:32:50Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "c9e24493-54ef-4dcb-bc70-9540110afc35",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Check line 569",
        "createdAt" : "2019-10-15T12:33:06Z",
        "updatedAt" : "2019-10-15T12:33:06Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "d0667ded-5395-4f42-96d1-e61f0c278718",
        "parentId" : "4a264279-b777-4484-92d6-176e65209218",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Temporary blindness!",
        "createdAt" : "2019-10-15T12:47:21Z",
        "updatedAt" : "2019-10-15T12:47:22Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13520fc8a83134aabfe092e27a39f79260b6a96",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +570,574 @@\n        op_extra_links_from_plugin = {}\n        for ope in operator_extra_links:\n            if ope.operators and self.__class__ in ope.operators:\n                op_extra_links_from_plugin.update({ope.name: ope})"
  },
  {
    "id" : "36b90b4d-dfd5-444a-ae35-a85ac14aca2b",
    "prId" : 6302,
    "prUrl" : "https://github.com/apache/airflow/pull/6302#pullrequestreview-301879905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\n            if type(self) in ope.operators:\r\n```\r\n\r\nIs enough now I think? (and switch to `type(self)` as it avoids accessing `__` vars.",
        "createdAt" : "2019-10-15T12:31:03Z",
        "updatedAt" : "2019-10-15T12:31:04Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "389692cf-e392-4c5f-b392-d1cd1b3cff52",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Agree",
        "createdAt" : "2019-10-15T12:37:30Z",
        "updatedAt" : "2019-10-15T12:37:30Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "666d12f5-acd8-40d6-aeda-7f91cc839475",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Actually pylint complains with:\r\n\r\n```\r\nUsing type() instead of isinstance() for a typecheck.\r\n```",
        "createdAt" : "2019-10-15T12:49:37Z",
        "updatedAt" : "2019-10-15T12:49:37Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "6fb9032a-6c25-4fe3-b1ea-2a2e63a7e481",
        "parentId" : "3a1ca1cf-6a86-42d8-91d3-1bc735031bde",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Bah, stupid pylint.",
        "createdAt" : "2019-10-15T12:50:17Z",
        "updatedAt" : "2019-10-15T12:50:17Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13520fc8a83134aabfe092e27a39f79260b6a96",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +571,575 @@        op_extra_links_from_plugin = {}\n        for ope in operator_extra_links:\n            if ope.operators and self.__class__ in ope.operators:\n                op_extra_links_from_plugin.update({ope.name: ope})\n"
  }
]