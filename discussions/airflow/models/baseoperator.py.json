[
  {
    "id" : "0fd266f1-ce01-4f26-bfe0-b4d6da8263c4",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225734998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5511db4d-c516-4cdb-90f0-133c439b9ec9",
        "parentId" : null,
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "De-coupled how we define the link from the `BaseOperator` so that we can support global extra links (links shared by all operators) in the future easier.",
        "createdAt" : "2019-04-11T19:10:05Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +967,971 @@\n\nclass BaseOperatorLink:\n    \"\"\"\n    Abstract base class that defines how we get an operator link."
  },
  {
    "id" : "f0f9a986-6404-4016-a195-dce19bf2804c",
    "prId" : 5059,
    "prUrl" : "https://github.com/apache/airflow/pull/5059#pullrequestreview-225916702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "is this compatible in both py2 and py3 ? ",
        "createdAt" : "2019-04-12T04:38:08Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "7ce92b03-bd3f-4b20-9177-abfc9c07da81",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "tests passed so I would assume so",
        "createdAt" : "2019-04-12T06:28:36Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      },
      {
        "id" : "eb96cf9f-0141-4389-ba9a-7877b9cc22d4",
        "parentId" : "43b9ff57-9232-437a-a084-fb5a00b83c95",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "We have the same usage in other places: https://github.com/apache/airflow/blob/6b38649fa6cdf16055c7f5458050c70f39cac8fd/airflow/dag/base_dag.py#L32",
        "createdAt" : "2019-04-12T06:40:42Z",
        "updatedAt" : "2019-04-12T15:20:32Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "76f8885413126c263b7fae6f2ff34fac3041b0b4",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +972,976 @@    \"\"\"\n\n    __metaclass__ = ABCMeta\n\n    @abstractmethod"
  },
  {
    "id" : "34f1c612-9555-4597-8037-cb60e8eecf55",
    "prId" : 5094,
    "prUrl" : "https://github.com/apache/airflow/pull/5094#pullrequestreview-229856905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "it would be good to specify the type for arguments as well.",
        "createdAt" : "2019-04-23T06:52:46Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "d6485531-d301-4b01-b6b7-8d35637e9a78",
        "parentId" : "acd33606-a370-4c8b-b475-474f570aa9ec",
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "I have a type hint in: https://github.com/apache/airflow/pull/5094/files/8be65327e8cd1f4cf7dedcb90b8eacc4fa5f635d#diff-b5ec97b8301ab688b7e045426f24d485R1002",
        "createdAt" : "2019-04-24T00:39:51Z",
        "updatedAt" : "2019-04-25T07:55:04Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      }
    ],
    "commit" : "72793a9ef3c0a50c8b6d9a7698d113c81f8bab92",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1004,1008 @@        Link to external system.\n\n        :param operator: airflow operator\n        :param dttm: datetime\n        :return: link to external system"
  },
  {
    "id" : "9546b3d0-27b3-4712-ac09-9a400b16ab63",
    "prId" : 5147,
    "prUrl" : "https://github.com/apache/airflow/pull/5147#pullrequestreview-234299268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Actually I'm thinking should we make the same change here (for the two lines `self.add_only_new(self._upstream_task_ids, task.task_id)` & `self.add_only_new(self._downstream_task_ids, task.task_id)`) so the lines becomes consistent visually, even though they're the same under the hood.\r\n\r\nLet's have other committers' inputs here as well.",
        "createdAt" : "2019-04-22T10:04:35Z",
        "updatedAt" : "2019-04-22T10:04:36Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "e0a6f8a1-4707-4115-8580-776e1d11f3a5",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "body" : "IMO, both two ways are acceptable, but `self._private_member` is better way to entry private member in class itself.",
        "createdAt" : "2019-04-22T10:38:32Z",
        "updatedAt" : "2019-04-22T10:38:55Z",
        "lastEditedBy" : "8c680a1a-3743-44ea-9ab0-a9f70d8fd124",
        "tags" : [
        ]
      },
      {
        "id" : "86dd70a2-28ee-4573-bfa8-2f65acfe3dcf",
        "parentId" : "937e8172-1708-416e-8ed4-cd190f907fc6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah I think it's ok to use private member in this case",
        "createdAt" : "2019-05-07T03:59:48Z",
        "updatedAt" : "2019-05-07T04:00:03Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d050ad5e0d32b934ef1f84d6b198c8ed8ef3f6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +900,904 @@                self.add_only_new(self._upstream_task_ids, task.task_id)\n            else:\n                self.add_only_new(self._downstream_task_ids, task.task_id)\n                task.add_only_new(task.get_direct_relative_ids(upstream=True), self.task_id)\n"
  }
]