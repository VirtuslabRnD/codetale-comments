[
  {
    "id" : "94a226a4-eafc-4eae-869f-8840151b928b",
    "prId" : 5743,
    "prUrl" : "https://github.com/apache/airflow/pull/5743#pullrequestreview-277495745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1d5bc3b-513f-4528-a971-802aee8887b2",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "```suggestion\r\nclass SerializedDag(Base):\r\n```\r\n\r\nAnd then call this `SerialzedDagModel` at import time if we need to distinguish this.",
        "createdAt" : "2019-08-15T14:33:11Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "c34dbbc7-aaf7-46ca-98b9-b30e7bfb65a3",
        "parentId" : "f1d5bc3b-513f-4528-a971-802aee8887b2",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "The problem is it will collide a lot in the same file & so become confusing:\r\n\r\nhttps://github.com/apache/airflow/blob/e2570ca0002394af9f59703a2b29ad21642c546b/airflow/models/serialized_dag.py#L73\r\n\r\nhttps://github.com/apache/airflow/blob/e2570ca0002394af9f59703a2b29ad21642c546b/airflow/models/serialized_dag.py#L34-L37`\r\n\r\nI can obviously add `as` on those imports to change but not sure if it is worth it, WDYT?",
        "createdAt" : "2019-08-20T23:42:20Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "162da544553c227b265f71db10f772a05e077953",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n\nclass SerializedDagModel(Base):\n    \"\"\"A table for serialized DAGs.\n"
  },
  {
    "id" : "67048693-9443-4b22-a5aa-4a79f40a5a0c",
    "prId" : 5743,
    "prUrl" : "https://github.com/apache/airflow/pull/5743#pullrequestreview-305537685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccbc7b48-64e6-4f7c-8a1e-909b1ee1a9b6",
        "parentId" : null,
        "authorId" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "body" : "Why would `self.data` have two formats here? ",
        "createdAt" : "2019-10-16T05:16:57Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "7fbede4f-85b0-4371-a620-3b1f92a91855",
        "tags" : [
        ]
      },
      {
        "id" : "09b616db-522c-43c9-8e7c-5c118e2abb0b",
        "parentId" : "ccbc7b48-64e6-4f7c-8a1e-909b1ee1a9b6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This probably isn't needed, but might be for cases where SQLAlchemy doesn't handle the JSON deserialize for us.\r\n\r\nWe should remove this if we can though, yes.",
        "createdAt" : "2019-10-16T09:38:55Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "b6a9c0b5-c2c8-45a2-89f5-1ac0edd59b8a",
        "parentId" : "ccbc7b48-64e6-4f7c-8a1e-909b1ee1a9b6",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Yes, older versions of Mysql don't support json type and sqlalchemy returns string. Best example is our CI images with MySQL",
        "createdAt" : "2019-10-22T22:00:42Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "4aec9f90-a7bb-4dd6-886d-8fa90840763b",
        "parentId" : "ccbc7b48-64e6-4f7c-8a1e-909b1ee1a9b6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Do you have information about which MySQL version does not support this?  Maybe it is worth abandoning the support for some versions to be able to go further in the future e.g. with JSON index etc.",
        "createdAt" : "2019-10-22T22:06:04Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "c9ed5bd8-3b20-4c8c-a88e-9f862889f9ec",
        "parentId" : "ccbc7b48-64e6-4f7c-8a1e-909b1ee1a9b6",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : ">MySQL as of version 5.7 (MariaDB as of the 10.2 series does not)\r\n\r\nhttps://docs.sqlalchemy.org/en/13/core/type_basics.html#sqlalchemy.types.JSON",
        "createdAt" : "2019-10-22T22:09:06Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "162da544553c227b265f71db10f772a05e077953",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@        from airflow.serialization import SerializedDAG  # noqa # pylint: disable=redefined-outer-name\n\n        if isinstance(self.data, dict):\n            dag = SerializedDAG.from_dict(self.data)  # type: Any\n        else:"
  },
  {
    "id" : "e01aa3d5-44f9-4177-8e79-9688a97795ff",
    "prId" : 5743,
    "prUrl" : "https://github.com/apache/airflow/pull/5743#pullrequestreview-305536184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e3a082b-5c98-4345-991d-afe9073a4b79",
        "parentId" : null,
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "Makes more sense to move the `log.debug(\"Writing DAG: %s to the DB\", dag)` line here, because the interval check is done before writing the DAG.",
        "createdAt" : "2019-10-18T13:05:33Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      },
      {
        "id" : "d7b6fd3e-a2c0-4b38-8094-049dd064354b",
        "parentId" : "1e3a082b-5c98-4345-991d-afe9073a4b79",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "üëç ",
        "createdAt" : "2019-10-22T22:05:29Z",
        "updatedAt" : "2019-10-23T22:24:34Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "162da544553c227b265f71db10f772a05e077953",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +112,116 @@                return\n        log.debug(\"Writing DAG: %s to the DB\", dag.dag_id)\n        session.merge(cls(dag))\n        log.debug(\"DAG: %s written to the DB\", dag.dag_id)\n"
  },
  {
    "id" : "ba354afe-dc28-40a4-bdb8-e3852e7f7488",
    "prId" : 7217,
    "prUrl" : "https://github.com/apache/airflow/pull/7217#pullrequestreview-363347908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ed286d7-dc06-41d4-8cf6-3c10c679b405",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I would have expected to see something writing code form in here...?",
        "createdAt" : "2020-02-24T11:01:17Z",
        "updatedAt" : "2020-03-13T14:51:56Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "d81e3864-e2e5-47ac-ada6-6b1c11c7e164",
        "parentId" : "7ed286d7-dc06-41d4-8cf6-3c10c679b405",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "It is here: https://github.com/apache/airflow/pull/7217/files#diff-40e3d1f11ed05554009ad08fa603a1e8L111",
        "createdAt" : "2020-02-24T12:21:30Z",
        "updatedAt" : "2020-03-13T14:51:56Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7fbf91b909445900f283a361ba0b4af59f05242",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +79,83 @@    @classmethod\n    @provide_session\n    def write_dag(cls, dag: DAG, min_update_interval: Optional[int] = None, session=None):\n        \"\"\"Serializes a DAG and writes it into database.\n"
  },
  {
    "id" : "1d3e2736-4740-4a91-91ea-ff19f34582d8",
    "prId" : 9973,
    "prUrl" : "https://github.com/apache/airflow/pull/9973#pullrequestreview-656493030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c515b338-f562-4e16-b53b-b2b1c8fb1fba",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "why this change, scalar() is not DB specific is it? or sqlalchmey does not convert it well too?",
        "createdAt" : "2021-04-15T15:25:04Z",
        "updatedAt" : "2021-05-11T09:34:03Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "99990415-a85b-421f-8e1e-472646e887a1",
        "parentId" : "c515b338-f562-4e16-b53b-b2b1c8fb1fba",
        "authorId" : "3743a72b-fdd8-43b7-9592-037bac8942e2",
        "body" : "the version of sqlalchemy which we use converts it wrongly for MySQL - https://github.com/sqlalchemy/sqlalchemy/issues/5481",
        "createdAt" : "2021-04-15T18:54:04Z",
        "updatedAt" : "2021-05-11T09:34:03Z",
        "lastEditedBy" : "3743a72b-fdd8-43b7-9592-037bac8942e2",
        "tags" : [
        ]
      },
      {
        "id" : "bb7eb1de-c848-47e7-afad-5927fc178305",
        "parentId" : "c515b338-f562-4e16-b53b-b2b1c8fb1fba",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Could you add a todo comment here to change this back once we are on SQL 1.4-- looks like the fixed the issue.?",
        "createdAt" : "2021-05-10T13:15:04Z",
        "updatedAt" : "2021-05-11T09:34:03Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "8ec7b7db-7fbe-416b-8b25-a2c41da8bb0e",
        "parentId" : "c515b338-f562-4e16-b53b-b2b1c8fb1fba",
        "authorId" : "3743a72b-fdd8-43b7-9592-037bac8942e2",
        "body" : "done",
        "createdAt" : "2021-05-11T09:34:24Z",
        "updatedAt" : "2021-05-11T09:34:25Z",
        "lastEditedBy" : "3743a72b-fdd8-43b7-9592-037bac8942e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12e0077675cc79ef5495fd7ea425cea60a49f28",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +126,130 @@                )\n                .first()\n                is not None\n            ):\n                # TODO: .first() is not None can be changed to .scalar() once we update to sqlalchemy 1.4+"
  },
  {
    "id" : "2d49b34d-da8d-442a-8a6e-88bea17ba088",
    "prId" : 10227,
    "prUrl" : "https://github.com/apache/airflow/pull/10227#pullrequestreview-463865269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1029469-3e67-4012-b5d3-2bd6fea9f4e8",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I believe it will be better to use  hash of the file itself rather than Json representation. Not only it will be faster (you d note have to parse the file and create a SerializedDAG, but also it will be more accurate (there are some changes like comments that might cause the Serialized DAG to be the same (comments, jinja templates etc.). Of course it will be still ok (we care about Serialized representation in this case) but I think it would be more accurate to refresh Serialized DAG and hash every time when the file changes. Also it wil be much easier to reason about that hash and verify if it is correct or whether the file changed since - we just need to check the hash of the file on disk. ",
        "createdAt" : "2020-08-09T10:38:10Z",
        "updatedAt" : "2020-08-11T18:31:09Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "a87c4931-6d48-4967-99eb-324acf1d16f6",
        "parentId" : "c1029469-3e67-4012-b5d3-2bd6fea9f4e8",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "The main reason for using Hash of a Serialized DAG is related to the question I asked Airbnb folks:\r\n\r\n![image](https://user-images.githubusercontent.com/8811558/89730618-39257000-da38-11ea-828f-076cff27102e.png)\r\n\r\n>Question for cong zhu: Do you store Hash of the DAG File? What happens when the modules imported by the DAG File changes bu not the DAG files itself, in that case DAG file hash remains the same but DAG might not be the same\r\n>Cong Zhu: Yes, we store the hash of the serialized DAG\r\n\r\n",
        "createdAt" : "2020-08-09T11:03:13Z",
        "updatedAt" : "2020-08-11T18:31:09Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "be770052-3970-4e6c-937c-a801733c515e",
        "parentId" : "c1029469-3e67-4012-b5d3-2bd6fea9f4e8",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "i.e. I have seen cases where people import Schedule Interval, operators and other properties from a different file. If they change the imported file, the Hash of the DAG file remains the same but Serialized DAG changes",
        "createdAt" : "2020-08-09T11:04:29Z",
        "updatedAt" : "2020-08-11T18:31:09Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "4e0729bb-0c65-40a6-86f7-2af78aa66464",
        "parentId" : "c1029469-3e67-4012-b5d3-2bd6fea9f4e8",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Ah Right! Makes sense indeed. Great to get some input from AirBnB folks on that one :)",
        "createdAt" : "2020-08-09T11:17:32Z",
        "updatedAt" : "2020-08-11T18:31:09Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "de3f18498ee025c604b7378c7d903a30bffe1ec9",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +79,83 @@        self.data = SerializedDAG.to_dict(dag)\n        self.last_updated = timezone.utcnow()\n        self.dag_hash = hashlib.md5(json.dumps(self.data, sort_keys=True).encode(\"utf-8\")).hexdigest()\n\n    def __repr__(self):"
  },
  {
    "id" : "66687210-ffca-4170-beb9-56c10cb3f725",
    "prId" : 12586,
    "prUrl" : "https://github.com/apache/airflow/pull/12586#pullrequestreview-538060077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b26dc077-30d1-460b-a3f7-3978e2028699",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I am still not sure if we explicitly require `foreign` keyword over here.\r\n\r\nCan you explain why it is needed?\r\n\r\nbased on the 2nd section in https://docs.sqlalchemy.org/en/13/orm/join_conditions.html#creating-custom-foreign-conditions\r\n\r\n>An alternative syntax to the above is to use the foreign() and remote() annotations, inline within the relationship.primaryjoin expression. This syntax represents the annotations that relationship() normally applies by itself to the join condition given the relationship.foreign_keys and relationship.remote_side arguments. These functions may be more succinct when an explicit join condition is present, and additionally serve to mark exactly the column that is ‚Äúforeign‚Äù or ‚Äúremote‚Äù independent of whether that column is stated multiple times or within complex SQL expressions:",
        "createdAt" : "2020-11-24T14:39:26Z",
        "updatedAt" : "2020-11-25T00:45:50Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "7371385e-c340-4a3d-9878-a9a4a35adea9",
        "parentId" : "b26dc077-30d1-460b-a3f7-3978e2028699",
        "authorId" : "69af1c8a-3bf1-4612-b2f9-29eaa3bffa0d",
        "body" : "You are right. I tested and we don't need that. I am new to Airflow and SQLAlchemy tbh :).",
        "createdAt" : "2020-11-24T17:24:13Z",
        "updatedAt" : "2020-11-25T00:45:50Z",
        "lastEditedBy" : "69af1c8a-3bf1-4612-b2f9-29eaa3bffa0d",
        "tags" : [
        ]
      },
      {
        "id" : "54b307df-d23d-4d39-869a-35dcb7bf1dc7",
        "parentId" : "b26dc077-30d1-460b-a3f7-3978e2028699",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Looks like the CI failed with following error:\r\n\r\n```\r\nsqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'mapped class SerializedDagModel->serialized_dag'. Original exception was: Could not locate any relevant foreign key columns for primary join condition 'serialized_dag.dag_id = dag_run.dag_id' on relationship SerializedDagModel.dag_runs.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or are annotated in the join condition with the foreign() annotation.\r\n```\r\n\r\nSo indeed it looks like we do need `foreign` ",
        "createdAt" : "2020-11-24T23:57:13Z",
        "updatedAt" : "2020-11-25T00:45:50Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "fbdb50e9-d0d6-4ebc-9695-03e53df16da1",
        "parentId" : "b26dc077-30d1-460b-a3f7-3978e2028699",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "or maybe it just requires the following:\r\n\r\n```\r\nprimaryjoin=\"SerializedDagModel.dag_id == foreign(DagRun.dag_id)\",\r\n```\r\n\r\nbased on example in https://stackoverflow.com/a/57454638/5691525",
        "createdAt" : "2020-11-24T23:59:42Z",
        "updatedAt" : "2020-11-25T00:45:50Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc3b865d1fc078d82eed2cfbc35c5abd9ed8fdb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +74,78 @@    dag_runs = relationship(\n        DagRun,\n        primaryjoin=dag_id == foreign(DagRun.dag_id),\n        backref=backref('serialized_dag', uselist=False, innerjoin=True),\n    )"
  }
]