[
  {
    "id" : "2ea59836-d520-4dd7-a977-2a39b823811c",
    "prId" : 4368,
    "prUrl" : "https://github.com/apache/airflow/pull/4368#pullrequestreview-187848093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d99fba1-b875-4354-9618-02a15e8daf1f",
        "parentId" : null,
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Can we test this in `tests.models:DagTest.test_sync_to_db`?",
        "createdAt" : "2018-12-26T04:19:50Z",
        "updatedAt" : "2018-12-26T20:52:20Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "6ff350d7-3063-4c13-abe4-60c8b7a3c527",
        "parentId" : "2d99fba1-b875-4354-9618-02a15e8daf1f",
        "authorId" : "0706c3c0-d32f-4dda-aba2-181cb4e0f0e8",
        "body" : "Good one, added a test",
        "createdAt" : "2018-12-26T08:00:44Z",
        "updatedAt" : "2018-12-26T20:52:20Z",
        "lastEditedBy" : "0706c3c0-d32f-4dda-aba2-181cb4e0f0e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db22b18a8f323bbb01b309b457c8fb5b3ca7a4c",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +4223,4227 @@        orm_dag.is_active = True\n        orm_dag.last_scheduler_run = sync_time\n        orm_dag.default_view = self._default_view\n        orm_dag.description = self.description\n        session.merge(orm_dag)"
  },
  {
    "id" : "96e28891-922b-472e-8e17-36aac3378b6e",
    "prId" : 4368,
    "prUrl" : "https://github.com/apache/airflow/pull/4368#pullrequestreview-191934089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b981d3af-5e03-4b16-bb09-a2982391e988",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Wait up - this looks incorrect. Why was this removed?\r\n\r\nThe timezone of a DAG was previously defined as the timezone of the start_date. Is that still the case and if we do `self.timezone = tz` then this property accessor won't be used anymore?\r\n",
        "createdAt" : "2019-01-11T19:13:10Z",
        "updatedAt" : "2019-01-11T19:13:10Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "f1c6cd7d-d408-40f3-b517-e8eca06e5673",
        "parentId" : "b981d3af-5e03-4b16-bb09-a2982391e988",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I don't  mean removed, I mean added.",
        "createdAt" : "2019-01-11T19:14:02Z",
        "updatedAt" : "2019-01-11T19:14:02Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "ff82b97d-ccd5-4b58-815a-c9ba9552ae2d",
        "parentId" : "b981d3af-5e03-4b16-bb09-a2982391e988",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Oh this is on the DagModel, not the DAG. Right.\r\n\r\nIn which case my question is: when/where is this used?",
        "createdAt" : "2019-01-11T19:15:03Z",
        "updatedAt" : "2019-01-11T19:15:04Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "a8ee4500-4fdf-4b0c-b615-e2a6f62be383",
        "parentId" : "b981d3af-5e03-4b16-bb09-a2982391e988",
        "authorId" : "0706c3c0-d32f-4dda-aba2-181cb4e0f0e8",
        "body" : "This is indeed a bit tricky. I have added this because in the html templates this variable is used. Some templates now takes a DagModel instead of a DAG. In the end I would like this to be in the complete webserver",
        "createdAt" : "2019-01-12T10:33:32Z",
        "updatedAt" : "2019-01-12T10:33:32Z",
        "lastEditedBy" : "0706c3c0-d32f-4dda-aba2-181cb4e0f0e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db22b18a8f323bbb01b309b457c8fb5b3ca7a4c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3010,3014 @@    @property\n    def timezone(self):\n        return settings.TIMEZONE\n\n    @classmethod"
  },
  {
    "id" : "e4adb172-e7e7-4ef1-bc41-a9874193dd34",
    "prId" : 4390,
    "prUrl" : "https://github.com/apache/airflow/pull/4390#pullrequestreview-190093736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f792e7c8-579e-4d3c-a77a-5685824e0930",
        "parentId" : null,
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "Shouldn't this query benefit from an index as well?",
        "createdAt" : "2019-01-07T22:16:41Z",
        "updatedAt" : "2019-01-10T03:57:53Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      },
      {
        "id" : "7039af22-3aab-4301-bf9a-4bbfd235baec",
        "parentId" : "f792e7c8-579e-4d3c-a77a-5685824e0930",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "It looks like `dag_id` and `execution_date` columns already have indexes. Which indexes are missing?",
        "createdAt" : "2019-01-08T05:07:33Z",
        "updatedAt" : "2019-01-10T03:57:53Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "6954a608bb0e8e4e71c1de34b7bd7301dac0514a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +251,255 @@    if not include_externally_triggered:\n        query = query.filter(DR.external_trigger == False)  # noqa\n    query = query.order_by(DR.execution_date.desc())\n    return query.first()\n"
  },
  {
    "id" : "28d91b4b-146a-435c-8107-521037e9dcba",
    "prId" : 4685,
    "prUrl" : "https://github.com/apache/airflow/pull/4685#pullrequestreview-202437758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b6421cc-8713-4790-8f5e-ea27a9b5cc2d",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Where did this change come from?",
        "createdAt" : "2019-02-11T11:01:35Z",
        "updatedAt" : "2019-03-10T16:33:43Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "84631a16-a908-41b1-a21a-721d13ddba7c",
        "parentId" : "2b6421cc-8713-4790-8f5e-ea27a9b5cc2d",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Some of the example DAGs set `doc_md`, which was raising errors from `mypy`. And it looks like we check this attribute in `views.py`.",
        "createdAt" : "2019-02-12T01:25:38Z",
        "updatedAt" : "2019-03-10T16:33:43Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "6072d5f653cc3c0ed9712b7712ef2b24d9771aea",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +3069,3073 @@        self.on_success_callback = on_success_callback\n        self.on_failure_callback = on_failure_callback\n        self.doc_md = doc_md\n\n        self._old_context_manager_dags = []"
  },
  {
    "id" : "25d4d221-7fd2-452a-b32c-3064efa4d51b",
    "prId" : 4926,
    "prUrl" : "https://github.com/apache/airflow/pull/4926#pullrequestreview-218964733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23434f3f-0fd9-47b6-8803-53721d9e6d6b",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "?",
        "createdAt" : "2019-03-19T23:35:19Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "80b2c411-937f-4579-a586-cf9786f37a41",
        "parentId" : "23434f3f-0fd9-47b6-8803-53721d9e6d6b",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Not sure! This comment was already here.",
        "createdAt" : "2019-03-20T00:27:37Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "6757294c-e165-4e60-ae68-c443e1fc28ba",
        "parentId" : "23434f3f-0fd9-47b6-8803-53721d9e6d6b",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "So it was.",
        "createdAt" : "2019-03-26T15:18:37Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e751f4980b12602bf8c494c5cae6bbe7a774507",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +2073,2077 @@        start_date=None,  # type: Optional[datetime]\n        end_date=None,  # type: Optional[datetime]\n        schedule_interval=None,  # not hooked as of now\n        depends_on_past=False,  # type: bool\n        wait_for_downstream=False,  # type: bool"
  },
  {
    "id" : "472151a4-157c-4337-8128-33b3290d3f79",
    "prId" : 4926,
    "prUrl" : "https://github.com/apache/airflow/pull/4926#pullrequestreview-216483950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd176fae-11b8-4568-9f6e-2ff471fa711f",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This looks like a possible code change. Please double check with the PR that introduced the \"Hashable\" here for the reasoning",
        "createdAt" : "2019-03-19T23:36:31Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "a708013b-892d-417f-9052-94fcae998585",
        "parentId" : "dd176fae-11b8-4568-9f6e-2ff471fa711f",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "It looks like the `Hashable` check was added because `relativedelta` objects aren't hashable in `python-dateutil` before version 2.7. It turns out that the keys of `cron_presets` are always strings, so we can check that `schedule_interval` is a string instead of checking that it's hashable. We could also require `python-dateutil>=2.7` and drop both checks.",
        "createdAt" : "2019-03-20T00:39:06Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e751f4980b12602bf8c494c5cae6bbe7a774507",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +3051,3055 @@\n        self.schedule_interval = schedule_interval\n        if isinstance(schedule_interval, six.string_types) and schedule_interval in cron_presets:\n            self._schedule_interval = cron_presets.get(schedule_interval)  # type: Optional[ScheduleInterval]\n        elif schedule_interval == '@once':"
  },
  {
    "id" : "48991f3e-9a88-409d-b97f-340b6a67971d",
    "prId" : 4926,
    "prUrl" : "https://github.com/apache/airflow/pull/4926#pullrequestreview-218965168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce30b453-a002-466b-84c7-dd4933452f18",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "General style point:\r\n\r\nOn these \"shorter\" fns is it possible to put the type annotation at the end instead of inline? Or is this the more commonly accepted style for type comments on func args?",
        "createdAt" : "2019-03-19T23:38:04Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "be504bc1-c521-4a98-a9b3-7dd579b711da",
        "parentId" : "ce30b453-a002-466b-84c7-dd4933452f18",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Either way works. From https://mypy.readthedocs.io/en/latest/python2.html, we can annotate a function like this:\r\n\r\n```python\r\ndef hello(): # type: () -> None\r\n    print 'hello'\r\n```\r\n\r\nIn this case, the arguments and the type annotation wouldn't fit on a single line, so I thought it made sense to split the arguments up, but I'd be happy to reformat.",
        "createdAt" : "2019-03-20T00:52:22Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "feceaa84-a78c-4832-a60b-3b2f223c806d",
        "parentId" : "ce30b453-a002-466b-84c7-dd4933452f18",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "For something as monstorous as the BaseOperator it makes sense to have the comment on the arg, not at the end.\r\n\r\nI was just thinking that in this case where there's about \"4 or 5\" args that it might be clear and shorter to have one type comment at the end. But I'm not sure that is true.\r\n\r\nAnyone have any opinions either way?",
        "createdAt" : "2019-03-20T10:20:35Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "85f894a4-86fd-4d97-b77d-16655660ef38",
        "parentId" : "ce30b453-a002-466b-84c7-dd4933452f18",
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "I think this is a little unwieldy for one line:\r\n\r\n```python\r\ndef get(cls, key, default_var=__NO_DEFAULT_SENTINEL, deserialize=False, session=None):  # type: (str, Any, bool, Any) -> Any\r\n```\r\n\r\nWe could split the definition over a few lines, but then we're getting close to the original formatting:\r\n\r\n```python\r\ndef get(\r\n    cls, key, default_var=__NO_DEFAULT_SENTINEL, deserialize=False, session=None\r\n):  # type: (str, Any, bool, Any) -> Any\r\n```\r\n\r\nI don't have a strong preference between the second example and the current code. But I think it would be even better to adopt https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-6+Enforce+the+usage+of+a+code+formatter and avoid having these conversations.",
        "createdAt" : "2019-03-26T03:44:24Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "197626c3-4b6c-420f-8d8c-7ceb03befa48",
        "parentId" : "ce30b453-a002-466b-84c7-dd4933452f18",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Yeah, computer enforce style guide ftw.",
        "createdAt" : "2019-03-26T15:19:16Z",
        "updatedAt" : "2019-03-27T00:39:30Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e751f4980b12602bf8c494c5cae6bbe7a774507",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +4289,4293 @@        default_var=__NO_DEFAULT_SENTINEL,  # type: Any\n        deserialize_json=False,  # type: bool\n        session=None\n    ):\n        obj = session.query(cls).filter(cls.key == key).first()"
  },
  {
    "id" : "015f2ee5-8030-48bb-90b9-2f63807d1304",
    "prId" : 4951,
    "prUrl" : "https://github.com/apache/airflow/pull/4951#pullrequestreview-218059387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8a84193-6c04-4b9e-8105-55424856bd12",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Please correct me if I am wrong, this is a breaking change, isn't it ??\r\n\r\nBehavior before this PR is if the variable is not defined it would error.\r\nBut after merging this PR: it would not raise an error.\r\n\r\n@jmcarp @Fokko ",
        "createdAt" : "2019-03-23T21:57:29Z",
        "updatedAt" : "2019-03-23T21:57:52Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "eaa0bf01-28d9-4cff-9c31-34ee08faee94",
        "parentId" : "b8a84193-6c04-4b9e-8105-55424856bd12",
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "The default is Undefined: https://github.com/pallets/jinja/blob/master/jinja2/environment.py#L279\r\n\r\nThis is still the case if it isn't passed explicitly: https://github.com/apache/airflow/pull/4951/files/65af90c017022c2fb31b24d336e0de45934120cd#diff-664e0133fa172b6e0060f2dd7b2c3504R2990",
        "createdAt" : "2019-03-23T22:21:02Z",
        "updatedAt" : "2019-03-23T22:21:03Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      },
      {
        "id" : "49160354-f7a0-4a6f-8abd-2d5482277c74",
        "parentId" : "b8a84193-6c04-4b9e-8105-55424856bd12",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Oh yes, you are right... my bad :) \r\nThanks @Fokko ",
        "createdAt" : "2019-03-23T22:31:08Z",
        "updatedAt" : "2019-03-23T22:31:08Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "8b9e2f6d-d73e-496c-b25b-3b5d61c8c370",
        "parentId" : "b8a84193-6c04-4b9e-8105-55424856bd12",
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "No problem, any time @kaxil 👍 ",
        "createdAt" : "2019-03-23T22:59:16Z",
        "updatedAt" : "2019-03-23T22:59:16Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "65af90c017022c2fb31b24d336e0de45934120cd",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +3520,3524 @@        env = jinja2.Environment(\n            loader=jinja2.FileSystemLoader(searchpath),\n            undefined=self.template_undefined,\n            extensions=[\"jinja2.ext.do\"],\n            cache_size=0)"
  }
]