[
  {
    "id" : "c2db6d27-9af4-4557-89a2-68bf4e110db0",
    "prId" : 5426,
    "prUrl" : "https://github.com/apache/airflow/pull/5426#pullrequestreview-250569877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I don't think we should add another example dag here - the unit test alone is enough.",
        "createdAt" : "2019-06-17T13:17:36Z",
        "updatedAt" : "2019-06-17T13:17:36Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "14ba9cc2-06bf-4191-8391-edbe7d6434ef",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Example DAGs get \"installed\" by default in new installs, so we want to be careful about adding example DAGs.",
        "createdAt" : "2019-06-17T13:18:15Z",
        "updatedAt" : "2019-06-17T13:18:16Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "69fa78d6-2316-4227-9345-eef90bab1e94",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "All new GCP operators have example DAGs. Existing operators will be updated in this Q. This is necessary because all GCP operators [will be tested at the system level](https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-4+Support+for+System+Tests+for+external+systems). Examples are also used by documentation. \r\nI would like to point out that only modules from ``airflow.example_dags`` are automatically loaded. The modules from the ``airflow.contrib.example_dags`` package are not automatically loaded.\r\n\r\nDocumentation will be updated later, because because it requires other changes first.",
        "createdAt" : "2019-06-17T13:48:45Z",
        "updatedAt" : "2019-06-17T13:54:46Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "6eb796ce-f651-409b-8ebb-27872e3a4466",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "That is a good point about the 'contrib'.\r\n\r\nDo we need an example DAG for every operator - that seems overkill to me.",
        "createdAt" : "2019-06-17T13:52:29Z",
        "updatedAt" : "2019-06-17T13:52:29Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "371a87bc-9914-4903-a795-be006578d28d",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "(Useful docs, good. Example DAG for _every_ GCP operator: I'm not so sure)",
        "createdAt" : "2019-06-17T13:53:16Z",
        "updatedAt" : "2019-06-17T13:53:16Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "eae03f64-31ca-4519-8338-708042d13b1a",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yeah. @mik-laj  is right. We plan to bring all the GCP operators (even the old ones) up to the level of the new ones we added - including documentation and automated system tests. Those example dags help us to test regressions with real GCP really quickly @ashb. \r\n\r\nWe also plan to agree with community and cleanup the contrib vs. main operators and for me this will be great opportunity to move the example dags around to a folder with name that explains that it is mainly for regressions and documentation (they might not be named example_dags any more but something else) @mik-laj - I think we should add it to the proposal of the contrib/main hook synchronisation. @ashb - we are willing to lead the effort, agree to a solution, write proposal and execute most of it for GCP operators at least (possibly for all of them). I think that might be super useful for the Cleanup Summer for 2.0.0 (not Spring any more ;) ) ",
        "createdAt" : "2019-06-17T13:54:40Z",
        "updatedAt" : "2019-06-17T13:54:46Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "5e369681-5ae8-4a9c-a1f3-305f34f25211",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This is going a little off topic of this PR now (sorry @nuclearpinguin!) but I personally don't see that integration tests are needed for _every_ dag - for this example the only \"interesting\" bit is:\r\n\r\n```\r\npig_taks = DataProcPigOperator(\r\n        task_id=\"pig_task\",\r\n        query=\"define sin HiveUDF('sin');\",\r\n        region=REGION,\r\n        cluster_name=CLUSTER_NAME\r\n    )\r\n```\r\n\r\nand to test that we just need to check that we call the GCP api correctly - what do we gain from testing this on an actual cluster?\r\n\r\nFurther: if these dags for for tests and not intended to be visible in a airflow install with `include_examples=True` then they should probably live under `tests/` somewhere.",
        "createdAt" : "2019-06-17T14:01:31Z",
        "updatedAt" : "2019-06-17T14:01:31Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "5bcc1163-f74f-46d8-a146-a9222489648d",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "The thing is that we have system tests that start from an empty GCP project, create cluster, run tests on it and then tear it down so that we do not have to pay for it. And we fully automate it in our Cloud Build automated testing. \r\n\r\nIn this particular case we will use that example DAG to document all three operators Create/Delete and DataprocOperator itself.. So all three in fact are interesting. We just decided not to do it just yet, but we can just do it now. See for example similar example DAGs we have here: \r\n\r\nhttps://github.com/apache/airflow/blob/master/airflow/contrib/example_dags/example_gcp_compute.py - we have documentation START/END around every operator and then they are used to have a nice, correct documentation here: https://airflow.readthedocs.io/en/latest/howto/operator/gcp/compute.html  (we know it is correct because we system test it). \r\n\r\nI am going to come back to AIP-4 which was exactly about making this approach (having runnable DAGs as system tests) easy to use by others as well (https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-4+Support+for+System+Tests+for+external+systems). Once AIP-10 and AIP-7 is done, it is very high on my list.\r\n\r\nI agree it should not be in \"example_dags\" possibly. For sure \"testable_dags\" is much better name - but that's a bigger change that should be part of getting rid of contrib IMHO. \r\n\r\nMaybe as an intermediate step we can simply add the missing documentation and use the example dags in the same way as we did with other operators? So that you can see how useful it is to have it.",
        "createdAt" : "2019-06-17T14:19:22Z",
        "updatedAt" : "2019-06-17T14:19:22Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "bd94a575-edfd-40ab-80b2-035f3ac34843",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "We want to check if the libraries are working properly. Airflow often have dependency problems. This example will be developed in the future with additional creation and deletion of the cluster, as well as other operators. Thanks to the existence of system tests, we have detected a lot of problems in operators already at the stage of operator development. System tests allow for a much faster check of proper functioning during major refactorizations.",
        "createdAt" : "2019-06-17T14:34:09Z",
        "updatedAt" : "2019-06-17T14:34:09Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "a920456d-a88f-48ee-af1e-31bbba5438bd",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I think that these examples in the test directory are intended for testing only. These examples are used by the documentation as well.  This, however, requires a deeper thought in a separate ticket.",
        "createdAt" : "2019-06-17T14:35:17Z",
        "updatedAt" : "2019-06-17T14:35:17Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "71f1eb27-ef0c-4da5-8579-58b234911c36",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "The lack of tests for some operators for GCP has hindered the development of the project. \r\nhttps://github.com/apache/airflow/pull/4790#issuecomment-468892112\r\nIt is very difficult to perform appropriate tests for all operators without system tests. Unit tests are not enough because we are not able to check that everything is working properly\r\nhttps://cwiki.apache.org/confluence/display/AIRFLOW/AIP-4+Support+for+System+Tests+for+external+systems",
        "createdAt" : "2019-06-17T14:38:24Z",
        "updatedAt" : "2019-06-17T14:38:38Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "69ef2219-7516-4a09-afe2-1b8e11580526",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> It is very difficult to perform appropriate tests for all operators without system tests. Unit tests are not enough because we are not able to check that everything is working properly\r\n\r\nI agree with @mik-laj. Moreover, some GCP APIs are still in beta phase and system tests allow to catch some inconsistencies and changes.\r\n",
        "createdAt" : "2019-06-17T14:48:30Z",
        "updatedAt" : "2019-06-17T14:48:30Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "abc346b4-1e6f-4158-a4cc-f6db3e19ed3c",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "I'm convinced. My main concern was UI \"polution\" for a fresh install anyway which isn't a problem -- but I think as part of AIP-4 we should think about where these dags live.",
        "createdAt" : "2019-06-17T14:58:41Z",
        "updatedAt" : "2019-06-17T14:58:41Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "47e9bccd-84f1-45f0-845c-2ac9ef860590",
        "parentId" : "7809853c-affe-44cd-a592-4ccacbd63ff6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Yep. I imagine AIP-4 works as plugginable extension to breeze/docker we have in Airflow. Then anyone testing their own services will be able to have their own automated CI running their own system tests using their own CI of choice (for example in our case - using Cloud Build). Without polluting the main Airflow code/tests or examples. I will do it in the way that you might have it living completely outside of the main airflow repo - and you will be able to evolve it separately.\r\n\r\nSo it all fits very well and I am sure we will find a good resting place for the dags ;). ",
        "createdAt" : "2019-06-17T15:27:52Z",
        "updatedAt" : "2019-06-17T15:27:53Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f34fcf36e63514a16aae0dd907e424d0571352a7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@\n\"\"\"\nExample Airflow DAG for Google Dataproc PigOperator\n\"\"\"\n"
  }
]