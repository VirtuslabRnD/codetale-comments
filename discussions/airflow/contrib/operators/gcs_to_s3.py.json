[
  {
    "id" : "0f07977b-7079-4dee-aecb-010983deaa10",
    "prId" : 4371,
    "prUrl" : "https://github.com/apache/airflow/pull/4371#pullrequestreview-187989242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ad7f935-f82d-4604-bb2f-c4e79f1ba538",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "not sure on this. `xcom` push should be able to support any pickleable object like list, set",
        "createdAt" : "2018-12-27T01:13:47Z",
        "updatedAt" : "2018-12-27T01:13:47Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "3a0d4db3-abac-4e58-af43-6b54cf7effc9",
        "parentId" : "9ad7f935-f82d-4604-bb2f-c4e79f1ba538",
        "authorId" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "body" : "Actually the error log says it does not support `set`: ` TypeError: 'NoneType' object is not iterable.` but it works with list.",
        "createdAt" : "2018-12-27T02:01:57Z",
        "updatedAt" : "2018-12-27T02:01:57Z",
        "lastEditedBy" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "tags" : [
        ]
      },
      {
        "id" : "65b0a1f7-2864-43c7-b2cf-09e9c66c4aab",
        "parentId" : "9ad7f935-f82d-4604-bb2f-c4e79f1ba538",
        "authorId" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "body" : "added traceback on the description. According to the traceback model.py internally uses `json.dumps(value).encode` but it does not support set since set is not JSON serializable",
        "createdAt" : "2018-12-27T02:21:20Z",
        "updatedAt" : "2018-12-27T02:21:33Z",
        "lastEditedBy" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "tags" : [
        ]
      },
      {
        "id" : "bd56d0f4-6a3c-4a76-a5d0-9f51677d8bdd",
        "parentId" : "9ad7f935-f82d-4604-bb2f-c4e79f1ba538",
        "authorId" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "body" : "If you think `xcom` should support `set`, this is a bug on `xcom` since the current implementation uses `json.dumps` and it only supports JSON serializable ( `set` is not JSON serializable).\r\n\r\n```\r\n>>> list = [1,2,3,1]\r\n>>> json.dumps(list).encode('UTF-8')\r\nb'[1, 2, 3, 1]'\r\n>>> s = set(list)\r\n>>> json.dumps(s).encode('UTF-8')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/01087872/.pyenv/versions/3.7.1/lib/python3.7/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/Users/01087872/.pyenv/versions/3.7.1/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/Users/01087872/.pyenv/versions/3.7.1/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/Users/01087872/.pyenv/versions/3.7.1/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type set is not JSON serializable\r\n```",
        "createdAt" : "2018-12-27T02:27:14Z",
        "updatedAt" : "2018-12-27T02:27:50Z",
        "lastEditedBy" : "f7896d17-48a4-405f-bb26-e6e1f70db56a",
        "tags" : [
        ]
      },
      {
        "id" : "4216ffc8-dbe1-461b-a44e-99cf4d58d77f",
        "parentId" : "9ad7f935-f82d-4604-bb2f-c4e79f1ba538",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Yup, yup. You are right",
        "createdAt" : "2018-12-27T02:32:40Z",
        "updatedAt" : "2018-12-27T02:32:40Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "07b6ec6c26dec953b087ce7fad53f3ed07c923f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +102,106 @@            bucket_name, _ = S3Hook.parse_s3_url(self.dest_s3_key)\n            existing_files = s3_hook.list_keys(bucket_name)\n            files = list(set(files) - set(existing_files))\n\n        if files:"
  },
  {
    "id" : "29a8e953-3f69-4c45-b639-53247af42c01",
    "prId" : 4766,
    "prUrl" : "https://github.com/apache/airflow/pull/4766#pullrequestreview-229208588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a5ba042-0e78-490a-b047-71b8a1d9d0f4",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "The \"replace\" parameter is not described in the docstring. I think it's a good opportunity to add the docstring",
        "createdAt" : "2019-04-22T19:33:43Z",
        "updatedAt" : "2019-04-23T13:56:15Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b36058aa1ffa7ecfaf04d885aec796f70689734",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +105,109 @@\n        if not self.replace:\n            # if we are not replacing -> list all files in the S3 bucket\n            # and only keep those files which are present in\n            # Google Cloud Storage and not in S3"
  }
]