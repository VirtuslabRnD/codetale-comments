[
  {
    "id" : "10af89b0-dfe0-45e2-bc01-aba01c57c30a",
    "prId" : 5077,
    "prUrl" : "https://github.com/apache/airflow/pull/5077#pullrequestreview-226392720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7edbde58-b710-4d74-adea-6f5bd8a5d616",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "May be add an example of using this operator in docstrings... Similar to https://github.com/apache/airflow/blob/master/airflow/contrib/operators/gcs_list_operator.py#L51",
        "createdAt" : "2019-04-13T19:30:48Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "26232328-14d8-4652-9d34-25542657a642",
        "parentId" : "7edbde58-b710-4d74-adea-6f5bd8a5d616",
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "Resolved with [97c9cd7](https://github.com/apache/airflow/pull/5077/commits/97c9cd711f958f27dd82fb00f9fab334892f3ff1).",
        "createdAt" : "2019-04-14T12:19:03Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0400f468e271fc17cd84befadd7dc1027f10b7d",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@                dag=dag\n            )\n    \"\"\"\n\n    template_fields = ('sql', 'bucket', 'filename', 'schema_filename')"
  },
  {
    "id" : "4a76e37d-746d-4857-b851-8492c446ac9c",
    "prId" : 5077,
    "prUrl" : "https://github.com/apache/airflow/pull/5077#pullrequestreview-226392714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "629fa25d-de24-4fab-a150-38bb4de0dacc",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Missing blank space",
        "createdAt" : "2019-04-13T19:31:20Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "04fb815e-3f66-4db0-b366-ef7773d275ed",
        "parentId" : "629fa25d-de24-4fab-a150-38bb4de0dacc",
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "Resolved with [97c9cd7](https://github.com/apache/airflow/pull/5077/commits/97c9cd711f958f27dd82fb00f9fab334892f3ff1).",
        "createdAt" : "2019-04-14T12:18:57Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0400f468e271fc17cd84befadd7dc1027f10b7d",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@        Queries MSSQL and returns a cursor of results.\n\n        :return: mssql cursor\n        \"\"\"\n        mssql = MsSqlHook(mssql_conn_id=self.mssql_conn_id)"
  },
  {
    "id" : "19ab73f7-3cf1-475d-abe2-e955cd6c10bd",
    "prId" : 5077,
    "prUrl" : "https://github.com/apache/airflow/pull/5077#pullrequestreview-226392711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc09a68f-873f-4296-a09a-c718f42f49de",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Add example of this case as well on how to use `{}` in docstrings",
        "createdAt" : "2019-04-13T19:32:31Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "837ea58a-1d94-4395-9394-b7a6909f5612",
        "parentId" : "fc09a68f-873f-4296-a09a-c718f42f49de",
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "Resolved with [97c9cd7](https://github.com/apache/airflow/pull/5077/commits/97c9cd711f958f27dd82fb00f9fab334892f3ff1).",
        "createdAt" : "2019-04-14T12:18:53Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0400f468e271fc17cd84befadd7dc1027f10b7d",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@    :type bucket: str\n    :param filename: The filename to use as the object name when uploading\n        to Google Cloud Storage. A {} should be specified in the filename\n        to allow the operator to inject file numbers in cases where the\n        file is split due to size, e.g. filename='data/customers/export_{}.json'."
  },
  {
    "id" : "52285c6f-5df1-4222-affb-1fe934c24e97",
    "prId" : 5077,
    "prUrl" : "https://github.com/apache/airflow/pull/5077#pullrequestreview-226392745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7f274a5-98a6-4a87-a09d-671f892e093f",
        "parentId" : null,
        "authorId" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "body" : "Can you please add support for some more very used types?\r\nFor example MsSQL has:  money ,smallmoney, smalldatetime  etc...\r\nThese types needs to be mapped to the best match in BigQuery types.",
        "createdAt" : "2019-04-14T08:48:07Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "tags" : [
        ]
      },
      {
        "id" : "23f167db-931e-4ae3-89e2-fd681c6a3d7d",
        "parentId" : "a7f274a5-98a6-4a87-a09d-671f892e093f",
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "As per: [_mssql.pyx#L1710](https://github.com/pymssql/pymssql/blob/fda5fd38f30eaeeb40a911235692144493d69864/src/_mssql.pyx#L1710) `pymssql` only returns five basic DB types.",
        "createdAt" : "2019-04-14T12:06:11Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      },
      {
        "id" : "b679ceff-fc2f-4398-869c-04f00df56f2d",
        "parentId" : "a7f274a5-98a6-4a87-a09d-671f892e093f",
        "authorId" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "body" : "yep. apparently the package handle these transforms on it's own. It converts money to DECIMAL. ",
        "createdAt" : "2019-04-14T12:10:57Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "tags" : [
        ]
      },
      {
        "id" : "46da7414-ff91-4a04-8b79-ed31d76d0f74",
        "parentId" : "a7f274a5-98a6-4a87-a09d-671f892e093f",
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "We could use `_mssql` over `pymssql` but it is not DB-API compliant plus the `MsSqlHook` would need changing too.",
        "createdAt" : "2019-04-14T12:13:40Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      },
      {
        "id" : "8cf1859f-0af0-4f6a-95e4-18a9ff27a8a8",
        "parentId" : "a7f274a5-98a6-4a87-a09d-671f892e093f",
        "authorId" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "body" : "Maybe better leave it to the users. The operator accept SQL query. The user can convert the type of the  \"non supported\" columns to something else within the query (like TEXT or whatever).\r\nFor example:\r\nhttps://stackoverflow.com/questions/532351/how-do-i-convert-from-a-money-datatype-in-sql-server",
        "createdAt" : "2019-04-14T12:19:33Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "fd0eadce-2798-4d2a-a9a2-8863df9c13fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0400f468e271fc17cd84befadd7dc1027f10b7d",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +231,235 @@            3: 'INTEGER',\n            4: 'TIMESTAMP',\n            5: 'NUMERIC'\n        }\n        return d[mssql_type] if mssql_type in d else 'STRING'"
  },
  {
    "id" : "781ceb9a-10cc-4eee-8d8a-a6d0be7520f6",
    "prId" : 5077,
    "prUrl" : "https://github.com/apache/airflow/pull/5077#pullrequestreview-227205711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9013bcc3-3946-4015-bcca-e19385076bd5",
        "parentId" : null,
        "authorId" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "body" : "@OmerJog Agree, I've implemented a quick one-liner simply to avoid rebuilding to much, but imagine should be fine? (BigQuery will not like compressed schema files)",
        "createdAt" : "2019-04-16T13:29:10Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "b4acd926-c7ba-44ce-a446-629b2d737355",
        "tags" : [
        ]
      },
      {
        "id" : "5c380acf-b994-4f1f-b76c-8e395b4d22e5",
        "parentId" : "9013bcc3-3946-4015-bcca-e19385076bd5",
        "authorId" : "dd9d6a00-558d-46ea-b524-e24aa17ff9ab",
        "body" : "Yep. There is no need to compress the schema file.\r\nCompression is for the data files.",
        "createdAt" : "2019-04-16T13:48:52Z",
        "updatedAt" : "2019-04-17T09:21:15Z",
        "lastEditedBy" : "dd9d6a00-558d-46ea-b524-e24aa17ff9ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0400f468e271fc17cd84befadd7dc1027f10b7d",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +209,213 @@        for object_name, tmp_file_handle in files_to_upload.items():\n            hook.upload(self.bucket, object_name, tmp_file_handle.name, 'application/json',\n                        (self.gzip if object_name != self.schema_filename else False))\n\n    @classmethod"
  }
]