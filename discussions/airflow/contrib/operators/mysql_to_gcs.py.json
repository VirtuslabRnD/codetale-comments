[
  {
    "id" : "57452bf8-3c7c-47cb-913d-67af24160ff3",
    "prId" : 1080,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f65a9ba1-4b28-47d0-a76c-52d086f715e0",
        "parentId" : null,
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "To avoid leaking temp files, it might be good to clean these up in a finally!\n",
        "createdAt" : "2016-02-25T19:25:34Z",
        "updatedAt" : "2016-02-25T19:25:34Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      },
      {
        "id" : "fc096f77-5495-427e-94ca-04b048cbc2a3",
        "parentId" : "f65a9ba1-4b28-47d0-a76c-52d086f715e0",
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "NamedTempFiles are cleaned as part of close(). They're also cleaned on Python proc shutdown.\n",
        "createdAt" : "2016-02-25T21:04:57Z",
        "updatedAt" : "2016-02-25T21:04:57Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "40834dbfe473b2fb8299fa005a7a86580f3c8917",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@        # Close all temp file handles.\n        for file_handle in files_to_upload.values():\n            file_handle.close()\n\n    def _query_mysql(self):"
  },
  {
    "id" : "aa812c8f-5a98-4357-9006-ab090555a2d1",
    "prId" : 1080,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d291669-a2c3-4b3c-b911-3d2054364d6d",
        "parentId" : null,
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "Can you add a guard for the row_size<=2MB limit now or do you plan to add it in the next PR?\n",
        "createdAt" : "2016-02-25T19:26:51Z",
        "updatedAt" : "2016-02-25T19:27:23Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      },
      {
        "id" : "74b73095-fd7c-4c14-a299-0ff889165fa4",
        "parentId" : "8d291669-a2c3-4b3c-b911-3d2054364d6d",
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "I plan to do it in next PR. I plan to hit this problem when we pull some of our tables, and what to fix it when I have a real issue with it. I am just at the point where I have enough back-logged non-merged code that I want to split the commits up.\n",
        "createdAt" : "2016-02-25T21:05:42Z",
        "updatedAt" : "2016-02-25T21:05:42Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "40834dbfe473b2fb8299fa005a7a86580f3c8917",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +112,116 @@        for row in cursor:\n            row_dict = dict(zip(schema, row))\n            # TODO validate that row isn't > 2MB. BQ enforces a hard row size of 2MB.\n            json.dump(row_dict, tmp_file_handle)\n"
  },
  {
    "id" : "52b1d446-df05-4795-8599-2e01c6c37d79",
    "prId" : 1110,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2589f700-bff8-45c8-9d5a-fa02df11be8a",
        "parentId" : null,
        "authorId" : "c5902037-3fba-4513-8804-ed0681136579",
        "body" : "I learned yesterday that functools.partial is considered more pythonic than lambda.\n(http://stackoverflow.com/a/3252425)\nnot really a big deal, but in case you care.\n",
        "createdAt" : "2016-03-03T17:28:21Z",
        "updatedAt" : "2016-03-03T19:46:51Z",
        "lastEditedBy" : "c5902037-3fba-4513-8804-ed0681136579",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d14f3646d9132ea5015050f543111142a48b1ff",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +114,118 @@        for row in cursor:\n            # Convert datetime objects to utc seconds\n            row = map(lambda v: time.mktime(v.timetuple()) if type(v) in (datetime, date) else v, row)\n            row_dict = dict(zip(schema, row))\n"
  },
  {
    "id" : "70538b0f-b452-4db2-881f-287b16dbc1eb",
    "prId" : 5196,
    "prUrl" : "https://github.com/apache/airflow/pull/5196#pullrequestreview-231455862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c29c50ba-0e48-495f-847f-09b44239e885",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "The documentation for this conversion is good, but in my opinion we should always document the parameters as well + to have a cleaner sphinx generated documentation. :)",
        "createdAt" : "2019-04-28T08:33:17Z",
        "updatedAt" : "2019-06-11T03:27:32Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      }
    ],
    "commit" : "456b4d36fbf5990e64db8345162908d781b00c63",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +304,308 @@\n    @classmethod\n    def _convert_type(cls, value, schema_type):\n        \"\"\"\n        Takes a value from MySQLdb, and converts it to a value that's safe for"
  }
]