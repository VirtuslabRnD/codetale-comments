[
  {
    "id" : "cd667993-c9a7-472e-a72b-6c6f643a525b",
    "prId" : 4353,
    "prUrl" : "https://github.com/apache/airflow/pull/4353#pullrequestreview-187948366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a63f341d-0a95-4593-ac59-4ba6a0ea3c52",
        "parentId" : null,
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "I was going to ask for tests of changes to the hook, but I see that we don't test this hook at all at the moment. Do you have time to add tests in this PR, or should we add them in a separate PR?",
        "createdAt" : "2018-12-26T16:49:56Z",
        "updatedAt" : "2019-01-04T16:23:56Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "86dc47db-33c2-4749-844f-20ce92d69d00",
        "parentId" : "a63f341d-0a95-4593-ac59-4ba6a0ea3c52",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I'd rather wait with hook tests to subsequent PRs (and maybe we solve it in a bit different way). I think it is rather difficult to test automatically the hooks to GCP using mocking/classic unit tests of Airflow. Please let me know what you think about the approach we use? Maybe we are missing something and we can add some unit test for hooks which could add value :)?\r\n\r\nWe chose a slightly different strategy for testing GCP operators (and hooks):\r\n\r\n* First of all we try to make hooks as straightforward as possible - basically 1-1 operation of an existing library method but we make it synchronous - waiting for operation to complete. Then we put pretty much all logic into operators. \r\n\r\n* What we realised is that we can mostly test with mocking and unit tests in this case, is whether this particular library method has been called. Which is a bit redundant - that's why we do not have those hook tests. \r\n\r\n* instead we run automated system tests (\"we\" means the team from my company Polidea - 3 people who work on those operators). We use example DAGs (`example_gcp_spanner.py` in this case) to run them automatically with a real GCP_PROJECT. We even have a way to run them using (skipped by default) unit testss (see for example CloudSpannerExampleDagsTest). We have a separate and quite sophisticated environment for that - we run it automatically in GCP Cloud Build on every push and this way we test e-2-e whether the operators (and thus hooks) work with real GCP. \r\n\r\nI am going to try to contribute it very soon to the community (it's already open-sourced and I am polishing it) so that others will be able to do the same with their own GCP projects. You can see it here https://github.com/PolideaInternal/airflow-breeze and I will be happy to involve you for comments/re view when we are ready to share it (I think in a couple of days).\r\n\r\nWhat do you think?\r\n\r\n\r\n",
        "createdAt" : "2018-12-26T19:25:26Z",
        "updatedAt" : "2019-01-04T16:23:56Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ddc9072a3b3658dd99d0f7d1bdc66e0b6e471f",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +150,154 @@        :type func: Callable\n        \"\"\"\n        instance = self.get_client(project_id).instance(\n            instance_id, configuration_name=configuration_name,\n            node_count=node_count, display_name=display_name)"
  },
  {
    "id" : "3a7c4e63-22e4-4fb5-bab2-afdf7fb1a7c0",
    "prId" : 4353,
    "prUrl" : "https://github.com/apache/airflow/pull/4353#pullrequestreview-188862453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92fe160d-2c46-4f67-b742-d26ce3f325d6",
        "parentId" : null,
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Is this return value useful? It looks like this method either returns `True` or raises an exception, so I'm not sure when it would be useful to check the return value.",
        "createdAt" : "2018-12-26T16:51:34Z",
        "updatedAt" : "2019-01-04T16:23:56Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "9ec0392e-231e-45b2-8495-9608670aea34",
        "parentId" : "92fe160d-2c46-4f67-b742-d26ce3f325d6",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Agree. I noticed that as well some time ago. It's not very useful indeed. We have it in a number of places in a number of hooks and we might want to make a single consistency update to fix it in all of them. If you are OK with it, I will add it to our internal \"consistency improvements tasks that we have.",
        "createdAt" : "2018-12-26T19:30:44Z",
        "updatedAt" : "2019-01-04T16:23:56Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "03de879d-a6e7-4de8-bdb3-32c40bb0faff",
        "parentId" : "92fe160d-2c46-4f67-b742-d26ce3f325d6",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "Good point @jmcarp ",
        "createdAt" : "2019-01-02T23:10:00Z",
        "updatedAt" : "2019-01-04T16:23:56Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ddc9072a3b3658dd99d0f7d1bdc66e0b6e471f",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +242,246 @@            result = operation.result()\n            self.log.info(result)\n        return True\n\n    def update_database(self, project_id, instance_id, database_id, ddl_statements,"
  }
]