[
  {
    "id" : "29dd0b3a-b4e3-4c50-98fd-ac17c05f10a9",
    "prId" : 4354,
    "prUrl" : "https://github.com/apache/airflow/pull/4354#pullrequestreview-187958893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "626286b4-812f-440d-85a3-9e361b91583e",
        "parentId" : null,
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Can you add tests for this hook?",
        "createdAt" : "2018-12-26T15:48:10Z",
        "updatedAt" : "2019-01-04T13:49:41Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "9a4ca9ce-522e-476b-86b6-368174463466",
        "parentId" : "626286b4-812f-440d-85a3-9e361b91583e",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "@DariuszAniszewski  is on holidays, but let me add a comment on that - this is very similar story with Spanner hook, we are testing GCP hooks with System tests (and real GCP) rather than with mock unit tests. The logic in those hooks is really simple - usually simply calling the corresponding library method, so tests for each would be quite redundant - for example tests for update_cluster would test if Cluster constructor is called once and then if update() method is called once. That's still possible and easy to do (and we can still do it) but I don't think it adds a lot of value. \r\n\r\nDo you think it makes sense to have such tests @jmcarp ? ",
        "createdAt" : "2018-12-26T20:47:34Z",
        "updatedAt" : "2019-01-04T13:49:41Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b87854b98b5b5cdc34bf150fd45f2fd2108d35ae",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@\n\nclass BigtableHook(GoogleCloudBaseHook):\n    \"\"\"\n    Hook for Google Cloud Bigtable APIs."
  },
  {
    "id" : "0a80e2e3-1c61-4ef4-a2f1-69f0cd4aa743",
    "prId" : 4354,
    "prUrl" : "https://github.com/apache/airflow/pull/4354#pullrequestreview-188867098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee0e1eee-6eae-449a-85b7-6208565598da",
        "parentId" : null,
        "authorId" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "body" : "Since this hook subclasses `GoogleCloudBaseHook`, you can get the project id optionally set on the connection with `self.project_id`. Can you make `project_id` optional and default to the connection field, like in `GoogleCloudStorageHook.create_bucket`?",
        "createdAt" : "2018-12-26T15:51:10Z",
        "updatedAt" : "2019-01-04T13:49:41Z",
        "lastEditedBy" : "9a5e8348-c065-464c-a412-d4070cbed6ea",
        "tags" : [
        ]
      },
      {
        "id" : "961d06f0-6ddb-47f6-8586-3893178a0e62",
        "parentId" : "ee0e1eee-6eae-449a-85b7-6208565598da",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "That's indeed  a good idea in general for all GCP operators. We have not done it so far in neither of them - we've implemented around 30 operators so far and all of them have PROJECT_ID required. I think it's a good improvement proposal to all 30 operators - maybe we could implement it as a separate PR (because it has some consequences - in a number of places we validate that project_id is needed, we have unit tests testing it and some validation rules implemented. What do you think?",
        "createdAt" : "2018-12-26T20:54:55Z",
        "updatedAt" : "2019-01-04T13:49:41Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "49cc0a0c-085a-49ab-ba1c-6d8cab2e92ff",
        "parentId" : "ee0e1eee-6eae-449a-85b7-6208565598da",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "+1 for optional project_id",
        "createdAt" : "2019-01-02T23:38:08Z",
        "updatedAt" : "2019-01-04T13:49:41Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "b87854b98b5b5cdc34bf150fd45f2fd2108d35ae",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@        return self._client\n\n    def get_instance(self, project_id, instance_id):\n        \"\"\"\n        Retrieves and returns the specified Cloud Bigtable instance if it exists."
  }
]