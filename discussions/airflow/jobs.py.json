[
  {
    "id" : "eb546504-30dc-41c2-b5b6-c9f2a44a381c",
    "prId" : 612,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ce21658-1e79-412c-9996-a8d0beb58709",
        "parentId" : null,
        "authorId" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "body" : "Nicely avoiding the N+1 lurking here :)\n",
        "createdAt" : "2015-11-10T21:23:50Z",
        "updatedAt" : "2015-11-10T21:23:50Z",
        "lastEditedBy" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "tags" : [
        ]
      }
    ],
    "commit" : "22c9d90c4dbcd98d55f6a9cb1324fe34ac306ad8",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +435,439 @@                .filter(\n                    TI.dag_id == dag.dag_id,\n                    TI.execution_date.in_(active_runs),\n                    TI.state.in_((State.RUNNING, State.SUCCESS, State.FAILED)),\n                )"
  },
  {
    "id" : "2fce514d-7ca5-4d40-bac8-bde81824c982",
    "prId" : 668,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efe32cf8-27be-462f-8dc1-d01fa4e5d8b9",
        "parentId" : null,
        "authorId" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "body" : "This is the bug fix mentioned in the main PR description.\n",
        "createdAt" : "2015-11-19T20:22:35Z",
        "updatedAt" : "2015-11-20T16:12:51Z",
        "lastEditedBy" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf63eb02a93dbd8c8d0ea9ced6667a108325201",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +391,395 @@            if dag.schedule_interval == '@once':\n                schedule_end = next_run_date\n            elif next_run_date:\n                schedule_end = dag.following_schedule(next_run_date)\n "
  },
  {
    "id" : "7d4c902b-3e28-4d50-b961-d7bd07f9ac83",
    "prId" : 668,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8b3f26d-6998-4f52-9cf7-962ddd237757",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "is there the need to expunge_all after the commit? I think otherwise you'll get errors when reading properties of the object.\n",
        "createdAt" : "2015-11-19T23:39:28Z",
        "updatedAt" : "2015-11-20T16:12:51Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "8124c349-577b-4db6-9bef-999cd4ef4a8d",
        "parentId" : "a8b3f26d-6998-4f52-9cf7-962ddd237757",
        "authorId" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "body" : "@mistercrunch I'm not sure I understand the question. Apart from not having removed any calls to `expunge_all`, my understanding is that `commit` should leave the session in a clean and safe state. \n",
        "createdAt" : "2015-11-20T15:52:19Z",
        "updatedAt" : "2015-11-20T16:12:51Z",
        "lastEditedBy" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "tags" : [
        ]
      },
      {
        "id" : "9d6004e0-d0c5-424b-8fcb-bf259098ec38",
        "parentId" : "a8b3f26d-6998-4f52-9cf7-962ddd237757",
        "authorId" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "body" : "@mistercrunch Also, my tests do not get any errors reading the object. \n",
        "createdAt" : "2015-11-20T16:10:36Z",
        "updatedAt" : "2015-11-20T16:12:51Z",
        "lastEditedBy" : "48bd394b-c88e-49f9-845d-b29b038e3141",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf63eb02a93dbd8c8d0ea9ced6667a108325201",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +403,407 @@                )\n                session.add(next_run)\n                session.commit()\n                return next_run\n"
  },
  {
    "id" : "87235405-b4d9-4259-8670-af8149aff2b3",
    "prId" : 1219,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f955301-e5e5-4539-85d6-1be6fb0e5b02",
        "parentId" : null,
        "authorId" : "06a356e2-8fb5-4f99-b8bb-46ce12d2daa0",
        "body" : "Nit(feel free to ignore): ideally alphasort the depdendencies in all lines like this\n",
        "createdAt" : "2016-03-28T21:44:16Z",
        "updatedAt" : "2016-03-28T21:44:16Z",
        "lastEditedBy" : "06a356e2-8fb5-4f99-b8bb-46ce12d2daa0",
        "tags" : [
        ]
      },
      {
        "id" : "9d15d212-4135-434a-bd90-9884180c2288",
        "parentId" : "5f955301-e5e5-4539-85d6-1be6fb0e5b02",
        "authorId" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "body" : "I will make sure I do in a following PR. At this point, I would rather merge while it works, because rebasing on that scale is a little bit of a PITA.\n",
        "createdAt" : "2016-03-28T21:48:30Z",
        "updatedAt" : "2016-03-28T21:48:30Z",
        "lastEditedBy" : "0ff67aea-e186-487e-bd0f-83d1c809bd31",
        "tags" : [
        ]
      }
    ],
    "commit" : "773f52feb9f0dcd29161dc7ec41d5ddc7f69f445",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +38,42 @@from airflow.exceptions import AirflowException\nfrom airflow.utils.state import State\nfrom airflow.utils.db import provide_session, pessimistic_connection_handling\nfrom airflow.utils.email import send_email\nfrom airflow.utils.logging import LoggingMixin"
  },
  {
    "id" : "364a8e0e-4a45-4503-be97-499c1d7e71b4",
    "prId" : 1376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9949881-ed19-46f3-8ccf-a1df055ebabf",
        "parentId" : null,
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "Pydocs would be helpful. This stuff is getting a little gnarly.\n",
        "createdAt" : "2016-04-14T15:33:19Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36861a5f7f296656302942db83dd65a66dd5949",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +672,676 @@                session.commit()\n\n    def _split_dags(self, dags, size):\n        \"\"\"\n        This function splits a list of dags into chunks of int size."
  },
  {
    "id" : "38ab227a-dd34-4fb1-ada2-ff508ca6afdb",
    "prId" : 1376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5805d91-e066-4ee0-b6f1-3a8a10652bb7",
        "parentId" : null,
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "I think you can use [filter()](https://docs.python.org/2/library/functions.html#filter) to this a little more pythonically.\n",
        "createdAt" : "2016-04-14T15:34:49Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      },
      {
        "id" : "e056ceea-6add-445c-8edc-788490d0e763",
        "parentId" : "b5805d91-e066-4ee0-b6f1-3a8a10652bb7",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "with a lambda? I personally don't like to read that stuff so much\n",
        "createdAt" : "2016-04-14T17:47:51Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36861a5f7f296656302942db83dd65a66dd5949",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +736,740 @@\n                paused_dag_ids = dagbag.paused_dags()\n                dags = [x for x in dags if x.dag_id not in paused_dag_ids]\n                # dags = filter(lambda x: x.dag_id not in paused_dag_ids, dags)\n"
  },
  {
    "id" : "508ad6c9-7d36-4a21-8b6a-a6d1cb8bf6db",
    "prId" : 1376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2092156d-d8e8-4d5a-a613-6a87e799bf87",
        "parentId" : null,
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "This is an important bug fix :-) Should be a stand-alone commit or PR.\n\nIt looks like the cause of this is that a `TaskInstance` has not yet been inserted for the first run. As a result, even though `last_scheduled_run` is `None`, then `latest_run` is also `None`.  If `latest_run` is `None`, then the logic above picks the min start date for all of the tasks in the dag. This should never be None -- this is where there might be a bug. \n\nThe logic flow above, for others looking at this code for the first time is \n1) look at dagruns (which the scheduler inserts into - `airflow run` and `airflow backfill` do not currently insert into this table) \n2) look at task_instance (which is presumably inserted after dag_runs) \n3) look at the dag bag for a start date\n\nIt seems counterintuitive that the tasks in the dagbag would not have a start date\n",
        "createdAt" : "2016-04-15T17:41:37Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      },
      {
        "id" : "337a2642-4471-43bc-9a5a-5761e8fa5d4a",
        "parentId" : "2092156d-d8e8-4d5a-a613-6a87e799bf87",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "Ok it is a separate commit now. Real fix should be in another PR I guess.\n",
        "createdAt" : "2016-04-16T11:05:24Z",
        "updatedAt" : "2016-04-16T11:05:44Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36861a5f7f296656302942db83dd65a66dd5949",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +436,440 @@            # don't ever schedule prior to the dag's start_date\n            if dag.start_date:\n                next_run_date = dag.start_date if not next_run_date else max(next_run_date, dag.start_date)\n\n            # this structure is necessary to avoid a TypeError from concatenating"
  },
  {
    "id" : "548ad85b-19eb-477d-9d91-ba33f8c3f026",
    "prId" : 1376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0486568-40f5-4a6b-9242-03410b511aaa",
        "parentId" : null,
        "authorId" : "0a40f9fd-4a0a-426e-b6f5-f97a4905eb99",
        "body" : "Is there an advantage to making this `self.runs` instead of just `runs`?\n",
        "createdAt" : "2016-04-15T21:06:14Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "0a40f9fd-4a0a-426e-b6f5-f97a4905eb99",
        "tags" : [
        ]
      },
      {
        "id" : "01ea5841-7c5a-44a4-b828-ca8b6094c4f9",
        "parentId" : "a0486568-40f5-4a6b-9242-03410b511aaa",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "Yes, that it actually counts :-).  When I kept it a local variable it would not properly increase. I am not sure why.\n",
        "createdAt" : "2016-04-16T10:44:19Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36861a5f7f296656302942db83dd65a66dd5949",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +707,711 @@        executor = self.executor = dagbag.executor\n        executor.start()\n        self.runs = 0\n        while not self.num_runs or self.num_runs > self.runs:\n            try:"
  },
  {
    "id" : "c409b5ec-349f-484e-b027-8d9cc0f588ee",
    "prId" : 1431,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9526eefc-9e4e-4c64-9c48-affa53ac376a",
        "parentId" : null,
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "You can add a comment/print here that specifies that we have a `@once` schedule that has not been previously executed (per dag runs) and hence we are scheduling it now.\n",
        "createdAt" : "2016-04-26T15:33:00Z",
        "updatedAt" : "2016-05-10T13:10:13Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dddfd3b5bf2cabaac6eec123dfa3cb59e73a56f5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +411,415 @@            next_run_date = None\n            if dag.schedule_interval == '@once' and not last_scheduled_run:\n                next_run_date = datetime.now()\n            elif not last_scheduled_run:\n                # First run"
  },
  {
    "id" : "4f87f9fe-020b-4858-abd0-b4a7114e25db",
    "prId" : 1490,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e8c5da6-a5aa-4f4f-a337-028ea6188359",
        "parentId" : null,
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "From reading a bit of code just now, `is_runnable` should include a task that is `UP_FOR_RETRY` where the retry_delay has expired, in which case it wouldn't even hit the `elif ti.is_premature():`\n",
        "createdAt" : "2016-05-12T04:14:55Z",
        "updatedAt" : "2016-05-13T01:40:10Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "29125343-561e-4795-8fb7-645cf9caf863",
        "parentId" : "5e8c5da6-a5aa-4f4f-a337-028ea6188359",
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "You may want to take a second look at that logic. `is_runnable` returns False for premature TIs, which would make the logic hit the else condition, thus causing the TI to be added to the `could_not_run` set.\n",
        "createdAt" : "2016-05-12T04:32:42Z",
        "updatedAt" : "2016-05-13T01:40:10Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      },
      {
        "id" : "a4653837-fbad-414d-b7fc-41fbc44e90f8",
        "parentId" : "5e8c5da6-a5aa-4f4f-a337-028ea6188359",
        "authorId" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "body" : "I had not taken a deep look at the deadlock handling and `could_not_run` before. Now I understand how continue differs from `could_not_run.add`.\n",
        "createdAt" : "2016-05-12T05:53:22Z",
        "updatedAt" : "2016-05-13T01:40:10Z",
        "lastEditedBy" : "0624866b-ba3a-41a3-abab-e487a9cfb78c",
        "tags" : [
        ]
      },
      {
        "id" : "ed7167bf-f322-4a18-a5ee-7a1612c438bb",
        "parentId" : "5e8c5da6-a5aa-4f4f-a337-028ea6188359",
        "authorId" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "body" : "Yes.. the bug is that the deadlock logic was not waiting for the retry_interval to pass for tasks in the UP_FOR_RETRY state before deciding that a DAG was in a deadlocked state. Now, it waits.\n\nThe new logic checks if a task that was UP_FOR_RETRY just transitioned to a runnable state, at which point it will execute and the DAG will not be considered deadlocked. \n",
        "createdAt" : "2016-05-12T06:05:56Z",
        "updatedAt" : "2016-05-13T01:40:10Z",
        "lastEditedBy" : "92e402fb-479e-4b08-88f2-3b82c356ecc3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab5d445992617585a0ced1d81881a0728f49b13a",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +533,537 @@                    State.RUNNING, State.QUEUED, State.SUCCESS, State.FAILED):\n                continue\n            elif ti.is_runnable(flag_upstream_failed=True):\n                self.logger.debug('Queuing task: {}'.format(ti))\n                queue.put((ti.key, pickle_id))"
  },
  {
    "id" : "dfca6685-0bf3-4fcf-9508-167cfad3bf1c",
    "prId" : 1581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35b3466d-7ef2-41f8-a067-4af3bf554b89",
        "parentId" : null,
        "authorId" : "08b40e03-e1f4-45e1-80c0-b73f75b29580",
        "body" : "I don't think we support multiple schedulers officially? Without locks, there a lot of race conditions.\n",
        "createdAt" : "2016-06-15T07:19:37Z",
        "updatedAt" : "2016-06-15T19:58:27Z",
        "lastEditedBy" : "08b40e03-e1f4-45e1-80c0-b73f75b29580",
        "tags" : [
        ]
      },
      {
        "id" : "63f9ad42-ce3f-4c5d-894a-f2a154da778b",
        "parentId" : "35b3466d-7ef2-41f8-a067-4af3bf554b89",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "There are multiple people that do run multiple schedulers and we don't officially discourage it either. The updates to the scheduler I made make it almost safe to do so (only UP_FOR_RETRY tasks remain to have that issue). \n",
        "createdAt" : "2016-06-15T11:38:57Z",
        "updatedAt" : "2016-06-15T19:58:27Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb89276750d23fc19a2d57036bc59d3aef846a26",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +760,764 @@                        if ti.state == State.SCHEDULED:\n                            session.commit()\n                            self.logger.debug(\"Task {} was picked up by another scheduler\"\n                                              .format(ti))\n                            continue"
  },
  {
    "id" : "3d774118-e082-49c7-a867-4bc9582c5506",
    "prId" : 1581,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "parentId" : null,
        "authorId" : "08b40e03-e1f4-45e1-80c0-b73f75b29580",
        "body" : "This turns out to be quite slow - we have several thousand DAG runs, so when it starts, several minutes are spent going through this loop.\n",
        "createdAt" : "2016-06-29T03:06:20Z",
        "updatedAt" : "2016-06-29T03:25:54Z",
        "lastEditedBy" : "08b40e03-e1f4-45e1-80c0-b73f75b29580",
        "tags" : [
        ]
      },
      {
        "id" : "dec8993d-ff77-4968-9021-e085641fa6cc",
        "parentId" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "@plypaul curious--did you guys work around this? Is there a patch to fix?\n",
        "createdAt" : "2016-06-30T19:17:58Z",
        "updatedAt" : "2016-06-30T19:17:58Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      },
      {
        "id" : "4ca09dba-ffce-4126-8197-0b56eb23f372",
        "parentId" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "It shouldnt break a sweat on a couple of thousand. Where exactly is it slow? In the db or in Python?\n",
        "createdAt" : "2016-06-30T19:33:21Z",
        "updatedAt" : "2016-06-30T19:33:21Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      },
      {
        "id" : "bad5a5d1-421a-49ae-b7c5-efdf8abf3860",
        "parentId" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "I'll check if it is proper indexed in the db. If it isn't it might need one. Otherwise I can rework it to fully run in the db in one go. That can happen in one statement I think. If you @plypaul can let me know some metrics that would make it easier\n",
        "createdAt" : "2016-06-30T19:44:11Z",
        "updatedAt" : "2016-06-30T19:44:11Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      },
      {
        "id" : "9ec00dd3-1f43-4acb-834f-ad0569699b00",
        "parentId" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "@bolkedebruin pretty sure this is related to the 'add index on task state' PR that's in flight right now :)\n",
        "createdAt" : "2016-06-30T20:13:42Z",
        "updatedAt" : "2016-06-30T20:13:42Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      },
      {
        "id" : "aceba18d-8c61-462e-8318-d2280782a885",
        "parentId" : "15baf245-d9f1-4ea8-a770-449cfbe7bd75",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "@criccomini @plypaul think so too, I double checked and I think the query that is being run indeed will not use an index (index is on: dag_id, task_id, execution_date, state - task_id is missing for this query so it wont hit).\n",
        "createdAt" : "2016-06-30T21:09:27Z",
        "updatedAt" : "2016-06-30T21:09:34Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb89276750d23fc19a2d57036bc59d3aef846a26",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +704,708 @@        )\n        for dr in active_runs:\n            self._reset_state_for_orphaned_tasks(dr, session=session)\n\n        self.runs = 0"
  },
  {
    "id" : "f462fe66-5aa8-43b5-b592-ff463e62632d",
    "prId" : 2010,
    "prUrl" : "https://github.com/apache/airflow/pull/2010#pullrequestreview-17827922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d417a6ed-d2d3-4a54-8cb8-78130954f67a",
        "parentId" : null,
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "Good catch",
        "createdAt" : "2017-01-22T12:47:32Z",
        "updatedAt" : "2017-01-22T12:57:49Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d2d6270ad6bf6052c3efe90100740d3470c0cd1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +920,924 @@                                         dag_runs))\n\n            if not any(dag_run.state == State.RUNNING for dag_run in dag_runs):\n                self.logger.warn(\"Setting {} to state={} as it does not have \"\n                                 \"a DagRun in the {} state\""
  },
  {
    "id" : "8ccc356d-0622-4a58-842d-f3886646d021",
    "prId" : 3873,
    "prUrl" : "https://github.com/apache/airflow/pull/3873#pullrequestreview-156131652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcfb7500-8517-4f59-8935-2f1a998740ce",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "give you have touched this import, could you modify and sort the import alphabetically?",
        "createdAt" : "2018-09-16T01:02:20Z",
        "updatedAt" : "2018-10-15T05:28:31Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "a624a4c0-1039-4dea-91ed-2b9541eda79b",
        "parentId" : "fcfb7500-8517-4f59-8935-2f1a998740ce",
        "authorId" : "a3c64a30-509c-4788-80d1-4f17cb3b5530",
        "body" : "Sure, my IDE reordered it for me and I guess I need to configure it to be sort alphabetically :D ",
        "createdAt" : "2018-09-17T21:43:14Z",
        "updatedAt" : "2018-10-15T05:28:31Z",
        "lastEditedBy" : "a3c64a30-509c-4788-80d1-4f17cb3b5530",
        "tags" : [
        ]
      }
    ],
    "commit" : "14cf345b6247b62d502ac32076130beaf0f923a3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +32,36 @@import time\nfrom collections import defaultdict\nfrom time import sleep\n\nimport six"
  },
  {
    "id" : "4e3c2391-0b27-46f8-913a-b349a2759d8e",
    "prId" : 3873,
    "prUrl" : "https://github.com/apache/airflow/pull/3873#pullrequestreview-156135291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1042c3f-67f4-46bd-8709-9c840d78d6d6",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "I assume there are no other places using`process_file` as it is a breaking change? ",
        "createdAt" : "2018-09-17T21:34:06Z",
        "updatedAt" : "2018-10-15T05:28:31Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "a3e3da4d-8e4e-422d-9678-062ffb5b74be",
        "parentId" : "b1042c3f-67f4-46bd-8709-9c840d78d6d6",
        "authorId" : "a3c64a30-509c-4788-80d1-4f17cb3b5530",
        "body" : "Yes I traced back in the code base and saw only the usage in DagFileProcessor, which is updated.",
        "createdAt" : "2018-09-17T21:55:49Z",
        "updatedAt" : "2018-10-15T05:28:31Z",
        "lastEditedBy" : "a3c64a30-509c-4788-80d1-4f17cb3b5530",
        "tags" : [
        ]
      }
    ],
    "commit" : "14cf345b6247b62d502ac32076130beaf0f923a3",
    "line" : 589,
    "diffHunk" : "@@ -1,1 +1641,1645 @@\n    @provide_session\n    def process_file(self, file_path, zombies, pickle_dags=False, session=None):\n        \"\"\"\n        Process a Python file containing Airflow DAGs."
  },
  {
    "id" : "d0f32dbb-84de-4cb1-a3a2-7ec7e1c0bd21",
    "prId" : 4234,
    "prUrl" : "https://github.com/apache/airflow/pull/4234#pullrequestreview-178738545",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28151306-7ea7-4693-bec7-094c492d53e3",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Minor: shall these two lines be removed if we don’t give details for them?",
        "createdAt" : "2018-11-27T11:46:25Z",
        "updatedAt" : "2018-11-27T21:39:13Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      }
    ],
    "commit" : "554b4cf08bcf371a95415d9a0cd88820f2d9272c",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +1378,1382 @@\n        :param session: session for ORM operations\n        \"\"\"\n        if self.executor.queued_tasks:\n            TI = models.TaskInstance"
  },
  {
    "id" : "d90f3e1a-9dac-4d41-b754-3c31461e048e",
    "prId" : 4408,
    "prUrl" : "https://github.com/apache/airflow/pull/4408#pullrequestreview-190400566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ee92507-5a40-4827-b5bb-83466c21f110",
        "parentId" : null,
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "Lately I've being giving preference to `{}` instead of `[]`. Especially the set operations are faster when it comes to the `in`:\r\n```\r\nMacBook-Pro-van-Fokko:~ fokkodriesprong$ ipython\r\nPython 3.6.6 (v3.6.6:4cf1f54eb7, Jun 26 2018, 19:50:54) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from airflow.utils.state import State\r\n\r\nIn [2]: task_states_list = [\r\n   ...:     State.SUCCESS,\r\n   ...:     State.RUNNING,\r\n   ...:     State.FAILED,\r\n   ...:     State.UPSTREAM_FAILED,\r\n   ...:     State.SKIPPED,\r\n   ...:     State.UP_FOR_RETRY,\r\n   ...:     State.QUEUED,\r\n   ...:     State.NONE,\r\n   ...:     State.SCHEDULED,\r\n   ...: ]\r\n\r\nIn [3]: task_states_set = {\r\n   ...:     State.SUCCESS,\r\n   ...:     State.RUNNING,\r\n   ...:     State.FAILED,\r\n   ...:     State.UPSTREAM_FAILED,\r\n   ...:     State.SKIPPED,\r\n   ...:     State.UP_FOR_RETRY,\r\n   ...:     State.QUEUED,\r\n   ...:     State.NONE,\r\n   ...:     State.SCHEDULED,\r\n   ...: }\r\n\r\nIn [4]: %timeit State.NONE in task_states_set\r\n   ...: \r\n59.1 ns ± 2.07 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n\r\nIn [5]: %timeit State.NONE in task_states_list\r\n176 ns ± 0.704 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n```",
        "createdAt" : "2019-01-08T08:19:50Z",
        "updatedAt" : "2019-01-09T21:16:10Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      },
      {
        "id" : "1d35a5b0-c17b-4c7f-885a-1c932ea5bc6c",
        "parentId" : "8ee92507-5a40-4827-b5bb-83466c21f110",
        "authorId" : "44a4606a-9224-404a-87fd-9a2417fd2610",
        "body" : "In this case it's even a tuple `()`. Also, here it's not a `needle in ['hay','stack']` pattern, but the tuple is passed to a function `DagRun.get_task_instances()` which uses the tuple for a SQLalchemy query, so I'd rather not change it in this case.",
        "createdAt" : "2019-01-08T19:17:35Z",
        "updatedAt" : "2019-01-09T21:16:10Z",
        "lastEditedBy" : "44a4606a-9224-404a-87fd-9a2417fd2610",
        "tags" : [
        ]
      }
    ],
    "commit" : "829b95df3520bc274a492c5b81b83859bcc8859c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +939,943 @@            self.log.debug(\"Examining active DAG run: %s\", run)\n            # this needs a fresh session sometimes tis get detached\n            tis = run.get_task_instances(state=(State.NONE,\n                                                State.UP_FOR_RETRY,\n                                                State.UP_FOR_RESCHEDULE))"
  }
]