[
  {
    "id" : "9d5bdb02-1509-4f2f-8754-d2cab0dc1a03",
    "prId" : 8942,
    "prUrl" : "https://github.com/apache/airflow/pull/8942#pullrequestreview-422042951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "parentId" : null,
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Maybe it's a good idea to check if the hook is DbApiHook instance? I think it's even better check than checking the connection types.",
        "createdAt" : "2020-05-30T14:20:37Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "855547c6-f78f-4fa6-af83-6e05b09aed0b",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "body" : "Hi @potiuk , If I added the following code to check if the hook is DbApiHook instance, my unit test's mock will break. Any suggestion? I searched the Airflow code base but I couldn't find an example to resolve this issue. Thanks!\r\n\r\n```Python\r\nif not isinstance(self._hook, DbApiHook):\r\n    raise AirflowException(\r\n        \"Unexpected type returned '%s' expected DbApiHook\" % type(self._hook))\r\n\r\n# In unit test, my test will fail with\r\n\"airflow.exceptions.AirflowException: Unexpected type returned '<class 'unittest.mock.MagicMock'>' expected DbApiHook\"\r\n```\r\n\r\n",
        "createdAt" : "2020-05-30T20:18:58Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "tags" : [
        ]
      },
      {
        "id" : "a1fcf9c2-6b89-41c3-8e16-5dd0a9f23a29",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Just rebase it to latest master please. We had some problems with kubernetes tests - they should be largely solved now (I am working on final fix) but at least it should not fail now.",
        "createdAt" : "2020-05-30T20:20:56Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "c20f1d06-b86d-4f2b-ad43-c9fc2eec9d27",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Here is some info on that: https://github.com/apache/airflow/blob/master/CONTRIBUTING.rst#how-to-rebase-pr",
        "createdAt" : "2020-05-30T20:21:55Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "c7b3d5ed-dcab-4ee7-8e7d-af55ee6585a5",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "body" : "Hi @potiuk , I haven't started the breeze integrated test yet. I only run the unit test locally. So, I think this is a \"mock\" issue.\r\n\r\n```Python\r\npytest ../airflow/tests/operators/test_sql_branch_operator.py\r\n```\r\nIn the unit test, I used mock connection (Similar to the existing unit \"test test_sql_sensor\")\r\n``` Python\r\nmock_hook.get_connection(\"mysql_default\").conn_type = \"mysql\"\r\n```\r\nTherefore, during my local pytest run, the new \"isinstance(self._hook, DbApiHook)\" check failed and return error.\r\n\r\n```Python\r\ndef execute(self, context: Dict):\r\n        # get supported hook\r\n        self._hook = self._get_hook()\r\n    \r\n        if not isinstance(self._hook, DbApiHook):\r\n            raise AirflowException(\r\n>               \"Unexpected type returned '%s' expected DbApiHook\" % type(self._hook)\r\n            )\r\nE           airflow.exceptions.AirflowException: Unexpected type returned '<class 'unittest.mock.MagicMock'>' expected DbApiHook\r\n```",
        "createdAt" : "2020-05-30T21:08:01Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "tags" : [
        ]
      },
      {
        "id" : "da050f15-4517-4a10-852f-5ecd6b102450",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "body" : "I also checked other operators to see if any of them verify the DbApiHook return type but I couldn't find any example of that check.",
        "createdAt" : "2020-05-30T21:09:50Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "tags" : [
        ]
      },
      {
        "id" : "2bd2fa38-adc5-442c-a87f-14f5b97bdf7d",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "OK. Fine for me. Indeed that is quite OK this way :)",
        "createdAt" : "2020-06-01T05:12:00Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "60447ced-6b55-4f5d-87bb-dc19a3528682",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Can you please rebase to latest master? That should fix the failure problem.",
        "createdAt" : "2020-06-01T05:12:40Z",
        "updatedAt" : "2020-06-01T17:32:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      },
      {
        "id" : "98b73c55-e789-47fa-9e52-8fd124b91450",
        "parentId" : "e4c0b3f5-bd62-484b-8dbf-174217fc5ee5",
        "authorId" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "body" : "Thank you so much for reviewing this PR. Yes, I will rebase my PR. Thanks!",
        "createdAt" : "2020-06-01T17:34:14Z",
        "updatedAt" : "2020-06-01T17:34:14Z",
        "lastEditedBy" : "6fc4fc87-6ca4-428b-985e-5ef8d72ff0c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb84a86ff1e879421a701929454d007473ca233",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@        # get supported hook\n        self._hook = self._get_hook()\n\n        if self._hook is None:\n            raise AirflowException("
  }
]