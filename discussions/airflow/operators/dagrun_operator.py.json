[
  {
    "id" : "875f4c0c-f874-446e-836e-20ea3018db11",
    "prId" : 4359,
    "prUrl" : "https://github.com/apache/airflow/pull/4359#pullrequestreview-187609902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfe6feb5-68f3-480e-b9de-876ebc156026",
        "parentId" : null,
        "authorId" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "body" : "if execution_date is None, should we raise error ?",
        "createdAt" : "2018-12-23T05:32:32Z",
        "updatedAt" : "2019-01-02T23:03:52Z",
        "lastEditedBy" : "38d80383-47b9-439a-9efe-9282f79f8b2f",
        "tags" : [
        ]
      },
      {
        "id" : "793f83ce-232a-4b8e-9c65-15075bfcccf9",
        "parentId" : "dfe6feb5-68f3-480e-b9de-876ebc156026",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "No, it is the default value as well and will also break backwards compatiblility.",
        "createdAt" : "2018-12-23T06:27:33Z",
        "updatedAt" : "2019-01-02T23:03:52Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "e152b38a-e683-4666-a2d0-76eb1efe31e6",
        "parentId" : "dfe6feb5-68f3-480e-b9de-876ebc156026",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "It uses the current time when execution date is None",
        "createdAt" : "2018-12-23T06:28:21Z",
        "updatedAt" : "2019-01-02T23:03:52Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      }
    ],
    "commit" : "d6b0cb1cdab9f7254dfd179bade59b3d6e869aad",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +73,77 @@            self.execution_date = execution_date\n        elif execution_date is None:\n            self.execution_date = execution_date\n        else:\n            raise TypeError("
  },
  {
    "id" : "6f26e195-58fb-47d1-be3f-405831e67a93",
    "prId" : 6317,
    "prUrl" : "https://github.com/apache/airflow/pull/6317#pullrequestreview-305483127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae0694b1-ee2f-4948-ac32-5c8c4d7e7175",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Wouldn't it be better to set the execution date on line 58 where you are setting it the first time?\r\n```python\r\nif isinstance(execution_date, str):\r\n    self.execution_date = timezone.parse(execution_date)\r\nelse:\r\n    self.execution_date = execution_date\r\n```\r\nIMO `self.execution_date = timezone.parse(self.execution_date)` is a kind of validation so that should be made in the constructor even if it will be called more often than in the `execute`.\r\n\r\nthen in the `execute` you can just do\r\n```python\r\nif self.execution_date is None:\r\n    self.execution_date = timezone.utcnow()\r\nrun_id = \"trig__{}\".format(self.execution_date.isoformat())\r\n```\r\n\r\nWDYT?",
        "createdAt" : "2019-10-19T12:57:51Z",
        "updatedAt" : "2019-10-22T20:23:21Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "542c218a-afcf-4fbb-98ee-5ec2fa7d30b7",
        "parentId" : "ae0694b1-ee2f-4948-ac32-5c8c4d7e7175",
        "authorId" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "body" : "Would like to use it as it is much shorter and simpler.\r\n\r\nHowever, the `execution_date` can be templated. For example `{{ execution_date }}` will fail in `timezone.parse()`. So, we have to save it first, wait for `execute()` to be called and all variables to be templated, and only then can we call `timezone.parse()` on the `execution_date` :( ",
        "createdAt" : "2019-10-22T20:22:18Z",
        "updatedAt" : "2019-10-22T20:23:21Z",
        "lastEditedBy" : "db6eb8b7-c895-4f19-9e3d-6fa0535f27e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "467dfcc75b961ba2056c7dbce96c57ca907cd64b",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +68,72 @@        elif isinstance(self.execution_date, str):\n            run_id = \"trig__{}\".format(self.execution_date)\n            self.execution_date = timezone.parse(self.execution_date)  # trigger_dag() expects datetime\n        else:\n            run_id = \"trig__{}\".format(timezone.utcnow().isoformat())"
  },
  {
    "id" : "b052cbe7-9a7a-4e35-89e1-7379b332b19e",
    "prId" : 11778,
    "prUrl" : "https://github.com/apache/airflow/pull/11778#pullrequestreview-521544444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8383e387-1878-48f3-9350-b07d7b3d3dda",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "Can you use url_for here? I guess it should work.",
        "createdAt" : "2020-10-27T14:07:24Z",
        "updatedAt" : "2020-11-08T17:36:02Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "72cb570d-f409-4b78-9e6e-b1c39846a900",
        "parentId" : "8383e387-1878-48f3-9350-b07d7b3d3dda",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "This will work only if inside of application context and I'm not sure if this is necessary\r\n```\r\nRuntimeError: Attempted to generate a URL without the application context being pushed. This has to be executed when application context is available.\r\n```",
        "createdAt" : "2020-10-27T14:11:51Z",
        "updatedAt" : "2020-11-08T17:36:02Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "db490fa6-5c65-441f-b247-0dfa1e134ffd",
        "parentId" : "8383e387-1878-48f3-9350-b07d7b3d3dda",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "It seems to me that this link will be generated by the webserver, so this is expected behavior.",
        "createdAt" : "2020-10-27T21:05:05Z",
        "updatedAt" : "2020-11-08T17:36:02Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "1d9a2a80-d23c-4af0-9982-117a71789836",
        "parentId" : "8383e387-1878-48f3-9350-b07d7b3d3dda",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Please see https://github.com/apache/airflow/pull/11778#discussion_r515906811",
        "createdAt" : "2020-11-02T11:24:19Z",
        "updatedAt" : "2020-11-08T17:36:02Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e3855e9d4f41c0b480874ce614eea9b3485159f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +39,43 @@    def get_link(self, operator, dttm):\n        query = {\"dag_id\": operator.trigger_dag_id, \"execution_date\": dttm.isoformat()}\n        return build_airflow_url_with_query(query)\n\n"
  },
  {
    "id" : "53dc0654-092a-4849-b125-753cbf4be5e8",
    "prId" : 12126,
    "prUrl" : "https://github.com/apache/airflow/pull/12126#pullrequestreview-528906446",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caeeb851-0612-4018-8c25-5b0830306812",
        "parentId" : null,
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "I'm thinking if it's making sense to have something like `max_retries` or `timeout` here. Otherwise there is a chance that this becomes a dead loop in extreme circumstances.\r\n\r\n@turbaszek what do you think?",
        "createdAt" : "2020-11-11T22:14:34Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "53f5b270-6928-4db9-aec3-763b3793defe",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Other than the idea/question above + my comments on the docstring, overall looks good to me.",
        "createdAt" : "2020-11-11T22:19:59Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "0596b3f0-fcaa-4d4a-a493-1fbb702e61f8",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "@XD-DENG I agree, that's something we can do either here or in follow up PR fixing also the `ExternalTaskSensor` which also uses similar infinite loop (https://github.com/apache/airflow/pull/12126#discussion_r521662517). \r\n\r\nPersonally I would be in favour of timeout. And probably something like `60 * 60 * 24` similar to what we have in `BaseSensor` to handle most of DAGs",
        "createdAt" : "2020-11-11T22:20:37Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "efc832a4-0a13-419a-a905-ce48974f4339",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Sounds a good plan to me. Thanks @turbaszek ",
        "createdAt" : "2020-11-11T22:23:16Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "6339933e-1704-4167-80ab-25b1d63679f0",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Please also add an entry in `UPDATING.md` (section `master`) to describe this change @kukigai ",
        "createdAt" : "2020-11-11T22:26:46Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "0d104fc2-cd11-47b8-9985-5f37cc5b7622",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> Please also add an entry in `UPDATING.md` (section `master`) to describe this change @kukigai\r\n\r\n@XD-DENG do we need it? The wait feature is a new addition and the default value is to avoid waiting, thus the default behaviour is the same as before this change. ",
        "createdAt" : "2020-11-11T22:30:02Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "fcf45b8f-c3b4-48b9-9b6c-1ea94bf159a5",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "My concern was users don't get aware of new additions.\r\n\r\nI don't have strong opinion on this though, so it's also ok for me if we don't add this entry in `UPDATING.md`.",
        "createdAt" : "2020-11-11T22:33:44Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "5b34a33b-d76e-49f1-97f4-b421b0ea2ad7",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> My concern was users don't get aware of new additions.\r\n\r\nThis is a valid concern, however the UPDATING.md was purposed to be place for breaking changes. New features are \"announced\" in changelog 🤷‍♂️ ",
        "createdAt" : "2020-11-11T22:44:11Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "dc0fa4b7-8489-4643-8efd-62c26fbabfd0",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "body" : "Yep. For no reason I mixed these two just now😂 Agree with you",
        "createdAt" : "2020-11-11T22:47:56Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "59d531be-9d1e-478d-99a0-6e20963d3e21",
        "tags" : [
        ]
      },
      {
        "id" : "c27740d9-3456-49e6-a026-82eaa99938b5",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "03620164-2549-4b6a-854c-a03632f75ab7",
        "body" : "@turbaszek @XD-DENG \r\n\r\nregarding https://github.com/apache/airflow/pull/12126#discussion_r521673165, user can set execution_timeout.\r\n\r\nDo you think we should have separate internal timeout for this operator?\r\n\r\nI prefer to have user choose execution_timeout so keep infinite loop as is.\r\n",
        "createdAt" : "2020-11-11T23:22:56Z",
        "updatedAt" : "2020-11-12T00:16:41Z",
        "lastEditedBy" : "03620164-2549-4b6a-854c-a03632f75ab7",
        "tags" : [
        ]
      },
      {
        "id" : "2303a954-1f18-4ca3-8c5d-0a75354877f0",
        "parentId" : "caeeb851-0612-4018-8c25-5b0830306812",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "> regarding #12126 (comment), user can set execution_timeout.\r\n\r\nI agree, let's use the existing solution 👍 ",
        "createdAt" : "2020-11-12T09:37:55Z",
        "updatedAt" : "2020-11-12T09:37:56Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "78ed880df8c3c31c375be91d9f235e0487f4c249",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +150,154 @@        if self.wait_for_completion:\n            # wait for dag to complete\n            while True:\n                self.log.info(\n                    'Waiting for %s on %s to become allowed state %s ...',"
  },
  {
    "id" : "68e7f846-2ebe-44c0-b989-23e7924b4e35",
    "prId" : 12819,
    "prUrl" : "https://github.com/apache/airflow/pull/12819#pullrequestreview-545361442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95094291-9a20-4915-8cc6-0fcbea3dcd1a",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I am thinking if `dag_run = dag.get_last_dagrun()` would work?",
        "createdAt" : "2020-12-04T20:14:46Z",
        "updatedAt" : "2020-12-04T23:05:54Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "2d4c85bc-e626-4b05-b0f5-60db21f9e5f8",
        "parentId" : "95094291-9a20-4915-8cc6-0fcbea3dcd1a",
        "authorId" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "body" : "@turbaszek fixed :)",
        "createdAt" : "2020-12-04T20:39:13Z",
        "updatedAt" : "2020-12-04T23:05:54Z",
        "lastEditedBy" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "tags" : [
        ]
      },
      {
        "id" : "10a88c9e-7e41-4661-9807-d0f3ee386162",
        "parentId" : "95094291-9a20-4915-8cc6-0fcbea3dcd1a",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I'm sorry but I'm not sure if my suggestion was good. We retrieve the dag run when one already exist. My suggestion would _probably_ work in case of triggering new one. I think your original suggestion was more ok ",
        "createdAt" : "2020-12-04T22:49:23Z",
        "updatedAt" : "2020-12-04T23:05:54Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "b5a17303-fb05-4578-8b1d-a875b758ddcc",
        "parentId" : "95094291-9a20-4915-8cc6-0fcbea3dcd1a",
        "authorId" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "body" : "@turbaszek you would only be in the if statement if there is a dag_run to get.",
        "createdAt" : "2020-12-04T23:25:42Z",
        "updatedAt" : "2020-12-04T23:25:42Z",
        "lastEditedBy" : "b8b84983-5876-4ccf-886c-2449d94ca22f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c678a853c06c707d45d8de7fe4a42e5e1b0beb45",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +146,150 @@                dag.clear(start_date=self.execution_date, end_date=self.execution_date)\n\n                dag_run = DagRun.find(dag_id=dag.dag_id, run_id=run_id)[0]\n            else:\n                raise e"
  }
]