[
  {
    "id" : "9c581fb7-4c99-4d87-a3f9-3797bad72cf7",
    "prId" : 1376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43ec6d8b-15a1-45d1-8be4-89b11ea68651",
        "parentId" : null,
        "authorId" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "body" : "What are these? MySQLAlchemy foo is lacking.\n",
        "createdAt" : "2016-04-14T15:55:52Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "366b1763-372e-4924-9c92-2ea8968443bd",
        "tags" : [
        ]
      },
      {
        "id" : "bf922934-f1f4-40a6-9a4a-229e97c1626f",
        "parentId" : "43ec6d8b-15a1-45d1-8be4-89b11ea68651",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "It basically checks when a new connecting is made. You cannot use the same db connection in a fork so we force the db logic to make a new connection when it detects that the pid of the process that created the connection is not the same as it is currently in.\n",
        "createdAt" : "2016-04-14T18:41:24Z",
        "updatedAt" : "2016-04-16T11:04:29Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36861a5f7f296656302942db83dd65a66dd5949",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +84,88 @@\n\n@event.listens_for(settings.engine, \"connect\")\ndef connect(dbapi_connection, connection_record):\n    connection_record.info['pid'] = os.getpid()"
  },
  {
    "id" : "54780a71-658c-48dc-8598-6282cc6d5388",
    "prId" : 6438,
    "prUrl" : "https://github.com/apache/airflow/pull/6438#pullrequestreview-307801261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "parentId" : null,
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "I missed that on the first review. This should be mentioned in the `Updating.md` in case anyone is using `http_default` to call requests to google, don't you think?",
        "createdAt" : "2019-10-28T10:00:21Z",
        "updatedAt" : "2019-10-28T10:00:43Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "6d864061-5d63-4fa1-bc92-8556055cafdc",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This is not important and will cause noise in the file.  There is a very small chance that someone would depend on it in their production environment.",
        "createdAt" : "2019-10-28T11:07:48Z",
        "updatedAt" : "2019-10-28T11:07:49Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "d90854fc-3049-4a40-86b5-214ea4a2cc9a",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "body" : "I agree with mik-laj.",
        "createdAt" : "2019-10-28T11:50:51Z",
        "updatedAt" : "2019-10-28T11:50:51Z",
        "lastEditedBy" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "tags" : [
        ]
      },
      {
        "id" : "f94981ce-a31a-4dab-9e30-2b5f1e8bfe6e",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Okay ðŸ‘Œ ",
        "createdAt" : "2019-10-28T11:52:31Z",
        "updatedAt" : "2019-10-28T11:52:31Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "95b4b568-7576-43ab-af80-5d5b7a920d28",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "But I think we then should at least add it to the commit message. I can do that in the squash&merge process.",
        "createdAt" : "2019-10-28T11:57:25Z",
        "updatedAt" : "2019-10-28T11:57:25Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "a41cd7e7-a4d9-466d-8e47-413694c4931f",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "body" : "Good idea. Could you please add it when you merge it? :)",
        "createdAt" : "2019-10-28T12:02:25Z",
        "updatedAt" : "2019-10-28T12:02:26Z",
        "lastEditedBy" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "tags" : [
        ]
      },
      {
        "id" : "c4278f43-9c42-450c-9320-9dab54f89607",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "body" : "Done.",
        "createdAt" : "2019-10-28T12:04:02Z",
        "updatedAt" : "2019-10-28T12:04:02Z",
        "lastEditedBy" : "e29ffafb-ac51-434b-b9e0-af262caae1ee",
        "tags" : [
        ]
      },
      {
        "id" : "e2195393-cd73-4ce6-aa5b-37ef82a35020",
        "parentId" : "0706d8bb-0a64-4310-ae31-b2341658411c",
        "authorId" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "body" : "Thank you!",
        "createdAt" : "2019-10-28T12:06:14Z",
        "updatedAt" : "2019-10-28T12:06:14Z",
        "lastEditedBy" : "fe04e1cd-7df7-45e2-9cff-ede544e21dd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b881aa3248168feeeb46d9a4deb7fddae172cdc0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +160,164 @@        Connection(\n            conn_id='http_default', conn_type='http',\n            host='https://www.httpbin.org/'))\n    merge_conn(\n        Connection("
  },
  {
    "id" : "4371dbb9-1837-4708-bc1b-9806f375c64b",
    "prId" : 6601,
    "prUrl" : "https://github.com/apache/airflow/pull/6601#pullrequestreview-321902121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3e16938-f679-4857-affb-a785edd03562",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I don't feel too good about adding this here but if this is the only way then so be it ",
        "createdAt" : "2019-11-22T21:47:13Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "9f6c7388-41ac-4b14-b71b-25f6169c8425",
        "parentId" : "a3e16938-f679-4857-affb-a785edd03562",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "It's somewhat annoying that all of the linting systems have different comments/don't understand each others. :(\r\n\r\nWe need https://editorconfig.org/ but for code-linting",
        "createdAt" : "2019-11-22T22:09:10Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "92882cf1-7e77-483c-9dc4-17f5872d86da",
        "parentId" : "a3e16938-f679-4857-affb-a785edd03562",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It is somewhat annoying indeed but I think the benefits (for those using pylint) by far outweight the duplicate comment annoyance. \r\n\r\nThe problem is that editorconfig won't solve it. It's the matter of using or not the internal pycharm/intellij inspections rather than synchronising with pylint. It is  already fairly well synchronised. The problem is that Pycharm (so far) has no link between their own inspections and equivalent pylint errors, so disabling pylint warning cannot disable Pycharm's   inspections. SO thread here: https://stackoverflow.com/questions/41979763/suppress-warning-for-both-pycharm-and-pylint\r\n\r\nI have both PyCharm inspections turned on and Pylint warning integrated with PyCharm. And the inspections in PyCharm are se much more useful than just pylint warnings. You get the all-mighty 'Option + 1' command with corrective actions - that helps you to make most of the corrections automagically - including all refactorings, renamings of bad names, making the code clearer (reversing ifs, simplifying conditions, extracting duplicate code) - all that risk-free that you make a typo or mistake. And having the green checkmark when you finished your work is super-reassuring, it's almost like an addiction to me now.\r\n\r\nThat makes me fearless when it comes to refactoring/renaming and I think fearless development is a key to fast evolving project like Airflow is.\r\n\r\nNow side comments and some vision (sorry for spamming I just wanted to share with both of you) ...  \r\n\r\nI have a mid-term vision that we will have another IDE friendly solution that will replace PyCharm/IntelliJ and will provide everyone an option to use consistent, free, cloud-development ready environment. I just do not want to open it just yet (I have far too many things on my plate to open another front). But I have a dream that one day we integrate  VSCode (which is currently the most popular IDE in the world and taking development environments by storm) and endorse it as \"default\" dev environment - including all the configuration and cloud-development method. \r\n\r\nMicrosoft after taking over Github does some great work there I believe (surprisingly).\r\n\r\nVSCode already supports [remote development](https://code.visualstudio.com/blogs/2019/05/02/remote-development) and it's from grounds up created in the way that you can commit project configuration to the repo and have a single click installation of the whole environment. It will also still work locally of course in the same way, but I think it should be cloud-first.\r\n\r\nThat's why I am so much into Breeze and dockerised environment that eventually we will be able (in Breeze 3.0 or so) make it so that the whole development environment will run in the cloud somewhere (created and managed automatically) and your local machine will have either just VSCode or even use one in the cloud via browser. Microsoft recently announced Visual Studio Online (https://techcrunch.com/2019/11/04/you-can-now-try-microsofts-web-based-version-of-visual-studio/) and I am sure other cloud providers will shortly do something similar. And ideally any developer who would like to develop Airflow and have access to some - either local or remote - computing resources will be able to launch fully-fledged environment from their own branch directly in the Github Repo without any local configuration whatsoever - ideally using browser as the IDE.\r\n\r\nI think we are really close to the advancements in the open-source frameworks available, ubiquitous cloud computing, containers and open source IDEs maturing, that this will soon be easy and possible even for such complex projects as Airflow.\r\n\r\nThe dream is I really want to  not to carry my laptop with me office-work and keep the same consistent environment everywhere :). I want to have a Chromebook Pixel experience for development. I would really love to get any Chromebook (I have Pixel 3), login with my account and in a few moments have my environment up and running and me being productive in it. \r\n\r\nIt happens already in many corporate environments with developers, but I think we are very close to have something like that applicable even in open-source projects like ours where we do not have control over the infrastructure of contributors, but we can give them tools and setup consisting of free and open-source components that are standard enough and ubiquitous enough that it's a one-click solution for them to start using it. Most of those people will have some computing available (remote, cloud, on-premises, in their laptop).\r\n\r\nWe are going in circle for me - when I started my career we were working on mainframes and it was super convenient when you did not have to lose hours when your local PC broke or was stolen. Back then you could not work from home this way (network/dial-ups :)) and it was internal-corporate only - now we are entering the era when it becomes possible for everyone.\r\n\r\nEnd of vision (and sorry if that was too long, I had to :) ).",
        "createdAt" : "2019-11-23T09:15:29Z",
        "updatedAt" : "2019-11-26T20:29:13Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8be9e171098acda6facbf9f645dd1876b761a3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +339,343 @@    # We need to add this model manually to get reset working well\n    # noinspection PyUnresolvedReferences\n    from airflow.models.serialized_dag import SerializedDagModel  # noqa: F401\n\n    # alembic adds significant import time, so we import it lazily"
  },
  {
    "id" : "fb0bcdd1-f093-4421-8136-f7b362728a0b",
    "prId" : 7172,
    "prUrl" : "https://github.com/apache/airflow/pull/7172#pullrequestreview-343497629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce0ffcf-f74f-4c7c-8f49-a493f2948709",
        "parentId" : null,
        "authorId" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "body" : "Does this returns an exit code != 0 if it fails?",
        "createdAt" : "2020-01-15T16:08:42Z",
        "updatedAt" : "2020-01-15T21:35:53Z",
        "lastEditedBy" : "03e41e23-f438-4a06-9652-8f20638d2c3a",
        "tags" : [
        ]
      },
      {
        "id" : "d54bf8db-8f0d-4d01-b01a-3ea6cc162397",
        "parentId" : "1ce0ffcf-f74f-4c7c-8f49-a493f2948709",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "It throws an exception :). Which in turn exits with non-zero exit code :)",
        "createdAt" : "2020-01-15T20:24:05Z",
        "updatedAt" : "2020-01-15T21:35:53Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f2384076ea848e86a8242257603520972b9ceeb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +510,514 @@    :param session: session of the sqlalchemy\n    \"\"\"\n    session.execute('select 1 as is_alive;')\n    log.info(\"Connection successful.\")"
  },
  {
    "id" : "2c1f9c3e-729c-4c51-9329-ffa361abc578",
    "prId" : 7172,
    "prUrl" : "https://github.com/apache/airflow/pull/7172#pullrequestreview-343535724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d777be-2675-4985-9055-077b5749fca3",
        "parentId" : null,
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "I think the `health` endpoint I mentioned above would be more useful as it checks if the Scheduler can connect to the metadata DB. `session.execute('select 1 as is_alive;')` would check if the machine where the cli is run can execute that query on the Metadb -> i.e. it will check connection between Machine running CLI with DB",
        "createdAt" : "2020-01-15T21:26:20Z",
        "updatedAt" : "2020-01-15T21:35:53Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "eca8be80-ae1a-4301-9c8d-7201bc1e427a",
        "parentId" : "68d777be-2675-4985-9055-077b5749fca3",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "WDYT? \r\nIf it is just for CI, how about just using curl to access the endpoint?",
        "createdAt" : "2020-01-15T21:27:56Z",
        "updatedAt" : "2020-01-15T21:35:53Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "4eecf51a-29c2-4ccd-a8f9-2aee4ed68dd8",
        "parentId" : "68d777be-2675-4985-9055-077b5749fca3",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "Again - we do not have neither scheduler nor webserver nor any of the workers. It's just checking if the environment we have is \"sane\" - i.e. if the databases are there and can be queried, if all the integration for CI tests are reachable at the destination endpoints. \r\n\r\nWe explicitly only check database availability before we start tests.",
        "createdAt" : "2020-01-15T21:32:54Z",
        "updatedAt" : "2020-01-15T21:35:53Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f2384076ea848e86a8242257603520972b9ceeb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +511,515 @@    \"\"\"\n    session.execute('select 1 as is_alive;')\n    log.info(\"Connection successful.\")"
  },
  {
    "id" : "33f4126e-f7f7-4243-9b87-4a74fbb9c924",
    "prId" : 8008,
    "prUrl" : "https://github.com/apache/airflow/pull/8008#pullrequestreview-392443412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a1a5d01-fdf8-48f1-be6a-7d94d66c4500",
        "parentId" : null,
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "I am not sure if we should keep dummy values here like that. Can we do this likewise gcp? `schema=\"default\"`",
        "createdAt" : "2020-04-13T19:22:36Z",
        "updatedAt" : "2020-04-13T21:43:44Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "89efb7ea-9ea5-464c-81db-635e06a25110",
        "parentId" : "5a1a5d01-fdf8-48f1-be6a-7d94d66c4500",
        "authorId" : "d950a99f-a8dc-436a-8a20-5f8b292fc89c",
        "body" : "Is there any better way to show the schema ?? Cus for GCP there is a tutorial on google's website. Integrating with airflow. Any thoughts?",
        "createdAt" : "2020-04-13T21:12:33Z",
        "updatedAt" : "2020-04-13T21:43:44Z",
        "lastEditedBy" : "d950a99f-a8dc-436a-8a20-5f8b292fc89c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2fcf63023eac9fa0b626437499497f5bd36504",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +254,258 @@                }\n            }\n            \"\"\",\n        ),\n        session"
  }
]