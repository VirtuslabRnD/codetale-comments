[
  {
    "id" : "05a58a95-fcd3-4527-99cb-2b8806ccadd8",
    "prId" : 7092,
    "prUrl" : "https://github.com/apache/airflow/pull/7092#pullrequestreview-339418290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cfb0ad0-8a6c-4951-92f8-ea594669ec9d",
        "parentId" : null,
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "This is correct, but looks odd. This is covered by a test right?",
        "createdAt" : "2020-01-07T17:38:22Z",
        "updatedAt" : "2020-01-07T17:43:35Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      },
      {
        "id" : "ac8d5c21-e75d-473e-ba57-080822f86ed3",
        "parentId" : "0cfb0ad0-8a6c-4951-92f8-ea594669ec9d",
        "authorId" : "c25957e2-1132-4c48-a536-3824307fd862",
        "body" : "https://github.com/apache/airflow/pull/7092/files#diff-beca6224080086e983c4dd9649fca3feR416 would fail if someone removes `or {}` so yes it is covered. \r\n\r\nI can add a separate test in `test/utils/test_decorator.py` if you think that would be good",
        "createdAt" : "2020-01-07T18:10:29Z",
        "updatedAt" : "2020-01-07T18:10:30Z",
        "lastEditedBy" : "c25957e2-1132-4c48-a536-3824307fd862",
        "tags" : [
        ]
      },
      {
        "id" : "87599a30-ecbf-4b56-b128-bc61567d9dab",
        "parentId" : "0cfb0ad0-8a6c-4951-92f8-ea594669ec9d",
        "authorId" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "body" : "Think we're good",
        "createdAt" : "2020-01-07T18:23:11Z",
        "updatedAt" : "2020-01-07T18:23:11Z",
        "lastEditedBy" : "f73f66ab-2657-4a50-be7a-2ca3ca98c202",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2f4e24cefaaac628d965383756c91cae750ae3b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +65,69 @@            dag_params = copy(dag.params) or {}\n\n        params = kwargs.get('params', {}) or {}\n        dag_params.update(params)\n"
  },
  {
    "id" : "bb5fd022-600f-4803-81a6-2d054d23f7db",
    "prId" : 9729,
    "prUrl" : "https://github.com/apache/airflow/pull/9729#pullrequestreview-445178431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dfe2017-3d83-4ee3-95b1-8a3ac793efe8",
        "parentId" : null,
        "authorId" : "c7b0cb1c-ff95-4ec9-a0c6-a9f1b5135a52",
        "body" : "```suggestion\r\ndef apply_defaults(func: Callable[..., Any]) -> Callable[..., Any]:\r\n```",
        "createdAt" : "2020-07-08T22:37:36Z",
        "updatedAt" : "2020-07-15T13:04:48Z",
        "lastEditedBy" : "c7b0cb1c-ff95-4ec9-a0c6-a9f1b5135a52",
        "tags" : [
        ]
      },
      {
        "id" : "3a176b37-a7c1-4c92-baf5-6c15c509aaeb",
        "parentId" : "0dfe2017-3d83-4ee3-95b1-8a3ac793efe8",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This is a bigger challenge. mypy is not too smart to handle this decorator correctly. Please look at: \r\nhttps://github.com/apache/airflow/pull/8145\r\nhttps://github.com/apache/airflow/tree/master/airflow/mypy\r\nhttps://github.com/python/mypy/issues/3157",
        "createdAt" : "2020-07-08T22:45:31Z",
        "updatedAt" : "2020-07-15T13:04:48Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd265295fa71540bc22a48568c226064ada897ad",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +29,33 @@\n\ndef apply_defaults(func: Callable[..., Any]) -> Any:\n    \"\"\"\n    Function decorator that Looks for an argument named \"default_args\", and"
  },
  {
    "id" : "0702a2cb-7d7c-485f-9a69-ab2716e839d5",
    "prId" : 9784,
    "prUrl" : "https://github.com/apache/airflow/pull/9784#pullrequestreview-446916950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eea5abd-142a-4af8-962c-0a51645aee0a",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "This is the most interesting part.",
        "createdAt" : "2020-07-12T21:41:15Z",
        "updatedAt" : "2020-07-22T16:21:46Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "774f7a01-cdad-4ae1-97f1-0c9130b173b3",
        "parentId" : "8eea5abd-142a-4af8-962c-0a51645aee0a",
        "authorId" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "body" : "Not sure I understand it. I'm wondering if removing the `@apply_defulats` will solve the same issue? I think now we have `BaseOperatorMeta` we can consider removing this decorator.",
        "createdAt" : "2020-07-12T22:32:42Z",
        "updatedAt" : "2020-07-22T16:21:46Z",
        "lastEditedBy" : "0d4fd7c4-f8ab-4371-acfe-b9cca6decaf5",
        "tags" : [
        ]
      },
      {
        "id" : "9c81daca-8b92-4399-9fda-fbc16ddcf502",
        "parentId" : "8eea5abd-142a-4af8-962c-0a51645aee0a",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "I will solve it because mypy is not smart enough to look into the metaclass, but we will still have remaining problems to solve. I consider it an intermediate solution until we cannot use the metaclass.",
        "createdAt" : "2020-07-12T23:04:41Z",
        "updatedAt" : "2020-07-22T16:21:46Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c7791de9323e2212be86909a553750e65ebc3a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +28,32 @@signature = inspect.signature\n\nT = TypeVar('T', bound=Callable)  # pylint: disable=invalid-name\n\n"
  }
]