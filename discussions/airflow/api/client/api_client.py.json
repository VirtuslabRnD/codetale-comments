[
  {
    "id" : "21519e23-83f6-4e80-9efa-46ee21db41ee",
    "prId" : 7138,
    "prUrl" : "https://github.com/apache/airflow/pull/7138#pullrequestreview-345008012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "parentId" : null,
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "the `airflow.api.cclient` package is intended for use by CLI. Can we call this method from the CLI?",
        "createdAt" : "2020-01-11T16:35:56Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "59c03ca3-7f6e-4260-b7d3-89d35867a988",
        "parentId" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "I'm not sure what you mean. The CLI can just use one of the interfaces to the API: local and json. The \"local_client\" should be eventually deprecated as it touches the database directly and that's a security concern. \r\n\r\nOther application can use this package as well to interface with the API.",
        "createdAt" : "2020-01-17T16:03:22Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      },
      {
        "id" : "96a09b05-bc3d-4d6d-9dc7-4fe01178f8ff",
        "parentId" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "authorId" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "body" : "In my opinion, this class is not intended for external use. Someone can use it, but it requires Airflow installation. I think it would be better if we recommend using the REST API directly. This is described in detail in the documentation - [here](https://airflow.readthedocs.io/en/latest/usage-cli.html#set-up-connection-to-a-remote-airflow-instance) For me, this is an internal abstraction that allows us to execute some CLI commands using the REST API or execute some CLI command using a direct database query.  So if we add a method here, then we should also add the corresponding command in CLI. We should not allow developer to use this class directly because we have a lot of side effects when importing the `airflow` package e.g. changing the logging configuration or importing the webserver classes.\r\n\r\nWe cannot deprecate local_client because only the CLI that uses local_client is fully functional and we use this class in the default configuration. \r\n\r\nThe bit confusing is that this code is in the `api` package and not in the `cli` package, but the `cli` package was created later and it is possible that we should move this code now.\r\n\r\nI would like to deal with the subject of API in the near future. I've planned it in Q1. I will present AIP in the near future.",
        "createdAt" : "2020-01-18T01:58:20Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "07638d17-cc8b-40a4-abdc-7b39759362ab",
        "tags" : [
        ]
      },
      {
        "id" : "bb983502-3bc3-40ea-95d2-d3b9a3e033e2",
        "parentId" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "The class is intended for external use (I'm the original author). As mentioned the local_client is a security problem and only exists for backwards compatibility. The REST API can be used directly and the json_client provides you a way to do this in any python application which is a provided implementation of the REST API's interface rather than needing to create your own client. \r\n\r\nThe CLI should switch to the `json_client` or, in the future, `grpc` maybe. The local_client should be deprecated asap cause there is no way to do proper authn/authz . Basically if you can run the command line client you have full control over Airflow operationally.\r\n\r\nYou can argue that the client stuff could be moved to a semantic better location but that will not be `cli`.",
        "createdAt" : "2020-01-18T11:44:42Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      },
      {
        "id" : "9b057fb9-9fde-4aac-8520-5f74b8371c8a",
        "parentId" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "authorId" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "body" : "For the AIP I would expect building on top of FAB or equivalent. That gives OpenAPI endpoints out of the box.",
        "createdAt" : "2020-01-18T11:45:30Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "537cec6b-32b7-4f8b-9f76-6932246f79b5",
        "tags" : [
        ]
      },
      {
        "id" : "701e0d23-498d-4415-97b7-d53e8f878a05",
        "parentId" : "2f261901-d8f3-472d-87d6-2ac5f2e1c520",
        "authorId" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "body" : "I think for now it's OK to follow the current \"experimental\" approach and add this as it is. But we should discuss the approach for API in general soon and define/agree in community both - our target for API implementation and our roadmap how we will get there.\r\n\r\nFor now I think we have no other choice but implement it this way if this is needed for some other work, but we should be aware it might get deprecated in case we decide that we replace the experimental API with another approach.\r\n\r\nCertainly we should not change the approach before we decide where we are going. ",
        "createdAt" : "2020-01-19T15:10:12Z",
        "updatedAt" : "2020-01-20T15:42:11Z",
        "lastEditedBy" : "e8563344-32ea-4c07-9731-a2fed8d2edf2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f606a3a762906c039980afd83ef8f679f52b866a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +72,76 @@        raise NotImplementedError()\n\n    def get_lineage(self, dag_id: str, execution_date: str):\n        \"\"\"\n        Return the lineage information for the dag on this execution date"
  }
]