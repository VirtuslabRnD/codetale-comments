[
  {
    "id" : "b576c2f6-6914-43fb-881f-0a877964084e",
    "prId" : 664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfc30f8d-a45d-407a-880a-6808ff5cc9b2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "While you're looking at this (but in a separate patch), if you can find a better way to handle the situation here where this test file calls  `ui.window.onBeginFrame = null;`, that would be great. When I added that code I couldn't really see a clean way to configure how the scheduler should be driven. This solution is bad because it is mucking around with a value that really the scheduler thinks it owns.\n",
        "createdAt" : "2015-12-02T07:21:06Z",
        "updatedAt" : "2015-12-02T23:37:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "68f2b77d-b90f-4de6-986e-5e5fe22291a7",
        "parentId" : "dfc30f8d-a45d-407a-880a-6808ff5cc9b2",
        "authorId" : "737a0826-b675-46cd-a553-2ca54d538080",
        "body" : "Will do.\n",
        "createdAt" : "2015-12-02T23:27:18Z",
        "updatedAt" : "2015-12-02T23:37:18Z",
        "lastEditedBy" : "737a0826-b675-46cd-a553-2ca54d538080",
        "tags" : [
        ]
      }
    ],
    "commit" : "728211526a26a5030b1aaae41767ff63303f8bbe",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +39,43 @@    async.flushMicrotasks();\n  }\n\n  List<Layer> _layers(Layer layer) {\n    List<Layer> result = <Layer>[layer];"
  },
  {
    "id" : "2662477a-8224-4570-8fd1-d6ea2fb3ea0e",
    "prId" : 2461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44baed38-a85a-4147-98c1-a257384e7324",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i changed this one to a UniqueKey too.\n",
        "createdAt" : "2016-03-07T07:00:29Z",
        "updatedAt" : "2016-03-07T07:00:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "826b13bde35150cceed077048083817f5a88a77b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +79,83 @@    timeDilation = 1.0;\n    ui.window.onBeginFrame = null;\n    runApp(new Container(key: new UniqueKey())); // flush out the last build entirely\n  }\n"
  },
  {
    "id" : "f41290cd-4626-471c-a526-28fc209e1f20",
    "prId" : 3288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f0e08d-5df4-4105-9377-c4521c31cf39",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We should really rename `scroll` and `scrollAt` to `drag` and `dragAt`, but that's unrelated to the rest of your change.\n",
        "createdAt" : "2016-04-13T01:50:09Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd81f8ff9188daca88be01837a1885d9425c176",
    "line" : 303,
    "diffHunk" : "@@ -1,1 +169,173 @@  void scrollAt(Point startLocation, Offset offset, { int pointer: 1 }) {\n    elementTreeTester.scrollAt(startLocation, offset, pointer: pointer);\n  }\n\n  /// Attempts a fling gesture starting at the center of a widget found by"
  },
  {
    "id" : "82acf098-8e2d-4c57-90ae-53240932298d",
    "prId" : 3288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should this constructor be private?\n",
        "createdAt" : "2016-04-13T01:50:40Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "e2ad525d-7d7a-4758-a9cf-be684fe1cf77",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "It would prevent developers from extending it to support their own custom finders. I might, for example, want a utility `find.zippyUnder(anotherFinder)`.\n",
        "createdAt" : "2016-04-13T17:23:05Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "4af7281c-5e7a-4f55-854d-400979febd07",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Why would the constructor being private stop one from creating custom finders?\n",
        "createdAt" : "2016-04-13T20:38:17Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "56eb3699-8337-438b-9977-ad0965baa834",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "or rather, how would you add a custom finder to the \"find\" namespace today?\n",
        "createdAt" : "2016-04-13T20:39:01Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "af46d802-d1ef-46de-a130-f0034736eee9",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "You wouldn't add it to the \"find\" namespace. Instead, you would extend the class and put it in your own custom namespace, e.g.:\n\n``` dart\nimport 'package:flutter_driver/flutter_driver.dart' hide find;\nexport 'package:flutter_driver/flutter_driver.dart' hide find;\n\nconst find = const MyFinders();\n\nclass MyFinders extends CommonFinders {\n  const MyFinders();\n\n  Finder byHobbit(String hobbitsName) => new _ByHobbit(hobbitsName);\n}\n```\n",
        "createdAt" : "2016-04-15T22:55:05Z",
        "updatedAt" : "2016-04-15T22:55:05Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "6823d918-1da7-415f-a677-f1e3aaadd9b9",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't understand the value of extending CommonFinders here.\n",
        "createdAt" : "2016-04-15T23:15:48Z",
        "updatedAt" : "2016-04-15T23:15:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "31b45dcd-9696-44dc-bbbe-8eb4535d3f29",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "The value is that you use the same DSL:\n\n``` dart\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(find.byHobbit('Bilbo'));\n```\n\nNot a huge value by any means, but does make your test code look nicer. The alternative is to define a separate namespace:\n\n``` dart\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(myFinders.byHobbit('Bilbo'));\n```\n\nAllowing extensions also has a drawback in that it makes it technically a breaking change to add more finders to `CommonFinders` as the user might already have a custom finder with the same name but different signature (although until we have `@final` or `@implementation` annotation to disallow implementing a class, the risk is still there, just smaller). So I'm not too attached to it.\n",
        "createdAt" : "2016-04-15T23:24:15Z",
        "updatedAt" : "2016-04-15T23:24:15Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d98b112b-8b3c-4a6e-9b68-b44edc60e564",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think the value of sealing the class and not having multiple instances outweighs the minor advantage of the code look consistent. In particular, I think there's actually danger in having the code not make it obvious who implemented the finders.\n\n```\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(lotr.byHobbit('Bilbo'));\n```\n",
        "createdAt" : "2016-04-15T23:28:52Z",
        "updatedAt" : "2016-04-15T23:28:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "db8a85c5-eb4c-4583-b7a9-1f898a4df4fb",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Fair enough. Making it private: https://github.com/flutter/flutter/pull/3371\n",
        "createdAt" : "2016-04-15T23:36:02Z",
        "updatedAt" : "2016-04-15T23:36:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "4184a423-192f-4a8e-870f-f28fc71d5ede",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "And here too: https://github.com/flutter/flutter/pull/3365\n",
        "createdAt" : "2016-04-15T23:42:05Z",
        "updatedAt" : "2016-04-15T23:42:05Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd81f8ff9188daca88be01837a1885d9425c176",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +240,244 @@/// Provides lightweight syntax for getting frequently used widget [Finder]s.\nclass CommonFinders {\n  const CommonFinders();\n\n  /// Finds [Text] widgets containing string equal to [text]."
  },
  {
    "id" : "d7e62fb9-6c7f-424c-a624-f861616e590e",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b44e9807-7811-489a-92aa-f0f82b766946",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "What if you are debugging a benchmark?\n",
        "createdAt" : "2016-04-29T00:20:09Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "87aa54da-cd19-4d0e-8442-2f632f044efc",
        "parentId" : "b44e9807-7811-489a-92aa-f0f82b766946",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah. not sure what to do here. will have to see if this is a problem people run into.\n",
        "createdAt" : "2016-04-29T19:44:30Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4ecb2ec674f88ee2f8bdb876e935095b7e4de",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@///\n/// Benchmarks must not be run in checked mode. To avoid this, this\n/// function will assert if it is run in checked mode.\n///\n/// Example:"
  },
  {
    "id" : "94cdb7d8-4fe3-4777-b0f2-19285f30dd9f",
    "prId" : 17063,
    "prUrl" : "https://github.com/flutter/flutter/pull/17063#pullrequestreview-116426854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89254be2-2a84-49e9-abe9-4ceec94dec5b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Mention `expectLater` in `expect`'s documentation.\r\nHave `expect` assert that it didn't get a Future back, and if it did, fail with a message saying that you either have a bug or you should consider expectLater.",
        "createdAt" : "2018-04-28T00:27:26Z",
        "updatedAt" : "2018-04-28T03:36:46Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8da19780-86c7-4336-abe4-9a7885942bb8",
        "parentId" : "89254be2-2a84-49e9-abe9-4ceec94dec5b",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "`expect` can't get a future back, because it calls `test_package.expect()`, which returns void.",
        "createdAt" : "2018-04-28T00:46:07Z",
        "updatedAt" : "2018-04-28T03:36:46Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "918747e4-bcc6-4a18-b11c-7b0ee738e753",
        "parentId" : "89254be2-2a84-49e9-abe9-4ceec94dec5b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ugh, that's quite unfortunate.",
        "createdAt" : "2018-04-30T20:32:07Z",
        "updatedAt" : "2018-04-30T20:32:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d61a93eb327376ea669ce7b54b51db3be050e1fb",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +162,166 @@  test_package.expect(actual, matcher, reason: reason);\n}\n\n/// Just like [expect], but returns a [Future] that completes when the matcher\n/// has finished matching."
  },
  {
    "id" : "6b428e13-aad0-4664-bb18-d2e154f281f6",
    "prId" : 17085,
    "prUrl" : "https://github.com/flutter/flutter/pull/17085#pullrequestreview-116450780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9581fa0b-c5f9-469a-b4de-3615d05958d9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "What I'm worried about is that this will mean you can forget to await this method, then call something like `pump`, and we won't catch it.\r\n\r\nWhy are we hitting async barriers if you await this future?",
        "createdAt" : "2018-04-30T20:33:43Z",
        "updatedAt" : "2018-04-30T20:33:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "5eb40b63-d6eb-4995-a203-08bf5c9f2f98",
        "parentId" : "9581fa0b-c5f9-469a-b4de-3615d05958d9",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "While still awaiting the async matcher, I was hitting the async barrier here:\r\n\r\nhttps://github.com/flutter/flutter/blob/5972fdb7aa251eeed8cb5dcb74856f47f9570225/packages/flutter_test/lib/src/binding.dart#L485\r\n\r\n",
        "createdAt" : "2018-04-30T21:54:51Z",
        "updatedAt" : "2018-04-30T21:54:51Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f43929b8519e19583d1143313b9dfcf559ba6d71",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +178,182 @@  // [TestWidgetsFlutterBinding] while we're waiting for the matcher to complete\n  TestAsyncUtils.guardSync();\n  return test_package.expectLater(actual, matcher, reason: reason, skip: skip);\n}\n"
  },
  {
    "id" : "1ffc4b8f-cc51-47df-804c-7979c3a43f6b",
    "prId" : 22001,
    "prUrl" : "https://github.com/flutter/flutter/pull/22001#pullrequestreview-161839926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf38e23f-b98e-4e3b-a4fe-56ce41b5a503",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "nit: `[getSemantics]`",
        "createdAt" : "2018-10-04T22:52:44Z",
        "updatedAt" : "2018-10-05T21:50:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "64cdf7c0704e71c976dcdb83bdc08cc5814e726f",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +650,654 @@\n  /// DEPRECATED: use [getSemantics] instead.\n  @Deprecated('use getSemantics instead')\n  SemanticsData getSemanticsData(Finder finder) {\n    if (binding.pipelineOwner.semanticsOwner == null)"
  },
  {
    "id" : "2bdb98e8-6c0b-4e81-870c-dc3750f7ade3",
    "prId" : 24930,
    "prUrl" : "https://github.com/flutter/flutter/pull/24930#pullrequestreview-183977400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "caff0419-301c-4847-9222-030ef7b047c6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "add comments explaining why (as for the existing hidden members)",
        "createdAt" : "2018-12-12T01:13:29Z",
        "updatedAt" : "2018-12-12T19:00:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a1e4fbdf95414b8f03ca017c12c0565c920afe3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +35,39 @@  tearDownAll,\n  setUp,\n  tearDown,\n  expect, // we have our own wrapper below\n  TypeMatcher, // matcher's TypeMatcher conflicts with the one in the Flutter framework"
  },
  {
    "id" : "7404a63c-e3fe-4aaf-9be3-352e3327f8e3",
    "prId" : 25049,
    "prUrl" : "https://github.com/flutter/flutter/pull/25049#pullrequestreview-185726915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "733b762d-1a2c-4105-b9f6-77322e1bcf69",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we assert that the policy is benchmark?",
        "createdAt" : "2018-12-14T01:14:58Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e32d4ad0-8d65-494a-a495-a4a628bf29b0",
        "parentId" : "733b762d-1a2c-4105-b9f6-77322e1bcf69",
        "authorId" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "body" : "It might catch some bugs and I don't see a reason not to.",
        "createdAt" : "2018-12-17T18:12:22Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e36b49e9f88cb24e5f7c1c7b1bf0f7690e38ebe",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +273,277 @@    }());\n\n    dynamic caughtException;\n    void handleError(dynamic error, StackTrace stackTrace) => caughtException ??= error;\n"
  },
  {
    "id" : "50c05ee1-10db-4f3f-9b56-79e8cbb1e3f0",
    "prId" : 25049,
    "prUrl" : "https://github.com/flutter/flutter/pull/25049#pullrequestreview-190151030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eae35bb4-912e-462b-b96a-fa41a2ed2615",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this uses scheduleMicrotask, whereas the original used Timer.run. Are we sure that the semantics are the same? In particular, if a microtask is scheduled by handleBeginFrame, will it run before handleDrawFrame?\r\n\r\nWe should probably add that to the test to make sure.",
        "createdAt" : "2019-01-08T01:00:15Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c21cc36e-41d6-438e-8e1c-e80568766d90",
        "parentId" : "eae35bb4-912e-462b-b96a-fa41a2ed2615",
        "authorId" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "body" : "Actually the semantics are not the same, thanks for pointing this out.\r\nThe solution is just to \"await idle()\" after \"handleBeginFrame()\".\r\n\r\nI've updated the test to make sure this happens.",
        "createdAt" : "2019-01-08T09:23:30Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e36b49e9f88cb24e5f7c1c7b1bf0f7690e38ebe",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +279,283 @@    await idle();\n    Future<void>.microtask(() { binding.handleDrawFrame(); }).catchError(handleError);\n    await idle();\n\n    if (caughtException != null) {"
  },
  {
    "id" : "4c793f9f-085f-4996-a369-e72184231eb5",
    "prId" : 25049,
    "prUrl" : "https://github.com/flutter/flutter/pull/25049#pullrequestreview-190151030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db9a063f-ba89-4bb4-8dcc-eb2346af6aca",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(maybe clarify that it doesn't actually wait `duration` time, it just fakes it?)",
        "createdAt" : "2019-01-08T01:01:22Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b4fdfd3c-db7c-48e0-aecc-9c65f86ca41a",
        "parentId" : "db9a063f-ba89-4bb4-8dcc-eb2346af6aca",
        "authorId" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "body" : "Done.",
        "createdAt" : "2019-01-08T09:22:43Z",
        "updatedAt" : "2019-01-16T14:52:40Z",
        "lastEditedBy" : "1bcfb382-657a-4d7d-879b-85c84363148f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e36b49e9f88cb24e5f7c1c7b1bf0f7690e38ebe",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +258,262 @@  }\n\n  /// Triggers a frame after `duration` amount of time, return as soon as the frame is drawn.\n  ///\n  /// This enables driving an artificially high CPU load by rendering frames in"
  },
  {
    "id" : "91ccbda0-49f3-4170-992b-9bc1a26c89e2",
    "prId" : 25202,
    "prUrl" : "https://github.com/flutter/flutter/pull/25202#pullrequestreview-210272144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e9b0bb-c975-4a29-bd94-803a97ec32a4",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: please add a blank line after \"See also:\"",
        "createdAt" : "2019-03-04T17:33:29Z",
        "updatedAt" : "2019-03-05T15:25:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a48a760f2f6409036acf1dd668bf3ea6e700e1c",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +67,71 @@/// See also:\n///\n///  * [AutomatedTestWidgetsFlutterBinding.addTime] to learn more about\n/// timeout and how to manually increase timeouts.\n///"
  },
  {
    "id" : "88e9f5ed-7b77-420a-8ead-cf9f314add6a",
    "prId" : 40706,
    "prUrl" : "https://github.com/flutter/flutter/pull/40706#pullrequestreview-290073036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca6525bd-7132-43a2-b762-3de8df8d391e",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I assume we don't need await here because we want to pass the guarded promise back",
        "createdAt" : "2019-09-18T16:55:08Z",
        "updatedAt" : "2019-09-19T00:55:44Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "fc10786d-423c-4b78-b745-8a119db3464f",
        "parentId" : "ca6525bd-7132-43a2-b762-3de8df8d391e",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes.",
        "createdAt" : "2019-09-18T17:13:15Z",
        "updatedAt" : "2019-09-19T00:55:44Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "563d0b8013e4f9bd748b3623740829baed9a80d1",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +768,772 @@    assert(platform != null);\n    // Internally wrapped in async guard.\n    return simulateKeyDownEvent(key, platform: platform);\n  }\n"
  }
]