[
  {
    "id" : "b576c2f6-6914-43fb-881f-0a877964084e",
    "prId" : 664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfc30f8d-a45d-407a-880a-6808ff5cc9b2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "While you're looking at this (but in a separate patch), if you can find a better way to handle the situation here where this test file calls  `ui.window.onBeginFrame = null;`, that would be great. When I added that code I couldn't really see a clean way to configure how the scheduler should be driven. This solution is bad because it is mucking around with a value that really the scheduler thinks it owns.\n",
        "createdAt" : "2015-12-02T07:21:06Z",
        "updatedAt" : "2015-12-02T23:37:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "68f2b77d-b90f-4de6-986e-5e5fe22291a7",
        "parentId" : "dfc30f8d-a45d-407a-880a-6808ff5cc9b2",
        "authorId" : "737a0826-b675-46cd-a553-2ca54d538080",
        "body" : "Will do.\n",
        "createdAt" : "2015-12-02T23:27:18Z",
        "updatedAt" : "2015-12-02T23:37:18Z",
        "lastEditedBy" : "737a0826-b675-46cd-a553-2ca54d538080",
        "tags" : [
        ]
      }
    ],
    "commit" : "728211526a26a5030b1aaae41767ff63303f8bbe",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +39,43 @@    async.flushMicrotasks();\n  }\n\n  List<Layer> _layers(Layer layer) {\n    List<Layer> result = <Layer>[layer];"
  },
  {
    "id" : "2662477a-8224-4570-8fd1-d6ea2fb3ea0e",
    "prId" : 2461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44baed38-a85a-4147-98c1-a257384e7324",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i changed this one to a UniqueKey too.\n",
        "createdAt" : "2016-03-07T07:00:29Z",
        "updatedAt" : "2016-03-07T07:00:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "826b13bde35150cceed077048083817f5a88a77b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +79,83 @@    timeDilation = 1.0;\n    ui.window.onBeginFrame = null;\n    runApp(new Container(key: new UniqueKey())); // flush out the last build entirely\n  }\n"
  },
  {
    "id" : "f41290cd-4626-471c-a526-28fc209e1f20",
    "prId" : 3288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f0e08d-5df4-4105-9377-c4521c31cf39",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We should really rename `scroll` and `scrollAt` to `drag` and `dragAt`, but that's unrelated to the rest of your change.\n",
        "createdAt" : "2016-04-13T01:50:09Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd81f8ff9188daca88be01837a1885d9425c176",
    "line" : 303,
    "diffHunk" : "@@ -1,1 +169,173 @@  void scrollAt(Point startLocation, Offset offset, { int pointer: 1 }) {\n    elementTreeTester.scrollAt(startLocation, offset, pointer: pointer);\n  }\n\n  /// Attempts a fling gesture starting at the center of a widget found by"
  },
  {
    "id" : "82acf098-8e2d-4c57-90ae-53240932298d",
    "prId" : 3288,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should this constructor be private?\n",
        "createdAt" : "2016-04-13T01:50:40Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "e2ad525d-7d7a-4758-a9cf-be684fe1cf77",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "It would prevent developers from extending it to support their own custom finders. I might, for example, want a utility `find.zippyUnder(anotherFinder)`.\n",
        "createdAt" : "2016-04-13T17:23:05Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "4af7281c-5e7a-4f55-854d-400979febd07",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Why would the constructor being private stop one from creating custom finders?\n",
        "createdAt" : "2016-04-13T20:38:17Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "56eb3699-8337-438b-9977-ad0965baa834",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "or rather, how would you add a custom finder to the \"find\" namespace today?\n",
        "createdAt" : "2016-04-13T20:39:01Z",
        "updatedAt" : "2016-04-14T06:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "af46d802-d1ef-46de-a130-f0034736eee9",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "You wouldn't add it to the \"find\" namespace. Instead, you would extend the class and put it in your own custom namespace, e.g.:\n\n``` dart\nimport 'package:flutter_driver/flutter_driver.dart' hide find;\nexport 'package:flutter_driver/flutter_driver.dart' hide find;\n\nconst find = const MyFinders();\n\nclass MyFinders extends CommonFinders {\n  const MyFinders();\n\n  Finder byHobbit(String hobbitsName) => new _ByHobbit(hobbitsName);\n}\n```\n",
        "createdAt" : "2016-04-15T22:55:05Z",
        "updatedAt" : "2016-04-15T22:55:05Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "6823d918-1da7-415f-a677-f1e3aaadd9b9",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't understand the value of extending CommonFinders here.\n",
        "createdAt" : "2016-04-15T23:15:48Z",
        "updatedAt" : "2016-04-15T23:15:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "31b45dcd-9696-44dc-bbbe-8eb4535d3f29",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "The value is that you use the same DSL:\n\n``` dart\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(find.byHobbit('Bilbo'));\n```\n\nNot a huge value by any means, but does make your test code look nicer. The alternative is to define a separate namespace:\n\n``` dart\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(myFinders.byHobbit('Bilbo'));\n```\n\nAllowing extensions also has a drawback in that it makes it technically a breaking change to add more finders to `CommonFinders` as the user might already have a custom finder with the same name but different signature (although until we have `@final` or `@implementation` annotation to disallow implementing a class, the risk is still there, just smaller). So I'm not too attached to it.\n",
        "createdAt" : "2016-04-15T23:24:15Z",
        "updatedAt" : "2016-04-15T23:24:15Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d98b112b-8b3c-4a6e-9b68-b44edc60e564",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think the value of sealing the class and not having multiple instances outweighs the minor advantage of the code look consistent. In particular, I think there's actually danger in having the code not make it obvious who implemented the finders.\n\n```\ntester.tap(find.byKey(new ValueKey('Foo')));\ntester.tap(lotr.byHobbit('Bilbo'));\n```\n",
        "createdAt" : "2016-04-15T23:28:52Z",
        "updatedAt" : "2016-04-15T23:28:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "db8a85c5-eb4c-4583-b7a9-1f898a4df4fb",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Fair enough. Making it private: https://github.com/flutter/flutter/pull/3371\n",
        "createdAt" : "2016-04-15T23:36:02Z",
        "updatedAt" : "2016-04-15T23:36:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "4184a423-192f-4a8e-870f-f28fc71d5ede",
        "parentId" : "1476d72b-e051-48ce-83d1-ee28c56d6f7e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "And here too: https://github.com/flutter/flutter/pull/3365\n",
        "createdAt" : "2016-04-15T23:42:05Z",
        "updatedAt" : "2016-04-15T23:42:05Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd81f8ff9188daca88be01837a1885d9425c176",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +240,244 @@/// Provides lightweight syntax for getting frequently used widget [Finder]s.\nclass CommonFinders {\n  const CommonFinders();\n\n  /// Finds [Text] widgets containing string equal to [text]."
  },
  {
    "id" : "d7e62fb9-6c7f-424c-a624-f861616e590e",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b44e9807-7811-489a-92aa-f0f82b766946",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "What if you are debugging a benchmark?\n",
        "createdAt" : "2016-04-29T00:20:09Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "87aa54da-cd19-4d0e-8442-2f632f044efc",
        "parentId" : "b44e9807-7811-489a-92aa-f0f82b766946",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah. not sure what to do here. will have to see if this is a problem people run into.\n",
        "createdAt" : "2016-04-29T19:44:30Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4ecb2ec674f88ee2f8bdb876e935095b7e4de",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@///\n/// Benchmarks must not be run in checked mode. To avoid this, this\n/// function will assert if it is run in checked mode.\n///\n/// Example:"
  }
]