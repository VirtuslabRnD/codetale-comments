[
  {
    "id" : "1e9ff0c1-c7cc-4c7a-8fdd-d5f459607e78",
    "prId" : 3622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa33b09-3753-4c63-a6eb-4f8cd35f8f0b",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "If the `findsWidgets` matcher (i.e. `_FindsWidgetMatcher`) were _also_ callable, then the same identifier could be reused instead of adding `N` in the name (which looks kinda weird there). Examples:\n\n``` dart\nexpect(find.text('Save'), findsWidgets);\nexpect(find.text('Save'), findsWidgets(2));\n```\n\nFor this to work the `_FindsWidgetMatcher` interface would have to be along the following lines:\n\n``` dart\nconst CallableMatcher findsWidgets = const _FindsWidgetMatcher(1, null);\n\n// This is needed so that callability type checks/auto-completes.\nabstract class CallableMatcher {\n  Matcher call(int n);\n}\n\nclass _FindsWidgetMatcher extends Matcher implements CallableMatcher {\n  Matcher call(int n) {\n    return new _FindsWidgetMatcher(n, n);\n  }\n}\n```\n",
        "createdAt" : "2016-04-29T00:43:38Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "19298c73-ac2c-46fa-bf38-6d0683b00668",
        "parentId" : "aaa33b09-3753-4c63-a6eb-4f8cd35f8f0b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I agree findsNWidgets is a bit weird. Making it callable is kind of weird though. If you think we should do this file a bug and I'll look at doing it in a separate PR.\n",
        "createdAt" : "2016-04-29T19:48:29Z",
        "updatedAt" : "2016-04-29T20:12:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4ecb2ec674f88ee2f8bdb876e935095b7e4de",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@///\n///     expect(find.text('Save'), findsNWidgets(2));\nMatcher findsNWidgets(int n) => new _FindsWidgetMatcher(n, n);\n\n/// Asserts that the [Finder] locates the a single widget that has at"
  },
  {
    "id" : "2fa693bf-02cd-4d20-a4d5-a4d14425f181",
    "prId" : 10935,
    "prUrl" : "https://github.com/flutter/flutter/pull/10935#pullrequestreview-46072363",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "827eac7c-bfa0-4cdb-af05-e136d847df8e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would put all these inside the class as static methods so that it's all wrapped up together",
        "createdAt" : "2017-06-23T19:30:15Z",
        "updatedAt" : "2017-06-23T19:58:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b3e7bc17c8335ab0806e96ea99fd4ac19dbf1d",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +435,439 @@}\n\n/// Returns `true` if [c] represents a whitespace code unit.\nbool _isWhitespace(int c) => (c <= 0x000D && c >= 0x0009) || c == 0x0020;\n"
  },
  {
    "id" : "d486a244-a2cc-422a-a462-e23b28788872",
    "prId" : 17094,
    "prUrl" : "https://github.com/flutter/flutter/pull/17094#pullrequestreview-116364965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77eb9e4e-1d8f-413e-9d54-1be4ff22255b",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Is this the only way to define an AsyncMatcher subclass? Too bad we have to ignore lint for it to be possible.",
        "createdAt" : "2018-04-30T17:10:22Z",
        "updatedAt" : "2018-04-30T17:10:53Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "3b20a343-6f2b-4f0c-94be-d8487d3e0569",
        "parentId" : "77eb9e4e-1d8f-413e-9d54-1be4ff22255b",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Alas, yes.",
        "createdAt" : "2018-04-30T17:17:44Z",
        "updatedAt" : "2018-04-30T17:17:45Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a75806e5a350b333d2fa146faee427ab0ae174d6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +13,17 @@import 'package:meta/meta.dart';\nimport 'package:test/test.dart' hide TypeMatcher;\nimport 'package:test/src/frontend/async_matcher.dart'; // ignore: implementation_imports\n\nimport 'binding.dart';"
  },
  {
    "id" : "ec2371e8-8167-4768-b830-dfb6b8dd6818",
    "prId" : 20462,
    "prUrl" : "https://github.com/flutter/flutter/pull/20462#pullrequestreview-145812531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8dffad1-2107-4dd8-bfc6-2de60482c4bc",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "include disposing the handle in this example?",
        "createdAt" : "2018-08-13T18:24:07Z",
        "updatedAt" : "2018-08-13T20:34:29Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8db58cc7-dc94-4998-9707-26041c4c7024",
        "parentId" : "d8dffad1-2107-4dd8-bfc6-2de60482c4bc",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-08-13T20:02:15Z",
        "updatedAt" : "2018-08-13T20:34:29Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6019179b7a381b11c9c5d42f046d4ca7da878d1a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +470,474 @@/// ```dart\n/// final SemanticsHandle handle = tester.ensureSemantics();\n/// await meetsGuideline(tester, meetsGuideline(textContrastGuideline));\n/// handle.dispose();\n/// ```"
  },
  {
    "id" : "7b2d142b-6b60-458e-ae7c-60519bcd324e",
    "prId" : 20462,
    "prUrl" : "https://github.com/flutter/flutter/pull/20462#pullrequestreview-145826358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d37d843-f512-462e-9f89-be6539f52fc5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "sad. Maybe there should be an upstream isNotAsync matcher?",
        "createdAt" : "2018-08-13T18:25:09Z",
        "updatedAt" : "2018-08-13T20:34:29Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d0160f5e-38a2-42f4-9d01-70d05fd8472e",
        "parentId" : "2d37d843-f512-462e-9f89-be6539f52fc5",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "There are, but they don't really mesh with how we handle async in widget tests, hence the AsyncMatcher work around.  I'm not really sure what the solution is here, maybe just make the guideline classes public so they can be unit tested?",
        "createdAt" : "2018-08-13T20:02:07Z",
        "updatedAt" : "2018-08-13T20:34:29Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "39a1e8f5-f8ec-4315-ac6c-2bb059aa17bd",
        "parentId" : "2d37d843-f512-462e-9f89-be6539f52fc5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "is there a bug filed on the `test` package about this limitation?",
        "createdAt" : "2018-08-13T20:27:07Z",
        "updatedAt" : "2018-08-13T20:34:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "dee07df6-145a-4b8b-9ed1-ac6b3da49812",
        "parentId" : "2d37d843-f512-462e-9f89-be6539f52fc5",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Filled https://github.com/dart-lang/test/issues/923",
        "createdAt" : "2018-08-13T20:39:55Z",
        "updatedAt" : "2018-08-13T20:39:55Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6019179b7a381b11c9c5d42f046d4ca7da878d1a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +485,489 @@/// The inverse matcher of [meetsGuideline].\n///\n/// This is needed because the [isNot] matcher does not compose with an\n/// [AsyncMatcher].\nAsyncMatcher doesNotMeetGuideline(AccessibilityGuideline guideline) {"
  },
  {
    "id" : "226f6d6d-3bde-44a6-aee7-b52470779705",
    "prId" : 21828,
    "prUrl" : "https://github.com/flutter/flutter/pull/21828#pullrequestreview-155275555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32bcd769-caef-46bd-bc9f-54554cd44b3e",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "If desired I can simplify so that this matcher only works for \r\nui.Image and Future<ui.Image> and not for Finder.",
        "createdAt" : "2018-09-13T21:14:53Z",
        "updatedAt" : "2018-09-17T21:34:13Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "343d2535942626a85c93a19cf54eaf731fbf2c6e",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +290,294 @@}\n\n/// Asserts that a [Finder], [Future<ui.Image>], or [ui.Image] matches a\n/// reference image identified by [image].\n///"
  }
]