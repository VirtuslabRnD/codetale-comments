[
  {
    "id" : "dbd13373-76b7-43f4-b15c-def9c2f066d8",
    "prId" : 5752,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb8c8f94-0134-4451-a752-1f718fbd3adf",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should changes to this variable be in an assert?\n",
        "createdAt" : "2016-09-07T16:27:01Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "8e1926db-54fb-45fc-9f63-ea5188ac8921",
        "parentId" : "cb8c8f94-0134-4451-a752-1f718fbd3adf",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "AutomatedTestWidgetsFlutterBinding is always run in checked mode\n",
        "createdAt" : "2016-09-07T21:03:07Z",
        "updatedAt" : "2016-09-07T21:27:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "431e764e8b9179bf4e542b1c59ca4b07090e6e9b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +455,459 @@    assert(inTest);\n    try {\n      debugBuildingDirtyElements = true;\n      buildOwner.buildScope(renderViewElement);\n      if (_phase == EnginePhase.build)"
  },
  {
    "id" : "5f4c622a-ad3a-49d4-80e6-5536107bf173",
    "prId" : 7453,
    "prUrl" : "https://github.com/flutter/flutter/pull/7453#pullrequestreview-16257912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50addc36-8763-4a4c-bc67-6be346e59239",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe add to the last paragraph here, saying that the \"also, the ServicesBinding is not included\" or some such?",
        "createdAt" : "2017-01-11T23:07:17Z",
        "updatedAt" : "2017-01-12T00:50:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c109ec7f555fc94aba73d0ee69e395e8e6cfb276",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +81,85 @@/// When using these bindings, certain features are disabled. For\n/// example, [timeDilation] is reset to 1.0 on initialization.\nabstract class TestWidgetsFlutterBinding extends BindingBase\n  with SchedulerBinding,\n       GestureBinding,"
  },
  {
    "id" : "7f957da1-c3b1-494b-8399-922cfff94712",
    "prId" : 8691,
    "prUrl" : "https://github.com/flutter/flutter/pull/8691#pullrequestreview-26222776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24a28e78-0fd8-42cf-b12a-76eb14426db2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can you remove the space before the paren here too?",
        "createdAt" : "2017-03-09T22:44:30Z",
        "updatedAt" : "2017-03-09T22:44:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c6a9f463-d1f3-4bdc-9b8e-17c90cebc91a",
        "parentId" : "24a28e78-0fd8-42cf-b12a-76eb14426db2",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Yes. I'll do that in another PR (found 78 occurrences)",
        "createdAt" : "2017-03-10T07:59:21Z",
        "updatedAt" : "2017-03-10T07:59:21Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "90260b61a71a051d04212f3fe9fdf6fdf3163eb0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +203,207 @@  EditableTextState get focusedEditable => _focusedEditable;\n  EditableTextState _focusedEditable;\n  set focusedEditable (EditableTextState value) {\n    _focusedEditable = value..requestKeyboard();\n  }"
  },
  {
    "id" : "bd8ef521-a369-47b2-9639-d0905acfb4b7",
    "prId" : 9332,
    "prUrl" : "https://github.com/flutter/flutter/pull/9332#pullrequestreview-32500729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d78b7ced-4d60-495f-8f17-163b6487a36c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I suppose you could use ..text and ..layout here ...",
        "createdAt" : "2017-04-12T20:24:16Z",
        "updatedAt" : "2017-04-12T20:24:16Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "1102e87f-1f44-4242-8de4-f8420d03ab51",
        "parentId" : "d78b7ced-4d60-495f-8f17-163b6487a36c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Does that work right with `??=`? I want to set the text property even when `_label` is already constructed.",
        "createdAt" : "2017-04-12T20:32:10Z",
        "updatedAt" : "2017-04-12T20:32:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3c9f6de3-e5be-4957-87ed-0a43afe0c2bb",
        "parentId" : "d78b7ced-4d60-495f-8f17-163b6487a36c",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Good point. The entire RHS only executes when the LHS is null, which is not what you wanted.\r\n",
        "createdAt" : "2017-04-12T21:37:24Z",
        "updatedAt" : "2017-04-12T21:37:24Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5596f77348d44eca96a64c480d75b090b8f78e86",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +964,968 @@    }\n    _label ??= new TextPainter(textAlign: TextAlign.left);\n    _label.text = new TextSpan(text: value, style: _labelStyle);\n    _label.layout();\n    if (onNeedPaint != null)"
  },
  {
    "id" : "3b931e0c-0ebd-469c-ac68-c0f171db2f9d",
    "prId" : 9361,
    "prUrl" : "https://github.com/flutter/flutter/pull/9361#pullrequestreview-32715861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52cb4002-d3ed-4697-86f0-6f2405799043",
        "parentId" : null,
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "add a newline at the end of the file",
        "createdAt" : "2017-04-13T19:03:08Z",
        "updatedAt" : "2017-04-13T19:13:43Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      },
      {
        "id" : "6ce5d38e-afaf-4a4a-bc0d-0aa21bfc0458",
        "parentId" : "52cb4002-d3ed-4697-86f0-6f2405799043",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "roger wilco",
        "createdAt" : "2017-04-13T19:13:39Z",
        "updatedAt" : "2017-04-13T19:13:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c61b61cf7f42b7790dcd1d32ee976039afae1fa",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1030,1034 @@    return stack.toTrace().vmTrace;\n  return stack;\n}"
  },
  {
    "id" : "7b86663b-c936-428e-bce3-097ded18f0ef",
    "prId" : 17299,
    "prUrl" : "https://github.com/flutter/flutter/pull/17299#pullrequestreview-118084777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0172aee-441e-41da-a942-7a58cf2850ba",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "assert is redundant here, this code always runs in checked mode.",
        "createdAt" : "2018-05-07T17:46:08Z",
        "updatedAt" : "2018-05-07T17:46:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e59532385c5360988599844115009abdfc46658",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +539,543 @@\n  void _verifyAutoUpdateGoldensUnset(bool valueBeforeTest) {\n    assert(() {\n      if (autoUpdateGoldenFiles != valueBeforeTest) {\n        FlutterError.reportError(new FlutterErrorDetails("
  },
  {
    "id" : "2cc51d9c-5a7d-4e9d-bbe7-89791c37ec83",
    "prId" : 17727,
    "prUrl" : "https://github.com/flutter/flutter/pull/17727#pullrequestreview-121552258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8ab99a3-df21-4c1c-b1c6-1c4a55375091",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "wait... this doesn't actually cause the test to fail, does it?",
        "createdAt" : "2018-05-18T19:23:57Z",
        "updatedAt" : "2018-05-18T19:56:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c499d391-cf2e-4a01-ad55-e1e84f5d2b4a",
        "parentId" : "c8ab99a3-df21-4c1c-b1c6-1c4a55375091",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Great catch - fixed.",
        "createdAt" : "2018-05-18T19:52:35Z",
        "updatedAt" : "2018-05-18T19:56:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "426e14fc2f91ce27fa81efac91afef8716e4eb4d",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +577,581 @@        ));\n      }\n      return true;\n    }());\n  }"
  },
  {
    "id" : "d27d481c-a1ec-4c21-94ea-bc8152c0044f",
    "prId" : 17727,
    "prUrl" : "https://github.com/flutter/flutter/pull/17727#pullrequestreview-127254373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f11e5c5a-29f8-4c67-8e0a-0b54c267abe1",
        "parentId" : null,
        "authorId" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "body" : "Looking at this closely now since I am wiring it up inside Google.\r\n\r\nI assume this initial value is always supposed to be `_defaultTestExceptionReporter` since we want to make sure the reporter is something we control (won't fail the test, will log properly etc).\r\n\r\nIf that's the case, let's test against that instead of saving the pre-test value and also expose the _defaultTestExceptionReporter so reverting the value is easier.\r\n\r\n```dart\r\ntestExceptionReporter = myReporter;\r\nrunTest();\r\ntestExceptionReporter = defaultReporter;\r\n```",
        "createdAt" : "2018-06-07T16:23:21Z",
        "updatedAt" : "2018-06-07T16:23:21Z",
        "lastEditedBy" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "tags" : [
        ]
      },
      {
        "id" : "f6b55155-bfcc-438e-8dda-4bb684b809d6",
        "parentId" : "f11e5c5a-29f8-4c67-8e0a-0b54c267abe1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's possible for the config script to change this to some other value that they want us to use in general. It might not be _defaultTextExceptionReporter.",
        "createdAt" : "2018-06-08T17:44:26Z",
        "updatedAt" : "2018-06-08T17:44:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "426e14fc2f91ce27fa81efac91afef8716e4eb4d",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +566,570 @@        // We can't report this error to their modified reporter because we\n        // can't be guaranteed that their reporter will cause the test to fail.\n        // So we reset the error reporter to its initial value and then report\n        // this error.\n        reportTestException = valueBeforeTest;"
  },
  {
    "id" : "48587ff2-1d48-4ae0-8818-235fe3b1822b",
    "prId" : 17964,
    "prUrl" : "https://github.com/flutter/flutter/pull/17964#pullrequestreview-123852736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c7fc4d9-a73a-4d05-99ff-5871ad80488c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would rather we didn't check in this workaround and instead figured out what was going on and resolved that. This is very low-level code and not fully understanding what's going on here is likely to mean there are unexpected and extremely hard to debug bugs which our users are going to run into.",
        "createdAt" : "2018-05-28T20:48:54Z",
        "updatedAt" : "2018-05-28T20:48:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "584b8397-8d7f-45cd-9419-2cf82b26cc5a",
        "parentId" : "7c7fc4d9-a73a-4d05-99ff-5871ad80488c",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "For the record, the underlying issue is present and consistently causing assertion errors during test runs also without sync-async semantics. See e.g. [this log](https://flutter-dashboard.appspot.com/api/get-log?ownerKey=ahNzfmZsdXR0ZXItZGFzaGJvYXJkclgLEglDaGVja2xpc3QiOGZsdXR0ZXIvZmx1dHRlci9iNmNlZmY1NTJiZTkzZmRhODc0NWNiODFlMTJlMjc2YjNjMzIyZThjDAsSBFRhc2sYgICAgICAhAsM) for a `microbenchmarks` run upon landing https://github.com/flutter/flutter/commit/b6ceff552be93fda8745cb81e12e276b3c322e8c:\r\n```\r\n[   +4 ms] Connected to Moto G 4\r\n[        ] An Observatory debugger and profiler on Moto G 4 is available at http://127.0.0.1:8100/\r\n[        ] For a more detailed help message, press \"h\". To quit, press \"q\".\r\n[+3098 ms] I/flutter (14203): (The following exception is now available via WidgetTester.takeException:)\r\n[   +3 ms] I/flutter (14203): ══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\r\n[        ] I/flutter (14203): The following assertion was thrown running a test:\r\n[        ] I/flutter (14203): Failed assertion: boolean expression must not be null\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): Either the assertion indicates an error in the framework itself, or we should provide substantially\r\n[        ] I/flutter (14203): more information in this error message to help you determine and fix the underlying cause.\r\n[        ] I/flutter (14203): In either case, please report this assertion by filing a bug on GitHub:\r\n[        ] I/flutter (14203):   https://github.com/flutter/flutter/issues/new\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): When the exception was thrown, this was the stack:\r\n[        ] I/flutter (14203): #0      LiveTestWidgetsFlutterBinding.handleDrawFrame (package:flutter_test/src/binding.dart:0)\r\n[        ] I/flutter (14203): #1      _TestWidgetsFlutterBinding&BindingBase&SchedulerBinding._handleDrawFrame (package:flutter/src/scheduler/binding.dart:842)\r\n[        ] I/flutter (14203): #2      main.. (file:///Users/flutter/.cocoon/flutter/dev/benchmarks/microbenchmarks/lib/stocks/layout_bench.dart:51)\r\n[        ] I/flutter (14203): #11     _Timer._runTimers (dart:isolate/runtime/libtimer_impl.dart:382)\r\n[        ] I/flutter (14203): #12     _Timer._handleMessage (dart:isolate/runtime/libtimer_impl.dart:416)\r\n[        ] I/flutter (14203): #13     _RawReceivePortImpl._handleMessage (dart:isolate/runtime/libisolate_patch.dart:165)\r\n[        ] I/flutter (14203): (elided 8 frames from package dart:async)\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): ════════════════════════════════════════════════════════════════════════════════════════════════════\r\n[        ] I/flutter (14203): (If WidgetTester.takeException is called, the above exception will be ignored. If it is not, then the above exception will be dumped when another exception is caught by the framework or when the test ends, whichever happens first, and then the test will fail due to having not caught or expected the exception.)\r\n[        ] I/flutter (14203): ══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\r\n[        ] I/flutter (14203): The following assertion was thrown running a test:\r\n[        ] I/flutter (14203): Failed assertion: boolean expression must not be null\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): Either the assertion indicates an error in the framework itself, or we should provide substantially\r\n[        ] I/flutter (14203): more information in this error message to help you determine and fix the underlying cause.\r\n[        ] I/flutter (14203): In either case, please report this assertion by filing a bug on GitHub:\r\n[        ] I/flutter (14203):   https://github.com/flutter/flutter/issues/new\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): When the exception was thrown, this was the stack:\r\n[        ] I/flutter (14203): #0      LiveTestWidgetsFlutterBinding.handleDrawFrame (package:flutter_test/src/binding.dart:0)\r\n[        ] I/flutter (14203): #1      _TestWidgetsFlutterBinding&BindingBase&SchedulerBinding._handleDrawFrame (package:flutter/src/scheduler/binding.dart:842)\r\n[        ] I/flutter (14203): #2      main.. (file:///Users/flutter/.cocoon/flutter/dev/benchmarks/microbenchmarks/lib/stocks/layout_bench.dart:51)\r\n[        ] I/flutter (14203): #11     _Timer._runTimers (dart:isolate/runtime/libtimer_impl.dart:382)\r\n[        ] I/flutter (14203): #12     _Timer._handleMessage (dart:isolate/runtime/libtimer_impl.dart:416)\r\n[        ] I/flutter (14203): #13     _RawReceivePortImpl._handleMessage (dart:isolate/runtime/libisolate_patch.dart:165)\r\n[        ] I/flutter (14203): (elided 8 frames from package dart:async)\r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): \r\n[        ] I/flutter (14203): ════════════════════════════════════════════════════════════════════════════════════════════════════\r\n[        ] E/flutter (14203): [ERROR:topaz/lib/tonic/logging/dart_error.cc(16)] Unhandled exception:\r\n[        ] E/flutter (14203): Test failed. See exception logs above.\r\n[        ] I/flutter (14203): ================ RESULTS ================\r\n[        ] I/flutter (14203): :::JSON::: {\"stock_layout_iteration\":5645.528205128205}\r\n[        ] I/flutter (14203): ================ FORMATTED ==============\r\nRunning lib/stocks/build_bench.dart\r\n```\r\n",
        "createdAt" : "2018-05-28T21:35:28Z",
        "updatedAt" : "2018-05-28T21:35:29Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      },
      {
        "id" : "13dab9fe-d76f-45a1-b244-dcb01aa11a69",
        "parentId" : "7c7fc4d9-a73a-4d05-99ff-5871ad80488c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Is this the issue @tvolkert fixed recently?",
        "createdAt" : "2018-05-28T22:27:15Z",
        "updatedAt" : "2018-05-28T22:27:16Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e20c9637-0f5a-4dd5-b765-7525e2b9c590",
        "parentId" : "7c7fc4d9-a73a-4d05-99ff-5871ad80488c",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "It's not the same stack trace, and the fix was submitted 6 days ago.  @mravn-google presumably you saw this error against a more recent commit than 6-days-old?",
        "createdAt" : "2018-05-29T04:57:08Z",
        "updatedAt" : "2018-05-29T04:57:08Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "261d1da7-49f3-4006-b5b5-59c20fd3514d",
        "parentId" : "7c7fc4d9-a73a-4d05-99ff-5871ad80488c",
        "authorId" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "body" : "16 hours ago, just before Florian's commit: https://flutter-dashboard.appspot.com/api/get-log?ownerKey=ahNzfmZsdXR0ZXItZGFzaGJvYXJkclgLEglDaGVja2xpc3QiOGZsdXR0ZXIvZmx1dHRlci9iYjg4NzY2NDQ4MWRhNDE5ZTk3NmIwMjNlYTJmNTM5YTdkMDc0M2IyDAsSBFRhc2sYgICAgICAkAsM",
        "createdAt" : "2018-05-29T05:39:41Z",
        "updatedAt" : "2018-05-29T05:39:41Z",
        "lastEditedBy" : "0729198f-c1dc-4ad3-a406-6b1aad4911fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "61dfa283dcdd008688cd1f633937aa9c93fe09f2",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1000,1004 @@    // TODO(floitsch): Remove this line when the spurious calls from the\n    //                 framework don't happen anymore. See\n    //                 https://github.com/flutter/flutter/issues/17963\n    if (_doDrawThisFrame != null)\n      return;"
  },
  {
    "id" : "a4978ac2-1acc-4dcd-9905-11dfef4c42fe",
    "prId" : 17964,
    "prUrl" : "https://github.com/flutter/flutter/pull/17964#pullrequestreview-123808677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c636ffc-5805-437a-86ec-834f4f744375",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto",
        "createdAt" : "2018-05-28T20:49:11Z",
        "updatedAt" : "2018-05-28T20:49:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "61dfa283dcdd008688cd1f633937aa9c93fe09f2",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +1023,1027 @@    //                 https://github.com/flutter/flutter/issues/17963\n    if (_doDrawThisFrame == null)\n      return;\n    assert(_doDrawThisFrame != null);\n    if (_doDrawThisFrame)"
  },
  {
    "id" : "364bc383-49de-4ec0-9511-b5d6bec84d2f",
    "prId" : 17964,
    "prUrl" : "https://github.com/flutter/flutter/pull/17964#pullrequestreview-123808779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60866519-e93a-4fde-b6b6-1080cfed510b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Is this really the cleanest way to solve this? I would hope that a refactor could find a much cleaner solution to this problem.",
        "createdAt" : "2018-05-28T20:50:07Z",
        "updatedAt" : "2018-05-28T20:50:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "61dfa283dcdd008688cd1f633937aa9c93fe09f2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +779,783 @@      // ran the teardown functions, removing the _fakeAsync function.\n      if (_fakeAsync == null)\n        return null;\n      // Resolve interplay between fake async and real async calls.\n      _fakeAsync.flushMicrotasks();"
  },
  {
    "id" : "24972e50-a354-4183-9ac6-7d2b2ecb0bd1",
    "prId" : 18180,
    "prUrl" : "https://github.com/flutter/flutter/pull/18180#pullrequestreview-126059999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62b94d7e-9889-4c48-982a-71e962fd48b7",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "This is slightly ambiguous as to being inclusive vs exclusive - maybe instead:\r\n\r\n```dart\r\n// set in [runTest]; cleared in [postTest]\r\n```",
        "createdAt" : "2018-06-05T15:40:35Z",
        "updatedAt" : "2018-06-05T15:40:35Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "dff44386-460e-46b8-b1d1-e3a25e0bbb93",
        "parentId" : "62b94d7e-9889-4c48-982a-71e962fd48b7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, I wasn't sure how to phrase these (there are several). I will update this in the next PR.",
        "createdAt" : "2018-06-05T16:51:17Z",
        "updatedAt" : "2018-06-05T16:51:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1eb1808586b712d8e0b651ec72f2e6106203c341",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +606,610 @@  }\n\n  FakeAsync _currentFakeAsync; // set from runTest to postTest\n  Completer<void> _pendingAsyncTasks;\n"
  },
  {
    "id" : "aa4ff74e-807d-4956-8463-0aa320fdb3ca",
    "prId" : 18256,
    "prUrl" : "https://github.com/flutter/flutter/pull/18256#pullrequestreview-126989898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c979ec29-b81b-40b9-80c5-9e518957e4c1",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "The advantage of putting them in brackets is that although dartdoc won't hyperlink them, IDEs see it as a reference to the argument, and refactoring tools will automatically rename these references.",
        "createdAt" : "2018-06-07T19:41:36Z",
        "updatedAt" : "2018-06-11T22:45:10Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "1f6172e8-6570-4bfd-84f6-916aa6bab3b2",
        "parentId" : "c979ec29-b81b-40b9-80c5-9e518957e4c1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we need a way to distinguish them. The square brackets will suddenly start hyperlinking if something called \"callback\" is added to the scope, otherwise.",
        "createdAt" : "2018-06-07T23:22:23Z",
        "updatedAt" : "2018-06-11T22:45:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "eeede377-fd60-4dae-a33d-76d8e05dc1da",
        "parentId" : "c979ec29-b81b-40b9-80c5-9e518957e4c1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "see https://github.com/dart-lang/dartdoc/issues/1486",
        "createdAt" : "2018-06-07T23:24:04Z",
        "updatedAt" : "2018-06-11T22:45:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "58814a20ad711f0f8935668104a2ad31c9568dca",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +199,203 @@  Future<Null> pump([ Duration duration, EnginePhase newPhase = EnginePhase.sendSemanticsUpdate ]);\n\n  /// Runs a `callback` that performs real asynchronous work.\n  ///\n  /// This is intended for callers who need to call asynchronous methods where"
  },
  {
    "id" : "ec41d322-9514-4e7d-be6f-b7bb638c91e1",
    "prId" : 18454,
    "prUrl" : "https://github.com/flutter/flutter/pull/18454#pullrequestreview-129004079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc0d113-ec61-4202-b533-40a424ea4440",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah this is much better, thanks.",
        "createdAt" : "2018-06-14T23:30:16Z",
        "updatedAt" : "2018-06-18T12:21:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5de058f75a626250cc0c9a09cbdc71141bfc1527",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +865,869 @@        fakeAsync.flushMicrotasks();\n      }\n      return resultFuture;\n    });\n  }"
  },
  {
    "id" : "a7c0932d-111b-4f91-af8b-bee017da1361",
    "prId" : 18454,
    "prUrl" : "https://github.com/flutter/flutter/pull/18454#pullrequestreview-129278003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45752370-199d-4d5d-8017-7d6090d05a01",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I don't understand this change. What does it even mean to have an async barrier before the test runs? The whole point here is to catch the case of people having guarded calls that are still open after the test has returned.\r\n\r\nMaybe the line should be removed and moved to the end of runTest?",
        "createdAt" : "2018-06-15T17:43:32Z",
        "updatedAt" : "2018-06-18T12:21:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "48fc56ab-6a5c-485a-9b44-4b80b403639a",
        "parentId" : "45752370-199d-4d5d-8017-7d6090d05a01",
        "authorId" : "737a0826-b675-46cd-a553-2ca54d538080",
        "body" : "done.",
        "createdAt" : "2018-06-15T18:39:20Z",
        "updatedAt" : "2018-06-18T12:21:10Z",
        "lastEditedBy" : "737a0826-b675-46cd-a553-2ca54d538080",
        "tags" : [
        ]
      }
    ],
    "commit" : "5de058f75a626250cc0c9a09cbdc71141bfc1527",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +504,508 @@    timeout?.catchError(handleUncaughtError);\n    return testCompleter.future;\n  }\n\n  Future<Null> _runTestBody(Future<Null> testBody(), VoidCallback invariantTester) async {"
  },
  {
    "id" : "6ae50d51-5b89-4ebe-9cd5-4426d692b5c3",
    "prId" : 18454,
    "prUrl" : "https://github.com/flutter/flutter/pull/18454#pullrequestreview-129293927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40b12e7d-d07d-4c95-be4d-e71098a8ae63",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "looks like we actually already have one here, so it's not needed after all (see line 519)",
        "createdAt" : "2018-06-15T19:38:54Z",
        "updatedAt" : "2018-06-18T12:21:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5de058f75a626250cc0c9a09cbdc71141bfc1527",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +532,536 @@\n    assert(inTest);\n    asyncBarrier(); // When using AutomatedTestWidgetsFlutterBinding, this flushes the microtasks.\n    return null;\n  }"
  },
  {
    "id" : "a65e7e6e-5b79-4c34-969b-d3af3878da6f",
    "prId" : 20354,
    "prUrl" : "https://github.com/flutter/flutter/pull/20354#pullrequestreview-161442174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ac45a94-a8f1-4af5-a2a0-a26488ef6f28",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Apparently docs aren't inherited from mixins...\r\n\r\nhttps://docs.flutter.io/flutter/flutter_test/TestWidgetsFlutterBinding/disableAnimations.html",
        "createdAt" : "2018-10-04T04:03:16Z",
        "updatedAt" : "2018-10-04T04:03:16Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "32573088-d727-4952-98aa-74cec749328b",
        "parentId" : "3ac45a94-a8f1-4af5-a2a0-a26488ef6f28",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Tested locally, and it's not about mixins - it's about overriding a getter with a member variable.  Filed https://github.com/dart-lang/dartdoc/issues/1779",
        "createdAt" : "2018-10-04T04:17:55Z",
        "updatedAt" : "2018-10-04T04:17:55Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f518e0854caf97c99b451ee6b9a16ddee062d1de",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +130,134 @@\n  @override\n  bool disableAnimations = false;\n\n  /// Creates and initializes the binding. This function is"
  },
  {
    "id" : "26b84ff4-301c-49c8-a624-d11d141b75b7",
    "prId" : 27197,
    "prUrl" : "https://github.com/flutter/flutter/pull/27197#pullrequestreview-197759902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51f086e8-28fd-4505-8015-a1f336015586",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "We probably want to change the base class to default to 1000.  /cc @Hixie ",
        "createdAt" : "2019-01-28T22:50:53Z",
        "updatedAt" : "2019-01-28T22:50:53Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "e6632df6-7b5e-4c0b-bdaf-726f4a39aca0",
        "parentId" : "51f086e8-28fd-4505-8015-a1f336015586",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Looks like this didn't get updated before merge.",
        "createdAt" : "2019-01-29T19:52:02Z",
        "updatedAt" : "2019-01-29T19:52:02Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "4fd62f43-d8d2-46ee-adce-bd635fc4d8b6",
        "parentId" : "51f086e8-28fd-4505-8015-a1f336015586",
        "authorId" : "00a56e31-8ca4-49a5-86b1-d3683ca7c904",
        "body" : "I'm sorry, I did not recognize that this is something that should be updated.\r\nDo you want me to revert this PR?\r\nOr send another one that updates both base class, and this to `1000`?",
        "createdAt" : "2019-01-29T19:55:16Z",
        "updatedAt" : "2019-01-29T19:55:16Z",
        "lastEditedBy" : "00a56e31-8ca4-49a5-86b1-d3683ca7c904",
        "tags" : [
        ]
      },
      {
        "id" : "1a442d42-16e5-488a-8995-162dea6f5e00",
        "parentId" : "51f086e8-28fd-4505-8015-a1f336015586",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "I think we should update both base class and this to be 1000 - follow-up PR is fine.",
        "createdAt" : "2019-01-29T20:09:56Z",
        "updatedAt" : "2019-01-29T20:09:56Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a277c1135be8176a4b9b1d2e2d06c48b8cdbf9b6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +721,725 @@  @override\n  Future<T> runAsync<T>(Future<T> callback(), {\n    Duration additionalTime = const Duration(milliseconds: 250),\n  }) {\n    assert(additionalTime != null);"
  },
  {
    "id" : "069b48f5-115e-42ab-b666-9425269f51ec",
    "prId" : 31207,
    "prUrl" : "https://github.com/flutter/flutter/pull/31207#pullrequestreview-228409370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff68cdfc-ead0-44f1-9254-06db35a8a584",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Why not use the `setMethodCallHandler` method, then it wouldn't be a breaking change as the mocks would still take precedence.",
        "createdAt" : "2019-04-18T17:00:55Z",
        "updatedAt" : "2019-04-18T20:51:04Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "c2d5aade-5214-4cf6-ba09-012881a49cd3",
        "parentId" : "ff68cdfc-ead0-44f1-9254-06db35a8a584",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If I understand correctly, settMockMessageHandler is setting _mockHandlers, which is used for outgoing message. setMethodCallHandler is setting _handlers, which is for in coming message. The assets request is outgoing message. I think setting the _handlers will not be able to intercept the request?",
        "createdAt" : "2019-04-18T17:20:43Z",
        "updatedAt" : "2019-04-18T20:51:04Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "97c70932-d547-44ac-9341-9b56b7cf05fe",
        "parentId" : "ff68cdfc-ead0-44f1-9254-06db35a8a584",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Ahh good point, my bad!",
        "createdAt" : "2019-04-18T17:22:52Z",
        "updatedAt" : "2019-04-18T20:51:04Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d01b397a5d3dee78fffcc6b6156a78afed8d33f1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +748,752 @@    final String assetFolderPath = Platform.environment['UNIT_TEST_ASSETS'];\n    _ensureInitialized(assetFolderPath);\n    BinaryMessages.setMockMessageHandler('flutter/assets', (ByteData message) {\n      final String key = utf8.decode(message.buffer.asUint8List());\n      if (_allowedKeys.contains(key)) {"
  },
  {
    "id" : "644c055b-d0a9-4b07-867c-a035615f8cf8",
    "prId" : 34301,
    "prUrl" : "https://github.com/flutter/flutter/pull/34301#pullrequestreview-254296136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0b05e81-a5ae-4904-9d94-fd3401cc7ea3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @jonahwilliams / @goderbauer at some point we should factor out these isBrowser checks into some logic in foundation.",
        "createdAt" : "2019-06-25T21:38:10Z",
        "updatedAt" : "2019-06-27T18:43:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "3dbbb756-1c98-4cbb-8643-3819a93119f4",
        "parentId" : "a0b05e81-a5ae-4904-9d94-fd3401cc7ea3",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I have a plan i'm working on to address this as well as https://github.com/flutter/flutter/issues/23122. This requires changes in the build system that haven't quite landed yet, will share a short document when it is ready",
        "createdAt" : "2019-06-25T22:08:40Z",
        "updatedAt" : "2019-06-27T18:43:17Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1e52f8c93b8ec6735e6536ae531abc7033912ca",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +196,200 @@        // Browser environments do not support the LiveTestWidgetsFlutterBinding.\n        AutomatedTestWidgetsFlutterBinding();\n      } else if (environment.containsKey('FLUTTER_TEST') && environment['FLUTTER_TEST'] != 'false') {\n        AutomatedTestWidgetsFlutterBinding();\n      } else {"
  },
  {
    "id" : "3193def3-d24b-4ea7-b90a-06bb89ab3c20",
    "prId" : 35991,
    "prUrl" : "https://github.com/flutter/flutter/pull/35991#pullrequestreview-260851474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8500d5be-2313-4496-8ef0-605962cc3245",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Add a short comment here explaining the issue this solves",
        "createdAt" : "2019-07-11T17:35:51Z",
        "updatedAt" : "2019-07-15T16:32:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a993ff037221fc3ace013f3e4c73ea2ec1790cce",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +812,816 @@    _ensureInitialized(assetFolderPath);\n\n    final String prefix =  'packages/${Platform.environment['APP_NAME']}/';\n\n    if (_allowedAssetKeys.isNotEmpty) {"
  },
  {
    "id" : "4278d93f-7eec-4c3c-889d-4a03a1e1999f",
    "prId" : 39196,
    "prUrl" : "https://github.com/flutter/flutter/pull/39196#pullrequestreview-279828001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea11922c-1319-44f7-b01a-93a53bbb4db1",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why do this here as well? I thought you only need it for driver tests?",
        "createdAt" : "2019-08-26T18:22:53Z",
        "updatedAt" : "2019-08-27T02:48:27Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5ef5b444-b822-4379-8323-00efe610310b",
        "parentId" : "ea11922c-1319-44f7-b01a-93a53bbb4db1",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Right, now we only need it for driver tests.\r\n\r\nInitially, it was because this made it much easier for testing this APIs using widget tester. Otherwise, we have to write on-device tests to test this wait condition. Secondly, as Collin/Tong are working on making widget tester work on device, I think this change will actually be beneficial to their work as well. Thus, this change. LMK what you think.",
        "createdAt" : "2019-08-26T20:46:32Z",
        "updatedAt" : "2019-08-27T02:48:27Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "057ff81f97dd0a6f57e1874455daf25c5fe14951",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +283,287 @@\n  @override\n  BinaryMessenger createBinaryMessenger() {\n    return TestDefaultBinaryMessenger(super.createBinaryMessenger());\n  }"
  },
  {
    "id" : "9925a91f-1f92-4235-acdf-1935cc051405",
    "prId" : 39196,
    "prUrl" : "https://github.com/flutter/flutter/pull/39196#pullrequestreview-279902360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "008eb67d-7030-4868-afff-24bb56d6edbe",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "switch these two lines around? When reading the code it makes more sense to learn about the add before removing it.",
        "createdAt" : "2019-08-27T00:30:03Z",
        "updatedAt" : "2019-08-27T02:48:27Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "057ff81f97dd0a6f57e1874455daf25c5fe14951",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +107,111 @@    // completes.\n    if (resultFuture != null) {\n      _pendingMessages.add(resultFuture);\n      resultFuture.whenComplete(() => _pendingMessages.remove(resultFuture));\n    }"
  },
  {
    "id" : "80feaa96-7514-4228-b1ad-bd9b40a1c851",
    "prId" : 39535,
    "prUrl" : "https://github.com/flutter/flutter/pull/39535#pullrequestreview-283969752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b0f9765-77eb-41ea-947b-2d5b6c486a90",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe assert that window.onBeginFrame and window.onDrawFrame are null...",
        "createdAt" : "2019-09-04T18:03:58Z",
        "updatedAt" : "2019-09-05T00:44:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9d11cfd3-b703-4b20-83c7-623475a76c57",
        "parentId" : "3b0f9765-77eb-41ea-947b-2d5b6c486a90",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done.",
        "createdAt" : "2019-09-05T00:47:44Z",
        "updatedAt" : "2019-09-05T00:47:44Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7b84a4f1739afeaa158a18d8a29c0aa746870d7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +979,983 @@  @override\n  void ensureFrameCallbacksRegistered() {\n    // Leave Window alone, do nothing.\n    assert(window.onDrawFrame == null);\n    assert(window.onBeginFrame == null);"
  },
  {
    "id" : "2ac058c5-6fd4-4e79-8ebb-c85656ee2cfe",
    "prId" : 58210,
    "prUrl" : "https://github.com/flutter/flutter/pull/58210#pullrequestreview-421158544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b9fdb9d-d812-4d1d-9dbb-36216ab9c365",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "should this be inside the if case?",
        "createdAt" : "2020-05-29T17:01:00Z",
        "updatedAt" : "2020-05-29T17:10:44Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "e3f94c3b-add2-4e13-b7fd-442f5de6bf5c",
        "parentId" : "0b9fdb9d-d812-4d1d-9dbb-36216ab9c365",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'd rather not change this to be nullable - creating it does not automatically alter any global state (until `register` is called).",
        "createdAt" : "2020-05-29T17:03:59Z",
        "updatedAt" : "2020-05-29T17:10:44Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "a7cdee3d-9663-4963-9817-ae737f7d8386",
        "parentId" : "0b9fdb9d-d812-4d1d-9dbb-36216ab9c365",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "And I've updated TestTextInput in another patch to assert that it's registered for any method that wouldn't make sense in an unregistered context.",
        "createdAt" : "2020-05-29T17:29:10Z",
        "updatedAt" : "2020-05-29T17:29:11Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "42d9b0d2-18ed-4279-8631-967e0e7c86c1",
        "parentId" : "0b9fdb9d-d812-4d1d-9dbb-36216ab9c365",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "sgtm",
        "createdAt" : "2020-05-29T17:41:05Z",
        "updatedAt" : "2020-05-29T17:41:05Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "f051fcedfdc676cc3888ee3a6c77126afb07b65a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +294,298 @@      binding.setupHttpOverrides();\n    }\n    _testTextInput = TestTextInput(onCleared: _resetFocusedEditable);\n    if (registerTestTextInput) {\n      _testTextInput.register();"
  },
  {
    "id" : "f791dda5-9132-4a0d-82bd-c03da64a1caf",
    "prId" : 60734,
    "prUrl" : "https://github.com/flutter/flutter/pull/60734#pullrequestreview-445175107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660868dd-534e-46be-bcd6-36566a2e6a11",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Would `{TestBindingEventSource source,}` instead of `{TestBindingEventSource source = TestBindingEventSource.device,}` have the same effect here and reduce the confusion?",
        "createdAt" : "2020-07-07T19:52:16Z",
        "updatedAt" : "2020-07-08T20:49:00Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "eabd8b04-f9f7-4b2c-8c9d-3e05b3243c55",
        "parentId" : "660868dd-534e-46be-bcd6-36566a2e6a11",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "I think so. @Hixie ",
        "createdAt" : "2020-07-07T21:13:27Z",
        "updatedAt" : "2020-07-08T20:49:00Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      },
      {
        "id" : "65b356c7-b264-4a1a-b926-233043b83d13",
        "parentId" : "660868dd-534e-46be-bcd6-36566a2e6a11",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "I'm guessing for an `enum`, leaving it `null` is not preferred. ",
        "createdAt" : "2020-07-08T22:37:26Z",
        "updatedAt" : "2020-07-08T22:37:26Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      }
    ],
    "commit" : "87debf6c37465c6aaef69aa7099a3fc6aedb3408",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +466,470 @@    PointerEvent event,\n    HitTestResult hitTestResult, {\n    TestBindingEventSource source = TestBindingEventSource.device,\n  }) {\n    // This override disables calling this method from base class"
  },
  {
    "id" : "91ffdebf-7198-4cf7-8ebb-fa5062f87b13",
    "prId" : 60796,
    "prUrl" : "https://github.com/flutter/flutter/pull/60796#pullrequestreview-444990613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f9d774a-92ed-4ee9-af29-ec2fc5ebba83",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This isn't so much \"Execute a callback in a later time for the binding\" so much as \"advance the clock and execute the callback\". Why not just have people use `pump`, which also advances the clock?",
        "createdAt" : "2020-07-08T17:30:50Z",
        "updatedAt" : "2020-07-10T21:02:36Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "00e1dcaa-5dec-4692-8dec-4bc861062818",
        "parentId" : "4f9d774a-92ed-4ee9-af29-ec2fc5ebba83",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "The idea here is that the same thing, we do it differently for different bindings: for Live binding we wait for a real period of time, but for the binding with a fake clock, we add time and then perform the callback. The `addTime` method only add to timeout but don't add the fake clock time, which influence for example animation. The pump schedule a frame which is not preferred here. ",
        "createdAt" : "2020-07-08T17:39:47Z",
        "updatedAt" : "2020-07-10T21:02:36Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      }
    ],
    "commit" : "062c927ca4a3473a6f861e8a2d2d2218d37cadef",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1127,1131 @@    _currentFakeAsync.elapse(duration);\n    return Future<void>.value();\n  }\n\n  @override"
  },
  {
    "id" : "ab7c1449-32a3-4879-8763-317a7eb5b946",
    "prId" : 61773,
    "prUrl" : "https://github.com/flutter/flutter/pull/61773#pullrequestreview-458022655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f57bcc1-8e27-4453-ac14-f933dfea33f7",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Nit: `triggered` -> `[pump]ed`?",
        "createdAt" : "2020-07-24T23:30:50Z",
        "updatedAt" : "2020-07-30T02:05:15Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "3ebc5795-c8ad-4ffa-a195-d13ce1066d4e",
        "parentId" : "1f57bcc1-8e27-4453-ac14-f933dfea33f7",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "I'm not sure I should use `pump` here because it's not only from pump but also from animation. I'll leave this to @sfshaza2 for language advice. ",
        "createdAt" : "2020-07-25T00:47:26Z",
        "updatedAt" : "2020-07-30T02:05:15Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      },
      {
        "id" : "8d76651f-2422-47d4-893b-bab9d870d8a1",
        "parentId" : "1f57bcc1-8e27-4453-ac14-f933dfea33f7",
        "authorId" : "f8f5fe34-80aa-472a-a973-1f0b10e6c721",
        "body" : "Perhaps:\r\n```\r\nThis allows all frame requests from the engine to be serviced (including frame\r\nrequests that are artificially triggered), but...\r\n```\r\n\r\nI wouldn't use pumped instead of triggered.",
        "createdAt" : "2020-07-30T00:27:49Z",
        "updatedAt" : "2020-07-30T02:05:15Z",
        "lastEditedBy" : "f8f5fe34-80aa-472a-a973-1f0b10e6c721",
        "tags" : [
        ]
      },
      {
        "id" : "cba61e92-b6d7-452f-9c5b-4fbc0db641ed",
        "parentId" : "1f57bcc1-8e27-4453-ac14-f933dfea33f7",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "I'll keep the original version because `artificially triggered` is from test file, not the engine. ",
        "createdAt" : "2020-07-30T02:06:04Z",
        "updatedAt" : "2020-07-30T02:06:04Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      }
    ],
    "commit" : "2da206b49bc85037f8d58d137f65af8ddb5c99de",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +1286,1290 @@  ///\n  /// This allows all frame requests from the engine to be serviced, and allows\n  /// all frame requests that are artificially triggered to be serviced, but\n  /// ignores [scheduleFrame] requests from the framework.\n  /// Therefore animation won't run for this mode because the framework"
  },
  {
    "id" : "7043693e-f656-487c-b91e-5ed12310f9db",
    "prId" : 61872,
    "prUrl" : "https://github.com/flutter/flutter/pull/61872#pullrequestreview-451866265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ef36969-c385-49dd-a244-ce628c0884ae",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "By having `_handleViewNeedsPaint` inside the `if else if` branch, it seems that `_handleViewNeedsPaint` won't be called for hover events now but it was called before this change? I wonder if that's intended, and whether hover should trigger some painting.",
        "createdAt" : "2020-07-20T17:42:31Z",
        "updatedAt" : "2020-07-20T20:02:40Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "7ec90779-af79-4078-bd61-5335cb5f87a6",
        "parentId" : "0ef36969-c385-49dd-a244-ce628c0884ae",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "It's intended, because \r\n1. the original version, if I neglect the problematic `assert` sentence and considered it an `if`, basically doesn't draw hover event;\r\n2. If we are to draw hover event and scroll event, I would think a better practice is to have a separate list/map for that and keep the original one just for down event, because it's more meaningful to plot them in a different way.  ",
        "createdAt" : "2020-07-20T17:56:54Z",
        "updatedAt" : "2020-07-20T20:02:41Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      },
      {
        "id" : "aee0d352-3e82-422c-a865-54a7397574e9",
        "parentId" : "0ef36969-c385-49dd-a244-ce628c0884ae",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "To paint hover event, would probably better to be a TODO, if we decide to paint it. ",
        "createdAt" : "2020-07-20T17:57:40Z",
        "updatedAt" : "2020-07-20T20:02:41Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      },
      {
        "id" : "09fbc6e6-1085-4721-877e-065c5f0166b0",
        "parentId" : "0ef36969-c385-49dd-a244-ce628c0884ae",
        "authorId" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "body" : "To clarify, `paint` method for this class is only painting `_pointers` data. So if all events are down-move-up, than it always needs paint. But for other events, it originally should violate the assert, and nothing will be added to `_pointers`, so it's a fake (literally, not in the test sense) `_handleViewNeedsPaint`.",
        "createdAt" : "2020-07-20T18:35:46Z",
        "updatedAt" : "2020-07-20T20:02:41Z",
        "lastEditedBy" : "f76bcc8a-9965-41ac-ba63-53a03a848567",
        "tags" : [
        ]
      },
      {
        "id" : "703cdb32-966a-4892-840e-703fe4cee822",
        "parentId" : "0ef36969-c385-49dd-a244-ce628c0884ae",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Discussed with @CareF offline. This `_handleViewNeedsPaint` only triggers repaint of the `_pointers` positions which do not include non-down (e.g., hover) pointers. So we don't have to call it if it's not down or already tracked in `_pointers`. The repaint of the test app should be driven by `super.dispatchEvent` and that should be the place where the test app responds to hover repaint.",
        "createdAt" : "2020-07-20T18:44:04Z",
        "updatedAt" : "2020-07-20T20:02:41Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "acc710bf6e5be0a81fc2f2624b32e0212bda9127",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1493,1497 @@            event.position,\n          );\n          _handleViewNeedsPaint();\n        }\n        super.dispatchEvent(event, hitTestResult, source: source);"
  },
  {
    "id" : "09df6cc0-0744-4c27-8e33-36d4f2de3c09",
    "prId" : 64846,
    "prUrl" : "https://github.com/flutter/flutter/pull/64846#pullrequestreview-488135796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90e5752f-4bcf-4405-b1ee-83afa2940219",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Looks like this property (and the logic for setting/retrieving it) can be moved into the `LiveTestWidgetsFlutterBinding` class since it is only needed there?",
        "createdAt" : "2020-09-14T17:25:26Z",
        "updatedAt" : "2020-09-15T18:33:47Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "58798cbc-c90e-4a85-93b0-5634d68e0741",
        "parentId" : "90e5752f-4bcf-4405-b1ee-83afa2940219",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Sadly not. `WidgetTester` calls the `handlePointerEvent` with source but `WidgetTester.binding` is of type `TestWidgetFlutterBinding`, despite its concrete type being `LiveTestWidgetsFlutterBinding`.",
        "createdAt" : "2020-09-14T20:57:49Z",
        "updatedAt" : "2020-09-15T18:33:47Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "17ea6e834fe7e9d23945c74d116e8e99ad3dd535",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +495,499 @@  // [handlePointerEvent] and can be used in the immediate enclosing\n  // [dispatchEvent].\n  TestBindingEventSource _pointerEventSource = TestBindingEventSource.device;\n\n  @override"
  }
]