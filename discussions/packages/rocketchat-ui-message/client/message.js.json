[
  {
    "id" : "d9529ba9-69b8-438a-8871-c8844d38f86c",
    "prId" : 10519,
    "prUrl" : "https://github.com/RocketChat/Rocket.Chat/pull/10519#pullrequestreview-160824634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fb489fd-68e9-467e-877d-a70a089a5f35",
        "parentId" : null,
        "authorId" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "body" : "@ggazzo Do you know if Meteor provides a public method to access this property?",
        "createdAt" : "2018-10-02T17:02:17Z",
        "updatedAt" : "2018-10-15T17:05:22Z",
        "lastEditedBy" : "a3b8456e-b33e-4ac5-ab31-e5caf329a69a",
        "tags" : [
        ]
      }
    ],
    "commit" : "85336fe66449a57086a14abd168ef36362298646",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +390,394 @@\nTemplate.message.onViewRendered = function(context) {\n\treturn this._domrange.onAttached((domRange) => {\n\t\tif (context.file && context.file.type === 'application/pdf') {\n\t\t\tMeteor.defer(() => { renderPdfToCanvas(context.file._id, context.attachments[0].title_link); });"
  },
  {
    "id" : "f14d55f3-3e33-4255-b5da-7009db6102b3",
    "prId" : 10472,
    "prUrl" : "https://github.com/RocketChat/Rocket.Chat/pull/10472#pullrequestreview-113321285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7831ed5-372c-465c-ae21-14c39a75a2fe",
        "parentId" : null,
        "authorId" : "97008387-ed37-4abe-bd0a-d59f54ba177a",
        "body" : "My biggest concern here is performance. If we are creating a new function for every message, then I can imagine the memory level just went up a little bit more...",
        "createdAt" : "2018-04-18T03:22:41Z",
        "updatedAt" : "2018-04-18T03:22:42Z",
        "lastEditedBy" : "97008387-ed37-4abe-bd0a-d59f54ba177a",
        "tags" : [
        ]
      },
      {
        "id" : "1c7ad990-9ddf-437a-80a4-41ee683283b9",
        "parentId" : "c7831ed5-372c-465c-ae21-14c39a75a2fe",
        "authorId" : "b0f2ef3c-69bf-4ddc-bb5c-b6c482f8d1c8",
        "body" : "Makes sense, can we have some monitoring on unstable and develop when this hits? @geekgonecrazy ",
        "createdAt" : "2018-04-18T13:32:35Z",
        "updatedAt" : "2018-04-18T13:32:35Z",
        "lastEditedBy" : "b0f2ef3c-69bf-4ddc-bb5c-b6c482f8d1c8",
        "tags" : [
        ]
      },
      {
        "id" : "157933e7-7cbc-4e48-b922-31cbb513609c",
        "parentId" : "c7831ed5-372c-465c-ae21-14c39a75a2fe",
        "authorId" : "b0f2ef3c-69bf-4ddc-bb5c-b6c482f8d1c8",
        "body" : "@graywolf336 do you think simply moving the function to outer scope would help?",
        "createdAt" : "2018-04-18T13:32:52Z",
        "updatedAt" : "2018-04-18T13:32:52Z",
        "lastEditedBy" : "b0f2ef3c-69bf-4ddc-bb5c-b6c482f8d1c8",
        "tags" : [
        ]
      },
      {
        "id" : "cabc00d4-9f1c-47ed-90bb-27df62e6a96c",
        "parentId" : "c7831ed5-372c-465c-ae21-14c39a75a2fe",
        "authorId" : "97008387-ed37-4abe-bd0a-d59f54ba177a",
        "body" : "I'm not entirely sure about that, as I don't know if it would be created everytime the template is initialized. That would be something to test.",
        "createdAt" : "2018-04-18T13:35:35Z",
        "updatedAt" : "2018-04-18T13:35:35Z",
        "lastEditedBy" : "97008387-ed37-4abe-bd0a-d59f54ba177a",
        "tags" : [
        ]
      },
      {
        "id" : "655aa97c-455c-4502-915c-3fe443badb82",
        "parentId" : "c7831ed5-372c-465c-ae21-14c39a75a2fe",
        "authorId" : "61ddb048-36d3-4039-ab51-6db005c8c855",
        "body" : "I don't know how garbage collector works for these lambda functions used/created on closed contexts.. if that is a real problem or not..\r\n\r\nwhat I know is moving it to file's root scope will define it once and will not run every time the template is initialized.",
        "createdAt" : "2018-04-18T17:40:06Z",
        "updatedAt" : "2018-04-18T17:40:06Z",
        "lastEditedBy" : "61ddb048-36d3-4039-ab51-6db005c8c855",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a7388ddbd9a59a751a3ae7c902d26c8438e32fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +340,344 @@\t\tconst currentNode = domRange.lastNode();\n\t\tconst currentDataset = currentNode.dataset;\n\t\tconst getPreviousSentMessage = (currentNode) => {\n\t\t\tif ($(currentNode).hasClass('temp')) {\n\t\t\t\treturn currentNode.previousElementSibling;"
  }
]