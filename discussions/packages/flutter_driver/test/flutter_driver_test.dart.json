[
  {
    "id" : "9d153d9a-3a39-4f4c-a61c-e463612ed2ed",
    "prId" : 2120,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d3276a4-3257-4956-bacc-a14446365d9a",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Do we have an explicit dep on `quiver` in the pubspec?\n",
        "createdAt" : "2016-02-24T10:56:00Z",
        "updatedAt" : "2016-02-24T18:01:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "ccf355bd-2953-417f-90e2-333158f4f5d7",
        "parentId" : "9d3276a4-3257-4956-bacc-a14446365d9a",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done. Also did a general clean-up of `pubspec.yaml` (removed obsolete dep on `logging`, sorted alphabetically).\n",
        "createdAt" : "2016-02-24T18:01:23Z",
        "updatedAt" : "2016-02-24T18:01:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f39703759ae8c8a3169d60580940fda1fa990f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +11,15 @@import 'package:json_rpc_2/json_rpc_2.dart' as rpc;\nimport 'package:mockito/mockito.dart';\nimport 'package:quiver/testing/async.dart';\nimport 'package:vm_service_client/vm_service_client.dart';\n"
  },
  {
    "id" : "65291c94-bd9a-425a-95ba-4929ae1805c8",
    "prId" : 2650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac20dcb-5940-4361-a948-1acaa008cab1",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I thought we relied on generic method here, no?\n",
        "createdAt" : "2016-03-14T17:18:28Z",
        "updatedAt" : "2016-03-14T17:33:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "97be4ecc-b1d6-4fb8-8160-7fc1b7a3b548",
        "parentId" : "2ac20dcb-5940-4361-a948-1acaa008cab1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, that's blocked on https://github.com/dart-lang/linter/issues/200 though.\n",
        "createdAt" : "2016-03-14T17:29:33Z",
        "updatedAt" : "2016-03-14T17:33:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "62f3124e66580feebd44abd0836a68791c68ecba",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +23,27 @@\n    void expectLogContains(String message) {\n      expect(log.map((LogRecord r) => '$r'), anyElement(contains(message)));\n    }\n"
  },
  {
    "id" : "19b67a7e-1aaa-4c7b-be4c-794cd6d57fd2",
    "prId" : 2650,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13323dfc-dec5-4ab3-96e0-e112ef7e5782",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This extra type ceremony is quite useless in this case. The original code was more readable. I think we should relax our rules for some things.\n",
        "createdAt" : "2016-03-14T17:25:25Z",
        "updatedAt" : "2016-03-14T17:33:02Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "5da6d8c1-dd58-472b-9928-903d6bdd95a1",
        "parentId" : "13323dfc-dec5-4ab3-96e0-e112ef7e5782",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I agree that JSON kind of makes this a mess, but in general doing this caught several cases where we were doing pointless work (e.g. returning values that were then ignored) so I'm not at all convinced that the cost is too high. I think the real problem is that we should try to turn the JSON data into structured data much more aggressively rather than shuttling the untyped JSON data around in futures and streams.\n",
        "createdAt" : "2016-03-14T17:31:34Z",
        "updatedAt" : "2016-03-14T17:33:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8bf81b2a-74f9-4687-8af4-96fdc352e0d0",
        "parentId" : "13323dfc-dec5-4ab3-96e0-e112ef7e5782",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "`flutter_driver` actually does that, which is what this test is testing. The VM service gives us a JSON blob and then that blob is deserialized into structured data. The mock for the VM service, however, has to deal with JSON blobs.\n\nI'm not strongly against adding types. Special cases means more complexity in tooling. I'm guessing the linter is much simpler if it has to enforce the same rule in all code.\n",
        "createdAt" : "2016-03-14T17:35:34Z",
        "updatedAt" : "2016-03-14T17:35:34Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "aaceadd6-7144-471a-960f-2896edfd5405",
        "parentId" : "13323dfc-dec5-4ab3-96e0-e112ef7e5782",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, tests are always a tricky case.\n\nI was referring more generally to the code that has futures and streams that pass `Map<String, dynamic>s`. It felt like I was adding `<String, dynamic>` annotations to a lot of things, and in many cases it was very unclear what exactly I should be adding; I'm sure I got some wrong. (Bug https://github.com/dart-lang/sdk/issues/25989 didn't help.) Maybe I misunderstood what the code was doing. I would have felt better if all the code that involved \"dynamic\" had been synchronous and in one place, generating strongly-typed data structures. I don't think we should ever have a Future or Map that passes a `Map<String, dynamic>`, it's too bug-prone (it basically entirely side-steps the static checker).\n",
        "createdAt" : "2016-03-14T17:43:48Z",
        "updatedAt" : "2016-03-14T17:43:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "62f3124e66580feebd44abd0836a68791c68ecba",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +36,40 @@      when(mockIsolate.loadRunnable()).thenReturn(mockIsolate);\n      when(mockIsolate.invokeExtension(any, any))\n          .thenReturn(new Future<Map<String, dynamic>>.value(<String, String>{'status': 'ok'}));\n      vmServiceConnectFunction = (String url) => new Future<VMServiceClient>.value(mockClient);\n    });"
  },
  {
    "id" : "e8815eb1-0bb7-44c1-b7f2-7c9401505dee",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327140093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "554969f9-e7ed-4a7b-93f4-64087a058d89",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Do setup in a setUp method",
        "createdAt" : "2019-12-04T20:43:42Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +699,703 @@\n    test('closes connection', () async {\n      when(mockConnection.close()).thenAnswer((Invocation invocation) => Future<dynamic>.value(null));\n      await driver.close();\n    });"
  },
  {
    "id" : "6d51524b-40f4-4e1b-b87b-74adddfd30ef",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327140429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11470153-3890-4da9-b43c-5ea0233a50ed",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "nit: use `//`",
        "createdAt" : "2019-12-04T20:44:17Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 451,
    "diffHunk" : "@@ -1,1 +1049,1053 @@}\n\n/// This function will verify the format of the script\n/// and return the actual script.\n/// script will be in the following format:"
  },
  {
    "id" : "e650fd15-d2ef-4c4d-8da1-177d29afb169",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327140621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2474d1eb-7883-4611-9bac-7d8e7593bd40",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "You should also check the Unimplemented methods, and the chrome only implemenations",
        "createdAt" : "2019-12-04T20:44:37Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 448,
    "diffHunk" : "@@ -1,1 +1046,1050 @@          throwsA(isInstanceOf<UnimplementedError>()));\n    });\n  });\n}\n"
  }
]