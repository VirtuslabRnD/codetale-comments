[
  {
    "id" : "cb088851-28a7-496f-907d-7f37cdc07d49",
    "prId" : 19047,
    "prUrl" : "https://github.com/flutter/flutter/pull/19047#pullrequestreview-135589090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e4dbebc-07ac-4b46-932d-cf58c3f87e64",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Just to be sure: It's guaranteed that drive tests always run with asserts enabled? Otherwise debugSemantics would be null even when semantics are enabled.",
        "createdAt" : "2018-07-09T17:49:18Z",
        "updatedAt" : "2018-07-09T20:55:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f95953a7-0649-4181-b511-621bb25f989b",
        "parentId" : "4e4dbebc-07ac-4b46-932d-cf58c3f87e64",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Not always (microbenchmarks), but for these integration tests we'll always be using a debug build.  Added doc comment to the command.",
        "createdAt" : "2018-07-09T20:55:58Z",
        "updatedAt" : "2018-07-09T20:55:59Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ee8d9a3bf89cfd011989aeb5445b04dc6ec453c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +309,313 @@    SemanticsNode node;\n    while (renderObject != null && node == null) {\n      node = renderObject.debugSemantics;\n      renderObject = renderObject.parent;\n    }"
  },
  {
    "id" : "de6aa1ae-6c3e-466d-ab9b-468291bdd0a3",
    "prId" : 34440,
    "prUrl" : "https://github.com/flutter/flutter/pull/34440#pullrequestreview-250000935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6d6b52-4def-4fc5-8ffb-f4854e46672b",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Should this be `DiagnosticsType.element` then?  And the associated method called `getElementDiagnostics`?",
        "createdAt" : "2019-06-14T15:09:06Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "d58919dc-d307-499a-9be1-99fecc48f165",
        "parentId" : "0c6d6b52-4def-4fc5-8ffb-f4854e46672b",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is consistent with the terminology we use in the Widget Inspector for these two trees.",
        "createdAt" : "2019-06-14T16:28:04Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "19ceaa3eed030f515b4e1d3d8c0ad112b8a47298",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +422,426 @@        break;\n      case DiagnosticsType.widget:\n        diagnosticsNode = element.toDiagnosticsNode();\n        break;\n    }"
  },
  {
    "id" : "a903432d-9e9e-48bf-8c06-702a75f5dff9",
    "prId" : 36334,
    "prUrl" : "https://github.com/flutter/flutter/pull/36334#pullrequestreview-263837484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This will never return if there are ongoing animations, correct?  E.g. there's an indeterminate progress indicator, or blinking cursors are being allowed in the test for some reason.",
        "createdAt" : "2019-07-17T21:55:55Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "5dbe591c-381d-465d-810c-1f52ca23d3f4",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Another concern here is that by the time we get a response, this might no longer be true - I'm not sure if there's any way around that, but it seems like it would be a source of flakiness.",
        "createdAt" : "2019-07-17T21:56:58Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "ad095fd8-aa8e-4a8f-810b-e8b082ce4209",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Thanks for the review, Dan!\r\n\r\nTo your first question, I believe this method will never return if there are ongoing animations, but there's a [_frameSync](https://github.com/flutter/flutter/blob/c60063b72ded6215c0e7cde5f68f57d1972ef389/packages/flutter_driver/lib/src/extension/extension.dart#L167) flag that users can turn this off. And I also believe the current frame sync check [here](https://github.com/flutter/flutter/blob/c60063b72ded6215c0e7cde5f68f57d1972ef389/packages/flutter_driver/lib/src/extension/extension.dart#L239) probably should include this hasScheduledFrame check as well, but it seems not working well with the widgetTester's pump implementation today. On the other hand, in today's Espresso tests for Android native apps,  we disable animation by default and if users turn animation on, Espresso reports the app never goes idle. So it somewhat aligns with users' expectation, unless Flutter apps use animation heavily.\r\n\r\nTo your second question, Espresso talks to the driver extension API cross-process, so it's hard to keep truly synchronized, but I would think adding this API doesn't make things worse though :). If we could have this check closer to when we looking for an element [here](https://github.com/flutter/flutter/blob/c60063b72ded6215c0e7cde5f68f57d1972ef389/packages/flutter_driver/lib/src/extension/extension.dart#L239), probably would help reduce flakiness.",
        "createdAt" : "2019-07-17T22:18:21Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      },
      {
        "id" : "e99a2372-03d5-4b3f-a41c-4c7ed98cb82f",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Thanks for the explanation.  Maybe we could have a comment around this explaining some of that?",
        "createdAt" : "2019-07-17T22:53:05Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "1031ca7c-1418-4f54-8d08-e3a80d6514d6",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Done. PTAL.",
        "createdAt" : "2019-07-18T00:02:52Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      },
      {
        "id" : "30b01c55-2486-407d-aba9-9e9f454451c0",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "```\r\nIf interacting\r\n  /// with the app during animation is desirable, do NOT call this method. At\r\n  /// the same time, you might also want to call the 'set_frame_sync' method to\r\n  /// disable the frame sync while looking for UI elements.`\r\n```\r\nIt might be better to replace this with the something like the prose from `runUnsynchronized` in driver.dart.  We could consider making that a template, or just borrowing a bit from it that makes sense here.  We also probably want to have a `See also` that links to `[FlutterDriver.runUnsynchronized]`.\r\n\r\nSomething like:\r\n\r\n```\r\n  /// This method relies on a Flutter Driver mechanism is called \"frame sync\", which\r\n  /// waits for transient animations to finish. Persistent animations will cause this to\r\n  /// wait forever.\r\n  ///\r\n  /// If a test needs to interact with the app, it should avoid this method and instead\r\n  /// disable the frame sync using `set_frame_sync` method. See \r\n  /// [FlutterDriver.runUnsynchronized] for more details on how to do this.\r\n  ///\r\n  /// Disabling frame sync will require the test author to use some other method to\r\n  /// avoid flakiness.\r\n```",
        "createdAt" : "2019-07-18T03:59:09Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "9eb50bf4-7fcb-4429-a4d7-355b3cc00f57",
        "parentId" : "d2ed9fd8-6682-4801-9a57-6e38058d2e75",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Thanks! Reads way better :). PTAL.",
        "createdAt" : "2019-07-18T18:38:59Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d99739dd5222b3c348a1b2c40e4ecd44f6465592",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +392,396 @@    await _waitUntilFrame(() {\n      return SchedulerBinding.instance.transientCallbackCount == 0\n          && !SchedulerBinding.instance.hasScheduledFrame;\n    });\n    return null;"
  },
  {
    "id" : "f5322e2f-dfc7-4715-9b17-4cdd67c8f1d1",
    "prId" : 36334,
    "prUrl" : "https://github.com/flutter/flutter/pull/36334#pullrequestreview-263886439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "069e5afd-8683-4db9-a621-56599dd6e767",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "nit: add a blank line",
        "createdAt" : "2019-07-18T19:29:49Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "51aabec2-949e-4a23-8fd5-d37acb84184f",
        "parentId" : "069e5afd-8683-4db9-a621-56599dd6e767",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Done.",
        "createdAt" : "2019-07-18T20:21:38Z",
        "updatedAt" : "2019-07-18T20:26:33Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d99739dd5222b3c348a1b2c40e4ecd44f6465592",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +378,382 @@  /// * Whether there's no pending request for scheduling a new frame.\n  ///\n  /// We consider the frame is synced when both conditions are met.\n  ///\n  /// This method relies on a Flutter Driver mechanism called \"frame sync\","
  },
  {
    "id" : "d987fca8-2e7d-408e-b766-cdd75d0da403",
    "prId" : 37736,
    "prUrl" : "https://github.com/flutter/flutter/pull/37736#pullrequestreview-275197951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12cce19e-b416-42da-8961-824ac19980fe",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Instead of using the deprecated method here, can we just use the new method(s)? This will leave less to do when we eventually remove the deprecated version.",
        "createdAt" : "2019-08-14T23:16:39Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adaf7da2d2733eabf156156ce7b5cfe68f69f9",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +115,119 @@      'waitForAbsent': _waitForAbsent,\n      'waitForCondition': _waitForCondition,\n      'waitUntilNoTransientCallbacks': _waitUntilNoTransientCallbacks, // ignore: deprecated_member_use_from_same_package\n      'waitUntilNoPendingFrame': _waitUntilNoPendingFrame, // ignore: deprecated_member_use_from_same_package\n      'waitUntilFirstFrameRasterized': _waitUntilFirstFrameRasterized, // ignore: deprecated_member_use_from_same_package"
  },
  {
    "id" : "0069ab77-386c-4e35-9fe6-c965decdb147",
    "prId" : 37736,
    "prUrl" : "https://github.com/flutter/flutter/pull/37736#pullrequestreview-275209160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8f697e8-40db-4b66-abcf-724f3231a0d9",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ditto on deprecation question",
        "createdAt" : "2019-08-14T23:16:53Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "ab97eb6c-bdfd-4e17-96fe-c49239fbdce6",
        "parentId" : "d8f697e8-40db-4b66-abcf-724f3231a0d9",
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "If we replace the wait APIs like `waitUntilNoTransientCallbacks` with `waitForCondition`, this is going to be a hard-breaking change, as the JSON-RPC command for `waitUntilNoTransientCallbacks` is something like `{command: waitUntilNoTransientCallbacks}` and only the `WaitUntilNoTransientCallbacks` command class can understand/deserialize it.\r\n\r\nFlutter Driver is updated to send the new `waitForCondition` command to this extension API, but we'll need to update Espresso/EarlGrey to use the new API before we remove it.",
        "createdAt" : "2019-08-14T23:58:14Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adaf7da2d2733eabf156156ce7b5cfe68f69f9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +138,142 @@      'waitForAbsent': (Map<String, String> params) => WaitForAbsent.deserialize(params),\n      'waitForCondition': (Map<String, String> params) => WaitForCondition.deserialize(params),\n      'waitUntilNoTransientCallbacks': (Map<String, String> params) => WaitUntilNoTransientCallbacks.deserialize(params), // ignore: deprecated_member_use_from_same_package\n      'waitUntilNoPendingFrame': (Map<String, String> params) => WaitUntilNoPendingFrame.deserialize(params), // ignore: deprecated_member_use_from_same_package\n      'waitUntilFirstFrameRasterized': (Map<String, String> params) => WaitUntilFirstFrameRasterized.deserialize(params), // ignore: deprecated_member_use_from_same_package"
  },
  {
    "id" : "9e000797-c36a-4c08-9586-5cd923485bb2",
    "prId" : 37736,
    "prUrl" : "https://github.com/flutter/flutter/pull/37736#pullrequestreview-275197951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3c0aa81-5d16-4789-9b9e-524675832e15",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Needs null check.",
        "createdAt" : "2019-08-14T23:17:14Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adaf7da2d2733eabf156156ce7b5cfe68f69f9",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +380,384 @@  Future<Result> _waitForCondition(Command command) async {\n    assert(command != null);\n    final WaitForCondition waitForConditionCommand = command;\n    await waitForConditionCommand.condition.wait();\n    return null;"
  },
  {
    "id" : "20282fdb-1d06-43c3-adf4-324a56ea7bfc",
    "prId" : 47014,
    "prUrl" : "https://github.com/flutter/flutter/pull/47014#pullrequestreview-332850179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1563b4d2-9f62-44ca-8eec-20ebeef8d7f9",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This will not work in profile/release mode - is that ok?",
        "createdAt" : "2019-12-14T00:53:37Z",
        "updatedAt" : "2019-12-14T00:53:38Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "779bfab7-b445-405e-aa62-468f64fa6a0c",
        "parentId" : "1563b4d2-9f62-44ca-8eec-20ebeef8d7f9",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "(or rather, it will return `null` in those cases)",
        "createdAt" : "2019-12-14T00:53:50Z",
        "updatedAt" : "2019-12-14T00:53:50Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "017376fa-5feb-4cd7-a29f-8a59466f7a12",
        "parentId" : "1563b4d2-9f62-44ca-8eec-20ebeef8d7f9",
        "authorId" : "80ee73af-246a-40ad-abe6-bc8c4e26bd45",
        "body" : "I think it's fine, this should match the existing behaviour (https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/rendering/binding.dart#L448)",
        "createdAt" : "2019-12-16T20:38:42Z",
        "updatedAt" : "2019-12-16T20:38:42Z",
        "lastEditedBy" : "80ee73af-246a-40ad-abe6-bc8c4e26bd45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7f809412e7a1cd0bedaae61b5c4d387bb561e2c",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +234,238 @@\n  Future<LayerTree> _getLayerTree(Command command) async {\n    return LayerTree(RendererBinding.instance?.renderView?.debugLayer?.toStringDeep());\n  }\n"
  },
  {
    "id" : "4464d7f1-1569-4918-b6e6-b8fb30e15f61",
    "prId" : 64308,
    "prUrl" : "https://github.com/flutter/flutter/pull/64308#pullrequestreview-472835200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1442973-af3c-4b18-9507-2787fb36901f",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Is it from that or from the factory passed somewhere?",
        "createdAt" : "2020-08-21T22:01:29Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a849e1b4d41db17acc6fab23a00373ec3d38eea0",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +156,160 @@  String get finderType;\n\n  /// Deserializes the finder from JSON generated by [SerializableFinder.serialize].\n  SerializableFinder deserialize(Map<String, String> params, DeserializeFinderFactory finderFactory);\n"
  },
  {
    "id" : "90cb4829-f2d0-407b-b03e-17629147836b",
    "prId" : 64308,
    "prUrl" : "https://github.com/flutter/flutter/pull/64308#pullrequestreview-481542801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9ef6353-2aa0-40d8-9fb8-32a02c4113cc",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Looking at the sample code, this appears to be unused. The actual deserialization code is in `DeserializeFinderFactory` right?",
        "createdAt" : "2020-08-31T20:39:41Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "434bef85-be44-4ae9-8a99-1ada3b8f3be3",
        "parentId" : "b9ef6353-2aa0-40d8-9fb8-32a02c4113cc",
        "authorId" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "body" : "DeserializeFinderFactory will be used in some multiple searchers, such as Ancestor and Descendant",
        "createdAt" : "2020-09-01T03:33:20Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "tags" : [
        ]
      },
      {
        "id" : "6eeb60e1-08eb-4c00-a1ce-58080a21baf5",
        "parentId" : "b9ef6353-2aa0-40d8-9fb8-32a02c4113cc",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I mean specifically this method here. Where is this used?",
        "createdAt" : "2020-09-03T03:06:36Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "a6c7e62f-9bc6-4ae4-92cd-cdf6bc33ef22",
        "parentId" : "b9ef6353-2aa0-40d8-9fb8-32a02c4113cc",
        "authorId" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "body" : "Called by CommandWithTarget\r\nhttps://github.com/flutter/flutter/blob/bae44ef34971cd7549118300d6e82a0cc6c33bea/packages/flutter_driver/lib/src/common/find.dart#L50-L52\r\nhttps://github.com/flutter/flutter/blob/bae44ef34971cd7549118300d6e82a0cc6c33bea/packages/flutter_driver/lib/src/common/find.dart#L410-L422",
        "createdAt" : "2020-09-03T06:56:58Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a849e1b4d41db17acc6fab23a00373ec3d38eea0",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +157,161 @@\n  /// Deserializes the finder from JSON generated by [SerializableFinder.serialize].\n  SerializableFinder deserialize(Map<String, String> params, DeserializeFinderFactory finderFactory);\n\n  /// Signature for functions that run the given finder and return the [Element]"
  },
  {
    "id" : "e0cfcfb1-d4fe-4ce4-bfd8-7d6d68af44b5",
    "prId" : 64308,
    "prUrl" : "https://github.com/flutter/flutter/pull/64308#pullrequestreview-479376497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f92a917d-7508-4e37-b91c-7dbf617cde3a",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I think we should move this logic to our default `DeserializeFinderFactory`, and make it `@mustCallSuper`.",
        "createdAt" : "2020-08-31T20:45:29Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "5fa02990-ddc0-40fb-85a1-41659c3599f7",
        "parentId" : "f92a917d-7508-4e37-b91c-7dbf617cde3a",
        "authorId" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "body" : "The main purpose of using DeserializeFinderFactory here is to decouple from \"dart:ui\", so I think it should not be added",
        "createdAt" : "2020-09-01T03:31:52Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a849e1b4d41db17acc6fab23a00373ec3d38eea0",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +427,431 @@\n  Finder _createFinder(SerializableFinder finder) {\n    switch (finder.finderType) {\n      case 'ByText':\n        return _createByTextFinder(finder as ByText);"
  },
  {
    "id" : "0e00fd89-e7d4-438e-ae21-0e2195a8dacf",
    "prId" : 64308,
    "prUrl" : "https://github.com/flutter/flutter/pull/64308#pullrequestreview-481460164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f7d9f64-35c5-4149-af87-3722f4fd1081",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This whole class appears to be unnecessary. After reading the example above, I thikn it can be simplified down to just have the user extend `SerializableFinder` and provide the right `DeserializeFinderFactory` that creates the expected `SerializableFinder`. See my comment below on `_createFinder`.\r\n\r\nIf we can do that, this whole class goes away and eliminates some complexity.",
        "createdAt" : "2020-08-31T20:45:51Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "11c3feba-3293-4650-9ea3-52b6a6a7e759",
        "parentId" : "5f7d9f64-35c5-4149-af87-3722f4fd1081",
        "authorId" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "body" : "But createFinder cannot be put together with SerializableFinder, otherwise it will easily lead to indirect reference to \"dart:ui\"\", and reference to \"dart:ui\" in the test code will cause it to fail to run",
        "createdAt" : "2020-09-01T03:21:57Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "0b436a5e-02b7-49be-a84e-957c5677d23f",
        "tags" : [
        ]
      },
      {
        "id" : "d57c01c4-1da9-467b-98bf-f6314e0b083c",
        "parentId" : "5f7d9f64-35c5-4149-af87-3722f4fd1081",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Ahh ok, that makes sense.",
        "createdAt" : "2020-09-03T03:06:33Z",
        "updatedAt" : "2020-09-04T02:54:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "a849e1b4d41db17acc6fab23a00373ec3d38eea0",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +151,155 @@\n/// Used to expand the new Finder\nabstract class FinderExtension {\n\n  /// Identifies the type of finder to be used by the driver extension."
  },
  {
    "id" : "980fdbde-4667-4044-a632-aa2581988ee7",
    "prId" : 65276,
    "prUrl" : "https://github.com/flutter/flutter/pull/65276#pullrequestreview-484650088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79307f0d-384e-4eaf-b292-00262f4a0eeb",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "unfortunately adding a new named parameter here breaks some internal customers. Can we reland this with either an optional named parameter, or just a new named constructor for it?",
        "createdAt" : "2020-09-09T04:20:19Z",
        "updatedAt" : "2020-09-09T04:20:19Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf64a48d2a7dcdd0cb729df46b5370539bb36ed9",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +172,176 @@class FlutterDriverExtension with DeserializeFinderFactory {\n  /// Creates an object to manage a Flutter Driver connection.\n  FlutterDriverExtension(this._requestDataHandler, this._silenceErrors, List<FinderExtension> finders) {\n    _testTextInput.register();\n"
  },
  {
    "id" : "4173ae60-c22f-4845-910b-b3ee255a4f3f",
    "prId" : 71656,
    "prUrl" : "https://github.com/flutter/flutter/pull/71656#pullrequestreview-551136303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fd9bf3b-e199-49f6-9317-c8ea41cd67cb",
        "parentId" : null,
        "authorId" : "c25d561e-b0a5-42ab-bb56-ed0e988902bf",
        "body" : "@nturgut Related to your reply here: https://github.com/flutter/flutter/pull/71656#issuecomment-743355197 -- it was `true` by default already before",
        "createdAt" : "2020-12-14T08:28:42Z",
        "updatedAt" : "2020-12-14T08:28:43Z",
        "lastEditedBy" : "c25d561e-b0a5-42ab-bb56-ed0e988902bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea897543f825cdf985c0452d7969af2ae029f93a",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +330,334 @@    if (_enableTextEntryEmulation) {\n      registerTextInput();\n    }\n\n    for(final FinderExtension finder in finders) {"
  }
]