[
  {
    "id" : "e2b96b69-e747-4dcb-82b8-4f70f359cbe4",
    "prId" : 2120,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "735f9d05-c97c-47ac-94ba-3c4ca71fd71d",
        "parentId" : null,
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We should add `matcher` to the pubspec; I think it's being brought in now as a transitive dep.\n",
        "createdAt" : "2016-02-24T10:59:34Z",
        "updatedAt" : "2016-02-24T18:01:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "459c55c8-cbdc-4b06-8867-00b98c2063f9",
        "parentId" : "735f9d05-c97c-47ac-94ba-3c4ca71fd71d",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "done\n",
        "createdAt" : "2016-02-24T18:01:37Z",
        "updatedAt" : "2016-02-24T18:01:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f39703759ae8c8a3169d60580940fda1fa990f1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5,9 @@import 'dart:async';\nimport 'package:vm_service_client/vm_service_client.dart';\nimport 'package:matcher/matcher.dart';\nimport 'package:json_rpc_2/json_rpc_2.dart' as rpc;\n"
  },
  {
    "id" : "65af44f1-1115-4bba-8008-794e65959b4a",
    "prId" : 3655,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2622bffd-a4d6-445e-ba83-55f0b4e3284e",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "An `enum`! Even better. Where did you get the list? Maybe add a doc comment providing the link to this list? Could be useful in the future if the list ever changes.\n",
        "createdAt" : "2016-05-03T23:37:38Z",
        "updatedAt" : "2016-05-04T00:14:07Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "12e5a9a8-d1cc-4ca7-aa4a-7b38d800525a",
        "parentId" : "2622bffd-a4d6-445e-ba83-55f0b4e3284e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "There is such a comment above _tracingCategoriesToString().\n",
        "createdAt" : "2016-05-03T23:42:22Z",
        "updatedAt" : "2016-05-04T00:14:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "43645c14-c217-4c7e-988f-16417d5df4bf",
        "parentId" : "2622bffd-a4d6-445e-ba83-55f0b4e3284e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Looks like these are referred to as \"timeline stream\" rather than \"tracing category\".\n",
        "createdAt" : "2016-05-03T23:59:49Z",
        "updatedAt" : "2016-05-04T00:14:07Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "b76c9c3e-a3df-4d89-aa0f-e207ac8c992b",
        "parentId" : "2622bffd-a4d6-445e-ba83-55f0b4e3284e",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "They're not streams, they're stream identifiers, but I can't bring myself to call them TimelineStreamIdentifiers :-).  I'll rename TracingCategory to TimelineStream along with code to produce the startup-time histogram json in the follow-up PR.\n",
        "createdAt" : "2016-05-04T00:40:53Z",
        "updatedAt" : "2016-05-04T00:40:53Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b85c1fb166b8aabda9f7dc5778705abbecc91a0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +16,20 @@import 'timeline.dart';\n\nenum TracingCategory {\n  all, api, compiler, dart, debugger, embedder, gc, isolate, vm\n}"
  },
  {
    "id" : "7c0c07aa-35c2-43bc-9ba0-3600855fd19c",
    "prId" : 3655,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50117950-d2d9-4179-9f17-846fbbb2fb9d",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "``` dart\ndefault:\n  throw 'Unknown tracing category ${category}';\n```\n",
        "createdAt" : "2016-05-03T23:39:10Z",
        "updatedAt" : "2016-05-04T00:14:07Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b85c1fb166b8aabda9f7dc5778705abbecc91a0",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +34,38 @@      case TracingCategory.gc: return 'GC';\n      case TracingCategory.isolate: return 'Isolate';\n      case TracingCategory.vm: return 'VM';\n      default:\n        throw 'Unknown tracing category $category';"
  },
  {
    "id" : "93516968-2531-4e51-9353-5efe8333ae55",
    "prId" : 3822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43496021-6b58-4966-86c2-14e4e9a20abc",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Instead of the big switch statement, `TracingCategory` could be a `const` class (as opposed to `enum`) whose `toString` method returns the serialized version of the stream.\n",
        "createdAt" : "2016-05-09T23:43:47Z",
        "updatedAt" : "2016-05-09T23:43:47Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "ab8955aa-c649-4adb-ba07-faae3302cd8c",
        "parentId" : "43496021-6b58-4966-86c2-14e4e9a20abc",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Less the constructor privatization stuff I guess that ends up being about the same amount of mess.\n\n```\nclass TimelineStream {\n  const TimelineStream(this.id);\n  final String id;\n\n  static const all = const TimelineStream('all');\n  static const api = const TimelineStream('API');\n  // ...\n}\n\nString _timelineStreamsToString(List<TimelineStream> streams) {\n  final String contents = streams.map((TimelineStream stream) => stream.toString()).join(', ');\n  return '[$contents]';\n}\n```\n\nI'm going to leave things as they area since both approaches seem about the same amount of OK.\n",
        "createdAt" : "2016-05-10T00:00:17Z",
        "updatedAt" : "2016-05-10T00:00:17Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "20fe1ee75e2f8baa69485203b5081b0e708c524a",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@String _timelineStreamsToString(List<TimelineStream> streams) {\n  final String contents = streams.map((TimelineStream stream) {\n    switch(stream) {\n      case TimelineStream.all: return 'all';\n      case TimelineStream.api: return 'API';"
  },
  {
    "id" : "78c0b687-5f97-4bc6-bf4b-4064ce0f723c",
    "prId" : 5946,
    "prUrl" : "https://github.com/flutter/flutter/pull/5946#pullrequestreview-676605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25cf09c2-77ee-4500-b29f-4ddbb79be672",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we wait on these in parallel?\n",
        "createdAt" : "2016-09-20T03:20:17Z",
        "updatedAt" : "2016-09-20T03:20:17Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "1e83d202-b10f-49ef-9e85-66465e7a17c5",
        "parentId" : "25cf09c2-77ee-4500-b29f-4ddbb79be672",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Not critical in this code. This is the case when connection failed and will be retried. Chances are calling close is a noop.\n",
        "createdAt" : "2016-09-20T03:49:26Z",
        "updatedAt" : "2016-09-20T03:49:26Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "85a42a0f11353a282334743adf7917866e31e190",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +373,377 @@    } catch(e) {\n      await ws1?.close();\n      await ws2?.close();\n\n      if (timer.elapsed < const Duration(seconds: 30)) {"
  },
  {
    "id" : "a528010d-4f0d-469e-b546-d4ab1ff632a7",
    "prId" : 10894,
    "prUrl" : "https://github.com/flutter/flutter/pull/10894#pullrequestreview-46095860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cb0a9d8-5096-4fc0-befd-2fdfd0013dc7",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This is 2mm away from being a custom request handler that takes a `String` and returns a `String`. 2 things would close the 2mm gap:\r\n\r\n1. rename this method and `DataHandler` to something that implies \"you can do anything in the DataHandler and return a result\"\r\n1. have `DataHandler` return `Future<String>` instead of `String`\r\n\r\nI feel like we should do it now so we don't have to break API or introduce an almost identical API later because users want to do more than request data.",
        "createdAt" : "2017-06-21T22:50:52Z",
        "updatedAt" : "2017-06-23T21:25:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "01ee4911-37ed-4e30-89ee-b97eda1bd775",
        "parentId" : "7cb0a9d8-5096-4fc0-befd-2fdfd0013dc7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I've changed DataHandler to return a future string.\r\n\r\nAny ideas what requestData, RequestData, DataHandler, and RequestDataResult should be called, if not those? I couldn't come up with anything more generic...",
        "createdAt" : "2017-06-23T20:28:00Z",
        "updatedAt" : "2017-06-23T21:25:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b4353f6a-5f56-4eb7-b768-b55212551c5d",
        "parentId" : "7cb0a9d8-5096-4fc0-befd-2fdfd0013dc7",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Ideas: `RequestWithData`, `CustomRequest`, `SimpleRequest`",
        "createdAt" : "2017-06-23T20:49:26Z",
        "updatedAt" : "2017-06-23T21:25:48Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "3aa26d57-058b-4bab-aeca-2ad39029b95b",
        "parentId" : "7cb0a9d8-5096-4fc0-befd-2fdfd0013dc7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I try to avoid words like Simple in APIs because if the API is simple, that should be obvious, and if it's not, the name will be a constant source of anger.\r\n\r\n\"customRequest()\" doesn't really convey anything different than \"requestData()\" but is less verb-like, which is suboptimal for a method.\r\n\r\n\"requestWithData()\" vs \"requestData()\" seems like a wash except the latter is shorter, so...\r\n\r\nI dunno. I've left it as requestData() for now. I don't feel strongly about this though, feel free to change it.",
        "createdAt" : "2017-06-23T21:31:51Z",
        "updatedAt" : "2017-06-23T21:31:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c7560840d39d6548c0156ae1074c1556587cd88",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +389,393 @@  ///\n  /// The application can respond to this by providing a handler to [enableFlutterDriverExtension].\n  Future<String> requestData(String message, { Duration timeout }) async {\n    return RequestDataResult.fromJson(await _sendCommand(new RequestData(message, timeout: timeout))).message;\n  }"
  }
]