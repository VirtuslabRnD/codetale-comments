[
  {
    "id" : "617293f1-293a-4ca8-912f-3a70645da33a",
    "prId" : 13373,
    "prUrl" : "https://github.com/flutter/flutter/pull/13373#pullrequestreview-81714572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "So, does `enterText` replace the pervious content of the text field? If so, we should maybe document that (and maybe even rename it to `replaceText`)? If not, it would be nice if the example showed that the previous text is still there?",
        "createdAt" : "2017-12-06T17:52:49Z",
        "updatedAt" : "2017-12-06T23:31:41Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2f675990-139d-400b-82d1-c1b26f961489",
        "parentId" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Technically the behavior depends on the widget that receives the input, but I think the expectation for text-field-like widgets is that they replace the text. For example, in the case of `EditableText` we replace the entire string. The name \"enterText\" and the behavior of this method is identical to that of `TestTextInput.enterText`, so I'd like to keep it as is. However, I expanded the dartdoc explaining this behavior in detail.\r\n\r\nBonus: @cbracken just told me that the composing `TextRange` was not necessary to replace the text, so I removed it.",
        "createdAt" : "2017-12-06T23:31:23Z",
        "updatedAt" : "2017-12-06T23:31:41Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "9879489c-0a4f-4843-9012-e46b71a3a785",
        "parentId" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "@goderbauer Correct - this would be more accurately named `setText` or `replaceText`. The current protocol is such that text update messages are expected to include the full current editing state, not a delta.",
        "createdAt" : "2017-12-07T00:26:27Z",
        "updatedAt" : "2017-12-07T00:26:27Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab990bbea89856b261d61a45ffce18992d590b12",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +445,449 @@  ///  await driver.waitFor(find.text('Hello!'));  // verify text appears on UI\n  ///  await driver.enterText('World!');  // enter another piece of text\n  ///  await driver.waitFor(find.text('World!'));  // verify new text appears\n  /// });\n  /// ```"
  },
  {
    "id" : "654e1db9-71a1-4d04-ba21-5059f169d4b1",
    "prId" : 13410,
    "prUrl" : "https://github.com/flutter/flutter/pull/13410#pullrequestreview-81952450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac759628-4cfa-4c5e-88aa-d190373c0860",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This could provide some more details about the difference between emulation enabled and disabled. E.g. when should you disable it?",
        "createdAt" : "2017-12-07T18:10:22Z",
        "updatedAt" : "2017-12-07T18:10:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d79d0923-030a-4c01-b668-a3e0652babc7",
        "parentId" : "ac759628-4cfa-4c5e-88aa-d190373c0860",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Good point: https://github.com/flutter/flutter/pull/13420",
        "createdAt" : "2017-12-07T18:39:07Z",
        "updatedAt" : "2017-12-07T18:39:07Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e6cb4525610fc5552965163e373a43e42ef90a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +452,456 @@  }\n\n  /// If `enabled` is true, enables text entry emulation via [enterText]. If\n  /// `enabled` is false, disables it.\n  ///"
  },
  {
    "id" : "d8261258-0abe-4ea3-8c9f-d5ee5672b0d0",
    "prId" : 15957,
    "prUrl" : "https://github.com/flutter/flutter/pull/15957#pullrequestreview-107141029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60ad25e-f672-4b3d-a145-6fc8c52ab517",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "You also wouldn't need to do this if you implemented it in the extension.",
        "createdAt" : "2018-03-27T03:57:38Z",
        "updatedAt" : "2018-03-27T17:53:11Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "75ccd0ab83c3632e9d106cd075aefc393a179163",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +460,464 @@      await waitFor(item, timeout: const Duration(milliseconds: 100));\n      isVisible = true;\n    } on DriverError {\n      // Assume that that waitFor timed out because the item isn't visible.\n    }"
  },
  {
    "id" : "e6cd47a8-e049-4e90-9bfe-b90a82c8264b",
    "prId" : 17594,
    "prUrl" : "https://github.com/flutter/flutter/pull/17594#pullrequestreview-120360240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1ae87b5-19d4-45f2-b1bd-1aa3cec7b5d9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'll accept all the blame for the implicit rationale for these timeouts and delays. Please add some comments that explain exactly what's going on here, for the sake of the next person who's stuck with trying to understand what's going on...",
        "createdAt" : "2018-05-15T14:56:36Z",
        "updatedAt" : "2018-05-15T18:36:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "3c9ef6d2-afd4-42dd-9f72-bcba6a5e44fc",
        "parentId" : "c1ae87b5-19d4-45f2-b1bd-1aa3cec7b5d9",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "Good idea -- done!",
        "createdAt" : "2018-05-15T18:30:35Z",
        "updatedAt" : "2018-05-15T18:36:20Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd39cc8e3296a03dbc6d4e5a1785c38a53115b27",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +484,488 @@    // repeatedly until we either find the item or time out.\n    bool isVisible = false;\n    waitFor(item, timeout: timeout).then((Null _) { isVisible = true; });\n    await new Future<Null>.delayed(const Duration(milliseconds: 500));\n    while (!isVisible) {"
  },
  {
    "id" : "0d72e0e4-2249-46cd-ae83-24577be3ffd9",
    "prId" : 19630,
    "prUrl" : "https://github.com/flutter/flutter/pull/19630#pullrequestreview-142596908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f274f743-cd01-4426-890e-d8c82c6d5bbb",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "Just curious: we stopped using underscore for unused parameters?",
        "createdAt" : "2018-07-31T02:46:40Z",
        "updatedAt" : "2018-08-01T23:12:40Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "b6e335e2-fdab-4ec9-aebd-a1994aa07ad8",
        "parentId" : "f274f743-cd01-4426-890e-d8c82c6d5bbb",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah at some point I realised that using `_` reduces the self-documenting aspect of the code. Not that \"value\" is much better than \"_\" but at least it's clear that it's not something like \"time\" or \"error\".",
        "createdAt" : "2018-08-01T23:12:08Z",
        "updatedAt" : "2018-08-01T23:12:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f171df23fba1ec5707fa108e2ca0ce36a367c9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +484,488 @@    // repeatedly until we either find the item or time out.\n    bool isVisible = false;\n    waitFor(item, timeout: timeout).then((Null value) { isVisible = true; });\n    await new Future<Null>.delayed(const Duration(milliseconds: 500));\n    while (!isVisible) {"
  },
  {
    "id" : "2999921e-691a-4edc-907e-c772243f2a77",
    "prId" : 23289,
    "prUrl" : "https://github.com/flutter/flutter/pull/23289#pullrequestreview-166683820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcdd1781-8f22-42fe-b655-bc8bba91c635",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "probably worthwhile to add a helper that give you the isolateId for an appIsolate.",
        "createdAt" : "2018-10-19T20:26:08Z",
        "updatedAt" : "2018-10-21T13:53:30Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a15a9af14ff70623f822c65cabd78b0a939c1ea",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +798,802 @@      await _peer\n          .sendRequest(_collectAllGarbageMethodName, <String, String>{\n            'isolateId': 'isolates/${_appIsolate.numberAsString}',\n          });\n    } catch (error, stackTrace) {"
  },
  {
    "id" : "93e3aaf7-354c-4543-94c0-03f3c19d2a4b",
    "prId" : 23289,
    "prUrl" : "https://github.com/flutter/flutter/pull/23289#pullrequestreview-166691357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7751a6d9-9cba-470f-89c1-96289f19622a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "remove the timeout logic (if you don't, i'll just rip it out momentarily anyway...)",
        "createdAt" : "2018-10-19T20:50:28Z",
        "updatedAt" : "2018-10-21T13:53:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a15a9af14ff70623f822c65cabd78b0a939c1ea",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +808,812 @@    }\n  }\n\n  /// Closes the underlying connection to the VM service.\n  ///"
  },
  {
    "id" : "b1efa447-94e0-4e1a-85d5-41a33aed472a",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-180663170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5b1717c-7820-43e4-95bf-db71a76d50d5",
        "parentId" : null,
        "authorId" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "body" : "~~Does this need to return `future` to avoid completing  when the warning is written? (there are things that await the return of `_warnIfSlow`)~~\r\n\r\nScratch that, didn't see the cascade `..`!",
        "createdAt" : "2018-12-03T09:01:46Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "d8d45103-cfb7-4f47-88cd-8ac318d5175d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +100,104 @@  assert(timeout != null);\n  assert(message != null);\n  return future..timeout(timeout, onTimeout: () { _log.warning(message); });\n}\n"
  },
  {
    "id" : "50587049-fa35-4cce-bef9-ec0639f0d645",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-185817180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f45ebcf1-a3e0-46a5-a7c3-d9d893e9e382",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "assert(timeout != null)",
        "createdAt" : "2018-12-17T19:39:37Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "4ad0817f-aa50-435f-9687-90e5eef39657",
        "parentId" : "f45ebcf1-a3e0-46a5-a7c3-d9d893e9e382",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2018-12-17T21:56:24Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 511,
    "diffHunk" : "@@ -1,1 +716,720 @@    Duration timeout = _kUnusuallyLongTimeout,\n  }) async {\n    assert(streams != null && streams.isNotEmpty);\n    assert(timeout != null);\n    try {"
  },
  {
    "id" : "c24b6dcf-1780-4876-bf8f-1856c7a59c4d",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-185817317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6ac9fab-7098-40cf-92c4-97166b39f863",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "assert(timeout != null)",
        "createdAt" : "2018-12-17T20:22:07Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "d5617387-23ed-41c9-8299-ab191107649e",
        "parentId" : "d6ac9fab-7098-40cf-92c4-97166b39f863",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2018-12-17T21:56:44Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 541,
    "diffHunk" : "@@ -1,1 +744,748 @@  }) async {\n    assert(timeout != null);\n    try {\n      await _warnIfSlow<void>(\n        future: _peer.sendRequest(_setVMTimelineFlagsMethodName, <String, String>{'recordedStreams': '[]'}),"
  },
  {
    "id" : "c8dd2478-9b0b-4759-99a7-2f19671af422",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-185817750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b116b493-d232-4a39-9c58-27bc3856fa79",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "For all these methods where you changed `.timeout()` to `_warnIfSlow()`, document that the `timeout` argument doesn't actually cause the future to timeout, but rather just logs a warning if the future takes longer than the timeout.",
        "createdAt" : "2018-12-17T20:23:29Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "650f89c2-df37-44e2-97e0-54d598e354fd",
        "parentId" : "b116b493-d232-4a39-9c58-27bc3856fa79",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2018-12-17T21:57:48Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +735,739 @@  }\n\n  /// Stops recording performance traces and downloads the timeline.\n  ///\n  /// The `timeout` argument causes a warning to be displayed to the user if the"
  },
  {
    "id" : "9c705fb1-221f-44fe-bebb-b4f45a0a2c33",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-185817820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8c1bdd6-3ae9-464a-a714-59956ac98056",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "assert(timeout != null)",
        "createdAt" : "2018-12-17T20:25:17Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "b2b6a438-3f84-482f-8224-2386dc54d908",
        "parentId" : "c8c1bdd6-3ae9-464a-a714-59956ac98056",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "done",
        "createdAt" : "2018-12-17T21:58:00Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 567,
    "diffHunk" : "@@ -1,1 +796,800 @@  }) async {\n    assert(timeout != null);\n    try {\n      await _warnIfSlow<void>(\n        future: _peer.sendRequest(_clearVMTimelineMethodName, <String, String>{}),"
  },
  {
    "id" : "140ccb65-9e7c-4819-b147-91dd5a4240f9",
    "prId" : 23531,
    "prUrl" : "https://github.com/flutter/flutter/pull/23531#pullrequestreview-185876315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056f8a0f-5dfc-4d7d-9468-b194dfe16730",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Without these timeouts, it's not clear that the `catch` block will hit anymore.  As such, it looks like the retry attempts (and the logging associated with them) will likely not hit, and instead we'll just hang waiting for the connection.",
        "createdAt" : "2018-12-17T20:29:58Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "260a0887-1f72-475f-a993-53f735a17be1",
        "parentId" : "056f8a0f-5dfc-4d7d-9468-b194dfe16730",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Surely `WebSocket.connect` will fail in case of error?\r\n\r\nI'm not sure what the purpose of the timeouts here were, originally. TCP itself has timeouts which should presumably kick in if something is going to time out. I would expect the regular failure mode here to be that the peer refused the connection (i.e. port not yet open).",
        "createdAt" : "2018-12-17T21:59:58Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1b3bb7be-6f7f-47f1-8391-5d45a0893c71",
        "parentId" : "056f8a0f-5dfc-4d7d-9468-b194dfe16730",
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "If the port's outright closed yes, but I've also seen connection attempts that just hang.",
        "createdAt" : "2018-12-17T22:32:50Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      },
      {
        "id" : "5131fc62-5d6f-4ef7-869c-c6fe152eb5cc",
        "parentId" : "056f8a0f-5dfc-4d7d-9468-b194dfe16730",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "They shouldn't hang forever, right? The kernel has a timeout on TCP connection attempts (derived from the TCP spec) which we should now be honoring.",
        "createdAt" : "2018-12-18T01:41:04Z",
        "updatedAt" : "2018-12-20T23:16:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f49aff478cf40502c0d2210f3bb084159ea6f300",
    "line" : 623,
    "diffHunk" : "@@ -1,1 +905,909 @@    WebSocket ws2;\n    try {\n      ws1 = await WebSocket.connect(uri.toString());\n      ws2 = await WebSocket.connect(uri.toString());\n      return VMServiceClientConnection("
  },
  {
    "id" : "3b355df7-1228-4a19-97d9-f3ba8ca3a857",
    "prId" : 26736,
    "prUrl" : "https://github.com/flutter/flutter/pull/26736#pullrequestreview-260808005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6e7cfec-2645-4840-a4b5-9ea3ff2f4ed4",
        "parentId" : null,
        "authorId" : "efedef1a-abdf-4832-81fd-8b32d276c466",
        "body" : "This also means that if the flutter app crashed on startup we'll sit here forever.\r\n\r\nIs there  a way to handle  that better?\r\n\r\nI know that crashes are fairly rare and it may not be worth special casing them, just checking since I'm looking at one (https://github.com/flutter/flutter/issues/35890) right now.",
        "createdAt" : "2019-07-11T16:11:04Z",
        "updatedAt" : "2019-07-11T16:11:05Z",
        "lastEditedBy" : "efedef1a-abdf-4832-81fd-8b32d276c466",
        "tags" : [
        ]
      }
    ],
    "commit" : "702cfc07b677929a1a1f57cf613234145149610f",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +316,320 @@      _log.trace('Waiting for service extension');\n      // We will never receive the extension event if the user does not\n      // register it. If that happens, show a message but continue waiting.\n      await _warnIfSlow<String>(\n        future: whenServiceExtensionReady,"
  },
  {
    "id" : "b1467572-cd9a-409c-a355-c403cd11ca02",
    "prId" : 30747,
    "prUrl" : "https://github.com/flutter/flutter/pull/30747#pullrequestreview-224191340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11346488-792a-4387-855f-958b5ce7cb80",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "How long does this take?  Would it be faster to do soemthing like:\r\n\r\n```\r\nbool assertsEnabled = false;\r\nassert(() {\r\n  assertsEnabled = true;\r\n}());\r\nreturn assertsEnabled;\r\n```\r\n?",
        "createdAt" : "2019-04-09T04:44:50Z",
        "updatedAt" : "2019-04-09T22:58:44Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "5627a797-27d4-45d0-a8c3-3e28929a9bee",
        "parentId" : "11346488-792a-4387-855f-958b5ce7cb80",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "I tried that before exploring and fixing this buggy `getVmFlags` function (which was never used in our repo). Somehow, the code inside `assert` is never run. I thought maybe `flutter drive` itself is running the host dart code in non-debug mode, while the client dart code is running in debug mode.",
        "createdAt" : "2019-04-09T04:49:03Z",
        "updatedAt" : "2019-04-09T22:58:44Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "650ec232-96ad-4a56-bbf8-202108c1384e",
        "parentId" : "11346488-792a-4387-855f-958b5ce7cb80",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "BTW, since this is run after the tracing is done, it shouldn't affect the tracing numbers. In terms of the test time cost, it probably adds no more than 0.5 second since I couldn't see any significant test slowdown.",
        "createdAt" : "2019-04-09T04:51:15Z",
        "updatedAt" : "2019-04-09T22:58:44Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f48c405f6094c58c26a3939edceb7c5f23c5279",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +784,788 @@\n  Future<bool> _isPrecompiledMode() async {\n    final List<Map<String, dynamic>> flags = await getVmFlags();\n    for(Map<String, dynamic> flag in flags) {\n      if (flag['name'] == 'precompiled_mode') {"
  },
  {
    "id" : "d16a1389-ff90-4fe4-8cce-cba60046daaf",
    "prId" : 30747,
    "prUrl" : "https://github.com/flutter/flutter/pull/30747#pullrequestreview-224691422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "853bbf32-3250-4ae8-b627-541f2db8cdb6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "update the documentation here as well",
        "createdAt" : "2019-04-09T22:40:48Z",
        "updatedAt" : "2019-04-09T22:58:44Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "60eca931-83f1-482a-a92a-55863dad34ef",
        "parentId" : "853bbf32-3250-4ae8-b627-541f2db8cdb6",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Done.",
        "createdAt" : "2019-04-09T22:51:06Z",
        "updatedAt" : "2019-04-09T22:58:57Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f48c405f6094c58c26a3939edceb7c5f23c5279",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +817,821 @@    if (!retainPriorEvents) {\n      await clearTimeline();\n    }\n    await startTracing(streams: streams);\n    await action();"
  },
  {
    "id" : "cc713f0a-fea6-4019-863d-fa3be97fb9d8",
    "prId" : 32410,
    "prUrl" : "https://github.com/flutter/flutter/pull/32410#pullrequestreview-235678235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26722d7d-83b5-435c-9f1b-19d4815f0022",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Nit: comma after \"is true\"",
        "createdAt" : "2019-05-09T15:58:41Z",
        "updatedAt" : "2019-05-10T11:56:23Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "35790c3c8c705753a5c7af389ddc99963ab6e940",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1022,1026 @@  /// matches the `matching` parameter.\n  ///\n  /// If the `matchRoot` argument is true then the widget specified by `of` will\n  /// be considered for a match. The argument defaults to false.\n  SerializableFinder ancestor({"
  },
  {
    "id" : "70e262a6-0f28-4b68-890c-43e5ce532178",
    "prId" : 32410,
    "prUrl" : "https://github.com/flutter/flutter/pull/32410#pullrequestreview-235680395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da610312-f64d-4690-88b8-3df14bac8320",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "Comma here too",
        "createdAt" : "2019-05-09T16:02:33Z",
        "updatedAt" : "2019-05-10T11:56:23Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "35790c3c8c705753a5c7af389ddc99963ab6e940",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1033,1037 @@  /// matches the `matching` parameter.\n  ///\n  /// If the `matchRoot` argument is true then the widget specified by `of` will\n  /// be considered for a match. The argument defaults to false.\n  SerializableFinder descendant({"
  },
  {
    "id" : "582622a1-d8c4-482d-b84f-06e4238ea614",
    "prId" : 32710,
    "prUrl" : "https://github.com/flutter/flutter/pull/32710#pullrequestreview-237511780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab66cf24-a82c-4546-b53c-6d2b002a8d22",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "I'm missing a whole lot of context here, can you explain in comments why we can be sure that any error that satisfies these condition should be ignored?",
        "createdAt" : "2019-05-14T21:11:50Z",
        "updatedAt" : "2019-05-14T21:43:55Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "dd3f7e42-9be5-4b07-8da7-8a5dd6042bec",
        "parentId" : "ab66cf24-a82c-4546-b53c-6d2b002a8d22",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'll expand this.",
        "createdAt" : "2019-05-14T21:28:12Z",
        "updatedAt" : "2019-05-14T21:43:55Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "445b0e025e80b44449a76a887d57c3c45d96f7e0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +972,976 @@// and can decide what to do from there.\n// TODO(dnfield): https://github.com/flutter/flutter/issues/31813\nbool _ignoreRpcError(dynamic error) {\n  if (error is rpc.RpcException) {\n    final rpc.RpcException exception = error;"
  },
  {
    "id" : "e7378b8a-6851-4be2-9a10-0691246840f3",
    "prId" : 33431,
    "prUrl" : "https://github.com/flutter/flutter/pull/33431#pullrequestreview-242913988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "446be21e-5ca2-455e-9438-e7d3e135153a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you document why one might want to use this?",
        "createdAt" : "2019-05-28T15:46:02Z",
        "updatedAt" : "2019-05-29T15:24:51Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "62776a3f-a0c4-4a45-9ee1-fc95c3141e2f",
        "parentId" : "446be21e-5ca2-455e-9438-e7d3e135153a",
        "authorId" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "body" : "Done.",
        "createdAt" : "2019-05-28T20:49:37Z",
        "updatedAt" : "2019-05-29T15:24:51Z",
        "lastEditedBy" : "b0e8e5f4-24fc-402d-ba63-9576e63321dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "442f243388cdd568bc7b4f77505b8dfcdb05fb5e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +389,393 @@  /// useful if your application spawns multiple isolates that you\n  /// would like to instrument.\n  final VMServiceClient serviceClient;\n\n  /// JSON-RPC client useful for sending raw JSON requests."
  },
  {
    "id" : "3e4fff39-0687-4ed1-b163-916a6397ba78",
    "prId" : 34440,
    "prUrl" : "https://github.com/flutter/flutter/pull/34440#pullrequestreview-250000935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36cd9ba3-b865-4e5e-bac2-05f8bd25731a",
        "parentId" : null,
        "authorId" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "body" : "Could you document the differences between this method and #getWidgetDiagnostics? Like when should use which?",
        "createdAt" : "2019-06-13T21:53:03Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "191b853a-2a89-4c2f-ad5d-09a244d276dc",
        "tags" : [
        ]
      },
      {
        "id" : "e594fa6f-9474-4d1a-85d3-3e401d153603",
        "parentId" : "36cd9ba3-b865-4e5e-bac2-05f8bd25731a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Not sure how to answer that question generically. If you're interested in the properties of a Widget use getWidgetDiagnostics, if you want to know the properties of its underlying RenderObject use getRenderObjectDiagnostics.",
        "createdAt" : "2019-06-13T23:52:41Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "366f656e-18aa-4085-91fb-e58a97f88114",
        "parentId" : "36cd9ba3-b865-4e5e-bac2-05f8bd25731a",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Perhaps something like:\r\n\r\n```\r\n[RenderObject]s are responsible for positioning, layout, and painting on the screen, based on the configuration from a [Widget]. Callers that need information about size or position should use this method.\r\n\r\nA widget may indirectly create multiple [RenderObject]s, which each implement some aspect of the widget configuration. A 1:1 relationship should not be assumed.\r\n```\r\n\r\nAnd on the widget one:\r\n\r\n```\r\n[Widget]s describe configuration for the rendering tree. Individual widgets may create multiple [RenderObject]s to actually layout and paint the desired configuration.  Callers that want to verify that a widget is present in the tree should use this method.\r\n```\r\n\r\n?",
        "createdAt" : "2019-06-14T15:15:32Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "35b3318b-417e-4f1d-9ce7-67f47196a852",
        "parentId" : "36cd9ba3-b865-4e5e-bac2-05f8bd25731a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I'll add this.",
        "createdAt" : "2019-06-14T16:28:02Z",
        "updatedAt" : "2019-06-18T22:59:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "19ceaa3eed030f515b4e1d3d8c0ad112b8a47298",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +545,549 @@  ///\n  ///  * [getWidgetDiagnostics], which gets the [DiagnosticsNode] of a [Widget].\n  Future<Map<String, Object>> getRenderObjectDiagnostics(\n      SerializableFinder finder, {\n      int subtreeDepth = 0,"
  },
  {
    "id" : "daa75406-24de-4614-adde-4b2072e2f17f",
    "prId" : 36089,
    "prUrl" : "https://github.com/flutter/flutter/pull/36089#pullrequestreview-262483395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f15dd612-cc47-4e68-bb99-d1552c0b9856",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "use `whenComplete` here instead of `then`",
        "createdAt" : "2019-07-16T15:03:15Z",
        "updatedAt" : "2019-07-16T15:07:32Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "66ab952d8896b87d9c518745537b2d10ced598dc",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +410,414 @@    final String webSocketUrl = _getWebSocketUrl(_dartVmReconnectUrl);\n    final WebSocket ws = await WebSocket.connect(webSocketUrl);\n    ws.done.then((dynamic _) => _checkCloseCode(ws));\n    _peer = rpc.Peer(\n        IOWebSocketChannel(ws).cast(),"
  },
  {
    "id" : "3e7fe11e-7394-4332-b823-483e9d12679d",
    "prId" : 36089,
    "prUrl" : "https://github.com/flutter/flutter/pull/36089#pullrequestreview-262483395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e6c9234-4e17-405c-a1f7-de9c9e58c55b",
        "parentId" : null,
        "authorId" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "body" : "ditto",
        "createdAt" : "2019-07-16T15:05:11Z",
        "updatedAt" : "2019-07-16T15:07:32Z",
        "lastEditedBy" : "5acfd23a-9807-467c-8f5c-9b4c4052927b",
        "tags" : [
        ]
      }
    ],
    "commit" : "66ab952d8896b87d9c518745537b2d10ced598dc",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +1139,1143 @@      ws2 = await WebSocket.connect(webSocketUrl);\n\n      ws1.done.then((dynamic _) => _checkCloseCode(ws1));\n      ws2.done.then((dynamic _) => _checkCloseCode(ws2));\n"
  },
  {
    "id" : "d8ba9887-a512-4c5a-9504-51f21c44f676",
    "prId" : 37736,
    "prUrl" : "https://github.com/flutter/flutter/pull/37736#pullrequestreview-273244178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d890f500-ddb1-4f0d-8234-92b4bb6c817a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Use the new wait conditions for this one as well?",
        "createdAt" : "2019-08-09T16:59:22Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "59d0cc1b-d230-49ac-bfea-a7cc7dadd9b6",
        "parentId" : "d890f500-ddb1-4f0d-8234-92b4bb6c817a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "And for the other one (WaitUntilNoPendingFrame) as well?",
        "createdAt" : "2019-08-09T17:00:07Z",
        "updatedAt" : "2019-08-16T17:42:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "36adaf7da2d2733eabf156156ce7b5cfe68f69f9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +506,510 @@  }\n\n  /// Waits until the next [Window.onReportTimings] is called.\n  ///\n  /// Use this method to wait for the first frame to be rasterized during the"
  },
  {
    "id" : "6f002df0-d6e7-4438-9b19-4f0b10515bcc",
    "prId" : 45175,
    "prUrl" : "https://github.com/flutter/flutter/pull/45175#pullrequestreview-322528799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51f1d7a1-8985-4b99-a448-43d7a6863caf",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The double cast is strange...",
        "createdAt" : "2019-11-20T23:44:31Z",
        "updatedAt" : "2019-12-04T07:58:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "56bbfb11-9ebe-4a55-aee0-b8b3ec3641ef",
        "parentId" : "51f1d7a1-8985-4b99-a448-43d7a6863caf",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "...but necessary. Same comment as above.",
        "createdAt" : "2019-11-21T14:33:08Z",
        "updatedAt" : "2019-12-04T07:58:32Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      },
      {
        "id" : "6b81dcfe-90f2-421d-b035-ae7e7c70bee6",
        "parentId" : "51f1d7a1-8985-4b99-a448-43d7a6863caf",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "I ran into this same thing when deserializing responses from Gold. Double casting was the only way in that case too.",
        "createdAt" : "2019-11-25T19:37:05Z",
        "updatedAt" : "2019-12-04T07:58:32Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "788005d176fa4f984d106791c57030a235114e31",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +878,882 @@    final Map<String, dynamic> result = await _peer.sendRequest('getFlagList') as Map<String, dynamic>;\n    return result != null\n        ? (result['flags'] as List<dynamic>).cast<Map<String,dynamic>>()\n        : const <Map<String, dynamic>>[];\n  }"
  }
]