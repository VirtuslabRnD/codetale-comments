[
  {
    "id" : "617293f1-293a-4ca8-912f-3a70645da33a",
    "prId" : 13373,
    "prUrl" : "https://github.com/flutter/flutter/pull/13373#pullrequestreview-81714572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "So, does `enterText` replace the pervious content of the text field? If so, we should maybe document that (and maybe even rename it to `replaceText`)? If not, it would be nice if the example showed that the previous text is still there?",
        "createdAt" : "2017-12-06T17:52:49Z",
        "updatedAt" : "2017-12-06T23:31:41Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2f675990-139d-400b-82d1-c1b26f961489",
        "parentId" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Technically the behavior depends on the widget that receives the input, but I think the expectation for text-field-like widgets is that they replace the text. For example, in the case of `EditableText` we replace the entire string. The name \"enterText\" and the behavior of this method is identical to that of `TestTextInput.enterText`, so I'd like to keep it as is. However, I expanded the dartdoc explaining this behavior in detail.\r\n\r\nBonus: @cbracken just told me that the composing `TextRange` was not necessary to replace the text, so I removed it.",
        "createdAt" : "2017-12-06T23:31:23Z",
        "updatedAt" : "2017-12-06T23:31:41Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "9879489c-0a4f-4843-9012-e46b71a3a785",
        "parentId" : "7777c03b-32cd-487a-8a5f-310deaf462ca",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "@goderbauer Correct - this would be more accurately named `setText` or `replaceText`. The current protocol is such that text update messages are expected to include the full current editing state, not a delta.",
        "createdAt" : "2017-12-07T00:26:27Z",
        "updatedAt" : "2017-12-07T00:26:27Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab990bbea89856b261d61a45ffce18992d590b12",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +445,449 @@  ///  await driver.waitFor(find.text('Hello!'));  // verify text appears on UI\n  ///  await driver.enterText('World!');  // enter another piece of text\n  ///  await driver.waitFor(find.text('World!'));  // verify new text appears\n  /// });\n  /// ```"
  },
  {
    "id" : "654e1db9-71a1-4d04-ba21-5059f169d4b1",
    "prId" : 13410,
    "prUrl" : "https://github.com/flutter/flutter/pull/13410#pullrequestreview-81952450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac759628-4cfa-4c5e-88aa-d190373c0860",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This could provide some more details about the difference between emulation enabled and disabled. E.g. when should you disable it?",
        "createdAt" : "2017-12-07T18:10:22Z",
        "updatedAt" : "2017-12-07T18:10:35Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d79d0923-030a-4c01-b668-a3e0652babc7",
        "parentId" : "ac759628-4cfa-4c5e-88aa-d190373c0860",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Good point: https://github.com/flutter/flutter/pull/13420",
        "createdAt" : "2017-12-07T18:39:07Z",
        "updatedAt" : "2017-12-07T18:39:07Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "23e6cb4525610fc5552965163e373a43e42ef90a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +452,456 @@  }\n\n  /// If `enabled` is true, enables text entry emulation via [enterText]. If\n  /// `enabled` is false, disables it.\n  ///"
  },
  {
    "id" : "d8261258-0abe-4ea3-8c9f-d5ee5672b0d0",
    "prId" : 15957,
    "prUrl" : "https://github.com/flutter/flutter/pull/15957#pullrequestreview-107141029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60ad25e-f672-4b3d-a145-6fc8c52ab517",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "You also wouldn't need to do this if you implemented it in the extension.",
        "createdAt" : "2018-03-27T03:57:38Z",
        "updatedAt" : "2018-03-27T17:53:11Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "75ccd0ab83c3632e9d106cd075aefc393a179163",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +460,464 @@      await waitFor(item, timeout: const Duration(milliseconds: 100));\n      isVisible = true;\n    } on DriverError {\n      // Assume that that waitFor timed out because the item isn't visible.\n    }"
  },
  {
    "id" : "e6cd47a8-e049-4e90-9bfe-b90a82c8264b",
    "prId" : 17594,
    "prUrl" : "https://github.com/flutter/flutter/pull/17594#pullrequestreview-120360240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1ae87b5-19d4-45f2-b1bd-1aa3cec7b5d9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I'll accept all the blame for the implicit rationale for these timeouts and delays. Please add some comments that explain exactly what's going on here, for the sake of the next person who's stuck with trying to understand what's going on...",
        "createdAt" : "2018-05-15T14:56:36Z",
        "updatedAt" : "2018-05-15T18:36:20Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "3c9ef6d2-afd4-42dd-9f72-bcba6a5e44fc",
        "parentId" : "c1ae87b5-19d4-45f2-b1bd-1aa3cec7b5d9",
        "authorId" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "body" : "Good idea -- done!",
        "createdAt" : "2018-05-15T18:30:35Z",
        "updatedAt" : "2018-05-15T18:36:20Z",
        "lastEditedBy" : "e51c798e-576f-47fe-bcd8-577d78e2a5a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd39cc8e3296a03dbc6d4e5a1785c38a53115b27",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +484,488 @@    // repeatedly until we either find the item or time out.\n    bool isVisible = false;\n    waitFor(item, timeout: timeout).then((Null _) { isVisible = true; });\n    await new Future<Null>.delayed(const Duration(milliseconds: 500));\n    while (!isVisible) {"
  },
  {
    "id" : "0d72e0e4-2249-46cd-ae83-24577be3ffd9",
    "prId" : 19630,
    "prUrl" : "https://github.com/flutter/flutter/pull/19630#pullrequestreview-142596908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f274f743-cd01-4426-890e-d8c82c6d5bbb",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "Just curious: we stopped using underscore for unused parameters?",
        "createdAt" : "2018-07-31T02:46:40Z",
        "updatedAt" : "2018-08-01T23:12:40Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "b6e335e2-fdab-4ec9-aebd-a1994aa07ad8",
        "parentId" : "f274f743-cd01-4426-890e-d8c82c6d5bbb",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah at some point I realised that using `_` reduces the self-documenting aspect of the code. Not that \"value\" is much better than \"_\" but at least it's clear that it's not something like \"time\" or \"error\".",
        "createdAt" : "2018-08-01T23:12:08Z",
        "updatedAt" : "2018-08-01T23:12:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f171df23fba1ec5707fa108e2ca0ce36a367c9",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +484,488 @@    // repeatedly until we either find the item or time out.\n    bool isVisible = false;\n    waitFor(item, timeout: timeout).then((Null value) { isVisible = true; });\n    await new Future<Null>.delayed(const Duration(milliseconds: 500));\n    while (!isVisible) {"
  }
]