[
  {
    "id" : "0b008840-eed1-42d5-b3e8-b740543e2649",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327877536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "624168b6-85bb-4059-8ff4-ca365b614c06",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "nit: use Object instead of dynamic",
        "createdAt" : "2019-12-04T20:34:15Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "d050b0be-4f07-4af5-9622-b70bd62c4ed3",
        "parentId" : "624168b6-85bb-4059-8ff4-ca365b614c06",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "FYI",
        "createdAt" : "2019-12-05T21:52:20Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@    hostUrl ??= Platform.environment['VM_SERVICE_URL'];\n    final Browser browser = browserNameToEnum(Platform.environment['BROWSER_NAME']);\n    final Map<String, dynamic> settings = <String, dynamic>{\n      'browser': browser,\n      'browser-dimension': Platform.environment['BROWSER_DIMENSION'],"
  },
  {
    "id" : "40b90d3c-5464-456f-b134-79b8c3052452",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327239723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43db0a12-be10-43bd-a973-aed95f31fcbd",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I think this command can throw a few different specialized exception types. It would be nice to have specific handling for the case where `window.$flutterDriver` is not defined (meaning we didn't set up the driver app correctly).",
        "createdAt" : "2019-12-04T20:35:22Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "5e8d8149-6bbc-48ae-b7a2-d5be0dee978b",
        "parentId" : "43db0a12-be10-43bd-a973-aed95f31fcbd",
        "authorId" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "body" : "The situation you mentioned would not happen. When establishing the connection, we will wait until `window.$flutterDriver` is installed. ",
        "createdAt" : "2019-12-05T00:15:25Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@    Map<String, dynamic> response;\n    final Map<String, String> serialized = command.serialize();\n    try {\n      final dynamic data = await _connection.sendCommand('window.\\$flutterDriver(\\'${jsonEncode(serialized)}\\')', command.timeout);\n      response = data != null ? json.decode(data as String) as Map<String, dynamic> : <String, dynamic>{};"
  },
  {
    "id" : "5bcb6cd4-b36d-49ac-ab14-9959d9b0158e",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327136383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ac5aa5-7107-4178-82a5-88cca95147be",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Here and elsewhere, for the methods that are completely unimplemented for the web, it should be documented on the base class methods. Similarly for methods that are only supported in chrome",
        "createdAt" : "2019-12-04T20:37:10Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\n  @override\n  Future<void> startTracing({\n    List<TimelineStream> streams = const <TimelineStream>[TimelineStream.all],\n    Duration timeout = kUnusuallyLongTimeout,"
  },
  {
    "id" : "35aaf3e5-e771-43c0-907e-8c76d15960ca",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-327211706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37336efe-2e2f-452b-a413-716037732db0",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Does driver.quit return a future? If so it should be returned or awaited",
        "createdAt" : "2019-12-04T20:40:08Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "6464d89c-4fa5-4d28-89af-430c1c3cfa25",
        "parentId" : "37336efe-2e2f-452b-a413-716037732db0",
        "authorId" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "body" : "No it doesn't. It returns void.",
        "createdAt" : "2019-12-04T22:57:56Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +244,248 @@  /// Closes the WebDriver.\n  Future<void> close() async {\n    _driver.quit();\n  }\n}"
  },
  {
    "id" : "d0badd96-8a62-4f29-9b7e-81e01709b1c2",
    "prId" : 45951,
    "prUrl" : "https://github.com/flutter/flutter/pull/45951#pullrequestreview-333479083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f8f3fc9-e119-4330-90f9-83638761f1e8",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Can you add the explanation on how to run this mode in a doc comment here?",
        "createdAt" : "2019-12-17T00:44:15Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "5cf17cec-f9ad-4f8e-ba2b-09c89b6651c5",
        "parentId" : "6f8f3fc9-e119-4330-90f9-83638761f1e8",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Essentially the sets to test from above",
        "createdAt" : "2019-12-17T00:46:27Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "0eb8eec0-a40b-4c42-88a6-8145b06bf81b",
        "parentId" : "6f8f3fc9-e119-4330-90f9-83638761f1e8",
        "authorId" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "body" : "Done",
        "createdAt" : "2019-12-17T18:15:11Z",
        "updatedAt" : "2019-12-17T22:30:44Z",
        "lastEditedBy" : "fc83b6f9-d55d-466f-9f23-d9b1e9a41997",
        "tags" : [
        ]
      }
    ],
    "commit" : "85d3d6562f15d6499b125d4f4428ef1e15b26e75",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +21,25 @@export 'web_driver_config.dart';\n\n/// An implementation of the Flutter Driver using the WebDriver.\n///\n/// Example of how to test WebFlutterDriver:"
  }
]