[
  {
    "id" : "0ae4af08-1bd9-4bdc-8694-41f088a08db6",
    "prId" : 23759,
    "prUrl" : "https://github.com/flutter/flutter/pull/23759#pullrequestreview-186351370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5069cc51-8917-444a-ae3a-174cbb80a513",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "You may want to avoid the term \"dark mode\" as per our conversation today.",
        "createdAt" : "2018-12-15T05:07:20Z",
        "updatedAt" : "2018-12-19T02:52:43Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "2859aa42-69a9-4482-8648-1130326ef99b",
        "parentId" : "5069cc51-8917-444a-ae3a-174cbb80a513",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I forgot what we said :S. Can you remind me? ",
        "createdAt" : "2018-12-19T01:05:37Z",
        "updatedAt" : "2018-12-19T02:52:43Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0cc8fc1fd15cf27ba5f1c0431547b433e6c9112",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +23,27 @@  static const Color activeGreen = Color(0xFF4CD964);\n\n  /// iOS 12's default dark mode color. Used in place of the [activeBlue] color\n  /// as the default active elements' color when the theme's brightness is dark.\n  ///"
  },
  {
    "id" : "5dfc01cf-1b9b-421c-98e0-f3c0970b98a3",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-272194038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d320841-d3e0-4e6e-82ef-7f915067b1f7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The documentation here and elsewhere would be easier to understand if it avoided synonyms like \"interface elevation\", \"vibrancy\", and \"accessibility contrast\", and etc, and only used terms that come from the API, like [MediaQuery.platformBrightness], [MediaQuery.highContrast] (TBD) and, [CupertinoUserInterfaceLevel]. ",
        "createdAt" : "2019-08-08T15:10:24Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +369,373 @@  /// changed to adapt to the given [BuildContext].\n  ///\n  /// For example, if the given [BuildContext] indicates the widgets in the subtree\n  /// should be displayed in dark mode (the surrounding [CupertinoTheme]'s [CupertinoThemeData.brightness]\n  /// or [MediaQuery]'s [MediaQueryData.platformBrightness] is [PlatformBrightness.dark]),"
  },
  {
    "id" : "a6859384-e2f0-45ad-9fa5-b946ba0337ac",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-274645082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b6a176f-3bdd-4744-a0b6-be7c21211a6c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Best to assert that all of the color parameters are non-null; if the `CupertinoDynamicColor._` constructor fails the error message is likely to be confusing.",
        "createdAt" : "2019-08-12T23:55:40Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "acca9b7c-6220-41c1-bb00-ef914f8ba470",
        "parentId" : "3b6a176f-3bdd-4744-a0b6-be7c21211a6c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "If I remember correctly if you're calling a constructor from the same class (i.e. not `super.foo`) you won't be able to add asserts or any other expressions.",
        "createdAt" : "2019-08-13T22:45:57Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "bb32d63c-0d0f-43a8-b24d-c1f646bbd729",
        "parentId" : "3b6a176f-3bdd-4744-a0b6-be7c21211a6c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "oh never mind.",
        "createdAt" : "2019-08-13T22:49:13Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "0199d6f2-8713-4d87-bcfa-6d84dc55eb3c",
        "parentId" : "3b6a176f-3bdd-4744-a0b6-be7c21211a6c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Never mind the never mind... although the static analyzer didn't give me trouble, when I tried to run `flutter test` it failed to compile:\r\n>  src/cupertino/colors.dart:148:3: Error: Final field '_colorMap' is not initialized by this constructor.\r\nTry to initialize the field using an initializing formal or a field initializer.\r\n  CupertinoDynamicColor({\r\n  ^\r\nlib/src/cupertino/colors.dart:321:33: Context: '_colorMap' is defined here.\r\n  final List<List<List<Color>>> _colorMap;\r\n                                ^^^^^^^^^\r\n",
        "createdAt" : "2019-08-14T02:41:54Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +154,158 @@    @required Color highContrastElevatedColor,\n    @required Color darkHighContrastElevatedColor,\n  }) : this._(\n         color,\n         <List<List<Color>>>["
  },
  {
    "id" : "6a995631-8b2a-48c8-8a30-1ae2d33c2aba",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-274005390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53f9f665-6064-4ad9-a1d3-4f0676cf48c2",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If the CupertinoDyanmicColor asserts that all of its parameters are non-null, this shouldn't be needed.",
        "createdAt" : "2019-08-12T23:56:37Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +211,215 @@    Color value,\n    this._colorMap,\n  ) : assert(() {\n        Iterable<Object> expand(Object a) {\n          return (a is Iterable<Object>) ? a.expand<Object>(expand) : <Object>[a];"
  },
  {
    "id" : "d9ee16ec-751f-453d-88c1-08d552d9d206",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-274005390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dff6220-0517-4b7d-9b6d-792e12d8cb30",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This is pretty slick. There should be tests for it.",
        "createdAt" : "2019-08-13T00:11:28Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +445,449 @@\n  @override\n  String toString() {\n    String toString(String name, Color color) {\n      final String marker = color.value == value ? '*' : '';"
  },
  {
    "id" : "5b3e75be-a59f-445f-b003-ad3d626c6427",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-275766012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f87095fd-66c6-4640-95f0-c90f3bf0b725",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This class should have lerp and debugFillProperties methods, see packages/flutter/lib/src/material/tooltip_theme.dart for examples.\r\n\r\nThere are some boilerplate-style tests to write for FooData classes like this. See the first 3 tests in packages/flutter/tests/material/tooltip_theme_tests.dart for examples.",
        "createdAt" : "2019-08-13T00:27:08Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ebbc45ae-12b6-4f54-bd02-4dbd3e8a32fe",
        "parentId" : "f87095fd-66c6-4640-95f0-c90f3bf0b725",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "What would be the use case of lerping `CupertinoSystemColorsData`?",
        "createdAt" : "2019-08-14T00:40:45Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "4b21107c-e4f4-46cb-ad0a-68837e31cb81",
        "parentId" : "f87095fd-66c6-4640-95f0-c90f3bf0b725",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Not sure it applies in this case, but in other theme data classes they are usually a field in the overall ThemeData which needs to lerp all of its fields in its own lerp function (which is used for animating theme changes).",
        "createdAt" : "2019-08-16T01:08:49Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "f698de91-1041-42f3-8b4c-85b4df6b20e5",
        "parentId" : "f87095fd-66c6-4640-95f0-c90f3bf0b725",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I can't really think of a use case where lerping the entire `CupertinoSystemColorsData`, and on iOS light/dark change doesn't seem to animate",
        "createdAt" : "2019-08-16T03:59:16Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 403,
    "diffHunk" : "@@ -1,1 +473,477 @@/// constructor).\n@immutable\nclass CupertinoSystemColorsData extends Diagnosticable {\n  /// Creates a color palette.\n  ///"
  },
  {
    "id" : "09a97c9a-f5c8-468e-aac1-d0e3dd83a211",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-275759097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba783284-a7e7-454e-bc60-fe1b539aa0d0",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Do we want to add a note here that they should probably switch over to using the dynamic and system colors?",
        "createdAt" : "2019-08-14T19:56:09Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "2ea06b0f-98b0-47ba-bd47-390e0c25243c",
        "parentId" : "ba783284-a7e7-454e-bc60-fe1b539aa0d0",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Now is probably not the best time, since we're still using the fallback values in `CupertinoSystemColors`, and we're not even using those new colors ourselves?  Maybe as the last step of dark mode?",
        "createdAt" : "2019-08-16T03:15:07Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +19,23 @@\n/// A palette of [Color] constants that describe colors commonly used when\n/// matching the iOS platform aesthetics.\nclass CupertinoColors {\n  CupertinoColors._();"
  },
  {
    "id" : "5f4656d9-39aa-4ac4-ab43-8975995ef4a0",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-275769953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c88d7772-9705-4db9-bcea-6d0d2b8f221b",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Can you explain this choice of data structure for _colorMap?  Is it just that you need to be able to group them and iterate them?",
        "createdAt" : "2019-08-15T22:44:24Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a45f866b-ad7f-4620-a990-6a2bd9d9563d",
        "parentId" : "c88d7772-9705-4db9-bcea-6d0d2b8f221b",
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "It does seem that this structure adds a complication without much benefit that I can see (but there is a good chance I am missing something here).\r\n\r\nHaving a 3-dimensional list doesn't document itself very well. For example is the first index based on brightness, elevation or contrast? Does a dark brightness map to a 0 or a 1 index?\r\n\r\nPerhaps a simpler approach would be to just treat the `CupertinoDynamicColor` as a data structure class with fields for each of the colors. The resolve methods would just choose which of the colors are needed based on the context properties. It would lead to a large if-then-else statement to pick which of the 8 colors it resolves to, but it would be explicit. I think it would also mean you wouldn't need the `_isPlatformBrightnessDependent` type functions as well.\r\n",
        "createdAt" : "2019-08-16T01:02:15Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "5b3c3aa0-4837-46c1-aeba-f8c5241b1988",
        "parentId" : "c88d7772-9705-4db9-bcea-6d0d2b8f221b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yes, also in case in the future more traits are needed to resolve a dynamic color, or some traits become non-binary, it's much easier to maintain the resolve method this way, than having a bunch of `if` statements, or with bit acrobatics.",
        "createdAt" : "2019-08-16T01:07:01Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "c45e5ec5-4dfa-49c0-905b-4e82217bfe76",
        "parentId" : "c88d7772-9705-4db9-bcea-6d0d2b8f221b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "updated the implementation of the getters, it should be more readable for the getters now.",
        "createdAt" : "2019-08-16T03:32:01Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "8ad7c8b6-45a7-4c0a-8ea2-b396ac2a3899",
        "parentId" : "c88d7772-9705-4db9-bcea-6d0d2b8f221b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think using a 3d list to represent the traits kinda mathematically makes sense, the 3 traits can be thought of as 3 orthogonal bases to form the whole trait space.\r\n\r\nSome of the values are enums so it's worse than a few `if else`'s, it's going to be nested `switch`es, because the style guide discourages using `==` for enum matching.  \r\n\r\nThere're also some negligible optimizations in it:\r\n- the `CupertinoDynamicColor.resolve` method is almost 0 copy because it just passes the reference of the array around.\r\n- `CupertinoDynamicColor.==`is also faster (just realized this and made the change).\r\n\r\n",
        "createdAt" : "2019-08-16T04:26:26Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +166,170 @@           ],\n         ],\n       );\n\n  /// Creates an adaptive [Color] that changes its effective color based on the"
  },
  {
    "id" : "7ad19ca2-5084-434b-a48b-fab427318adf",
    "prId" : 37719,
    "prUrl" : "https://github.com/flutter/flutter/pull/37719#pullrequestreview-275764751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83c981cc-5231-4a63-bad1-f264ad1b3b98",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Why do we need the `_isPlatformBrightnessDependent` needed here? (and similar for the other dependent calls below)",
        "createdAt" : "2019-08-16T01:04:58Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "a3eb821a-07c5-4c92-aee3-c8e38871febe",
        "parentId" : "83c981cc-5231-4a63-bad1-f264ad1b3b98",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "It's to avoid registering unnecessary dependencies.  A widget that only uses a brightness independent `CupertinoDynamicColor` should not be rebuilt when platform brightness changes.",
        "createdAt" : "2019-08-16T03:51:34Z",
        "updatedAt" : "2019-08-22T00:12:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "5202fc64fdd32918588795dc08a7247c14fd10c8",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +394,398 @@\n    // If this CupertinoDynamicColor cares about brightness.\n    if (_isPlatformBrightnessDependent) {\n      final Brightness brightness = CupertinoTheme.brightnessOf(context, nullOk: nullOk) ?? Brightness.light;\n      brightnessNumber = brightness.index;"
  }
]