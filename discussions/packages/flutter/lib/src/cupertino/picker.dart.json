[
  {
    "id" : "470a93b0-1d1c-4034-9a7b-28339e4325ca",
    "prId" : 19789,
    "prUrl" : "https://github.com/flutter/flutter/pull/19789#pullrequestreview-145425701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e636c487-0d14-4e4e-87ff-d68b7f1a07ad",
        "parentId" : null,
        "authorId" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "body" : "What happens if we start building a lot of children?  Will we continue to keep children we can't see in memory?",
        "createdAt" : "2018-08-10T21:18:34Z",
        "updatedAt" : "2018-08-13T17:35:19Z",
        "lastEditedBy" : "ca9efae2-2bf8-426e-9b8e-d11f86f60cb9",
        "tags" : [
        ]
      },
      {
        "id" : "6fd0901c-73cc-4132-83a6-eda63a4d763d",
        "parentId" : "e636c487-0d14-4e4e-87ff-d68b7f1a07ad",
        "authorId" : "9e76ad22-0295-4cbe-a82f-bf7dac1200a4",
        "body" : "yes, that's right.",
        "createdAt" : "2018-08-10T23:46:03Z",
        "updatedAt" : "2018-08-13T17:35:19Z",
        "lastEditedBy" : "9e76ad22-0295-4cbe-a82f-bf7dac1200a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "89452a972a5ba3cdb6720a438f43ff5d6082fa69",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +73,77 @@  /// All of the children provided by the builder are cached and reused, so\n  /// normally the builder is only called once for each index (except when\n  /// rebuilding - the cache is cleared).\n  ///\n  /// The [itemBuilder] argument must not be null. The [childCount] argument"
  },
  {
    "id" : "9d6a0e9d-2ec6-4aad-bd01-2c44309d1e4f",
    "prId" : 23551,
    "prUrl" : "https://github.com/flutter/flutter/pull/23551#pullrequestreview-169455831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da2dc583-4e4f-4274-ac79-ef8cd1044c8d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should we document somewhere that semantics for this widget only work well if children are wrapped in IndexedSemantics?",
        "createdAt" : "2018-10-29T20:02:40Z",
        "updatedAt" : "2018-11-01T04:19:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2b32f156-6954-4366-9cda-52cf4c32a7d0",
        "parentId" : "da2dc583-4e4f-4274-ac79-ef8cd1044c8d",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Actually, never mind. Looks like the CupertinoPicker is always in charge of instantiating the delegate, so this is a purely internal issue. ",
        "createdAt" : "2018-10-29T20:03:32Z",
        "updatedAt" : "2018-11-01T04:19:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bd3568716bf6dbd6685bf1d1b6c9c88e2d67256",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +391,395 @@    scrollable.visitChildren((SemanticsNode child) {\n      assert(child.indexInParent != null);\n      indexedChildren[child.indexInParent] = child;\n      return true;\n    });"
  },
  {
    "id" : "587017c6-e8cb-47c3-bf6e-8a50443c1d58",
    "prId" : 23551,
    "prUrl" : "https://github.com/flutter/flutter/pull/23551#pullrequestreview-170535442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7259a7d5-cc43-4071-8810-0d136fbb4f4a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "You'd need didUpdateWidget here too no?",
        "createdAt" : "2018-10-29T20:11:23Z",
        "updatedAt" : "2018-11-01T04:19:32Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "8fedebe0-1f8c-4f40-b94e-05345bf71494",
        "parentId" : "7259a7d5-cc43-4071-8810-0d136fbb4f4a",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Added didUpdateWidget and a test case to confirm that this works properly",
        "createdAt" : "2018-11-01T02:13:41Z",
        "updatedAt" : "2018-11-01T04:19:32Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bd3568716bf6dbd6685bf1d1b6c9c88e2d67256",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +187,191 @@    _controller?.dispose();\n    super.dispose();\n  }\n\n  void _handleSelectedItemChanged(int index) {"
  },
  {
    "id" : "e796e3b5-3d02-48b1-b6ae-e2e8bc8bd6a2",
    "prId" : 24085,
    "prUrl" : "https://github.com/flutter/flutter/pull/24085#pullrequestreview-173212302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92250a89-bf46-41b7-a7dd-c004dccf6b5b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'm not sure I understand what's the visual effect we're going for here. It's to keep the alpha doubled up inside the lens if we're doubling up with a screen outside the lens too? ",
        "createdAt" : "2018-11-08T21:06:43Z",
        "updatedAt" : "2018-11-09T20:16:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "f5d3a42b-3f68-42a6-828b-3076dbfca8ab",
        "parentId" : "92250a89-bf46-41b7-a7dd-c004dccf6b5b",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Exactly. It looks a lot better with this feature.",
        "createdAt" : "2018-11-08T21:48:10Z",
        "updatedAt" : "2018-11-09T20:16:03Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "164f9a20-0f55-47ef-9b7e-bd2dc40aa05c",
        "parentId" : "92250a89-bf46-41b7-a7dd-c004dccf6b5b",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Oh ok. Make this check on line 334 instead. In general, don't add more things to the tree and then make them no-op with blank containers (especially for exceptional cases) since they add weight. ",
        "createdAt" : "2018-11-08T23:01:36Z",
        "updatedAt" : "2018-11-09T20:16:03Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6e4943407ce2efba2748b01ed7753c3dbca4afa",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +280,284 @@  }\n\n  Widget _buildUnderMagnifierScreen() {\n    final Color foreground = widget.backgroundColor?.withAlpha(\n        (widget.backgroundColor.alpha * _kForegroundScreenOpacityFraction).toInt()"
  },
  {
    "id" : "0c675825-baf3-4eea-beb3-358eb4d9bf0c",
    "prId" : 24529,
    "prUrl" : "https://github.com/flutter/flutter/pull/24529#pullrequestreview-176541611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24f20d8c-86ca-428e-a7d9-9df231787cf5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Instead of returning empty containers in various places, just don't add _buildGradientScreen and _buildMagnifierScreen to the stack when backgroundColor is null. This way, you can add asserts to _buildGradientScreen, _buildMagnifierScreen and _buildUnderMagnifierScreen too so the null handling isn't everywhere. ",
        "createdAt" : "2018-11-19T23:14:06Z",
        "updatedAt" : "2018-11-19T23:14:06Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a23066d237d129283f7a1c0db0d8499cbfe6bc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +216,220 @@      return Container();\n\n    final Color widgetBackgroundColor = widget.backgroundColor ?? const Color(0xFFFFFFFF);\n    return Positioned.fill(\n      child: IgnorePointer("
  },
  {
    "id" : "9487bbfc-ded8-472c-b2ac-8f2e3e4e7092",
    "prId" : 65501,
    "prUrl" : "https://github.com/flutter/flutter/pull/65501#pullrequestreview-487415166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4143b5a-ca9f-4fa0-becd-bc6655193d5d",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : ":+1: ",
        "createdAt" : "2020-09-14T05:30:47Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a2ab132f1140145cc4960daa70cbe087cc6a44b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +75,79 @@    required this.onSelectedItemChanged,\n    required List<Widget> children,\n    this.selectionOverlay = const CupertinoPickerDefaultSelectionOverlay(),\n    bool looping = false,\n  }) : assert(children != null),"
  },
  {
    "id" : "05302459-c0f2-42ec-8d90-4cb7fc68491a",
    "prId" : 65501,
    "prUrl" : "https://github.com/flutter/flutter/pull/65501#pullrequestreview-487566344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9651746c-e8b7-47a2-9187-e4934cb4997f",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think that's the default for cupertino widgets so no need to state that (unless this is an exception). ",
        "createdAt" : "2020-09-14T06:40:08Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "f6d4eada-09cc-4b8c-a019-391097bce1e7",
        "parentId" : "9651746c-e8b7-47a2-9187-e4934cb4997f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: \r\nmaybe add\r\n```\r\nTypically this should not be set to a fully opaque color, as the currently selected item of the underlying [CupertinoPicker] should remain visible.\r\n\r\nDefaults to [CupertinoColors.tertiarySystemFill]. \r\n```",
        "createdAt" : "2020-09-14T06:49:55Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "b206bb83-d579-4f66-b1d8-18c2d83a78a3",
        "parentId" : "9651746c-e8b7-47a2-9187-e4934cb4997f",
        "authorId" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "body" : "Thank you very much, I have never written so many documents in English before, thank you very much for helping me.\r\n\r\nThe background default document already exists in the construction method, so I don't see the need to duplicate it.",
        "createdAt" : "2020-09-14T08:18:12Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "tags" : [
        ]
      },
      {
        "id" : "d79be2e5-f34d-4d97-84ab-568fddd51f8c",
        "parentId" : "9651746c-e8b7-47a2-9187-e4934cb4997f",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Generally the field itself is the place to document the specifics, so we should probably still document the default value there. I think having duplication like that is fine, as it's one short sentence and contains vital information.\r\non a side note, could you update the line breaks of the docs to <= 80 characters, so they conform to the style guide (https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#prefer-a-maximum-line-length-of-80-characters)?",
        "createdAt" : "2020-09-14T08:45:56Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "5b9a6889-4c8b-4d11-91a5-6b7aba66ef2d",
        "parentId" : "9651746c-e8b7-47a2-9187-e4934cb4997f",
        "authorId" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "body" : "It's been updated now.",
        "createdAt" : "2020-09-14T09:14:54Z",
        "updatedAt" : "2020-10-07T16:34:22Z",
        "lastEditedBy" : "c8957575-df86-4ab0-95f3-366ad3a4f537",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a2ab132f1140145cc4960daa70cbe087cc6a44b",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +363,367 @@\n  /// The color to fill in the background of the [CupertinoPickerDefaultSelectionOverlay].\n  /// It Support for use [CupertinoDynamicColor].\n  ///\n  /// Typically this should not be set to a fully opaque color, as the currently"
  },
  {
    "id" : "35aa72f8-c951-43af-b8c3-7b9444925c81",
    "prId" : 66024,
    "prUrl" : "https://github.com/flutter/flutter/pull/66024#pullrequestreview-491186992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8393c765-c9d1-4e02-82bf-133938d22a75",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same here.",
        "createdAt" : "2020-09-17T17:18:29Z",
        "updatedAt" : "2020-09-22T19:31:57Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "be3f6838-4f0e-49a4-a954-a711bafd2a0c",
        "parentId" : "8393c765-c9d1-4e02-82bf-133938d22a75",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Done",
        "createdAt" : "2020-09-18T06:37:37Z",
        "updatedAt" : "2020-09-22T19:31:57Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e7c1560a7707102e32dae21dd17151452388940",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +337,341 @@    assert(debugCheckHasDirectionality(context));\n    renderObject\n      ..textDirection = Directionality.of(context)!\n      ..controller = scrollController;\n  }"
  },
  {
    "id" : "08fb5e01-d58c-4e64-94fe-e2182623be71",
    "prId" : 66024,
    "prUrl" : "https://github.com/flutter/flutter/pull/66024#pullrequestreview-491209723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2198c188-48d7-4026-bad9-825261dde8ee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "here the code assumes `resolve` may return null, but on line 256 it assumes it will return non-null",
        "createdAt" : "2020-09-17T19:59:32Z",
        "updatedAt" : "2020-09-22T19:31:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "606c7649-bdf5-4f7c-a328-613a885403ad",
        "parentId" : "2198c188-48d7-4026-bad9-825261dde8ee",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "```\r\nconst Color _kHighlighterBorder = CupertinoDynamicColor.withBrightness(\r\n  color: Color(0x33000000),\r\n  darkColor: Color(0x33FFFFFF),\r\n);\r\n```\r\n\r\nCompletely specifies _kHighlighterBorder's color properties so I think line 256 can correctly assume that resolve's return value is non-null.",
        "createdAt" : "2020-09-17T21:21:46Z",
        "updatedAt" : "2020-09-22T19:31:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "1f7715d1-18ed-47e6-a995-244c9986a253",
        "parentId" : "2198c188-48d7-4026-bad9-825261dde8ee",
        "authorId" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "body" : "Here it is non-null because it is used in a non-null context (`BoxDecoration(color: resolvedBackgroundColor)` L308). L256 required a null check because it is used in a non-null context (`BorderSide(width: 0.0, color: resolvedBorderColor)`)",
        "createdAt" : "2020-09-18T07:20:15Z",
        "updatedAt" : "2020-09-22T19:31:57Z",
        "lastEditedBy" : "56ac428d-9cbf-4129-a73c-504eecfd585b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e7c1560a7707102e32dae21dd17151452388940",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +275,279 @@  @override\n  Widget build(BuildContext context) {\n    final Color? resolvedBackgroundColor = CupertinoDynamicColor.resolve(widget.backgroundColor, context);\n\n    final Widget result = DefaultTextStyle("
  }
]