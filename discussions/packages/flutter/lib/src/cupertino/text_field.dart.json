[
  {
    "id" : "bf79cc69-4443-4aa3-93d5-40ccc1d88fac",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165882153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2625599c-9656-49a9-ab3e-46e113b46bbf",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Out of curiosity, where did the letter spacing come from?",
        "createdAt" : "2018-10-17T20:15:29Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "e7b5f3f2-9064-4521-a1b3-66d395044221",
        "parentId" : "2625599c-9656-49a9-ab3e-46e113b46bbf",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Good point. Adding comments in code about their provenance.",
        "createdAt" : "2018-10-18T00:01:19Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@  fontFamily: '.SF Pro Text',\n  fontSize: 17.0,\n  letterSpacing: -0.38,\n  color: CupertinoColors.black,\n  decoration: TextDecoration.none,"
  },
  {
    "id" : "1b3a03c5-d68d-4049-88f3-11deb279734c",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165882775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6971e997-7a0d-4692-8fb9-587ce8a4cd41",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "A thought on all of these constants we have throughout cupertino files...I'm thinking that maybe we should aggregate all such constants in a single cupertino file so that other developers can use them, if desired.  I'm sure developers will need to create their own iOS styled widgets and it would be nice if they had a way to ensure they're using the same colors, border radii, etc. that we use.",
        "createdAt" : "2018-10-17T20:17:00Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "ee0bf44f-3704-4e6f-a2e2-bdb101cebc3c",
        "parentId" : "6971e997-7a0d-4692-8fb9-587ce8a4cd41",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I agree. Common ones should be in cupertino/colors.dart. Though iOS doesn't really semantically catalog them in a public place so I hesitate to put new ones in there each time I encounter a new color since namespace real estate is valuable. I generally comb the code each time I see a color and if I can figure out a pattern, I add it to CupertinoColors. For the ones that are seemingly domain specific like these ones as far as I can tell for now, I leave them private in their place of use.",
        "createdAt" : "2018-10-18T00:03:59Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@\n// Value extracted via color reader from iOS simulator.\nconst Color _kSelectionHighlightColor = Color(0x667FAACF);\nconst Color _kInactiveTextColor = Color(0xFFC2C2C2);\nconst Color _kDisabledBackground = Color(0xFFFAFAFA);"
  },
  {
    "id" : "59052d10-bc55-4410-a2ed-3874d15aec35",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165883142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "456b139f-75fd-4870-8958-5534092d5042",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Can you describe what a \"text field overlay\" is?",
        "createdAt" : "2018-10-17T20:17:44Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "6208c68e-cbd1-491a-8332-b53eca838dcf",
        "parentId" : "456b139f-75fd-4870-8958-5534092d5042",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Adding more text in a next paragraph",
        "createdAt" : "2018-10-18T00:06:01Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@const Color _kDisabledBackground = Color(0xFFFAFAFA);\n\n/// Visibility of text field overlays based on the state of the current text entry.\n///\n/// Used to toggle the visibility behavior of the optional decorating widgets"
  },
  {
    "id" : "58a6a632-3934-429d-9fad-6fde42cf1553",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165885194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96f14b11-f678-46fb-ba7d-a6d713837e11",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I think a couple of code snippets here would probably be much more clear than a description of what to do.  You can show a code snippet for setting an initial value, and a code snippet for selecting text.",
        "createdAt" : "2018-10-17T20:20:33Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "5c57a759-7201-4af6-9173-38e27354386a",
        "parentId" : "96f14b11-f678-46fb-ba7d-a6d713837e11",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Good point. Adding",
        "createdAt" : "2018-10-18T00:16:59Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@/// calls the [onSubmitted] callback.\n///\n/// To control the text that is displayed in the text field, use the\n/// [controller]. For example, to set the initial value of the text field, use\n/// a [controller] that already contains some text such as:"
  },
  {
    "id" : "b974b8de-5f4a-4951-80f7-091c89dce4b6",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165885296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c011cb6-3371-4f6a-bd90-fd6f81dd2917",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "Do we want people to be able to control this?  Does a UITextField ever not have the decoration in normal iOS development?",
        "createdAt" : "2018-10-17T20:21:15Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "e14fbb9c-2c56-4963-b48d-14ff210f8ad0",
        "parentId" : "8c011cb6-3371-4f6a-bd90-fd6f81dd2917",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Yes, the iOS text fields are fairly customizable",
        "createdAt" : "2018-10-18T00:17:33Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +113,117 @@/// observe changes to the text, selection, and composing region).\n///\n/// The text field has an overridable [decoration] that, by default, draws a\n/// rounded rectangle border around the text field. If you set the [decoration]\n/// property to null, the decoration will be removed entirely."
  },
  {
    "id" : "a6ad53f8-82c1-4692-b192-424b5c882658",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-165885751",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d00c97f4-94b0-431c-aaf7-77baae89c185",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "I think there's a connection here with decoration.  I think we either need to impose iOS styling for both the hint text and the decoration, or not enforce styling for either.  If we want to allow a custom decoration, then we should also allow a custom text style for the hint text.\r\n\r\nI know we've talked a bit about this before, but I would again consider an enforcement of iOS styling with widgets that are meant to replicate iOS widgets.  We can provide the constituent pieces if people want to assemble their own iOS-ish widgets, but I'm still concerned that people can instantiate specific iOS widgets that then look nothing like the actual iOS widgets....",
        "createdAt" : "2018-10-17T20:24:37Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "209f8918-0c5e-44a2-b11d-a15f0b8c6736",
        "parentId" : "d00c97f4-94b0-431c-aaf7-77baae89c185",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "This is to the iOS convention. iOS allows fairly flexible decoration around the box and control of the font. But the single font knob controls both the text entry and the placeholder text. Thus strings only for both the TextEditingController's text and the placeholder argument.",
        "createdAt" : "2018-10-18T00:19:57Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@  ///\n  /// To provide a hint placeholder text that appears when the text entry is\n  /// empty, pass a [String] to the [placeholder] parameter.\n  ///\n  /// The [maxLines] property can be set to null to remove the restriction on"
  },
  {
    "id" : "dbce2dcc-d59d-4a0b-8ac2-e8a829095201",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-166294695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee36fb7c-429c-41a8-9c65-3454ca7054c2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nit: blank line between an enum value and the next's dartdoc",
        "createdAt" : "2018-10-18T16:49:23Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "57f19188-8549-41d5-b0c0-2f1e2bedab30",
        "parentId" : "ee36fb7c-429c-41a8-9c65-3454ca7054c2",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Thanks for review. Done",
        "createdAt" : "2018-10-18T21:03:29Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@\n  /// Always show the overlay regardless of the text entry state.\n  always,\n}\n"
  },
  {
    "id" : "c4fb7012-acf5-4451-9461-ec9aca08e0f6",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-166294717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fb6b658-8b57-4a60-bd8c-e46396133487",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "sample code should be in a `## Sample code` section so it gets analyzed.",
        "createdAt" : "2018-10-18T16:50:44Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c4409e5e-5d2e-4387-99cb-19b78bcbe875",
        "parentId" : "2fb6b658-8b57-4a60-bd8c-e46396133487",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "done",
        "createdAt" : "2018-10-18T21:03:33Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@///   }\n/// }\n/// ```\n///\n/// The [controller] can also control the selection and composing region (and to"
  },
  {
    "id" : "3be3472f-d270-470b-b9eb-87fc574ffd68",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-166294790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d8133f7-278b-4f87-9feb-4e6a97763093",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nits: `else` should be on the same line as the `}`.\r\nIf one block has `{}`, all should.",
        "createdAt" : "2018-10-18T16:53:53Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e80f68b8-8c3f-4573-b0a4-d3df2c0c4296",
        "parentId" : "7d8133f7-278b-4f87-9feb-4e6a97763093",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "pasta copy",
        "createdAt" : "2018-10-18T21:03:42Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 436,
    "diffHunk" : "@@ -1,1 +434,438 @@      _controller.addListener(updateKeepAlive);\n    } else if (widget.controller != null && oldWidget.controller == null) {\n      _controller = null;\n    }\n    final bool isEnabled = widget.enabled ?? true;"
  },
  {
    "id" : "abc01ccf-12b3-4764-83b1-30041ecd3f72",
    "prId" : 23194,
    "prUrl" : "https://github.com/flutter/flutter/pull/23194#pullrequestreview-166295024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c59710c-8361-4fd4-9ea3-094b4dd9d3ef",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "assert that attachment is non-null before the switch, then you can remove this assert.",
        "createdAt" : "2018-10-18T16:54:31Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "0d9aa2b4-26b5-4156-a287-bee8e7bc59fc",
        "parentId" : "8c59710c-8361-4fd4-9ea3-094b4dd9d3ef",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "not sure if I understood correctly. This is just to make sure adding new enum values in the future fails visibly",
        "createdAt" : "2018-10-18T21:04:17Z",
        "updatedAt" : "2018-10-22T20:41:45Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "522b7e3165502153249ea4691c78d72e32e1b019",
    "line" : 488,
    "diffHunk" : "@@ -1,1 +486,490 @@        return !hasText;\n    }\n    assert(false);\n    return null;\n  }"
  },
  {
    "id" : "c500c3bb-ed24-4ee8-aab8-71b47bb2e199",
    "prId" : 24034,
    "prUrl" : "https://github.com/flutter/flutter/pull/24034#pullrequestreview-175634754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a660c074-3c43-4496-8276-f8ee90f5d7c4",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "`return _lastTapOffset != null`",
        "createdAt" : "2018-11-16T00:57:56Z",
        "updatedAt" : "2018-11-16T01:36:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "cb5a50d6-9358-4fc9-b505-0f75ba79a82a",
        "parentId" : "a660c074-3c43-4496-8276-f8ee90f5d7c4",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I'm not just returning there. It does more stuff after the if :)",
        "createdAt" : "2018-11-16T01:45:53Z",
        "updatedAt" : "2018-11-16T01:45:53Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "c04ac4c1-0bc8-4aff-ba7d-93a196b32376",
        "parentId" : "a660c074-3c43-4496-8276-f8ee90f5d7c4",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Sorry about that. I blame code review tunnel vision.",
        "createdAt" : "2018-11-16T02:07:15Z",
        "updatedAt" : "2018-11-16T02:07:15Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4b0448a67de60b79dabcd386c9c10d652fbca9c",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +509,513 @@  bool _isWithinDoubleTapTolerance(Offset secondTapOffset) {\n    assert(secondTapOffset != null);\n    if (_lastTapOffset == null) {\n      return false;\n    }"
  },
  {
    "id" : "72630292-c8ad-4f39-9d14-9fa43686c325",
    "prId" : 24034,
    "prUrl" : "https://github.com/flutter/flutter/pull/24034#pullrequestreview-175634852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b717eb3-2d2d-4b18-9ca2-42739ccc4852",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Maybe at some point in the future we should factor this into a reusable something (like a gesture recognizer) that just handled tap up and down and cancel events and mapped them to a double tap (or multitap) callback.",
        "createdAt" : "2018-11-16T01:09:10Z",
        "updatedAt" : "2018-11-16T01:36:08Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "953c0e88-72ee-4754-b602-fb5c09d3ec5a",
        "parentId" : "4b717eb3-2d2d-4b18-9ca2-42739ccc4852",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Perhaps, but having a single long recognizer instead of multiple small discreet recognizers means that one recognizer needs to have hooks to call back all tap/long tap/force tap/drag combinations etc since none of them are second class citizen enough to not be included in a recognizer that just takes in taps up/down. \r\n\r\nLeaving it scenario specific for now until we see other scenarios using something of this complexity.",
        "createdAt" : "2018-11-16T01:48:35Z",
        "updatedAt" : "2018-11-16T01:48:35Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "79738df6-992f-41d7-990e-19e5826aa19b",
        "parentId" : "4b717eb3-2d2d-4b18-9ca2-42739ccc4852",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Definitely. Didn't mean to imply that anything needed to be done now.",
        "createdAt" : "2018-11-16T02:07:52Z",
        "updatedAt" : "2018-11-16T02:07:53Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4b0448a67de60b79dabcd386c9c10d652fbca9c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +422,426 @@\n  // Is shortly after a previous single tap when not null.\n  Timer _doubleTapTimer;\n  Offset _lastTapOffset;\n  // True if second tap down of a double tap is detected. Used to discard"
  },
  {
    "id" : "f7374b0c-c417-4e22-93af-4cdd659bfb65",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190469062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75826feb-0207-416a-a830-50e80f545372",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add comment describing why it needs to be specified per platform, and how it's derived. ",
        "createdAt" : "2019-01-08T22:20:05Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +42,46 @@// This value is in device pixels, not logical pixels as is typically used\n// throughout the codebase.\nconst int _iOSHorizontalCursorOffsetPixels = -2;\n\n/// Visibility of text field overlays based on the state of the current text entry."
  },
  {
    "id" : "6e036ad3-8735-49a3-a764-dec0c404a871",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-192343680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1210b618-0b31-48a9-ba53-00ab3533494b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Since we conventionally use \"pixels\" to refer to logical pixels in most of the codebase, specify that it's physical pixels either in the name or in the comments.",
        "createdAt" : "2019-01-14T20:19:27Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +42,46 @@// This value is in device pixels, not logical pixels as is typically used\n// throughout the codebase.\nconst int _iOSHorizontalCursorOffsetPixels = -2;\n\n/// Visibility of text field overlays based on the state of the current text entry."
  },
  {
    "id" : "6fc4d302-a1d0-4b9d-a9b4-b45bcb6753fb",
    "prId" : 25683,
    "prUrl" : "https://github.com/flutter/flutter/pull/25683#pullrequestreview-192992434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72eb3d1c-2309-4ef6-ab29-6ac2db616987",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "these two causes seem very wrong to me\r\n\r\ncc @xster",
        "createdAt" : "2019-01-16T06:49:11Z",
        "updatedAt" : "2019-01-16T06:49:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bef0607b52e8025966831ceb2654e9b5593010e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +462,466 @@    // the toolbar and handles.\n    _renderEditable.selectWordsInRange(from: details.globalPosition, cause: SelectionChangedCause.doubleTap);\n  }\n\n  void _handleSingleTapUp(TapUpDetails details) {"
  },
  {
    "id" : "8e9433c6-8799-40a3-8196-64955749505e",
    "prId" : 27612,
    "prUrl" : "https://github.com/flutter/flutter/pull/27612#pullrequestreview-206043035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffaf699c-f099-4b9d-9926-835ab5b9d98c",
        "parentId" : null,
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "This is technically a breaking change.  Can you elaborate on why this was changed?  Also, do you plan to announce this breaking change when merged?",
        "createdAt" : "2019-02-19T22:21:27Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      },
      {
        "id" : "33a58166-156a-47f4-b7b4-fde970c54a76",
        "parentId" : "ffaf699c-f099-4b9d-9926-835ab5b9d98c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "I think I should talk to someone more familiar with Cupertino about the exact desired behavior here. This is the behavior in material, and the way strut inherits the textStyle's properties is dependent on the textstyle being complete. ",
        "createdAt" : "2019-02-20T01:04:05Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "71ff489e-1a02-4978-955a-d96d1ee206ff",
        "parentId" : "ffaf699c-f099-4b9d-9926-835ab5b9d98c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "@xster ",
        "createdAt" : "2019-02-20T21:44:57Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "99a7b7a1-8a63-4337-bbc0-b8b9b1bfab09",
        "parentId" : "ffaf699c-f099-4b9d-9926-835ab5b9d98c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Talked with xster and we have agreed the change here is reasonable. I have sent a breaking change announce out and added the API break tag. The change here should be minor and can be bypassed with the `inherit: false` parameter in TextStyle",
        "createdAt" : "2019-02-20T22:50:18Z",
        "updatedAt" : "2019-02-23T07:37:27Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0642aa749afd3ea3ff4b5fd453d36a1ba2e8704f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +624,628 @@    }\n    final CupertinoThemeData themeData = CupertinoTheme.of(context);\n    final TextStyle textStyle = themeData.textTheme.textStyle.merge(widget.style);\n    final Brightness keyboardAppearance = widget.keyboardAppearance ?? themeData.brightness;\n"
  },
  {
    "id" : "acdf8e0d-33c4-4633-854b-ccf8324ece19",
    "prId" : 28001,
    "prUrl" : "https://github.com/flutter/flutter/pull/28001#pullrequestreview-213669211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46444446-938a-4633-91b5-c1c44b1bdd0b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Please mention in this doc that it's not just the style that's exclusively used but that it overrides the [style] parameter (which itself inherits from the theme).\r\n\r\nAlso mention whether it can be null and what does it mean when it is.",
        "createdAt" : "2019-03-12T21:54:11Z",
        "updatedAt" : "2019-03-27T03:28:54Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbf10dcb5736ca0f51883a3997ed79de26f633fa",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +246,250 @@  /// [TextStyle.inherit] as false.\n  ///\n  /// Defaults to the [style] property with w300 font weight and grey color.\n  ///\n  /// If specifically set to null, placeholder's style will be the same as [style]."
  },
  {
    "id" : "c0dc9ca1-e4df-4dbb-afb9-9187ee2b004d",
    "prId" : 29474,
    "prUrl" : "https://github.com/flutter/flutter/pull/29474#pullrequestreview-217897863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a133c799-d903-410d-857b-5ffdacd073e6",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Period at the end",
        "createdAt" : "2019-03-22T17:56:48Z",
        "updatedAt" : "2019-03-23T03:48:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "f355e2a160e97ea2bdb52f45c856b3d615166675",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +640,644 @@            GestureDetector(\n              onTap: widget.enabled ?? true ? () {\n                // Special handle onChanged for ClearButton\n                // Also call onChanged when the clear button is tapped.\n                final bool textChanged = _effectiveController.text.isNotEmpty;"
  },
  {
    "id" : "b4a8f3cd-5432-4f04-b3a7-862865797d6b",
    "prId" : 29683,
    "prUrl" : "https://github.com/flutter/flutter/pull/29683#pullrequestreview-225818639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5914dc9f-7562-4f27-9b65-5d32725cef14",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Be consistent with lines between clauses",
        "createdAt" : "2019-04-04T00:53:07Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "ee1f1905-2b3d-43f4-92c6-0995098ec227",
        "parentId" : "5914dc9f-7562-4f27-9b65-5d32725cef14",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "The reason I formatted them this way is because the first group of `if`s return false while the 2nd group of `if`s return true. I'll add an empty line between all of them.",
        "createdAt" : "2019-04-11T22:12:25Z",
        "updatedAt" : "2019-05-13T18:37:47Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e569fef46da2993e5f48803f89ed8d7357829f21",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +588,592 @@    if (cause == SelectionChangedCause.keyboard)\n      return false;\n\n    if (_effectiveController.text.isNotEmpty)\n      return true;"
  },
  {
    "id" : "cea37a2f-e2a3-4981-baf6-f979de828610",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-240159819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3c702e1-a846-44dd-93cf-b3a2c8a49bb1",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I can't find this template in this PR or in our code base. Is this name correct?",
        "createdAt" : "2019-05-21T16:24:20Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +323,327 @@  final bool readOnly;\n\n  /// {@macro flutter.widgets.editableText.showCursor}\n  final bool showCursor;\n"
  },
  {
    "id" : "155a8132-b56a-4a70-9932-6fdede799c9e",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-244428365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a899fe24-65bb-4fd8-ab40-0d3c0e8dbf92",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Could `showCursor` then be false by default instead of null or false?",
        "createdAt" : "2019-05-31T17:13:38Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "47fd088d-987b-4bb4-8e13-c21b32ab1cac",
        "parentId" : "a899fe24-65bb-4fd8-ab40-0d3c0e8dbf92",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "the requirement is showCursor will default to !readonly if user does not specify a value. If i default the input parameter to false, I can't tell if it user pass in or not. ",
        "createdAt" : "2019-05-31T17:27:29Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +140,144 @@  /// overflown. [maxLines] must not be zero.\n  ///\n  /// The text cursor is not shown if [showCursor] is false or if [showCursor]\n  /// is null (the default) and [readOnly] is true.\n  ///"
  },
  {
    "id" : "dedc5f60-0492-4daa-ba9e-751bcda0cb98",
    "prId" : 32704,
    "prUrl" : "https://github.com/flutter/flutter/pull/32704#pullrequestreview-239138401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de6a587a-6ec4-445f-a646-fdd77ff7f5af",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Do we need to worry about if the state got disposed?",
        "createdAt" : "2019-05-17T20:58:28Z",
        "updatedAt" : "2019-05-17T20:58:28Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "e06c1c4d-0db3-4eee-81f8-eb387d4ce0b7",
        "parentId" : "de6a587a-6ec4-445f-a646-fdd77ff7f5af",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "nvm",
        "createdAt" : "2019-05-17T21:15:14Z",
        "updatedAt" : "2019-05-17T21:15:14Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce5693dbf0c3b421b11efa4abdb808a8897ce375",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +508,512 @@  }\n\n  EditableTextState get _editableText => _editableTextKey.currentState;\n\n  void _requestKeyboard() {"
  }
]