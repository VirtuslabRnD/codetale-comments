[
  {
    "id" : "a78548bd-351e-4029-9ae1-2536f735b13b",
    "prId" : 11224,
    "prUrl" : "https://github.com/flutter/flutter/pull/11224#pullrequestreview-50723767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1950b3cd-4b87-4c72-8ff8-f8118eaffa00",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "I think you can fit these arguments onto one line if you want",
        "createdAt" : "2017-07-14T15:53:49Z",
        "updatedAt" : "2017-07-19T19:48:00Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "0a2f5035-f60a-4c5f-bc6e-2068af9d8f25",
        "parentId" : "1950b3cd-4b87-4c72-8ff8-f8118eaffa00",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "there's a lot of parenthesis to tell apart x from y",
        "createdAt" : "2017-07-18T19:52:15Z",
        "updatedAt" : "2017-07-19T19:48:00Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "c49582832e3c8b2c50c7fe0d7d95e5b8b184ba9b",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@    canvas.drawLine(\n      origin,\n      origin.translate(\n        0.0,\n        -(size.height - 2.0 * _kHandlesPadding),"
  },
  {
    "id" : "c030860d-4cd3-4868-8ac4-313a210c06d4",
    "prId" : 20772,
    "prUrl" : "https://github.com/flutter/flutter/pull/20772#pullrequestreview-147416323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a44d56bf-a149-42bc-947d-2a4b1f981948",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "In general I think having TODOs reference a bug makes more sense than referencing a person, but that discussion doesn't belong in this PR.",
        "createdAt" : "2018-08-18T01:37:42Z",
        "updatedAt" : "2018-08-18T02:09:37Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "64f601ac-a05b-4616-ac9e-198e90508c2f",
        "parentId" : "a44d56bf-a149-42bc-947d-2a4b1f981948",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah, that's reasonable. Transitioning would be a pain though...",
        "createdAt" : "2018-08-18T02:06:09Z",
        "updatedAt" : "2018-08-18T02:09:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10c13c5f11910c3671cb93164dd99efc7c40fff2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +116,120 @@          ),\n        ),\n        // TODO(xster): Position the triangle based on the layout delegate, and\n        // avoid letting the triangle line up with any dividers.\n        // https://github.com/flutter/flutter/issues/11274"
  },
  {
    "id" : "758dd46f-2756-49fd-a457-ebd74ce4d84c",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-225252227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f786c6fc-82ea-423f-a1f9-182e2ac747e5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add a code comment describing what this is.",
        "createdAt" : "2019-04-10T22:41:53Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +47,51 @@/// to show the toolbar above the text field. Otherwise, the toolbar will\n/// appear below the text field and the triangle's direction will be [up].\nenum _ArrowDirection { up, down }\n\n/// Paints a triangle below the toolbar."
  },
  {
    "id" : "31db4039-5bce-4ea7-8085-7572c2e5df28",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-227553583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935928a1-33c9-4f39-8397-0b185301371f",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "```dart\r\nconst _TextSelectionToolbarNotchPainter(\r\n  this.arrowDirection\r\n) : assert (arrowDirection != null);\r\n```",
        "createdAt" : "2019-04-17T05:17:36Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +51,55 @@/// Paints a triangle below the toolbar.\nclass _TextSelectionToolbarNotchPainter extends CustomPainter {\n  const _TextSelectionToolbarNotchPainter(\n    this.arrowDirection\n  ) : assert (arrowDirection != null);"
  },
  {
    "id" : "810e4552-135a-4e77-a3c1-f24cc7c281d1",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-227553583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee1cbb0-7af0-4800-9796-ca8fa4cd4015",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "```dart\r\nWidget buildToolbar(\r\n  BuildContext context,\r\n  Rect globalEditableRegion,\r\n  TextSelectionPoint leftTextSelectionPoint,\r\n  TextSelectionPoint rightTextSelectionPoint,\r\n  TextSelectionDelegate delegate,\r\n) {\r\n```",
        "createdAt" : "2019-04-17T05:23:02Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +267,271 @@  /// Builder for iOS-style copy/paste text selection toolbar.\n  @override\n  Widget buildToolbar(\n    BuildContext context,\n    Rect globalEditableRegion,"
  },
  {
    "id" : "e776bd32-ccd6-4863-ab6b-67dc45076b34",
    "prId" : 34095,
    "prUrl" : "https://github.com/flutter/flutter/pull/34095#pullrequestreview-247721244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbb89c5c-5042-4537-a9a6-329f7ef0ae2d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this comment in the wrong place?  I'm not sure which color it's talking about.",
        "createdAt" : "2019-06-10T15:56:52Z",
        "updatedAt" : "2019-06-13T18:32:02Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cac315f7-c7f5-4dcb-a770-2dde05de343a",
        "parentId" : "bbb89c5c-5042-4537-a9a6-329f7ef0ae2d",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oops sorry forgot to move the comment after moving the constants around.",
        "createdAt" : "2019-06-10T16:49:03Z",
        "updatedAt" : "2019-06-13T18:32:02Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e270e28064bc6fdcc96f7d3f300e70fd5f9c43",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +14,18 @@\n// Read off from the output on iOS 12. This color does not vary with the\n// application's theme color.\nconst Color _kHandlesColor = Color(0xFF136FE0);\nconst double _kSelectionHandleOverlap = 1.5;"
  },
  {
    "id" : "e0a9ca4f-22d1-40be-858a-7e573979fe36",
    "prId" : 36974,
    "prUrl" : "https://github.com/flutter/flutter/pull/36974#pullrequestreview-267386387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b639134a-b422-47d2-9ad3-cace03a3c1d6",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : ":+1: ",
        "createdAt" : "2019-07-26T20:19:39Z",
        "updatedAt" : "2019-08-01T20:12:40Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3869727dc4db124222310b72899af0a2232053",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +306,310 @@    // space above the TextField to show it, assuming there's always enough space\n    // at the bottom in this case.\n    final double toolbarHeightNeeded = mediaQuery.padding.top\n      + _kToolbarScreenPadding\n      + _kToolbarHeight"
  },
  {
    "id" : "d1acf197-100a-4e13-b426-5971c539947a",
    "prId" : 41431,
    "prUrl" : "https://github.com/flutter/flutter/pull/41431#pullrequestreview-295101308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3660faa-76c0-42cb-8035-41bd37f84260",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Thanks for noticing this and creating the issue.",
        "createdAt" : "2019-09-30T16:31:01Z",
        "updatedAt" : "2019-10-02T23:29:54Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f19e60fb7509e0aae2d8d354103d5e5a9aeb92",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +39,43 @@const Radius _kToolbarBorderRadius = Radius.circular(8);\n// Colors extracted from https://developer.apple.com/design/resources/.\n// TODO(LongCatIsLooong): https://github.com/flutter/flutter/issues/41507.\nconst Color _kToolbarBackgroundColor = Color(0xEB202020);\nconst Color _kToolbarDividerColor = Color(0xFF808080);"
  },
  {
    "id" : "ea874b55-42d9-42dc-a419-981b116e8b1a",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391556772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Is this to get around the const?",
        "createdAt" : "2020-04-08T19:14:00Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c9aca3b7-4490-43cb-bc2c-6a9d5a3b7c56",
        "parentId" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Please add a comment to the ignore explaining why it is there per our style guide.",
        "createdAt" : "2020-04-09T18:02:01Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8327bfa3-f242-430e-b108-d7e262142275",
        "parentId" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Yes, `.isNotEmpty` isn't const.  I'll add a comment about it.",
        "createdAt" : "2020-04-10T17:15:02Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +461,465 @@  }) : assert(children != null),\n       // This ignore is used because .isNotEmpty isn't compatible with const.\n       assert(children.length > 0), // ignore: prefer_is_empty\n       super(key: key);\n"
  },
  {
    "id" : "ec382339-504c-4201-8212-9e0227156f96",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391570031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6093d403-fac9-44a6-9777-0befe01f1eb7",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I wonder if we need to worry about if the animation is on going",
        "createdAt" : "2020-04-08T19:20:03Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "94304303-d68c-431a-b811-ce3fdbc24825",
        "parentId" : "6093d403-fac9-44a6-9777-0befe01f1eb7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That's a great catch, it would be potentially possible for the animation to navigate to a non-existent page.  I'll fix this by resetting the animation here.",
        "createdAt" : "2020-04-10T17:41:19Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +517,521 @@    // If the children are changing, the current page should be reset.\n    if (widget.children != oldWidget.children) {\n      _page = 0;\n      _nextPage = null;\n      _controller.forward();"
  },
  {
    "id" : "373186a9-469b-4bbf-826e-155782c38bca",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "for my own understanding: When does the toolbar show a disabled button? I thought if there is no page to go to it just doesn't show a button?",
        "createdAt" : "2020-04-09T18:07:20Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "dfb1d381-87ff-42e5-9e2f-a373d6fe602f",
        "parentId" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "From my experimentation, the only time it won't show a next button is if there is only one page.  Otherwise there is always a next button, and on the last page it's disabled.\r\n\r\n![Screen Shot 2020-04-10 at 11 06 03 AM](https://user-images.githubusercontent.com/389558/79012504-4d557100-7b1b-11ea-86f2-e1eec148b7d3.png)",
        "createdAt" : "2020-04-10T18:08:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "b2684e32-bb62-4687-a00f-0ed38d7d5550",
        "parentId" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Interesting. I never noticed that. Thanks for the explanation.",
        "createdAt" : "2020-04-13T22:14:39Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +562,566 @@            child: const Text('▶', style: _kToolbarButtonFontStyle),\n          ),\n          nextButtonDisabled: CupertinoButton(\n            borderRadius: null,\n            color: _kToolbarBackgroundColor,"
  },
  {
    "id" : "b0cc412d-e198-4ebb-a21e-055ab1ace8c8",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391653171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d90505-20a9-4df9-b3ab-a9eb52f75f0b",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(the way the transition is implemented looks fine, just curious:) Did you consider using an AnimatedSwitcher here?",
        "createdAt" : "2020-04-09T18:21:04Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b27fba0d-90c6-4cda-bb7d-60fd4a3bd917",
        "parentId" : "c0d90505-20a9-4df9-b3ab-a9eb52f75f0b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I played around with AnimatedSwitcher when I was doing this for Android, but I think I went straight for FadeTransition here.  Looks like AnimatedSwitcher probably would work though.",
        "createdAt" : "2020-04-10T20:37:45Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +539,543 @@    return DecoratedBox(\n      decoration: const BoxDecoration(color: _kToolbarDividerColor),\n      child: FadeTransition(\n        opacity: _controller,\n        child: _CupertinoTextSelectionToolbarItems("
  },
  {
    "id" : "6211e8de-475a-41f7-8158-e28e0c5609aa",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-390387706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "419cdad1-2038-4eba-a633-d6d5908655f2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: throughout the PR you sometimes do `.keys.contains`, sometimes `.containsKey`. Maybe unify? (I would pick `.containsKey`)",
        "createdAt" : "2020-04-09T18:38:45Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +692,696 @@  void removeChildRenderObject(RenderObject child) {\n    // Check if the child is in a slot.\n    if (renderObject.childToSlot.containsKey(child)) {\n      assert(child is RenderBox);\n      assert(renderObject.childToSlot.containsKey(child));"
  },
  {
    "id" : "18dc81bc-4bca-4ad7-9d2a-3f14b3a5c5af",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-393042562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Are there reasons why this couldn't be an MultiChildRenderObjectElement. In method overrides it would handle the cupertinoSlots and otherwise call super to handle the regular children?",
        "createdAt" : "2020-04-09T18:45:40Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "61c07bdc-3ffc-4e94-b47b-3bc4ad8eadb4",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(or should we create a ContainerElementMixin similar to the ContainerRenderObjectMixin to make this easier)?",
        "createdAt" : "2020-04-09T18:47:42Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1cb69fd2-7e03-4214-8e3d-904d87a6c76f",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I tried extending MultiChildRenderObjectElement when I wrote this and the reason I decided to do it this way instead was that I sometimes needed to call the super method on RenderObjectElement without going through MultiChildRenderObjectElement.\r\n\r\nAn example is `forgetChild`.  For a child that exists in `slotToChild`, I need to remove the child, then I need to call RenderObjectElement's forgetChild without calling MultiChildRenderObjectElement's forgetChild.  Let me know if I'm wrong, but I thought that was a showstopper since I can't do `super.super.forgetChild`.\r\n\r\nMaybe a mixin will work though!  I'll try that right now.",
        "createdAt" : "2020-04-10T21:20:01Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a0b9141f-508e-47ab-a93f-79c782258078",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "What is wrong if  we call MultiChildRenderObjectElement's forgetchild?",
        "createdAt" : "2020-04-10T21:33:08Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "016b6984-eed4-4826-8d8f-b1cabffbe173",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I experimented a bit and I think it would work if I did something like this.  Let me know what you think.\r\n\r\n```dart\r\nmixin ContainerRenderObjectMixin on RenderObjectElement {\r\n  List<Element> _children;\r\n  final Set<Element> _forgottenChildren = HashSet<Element>();\r\n\r\n  ...\r\n\r\n  // Rather than overriding forgetChild, I give it a new name.\r\n  void forgetListChild(Element child) {\r\n    assert(_children.contains(child));\r\n    assert(!_forgottenChildren.contains(child));\r\n    _forgottenChildren.add(child);\r\n    super.forgetChild(child);\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n\r\n// Then I use the mixin here in my code.\r\nclass _CupertinoTextSelectionToolbarItemsElement extends RenderObjectElement with ContainerRenderObjectMixin {\r\n\r\n  ...\r\n\r\n  @override\r\n  void forgetChild(Element child) {\r\n    // Handle children in slots like normal.\r\n    if (childToSlot.containsKey(child)) {\r\n      final _CupertinoTextSelectionToolbarItemsSlot slot = childToSlot[child];\r\n      childToSlot.remove(child);\r\n      slotToChild.remove(slot);\r\n      // Super calls to RenderObjectElement.forgetChild as desired.\r\n      super.forgetChild(child);\r\n\r\n    // Handle list children with the mixin, which can also call to RenderObjectElement.forgetChild.\r\n    } else {\r\n      forgetListChild(child);\r\n    }\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n\r\n// And we can also use the mixin in MultiChildRenderObjectElement to deduplicate code.\r\nclass MultiChildRenderObjectElement extends RenderObjectElement with ContainerRenderObjectMixin {\r\n\r\n  ...\r\n\r\n  @override\r\n  void forgetChild(Element child) {\r\n    forgetListChild(child);\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n```",
        "createdAt" : "2020-04-10T21:56:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "9e11131a-a220-4dee-ae71-8c44a382ef4f",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "@chunhtai Sorry, I missed your question because I didn't refresh.  Calling MultiChildRenderObjectElement's forgetChild with a slotted child will add it to _forgottenChildren, which is only used for list children.\r\n\r\nI did work around this in the mixin I pasted above, though.",
        "createdAt" : "2020-04-14T15:27:54Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +627,631 @@\n// The custom RenderObjectElement that helps paginate the menu items.\nclass _CupertinoTextSelectionToolbarItemsElement extends RenderObjectElement {\n  _CupertinoTextSelectionToolbarItemsElement(\n    _CupertinoTextSelectionToolbarItems widget,"
  },
  {
    "id" : "1124c585-13db-45f1-9df8-f3fc0f2b41cf",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-390387706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f010367-a600-4eaf-90c7-29ff9c30fce0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "uber-nit: move this section above the _backButton section to have all RenderBox properties in one block?",
        "createdAt" : "2020-04-09T18:49:18Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 453,
    "diffHunk" : "@@ -1,1 +831,835 @@  }\n\n  double _dividerWidth;\n  double get dividerWidth => _dividerWidth;\n  set dividerWidth(double value) {"
  },
  {
    "id" : "c1558dad-13a6-4809-9f11-ed8fecb339db",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is surprising. Where is this requirement coming from? Naively, I would have expected that each page can be as wide as it wants?",
        "createdAt" : "2020-04-09T18:56:16Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "4d6b4c91-0557-4cce-bbef-062c5592cb02",
        "parentId" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "My conclusion after playing around with native iOS is that it tries to keep the width of the menu constant:\r\n\r\n![width](https://user-images.githubusercontent.com/389558/79021707-1b4f0980-7b31-11ea-9222-3abed14e499e.gif)\r\n",
        "createdAt" : "2020-04-10T20:43:40Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "3dcc645d-7cd6-4d16-b068-015805d28bb7",
        "parentId" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Interesting observation. Thanks for the gif.",
        "createdAt" : "2020-04-13T22:22:59Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 521,
    "diffHunk" : "@@ -1,1 +899,903 @@      }\n\n      // The width of the menu is set by the first page.\n      child.layout(\n        BoxConstraints.loose(Size("
  },
  {
    "id" : "801a60a5-bd27-4050-806c-0c38dbb5037b",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391709534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be75571-57b4-4286-890a-30b52a1dba9f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We have to do this for all children? Even the ones that are after the page currently visible?",
        "createdAt" : "2020-04-09T19:01:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "468d8abf-c24a-4c0c-b39b-2f25a36506f0",
        "parentId" : "1be75571-57b4-4286-890a-30b52a1dba9f",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "No, you're right.  I tried making this optimization earlier but got console errors about children that weren't laid out.  I just had to implement visitChildrenForSemantics and it fixed it though.",
        "createdAt" : "2020-04-10T23:44:09Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +878,882 @@    int currentPage = 0;\n    int i = -1;\n    visitChildren((RenderObject renderObjectChild) {\n      i++;\n      final RenderBox child = renderObjectChild as RenderBox;"
  },
  {
    "id" : "ea46a06a-053c-475a-a4a6-544dc502cf8f",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391709897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f54eb4f1-c055-4c1c-a3e3-5ae935ac20a5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is this necessary when it gets overwritten by line 931?",
        "createdAt" : "2020-04-09T19:05:12Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fdbc266c-bbad-4a90-ae27-439f0d6edc10",
        "parentId" : "f54eb4f1-c055-4c1c-a3e3-5ae935ac20a5",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Now it is!  Since I made the optimization above where I don't layout all children, line 931 doesn't get run on all children.",
        "createdAt" : "2020-04-10T23:46:08Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +883,887 @@      final ToolbarItemsParentData childParentData =\n          child.parentData as ToolbarItemsParentData;\n      childParentData.shouldPaint = false;\n\n      // Skip slotted children and children on pages after the visible page."
  },
  {
    "id" : "5e692ad4-9873-49b7-bf54-dbb8f8175069",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "080203de-e67c-4bf9-81cf-883a14dd0490",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe also reset _nextPage to null? (I don't think this is a visual bug, but it may be strange during debugging if this is set to something that's no longer valid.)",
        "createdAt" : "2020-04-13T22:13:41Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +517,521 @@    // If the children are changing, the current page should be reset.\n    if (widget.children != oldWidget.children) {\n      _page = 0;\n      _nextPage = null;\n      _controller.forward();"
  },
  {
    "id" : "cc855c1e-958f-4035-ab5c-3f83911d47c1",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-393108998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Just a FYI, this currently only work with word boundary. If for some reason the space is not enough, copy -> ... Paste -> ...    select all -> select ...",
        "createdAt" : "2020-04-13T23:26:33Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "1c2b75be-ea81-49e3-a7d1-d1a33a061db4",
        "parentId" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think somehow it's working ok, see this screenshot if I add a bunch of A's to Paste.  Is that what you mean?\r\n\r\n<img width=\"204\" alt=\"Screen Shot 2020-04-14 at 8 58 14 AM\" src=\"https://user-images.githubusercontent.com/389558/79246506-2609e700-7e2e-11ea-8fe6-757874fe2d45.png\">\r\n",
        "createdAt" : "2020-04-14T15:59:37Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a7879c39-b825-4652-b9a8-76281d2558ea",
        "parentId" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "oh nvm it seems you are right.",
        "createdAt" : "2020-04-14T16:43:35Z",
        "updatedAt" : "2020-04-14T16:43:35Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +357,361 @@        child: Text(\n          text,\n          overflow: TextOverflow.ellipsis,\n          style: _kToolbarButtonFontStyle,\n        ),"
  }
]