[
  {
    "id" : "a78548bd-351e-4029-9ae1-2536f735b13b",
    "prId" : 11224,
    "prUrl" : "https://github.com/flutter/flutter/pull/11224#pullrequestreview-50723767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1950b3cd-4b87-4c72-8ff8-f8118eaffa00",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "I think you can fit these arguments onto one line if you want",
        "createdAt" : "2017-07-14T15:53:49Z",
        "updatedAt" : "2017-07-19T19:48:00Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      },
      {
        "id" : "0a2f5035-f60a-4c5f-bc6e-2068af9d8f25",
        "parentId" : "1950b3cd-4b87-4c72-8ff8-f8118eaffa00",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "there's a lot of parenthesis to tell apart x from y",
        "createdAt" : "2017-07-18T19:52:15Z",
        "updatedAt" : "2017-07-19T19:48:00Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "c49582832e3c8b2c50c7fe0d7d95e5b8b184ba9b",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@    canvas.drawLine(\n      origin,\n      origin.translate(\n        0.0,\n        -(size.height - 2.0 * _kHandlesPadding),"
  },
  {
    "id" : "c030860d-4cd3-4868-8ac4-313a210c06d4",
    "prId" : 20772,
    "prUrl" : "https://github.com/flutter/flutter/pull/20772#pullrequestreview-147416323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a44d56bf-a149-42bc-947d-2a4b1f981948",
        "parentId" : null,
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "In general I think having TODOs reference a bug makes more sense than referencing a person, but that discussion doesn't belong in this PR.",
        "createdAt" : "2018-08-18T01:37:42Z",
        "updatedAt" : "2018-08-18T02:09:37Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      },
      {
        "id" : "64f601ac-a05b-4616-ac9e-198e90508c2f",
        "parentId" : "a44d56bf-a149-42bc-947d-2a4b1f981948",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "yeah, that's reasonable. Transitioning would be a pain though...",
        "createdAt" : "2018-08-18T02:06:09Z",
        "updatedAt" : "2018-08-18T02:09:37Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10c13c5f11910c3671cb93164dd99efc7c40fff2",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +116,120 @@          ),\n        ),\n        // TODO(xster): Position the triangle based on the layout delegate, and\n        // avoid letting the triangle line up with any dividers.\n        // https://github.com/flutter/flutter/issues/11274"
  },
  {
    "id" : "758dd46f-2756-49fd-a457-ebd74ce4d84c",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-225252227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f786c6fc-82ea-423f-a1f9-182e2ac747e5",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Add a code comment describing what this is.",
        "createdAt" : "2019-04-10T22:41:53Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +47,51 @@/// to show the toolbar above the text field. Otherwise, the toolbar will\n/// appear below the text field and the triangle's direction will be [up].\nenum _ArrowDirection { up, down }\n\n/// Paints a triangle below the toolbar."
  },
  {
    "id" : "31db4039-5bce-4ea7-8085-7572c2e5df28",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-227553583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935928a1-33c9-4f39-8397-0b185301371f",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "```dart\r\nconst _TextSelectionToolbarNotchPainter(\r\n  this.arrowDirection\r\n) : assert (arrowDirection != null);\r\n```",
        "createdAt" : "2019-04-17T05:17:36Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +51,55 @@/// Paints a triangle below the toolbar.\nclass _TextSelectionToolbarNotchPainter extends CustomPainter {\n  const _TextSelectionToolbarNotchPainter(\n    this.arrowDirection\n  ) : assert (arrowDirection != null);"
  },
  {
    "id" : "810e4552-135a-4e77-a3c1-f24cc7c281d1",
    "prId" : 29809,
    "prUrl" : "https://github.com/flutter/flutter/pull/29809#pullrequestreview-227553583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee1cbb0-7af0-4800-9796-ca8fa4cd4015",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "```dart\r\nWidget buildToolbar(\r\n  BuildContext context,\r\n  Rect globalEditableRegion,\r\n  TextSelectionPoint leftTextSelectionPoint,\r\n  TextSelectionPoint rightTextSelectionPoint,\r\n  TextSelectionDelegate delegate,\r\n) {\r\n```",
        "createdAt" : "2019-04-17T05:23:02Z",
        "updatedAt" : "2019-05-01T02:57:13Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "75a1415b85ffe792656477a34dede6140eeaee07",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +267,271 @@  /// Builder for iOS-style copy/paste text selection toolbar.\n  @override\n  Widget buildToolbar(\n    BuildContext context,\n    Rect globalEditableRegion,"
  },
  {
    "id" : "e776bd32-ccd6-4863-ab6b-67dc45076b34",
    "prId" : 34095,
    "prUrl" : "https://github.com/flutter/flutter/pull/34095#pullrequestreview-247721244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbb89c5c-5042-4537-a9a6-329f7ef0ae2d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this comment in the wrong place?  I'm not sure which color it's talking about.",
        "createdAt" : "2019-06-10T15:56:52Z",
        "updatedAt" : "2019-06-13T18:32:02Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cac315f7-c7f5-4dcb-a770-2dde05de343a",
        "parentId" : "bbb89c5c-5042-4537-a9a6-329f7ef0ae2d",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oops sorry forgot to move the comment after moving the constants around.",
        "createdAt" : "2019-06-10T16:49:03Z",
        "updatedAt" : "2019-06-13T18:32:02Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2e270e28064bc6fdcc96f7d3f300e70fd5f9c43",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +14,18 @@\n// Read off from the output on iOS 12. This color does not vary with the\n// application's theme color.\nconst Color _kHandlesColor = Color(0xFF136FE0);\nconst double _kSelectionHandleOverlap = 1.5;"
  },
  {
    "id" : "e0a9ca4f-22d1-40be-858a-7e573979fe36",
    "prId" : 36974,
    "prUrl" : "https://github.com/flutter/flutter/pull/36974#pullrequestreview-267386387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b639134a-b422-47d2-9ad3-cace03a3c1d6",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : ":+1: ",
        "createdAt" : "2019-07-26T20:19:39Z",
        "updatedAt" : "2019-08-01T20:12:40Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef3869727dc4db124222310b72899af0a2232053",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +306,310 @@    // space above the TextField to show it, assuming there's always enough space\n    // at the bottom in this case.\n    final double toolbarHeightNeeded = mediaQuery.padding.top\n      + _kToolbarScreenPadding\n      + _kToolbarHeight"
  },
  {
    "id" : "d1acf197-100a-4e13-b426-5971c539947a",
    "prId" : 41431,
    "prUrl" : "https://github.com/flutter/flutter/pull/41431#pullrequestreview-295101308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3660faa-76c0-42cb-8035-41bd37f84260",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Thanks for noticing this and creating the issue.",
        "createdAt" : "2019-09-30T16:31:01Z",
        "updatedAt" : "2019-10-02T23:29:54Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3f19e60fb7509e0aae2d8d354103d5e5a9aeb92",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +39,43 @@const Radius _kToolbarBorderRadius = Radius.circular(8);\n// Colors extracted from https://developer.apple.com/design/resources/.\n// TODO(LongCatIsLooong): https://github.com/flutter/flutter/issues/41507.\nconst Color _kToolbarBackgroundColor = Color(0xEB202020);\nconst Color _kToolbarDividerColor = Color(0xFF808080);"
  },
  {
    "id" : "ea874b55-42d9-42dc-a419-981b116e8b1a",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391556772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Is this to get around the const?",
        "createdAt" : "2020-04-08T19:14:00Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "c9aca3b7-4490-43cb-bc2c-6a9d5a3b7c56",
        "parentId" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Please add a comment to the ignore explaining why it is there per our style guide.",
        "createdAt" : "2020-04-09T18:02:01Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8327bfa3-f242-430e-b108-d7e262142275",
        "parentId" : "a7bc8668-4e64-4f29-9e00-12e091da0adf",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Yes, `.isNotEmpty` isn't const.  I'll add a comment about it.",
        "createdAt" : "2020-04-10T17:15:02Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +461,465 @@  }) : assert(children != null),\n       // This ignore is used because .isNotEmpty isn't compatible with const.\n       assert(children.length > 0), // ignore: prefer_is_empty\n       super(key: key);\n"
  },
  {
    "id" : "ec382339-504c-4201-8212-9e0227156f96",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391570031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6093d403-fac9-44a6-9777-0befe01f1eb7",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I wonder if we need to worry about if the animation is on going",
        "createdAt" : "2020-04-08T19:20:03Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "94304303-d68c-431a-b811-ce3fdbc24825",
        "parentId" : "6093d403-fac9-44a6-9777-0befe01f1eb7",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That's a great catch, it would be potentially possible for the animation to navigate to a non-existent page.  I'll fix this by resetting the animation here.",
        "createdAt" : "2020-04-10T17:41:19Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +517,521 @@    // If the children are changing, the current page should be reset.\n    if (widget.children != oldWidget.children) {\n      _page = 0;\n      _nextPage = null;\n      _controller.forward();"
  },
  {
    "id" : "373186a9-469b-4bbf-826e-155782c38bca",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "for my own understanding: When does the toolbar show a disabled button? I thought if there is no page to go to it just doesn't show a button?",
        "createdAt" : "2020-04-09T18:07:20Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "dfb1d381-87ff-42e5-9e2f-a373d6fe602f",
        "parentId" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "From my experimentation, the only time it won't show a next button is if there is only one page.  Otherwise there is always a next button, and on the last page it's disabled.\r\n\r\n![Screen Shot 2020-04-10 at 11 06 03 AM](https://user-images.githubusercontent.com/389558/79012504-4d557100-7b1b-11ea-86f2-e1eec148b7d3.png)",
        "createdAt" : "2020-04-10T18:08:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "b2684e32-bb62-4687-a00f-0ed38d7d5550",
        "parentId" : "45ee32d7-ac40-43d6-9d12-e866754b63fb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Interesting. I never noticed that. Thanks for the explanation.",
        "createdAt" : "2020-04-13T22:14:39Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +562,566 @@            child: const Text('▶', style: _kToolbarButtonFontStyle),\n          ),\n          nextButtonDisabled: CupertinoButton(\n            borderRadius: null,\n            color: _kToolbarBackgroundColor,"
  },
  {
    "id" : "b0cc412d-e198-4ebb-a21e-055ab1ace8c8",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391653171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d90505-20a9-4df9-b3ab-a9eb52f75f0b",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(the way the transition is implemented looks fine, just curious:) Did you consider using an AnimatedSwitcher here?",
        "createdAt" : "2020-04-09T18:21:04Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b27fba0d-90c6-4cda-bb7d-60fd4a3bd917",
        "parentId" : "c0d90505-20a9-4df9-b3ab-a9eb52f75f0b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I played around with AnimatedSwitcher when I was doing this for Android, but I think I went straight for FadeTransition here.  Looks like AnimatedSwitcher probably would work though.",
        "createdAt" : "2020-04-10T20:37:45Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +539,543 @@    return DecoratedBox(\n      decoration: const BoxDecoration(color: _kToolbarDividerColor),\n      child: FadeTransition(\n        opacity: _controller,\n        child: _CupertinoTextSelectionToolbarItems("
  },
  {
    "id" : "6211e8de-475a-41f7-8158-e28e0c5609aa",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-390387706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "419cdad1-2038-4eba-a633-d6d5908655f2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: throughout the PR you sometimes do `.keys.contains`, sometimes `.containsKey`. Maybe unify? (I would pick `.containsKey`)",
        "createdAt" : "2020-04-09T18:38:45Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +692,696 @@  void removeChildRenderObject(RenderObject child) {\n    // Check if the child is in a slot.\n    if (renderObject.childToSlot.containsKey(child)) {\n      assert(child is RenderBox);\n      assert(renderObject.childToSlot.containsKey(child));"
  },
  {
    "id" : "18dc81bc-4bca-4ad7-9d2a-3f14b3a5c5af",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-393042562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Are there reasons why this couldn't be an MultiChildRenderObjectElement. In method overrides it would handle the cupertinoSlots and otherwise call super to handle the regular children?",
        "createdAt" : "2020-04-09T18:45:40Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "61c07bdc-3ffc-4e94-b47b-3bc4ad8eadb4",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(or should we create a ContainerElementMixin similar to the ContainerRenderObjectMixin to make this easier)?",
        "createdAt" : "2020-04-09T18:47:42Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1cb69fd2-7e03-4214-8e3d-904d87a6c76f",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I tried extending MultiChildRenderObjectElement when I wrote this and the reason I decided to do it this way instead was that I sometimes needed to call the super method on RenderObjectElement without going through MultiChildRenderObjectElement.\r\n\r\nAn example is `forgetChild`.  For a child that exists in `slotToChild`, I need to remove the child, then I need to call RenderObjectElement's forgetChild without calling MultiChildRenderObjectElement's forgetChild.  Let me know if I'm wrong, but I thought that was a showstopper since I can't do `super.super.forgetChild`.\r\n\r\nMaybe a mixin will work though!  I'll try that right now.",
        "createdAt" : "2020-04-10T21:20:01Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a0b9141f-508e-47ab-a93f-79c782258078",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "What is wrong if  we call MultiChildRenderObjectElement's forgetchild?",
        "createdAt" : "2020-04-10T21:33:08Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "016b6984-eed4-4826-8d8f-b1cabffbe173",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I experimented a bit and I think it would work if I did something like this.  Let me know what you think.\r\n\r\n```dart\r\nmixin ContainerRenderObjectMixin on RenderObjectElement {\r\n  List<Element> _children;\r\n  final Set<Element> _forgottenChildren = HashSet<Element>();\r\n\r\n  ...\r\n\r\n  // Rather than overriding forgetChild, I give it a new name.\r\n  void forgetListChild(Element child) {\r\n    assert(_children.contains(child));\r\n    assert(!_forgottenChildren.contains(child));\r\n    _forgottenChildren.add(child);\r\n    super.forgetChild(child);\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n\r\n// Then I use the mixin here in my code.\r\nclass _CupertinoTextSelectionToolbarItemsElement extends RenderObjectElement with ContainerRenderObjectMixin {\r\n\r\n  ...\r\n\r\n  @override\r\n  void forgetChild(Element child) {\r\n    // Handle children in slots like normal.\r\n    if (childToSlot.containsKey(child)) {\r\n      final _CupertinoTextSelectionToolbarItemsSlot slot = childToSlot[child];\r\n      childToSlot.remove(child);\r\n      slotToChild.remove(slot);\r\n      // Super calls to RenderObjectElement.forgetChild as desired.\r\n      super.forgetChild(child);\r\n\r\n    // Handle list children with the mixin, which can also call to RenderObjectElement.forgetChild.\r\n    } else {\r\n      forgetListChild(child);\r\n    }\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n\r\n// And we can also use the mixin in MultiChildRenderObjectElement to deduplicate code.\r\nclass MultiChildRenderObjectElement extends RenderObjectElement with ContainerRenderObjectMixin {\r\n\r\n  ...\r\n\r\n  @override\r\n  void forgetChild(Element child) {\r\n    forgetListChild(child);\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n```",
        "createdAt" : "2020-04-10T21:56:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "9e11131a-a220-4dee-ae71-8c44a382ef4f",
        "parentId" : "0bf969ef-74e5-4318-bd43-dbacfa10e619",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "@chunhtai Sorry, I missed your question because I didn't refresh.  Calling MultiChildRenderObjectElement's forgetChild with a slotted child will add it to _forgottenChildren, which is only used for list children.\r\n\r\nI did work around this in the mixin I pasted above, though.",
        "createdAt" : "2020-04-14T15:27:54Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +627,631 @@\n// The custom RenderObjectElement that helps paginate the menu items.\nclass _CupertinoTextSelectionToolbarItemsElement extends RenderObjectElement {\n  _CupertinoTextSelectionToolbarItemsElement(\n    _CupertinoTextSelectionToolbarItems widget,"
  },
  {
    "id" : "1124c585-13db-45f1-9df8-f3fc0f2b41cf",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-390387706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f010367-a600-4eaf-90c7-29ff9c30fce0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "uber-nit: move this section above the _backButton section to have all RenderBox properties in one block?",
        "createdAt" : "2020-04-09T18:49:18Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 453,
    "diffHunk" : "@@ -1,1 +831,835 @@  }\n\n  double _dividerWidth;\n  double get dividerWidth => _dividerWidth;\n  set dividerWidth(double value) {"
  },
  {
    "id" : "c1558dad-13a6-4809-9f11-ed8fecb339db",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This is surprising. Where is this requirement coming from? Naively, I would have expected that each page can be as wide as it wants?",
        "createdAt" : "2020-04-09T18:56:16Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "4d6b4c91-0557-4cce-bbef-062c5592cb02",
        "parentId" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "My conclusion after playing around with native iOS is that it tries to keep the width of the menu constant:\r\n\r\n![width](https://user-images.githubusercontent.com/389558/79021707-1b4f0980-7b31-11ea-9222-3abed14e499e.gif)\r\n",
        "createdAt" : "2020-04-10T20:43:40Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "3dcc645d-7cd6-4d16-b068-015805d28bb7",
        "parentId" : "35804847-1eef-41c8-ad25-cbbd5467c8fb",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Interesting observation. Thanks for the gif.",
        "createdAt" : "2020-04-13T22:22:59Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 521,
    "diffHunk" : "@@ -1,1 +899,903 @@      }\n\n      // The width of the menu is set by the first page.\n      child.layout(\n        BoxConstraints.loose(Size("
  },
  {
    "id" : "801a60a5-bd27-4050-806c-0c38dbb5037b",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391709534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be75571-57b4-4286-890a-30b52a1dba9f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "We have to do this for all children? Even the ones that are after the page currently visible?",
        "createdAt" : "2020-04-09T19:01:23Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "468d8abf-c24a-4c0c-b39b-2f25a36506f0",
        "parentId" : "1be75571-57b4-4286-890a-30b52a1dba9f",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "No, you're right.  I tried making this optimization earlier but got console errors about children that weren't laid out.  I just had to implement visitChildrenForSemantics and it fixed it though.",
        "createdAt" : "2020-04-10T23:44:09Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 500,
    "diffHunk" : "@@ -1,1 +878,882 @@    int currentPage = 0;\n    int i = -1;\n    visitChildren((RenderObject renderObjectChild) {\n      i++;\n      final RenderBox child = renderObjectChild as RenderBox;"
  },
  {
    "id" : "ea46a06a-053c-475a-a4a6-544dc502cf8f",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-391709897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f54eb4f1-c055-4c1c-a3e3-5ae935ac20a5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is this necessary when it gets overwritten by line 931?",
        "createdAt" : "2020-04-09T19:05:12Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "fdbc266c-bbad-4a90-ae27-439f0d6edc10",
        "parentId" : "f54eb4f1-c055-4c1c-a3e3-5ae935ac20a5",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Now it is!  Since I made the optimization above where I don't layout all children, line 931 doesn't get run on all children.",
        "createdAt" : "2020-04-10T23:46:08Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 505,
    "diffHunk" : "@@ -1,1 +883,887 @@      final ToolbarItemsParentData childParentData =\n          child.parentData as ToolbarItemsParentData;\n      childParentData.shouldPaint = false;\n\n      // Skip slotted children and children on pages after the visible page."
  },
  {
    "id" : "5e692ad4-9873-49b7-bf54-dbb8f8175069",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-392465734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "080203de-e67c-4bf9-81cf-883a14dd0490",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe also reset _nextPage to null? (I don't think this is a visual bug, but it may be strange during debugging if this is set to something that's no longer valid.)",
        "createdAt" : "2020-04-13T22:13:41Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +517,521 @@    // If the children are changing, the current page should be reset.\n    if (widget.children != oldWidget.children) {\n      _page = 0;\n      _nextPage = null;\n      _controller.forward();"
  },
  {
    "id" : "cc855c1e-958f-4035-ab5c-3f83911d47c1",
    "prId" : 54140,
    "prUrl" : "https://github.com/flutter/flutter/pull/54140#pullrequestreview-393108998",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "Just a FYI, this currently only work with word boundary. If for some reason the space is not enough, copy -> ... Paste -> ...    select all -> select ...",
        "createdAt" : "2020-04-13T23:26:33Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "1c2b75be-ea81-49e3-a7d1-d1a33a061db4",
        "parentId" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think somehow it's working ok, see this screenshot if I add a bunch of A's to Paste.  Is that what you mean?\r\n\r\n<img width=\"204\" alt=\"Screen Shot 2020-04-14 at 8 58 14 AM\" src=\"https://user-images.githubusercontent.com/389558/79246506-2609e700-7e2e-11ea-8fe6-757874fe2d45.png\">\r\n",
        "createdAt" : "2020-04-14T15:59:37Z",
        "updatedAt" : "2020-04-14T16:00:15Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a7879c39-b825-4652-b9a8-76281d2558ea",
        "parentId" : "11d43539-34d9-4802-8ef4-d7ce9da848db",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "oh nvm it seems you are right.",
        "createdAt" : "2020-04-14T16:43:35Z",
        "updatedAt" : "2020-04-14T16:43:35Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "14934c0489ea5ca090b2695e87459fc03157ea03",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +357,361 @@        child: Text(\n          text,\n          overflow: TextOverflow.ellipsis,\n          style: _kToolbarButtonFontStyle,\n        ),"
  },
  {
    "id" : "1a698bd8-fd67-42cb-8581-3baa81ed3af2",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403881341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267e1ee6-ac5f-4dd2-9364-738a086def72",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "You also have to check whether oldWidget.clipboardStatus == widget.clipboardStatus and if it is different move the listener over.",
        "createdAt" : "2020-04-30T17:54:21Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f2c5e779-7a2f-4add-bec3-db4ab4c6359f",
        "parentId" : "267e1ee6-ac5f-4dd2-9364-738a086def72",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Thanks, I didn't think of that!",
        "createdAt" : "2020-04-30T21:12:35Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +110,114 @@  @override\n  void didUpdateWidget(_CupertinoTextSelectionToolbarWrapper oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (oldWidget.clipboardStatus == null && widget.clipboardStatus != null) {\n      _clipboardStatus.removeListener(_onChangedClipboardStatus);"
  },
  {
    "id" : "5a7db847-4392-460c-88fc-c7c3bd5c6423",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403887218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "621eba2c-4634-4706-be2a-449462091259",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Do we need to update every time? Or only when we switch from null to non-null?",
        "createdAt" : "2020-04-30T18:04:44Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f1b55b17-401a-4f09-8876-8483842d97b6",
        "parentId" : "621eba2c-4634-4706-be2a-449462091259",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I've been erring on the side of updating too frequently in order to help handle cases where the clipboard can change that I'm not thinking of.\r\n\r\nThe typical place where didUpdateWidget is called is when the visible text selection menu changes, like when pressing \"Select All\", or opening the overflow menu.  In most normal uses the user probably isn't going to be able to change the content of their clipboard between opening the selection menu and pressing \"Select All\" (without backgrounding the app), in which case your optimization would be fine.  However, I worry that users could use a physical keyboard and press ctrl-c, or use Gboard and copy something out of the search field inside of Gboard, or something else I'm not thinking of.\r\n\r\nI'm happy to add the optimization if you're not worried, though.  Really, I wish that `Clipboard` had a way to directly listen to changes!",
        "createdAt" : "2020-04-30T21:22:34Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +126,130 @@      }\n    }\n    if (widget.handlePaste != null) {\n      _clipboardStatus.update();\n    }"
  },
  {
    "id" : "7a54cefb-8b2f-43e6-b75c-deecafe6d0fe",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-403911226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb3625cf-65cb-4709-a6a9-e70e9ab0bb74",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "If you instantiate a new clipboardStatus above, this clipboardStatus will be null, is that expected?",
        "createdAt" : "2020-04-30T18:12:36Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "50e0a198-6889-40e0-b9e3-54145f797451",
        "parentId" : "eb3625cf-65cb-4709-a6a9-e70e9ab0bb74",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Irrelevant with my fix for https://github.com/flutter/flutter/pull/54902#discussion_r418196078.  I now handle if it's null inside of handleCopy.",
        "createdAt" : "2020-04-30T22:08:29Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +491,495 @@      clipboardStatus: clipboardStatus,\n      handleCut: canCut(delegate) ? () => handleCut(delegate) : null,\n      handleCopy: canCopy(delegate) ? () => handleCopy(delegate, clipboardStatus) : null,\n      handlePaste: canPaste(delegate) ? () => handlePaste(delegate) : null,\n      handleSelectAll: canSelectAll(delegate) ? () => handleSelectAll(delegate) : null,"
  },
  {
    "id" : "0d39a658-5762-479f-a987-0546fd8af21b",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-405227007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "250c07ec-0df1-4bc4-8041-9f96e68f1c72",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Wondering if we could simplify this a little bit by requiring that you pass a non-null ClipboardStatusNotifier to the TextSelectionOverlay? That should simplify the logic in didUpdateWidget a little bit.",
        "createdAt" : "2020-04-30T23:11:02Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e7016665-5732-4e1c-8495-3bfce77897ac",
        "parentId" : "250c07ec-0df1-4bc4-8041-9f96e68f1c72",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I avoided that because I thought it would be a breaking change.  What do you think?",
        "createdAt" : "2020-05-01T16:32:09Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "39888095-f77b-4a42-8c4c-2aa3b73b66a2",
        "parentId" : "250c07ec-0df1-4bc4-8041-9f96e68f1c72",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Do we have customers that implement their own TextSelectionOverlay?",
        "createdAt" : "2020-05-01T22:09:05Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1847de62-fd11-4397-8d41-e60c9a2cf171",
        "parentId" : "250c07ec-0df1-4bc4-8041-9f96e68f1c72",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I'm not sure.  The text selection menu has been pretty inflexible, but I think people might be overriding TextSelectionControls and not TextSelectionOverlay when they want things like custom buttons.  I see nothing internally that directly uses TextSelectionOverlay.\r\n\r\n@HansMuller Do you have any opinion on breaking TextSelectionOverlay?",
        "createdAt" : "2020-05-04T17:59:26Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "412d17e6-ff6a-4419-a01b-37ca83017c95",
        "parentId" : "250c07ec-0df1-4bc4-8041-9f96e68f1c72",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "If we're going to break TextSelectionOverlay, I think doing so should be part of a carefully considered plan about how to make the text selection menu (easily) extensible.",
        "createdAt" : "2020-05-04T18:11:11Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +103,107 @@  void initState() {\n    super.initState();\n    _clipboardStatus = widget.clipboardStatus ?? ClipboardStatusNotifier();\n    _clipboardStatus.addListener(_onChangedClipboardStatus);\n    _clipboardStatus.update();"
  },
  {
    "id" : "526319da-c492-4f1a-ab21-7982954f4b62",
    "prId" : 54902,
    "prUrl" : "https://github.com/flutter/flutter/pull/54902#pullrequestreview-407043886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This looks a little fishy, why do you need to check whether it is already disposed?",
        "createdAt" : "2020-04-30T23:18:58Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "09903f01-d3b5-484e-82a6-c525ab507dc0",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "A bunch of tests were failing without this (and the same thing on the material side) with \"A ClipboardStatusNotifier was used after being disposed.\"  Is there a cleaner way to handle this?  I would have thought that the toolbar should be disposed before the EditableText, but that's not what's happening.  Maybe because it's in an overlay? Or the `materialTextSelectionControls` singleton?",
        "createdAt" : "2020-05-01T16:50:30Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "750d6e73-6e1e-4223-a250-eea2665fac96",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is the toolbar getting disposed after the EditableText because the overlay removal may be delayed by one frame:\r\n\r\nhttps://github.com/flutter/flutter/blob/fdc4d21b79034b96aadba6a1e9cc273178073aee/packages/flutter/lib/src/widgets/overlay.dart#L131-L142",
        "createdAt" : "2020-05-01T22:02:28Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8298984c-71ad-4e30-8d10-8b209a355633",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "If that's indeed the reason, maybe leave a comment here why this is so strange.",
        "createdAt" : "2020-05-01T22:03:51Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ce9bfb65-6680-44ad-b845-87eab339fcd3",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That doesn't seem to be the exact reason.  It seems like it is taking the `addPostFrameCallback` path, but the text selection menu is already disposed before the async callback is called.  It must be getting disposed from somewhere else.\r\n\r\nI tried to track down where exactly so I could understand this, but I couldn't figure out what is causing it to be disposed and why it happens after EditableText.  Commenting out the code that calls `remove` on the OverlayEntry doesn't even stop it from being disposed.  There must be something I don't understand about how Flutter cleans things like this up internally.\r\n\r\nI left a generic comment about why I'm using `disposed`.  If you have more ideas about why then I can look into it and elaborate.",
        "createdAt" : "2020-05-04T17:51:26Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "14d86775-e09d-41b3-a0ff-0e57bdfaf72b",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "To me it looks like this may be the sequence of events:\r\n\r\nAt the end of the build phase the EditableText is disposed. In its dispose it first calls dispose on the overlay, which ultimately calls the dispose method of the OverlayEntry that I linked above. Since we are still in the build phase (which happens during SchedulerPhase.persistentCallbacks), we can't modify the overlay directly and thus schedule a post frame callback to remove the overlay. Next, the EditableText disposes the clipboard. The build phase ends and the post-frame callbacks run. In one of those callbacks, the overlay entry is finally removed from the overlay causing the dispose callbacks of the toolbar state to execute. At this point the clipboard thing is already disposed and operating on it causes the exceptions you're seeing.\r\n\r\nBut you're saying the TextSelectionMenu gets disposed before the post framework to remove it from the overlay runs? Not sure I understand that because in your code you're guarding against the clipboard thing being disposed...",
        "createdAt" : "2020-05-04T18:09:40Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "77ed529c-5057-41dc-8c71-a74c8da10c7e",
        "parentId" : "13060ccf-6a77-49a7-8364-72832d52f36a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Here's the order I see by using print statements:\r\n\r\n  1. EditableTextState.dispose\r\n  1. ClipboardStatusNotifier.dispose\r\n  1. _TextSelectionToolbarState.dispose\r\n  1. `_overlay.remove(this)` inside of the async callback in OverlayEntry.remove.\r\n\r\nSo yeah, it doesn't make sense why number 4 is last.",
        "createdAt" : "2020-05-06T22:59:39Z",
        "updatedAt" : "2020-05-07T18:50:58Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "722ad5adde3d77633618e0d10f9a0707c9056dfb",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +136,140 @@    // When used in an Overlay, this can be disposed after its creator has\n    // already disposed _clipboardStatus.\n    if (!_clipboardStatus.disposed) {\n      _clipboardStatus.removeListener(_onChangedClipboardStatus);\n      if (widget.clipboardStatus == null) {"
  },
  {
    "id" : "bfbb2fdc-fc90-4fa7-b043-a474447781d0",
    "prId" : 73578,
    "prUrl" : "https://github.com/flutter/flutter/pull/73578#pullrequestreview-564504067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e251ab16-ff5e-435d-b296-3cc265a7242d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I moved all of the deleted math above into this class here to be consistent with Material.  I'd like to refactor this in the long term (see https://github.com/flutter/flutter/issues/73574), but for now the idea is to encapsulate the complexity and keep the public APIs nice and clean.",
        "createdAt" : "2021-01-08T18:55:39Z",
        "updatedAt" : "2021-01-12T22:04:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a149ce7d2c5efd5532e0f7b00f443e1221f8c03",
    "line" : 459,
    "diffHunk" : "@@ -1,1 +238,242 @@    ClipboardStatusNotifier clipboardStatus,\n  ) {\n    return _CupertinoTextSelectionControlsToolbar(\n      clipboardStatus: clipboardStatus,\n      endpoints: endpoints,"
  },
  {
    "id" : "8d6cb93f-dfc8-4860-8193-c57a99422c2d",
    "prId" : 85789,
    "prUrl" : "https://github.com/flutter/flutter/pull/85789#pullrequestreview-711298059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab08a5c6-33a5-4a15-8fb6-7a5d06d48e1a",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Just want to double check that this still works in RTL mode (the left handle still corresponds to the \"start\" glyph height.",
        "createdAt" : "2021-07-19T18:18:39Z",
        "updatedAt" : "2021-07-19T18:22:06Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "90e0486a-f2af-4a60-9e8b-14016afb07dd",
        "parentId" : "ab08a5c6-33a5-4a15-8fb6-7a5d06d48e1a",
        "authorId" : "aca371f2-0a20-4caf-bcd6-fb6cd77f7135",
        "body" : "Good catch, i'll try this out.",
        "createdAt" : "2021-07-19T20:24:09Z",
        "updatedAt" : "2021-07-19T20:24:09Z",
        "lastEditedBy" : "aca371f2-0a20-4caf-bcd6-fb6cd77f7135",
        "tags" : [
        ]
      },
      {
        "id" : "eadee193-e201-4e3d-8b02-03483a0efb7f",
        "parentId" : "ab08a5c6-33a5-4a15-8fb6-7a5d06d48e1a",
        "authorId" : "aca371f2-0a20-4caf-bcd6-fb6cd77f7135",
        "body" : "https://github.com/flutter/flutter/issues/86763 Opened up a new issue. The start handle is broken only on iOS when switching text direction to RTL, it is unrelated to this change though I was able to reproduce on master.",
        "createdAt" : "2021-07-21T06:29:12Z",
        "updatedAt" : "2021-07-21T06:29:13Z",
        "lastEditedBy" : "aca371f2-0a20-4caf-bcd6-fb6cd77f7135",
        "tags" : [
        ]
      }
    ],
    "commit" : "b365ca4708f8a2c5e98ab3f7d2aef3cf9d558af2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +268,272 @@    switch (type) {\n      case TextSelectionHandleType.left:\n        desiredSize = getHandleSize(startGlyphHeight);\n        handle = SizedBox.fromSize(\n          size: desiredSize,"
  }
]