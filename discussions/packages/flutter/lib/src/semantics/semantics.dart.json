[
  {
    "id" : "d90e8f3a-5221-43ae-b1dc-0ff8e74358c2",
    "prId" : 12793,
    "prUrl" : "https://github.com/flutter/flutter/pull/12793#pullrequestreview-73909129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c84b5a7f-7e55-4fbd-b62d-97fc7fa6ef1f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can show hashValues in the import",
        "createdAt" : "2017-11-02T19:16:39Z",
        "updatedAt" : "2017-11-02T23:19:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b90c266b3890b930212605c4428af71609725b25",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +199,203 @@\n  @override\n  int get hashCode => ui.hashValues(flags, actions, label, textDirection, rect, tags, transform);\n}\n"
  },
  {
    "id" : "f0b3b46b-f9dc-4480-a9d8-3a8fe8037578",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-91998575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0d4c37-88d2-4959-b579-8b4853a317d5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1 to the comprehensive documentation with example.",
        "createdAt" : "2018-01-19T18:37:57Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a296214a-8041-4833-aacc-d3bb67da497f",
        "parentId" : "6e0d4c37-88d2-4959-b579-8b4853a317d5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Thanks!",
        "createdAt" : "2018-01-26T23:31:59Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 387,
    "diffHunk" : "@@ -1,1 +2267,2271 @@}\n\n/// Provides a way to specify the order in which semantic nodes are sorted.\n///\n/// [TranversalSortOrder] objects contain a list of sort keys in the order in"
  },
  {
    "id" : "0089215e-da8e-4109-9a2f-294f4c385ef1",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92674400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I find this paragraph hard to understand. Maybe add an example?",
        "createdAt" : "2018-01-29T18:33:30Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6dfde274-52e8-402f-8e94-950a65f87d71",
        "parentId" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Or add an \"See also\" entry linking to SemanticsSortOrder, which seems to explain this in more detail.",
        "createdAt" : "2018-01-29T18:54:26Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0cd0724b-1bb7-4ff2-99ce-0905a3a150bd",
        "parentId" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Added the See also.",
        "createdAt" : "2018-01-30T18:42:08Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +389,393 @@  /// on iOS and TalkBack on Android).\n  ///\n  /// If [sortOrder.discardParentOrder] is false (the default), [sortOrder]'s\n  /// sort keys are appended to the list of keys from any ancestor nodes into a\n  /// list of [SemanticsSortKey]s that are compared in pairwise order."
  },
  {
    "id" : "ea68eff0-a019-4697-a249-1e2922903611",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92674812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77e9e08e-55f3-49ad-af81-d837b9cc4331",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should this include the `nextNodeId` if set? I imagine it might be useful when you debug traversal order. And this is what gets printed out when you hit \"S\" during a hot run.",
        "createdAt" : "2018-01-29T18:37:46Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f952f802-5703-4a38-903f-f35c5b909bde",
        "parentId" : "77e9e08e-55f3-49ad-af81-d837b9cc4331",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Good point.  Added.",
        "createdAt" : "2018-01-30T18:43:25Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +1225,1229 @@    properties.add(new StringProperty('label', _label, defaultValue: ''));\n    properties.add(new StringProperty('value', _value, defaultValue: ''));\n    properties.add(new StringProperty('increasedValue', _increasedValue, defaultValue: ''));\n    properties.add(new StringProperty('decreasedValue', _decreasedValue, defaultValue: ''));\n    properties.add(new StringProperty('hint', _hint, defaultValue: ''));"
  },
  {
    "id" : "122f6abb-d04e-4f69-837a-0a8c279b6b04",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92675310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I was under the impression that the accompanying engine PR completely removed geometric comparison from the platform side? What's left to move?",
        "createdAt" : "2018-01-29T18:39:43Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ca8ba038-dbb1-4598-97dd-95c0aa9e535c",
        "parentId" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "And without that, what is actually now breaking ties?",
        "createdAt" : "2018-01-29T18:40:40Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d0f617f1-33d0-446e-9a8b-dd831ab96518",
        "parentId" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "As we discussed, nothing is breaking ties.  The order of a tie is currently arbitrary, until I've implemented the geometric comparison again on the framework side.  It doesn't help to continue to compare geometry on the engine side, since they're all assigned `nextNodeId`s already.",
        "createdAt" : "2018-01-30T18:44:54Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +1303,1307 @@\n  int _compareGeometry(_TraversalSortNode other) {\n    // TODO(gspencer): Move the geometric comparison from the platform side to here.\n    // This involves calculating the globally-transformed quad for the semantics node rect\n    // and then sorting by its bounding box, based on the container's directionality."
  },
  {
    "id" : "49a4655e-ce96-46d3-9da0-009edcfd2c22",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92676518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e1a314-cf0c-46c5-bb38-c7c3dca8bdbe",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we document somewhere around the setter/getter for nextNodeId (or for _updateNextNodeId) what setting this to -1 means? Especially, does it mean: Not followed by any node? Or the order of the next node has not been defined?",
        "createdAt" : "2018-01-29T18:49:30Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "de297d92-c296-47a9-a53c-94c02009cb5f",
        "parentId" : "e0e1a314-cf0c-46c5-bb38-c7c3dca8bdbe",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.  It means not followed by another node, and is the value that the last node in the list gets.",
        "createdAt" : "2018-01-30T18:48:32Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +1370,1374 @@    int nextNodeId = -1;\n    for (_TraversalSortNode node in nodesInSemanticsTraversalOrder.reversed) {\n      node.node._updateNextNodeId(nextNodeId);\n      nextNodeId = node.node.id;\n    }"
  },
  {
    "id" : "1dc36f59-f96f-4128-aa25-2ce0b3d5eb67",
    "prId" : 14539,
    "prUrl" : "https://github.com/flutter/flutter/pull/14539#pullrequestreview-96002207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2628456c-89d6-4624-93a8-aa08e8620511",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "pass in topRight when direction is null, so we're more likely to catch regressions where someone starts depending on it",
        "createdAt" : "2018-02-13T01:33:53Z",
        "updatedAt" : "2018-02-13T01:33:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "771b812755a7acd8983d7c1b4aba725750e2f6de",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1448,1452 @@    // this isn't actually expressing a directionality opinion.\n    globalStartCorner = _transformPoint(\n      containerTextDirection == TextDirection.rtl ? node.rect.topRight : node.rect.topLeft,\n      transform,\n    );"
  },
  {
    "id" : "2d99d423-1a58-4d79-a077-ae9eb6e825d4",
    "prId" : 14717,
    "prUrl" : "https://github.com/flutter/flutter/pull/14717#pullrequestreview-96974964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5bb17ba-04c3-47ee-9dfa-5a7740ec2a1c",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, I wouldn't say it's typical. There are two main ways to use it: either specify the entire string of keys in one go, replacing whatever the hierarchy built, or specify one at each level of the widget hierarchy.\r\n\r\nI'd say something like \"If only one key is needed, using the constructor's `key` argument is less verbose.\"",
        "createdAt" : "2018-02-15T18:24:47Z",
        "updatedAt" : "2018-02-15T18:27:53Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "d44bf85a-4cfa-461a-85d4-a0fb5cce3249",
        "parentId" : "e5bb17ba-04c3-47ee-9dfa-5a7740ec2a1c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I guess I don't really understand how this works. Can you suggest some sample code I could include here to explain what \"keys\" does?",
        "createdAt" : "2018-02-15T19:26:18Z",
        "updatedAt" : "2018-02-15T19:26:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a85eddbfd1721d4ec94994eb0513b8729fb927ae",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +2705,2709 @@  /// The keys that should be used to sort this node.\n  ///\n  /// Typically only one key is provided, using the constructor's `key` argument.\n  final List<SemanticsSortKey> keys;\n"
  },
  {
    "id" : "98be80cc-09cd-4a63-ae6e-b5fc65c78d2a",
    "prId" : 15302,
    "prUrl" : "https://github.com/flutter/flutter/pull/15302#pullrequestreview-102423673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12d9df9a-eb74-4d5a-acdb-aa365779ca1c",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "glad to see you are using ifEmpty here!",
        "createdAt" : "2018-03-08T19:18:22Z",
        "updatedAt" : "2018-03-08T22:39:34Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "373cb1d10f051f9617d651580e685505205eb789",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1380,1384 @@    properties.add(new IterableProperty<String>('actions', actions, ifEmpty: null));\n    final List<String> flags = SemanticsFlag.values.values.where((SemanticsFlag flag) => _hasFlag(flag)).map((SemanticsFlag flag) => flag.toString().substring('SemanticsFlag.'.length)).toList();\n    properties.add(new IterableProperty<String>('flags', flags, ifEmpty: null));\n    properties.add(new FlagProperty('isInvisible', value: isInvisible, ifTrue: 'invisible'));\n    properties.add(new StringProperty('label', _label, defaultValue: ''));"
  },
  {
    "id" : "bb870c58-e437-4e4b-93e2-62bcb7cbbf2c",
    "prId" : 16081,
    "prUrl" : "https://github.com/flutter/flutter/pull/16081#pullrequestreview-112929105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61c7fc9a-9f6e-422f-822c-bc5e05851d74",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe I missed it, but should there be an assert somewhere to ensure that you have explicitChildren set when you set this? Or are there use cases where it is actually ok to not do that?\r\n\r\n",
        "createdAt" : "2018-04-17T16:41:20Z",
        "updatedAt" : "2018-04-19T23:02:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "41874df3-2029-4296-b3c5-51b798c7e952",
        "parentId" : "61c7fc9a-9f6e-422f-822c-bc5e05851d74",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "I've add an assert to the semantics render object, since that seems like the right place (can't use the const constructor)",
        "createdAt" : "2018-04-17T18:03:39Z",
        "updatedAt" : "2018-04-19T23:02:14Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "16b9a0c72071bbbc6e796de7cfa237dbbe813610",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2363,2367 @@  /// See also:\n  ///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.\n  bool get scopesRoute => _hasFlag(SemanticsFlag.scopesRoute);\n  set scopesRoute(bool value) {\n    _setFlag(SemanticsFlag.scopesRoute, value);"
  },
  {
    "id" : "40655334-9cb4-4aa2-9a34-b325caafcd3c",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-114151845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8cfdab9-ffbc-4ce5-aa40-2cca36661be2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Does the sort key still have to be its own data type? Why do we not simplify this to be just a double now?",
        "createdAt" : "2018-04-10T06:46:02Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ba5aedf4-19f9-4cc0-a2c4-05ed4799361c",
        "parentId" : "f8cfdab9-ffbc-4ce5-aa40-2cca36661be2",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "A `double` value is undocumentable, so it's unclear what it means to have your nodes sorted together with nodes authored by someone else. The numbers would look magical in the source code. But if the sort keys are provided by _one_ author then they can define and use a custom type.",
        "createdAt" : "2018-04-20T23:43:26Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +1356,1360 @@    final List<_TraversalSortNode> everythingSorted = <_TraversalSortNode>[];\n    final List<_TraversalSortNode> sortNodes = <_TraversalSortNode>[];\n    SemanticsSortKey lastSortKey;\n    for (int position = 0; position < childrenInDefaultOrder.length; position += 1) {\n      final SemanticsNode child = childrenInDefaultOrder[position];"
  },
  {
    "id" : "df1d8a4a-0c7b-4906-b045-78925764c3ef",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113696131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec04c1e3-a5c4-4303-b0e0-53ce95ce9ec3",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Let's say I have four semanticsNodes A to B that are all siblings and that specify a custom sort key. The default traversal order sorts them as follows:\r\n\r\nA: FooSortKey(3.0)\r\nB: FooSortKey(1.0)\r\nC: BarSortKey(1.0)\r\nD: FooSortKey(2.0)\r\n\r\nMy understanding is that this algorithm would sort these nodes to [B, A, C, D], but I would have expected to see [B, D, A, C] (or possibly [C, B, D, A]). No?\r\n",
        "createdAt" : "2018-04-10T06:57:55Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9f1918f8-23e1-4886-8310-1a5501390f7d",
        "parentId" : "ec04c1e3-a5c4-4303-b0e0-53ce95ce9ec3",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "That would be ambiguous as demonstrated by the [B, D, A, C] vs [C, B, D, A] conundrum. I think if your nodes rolled up to a common parent but with different types, chances are that different keys came from different branches of the UI hierarchy, and the most reasonable default is to sort within that hierarchy. If your intention is to sort across branches of the UI, you would provide keys of the matching types.",
        "createdAt" : "2018-04-18T21:49:04Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "1893a156-a56e-400e-b465-bbed0ccf9c94",
        "parentId" : "ec04c1e3-a5c4-4303-b0e0-53ce95ce9ec3",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I don't know where the appropriate place is, but it feels like we should document this somewhere.",
        "createdAt" : "2018-04-19T17:27:43Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +1366,1370 @@          sortKey.runtimeType == lastSortKey.runtimeType &&\n          (sortKey == null || sortKey.name == lastSortKey.name);\n      if (!isCompatibleWithPreviousSortKey && sortNodes.isNotEmpty) {\n        // Do not sort groups with null sort keys. List.sort does not guarantee\n        // a stable sort order."
  },
  {
    "id" : "1837c082-8d5c-4563-9d43-1f994dd94c45",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113406414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "032866a8-a81c-4dc9-b415-c2db58e50ce8",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is the unstableness of sort also a problem for non-null sort keys that are equal? Will sort put these in \"random\" order?",
        "createdAt" : "2018-04-10T06:59:44Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8da66bac-021c-497d-9ca3-020e8e791078",
        "parentId" : "032866a8-a81c-4dc9-b415-c2db58e50ce8",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Correct. I do not expect this to be a problem though. If you are specifying explicit keys, it does not make sense to supply equal keys.",
        "createdAt" : "2018-04-18T21:50:46Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "1cfa4d90-ad56-4a5d-a7ab-69129ff132f5",
        "parentId" : "032866a8-a81c-4dc9-b415-c2db58e50ce8",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Actually, because we are sorting by `_TraversalSortNode` there's no way you can have this situation. `_TraversalSortNode` uses list position in paint order as the tie breaker, so there's no way you can get two equal `_TraversalSortNode`s.",
        "createdAt" : "2018-04-18T21:54:23Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +1368,1372 @@      if (!isCompatibleWithPreviousSortKey && sortNodes.isNotEmpty) {\n        // Do not sort groups with null sort keys. List.sort does not guarantee\n        // a stable sort order.\n        if (lastSortKey != null) {\n          sortNodes.sort();"
  },
  {
    "id" : "a7f61524-4d5b-4ab9-922a-cde81a3c8856",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113405971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f93b5a7a-f643-4cfa-8618-10b0db38b8b0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Looks like everythingSorted could just be a `List<SemanticsNode>` from the beginning to avoid this conversion?",
        "createdAt" : "2018-04-10T07:00:45Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "934f068e-af1e-4b44-a894-dccfd683c98b",
        "parentId" : "f93b5a7a-f643-4cfa-8618-10b0db38b8b0",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'm not sure how this would work. Only `_TraversalSortNode` knows how to sort by sort key.",
        "createdAt" : "2018-04-18T21:52:45Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +1390,1394 @@    everythingSorted.addAll(sortNodes);\n\n    return everythingSorted\n      .map<SemanticsNode>((_TraversalSortNode sortNode) => sortNode.node)\n      .toList();"
  },
  {
    "id" : "b5afd6f1-8578-44f0-add7-966cb5900799",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113407558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2179c6bb-dc33-44a5-909e-3e36bfcaa958",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Slight confusion: Doesn't this method also get called for lists of length one that don't have overlap per definition?",
        "createdAt" : "2018-04-10T07:21:59Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d069f7f8-b1dc-45e1-96d2-7b19e1503eba",
        "parentId" : "2179c6bb-dc33-44a5-909e-3e36bfcaa958",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Yeah, it's one of those \"Are all elements of an empty set blue?\" kind of situation. It's just a special case. But I made it clearer in the docs.",
        "createdAt" : "2018-04-18T21:58:39Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 425,
    "diffHunk" : "@@ -1,1 +1632,1636 @@  }\n\n  /// Sorts [nodes] where nodes intersect both vertically and horizontally.\n  ///\n  /// In the special case when [nodes] contains one or less nodes, this method"
  },
  {
    "id" : "e540c825-e299-47de-9856-96f6279b1294",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113469693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fcf5987-c812-434b-b788-ef80dcfae27e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "bonus points: would be great to link to the graphic from you slides here.",
        "createdAt" : "2018-04-10T07:24:02Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8af61ad8-12bf-42e7-a322-b38f220215f4",
        "parentId" : "3fcf5987-c812-434b-b788-ef80dcfae27e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done.",
        "createdAt" : "2018-04-19T05:23:06Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 439,
    "diffHunk" : "@@ -1,1 +1646,1650 @@  /// right or down\", defined as the [Offset.direction] being between `-pi/4`\n  /// and `3*pi/4`), then the semantics node whose center is at the end of the\n  /// vector is said to be traversed after.\n  List<SemanticsNode> sortedWithinKnot() {\n    if (nodes.length <= 1) {"
  },
  {
    "id" : "6bcf9f23-bfb4-4f6c-be29-6b08968b0ad1",
    "prId" : 16253,
    "prUrl" : "https://github.com/flutter/flutter/pull/16253#pullrequestreview-113470187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1ae1bb-bf21-40ad-ba51-fe76a9f7358f",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "to avoid all this mapping, can search not operate on semanticsnodes and sortedIds be a `List<SemanticNode>`?",
        "createdAt" : "2018-04-10T07:36:12Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8b709a53-a678-44ac-8019-d94b41dde135",
        "parentId" : "6a1ae1bb-bf21-40ad-ba51-fe76a9f7358f",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "It uses the position in the list as a tie breaker to guarantee that the sorting is stable. So for now I think this is the most idiomatic method. I also measured the efficiency of the entire algorithm across many of the Flutter Gallery screens. It never exceeded 100µs on Moto G4. This is not surprising as the `SemanticsNode` tree is very sparse compared to the `RenderNode` tree.",
        "createdAt" : "2018-04-19T05:26:50Z",
        "updatedAt" : "2018-04-23T17:13:20Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b1935f0b5229f09af9c737552712205f273ecb",
    "line" : 494,
    "diffHunk" : "@@ -1,1 +1701,1705 @@    }\n\n    startNodes.map((SemanticsNode node) => node.id).forEach(search);\n    return sortedIds.map<SemanticsNode>((int id) => nodeMap[id]).toList().reversed.toList();\n  }"
  },
  {
    "id" : "f665afa0-0072-4eb4-a292-21c8bcad396f",
    "prId" : 18758,
    "prUrl" : "https://github.com/flutter/flutter/pull/18758#pullrequestreview-139991957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fce823b4-49f3-464f-b380-65e7243a56b5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Great doc comment!",
        "createdAt" : "2018-07-24T16:44:26Z",
        "updatedAt" : "2018-07-24T17:13:02Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "08bd733f-18af-44de-ab38-5f6cebcf8705",
        "parentId" : "fce823b4-49f3-464f-b380-65e7243a56b5",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "🌮 ",
        "createdAt" : "2018-07-24T17:14:43Z",
        "updatedAt" : "2018-07-24T17:14:43Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e78ebf88adcdfa85c422fdae71ba85258568e3be",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +574,578 @@  final bool image;\n\n  /// If non-null, whether the node should be considered a live region.\n  ///\n  /// On Android, when a live region semantics node is first created TalkBack"
  },
  {
    "id" : "a9eafc6f-fe3f-4f9b-8e3a-0e3f8756cd69",
    "prId" : 18758,
    "prUrl" : "https://github.com/flutter/flutter/pull/18758#pullrequestreview-139991675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f442dd8-816f-405b-bcb9-88919604703c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you document what iOS does when this is set?",
        "createdAt" : "2018-07-24T16:46:41Z",
        "updatedAt" : "2018-07-24T17:13:02Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "54be70e7-eee3-4ffa-82a4-95c557ff3cfa",
        "parentId" : "6f442dd8-816f-405b-bcb9-88919604703c",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-07-24T17:13:58Z",
        "updatedAt" : "2018-07-24T17:13:58Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e78ebf88adcdfa85c422fdae71ba85258568e3be",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +576,580 @@  /// If non-null, whether the node should be considered a live region.\n  ///\n  /// On Android, when a live region semantics node is first created TalkBack\n  /// will make a polite announcement of the current label. This announcement\n  /// occurs even if the node is not focused. Subsequent polite announcements"
  },
  {
    "id" : "e19762b3-64a6-423b-9068-8940c1604791",
    "prId" : 18882,
    "prUrl" : "https://github.com/flutter/flutter/pull/18882#pullrequestreview-138885687",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3097be5d-0704-4b05-b701-5ecfcbb08ccd",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should this doc also be updated to the version you are using above?",
        "createdAt" : "2018-07-19T22:38:01Z",
        "updatedAt" : "2018-07-19T23:26:39Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a8459ece-a028-4d76-91c8-74abf4408d59",
        "parentId" : "3097be5d-0704-4b05-b701-5ecfcbb08ccd",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Do you mean the CustomSemanticsAction doc comment?",
        "createdAt" : "2018-07-19T23:23:29Z",
        "updatedAt" : "2018-07-19T23:26:39Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b331196989edbf1ad218894290c9c68f49902f86",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +818,822 @@  /// A map from each supported [CustomSemanticsAction] to a provided handler.\n  /// \n  /// The handler associated with each custom action is called whenever a\n  /// semantics event of type [SemanticsEvent.customEvent] is received. The\n  /// provided argument will be an identifier used to retrieve an instance of"
  },
  {
    "id" : "5541a4a4-f653-4dd6-b3ac-551a53ee5194",
    "prId" : 19932,
    "prUrl" : "https://github.com/flutter/flutter/pull/19932#pullrequestreview-141654416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1804ddf-0792-4d71-ab0f-81d3beaa4dba",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Just curious: why the hash list?",
        "createdAt" : "2018-07-30T17:45:51Z",
        "updatedAt" : "2018-07-30T17:46:16Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "40263f2b-4786-4fd3-b6f4-3089c51ba820",
        "parentId" : "f1804ddf-0792-4d71-ab0f-81d3beaa4dba",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "we have an assert in `ui.hashValues` that fails for iterables - not sure how it didn't catch this before, or if it is new.",
        "createdAt" : "2018-07-30T18:14:54Z",
        "updatedAt" : "2018-07-30T18:14:55Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2d0df115feb5ac6af29c49079ae2726e1f67dd4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +366,370 @@      scrollExtentMin,\n      transform,\n      ui.hashList(customSemanticsActionIds),\n    );\n  }"
  },
  {
    "id" : "3a4b7573-252d-42d3-b8a0-f0b8161b756e",
    "prId" : 21764,
    "prUrl" : "https://github.com/flutter/flutter/pull/21764#pullrequestreview-159254384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bcfce2d-2360-4afa-adf8-c407badbab67",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This is a great doc comment. Many copy'n'paste it to this property's namesakes?",
        "createdAt" : "2018-09-27T01:25:47Z",
        "updatedAt" : "2018-10-09T19:38:13Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac90f44edfec1a16b0ca19ee67e444efe212e6d",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +2954,2958 @@  }\n\n  /// The total number of scrollable children that contribute to semantics.\n  ///\n  /// If the number of children are unknown or unbounded, this value will be"
  },
  {
    "id" : "1704dd44-93d8-4c96-8bc9-12f60fd951b4",
    "prId" : 25670,
    "prUrl" : "https://github.com/flutter/flutter/pull/25670#pullrequestreview-192395275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f622fcd-b886-4dad-8713-696429cc6a21",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "A diagram would probably help a lot here",
        "createdAt" : "2018-12-21T23:12:43Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "1c377b26-4dac-4ee1-b182-3073bab9b726",
        "parentId" : "0f622fcd-b886-4dad-8713-696429cc6a21",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "+1",
        "createdAt" : "2019-01-11T00:07:24Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a4ca94b8-1804-41a6-9fe6-3f1d673c070c",
        "parentId" : "0f622fcd-b886-4dad-8713-696429cc6a21",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done, see section below. The embedded diagram can be previewed here: https://github.com/flutter/assets-for-api-docs/pull/52/files?short_path=a0d507c#diff-a0d507c94a0c10e017f62b301780d2d4",
        "createdAt" : "2019-01-14T22:22:46Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "207ffc34-1c9f-45e3-8d1e-70142912c21a",
        "parentId" : "0f622fcd-b886-4dad-8713-696429cc6a21",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Diagram definitely helps.",
        "createdAt" : "2019-01-14T22:29:43Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad0c9e6a002e626a1af026f5ecd6edd47b1ff01",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +1548,1552 @@  /// represented by this [SemanticsNode]. In other words, the thickness\n  /// describes how high the box is that this [SemanticsNode] occupies in three\n  /// dimensional space. The two other dimensions are defined by [rect].\n  ///\n  /// ## Sample Code"
  },
  {
    "id" : "69125824-a0d0-423e-9908-eb708fcaabf6",
    "prId" : 25670,
    "prUrl" : "https://github.com/flutter/flutter/pull/25670#pullrequestreview-191805271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46d09de3-c801-4382-ba37-4b1fb726afb1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this might deserve a breaking change announcement",
        "createdAt" : "2019-01-11T00:10:00Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7cc5f01a-caf4-422d-82a2-320f10fc69f8",
        "parentId" : "46d09de3-c801-4382-ba37-4b1fb726afb1",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done: https://groups.google.com/forum/#!topic/flutter-announce/Y1TG0CNgsM8",
        "createdAt" : "2019-01-11T19:15:56Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad0c9e6a002e626a1af026f5ecd6edd47b1ff01",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +3600,3604 @@  /// absorb other configurations and it is recommended to only absorb compatible\n  /// configurations as determined by [isCompatibleWith].\n  void absorb(SemanticsConfiguration child) {\n    assert(!explicitChildNodes);\n"
  },
  {
    "id" : "c2e01d05-2543-4ad4-8b7e-486d19e24d27",
    "prId" : 25670,
    "prUrl" : "https://github.com/flutter/flutter/pull/25670#pullrequestreview-192393283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb0f44ed-6b99-4ca4-b3bf-ffed888afce9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The diagram can be previewed here: https://github.com/flutter/assets-for-api-docs/pull/52/files?short_path=a0d507c#diff-a0d507c94a0c10e017f62b301780d2d4",
        "createdAt" : "2019-01-14T22:24:15Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad0c9e6a002e626a1af026f5ecd6edd47b1ff01",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +1579,1583 @@  ///\n  /// ![A diagram illustrating the elevations of three PhysicalModels and their\n  /// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)\n  ///\n  /// In this example the [RenderObject]s for [PhysicalModel] C and B share one"
  },
  {
    "id" : "215b62f0-133c-447e-bd3f-73009efd44d3",
    "prId" : 36297,
    "prUrl" : "https://github.com/flutter/flutter/pull/36297#pullrequestreview-262644736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d301d815-ae6a-45ba-a51a-019e9aa0964b",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "A comment in `proxy_box.dart` implies that `null` is a valid value for this field. Let's document what null means vs others.",
        "createdAt" : "2019-07-16T19:56:06Z",
        "updatedAt" : "2019-07-17T22:18:36Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fb79d9a2959da1f4447cb86bbdde2613c51fc0c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +709,713 @@  ///\n  /// This option is null when [textField] is false.\n  final bool multiline;\n\n  /// If non-null, whether the node corresponds to the root of a subtree for"
  },
  {
    "id" : "91470ce0-25c6-4d85-ba37-40dabeb71939",
    "prId" : 40468,
    "prUrl" : "https://github.com/flutter/flutter/pull/40468#pullrequestreview-288755731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "138c5017-a324-4805-b172-858892015d33",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "We should specify exactly what we mean by \"characters\" here",
        "createdAt" : "2019-09-14T00:07:44Z",
        "updatedAt" : "2019-09-17T19:59:05Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "cf5788bf-dedc-4c82-9d31-58a1f7bbdd07",
        "parentId" : "138c5017-a324-4805-b172-858892015d33",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Added clarification. ",
        "createdAt" : "2019-09-16T16:36:38Z",
        "updatedAt" : "2019-09-17T19:59:05Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e71f9e7068692be340c076da49b67f1356a1c6fa",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +312,316 @@  final int platformViewId;\n\n  /// The maximum number of characters that can be entered into an editable\n  /// text field.\n  ///"
  },
  {
    "id" : "14894557-6ae0-4eb8-885d-a5e9e8d4bf64",
    "prId" : 41814,
    "prUrl" : "https://github.com/flutter/flutter/pull/41814#pullrequestreview-296586852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcdd57a5-6bb9-45b8-9795-2b99999f3950",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Maybe also define what inout focus means?",
        "createdAt" : "2019-10-02T23:42:46Z",
        "updatedAt" : "2019-10-09T19:08:27Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ee88cbfe-e754-49a1-bd88-f1bb8dd8f2b7",
        "parentId" : "dcdd57a5-6bb9-45b8-9795-2b99999f3950",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "That's what the `(indicates that the node will receive keyboard events)` was supposed to be doing, I think. I reworded it.",
        "createdAt" : "2019-10-03T00:02:29Z",
        "updatedAt" : "2019-10-09T19:08:27Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7980b335a25a4cf48b0fc37f66fd5e0511df3f23",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +707,711 @@  /// to be confused with accessibility focus. Accessibility focus is the\n  /// green/black rectangular highlight that TalkBack/VoiceOver draws around the\n  /// element it is reading, and is separate from input focus.\n  final bool focusable;\n"
  },
  {
    "id" : "f853226c-cbe4-4b59-9482-41bb79c6b43c",
    "prId" : 45722,
    "prUrl" : "https://github.com/flutter/flutter/pull/45722#pullrequestreview-325742092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "233e15a6-9978-413e-82a3-2a3857e074ac",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same as in the other PRs, we already know that other is assignable to CustomSemanticsAction.",
        "createdAt" : "2019-12-02T21:04:51Z",
        "updatedAt" : "2019-12-02T21:05:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f75f25e72bf321c7b2ccb21f9dc9f99fbdd232",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +130,134 @@    if (other.runtimeType != runtimeType)\n      return false;\n    return other is CustomSemanticsAction\n        && other.label == label\n        && other.hint == hint"
  },
  {
    "id" : "8b23dd8d-158b-4745-b884-9400e5b66690",
    "prId" : 45722,
    "prUrl" : "https://github.com/flutter/flutter/pull/45722#pullrequestreview-325742092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9915ee40-24fe-4c0c-945b-e19dc947b346",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Same here.",
        "createdAt" : "2019-12-02T21:05:07Z",
        "updatedAt" : "2019-12-02T21:05:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6f75f25e72bf321c7b2ccb21f9dc9f99fbdd232",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +563,567 @@    if (other.runtimeType != runtimeType)\n      return false;\n    return other is SemanticsHintOverrides\n        && other.onTapHint == onTapHint\n        && other.onLongPressHint == onLongPressHint;"
  },
  {
    "id" : "da759d7c-406a-4993-b6e5-246bc46f7ff9",
    "prId" : 48920,
    "prUrl" : "https://github.com/flutter/flutter/pull/48920#pullrequestreview-348769122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2418dc34-cbf6-4d37-bd98-a91e5b2288ca",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Do we want to mention that it throws if they aren't the same type, or is that not something we document specifically like that?",
        "createdAt" : "2020-01-21T23:53:39Z",
        "updatedAt" : "2020-01-27T16:06:45Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "c6ade759-f1c3-47aa-a6da-7f50a0deb892",
        "parentId" : "2418dc34-cbf6-4d37-bd98-a91e5b2288ca",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, it's assumed that we enforce the contract. It's OK to say it asserts, but not necessary if you say that something \"must\" be a certain way.",
        "createdAt" : "2020-01-27T15:52:41Z",
        "updatedAt" : "2020-01-27T16:07:10Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3add76c2559697ddbf906fe0b3f963193470313",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +4006,4010 @@  /// same [name].\n  ///\n  /// Sort keys must have the same `runtimeType` when compared.\n  ///\n  /// Keys with no [name] are compared to other keys with no [name], and will"
  },
  {
    "id" : "91440908-d00d-4cb8-bbdc-0b4e6320fc22",
    "prId" : 48920,
    "prUrl" : "https://github.com/flutter/flutter/pull/48920#pullrequestreview-348769122",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28df100c-6133-4513-882c-13cb80a01eda",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "If they aren't the same `runtimeType`, should we return here for non-debug builds?",
        "createdAt" : "2020-01-21T23:56:02Z",
        "updatedAt" : "2020-01-27T16:06:45Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "1d2f882f-e3b2-40ad-b6d7-3de909694098",
        "parentId" : "28df100c-6133-4513-882c-13cb80a01eda",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "One of the main reasons to use asserts to enforce the contract is to avoid a lot of code for checking the contract in release mode that slows things down, and this, while it's just a conditional, just adds overhead to programs that abide by the contract.  Once the contract is violated, then all bets are off anyhow.\r\n\r\nAlso, what should we return? It seems like it's possible that it would do the \"right\" thing if they have different types, but at least one of them has a name.",
        "createdAt" : "2020-01-27T16:00:24Z",
        "updatedAt" : "2020-01-27T16:07:10Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3add76c2559697ddbf906fe0b3f963193470313",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +4016,4020 @@    // Sort by name first and then subclass ordering.\n    assert(runtimeType == other.runtimeType, 'Semantics sort keys can only be compared to other sort keys of the same type.');\n\n    // Defer to the subclass implementation for ordering only if the names are\n    // identical (or both null)."
  }
]