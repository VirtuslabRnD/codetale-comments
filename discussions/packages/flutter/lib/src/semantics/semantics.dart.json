[
  {
    "id" : "d90e8f3a-5221-43ae-b1dc-0ff8e74358c2",
    "prId" : 12793,
    "prUrl" : "https://github.com/flutter/flutter/pull/12793#pullrequestreview-73909129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c84b5a7f-7e55-4fbd-b62d-97fc7fa6ef1f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can show hashValues in the import",
        "createdAt" : "2017-11-02T19:16:39Z",
        "updatedAt" : "2017-11-02T23:19:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b90c266b3890b930212605c4428af71609725b25",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +199,203 @@\n  @override\n  int get hashCode => ui.hashValues(flags, actions, label, textDirection, rect, tags, transform);\n}\n"
  },
  {
    "id" : "f0b3b46b-f9dc-4480-a9d8-3a8fe8037578",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-91998575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e0d4c37-88d2-4959-b579-8b4853a317d5",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "+1 to the comprehensive documentation with example.",
        "createdAt" : "2018-01-19T18:37:57Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "a296214a-8041-4833-aacc-d3bb67da497f",
        "parentId" : "6e0d4c37-88d2-4959-b579-8b4853a317d5",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Thanks!",
        "createdAt" : "2018-01-26T23:31:59Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 387,
    "diffHunk" : "@@ -1,1 +2267,2271 @@}\n\n/// Provides a way to specify the order in which semantic nodes are sorted.\n///\n/// [TranversalSortOrder] objects contain a list of sort keys in the order in"
  },
  {
    "id" : "0089215e-da8e-4109-9a2f-294f4c385ef1",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92674400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I find this paragraph hard to understand. Maybe add an example?",
        "createdAt" : "2018-01-29T18:33:30Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6dfde274-52e8-402f-8e94-950a65f87d71",
        "parentId" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Or add an \"See also\" entry linking to SemanticsSortOrder, which seems to explain this in more detail.",
        "createdAt" : "2018-01-29T18:54:26Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0cd0724b-1bb7-4ff2-99ce-0905a3a150bd",
        "parentId" : "0f09b260-ff12-421a-836d-1b5050bf3817",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Added the See also.",
        "createdAt" : "2018-01-30T18:42:08Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +389,393 @@  /// on iOS and TalkBack on Android).\n  ///\n  /// If [sortOrder.discardParentOrder] is false (the default), [sortOrder]'s\n  /// sort keys are appended to the list of keys from any ancestor nodes into a\n  /// list of [SemanticsSortKey]s that are compared in pairwise order."
  },
  {
    "id" : "ea68eff0-a019-4697-a249-1e2922903611",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92674812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77e9e08e-55f3-49ad-af81-d837b9cc4331",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should this include the `nextNodeId` if set? I imagine it might be useful when you debug traversal order. And this is what gets printed out when you hit \"S\" during a hot run.",
        "createdAt" : "2018-01-29T18:37:46Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f952f802-5703-4a38-903f-f35c5b909bde",
        "parentId" : "77e9e08e-55f3-49ad-af81-d837b9cc4331",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Good point.  Added.",
        "createdAt" : "2018-01-30T18:43:25Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +1225,1229 @@    properties.add(new StringProperty('label', _label, defaultValue: ''));\n    properties.add(new StringProperty('value', _value, defaultValue: ''));\n    properties.add(new StringProperty('increasedValue', _increasedValue, defaultValue: ''));\n    properties.add(new StringProperty('decreasedValue', _decreasedValue, defaultValue: ''));\n    properties.add(new StringProperty('hint', _hint, defaultValue: ''));"
  },
  {
    "id" : "122f6abb-d04e-4f69-837a-0a8c279b6b04",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92675310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I was under the impression that the accompanying engine PR completely removed geometric comparison from the platform side? What's left to move?",
        "createdAt" : "2018-01-29T18:39:43Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ca8ba038-dbb1-4598-97dd-95c0aa9e535c",
        "parentId" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "And without that, what is actually now breaking ties?",
        "createdAt" : "2018-01-29T18:40:40Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d0f617f1-33d0-446e-9a8b-dd831ab96518",
        "parentId" : "a214a2fb-9e18-4aa9-95e6-5b7bfef54372",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "As we discussed, nothing is breaking ties.  The order of a tie is currently arbitrary, until I've implemented the geometric comparison again on the framework side.  It doesn't help to continue to compare geometry on the engine side, since they're all assigned `nextNodeId`s already.",
        "createdAt" : "2018-01-30T18:44:54Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 257,
    "diffHunk" : "@@ -1,1 +1303,1307 @@\n  int _compareGeometry(_TraversalSortNode other) {\n    // TODO(gspencer): Move the geometric comparison from the platform side to here.\n    // This involves calculating the globally-transformed quad for the semantics node rect\n    // and then sorting by its bounding box, based on the container's directionality."
  },
  {
    "id" : "49a4655e-ce96-46d3-9da0-009edcfd2c22",
    "prId" : 14060,
    "prUrl" : "https://github.com/flutter/flutter/pull/14060#pullrequestreview-92676518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e1a314-cf0c-46c5-bb38-c7c3dca8bdbe",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can we document somewhere around the setter/getter for nextNodeId (or for _updateNextNodeId) what setting this to -1 means? Especially, does it mean: Not followed by any node? Or the order of the next node has not been defined?",
        "createdAt" : "2018-01-29T18:49:30Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "de297d92-c296-47a9-a53c-94c02009cb5f",
        "parentId" : "e0e1a314-cf0c-46c5-bb38-c7c3dca8bdbe",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Done.  It means not followed by another node, and is the value that the last node in the list gets.",
        "createdAt" : "2018-01-30T18:48:32Z",
        "updatedAt" : "2018-02-05T21:45:32Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2848f835bb710928bfb69575ac0095388546fa43",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +1370,1374 @@    int nextNodeId = -1;\n    for (_TraversalSortNode node in nodesInSemanticsTraversalOrder.reversed) {\n      node.node._updateNextNodeId(nextNodeId);\n      nextNodeId = node.node.id;\n    }"
  },
  {
    "id" : "1dc36f59-f96f-4128-aa25-2ce0b3d5eb67",
    "prId" : 14539,
    "prUrl" : "https://github.com/flutter/flutter/pull/14539#pullrequestreview-96002207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2628456c-89d6-4624-93a8-aa08e8620511",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "pass in topRight when direction is null, so we're more likely to catch regressions where someone starts depending on it",
        "createdAt" : "2018-02-13T01:33:53Z",
        "updatedAt" : "2018-02-13T01:33:53Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "771b812755a7acd8983d7c1b4aba725750e2f6de",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1448,1452 @@    // this isn't actually expressing a directionality opinion.\n    globalStartCorner = _transformPoint(\n      containerTextDirection == TextDirection.rtl ? node.rect.topRight : node.rect.topLeft,\n      transform,\n    );"
  },
  {
    "id" : "2d99d423-1a58-4d79-a077-ae9eb6e825d4",
    "prId" : 14717,
    "prUrl" : "https://github.com/flutter/flutter/pull/14717#pullrequestreview-96974964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5bb17ba-04c3-47ee-9dfa-5a7740ec2a1c",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, I wouldn't say it's typical. There are two main ways to use it: either specify the entire string of keys in one go, replacing whatever the hierarchy built, or specify one at each level of the widget hierarchy.\r\n\r\nI'd say something like \"If only one key is needed, using the constructor's `key` argument is less verbose.\"",
        "createdAt" : "2018-02-15T18:24:47Z",
        "updatedAt" : "2018-02-15T18:27:53Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "d44bf85a-4cfa-461a-85d4-a0fb5cce3249",
        "parentId" : "e5bb17ba-04c3-47ee-9dfa-5a7740ec2a1c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I guess I don't really understand how this works. Can you suggest some sample code I could include here to explain what \"keys\" does?",
        "createdAt" : "2018-02-15T19:26:18Z",
        "updatedAt" : "2018-02-15T19:26:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a85eddbfd1721d4ec94994eb0513b8729fb927ae",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +2705,2709 @@  /// The keys that should be used to sort this node.\n  ///\n  /// Typically only one key is provided, using the constructor's `key` argument.\n  final List<SemanticsSortKey> keys;\n"
  },
  {
    "id" : "98be80cc-09cd-4a63-ae6e-b5fc65c78d2a",
    "prId" : 15302,
    "prUrl" : "https://github.com/flutter/flutter/pull/15302#pullrequestreview-102423673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12d9df9a-eb74-4d5a-acdb-aa365779ca1c",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "glad to see you are using ifEmpty here!",
        "createdAt" : "2018-03-08T19:18:22Z",
        "updatedAt" : "2018-03-08T22:39:34Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "373cb1d10f051f9617d651580e685505205eb789",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1380,1384 @@    properties.add(new IterableProperty<String>('actions', actions, ifEmpty: null));\n    final List<String> flags = SemanticsFlag.values.values.where((SemanticsFlag flag) => _hasFlag(flag)).map((SemanticsFlag flag) => flag.toString().substring('SemanticsFlag.'.length)).toList();\n    properties.add(new IterableProperty<String>('flags', flags, ifEmpty: null));\n    properties.add(new FlagProperty('isInvisible', value: isInvisible, ifTrue: 'invisible'));\n    properties.add(new StringProperty('label', _label, defaultValue: ''));"
  }
]