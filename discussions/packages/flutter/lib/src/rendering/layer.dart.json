[
  {
    "id" : "b29c9b6e-c424-499c-9999-6d515f21b64c",
    "prId" : 4232,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "027ed13f-0cef-45c5-8b03-f1ff1038b082",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "no constructor dartdoc? :-)\n",
        "createdAt" : "2016-05-27T07:37:52Z",
        "updatedAt" : "2016-05-27T15:48:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c0031dd9-70df-44ee-8a07-e1ee3367d994",
        "parentId" : "027ed13f-0cef-45c5-8b03-f1ff1038b082",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I didn't doc the members either.  I'll have to come back to it.\n",
        "createdAt" : "2016-05-27T15:42:35Z",
        "updatedAt" : "2016-05-27T15:48:14Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "69ef23a7a145657fef2050fefab2e255a1e2bc95",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +119,123 @@/// (mojo-only) A layer that represents content from another process.\nclass ChildSceneLayer extends Layer {\n  ChildSceneLayer({\n    this.offset,\n    this.devicePixelRatio,"
  },
  {
    "id" : "a228b2ad-b189-4fe0-8dce-d9b40a972f60",
    "prId" : 4232,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c7f8db2-afe6-42ae-b040-b76612bb1c18",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should document where the SkPicture trace goes and how to use it.\n",
        "createdAt" : "2016-05-27T07:38:16Z",
        "updatedAt" : "2016-05-27T15:48:14Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e705e2fa-fbd0-4a37-a2e5-dd76ef167843",
        "parentId" : "0c7f8db2-afe6-42ae-b040-b76612bb1c18",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'm not sure this feature makes sense anymore.  We should replace it with something that integrates with the diagnostic server.\n",
        "createdAt" : "2016-05-27T15:43:11Z",
        "updatedAt" : "2016-05-27T15:48:14Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "69ef23a7a145657fef2050fefab2e255a1e2bc95",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +173,177 @@  /// The rasterizer threshold is an integer specifying the number of frame\n  /// intervals that the rasterizer must miss before it decides that the frame\n  /// is suitable for capturing an SkPicture trace for further analysis.\n  final int rasterizerThreshold;\n"
  },
  {
    "id" : "b9d0d72c-b942-48d1-bf8f-2aae98475aec",
    "prId" : 4316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99623d9e-3c2b-4015-a7e1-fa2c0759a581",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Is this really physical pixels? e.g. consider if the ChildSceneLayer is inside a transformed layer with a scale and a rotation and a skew.\n",
        "createdAt" : "2016-06-02T16:44:07Z",
        "updatedAt" : "2016-06-02T17:56:18Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "30264609-da4d-47e4-9a50-2164f92e213b",
        "parentId" : "99623d9e-3c2b-4015-a7e1-fa2c0759a581",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yes, it needs to take that information into account.  The child needs to produce physical pixels so it needs to be informed how much scaling is going to happen by its parents.  (I'm sure we don't compute this accurately yet.)\n",
        "createdAt" : "2016-06-02T16:46:55Z",
        "updatedAt" : "2016-06-02T17:56:18Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "40ec6a2a76d0261416b7a20a588497a5c734817f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +133,137 @@  Offset offset;\n\n  /// The number of physical pixels the child should produce for each logical pixel.\n  double devicePixelRatio;\n"
  },
  {
    "id" : "1a0b48f8-3990-46ff-aa01-2d56bfb06d86",
    "prId" : 8819,
    "prUrl" : "https://github.com/flutter/flutter/pull/8819#pullrequestreview-27250316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5596d352-1917-4e95-b6c3-6e3341dc7093",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should explain \"physical model\"",
        "createdAt" : "2017-03-16T03:40:24Z",
        "updatedAt" : "2017-03-16T03:46:56Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "80c028a9-574c-4cc1-b916-a1a2b6db60b5",
        "parentId" : "5596d352-1917-4e95-b6c3-6e3341dc7093",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "done.",
        "createdAt" : "2017-03-16T03:46:33Z",
        "updatedAt" : "2017-03-16T03:46:56Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4e33f636567c7cf76660edfa0ad0ddecc13f670",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +523,527 @@}\n\n/// A composited layer that uses a physical model to producing lighting effects.\n///\n/// For example, the layer casts a shadow according to its geometry and the"
  },
  {
    "id" : "faf9d5c6-77f0-4409-9188-1996fe57a198",
    "prId" : 9456,
    "prUrl" : "https://github.com/flutter/flutter/pull/9456#pullrequestreview-33376848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbf32adb-ab41-4344-b1c0-3f2c53a6310e",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "parent is null for the root layer?",
        "createdAt" : "2017-04-18T21:33:02Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "63c31c07-7114-48bc-9aa9-0e0169a28657",
        "parentId" : "bbf32adb-ab41-4344-b1c0-3f2c53a6310e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "added",
        "createdAt" : "2017-04-18T23:36:40Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f11a74a7adf54bac58830a11c214db57ec7d5622",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +33,37 @@///    for painting [RenderObject] trees on the the display.\nabstract class Layer extends AbstractNode with TreeDiagnosticsMixin {\n  /// This layer's parent in the layer tree.\n  ///\n  /// The [parent] of the root node in the layer tree is null."
  },
  {
    "id" : "1a8bcdab-0865-40ef-960d-bc4029f66e9b",
    "prId" : 9456,
    "prUrl" : "https://github.com/flutter/flutter/pull/9456#pullrequestreview-33377792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9023a1ae-3c37-4852-b5bc-2beab139085a",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "This might be a good place for a See Also that links to the subclasses.",
        "createdAt" : "2017-04-18T21:42:11Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "644d5bd1-8542-4aa8-ac87-d9c23d3bd3b5",
        "parentId" : "9023a1ae-3c37-4852-b5bc-2beab139085a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "the docs will include a list of subclasses automatically",
        "createdAt" : "2017-04-18T23:44:25Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f11a74a7adf54bac58830a11c214db57ec7d5622",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +203,207 @@/// A [ContainerLayer] instance merely takes a list of children and inserts them\n/// into the composited rendering in order. There are subclasses of\n/// [ContainerLayer] which apply more elaborate effects in the process.\nclass ContainerLayer extends Layer {\n  /// The first composited layer in this layer's child list."
  },
  {
    "id" : "a7607000-851f-4b4d-9625-6d25a89fc7f4",
    "prId" : 9456,
    "prUrl" : "https://github.com/flutter/flutter/pull/9456#pullrequestreview-33564210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d29c834-b247-4602-b47f-2ad9b2dc36f6",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I was a little surprised to see the handmade linked list support here. Maybe this class should be a LinkedListEntry?",
        "createdAt" : "2017-04-18T21:46:46Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "a0f96290-4707-496c-8c89-a619d032b420",
        "parentId" : "7d29c834-b247-4602-b47f-2ad9b2dc36f6",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not sure it really matters. This is really low-level stuff in the framework. Unless there's a performance reason to do it (and I wouldn't be surprised if it was the opposite), I'd rather keep this simple.",
        "createdAt" : "2017-04-18T23:46:50Z",
        "updatedAt" : "2017-04-18T23:47:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d6410951-8335-4fff-8d25-c1179dae95d9",
        "parentId" : "7d29c834-b247-4602-b47f-2ad9b2dc36f6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Using LinkedListEntry implies exposing more list manipulation via the API that we want, unfortunately.",
        "createdAt" : "2017-04-19T17:20:51Z",
        "updatedAt" : "2017-04-19T17:20:51Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "f11a74a7adf54bac58830a11c214db57ec7d5622",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +32,36 @@///  * [RenderView.compositeFrame], which implements this recomposition protocol\n///    for painting [RenderObject] trees on the the display.\nabstract class Layer extends AbstractNode with TreeDiagnosticsMixin {\n  /// This layer's parent in the layer tree.\n  ///"
  },
  {
    "id" : "b7f889d8-c1c1-485f-b882-d26621a8cbf9",
    "prId" : 10805,
    "prUrl" : "https://github.com/flutter/flutter/pull/10805#pullrequestreview-45187433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20822634-eddc-4590-b86e-1939ce94d35b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "See also ...",
        "createdAt" : "2017-06-19T18:17:14Z",
        "updatedAt" : "2017-06-20T16:16:17Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "2701f77f-56f1-4463-b01c-c54cff7e6940",
        "parentId" : "20822634-eddc-4590-b86e-1939ce94d35b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "added links to widgets",
        "createdAt" : "2017-06-20T16:08:08Z",
        "updatedAt" : "2017-06-20T16:16:17Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "567ba5c9b5e597777a2130d84103a3610e8c3a18",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +762,766 @@/// An instance of this class should be provided as the [LeaderLayer.link] and\n/// the [FollowerLayer.link] properties to cause the [FollowerLayer] to follow\n/// the [LeaderLayer].\n///\n/// See also:"
  },
  {
    "id" : "8dadd22e-5a44-42ad-b3bf-5a75592cf632",
    "prId" : 13942,
    "prUrl" : "https://github.com/flutter/flutter/pull/13942#pullrequestreview-87050280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4566985b-2b00-4ed4-b6b9-d2215cca8fd8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "rename this one to match the name you end up with on the engine side",
        "createdAt" : "2018-01-05T21:02:20Z",
        "updatedAt" : "2018-01-09T01:56:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a668757e-cd25-4b44-9b2a-1556262f6bc0",
        "parentId" : "4566985b-2b00-4ed4-b6b9-d2215cca8fd8",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "done",
        "createdAt" : "2018-01-05T23:26:30Z",
        "updatedAt" : "2018-01-09T01:56:55Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "08ae32061db43ac370702a5fee9c80fc9de58137",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +757,761 @@  ///\n  /// The [clipPath], [elevation], and [color] arguments must not be null.\n  PhysicalModelLayer({\n    @required this.clipPath,\n    @required this.elevation,"
  },
  {
    "id" : "15788e8b-bd10-4c5f-bb56-3ebc56190b1d",
    "prId" : 17672,
    "prUrl" : "https://github.com/flutter/flutter/pull/17672#pullrequestreview-127775218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "656bad6e-8e6e-4b8d-aa92-fcb51479174c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The way this is implemented, whether this layer's T matches S affects whether or not we're clipping when looking at children, which seems like it would introduce some really weird behaviour in edge cases.",
        "createdAt" : "2018-06-11T22:56:10Z",
        "updatedAt" : "2018-06-22T04:45:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "4a35589b-a186-416d-95c9-f893508b9331",
        "parentId" : "656bad6e-8e6e-4b8d-aa92-fcb51479174c",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Fixed",
        "createdAt" : "2018-06-11T23:19:52Z",
        "updatedAt" : "2018-06-22T04:45:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb6f25d2a396164383580a99f4ad1544f1829119",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +1341,1345 @@      return typedResult;\n    }\n    return super.find<S>(regionOffset);\n  }\n"
  },
  {
    "id" : "78e6cf6c-5dc6-4fea-97b4-35c6c27c4212",
    "prId" : 17672,
    "prUrl" : "https://github.com/flutter/flutter/pull/17672#pullrequestreview-129744274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19f0fb08-8bd3-45b2-abf5-c5ccf85a93e4",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this doesn't seem to handle the case of `link.leader == null && !showWhenUnlinked`. I assume in that case we should just return null?",
        "createdAt" : "2018-06-18T06:52:16Z",
        "updatedAt" : "2018-06-22T04:45:47Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "17f75005-964f-4b1b-a374-e74bf7b343de",
        "parentId" : "19f0fb08-8bd3-45b2-abf5-c5ccf85a93e4",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Fixed",
        "createdAt" : "2018-06-18T21:22:12Z",
        "updatedAt" : "2018-06-22T04:45:47Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb6f25d2a396164383580a99f4ad1544f1829119",
    "line" : 214,
    "diffHunk" : "@@ -1,1 +1193,1197 @@    final Vector4 vector = new Vector4(regionOffset.dx, regionOffset.dy, 0.0, 1.0);\n    final Vector4 result = _invertedTransform.transform(vector);\n    return super.find<S>(new Offset(result[0] - linkedOffset.dx, result[1] - linkedOffset.dy));\n  }\n"
  },
  {
    "id" : "1596cb46-da58-4014-89f7-7e93b1be13c0",
    "prId" : 20284,
    "prUrl" : "https://github.com/flutter/flutter/pull/20284#pullrequestreview-144968407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc5a848-e52c-40f4-956f-bbfbbb970529",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can you add some dartdocs to this?",
        "createdAt" : "2018-08-09T00:16:29Z",
        "updatedAt" : "2018-08-09T00:16:29Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c6b0a1b0-971f-41c3-8709-900ad0abc5de",
        "parentId" : "edc5a848-e52c-40f4-956f-bbfbbb970529",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "sent #20383",
        "createdAt" : "2018-08-09T18:25:51Z",
        "updatedAt" : "2018-08-09T18:25:51Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "70239be7ca0bca03d5311f02b6f1ece4adce3c5f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +226,230 @@  final int textureId;\n\n  final bool freeze;\n\n  @override"
  },
  {
    "id" : "e9797389-798c-4144-9800-da28289ec947",
    "prId" : 20637,
    "prUrl" : "https://github.com/flutter/flutter/pull/20637#pullrequestreview-150412035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fe19eae-fefd-42c7-83ce-934f437b3419",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "the previous formula was wrong when the pixel ratio was not 1.0 or bounds.left was not zero. Added a test for this in the rendering layer.",
        "createdAt" : "2018-08-29T06:02:58Z",
        "updatedAt" : "2018-09-04T15:57:52Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e6e0e97542a7d04055ce6292dc3ce76815bf14",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +596,600 @@      0.0,\n    );\n    transform.scale(pixelRatio, pixelRatio);\n    builder.pushTransform(transform.storage);\n    addToScene(builder, Offset.zero);"
  },
  {
    "id" : "3a2796ba-a2b6-4dbf-bd62-8fe6d010b779",
    "prId" : 21619,
    "prUrl" : "https://github.com/flutter/flutter/pull/21619#pullrequestreview-159674585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b24b88ef-f4ec-47ce-a1fa-e064069d2479",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "looks like this is fixing an old bug, can you add a test for this?",
        "createdAt" : "2018-09-27T23:12:16Z",
        "updatedAt" : "2018-09-28T18:23:05Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d14ac3322f43ffd8450eb6df4e2f434dcc104ac9",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +1382,1386 @@    } else {\n      transform.multiply(Matrix4.translationValues(unlinkedOffset.dx, unlinkedOffset.dy, .0));\n    }\n  }\n"
  },
  {
    "id" : "4cfa729b-efd1-4afb-a9f9-7f9492c527a8",
    "prId" : 23412,
    "prUrl" : "https://github.com/flutter/flutter/pull/23412#pullrequestreview-168006816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b54aa92b-9752-4f41-86c0-2d5270828ccf",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Are we ever going to give a view id to fuchsia and non-iOS to compose? I worry that we'll add actual iOS specific stuff to this class later on and dilute the 'PlatformView' nomenclature since we've been fairly good at calling Android things RenderAndroidView etc. ",
        "createdAt" : "2018-10-23T23:53:55Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "b492082e-73f8-4af2-a2d8-597504189ec5",
        "parentId" : "b54aa92b-9752-4f41-86c0-2d5270828ccf",
        "authorId" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "body" : "I can imagine this getting used for non-iOS use-cases.\r\nAlso note that in the engine we abstracted by the platform-agnostic Surface.",
        "createdAt" : "2018-10-24T16:50:11Z",
        "updatedAt" : "2018-10-31T03:03:44Z",
        "lastEditedBy" : "d52883f5-8a4d-4c6e-bdb8-a6bb4b749a07",
        "tags" : [
        ]
      }
    ],
    "commit" : "377482d8e8105b07b178979c923513d27275da98",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +252,256 @@/// A layer that shows an embedded [UIView](https://developer.apple.com/documentation/uikit/uiview)\n/// on iOS.\nclass PlatformViewLayer extends Layer {\n  /// Creates a platform view layer.\n  ///"
  },
  {
    "id" : "c9ae652a-ffc2-4360-af9a-69a842bc8cb2",
    "prId" : 24830,
    "prUrl" : "https://github.com/flutter/flutter/pull/24830#pullrequestreview-197310249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06900b2d-ffbd-4a4f-b03f-6386bb91d9a0",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should `offset` be included in the debugFillProperties below?",
        "createdAt" : "2019-01-25T20:53:24Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5b000e6c-852d-476c-84ee-6fbc8f97d909",
        "parentId" : "06900b2d-ffbd-4a4f-b03f-6386bb91d9a0",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, thanks.  Added.",
        "createdAt" : "2019-01-28T23:42:09Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f684a923245b2b3f1be91086d491a0128fd641fd",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1766,1770 @@      return null;\n    if (T == S) {\n      final Object untypedResult = value;\n      final S typedResult = untypedResult;\n      return typedResult;"
  },
  {
    "id" : "220883a0-1eb5-4eea-be94-ef86908c005a",
    "prId" : 24830,
    "prUrl" : "https://github.com/flutter/flutter/pull/24830#pullrequestreview-197310249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1480a8-84d5-46a6-a031-88dce97ee506",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Should the comment above say something about the new offset?",
        "createdAt" : "2019-01-25T22:00:36Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9184b06c-884e-4317-89c5-53ce4f877c5e",
        "parentId" : "5b1480a8-84d5-46a6-a031-88dce97ee506",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes.  This class always mentioned an offset in the class docs, it just never actually accepted one before.",
        "createdAt" : "2019-01-28T23:38:47Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f684a923245b2b3f1be91086d491a0128fd641fd",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1734,1738 @@  ///\n  /// The [value] provided cannot be null.\n  AnnotatedRegionLayer(this.value, {this.size, Offset offset})\n      : offset = offset ?? Offset.zero,\n        assert(value != null);"
  },
  {
    "id" : "57b8ad5c-27c5-4083-a6a0-0e9a6bcf43c2",
    "prId" : 30215,
    "prUrl" : "https://github.com/flutter/flutter/pull/30215#pullrequestreview-224579818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa8dca04-9d11-424c-9e37-efb812e7b5b7",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "This probably deserves a short explanatory code comment.",
        "createdAt" : "2019-04-09T17:09:34Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "eceda2cd-4902-45ed-9bc2-2d82902c1f17",
        "parentId" : "aa8dca04-9d11-424c-9e37-efb812e7b5b7",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Added one.",
        "createdAt" : "2019-04-09T18:27:18Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "209bdb7046f9fc4305445f99388ba9f53fcb7a31",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +872,876 @@      // or potentially leaving a physical model that is now correct highlighted\n      // in red.\n      if (temporaryLayers != null) {\n        for (PictureLayer temporaryLayer in temporaryLayers) {\n          temporaryLayer.remove();"
  },
  {
    "id" : "e7053818-af4a-4f92-b8d3-c8ac62b54cb3",
    "prId" : 30215,
    "prUrl" : "https://github.com/flutter/flutter/pull/30215#pullrequestreview-224566073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e83a9208-0df3-4971-aa35-983f3e9d6cde",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Looks like depthFirstIterateChildren can return null. Will that ever be a problem?",
        "createdAt" : "2019-04-09T17:10:38Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "75749b90-6048-43e1-99aa-83ad6a68dd26",
        "parentId" : "e83a9208-0df3-4971-aa35-983f3e9d6cde",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Yup! :)",
        "createdAt" : "2019-04-09T18:00:08Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "209bdb7046f9fc4305445f99388ba9f53fcb7a31",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +785,789 @@      children.add(child);\n      if (child is ContainerLayer) {\n        children.addAll(child.depthFirstIterateChildren());\n      }\n      child = child.nextSibling;"
  },
  {
    "id" : "67dd6479-f288-4cfa-91ea-23501329625c",
    "prId" : 30215,
    "prUrl" : "https://github.com/flutter/flutter/pull/30215#pullrequestreview-224566001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "326eca79-a82c-4ec6-ba89-cc6fb1e6056d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Document that it may return null in certain cases?",
        "createdAt" : "2019-04-09T17:11:07Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "cc3be5a2-35d3-467a-8a9f-c9b985395a42",
        "parentId" : "326eca79-a82c-4ec6-ba89-cc6fb1e6056d",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Changed this to not return null.",
        "createdAt" : "2019-04-09T17:59:59Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "209bdb7046f9fc4305445f99388ba9f53fcb7a31",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +775,779 @@  }\n\n  /// Returns the descendants of this layer in depth first order.\n  @visibleForTesting\n  List<Layer> depthFirstIterateChildren() {"
  },
  {
    "id" : "6bdd7b5d-9cb4-42c2-9a7d-b15dac819eab",
    "prId" : 30215,
    "prUrl" : "https://github.com/flutter/flutter/pull/30215#pullrequestreview-224129367",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "217e0d56-523a-4004-8a1d-c72966f6d178",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: remove extra blank line?",
        "createdAt" : "2019-04-09T17:11:47Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "209bdb7046f9fc4305445f99388ba9f53fcb7a31",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +598,602 @@    return addedLayers;\n  }\n\n  @override\n  void updateSubtreeNeedsAddToScene() {"
  },
  {
    "id" : "ed2d2ac8-4dc7-4649-9ceb-e3122f9a7158",
    "prId" : 30215,
    "prUrl" : "https://github.com/flutter/flutter/pull/30215#pullrequestreview-224644394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca546bf7-c57e-4032-8552-ab8cf2ae8793",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "10.0 may be violating https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#avoid-mysterious-and-magical-numbers-that-lack-a-clear-derivation",
        "createdAt" : "2019-04-09T17:19:57Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ca591559-91c8-469c-925b-20773b56794c",
        "parentId" : "ca546bf7-c57e-4032-8552-ab8cf2ae8793",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'm not sure of a better way to do this.  Any ideas?",
        "createdAt" : "2019-04-09T17:57:47Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "8a9374e7-e42e-4e0e-b70b-1d29f3123582",
        "parentId" : "ca546bf7-c57e-4032-8552-ab8cf2ae8793",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Style guide says you could add a comment explaining the 10.0",
        "createdAt" : "2019-04-09T19:22:24Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1b0d21fe-466d-44b2-b8a1-3d7f081812a9",
        "parentId" : "ca546bf7-c57e-4032-8552-ab8cf2ae8793",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Done",
        "createdAt" : "2019-04-09T20:45:19Z",
        "updatedAt" : "2019-04-10T20:18:14Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "209bdb7046f9fc4305445f99388ba9f53fcb7a31",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +515,519 @@        // The elevation may be 0 or otherwise too small to notice.\n        // Adding 10 to it makes it more visually obvious.\n        ..strokeWidth = child.elevation + 10.0,\n    );\n    final PictureLayer pictureLayer = PictureLayer(child.clipPath.getBounds())"
  },
  {
    "id" : "a1a1a541-f6b3-431c-90fc-1433a5795038",
    "prId" : 31097,
    "prUrl" : "https://github.com/flutter/flutter/pull/31097#pullrequestreview-229843270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb314a8-1a5e-4647-a3f0-86cca75492b8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "fyi @goderbauer ",
        "createdAt" : "2019-04-23T23:31:30Z",
        "updatedAt" : "2019-04-29T16:53:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "10b8e21881be58903137e9bd01c6f3d8236de6af",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1286,1290 @@    transform.translate(offset.dx, offset.dy);\n  }\n\n  @override\n  ui.EngineLayer addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]) {"
  },
  {
    "id" : "ac124704-5574-4b6b-bc40-e4861c8a8a97",
    "prId" : 32350,
    "prUrl" : "https://github.com/flutter/flutter/pull/32350#pullrequestreview-235341491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eac411dd-f052-4103-bb05-cab210606d97",
        "parentId" : null,
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "TBH I really dislike sync*, it has very poor performance characteristics. On the other hand, it is a clear win getting to implement findAll in terms of find in a lazy manner",
        "createdAt" : "2019-05-08T22:48:05Z",
        "updatedAt" : "2019-05-08T23:25:45Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      },
      {
        "id" : "e4e3ec0e-ec69-400b-a7ed-7019a6fe9595",
        "parentId" : "eac411dd-f052-4103-bb05-cab210606d97",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, this was a tradeoff.  It's an implementation detail, though, so we can change it to use lists or something if it turns out to hurt performance.",
        "createdAt" : "2019-05-08T23:27:55Z",
        "updatedAt" : "2019-05-08T23:27:56Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c979d84b93c0bcdcc35fa8c4060a0be0257eae15",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +2040,2044 @@\n  @override\n  Iterable<S> findAll<S>(Offset regionOffset) sync* {\n    yield* super.findAll<S>(regionOffset);\n    if (size != null && !(offset & size).contains(regionOffset)) {"
  },
  {
    "id" : "6a76f1a9-f94e-4d85-855f-107482400dea",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-264322794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47081932-2051-4496-ad72-0e1f8ce369e9",
        "parentId" : null,
        "authorId" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "body" : "There is already assert(value != null) in \"set link\". You can switch back to this.link and remove assert.",
        "createdAt" : "2019-07-18T18:03:32Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "tags" : [
        ]
      },
      {
        "id" : "bb729396-e997-487e-b845-d22e7f0f1dd8",
        "parentId" : "47081932-2051-4496-ad72-0e1f8ce369e9",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Dart doesn't allow calling setters in the initializer lists.",
        "createdAt" : "2019-07-19T16:53:31Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 757,
    "diffHunk" : "@@ -1,1 +1813,1817 @@  /// The [offset] property must be non-null before the compositing phase of the\n  /// pipeline.\n  LeaderLayer({ @required LayerLink link, this.offset = Offset.zero }) : assert(link != null), _link = link;\n\n  /// The object with which this layer should register."
  },
  {
    "id" : "7c34b491-871d-49ef-9385-c822435d7441",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-264323019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "501f96b9-2b7e-453c-a5e1-c56352abb94e",
        "parentId" : null,
        "authorId" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "body" : "setter checks for null, this.link will check.",
        "createdAt" : "2019-07-18T18:04:44Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "6f375fe5-c051-4de5-a3bf-80579a781e7f",
        "tags" : [
        ]
      },
      {
        "id" : "486a48fa-d5cc-40f4-aff3-596655eebfd1",
        "parentId" : "501f96b9-2b7e-453c-a5e1-c56352abb94e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Same issue here. Setters not allowed in init. lists.",
        "createdAt" : "2019-07-19T16:53:59Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 796,
    "diffHunk" : "@@ -1,1 +1919,1923 @@  /// must be non-null before the compositing phase of the pipeline.\n  FollowerLayer({\n    @required LayerLink link,\n    this.showWhenUnlinked = true,\n    this.unlinkedOffset = Offset.zero,"
  },
  {
    "id" : "5e3b3457-295b-4106-bc83-f78be9447f52",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267874814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30916ade-1e28-4590-b205-e6892deb092f",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Can we simply do the `alwaysNeedsAddToScene` check inside `markNeedsAddToScene` and make it no-op if so?",
        "createdAt" : "2019-07-22T21:28:02Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "dfcb7337-ac17-48d7-9d70-6fa9f4a3030e",
        "parentId" : "30916ade-1e28-4590-b205-e6892deb092f",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "It would work for `dropChild`, but it could mask bugs in other code that's not supposed to call `markNeedsAddToScene`.",
        "createdAt" : "2019-07-29T15:49:44Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +192,196 @@  @override\n  void dropChild(AbstractNode child) {\n    if (!alwaysNeedsAddToScene) {\n      markNeedsAddToScene();\n    }"
  },
  {
    "id" : "85831415-0b38-470c-93ad-e90964ec4c18",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-269332293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e2b25b9-8430-4db8-8703-1341bd4f1bb4",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "This is a breaking change. Some inherited classes may need to update their signatures.",
        "createdAt" : "2019-07-22T21:29:16Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "38d876b1-089c-4d19-a283-db283b06fcdf",
        "parentId" : "1e2b25b9-8430-4db8-8703-1341bd4f1bb4",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I reverted the change. I only changed it because it didn't feel right. It puts the responsibility of setting the `_engineLayer` field on the _caller_ of `addToScene`. This means that the caller always has to do this:\r\n\r\n```\r\nchildLayer._engineLayer = childLayer.addToScene(builder);\r\n```\r\n\r\nThere are two issues with this. One is that `_engineLayer` is private and so a custom layer implementation won't be able to do this correctly. The second is that the caller needs to _remember_ to do this. They also need to make sure they do this correctly. I found a bug in `_ProxyLayer` that returned another layer's engine layer, which is wrong. It only manifested after my change because my change exercises the new assertions I added in the `SceneBuilder` API.\r\n\r\nHowever, there's no rush to fix this. We can do this as a follow-up PR.",
        "createdAt" : "2019-07-30T20:12:57Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "1a18286a-1d10-419b-8ef9-9d8768893acf",
        "parentId" : "1e2b25b9-8430-4db8-8703-1341bd4f1bb4",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "I remembered that we've had this conversation before. Maybe let's create a Github issue to track our discussions and decisions so we won't forget it again in a few months :-)",
        "createdAt" : "2019-07-31T23:27:05Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +245,249 @@  /// corresponding engine layer, null is returned.\n  @protected\n  void addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]);\n\n  void _addToSceneWithRetainedRendering(ui.SceneBuilder builder) {"
  },
  {
    "id" : "98483ce3-7219-4cca-b0f6-b3ec0652cb4c",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267943778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e58ff49c-0ea9-45d6-8a3d-6e49b86c9611",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Update the document if the return type is changed to void.",
        "createdAt" : "2019-07-22T21:29:35Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "a51ef819-14c4-4cc8-878b-a8c709a6a17b",
        "parentId" : "e58ff49c-0ea9-45d6-8a3d-6e49b86c9611",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Reverted the change.",
        "createdAt" : "2019-07-30T20:13:02Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +242,246 @@  /// Override this method to upload this layer to the engine.\n  ///\n  /// Return the engine layer for retained rendering. When there's no\n  /// corresponding engine layer, null is returned.\n  @protected"
  },
  {
    "id" : "497e37b8-ce0d-4e58-b93a-0d227509ddf1",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267883330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b599f81-9d11-4e43-9a7a-1586aea2d1d4",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Why do we move this function? It seems nothing has changed. Or if there are changes, maybe move the function back to allow us better see the changed with git diff.",
        "createdAt" : "2019-07-22T21:35:26Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "857c2c5f-d59b-4812-addc-093a03238d53",
        "parentId" : "2b599f81-9d11-4e43-9a7a-1586aea2d1d4",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I changed the type of `RenderObject.layer` from `OffsetLayer` to `ContainerLayer`. Moving this method makes that change less breaking. There's a couple of places where we call `layer.buildScene()`.",
        "createdAt" : "2019-07-29T16:03:47Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +574,578 @@  // both to render the whole layer tree (e.g. a normal application frame) and\n  // to render a subtree (e.g. `OffsetLayer.toImage`).\n  ui.Scene buildScene(ui.SceneBuilder builder) {\n    List<PictureLayer> temporaryLayers;\n    assert(() {"
  },
  {
    "id" : "6b712c03-7513-436a-835e-dcf93e2408ff",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-272079443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29ff27a9-594f-473c-872e-e95b43e56205",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why is the getter not protected?",
        "createdAt" : "2019-08-06T20:01:08Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "0a52bec3-3b01-4cc4-aec9-2d113f0598f7",
        "parentId" : "29ff27a9-594f-473c-872e-e95b43e56205",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done.",
        "createdAt" : "2019-08-07T16:20:59Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +129,133 @@  /// previously rendered HTML DOM nodes rather than creating new nodes.\n  @protected\n  ui.EngineLayer get engineLayer => _engineLayer;\n\n  /// Sets the engine layer used to render this layer."
  },
  {
    "id" : "5b821b4c-1a22-4d70-b072-98221dece31e",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-272840816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "084d1dde-863f-4e01-9fa3-47922cf1987e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "kinda seems weird to have this on a layer at all. maybe we should move it to the pipeline?",
        "createdAt" : "2019-08-06T20:02:41Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e8c48cfa-0136-429f-a2dd-0c8f9b8dcd86",
        "parentId" : "084d1dde-863f-4e01-9fa3-47922cf1987e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "`buildScene` is used to render normal frames (i.e. the whole layer tree), but it's also used to render interior layers as if they were standalone trees, e.g. `toImage`. The pipeline seems to be designed to be 1-to-1 with the full layer tree.\r\n\r\nThe other issue is that moving it would be a breaking change.",
        "createdAt" : "2019-08-07T16:20:52Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "86f77e4d-6add-46bc-82b2-9c7eef10afb5",
        "parentId" : "084d1dde-863f-4e01-9fa3-47922cf1987e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I forgot about toImage. Maybe add that to the docs for this method. Thanks.",
        "createdAt" : "2019-08-08T21:12:18Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +574,578 @@  // both to render the whole layer tree (e.g. a normal application frame) and\n  // to render a subtree (e.g. `OffsetLayer.toImage`).\n  ui.Scene buildScene(ui.SceneBuilder builder) {\n    List<PictureLayer> temporaryLayers;\n    assert(() {"
  },
  {
    "id" : "08427ae9-90f9-432e-b8f7-030f1de28c27",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-283323694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1db96f12-e9e4-45e8-9069-c32e4bd44210",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we have to use new classes here, as opposed to reusing the equivalent classes from the gestures library?",
        "createdAt" : "2019-08-12T18:13:33Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1dbf40fa-4c43-4b01-8108-586235fd2d46",
        "parentId" : "1db96f12-e9e4-45e8-9069-c32e4bd44210",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I'd love to reuse classes, but `handleEvent` doesn't make sense in layers https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/hit_test.dart#L42",
        "createdAt" : "2019-08-12T18:17:10Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "8546ed5c-cd7a-4a0d-946c-c6c4110b360a",
        "parentId" : "1db96f12-e9e4-45e8-9069-c32e4bd44210",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "maybe we should adjust the gestures library objects so that they do make sense... not sure exactly how to do it",
        "createdAt" : "2019-08-13T03:20:31Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "0b1cb6e6-e0d5-43c3-b142-6c58774e4468",
        "parentId" : "1db96f12-e9e4-45e8-9069-c32e4bd44210",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "We can also just use a `List<S>` here, since we only care about one list of values. Although it's not as future-proof. ",
        "createdAt" : "2019-08-13T18:18:00Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "172d2329-8de6-472a-98d0-939011d4211c",
        "parentId" : "1db96f12-e9e4-45e8-9069-c32e4bd44210",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "After discussion we discovered that, the mouse events also need `localPosition`, which require that extra classes are needed to be the return value. See `AnnotationEntry`, `AnnotationResult`, and https://github.com/flutter/flutter/issues/38488#issuecomment-527688254",
        "createdAt" : "2019-09-04T00:21:35Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +77,81 @@  }\n}\n\n/// A composited layer.\n///"
  },
  {
    "id" : "89fc2172-4a5b-42e9-a794-502721ef71b9",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-274469195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f41eef7e-6179-4e70-b81e-b6b5139787d0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we intentionally not add this layer to the list as well?",
        "createdAt" : "2019-08-12T18:15:06Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "02788181-1c35-4797-b17e-0d9fef6637d1",
        "parentId" : "f41eef7e-6179-4e70-b81e-b6b5139787d0",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "As far as it's designed right now, layer hit test only works for annotations. Therefore only `AnnotatedRegionLayer` can add anything to the list.\r\nAlso it is not the layers that are added, but the value.",
        "createdAt" : "2019-08-12T22:42:22Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "798b5bc2-6ed3-449e-a388-7a7db2d2e6cf",
        "parentId" : "f41eef7e-6179-4e70-b81e-b6b5139787d0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "seems weird to have hit testing work so differently in layers than in render objects.",
        "createdAt" : "2019-08-13T03:21:38Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d482f90a-10a8-4e00-bd3a-5f51e0bb6f66",
        "parentId" : "f41eef7e-6179-4e70-b81e-b6b5139787d0",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Honestly I was about to name it `findAnnotations` since their implementations are so different, but I couldn't think of a shorter name.",
        "createdAt" : "2019-08-13T18:20:56Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +875,879 @@        return isAbsorbed;\n    }\n    return false;\n  }\n"
  },
  {
    "id" : "5862e64b-8afe-4f3a-8536-11704a2856fd",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-274045340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa0f192b-76af-477a-812a-5e86530f445d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we intentionally accept `null` as a value for `offset`?",
        "createdAt" : "2019-08-12T18:18:47Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "dbf67c1b-e3b8-45ab-a0a0-06598996ce13",
        "parentId" : "aa0f192b-76af-477a-812a-5e86530f445d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(as opposed to `Offset.zero` being the default value)",
        "createdAt" : "2019-08-12T18:18:59Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cd0772ae-abd9-4ac3-b139-9e710ba8a14c",
        "parentId" : "aa0f192b-76af-477a-812a-5e86530f445d",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "When forwarding values (from subclass constructors, for instance), it often happens that just passing on a parameter that is missing converts it to a null.  It means that the same default needs to be applied in a lot of places,  instead of just in one, so this code is just guarding against that, and supplying the one default. And without this, if the default changes in one place, we need to remember to change it everywhere, which is error-prone.",
        "createdAt" : "2019-08-13T00:00:14Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "69bcbf39-e82c-4935-a3c0-6366fbc31587",
        "parentId" : "aa0f192b-76af-477a-812a-5e86530f445d",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I agree.\r\n\r\nAnd default values are already causing troubles, such as in https://github.com/flutter/flutter/pull/37896/files/daadb7b58e71117c5df325b9e1db70505f72beea#diff-96bb73b252a2e7c4b88089358c1ffd35R709 where I want to test the default value while reusing the test widget.",
        "createdAt" : "2019-08-13T00:09:39Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "0fa52bb2-cca0-4c11-b75c-7127b5b36c78",
        "parentId" : "aa0f192b-76af-477a-812a-5e86530f445d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in general we prefer to update the defaults everywhere and to be careful. defaults are self-documenting, and more idiomatic. We should use tests to verify that we haven't missed cases when we change them.",
        "createdAt" : "2019-08-13T03:23:26Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 550,
    "diffHunk" : "@@ -1,1 +2276,2280 @@  }) : assert(value != null),\n       assert(opaque != null),\n       offset = offset ?? Offset.zero;\n\n  /// The annotated object, which is added to the result if all restrictions are"
  },
  {
    "id" : "a834b83e-32ca-4c0c-842b-df1fb6ef62ff",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-280481543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b007a2ad-fdb5-4ab9-bb32-de7ec451d226",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: could use `||=`",
        "createdAt" : "2019-08-26T22:55:09Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "3ce8e2b0-0522-4174-9270-c0994dcec278",
        "parentId" : "b007a2ad-fdb5-4ab9-bb32-de7ec451d226",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Tried but it seems dart doesn't support it ",
        "createdAt" : "2019-08-27T21:25:30Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 661,
    "diffHunk" : "@@ -1,1 +2356,2360 @@    }\n    if (T == S) {\n      isAbsorbed = isAbsorbed || opaque;\n      final Object untypedValue = value;\n      final S typedValue = untypedValue;"
  },
  {
    "id" : "e0d9abaa-2704-410c-8b30-b4702694d834",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-293391956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09c4745e-9906-4cc1-95d8-1359ef791586",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "nit: You might add curly braces around this, to be consistent with the one below.",
        "createdAt" : "2019-09-25T22:14:53Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 488,
    "diffHunk" : "@@ -1,1 +2097,2101 @@    if (link.leader == null) {\n      if (showWhenUnlinked) {\n        return super.findAnnotations(result, localPosition - unlinkedOffset, onlyFirst: onlyFirst);\n      }\n      return false;"
  },
  {
    "id" : "5fc13608-e75b-4efa-b850-7eb29e45eda7",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-294069107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4be21931-251f-44a9-b618-075c139452b4",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "What's the relationship between `onlyFirst` and `opaque`? It seems like you should specify true for `onlyFirst` if `opaque` is true, to avoid searching further than you need to.  But maybe I'm just not understanding what the relationship is...",
        "createdAt" : "2019-09-25T22:19:01Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "b61000ad-7f8c-45c5-b952-ad891849b3c0",
        "parentId" : "4be21931-251f-44a9-b618-075c139452b4",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Parameter `onlyFirst` is a property of the tree walking _process_(function call), while `opaque` is a property of _layers_.\r\n\r\nIf `onlyFirst` is true, then the layers' `opaque` doesn't actually matter.\r\n\r\nIf `onlyFirst` is not true, then `opaque` can change results. Consider the following case, where C is parent to A and B, and we call `C.findAnnotations` with the position of the pointer. \r\n```\r\n       | Pointer\r\n       v \r\n      ------- B\r\n           |\r\nA ------   |\r\n   |       |\r\nC------------\r\n```\r\nIf B is opaque, then the result is `[B, C]`; if B is not opaque, then the result is `[B, A, C]`. (Apparently, if `onlyFirst` is true, then the result is always `[B]`.)",
        "createdAt" : "2019-09-27T00:17:18Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "39b8a9bc-68f2-430f-8bfb-bef60e97f0e7",
        "parentId" : "4be21931-251f-44a9-b618-075c139452b4",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "I'll appreciate it if you can help me with the documentation to make it more comprehensible :)",
        "createdAt" : "2019-09-27T00:18:15Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      },
      {
        "id" : "90de820f-6ffb-4a86-92ff-6227f7b84b6a",
        "parentId" : "4be21931-251f-44a9-b618-075c139452b4",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Sure, no problem!\r\n\r\nSo, why isn't the result just `[B]` if B is opaque? I thought that was the point of it being opaque, that it stopped on the first hit.",
        "createdAt" : "2019-09-27T00:21:49Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "9ca41176-849f-4ce2-8ec5-4b882eda0323",
        "parentId" : "4be21931-251f-44a9-b618-075c139452b4",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Opacity only controls the relationship between siblings. (Parents usually returns whether any of their children returns true.)\r\n\r\nIn other words, if one layer is hit, then its ancestors are _always_ hit too.\r\n\r\n(This algorithm is similar to `HitTestBehavior.opaque` in render object hit testing.)",
        "createdAt" : "2019-09-27T00:44:15Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 651,
    "diffHunk" : "@@ -1,1 +2349,2353 @@  @protected\n  bool findAnnotations<S>(AnnotationResult<S> result, Offset localPosition, { @required bool onlyFirst }) {\n    bool isAbsorbed = super.findAnnotations(result, localPosition, onlyFirst: onlyFirst);\n    if (result.entries.isNotEmpty && onlyFirst)\n      return isAbsorbed;"
  },
  {
    "id" : "7f6be584-082c-45c1-9db0-6c0e7b6486b1",
    "prId" : 37896,
    "prUrl" : "https://github.com/flutter/flutter/pull/37896#pullrequestreview-295325487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f7159a-659f-47ed-8e33-f0073fbef5f5",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "You should describe how this is affected by the `onlyFirst` argument in `findAnnotations`.",
        "createdAt" : "2019-10-01T01:12:48Z",
        "updatedAt" : "2019-10-10T01:29:20Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e72b1ba6b405114f8bfa87aaf9dc013bfe6c3f1",
    "line" : 622,
    "diffHunk" : "@@ -1,1 +2324,2328 @@  ///  * [HitTestBehavior], which controls similar logic when hit-testing in the\n  ///    render tree.\n  final bool opaque;\n\n  /// Searches the subtree for annotations of type `S` at the location"
  },
  {
    "id" : "84bc602a-2877-4074-b3a7-b6d374d14073",
    "prId" : 42953,
    "prUrl" : "https://github.com/flutter/flutter/pull/42953#pullrequestreview-304141320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ee2dae-dbd8-4ab0-994e-170e185380e9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we should never print warnings. either throw, or don't print.",
        "createdAt" : "2019-10-18T20:57:05Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e95d99e1-1d26-4a11-ac8c-a688ff18c8d6",
        "parentId" : "f7ee2dae-dbd8-4ab0-994e-170e185380e9",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Removed",
        "createdAt" : "2019-10-18T21:15:39Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7791e434930fd223e611e415810a04fd753c76b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +332,336 @@    @required bool onlyFirst,\n  }) {\n    return false;\n  }\n"
  },
  {
    "id" : "a97c4655-c601-413e-8723-2532d5f17a6e",
    "prId" : 42953,
    "prUrl" : "https://github.com/flutter/flutter/pull/42953#pullrequestreview-304141063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb625c9a-2ccf-4a9e-9773-a5ac71320013",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "are these old APIs now deprecated? if so please mark them\r\n\r\n@Deprecated('Use ... instead. This API will be removed in early 2020.')",
        "createdAt" : "2019-10-18T20:58:33Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c9e05d31-3c2c-407d-ba38-b726cd4ba252",
        "parentId" : "cb625c9a-2ccf-4a9e-9773-a5ac71320013",
        "authorId" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "body" : "Added deprecation to findAll. The `find` is kept since there is no demand to extra information for now.",
        "createdAt" : "2019-10-18T21:15:03Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "5ad28324-7a27-4eb5-87df-c2d51dd6c21e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7791e434930fd223e611e415810a04fd753c76b",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +355,359 @@  ///    at the given position.\n  ///  * [AnnotatedRegionLayer], for placing values in the layer tree.\n  S find<S>(Offset localPosition) {\n    final AnnotationResult<S> result = AnnotationResult<S>();\n    findAnnotations<S>(result, localPosition, onlyFirst: true);"
  },
  {
    "id" : "c5418b13-e69e-40c2-ba49-fbf98cb59057",
    "prId" : 42953,
    "prUrl" : "https://github.com/flutter/flutter/pull/42953#pullrequestreview-304145330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9f9f7b-5e56-4d28-85c9-74d9c6cc24e9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "there's a typo on line 293 (\"visitng\")",
        "createdAt" : "2019-10-18T21:24:36Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1e411558-7d7d-4d90-baa8-cbb638330154",
        "parentId" : "cc9f9f7b-5e56-4d28-85c9-74d9c6cc24e9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "also \\`findAnnotations\\` should be [findAnnotations]",
        "createdAt" : "2019-10-18T21:24:55Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7a995d2c-bca3-4079-973a-436dc1812292",
        "parentId" : "cc9f9f7b-5e56-4d28-85c9-74d9c6cc24e9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "also \"Annotation is\" should be \"An annotation is\"",
        "createdAt" : "2019-10-18T21:25:15Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "659c9ab2-751b-4542-905a-f9d8ba08b4df",
        "parentId" : "cc9f9f7b-5e56-4d28-85c9-74d9c6cc24e9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "docs should mention the default behaviour and its implications",
        "createdAt" : "2019-10-18T21:26:14Z",
        "updatedAt" : "2019-10-18T22:01:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7791e434930fd223e611e415810a04fd753c76b",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +328,332 @@  @protected\n  bool findAnnotations<S>(\n    AnnotationResult<S> result,\n    Offset localPosition, {\n    @required bool onlyFirst,"
  },
  {
    "id" : "45c39a71-fa42-4c44-904a-b26b4b8cedcd",
    "prId" : 80129,
    "prUrl" : "https://github.com/flutter/flutter/pull/80129#pullrequestreview-636181262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94eaee09-233b-4c23-abe3-f45b29d535d2",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "(I can't comment on the line, but): Update the constructor above to also allow configuring this?",
        "createdAt" : "2021-04-14T21:38:36Z",
        "updatedAt" : "2021-04-22T23:11:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8559e365-b146-43d0-8fa4-860ae185d8f0",
        "parentId" : "94eaee09-233b-4c23-abe3-f45b29d535d2",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "This is probably the source of a number of discrepancies here. The constructor here is not used to set any values in practice. Instead, the layer is constructed with no arguments and then the fields are set directly on the constructed values. Other levels of the framework work on a different scheme where either an object is instantiated or updated depending on the history of the object and so the properties are never \"temporarily null\"/\r\n\r\nI'll try to make everything internally consistent here with the way it is actually used.",
        "createdAt" : "2021-04-14T23:48:44Z",
        "updatedAt" : "2021-04-22T23:11:20Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      },
      {
        "id" : "31c38765-0a07-472e-a520-e97abbdf970d",
        "parentId" : "94eaee09-233b-4c23-abe3-f45b29d535d2",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "As a result of this distinction about the way that layers are constructed and maintained, the same language won't work here for discussing the issues about the chosen mode. The docs here become more of a warning about which mode should be used for compatibility than a description of a local default.",
        "createdAt" : "2021-04-14T23:51:39Z",
        "updatedAt" : "2021-04-22T23:11:20Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      },
      {
        "id" : "f8fbdda1-c4e3-4838-ad8c-9686bf0250b6",
        "parentId" : "94eaee09-233b-4c23-abe3-f45b29d535d2",
        "authorId" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "body" : "The constructor was updated as appropriate and the logic was changed to default the value when it is passed on rather than on the property itself.",
        "createdAt" : "2021-04-15T00:32:42Z",
        "updatedAt" : "2021-04-22T23:11:20Z",
        "lastEditedBy" : "56d84530-1d58-4dbf-af8a-6916988ae943",
        "tags" : [
        ]
      }
    ],
    "commit" : "08e27e9b62c5104642eee83f1dd317e45506d055",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1825,1829 @@  }\n\n  /// The blend mode to use to apply the filtered background content onto the background\n  /// surface.\n  ///"
  },
  {
    "id" : "9f18ed53-e188-4caf-89d1-47ba58f905ec",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-691213697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1f065bb-cc85-4e21-86c2-a3bafbb49210",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This will throw an error complaining that `count` hasn't been initialized. Can we instead throw something that talks about `debuHandleCount` being only supported in debug mode?",
        "createdAt" : "2021-06-23T19:53:09Z",
        "updatedAt" : "2021-06-23T21:17:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "0bcec2ae-acd7-46ac-b47b-c2650a8e63bd",
        "parentId" : "b1f065bb-cc85-4e21-86c2-a3bafbb49210",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'm pretty sure this is how we handle these sorts of `debug*` elsewhere. I'd really just rather leave this method as sparse as possible.",
        "createdAt" : "2021-06-23T23:08:21Z",
        "updatedAt" : "2021-06-23T23:08:22Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +183,187 @@      return true;\n    }());\n    return count;\n  }\n"
  },
  {
    "id" : "ec155238-659d-4344-b6c9-12e67fc03978",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-691183802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2817d85f-5c54-416c-b17e-05d243bd1b4b",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Should we attach a message to this assert?",
        "createdAt" : "2021-06-23T19:54:29Z",
        "updatedAt" : "2021-06-23T21:17:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "d6129b3f-afa1-41c8-8a1f-250e25855f1c",
        "parentId" : "2817d85f-5c54-416c-b17e-05d243bd1b4b",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This would have to be a bug in the framework, if someone broke either `createHandle` or `LayerHandle.dispose`. End users should never see this, and if they somehow do they don't have a way to fix it short of patching the framework/filing a bug. Without a message here, they'll get a message encouraging them to file a bug with the stack trace/reproduction.",
        "createdAt" : "2021-06-23T22:06:26Z",
        "updatedAt" : "2021-06-23T22:06:26Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +167,171 @@  /// Called by [LayerHandle].\n  void _unref() {\n    assert(_refCount > 0);\n    _refCount -= 1;\n    if (_refCount == 0) {"
  },
  {
    "id" : "e5fdc3d2-4292-4b3a-b745-4ff9cf429462",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-691186063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cad6f1a-fd88-446f-8e68-27e120385693",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Can we print a warning to nudge people to fix the lifecycles of their objects?",
        "createdAt" : "2021-06-23T19:57:48Z",
        "updatedAt" : "2021-06-23T21:17:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "9b7badde-512d-454b-839f-581b919684d2",
        "parentId" : "0cad6f1a-fd88-446f-8e68-27e120385693",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "We could, but that'd mean commenting out more asserts elsewhere instead of this one.\r\n\r\nThere's only _one_ customer that is actually affected by this in all of customer_testing/google3. I don't plan to leave this commented out for long.",
        "createdAt" : "2021-06-23T22:10:16Z",
        "updatedAt" : "2021-06-23T22:10:16Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +222,226 @@      );\n      // TODO(dnfield): enable this. https://github.com/flutter/flutter/issues/85066\n      // _debugDisposed = true;\n      return true;\n    }());"
  },
  {
    "id" : "ca618963-4300-4dc4-9023-64227c176ff6",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-693069932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df9bbac3-e802-484d-801d-81c8418813ac",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "nit: I'm not sure if we have a guideline for this, but I prefer that docs are standalone (i.e. they talk about what the method does rather than what its used for). Usage docs can get stale easily because nothing prompts the person changing the usage to come here an update the doc. This one may be a special case and `unref` is specifically designed for `LayerHandle` to call.",
        "createdAt" : "2021-06-25T17:06:44Z",
        "updatedAt" : "2021-06-25T17:31:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "310f7d6d-0a3f-47ff-a29b-a9f5e390c12f",
        "parentId" : "df9bbac3-e802-484d-801d-81c8418813ac",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "This is really just a pointer for framework developers on a private method. It's not user-facing, and I just put it there so you don't get confused about why a class has a privat emethod it never uses :)",
        "createdAt" : "2021-06-25T17:56:54Z",
        "updatedAt" : "2021-06-25T17:56:54Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +165,169 @@  int _refCount = 0;\n\n  /// Called by [LayerHandle].\n  void _unref() {\n    assert(_refCount > 0);"
  },
  {
    "id" : "1ced823f-fc07-4bcf-8f60-56099a8cd21c",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-701370357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb4e3e6-af16-4a36-b6d1-367ae689140b",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "typo: \"will\" should probably come after \"or null\"?",
        "createdAt" : "2021-07-07T19:13:21Z",
        "updatedAt" : "2021-07-07T19:13:22Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "c727f1ed-602f-48b1-9d3c-897d797c1e5f",
        "parentId" : "beb4e3e6-af16-4a36-b6d1-367ae689140b",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Yeah, I'll fix this.",
        "createdAt" : "2021-07-07T19:25:03Z",
        "updatedAt" : "2021-07-07T19:25:03Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +614,618 @@  /// The [Layer] whose resources this object keeps alive.\n  ///\n  /// Setting a new value will or null dispose the previously held layer if\n  /// there are no other open handles to that layer.\n  T? get layer => _layer;"
  }
]