[
  {
    "id" : "1a8630de-7cb1-4054-b89d-0b3ce86bf3ed",
    "prId" : 3243,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cf92189-c770-4a3b-b6be-1b9e062349c1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Why wouldn't this have `isAppliedConstraint: true`?\n",
        "createdAt" : "2016-04-11T17:47:21Z",
        "updatedAt" : "2016-04-11T17:47:21Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "cfee3cc2-8427-4c60-a0fb-0fb5045cac39",
        "parentId" : "9cf92189-c770-4a3b-b6be-1b9e062349c1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It can be if you think it should. I wasn't really sure what the semantics of minWidth for Paragraph were and wasn't sure if infinity made sense for that.\n",
        "createdAt" : "2016-04-11T18:03:08Z",
        "updatedAt" : "2016-04-11T18:03:08Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "43d8abad-0943-47e9-8ef8-0c98d1f42ba1",
        "parentId" : "9cf92189-c770-4a3b-b6be-1b9e062349c1",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I think it's ignored.  We really need to re-work the Paragraph API to make actual sense.\n",
        "createdAt" : "2016-04-11T18:07:54Z",
        "updatedAt" : "2016-04-11T18:07:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "f7b90d25-a17e-4bcc-9b64-99b3793fdaef",
        "parentId" : "9cf92189-c770-4a3b-b6be-1b9e062349c1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ok. I won't bother adding the extra assert here then since it would just add extra places for people to trip over that aren't actually real bugs.\n",
        "createdAt" : "2016-04-11T18:10:07Z",
        "updatedAt" : "2016-04-11T18:10:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3771048fdafd25445baf18a9ea8cd866252f7eb4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +37,41 @@  void _layoutText(BoxConstraints constraints) {\n    assert(constraints != null);\n    assert(constraints.debugAssertIsValid());\n    if (_constraintsForCurrentLayout == constraints)\n      return; // already cached this layout"
  },
  {
    "id" : "a83ae4e5-3080-4898-80b5-10b2d88190bd",
    "prId" : 3818,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "082a2e82-0e90-4cd5-987f-bdec9397075b",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "could be final\n",
        "createdAt" : "2016-05-09T22:32:59Z",
        "updatedAt" : "2016-05-09T22:49:49Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b29931d028a1616b1f3fbf6bb0295b1b735420d",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +221,225 @@        if (_overflow == TextOverflow.ellipsis) {\n          // TODO(abarth): This paint offset has an LTR bias.\n          Offset ellipseOffset = new Offset(size.width - _overflowPainter.width, 0.0);\n          _overflowPainter.paint(canvas, ellipseOffset);\n        }"
  },
  {
    "id" : "fcecf31f-b7aa-4289-a2dd-162f0c797be2",
    "prId" : 3818,
    "prUrl" : "https://github.com/flutter/flutter/pull/3818#pullrequestreview-42970597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7322227b-650a-43ed-bf65-a96f7a180dc6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "@abarth Doesn't this mean that textAligns other than left won't work when softWrap is false?",
        "createdAt" : "2017-06-08T01:15:33Z",
        "updatedAt" : "2017-06-08T01:15:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "530fc45d-76c0-48f3-b688-674d3bce06a1",
        "parentId" : "7322227b-650a-43ed-bf65-a96f7a180dc6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "In principle it should work because this is just the max width.  We layout the text twice: once to get the intrinsic width and once at that width (subject to these constraints).\r\n\r\nWith libtxt, we can do this more efficiently because we'll be able to compute the intrinsic sizes without actually doing a fully layout.",
        "createdAt" : "2017-06-08T03:10:58Z",
        "updatedAt" : "2017-06-08T03:10:58Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "a9fd0daf-a207-406a-8b15-3d50ca7b63d2",
        "parentId" : "7322227b-650a-43ed-bf65-a96f7a180dc6",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "But if softWrap is false, we always lay out at infinity width, even when we do the actual \"real\" layout, and then if text-align isn't left, the text ends up infinitely far to the right, no?",
        "createdAt" : "2017-06-08T15:53:50Z",
        "updatedAt" : "2017-06-08T15:53:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f37f6f03-2f7c-4e75-87a7-d1d6613e0797",
        "parentId" : "7322227b-650a-43ed-bf65-a96f7a180dc6",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We layout with a max width of infinite, that doesn't mean the width will end up as infinity.",
        "createdAt" : "2017-06-08T16:02:20Z",
        "updatedAt" : "2017-06-08T16:02:20Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "d106b69b-bcff-4125-bd84-18930986ceae",
        "parentId" : "7322227b-650a-43ed-bf65-a96f7a180dc6",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "so if softWrap is false, and you overflow, you'll be aligned relative to an arbitrary point off the edge, but otherwise it'll work. I see. That makes sort of sense I guess.",
        "createdAt" : "2017-06-08T18:12:48Z",
        "updatedAt" : "2017-06-08T18:12:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b29931d028a1616b1f3fbf6bb0295b1b735420d",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +91,95 @@    assert(constraints != null);\n    assert(constraints.debugAssertIsValid());\n    _textPainter.layout(minWidth: constraints.minWidth, maxWidth: _softWrap ? constraints.maxWidth : double.INFINITY);\n  }\n"
  },
  {
    "id" : "8cecaa73-75d9-4ece-bec9-5710813c9325",
    "prId" : 4391,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e393f67-7d6d-4ae6-8a38-a197a258fdf7",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "hmm, this is a problem. Can you file a bug on me to take a closer look at this?\n",
        "createdAt" : "2016-06-07T02:26:06Z",
        "updatedAt" : "2016-06-07T02:26:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "cb8d0daa-f19c-432a-88b0-7f1f920d7905",
        "parentId" : "5e393f67-7d6d-4ae6-8a38-a197a258fdf7",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Filed https://github.com/flutter/flutter/issues/4413\n",
        "createdAt" : "2016-06-07T02:56:30Z",
        "updatedAt" : "2016-06-07T02:56:30Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "45321527fe4bd188e8a1b7de6947505e060a08df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@  void performLayout() {\n    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);\n    // We grab _textPainter.size here because assigning to `size` will trigger\n    // us to validate our intrinsic sizes, which will change _textPainter's\n    // layout because the intrinsic size calculations are destructive."
  },
  {
    "id" : "781f7dd3-ecbb-4c89-88c5-0657b3b761eb",
    "prId" : 7456,
    "prUrl" : "https://github.com/flutter/flutter/pull/7456#pullrequestreview-16289344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6c9bfa2-2477-46f2-b5bf-4a6451157199",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we export TextBox?",
        "createdAt" : "2017-01-12T04:01:38Z",
        "updatedAt" : "2017-01-13T07:04:21Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "412d7b32-e607-4dd8-8b47-cd450725c836",
        "parentId" : "d6c9bfa2-2477-46f2-b5bf-4a6451157199",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's pretty obscure.  I guess we could.",
        "createdAt" : "2017-01-12T04:50:10Z",
        "updatedAt" : "2017-01-13T07:04:21Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1e322af987d41efdc525307d1b0d54d2ea7243",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +266,270 @@  ///\n  /// Valid only after [layout].\n  List<ui.TextBox> getBoxesForSelection(TextSelection selection) {\n    assert(!needsLayout);\n    _layoutTextWithConstraints(constraints);"
  },
  {
    "id" : "c1a4a5b3-8f9d-4fdf-b098-fcd73bf29944",
    "prId" : 7493,
    "prUrl" : "https://github.com/flutter/flutter/pull/7493#pullrequestreview-17104147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75aa2d1d-206b-4098-91db-1634b6509337",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Let's skip the vertical fade.  It's even less clear how it should work than the horizontal fade.",
        "createdAt" : "2017-01-17T21:55:52Z",
        "updatedAt" : "2017-01-18T17:07:56Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "312cf05c53927654e97567a07bf769ac9bda0714",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +230,234 @@              <Point>[new Point(0.0, fadeStart), new Point(0.0, fadeEnd)],\n              <Color>[const Color(0xFFFFFFFF), const Color(0x00FFFFFF)]\n            );\n          }\n          break;"
  },
  {
    "id" : "36e9c695-b8ac-4c23-a056-a69d7fbdac1d",
    "prId" : 8237,
    "prUrl" : "https://github.com/flutter/flutter/pull/8237#pullrequestreview-22420331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e8f17bf-5060-48c4-b72f-2f073a4f0e31",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Nevermind.  >):",
        "createdAt" : "2017-02-17T04:26:30Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "12819e4ecf4a4ec7a4d3b86c995193214d3cc7b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +343,347 @@           '${text.toString(\"$prefix   \\u2551 \")}' // TextSpan includes a newline\n           '$prefix   \\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n'\n           '${prefix.trimRight()}\\n';\n  }\n}"
  },
  {
    "id" : "b66a375d-0449-45b4-af2d-3e3270c2a9cf",
    "prId" : 11313,
    "prUrl" : "https://github.com/flutter/flutter/pull/11313#pullrequestreview-51077164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb05cddf-e891-4322-a46f-9a955a0e82e9",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Why a return here but a break below?",
        "createdAt" : "2017-07-20T00:24:10Z",
        "updatedAt" : "2017-07-20T00:24:10Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "fdc5cc6f-b61c-4370-8584-43cebb141baa",
        "parentId" : "bb05cddf-e891-4322-a46f-9a955a0e82e9",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "accident of how i wrote the code, though i can justify it post-hoc: the \"return\" is an early return (nothing changed, bail out), whereas the other two branches are actually doing something. If we ever add something after the switch, I'd expect the identical/metadata cases to do nothing, but the other cases to do it.",
        "createdAt" : "2017-07-20T00:31:27Z",
        "updatedAt" : "2017-07-20T00:31:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fcf2e379820bd2ed0f1c5822ab8aac2706514f8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +68,72 @@      case RenderComparison.identical:\n      case RenderComparison.metadata:\n        return;\n      case RenderComparison.paint:\n        _textPainter.text = value;"
  },
  {
    "id" : "1d9807f4-7a13-4aa0-9501-3d54d4737c5f",
    "prId" : 11877,
    "prUrl" : "https://github.com/flutter/flutter/pull/11877#pullrequestreview-59953093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8142b301-31d1-4b14-94eb-f29dcb1f45ee",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "fwiw, i'd probably use the getters rather than the fields, mostly for readability. your call.",
        "createdAt" : "2017-08-31T18:40:11Z",
        "updatedAt" : "2017-08-31T18:40:11Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "906d613a9f1c1ae94cc81a4c62fa633b41031059",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +151,155 @@    _textPainter.layout(\n        minWidth: minWidth,\n        maxWidth: _softWrap || _overflow == TextOverflow.ellipsis ? maxWidth : double.INFINITY\n    );\n  }"
  },
  {
    "id" : "e1c4024c-044b-4675-a8e3-0fae22be6fbf",
    "prId" : 17879,
    "prUrl" : "https://github.com/flutter/flutter/pull/17879#pullrequestreview-125336598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db2e8285-4bd4-4918-a92b-0100d13ac4fb",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This will need dartdocs.",
        "createdAt" : "2018-06-01T22:45:58Z",
        "updatedAt" : "2018-06-01T22:45:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8775eb591c1bdffe3bc45957bcda833cb5a310",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +177,181 @@  }\n\n  ui.Locale get locale => _textPainter.locale;\n  set locale(ui.Locale value) {\n    if (_textPainter.locale == value)"
  },
  {
    "id" : "ac35f93d-c606-45ed-98d4-7157969e4f0b",
    "prId" : 17879,
    "prUrl" : "https://github.com/flutter/flutter/pull/17879#pullrequestreview-125336684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5354d529-3280-4905-b4ba-0b09f77b31ba",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "oh, also, if Locale is part of your API, you should reexport it, so that users of your API don't have to import dart:ui",
        "createdAt" : "2018-06-01T22:46:30Z",
        "updatedAt" : "2018-06-01T22:46:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "af8775eb591c1bdffe3bc45957bcda833cb5a310",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +177,181 @@  }\n\n  ui.Locale get locale => _textPainter.locale;\n  set locale(ui.Locale value) {\n    if (_textPainter.locale == value)"
  },
  {
    "id" : "d5246ecc-d013-449b-b2e3-d9557a6f2745",
    "prId" : 33946,
    "prUrl" : "https://github.com/flutter/flutter/pull/33946#pullrequestreview-246314218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ba63b43-586b-45f4-85c6-42f3a7210dd9",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why not do this as the first thing in the method?",
        "createdAt" : "2019-06-05T23:54:03Z",
        "updatedAt" : "2019-06-06T00:04:32Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1703f579-577a-4281-ad18-57ff0c13cb47",
        "parentId" : "3ba63b43-586b-45f4-85c6-42f3a7210dd9",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Oops that's what I meant it to do.",
        "createdAt" : "2019-06-06T00:04:38Z",
        "updatedAt" : "2019-06-06T00:04:38Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "89fd7a3c3166e2a5e0577ea76e9f8fafb1460b82",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +465,469 @@  // specified.\n  void _layoutChildren(BoxConstraints constraints) {\n    if (childCount == 0) {\n      return;\n    }"
  },
  {
    "id" : "a023c6a5-da33-4391-9c9c-dc152513da93",
    "prId" : 36243,
    "prUrl" : "https://github.com/flutter/flutter/pull/36243#pullrequestreview-262596711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "338f21e4-3fd7-4ab4-8f0f-dea60190d1dc",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Do we not allow the recognizer to be any of the other types of GestureRecognizers?",
        "createdAt" : "2019-07-16T18:12:21Z",
        "updatedAt" : "2019-07-16T19:31:54Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "8e3858dc-368b-44a1-82ac-d7b520335c43",
        "parentId" : "338f21e4-3fd7-4ab4-8f0f-dea60190d1dc",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Currently we don't - I think we should fix that, but we should do it with something that will probably be breaking. ",
        "createdAt" : "2019-07-16T18:15:38Z",
        "updatedAt" : "2019-07-16T19:31:54Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cc399e3b53ba618f0acfb060aeef14546a2b92a",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +857,861 @@            configuration.onLongPress = recognizer.onLongPress;\n          } else {\n            assert(false);\n          }\n        }"
  },
  {
    "id" : "3413b0cb-46a1-43fc-807c-2f87e5bd4ec8",
    "prId" : 38699,
    "prUrl" : "https://github.com/flutter/flutter/pull/38699#pullrequestreview-277464558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c16be86-74fc-4221-80ab-9ef65187ddd1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not really sure what \"and RenderObject is in immutable state at this point\" means here.",
        "createdAt" : "2019-08-20T21:46:00Z",
        "updatedAt" : "2019-08-20T21:46:01Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7e019ab9-b14e-4aac-9231-9aa50c114ee9",
        "parentId" : "8c16be86-74fc-4221-80ab-9ef65187ddd1",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "The ideal solution here will be removing RenderObject from the children, but we can't since the renderobject is locked after layout phase",
        "createdAt" : "2019-08-20T21:59:44Z",
        "updatedAt" : "2019-08-20T21:59:44Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d95c945fdf2c72b5c9436bff83f28671bccd02",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +644,648 @@    // if engine truncates children due to ellipsis. Sadly, we would not know\n    // it until we finish layout, and RenderObject is in immutable state at\n    // this point.\n    while (child != null && childIndex < _textPainter.inlinePlaceholderBoxes.length) {\n      final TextParentData textParentData = child.parentData;"
  },
  {
    "id" : "9e5b1fa8-c17f-48aa-b792-38d6cdd44c5c",
    "prId" : 38699,
    "prUrl" : "https://github.com/flutter/flutter/pull/38699#pullrequestreview-277466834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0d47777-3b7e-414c-84ab-cb2a66fb1fa9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we want to set the offsets to null for the children that aren't being laid out this time? otherwise we'll have out of date offsets",
        "createdAt" : "2019-08-20T21:47:06Z",
        "updatedAt" : "2019-08-20T21:47:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "da3c1419-9566-4ec8-92f6-d8e5c6329a11",
        "parentId" : "f0d47777-3b7e-414c-84ab-cb2a66fb1fa9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "is there a situation that we use offsets for children that are not painted? It sounds to me that we should really remove this children if it is not painted.",
        "createdAt" : "2019-08-20T22:05:32Z",
        "updatedAt" : "2019-08-20T22:05:32Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "41d95c945fdf2c72b5c9436bff83f28671bccd02",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +514,518 @@    RenderBox child = firstChild;\n    int childIndex = 0;\n    while (child != null && childIndex < _textPainter.inlinePlaceholderBoxes.length) {\n      final TextParentData textParentData = child.parentData;\n      textParentData.offset = Offset("
  },
  {
    "id" : "2941b7fa-0ba2-48df-9b69-5f35aa01f8ee",
    "prId" : 41327,
    "prUrl" : "https://github.com/flutter/flutter/pull/41327#pullrequestreview-297637827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c6caebf-0c9c-4d06-b161-3e682164107e",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Add a test for this?",
        "createdAt" : "2019-10-02T22:28:27Z",
        "updatedAt" : "2019-10-08T23:28:57Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "b51c2c3a-2391-4b33-a62f-8fb4cac0c993",
        "parentId" : "8c6caebf-0c9c-4d06-b161-3e682164107e",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Done",
        "createdAt" : "2019-10-04T18:13:01Z",
        "updatedAt" : "2019-10-08T23:28:57Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "21cc7b7aa528a2a294b84a6762622216f46aeadf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +888,892 @@            final TapGestureRecognizer recognizer = info.recognizer;\n            configuration.onTap = recognizer.onTap;\n            configuration.isLink = true;\n          } else if (info.recognizer is LongPressGestureRecognizer) {\n            final LongPressGestureRecognizer recognizer = info.recognizer;"
  },
  {
    "id" : "36295397-35ef-4556-b031-a3069258a1b4",
    "prId" : 42006,
    "prUrl" : "https://github.com/flutter/flutter/pull/42006#pullrequestreview-298261420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7be2a9e7-86a7-4882-832c-e694edfd03a4",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "same here",
        "createdAt" : "2019-10-04T23:08:36Z",
        "updatedAt" : "2019-10-07T19:51:17Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f31f7bce-607c-4dd3-afba-381c9eb01058",
        "parentId" : "7be2a9e7-86a7-4882-832c-e694edfd03a4",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Fixed.",
        "createdAt" : "2019-10-07T16:42:02Z",
        "updatedAt" : "2019-10-07T19:51:17Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d3e1cac64e767466b698749a1df9b1bccd39a3d",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +321,325 @@    assert(constraints.debugAssertIsValid());\n    _layoutTextWithConstraints(constraints);\n    // TODO(garyq): Since our metric for ideographic baseline is currently\n    // inaccurate and the non-alphabetic baselines are based off of the\n    // alphabetic baseline, we use the alphabetic for now to produce correct"
  },
  {
    "id" : "67efb68b-3c91-45f7-9704-4c62f8e398fc",
    "prId" : 42558,
    "prUrl" : "https://github.com/flutter/flutter/pull/42558#pullrequestreview-300970056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68bbda15-c107-4e62-8d02-0f08f452b76f",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Might be worth adding non-public documentation explaining why this is needed.",
        "createdAt" : "2019-10-11T23:51:41Z",
        "updatedAt" : "2019-10-14T23:37:53Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "8dd58e13-1ac5-45c8-8ccf-a83ed5530634",
        "parentId" : "68bbda15-c107-4e62-8d02-0f08f452b76f",
        "authorId" : "96a98276-7acb-4411-9633-960c20044a6f",
        "body" : "done",
        "createdAt" : "2019-10-11T23:58:14Z",
        "updatedAt" : "2019-10-14T23:37:53Z",
        "lastEditedBy" : "96a98276-7acb-4411-9633-960c20044a6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b980110a9bf66e87997a8825197334e24d826cce",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +494,498 @@  // will be overwritten during intrinsic width/height calculations and must be\n  // restored to the original values before final layout and painting.\n  List<PlaceholderDimensions> _placeholderDimensions;\n\n  void _layoutTextWithConstraints(BoxConstraints constraints) {"
  },
  {
    "id" : "1f052ceb-2c56-4ad5-b78b-57adc6175194",
    "prId" : 52769,
    "prUrl" : "https://github.com/flutter/flutter/pull/52769#pullrequestreview-376471302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763c3417-d6a1-448a-8b1c-0ddb0714ccbe",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Do you need the `== true`?",
        "createdAt" : "2020-03-17T22:51:10Z",
        "updatedAt" : "2020-03-17T22:51:47Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "7819c57e-31b9-4442-8247-d482ecb5fd9b",
        "parentId" : "763c3417-d6a1-448a-8b1c-0ddb0714ccbe",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Yeah, it is needed here. `_cachedChildNodes` may be null and then `_cachedChildNodes?.isNotEmpty` is also null, which is not a valid boolean expression. ",
        "createdAt" : "2020-03-17T23:04:05Z",
        "updatedAt" : "2020-03-17T23:06:03Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d73f8640-9e65-4cfa-a10e-55b0c47dc8d9",
        "parentId" : "763c3417-d6a1-448a-8b1c-0ddb0714ccbe",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Oh of course, got it.",
        "createdAt" : "2020-03-17T23:25:31Z",
        "updatedAt" : "2020-03-17T23:25:31Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "31e2a5074f41500f4db7bdc40847e4402731d44d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +923,927 @@          }\n        }\n        final SemanticsNode newChild = (_cachedChildNodes?.isNotEmpty == true)\n            ? _cachedChildNodes.removeFirst()\n            : SemanticsNode();"
  },
  {
    "id" : "f8f561ec-fc90-4873-b0cf-ee17328920c5",
    "prId" : 52769,
    "prUrl" : "https://github.com/flutter/flutter/pull/52769#pullrequestreview-376485797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39635ead-6b60-41db-bdc5-11a534a9e68f",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "why don't we directly cache the reference of `newChildren` but create a new cache queue? It also seems weird we cache the entire semantics node so that we can reuse the id. Can we expose the method to set the id for the semantics node? If not, it seems like we should fix the castOS to deal with changing id?",
        "createdAt" : "2020-03-17T23:43:44Z",
        "updatedAt" : "2020-03-17T23:43:44Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "4e8e2c39-c259-4e76-ae88-143f0c5da1b2",
        "parentId" : "39635ead-6b60-41db-bdc5-11a534a9e68f",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "All RenderObject's cache their entire SemanticsNode in RenderObject._semantics to re-use ids. This method was kinda unusual because it didn't cache things.\r\nThe SemanticsNode takes over ownership of newChildren in SemanticsNodes.updateWith, so nobody outside of it should really be holding onto that list (nor modify it later).\r\nI don't think it's unreasonable to expect stable IDs for SemanticsNodes that don't change. So castOS's expectation here seems fine. ",
        "createdAt" : "2020-03-17T23:54:11Z",
        "updatedAt" : "2020-03-17T23:54:12Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "bc1f41b9-567f-4b3e-a9ba-b2be550f4cc4",
        "parentId" : "39635ead-6b60-41db-bdc5-11a534a9e68f",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I see, I wasn't aware other renderobjects are caching the node.",
        "createdAt" : "2020-03-18T00:09:42Z",
        "updatedAt" : "2020-03-18T00:10:58Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "31e2a5074f41500f4db7bdc40847e4402731d44d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +934,938 @@      start += info.text.length;\n    }\n    _cachedChildNodes = newChildCache;\n    node.updateWith(config: config, childrenInInversePaintOrder: newChildren);\n  }"
  }
]