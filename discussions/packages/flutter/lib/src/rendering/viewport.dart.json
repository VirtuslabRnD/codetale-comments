[
  {
    "id" : "c6ab73e1-436e-4cf7-9137-554ace0aee53",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbb98092-ad25-42d9-be18-279334441d51",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should this be `roundedScrollOffset < Offset.zero`?\n",
        "createdAt" : "2016-01-08T22:32:34Z",
        "updatedAt" : "2016-01-08T22:32:34Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a83b9499-c786-49c2-9c31-0b215397226f",
        "parentId" : "dbb98092-ad25-42d9-be18-279334441d51",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yes.\n",
        "createdAt" : "2016-01-08T22:43:07Z",
        "updatedAt" : "2016-01-08T22:43:07Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "6c8c59db-dbcf-4e2e-8878-db43de3c526a",
        "parentId" : "dbb98092-ad25-42d9-be18-279334441d51",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "k. I have this fixed in my a11y branch (since I had to touch everything that did clipping).\n",
        "createdAt" : "2016-01-08T22:45:59Z",
        "updatedAt" : "2016-01-08T22:45:59Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +147,151 @@    if (child != null) {\n      Offset roundedScrollOffset = _scrollOffsetRoundedToIntegerDevicePixels;\n      bool _needsClip = offset < Offset.zero\n          || !(offset & size).contains(((offset - roundedScrollOffset) & child.size).bottomRight);\n      if (_needsClip) {"
  },
  {
    "id" : "99a13d6c-42ff-4b6c-bae7-da3020c955d2",
    "prId" : 1736,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260ff8f9-41a5-431f-bce0-1f6cce646f79",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "markNeedsSemanticsUpdate();\n",
        "createdAt" : "2016-02-09T21:54:27Z",
        "updatedAt" : "2016-02-09T23:17:45Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0276d09e44f99663e90c7a045277baef87c6180",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +113,117 @@      return;\n    _scrollAnchor = value;\n    markNeedsPaint();\n    markNeedsSemanticsUpdate();\n  }"
  },
  {
    "id" : "84e2938c-b50b-4c21-b980-37e1a0bff14a",
    "prId" : 8321,
    "prUrl" : "https://github.com/flutter/flutter/pull/8321#pullrequestreview-23417080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b907c29f-c5ac-43e2-897a-82f50b5db27e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We generally avoid blank lines in error messages, FWIW. Paragraph breaks are just one line break. The idea is that if we think we need more line spacing between paragraphs, we'll do it in the debugPrint method.",
        "createdAt" : "2017-02-23T07:51:15Z",
        "updatedAt" : "2017-02-23T07:51:15Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "1fed350c-61bc-43dd-af06-edc2e7543900",
        "parentId" : "b907c29f-c5ac-43e2-897a-82f50b5db27e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "ok.  will fix",
        "createdAt" : "2017-02-23T08:03:57Z",
        "updatedAt" : "2017-02-23T08:03:57Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "81af19b8f4c565e85875986794438c9c9292de67",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +531,535 @@                'vertical space in which to expand. This situation typically happens '\n                'when a scrollable widget is nested inside another scrollable widget.\\n'\n                '\\n'\n                'If this widget is always nested in a scrollable widget there '\n                'is no need to use a viewport because there will always be enough '"
  },
  {
    "id" : "df0891ca-d011-4079-aeff-f96459e97c77",
    "prId" : 11156,
    "prUrl" : "https://github.com/flutter/flutter/pull/11156#pullrequestreview-49585457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cad164d0-80df-4849-9892-2f217175821f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nice",
        "createdAt" : "2017-07-12T18:52:26Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278fd52938c7882508631a56c62a5214ed3a1f9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +609,613 @@    // Make sure the viewport itself is on screen.\n    super.showOnScreen();\n  }\n}\n"
  },
  {
    "id" : "b2388ecb-72ac-4d69-9cbe-b1140b083555",
    "prId" : 18252,
    "prUrl" : "https://github.com/flutter/flutter/pull/18252#pullrequestreview-126609316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bb2e8ce-42e5-4abd-8032-6ee39e0316b5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should this return `rect ?? viewport.paintBounds` or some such? In the case where rect and descendant are both null, it's not clear returning null is correct, based on the definition of what this returns (\"the new location of `descendant` or `rect` in the viewport after it has been revealed\").",
        "createdAt" : "2018-06-06T23:55:31Z",
        "updatedAt" : "2018-06-07T16:35:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "a05d4253-092d-48ff-9f81-497e3d51617a",
        "parentId" : "8bb2e8ce-42e5-4abd-8032-6ee39e0316b5",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I am documenting that\r\n> If `descendant` is null, this is a no-op and `rect` is returned.\r\n\r\nI find that clearer than magically returning the paintBounds of the viewport, which we'd also have to document.",
        "createdAt" : "2018-06-07T00:07:26Z",
        "updatedAt" : "2018-06-07T16:35:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "04596452-2525-419d-bb31-df8155aae2d0",
        "parentId" : "8bb2e8ce-42e5-4abd-8032-6ee39e0316b5",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "what's the use case for both being null?",
        "createdAt" : "2018-06-07T00:54:35Z",
        "updatedAt" : "2018-06-07T16:35:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8b76adcf-6a2e-46a1-a66a-6663cee3eae2",
        "parentId" : "8bb2e8ce-42e5-4abd-8032-6ee39e0316b5",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Both being null can happen when you call showOnScreen on the viewport itself. This function would then return null and showOnScreen would be called on the parent with `descendant: viewport and `rect: null`, which would bring the entire Viewport on screen.\r\n\r\nWe would achieve the same effect by returning viewport.paintBounds here, but like I said, I find that makes reasoning about what showInViewport does harder.",
        "createdAt" : "2018-06-07T01:27:56Z",
        "updatedAt" : "2018-06-07T16:35:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "72ded23e-1832-41ef-a71f-e78c5e50a5c2",
        "parentId" : "8bb2e8ce-42e5-4abd-8032-6ee39e0316b5",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I changed the docs to explicitly call the double-null case out.",
        "createdAt" : "2018-06-07T01:35:12Z",
        "updatedAt" : "2018-06-07T16:35:13Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "33d81d131cc5e6a9e9274f0bd50fce88b6596925",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +925,929 @@    assert(offset != null);\n    if (descendant == null) {\n      return rect;\n    }\n    final RevealedOffset leadingEdgeOffset = viewport.getOffsetToReveal(descendant, 0.0, rect: rect);"
  },
  {
    "id" : "ece7cdfb-0cbd-4918-bd97-cb6333839287",
    "prId" : 24551,
    "prUrl" : "https://github.com/flutter/flutter/pull/24551#pullrequestreview-177015321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85d32c0f-a7c7-45e3-aede-54d20b41fa65",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "thanks",
        "createdAt" : "2018-11-20T23:06:13Z",
        "updatedAt" : "2018-11-22T03:38:40Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dafc63778fef74a734dd4e2208322a796d3b9c9",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +396,400 @@      // doesn't make sense to ask a sliver for content before its scroll\n      // offset.\n      final double correctedCacheOrigin = math.max(cacheOrigin, -sliverScrollOffset);\n      final double cacheExtentCorrection = cacheOrigin - correctedCacheOrigin;\n"
  },
  {
    "id" : "a4eaaec7-b129-4ef8-8f0d-c5d056415eca",
    "prId" : 45327,
    "prUrl" : "https://github.com/flutter/flutter/pull/45327#pullrequestreview-322654717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e0e6576-25d9-4db0-8099-ad9c9c6f1567",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The default should probably depend on the _cacheExtentStyle? E.g. if you don't set an explicit _cacheExtend, but set the style to viewport, we don't want to cache 250 pages.",
        "createdAt" : "2019-11-25T23:40:17Z",
        "updatedAt" : "2019-11-26T00:48:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "d21d3649-d56d-4322-91c7-25875470ac3d",
        "parentId" : "7e0e6576-25d9-4db0-8099-ad9c9c6f1567",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I'm not allowing _cacheExtent to be null if _cacheExtentStyle is viewport.  I'm not even sure what a default should be in that case, - .25? 1.0?",
        "createdAt" : "2019-11-25T23:54:25Z",
        "updatedAt" : "2019-11-26T00:48:01Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "13830bae-9107-4b1b-9443-ee074734997d",
        "parentId" : "7e0e6576-25d9-4db0-8099-ad9c9c6f1567",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you add an assert to this class that makes _cacheExtent required when style is viewport then?\r\n\r\nOtherwise, 1.0 sounds like a good default. (250 pixels was also pretty arbitrary). ",
        "createdAt" : "2019-11-25T23:57:44Z",
        "updatedAt" : "2019-11-26T00:48:01Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "18553c0481de52fc39dcc9c088d7f685236f33a5",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +180,184 @@       _crossAxisDirection = crossAxisDirection,\n       _offset = offset,\n       _cacheExtent = cacheExtent ?? RenderAbstractViewport.defaultCacheExtent,\n       _cacheExtentStyle = cacheExtentStyle;\n"
  },
  {
    "id" : "8eb61ce7-bb48-437e-b6ef-23e8ab828845",
    "prId" : 46265,
    "prUrl" : "https://github.com/flutter/flutter/pull/46265#pullrequestreview-330019851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32a6a653-e6fe-4134-a670-6bfa80e2e8db",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I believe this is not correct. When the viewport has infinite constraints it does *not* scroll. It has infinite space to layout its children so there’s no need to scroll. Since it will not be scrolling there also will not be any overlap. \r\n\r\nAt this point the viewport basically turns into a regular column/row (depending on orientation). ",
        "createdAt" : "2019-12-09T19:01:31Z",
        "updatedAt" : "2019-12-12T05:38:29Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2241a6c3-97ad-4300-bfce-e43cff58e213",
        "parentId" : "32a6a653-e6fe-4134-a670-6bfa80e2e8db",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "It's not the viewport that has infinite constraints, it's the sliver (child).  Does that make things better?",
        "createdAt" : "2019-12-09T20:51:47Z",
        "updatedAt" : "2019-12-12T05:38:29Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "8527a32a-d984-49d8-82be-93d44b324db1",
        "parentId" : "32a6a653-e6fe-4134-a670-6bfa80e2e8db",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I thought that the mainAxisExtent can only be infinite if the viewport itself also has infinite constraints and hence is not scrollable.",
        "createdAt" : "2019-12-10T14:50:49Z",
        "updatedAt" : "2019-12-12T05:38:29Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "6517c741-2ea1-4794-83b9-c7ebf90a0b7e",
        "parentId" : "32a6a653-e6fe-4134-a670-6bfa80e2e8db",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "We talked offline and updated the comment a bit.  The real catch here is that the scroll physics can end up making this scroll just a little bit (e.g. bouncing scroll physics trying to move it up/down).",
        "createdAt" : "2019-12-10T17:37:17Z",
        "updatedAt" : "2019-12-12T05:38:29Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "63189c975df890d8d1554254af5853863dbc17ee",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +510,514 @@    // it is the child of a Row or Column (depending on orientation).\n    //\n    // For example, a shrink wrapping render sliver may have infinite\n    // constraints along the viewport's main axis but may also have bouncing\n    // scroll physics, which will allow for some scrolling effect to occur."
  }
]