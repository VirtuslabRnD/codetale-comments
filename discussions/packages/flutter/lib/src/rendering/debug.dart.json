[
  {
    "id" : "9d29757f-fc0b-47bf-8861-ac08f7d30dfc",
    "prId" : 911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c33580c7-52f2-45b4-a994-795862b2d5c0",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'm not sure this is the right place for this code.  We should probably put it in its own file.\n\nAlso, we shouldn't execute this code in production.  Maybe the whole thing should run only in checked mode?\n",
        "createdAt" : "2015-12-14T19:19:19Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "e9d4561e-6bcf-4bbd-9406-985d6793a4af",
        "parentId" : "c33580c7-52f2-45b4-a994-795862b2d5c0",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "`lib/src/services/debug.dart`? `lib/src/services/debug_extensions.dart`? Is the services directory the best core or base location to put things common to flutter code?\n",
        "createdAt" : "2015-12-14T19:55:31Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "4f4b70fd-319c-413b-a2d0-d94db386f361",
        "parentId" : "c33580c7-52f2-45b4-a994-795862b2d5c0",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "We could add a guard for checked mode. But note that the service extensions would then not be available to a debugger, when debugging an app that's running in production mode.\n\nHappy to add the code in an `assert`. We can move it out to again if necessary.\n",
        "createdAt" : "2015-12-14T19:58:02Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "640b4097-5d88-4f65-8b67-259fb5017eb4",
        "parentId" : "c33580c7-52f2-45b4-a994-795862b2d5c0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Things like debugPaintSizeEnabled don't do anything in prod anyway.\n",
        "createdAt" : "2015-12-14T21:21:23Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8418a2c4-fb9e-4d71-9237-932b3ff6fe83",
        "parentId" : "c33580c7-52f2-45b4-a994-795862b2d5c0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "regarding where to put it -- ideally, the timeDilation debug hook would be in the scheduler library, and the rendering debug hook would be in the rendering library.\n",
        "createdAt" : "2015-12-14T21:26:39Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cde14ab649ad999f65ed280fd05f422ea928ed3b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +61,65 @@bool _extensionsInitialized = false;\n\nvoid initServiceExtensions() {\n  if (_extensionsInitialized)\n    return;"
  },
  {
    "id" : "5f19b4e0-662e-4684-a642-5f1f075071b9",
    "prId" : 911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d09e9222-4c24-4c46-beba-07f35235191d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is going to cause asserts because of the way we implement timeDilation. We really should change how timeDilation works. (Specifically, if you change the timeDilation factor down, it's possible to expose the engine to earlier times than times the engine has seen before, and certain parts of the engine assert that you aren't traveling back in time.)\n",
        "createdAt" : "2015-12-14T19:26:24Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bd8a1646-4214-4b91-a0b8-1a475c533f10",
        "parentId" : "d09e9222-4c24-4c46-beba-07f35235191d",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Hmm, what's the best resolution here?\n- just let the asserts fire where they will\n- changing the asserts to only fire iff timeDilation == 1.0\n- add an issue to adjust the timeDilation code?\n",
        "createdAt" : "2015-12-14T20:50:05Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "ad2f8e22-4c79-422e-9397-e3239b55d662",
        "parentId" : "d09e9222-4c24-4c46-beba-07f35235191d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We should fix timeDilation (maybe not in this patch) to only ever advance time. Maybe have a timeBaseOffset which is initialised at startup and whenever we change timeDilation, or something. I haven't studied the problem closely.\n",
        "createdAt" : "2015-12-14T21:22:24Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cde14ab649ad999f65ed280fd05f422ea928ed3b",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +126,130 @@      param = param.toDouble();\n    }\n    timeDilation = param;\n  } else {\n    timeDilation = 1.0;"
  },
  {
    "id" : "d1770499-29d4-47c1-a109-ae66e1c4ef68",
    "prId" : 911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f805929-4033-4fe1-82ec-33ca2ce04a04",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "What exactly do you mean by \"flutter app\"?\nYou can have an app that uses the flutter engine (dart:ui) and nothing from the flutter repository. You can have an app that uses the \"scheduler\" library but not the \"rendering\" library. The system is explicitly layered.\n",
        "createdAt" : "2015-12-14T21:27:47Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6f852db8-ad67-4e1e-b690-85d9a884b744",
        "parentId" : "5f805929-4033-4fe1-82ec-33ca2ce04a04",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I guess generally something using the `flutter` package, that would have access to these APIs, and for whom it would be useful to manipulate some of these debug levers.\n\nIt would be nice if there was one code place to register the flutter service extensions, and each layer could contribute whatever extensions were appropriate for itself. That way you don't have to have the rendering layer know about layers above it. I'm not sure how that would all be initialized however.\n",
        "createdAt" : "2015-12-14T21:39:37Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "2a1309db-df2c-4350-96d3-491273d88cc2",
        "parentId" : "5f805929-4033-4fe1-82ec-33ca2ce04a04",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "What is there that needs to be common? As far as I can tell, registering an extension is just a few lines of code and there's no common code, is there?\n",
        "createdAt" : "2015-12-14T21:43:42Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2c5c32f4-50fd-4793-b447-c3d159b1adf2",
        "parentId" : "5f805929-4033-4fe1-82ec-33ca2ce04a04",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "Yup, that's the case. I'm thinking of a system where the bare `flutter` call would return to the client some metadata about the system - possibly a version - and a list of all the flutter commands that are available. That way the client would know which commands were available w/o having to make speculative calls to each command.\n\nIf the service protocol had a command to query what service extensions were registered, that would work as well. The service protocol doesn't have this functionality, but we could ask about the feasibility of adding it.\n",
        "createdAt" : "2015-12-14T21:54:11Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      },
      {
        "id" : "12b2d44d-24b4-40e4-b041-abff65f0a4e9",
        "parentId" : "5f805929-4033-4fe1-82ec-33ca2ce04a04",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I think having this in dart:developer itself is a better way to go. Solves the problem more comprehensively.\n",
        "createdAt" : "2015-12-14T21:55:49Z",
        "updatedAt" : "2015-12-15T03:04:48Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cde14ab649ad999f65ed280fd05f422ea928ed3b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +81,85 @@\n/// Just respond to the request. Clients can use the existence of this call to\n/// know that the debug client is a Flutter app.\nFuture<developer.ServiceExtensionResponse> _flutter(String method, Map<String, dynamic> parameters) {\n  return new Future<developer.ServiceExtensionResponse>.value("
  }
]