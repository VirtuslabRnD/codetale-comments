[
  {
    "id" : "6e1bd5e9-5d88-4b9f-87d5-ca876ac1c8c5",
    "prId" : 832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "229e3cab-67da-4753-961f-030eb1c1827c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "That's a confusing way to put it. Isn't \"hit\" the same as \"put it in the event path\"?\n\nHow about \"Consider this target hit whenever the position being hit tested is within its bounds, and continue hit testing further elements behind this one.\"\n\nAnd maybe the other two should be rephrased to split the \"getting hit\" concept from the \"prevent going through\" concept? I'm not sure exactly how to phrase this.\n\nMaybe just remove the \"Never consider...\" sentence and just let the other sentence for translucent describe it...\n",
        "createdAt" : "2015-12-09T17:01:50Z",
        "updatedAt" : "2015-12-09T17:01:50Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9258201b-e42f-4851-95a5-1f2e8b9b26ba",
        "parentId" : "229e3cab-67da-4753-961f-030eb1c1827c",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I've reworked this a bit so that the different cases are parallel.  The subtly is that if you defer to your child, which is translucent, you don't get events.\n",
        "createdAt" : "2015-12-09T17:22:31Z",
        "updatedAt" : "2015-12-09T17:22:31Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55858411fae9f7de2efc75400c6e706dddd5b07",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1110,1114 @@  opaque,\n\n  /// Never consider this target hit but always add the target to the event path anyway.\n  ///\n  /// Translucent targets both receive events at a given location and permit"
  },
  {
    "id" : "4cbebf08-0211-4abb-b945-45129812ce75",
    "prId" : 1192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c4376bc-d516-4a99-985c-96d3f196ee3e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you need to update the bits when child changes from null to non-null or vice-versa\n",
        "createdAt" : "2016-01-11T23:21:25Z",
        "updatedAt" : "2016-01-12T05:58:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bb3bd40dd8664b29b91c96aa68e723843fc28b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +541,545 @@  }\n\n  bool get alwaysNeedsCompositing => child != null && (_alpha != 0 && _alpha != 255);\n\n  /// The fraction to scale the child's alpha value."
  },
  {
    "id" : "3901f4ff-0717-4674-843f-37cf3504963b",
    "prId" : 1192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "100e2c46-3c2a-4c9b-9194-7d99457e2ec2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you need to update the bits when child changes from null to non-null or vice-versa\n",
        "createdAt" : "2016-01-11T23:21:28Z",
        "updatedAt" : "2016-01-12T05:58:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "17a9ebd2-9613-43af-824d-f8c0bf138910",
        "parentId" : "100e2c46-3c2a-4c9b-9194-7d99457e2ec2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "RenderObject itself does that for us.\n",
        "createdAt" : "2016-01-11T23:26:32Z",
        "updatedAt" : "2016-01-12T05:58:10Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "52bdc115-0643-4a8f-9e11-e3988bef3803",
        "parentId" : "100e2c46-3c2a-4c9b-9194-7d99457e2ec2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ah right.\n",
        "createdAt" : "2016-01-11T23:27:23Z",
        "updatedAt" : "2016-01-12T05:58:10Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "82bb3bd40dd8664b29b91c96aa68e723843fc28b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +607,611 @@  }\n\n  bool get alwaysNeedsCompositing => child != null;\n\n  void paint(PaintingContext context, Offset offset) {"
  },
  {
    "id" : "69cfa33b-af15-467a-ae0d-b3e959c64cb5",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404fd931-5084-46a9-91df-eb56575d7a41",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "0.8?\n",
        "createdAt" : "2016-01-26T08:07:18Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "f1b757bf-d400-4a33-ab7d-5c6de3932092",
        "parentId" : "404fd931-5084-46a9-91df-eb56575d7a41",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "So that when you scroll you still see some of the previous page. This is completely arbitrary though. Would you prefer 1.0? I expect to tweak this based on real user feedback eventually.\n",
        "createdAt" : "2016-01-26T15:54:00Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +1413,1417 @@    GestureDragUpdateCallback onHorizontalDragUpdate,\n    GestureDragUpdateCallback onVerticalDragUpdate,\n    this.scrollFactor: 0.8\n  }) : _onTap = onTap,\n       _onLongPress = onLongPress,"
  }
]