[
  {
    "id" : "8010fc8d-1ffc-461b-a8da-7a655f2f8430",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can also write this as `assert((_currentLayer != null) == hasCanvas);`, which would collapse the 12 assert lines into 3. Not sure which is more readable.\n",
        "createdAt" : "2015-11-19T17:23:43Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "602b8e79-f605-4315-824b-b7e3b4543284",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Or even `assert((_currentLayer == null) == (_canvas == null));`\n...which would get rid of the temporary as well. Not sure how good the compiler is about optimising those away. Hopefully in non-checked mode this entire function gets inlined as a trivial comparison at every call site anyway...\n",
        "createdAt" : "2015-11-19T17:25:20Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "74d4ed75-b522-42b2-9eba-4eb4f4ddd807",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I thought about doing something like that, but the trouble is when the assert fires, it's harder to know what's going wrong.  This way the line number tells you whether there is a canvas and which variable is messed up.\n",
        "createdAt" : "2015-11-19T19:04:44Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +118,122 @@    assert(() {\n      if (hasCanvas) {\n        assert(_currentLayer != null);\n        assert(_recorder != null);\n        assert(_canvas != null);"
  },
  {
    "id" : "6ab02124-a946-4893-9376-98ef3db00975",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in what way does it not work?\n",
        "createdAt" : "2015-11-19T18:11:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "568a24ca-c9cc-47e3-bbb3-84471ce10739",
        "parentId" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Crashes because it's missing a type specifier.  It's trivial to fix.\n",
        "createdAt" : "2015-11-19T19:05:27Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +216,220 @@    } else {\n      canvas.saveLayer(bounds.shift(offset), _disableAntialias);\n      // TODO(abarth): Remove this translation once RRect.shift works again.\n      canvas.translate(offset.dx, offset.dy);\n      canvas.clipRRect(clipRRect);"
  },
  {
    "id" : "310c24bf-8176-48b9-8e43-7a345e696764",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it did previously, no? What changed?\n",
        "createdAt" : "2015-11-19T18:20:49Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "63a4514a-40eb-4f54-9b1a-57c8d63920e2",
        "parentId" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Nothing changed.  We've had this problem for a long time.  I'm just documenting it.\n",
        "createdAt" : "2015-11-19T19:05:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 399,
    "diffHunk" : "@@ -1,1 +288,292 @@      childContext._stopRecordingIfNeeded();\n    } else {\n      // TODO(abarth): pushOpacity should require bounds.\n      canvas.saveLayer(bounds?.shift(offset), _getPaintForAlpha(alpha));\n      painter(this, offset);"
  },
  {
    "id" : "1c2be507-a7b4-47a8-b4e1-6ca6a57d89f4",
    "prId" : 503,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "477fa8e4-0678-4599-b842-2b8db95328b5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would have gone with `\"${child.runtimeType}  ${child.debugOwner}\"` or some such. But this is fine too.\n",
        "createdAt" : "2015-11-19T23:01:09Z",
        "updatedAt" : "2015-11-19T23:01:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfbd8c6a8a72cfd79be2f87d04540b9e53a386f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@    child._layer.removeAllChildren();\n    assert(() {\n      child._layer.debugOwner = child.debugOwner ?? child.runtimeType;\n      return true;\n    });"
  },
  {
    "id" : "12e17bf3-b81d-4145-8fd9-378a227ff3d5",
    "prId" : 982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'd put this in a \"finally\" block of a try/finally.\n",
        "createdAt" : "2015-12-18T04:41:11Z",
        "updatedAt" : "2015-12-18T04:41:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "3864238a-aa9b-4208-b3f7-19b28444396d",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I considered that, but the code is all self-contained in object.dart, and I really don't see a way in which it could throw. Do you still want a try/finally block?\n",
        "createdAt" : "2015-12-18T05:43:55Z",
        "updatedAt" : "2015-12-18T05:43:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "18424a44-ee19-4d4c-b70a-f4c13d220e08",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Its ok to skip it.\n",
        "createdAt" : "2015-12-18T06:00:06Z",
        "updatedAt" : "2015-12-18T06:00:06Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab01c7bf7354ac5bf22e464e97b2bea7df698a4f",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +897,901 @@    }\n    _nodesNeedingCompositingBitsUpdate.clear();\n    Timeline.finishSync();\n  }\n"
  },
  {
    "id" : "672d528f-ba7e-4fcb-8bb1-20971d7a4170",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like an antipattern.  Generally these values are much cheaper to compute as you walk down the tree.  You generally keep a clip and transform stack as you walk down so you don't so much redundant work.\n",
        "createdAt" : "2016-01-26T08:14:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "f642a398-3cc5-4e69-aaff-f67d4d83b6d7",
        "parentId" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "In theory these's no redundant work here. For each parent-child step, we only ever compute it once. When there's multiple children, we fork the matrix (see the _ForkingSemanticsFragment class).\n",
        "createdAt" : "2016-01-26T16:03:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +388,392 @@  }\n  Matrix4 transform;\n  void applyAncestorChain(List<RenderObject> ancestorChain) {\n    for (int index = ancestorChain.length-1; index > 0; index -= 1) {\n      RenderObject parent = ancestorChain[index];"
  },
  {
    "id" : "63cbe239-e71a-4d82-a28a-5355ec47b8d4",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I wonder if we can extract a SemanticsProvider interface from RenderObject that we can use in these classes instead of RenderObject.  That might let us move this code out of object.dart into semantics.dart.\n",
        "createdAt" : "2016-01-26T08:15:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "4334ad12-b37a-4566-b6d1-d53d4fbf02ce",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Interesting idea.\n",
        "createdAt" : "2016-01-26T16:01:54Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bfde8bd2-a971-4a16-bafc-68221f1c82f2",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Filed https://github.com/flutter/flutter/issues/1383 to track this.\n",
        "createdAt" : "2016-01-26T18:08:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +405,409 @@    }\n  }\n  void updateSemanticsNode({ RenderObject rendering, SemanticsNode semantics, SemanticsNode parentSemantics }) {\n    assert(rendering != null);\n    assert(semantics != null);"
  },
  {
    "id" : "38f2c06a-18c3-480e-9489-8cd8df2b9db8",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like a nice downward walk that could compute the clips.\n",
        "createdAt" : "2016-01-26T08:16:17Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "867fe0c1-6ad4-4c11-9efb-3e24e78287d7",
        "parentId" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is always called immediately after `geometry.applyAncestorChain()`. It's the same walk. It's just skipped when the node doesn't correspond to one with actual semantics.\n",
        "createdAt" : "2016-01-26T18:10:02Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +415,419 @@    } else {\n      semantics.rect = rendering.semanticBounds;\n      semantics.wasAffectedByClip = parentSemantics?.wasAffectedByClip ?? false;\n    }\n  }"
  },
  {
    "id" : "7974fba8-5a28-4b34-a05f-d575b3175d79",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50c89ee7-ee64-4f76-aaf6-c481d0216026",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Hello dynamic_cast, I've missed you so.\n",
        "createdAt" : "2016-01-26T08:20:20Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +535,539 @@    assert(parentSemantics == null);\n    owner._semantics ??= new SemanticsNode.root(\n      handler: owner is SemanticActionHandler ? owner as dynamic : null\n    );\n    SemanticsNode node = owner._semantics;"
  },
  {
    "id" : "f43fca2f-0f20-410c-9d62-0a6fd2732755",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d56c98-2417-4653-975a-883b6ce145e1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "neat\n",
        "createdAt" : "2016-01-26T08:21:30Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +631,635 @@    for (_SemanticsFragment child in _children) {\n      assert(child._ancestorChain.last == owner);\n      yield* child.compile(\n        geometry: new _SemanticsGeometry.copy(geometry),\n        currentSemantics: null,"
  },
  {
    "id" : "d99b69ed-78a7-466b-a0c3-9d0318ef885f",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should this have an early-out if there's no one looking at semantics?\n",
        "createdAt" : "2016-01-26T08:34:40Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "745b8d76-bc6a-4194-a2f7-3849bd6f1195",
        "parentId" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, good call. Until someone looks at semantics, everyone's dirty anyway. I originally figured that this would mean this function automatically \"early-outed\" in that situation but since then it's gotten a bit more involved...\n",
        "createdAt" : "2016-01-26T16:01:10Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 435,
    "diffHunk" : "@@ -1,1 +1498,1502 @@  /// 'noGeometry: true' when the geometry did change, the semantic\n  /// tree will be out of date.\n  void markNeedsSemanticsUpdate({ bool onlyChanges: false, bool noGeometry: false }) {\n    assert(!_debugDoingSemantics);\n    if (!_semanticsEnabled || !attached || (_needsSemanticsUpdate && onlyChanges && (_needsSemanticsGeometryUpdate || noGeometry)))"
  },
  {
    "id" : "cc9da200-1860-4de2-b2a4-bc0edd2b41ba",
    "prId" : 1400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e725bfad-e2ea-4b26-9990-9ed11585819c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "insert() needs some tests.\n",
        "createdAt" : "2016-01-27T00:28:54Z",
        "updatedAt" : "2016-01-27T04:02:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05839e51cad9204f607ed7852beb0d3d86da1f55",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1338,1342 @@  }\n  /// Insert child into this render object's child list after the given child.\n  void insert(ChildType child, { ChildType after }) {\n    assert(child != this);\n    assert(after != this);"
  }
]