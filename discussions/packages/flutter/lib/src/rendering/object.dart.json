[
  {
    "id" : "8010fc8d-1ffc-461b-a8da-7a655f2f8430",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can also write this as `assert((_currentLayer != null) == hasCanvas);`, which would collapse the 12 assert lines into 3. Not sure which is more readable.\n",
        "createdAt" : "2015-11-19T17:23:43Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "602b8e79-f605-4315-824b-b7e3b4543284",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Or even `assert((_currentLayer == null) == (_canvas == null));`\n...which would get rid of the temporary as well. Not sure how good the compiler is about optimising those away. Hopefully in non-checked mode this entire function gets inlined as a trivial comparison at every call site anyway...\n",
        "createdAt" : "2015-11-19T17:25:20Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "74d4ed75-b522-42b2-9eba-4eb4f4ddd807",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I thought about doing something like that, but the trouble is when the assert fires, it's harder to know what's going wrong.  This way the line number tells you whether there is a canvas and which variable is messed up.\n",
        "createdAt" : "2015-11-19T19:04:44Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +118,122 @@    assert(() {\n      if (hasCanvas) {\n        assert(_currentLayer != null);\n        assert(_recorder != null);\n        assert(_canvas != null);"
  },
  {
    "id" : "6ab02124-a946-4893-9376-98ef3db00975",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in what way does it not work?\n",
        "createdAt" : "2015-11-19T18:11:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "568a24ca-c9cc-47e3-bbb3-84471ce10739",
        "parentId" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Crashes because it's missing a type specifier.  It's trivial to fix.\n",
        "createdAt" : "2015-11-19T19:05:27Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +216,220 @@    } else {\n      canvas.saveLayer(bounds.shift(offset), _disableAntialias);\n      // TODO(abarth): Remove this translation once RRect.shift works again.\n      canvas.translate(offset.dx, offset.dy);\n      canvas.clipRRect(clipRRect);"
  },
  {
    "id" : "310c24bf-8176-48b9-8e43-7a345e696764",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it did previously, no? What changed?\n",
        "createdAt" : "2015-11-19T18:20:49Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "63a4514a-40eb-4f54-9b1a-57c8d63920e2",
        "parentId" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Nothing changed.  We've had this problem for a long time.  I'm just documenting it.\n",
        "createdAt" : "2015-11-19T19:05:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 399,
    "diffHunk" : "@@ -1,1 +288,292 @@      childContext._stopRecordingIfNeeded();\n    } else {\n      // TODO(abarth): pushOpacity should require bounds.\n      canvas.saveLayer(bounds?.shift(offset), _getPaintForAlpha(alpha));\n      painter(this, offset);"
  },
  {
    "id" : "1c2be507-a7b4-47a8-b4e1-6ca6a57d89f4",
    "prId" : 503,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "477fa8e4-0678-4599-b842-2b8db95328b5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would have gone with `\"${child.runtimeType}  ${child.debugOwner}\"` or some such. But this is fine too.\n",
        "createdAt" : "2015-11-19T23:01:09Z",
        "updatedAt" : "2015-11-19T23:01:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfbd8c6a8a72cfd79be2f87d04540b9e53a386f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@    child._layer.removeAllChildren();\n    assert(() {\n      child._layer.debugOwner = child.debugOwner ?? child.runtimeType;\n      return true;\n    });"
  },
  {
    "id" : "12e17bf3-b81d-4145-8fd9-378a227ff3d5",
    "prId" : 982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'd put this in a \"finally\" block of a try/finally.\n",
        "createdAt" : "2015-12-18T04:41:11Z",
        "updatedAt" : "2015-12-18T04:41:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "3864238a-aa9b-4208-b3f7-19b28444396d",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I considered that, but the code is all self-contained in object.dart, and I really don't see a way in which it could throw. Do you still want a try/finally block?\n",
        "createdAt" : "2015-12-18T05:43:55Z",
        "updatedAt" : "2015-12-18T05:43:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "18424a44-ee19-4d4c-b70a-f4c13d220e08",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Its ok to skip it.\n",
        "createdAt" : "2015-12-18T06:00:06Z",
        "updatedAt" : "2015-12-18T06:00:06Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab01c7bf7354ac5bf22e464e97b2bea7df698a4f",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +897,901 @@    }\n    _nodesNeedingCompositingBitsUpdate.clear();\n    Timeline.finishSync();\n  }\n"
  },
  {
    "id" : "672d528f-ba7e-4fcb-8bb1-20971d7a4170",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like an antipattern.  Generally these values are much cheaper to compute as you walk down the tree.  You generally keep a clip and transform stack as you walk down so you don't so much redundant work.\n",
        "createdAt" : "2016-01-26T08:14:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "f642a398-3cc5-4e69-aaff-f67d4d83b6d7",
        "parentId" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "In theory these's no redundant work here. For each parent-child step, we only ever compute it once. When there's multiple children, we fork the matrix (see the _ForkingSemanticsFragment class).\n",
        "createdAt" : "2016-01-26T16:03:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +388,392 @@  }\n  Matrix4 transform;\n  void applyAncestorChain(List<RenderObject> ancestorChain) {\n    for (int index = ancestorChain.length-1; index > 0; index -= 1) {\n      RenderObject parent = ancestorChain[index];"
  },
  {
    "id" : "63cbe239-e71a-4d82-a28a-5355ec47b8d4",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I wonder if we can extract a SemanticsProvider interface from RenderObject that we can use in these classes instead of RenderObject.  That might let us move this code out of object.dart into semantics.dart.\n",
        "createdAt" : "2016-01-26T08:15:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "4334ad12-b37a-4566-b6d1-d53d4fbf02ce",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Interesting idea.\n",
        "createdAt" : "2016-01-26T16:01:54Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bfde8bd2-a971-4a16-bafc-68221f1c82f2",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Filed https://github.com/flutter/flutter/issues/1383 to track this.\n",
        "createdAt" : "2016-01-26T18:08:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +405,409 @@    }\n  }\n  void updateSemanticsNode({ RenderObject rendering, SemanticsNode semantics, SemanticsNode parentSemantics }) {\n    assert(rendering != null);\n    assert(semantics != null);"
  },
  {
    "id" : "38f2c06a-18c3-480e-9489-8cd8df2b9db8",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like a nice downward walk that could compute the clips.\n",
        "createdAt" : "2016-01-26T08:16:17Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "867fe0c1-6ad4-4c11-9efb-3e24e78287d7",
        "parentId" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is always called immediately after `geometry.applyAncestorChain()`. It's the same walk. It's just skipped when the node doesn't correspond to one with actual semantics.\n",
        "createdAt" : "2016-01-26T18:10:02Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +415,419 @@    } else {\n      semantics.rect = rendering.semanticBounds;\n      semantics.wasAffectedByClip = parentSemantics?.wasAffectedByClip ?? false;\n    }\n  }"
  },
  {
    "id" : "7974fba8-5a28-4b34-a05f-d575b3175d79",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50c89ee7-ee64-4f76-aaf6-c481d0216026",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Hello dynamic_cast, I've missed you so.\n",
        "createdAt" : "2016-01-26T08:20:20Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +535,539 @@    assert(parentSemantics == null);\n    owner._semantics ??= new SemanticsNode.root(\n      handler: owner is SemanticActionHandler ? owner as dynamic : null\n    );\n    SemanticsNode node = owner._semantics;"
  },
  {
    "id" : "f43fca2f-0f20-410c-9d62-0a6fd2732755",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d56c98-2417-4653-975a-883b6ce145e1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "neat\n",
        "createdAt" : "2016-01-26T08:21:30Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +631,635 @@    for (_SemanticsFragment child in _children) {\n      assert(child._ancestorChain.last == owner);\n      yield* child.compile(\n        geometry: new _SemanticsGeometry.copy(geometry),\n        currentSemantics: null,"
  },
  {
    "id" : "d99b69ed-78a7-466b-a0c3-9d0318ef885f",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should this have an early-out if there's no one looking at semantics?\n",
        "createdAt" : "2016-01-26T08:34:40Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "745b8d76-bc6a-4194-a2f7-3849bd6f1195",
        "parentId" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, good call. Until someone looks at semantics, everyone's dirty anyway. I originally figured that this would mean this function automatically \"early-outed\" in that situation but since then it's gotten a bit more involved...\n",
        "createdAt" : "2016-01-26T16:01:10Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 435,
    "diffHunk" : "@@ -1,1 +1498,1502 @@  /// 'noGeometry: true' when the geometry did change, the semantic\n  /// tree will be out of date.\n  void markNeedsSemanticsUpdate({ bool onlyChanges: false, bool noGeometry: false }) {\n    assert(!_debugDoingSemantics);\n    if (!_semanticsEnabled || !attached || (_needsSemanticsUpdate && onlyChanges && (_needsSemanticsGeometryUpdate || noGeometry)))"
  },
  {
    "id" : "cc9da200-1860-4de2-b2a4-bc0edd2b41ba",
    "prId" : 1400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e725bfad-e2ea-4b26-9990-9ed11585819c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "insert() needs some tests.\n",
        "createdAt" : "2016-01-27T00:28:54Z",
        "updatedAt" : "2016-01-27T04:02:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05839e51cad9204f607ed7852beb0d3d86da1f55",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1338,1342 @@  }\n  /// Insert child into this render object's child list after the given child.\n  void insert(ChildType child, { ChildType after }) {\n    assert(child != this);\n    assert(after != this);"
  },
  {
    "id" : "93b22e9b-f244-4850-9c00-d4be9643c261",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "use elvis\n",
        "createdAt" : "2016-03-23T01:08:10Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6aea4f85-0171-4bf3-9682-92bb0003ee6d",
        "parentId" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "If you mean `owner?._nodesNeedingLayout.add(this);`, that doesn't quite work because the second dereference might happen on null. I guess I could wrap the member access in a method instead.\n",
        "createdAt" : "2016-03-23T16:03:15Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "7e28cc80-93c8-4f3e-9d6b-456a6734e4a1",
        "parentId" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ah, yeah, good point. You can leave it as is.\n",
        "createdAt" : "2016-03-23T16:21:46Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1013,1017 @@        return true;\n      });\n      if (owner != null)\n        owner._nodesNeedingLayout.add(this);\n      Scheduler.instance.ensureVisualUpdate();"
  },
  {
    "id" : "51b8f885-6da7-4b6a-9ae7-53936bb18571",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94a7bdc3-a741-4bb9-aa4f-ec9a98eddc24",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "elvis\n",
        "createdAt" : "2016-03-23T01:09:01Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +1333,1337 @@    // parent is fine (or there isn't one), but we are dirty\n    if (owner != null)\n      owner._nodesNeedingCompositingBitsUpdate.add(this);\n  }\n"
  },
  {
    "id" : "ef0f2692-ed71-45fc-8348-81f50198e488",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcb23efa-1355-4054-8a58-f34f0e0a7ac6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "elvis\n",
        "createdAt" : "2016-03-23T01:10:09Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +1393,1397 @@      assert(_layer != null);\n      if (owner != null)\n        owner._nodesNeedingPaint.add(this);\n      Scheduler.instance.ensureVisualUpdate();\n    } else if (parent is RenderObject) {"
  },
  {
    "id" : "512f42aa-a5a9-4034-a5fb-12c9b8e5535b",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22d877f5-e8a9-45e1-b8a0-ca508251b375",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We can wait for a later patch, but these calls to ensureVisualUpdate should be moved into the bindings layer because they're only needed if the owner is actually going to be visually displayed.\n",
        "createdAt" : "2016-03-23T01:38:26Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +1394,1398 @@      if (owner != null)\n        owner._nodesNeedingPaint.add(this);\n      Scheduler.instance.ensureVisualUpdate();\n    } else if (parent is RenderObject) {\n      // We don't have our own layer; one of our ancestors will take"
  },
  {
    "id" : "b4e890ce-2af4-454d-9f1d-01fe4f37709f",
    "prId" : 3026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7671198-d70d-480a-be1a-82f25b64590d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we do this for the other calls like paint, too?\n",
        "createdAt" : "2016-03-31T23:06:57Z",
        "updatedAt" : "2016-04-01T15:19:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "39f145a4-a87f-4103-8f4c-b19ba4f474e1",
        "parentId" : "e7671198-d70d-480a-be1a-82f25b64590d",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Probably, but I haven't benchmarked that one.\n",
        "createdAt" : "2016-04-01T00:29:05Z",
        "updatedAt" : "2016-04-01T15:19:43Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "622bec43be76f23d967183d287a47106705f4c3d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +808,812 @@  RenderObject() {\n    _needsCompositing = isRepaintBoundary || alwaysNeedsCompositing;\n    _performLayout = performLayout;\n  }\n"
  },
  {
    "id" : "a1d22288-d719-488d-b499-a0c72e878ea0",
    "prId" : 5673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "994f304e-c684-4b60-9f81-86f214a20eb7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The enclosing function's doc has a typo, returns null should be returns false.\n",
        "createdAt" : "2016-09-01T18:02:41Z",
        "updatedAt" : "2016-09-01T18:02:41Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ec797c53-264b-4afb-8254-a8cec3ce6bfe",
        "parentId" : "994f304e-c684-4b60-9f81-86f214a20eb7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm pretty sure it actually returns null in release builds.\n",
        "createdAt" : "2016-09-01T18:54:33Z",
        "updatedAt" : "2016-09-01T18:54:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b37a96f090e36575e95f2353d85c7af77c4b6ffc",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1194,1198 @@          break;\n        }\n        if (owner != null && owner._debugAllowMutationsToDirtySubtrees && node._needsLayout) {\n          result = true;\n          break;"
  },
  {
    "id" : "f0b3717c-de58-43f5-a94f-1db96ecd927a",
    "prId" : 5673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7b8c337-4554-44d7-8c2d-5a2b768ae3ed",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I don't understand why this isn't part of invokeLayoutCallback?\n",
        "createdAt" : "2016-09-01T18:06:51Z",
        "updatedAt" : "2016-09-01T18:06:51Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4704ebf5-7cf8-47b5-b288-b725bc2da440",
        "parentId" : "b7b8c337-4554-44d7-8c2d-5a2b768ae3ed",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it's on a different class.\n",
        "createdAt" : "2016-09-01T18:53:32Z",
        "updatedAt" : "2016-09-01T18:53:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b37a96f090e36575e95f2353d85c7af77c4b6ffc",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +889,893 @@\n  // See [RenderObject.invokeLayoutCallback].\n  void _enableMutationsToDirtySubtrees(VoidCallback callback) {\n    assert(_debugDoingLayout);\n    bool oldState = _debugAllowMutationsToDirtySubtrees;"
  },
  {
    "id" : "a1368eb4-957a-4f51-9e82-3924d9677a70",
    "prId" : 6652,
    "prUrl" : "https://github.com/flutter/flutter/pull/6652#pullrequestreview-7505113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceb66359-748e-48ae-b583-7749f5f4e25e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nit: flutter style doesn't put braces around one-line if statement bodies\n",
        "createdAt" : "2016-11-07T17:46:06Z",
        "updatedAt" : "2016-11-07T21:07:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b0d55f12-c883-48e7-8d69-e01ceab3d69d",
        "parentId" : "ceb66359-748e-48ae-b583-7749f5f4e25e",
        "authorId" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "body" : "Done\n",
        "createdAt" : "2016-11-07T21:08:02Z",
        "updatedAt" : "2016-11-07T21:08:02Z",
        "lastEditedBy" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cbf33bb2cbd84dd2158023573601067f3e2f8d4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +98,102 @@    assert(() {\n      if (debugProfilePaintsEnabled)\n        Timeline.startSync('${child.runtimeType}');\n      return true;\n    });"
  },
  {
    "id" : "9c537349-d614-45f6-adc7-75fed15d89f4",
    "prId" : 8593,
    "prUrl" : "https://github.com/flutter/flutter/pull/8593#pullrequestreview-25385748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88fe8955-02f5-44ee-a7e5-40f926fa83ab",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2017-03-06T22:42:37Z",
        "updatedAt" : "2017-03-07T23:37:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "858dae2beaee15d2b46250980ae52da62193f54b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2669,2673 @@  /// and the child becomes the new [firstChild].\n  void insert(ChildType child, { ChildType after }) {\n    assert(child != this, 'A RenderObject cannot be inserted into itself.');\n    assert(after != this, 'A RenderObject cannot simultaneously be both the parent and the sibling of another RenderObject.');\n    assert(child != after, 'A RenderObject cannot be inserted after itself.');"
  },
  {
    "id" : "ffc10ee7-a5c1-44bb-b203-789b0de1898f",
    "prId" : 11156,
    "prUrl" : "https://github.com/flutter/flutter/pull/11156#pullrequestreview-49683701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd709a0d-660a-469a-8a78-21303797c245",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Would it make sense to add this to SemanticsActionHandler?",
        "createdAt" : "2017-07-12T18:49:05Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "340a993c-ebda-4fa6-8e83-eed3b345ecef",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Only RenderObjects that the user can interact with (tap, etc) implement SemanticsActionHandler (= very few). However, every single RenderObject needs to implement showOnScreen for this PR to work. We could make RenderObject require to implement SemanticsActionHandler, but that seems to defeat the purpose of that interface?",
        "createdAt" : "2017-07-12T22:35:29Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5e6d34c5-0b53-4eca-b950-c9e9e06fd907",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The default implementation just defers up, though, right? It's semantically equivalent to the tap or scroll handlers. One render object knows how to handle it, but the others just defer up.",
        "createdAt" : "2017-07-13T00:35:52Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e9ce0e3c-f05e-4653-9a58-68922336c50a",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Not sure I get your last comment. The default implementation of what? SemanticsActionHandler is used as an interface and doesn't have a default implementation per se.\r\n\r\nWhat do you mean by RenderObjects defer up if they don't know how to handle an action? As far as I can tell, actions are directly dispatched to the exact RenderObject (implementing a SemanticsActionHandler) that can handle it.",
        "createdAt" : "2017-07-13T00:51:31Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "86cf1051-6a90-403a-a413-4f2a267410eb",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I mean if you have a gesture detector that contains a text, and you tap on the text, the gesture detector gets the tap. It happens to be because we merge them into one node and the top node is the one with the handler. But yeah, it's not \"real\" in the code per se.\r\n\r\nI dunno. It feels a bit less satisfying to have every semantic node have this function pointer now. I mean we might as well just make it be a pointer to the render object really, and I was vaguely trying to avoid that, because a SemanticsNode represents many render objects, not just one.\r\n\r\nBut I don't have a good recommendation.",
        "createdAt" : "2017-07-13T01:00:47Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "efae81d5-4e2d-4a56-bae7-a400a4b21b08",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I tried to make it a pointer to the render object in my previous PR, but as you pointed out correctly that is a violation of the layer cake. 😄 \r\n\r\nAs always, I am open to suggestions. Here are other solutions I've considered:\r\n* The one you see in this PR.\r\n* The one in the previous PR, violates the layer cake.\r\n* Have a ShowOnScreenHandler interface (contains only method `showOnScreen`) that's implemented by RenderObject and we pass the RenderObject casted to that to the SemanticsNote. This basically follows the pattern established by SemanticsActionHandler. However, our analyzer setup discourages one-method-interfaces and it also seemed like that approach just adds more complexity without much value over the approach in this PR (given that RenderObject will be the only thing implementing that interface).\r\n* Have every RenderObject implement the SemanticsActionHandler. In the RenderObject class we implement the logic in performAction for showOnScreen. Subclasses can override performAction to add other actions (tap, etc), but must call super to properly behave for the showOnScreen action. I think this approach is more error-prone for Flutter users and also kinda makes the SemanticsActionHandler interface useless (see previous argument). \r\n\r\n... and then there were many ideas that don't work.",
        "createdAt" : "2017-07-13T01:43:55Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9859cd97-093c-48ae-ac28-12093b28c36b",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I concur with your description of the situation.",
        "createdAt" : "2017-07-13T05:44:43Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278fd52938c7882508631a56c62a5214ed3a1f9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +741,745 @@      handler: renderObjectOwner is SemanticsActionHandler ? renderObjectOwner as dynamic : null,\n      owner: renderObjectOwner.owner.semanticsOwner,\n      showOnScreen: renderObjectOwner.showOnScreen,\n    );\n    final SemanticsNode node = renderObjectOwner._semantics;"
  },
  {
    "id" : "b3103f55-6748-4acc-9c78-38f2317aa82b",
    "prId" : 11544,
    "prUrl" : "https://github.com/flutter/flutter/pull/11544#pullrequestreview-55033760",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e07cc47-378b-46d2-ab2f-3aae11e67625",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is an O(N) operation, since _nodesNeedingSemantics is a `List`. Can we instead detect this case when flushing semantics and skip the node appropriately?",
        "createdAt" : "2017-08-08T18:06:10Z",
        "updatedAt" : "2017-08-08T18:43:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "90f6bb8d-1604-42ed-b73c-fa49b2d23730",
        "parentId" : "4e07cc47-378b-46d2-ab2f-3aae11e67625",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Some alternatives:\r\n1) We can remember the \"removed\" nodes in a separate list and check agains that in `flushSemantics`. That would just move the O(N) to `flushSemantics` though.\r\n2) We can change `_nodesNeedingSemantics` to a Set, which would give us O(1) for add and remove. However, that will add an extra conversion from Set to some kind of an ordered collection at the beginning of the `flushSemantics` phase. I imagine that conversion is O(N), but it would only happen once per frame instead of multiple times, so probably more efficient.\r\n3) Remove the assert and instead replace it with logic that drops the node on the floor since that semantic node is no longer needed. That sounds dangerous as that assert might catch other error cases and at the point where the assert fires, we've already done a lot of (now useless) work to get the node into the tree.\r\n\r\nOf those options, 2) seems the most reasonable. I refactored it to that. Let me know what you think.\r\n",
        "createdAt" : "2017-08-08T18:45:53Z",
        "updatedAt" : "2017-08-08T18:45:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8464a11d1d060c3ed0cb391cad2b30a48d86cb3",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2591,2595 @@        // updated.\n        // (See semantics_10_test.dart for an example why this is required).\n        owner._nodesNeedingSemantics.remove(this);\n      }\n      if (!node._needsSemanticsUpdate) {"
  },
  {
    "id" : "d3c51ef6-69d7-45aa-8609-54ef54f1d813",
    "prId" : 11711,
    "prUrl" : "https://github.com/flutter/flutter/pull/11711#pullrequestreview-57624533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "759b696a-1833-458e-87cb-b6b61621826f",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "and `@protected`?",
        "createdAt" : "2017-08-21T22:13:51Z",
        "updatedAt" : "2017-08-23T18:29:36Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "271d2e6d3b6686aac2b82fff307708c66f2d890b",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +2546,2550 @@  /// Restore the [SemanticsNode]s owned by this render object to its default\n  /// state.\n  @mustCallSuper\n  @protected\n  void resetSemantics() {"
  },
  {
    "id" : "09815007-9905-401e-a34e-f29e0e29042f",
    "prId" : 14027,
    "prUrl" : "https://github.com/flutter/flutter/pull/14027#pullrequestreview-88062247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c725a55-c140-4393-be05-91da10ccd263",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "can we remove the bounds stuff from the layers entirely?",
        "createdAt" : "2018-01-11T05:48:02Z",
        "updatedAt" : "2018-01-17T22:38:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b06fc75c5b223a31dba5605a4318f3fe3da5d2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +203,207 @@  void _startRecording() {\n    assert(!_isRecording);\n    _currentLayer = new PictureLayer(estimatedBounds);\n    _recorder = new ui.PictureRecorder();\n    _canvas = new Canvas(_recorder);"
  },
  {
    "id" : "a1dcd700-2c4b-447a-9817-524c4fd4f724",
    "prId" : 14027,
    "prUrl" : "https://github.com/flutter/flutter/pull/14027#pullrequestreview-88062315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "803c2e8b-36ad-4102-b2de-5a379112cc15",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "childPaintBounds should also have its documentation updated",
        "createdAt" : "2018-01-11T05:48:44Z",
        "updatedAt" : "2018-01-17T22:38:02Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "51b06fc75c5b223a31dba5605a4318f3fe3da5d2",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +299,303 @@    assert(!childLayer.attached);\n    assert(childLayer.parent == null);\n    assert(painter != null);\n    _stopRecordingIfNeeded();\n    _appendLayer(childLayer);"
  },
  {
    "id" : "ed5179c4-fcd9-4110-939a-7aabd54105c8",
    "prId" : 20637,
    "prUrl" : "https://github.com/flutter/flutter/pull/20637#pullrequestreview-146513464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6507d440-8245-48a7-b0ee-9785f0dda93e",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "I believe this method was always supposed to require that childLayer is a ContainerLayer but implicit casts in Dart hid that requirement.",
        "createdAt" : "2018-08-15T16:15:48Z",
        "updatedAt" : "2018-09-04T15:57:52Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e6e0e97542a7d04055ce6292dc3ce76815bf14",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +358,362 @@  ///\n  ///  * [addLayer], for pushing a leaf layer whose canvas is not used.\n  void pushLayer(ContainerLayer childLayer, PaintingContextCallback painter, Offset offset, { Rect childPaintBounds }) {\n    assert(!childLayer.attached);\n    assert(childLayer.parent == null);"
  },
  {
    "id" : "19fb56ce-13c8-43f3-a1d8-208c977e3fb9",
    "prId" : 20637,
    "prUrl" : "https://github.com/flutter/flutter/pull/20637#pullrequestreview-146552855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1fd3ae8-6c78-4be3-9e27-86954ea0b70e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we shouldn't have a public constructor. This class does some very low-level things and a public constructor would allow people to affect low-level fields like `child._layer` in ways we don't want.",
        "createdAt" : "2018-08-15T16:44:05Z",
        "updatedAt" : "2018-09-04T15:57:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "75efbb36-b5ac-4833-8f71-85f6cea454c3",
        "parentId" : "f1fd3ae8-6c78-4be3-9e27-86954ea0b70e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "never mind.",
        "createdAt" : "2018-08-15T18:01:06Z",
        "updatedAt" : "2018-09-04T15:57:52Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "45e6e0e97542a7d04055ce6292dc3ce76815bf14",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +67,71 @@  /// and [pushLayer].\n  @protected\n  PaintingContext(this._containerLayer, this.estimatedBounds)\n    : assert(_containerLayer != null),\n      assert(estimatedBounds != null);"
  },
  {
    "id" : "3a4d9d2f-2d96-4c67-a069-fa8a7ef0e837",
    "prId" : 23886,
    "prUrl" : "https://github.com/flutter/flutter/pull/23886#pullrequestreview-180550690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c945c95-b33c-4aba-9d3e-c4b53140e0b4",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Curious: what variable was this shadowing? ",
        "createdAt" : "2018-11-29T21:41:43Z",
        "updatedAt" : "2018-11-29T21:41:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "727e5b7d-0763-49e0-9e01-2ea8aaf5602c",
        "parentId" : "6c945c95-b33c-4aba-9d3e-c4b53140e0b4",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "This variable wasn't the one shadowing. It was shadowed by the identically named variable defined in the `for` loop below. So if, for example, you renamed the loop variable you'd have a bug and no feedback from the analyzer/compiler whatsoever.",
        "createdAt" : "2018-12-02T07:36:37Z",
        "updatedAt" : "2018-12-02T07:36:37Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b00a6965ef9a0dbb61113a325356b4a2a126ba9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2415,2419 @@\n    visitChildrenForSemantics((RenderObject renderChild) {\n      final _SemanticsFragment parentFragment = renderChild._getSemanticsForParent(\n        mergeIntoParent: childrenMergeIntoParent,\n      );"
  },
  {
    "id" : "d672727d-5871-4963-abd8-eaefb735752f",
    "prId" : 23886,
    "prUrl" : "https://github.com/flutter/flutter/pull/23886#pullrequestreview-180550726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65206cfc-b3ca-42df-b26e-7568bf1dfbeb",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "@goderbauer `_InterestingSemanticsFragment fragment` defines the loop variable that used to shadow the `fragment` variable outside the loop.",
        "createdAt" : "2018-12-02T07:38:02Z",
        "updatedAt" : "2018-12-02T07:38:06Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b00a6965ef9a0dbb61113a325356b4a2a126ba9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2425,2429 @@      }\n      // Figure out which child fragments are to be made explicit.\n      for (_InterestingSemanticsFragment fragment in parentFragment.interestingFragments) {\n        fragments.add(fragment);\n        fragment.addAncestor(this);"
  },
  {
    "id" : "cbf77a0f-e5d9-4cee-b517-d7d35153c407",
    "prId" : 25670,
    "prUrl" : "https://github.com/flutter/flutter/pull/25670#pullrequestreview-187561133",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c59a0e4-c3e0-4bc0-958b-0601cf1777b7",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Is there some way we could document what this is supposed to do?",
        "createdAt" : "2018-12-21T23:02:31Z",
        "updatedAt" : "2019-01-16T16:27:30Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad0c9e6a002e626a1af026f5ecd6edd47b1ff01",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3207,3211 @@    @required Rect parentSemanticsClipRect,\n    @required Rect parentPaintClipRect,\n    @required double elevationAdjustment,\n  });\n"
  },
  {
    "id" : "0da4f91c-5611-4cca-81a5-51ab4451ae83",
    "prId" : 27197,
    "prUrl" : "https://github.com/flutter/flutter/pull/27197#pullrequestreview-197300711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff65d0c1-9145-4bb3-a87e-224a678e55f1",
        "parentId" : null,
        "authorId" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "body" : "/cc @Hixie @goderbauer ",
        "createdAt" : "2019-01-28T22:51:26Z",
        "updatedAt" : "2019-01-28T22:51:27Z",
        "lastEditedBy" : "1dc608b7-5634-49db-a2de-36dd357356e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a277c1135be8176a4b9b1d2e2d06c48b8cdbf9b6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2634,2638 @@  @override\n  String toStringShallow({\n    String joiner = ', ',\n    DiagnosticLevel minLevel = DiagnosticLevel.debug,\n  }) {"
  },
  {
    "id" : "f1552f3e-740c-40f5-abb9-eb506bda31be",
    "prId" : 32656,
    "prUrl" : "https://github.com/flutter/flutter/pull/32656#pullrequestreview-237026171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb8cc4c-9cf9-4104-9b09-60fb6d0cbf0b",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "consider making this NEEDS-COMPOSITING and promoting it to the header for consistency with NEEDS-PAINT and _needsCompositingBitsUpdate unless there is a strong reason not to that I'm missing.",
        "createdAt" : "2019-05-13T23:31:46Z",
        "updatedAt" : "2019-05-13T23:31:46Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      },
      {
        "id" : "2dae903d-0081-415a-92a1-20437842f3b2",
        "parentId" : "0bb8cc4c-9cf9-4104-9b09-60fb6d0cbf0b",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, except that `needsCompositing` is not so much a lifecycle flag as it is a piece of state saying that this render object \"uses\" compositing. In contrast, the NEEDS-COMPOSITING-BITS-UPDATE is a lifecycle flag saying that the value of `needsCompositing` needs to be recomputed.",
        "createdAt" : "2019-05-13T23:32:37Z",
        "updatedAt" : "2019-05-13T23:56:17Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "c6a9bfa9-6edf-4ab3-a618-c5f5c7b5c094",
        "parentId" : "0bb8cc4c-9cf9-4104-9b09-60fb6d0cbf0b",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Maybe I should change the `ifTrue` string to be something like \"compositing enabled\", \"uses compositing\" or \"requests compositing\"? (I think if we had it to do over again, we'd name `needsCompositing` differently.)",
        "createdAt" : "2019-05-14T00:22:56Z",
        "updatedAt" : "2019-05-14T00:23:00Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "74e67a1c-cfd7-44fc-9349-389cac314760",
        "parentId" : "0bb8cc4c-9cf9-4104-9b09-60fb6d0cbf0b",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "the member is private so you could refactor it as well without a breaking change.",
        "createdAt" : "2019-05-14T03:34:06Z",
        "updatedAt" : "2019-05-14T03:34:06Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      },
      {
        "id" : "791424b6-b212-4285-a09f-45f05cabb5b3",
        "parentId" : "0bb8cc4c-9cf9-4104-9b09-60fb6d0cbf0b",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "The member is private, but there's a matching accessor (`needsCompositing`) that's used (and overridden by subclasses) that is public, so I can't refactor it without a breaking change that breaks everyone who subclasses `RenderObject` and overrides `needsCompositing`.",
        "createdAt" : "2019-05-14T04:55:42Z",
        "updatedAt" : "2019-05-14T04:55:42Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "310fd5a8a458057534ce0287a7ae64a2641cd4e8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2643,2647 @@  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(FlagProperty('needsCompositing', value: _needsCompositing, ifTrue: 'needs compositing'));\n    properties.add(DiagnosticsProperty<dynamic>('creator', debugCreator, defaultValue: null, level: DiagnosticLevel.debug));\n    properties.add(DiagnosticsProperty<ParentData>('parentData', parentData, tooltip: _debugCanParentUseSize == true ? 'can use size' : null, missingIfNull: true));"
  },
  {
    "id" : "c524fc0d-0519-4b42-92b4-46f635e69f35",
    "prId" : 35110,
    "prUrl" : "https://github.com/flutter/flutter/pull/35110#pullrequestreview-255876593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c5921e4-0a08-4cc6-b40e-e297c7d826ca",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "A short comment explaining what's being done to the parameters would be helpful. It is not clear that this function mutates the incoming `transform` and `clipRectTransform`.",
        "createdAt" : "2019-06-28T17:02:15Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "987bc794e593e095cc7632e841a07efaa9aae8d5",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +3625,3629 @@  //\n  // It will mutate both transform and clipRectTransform.\n  static void _applyIntermediatePaintTransforms(\n    RenderObject ancestor,\n    RenderObject child,"
  },
  {
    "id" : "4ba4a1d6-c1d1-4750-bb66-ac8445923586",
    "prId" : 35110,
    "prUrl" : "https://github.com/flutter/flutter/pull/35110#pullrequestreview-255882542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f11227d-3a12-46bc-86b6-7b2c7d7f0f48",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Can `clipRectTransform` be null?",
        "createdAt" : "2019-06-28T17:02:44Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "4116d547-8e7a-4a04-a5bb-819ec3267048",
        "parentId" : "1f11227d-3a12-46bc-86b6-7b2c7d7f0f48",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "No, will add assert.",
        "createdAt" : "2019-06-28T17:15:59Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "987bc794e593e095cc7632e841a07efaa9aae8d5",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +3633,3637 @@    assert(ancestor != null);\n    assert(child != null);\n    assert(transform != null);\n    assert(clipRectTransform != null);\n    assert(clipRectTransform.isIdentity());"
  },
  {
    "id" : "35b3e0f4-6323-428f-b943-a369251e0d40",
    "prId" : 35110,
    "prUrl" : "https://github.com/flutter/flutter/pull/35110#pullrequestreview-255876593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08124e0-846b-4c7d-96d5-defbeafa0a2e",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Could `setIdentity()` be called inside `_applyIntermediatePaintTransform`?",
        "createdAt" : "2019-06-28T17:04:00Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "987bc794e593e095cc7632e841a07efaa9aae8d5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3585,3589 @@        _semanticsClipRect = _intersectRects(_semanticsClipRect, parent.describeApproximatePaintClip(child));\n      }\n      _temporaryTransformHolder.setIdentity(); // clears data from previous call(s)\n      _applyIntermediatePaintTransforms(parent, child, _transform, _temporaryTransformHolder);\n      _semanticsClipRect = _transformRect(_semanticsClipRect, _temporaryTransformHolder);"
  },
  {
    "id" : "b00ad94d-f4f1-4785-8b84-9a0c97b293ef",
    "prId" : 35110,
    "prUrl" : "https://github.com/flutter/flutter/pull/35110#pullrequestreview-255884368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50aa05c6-c7e8-4374-bfdb-d1e403930cb4",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Alternatively, instead of moving `setIdentity` here in my suggestion above, we could assert that the matrix `isIdentity` here.",
        "createdAt" : "2019-06-28T17:04:56Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "3cffc751-9c84-4bfb-9382-3a600efdce03",
        "parentId" : "50aa05c6-c7e8-4374-bfdb-d1e403930cb4",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "I prefer that, done.",
        "createdAt" : "2019-06-28T17:20:23Z",
        "updatedAt" : "2019-06-28T17:38:08Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "987bc794e593e095cc7632e841a07efaa9aae8d5",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +3629,3633 @@    RenderObject child,\n    Matrix4 transform,\n    Matrix4 clipRectTransform,\n  ) {\n    assert(ancestor != null);"
  },
  {
    "id" : "f28da210-0a76-4a66-85d0-06057f5678ec",
    "prId" : 35468,
    "prUrl" : "https://github.com/flutter/flutter/pull/35468#pullrequestreview-260737888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9b00efe-bff6-41f2-ac9f-b0a09fd554b1",
        "parentId" : null,
        "authorId" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "body" : "Need an extra line here\r\n\r\n```suggestion\r\n  ///\r\n  /// * `offset` is the offset from the origin of the canvas' coordinate system\r\n```",
        "createdAt" : "2019-07-11T14:29:17Z",
        "updatedAt" : "2019-07-11T16:31:14Z",
        "lastEditedBy" : "1dfcfd37-1c96-47ca-8167-0cce6cd12366",
        "tags" : [
        ]
      }
    ],
    "commit" : "446b34992285a2ab74a7439982198709b6852638",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +447,451 @@  /// Blend further painting with a color filter.\n  ///\n  /// * `offset` is the offset from the origin of the canvas' coordinate system\n  ///   to the origin of the caller's coordinate system.\n  /// * `colorFilter` is the [ColorFilter] value to use when blending the"
  },
  {
    "id" : "913d4524-4d82-46a6-822f-6e418033905d",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267887983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f9216d-dc78-450e-abb1-d2cfdf0be25c",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "```\r\n    final OffsetLayer childOffsetLayer = child._layer;\r\n    childOffsetLayer.offset = offset;\r\n```\r\nseems to be equivalent to `child._layer.offset = offset;`?",
        "createdAt" : "2019-07-22T21:56:13Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "4cb77d67-187b-4093-ad5e-93c4ebf4f2cd",
        "parentId" : "78f9216d-dc78-450e-abb1-d2cfdf0be25c",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "`child._layer` changed its type from `OffsetLayer` to `ContainerLayer`. With this change any render object may have a layer, not just repaint boundaries.",
        "createdAt" : "2019-07-29T16:12:04Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +213,217 @@    assert(child._layer is OffsetLayer);\n    final OffsetLayer childOffsetLayer = child._layer;\n    childOffsetLayer.offset = offset;\n    appendLayer(child._layer);\n  }"
  },
  {
    "id" : "0a5e9084-7d73-4084-978a-ff91379d3519",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267890932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e62d063-a77a-4b24-8af3-76aca02a79b1",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Should a render object always set its [RenderObject.layer] field to the result of this method to no matter if this method returns null or not?",
        "createdAt" : "2019-07-22T22:08:56Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "bd980b04-6d07-4542-9835-654de7b68d5b",
        "parentId" : "7e62d063-a77a-4b24-8af3-76aca02a79b1",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "There's a many-to-many relationship between render objects and layers. Requiring setting it to whatever a `push*` method returns implies a one-to-one relationship. Instead, setting `RenderObject.layer` is optional. You set it to get some performance benefits, but that's it. There needs to be a logical \"root\" layer that's stable across frames for `RenderObject.layer` to make sense.",
        "createdAt" : "2019-07-29T16:17:11Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +398,402 @@  ///   matches the value of [RenderObject.needsCompositing] for the caller. If\n  ///   false, this method returns null, indicating that a layer is no longer\n  ///   necessary. If a render object calling this method stores the `oldLayer`\n  ///   in its [RenderObject.layer] field, it should set that field to null.\n  /// {@end template}"
  },
  {
    "id" : "04ab85c3-2b15-49e5-a719-7efa07601589",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-267943778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8956cad-74c3-4649-a419-f86fc83516c4",
        "parentId" : null,
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "This may be a breaking change as we're changing the return type. Maybe we can just `assert(_layer is OffsetLayer)` and return an `OffsetLayer` as this is just for backward compatibility. ",
        "createdAt" : "2019-07-22T22:20:48Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      },
      {
        "id" : "874ac654-95c9-44a9-9a93-239ff7bff912",
        "parentId" : "d8956cad-74c3-4649-a419-f86fc83516c4",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Hmm. Interesting idea. Since I'm deprecating it, might as well keep the same type. I'll give it a shot.",
        "createdAt" : "2019-07-29T17:53:38Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "28aa2ce0-6844-41f8-8b37-0bb3fa81d4f0",
        "parentId" : "d8956cad-74c3-4649-a419-f86fc83516c4",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done.",
        "createdAt" : "2019-07-30T16:29:18Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +1911,1915 @@  ///\n  /// For production code, consider [layer].\n  ContainerLayer get debugLayer {\n    ContainerLayer result;\n    assert(() {"
  },
  {
    "id" : "73f62f7f-2def-48c3-82b7-445426fe424f",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-272843658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "this should be protected. Nobody outside this object should be reading it as far as I can tell.",
        "createdAt" : "2019-07-22T23:46:59Z",
        "updatedAt" : "2019-08-16T20:35:21Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "541b0523-5280-4882-a6fe-30d1fc6e0c1c",
        "parentId" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "There are 41 unprotected usages. Most are in tests (which can be fixed by making it `@protected @visibleForTesting`). However, there are 18 usages in `package:flutter_test`, `widget_inspector.dart`, and `rendering/binding.dart`, that need this to remain public.",
        "createdAt" : "2019-07-29T17:43:13Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "516f9e17-59f8-4e11-8bdd-cd3c7a4b07d5",
        "parentId" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "How many of these are for debug purposes (for which we could use a `debugLayer`) vs production?",
        "createdAt" : "2019-08-06T20:22:47Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "62ea35e9-e874-489e-8650-8a9a52e5ad8a",
        "parentId" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I was able to convert all but 5 to `debugLayer`. Here's the production code that uses `layer`:\r\n\r\nrendering/binding.dart:\r\n\r\nhttps://github.com/flutter/flutter/blob/b11c5acaa6200a8d662705a312a2e5fb7714fe2e/packages/flutter/lib/src/rendering/binding.dart#L249\r\n\r\nmultiple places in widget_inspector.dart (although I'm not sure if widget inspector is considered debug code):\r\n\r\nhttps://github.com/flutter/flutter/blob/b11c5acaa6200a8d662705a312a2e5fb7714fe2e/packages/flutter/lib/src/widgets/widget_inspector.dart#L559",
        "createdAt" : "2019-08-07T17:44:24Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "71915304-614d-4988-9c6f-e9d3f2363d9d",
        "parentId" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Looking the surrounding code in `widget_inspector.dart` it's all debug code, so I was able to convert it to `debugLayer` as well. So, the only remaining production usage of `layer` is the `MouseTracker` in `rendering/binding.dart`.",
        "createdAt" : "2019-08-07T20:36:54Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "11931dc0-25fd-427f-9a21-cc74ec355ae7",
        "parentId" : "520258ef-6f8a-4213-8cbb-0b495adbbf6a",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Let's move that closure into a method on RenderView, and then pass that method in rather than using a closure. That'll be generally cleaner and will allow us to make this protected.",
        "createdAt" : "2019-08-08T21:18:27Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 303,
    "diffHunk" : "@@ -1,1 +1887,1891 @@  /// field.\n  @protected\n  ContainerLayer get layer {\n    assert(!isRepaintBoundary || (_layer == null || _layer is OffsetLayer));\n    return _layer;"
  },
  {
    "id" : "7216e449-e62d-4625-969d-faa07750765a",
    "prId" : 36402,
    "prUrl" : "https://github.com/flutter/flutter/pull/36402#pullrequestreview-275126452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30ee02d9-f3de-48ca-817d-8ed96137e77e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "seems like this should go through the setter rather than the field, since we have a setter.\r\n\r\nthat said, it seems sketchy that we have two places that can affect this field. Who owns it, the render object or the painting context or someone else? we should have a clear ownership model so we know who's job it is to update it.",
        "createdAt" : "2019-08-06T20:24:15Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "606ad127-e4a6-4d7e-8fe3-0b62143f0a3d",
        "parentId" : "30ee02d9-f3de-48ca-817d-8ed96137e77e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Yeah, I couldn't think of a clean _and_ non-breaking solution here. We have two kinds of ownership, which is determined by `isRepaintBoundary`.\r\n\r\n1. A repaint boundary does not own its layer. Instead, the `PaintingContext` creates an `OffsetLayer` and assigns it to the repaint boundary `RenderObject`.\r\n1. A non-repaint boundary owns its layer (if it's composited, of course). In that case, the concrete implementation of the `RenderObject` would create the layer and assign it to the `layer` field.\r\n\r\nTo ensure correct usage, the public `layer` setter checks that the object is not a repaint boundary. Otherwise, one could create a repaint boundary and overwrite the layer assigned by `PaintingContext`. This is why I'm not using setter here.",
        "createdAt" : "2019-08-07T16:20:41Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "95b08a68-cebb-42a8-87b1-ebb49e59150e",
        "parentId" : "30ee02d9-f3de-48ca-817d-8ed96137e77e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "> I couldn't think of a clean and non-breaking solution here\r\n\r\nIn such cases the \"non-breaking\" part is the part we give up on. (See the breaking change policy.)\r\n\r\nThis sounds like a very confusing mess as implemented. I think we should fix this before landing. There should be a single clear documented owner for the field.",
        "createdAt" : "2019-08-08T21:15:57Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "86ccd4db-9567-4098-ba05-9169039627bd",
        "parentId" : "30ee02d9-f3de-48ca-817d-8ed96137e77e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(as discussed, it's fine if we just add a comment here that says we're setting the field directly because this is the one place that IS allowed to set it when it's a repaint boundary)",
        "createdAt" : "2019-08-13T20:38:10Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "2aa018c9-f8a9-480c-a90e-8d2579c0cd25",
        "parentId" : "30ee02d9-f3de-48ca-817d-8ed96137e77e",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "Done",
        "createdAt" : "2019-08-14T20:18:43Z",
        "updatedAt" : "2019-08-16T20:35:22Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3920f8f7f07666b8c7f6bc740e5229dee680557d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +120,124 @@      // apply here because this is exactly the place designed to create a\n      // layer for repaint boundaries.\n      child._layer = childLayer = OffsetLayer();\n    } else {\n      assert(childLayer is OffsetLayer);"
  },
  {
    "id" : "45f81d91-db1e-4d03-b17c-64e7b7630449",
    "prId" : 38930,
    "prUrl" : "https://github.com/flutter/flutter/pull/38930#pullrequestreview-288939378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9373203-a19b-4606-9433-39b012c65d86",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "By default, [mark needsLayout] is called on the [RenderObject] implementing this mixin.",
        "createdAt" : "2019-09-16T22:54:42Z",
        "updatedAt" : "2019-09-24T16:42:06Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "75e1926c01e4512e6b3a7a81ca90c92ccd87cbae",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3223,3227 @@\n  /// A callback that is called when system fonts have changed.\n  ///\n  /// By default, [markNeedsLayout] is called on the [RenderObject]\n  /// implementing this mixin."
  },
  {
    "id" : "0b4e547a-8238-4fba-ba83-536745490a77",
    "prId" : 49994,
    "prUrl" : "https://github.com/flutter/flutter/pull/49994#pullrequestreview-352452196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b706c556-097b-43ac-98cc-7a76842a064a",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "nit: separate paragraphs with one empty line.",
        "createdAt" : "2020-02-03T18:05:27Z",
        "updatedAt" : "2020-02-03T23:20:10Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ced787b4dd3ad92f8ec7cf5fbafc442cf36ef48",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3009,3013 @@///\n/// The [ChildType] specifies the type of the children (extending [RenderObject]),\n/// e.g. [RenderBox].\n///\n/// [ParentDataType] stores parent container data on its child render objects."
  }
]