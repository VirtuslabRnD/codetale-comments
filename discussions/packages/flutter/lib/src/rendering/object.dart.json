[
  {
    "id" : "8010fc8d-1ffc-461b-a8da-7a655f2f8430",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "you can also write this as `assert((_currentLayer != null) == hasCanvas);`, which would collapse the 12 assert lines into 3. Not sure which is more readable.\n",
        "createdAt" : "2015-11-19T17:23:43Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "602b8e79-f605-4315-824b-b7e3b4543284",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Or even `assert((_currentLayer == null) == (_canvas == null));`\n...which would get rid of the temporary as well. Not sure how good the compiler is about optimising those away. Hopefully in non-checked mode this entire function gets inlined as a trivial comparison at every call site anyway...\n",
        "createdAt" : "2015-11-19T17:25:20Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "74d4ed75-b522-42b2-9eba-4eb4f4ddd807",
        "parentId" : "80ce3df8-675b-4221-9387-3e7a79abfec2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Yeah, I thought about doing something like that, but the trouble is when the assert fires, it's harder to know what's going wrong.  This way the line number tells you whether there is a canvas and which variable is messed up.\n",
        "createdAt" : "2015-11-19T19:04:44Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +118,122 @@    assert(() {\n      if (hasCanvas) {\n        assert(_currentLayer != null);\n        assert(_recorder != null);\n        assert(_canvas != null);"
  },
  {
    "id" : "6ab02124-a946-4893-9376-98ef3db00975",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "in what way does it not work?\n",
        "createdAt" : "2015-11-19T18:11:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "568a24ca-c9cc-47e3-bbb3-84471ce10739",
        "parentId" : "8cb4d3ea-f024-43d5-8586-56b767dfc9b2",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Crashes because it's missing a type specifier.  It's trivial to fix.\n",
        "createdAt" : "2015-11-19T19:05:27Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +216,220 @@    } else {\n      canvas.saveLayer(bounds.shift(offset), _disableAntialias);\n      // TODO(abarth): Remove this translation once RRect.shift works again.\n      canvas.translate(offset.dx, offset.dy);\n      canvas.clipRRect(clipRRect);"
  },
  {
    "id" : "310c24bf-8176-48b9-8e43-7a345e696764",
    "prId" : 486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it did previously, no? What changed?\n",
        "createdAt" : "2015-11-19T18:20:49Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "63a4514a-40eb-4f54-9b1a-57c8d63920e2",
        "parentId" : "1baeccb3-0ce3-4dfb-8b7f-3ee4770769f3",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Nothing changed.  We've had this problem for a long time.  I'm just documenting it.\n",
        "createdAt" : "2015-11-19T19:05:45Z",
        "updatedAt" : "2015-11-19T19:18:09Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc576814d50ce87116c0c9543b7805057a6ae03d",
    "line" : 399,
    "diffHunk" : "@@ -1,1 +288,292 @@      childContext._stopRecordingIfNeeded();\n    } else {\n      // TODO(abarth): pushOpacity should require bounds.\n      canvas.saveLayer(bounds?.shift(offset), _getPaintForAlpha(alpha));\n      painter(this, offset);"
  },
  {
    "id" : "1c2be507-a7b4-47a8-b4e1-6ca6a57d89f4",
    "prId" : 503,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "477fa8e4-0678-4599-b842-2b8db95328b5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I would have gone with `\"${child.runtimeType}  ${child.debugOwner}\"` or some such. But this is fine too.\n",
        "createdAt" : "2015-11-19T23:01:09Z",
        "updatedAt" : "2015-11-19T23:01:09Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfbd8c6a8a72cfd79be2f87d04540b9e53a386f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@    child._layer.removeAllChildren();\n    assert(() {\n      child._layer.debugOwner = child.debugOwner ?? child.runtimeType;\n      return true;\n    });"
  },
  {
    "id" : "12e17bf3-b81d-4145-8fd9-378a227ff3d5",
    "prId" : 982,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I'd put this in a \"finally\" block of a try/finally.\n",
        "createdAt" : "2015-12-18T04:41:11Z",
        "updatedAt" : "2015-12-18T04:41:11Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "3864238a-aa9b-4208-b3f7-19b28444396d",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I considered that, but the code is all self-contained in object.dart, and I really don't see a way in which it could throw. Do you still want a try/finally block?\n",
        "createdAt" : "2015-12-18T05:43:55Z",
        "updatedAt" : "2015-12-18T05:43:55Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "18424a44-ee19-4d4c-b70a-f4c13d220e08",
        "parentId" : "ed88a3d8-6c45-4fe2-bfe0-c55c25d8f1af",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Its ok to skip it.\n",
        "createdAt" : "2015-12-18T06:00:06Z",
        "updatedAt" : "2015-12-18T06:00:06Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab01c7bf7354ac5bf22e464e97b2bea7df698a4f",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +897,901 @@    }\n    _nodesNeedingCompositingBitsUpdate.clear();\n    Timeline.finishSync();\n  }\n"
  },
  {
    "id" : "672d528f-ba7e-4fcb-8bb1-20971d7a4170",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like an antipattern.  Generally these values are much cheaper to compute as you walk down the tree.  You generally keep a clip and transform stack as you walk down so you don't so much redundant work.\n",
        "createdAt" : "2016-01-26T08:14:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "f642a398-3cc5-4e69-aaff-f67d4d83b6d7",
        "parentId" : "174bd814-5c7c-4dc5-a59a-4c4a0ddbb29b",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "In theory these's no redundant work here. For each parent-child step, we only ever compute it once. When there's multiple children, we fork the matrix (see the _ForkingSemanticsFragment class).\n",
        "createdAt" : "2016-01-26T16:03:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +388,392 @@  }\n  Matrix4 transform;\n  void applyAncestorChain(List<RenderObject> ancestorChain) {\n    for (int index = ancestorChain.length-1; index > 0; index -= 1) {\n      RenderObject parent = ancestorChain[index];"
  },
  {
    "id" : "63cbe239-e71a-4d82-a28a-5355ec47b8d4",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "I wonder if we can extract a SemanticsProvider interface from RenderObject that we can use in these classes instead of RenderObject.  That might let us move this code out of object.dart into semantics.dart.\n",
        "createdAt" : "2016-01-26T08:15:35Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "4334ad12-b37a-4566-b6d1-d53d4fbf02ce",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Interesting idea.\n",
        "createdAt" : "2016-01-26T16:01:54Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "bfde8bd2-a971-4a16-bafc-68221f1c82f2",
        "parentId" : "d51e5599-dc18-4dbf-a0a4-100366f7d42c",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Filed https://github.com/flutter/flutter/issues/1383 to track this.\n",
        "createdAt" : "2016-01-26T18:08:16Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +405,409 @@    }\n  }\n  void updateSemanticsNode({ RenderObject rendering, SemanticsNode semantics, SemanticsNode parentSemantics }) {\n    assert(rendering != null);\n    assert(semantics != null);"
  },
  {
    "id" : "38f2c06a-18c3-480e-9489-8cd8df2b9db8",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "This looks like a nice downward walk that could compute the clips.\n",
        "createdAt" : "2016-01-26T08:16:17Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "867fe0c1-6ad4-4c11-9efb-3e24e78287d7",
        "parentId" : "124bf8ec-8e59-420d-a6f0-25660e0212a1",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "This is always called immediately after `geometry.applyAncestorChain()`. It's the same walk. It's just skipped when the node doesn't correspond to one with actual semantics.\n",
        "createdAt" : "2016-01-26T18:10:02Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +415,419 @@    } else {\n      semantics.rect = rendering.semanticBounds;\n      semantics.wasAffectedByClip = parentSemantics?.wasAffectedByClip ?? false;\n    }\n  }"
  },
  {
    "id" : "7974fba8-5a28-4b34-a05f-d575b3175d79",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50c89ee7-ee64-4f76-aaf6-c481d0216026",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Hello dynamic_cast, I've missed you so.\n",
        "createdAt" : "2016-01-26T08:20:20Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +535,539 @@    assert(parentSemantics == null);\n    owner._semantics ??= new SemanticsNode.root(\n      handler: owner is SemanticActionHandler ? owner as dynamic : null\n    );\n    SemanticsNode node = owner._semantics;"
  },
  {
    "id" : "f43fca2f-0f20-410c-9d62-0a6fd2732755",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88d56c98-2417-4653-975a-883b6ce145e1",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "neat\n",
        "createdAt" : "2016-01-26T08:21:30Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +631,635 @@    for (_SemanticsFragment child in _children) {\n      assert(child._ancestorChain.last == owner);\n      yield* child.compile(\n        geometry: new _SemanticsGeometry.copy(geometry),\n        currentSemantics: null,"
  },
  {
    "id" : "d99b69ed-78a7-466b-a0c3-9d0318ef885f",
    "prId" : 1309,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should this have an early-out if there's no one looking at semantics?\n",
        "createdAt" : "2016-01-26T08:34:40Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "745b8d76-bc6a-4194-a2f7-3849bd6f1195",
        "parentId" : "208ac7a3-d12b-4184-9d7d-999be8fb8208",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, good call. Until someone looks at semantics, everyone's dirty anyway. I originally figured that this would mean this function automatically \"early-outed\" in that situation but since then it's gotten a bit more involved...\n",
        "createdAt" : "2016-01-26T16:01:10Z",
        "updatedAt" : "2016-01-27T18:04:54Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "28a1788371bd78a74f763aab26bca87e92224cc7",
    "line" : 435,
    "diffHunk" : "@@ -1,1 +1498,1502 @@  /// 'noGeometry: true' when the geometry did change, the semantic\n  /// tree will be out of date.\n  void markNeedsSemanticsUpdate({ bool onlyChanges: false, bool noGeometry: false }) {\n    assert(!_debugDoingSemantics);\n    if (!_semanticsEnabled || !attached || (_needsSemanticsUpdate && onlyChanges && (_needsSemanticsGeometryUpdate || noGeometry)))"
  },
  {
    "id" : "cc9da200-1860-4de2-b2a4-bc0edd2b41ba",
    "prId" : 1400,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e725bfad-e2ea-4b26-9990-9ed11585819c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "insert() needs some tests.\n",
        "createdAt" : "2016-01-27T00:28:54Z",
        "updatedAt" : "2016-01-27T04:02:51Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "05839e51cad9204f607ed7852beb0d3d86da1f55",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1338,1342 @@  }\n  /// Insert child into this render object's child list after the given child.\n  void insert(ChildType child, { ChildType after }) {\n    assert(child != this);\n    assert(after != this);"
  },
  {
    "id" : "93b22e9b-f244-4850-9c00-d4be9643c261",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "use elvis\n",
        "createdAt" : "2016-03-23T01:08:10Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "6aea4f85-0171-4bf3-9682-92bb0003ee6d",
        "parentId" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "authorId" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "body" : "If you mean `owner?._nodesNeedingLayout.add(this);`, that doesn't quite work because the second dereference might happen on null. I guess I could wrap the member access in a method instead.\n",
        "createdAt" : "2016-03-23T16:03:15Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "727d612e-f69f-4629-9819-46a939c0fcb0",
        "tags" : [
        ]
      },
      {
        "id" : "7e28cc80-93c8-4f3e-9d6b-456a6734e4a1",
        "parentId" : "69871b5b-f506-4da8-b8b4-dccec57c38d8",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Ah, yeah, good point. You can leave it as is.\n",
        "createdAt" : "2016-03-23T16:21:46Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1013,1017 @@        return true;\n      });\n      if (owner != null)\n        owner._nodesNeedingLayout.add(this);\n      Scheduler.instance.ensureVisualUpdate();"
  },
  {
    "id" : "51b8f885-6da7-4b6a-9ae7-53936bb18571",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94a7bdc3-a741-4bb9-aa4f-ec9a98eddc24",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "elvis\n",
        "createdAt" : "2016-03-23T01:09:01Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +1333,1337 @@    // parent is fine (or there isn't one), but we are dirty\n    if (owner != null)\n      owner._nodesNeedingCompositingBitsUpdate.add(this);\n  }\n"
  },
  {
    "id" : "ef0f2692-ed71-45fc-8348-81f50198e488",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcb23efa-1355-4054-8a58-f34f0e0a7ac6",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "elvis\n",
        "createdAt" : "2016-03-23T01:10:09Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +1393,1397 @@      assert(_layer != null);\n      if (owner != null)\n        owner._nodesNeedingPaint.add(this);\n      Scheduler.instance.ensureVisualUpdate();\n    } else if (parent is RenderObject) {"
  },
  {
    "id" : "512f42aa-a5a9-4034-a5fb-12c9b8e5535b",
    "prId" : 2839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22d877f5-e8a9-45e1-b8a0-ca508251b375",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "We can wait for a later patch, but these calls to ensureVisualUpdate should be moved into the bindings layer because they're only needed if the owner is actually going to be visually displayed.\n",
        "createdAt" : "2016-03-23T01:38:26Z",
        "updatedAt" : "2016-03-24T21:59:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5a82a72630d3a199d350e6f55e9d77f86a981d",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +1394,1398 @@      if (owner != null)\n        owner._nodesNeedingPaint.add(this);\n      Scheduler.instance.ensureVisualUpdate();\n    } else if (parent is RenderObject) {\n      // We don't have our own layer; one of our ancestors will take"
  },
  {
    "id" : "b4e890ce-2af4-454d-9f1d-01fe4f37709f",
    "prId" : 3026,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7671198-d70d-480a-be1a-82f25b64590d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "should we do this for the other calls like paint, too?\n",
        "createdAt" : "2016-03-31T23:06:57Z",
        "updatedAt" : "2016-04-01T15:19:43Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "39f145a4-a87f-4103-8f4c-b19ba4f474e1",
        "parentId" : "e7671198-d70d-480a-be1a-82f25b64590d",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Probably, but I haven't benchmarked that one.\n",
        "createdAt" : "2016-04-01T00:29:05Z",
        "updatedAt" : "2016-04-01T15:19:43Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "622bec43be76f23d967183d287a47106705f4c3d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +808,812 @@  RenderObject() {\n    _needsCompositing = isRepaintBoundary || alwaysNeedsCompositing;\n    _performLayout = performLayout;\n  }\n"
  },
  {
    "id" : "a1d22288-d719-488d-b499-a0c72e878ea0",
    "prId" : 5673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "994f304e-c684-4b60-9f81-86f214a20eb7",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "The enclosing function's doc has a typo, returns null should be returns false.\n",
        "createdAt" : "2016-09-01T18:02:41Z",
        "updatedAt" : "2016-09-01T18:02:41Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ec797c53-264b-4afb-8254-a8cec3ce6bfe",
        "parentId" : "994f304e-c684-4b60-9f81-86f214a20eb7",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm pretty sure it actually returns null in release builds.\n",
        "createdAt" : "2016-09-01T18:54:33Z",
        "updatedAt" : "2016-09-01T18:54:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b37a96f090e36575e95f2353d85c7af77c4b6ffc",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1194,1198 @@          break;\n        }\n        if (owner != null && owner._debugAllowMutationsToDirtySubtrees && node._needsLayout) {\n          result = true;\n          break;"
  },
  {
    "id" : "f0b3717c-de58-43f5-a94f-1db96ecd927a",
    "prId" : 5673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7b8c337-4554-44d7-8c2d-5a2b768ae3ed",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "I don't understand why this isn't part of invokeLayoutCallback?\n",
        "createdAt" : "2016-09-01T18:06:51Z",
        "updatedAt" : "2016-09-01T18:06:51Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "4704ebf5-7cf8-47b5-b288-b725bc2da440",
        "parentId" : "b7b8c337-4554-44d7-8c2d-5a2b768ae3ed",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "it's on a different class.\n",
        "createdAt" : "2016-09-01T18:53:32Z",
        "updatedAt" : "2016-09-01T18:53:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b37a96f090e36575e95f2353d85c7af77c4b6ffc",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +889,893 @@\n  // See [RenderObject.invokeLayoutCallback].\n  void _enableMutationsToDirtySubtrees(VoidCallback callback) {\n    assert(_debugDoingLayout);\n    bool oldState = _debugAllowMutationsToDirtySubtrees;"
  },
  {
    "id" : "a1368eb4-957a-4f51-9e82-3924d9677a70",
    "prId" : 6652,
    "prUrl" : "https://github.com/flutter/flutter/pull/6652#pullrequestreview-7505113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceb66359-748e-48ae-b583-7749f5f4e25e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nit: flutter style doesn't put braces around one-line if statement bodies\n",
        "createdAt" : "2016-11-07T17:46:06Z",
        "updatedAt" : "2016-11-07T21:07:13Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "b0d55f12-c883-48e7-8d69-e01ceab3d69d",
        "parentId" : "ceb66359-748e-48ae-b583-7749f5f4e25e",
        "authorId" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "body" : "Done\n",
        "createdAt" : "2016-11-07T21:08:02Z",
        "updatedAt" : "2016-11-07T21:08:02Z",
        "lastEditedBy" : "a50d169e-27b9-43ce-b1ac-ebf0c920f875",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cbf33bb2cbd84dd2158023573601067f3e2f8d4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +98,102 @@    assert(() {\n      if (debugProfilePaintsEnabled)\n        Timeline.startSync('${child.runtimeType}');\n      return true;\n    });"
  },
  {
    "id" : "9c537349-d614-45f6-adc7-75fed15d89f4",
    "prId" : 8593,
    "prUrl" : "https://github.com/flutter/flutter/pull/8593#pullrequestreview-25385748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88fe8955-02f5-44ee-a7e5-40f926fa83ab",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "NICE",
        "createdAt" : "2017-03-06T22:42:37Z",
        "updatedAt" : "2017-03-07T23:37:37Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "858dae2beaee15d2b46250980ae52da62193f54b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2669,2673 @@  /// and the child becomes the new [firstChild].\n  void insert(ChildType child, { ChildType after }) {\n    assert(child != this, 'A RenderObject cannot be inserted into itself.');\n    assert(after != this, 'A RenderObject cannot simultaneously be both the parent and the sibling of another RenderObject.');\n    assert(child != after, 'A RenderObject cannot be inserted after itself.');"
  },
  {
    "id" : "ffc10ee7-a5c1-44bb-b203-789b0de1898f",
    "prId" : 11156,
    "prUrl" : "https://github.com/flutter/flutter/pull/11156#pullrequestreview-49683701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd709a0d-660a-469a-8a78-21303797c245",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Would it make sense to add this to SemanticsActionHandler?",
        "createdAt" : "2017-07-12T18:49:05Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "340a993c-ebda-4fa6-8e83-eed3b345ecef",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Only RenderObjects that the user can interact with (tap, etc) implement SemanticsActionHandler (= very few). However, every single RenderObject needs to implement showOnScreen for this PR to work. We could make RenderObject require to implement SemanticsActionHandler, but that seems to defeat the purpose of that interface?",
        "createdAt" : "2017-07-12T22:35:29Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "5e6d34c5-0b53-4eca-b950-c9e9e06fd907",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The default implementation just defers up, though, right? It's semantically equivalent to the tap or scroll handlers. One render object knows how to handle it, but the others just defer up.",
        "createdAt" : "2017-07-13T00:35:52Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e9ce0e3c-f05e-4653-9a58-68922336c50a",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Not sure I get your last comment. The default implementation of what? SemanticsActionHandler is used as an interface and doesn't have a default implementation per se.\r\n\r\nWhat do you mean by RenderObjects defer up if they don't know how to handle an action? As far as I can tell, actions are directly dispatched to the exact RenderObject (implementing a SemanticsActionHandler) that can handle it.",
        "createdAt" : "2017-07-13T00:51:31Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "86cf1051-6a90-403a-a413-4f2a267410eb",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I mean if you have a gesture detector that contains a text, and you tap on the text, the gesture detector gets the tap. It happens to be because we merge them into one node and the top node is the one with the handler. But yeah, it's not \"real\" in the code per se.\r\n\r\nI dunno. It feels a bit less satisfying to have every semantic node have this function pointer now. I mean we might as well just make it be a pointer to the render object really, and I was vaguely trying to avoid that, because a SemanticsNode represents many render objects, not just one.\r\n\r\nBut I don't have a good recommendation.",
        "createdAt" : "2017-07-13T01:00:47Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "efae81d5-4e2d-4a56-bae7-a400a4b21b08",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I tried to make it a pointer to the render object in my previous PR, but as you pointed out correctly that is a violation of the layer cake. 😄 \r\n\r\nAs always, I am open to suggestions. Here are other solutions I've considered:\r\n* The one you see in this PR.\r\n* The one in the previous PR, violates the layer cake.\r\n* Have a ShowOnScreenHandler interface (contains only method `showOnScreen`) that's implemented by RenderObject and we pass the RenderObject casted to that to the SemanticsNote. This basically follows the pattern established by SemanticsActionHandler. However, our analyzer setup discourages one-method-interfaces and it also seemed like that approach just adds more complexity without much value over the approach in this PR (given that RenderObject will be the only thing implementing that interface).\r\n* Have every RenderObject implement the SemanticsActionHandler. In the RenderObject class we implement the logic in performAction for showOnScreen. Subclasses can override performAction to add other actions (tap, etc), but must call super to properly behave for the showOnScreen action. I think this approach is more error-prone for Flutter users and also kinda makes the SemanticsActionHandler interface useless (see previous argument). \r\n\r\n... and then there were many ideas that don't work.",
        "createdAt" : "2017-07-13T01:43:55Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "9859cd97-093c-48ae-ac28-12093b28c36b",
        "parentId" : "fd709a0d-660a-469a-8a78-21303797c245",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I concur with your description of the situation.",
        "createdAt" : "2017-07-13T05:44:43Z",
        "updatedAt" : "2017-07-19T22:52:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278fd52938c7882508631a56c62a5214ed3a1f9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +741,745 @@      handler: renderObjectOwner is SemanticsActionHandler ? renderObjectOwner as dynamic : null,\n      owner: renderObjectOwner.owner.semanticsOwner,\n      showOnScreen: renderObjectOwner.showOnScreen,\n    );\n    final SemanticsNode node = renderObjectOwner._semantics;"
  }
]