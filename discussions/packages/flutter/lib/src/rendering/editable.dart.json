[
  {
    "id" : "022d5535-02c2-495b-9bd0-3a44e1de8bb1",
    "prId" : 8237,
    "prUrl" : "https://github.com/flutter/flutter/pull/8237#pullrequestreview-22421253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we do the same thing in `RenderParagraph` ?",
        "createdAt" : "2017-02-17T04:25:50Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "bc018df2-7a47-4d81-981c-9d9660ba0031",
        "parentId" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I wasted at least 15 minutes learning that we had this code in RenderEditable at all (having first done RenderParagraph)...",
        "createdAt" : "2017-02-17T04:40:23Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "12819e4ecf4a4ec7a4d3b86c995193214d3cc7b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +404,408 @@           '${text.toString(\"$prefix   \\u2551 \")}' // TextSpan includes a newline\n           '$prefix   \\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n'\n           '${prefix.trimRight()}\\n';\n  }\n}"
  },
  {
    "id" : "a46ad0db-b6cf-47fc-ba67-86c6875a5f04",
    "prId" : 10323,
    "prUrl" : "https://github.com/flutter/flutter/pull/10323#pullrequestreview-40371919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3506e14-58da-41a5-a922-56d7c2afee42",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "FWIW, `ValueChanged<Rect>` is the same signature. (It's fine to keep this though. We often have redundant typedefs, especially in cases where we can then hook more documentation to them.)",
        "createdAt" : "2017-05-25T19:36:52Z",
        "updatedAt" : "2017-05-25T23:06:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "17459b5c0304731318b076e194972dfa46cf6664",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +29,33 @@///\n/// Used by [RenderEditable.onCaretChanged].\ntypedef void CaretChangedHandler(Rect caretRect);\n\n/// Represents a global screen coordinate of the point in a selection, and the"
  },
  {
    "id" : "1afd3f0a-677d-4bd0-b358-f50e243f5364",
    "prId" : 10576,
    "prUrl" : "https://github.com/flutter/flutter/pull/10576#pullrequestreview-42969555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's strange to have this logic at this layer.  Shouldn't this logic be in text painter or lower?",
        "createdAt" : "2017-06-08T16:04:17Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "53d18d0f-16d5-4624-b808-5d60363522e8",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, I suppose we could add an intrinsic height getting to TextPainter.",
        "createdAt" : "2017-06-08T17:43:01Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "631d263c-3a3d-4dc0-a11b-2509891975a2",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Actually that wouldn't really work. TextPainter's API consistently requires that you lay it out before you do anything like this, and there's nothing in the API that implies a layout. The whole point of this function is that it tries to avoid doing a layout if possible.",
        "createdAt" : "2017-06-08T17:48:43Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "32aa93d0-17d3-4c03-9845-1b4ba64303fc",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The real question I think is why is our logic for RenderEditable so different from our logic for RenderParagraph, when it comes to intrinsic height calculations.",
        "createdAt" : "2017-06-08T17:51:40Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ef5c7826-6cc2-45ca-bd2b-ff00d6667a88",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm deleting this code and switching RenderEditable to use RenderParagraph's logic, which more closely matches the contract for computeMinIntrinsicHeight.",
        "createdAt" : "2017-06-08T17:53:42Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f9ceeb76-3ff8-455c-afa8-4445cecf6d02",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oh, no, that's wrong too... RenderEditable wants to be as high as its maxLines if it has one. That's why they're different.",
        "createdAt" : "2017-06-08T17:58:18Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c0281ac5-511c-4d94-b6e1-2009ed260d2c",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "After looking at this more and more carefully, I have concluded as follows:\r\n\r\nRenderEditable's computeMinIntrinsicHeight was wrong. It should have been doing the same as computeMaxIntrinsicHeight (the method above). This is because it used to return that its minimum height was one line, but that's bogus since the object tries to be maxLines high and clips if it is less than that, and the docs say the min intrinsic height should be the height without clipping.\r\n\r\nRenderEditable's max intrinsic height is correct. It makes sense that it's at this level because this is some weird behaviour that TextPainter and RenderParagraph don't have or want.",
        "createdAt" : "2017-06-08T18:08:57Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "717065fbbb1d6824b647ff9b3581bc977b21609d",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +384,388 @@      int lines = 1;\n      for (int index = 0; index < text.length; index += 1) {\n        if (text.codeUnitAt(index) == 0x0A) // count explicit line breaks\n          lines += 1;\n      }"
  },
  {
    "id" : "a59bc1f3-76ba-4378-9ec5-0a4924d4e368",
    "prId" : 13250,
    "prUrl" : "https://github.com/flutter/flutter/pull/13250#pullrequestreview-80035696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "475d7304-8abd-465a-8b04-c16417f9ef18",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @HansMuller ",
        "createdAt" : "2017-11-29T23:38:32Z",
        "updatedAt" : "2017-11-29T23:38:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "24a043bc03c5480f7085a83923b9a0aa011c7182",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +128,132 @@       _hasFocus = hasFocus ?? false,\n       _maxLines = maxLines,\n       _selectionColor = selectionColor,\n       _selection = selection,\n       _offset = offset {"
  },
  {
    "id" : "ec71084f-b82c-460f-9494-84c964b9ccbe",
    "prId" : 13338,
    "prUrl" : "https://github.com/flutter/flutter/pull/13338#pullrequestreview-81292901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e9f48a-0222-4bc7-9461-ed359304d947",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We should add here that \"the keyboard\" could include the IME or the accessibility UI.",
        "createdAt" : "2017-12-04T22:03:39Z",
        "updatedAt" : "2017-12-05T18:43:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8006f7ce-e112-4869-b2a5-e1a108755ac0",
        "parentId" : "71e9f48a-0222-4bc7-9461-ed359304d947",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done.",
        "createdAt" : "2017-12-05T18:43:53Z",
        "updatedAt" : "2017-12-05T18:43:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "06ab04c5cd429adb25da8be93d1f7eaf029a3087",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +37,41 @@\n  /// The user used the keyboard to change the selection or the location of the\n  /// cursor.\n  ///\n  /// Keyboard-triggered selection changes may be caused by the IME as well as"
  },
  {
    "id" : "328707c7-faa9-4471-861f-46c75efa9494",
    "prId" : 14055,
    "prUrl" : "https://github.com/flutter/flutter/pull/14055#pullrequestreview-88642783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b629a721-96c7-4dad-a6a9-c8965109d716",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i'm pretty sure we can simplify this by removing _longPressPosition and never setting _lastTapDownPosition to null. It doesn't seem we really depend on any of this.",
        "createdAt" : "2018-01-12T23:17:04Z",
        "updatedAt" : "2018-01-13T01:12:05Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "afe61354-efe3-4a92-856d-da5f212e1bb3",
        "parentId" : "b629a721-96c7-4dad-a6a9-c8965109d716",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That sounds reasonable; I will submit a separate patch for that.",
        "createdAt" : "2018-01-13T01:13:53Z",
        "updatedAt" : "2018-01-13T01:13:53Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "42560449075d1ce6a7b9945cb117afc16f62a6bc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +570,574 @@\n  Offset _lastTapDownPosition;\n  Offset _longPressPosition;\n  void handleTapDown(TapDownDetails details) {\n    _lastTapDownPosition = details.globalPosition + -_paintOffset;"
  },
  {
    "id" : "bd82f3fc-287f-41c9-9469-a7027f124c82",
    "prId" : 19949,
    "prUrl" : "https://github.com/flutter/flutter/pull/19949#pullrequestreview-146907463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aeaf59f-f1c4-4030-94e8-eb5549b5d15a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "is this missing a return statement if offset drops below 0?",
        "createdAt" : "2018-08-14T18:42:03Z",
        "updatedAt" : "2018-08-16T15:45:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "476b7ef4-1bf5-4400-b1e9-3ea7bd4826c4",
        "parentId" : "9aeaf59f-f1c4-4030-94e8-eb5549b5d15a",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-08-16T15:46:37Z",
        "updatedAt" : "2018-08-16T15:46:37Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6b8027c1851bfab3b6b6f02bd86b9db6fabf89",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +516,520 @@        return range;\n      offset = range.start - 1;\n    }\n    return null;\n  }"
  },
  {
    "id" : "d8a099ee-0bf3-4802-99e2-8ed916db5374",
    "prId" : 19949,
    "prUrl" : "https://github.com/flutter/flutter/pull/19949#pullrequestreview-146907506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "160cd9df-0afc-49b8-9bb7-a2832d0bb610",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Could you link to where this list is coming from in case we need to update it?",
        "createdAt" : "2018-08-14T18:44:00Z",
        "updatedAt" : "2018-08-16T15:45:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "db672e9d-d727-47d8-8798-14bb21b5fbfa",
        "parentId" : "160cd9df-0afc-49b8-9bb7-a2832d0bb610",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-08-16T15:46:41Z",
        "updatedAt" : "2018-08-16T15:46:41Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6b8027c1851bfab3b6b6f02bd86b9db6fabf89",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +530,534 @@      final int codeUnit = text.codeUnitAt(i);\n      switch (codeUnit) {\n        case 0x9: // horizontal tab\n        case 0xA: // line feed\n        case 0xB: // vertical tab"
  },
  {
    "id" : "491de916-7341-4ef4-b226-7cad1e64ae51",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we probably need to make sure that left arrow means +1 and right arrow means -1 in TextDirection.rtl text fields.",
        "createdAt" : "2018-08-21T20:51:46Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7eb35ce2-deee-450a-80e1-90ebfde91ab1",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Wait, do I need to take into account rtl text fields? I think it would be easiest to just remap left as right and vice versa.",
        "createdAt" : "2018-08-21T22:14:06Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "7730bd0b-2203-45cc-b2b4-f822b83e3e7e",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Looks like left and right actually give the correct output even with textdirection.rtl enabled.",
        "createdAt" : "2018-08-21T23:30:36Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "5971c489-79f6-47e9-b7e2-4b50d7d130fc",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "make sure you test with actual hebrew text, otherwise the text is still left to right even though the field is right to left.",
        "createdAt" : "2018-08-22T00:12:06Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "70fb7200-3054-426d-82fb-f6e68ad1144c",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(maybe also check what android fields do here. maybe left always means \"forward\" even in RTL?)",
        "createdAt" : "2018-08-22T00:12:30Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "05128cd5-6f58-4ed2-960f-6e75300492d6",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "That seems to be the case.",
        "createdAt" : "2018-08-22T00:13:27Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "183d3a6a-e031-454b-9f20-6b58b4e96b4e",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "surprising, but makes life easier for us i guess",
        "createdAt" : "2018-08-23T23:59:31Z",
        "updatedAt" : "2018-08-23T23:59:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +293,297 @@        _previousCursorLocation -= 1;\n    }\n    return newOffset;\n  }\n"
  },
  {
    "id" : "e2169eaf-a76c-4929-b4f4-08bc379db59e",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e732fc1-2b68-4bdc-a1d6-463a828cc1c2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "he select -> they select",
        "createdAt" : "2018-08-23T23:58:42Z",
        "updatedAt" : "2018-08-23T23:58:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +210,214 @@  int _baseOffset = -1;\n\n  // Holds the last location the user selected in the case that he selects all\n  // the way to the end or beginning of the field.\n  int _previousCursorLocation = -1;"
  },
  {
    "id" : "cfd44df3-3b67-441b-97f9-58483c1ce4a7",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1550190e-5b70-4f38-9a02-09032daf74a9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto",
        "createdAt" : "2018-08-23T23:58:57Z",
        "updatedAt" : "2018-08-23T23:58:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +252,256 @@      int newOffset = _extentOffset;\n\n      // Because the user can use multiple keys to change how he selects\n      // the new offset variable is threaded through these four functions\n      // and potentially changes after each one."
  },
  {
    "id" : "e57dd6fc-51b3-4068-bec9-b92cdaf1b5d5",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Not sure why this is necessary from reading this. Is it not used for non-floating cursor?",
        "createdAt" : "2018-11-28T08:24:39Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "547c6001-acfc-460c-ab08-1b97033ece4a",
        "parentId" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "So on iOS, the floating cursor can be rendered right up the edge of the text field on the top and bottom, and half way to the edge on the right and left. This is not used for a non floating cursor. I'd by happy to show you where it takes function tomorrow!",
        "createdAt" : "2018-11-28T23:58:33Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "d87a74d4-22dd-4f20-a1e3-f2dbdc06c3ca",
        "parentId" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I see now. Maybe it's just a name tweak. Maybe floatingCursorAddedMargin or floatingCursorRectExpansion or some such.",
        "createdAt" : "2018-12-10T22:27:16Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +727,731 @@\n  /// The padding applied to text field. Used to determine the bounds when\n  /// moving the floating cursor.\n  ///\n  /// Defaults to a padding with left, right set to 3 and top, bottom to 6."
  },
  {
    "id" : "8e0646cf-16ae-4f27-8c1d-039b0dab8779",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "assert the state",
        "createdAt" : "2018-11-28T08:36:28Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "0a83c377-6643-412e-af23-0ab8dae9e4d0",
        "parentId" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "not sure what state you mean?",
        "createdAt" : "2018-11-29T01:58:12Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "71fd4a53-6068-44ce-8b18-1457419d74f9",
        "parentId" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah right. Perhaps check _floatingCursorOn then. In general, the more instance variables there are that needs manual resetting, better it is to assert all assumptions and make things fail as early as possible if things aren't in the right state.",
        "createdAt" : "2018-12-11T07:09:25Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +1295,1299 @@\n  void _paintFloatingCaret(Canvas canvas, Offset effectiveOffset) {\n    assert(_textLayoutLastWidth == constraints.maxWidth);\n    assert(_floatingCursorOn);\n"
  },
  {
    "id" : "305100f8-dfbd-4dc5-a6fe-e1b45493e798",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-179172913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f96a59fe-0a75-4d95-9553-55d21ec34690",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Couldn't figure out what these are from reading the names. Make the names more descriptive or add comments. Also be weary of making the names too generic if they're floating cursor specific. ",
        "createdAt" : "2018-11-28T08:38:33Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +1321,1325 @@  // dragged the floating cursor offscreen. This value is used to account for the\n  // difference in the rendering position and the raw offset value.\n  Offset _relativeOrigin = const Offset(0, 0);\n  Offset _previousOffset;\n  bool _resetOriginOnLeft = false;"
  },
  {
    "id" : "f0136c66-d250-40cb-80bf-0e361a521706",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-179447432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8ee781a-861b-48d2-ba2b-ad4fb115776d",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Check the behavior on Android. This whole thing might be wrong altogether. In which case, let's just move this to after painting the text. ",
        "createdAt" : "2018-11-28T08:39:45Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "81c61791-27d0-42d6-b856-0cd6d2a02eaf",
        "parentId" : "e8ee781a-861b-48d2-ba2b-ad4fb115776d",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "What do you mean by testing this on Android? Android doesn't have any devices with pressure detecting screens so this conditional will always be true if selection isn't null.",
        "createdAt" : "2018-11-28T18:23:32Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 236,
    "diffHunk" : "@@ -1,1 +1389,1393 @@    final Offset effectiveOffset = offset + _paintOffset;\n    if (_selection != null && !_floatingCursorOn) {\n      if (_selection.isCollapsed && _showCursor.value && cursorColor != null) {\n        _paintCaret(context.canvas, effectiveOffset, _selection.extent);\n      } else if (!_selection.isCollapsed && _selectionColor != null) {"
  },
  {
    "id" : "9dde2705-0017-4be6-b08c-d56d2a213c9d",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190469062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5842a40b-dcf0-47b9-8545-037e2c36f41b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "check null",
        "createdAt" : "2019-01-08T22:28:50Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +152,156 @@    bool paintCursorAboveText = false,\n    Offset cursorOffset,\n    double devicePixelRatio = 1.0,\n    bool enableInteractiveSelection,\n    EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5),"
  },
  {
    "id" : "16f2c369-cf3c-4ac8-a74d-5e7c89e2f69b",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dd8f57f-6668-4d63-9469-79115748646a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Generally, everything in a render object that can be set in a constructor also needs a setter",
        "createdAt" : "2019-01-08T23:18:11Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +221,225 @@  /// Should be obtained by querying MediaQuery for the devicePixelRatio.\n  double get devicePixelRatio => _devicePixelRatio;\n  double _devicePixelRatio;\n  set devicePixelRatio(double value) {\n    if (devicePixelRatio == value)"
  },
  {
    "id" : "3b51fd66-5ff0-43ef-853d-c27f61003d6b",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-196768048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4eabd20-6cac-478d-9a49-77a2cceaf13a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "these divisions are a bit hard to read. Why not just\r\n\r\n```dart\r\nfinal Offset logicalCaretPosition = localToGlobal(caretRect.topLeft);\r\nfinal int physicalCaretX = (caretPosition.dx * _devicePixelRatio).round();\r\nfinal int physicalCaretY = (caretPosition.dy * _devicePixelRatio).round();\r\nfinal double pixelPerfectLogicalX = globalToLocal(physicalCaretX / _devicePixelRatio); // I'm not sure what the - caretPosition.dx was for\r\nfinal double pixelPerfectLogicalY = globalToLocal(physicalCaretY / _devicePixelRatio);\r\n```\r\n\r\nOtherwise, aliasing around the edge seems like 'working as intended'. Just have your test not land on .499999999-.5.",
        "createdAt" : "2019-01-25T03:16:16Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "9ef04970-4bca-464f-96cc-7c7583d72d50",
        "parentId" : "e4eabd20-6cac-478d-9a49-77a2cceaf13a",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "I think I'm just going to leave this logic as is? It's supposed to give the delta logical pixels to move the rect to be physically pixel perfectly aligned. So that logic isn't really going to work.",
        "createdAt" : "2019-01-26T01:24:37Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +1354,1358 @@  Offset _getPixelPerfectCursorOffset(Rect caretRect) {\n    final Offset caretPosition = localToGlobal(caretRect.topLeft);\n    final double pixelMultiple = 1.0 / _devicePixelRatio;\n    final int quotientX = (caretPosition.dx / pixelMultiple).round();\n    final int quotientY = (caretPosition.dy / pixelMultiple).round();"
  },
  {
    "id" : "696b82f7-1c7b-4558-8e4a-474c39caba92",
    "prId" : 25055,
    "prUrl" : "https://github.com/flutter/flutter/pull/25055#pullrequestreview-187184061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf9fb2c-b75f-4e8a-924d-d07c7577ccde",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We should probably `assert(cursorWidth != null && cursorWidth >= 0.0)` in the RenderEditable constructor. There are many other places in the code that appear to make this assumption.  Not sure if cursorWidth == 0.0 really works; if not assert that it's > 0.0.\r\n\r\n",
        "createdAt" : "2018-12-11T17:18:29Z",
        "updatedAt" : "2018-12-20T21:10:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "6688d8e7-5a0b-498f-abcd-c03220e002d6",
        "parentId" : "cbf9fb2c-b75f-4e8a-924d-d07c7577ccde",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It looks like cursorWidth 0.0 works and results in not showing the cursor at all, so I'm using `>=` in the assertion.",
        "createdAt" : "2018-12-20T21:05:11Z",
        "updatedAt" : "2018-12-20T21:10:18Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f05a619fef17fb84740485ac9aebe0c69a11c8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1062,1066 @@  double computeMaxIntrinsicWidth(double height) {\n    _layoutText(double.infinity);\n    return _textPainter.maxIntrinsicWidth + cursorWidth;\n  }\n"
  },
  {
    "id" : "c42b96f5-d605-47bf-94e5-a727df44e04c",
    "prId" : 27205,
    "prUrl" : "https://github.com/flutter/flutter/pull/27205#pullrequestreview-208664605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Based on the name of the previous variable, this would be ` minLines != null && maxLines != null`",
        "createdAt" : "2019-02-12T20:49:29Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ede01d02-453b-4f5c-ad12-059a025a9a65",
        "parentId" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think the logic is the same, so:\r\n\r\n    final bool lockedBoth = minLines != null && minLines == maxLines;\r\n    // is the same as:\r\n    final bool lockedBoth = minLines != null && maxLines !== null && minLines == maxLines;\r\n\r\nI want to exclude cases like `minLines: 2, maxLines: 4`, where it will grow and not be locked.\r\n\r\nLet me know if I'm misunderstanding your comment.",
        "createdAt" : "2019-02-26T23:42:38Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "afff374b-e2c1-4fe7-99c9-b5f02326433e",
        "parentId" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "What I was getting it is that the meaning of LockedBoth, based on the pattern established by lockedMax, seems like it would only mean that both minLines and maxLines != null.  No big deal though, it's easy enough to see what you mean!",
        "createdAt" : "2019-02-27T17:54:31Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "56d0a1b6d0ab5598c651c73c6dc67d49c731d25f",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1190,1194 @@    // Lock height to maxLines if needed\n    final bool lockedMax = maxLines != null && minLines == null;\n    final bool lockedBoth = minLines != null && minLines == maxLines;\n    final bool singleLine = maxLines == 1;\n    if (singleLine || lockedMax || lockedBoth) {"
  },
  {
    "id" : "686af4d0-3261-41da-826c-6e2abb5287b0",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-206658300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3838c55b-fcd5-4ddd-8b74-59b90e976339",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Since \"from\" is required, is from = null ok? If not, assert?",
        "createdAt" : "2019-02-21T21:12:21Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f3c7b1e7-eaf7-4adf-8076-bd6aaf848334",
        "parentId" : "3838c55b-fcd5-4ddd-8b74-59b90e976339",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Thanks. Added here and below.",
        "createdAt" : "2019-02-22T04:57:21Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1253,1257 @@  /// Select text between the global positions [from] and [to].\n  void selectPositionAt({ @required Offset from, Offset to, @required SelectionChangedCause cause }) {\n    assert(cause != null);\n    assert(from != null);\n    _layoutText(constraints.maxWidth);"
  },
  {
    "id" : "c66735ff-fa67-4592-817e-7ed535de5dfd",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-206670463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Was the missing `-_paintOffset` a bug we had in the old impl? Can you add a test for this?",
        "createdAt" : "2019-02-21T21:14:10Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8709bc85-b15e-4eb0-994f-2a3789772be4",
        "parentId" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It was moved from the tap down above.",
        "createdAt" : "2019-02-22T05:01:55Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "48865b6a-7031-4c11-bf6c-42c6f1cc9113",
        "parentId" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Added more tests and also fixed one related test in the material text_field_test that was asserting the wrong thing.",
        "createdAt" : "2019-02-22T06:14:41Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1257,1261 @@    _layoutText(constraints.maxWidth);\n    if (onSelectionChanged != null) {\n      final TextPosition fromPosition = _textPainter.getPositionForOffset(globalToLocal(from - _paintOffset));\n      final TextPosition toPosition = to == null\n        ? null"
  },
  {
    "id" : "bb627480-ea3e-48b3-8319-5f4caaccd1b1",
    "prId" : 29395,
    "prUrl" : "https://github.com/flutter/flutter/pull/29395#pullrequestreview-215178922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'm assuming the cursor positioning does not need adjustment?",
        "createdAt" : "2019-03-14T23:26:14Z",
        "updatedAt" : "2019-03-14T23:26:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "3f528b5a-f3cf-4f79-8aa0-3ea28cbe23eb",
        "parentId" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "`baseOffset` and `extendOffset` represent the cursor (or the selection) state. When `baseOffset === extentOffset`, the cursor is displayed at that position. When they are different, then they represent a range selection and Flutter will draw a selection box instead.\r\n\r\nDoes that answer your question?",
        "createdAt" : "2019-03-15T05:13:07Z",
        "updatedAt" : "2019-03-15T05:13:07Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "2d768dd7-b985-457c-880e-aae06b7f0cfa",
        "parentId" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "From offline discussion. Editables do remember the position of the cursor even if it's not rendered. So if you Shift + Arrow to shrink or extend the selection it will move the side corresponding to the \"extent\". It's OK if we don't support it now, but we should track it somewhere. So maybe file an issue, and ping @gspencergoog so it doesn't get lost.",
        "createdAt" : "2019-03-15T18:05:15Z",
        "updatedAt" : "2019-03-15T18:05:15Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd065291f741ed0e250bd425a4701c10afe8608",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1327,1331 @@        baseOffset = math.min(fromPosition.offset, toPosition.offset);\n        extentOffset = math.max(fromPosition.offset, toPosition.offset);\n      }\n\n      onSelectionChanged("
  },
  {
    "id" : "96ef45a3-7866-4c88-8995-1ffdbe5eb9b5",
    "prId" : 31687,
    "prUrl" : "https://github.com/flutter/flutter/pull/31687#pullrequestreview-231402715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7395407d-ffc4-4da2-8660-08ed4e1cfe3b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Just for sake of the PR title, if you're changing iOS and non-iOS behavior, remove the iOS part from the description (if I understood correctly)",
        "createdAt" : "2019-04-27T00:26:55Z",
        "updatedAt" : "2019-04-30T19:59:32Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "765a081d-fa55-43b2-8bbf-45af4e9a290f",
        "parentId" : "7395407d-ffc4-4da2-8660-08ed4e1cfe3b",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "There was a value that is added here and then subtracted later, this just removes the redundant math for android",
        "createdAt" : "2019-04-27T01:13:09Z",
        "updatedAt" : "2019-04-30T19:59:32Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "25fc3e0e5ffc5671ec32eb54ea13d0cadd829573",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1504,1508 @@        return Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight + 2);\n      default:\n        return Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight - 2.0 * _kCaretHeightOffset);\n    }\n  }"
  },
  {
    "id" : "2241b8a9-6d5c-4b25-a82c-60860406cd12",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-242757160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Since this is only used for testing, it might be better to keep this logic in the test.",
        "createdAt" : "2019-05-22T19:54:37Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "923037c0-c2cc-45af-aa7a-24001f959fab",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I have tried to do the comparison directly in test but was advised to put it here. How would you move it to test? ",
        "createdAt" : "2019-05-23T17:05:22Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "393dae58-47b7-4389-81f5-0d6799dd899b",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "In the test you have\r\n\r\n```dart\r\nexpect(renderEditable.isComposingText, false);\r\n```\r\n\r\nSo that would become:\r\n\r\n```dart\r\nexpect(renderEditable.text.text == null, false);\r\n```\r\n\r\nOr you could definitely move the whole separate method to the test file.\r\n\r\nIf someone else told you to move it here then it's probably fine though, I'm not sure what their reason was.  It just jumped out at me as something that didn't need to be exposed here.",
        "createdAt" : "2019-05-23T17:18:32Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cbe485e9-af62-4533-84f2-e3a97f9bb0ca",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I think renderEditable.text.text is testing based on implementation, if someone change the composing implementation, the will need to update the test.\r\nIf we expose isComposingText, the test will be purely testing the behavior. If someone change the implementation, they will need to update isComposingText method instead of touching test.\r\n\r\nIn this case, I am more toward exposing isComposingText, but I do get we should avoid exposing method for test only.",
        "createdAt" : "2019-05-23T17:52:19Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "04d9394c-5425-4c5c-907c-6aef7acb706a",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That makes sense to me :+1: ",
        "createdAt" : "2019-05-28T15:41:32Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +242,246 @@  ///\n  /// Text is composed when user selects it for editing. The [TextSpan] will have\n  /// children with composing effect and leave text property to be null.\n  @visibleForTesting\n  bool get isComposingText => text.text == null;"
  },
  {
    "id" : "c5a4e4b6-9a4a-4e11-9a4f-664aab15f3bb",
    "prId" : 32256,
    "prUrl" : "https://github.com/flutter/flutter/pull/32256#pullrequestreview-234767305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b406836-a24f-4abc-b6cf-688cc46bafe3",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If the textSpan has children instead of text, we need to use this function to get the string.\r\nThis can happen when textEditingValue has composing range.",
        "createdAt" : "2019-05-07T20:14:40Z",
        "updatedAt" : "2019-05-07T20:14:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f8a5ead2-cad5-4040-acb4-f7f8d7516bf6",
        "parentId" : "1b406836-a24f-4abc-b6cf-688cc46bafe3",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Sounds good. It looks like `toPlainText` is how we get the length in the rest of the file.",
        "createdAt" : "2019-05-07T21:19:28Z",
        "updatedAt" : "2019-05-07T21:19:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d564042a726aba51ac4a82c9f99122058e191ff",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +429,433 @@    // Set the new offset to be +/- 1 depending on which arrow is pressed\n    // If shift is down, we also want to update the previous cursor location\n    if (rightArrow && _extentOffset < text.toPlainText().length) {\n      newOffset += 1;\n      if (shift)"
  },
  {
    "id" : "446be49d-5789-4764-8cdd-a5112cc84cec",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-248855540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34ac92cf-1234-4ebf-aecf-ca2a0923e234",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It looks like the definition of `forceLine` says that is can't be null either, so should you add an assert for that too?",
        "createdAt" : "2019-06-12T15:53:47Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +194,198 @@       assert(textSelectionDelegate != null),\n       assert(cursorWidth != null && cursorWidth >= 0.0),\n       assert(readOnly != null),\n       assert(forceLine != null),\n       assert(devicePixelRatio != null),"
  },
  {
    "id" : "12f956dd-dea6-4bcc-aa06-5f19d7e52eac",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-250609301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2c446f-f7dc-4812-9cfb-f15215cb6b1c",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Instead of doing `this.forceLine = forceLine` below, could you change this line to `this.forceLine = true`?  Same with `readOnly`.\r\n\r\nI could be wrong, I always mix up this syntax with Dart.",
        "createdAt" : "2019-06-12T15:56:58Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "7c93f4d4-873b-4e85-a401-ded3fff7a050",
        "parentId" : "cf2c446f-f7dc-4812-9cfb-f15215cb6b1c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "forceLine is a setter, it complain about it cannot find the declaration of forceLine if i do it this way. I think for setter you can only initialize it in the constructor body?",
        "createdAt" : "2019-06-17T16:35:10Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +159,163 @@    this.ignorePointer = false,\n    bool readOnly = false,\n    bool forceLine = true,\n    TextWidthBasis textWidthBasis = TextWidthBasis.parent,\n    bool obscureText = false,"
  },
  {
    "id" : "2c8e52a4-664c-4057-8c06-70c4863de5c7",
    "prId" : 34676,
    "prUrl" : "https://github.com/flutter/flutter/pull/34676#pullrequestreview-260315387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43816535-540c-4315-9059-fe37512d297c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is this the right way to get the full length of the text? @GaryQian may know.",
        "createdAt" : "2019-06-19T21:43:37Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1dbb8913-315f-4d5e-a5ac-ec2be25f56ec",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Generally, this will indeed produce the length of the text content of the `text` object. However, to properly and explicitly handle things like PlaceholderSpan/WidgetSpans, you may have to look deeper.\r\n\r\ntoPlainText will return the concatenated contents for TextSpan. When encountering PlaceholderSpans, the placeholder span will be ignored unless includePlaceholders is true, in which case a 0xFFFC character of length 1 will be included. Whether or not you want this replacement character is a policy choice. In addition, if another text widget is nested using a WidgetSpan, the length of the nested contents will not be included.",
        "createdAt" : "2019-07-01T22:33:42Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "165688ea-2ccd-45af-9374-cd99201872fb",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "This looks like it is for obscuring text in a password like environment, which I expect would not be using PlaceholderSpans. It is hard to say what developers would expect if one were to, say, embed all of flutter gallery inline within a password field. How many character lengths is a gallery equivalent to?\r\n\r\nJust setting the includePlaceholders flag to true seems to me like a reasonable compromise, where all placeholders/inline widgets will be represented as one character.",
        "createdAt" : "2019-07-01T22:37:12Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "32d21bf8-b03b-43ff-beba-c44bfb8c32b4",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "the includePlaceholders is defaulted to true. As of now, there is no way to use any other inlinespan other than textspan in RenderEditable. There is no plan to add it in until we figure out how do we serialize them. We only need to worry about text span for now.\r\n\r\nEdit, I was wrong, user can do anything if they use RenderEditable directly... but still we don't know how should we deal with non textspan. I believe let includePlaceholders defaults to true will be good enough.",
        "createdAt" : "2019-07-10T19:43:02Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "658008270c11d9c59d670c0ea185e6ae3908f2e6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1557,1561 @@    // If text is obscured, the entire sentence should be treated as one word.\n    if (obscureText) {\n      return TextSelection(baseOffset: 0, extentOffset: text.toPlainText().length);\n    }\n    return TextSelection(baseOffset: word.start, extentOffset: word.end);"
  },
  {
    "id" : "ee6e7bb5-0d98-4255-b432-e2a6dcf8b27e",
    "prId" : 38930,
    "prUrl" : "https://github.com/flutter/flutter/pull/38930#pullrequestreview-288872087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5084c613-a151-412a-8cab-753de684fd46",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I am not sure how do we test _textPainter has been marked needs layout. this also apply to all the other widget.\r\nThe current test only verify renderobject is dirty after font change. unless I added a bunch of visibleforTesting for all the widgets that have textpainter",
        "createdAt" : "2019-09-16T20:12:16Z",
        "updatedAt" : "2019-09-24T16:42:06Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "75e1926c01e4512e6b3a7a81ca90c92ccd87cbae",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +638,642 @@  void systemFontsDidChange() {\n    super.systemFontsDidChange();\n    _textPainter.markNeedsLayout();\n    _textLayoutLastMaxWidth = null;\n    _textLayoutLastMinWidth = null;"
  },
  {
    "id" : "36efd0c7-c8f1-4536-becf-41133a1e8043",
    "prId" : 42879,
    "prUrl" : "https://github.com/flutter/flutter/pull/42879#pullrequestreview-303537138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Why do all of these checks if onSelectionChanged exist here instead of one check inside of _handleSelectionChanged?",
        "createdAt" : "2019-10-17T15:08:01Z",
        "updatedAt" : "2019-10-17T21:27:56Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "844064cb-06fc-4921-ac86-878a7174c626",
        "parentId" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I think the idea was to avoid doing the work needed to get to `_handleSelectionChanged`, but I think I'll move this up to _handleKeyEvent, and also a check in `_handleSelectionChanged`, since there are other call sites for it that aren't protected.",
        "createdAt" : "2019-10-17T18:26:41Z",
        "updatedAt" : "2019-10-17T21:27:56Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "e03a737b-8949-4fa7-a6fb-5e779082d21e",
        "parentId" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Sounds good.",
        "createdAt" : "2019-10-17T20:49:01Z",
        "updatedAt" : "2019-10-17T21:27:57Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c148549c5256cee072092354184543ac03e6a6",
    "line" : 574,
    "diffHunk" : "@@ -1,1 +1497,1501 @@    assert(from != null);\n    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);\n    if (onSelectionChanged == null) {\n      return;\n    }"
  },
  {
    "id" : "f9ad8624-59b7-412e-8b8a-3e5d67747ce2",
    "prId" : 44130,
    "prUrl" : "https://github.com/flutter/flutter/pull/44130#pullrequestreview-312630647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "491003bc-11c3-47d8-a5ff-dbae99189899",
        "parentId" : null,
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Should Alt be here as well? Alt+arrow skips word by word",
        "createdAt" : "2019-11-06T17:57:19Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2902c76e0d79bcdaf6422d5c65dbdaa5a079ca24",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +447,451 @@  static final Set<LogicalKeyboardKey> _macOsModifierKeys = <LogicalKeyboardKey>{\n    LogicalKeyboardKey.shift,\n    LogicalKeyboardKey.meta,\n    LogicalKeyboardKey.alt,\n  };"
  },
  {
    "id" : "d08c7562-bfa9-43d4-8cff-479a02be2bcb",
    "prId" : 44130,
    "prUrl" : "https://github.com/flutter/flutter/pull/44130#pullrequestreview-312630647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "751bff49-06df-4d7c-b994-6870857d6476",
        "parentId" : null,
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Should Alt be here too? Alt + arrow skips word by word",
        "createdAt" : "2019-11-06T17:57:20Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2902c76e0d79bcdaf6422d5c65dbdaa5a079ca24",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +447,451 @@  static final Set<LogicalKeyboardKey> _macOsModifierKeys = <LogicalKeyboardKey>{\n    LogicalKeyboardKey.shift,\n    LogicalKeyboardKey.meta,\n    LogicalKeyboardKey.alt,\n  };"
  },
  {
    "id" : "68b912a1-1ac0-4e84-aef4-d3cf1e8dbfdf",
    "prId" : 44622,
    "prUrl" : "https://github.com/flutter/flutter/pull/44622#pullrequestreview-320201681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6508e255-668a-4705-9558-5e16a20d8183",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Assert that `affinity` isn't null.",
        "createdAt" : "2019-11-20T19:03:41Z",
        "updatedAt" : "2019-11-20T20:53:15Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "64380976ea5ec21fe1c1517b4c3eff4cd7b6bca1",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +430,434 @@  ) {\n    assert(affinity != null);\n    // Engine-computed selections will always compute affinity when necessary.\n    // Cache this affinity in the case where the platform supplied selection\n    // does not provide an affinity."
  },
  {
    "id" : "9575e4e3-f806-4851-bd05-15914c0ce2cc",
    "prId" : 45354,
    "prUrl" : "https://github.com/flutter/flutter/pull/45354#pullrequestreview-327152474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4309564b-c3d2-4774-ba59-04cd5b654941",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Should note that this property only impacts non-web iOS applications. Likewise for promptRectRange. \r\n\r\nShould also note that setting promptRectColor to null indicates that the promptRect shouldn't be drawn at all. There should be tests that cover this\r\n\r\n",
        "createdAt" : "2019-12-04T21:05:01Z",
        "updatedAt" : "2019-12-17T06:32:12Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "495233d442afeab90178a337c17f03cba41e976b",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1122,1126 @@  ///\n  /// The prompt rectangle will only be requested on non-web iOS applications.\n  Color get promptRectColor => _promptRectPaint.color;\n  set promptRectColor(Color newValue) {\n    // Painter.color can not be null."
  },
  {
    "id" : "9704c178-ad9e-4e23-a1a8-097110687308",
    "prId" : 46720,
    "prUrl" : "https://github.com/flutter/flutter/pull/46720#pullrequestreview-331596385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81f96bc5-f48f-41c8-8087-79f70767c4d2",
        "parentId" : null,
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "This particular usage does not care what is passed in for the caretPrototype parameter. We pass in the _caretPrototype to stay consistent with the other calls of this and not mess up the cached values, avoiding redundant re-computation.",
        "createdAt" : "2019-12-12T23:48:33Z",
        "updatedAt" : "2019-12-19T01:07:39Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "239a1049a5ea3b2d63f5345790ca61854972327b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +366,370 @@    final Offset startOffset = _textPainter.getOffsetForCaret(\n      TextPosition(offset: _selection.start, affinity: _selection.affinity),\n      _caretPrototype,\n    );\n    // TODO(justinmc): https://github.com/flutter/flutter/issues/31495"
  },
  {
    "id" : "f9c6321c-ee32-4170-9445-d33f2e5865d2",
    "prId" : 53381,
    "prUrl" : "https://github.com/flutter/flutter/pull/53381#pullrequestreview-433481164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca627339-aead-4e4d-b2eb-83b1c7c3533a",
        "parentId" : null,
        "authorId" : "745c4389-71f2-443b-b9cb-ec618bd18b1a",
        "body" : "That line is equivalent to:\r\n```dart \r\n   return _isWhitespace(currentString.codeUnitAt(0));\r\n```",
        "createdAt" : "2020-06-17T15:06:38Z",
        "updatedAt" : "2020-06-17T15:06:39Z",
        "lastEditedBy" : "745c4389-71f2-443b-b9cb-ec618bd18b1a",
        "tags" : [
        ]
      },
      {
        "id" : "80bfa208-127d-4731-8da0-e12d246e0fb3",
        "parentId" : "ca627339-aead-4e4d-b2eb-83b1c7c3533a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah thanks, good call!",
        "createdAt" : "2020-06-18T16:56:25Z",
        "updatedAt" : "2020-06-18T16:56:26Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "a4b28566-6181-4134-b6ed-7b4699cd3782",
        "parentId" : "ca627339-aead-4e4d-b2eb-83b1c7c3533a",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This will be fixed when I reland this PR in https://github.com/flutter/flutter/pull/59778.",
        "createdAt" : "2020-06-18T17:04:42Z",
        "updatedAt" : "2020-06-18T17:04:42Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3cdde2210c01abe721ddb4f339e5b2be01b27c3",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +570,574 @@        return false;\n      }\n      return _isWhitespace(currentString.characters.first.toString().codeUnitAt(0));\n    });\n    return string.length - remaining.toString().length;"
  },
  {
    "id" : "308c1ced-1df8-4f1b-a831-1f77c93a8f92",
    "prId" : 55246,
    "prUrl" : "https://github.com/flutter/flutter/pull/55246#pullrequestreview-398433164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e1847b-ba46-4b2e-9447-043e5cbd16e0",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "You can use comment `//` here.",
        "createdAt" : "2020-04-22T17:06:50Z",
        "updatedAt" : "2020-04-22T17:14:04Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "3a3c75d9-03db-4148-bc54-c3e758d750ea",
        "parentId" : "d0e1847b-ba46-4b2e-9447-043e5cbd16e0",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "What is the disadvantage to using doc comments for private methods? (Dart style soft-recommends this practice; I know we don't necessarily follow Dart style, but unless there's a reason not to it seems odd.)",
        "createdAt" : "2020-04-22T17:24:29Z",
        "updatedAt" : "2020-04-22T17:24:29Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "308e4e30-a5ec-44ce-a15a-340a01d89af2",
        "parentId" : "d0e1847b-ba46-4b2e-9447-043e5cbd16e0",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I don't have strong preference. We general uses comment to describe private classes or properties (at least in `flutter/packages/flutter`).",
        "createdAt" : "2020-04-22T17:48:38Z",
        "updatedAt" : "2020-04-22T17:48:39Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1e992f33cdd9be32a2f5eb5e2f409236e770ae9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +139,143 @@}\n\n/// Returns true if [codeUnit] is a leading (high) surrogate for a surrogate\n/// pair.\nbool _isLeadingSurrogate(int codeUnit) {"
  },
  {
    "id" : "634c8202-7056-41df-a7a5-321a37f34c35",
    "prId" : 55246,
    "prUrl" : "https://github.com/flutter/flutter/pull/55246#pullrequestreview-398489670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "can you add a todo to indicate why the workaround and we should remove it when the character library is integrated?",
        "createdAt" : "2020-04-22T17:08:10Z",
        "updatedAt" : "2020-04-22T17:14:04Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "afc1d590-58b9-44e6-9e92-ba63871f2e1d",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "same for other place",
        "createdAt" : "2020-04-22T17:08:54Z",
        "updatedAt" : "2020-04-22T17:14:04Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "9a7f82a7-11d3-4e8e-a8b1-9dcc45f4de7d",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If i remember correctly, there are grapheme clusters that are more than two characters. for example 👨‍👩‍👦.  Are we going to handle them as well?",
        "createdAt" : "2020-04-22T17:12:21Z",
        "updatedAt" : "2020-04-22T17:14:04Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "b832f170-5230-4a8d-bcf7-f2a623a91b4f",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "> can you add a todo to indicate why the workaround\r\n\r\nIt's not a workaround. Preventing arrowing into, or deleting half of, a surrogate pair is correct handling of UTF-16.\r\n\r\n> If i remember correctly, there are grapheme clusters that are more than two characters. for example 👨‍👩‍👦. Are we going to handle them as well?\r\n\r\nNot in this PR; per the PR description:\r\n\r\n> This makes the arrow key and delete key handling surrogate-aware\r\n(although not grapheme-cluster-aware, which is a larger fix that is out\r\nof scope here).\r\n\r\nSee also my answer to the comments on the PR.\r\n\r\nBut breaking other grapheme cluster doesn't (AFAIK) give you invalid UTF-16 that can render the text field permanently unusable.",
        "createdAt" : "2020-04-22T17:27:53Z",
        "updatedAt" : "2020-04-22T17:27:53Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "24a0b1eb-46be-48a6-820c-7083f548483c",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : " > It's not a workaround. Preventing arrowing into, or deleting half of, a surrogate pair is correct handling of UTF-16.\r\n\r\nI disagree a little bit, isn't this going to be removed when this is refactored using the character library? Whether it is a workaround or not, we will want to refactor this part when the character library is ready. I think it will be good to add a todo to remind us that.\r\n\r\n> \r\n> But breaking other grapheme cluster doesn't (AFAIK) give you invalid UTF-16 that can render the text field permanently unusable.\r\n\r\nI see, that makes sense.\r\n\r\n",
        "createdAt" : "2020-04-22T17:55:56Z",
        "updatedAt" : "2020-04-22T17:56:07Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f25a8895-bae7-47b3-aadd-15cac594c03a",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "body" : "> > It's not a workaround. Preventing arrowing into, or deleting half of, a surrogate pair is correct handling of UTF-16.\r\n> \r\n> I disagree a little bit, isn't this going to be removed when this is refactored using the character library? Whether it is a workaround or not, we will want to refactor this part when the character library is ready. I think it will be good to add a todo to remind us that.\r\n\r\nThis PR has no impact on the fact that this code will change when the `characters` library is ready. Either with this change, or without this change, arrow key handling and delete handling currently don't handle arbitrary grapheme clusters correctly, and either way the code being touched here will be rewritten by a PR that uses `characters` to do grapheme handling (since that is the point of such a PR).\r\n\r\nI'm not clear on how making code that's going to be rewritten either way less wrong until it's rewritten is a workaround, and I'm not seeing the benefit of adding a todo reminding us to do something that a) already needed to be done anyway, and b) and already has, IIUC, a design doc, a bug, and an in-progress PR.",
        "createdAt" : "2020-04-22T18:09:30Z",
        "updatedAt" : "2020-04-22T18:09:30Z",
        "lastEditedBy" : "a37bcf63-7713-4b5b-8625-f91c635e284e",
        "tags" : [
        ]
      },
      {
        "id" : "1276fca7-74ef-4f4c-8949-168e13a1c1e7",
        "parentId" : "c8e9f86c-5374-4002-9c6f-514518154abe",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I see, I was over thinking it. The test will fail anyway if they forget to remove this part.",
        "createdAt" : "2020-04-22T19:01:40Z",
        "updatedAt" : "2020-04-22T19:01:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1e992f33cdd9be32a2f5eb5e2f409236e770ae9",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +610,614 @@      } else {\n        if (rightArrow && newSelection.extentOffset < _plainText.length) {\n          final int delta = _isLeadingSurrogate(text.codeUnitAt(newSelection.extentOffset)) ? 2 : 1;\n          newSelection = newSelection.copyWith(extentOffset: newSelection.extentOffset + delta);\n          if (shift) {"
  },
  {
    "id" : "81ab521a-e8f3-4149-805c-b964528f7f8e",
    "prId" : 55415,
    "prUrl" : "https://github.com/flutter/flutter/pull/55415#pullrequestreview-399508805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1bd5d82-6edf-4919-816e-b17d921e73cd",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The `markNeedsSemanticsUpdate()` is probably still needed. See:\r\nhttps://github.com/flutter/flutter/blob/987607a23138979deff4c51bd8f98f68e3b4525b/packages/flutter/lib/src/rendering/editable.dart#L1228-L1241",
        "createdAt" : "2020-04-23T21:51:20Z",
        "updatedAt" : "2020-04-23T21:51:21Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "5554160c-d728-4f7f-bff4-02a4849089e7",
        "parentId" : "b1bd5d82-6edf-4919-816e-b17d921e73cd",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "It will be done as part of the layout. See\r\nhttps://github.com/flutter/flutter/blob/f582246af659e8bcbba5588b19464ba1a119ffed/packages/flutter/lib/src/rendering/object.dart#L1631",
        "createdAt" : "2020-04-23T22:02:39Z",
        "updatedAt" : "2020-04-23T22:02:39Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "987607a23138979deff4c51bd8f98f68e3b4525b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +344,348 @@    assert(value != null && value.length == 1);\n    _obscuringCharacter = value;\n    markNeedsLayout();\n  }\n"
  },
  {
    "id" : "db122716-c602-4796-b36e-ff51c63962fc",
    "prId" : 55415,
    "prUrl" : "https://github.com/flutter/flutter/pull/55415#pullrequestreview-400150852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19d02ab2-af39-44f2-bd48-e371ac6262b5",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: is it necessary to impose the `length == 1` constraint in the render object? I thought only `EditableTextState` makes assumption about the length of the obscuring string. For example `obscuringCharacter = ''` seems to be a legit use case here in case someone wants to hide the length of the password.",
        "createdAt" : "2020-04-23T22:14:22Z",
        "updatedAt" : "2020-04-23T22:14:22Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "da95ac77-3846-43b7-a4ad-a8a5dc50dc7d",
        "parentId" : "19d02ab2-af39-44f2-bd48-e371ac6262b5",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I feel the empty character is a bit weird here. how would the selection or cursor work in this case?",
        "createdAt" : "2020-04-23T22:25:14Z",
        "updatedAt" : "2020-04-23T22:25:15Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f7f16462-d117-4c4d-aa22-cadf348a170f",
        "parentId" : "19d02ab2-af39-44f2-bd48-e371ac6262b5",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yeah then they would have to implement their own `TextInputClient` etc. ",
        "createdAt" : "2020-04-23T23:00:10Z",
        "updatedAt" : "2020-04-23T23:00:10Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "d1f01fd3-b45c-469a-a473-0dc821c48989",
        "parentId" : "19d02ab2-af39-44f2-bd48-e371ac6262b5",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I'll keep an eye out for anybody asking for this kind of feature.",
        "createdAt" : "2020-04-24T17:46:52Z",
        "updatedAt" : "2020-04-24T17:46:53Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "987607a23138979deff4c51bd8f98f68e3b4525b",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +342,346 @@      return;\n    }\n    assert(value != null && value.length == 1);\n    _obscuringCharacter = value;\n    markNeedsLayout();"
  },
  {
    "id" : "f6ed4c02-8160-489f-9302-d68fde43f202",
    "prId" : 71756,
    "prUrl" : "https://github.com/flutter/flutter/pull/71756#pullrequestreview-550368010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65112be7-97cd-44e2-835c-1c8fc7cd3a17",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This seems to revert the changes made in https://github.com/flutter/flutter/pull/29395. According to @mdebbar \r\n\r\n> The problem is if you drag from left to right, the text will be selected as expected. But if you drag from right to left, then baseOffset will be greater than extentOffset and it'll be collapsed down to a cursor. So dragging from right to left is broken, and this PR fixes it.\r\n\r\nNot sure why the tests are passing. But it sounds like we're not handling baseOffset > extentOffset correctly?\r\n",
        "createdAt" : "2020-12-11T09:28:54Z",
        "updatedAt" : "2020-12-14T17:47:20Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "c6680056-4284-4128-83d8-3a33f9fff714",
        "parentId" : "65112be7-97cd-44e2-835c-1c8fc7cd3a17",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah thanks for tracking that PR down.  It seems like the bug that that fixed, where the cursor would collapsed when selecting right to left, no longer happens.  Everything still seems to be fine with this PR here by my testing.\r\n\r\nI should point out that we're still reversing base and extent in the underlying TextRange.  That seems to have been around for a long time, though.\r\n\r\nhttps://github.com/flutter/flutter/blob/72aa23eb935dc9d1d667163e7ffffcb1e7319de8/packages/flutter/lib/src/services/text_editing.dart#L18-L26",
        "createdAt" : "2020-12-11T17:49:15Z",
        "updatedAt" : "2020-12-14T17:47:20Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "793b4d981e85b6ab1945e0b4527910548c470c81",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1855,1859 @@      : _textPainter.getPositionForOffset(globalToLocal(to - _paintOffset));\n\n    final int baseOffset = fromPosition.offset;\n    final int extentOffset = toPosition?.offset ?? fromPosition.offset;\n"
  },
  {
    "id" : "a18455d2-838b-48ed-b7f6-e575727896a9",
    "prId" : 72011,
    "prUrl" : "https://github.com/flutter/flutter/pull/72011#pullrequestreview-549746571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1586523-7836-411a-a81f-b0ce7ce18e46",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Any idea why these were `if`s instead of `else if`s before?  It doesn't look to me like any of them should be possible to happen at the same time.",
        "createdAt" : "2020-12-10T23:55:56Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "305c5059-3386-4f8c-8faf-813365907edd",
        "parentId" : "b1586523-7836-411a-a81f-b0ce7ce18e46",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "We used return to short circuit the rest ifs",
        "createdAt" : "2020-12-11T01:53:15Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ce30a6654661619850342c4aba0a01f5ab8c46",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +800,804 @@        );\n      }\n    } else if (key == LogicalKeyboardKey.keyA) {\n      value = TextEditingValue(\n        text: text,"
  },
  {
    "id" : "c28a5cbf-c907-4eaa-b0bf-c2a061560026",
    "prId" : 72011,
    "prUrl" : "https://github.com/flutter/flutter/pull/72011#pullrequestreview-549829642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71d5c747-4df6-44a3-af9f-1f9f53960a62",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I just realized in `EditableText._handleSelectionChanged`:\r\nhttps://github.com/flutter/flutter/blob/8df56056b4914060784e68e6b149a30319b75d3d/packages/flutter/lib/src/widgets/editable_text.dart#L2098-L2161\r\n\r\nThe `TextEditingValue` setter will get called by the `selection` setter (line 2105), which in turn sends updates the engine. So `textSelectionDelegate.textEditingValue = textSelectionDelegate.textEditingValue.copyWith(selection: newSelection);` is probably a nop (and will get short-circuited). Sorry for the misleading information in the previous comment.\r\n",
        "createdAt" : "2020-12-11T06:24:27Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ce30a6654661619850342c4aba0a01f5ab8c46",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +757,761 @@    }\n\n    _handleSelectionChange(\n      newSelection,\n      SelectionChangedCause.keyboard,"
  },
  {
    "id" : "f4cefade-5f7e-437e-8fe9-9346c029be85",
    "prId" : 72011,
    "prUrl" : "https://github.com/flutter/flutter/pull/72011#pullrequestreview-549829642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea036d15-1888-4b61-a7ca-5de28f4d9833",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "(ditto)",
        "createdAt" : "2020-12-11T06:34:13Z",
        "updatedAt" : "2020-12-11T19:03:03Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ce30a6654661619850342c4aba0a01f5ab8c46",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +816,820 @@        );\n      }\n      textSelectionDelegate.textEditingValue = value;\n    }\n  }"
  },
  {
    "id" : "8a657653-0952-4e63-a2c4-9220fe03e840",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559254573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92201ee6-d495-4755-aed4-babfb19a4bd4",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This is currently only used in `setFloatingCursor` which is triggered by platform channel messages so triggering a repaint does not seem necessary.",
        "createdAt" : "2020-12-22T22:18:26Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "048ffa8f-e2f7-4c3a-8e34-6242521080b4",
        "parentId" : "92201ee6-d495-4755-aed4-babfb19a4bd4",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What if a user has implemented their own text field using RenderEditable and they directly set floatingCursorAddedMargin for some reason?",
        "createdAt" : "2020-12-23T22:22:52Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "bd9bcc29-90ae-4cad-9e88-1948f80466b6",
        "parentId" : "92201ee6-d495-4755-aed4-babfb19a4bd4",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Currently the floating cursor implementation does not handle some edge cases properly, changing `floatingCursorAddedMargin` is one of them. The floating cursor doesn't reposition itself when the text input resizes or moves. The visual update only happens when the user moves the touch point (and we get a text channel message).",
        "createdAt" : "2020-12-28T18:25:19Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 412,
    "diffHunk" : "@@ -1,1 +1396,1400 @@  ///\n  /// Defaults to a padding with left, top and right set to 4, bottom to 5.\n  EdgeInsets floatingCursorAddedMargin;\n\n  bool _floatingCursorOn = false;"
  },
  {
    "id" : "fae447ff-3841-48cc-9855-3c88e5c6d324",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-557393551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8b19d2a-066f-40a4-94b4-beab591c08f9",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "technically this is not needed, since the selection painter will repaint with the `RenderEditable`.",
        "createdAt" : "2020-12-22T23:13:51Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +1275,1279 @@      return;\n    _selection = value;\n    _selectionPainter.highlightedRange = value;\n    markNeedsPaint();\n    markNeedsSemanticsUpdate();"
  },
  {
    "id" : "f755f9fe-ab45-46b2-a97e-12dd86ce913c",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-557393551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4c894ad-b082-4c4b-bf75-7548499a3461",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "This part is different. The caret calculation was originally partially deferred to `paint` and is now performed in `setFloatingCursor`.",
        "createdAt" : "2020-12-22T23:21:08Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 786,
    "diffHunk" : "@@ -1,1 +2300,2304 @@    _floatingCursorOn = state != FloatingCursorDragState.End;\n    _resetFloatingCursorAnimationValue = resetLerpValue;\n    if (_floatingCursorOn) {\n      _floatingCursorTextPosition = lastTextPosition;\n      final double? animationValue = _resetFloatingCursorAnimationValue;"
  },
  {
    "id" : "bff0623e-55c1-4fc2-ad05-a1e0ee60ffd8",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-557393551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76940ebe-bee8-4912-955e-ef2df8615e90",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The painter doesn't have `hitTest` or `semanticsBuilder` because these currently don't seem to have a use case.",
        "createdAt" : "2020-12-22T23:23:03Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "c8ece4b5-7b51-4e52-ba07-8020f98ca4fa",
        "parentId" : "76940ebe-bee8-4912-955e-ef2df8615e90",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The `RenderEditable` property was removed because you can use the same painter instance in different render objects simultaneously when the tree finalizes (for example in a `Hero` widget we'd keep 2 copies of the subtree so in case there's a painter in the subtree it will be attached to 2 different `RenderEditable`s). ",
        "createdAt" : "2020-12-22T23:27:44Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 951,
    "diffHunk" : "@@ -1,1 +2489,2493 @@///    and sets it as the background painter of the [RenderEditable].\n///  * [CustomPainter] a similar class which paints within a [RenderCustomPaint].\nabstract class RenderEditablePainter extends ChangeNotifier {\n\n  /// Determines whether repaint is needed when a new [RenderEditablePainter]"
  },
  {
    "id" : "cc4cb16a-4c4e-45ae-8742-a9bb5b573be4",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-557393551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaec35fc-d36b-420f-b521-0f0ce6759ca1",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Does not trigger a repaint because this is floating cursor stuff. Might need a bit of audit when we move the caret painting stuff to a different place.",
        "createdAt" : "2020-12-22T23:37:22Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 1079,
    "diffHunk" : "@@ -1,1 +2617,2621 @@  CaretChangedHandler caretPaintCallback;\n\n  bool showRegularCaret = false;\n\n  final Paint caretPaint = Paint();"
  },
  {
    "id" : "a8f23336-e04d-4eae-9558-8d7d33888a67",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559255802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93bb6dd0-dfce-47b1-bf66-25783e91163b",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Uses a different painter because of a gotcha in TestRecordingCanvas.",
        "createdAt" : "2020-12-22T23:38:15Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "fb71755a-fae2-460c-8946-d1fc35af6caf",
        "parentId" : "93bb6dd0-dfce-47b1-bf66-25783e91163b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "How is this `late` but it still has an initial value?  I think I just have never encountered this NNBD situation.",
        "createdAt" : "2020-12-23T23:14:36Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "f1ef9aa5-9071-493d-a7ba-1d19af3cf05a",
        "parentId" : "93bb6dd0-dfce-47b1-bf66-25783e91163b",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "I think this does lazy initialization. The instance variable won't be initialized until its first usage.",
        "createdAt" : "2020-12-28T18:29:04Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 1082,
    "diffHunk" : "@@ -1,1 +2620,2624 @@\n  final Paint caretPaint = Paint();\n  late final Paint floatingCursorPaint = Paint();\n\n  Color? get caretColor => _caretColor;"
  },
  {
    "id" : "a0d3d613-2653-47b8-b425-6f0342a5d3ac",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-576668811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "451788d8-c570-439b-9523-05167a1eaac2",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Am I missing where these parameters are passed in, or did you just create them to allow users to customize them?",
        "createdAt" : "2020-12-23T22:09:28Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "ece27aae-e14c-4e5c-8ed7-b330216499bc",
        "parentId" : "451788d8-c570-439b-9523-05167a1eaac2",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "`EdtiableText` does not currently pass in any painters. I'm planning to do that when we move the existing painters out. ",
        "createdAt" : "2020-12-28T19:00:32Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "899b359d-7626-41cb-a585-9dc10c39b7c6",
        "parentId" : "451788d8-c570-439b-9523-05167a1eaac2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "When we do that, would we also remove/deprecate some of the existing arguments to RenderEditable?",
        "createdAt" : "2021-01-12T21:09:10Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "2594b9b3-2376-42ab-9991-471da580dff5",
        "parentId" : "451788d8-c570-439b-9523-05167a1eaac2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Would it make sense to keep `painter` and `foregroundPainter` an implementation detail at this step of the refactoring and not expose them via the API until we move to the next step where they are actually used and other arguments are removed? To keep the API surface from getting bigger...",
        "createdAt" : "2021-01-12T22:00:17Z",
        "updatedAt" : "2021-02-01T20:42:12Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "eb871953-fcc5-45f5-b42a-bf2bc17537fa",
        "parentId" : "451788d8-c570-439b-9523-05167a1eaac2",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yeah I can do that, but I think I have a few tests to ensure adding/changing external painters works. Should I keep those tests for the next PR?",
        "createdAt" : "2021-01-26T19:03:40Z",
        "updatedAt" : "2021-02-01T20:42:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +224,228 @@    required this.textSelectionDelegate,\n    RenderEditablePainter? painter,\n    RenderEditablePainter? foregroundPainter,\n  }) : assert(textAlign != null),\n       assert(textDirection != null, 'RenderEditable created without a textDirection.'),"
  },
  {
    "id" : "a8ca1ae3-10d1-493c-810f-b78f34c63c7c",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559266369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39ed40fc-04ab-40a2-b073-c4f4ddfccbcc",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: Maybe no need for these reassignments.",
        "createdAt" : "2020-12-23T22:27:06Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "097262b7-8b73-482f-8ca7-5ab0037e5090",
        "parentId" : "39ed40fc-04ab-40a2-b073-c4f4ddfccbcc",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The local variables are here so their types can be prompted to non-null so I don't have to use `!`.",
        "createdAt" : "2020-12-28T19:03:27Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 530,
    "diffHunk" : "@@ -1,1 +1668,1672 @@  void visitChildren(RenderObjectVisitor visitor) {\n    final RenderObject? foregroundChild = _foregroundRenderObject;\n    final RenderObject? backgroundChild = _backgroundRenderObject;\n    if (foregroundChild != null)\n      visitor(foregroundChild);"
  },
  {
    "id" : "0d898f76-ad81-45d8-813f-9becbc8b078a",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559661173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5091c191-8315-4db9-bf7e-e8881906ff61",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Nit: Consider making this a static method if possible.",
        "createdAt" : "2020-12-23T22:28:55Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "0b58ea6d-e116-495c-aca0-1817433c0350",
        "parentId" : "5091c191-8315-4db9-bf7e-e8881906ff61",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "`localToGlobal` is an instance method and `_devicePixelRadio` is an instance variable so I think it makes more sense to keep it an instance method. ",
        "createdAt" : "2020-12-28T19:05:20Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "a1eadf1e-196e-419e-9d63-043231b68360",
        "parentId" : "5091c191-8315-4db9-bf7e-e8881906ff61",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ah I missed both of those, you're right 👍 ",
        "createdAt" : "2020-12-29T19:09:39Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 567,
    "diffHunk" : "@@ -1,1 +2175,2179 @@  // Computes the offset to apply to the given [sourceOffset] so it perfectly\n  // snaps to physical pixels.\n  Offset _snapToPhysicalPixel(Offset sourceOffset) {\n    final Offset globalOffset = localToGlobal(sourceOffset);\n    final double pixelMultiple = 1.0 / _devicePixelRatio;"
  },
  {
    "id" : "01e19c44-7d9c-4466-ba69-477e98f38dba",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559266369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f207a94-580d-4ad6-9dd1-186ebc36fd75",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Is this kind of based off _RenderEditableCustomPaint being like RenderCustomPaint and RenderEditablePainter being like CustomPainter?  I guess these were different enough that you couldn't reuse any of those classes?",
        "createdAt" : "2020-12-23T22:49:44Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "42fec6c7-f5ee-4c80-86b3-7331cabf9161",
        "parentId" : "7f207a94-580d-4ad6-9dd1-186ebc36fd75",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Right extending `RenderCustomPaint` is a bit of an overkill, and I had to override most methods anyway. ",
        "createdAt" : "2020-12-28T19:12:39Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 869,
    "diffHunk" : "@@ -1,1 +2407,2411 @@}\n\nclass _RenderEditableCustomPaint extends RenderBox {\n  _RenderEditableCustomPaint({\n    RenderEditablePainter? painter,"
  },
  {
    "id" : "4fb05eb9-48ff-4dfb-a62d-1fd8a66e4b8b",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-558235325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f401b3f-b9da-4fcb-a091-46dc35e450f2",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "foreground => background ?",
        "createdAt" : "2020-12-23T22:52:53Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 947,
    "diffHunk" : "@@ -1,1 +2485,2489 @@///\n///  * [RenderEditable.foregroundPainter], which takes a [RenderEditablePainter]\n///    and sets it as the foreground painter of the [RenderEditable].\n///  * [RenderEditable.painter], which takes a [RenderEditablePainter]\n///    and sets it as the background painter of the [RenderEditable]."
  },
  {
    "id" : "18d68d1a-0f59-4c7a-953c-33cb7b1c1371",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559266369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ada1570-2fac-4e31-b3f4-27a2e9a36480",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Could you explain your reasoning in taking TextRange as a parameter and passing RenderEditable into the paint method?  As opposed to maybe dealing with TextBoxes directly.  I don't disagree with the decision, I'm just curious how you designed this at a high level.",
        "createdAt" : "2020-12-23T23:08:39Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "b1b9db48-4a10-4ac1-b539-5ee3452f6921",
        "parentId" : "0ada1570-2fac-4e31-b3f4-27a2e9a36480",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "To be honest I didn't give too much thought to it. It's mostly because we previously stored text ranges in `RenderEditable` , so moving the backing instance variable to new painters is probably the path of least resistance, it's only a matter of moving the backing instance variable and change the getter/setters.\r\n\r\nAlso `TextBox`es depend on other things like the text layout I think? It feels easier to take a `TextRange` as a configuration and compute the text boxes in the paint call.",
        "createdAt" : "2020-12-28T19:30:57Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 1033,
    "diffHunk" : "@@ -1,1 +2571,2575 @@\n  @override\n  void paint(Canvas canvas, Size size, RenderEditable renderEditable) {\n    final TextRange? range = highlightedRange;\n    final Color? color = highlightColor;"
  },
  {
    "id" : "2cc7236f-3560-43b7-87b8-3ee2faa53e88",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-559661173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f927e1a2-c4b4-4a57-b4ac-87cd8aebf493",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Adding on to my previous comment about taking a RenderEditable in `paint`, I think that has some implications here too.  If the layout of the RenderEditable changes, then we do need to repaint the text highlight as well, even if this shouldRepaint method returns false.  I guess that's something that's kept track of separately, though.",
        "createdAt" : "2020-12-23T23:13:23Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "e8bdc4dd-adb0-411a-b905-8c3a46c0f2cc",
        "parentId" : "f927e1a2-c4b4-4a57-b4ac-87cd8aebf493",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "`RenderEditable.markNeedsPaint` has been overridden to call `markNeedsPaint` on both children (the render objects the fg painter and the bg painter reside in). So if a `RenderEditable` needs to repaint, both painters will repaint with it. This guarantees (I think?) the custom painters can rely on the exact metrics of the text painter without having to worry about the text layout metrics the painter sees being out-of-band.",
        "createdAt" : "2020-12-28T19:39:28Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "4b8c5ede-2eb5-4a5f-8c9b-49d9a9b85bd2",
        "parentId" : "f927e1a2-c4b4-4a57-b4ac-87cd8aebf493",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Ok that sounds good to me, it should always get repainted when needed.",
        "createdAt" : "2020-12-29T19:17:05Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 1061,
    "diffHunk" : "@@ -1,1 +2599,2603 @@        || oldDelegate.highlightedRange != highlightedRange\n        || oldDelegate.selectionHeightStyle != selectionHeightStyle\n        || oldDelegate.selectionWidthStyle != selectionWidthStyle;\n  }\n}"
  },
  {
    "id" : "4c35a9fa-f9a3-4fc2-95a1-8f3ce40e6f24",
    "prId" : 72828,
    "prUrl" : "https://github.com/flutter/flutter/pull/72828#pullrequestreview-576668811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0adc30a-cc78-4282-a8fe-68c42021bfe8",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For my understanding, the plan is to move all these painters out of this class? Or just some of them?",
        "createdAt" : "2021-01-12T21:20:57Z",
        "updatedAt" : "2021-02-01T20:42:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0af20807-213b-4eb7-9ad9-decc293e484c",
        "parentId" : "d0adc30a-cc78-4282-a8fe-68c42021bfe8",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Ideally, all of them.",
        "createdAt" : "2021-01-26T19:04:07Z",
        "updatedAt" : "2021-02-01T20:42:12Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed84c49e73d2c8b1f1c24132e940521d8937d35c",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +288,292 @@    this.hasFocus = hasFocus ?? false;\n\n    _selectionPainter.highlightColor = selectionColor;\n    _selectionPainter.highlightedRange = selection;\n    _selectionPainter.selectionHeightStyle = selectionHeightStyle;"
  },
  {
    "id" : "2c971041-3ab8-4ebd-98d9-87e69a163427",
    "prId" : 74425,
    "prUrl" : "https://github.com/flutter/flutter/pull/74425#pullrequestreview-573592226",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdbdae8f-2a4b-4cf6-9d98-f36ee8690d3d",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "This is a confusing diff, but what I did was just add this `if` clause here and wrap the existing up/down code in `else`.",
        "createdAt" : "2021-01-21T17:56:34Z",
        "updatedAt" : "2021-01-23T00:48:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cbfc15a1819c4b568add8e3b0c828c7cc1f958b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +713,717 @@    // and then back up or down.\n    if (downArrow || upArrow) {\n      if (lineModifier) {\n        if (upArrow) {\n          // Extend the selection to the beginning of the field."
  },
  {
    "id" : "7d2ba0f3-d071-4505-93ba-a742b3abe53d",
    "prId" : 74722,
    "prUrl" : "https://github.com/flutter/flutter/pull/74722#pullrequestreview-578564646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d71ed81d-3a9f-4f05-b377-86b8934a7b1b",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "The root cause of the issues is that the `caretRect` did not update to `EditableTextState._showCaretOnScreen`.",
        "createdAt" : "2021-01-27T06:12:51Z",
        "updatedAt" : "2021-01-28T12:39:15Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "92cfa394-d403-43ba-bc72-ae18e7da696d",
        "parentId" : "d71ed81d-3a9f-4f05-b377-86b8934a7b1b",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "What's the reason for splitting this stuff into a new method?  Now you must call both `_paintCaretIfNeeded` and `_updateCaretRect` back-to-back, which I worry someone might forget to do in the future.",
        "createdAt" : "2021-01-28T17:19:21Z",
        "updatedAt" : "2021-01-28T17:24:07Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9eaec0e1d1b5349d22c602f258c8535a74090f1",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2190,2194 @@      _lastCaretRect = _currentCaretRect;\n      if (onCaretChanged != null)\n        onCaretChanged!(_currentCaretRect);\n    }\n  }"
  },
  {
    "id" : "9abe5811-bf6b-4710-bef1-dce17f816b23",
    "prId" : 74722,
    "prUrl" : "https://github.com/flutter/flutter/pull/74722#pullrequestreview-577015892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4538a94-fad7-4e43-8794-436674e16003",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "We need the `cartRect` to bring `TextField` into view and scroll the long text although the `showCursor` is false.",
        "createdAt" : "2021-01-27T06:23:31Z",
        "updatedAt" : "2021-01-28T12:39:15Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9eaec0e1d1b5349d22c602f258c8535a74090f1",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +2367,2371 @@      assert(selection != null);\n      _paintCaretIfNeeded(context.canvas, effectiveOffset, selection!.extent);\n      _updateCaretRect();\n    }\n"
  },
  {
    "id" : "d72216b0-5b27-41f3-8dc0-3f0cb51e66dc",
    "prId" : 74722,
    "prUrl" : "https://github.com/flutter/flutter/pull/74722#pullrequestreview-578564646",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c01b1d6c-5972-402b-b71a-b6da36669bdf",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It seems simpler to check `_showCursor.value` inside of this method like this instead of outside like it was before 👍 .",
        "createdAt" : "2021-01-28T17:20:17Z",
        "updatedAt" : "2021-01-28T17:24:07Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9eaec0e1d1b5349d22c602f258c8535a74090f1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2175,2179 @@    _currentCaretRect = caretRect;\n\n    if (!_showCursor.value)\n      return;\n"
  },
  {
    "id" : "984bc648-c1e8-4775-ac10-eb75f9dfcfa7",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-595921955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Now that it's a public API, is it the caller's responsibility to ensure the selection is not null?",
        "createdAt" : "2021-02-07T01:06:37Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "3deda257-e28b-454c-ae1f-33ce7d807e56",
        "parentId" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Good catch, there was an assertion before.  I think I'll add the assertion back to each of these public methods.",
        "createdAt" : "2021-02-16T17:20:14Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "f817f58f-6585-4b8d-95ad-0b9ca7b8c0fc",
        "parentId" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "FYI I added https://github.com/flutter/flutter/issues/76573. These methods should probably not do anything if the selection is `null` or not `isValid`. ",
        "createdAt" : "2021-02-23T01:10:23Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9b3e187f-d04d-4176-8bf9-73e8904babf1",
        "parentId" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: also maybe worth documenting this operates on the current `selection` rather than `textSelectionDelegate.textEditingValue.selection`, as the former won't get updated until the next build phase. And what it does when `selectionEnabled` is false.",
        "createdAt" : "2021-02-23T01:20:58Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "50d680e8-85cb-422d-9fe1-49f8bc0376cc",
        "parentId" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Actually instead of exposing these methods that actually change the selection, would it be better if we just expose methods that reports the metrics (`TextSelection`)? And `Action` implementers can handle the selection change themselves, and we can probably get rid of the `textSelectionDelegate`.",
        "createdAt" : "2021-02-23T04:55:21Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "9fc054c9-9244-4009-8e91-5531b4694788",
        "parentId" : "2aea750f-2619-4249-ac9c-0a867062179c",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oh then we would have to store `_cursorResetLocation` somewhere else. ",
        "createdAt" : "2021-02-23T05:01:50Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +994,998 @@  ///\n  ///   * [extendSelectionUp], which is same but in the opposite direction.\n  void extendSelectionDown(SelectionChangedCause cause) {\n    assert(selection != null);\n"
  },
  {
    "id" : "770ab48e-ec74-4e10-b508-91c685ec629b",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-592464724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec26ff14-a4cf-4afb-b929-32a694e8011c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "_moveGivenSelectionRight has a nice little top-level comment, that would probably be useful here as well.",
        "createdAt" : "2021-02-17T19:20:45Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +732,736 @@  //\n  // If it can't be moved left, the original TextSelection is returned.\n  static TextSelection _moveGivenSelectionLeft(TextSelection selection, String text) {\n    // If the selection is already all the way left, there is nothing to do.\n    if (selection.isCollapsed && selection.extentOffset <= 0) {"
  },
  {
    "id" : "287597c2-718f-4557-9f17-f0c2ef1a46ed",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-592464724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa574cdf-ad9e-48a6-951e-d9f089bf9b96",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "nit: can we document the parameter?",
        "createdAt" : "2021-02-17T19:23:35Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +994,998 @@  ///\n  ///   * [extendSelectionUp], which is same but in the opposite direction.\n  void extendSelectionDown(SelectionChangedCause cause) {\n    assert(selection != null);\n"
  },
  {
    "id" : "f872ca13-5130-4f84-bead-760f0be3b326",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-601175140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2c5c7d-feeb-4176-bb8e-a1c78ea21c90",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Without documentation or parameter name developers would have to look at the code to figure out what the second (optional) parameter is for.",
        "createdAt" : "2021-02-23T01:50:20Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "f8c6e780-239f-4286-962a-ad4409b58b1b",
        "parentId" : "de2c5c7d-feeb-4176-bb8e-a1c78ea21c90",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Oh I just realized the parameter name `includeWhitespace` is shown in IDEs when you autocomplete, I thought it would be just the type. ",
        "createdAt" : "2021-02-23T20:14:01Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "76897d95-6017-43ca-9cd9-a7e63a5f1448",
        "parentId" : "de2c5c7d-feeb-4176-bb8e-a1c78ea21c90",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I added a bit in the docs about it anyway.  It does affect some of these methods in interesting ways that I should document.",
        "createdAt" : "2021-03-01T21:18:45Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 796,
    "diffHunk" : "@@ -1,1 +1348,1352 @@  ///   * [extendSelectionRightByWord], which is the same but in the opposite\n  ///     direction.\n  void extendSelectionLeftByWord(SelectionChangedCause cause, [bool includeWhitespace = true]) {\n    assert(selection != null);\n"
  },
  {
    "id" : "9aa4db4b-5c16-431b-8816-be57bfaec49a",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-595921955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e634a28b-f760-4a52-8736-7373ac1a96a0",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "The code is probably easier to understand with the original code comments.  ",
        "createdAt" : "2021-02-23T02:36:07Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      },
      {
        "id" : "6d5a5ddd-ce57-4e78-825c-b55f09640d0d",
        "parentId" : "e634a28b-f760-4a52-8736-7373ac1a96a0",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Not directly related to this PR: in RTL scripts, `previousCharacter` is going to move the start point further to the right.",
        "createdAt" : "2021-02-23T02:37:43Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 570,
    "diffHunk" : "@@ -1,1 +1122,1126 @@    // bounds, since _getLineAtOffset finds the line boundaries without\n    // including whitespace (like the newline).\n    final int startPoint = previousCharacter(selection!.extentOffset, _plainText, false);\n    final TextSelection selectedLine = _getLineAtOffset(TextPosition(offset: startPoint));\n"
  },
  {
    "id" : "1561e027-553f-4311-8b4e-3efd052110fc",
    "prId" : 75032,
    "prUrl" : "https://github.com/flutter/flutter/pull/75032#pullrequestreview-595921955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61d15a29-fd3d-4b03-a420-eb7655e6bd95",
        "parentId" : null,
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "nit: instead of having a bunch of methods for expanding the selection, would it make the API cleaner if we define an enum called token unit or token modifier that can be character/word/line/paragraph/document?",
        "createdAt" : "2021-02-23T04:45:03Z",
        "updatedAt" : "2021-03-11T23:06:24Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "9814f0bc8f0ce7e92a723214edbe338470e4304e",
    "line" : 559,
    "diffHunk" : "@@ -1,1 +1111,1115 @@  ///   * [expandSelectionRightByLine], which strictly grows the selection\n  ///     regardless of the order.\n  void extendSelectionLeftByLine(SelectionChangedCause cause) {\n    assert(selection != null);\n"
  },
  {
    "id" : "248877a0-68b5-4a5a-9306-8464089e29f5",
    "prId" : 75532,
    "prUrl" : "https://github.com/flutter/flutter/pull/75532#pullrequestreview-584750471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8daa29d8-b981-45fd-8932-8da5748604db",
        "parentId" : null,
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "it seems like that this is not the original PR changed, am I missing something? ",
        "createdAt" : "2021-02-05T22:12:14Z",
        "updatedAt" : "2021-02-05T22:12:14Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "2da1ceb2-5b75-40da-a8d0-8d9d62998eb7",
        "parentId" : "8daa29d8-b981-45fd-8932-8da5748604db",
        "authorId" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "body" : "I understand now , it's the conflict PR logic. ",
        "createdAt" : "2021-02-05T22:19:04Z",
        "updatedAt" : "2021-02-05T22:19:04Z",
        "lastEditedBy" : "55158e43-44b8-4ba4-b6bb-b70b394ba94f",
        "tags" : [
        ]
      },
      {
        "id" : "0350e936-1fb1-425e-a2a5-da4380780a8a",
        "parentId" : "8daa29d8-b981-45fd-8932-8da5748604db",
        "authorId" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "body" : "Yeah I had to resolve some merge conflicts in another RenderEditable PR, this is one of the places I had to change to accommodate the caret fix. See the description section",
        "createdAt" : "2021-02-05T22:26:58Z",
        "updatedAt" : "2021-02-05T22:26:59Z",
        "lastEditedBy" : "a28d4bf0-9b21-4633-a08e-c383b294a037",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b81e74e546e4d267b873461296ea42eacbe073f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +2748,2752 @@    final Color? floatingCursorColor = this.caretColor?.withOpacity(0.75);\n    // Floating Cursor.\n    if (floatingCursorRect == null || floatingCursorColor == null)\n      return;\n"
  },
  {
    "id" : "9056302b-74aa-483a-a419-fcdaf2e8a5f4",
    "prId" : 75541,
    "prUrl" : "https://github.com/flutter/flutter/pull/75541#pullrequestreview-593521497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c94d28f-a5bc-4a19-a11d-efb96e7e00de",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think you need another `@Deprecated` down on the onSelectionChanged property as well.",
        "createdAt" : "2021-02-08T19:21:12Z",
        "updatedAt" : "2021-02-19T17:47:13Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "d741c4ea-0c74-476b-80ff-f087f99be061",
        "parentId" : "5c94d28f-a5bc-4a19-a11d-efb96e7e00de",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Will onSelectionChanged continue to function as it did before until we remove this deprecation?  It looks like it may not be called anymore after this PR, or at least the behavior may change.",
        "createdAt" : "2021-02-08T19:55:44Z",
        "updatedAt" : "2021-02-19T17:47:13Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "318803a1-059c-41e5-aafb-b09a39cbf4c9",
        "parentId" : "5c94d28f-a5bc-4a19-a11d-efb96e7e00de",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think this looks good now 👍 ",
        "createdAt" : "2021-02-18T18:26:26Z",
        "updatedAt" : "2021-02-19T17:47:13Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "88688193afc038041ba190aff27e0628bf842ff2",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +169,173 @@    TextSelection? selection,\n    required ViewportOffset offset,\n    @Deprecated(\n      'Uses the textSelectionDelegate.userUpdateTextEditingValue instead. '\n      'This feature was deprecated after v1.26.0-17.2.pre.'"
  }
]