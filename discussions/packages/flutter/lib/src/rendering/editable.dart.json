[
  {
    "id" : "022d5535-02c2-495b-9bd0-3a44e1de8bb1",
    "prId" : 8237,
    "prUrl" : "https://github.com/flutter/flutter/pull/8237#pullrequestreview-22421253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we do the same thing in `RenderParagraph` ?",
        "createdAt" : "2017-02-17T04:25:50Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "bc018df2-7a47-4d81-981c-9d9660ba0031",
        "parentId" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I wasted at least 15 minutes learning that we had this code in RenderEditable at all (having first done RenderParagraph)...",
        "createdAt" : "2017-02-17T04:40:23Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "12819e4ecf4a4ec7a4d3b86c995193214d3cc7b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +404,408 @@           '${text.toString(\"$prefix   \\u2551 \")}' // TextSpan includes a newline\n           '$prefix   \\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n'\n           '${prefix.trimRight()}\\n';\n  }\n}"
  },
  {
    "id" : "a46ad0db-b6cf-47fc-ba67-86c6875a5f04",
    "prId" : 10323,
    "prUrl" : "https://github.com/flutter/flutter/pull/10323#pullrequestreview-40371919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3506e14-58da-41a5-a922-56d7c2afee42",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "FWIW, `ValueChanged<Rect>` is the same signature. (It's fine to keep this though. We often have redundant typedefs, especially in cases where we can then hook more documentation to them.)",
        "createdAt" : "2017-05-25T19:36:52Z",
        "updatedAt" : "2017-05-25T23:06:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "17459b5c0304731318b076e194972dfa46cf6664",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +29,33 @@///\n/// Used by [RenderEditable.onCaretChanged].\ntypedef void CaretChangedHandler(Rect caretRect);\n\n/// Represents a global screen coordinate of the point in a selection, and the"
  },
  {
    "id" : "1afd3f0a-677d-4bd0-b358-f50e243f5364",
    "prId" : 10576,
    "prUrl" : "https://github.com/flutter/flutter/pull/10576#pullrequestreview-42969555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's strange to have this logic at this layer.  Shouldn't this logic be in text painter or lower?",
        "createdAt" : "2017-06-08T16:04:17Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "53d18d0f-16d5-4624-b808-5d60363522e8",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, I suppose we could add an intrinsic height getting to TextPainter.",
        "createdAt" : "2017-06-08T17:43:01Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "631d263c-3a3d-4dc0-a11b-2509891975a2",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Actually that wouldn't really work. TextPainter's API consistently requires that you lay it out before you do anything like this, and there's nothing in the API that implies a layout. The whole point of this function is that it tries to avoid doing a layout if possible.",
        "createdAt" : "2017-06-08T17:48:43Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "32aa93d0-17d3-4c03-9845-1b4ba64303fc",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The real question I think is why is our logic for RenderEditable so different from our logic for RenderParagraph, when it comes to intrinsic height calculations.",
        "createdAt" : "2017-06-08T17:51:40Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ef5c7826-6cc2-45ca-bd2b-ff00d6667a88",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm deleting this code and switching RenderEditable to use RenderParagraph's logic, which more closely matches the contract for computeMinIntrinsicHeight.",
        "createdAt" : "2017-06-08T17:53:42Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f9ceeb76-3ff8-455c-afa8-4445cecf6d02",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oh, no, that's wrong too... RenderEditable wants to be as high as its maxLines if it has one. That's why they're different.",
        "createdAt" : "2017-06-08T17:58:18Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c0281ac5-511c-4d94-b6e1-2009ed260d2c",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "After looking at this more and more carefully, I have concluded as follows:\r\n\r\nRenderEditable's computeMinIntrinsicHeight was wrong. It should have been doing the same as computeMaxIntrinsicHeight (the method above). This is because it used to return that its minimum height was one line, but that's bogus since the object tries to be maxLines high and clips if it is less than that, and the docs say the min intrinsic height should be the height without clipping.\r\n\r\nRenderEditable's max intrinsic height is correct. It makes sense that it's at this level because this is some weird behaviour that TextPainter and RenderParagraph don't have or want.",
        "createdAt" : "2017-06-08T18:08:57Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "717065fbbb1d6824b647ff9b3581bc977b21609d",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +384,388 @@      int lines = 1;\n      for (int index = 0; index < text.length; index += 1) {\n        if (text.codeUnitAt(index) == 0x0A) // count explicit line breaks\n          lines += 1;\n      }"
  },
  {
    "id" : "a59bc1f3-76ba-4378-9ec5-0a4924d4e368",
    "prId" : 13250,
    "prUrl" : "https://github.com/flutter/flutter/pull/13250#pullrequestreview-80035696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "475d7304-8abd-465a-8b04-c16417f9ef18",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @HansMuller ",
        "createdAt" : "2017-11-29T23:38:32Z",
        "updatedAt" : "2017-11-29T23:38:33Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "24a043bc03c5480f7085a83923b9a0aa011c7182",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +128,132 @@       _hasFocus = hasFocus ?? false,\n       _maxLines = maxLines,\n       _selectionColor = selectionColor,\n       _selection = selection,\n       _offset = offset {"
  },
  {
    "id" : "ec71084f-b82c-460f-9494-84c964b9ccbe",
    "prId" : 13338,
    "prUrl" : "https://github.com/flutter/flutter/pull/13338#pullrequestreview-81292901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71e9f48a-0222-4bc7-9461-ed359304d947",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "We should add here that \"the keyboard\" could include the IME or the accessibility UI.",
        "createdAt" : "2017-12-04T22:03:39Z",
        "updatedAt" : "2017-12-05T18:43:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "8006f7ce-e112-4869-b2a5-e1a108755ac0",
        "parentId" : "71e9f48a-0222-4bc7-9461-ed359304d947",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Done.",
        "createdAt" : "2017-12-05T18:43:53Z",
        "updatedAt" : "2017-12-05T18:43:53Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "06ab04c5cd429adb25da8be93d1f7eaf029a3087",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +37,41 @@\n  /// The user used the keyboard to change the selection or the location of the\n  /// cursor.\n  ///\n  /// Keyboard-triggered selection changes may be caused by the IME as well as"
  },
  {
    "id" : "328707c7-faa9-4471-861f-46c75efa9494",
    "prId" : 14055,
    "prUrl" : "https://github.com/flutter/flutter/pull/14055#pullrequestreview-88642783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b629a721-96c7-4dad-a6a9-c8965109d716",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "i'm pretty sure we can simplify this by removing _longPressPosition and never setting _lastTapDownPosition to null. It doesn't seem we really depend on any of this.",
        "createdAt" : "2018-01-12T23:17:04Z",
        "updatedAt" : "2018-01-13T01:12:05Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "afe61354-efe3-4a92-856d-da5f212e1bb3",
        "parentId" : "b629a721-96c7-4dad-a6a9-c8965109d716",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "That sounds reasonable; I will submit a separate patch for that.",
        "createdAt" : "2018-01-13T01:13:53Z",
        "updatedAt" : "2018-01-13T01:13:53Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "42560449075d1ce6a7b9945cb117afc16f62a6bc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +570,574 @@\n  Offset _lastTapDownPosition;\n  Offset _longPressPosition;\n  void handleTapDown(TapDownDetails details) {\n    _lastTapDownPosition = details.globalPosition + -_paintOffset;"
  },
  {
    "id" : "bd82f3fc-287f-41c9-9469-a7027f124c82",
    "prId" : 19949,
    "prUrl" : "https://github.com/flutter/flutter/pull/19949#pullrequestreview-146907463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aeaf59f-f1c4-4030-94e8-eb5549b5d15a",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "is this missing a return statement if offset drops below 0?",
        "createdAt" : "2018-08-14T18:42:03Z",
        "updatedAt" : "2018-08-16T15:45:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "476b7ef4-1bf5-4400-b1e9-3ea7bd4826c4",
        "parentId" : "9aeaf59f-f1c4-4030-94e8-eb5549b5d15a",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-08-16T15:46:37Z",
        "updatedAt" : "2018-08-16T15:46:37Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6b8027c1851bfab3b6b6f02bd86b9db6fabf89",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +516,520 @@        return range;\n      offset = range.start - 1;\n    }\n    return null;\n  }"
  },
  {
    "id" : "d8a099ee-0bf3-4802-99e2-8ed916db5374",
    "prId" : 19949,
    "prUrl" : "https://github.com/flutter/flutter/pull/19949#pullrequestreview-146907506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "160cd9df-0afc-49b8-9bb7-a2832d0bb610",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Could you link to where this list is coming from in case we need to update it?",
        "createdAt" : "2018-08-14T18:44:00Z",
        "updatedAt" : "2018-08-16T15:45:20Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "db672e9d-d727-47d8-8798-14bb21b5fbfa",
        "parentId" : "160cd9df-0afc-49b8-9bb7-a2832d0bb610",
        "authorId" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "body" : "Done",
        "createdAt" : "2018-08-16T15:46:41Z",
        "updatedAt" : "2018-08-16T15:46:41Z",
        "lastEditedBy" : "e73873df-c6ef-4dd5-ad17-dc7a574dcf0b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6b8027c1851bfab3b6b6f02bd86b9db6fabf89",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +530,534 @@      final int codeUnit = text.codeUnitAt(i);\n      switch (codeUnit) {\n        case 0x9: // horizontal tab\n        case 0xA: // line feed\n        case 0xB: // vertical tab"
  },
  {
    "id" : "491de916-7341-4ef4-b226-7cad1e64ae51",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "we probably need to make sure that left arrow means +1 and right arrow means -1 in TextDirection.rtl text fields.",
        "createdAt" : "2018-08-21T20:51:46Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7eb35ce2-deee-450a-80e1-90ebfde91ab1",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Wait, do I need to take into account rtl text fields? I think it would be easiest to just remap left as right and vice versa.",
        "createdAt" : "2018-08-21T22:14:06Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "7730bd0b-2203-45cc-b2b4-f822b83e3e7e",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "Looks like left and right actually give the correct output even with textdirection.rtl enabled.",
        "createdAt" : "2018-08-21T23:30:36Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "5971c489-79f6-47e9-b7e2-4b50d7d130fc",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "make sure you test with actual hebrew text, otherwise the text is still left to right even though the field is right to left.",
        "createdAt" : "2018-08-22T00:12:06Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "70fb7200-3054-426d-82fb-f6e68ad1144c",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "(maybe also check what android fields do here. maybe left always means \"forward\" even in RTL?)",
        "createdAt" : "2018-08-22T00:12:30Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "05128cd5-6f58-4ed2-960f-6e75300492d6",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "That seems to be the case.",
        "createdAt" : "2018-08-22T00:13:27Z",
        "updatedAt" : "2018-08-23T21:43:06Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "183d3a6a-e031-454b-9f20-6b58b4e96b4e",
        "parentId" : "3da0b6ba-9474-424d-bcc6-82c6221807b0",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "surprising, but makes life easier for us i guess",
        "createdAt" : "2018-08-23T23:59:31Z",
        "updatedAt" : "2018-08-23T23:59:31Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +293,297 @@        _previousCursorLocation -= 1;\n    }\n    return newOffset;\n  }\n"
  },
  {
    "id" : "e2169eaf-a76c-4929-b4f4-08bc379db59e",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e732fc1-2b68-4bdc-a1d6-463a828cc1c2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "he select -> they select",
        "createdAt" : "2018-08-23T23:58:42Z",
        "updatedAt" : "2018-08-23T23:58:42Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +210,214 @@  int _baseOffset = -1;\n\n  // Holds the last location the user selected in the case that he selects all\n  // the way to the end or beginning of the field.\n  int _previousCursorLocation = -1;"
  },
  {
    "id" : "cfd44df3-3b67-441b-97f9-58483c1ce4a7",
    "prId" : 20204,
    "prUrl" : "https://github.com/flutter/flutter/pull/20204#pullrequestreview-149137765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1550190e-5b70-4f38-9a02-09032daf74a9",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "ditto",
        "createdAt" : "2018-08-23T23:58:57Z",
        "updatedAt" : "2018-08-23T23:58:57Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cce723830c555545ba632307e74a2b29825bd43f",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +252,256 @@      int newOffset = _extentOffset;\n\n      // Because the user can use multiple keys to change how he selects\n      // the new offset variable is threaded through these four functions\n      // and potentially changes after each one."
  },
  {
    "id" : "e57dd6fc-51b3-4068-bec9-b92cdaf1b5d5",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Not sure why this is necessary from reading this. Is it not used for non-floating cursor?",
        "createdAt" : "2018-11-28T08:24:39Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "547c6001-acfc-460c-ab08-1b97033ece4a",
        "parentId" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "So on iOS, the floating cursor can be rendered right up the edge of the text field on the top and bottom, and half way to the edge on the right and left. This is not used for a non floating cursor. I'd by happy to show you where it takes function tomorrow!",
        "createdAt" : "2018-11-28T23:58:33Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "d87a74d4-22dd-4f20-a1e3-f2dbdc06c3ca",
        "parentId" : "86b74c0f-1885-493f-86b4-125da48736b0",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "I see now. Maybe it's just a name tweak. Maybe floatingCursorAddedMargin or floatingCursorRectExpansion or some such.",
        "createdAt" : "2018-12-10T22:27:16Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +727,731 @@\n  /// The padding applied to text field. Used to determine the bounds when\n  /// moving the floating cursor.\n  ///\n  /// Defaults to a padding with left, right set to 3 and top, bottom to 6."
  },
  {
    "id" : "8e0646cf-16ae-4f27-8c1d-039b0dab8779",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-183424572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "assert the state",
        "createdAt" : "2018-11-28T08:36:28Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "0a83c377-6643-412e-af23-0ab8dae9e4d0",
        "parentId" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "not sure what state you mean?",
        "createdAt" : "2018-11-29T01:58:12Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      },
      {
        "id" : "71fd4a53-6068-44ce-8b18-1457419d74f9",
        "parentId" : "83a41bf4-19c1-4897-ba9f-7ec5ba7df214",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Ah right. Perhaps check _floatingCursorOn then. In general, the more instance variables there are that needs manual resetting, better it is to assert all assumptions and make things fail as early as possible if things aren't in the right state.",
        "createdAt" : "2018-12-11T07:09:25Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +1295,1299 @@\n  void _paintFloatingCaret(Canvas canvas, Offset effectiveOffset) {\n    assert(_textLayoutLastWidth == constraints.maxWidth);\n    assert(_floatingCursorOn);\n"
  },
  {
    "id" : "305100f8-dfbd-4dc5-a6fe-e1b45493e798",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-179172913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f96a59fe-0a75-4d95-9553-55d21ec34690",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Couldn't figure out what these are from reading the names. Make the names more descriptive or add comments. Also be weary of making the names too generic if they're floating cursor specific. ",
        "createdAt" : "2018-11-28T08:38:33Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +1321,1325 @@  // dragged the floating cursor offscreen. This value is used to account for the\n  // difference in the rendering position and the raw offset value.\n  Offset _relativeOrigin = const Offset(0, 0);\n  Offset _previousOffset;\n  bool _resetOriginOnLeft = false;"
  },
  {
    "id" : "f0136c66-d250-40cb-80bf-0e361a521706",
    "prId" : 24761,
    "prUrl" : "https://github.com/flutter/flutter/pull/24761#pullrequestreview-179447432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8ee781a-861b-48d2-ba2b-ad4fb115776d",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Check the behavior on Android. This whole thing might be wrong altogether. In which case, let's just move this to after painting the text. ",
        "createdAt" : "2018-11-28T08:39:45Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "81c61791-27d0-42d6-b856-0cd6d2a02eaf",
        "parentId" : "e8ee781a-861b-48d2-ba2b-ad4fb115776d",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "What do you mean by testing this on Android? Android doesn't have any devices with pressure detecting screens so this conditional will always be true if selection isn't null.",
        "createdAt" : "2018-11-28T18:23:32Z",
        "updatedAt" : "2018-12-14T01:00:48Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "796062110a2673d6617ff854e3747b4d1c3eba24",
    "line" : 236,
    "diffHunk" : "@@ -1,1 +1389,1393 @@    final Offset effectiveOffset = offset + _paintOffset;\n    if (_selection != null && !_floatingCursorOn) {\n      if (_selection.isCollapsed && _showCursor.value && cursorColor != null) {\n        _paintCaret(context.canvas, effectiveOffset, _selection.extent);\n      } else if (!_selection.isCollapsed && _selectionColor != null) {"
  },
  {
    "id" : "9dde2705-0017-4be6-b08c-d56d2a213c9d",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190469062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5842a40b-dcf0-47b9-8545-037e2c36f41b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "check null",
        "createdAt" : "2019-01-08T22:28:50Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +152,156 @@    bool paintCursorAboveText = false,\n    Offset cursorOffset,\n    double devicePixelRatio = 1.0,\n    bool enableInteractiveSelection,\n    EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5),"
  },
  {
    "id" : "16f2c369-cf3c-4ac8-a74d-5e7c89e2f69b",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-190502955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dd8f57f-6668-4d63-9469-79115748646a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Generally, everything in a render object that can be set in a constructor also needs a setter",
        "createdAt" : "2019-01-08T23:18:11Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +221,225 @@  /// Should be obtained by querying MediaQuery for the devicePixelRatio.\n  double get devicePixelRatio => _devicePixelRatio;\n  double _devicePixelRatio;\n  set devicePixelRatio(double value) {\n    if (devicePixelRatio == value)"
  },
  {
    "id" : "3b51fd66-5ff0-43ef-853d-c27f61003d6b",
    "prId" : 24876,
    "prUrl" : "https://github.com/flutter/flutter/pull/24876#pullrequestreview-196768048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4eabd20-6cac-478d-9a49-77a2cceaf13a",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "these divisions are a bit hard to read. Why not just\r\n\r\n```dart\r\nfinal Offset logicalCaretPosition = localToGlobal(caretRect.topLeft);\r\nfinal int physicalCaretX = (caretPosition.dx * _devicePixelRatio).round();\r\nfinal int physicalCaretY = (caretPosition.dy * _devicePixelRatio).round();\r\nfinal double pixelPerfectLogicalX = globalToLocal(physicalCaretX / _devicePixelRatio); // I'm not sure what the - caretPosition.dx was for\r\nfinal double pixelPerfectLogicalY = globalToLocal(physicalCaretY / _devicePixelRatio);\r\n```\r\n\r\nOtherwise, aliasing around the edge seems like 'working as intended'. Just have your test not land on .499999999-.5.",
        "createdAt" : "2019-01-25T03:16:16Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "9ef04970-4bca-464f-96cc-7c7583d72d50",
        "parentId" : "e4eabd20-6cac-478d-9a49-77a2cceaf13a",
        "authorId" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "body" : "I think I'm just going to leave this logic as is? It's supposed to give the delta logical pixels to move the rect to be physically pixel perfectly aligned. So that logic isn't really going to work.",
        "createdAt" : "2019-01-26T01:24:37Z",
        "updatedAt" : "2019-01-29T01:54:36Z",
        "lastEditedBy" : "1869f27c-20cc-484a-9a56-366b5f419547",
        "tags" : [
        ]
      }
    ],
    "commit" : "10a3f23872f11f07d2b4b56433e8211eba47bf6e",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +1354,1358 @@  Offset _getPixelPerfectCursorOffset(Rect caretRect) {\n    final Offset caretPosition = localToGlobal(caretRect.topLeft);\n    final double pixelMultiple = 1.0 / _devicePixelRatio;\n    final int quotientX = (caretPosition.dx / pixelMultiple).round();\n    final int quotientY = (caretPosition.dy / pixelMultiple).round();"
  },
  {
    "id" : "696b82f7-1c7b-4558-8e4a-474c39caba92",
    "prId" : 25055,
    "prUrl" : "https://github.com/flutter/flutter/pull/25055#pullrequestreview-187184061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf9fb2c-b75f-4e8a-924d-d07c7577ccde",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "We should probably `assert(cursorWidth != null && cursorWidth >= 0.0)` in the RenderEditable constructor. There are many other places in the code that appear to make this assumption.  Not sure if cursorWidth == 0.0 really works; if not assert that it's > 0.0.\r\n\r\n",
        "createdAt" : "2018-12-11T17:18:29Z",
        "updatedAt" : "2018-12-20T21:10:18Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "6688d8e7-5a0b-498f-abcd-c03220e002d6",
        "parentId" : "cbf9fb2c-b75f-4e8a-924d-d07c7577ccde",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It looks like cursorWidth 0.0 works and results in not showing the cursor at all, so I'm using `>=` in the assertion.",
        "createdAt" : "2018-12-20T21:05:11Z",
        "updatedAt" : "2018-12-20T21:10:18Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "50f05a619fef17fb84740485ac9aebe0c69a11c8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1062,1066 @@  double computeMaxIntrinsicWidth(double height) {\n    _layoutText(double.infinity);\n    return _textPainter.maxIntrinsicWidth + cursorWidth;\n  }\n"
  },
  {
    "id" : "c42b96f5-d605-47bf-94e5-a727df44e04c",
    "prId" : 27205,
    "prUrl" : "https://github.com/flutter/flutter/pull/27205#pullrequestreview-208664605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Based on the name of the previous variable, this would be ` minLines != null && maxLines != null`",
        "createdAt" : "2019-02-12T20:49:29Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "ede01d02-453b-4f5c-ad12-059a025a9a65",
        "parentId" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "I think the logic is the same, so:\r\n\r\n    final bool lockedBoth = minLines != null && minLines == maxLines;\r\n    // is the same as:\r\n    final bool lockedBoth = minLines != null && maxLines !== null && minLines == maxLines;\r\n\r\nI want to exclude cases like `minLines: 2, maxLines: 4`, where it will grow and not be locked.\r\n\r\nLet me know if I'm misunderstanding your comment.",
        "createdAt" : "2019-02-26T23:42:38Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "afff374b-e2c1-4fe7-99c9-b5f02326433e",
        "parentId" : "741da120-4370-4ae5-a5a8-ba6f2c653cc3",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "What I was getting it is that the meaning of LockedBoth, based on the pattern established by lockedMax, seems like it would only mean that both minLines and maxLines != null.  No big deal though, it's easy enough to see what you mean!",
        "createdAt" : "2019-02-27T17:54:31Z",
        "updatedAt" : "2019-03-08T16:59:42Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "56d0a1b6d0ab5598c651c73c6dc67d49c731d25f",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1190,1194 @@    // Lock height to maxLines if needed\n    final bool lockedMax = maxLines != null && minLines == null;\n    final bool lockedBoth = minLines != null && minLines == maxLines;\n    final bool singleLine = maxLines == 1;\n    if (singleLine || lockedMax || lockedBoth) {"
  },
  {
    "id" : "686af4d0-3261-41da-826c-6e2abb5287b0",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-206658300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3838c55b-fcd5-4ddd-8b74-59b90e976339",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Since \"from\" is required, is from = null ok? If not, assert?",
        "createdAt" : "2019-02-21T21:12:21Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "f3c7b1e7-eaf7-4adf-8076-bd6aaf848334",
        "parentId" : "3838c55b-fcd5-4ddd-8b74-59b90e976339",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Thanks. Added here and below.",
        "createdAt" : "2019-02-22T04:57:21Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1253,1257 @@  /// Select text between the global positions [from] and [to].\n  void selectPositionAt({ @required Offset from, Offset to, @required SelectionChangedCause cause }) {\n    assert(cause != null);\n    assert(from != null);\n    _layoutText(constraints.maxWidth);"
  },
  {
    "id" : "c66735ff-fa67-4592-817e-7ed535de5dfd",
    "prId" : 28242,
    "prUrl" : "https://github.com/flutter/flutter/pull/28242#pullrequestreview-206670463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Was the missing `-_paintOffset` a bug we had in the old impl? Can you add a test for this?",
        "createdAt" : "2019-02-21T21:14:10Z",
        "updatedAt" : "2019-02-22T21:43:07Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "8709bc85-b15e-4eb0-994f-2a3789772be4",
        "parentId" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "It was moved from the tap down above.",
        "createdAt" : "2019-02-22T05:01:55Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "48865b6a-7031-4c11-bf6c-42c6f1cc9113",
        "parentId" : "d854f7e3-70d7-4b70-be26-ab33132b5f7d",
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Added more tests and also fixed one related test in the material text_field_test that was asserting the wrong thing.",
        "createdAt" : "2019-02-22T06:14:41Z",
        "updatedAt" : "2019-02-22T21:43:08Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      }
    ],
    "commit" : "70433d1964a629d61c0c33acbe6e87361594c3ac",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1257,1261 @@    _layoutText(constraints.maxWidth);\n    if (onSelectionChanged != null) {\n      final TextPosition fromPosition = _textPainter.getPositionForOffset(globalToLocal(from - _paintOffset));\n      final TextPosition toPosition = to == null\n        ? null"
  },
  {
    "id" : "bb627480-ea3e-48b3-8319-5f4caaccd1b1",
    "prId" : 29395,
    "prUrl" : "https://github.com/flutter/flutter/pull/29395#pullrequestreview-215178922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I'm assuming the cursor positioning does not need adjustment?",
        "createdAt" : "2019-03-14T23:26:14Z",
        "updatedAt" : "2019-03-14T23:26:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "3f528b5a-f3cf-4f79-8aa0-3ea28cbe23eb",
        "parentId" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "authorId" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "body" : "`baseOffset` and `extendOffset` represent the cursor (or the selection) state. When `baseOffset === extentOffset`, the cursor is displayed at that position. When they are different, then they represent a range selection and Flutter will draw a selection box instead.\r\n\r\nDoes that answer your question?",
        "createdAt" : "2019-03-15T05:13:07Z",
        "updatedAt" : "2019-03-15T05:13:07Z",
        "lastEditedBy" : "8e61038c-e0e3-49db-a5f4-64b67a3393e5",
        "tags" : [
        ]
      },
      {
        "id" : "2d768dd7-b985-457c-880e-aae06b7f0cfa",
        "parentId" : "2e981026-20e1-4474-8096-2af3eceb4a90",
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "From offline discussion. Editables do remember the position of the cursor even if it's not rendered. So if you Shift + Arrow to shrink or extend the selection it will move the side corresponding to the \"extent\". It's OK if we don't support it now, but we should track it somewhere. So maybe file an issue, and ping @gspencergoog so it doesn't get lost.",
        "createdAt" : "2019-03-15T18:05:15Z",
        "updatedAt" : "2019-03-15T18:05:15Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd065291f741ed0e250bd425a4701c10afe8608",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1327,1331 @@        baseOffset = math.min(fromPosition.offset, toPosition.offset);\n        extentOffset = math.max(fromPosition.offset, toPosition.offset);\n      }\n\n      onSelectionChanged("
  },
  {
    "id" : "96ef45a3-7866-4c88-8995-1ffdbe5eb9b5",
    "prId" : 31687,
    "prUrl" : "https://github.com/flutter/flutter/pull/31687#pullrequestreview-231402715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7395407d-ffc4-4da2-8660-08ed4e1cfe3b",
        "parentId" : null,
        "authorId" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "body" : "Just for sake of the PR title, if you're changing iOS and non-iOS behavior, remove the iOS part from the description (if I understood correctly)",
        "createdAt" : "2019-04-27T00:26:55Z",
        "updatedAt" : "2019-04-30T19:59:32Z",
        "lastEditedBy" : "291e083f-dfb6-49b2-b8f5-2f0ce7f9b936",
        "tags" : [
        ]
      },
      {
        "id" : "765a081d-fa55-43b2-8bbf-45af4e9a290f",
        "parentId" : "7395407d-ffc4-4da2-8660-08ed4e1cfe3b",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "There was a value that is added here and then subtracted later, this just removes the redundant math for android",
        "createdAt" : "2019-04-27T01:13:09Z",
        "updatedAt" : "2019-04-30T19:59:32Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "25fc3e0e5ffc5671ec32eb54ea13d0cadd829573",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1504,1508 @@        return Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight + 2);\n      default:\n        return Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight - 2.0 * _kCaretHeightOffset);\n    }\n  }"
  },
  {
    "id" : "2241b8a9-6d5c-4b25-a82c-60860406cd12",
    "prId" : 32059,
    "prUrl" : "https://github.com/flutter/flutter/pull/32059#pullrequestreview-242757160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Since this is only used for testing, it might be better to keep this logic in the test.",
        "createdAt" : "2019-05-22T19:54:37Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "923037c0-c2cc-45af-aa7a-24001f959fab",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I have tried to do the comparison directly in test but was advised to put it here. How would you move it to test? ",
        "createdAt" : "2019-05-23T17:05:22Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "393dae58-47b7-4389-81f5-0d6799dd899b",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "In the test you have\r\n\r\n```dart\r\nexpect(renderEditable.isComposingText, false);\r\n```\r\n\r\nSo that would become:\r\n\r\n```dart\r\nexpect(renderEditable.text.text == null, false);\r\n```\r\n\r\nOr you could definitely move the whole separate method to the test file.\r\n\r\nIf someone else told you to move it here then it's probably fine though, I'm not sure what their reason was.  It just jumped out at me as something that didn't need to be exposed here.",
        "createdAt" : "2019-05-23T17:18:32Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "cbe485e9-af62-4533-84f2-e3a97f9bb0ca",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I think renderEditable.text.text is testing based on implementation, if someone change the composing implementation, the will need to update the test.\r\nIf we expose isComposingText, the test will be purely testing the behavior. If someone change the implementation, they will need to update isComposingText method instead of touching test.\r\n\r\nIn this case, I am more toward exposing isComposingText, but I do get we should avoid exposing method for test only.",
        "createdAt" : "2019-05-23T17:52:19Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "04d9394c-5425-4c5c-907c-6aef7acb706a",
        "parentId" : "c291e6eb-c9a2-495f-abf6-798ed8508fe9",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "That makes sense to me :+1: ",
        "createdAt" : "2019-05-28T15:41:32Z",
        "updatedAt" : "2019-06-03T19:24:48Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c6f8257a69116d6820fcb5de7d0e36c1fa8686e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +242,246 @@  ///\n  /// Text is composed when user selects it for editing. The [TextSpan] will have\n  /// children with composing effect and leave text property to be null.\n  @visibleForTesting\n  bool get isComposingText => text.text == null;"
  },
  {
    "id" : "c5a4e4b6-9a4a-4e11-9a4f-664aab15f3bb",
    "prId" : 32256,
    "prUrl" : "https://github.com/flutter/flutter/pull/32256#pullrequestreview-234767305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b406836-a24f-4abc-b6cf-688cc46bafe3",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "If the textSpan has children instead of text, we need to use this function to get the string.\r\nThis can happen when textEditingValue has composing range.",
        "createdAt" : "2019-05-07T20:14:40Z",
        "updatedAt" : "2019-05-07T20:14:41Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "f8a5ead2-cad5-4040-acb4-f7f8d7516bf6",
        "parentId" : "1b406836-a24f-4abc-b6cf-688cc46bafe3",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Sounds good. It looks like `toPlainText` is how we get the length in the rest of the file.",
        "createdAt" : "2019-05-07T21:19:28Z",
        "updatedAt" : "2019-05-07T21:19:36Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d564042a726aba51ac4a82c9f99122058e191ff",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +429,433 @@    // Set the new offset to be +/- 1 depending on which arrow is pressed\n    // If shift is down, we also want to update the previous cursor location\n    if (rightArrow && _extentOffset < text.toPlainText().length) {\n      newOffset += 1;\n      if (shift)"
  },
  {
    "id" : "446be49d-5789-4764-8cdd-a5112cc84cec",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-248855540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34ac92cf-1234-4ebf-aecf-ca2a0923e234",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "It looks like the definition of `forceLine` says that is can't be null either, so should you add an assert for that too?",
        "createdAt" : "2019-06-12T15:53:47Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +194,198 @@       assert(textSelectionDelegate != null),\n       assert(cursorWidth != null && cursorWidth >= 0.0),\n       assert(readOnly != null),\n       assert(forceLine != null),\n       assert(devicePixelRatio != null),"
  },
  {
    "id" : "12f956dd-dea6-4bcc-aa06-5f19d7e52eac",
    "prId" : 34019,
    "prUrl" : "https://github.com/flutter/flutter/pull/34019#pullrequestreview-250609301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2c446f-f7dc-4812-9cfb-f15215cb6b1c",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Instead of doing `this.forceLine = forceLine` below, could you change this line to `this.forceLine = true`?  Same with `readOnly`.\r\n\r\nI could be wrong, I always mix up this syntax with Dart.",
        "createdAt" : "2019-06-12T15:56:58Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "7c93f4d4-873b-4e85-a401-ded3fff7a050",
        "parentId" : "cf2c446f-f7dc-4812-9cfb-f15215cb6b1c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "forceLine is a setter, it complain about it cannot find the declaration of forceLine if i do it this way. I think for setter you can only initialize it in the constructor body?",
        "createdAt" : "2019-06-17T16:35:10Z",
        "updatedAt" : "2019-07-18T23:47:01Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "be32ea44e7039448da1451856923c1bc82d68e27",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +159,163 @@    this.ignorePointer = false,\n    bool readOnly = false,\n    bool forceLine = true,\n    TextWidthBasis textWidthBasis = TextWidthBasis.parent,\n    bool obscureText = false,"
  },
  {
    "id" : "2c8e52a4-664c-4057-8c06-70c4863de5c7",
    "prId" : 34676,
    "prUrl" : "https://github.com/flutter/flutter/pull/34676#pullrequestreview-260315387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43816535-540c-4315-9059-fe37512d297c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is this the right way to get the full length of the text? @GaryQian may know.",
        "createdAt" : "2019-06-19T21:43:37Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "1dbb8913-315f-4d5e-a5ac-ec2be25f56ec",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "Generally, this will indeed produce the length of the text content of the `text` object. However, to properly and explicitly handle things like PlaceholderSpan/WidgetSpans, you may have to look deeper.\r\n\r\ntoPlainText will return the concatenated contents for TextSpan. When encountering PlaceholderSpans, the placeholder span will be ignored unless includePlaceholders is true, in which case a 0xFFFC character of length 1 will be included. Whether or not you want this replacement character is a policy choice. In addition, if another text widget is nested using a WidgetSpan, the length of the nested contents will not be included.",
        "createdAt" : "2019-07-01T22:33:42Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "165688ea-2ccd-45af-9374-cd99201872fb",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "body" : "This looks like it is for obscuring text in a password like environment, which I expect would not be using PlaceholderSpans. It is hard to say what developers would expect if one were to, say, embed all of flutter gallery inline within a password field. How many character lengths is a gallery equivalent to?\r\n\r\nJust setting the includePlaceholders flag to true seems to me like a reasonable compromise, where all placeholders/inline widgets will be represented as one character.",
        "createdAt" : "2019-07-01T22:37:12Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "c0d7f839-5e59-4a67-97c5-02c9087845b5",
        "tags" : [
        ]
      },
      {
        "id" : "32d21bf8-b03b-43ff-beba-c44bfb8c32b4",
        "parentId" : "43816535-540c-4315-9059-fe37512d297c",
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "the includePlaceholders is defaulted to true. As of now, there is no way to use any other inlinespan other than textspan in RenderEditable. There is no plan to add it in until we figure out how do we serialize them. We only need to worry about text span for now.\r\n\r\nEdit, I was wrong, user can do anything if they use RenderEditable directly... but still we don't know how should we deal with non textspan. I believe let includePlaceholders defaults to true will be good enough.",
        "createdAt" : "2019-07-10T19:43:02Z",
        "updatedAt" : "2019-07-24T16:43:52Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "658008270c11d9c59d670c0ea185e6ae3908f2e6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1557,1561 @@    // If text is obscured, the entire sentence should be treated as one word.\n    if (obscureText) {\n      return TextSelection(baseOffset: 0, extentOffset: text.toPlainText().length);\n    }\n    return TextSelection(baseOffset: word.start, extentOffset: word.end);"
  },
  {
    "id" : "ee6e7bb5-0d98-4255-b432-e2a6dcf8b27e",
    "prId" : 38930,
    "prUrl" : "https://github.com/flutter/flutter/pull/38930#pullrequestreview-288872087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5084c613-a151-412a-8cab-753de684fd46",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "I am not sure how do we test _textPainter has been marked needs layout. this also apply to all the other widget.\r\nThe current test only verify renderobject is dirty after font change. unless I added a bunch of visibleforTesting for all the widgets that have textpainter",
        "createdAt" : "2019-09-16T20:12:16Z",
        "updatedAt" : "2019-09-24T16:42:06Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      }
    ],
    "commit" : "75e1926c01e4512e6b3a7a81ca90c92ccd87cbae",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +638,642 @@  void systemFontsDidChange() {\n    super.systemFontsDidChange();\n    _textPainter.markNeedsLayout();\n    _textLayoutLastMaxWidth = null;\n    _textLayoutLastMinWidth = null;"
  },
  {
    "id" : "36efd0c7-c8f1-4536-becf-41133a1e8043",
    "prId" : 42879,
    "prUrl" : "https://github.com/flutter/flutter/pull/42879#pullrequestreview-303537138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "parentId" : null,
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Why do all of these checks if onSelectionChanged exist here instead of one check inside of _handleSelectionChanged?",
        "createdAt" : "2019-10-17T15:08:01Z",
        "updatedAt" : "2019-10-17T21:27:56Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      },
      {
        "id" : "844064cb-06fc-4921-ac86-878a7174c626",
        "parentId" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I think the idea was to avoid doing the work needed to get to `_handleSelectionChanged`, but I think I'll move this up to _handleKeyEvent, and also a check in `_handleSelectionChanged`, since there are other call sites for it that aren't protected.",
        "createdAt" : "2019-10-17T18:26:41Z",
        "updatedAt" : "2019-10-17T21:27:56Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "e03a737b-8949-4fa7-a6fb-5e779082d21e",
        "parentId" : "7da73adc-86a0-4f95-8dbc-d851a5ed0136",
        "authorId" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "body" : "Sounds good.",
        "createdAt" : "2019-10-17T20:49:01Z",
        "updatedAt" : "2019-10-17T21:27:57Z",
        "lastEditedBy" : "0474385d-5aae-4093-b7fc-7f38665f8960",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c148549c5256cee072092354184543ac03e6a6",
    "line" : 574,
    "diffHunk" : "@@ -1,1 +1497,1501 @@    assert(from != null);\n    _layoutText(minWidth: constraints.minWidth, maxWidth: constraints.maxWidth);\n    if (onSelectionChanged == null) {\n      return;\n    }"
  },
  {
    "id" : "f9ad8624-59b7-412e-8b8a-3e5d67747ce2",
    "prId" : 44130,
    "prUrl" : "https://github.com/flutter/flutter/pull/44130#pullrequestreview-312630647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "491003bc-11c3-47d8-a5ff-dbae99189899",
        "parentId" : null,
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Should Alt be here as well? Alt+arrow skips word by word",
        "createdAt" : "2019-11-06T17:57:19Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2902c76e0d79bcdaf6422d5c65dbdaa5a079ca24",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +447,451 @@  static final Set<LogicalKeyboardKey> _macOsModifierKeys = <LogicalKeyboardKey>{\n    LogicalKeyboardKey.shift,\n    LogicalKeyboardKey.meta,\n    LogicalKeyboardKey.alt,\n  };"
  },
  {
    "id" : "d08c7562-bfa9-43d4-8cff-479a02be2bcb",
    "prId" : 44130,
    "prUrl" : "https://github.com/flutter/flutter/pull/44130#pullrequestreview-312630647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "751bff49-06df-4d7c-b994-6870857d6476",
        "parentId" : null,
        "authorId" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "body" : "Should Alt be here too? Alt + arrow skips word by word",
        "createdAt" : "2019-11-06T17:57:20Z",
        "updatedAt" : "2019-11-18T18:59:40Z",
        "lastEditedBy" : "13f20ac7-3d73-4c3c-9529-437d3846f1fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "2902c76e0d79bcdaf6422d5c65dbdaa5a079ca24",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +447,451 @@  static final Set<LogicalKeyboardKey> _macOsModifierKeys = <LogicalKeyboardKey>{\n    LogicalKeyboardKey.shift,\n    LogicalKeyboardKey.meta,\n    LogicalKeyboardKey.alt,\n  };"
  },
  {
    "id" : "68b912a1-1ac0-4e84-aef4-d3cf1e8dbfdf",
    "prId" : 44622,
    "prUrl" : "https://github.com/flutter/flutter/pull/44622#pullrequestreview-320201681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6508e255-668a-4705-9558-5e16a20d8183",
        "parentId" : null,
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Assert that `affinity` isn't null.",
        "createdAt" : "2019-11-20T19:03:41Z",
        "updatedAt" : "2019-11-20T20:53:15Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "64380976ea5ec21fe1c1517b4c3eff4cd7b6bca1",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +430,434 @@  ) {\n    assert(affinity != null);\n    // Engine-computed selections will always compute affinity when necessary.\n    // Cache this affinity in the case where the platform supplied selection\n    // does not provide an affinity."
  }
]