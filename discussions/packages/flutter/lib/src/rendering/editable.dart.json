[
  {
    "id" : "022d5535-02c2-495b-9bd0-3a44e1de8bb1",
    "prId" : 8237,
    "prUrl" : "https://github.com/flutter/flutter/pull/8237#pullrequestreview-22421253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Should we do the same thing in `RenderParagraph` ?",
        "createdAt" : "2017-02-17T04:25:50Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "bc018df2-7a47-4d81-981c-9d9660ba0031",
        "parentId" : "e907a7e7-dd78-4cd7-b464-f066fb4a4f20",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I wasted at least 15 minutes learning that we had this code in RenderEditable at all (having first done RenderParagraph)...",
        "createdAt" : "2017-02-17T04:40:23Z",
        "updatedAt" : "2017-02-17T04:43:27Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "12819e4ecf4a4ec7a4d3b86c995193214d3cc7b9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +404,408 @@           '${text.toString(\"$prefix   \\u2551 \")}' // TextSpan includes a newline\n           '$prefix   \\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n'\n           '${prefix.trimRight()}\\n';\n  }\n}"
  },
  {
    "id" : "a46ad0db-b6cf-47fc-ba67-86c6875a5f04",
    "prId" : 10323,
    "prUrl" : "https://github.com/flutter/flutter/pull/10323#pullrequestreview-40371919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3506e14-58da-41a5-a922-56d7c2afee42",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "FWIW, `ValueChanged<Rect>` is the same signature. (It's fine to keep this though. We often have redundant typedefs, especially in cases where we can then hook more documentation to them.)",
        "createdAt" : "2017-05-25T19:36:52Z",
        "updatedAt" : "2017-05-25T23:06:41Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "17459b5c0304731318b076e194972dfa46cf6664",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +29,33 @@///\n/// Used by [RenderEditable.onCaretChanged].\ntypedef void CaretChangedHandler(Rect caretRect);\n\n/// Represents a global screen coordinate of the point in a selection, and the"
  },
  {
    "id" : "1afd3f0a-677d-4bd0-b358-f50e243f5364",
    "prId" : 10576,
    "prUrl" : "https://github.com/flutter/flutter/pull/10576#pullrequestreview-42969555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "It's strange to have this logic at this layer.  Shouldn't this logic be in text painter or lower?",
        "createdAt" : "2017-06-08T16:04:17Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      },
      {
        "id" : "53d18d0f-16d5-4624-b808-5d60363522e8",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Yeah, I suppose we could add an intrinsic height getting to TextPainter.",
        "createdAt" : "2017-06-08T17:43:01Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "631d263c-3a3d-4dc0-a11b-2509891975a2",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Actually that wouldn't really work. TextPainter's API consistently requires that you lay it out before you do anything like this, and there's nothing in the API that implies a layout. The whole point of this function is that it tries to avoid doing a layout if possible.",
        "createdAt" : "2017-06-08T17:48:43Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "32aa93d0-17d3-4c03-9845-1b4ba64303fc",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "The real question I think is why is our logic for RenderEditable so different from our logic for RenderParagraph, when it comes to intrinsic height calculations.",
        "createdAt" : "2017-06-08T17:51:40Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "ef5c7826-6cc2-45ca-bd2b-ff00d6667a88",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm deleting this code and switching RenderEditable to use RenderParagraph's logic, which more closely matches the contract for computeMinIntrinsicHeight.",
        "createdAt" : "2017-06-08T17:53:42Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f9ceeb76-3ff8-455c-afa8-4445cecf6d02",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Oh, no, that's wrong too... RenderEditable wants to be as high as its maxLines if it has one. That's why they're different.",
        "createdAt" : "2017-06-08T17:58:18Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "c0281ac5-511c-4d94-b6e1-2009ed260d2c",
        "parentId" : "7c64a0cc-4d63-4863-a7d5-75829045bf6e",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "After looking at this more and more carefully, I have concluded as follows:\r\n\r\nRenderEditable's computeMinIntrinsicHeight was wrong. It should have been doing the same as computeMaxIntrinsicHeight (the method above). This is because it used to return that its minimum height was one line, but that's bogus since the object tries to be maxLines high and clips if it is less than that, and the docs say the min intrinsic height should be the height without clipping.\r\n\r\nRenderEditable's max intrinsic height is correct. It makes sense that it's at this level because this is some weird behaviour that TextPainter and RenderParagraph don't have or want.",
        "createdAt" : "2017-06-08T18:08:57Z",
        "updatedAt" : "2017-06-08T18:09:19Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "717065fbbb1d6824b647ff9b3581bc977b21609d",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +384,388 @@      int lines = 1;\n      for (int index = 0; index < text.length; index += 1) {\n        if (text.codeUnitAt(index) == 0x0A) // count explicit line breaks\n          lines += 1;\n      }"
  }
]