[
  {
    "id" : "edcef81d-4611-41a4-b3f0-a026040e3fe0",
    "prId" : 3516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cf17b6f-c846-4c81-af77-8cd2852a4add",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "since you mention shouldrelayout for all the other functions, maybe mention shouldrepaint here?\n",
        "createdAt" : "2016-04-24T01:15:35Z",
        "updatedAt" : "2016-04-24T04:02:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f53a5a525b0c035e3c7df9c96bff5343726e1578",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@  /// [context]. The given context is valid only within the scope of this\n  /// function call and contains information (such as the size of the container)\n  /// that is useful for picking transformation matrices for the children.\n  ///\n  /// If this function depends on information other than the given context,"
  },
  {
    "id" : "87d02834-ad8c-46fc-8ca7-3d098c875894",
    "prId" : 3516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8063bd32-ceb0-4e97-bc60-9039540137db",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "explain why RenderStack would be used rather than this.\n",
        "createdAt" : "2016-04-24T01:19:47Z",
        "updatedAt" : "2016-04-24T04:02:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f53a5a525b0c035e3c7df9c96bff5343726e1578",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +169,173 @@///\n///  * [FlowDelegate]\n///  * [RenderStack]\nclass RenderFlow extends RenderBox\n    with ContainerRenderObjectMixin<RenderBox, FlowParentData>,"
  },
  {
    "id" : "252d7653-de66-44ba-8f6f-d3dba263661d",
    "prId" : 3516,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58616479-8a0b-42e0-a78a-839d8c0823ba",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "do we have to always clip? that seems sad for an algorithm focused on speed.\n",
        "createdAt" : "2016-04-24T01:26:45Z",
        "updatedAt" : "2016-04-24T04:02:38Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9e877710-adf2-41a4-9049-16193607c013",
        "parentId" : "58616479-8a0b-42e0-a78a-839d8c0823ba",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "My worry is that it's every easy to paint outside your bounds with this class but then hit testing won't work properly.\n",
        "createdAt" : "2016-04-24T02:20:09Z",
        "updatedAt" : "2016-04-24T04:02:38Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "f53a5a525b0c035e3c7df9c96bff5343726e1578",
    "line" : 350,
    "diffHunk" : "@@ -1,1 +348,352 @@  @override\n  void paint(PaintingContext context, Offset offset) {\n    context.pushClipRect(needsCompositing, offset, Point.origin & size, _paintWithDelegate);\n  }\n"
  },
  {
    "id" : "ff0bb203-0ad5-4b76-b33b-acf4e2655861",
    "prId" : 4283,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cf85885-fcbd-4c0b-804c-92a8cb8b08a8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Seems like we repeat this branch in a bunch of places.  We could pull it out into a function.\n",
        "createdAt" : "2016-05-31T21:56:04Z",
        "updatedAt" : "2016-05-31T21:56:04Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "904526d6b6b7d2851537b1f5bdb61d2b19601059",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +266,270 @@    if (height.isFinite)\n      return height;\n    return 0.0;\n  }\n"
  },
  {
    "id" : "9673bebc-0e03-414e-9f75-affe512f4a74",
    "prId" : 84740,
    "prUrl" : "https://github.com/flutter/flutter/pull/84740#pullrequestreview-693069206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef7b6966-2e0f-4c42-8b76-9ea1eff3f7b6",
        "parentId" : null,
        "authorId" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "body" : "I know this would be a significant breaking change, but it would be nice if all `context.push*` methods would just take `LayerHandle` as an argument. Then they could be `void` because they could populate the handle internally (sort of like a `ref` parameter in C#):\r\n\r\n```dart\r\ncontext.pushClipRect(..., _clipRectLayerHandle);  // ta-da!\r\n```\r\n",
        "createdAt" : "2021-06-25T16:54:10Z",
        "updatedAt" : "2021-06-25T17:31:17Z",
        "lastEditedBy" : "ac2c92fd-803c-4666-96b1-db1044c762c5",
        "tags" : [
        ]
      },
      {
        "id" : "56733577-3e21-44ac-a9ee-fe370be6ff5a",
        "parentId" : "ef7b6966-2e0f-4c42-8b76-9ea1eff3f7b6",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "yeah, this would be nice. It may make sense to make some `pushHandle` methods and deprecate the existing ones.",
        "createdAt" : "2021-06-25T17:55:59Z",
        "updatedAt" : "2021-06-25T17:55:59Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5573ddcca8e0ffe997288923846a1c6e01ffd80",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +393,397 @@      _paintWithDelegate(context, offset);\n    } else {\n      _clipRectLayer.layer = context.pushClipRect(\n        needsCompositing,\n        offset,"
  }
]