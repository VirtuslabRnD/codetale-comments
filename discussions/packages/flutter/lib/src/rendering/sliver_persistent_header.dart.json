[
  {
    "id" : "f3b2089a-ab4e-4ac7-a7a9-ff97e548fe3f",
    "prId" : 8383,
    "prUrl" : "https://github.com/flutter/flutter/pull/8383#pullrequestreview-23666042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdafc3de-42bf-4a58-bfa5-8429b61c41f2",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "nice",
        "createdAt" : "2017-02-24T08:18:21Z",
        "updatedAt" : "2017-02-24T15:49:39Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "989187ceeed279045333bf0787abd3ceedd5fb5a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +252,256 @@}\n\nabstract class RenderSliverFloatingPersistentHeader extends RenderSliverPersistentHeader {\n  RenderSliverFloatingPersistentHeader({\n    RenderBox child,"
  },
  {
    "id" : "6e74b72b-f884-4c66-8373-18a1887feb0c",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-32166655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "769be204-4a5d-4bd2-9a79-aca7b33d11fc",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "also see also `SliverAppBar.pinned`",
        "createdAt" : "2017-04-04T03:32:59Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "37592b28-6065-43fc-88b4-808230116967",
        "parentId" : "769be204-4a5d-4bd2-9a79-aca7b33d11fc",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Done.",
        "createdAt" : "2017-04-11T17:00:09Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +261,265 @@///  * [RenderSliverFloatingPersistentHeader.maybeStartSnapAnimation] and\n///    [RenderSliverFloatingPersistentHeader.maybeStopSnapAnimation], which\n///    start or stop the floating header's animation.\n///  * [SliverAppBar], which creates a header that can be pinned, floating,\n///    and snapped into view via the corresponding parameters."
  },
  {
    "id" : "f7ab9488-2190-4c1a-952f-4fa321e011b7",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-32166676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e726249-89df-4b06-88b0-6bd099e19ef1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "also see also `SliverAppBar.pinned`",
        "createdAt" : "2017-04-04T03:33:03Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "72e6bcb0-2038-4c90-86c7-658cdbb94020",
        "parentId" : "1e726249-89df-4b06-88b0-6bd099e19ef1",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Done.\r\n",
        "createdAt" : "2017-04-11T17:00:14Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +319,323 @@  ///  * [RenderSliverFloatingPersistentHeader.maybeStartSnapAnimation] and\n  ///    [RenderSliverFloatingPersistentHeader.maybeStopSnapAnimation], which\n  ///    start or stop the floating header's animation.\n  ///  * [SliverAppBar], which creates a header that can be pinned, floating,\n  ///    and snapped into view via the corresponding parameters."
  },
  {
    "id" : "ead05e69-af9c-4f71-9638-c1b4799710c2",
    "prId" : 9156,
    "prUrl" : "https://github.com/flutter/flutter/pull/9156#pullrequestreview-30937512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df598b06-efbb-4ed5-98c1-89c8e230a83d",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "It's weird that _animation has to be a class member only because that way it gets captured correctly here and so you don't have to re-add the listener the second time you animate even though you recreate the animation.",
        "createdAt" : "2017-04-04T03:37:58Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "f5f567a0-e26c-4878-bbf2-0f9548efb3a9",
        "parentId" : "df598b06-efbb-4ed5-98c1-89c8e230a83d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I guess it also lets you get away with not actually managing the lifetime of the _animation...",
        "createdAt" : "2017-04-04T03:39:28Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9127b3a8-43a5-43f7-86f5-394f31a1f5cd",
        "parentId" : "df598b06-efbb-4ed5-98c1-89c8e230a83d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "Yes that was the idea.\r\n",
        "createdAt" : "2017-04-04T22:21:58Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "39c0554d-1aa8-474c-855f-d1444d6fc7c6",
        "parentId" : "df598b06-efbb-4ed5-98c1-89c8e230a83d",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Maybe add a comment talking about this to help future people maintaining this code.",
        "createdAt" : "2017-04-04T23:12:26Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "9fc573ce-0873-42a5-bd0c-26eb0ebcd0f4",
        "parentId" : "df598b06-efbb-4ed5-98c1-89c8e230a83d",
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "No, problem.",
        "createdAt" : "2017-04-05T00:53:54Z",
        "updatedAt" : "2017-04-12T22:03:07Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "08531c3b1713d41e827bdc7afbddcdf96f17c81c",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +368,372 @@        if (_effectiveScrollOffset == _animation.value)\n          return;\n        _effectiveScrollOffset = _animation.value;\n        markNeedsLayout();\n      });"
  },
  {
    "id" : "3915a6f2-d48c-41fd-84de-b50286e634b1",
    "prId" : 47027,
    "prUrl" : "https://github.com/flutter/flutter/pull/47027#pullrequestreview-332910662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e66636a-809f-4b8a-8e52-e10b7cdb722c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Why do we need to reduce the paintExtent by the overlap?\r\n\r\nAFAIK you can paint into the area that's overlapped by a previous sliver.",
        "createdAt" : "2019-12-16T17:42:07Z",
        "updatedAt" : "2019-12-16T18:06:31Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "e34592b6-aa4a-46f0-b2b0-424be614d86f",
        "parentId" : "7e66636a-809f-4b8a-8e52-e10b7cdb722c",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "For future reference: because we set the paintOrigin below to overlap.",
        "createdAt" : "2019-12-16T22:29:03Z",
        "updatedAt" : "2019-12-16T22:29:21Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bedddf16f7b8977aedf86df24c651e4be63fd4d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +374,378 @@    excludeFromSemanticsScrolling = overlapsContent || (constraints.scrollOffset > maxExtent - minExtent);\n    layoutChild(constraints.scrollOffset, maxExtent, overlapsContent: overlapsContent);\n    final double effectiveRemainingPaintExtent = math.max(0, constraints.remainingPaintExtent - constraints.overlap);\n    final double layoutExtent = (maxExtent - constraints.scrollOffset).clamp(0.0, effectiveRemainingPaintExtent) as double;\n    final double stretchOffset = stretchConfiguration != null ?"
  }
]