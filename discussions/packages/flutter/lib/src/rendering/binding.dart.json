[
  {
    "id" : "9931bc26-33c6-4f71-8209-f48cac79f77f",
    "prId" : 756,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fc4d9a6-109c-4dd5-84c3-fc17b60304b8",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "fancy\n",
        "createdAt" : "2015-12-05T06:21:18Z",
        "updatedAt" : "2015-12-05T06:43:33Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "f162555648c833336f148dfe419a02d577d6e4b0",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +49,53 @@  static Map<int, _PointerState> _pointers = <int, _PointerState>{};\n\n  static Iterable<PointerEvent> expand(Iterable<Pointer> packet) sync* {\n    for (Pointer datum in packet) {\n      Point position = new Point(datum.x, datum.y);"
  },
  {
    "id" : "aae9f09d-6716-4e62-89d4-5da5612902a7",
    "prId" : 3409,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a7db054-0a10-4b2f-aa11-242a8792645c",
        "parentId" : null,
        "authorId" : "29909713-5424-4233-a02b-b02672141af4",
        "body" : "Does this need to invalidate paint?  If it doesn't then you can even remove the if check above.\n",
        "createdAt" : "2016-04-19T19:05:49Z",
        "updatedAt" : "2016-04-19T19:09:40Z",
        "lastEditedBy" : "29909713-5424-4233-a02b-b02672141af4",
        "tags" : [
        ]
      },
      {
        "id" : "d3da6547-eb9f-41ea-aed3-d0919d06e1a7",
        "parentId" : "2a7db054-0a10-4b2f-aa11-242a8792645c",
        "authorId" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "body" : "I'll remove this (the check above).\n",
        "createdAt" : "2016-04-19T19:07:18Z",
        "updatedAt" : "2016-04-19T19:09:40Z",
        "lastEditedBy" : "0fc1222a-8e68-4923-bf2e-18203f0657f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d22659464ecf0e592d7613f52f369fd642ae9a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +69,73 @@        getter: () => debugRepaintRainbowEnabled,\n        setter: (bool value) {\n          debugRepaintRainbowEnabled = value;\n        }\n      );"
  },
  {
    "id" : "983a0cdd-abd3-4f27-a01a-064ca0d5f177",
    "prId" : 4808,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc3d320-c027-4406-ad2f-915e8fae4af5",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "o_O\n\nNot sure what to suggest instead. It's a bit weird to rely so explicitly on one object changing another object and having a third object be responsible for making sure the first gets called when the second needs it...\n",
        "createdAt" : "2016-07-01T19:22:38Z",
        "updatedAt" : "2016-07-01T20:07:36Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "38725013bf4f58e9479e49e18086f41cef9e088f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +143,147 @@  void ensureSemantics() {\n    if (pipelineOwner.semanticsOwner == null)\n      renderView.scheduleInitialSemantics();\n    assert(pipelineOwner.semanticsOwner != null);\n  }"
  },
  {
    "id" : "f250ee4a-730e-46b8-b284-12ea353310a3",
    "prId" : 10442,
    "prUrl" : "https://github.com/flutter/flutter/pull/10442#pullrequestreview-41847293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "parentId" : null,
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "HitTestable.hitTest() is abstract, which means that reference to super.hitTest() at line 287 below ends up flagged as unresolved by DFE.",
        "createdAt" : "2017-06-01T22:11:53Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "badf84f0-cbc4-4b8d-b733-a143c3c2db5d",
        "parentId" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "RendererBinding itself is abstract and is a mixin. This should just resolve to whatever ends up being the superclass of RendererBinding in the concrete class, surely.",
        "createdAt" : "2017-06-01T22:22:01Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "67795584-a7c9-4982-86cf-e83428e9dab5",
        "parentId" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "authorId" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "body" : "not sure how to add Peter to this comment, he should be able to confirm this, but from what I can see DFE needs concrete instance methods(this does match what the spec says if I read it right: https://github.com/gbracha/lessRestrictedMixins/blob/master/proposal.md#16151-method-lookup)",
        "createdAt" : "2017-06-01T22:29:43Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "324f8243-b35a-40e4-a3a7-2939450eef90",
        "tags" : [
        ]
      },
      {
        "id" : "8a5b53f4-e4e2-44d1-a74a-62add03957a8",
        "parentId" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "cc @peter-ahe-google",
        "createdAt" : "2017-06-01T22:51:08Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "e1a642ea-f9cd-4dff-92aa-551acc081bcc",
        "parentId" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "authorId" : "e1ae5cb5-3b2a-42dd-99c8-20f9849de9c1",
        "body" : "Yes, DFE expects to find a concrete method in the super class of the mixin with a super call. Remember that the RendererBinding is also a regular class, and when we're compiling it, we may not know yet that someone intends to use it as a mixin.\r\n\r\nMy understanding is that the language team is considering this aspect of mixins and allow you to declare intent.",
        "createdAt" : "2017-06-02T11:30:42Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "e1ae5cb5-3b2a-42dd-99c8-20f9849de9c1",
        "tags" : [
        ]
      },
      {
        "id" : "a63a5276-1448-46da-ae6e-ba7c58bc24b9",
        "parentId" : "2abe80a5-5698-48c9-9e3c-405300260d38",
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "I'm not sure how to express what we're doing today within these constraints.",
        "createdAt" : "2017-06-02T18:13:51Z",
        "updatedAt" : "2017-06-02T18:16:12Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4970dded3669f84a41c80be1c85d911c3323651",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@\n/// The glue between the render tree and the Flutter engine.\nabstract class RendererBinding extends BindingBase with SchedulerBinding, ServicesBinding, HitTestable {\n  // This class is intended to be used as a mixin, and should not be\n  // extended directly."
  },
  {
    "id" : "97daa64c-292a-429b-8134-5afd7f8edcf8",
    "prId" : 24830,
    "prUrl" : "https://github.com/flutter/flutter/pull/24830#pullrequestreview-184737125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0bb2d1e-1385-4756-b96e-3667b9a2d97c",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "why is this a rendering binding api rather than a gesture binding api?",
        "createdAt" : "2018-12-13T01:23:00Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "7021b3f3-0ba2-41de-98ce-2cfac6b78c20",
        "parentId" : "e0bb2d1e-1385-4756-b96e-3667b9a2d97c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I originally had it as a gesture binding, but since I need to be able to get to the `layer` in order to do the find, it was a layering (different kind of layer!) violation: gesture didn't depend on rendering, but rendering already depended upon gesture.  Since they're all mixins, the order matters.",
        "createdAt" : "2018-12-13T16:03:38Z",
        "updatedAt" : "2019-01-29T15:55:30Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f684a923245b2b3f1be91086d491a0128fd641fd",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +139,143 @@  /// notification.\n  MouseTracker get mouseTracker => _mouseTracker;\n  MouseTracker _mouseTracker;\n\n  /// The render tree's owner, which maintains dirty state for layout,"
  }
]