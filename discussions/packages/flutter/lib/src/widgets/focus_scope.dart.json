[
  {
    "id" : "3f3043bc-54a3-4f92-9655-3c8296bae963",
    "prId" : 30040,
    "prUrl" : "https://github.com/flutter/flutter/pull/30040#pullrequestreview-221965926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b19e0e3-654c-460b-98c0-5d3c33e0307c",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "`marker?.focusScopeNode`?",
        "createdAt" : "2019-04-02T23:20:19Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "bdf316f4-10d8-4a77-97e6-c05a67e6502f",
        "parentId" : "1b19e0e3-654c-460b-98c0-5d3c33e0307c",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "No, it's `notifier` because `_FocusMarker` is an `InheritedNotifier`, and that's the name of the field. It doesn't matter though: `_FocusMarker` isn't visible.",
        "createdAt" : "2019-04-03T02:52:49Z",
        "updatedAt" : "2019-04-22T15:41:13Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b22cd54f96244b8038b11c98b3179bf2387fab21",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +219,223 @@    assert(context != null);\n    final _FocusMarker marker = context.inheritFromWidgetOfExactType(_FocusMarker);\n    return marker?.notifier ?? context.owner.focusManager.rootScope;\n  }\n"
  },
  {
    "id" : "a946b3bd-2137-4056-9e1d-f0d1cd9cb631",
    "prId" : 30076,
    "prUrl" : "https://github.com/flutter/flutter/pull/30076#pullrequestreview-231942403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14cefe67-9f00-4938-8cef-28989d27d352",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "descendants => children,  since \"[FocusScopeNode]s group together their children\"",
        "createdAt" : "2019-04-26T22:24:04Z",
        "updatedAt" : "2019-05-10T03:17:35Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      },
      {
        "id" : "3404331a-b093-4e54-a83c-e292a892e643",
        "parentId" : "14cefe67-9f00-4938-8cef-28989d27d352",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Actually, it's the other way around: they group descendants.",
        "createdAt" : "2019-04-29T23:12:57Z",
        "updatedAt" : "2019-05-10T03:17:35Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "61e3255f29b8160319c23b5720121c3743d1149a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +386,390 @@///\n/// [FocusScopeNode]s remember the last [FocusNode] that was focused within\n/// their descendants, and can move that focus to the next/previous node, or a\n/// node in a particular direction when the [FocusNode.nextFocus],\n/// [FocusNode.previousFocus], or [FocusNode.focusInDirection] are called on a"
  },
  {
    "id" : "cf8af012-2930-4b6c-81d2-0f60e2bf0f25",
    "prId" : 32826,
    "prUrl" : "https://github.com/flutter/flutter/pull/32826#pullrequestreview-238605426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "747475e4-8664-43a7-a7f1-ee4983dfe345",
        "parentId" : null,
        "authorId" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "body" : "Is using an assert for only debug code the idiom flutter uses? I get how it works, but without the comment, I would not have known why this was in an assert.",
        "createdAt" : "2019-05-16T19:29:51Z",
        "updatedAt" : "2019-05-16T19:49:59Z",
        "lastEditedBy" : "4d6ff42b-5e54-4527-b55d-0fb7f3c5513b",
        "tags" : [
        ]
      },
      {
        "id" : "55ea6729-30ab-456b-939f-401f5ac7f233",
        "parentId" : "747475e4-8664-43a7-a7f1-ee4983dfe345",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yes, that's standard practice.",
        "createdAt" : "2019-05-16T19:55:56Z",
        "updatedAt" : "2019-05-16T19:55:56Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6e06727c54f6c4dd7aebe265e54db109cf3f8f1",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +349,353 @@  void didUpdateWidget(Focus oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    assert(() {\n      // Only update the debug label in debug builds, and only if we own the\n      // node."
  },
  {
    "id" : "33c896fa-6815-4b5b-9f7e-c2761f1b6ca1",
    "prId" : 38704,
    "prUrl" : "https://github.com/flutter/flutter/pull/38704#pullrequestreview-276150290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6afd68-d1a8-48d9-b468-a31271391b35",
        "parentId" : null,
        "authorId" : "d684363a-4114-408d-bf33-c427c7290197",
        "body" : "is this line intended?",
        "createdAt" : "2019-08-16T19:57:47Z",
        "updatedAt" : "2019-08-16T20:18:22Z",
        "lastEditedBy" : "d684363a-4114-408d-bf33-c427c7290197",
        "tags" : [
        ]
      },
      {
        "id" : "4d9b0279-46c5-40c5-bd86-e782faac5d14",
        "parentId" : "4c6afd68-d1a8-48d9-b468-a31271391b35",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Yeah, although I could revert it.  It just looked easier to read with that grouping.",
        "createdAt" : "2019-08-16T20:16:11Z",
        "updatedAt" : "2019-08-16T20:18:22Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "50692689e54347b1fa84b2d7407a858615a7de64",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +365,369 @@    focusNode.removeListener(_handleFocusChanged);\n    _focusAttachment.detach();\n\n    // Don't manage the lifetime of external nodes given to the widget, just the\n    // internal node."
  },
  {
    "id" : "6220d312-e7e0-4ee2-bedf-8cba5e47833d",
    "prId" : 49527,
    "prUrl" : "https://github.com/flutter/flutter/pull/49527#pullrequestreview-350400825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4e0b3b4-5f45-46d6-b4bb-551c42781dd2",
        "parentId" : null,
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "@gspencergoog  -this makes tests pass, and the autofocus stuff will happen in `didChangeDependencies` if the node gets reactivated.\r\n\r\nIs this expensive?  Should we be concerned about doing more work here in the case of deactivation?\r\n\r\nI've also updated the test in framework_tests to make sure that we do in fact call `didChangeDependencies` when we deactivate an element and then reinsert it to the tree.",
        "createdAt" : "2020-01-27T18:18:56Z",
        "updatedAt" : "2020-01-29T20:25:23Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      },
      {
        "id" : "71bd8501-4e19-461b-a354-fddaa181c196",
        "parentId" : "d4e0b3b4-5f45-46d6-b4bb-551c42781dd2",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "This is not terribly expensive, and needs to be done, regardless.",
        "createdAt" : "2020-01-27T18:30:31Z",
        "updatedAt" : "2020-01-29T20:25:23Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "568dfb6d-c7b3-4226-af79-cd3c45ad7866",
        "parentId" : "d4e0b3b4-5f45-46d6-b4bb-551c42781dd2",
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Can you add a comment here as to why we reparent on deactivate?\r\n\r\nFrom talking to @gspencergoog: We can't unfocus or remove the node from the tree because if the widget is moved to a different part of the tree (via global key) it should retain its focus state. That's why we temporarily park it on the root focus node (via reparent) until it either gets moved to a different part of the tree (via didChangeDependencies) or until it is disposed. ",
        "createdAt" : "2020-01-29T19:10:58Z",
        "updatedAt" : "2020-01-29T20:25:23Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "51007bdf-9d9f-4d1c-974f-12b3858b05f3",
        "parentId" : "d4e0b3b4-5f45-46d6-b4bb-551c42781dd2",
        "authorId" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "body" : "Done.",
        "createdAt" : "2020-01-29T20:25:25Z",
        "updatedAt" : "2020-01-29T20:25:25Z",
        "lastEditedBy" : "db47316c-0a85-441a-8891-3b84e8bfe474",
        "tags" : [
        ]
      }
    ],
    "commit" : "1298499e0d324f625e52c6f40f3a7a628f7cf9ea",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +405,409 @@    // focus node (via reparent) until it either gets moved to a different part\n    // of the tree (via didChangeDependencies) or until it is disposed.\n    _focusAttachment?.reparent();\n    _didAutofocus = false;\n  }"
  },
  {
    "id" : "9a4679f0-38f9-43de-bee4-3a07c96929b8",
    "prId" : 50846,
    "prUrl" : "https://github.com/flutter/flutter/pull/50846#pullrequestreview-361324764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3e86e87-3a94-4ce4-a4dd-2c62d59d0bea",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Is this a spot where we can clarify that unfocus will focus on something else instead of nothing?",
        "createdAt" : "2020-02-18T23:35:37Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "5183709f-c46f-4fcd-8d11-e0d83083a5f5",
        "parentId" : "b3e86e87-3a94-4ce4-a4dd-2c62d59d0bea",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "Well, yes, but at the moment (until https://github.com/flutter/flutter/pull/50831 lands), that's exactly where it will go.  Well, technically it focuses the `FocusManager.instance.rootScope`, but that's basically nowhere, since once that has focus, the focus traversal can't find a new node to focus.",
        "createdAt" : "2020-02-19T01:34:10Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "eb3a3d88-ead4-47df-bb18-e3815474e3f3",
        "parentId" : "b3e86e87-3a94-4ce4-a4dd-2c62d59d0bea",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "I'll update this comment once the other PR lands (added a TODO).",
        "createdAt" : "2020-02-19T01:59:07Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      },
      {
        "id" : "00d10e42-9b48-41ab-8b27-7ef1edcc0f15",
        "parentId" : "b3e86e87-3a94-4ce4-a4dd-2c62d59d0bea",
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Sgtm!",
        "createdAt" : "2020-02-19T18:18:33Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1233e6d385150130333a6337069d2bfd276ae8",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +49,53 @@/// through the [of] method. For instance, to move the focus to the next node in\n/// the focus traversal order, call `Focus.of(context).nextFocus()`. To unfocus\n/// a widget, call `Focus.of(context).unfocus()`.\n///\n/// {@tool dartpad --template=stateful_widget_scaffold}"
  },
  {
    "id" : "a42fba34-1e0c-45e0-b8d4-80290795e58e",
    "prId" : 50846,
    "prUrl" : "https://github.com/flutter/flutter/pull/50846#pullrequestreview-360778270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61112b54-c200-4eb1-8017-6fdb351ce5de",
        "parentId" : null,
        "authorId" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "body" : "Same comment here about the See Alsos",
        "createdAt" : "2020-02-18T23:38:50Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "411dcbae-f11a-4324-a720-aa6120756e05",
        "tags" : [
        ]
      },
      {
        "id" : "037db8c5-1912-4ba2-94d2-9d24a0636fd1",
        "parentId" : "61112b54-c200-4eb1-8017-6fdb351ce5de",
        "authorId" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "body" : "OK, I removed some unnecessary (or less important) references, and reorganized it a bit.",
        "createdAt" : "2020-02-19T01:56:44Z",
        "updatedAt" : "2020-02-19T18:27:10Z",
        "lastEditedBy" : "fd82dff4-bfc7-4076-8507-e7e4521446f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1233e6d385150130333a6337069d2bfd276ae8",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +266,270 @@///  * [FocusTraversalPolicy], an object used to determine how to move the focus\n///    to other nodes.\n///  * [FocusTraversalGroup], a widget that groups together and imposes a\n///    traversal policy on the [Focus] nodes below it in the widget hierarchy.\nclass Focus extends StatefulWidget {"
  }
]