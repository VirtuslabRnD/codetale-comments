[
  {
    "id" : "7c57d887-72e8-4253-9f87-da79a6d19147",
    "prId" : 832,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2032b351-8056-424a-9f39-28c715c5488e",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "Only valid after `ensureInitialized()` (or the WidgetFlutterBinding constructor) has been called. If another FlutterBinding subclass is instantiated before this one (e.g. bindings from other frameworks based on the Flutter \"rendering\" library), then WidgetFlutterBinding.instance will not be valid (and will throw in checked mode).\n",
        "createdAt" : "2015-12-09T17:06:32Z",
        "updatedAt" : "2015-12-09T17:06:32Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      },
      {
        "id" : "d62a2fe2-e12e-4da6-93dd-793448744061",
        "parentId" : "2032b351-8056-424a-9f39-28c715c5488e",
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "Done.\n",
        "createdAt" : "2015-12-09T17:23:40Z",
        "updatedAt" : "2015-12-09T17:23:40Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55858411fae9f7de2efc75400c6e706dddd5b07",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +24,28 @@  }\n\n  /// The one static instance of this class.\n  static WidgetFlutterBinding get instance => FlutterBinding.instance;\n"
  },
  {
    "id" : "c86e8053-1770-4607-ad92-34ec4caaab3b",
    "prId" : 902,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "591dc452-8e06-4ded-af5a-0978efe075a5",
        "parentId" : null,
        "authorId" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "body" : "LGTM\n",
        "createdAt" : "2015-12-14T08:28:27Z",
        "updatedAt" : "2015-12-14T08:28:27Z",
        "lastEditedBy" : "0a6b99c1-e18d-4971-abe3-b52228030462",
        "tags" : [
        ]
      }
    ],
    "commit" : "ade93651ac31fc7826474a149b804366aee475ca",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +141,145 @@/// Inflate the given widget and attach it to the screen.\nvoid runApp(Widget app) {\n  WidgetFlutterBinding.ensureInitialized()._runApp(app);\n}\n"
  },
  {
    "id" : "7b107e8e-f5d8-41ec-8f3c-1a9f535c5651",
    "prId" : 3479,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe4e59f-e0a3-496c-8654-c0dc42df6cc3",
        "parentId" : null,
        "authorId" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "body" : "It would help to explain what an observer returning true implies.\n",
        "createdAt" : "2016-04-21T22:38:42Z",
        "updatedAt" : "2016-04-21T22:58:14Z",
        "lastEditedBy" : "9ae618fc-fa71-4bc9-be97-de7c674590eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ad3589ae3edd548cfea0dda5bc11bc8a4eae50",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +142,146 @@  /// Invoked when the system pops the current route.\n  ///\n  /// This first notifies the binding observers (using\n  /// [WidgetsBindingObserver.didPopRoute]), in registration order,\n  /// until one returns true, meaning that it was able to handle the"
  },
  {
    "id" : "563ea012-14b4-476b-bc0a-e30827a4440c",
    "prId" : 3640,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30dc2f70-291d-4a38-a2c9-4784476ddaf1",
        "parentId" : null,
        "authorId" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "body" : "rather than negating the condition, switch the two branches around.\n\nAlso, oops. :-|\n",
        "createdAt" : "2016-04-29T20:13:58Z",
        "updatedAt" : "2016-04-29T20:13:58Z",
        "lastEditedBy" : "9b5a6de7-1648-432f-a400-7a47bea935d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6953097e00c9ca73af8095af528ecbee47bc458",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +208,212 @@    if (_needToReportFirstFrame) {\n      if (!_thisFrameWasUseful) {\n        _thisFrameWasUseful = true;\n      } else {\n        developer.Timeline.instantSync('Widgets completed first useful frame');"
  },
  {
    "id" : "2c460924-22cd-456f-a5a8-986d36a25906",
    "prId" : 25977,
    "prUrl" : "https://github.com/flutter/flutter/pull/25977#pullrequestreview-188785509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1504810-6e30-445d-8d24-f12df5638a4a",
        "parentId" : null,
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "Add tests verifying the service extension returns false before a frame and true after. There is also a generic test that counts the # of service extensions that should now be failing.  There are existing tests that show intercepting calls to register service extensions so they are painless to test.",
        "createdAt" : "2019-01-02T16:22:15Z",
        "updatedAt" : "2019-01-02T23:00:48Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      },
      {
        "id" : "0fb4f48c-5e11-46f3-978c-172e505b2269",
        "parentId" : "a1504810-6e30-445d-8d24-f12df5638a4a",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "use signalServiceExtension\r\nwhich is used elsewhere for 0 arg service extensions that return a value.",
        "createdAt" : "2019-01-02T16:29:09Z",
        "updatedAt" : "2019-01-02T23:00:48Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      },
      {
        "id" : "40f987a4-3b5e-4d2b-ad60-7c38a3ed72b1",
        "parentId" : "a1504810-6e30-445d-8d24-f12df5638a4a",
        "authorId" : "0a778f6e-09bf-46ed-b505-d7ff99b039d4",
        "body" : "signalServiceExtension returns no value, so I believe I'll still have to use registerServiceExtension.",
        "createdAt" : "2019-01-02T18:49:52Z",
        "updatedAt" : "2019-01-02T23:00:48Z",
        "lastEditedBy" : "0a778f6e-09bf-46ed-b505-d7ff99b039d4",
        "tags" : [
        ]
      },
      {
        "id" : "020427c7-160b-43cd-bf1a-f479a0a6e052",
        "parentId" : "a1504810-6e30-445d-8d24-f12df5638a4a",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "you are right. cases for signalServiceExtension dump to the console instead of returning.",
        "createdAt" : "2019-01-02T18:54:20Z",
        "updatedAt" : "2019-01-02T23:00:48Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2246b7ed9d9ffc732ec71d5003767688dcb5845",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +291,295 @@      );\n\n      registerServiceExtension(\n        name: 'didSendFirstFrameEvent',\n        callback: (_) async {"
  },
  {
    "id" : "63ab45ac-2933-48c2-a041-16922d1b0c7b",
    "prId" : 25977,
    "prUrl" : "https://github.com/flutter/flutter/pull/25977#pullrequestreview-189129103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8ab3879-c574-4020-8c12-c2b0b478ec10",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "I believe this could just be `'enabled': _needToReportFirstFrame` without the ternary operator (at least according to the docs anything that's JSON-encodable is ok here).",
        "createdAt" : "2019-01-03T17:45:39Z",
        "updatedAt" : "2019-01-03T17:45:58Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "72e400de-416a-47d4-8179-71b788ec1182",
        "parentId" : "f8ab3879-c574-4020-8c12-c2b0b478ec10",
        "authorId" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "body" : "That is correct. However, pragmatically, I think it is best to be consistent with the existing boolean service extensions in package:flutter which use `'false'` and `'true'`.",
        "createdAt" : "2019-01-03T18:30:53Z",
        "updatedAt" : "2019-01-03T18:30:53Z",
        "lastEditedBy" : "bd34c32e-f433-4933-84ed-f1939445c5b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2246b7ed9d9ffc732ec71d5003767688dcb5845",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +295,299 @@        callback: (_) async {\n          return <String, dynamic>{\n            'enabled': _needToReportFirstFrame ? 'false' : 'true'\n          };\n        },"
  },
  {
    "id" : "2bc1f2ee-cb5c-4b6c-a406-ad4269327d48",
    "prId" : 26605,
    "prUrl" : "https://github.com/flutter/flutter/pull/26605#pullrequestreview-200367895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "773f0fe0-9d1b-412f-9d21-72fd1950f040",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "It should probably be documented above how one could find out about the new platform brightness after this fires.",
        "createdAt" : "2019-02-04T19:02:18Z",
        "updatedAt" : "2019-02-06T23:45:11Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "0edd83b5-88ad-4e63-b67b-22223463481d",
        "parentId" : "773f0fe0-9d1b-412f-9d21-72fd1950f040",
        "authorId" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "body" : "This information will be added in the next push.",
        "createdAt" : "2019-02-06T00:18:07Z",
        "updatedAt" : "2019-02-06T23:45:11Z",
        "lastEditedBy" : "d6f7761b-a6b2-4acf-aad8-3e23f36d584d",
        "tags" : [
        ]
      }
    ],
    "commit" : "303b0442350c6b3078c32352791837951345d6cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +215,219 @@\n  /// {@macro on_platform_brightness_change}\n  void didChangePlatformBrightness() { }\n\n  /// Called when the system tells the app that the user's locale has"
  },
  {
    "id" : "e2331cea-e0aa-4a16-b0e9-418cb616da29",
    "prId" : 35297,
    "prUrl" : "https://github.com/flutter/flutter/pull/35297#pullrequestreview-257713140",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee841b4e-83ee-410d-80e4-2ede1e4a15fc",
        "parentId" : null,
        "authorId" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "body" : "Is this happening after the frame has been presented or rasterized?  The language of this PR is talking about rasterization but what I found out is that what I was really interested in is not when the frame was rasterized but when it was presented, which is a subtle difference.",
        "createdAt" : "2019-07-03T00:26:18Z",
        "updatedAt" : "2019-07-24T17:30:04Z",
        "lastEditedBy" : "b565e8d4-349d-472b-89fe-c7310f57516e",
        "tags" : [
        ]
      },
      {
        "id" : "b2423767-5da1-4ed7-8abb-e08621ade706",
        "parentId" : "ee841b4e-83ee-410d-80e4-2ede1e4a15fc",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "I'll revise the language to make it clear that:\r\n1. We're only waiting for rasterization\r\n2. Usually, the time that a frame is rasterized is very close to the time that it gets presented. Specifically, rasterization is the last expensive phase of a frame that's still in Flutter's control.",
        "createdAt" : "2019-07-03T20:13:24Z",
        "updatedAt" : "2019-07-24T17:30:04Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4454fcde82de4a830e648170e379e3350342600",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +713,717 @@        if (!kReleaseMode) {\n          developer.Timeline.instantSync('Rasterized first useful frame');\n          developer.postEvent('Flutter.FirstFrame', <String, dynamic>{});\n        }\n        if (oldCallback != null) {"
  },
  {
    "id" : "96670b7f-17d4-4e87-a871-bc0fae17bea7",
    "prId" : 35297,
    "prUrl" : "https://github.com/flutter/flutter/pull/35297#pullrequestreview-259806043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffecc7d3-139b-48f3-8f66-d304c01c4685",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Is there value in doing all of this in release mode? Or should this be guarded to only profile and debug mode?",
        "createdAt" : "2019-07-09T17:11:54Z",
        "updatedAt" : "2019-07-24T17:30:04Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "43f9a92d-6096-4756-9f4b-f1f8ec4ac8f0",
        "parentId" : "ffecc7d3-139b-48f3-8f66-d304c01c4685",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "I added this to release mode so `_firstFrameCompleter` and thus `WidgetsBinding.firstFrameRasterized` is available in the release mode. It might be useful to handle the splash screen during add2app?",
        "createdAt" : "2019-07-09T23:32:26Z",
        "updatedAt" : "2019-07-24T17:30:04Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4454fcde82de4a830e648170e379e3350342600",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +706,710 @@    }());\n\n    if (_needToReportFirstFrame && _reportFirstFrame) {\n      assert(!_firstFrameCompleter.isCompleted);\n      // TODO(liyuqian): use a broadcast stream approach"
  },
  {
    "id" : "1b6e25d4-63dc-40b8-a3f8-8ac1c08d2757",
    "prId" : 37192,
    "prUrl" : "https://github.com/flutter/flutter/pull/37192#pullrequestreview-268556404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92d65c75-1dd2-4169-8128-b6bed30bd739",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "Add a \"see also\" section linking to the future version?",
        "createdAt" : "2019-07-30T07:47:39Z",
        "updatedAt" : "2019-07-30T17:50:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "52e9e20a-a4a6-424a-87df-03f59b41dde9",
        "parentId" : "92d65c75-1dd2-4169-8128-b6bed30bd739",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "Done.",
        "createdAt" : "2019-07-30T17:40:22Z",
        "updatedAt" : "2019-07-30T17:50:49Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "662638e3e155efc2e054c6ee5b571d8561591ef1",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +576,580 @@  ///  * [waitUntilFirstFrameRasterized], the future when [firstFrameRasterized]\n  ///    becomes true.\n  bool get firstFrameRasterized => _firstFrameCompleter.isCompleted;\n\n  /// A future that completes when the Flutter engine has rasterized the first"
  },
  {
    "id" : "ef6d4257-ac98-4257-82cb-642dde1ec4b0",
    "prId" : 37192,
    "prUrl" : "https://github.com/flutter/flutter/pull/37192#pullrequestreview-268556404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d3490de-0c1d-4c0c-b904-e5de517c007c",
        "parentId" : null,
        "authorId" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "body" : "The name is a little misleading because calling the getter doesn't actually wait for anything. The caller has to do the waiting by awaiting on the result. Not sure what a better name would be, though...",
        "createdAt" : "2019-07-30T07:49:17Z",
        "updatedAt" : "2019-07-30T17:50:43Z",
        "lastEditedBy" : "d61ab95a-0bf0-4571-9098-19991dd821ca",
        "tags" : [
        ]
      },
      {
        "id" : "ce34a864-d1ba-481b-afee-65b72465888f",
        "parentId" : "7d3490de-0c1d-4c0c-b904-e5de517c007c",
        "authorId" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "body" : "I can't think of a better name either. But since Dart never has a synchronous waiting mechanism, it seems to be Ok to return a Future for a `waitUntilXYZ` function? The only way to wait in Dart is `await` (see, e.g., https://github.com/flutter/flutter/blob/master/packages/flutter_driver/lib/src/extension/extension.dart#L242)?",
        "createdAt" : "2019-07-30T17:50:09Z",
        "updatedAt" : "2019-07-30T17:50:49Z",
        "lastEditedBy" : "0dfb4b67-cdbe-4905-93ea-e8b19d917e2a",
        "tags" : [
        ]
      }
    ],
    "commit" : "662638e3e155efc2e054c6ee5b571d8561591ef1",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +586,590 @@  ///\n  ///  * [firstFrameRasterized], whether this future has completed or not.\n  Future<void> get waitUntilFirstFrameRasterized => _firstFrameCompleter.future;\n\n  /// Whether the first frame has finished building."
  }
]